
&НаКлиенте
Процедура ВывестиОтчет(Команда)
	// Вставить содержимое обработчика.
	МассивКМ=Новый СписокЗначений;
	Для Каждого Стр Из Элементы.КМИзAPI.ВыделенныеСтроки Цикл
		Стр_1=Объект.КМИзAPI.НайтиПоИдентификатору(Стр);
		Если ЗначениеЗаполненО(Стр_1.НомерКМ_Короткий) Тогда
			МассивКМ.Добавить(Стр_1.НомерКМ_Короткий);
		КонецЕсли;
		
	Конеццикла;
	
	Форм=ОткрытьФорму("Отчет.ОтчетПоКМ_ХамелеонЦРПТ.Форма.ФормаОтчета");
	Форм.ПрименитьОтбор(МассивКМ);
	
КонецПроцедуры


&НаКлиенте
Процедура ОпределитьСтатусПоФармацевтике(Thumbprint_1,МассивКМ)
	
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
					Иначе
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		
		
		

				СРегистра="";///Thumbprint_1.Thumbprint_1;
				Если Не ЗначениеЗаполнено(СРегистра) тогда
					Попытка
						СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
					исключение
						СРегистра=Неопределено;
					КонецПопытки;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Срегистра) Тогда
					Возврат;
				Конецесли;
				
		Пока МассивКМ.Количество()>0 Цикл
		 	МассивОпределям=Новый Массив;
			МассивОпределям.Очистить();
			КоличествоПр=Мин(1,МассивКМ.Количество());
			Для Сч=1 По КоличествоПр Цикл
				МассивОпределям.Добавить(МассивКМ[0]);
				МассивКМ.Удалить(0);
			Конеццикла;
		 	ВернутьСтатусы=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьСтатусыПоМассивуКМ_Лекарства(Thumbprint_1,Срегистра,МассивОпределям);
			
			Для Каждого Стр_1 Из ВернутьСтатусы Цикл
				Нстрок=Объект.КМИзAPI.НайтиСтроки(Новый Структура("НомерКМ_Короткий",Стр_1.cis));
				Нстрок[0].Статус=Стр_1.Статус;
			Конеццикла;
			
			
		Конеццикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьстатусыКМ(МассивКМ)
	
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
		
		ОпределитьСтатусПоФармацевтике(Thumbprint_1,МассивКМ);
		
		Возврат;
				 
				 
	КонецЕсли;	
	
	
	СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
	СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
	Если Не ЗначениеЗаполнено(СРегистра)  Тогда
		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
	Иначе
		   	
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
			Прокси=Новый ИнтернетПрокси;
			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		Иначе
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
				
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
		Если Ответ.КодСостояния<>200 Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Сообщить("Не удалось подключиться к ЦРПТ");
			Возврат;
		КонецЕсли;
	КонецЕсли;

		
		
	Если Не ЗначениеЗаполнено(Срегистра) Тогда
					Возврат;
				Конецесли;
				
	
   НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();

   Если НаСервере Тогда
	// Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Стр_1.Марка);  
	Иначе
		Пока МассивКМ.Количество()>0 Цикл
		 	МассивОпределям=Новый Массив;
			МассивОпределям.Очистить();
			КоличествоПр=Мин(50,МассивКМ.Количество());
			Для Сч=1 По КоличествоПр Цикл
				МассивОпределям.Добавить(МассивКМ[0]);
				МассивКМ.Удалить(0);
			Конеццикла;
		 	ВернутьСтатусы=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьСтатусыПоМассивуКМ(Thumbprint_1,Срегистра,МассивОпределям);
			
			Для Каждого Стр_1 Из ВернутьСтатусы Цикл
				Нстрок=Объект.КМИзAPI.НайтиСтроки(Новый Структура("НомерКМ_Короткий",Стр_1.cis));
				Нстрок[0].Статус=Стр_1.Статус;
			Конеццикла;
			
			
		Конеццикла;
		
		
	КонецЕсли;

КонецПроцедуры


&НаСервереБезКонтекста
Процедура ЗаписатьОтветвЗаказ(Ссылка,Ответ_1)
	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Ссылка);
	РегДв.Отбор.Вид.Установить("Получили ответ");
	Добав=РегДв.Добавить();
	Добав.Документ=Ссылка;
	Добав.Вид="Получили ответ";
	Добав.Файл=Новый ХранилищеЗначения(Ответ_1,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
	
КонецПроцедуры

Функция                      ВернутьGTIN(GTIN)
	Возврат дополнитьСтроку(GTIN.GTIN)КонецФункции


Функция ЗагрузканаСервереПолучитьКМИзФЗШ_Обувь(ПараметрыДлякилента,Адрес,Порт)
		
		    Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,);
			КонецЕсли;
			
			
			КоличествоОгранчений=0;
					ВРегистре=Вргеистре(КоличествоОгранчений);
					Если ВРегистре ИЛИ Объект.Товары.Итог("КоличествоКМ")>КоличествоОгранчений Тогда
						 //Состояние("Получение "+Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
						 //0);
						
						НомерПП=0;
						Для Каждого Стр Из Объект.Товары Цикл
							НомерПП=НомерПП+1;
							Пока Стр.КоличествоКМ-Стр.КоличествоПолучено>0 Цикл
								
								Получить=Мин(Стр.КоличествоКМ-Стр.КоличествоПолучено,10000);
								
								//HTTPЗапрос = Новый HTTPЗапрос("api/codes?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
								//Формат(Получить,"ЧГ=")+"&lastBlockId=0&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								HTTPЗапрос = Новый HTTPЗапрос("api/codes?orderId="+Объект._Order_ID+"&orderLineId="+Стр.ИДСУЗ+"&quantity="+
								Формат(Получить,"ЧГ="));
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
								ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
								Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
									ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП);
								КонецЕсли;
								//Стр.КоличествоПолучено=Получить;
								 Попытка
									//ЧтениеJSON = Новый ЧтениеJSON;
									//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
															Если Ответ.КодСостояния=200 Тогда
								НеобходимоВсеНаСервереДелать(ТекстДокумента,Стр.ID);
								
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
								Стр.КоличествоПолучено=Стр.КоличествоКМ;
								ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								
								
								
								
								
								
												 //Состояние("Получено "+Формат(Объект.Товары.Итог("КоличествоПолучено"),"ЧГ=")+" из "+
												 //Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
												 //Окр(Объект.Товары.Итог("КоличествоПолучено")*100/Объект.Товары.Итог("КоличествоКМ")));
									
								//НайтиВсеOrderlineПоНомеркуКМ();
							Иначе
								стр.СтатусСтроки="Отказ";
								NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
						
								Если NNN.success=Ложь Тогда
								globalErrors="";
								Для Каждого Стр_1 Из NNN.globalErrors Цикл
									globalErrors=globalErrors+Стр_1+"
									|"
								Конеццикла;
								Стр.ОшибкаПолучения=globalErrors;
								Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: EXHAUSTED")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ;
											Стр.СтатусСтроки="Получено";
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
											
										Конецесли;
										Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: PENDING")>0 Тогда
											Стр.СтатусСтроки="Обработка в ЦРПТ";
											Возврат Ложь;;
										Конецесли;

										Если Найти(globalErrors,"Not enough balance")>0 Тогда
											Сообщить("Необходимо пополнить баланс в ЦРПТ");
										Конецесли;
										
								Сообщить("Не удалось обработать документ: "+globalErrors);
								Если Найти(globalErrors,"Требуемое количество ")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=Число(СокрЛП(Сред(globalErrors,Найти(globalErrors,"осталось использовать ")+22)));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
						
						
						КонецЕсли;
									
									ЭтаФорма.Записать();
								ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше,чем размер буфера")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше, чем размер буфера")>0 Тогда
			
						НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								ИначеЕсли Найти(globalErrors,"DELETE")>0 Тогда
									Стр.КоличествоПолучено=Стр.КоличествоКМ ; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
						
						КонецЕсли;
									
										 ЭтаФорма.Записать();
								Конецесли;

									ИначеЕсли NNN.success=Истина Тогда
										   Прервать;
										
									   КонецЕсли;
									   
									   
									   
									   
									  КонецЕсли; 
								Исключение
									
									Сообщить("Ошибка "+Ответ.ПолучитьТелоКакСтроку());
								 КонецПопытки;
								
								
							Конеццикла;
						КонецциклА;
						
					Иначе
						//Состояние("Получение "+Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
						 //0);
					
						НомерПП=0;
						Для Каждого Стр Из Объект.Товары Цикл
						НомерПП=НомерПП+1;
//	HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
//								Формат(Стр.КоличествоКМ,"ЧГ=")+"&lastBlockId=0&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
									HTTPЗапрос = Новый HTTPЗапрос("api/codes?orderId="+Объект._Order_ID+"&orderLineId="+Стр.ИДСУЗ+"&quantity="+
								Формат(Стр.КоличествоКМ,"ЧГ="));
												HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
						Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
							ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП);
						КонецЕсли;
						
						Попытка
							//ЧтениеJSON = Новый ЧтениеJSON;
							//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
													Если Ответ.КодСостояния=200 Тогда
								НеобходимоВсеНаСервереДелать(ТекстДокумента,Стр.ID);
								
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
								Стр.КоличествоПолучено=Стр.КоличествоКМ;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
												 //Состояние("Получено "+Формат(Объект.Товары.Итог("КоличествоПолучено"),"ЧГ=")+" из "+
												 //Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
												 //Окр(Объект.Товары.Итог("КоличествоПолучено")*100/Объект.Товары.Итог("КоличествоКМ")));
									
								//НайтиВсеOrderlineПоНомеркуКМ();
							Иначе
								стр.СтатусСтроки="Отказ";
								NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
						
								Если NNN.success=Ложь Тогда
								globalErrors="";
								Для Каждого Стр_1 Из NNN.globalErrors Цикл
									globalErrors=globalErrors+Стр_1+"
									|"
								Конеццикла;
								Стр.ОшибкаПолучения=globalErrors;
								Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: EXHAUSTED")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ;
											Стр.СтатусСтроки="Получено";
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
										Конецесли;
										Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: PENDING")>0 Тогда
											Стр.СтатусСтроки="Обработка в ЦРПТ";
											Возврат Ложь;;
										Конецесли;

										Если Найти(globalErrors,"Not enough balance")>0 Тогда
											Сообщить("Необходимо пополнить баланс в ЦРПТ");
										Конецесли;
										
								Сообщить("Не удалось обработать документ: "+globalErrors);
								Если Найти(globalErrors,"Требуемое количество ")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=Число(СокрЛП(Сред(globalErrors,Найти(globalErrors,"осталось использовать ")+22)));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
						
						КонецЕсли;
									
										 ЭтаФорма.Записать();
								ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше,чем размер буфера")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше, чем размер буфера")>0 Тогда
			
						НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								ИначеЕсли Найти(globalErrors,"DELETE")>0 Тогда
									Стр.КоличествоПолучено=Стр.КоличествоКМ ; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
						
						КонецЕсли;
									
										 ЭтаФорма.Записать();
								Конецесли;

							ИначеЕсли NNN.success=Истина Тогда
								
								
							КонецЕсли;
		
	КонецЕсли;
							
							
						Исключение
							
							Сообщить("Ошибка "+Ответ.ПолучитьТелоКакСтроку());
						КонецПопытки;
						
					КонецЦикла;
				КонецЕсли;
				

Возврат Истина
КонецФункции

&НаКлиенте
Процедура ПолучитьКМИзAPI_ОбувьСУЗ()
	Если Не ЗначениеЗаполнено(Объект._Order_ID) Тогда
		Возврат;
	КонецЕслИ;
	
		
	ЭтаФорма.Модифицированность=Истина;
	
	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Текст=Форм.Пользователь;
	Форм.Пользователь=Объект.ТекущийПользователь;
	ПараметрыДлякилента=Неопределено;
	Если Форм.НаКлиенте(ПараметрыДлякилента) Тогда
		Форм.Пользователь=Текст;
	
				АдресРаздробить=ПараметрыДлякилента.АдресСУЗ;
				Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
				Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
				Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
				Порт=Сред(Порт,Найти(Порт,":")+1);
				Попытка
					Порт=число(Порт);
				Исключение
					Порт=Неопределено;
				КонецПопытки;
							Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;

				
		Если ОбработкаWEBНаСервере Тогда
				Если НЕ ЗагрузканаСервереПолучитьКМИзФЗШ_Обувь(ПараметрыДлякилента,Адрес,Порт) Тогда
							ПоказатьПредупреждение(,"Не удалось подключиться к СУЗ");
			
				КонецЕсли;
				
				
			Иначе
					Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
					
						HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,,Защищ);
					Иначе
						HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,,Защищ);
					КонецЕсли;
					
					КоличествоОгранчений=0;
					ВРегистре=Вргеистре(КоличествоОгранчений);
					Если ВРегистре ИЛИ Объект.Товары.Итог("КоличествоКМ")>КоличествоОгранчений Тогда
						 Состояние("Получение "+Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
						 0);
						
						НомерПП=0;
						Для Каждого Стр Из Объект.Товары Цикл
							НомерПП=НомерПП+1;
							Пока Стр.КоличествоКМ-Стр.КоличествоПолучено>0 Цикл
								
								Получить=Мин(Стр.КоличествоКМ-Стр.КоличествоПолучено,10000);
								
								HTTPЗапрос = Новый HTTPЗапрос("api/codes?orderId="+Объект._Order_ID+"&orderLineId="+Стр.ИДСУЗ+"&quantity="+
								Формат(Получить,"ЧГ="));
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
								ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
								Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
									ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП);
								КонецЕсли;
								//Стр.КоличествоПолучено=Получить;
								 Попытка
									//ЧтениеJSON = Новый ЧтениеJSON;
									//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
									Если Ответ.КодСостояния=200 Тогда
										НеобходимоВсеНаСервереДелать(ТекстДокумента,Стр.ID);
								//сТР.ОшибкаПолучения="Получено";
						

									   	// ЭтаФорма.Прочитать();
									        	 Стр.КоличествоПолучено=Стр.КоличествоПолучено+Получить; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
						
						КонецЕсли;
												 
												 ЭтаФорма.Записать();
												 Состояние("Получено "+Формат(Объект.Товары.Итог("КоличествоПолучено"),"ЧГ=")+" из "+
												 Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
												 Окр(Объект.Товары.Итог("КоличествоПолучено")*100/Объект.Товары.Итог("КоличествоКМ")));
										//НайтиВсеOrderlineПоНомеркуКМ();
									Иначе
										
										
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
										
										
										Если NNN.success=Ложь Тогда
										globalErrors="";
										Для Каждого Стр_1 Из NNN.globalErrors Цикл
											globalErrors=globalErrors+Стр_1+"
											|"
										Конеццикла;
										Стр.ОшибкаПолучения=globalErrors;
										Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: EXHAUSTED")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ;
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
									ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));

						КонецЕсли;
										Конецесли;
										
										Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: PENDING")>0 Тогда
											Прервать;;
										Конецесли;
										
										Если Найти(globalErrors,"Not enough balance")>0 Тогда
											Сообщить("Необходимо пополнить баланс в ЦРПТ");
										Конецесли;
										
										Сообщить("Не удалось обработать документ: "+globalErrors);
										Если Найти(globalErrors,"Quantity must be less or equals buffer size")>0 Тогда
											
											Дальше=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Buffer size: ")+13));
											ЧислоОсталось=Число(СокрЛП(Сред(Дальше,1,Найти(Дальше,".")-1)));
											Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
						
						КонецЕсли;
												 ЭтаФорма.Записать();
												 НеНадоОбновлятьСтатус=Истина;
											ИначеЕсли Найти(globalErrors,"Требуемое количество ")>0 Тогда
											ЧислоОсталось=Число(СокрЛП(Сред(globalErrors,Найти(globalErrors,"осталось использовать ")+22)));
											Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
						
						КонецЕсли;
												 ЭтаФорма.Записать();
												 НеНадоОбновлятьСтатус=Истина;
								ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше,чем размер буфера")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
										 ЭтаФорма.Записать();
		ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше, чем размер буфера")>0 Тогда
			
						НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
										ИначеЕсли Найти(globalErrors,"DELETE")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ ; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
						
						КонецЕсли;
											
												 ЭтаФорма.Записать();
										Конецесли;
										
									ИначеЕсли NNN.success=Истина Тогда
										   Прервать;
										
									   КонецЕсли;
									   Прервать;
									  КонецЕсли; 
								Исключение
									
									Сообщить("Ошибка "+Ответ.ПолучитьТелоКакСтроку());
								 КонецПопытки;
								
								
							Конеццикла;
						КонецциклА;
						
					Иначе
						Состояние("Получение "+Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
						 0);
					
						НомерПП=0;
						Для Каждого Стр Из Объект.Товары Цикл
						НомерПП=НомерПП+1;
	HTTPЗапрос = Новый HTTPЗапрос("api/codes?orderId="+Объект._Order_ID+"&orderLineId="+Стр.ИДСУЗ+"&quantity="+
								Формат(Стр.КоличествоКМ,"ЧГ="));
													HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
						Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
							ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП);
						КонецЕсли;
						
						Попытка
							//ЧтениеJSON = Новый ЧтениеJSON;
							//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
							Если Ответ.КодСостояния=200 Тогда
								НеобходимоВсеНаСервереДелать(ТекстДокумента,Стр.ID);
								
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
								Стр.КоличествоПолучено=Стр.КоличествоКМ;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
												 Состояние("Получено "+Формат(Объект.Товары.Итог("КоличествоПолучено"),"ЧГ=")+" из "+
												 Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
												 Окр(Объект.Товары.Итог("КоличествоПолучено")*100/Объект.Товары.Итог("КоличествоКМ")));
									
								//НайтиВсеOrderlineПоНомеркуКМ();
							Иначе
								стр.СтатусСтроки="Отказ";
								NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
						
								Если NNN.success=Ложь Тогда
								globalErrors="";
								Для Каждого Стр_1 Из NNN.globalErrors Цикл
									globalErrors=globalErrors+Стр_1+"
									|"
								Конеццикла;
								Стр.ОшибкаПолучения=globalErrors;
								Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: EXHAUSTED")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ;
											Стр.СтатусСтроки="Получено";
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
											
										Конецесли;
										Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: PENDING")>0 Тогда
											Стр.СтатусСтроки="Обработка в ЦРПТ";
											Возврат;;
										Конецесли;
										Если Найти(globalErrors,"Not enough balance")>0 Тогда
											Сообщить("Необходимо пополнить баланс в ЦРПТ");
										Конецесли;

								Сообщить("Не удалось обработать документ: "+globalErrors);
								Если Найти(globalErrors,"Требуемое количество ")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=Число(СокрЛП(Сред(globalErrors,Найти(globalErrors,"осталось использовать ")+22)));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
						
						КонецЕсли;
										 ЭтаФорма.Записать();
								ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше,чем размер буфера")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше, чем размер буфера")>0 Тогда
			
						НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								ИначеЕсли Найти(globalErrors,"DELETE")>0 Тогда
									Стр.КоличествоПолучено=Стр.КоличествоКМ ; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
						
						КонецЕсли;
									
										 ЭтаФорма.Записать();
								Конецесли;
							ИначеЕсли NNN.success=Истина Тогда
								
								
							КонецЕсли;
		
	КонецЕсли;
							
							
						Исключение
							
							Сообщить("Ошибка "+Ответ.ПолучитьТелоКакСтроку());
						КонецПопытки;
						
					КонецЦикла;
				КонецЕсли;
				
				КонецЕсли;
			Иначе
				Форм.Пользователь=Текст;
			КонецЕсли;			
			
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
			Текст=Форм.Пользователь;
			Форм.Пользователь=Объект.ТекущийПользователь;
			
			Форм.Пользователь=Текст;
			 ЭтаФорма.Прочитать();  
		
	
КонецПроцедуры


Функция НаСервереФормируемЗаказ_ОбувьСУЗ(Thumbprint_1)
	
	Массив=Новый Массив;
	
		Объект.СУЗОбувь=Истина;
	
	
		Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();

		Чтен.ЗаписатьИмяСвойства("@class");
		Чтен.ЗаписатьЗначение("com.equiron.sitemanager.api.v2.model.order.OrderDtoLight");
		
		Чтен.ЗаписатьИмяСвойства("inn");
		Чтен.ЗаписатьЗначение(СокрЛП(Объект.Организация.ИНН));
				
		Чтен.ЗаписатьИмяСвойства("contractNumber");
		Чтен.ЗаписатьЗначение(СокрЛП(Объект.НомерДоговораСОператором));
		Чтен.ЗаписатьИмяСвойства("contractDate");
		Чтен.ЗаписатьЗначение(Формат(Объект.ДатаДоговораСОператором,"ДФ=""гггг-ММ-дд"""));
		Чтен.ЗаписатьИмяСвойства("contactPerson");
		Чтен.ЗаписатьЗначение(Объект.ТекущийПользователь.КонтактноеЛицо);
		
		Чтен.ЗаписатьИмяСвойства("createMethodType");
		чтен.ЗаписатьЗначение("SELF_MADE");
		
		Чтен.ЗаписатьИмяСвойства("products");
		Чтен.ЗаписатьНачалоМассива();
		СпособВыпускаТоваров="";
	Для Каждого Стр Из Объект.Товары Цикл
			Чтен.ЗаписатьНачалоОбъекта();
			//Если НЕ ЗначениеЗаполнено(Стр.ID) Тогда
				Стр.ИДСУЗ=xmlString(Новый УникальныйИдентификатор());
			//	КонецЕсли;
				Чтен.ЗаписатьИмяСвойства("orderLineId");
				Чтен.ЗаписатьЗначение(Стр.ИДСУЗ);
			
				Чтен.ЗаписатьИмяСвойства("gtin");
				Чтен.ЗаписатьЗначение(дополнитьСтроку(Стр.GTIN.GTIN));
				
				
			//	Если Объект.СпособВыпускаТоваров<>Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.МаркировкаОстатков Тогда
			//		
			//		
			//Если ТипЗнч(Стр.КодТНВЭД)=Тип("Строка") Тогда
			//		Чтен.ЗаписатьИмяСвойства("codeTnVed");
			//		
			//	
			//		Чтен.ЗаписатьЗначение(Сред(xmlString(Стр.КодТНВЭД),1,4));
			//		ИначеЕсли ТипЗнч(Стр.КодТНВЭД)=Тип("СправочникСсылка.КодТНВЭД_ХамелеонЦРПТ") Тогда

			//		Чтен.ЗаписатьИмяСвойства("codeTnVed");
			//		
			//	
			//		Чтен.ЗаписатьЗначение(Сред(xmlString(Стр.КодТНВЭД.Код),1,4));
			//	КонецЕсли;
			//	КонецЕсли;
				
				
				Чтен.ЗаписатьИмяСвойства("identificationType");
					
				Чтен.ЗаписатьЗначение(xmlString(Стр.ВидСИ));
				
				
				Чтен.ЗаписатьИмяСвойства("releaseMethodType");
				//Если Стр.СпособВыпускаТоваров="Остаток" Тогда
				
		Если Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.МаркировкаОстатков Тогда
				
				Чтен.ЗаписатьЗначение("REMAINS");
				
			ИначеЕсли Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ВвезенВРФ 
				Тогда
				Чтен.ЗаписатьЗначение("IMPORT");
			ИначеЕсли Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.Перемаркировка Тогда
				Чтен.ЗаписатьЗначение("REMARK");
			Иначе
				Чтен.ЗаписатьЗначение("PRODUCTION");
				
			КонецЕсли;
			СпособВыпускаТоваров=Стр.СпособВыпускаТоваров;
				Чтен.ЗаписатьИмяСвойства("quantity");
				Чтен.ЗаписатьЗначение(xmlString(Стр.КоличествоКМ));

				Чтен.ЗаписатьИмяСвойства("serialNumberType");
			Если Стр.СпособФормированияСН=перечисления.СпособФормированияСН_ХамелеонЦРПТ.ОператорИСМП Тогда
				Чтен.ЗаписатьЗначение("OPERATOR");
			//	Чтен.ЗаписатьИмяСвойства("serialNumbers");
			//	Чтен.ЗаписатьЗначение("null");
				
			Иначе
				Чтен.ЗаписатьЗначение("SELF_MADE");
				чтен.ЗаписатьИмяСвойства("serialNumbers");
				чтен.ЗаписатьНачалоМассива();
						НСтр=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
				БылаПозиция=Ложь;
			Для Каждого Стр_1 Из НСтр Цикл
				Если ЗначениеЗаполнено(Стр_1.СерийныйНомер) Тогда
					
					чтен.ЗаписатьЗначение(Стр_1.СерийныйНомер)
					
				КонецЕсли;
			Конеццикла;
			    чтен.ЗаписатьКонецМассива();
			         КонецЕсли;
				Чтен.ЗаписатьИмяСвойства("markingType");
				чтен.ЗаписатьЗначение("PRODUCT");
				Чтен.ЗаписатьИмяСвойства("createMethodType");
				чтен.ЗаписатьЗначение("SELF_MADE");
				
				Чтен.ЗаписатьИмяСвойства("receiveMethodType");
				чтен.ЗаписатьЗначение("ELECTRONIC");
					
				Чтен.ЗаписатьИмяСвойства("productionLine");
				чтен.ЗаписатьЗначение("1");
				Чтен.ЗаписатьИмяСвойства("templateId");
				чтен.ЗаписатьЗначение(1);
				
	
			
			Чтен.ЗаписатьКонецОбъекта();
				
				
		Конеццикла;
		Чтен.ЗаписатьКонецМассива();
				Чтен.ЗаписатьИмяСвойства("releaseMethodType");
		Если Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.МаркировкаОстатков Тогда
				
				Чтен.ЗаписатьЗначение("REMAINS");
				
			ИначеЕсли Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ВвезенВРФ Тогда
				Чтен.ЗаписатьЗначение("IMPORT");
		Иначе
				Чтен.ЗаписатьЗначение("PRODUCTION");
				
			КонецЕсли;
		
		//Объект._Order_ID=xmlString(Объект.Ссылка.УникальныйИдентификатор());
			//	Чтен.ЗаписатьИмяСвойства("productionOrderId");
			//	чтен.ЗаписатьЗначение(xmlString(Объект._Order_ID));
		
			Чтен.ЗаписатьКонецОбъекта();
		
		 		
		Текст=Чтен.Закрыть();
	Массив.Добавить(Новый Структура("Текст,Идентификатор",Текст));
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
//	 КонецциКла;
	
	
	Возврат Массив;

Конецфункции


&НаСервере
Процедура ПечатьПоВыделеннымНомерамКМНаСервере(Таб,МассивКМРаспечатали)
	// Вставить содержимое обработчика.
		
	Если ВерсияПравильная Тогда
	ГенераторМатрицы=Обработки.ГенерацияDataMatrix_ХамелеонЦРПТ.Создать();
	ГенераторМатрицы.Инициализировать();
	КонецЕсли;	
	
	Мак=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	ОблМ=Мак.ПолучитьОбласть("Строка|Шапка");
	ПервыйРисунок=Истина;
	
	НомерПП=0;
	Если Элементы.РегистрСерийныеНомераКМ.ВыделенныеСтроки.Количество()>0 Тогда
		
	Для Каждого Стр_2 Из Элементы.РегистрСерийныеНомераКМ.ВыделенныеСтроки Цикл
		
		
			
			Если СоответствоватьТребованиямЦРПТ=Истина Тогда
				
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	КМРаспечатано_ХамелеонЦРПТ.Распечатан,
						|	КМРаспечатано_ХамелеонЦРПТ.cis
						|ИЗ
						|	РегистрСведений.КМРаспечатано_ХамелеонЦРПТ КАК КМРаспечатано_ХамелеонЦРПТ
						|ГДЕ
						|	КМРаспечатано_ХамелеонЦРПТ.cis = &cis";
					
					Запрос.УстановитьПараметр("cis", Стр_2.НомерКМ_Короткий);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи_1 = РезультатЗапроса.Выбрать();
					НашлиКМЭЭ=ЛОжь;
					Пока ВыборкаДетальныеЗаписи_1.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						если ВыборкаДетальныеЗаписи_1.cis=Стр_2.НомерКМ_Короткий 
							И ВыборкаДетальныеЗаписи_1.Распечатан=Истина Тогда
							НашлиКМЭЭ=Истина;
							Прервать;
						Конецесли;
						
					КонецЦикла;
					Если НашлиКМЭЭ=Истина Тогда
						Продолжить;
					Конецесли;
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

					//РегДв=РегистрыСведений.КМРаспечатано_ХамелеонЦРПТ.СоздатьНаборЗаписей();
					//РегДв.Отбор.cis.Установить(Стр.НомерКМ_Короткий);
					НомерПП=НомерПП+1;
					МассивКМРаспечатали.Добавить(Новый Структура("cis,НомерПП",Стр_2.НомерКМ_Короткий,НомерПП));
					
					//РегДв.Отбор.НомерПП.Установить(НомерПП);
					//Добав=РегДв.Добавить();
					//Добав.cis=Стр.НомерКМ_Короткий;
					//Добав.НомерПП=НомерПП;
					//Добав.Распечатан=Истина;
					//РегДв.Записать(Истина);
				
			Иначе
					
				//РегДв=		
					
			Конецесли;
			
		
		
		//Стр=Объект.КМИзAPI.НайтиПоИдентификатору(Стр_2);

		ГТИН_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьGTINСМарки(Стр_2.НомерКМ);
			GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(ГТИН_1));
			
			
			ОблМ.Параметры.Марка=GTIN.БрендТорговаяМарка;
			Если ЗначениеЗаполнено(GTIN.Размер) Тогда
				ОблМ.Параметры.Размер=GTIN.Размер;
			Иначе
				ОблМ.Параметры.Размер="--";
			Конецесли;
			ОблМ.Параметры.Артикул=GTIN.МодельПроизводителяАртикул;
			ОблМ.Параметры.Проудкция=GTIN;
			ОблМ.Параметры.Цвет=GTIN.Цвет;
			ОблМ.Параметры.Вверх=GTIN.МатериалВерха;
			ОблМ.Параметры.Подладка=GTIN.МатериалПодкладки;
			ОблМ.Параметры.Стелька=GTIN.Стелька;
			ОблМ.Параметры.Низ=GTIN.МатериалНиза;
			Если ЗначениеЗаполнено(GTIN.Изготовитель) Тогда
				ОблМ.Параметры.Изготовитель=GTIN.Изготовитель	;
			Иначе
				ОблМ.Параметры.Изготовитель=GTIN.ИННПроизводителяИмпортёра;
			КонецЕсли;
			ОблМ.Параметры.страна=GTIN.СтранаПроизводства;
			ОблМ.Параметры.Дата=Формат(GTIN.ДатаПубликации,"ДЛФ=Д");
			ОблМ.Параметры.Сезон=GTIN.Сезон;
			ОблМ.Параметры.Адрес=GTIN.ИННПроизводителяИмпортёра.ЮридическийАдрес;
			
			ООО=РаскодироватьСтроку(Стр_2.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=ГТИН_1;
			//Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
	CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
			ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			//ТутУправляющийСимвол=РаскодироватьСтроку(Стр_2.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
		
				ГТИН=Сред(ГТИН,14+3);
			
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
				ГТИН=Сред(ГТИН,6);
			
				//CIS=Сред(ООО,1,Найти(ООО,ГТИН)-1);
			//Иначе
			//	CIS=ООО;
			//Конецесли;
			
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			
			
Если ЗначениеЗаполнено(GTIN.КодВУчетнойСистеме) тогда
				ГУДИ=GTIN.КодВУчетнойСистеме;
			Иначе
				ГУДИ=xmlString(GTIN.GTIN);
			Конецесли;			//ОблМ.Параметры=ГУДИ;
			ОблМ.Параметры.ШтрихКод=ГУДИ;
			
			Попытка
				Если ВерсияПравильная Тогда
					Картинка = ГенераторМатрицы.Сгенерировать(ООО);
				Иначе
					ГенераторМатрицы=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();

					Картинка = ГенераторМатрицы.Сгенерировать(ООО);
					
				КонецЕсли;
			ОблМ.Рисунки.ДатаМ.Картинка=Новый Картинка(Картинка);
			Если ЗначениеЗАполнено(ГУДИ) Тогда
				Если ВерсияПравильная Тогда
			Генератор=Обработки.ГенерацияEAN13_ХамелеонЦРПТ.Создать();
		
			Картинка = Генератор.Сгенерировать(ГУДИ);
		Иначе
			Генератор=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();
		
			Картинка = Генератор.Сгенерировать13(ГУДИ);
			
			Конецесли;
			ОблМ.Рисунки.ШтрихКод_1.Картинка=Новый Картинка(Картинка);
			КонецЕсли;
			
			
			Исключение
				Сообщить("Для печати Data Matrix необходим релиз 8.3.9 или выше");
//				Возврат;
			Конецпопытки;
							
				Если ПервыйРисунок Тогда
					Если НЕ Таб.ПроверитьВывод(ОблМ) Тогда
						Таб.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					
					
					Таб.Вывести(ОблМ);
					ПервыйРисунок=ложь;
				Иначе
					Таб.Присоединить(ОблМ);
					
					ПервыйРисунок=Истина;
					
				Конецесли;
		           Конеццикла;
			
		
	Иначе
	Для Каждого Стр_2 Из Элементы.КМИзAPI.ВыделенныеСтроки Цикл
		
		
		Стр=Объект.КМИзAPI.НайтиПоИдентификатору(Стр_2);
		
		
		
		Если СоответствоватьТребованиямЦРПТ=Истина Тогда
				
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	КМРаспечатано_ХамелеонЦРПТ.Распечатан,
						|	КМРаспечатано_ХамелеонЦРПТ.cis
						|ИЗ
						|	РегистрСведений.КМРаспечатано_ХамелеонЦРПТ КАК КМРаспечатано_ХамелеонЦРПТ
						|ГДЕ
						|	КМРаспечатано_ХамелеонЦРПТ.cis = &cis";
					
					Запрос.УстановитьПараметр("cis", Стр.НомерКМ_Короткий);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи_1 = РезультатЗапроса.Выбрать();
					НашлиКМЭЭ=ЛОжь;
					Пока ВыборкаДетальныеЗаписи_1.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						если ВыборкаДетальныеЗаписи_1.cis=Стр.НомерКМ_Короткий 
							И ВыборкаДетальныеЗаписи_1.Распечатан=Истина Тогда
							НашлиКМЭЭ=Истина;
							Прервать;
						Конецесли;
						
					КонецЦикла;
					Если НашлиКМЭЭ=Истина Тогда
						Продолжить;
					Конецесли;
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

					//РегДв=РегистрыСведений.КМРаспечатано_ХамелеонЦРПТ.СоздатьНаборЗаписей();
					//РегДв.Отбор.cis.Установить(Стр.НомерКМ_Короткий);
					НомерПП=НомерПП+1;
					МассивКМРаспечатали.Добавить(Новый Структура("cis,НомерПП",Стр.НомерКМ_Короткий,НомерПП));
					
					//РегДв.Отбор.НомерПП.Установить(НомерПП);
					//Добав=РегДв.Добавить();
					//Добав.cis=Стр.НомерКМ_Короткий;
					//Добав.НомерПП=НомерПП;
					//Добав.Распечатан=Истина;
					//РегДв.Записать(Истина);
				
			Иначе
					
				//РегДв=		
					
			Конецесли;
			

		
		ГТИН_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьGTINСМарки(Стр.НомерКМ);
			GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(ГТИН_1));
			
			
		
			
			ОблМ.Параметры.Марка=GTIN.БрендТорговаяМарка;
			Если ЗначениеЗаполнено(GTIN.Размер) Тогда
				ОблМ.Параметры.Размер=GTIN.Размер;
			Иначе
				ОблМ.Параметры.Размер="--";
			Конецесли;
			ОблМ.Параметры.Артикул=GTIN.МодельПроизводителяАртикул;
			ОблМ.Параметры.Проудкция=GTIN;
			ОблМ.Параметры.Цвет=GTIN.Цвет;
			ОблМ.Параметры.Вверх=GTIN.МатериалВерха;
			ОблМ.Параметры.Подладка=GTIN.МатериалПодкладки;
			ОблМ.Параметры.Стелька=GTIN.Стелька;
			ОблМ.Параметры.Низ=GTIN.МатериалНиза;
			Если ЗначениеЗаполнено(GTIN.Изготовитель) Тогда
				ОблМ.Параметры.Изготовитель=GTIN.Изготовитель	;
			Иначе
				ОблМ.Параметры.Изготовитель=GTIN.ИННПроизводителяИмпортёра;
			КонецЕсли;
			ОблМ.Параметры.страна=GTIN.СтранаПроизводства;
			ОблМ.Параметры.Дата=Формат(GTIN.ДатаПубликации,"ДЛФ=Д");
			ОблМ.Параметры.Сезон=GTIN.Сезон;
			ОблМ.Параметры.Адрес=GTIN.ИННПроизводителяИмпортёра.ЮридическийАдрес;
			
			//ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
	CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
					ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
		
				ГТИН=Сред(ГТИН,14+3);
			
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
				ГТИН=Сред(ГТИН,6);
			
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			
			
Если ЗначениеЗаполнено(GTIN.КодВУчетнойСистеме) тогда
				ГУДИ=GTIN.КодВУчетнойСистеме;
			Иначе
				ГУДИ=xmlString(GTIN.GTIN);
			Конецесли;			//ОблМ.Параметры=ГУДИ;
			ОблМ.Параметры.ШтрихКод=ГУДИ;
			
			Попытка
			Если ВерсияПравильная Тогда
				
				Картинка = ГенераторМатрицы.Сгенерировать(ООО);
			Иначе
					ГенераторМатрицы=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();

					Картинка = ГенераторМатрицы.Сгенерировать(ООО);
				
			КонецЕсли;
			ОблМ.Рисунки.ДатаМ.Картинка=Новый Картинка(Картинка);
			Если ЗначениеЗАполнено(ГУДИ) Тогда
				Если ВерсияПравильная Тогда
			Генератор=Обработки.ГенерацияEAN13_ХамелеонЦРПТ.Создать();
		
			Картинка = Генератор.Сгенерировать(ГУДИ);
		Иначе
						Генератор=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();
		
			Картинка = Генератор.Сгенерировать13(ГУДИ);

			Конецесли;
			ОблМ.Рисунки.ШтрихКод_1.Картинка=Новый Картинка(Картинка);
			КонецЕсли;
			
			
			Исключение
				Сообщить("Для печати Data Matrix необходим релиз 8.3.9 или выше");
			//	Возврат;
			Конецпопытки;
							
				Если ПервыйРисунок Тогда
					Если НЕ Таб.ПроверитьВывод(ОблМ) Тогда
						Таб.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					Таб.Вывести(ОблМ);
					ПервыйРисунок=ложь;
				Иначе
					Таб.Присоединить(ОблМ);
					
					ПервыйРисунок=Истина;
					
				Конецесли;
	Конеццикла;
	   КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПоВыделеннымНомерамКМ(Команда)
		Таб=Новый ТабличныйДокумент;
	МассивКМРаспечатали=Новый Массив;

	ПечатьПоВыделеннымНомерамКМНаСервере(Таб,МассивКМРаспечатали);
	Таб.ТолькоПросмотр=Истина;
	Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
		Таб.Показать();
	ЗаполнитьрегистрПечати(МассивКМРаспечатали);
КонецПроцедуры
&НаКлиенте
Процедура ОткрытьВнешниеОбработки(Команда)
	// Вставить содержимое обработчика.
	ОткрытьФорму("Справочник.ВнешниеОбработки_ХамелеонЦРПТ.Форма.ФормаСписка",
	Новый структура("Тип",
		ТипДокумента()));
КонецПроцедуры


Функция ТипДокумента()
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя()
КонецФункции


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(НомераКМ_ХамелеонЦРПТ.НомерСтроки_1) КАК НомерСтроки
		|ИЗ
		|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
		|ГДЕ
		|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа";
	
	Запрос.УстановитьПараметр("ДокументЗаказа", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МаксисумСтроки=0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		МаксисумСтроки=ВыборкаДетальныеЗаписи.НомерСтроки;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
	Использовать15ШаблонДляАльтернативногоТабакаСУказаниемМРЦ=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().Использовать15ШаблонДляАльтернативногоТабакаСУказаниемМРЦ;
	
	
	ПолучатьКМВФоне=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ПолучатьКМВФоне;
	СоответствоватьТребованиямЦРПТ=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().СоответствоватьТребованиямЦРПТ;
	
	Если ПолучатьКМВФоне=Истина Тогда
		Элементы.ПолучитьИзAPI.Заголовок="Эмитировать КМ в фоновом режиме (только получить DATA MATRIX коды по API) обновить статус для типографии";
		
	Иначе
		
		Элементы.ПолучитьИзAPI.Заголовок="Эмитировать КМ(только получить DATA MATRIX коды по API) обновить статус для типографии";
	КонецеслИ;
	
	ИспользоватьОтчетОбИспользовании=Истина;
	//РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ИспользоватьОтчетОбИспользованияДлМолока;
	ЧислоПараллельныхПотоков = РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КоличествоЯдерДляГенерацииDataMatrix; 
	ОтправлятьОбувьЧерезAPI=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ОтправлятьОбувьЧерезAPI;
	РаботатьНаV1=Ложь;
	//РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().РаботатьНаV1;
	
	НеИспользоватьТокен=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().НеИспользоватьТокен;
									   ОбработкаWEBНаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ВерсияПравильная=Сред(СистемнаяИнформация.ВерсияПриложения,1,6)<>"8.3.6." 
			И Сред(СистемнаяИнформация.ВерсияПриложения,1,6)<>"8.3.7."
			И Сред(СистемнаяИнформация.ВерсияПриложения,1,6)<>"8.3.8."
	 		И Сред(СистемнаяИнформация.ВерсияПриложения,1,6)<>"8.3.9.";
			        	Продукция=Новый Структура("Соответствие",новый Соответствие);
	Орг=Неопределено;
	Параметры.Свойство("Организация",Орг);
	Если ЗначениеЗаполнено(Орг) Тогда
		Объект.Организация=Орг;
	КонецЕсли;
	Поль=Неопределено;
	Параметры.Свойство("Пользовтаель",Поль);
	Если ЗначениеЗаполнено(Поль) Тогда
		Объект.ТекущийПользователь=Поль;
		ПриИзмененияПользователя();
	КонецЕсли;
	
	ОбновитьВнешниеКнопки();
	УправлениеВидимостью();
	Если НЕ Элементы.СтраницыТЧ.ТолькоПросмотр  Тогда
		Если Объект.ШаблонЭтикетки.Статус<>"ACTIVATED" Тогда
			Объект.ШаблонЭтикетки=ОБъект.ТекущийПользователь.ШаблонЭтикетки;
		КонецЕсли;
	КонецЕсли;
	ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	
	АвтоСерийные=Объект.ТекущийПользователь.ФормироватьСерийныеНомераАвтоматически;
	ЗаполнитьЗначенияСвойств(Объект,Объект.Организация);
	
	//Элементы.ЦЭМ.Видимость=Объект.СпособИзготовленияСИ=Перечисления.СпособИзготовленияСИ_ХамелеонЦРПТ.ЦентрЭтикетированияИМаркировки;
	  УстВидим();
	  Если Не ЗначениеЗаполнено(Объект.СпособВыпускаТоваров) Тогда
		  Если ЗначениеЗаполнено(объект.ТекущийПользователь.ТипВводаВОборот) ТОгда
			  Если Объект.ТекущийПользователь.ТипВводаВОборот=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотИмпорт 
				  ИЛИ Объект.ТекущийПользователь.ТипВводаВОборот=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ИмпортСФТС
				  Тогда
				  Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ВвезенВРФ;
			  ИначеЕсли Объект.ТекущийПользователь.ТипВводаВОборот=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.МаркировкаОстатков Тогда
				  Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.МаркировкаОстатков;
			  Иначе
				  Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ПроизведенВРФ;
				 КонецЕсли;
			  
			 КонецЕсли;
		  
		 КонецЕсли;
		 ТекущийПользователь=Объект.ТекущийПользователь;
		 
	МодульПриСозданииДокументов_ХамелеонЦРПТ.ЗаказМарок_ХамелеонЦРПТ_ПриСозданииНаСервере(ЭтаФорма,Отказ,СтандартнаяОбработка);
	 
	//++ МВ:Овчинников 30.09.2020  •1
	ДобавитьРеквизитыНаФорму();
	//-- Овчинников
 
КонецПроцедуры


Процедура УстВидим()
		   Если ЗначениеЗАполнено(Объект.Ссылка) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НомераКМ_ХамелеонЦРПТ.НомерКМ
			|ИЗ
			|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
			|ГДЕ
			|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа";
		
		Запрос.УстановитьПараметр("ДокументЗаказа", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
		Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда 
			Элементы.РегистрСерийныеНомера.Видимость=Истина;
			Элементы.СерийныеНомераТаблица.Видимость=Ложь;
				Элементы.РегистрСерийныеНомераКМ.Видимость=Истина;
			Элементы.КМИзAPI.Видимость=Ложь;
		
			
			МассивУдалимначалаВсе=Новый Массив;
			Для Каждого стр_1 Из РегистрСерийныеНомера.Отбор.Элементы Цикл
			//	Если Стр_1.Представление<>"ОТБОРОСТАТКИ" Тогда
					МассивУдалимначалаВсе.Добавить(Стр_1);
			//	КонецЕсли;
			Конеццикла;
			Для Каждого Стр Из МассивУдалимначалаВсе Цикл
				
				РегистрСерийныеНомера.Отбор.Элементы.Удалить(Стр);
			Конеццикла;
			
			Стр=РегистрСерийныеНомера.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Стр.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
			Стр.Использование=Истина;
			Стр.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("ДокументЗаказа");
			Стр.ПравоеЗначение=Объект.Ссылка; 
			Стр.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			
			
		Иначе
			Элементы.РегистрСерийныеНомераКМ.Видимость=Ложь;
			Элементы.КМИзAPI.Видимость=Истина;
			
			Элементы.РегистрСерийныеНомера.Видимость=Ложь;
			Элементы.СерийныеНомераТаблица.Видимость=Истина;
		КонецЕсли;
	Иначе
			Элементы.РегистрСерийныеНомераКМ.Видимость=Ложь;
			Элементы.КМИзAPI.Видимость=Истина;
			
				Элементы.РегистрСерийныеНомера.Видимость=Ложь;
			Элементы.СерийныеНомераТаблица.Видимость=Истина;
		
		КонецЕсли;
		Если Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Шины 
			ИЛИ Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Молоко
		ИЛИ Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Свет
		ИЛИ Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Одежда
		ИЛИ Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Фармацевтика
		ИЛИ Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Фото
		ИЛИ Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Парфюм
			
			Тогда
			//Элементы.ОтправитьВЦРПТ.Видимость=Ложь;
			Элементы.Шаблон.Видимость=Ложь;
			Элементы.ЦЭМ_Справочник.Видимость=Ложь;
			Элементы.НомерИДоговорЦЭМ.Видимость=ложь;
			//Элементы.ДоговорГруппа.Видимость=Ложь;
		КонецЕсли;
		
		Если Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Молоко Тогда
			Элементы.ТоварыГоденДо.Видимость=Истина;
			Элементы.ТоварыНомерВСД.Видимость=Истина;
		Иначе
			Элементы.ТоварыГоденДо.Видимость=Ложь;
			Элементы.ТоварыНомерВСД.Видимость=Ложь;
		КонецЕсли;
		
КонецПроцедуры

Процедура ПриИзмененияПользователя()
	
	
	
	если не значениезаполнено(объект.СпособВыпускаТоваров) тогда
		если объект.ТекущийПользователь.ТипВводаВОборот=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.МаркировкаОстатков Тогда
			ОБъект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.МаркировкаОстатков;
		ИначеЕсли Объект.ТекущийПользователь.ТипВводаВОборот=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотИмпорт 
			ИЛИ Объект.ТекущийПользователь.ТипВводаВОборот=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ИмпортСФТС
			Тогда
			Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ВвезенВРФ;
		Иначе
			Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ПроизведенВРФ
		КонецЕсли;
	КонецЕсли;
	Объект.Организация=Объект.ТекущийПользователь.Организация;
	
	Если Не ЗначениеЗаполнено(Объект.ШаблонКМ) Тогда
		Объект.ШаблонКМ=Объект.ТекущийПользователь.ШаблонКМПоУмолчанию;
	конецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ШаблонКМ_Табак) Тогда
		Объект.ШаблонКМ_Табак=Объект.ТекущийПользователь.ШаблонКМТабакПоУмолчанию;
	конецЕсли;
	
	
	АвтоСерийные=Объект.ТекущийПользователь.ФормироватьСерийныеНомераАвтоматически;
//	Если Не ЗначениеЗаполнено(Объект.СпособИзготовленияСИ) Тогда
//		Объект.СпособИзготовленияСИ=Объект.ТекущийПользователь.СпособИзготовленияСИ;
//	КонецЕсли;
НаСервереОпределеяемТипСпособа();
	Если Не ЗначениеЗАполнено(Объект.ТипОплаты) Тогда
		Объект.ТипОплаты=Объект.ТекущийПользователь.ТипОплаты;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ШаблонЭтикетки) Тогда
		Объект.ШаблонЭтикетки=Объект.ТекущийПользователь.ШаблонЭтикетки;
	КонецЕсли;
	Если Не ЗначениеЗАполнено(Объект.НомерДоговораСОператором) ТОгда
		Объект.НомерДоговораСОператором=Объект.ТекущийПользователь.НомерДоговораСОператором;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ДатаДоговораСОператором) Тогда
		ОБъект.ДатаДоговораСОператором=ОБъект.ТекущийПользователь.ДатаДоговораСОператором;
	КонецЕсли;
	Если не ЗначениеЗаполнено(Объект.ШаблонЭтикетки) тогда
		Объект.ШаблонЭтикетки=Объект.ТекущийПользователь.ШаблонЭтикетки;
	КонецЕсли;
	Для Каждого Стр Из Объект.Товары Цикл
		Если Не ЗначениеЗаполнено(Стр.СпособФормированияСН) Тогда
			Стр.СпособФормированияСН=ОБъект.ТекущийПользователь.СпособФормированияСН;
			
		КонецЕслИ;
		Если Не ЗначениеЗаполнено(Стр.ВидСИ) Тогда
			Стр.ВидСИ=ОБъект.ТекущийПользователь.ВидСИ;
			
		КонецЕслИ;
		Если Не ЗначениеЗаполнено(Стр.ВидМаркировки) Тогда
			Стр.ВидМаркировки=ОБъект.ТекущийПользователь.ВидМаркировки;
		КонецЕслИ;
	Конеццикла;
	Если Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Шины" Тогда
		Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Шины;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Молоко" Тогда
		Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Молоко;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Одежда" Тогда
		Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Одежда;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак" Тогда
		Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак" Тогда
		Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Фармацевтика" Тогда
		Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Фармацевтика;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Фото" Тогда
		Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Фото;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Парфюм" Тогда
		Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Парфюм;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Велосипеды" Тогда
		Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Велосипеды;
		
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Питьевая вода" Тогда
		Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.ПитьеваяВода;
		
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Кресла-коляски" Тогда
		Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.КреслаКоляски;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Пиво" Тогда
		Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Пиво;
		
	Иначе
		Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь
	КонецЕсли;
	
	Если Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь Тогда
		Если Элементы.ОтправитьВЦРПТ.Видимость Тогда
			//Элементы.ОтправитьЗаявкуВЦРПТ.Видимость=Истина;
		КонецЕсли;
		//Элементы.ОтправитьВЦРПТ.Заголовок="Черновик в ЦРПТ";
		
	Иначе
		//Если Элементы.ОтправитьВЦРПТ.Видимость Тогда
		Элементы.ОтправитьЗаявкуВЦРПТ.Видимость=Ложь;
		//КонецЕсли;
		Элементы.ОтправитьВЦРПТ.Заголовок="Отправить в ЦРПТ";
		
	КонецЕсли;
	
	Элементы.КМНеПодлежитОплате.Видимость=Объект.ТипПродукции=перечисления.ТипПродукции_ХамелеонЦРПТ.Фармацевтика;
	
КонецПроцедуры


Процедура ОбновитьВнешниеКнопки()
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнешниеОбработки_ХамелеонЦРПТ.ИмяВнешнейОБработки,
		|	ВнешниеОбработки_ХамелеонЦРПТ.НаименованиеКнопки,
		|	ВнешниеОбработки_ХамелеонЦРПТ.Код
		|ИЗ
		|	Справочник.ВнешниеОбработки_ХамелеонЦРПТ КАК ВнешниеОбработки_ХамелеонЦРПТ
		|ГДЕ
		|	ВнешниеОбработки_ХамелеонЦРПТ.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ИмяКоманды="Команда"+ВыборкаДетальныеЗаписи.Код;
		Попытка
		КомандаФормы = Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуВнешняя";
		КомандаФормы.Заголовок = ВыборкаДетальныеЗаписи.ИмяВнешнейОБработки;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.Текст;
		
		//ОписаниеКомандыПечати.ИмяКомандыНаФорме = ИмяКоманды;
		
		НовыйЭлемент = Элементы.Добавить("ГруппаКнопокВнешняя" + ИмяКоманды, Тип("КнопкаФормы"), Элементы.ГруппаКнопокВнешняя);
		НовыйЭлемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		НовыйЭлемент.Заголовок=ВыборкаДетальныеЗаписи.НаименованиеКнопки;
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	Исключение
		КонецПопытки;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуВнешняя(Команда)
	
	// Вставить содержимое обработчика.	// Вставить содержимое обработчика.
	Попытка
		
		ВернДв=ВернутьИмяФайла(Команда.Имя);
		Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
			ДвоичныеДанные=ВернДв;
		Иначе
			ДвоичныеДанные=Новый ДвоичныеДанные(ВернДв);
		Конецесли;
		ОбработкаИмя=ПолучитьИмяВнешней(Двоичныеданные);
		ОткрытьФорму("ВнешняяОбработка."+ОбработкаИмя+".Форма",,ЭтаФорма);
	Исключение
			Попытка
#Если ТолстыйКлиентОбычноеПриложение  Тогда
		ВернДв=ВернутьИмяФайла(Команда.Имя);
		Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
			//ДвоичныеДанные=ВернДв;
			ДвоичныеДанные=ПолучитьИмяВременногоФайла();
			ВернДв.Записать(ДвоичныеДанные);
			
		Иначе
			ДвоичныеДанные=ВернДв;
		Конецесли;
				ВернутьВн(ДвоичныеДанные);
				Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
					УдалитьФайлы(ДвоичныеДанные);
				КонецЕсли;
#Иначе
				
			ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
#КонецЕсли
			Исключение
				ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
			КонецПопытки;
		//	
	//	
	КонецПопытки;

	//УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


#Если ТолстыйКлиентОбычноеПриложение  Тогда
&НаКлиенте
Процедура ВернутьВн(ДвоичныеДанные)
	//ИмяВременФ=ПолучитьИмяВременногоФайла();
	//ДвоичныеДанные.Записать(ИмяВременФ);
	ВнешняяОбработка=ВнешниеОбработки.Создать(ДвоичныеДанные);
	Фоорма=ВнешняяОбработка.ПолучитьФорму(,ЭтаФорма);
	Попытка
		Фоорма.УФ=ЭтаФорма;
	Исключение
	КонецПопытки;
	Фоорма.Открыть();
Конецпроцедуры      	
#КонецЕсли



Функция ВернутьИмяФайла(Команда)
//	Если РегистрыСведений.НастройкиПрограммыЦРПТ.Получить().ЗагружатьВнешниеОбработкиИзХранилища Тогда
		Возврат Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоКоду(Сред(Команда,8)).Хранилище.Получить();
//	Иначе
//		СпрВн=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоКоду(Сред(Команда,8));
//	Конецесли;
	
//	Возврат СпрВн.ИмяВнешнейОБработки
	//НаимСправочника=Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя();
	//Спр=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоНаименованию(НаимСправочника,Истина);
	//Если Спр<>Справочники.ВнешниеОбработки_ХамелеонЦРПТ.ПустаяСсылка() Тогда
	//	Возврат Спр.ИмяВнешнейОБработки;
	//Конецесли;
	
КонецФункции

Функция ПолучитьИмяВнешней(ИмяФайла)
    АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ИмяФайла);
    ИмяОбр = ВнешниеОбработки.Подключить(АдресВоВременномХранилище,,Ложь);
    Возврат ИмяОбр;
КонецФункции

&НаКлиенте
Процедура ТекущийПользовательПриИзменении(Элемент)
	// Вставить содержимое обработчика.
		ПриИзмененияПользователя();
ИзменитьВидимостьОстатков()
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьПараметрыПоПользователю(Польз)
	
	Возврат Новый Структура("СпособФормированияСН,ВидМаркировки,ВидСИ",Польз.СпособФормированияСН,Польз.ВидМаркировки,Польз.ВидСИ);
	
КонецФункции

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	// Вставить содержимое обработчика.
	Если НоваяСтрока Тогда
		ПолучитьПараметрыПоПльзователию=ПолучитьПараметрыПоПользователю(Объект.ТекущийПользователь);
		ТекД=Элементы.Товары.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ТекД,ПолучитьПараметрыПоПльзователию);
		ТекД.Обрабатывать=Истина;
		ТекД.КоличествоКМ=1;
	  КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ТоварыGTINПриИзмененииНаСервере(Товар)
	// Вставить содержимое обработчика.
	СтрП="";
	Если Не ЗначениеЗаполнено(Объект.СпособВыпускаТоваров) Тогда
	Если Товар.Остатки Тогда
		Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.МаркировкаОстатков;
		СтрП="Остаток";
	ИначеЕсли Не ЗначениеЗаполнено(Товар.СтранаПроизводства) тогда
		Если Объект.ТекущийПользователь.ТипВводаВОборот=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборот 
			Тогда
			
			Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ПроизведенВРФ;
			СтрП="Производство в РФ";
		Иначе
			Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ВвезенВРФ;
			
			СтрП="Ввезен в РФ";
		конецесли;
	
	ИначеЕсли Товар.СтранаПроизводства.Альфа2="RU" 
		Тогда
		СтрП="Производство в РФ";
		Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ПроизведенВРФ;
	Иначе
		СтрП="Ввезен в РФ";
		Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ВвезенВРФ;
		
	КонецЕсли;
КонецЕсли;
ТипКодаМаркировки=Перечисления.ТипКодаМаркировки_ХамелеонЦРПТ.UNIT;
Если Найти(Врег(Товар.ТипУпаковки.Наименование),"BUNDLE")=1 Тогда
ТипКодаМаркировки=Перечисления.ТипКодаМаркировки_ХамелеонЦРПТ.BUNDLE;
ИначеЕсли Найти(Врег(Товар.ТипУпаковки.Наименование),"SET")=1 Тогда
ТипКодаМаркировки=Перечисления.ТипКодаМаркировки_ХамелеонЦРПТ.SET;
	
	
Конецесли;


	Если значениеЗаполнено(Товар.КодТНВЭД) Тогда
		Возврат Новый Структура("КодТНВЭД,СпособВыпускаТоваров,ТипКодаМаркировки",Товар.КодТНВЭД,СтрП,ТипКодаМаркировки);
	Иначе
		Возврат Новый Структура("КодТНВЭД,СпособВыпускаТоваров,ТипКодаМаркировки",Товар.КодТНВЭДКороткий,СтрП,ТипКодаМаркировки);
		
	КонецЕсли;
Конецфункции

&НаКлиенте
Процедура ТоварыGTINПриИзменении(Элемент)
	ТекД=Элементы.Товары.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекД,ТоварыGTINПриИзмененииНаСервере(ТекД.GTIN));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерийныйНомерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка,Переходить=Истина)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка=Ложь;
	Если Переходить<>Ложь Тогда
		Элементы.СтраницыТЧ.ТекущаяСтраница=Элементы.СерийныеНомера;
	КонецЕсли; 
	
	ТекД=Элементы.Товары.ТекущиеДанные;
	Если ТекД=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекД.НомерСтрокиСвязи=ТекД.ПолучитьИдентификатор();
	НН=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",ТекД.ПолучитьИдентификатор()));
	Для Каждого Стр_1 Из НН Цикл
		Объект.СерийныеНомера.Удалить(Стр_1);
	КонецЦикла;
	//АвтоСерийные=Автосерийные(Объект.ТекущийПользователь);
	Для Сч=1 По ТекД.КоличествоКМ цикл
		Добав=Объект.СерийныеНомера.Добавить();
		Добав.НомерСтрокиСвязи=ТекД.ПолучитьИдентификатор();
		
		Добав.GTIN=Продукция.Соответствие.Получить(ТекД.GTIN);
		Если Не ЗначениеЗаполнено(Добав.GTIN) тогда
			Добав.GTIN=ВернутьГТИН(ТекД.GTIN);
			Продукция.Соответствие.Вставить(ТекД.GTIN,Добав.GTIN);
		КонецЕсли;
		Добав.НаименованиеТовара=ТекД.GTIN;
		Если АвтоСерийные Тогда
			Если Не Значениезаполнено(Добав.СерийныйНомер) Тогда
				
				СерийныйНомер=Строка(Новый УникальныйИдентификатор());
				СерийныйНомер=СтрЗаменить(СерийныйНомер,"-","");
				Если Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Молоко") Тогда
					Добав.СерийныйНомер=Сред(СерийныйНомер,1,6);
				ИначеЕсли Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Фото") Тогда
					СерийныйНомер_1=Строка(Новый УникальныйИдентификатор());
									
					СерийныйНомер_1=СтрЗаменить(СерийныйНомер_1,"-","");
					СерийныйНомер=СерийныйНомер+СерийныйНомер_1;
					
					Добав.СерийныйНомер=Сред(СерийныйНомер,1,20);
					
				Иначе
					Добав.СерийныйНомер=Сред(СерийныйНомер,1,13);
				Конецесли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Объект.СерийныеНомера.Сортировать("НомерСтрокиСвязи");
	р=оБЪЕКТ.СерийныеНомера.НайтиСтроки(нОВЫЙ СТРУКТУРА("НомерСтрокиСвязи",Текд.НомерСтрокиСвязи));
	Если Р.Количество()>0 Тогда
		Элементы.СерийныеНомераТаблица.ТекущаяСтрока=Р[0].Получитьидентификатор();
	КонецЕсли;
	Если АвтоСерийные Тогда
		СгенерироватьНаСервере()
	КонецЕсли;
	Если Переходить<>Ложь Тогда
		
		КодЕг=Элементы.Товары.ТекущиеДанные.НомерСтрокиСвязи;
		
		ААА=Новый ФиксированнаяСтруктура(Новый Структура("НомерСтрокиСвязи",Кодег));
		Элементы.СерийныеНомераТаблица.ОтборСтрок=ААА;
		
		
	КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Функция ВернутьГТИН(Н)	
	Возврат xmlString(Н.GTIN)
КонецФункции

&НаСервере
Процедура СгенерироватьНаСервере()
	// Вставить содержимое обработчика.
	Объект.СерийныеНомера.Очистить();
	Для каждого ТекД Из Объект.Товары Цикл
		ТекД.НомерСтрокиСвязи=ТекД.ПолучитьИдентификатор();
		Для Сч=1 По ТекД.КоличествоКМ цикл
			Добав=Объект.СерийныеНомера.Добавить();
			Добав.НомерСтрокиСвязи=ТекД.НомерСтрокиСвязи;
			
			Добав.GTIN=ДополнитьСтроку(ТекД.GTIN.GTIN);
			Добав.НаименованиеТовара=ТекД.GTIN;
			Если АвтоСерийные Тогда
				Если Не Значениезаполнено(Добав.СерийныйНомер) Тогда
					
					СерийныйНомер=xmlString(Новый УникальныйИдентификатор());
					СерийныйНомер=СтрЗаменить(СерийныйНомер,"-","");
					Добав.СерийныйНомер=Сред(СерийныйНомер,1,13);
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	Объект.СерийныеНомера.Сортировать("НомерСтрокиСвязи");
	
	Для Каждого Стр Из ОБъект.СерийныеНомера Цикл
		Если Не Значениезаполнено(Стр.СерийныйНомер) Тогда
			
			СерийныйНомер=xmlString(Новый УникальныйИдентификатор());
			СерийныйНомер=СтрЗаменить(СерийныйНомер,"-","");
			Стр.СерийныйНомер=Сред(СерийныйНомер,1,13);
			
		КонецЕсли;
	Конеццикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Сгенерировать(Команда)
	СгенерироватьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭтикеток_ЦРПТ(Команда) Экспорт
	
	Если Не ЗначениеЗАполнено(Объект._Order_ID) Тогда
		Возврат;
	КонецЕсли;
	если (объект.КМИзAPI.Количество()=0 
		И Объект.Статус<>ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован"))
		ИЛИ (ОБъект.Товары.Итог("КоличествоКМ")<>ОБъект.Товары.Итог("КоличествоПолучено") И
		Объект.Статус<>ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован"))
		тогда
		
		ПолучитьКМИзAPI(Команда);
		УстВидим();
		ЭтаФорма.Записать();
		Возврат;
	конецесли;
	//если объект.КМИзAPI.Количество()=0 
	//	И Объект.Статус<>ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован")
	//	тогда
	//	ПоказатьПредупреждение(,"По данной заявке не получены КМ!!!");
	//	возврат
	//конецесли;
	// Вставить содержимое обработчика.
	
	//Если СоответствоватьТребованиямЦРПТ=Истина Тогда
	//Конецесли;
	МассивКМРаспечатали=Новый Массив;
	Если ЗначениеЗаполненО(ЧислоПараллельныхПотоков) тогда
			Таб = ПечатьЭти_Функция(МассивКМРаспечатали);
			Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
			
			Таб.Показать();
	Иначе
		Таб=Новый ТабличныйДокумент;
		ПечатьЭти(Таб,Объект.Ссылка,МассивКМРаспечатали,СоответствоватьТребованиямЦРПТ);
		Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
		
		Таб.Показать();
	КонецЕсли;
	
	ЗаполнитьрегистрПечати(МассивКМРаспечатали);
КонецПроцедуры

Процедура ЗаполнитьрегистрПечати(МассивКМРаспечатали)
	
	Для Каждого Стр_1 Из МассивКМРаспечатали Цикл
		
			РегД=регистрысведений.КМРаспечатано_ХамелеонЦРПТ.СоздатьНаборЗаписей();
			РегД.Отбор.cis.Установить(Стр_1.cis);
			РегД.Отбор.НомерПП.Установить(Стр_1.НомерПП);
			
			Добав=РегД.Добавить();
			Добав.cis=Стр_1.cis;
			Добав.НомерПП=Стр_1.НомерПП;
			Добав.Распечатан=Истина;
			
			РегД.Записать(Истина);

		
	Конеццикла;
	
КонецПроцедуры
&НаСервере
Функция ПечатьЭти_Функция(МассивКМРаспечатали)
			Ссылка=Объект.Ссылка;
	НомерТТН=Объект.Номер;
	Таб = Новый ТабличныйДокумент;
	СистемнаяИнформация = Новый СистемнаяИнформация;

	ВерсияПравильная=Сред(СистемнаяИнформация.ВерсияПриложения,1,6)<>"8.3.6." 
			И Сред(СистемнаяИнформация.ВерсияПриложения,1,6)<>"8.3.7."
			И Сред(СистемнаяИнформация.ВерсияПриложения,1,6)<>"8.3.8."
			И Сред(СистемнаяИнформация.ВерсияПриложения,1,6)<>"8.3.9.";
	
	Мак=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	ОблМ=Мак.ПолучитьОбласть("Строка|Шапка");
	ПервыйРисунок=Истина;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ,
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий
		|ИЗ
		|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
		|ГДЕ
		|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа";
	
	Запрос.УстановитьПараметр("ДокументЗаказа", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВерсияПравильная Тогда
		ГенераторМатрицы=Обработки.ГенерацияDataMatrix_ХамелеонЦРПТ.Создать();
		ГенераторМатрицы.Инициализировать();
	КонецЕсли;
	
	
	МассивЗаданий = Новый Массив;
	ЧислоПараллельныхПотоков = РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КоличествоЯдерДляГенерацииDataMatrix; 
	//ВремПапка = КаталогВременныхФайлов() + Формат(ТекущаяДата(), "ДФ=yyyyMMddHHmmss") + "\";
	ВремПапка=ПолучитьИмяВременногоФайла()+"\";	
	
	
	СчРисунков = 0;
	НомерПП=0;
	
	Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда 
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
						
	ОблМ=Мак.ПолучитьОбласть("Строка|Шапка");
			Стр=ВыборкаДетальныеЗаписи;
			
			
			
			Если СоответствоватьТребованиямЦРПТ=Истина Тогда
				
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	КМРаспечатано_ХамелеонЦРПТ.Распечатан,
						|	КМРаспечатано_ХамелеонЦРПТ.cis
						|ИЗ
						|	РегистрСведений.КМРаспечатано_ХамелеонЦРПТ КАК КМРаспечатано_ХамелеонЦРПТ
						|ГДЕ
						|	КМРаспечатано_ХамелеонЦРПТ.cis = &cis";
					
					Запрос.УстановитьПараметр("cis", Стр.НомерКМ_Короткий);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи_1 = РезультатЗапроса.Выбрать();
					НашлиКМЭЭ=ЛОжь;
					Пока ВыборкаДетальныеЗаписи_1.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						если ВыборкаДетальныеЗаписи_1.cis=Стр.НомерКМ_Короткий 
							И ВыборкаДетальныеЗаписи_1.Распечатан=Истина Тогда
							НашлиКМЭЭ=Истина;
							Прервать;
						Конецесли;
						
					КонецЦикла;
					Если НашлиКМЭЭ=Истина Тогда
						Продолжить;
					Конецесли;
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					НомерПП=НомерПП+1;
					МассивКМРаспечатали.Добавить(Новый Структура("cis,НомерПП",Стр.НомерКМ_Короткий,НомерПП));
					
					//РегДв=РегистрыСведений.КМРаспечатано_ХамелеонЦРПТ.СоздатьНаборЗаписей();
					//РегДв.Отбор.cis.Установить(Стр.НомерКМ_Короткий);
					//НомерПП=НомерПП+1;
					//РегДв.Отбор.НомерПП.Установить(НомерПП);
					//Добав=РегДв.Добавить();
					//Добав.cis=Стр.НомерКМ_Короткий;
					//Добав.НомерПП=НомерПП;
					//Добав.Распечатан=Истина;
					//РегДв.Записать(Истина);
				
			Конецесли;
			

			
			//НСтр=Объект.Товары.НайтиСтроки(Новый Структура("ID",Стр.Order_Id_Line));
			//Если НСтр.Количество()=0  Тогда
			//	Продолжить;
			//Иначе
			//	НСтр=НСтр[0];
			//КонецЕсли;
			
			ГТИН=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьGTINСМарки(Стр.НомерКМ);
			//ГТИН=Сред(ГТИН,1,14);
			GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
			
			ОблМ.Параметры.Марка=GTIN.БрендТорговаяМарка;
			Если ЗначениеЗАполнено(GTIN.Размер) Тогда
				ОблМ.Параметры.Размер=GTIN.Размер;
			Иначе
				ОблМ.Параметры.Размер="--";
			КонецЕсли;
			ОблМ.Параметры.Артикул=GTIN.МодельПроизводителяАртикул;
			ОблМ.Параметры.Проудкция=GTIN;
			ОблМ.Параметры.Цвет=GTIN.Цвет;
			ОблМ.Параметры.Вверх=GTIN.МатериалВерха;
			ОблМ.Параметры.Подладка=GTIN.МатериалПодкладки;
			ОблМ.Параметры.Стелька=GTIN.Стелька;
			ОблМ.Параметры.Низ=GTIN.МатериалНиза;
			Если ЗначениеЗаполнено(GTIN.Изготовитель) Тогда
				ОблМ.Параметры.Изготовитель=GTIN.Изготовитель	;
			Иначе
				ОблМ.Параметры.Изготовитель=GTIN.ИННПроизводителяИмпортёра;
			КонецЕсли;
			ОблМ.Параметры.страна=GTIN.СтранаПроизводства;
			ОблМ.Параметры.Дата=Формат(GTIN.ДатаПубликации,"ДЛФ=Д");
			ОблМ.Параметры.Сезон=GTIN.Сезон;
			ОблМ.Параметры.Адрес=GTIN.ИННПроизводителяИмпортёра.ЮридическийАдрес;
			
			//ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
				 ;
	CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
		ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
		
				ГТИН=Сред(ГТИН,14+3);
			
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
				ГТИН=Сред(ГТИН,6);
			
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			
			
Если ЗначениеЗаполнено(GTIN.КодВУчетнойСистеме) тогда
				ГУДИ=GTIN.КодВУчетнойСистеме;
			Иначе
				ГУДИ=xmlString(GTIN.GTIN);
			Конецесли;			//ОблМ.Параметры.ШтрихКод=ГУДИ;
			
			ОблМ.Параметры.ШтрихКод=ГУДИ;
			
			Попытка
							
			Если ЗначениеЗАполнено(ГУДИ) Тогда
				Если ВерсияПравильная Тогда
			Генератор=Обработки.ГенерацияEAN13_ХамелеонЦРПТ.Создать();
		
			Картинка = Генератор.Сгенерировать(ГУДИ);
		Иначе
						Генератор=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();
		
			Картинка = Генератор.Сгенерировать13(ГУДИ);

			КонецЕсли;
			ОблМ.Рисунки.ШтрихКод_1.Картинка=Новый Картинка(Картинка);
			КонецЕсли;
			
			
			Исключение
			//	Сообщить("Для печати Data Matrix необходим релиз 8.3.9 или выше");
			//	Возврат;
			Конецпопытки;
			
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(ООО);
			МассивПараметров.Добавить(ВремПапка + СчРисунков + ".bmp");
			МассивПараметров.Добавить(ГенераторМатрицы.ПобитИсклИли);
			
			Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СгенерироватьDataMatrix", МассивПараметров);
			МассивЗаданий.Добавить(Задание);
			
			Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
				Попытка
					ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
				Исключение
				КонецПопытки;
				МассивЗаданий.Очистить();
			КонецЕсли;
			
			ОблМ.Рисунки.ДатаМ.Имя = "Рис" + СчРисунков;
			СчРисунков = СчРисунков + 1;
			
			
				Если ПервыйРисунок Тогда
					Если НЕ Таб.ПроверитьВывод(ОблМ) Тогда
						Таб.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					Таб.Вывести(ОблМ);
					ПервыйРисунок=ложь;
				Иначе
					Таб.Присоединить(ОблМ);
					
					ПервыйРисунок=Истина;
					
				Конецесли;
			
		КонецЦикла;
	
	Иначе
		
		Для Каждого Стр Из Ссылка.КМИзAPI Цикл
	ОблМ=Мак.ПолучитьОбласть("Строка|Шапка");
	
	

			
			Если СоответствоватьТребованиямЦРПТ=Истина Тогда
				
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	КМРаспечатано_ХамелеонЦРПТ.Распечатан,
						|	КМРаспечатано_ХамелеонЦРПТ.cis
						|ИЗ
						|	РегистрСведений.КМРаспечатано_ХамелеонЦРПТ КАК КМРаспечатано_ХамелеонЦРПТ
						|ГДЕ
						|	КМРаспечатано_ХамелеонЦРПТ.cis = &cis";
					
					Запрос.УстановитьПараметр("cis", Стр.НомерКМ_Короткий);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи_1 = РезультатЗапроса.Выбрать();
					НашлиКМЭЭ=ЛОжь;
					Пока ВыборкаДетальныеЗаписи_1.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						если ВыборкаДетальныеЗаписи_1.cis=Стр.НомерКМ_Короткий 
							И ВыборкаДетальныеЗаписи_1.Распечатан=Истина Тогда
							НашлиКМЭЭ=Истина;
							Прервать;
						Конецесли;
						
					КонецЦикла;
					Если НашлиКМЭЭ=Истина Тогда
						Продолжить;
					Конецесли;
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

					//РегДв=РегистрыСведений.КМРаспечатано_ХамелеонЦРПТ.СоздатьНаборЗаписей();
					//РегДв.Отбор.cis.Установить(Стр.НомерКМ_Короткий);
					НомерПП=НомерПП+1;
					МассивКМРаспечатали.Добавить(Новый Структура("cis,НомерПП",Стр.НомерКМ_Короткий,НомерПП));
					
					//РегДв.Отбор.НомерПП.Установить(НомерПП);
					//Добав=РегДв.Добавить();
					//Добав.cis=Стр.НомерКМ_Короткий;
					//Добав.НомерПП=НомерПП;
					//Добав.Распечатан=Истина;
					//РегДв.Записать(Истина);
				
			Иначе
					
				//РегДв=		
					
			Конецесли;
			
	
			//НСтр=Объект.Товары.НайтиСтроки(Новый Структура("ID",Стр.Order_Id_Line));
			//Если НСтр.Количество()=0  Тогда
			//	Продолжить;
			//Иначе
			//	НСтр=НСтр[0];
			//КонецЕсли;
			
			ГТИН=Сред(Стр.НомерКМ,3);
			ГТИН=Сред(ГТИН,1,15-1);
			GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
			
			ОблМ.Параметры.Марка=GTIN.БрендТорговаяМарка;
			Если ЗначениеЗаполнено(GTIN.Размер) Тогда
				ОблМ.Параметры.Размер=GTIN.Размер;
			Иначе
				ОблМ.Параметры.Размер="--";
			Конецесли;
			ОблМ.Параметры.Артикул=GTIN.МодельПроизводителяАртикул;
			ОблМ.Параметры.Проудкция=GTIN;
			ОблМ.Параметры.Цвет=GTIN.Цвет;
			ОблМ.Параметры.Вверх=GTIN.МатериалВерха;
			ОблМ.Параметры.Подладка=GTIN.МатериалПодкладки;
			ОблМ.Параметры.Стелька=GTIN.Стелька;
			ОблМ.Параметры.Низ=GTIN.МатериалНиза;
			Если ЗначениеЗаполнено(GTIN.Изготовитель) Тогда
				ОблМ.Параметры.Изготовитель=GTIN.Изготовитель	;
			Иначе
				ОблМ.Параметры.Изготовитель=GTIN.ИННПроизводителяИмпортёра;
			КонецЕсли;
			ОблМ.Параметры.страна=GTIN.СтранаПроизводства;
			ОблМ.Параметры.Дата=Формат(GTIN.ДатаПубликации,"ДЛФ=Д");
			ОблМ.Параметры.Сезон=GTIN.Сезон;
			ОблМ.Параметры.Адрес=GTIN.ИННПроизводителяИмпортёра.ЮридическийАдрес;
			
			ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			//ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
	CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
					ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
		
				ГТИН=Сред(ГТИН,14+3);
			
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
				ГТИН=Сред(ГТИН,6);
			
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			
			
Если ЗначениеЗаполнено(GTIN.КодВУчетнойСистеме) тогда
				ГУДИ=GTIN.КодВУчетнойСистеме;
			Иначе
				ГУДИ=xmlString(GTIN.GTIN);
			Конецесли;			//ОблМ.Параметры.ШтрихКод=ГУДИ;
			
			ОблМ.Параметры.ШтрихКод=ГУДИ;
			
			Попытка
			Если ЗначениеЗАполнено(ГУДИ) Тогда
				Если ВерсияПравильная Тогда
				Генератор=Обработки.ГенерацияEAN13_ХамелеонЦРПТ.Создать();
		
			Картинка = Генератор.Сгенерировать(ГУДИ);
		Иначе
						Генератор=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();
		
			Картинка = Генератор.Сгенерировать13(ГУДИ);
Конецесли;
			ОблМ.Рисунки.ШтрихКод_1.Картинка=Новый Картинка(Картинка);
			
		КонецЕсли;
		
		
			
			
		Исключение
				Сообщить("Для печати Data Matrix необходим релиз 8.3.9 или выше");
			//	Возврат;
			
			КонецПопытки;
			
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(ООО);
			МассивПараметров.Добавить(ВремПапка + СчРисунков + ".bmp");
			МассивПараметров.Добавить(ГенераторМатрицы.ПобитИсклИли);
			
			Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СгенерироватьDataMatrix", МассивПараметров);
			МассивЗаданий.Добавить(Задание);
			
			Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
				Попытка
					ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
				Исключение
				КонецПопытки;
				МассивЗаданий.Очистить();
			КонецЕсли;
			
			ОблМ.Рисунки.ДатаМ.Имя = "Рис" + СчРисунков;
			СчРисунков = СчРисунков + 1;
		
							
				Если ПервыйРисунок Тогда
					Если НЕ Таб.ПроверитьВывод(ОблМ) Тогда
						Таб.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					Таб.Вывести(ОблМ);
					ПервыйРисунок=ложь;
				Иначе
					Таб.Присоединить(ОблМ);
					
					ПервыйРисунок=Истина;
					
				Конецесли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если МассивЗаданий.Количество() > 0 Тогда
		Попытка
			ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
		Исключение
		КонецПопытки;
		МассивЗаданий.Очистить();
	КонецЕсли;
	
	Для Сч = 0 По СчРисунков - 1 Цикл
		ИсходнаяКартинка = Новый Картинка(ВремПапка + Сч + ".bmp");
		Таб.Рисунки["Рис"+Сч].Картинка = ИсходнаяКартинка.Преобразовать(ФорматКартинки.PNG);
	КонецЦикла;
	
	УдалитьФайлы(ВремПапка);
	Возврат Таб;
	
Конецфункции




&НаСервереБезконтекста
Процедура ПечатьЭти(Таб,Ссылка,МассивКМРаспечатали=Неопределено,СоответствоватьТребованиямЦРПТ=ЛОжь)
		СистемнаяИнформация = Новый СистемнаяИнформация;

	ВерсияПравильная=Сред(СистемнаяИнформация.ВерсияПриложения,1,6)<>"8.3.6." 
			И Сред(СистемнаяИнформация.ВерсияПриложения,1,6)<>"8.3.7."
			И Сред(СистемнаяИнформация.ВерсияПриложения,1,6)<>"8.3.8."
			И Сред(СистемнаяИнформация.ВерсияПриложения,1,6)<>"8.3.9.";
	
	Мак=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	ОблМ=Мак.ПолучитьОбласть("Строка|Шапка");
	ПервыйРисунок=Истина;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ,
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий
		|ИЗ
		|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
		|ГДЕ
		|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа";
	
	Запрос.УстановитьПараметр("ДокументЗаказа", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВерсияПравильная Тогда
		ГенераторМатрицы=Обработки.ГенерацияDataMatrix_ХамелеонЦРПТ.Создать();
		ГенераторМатрицы.Инициализировать();
	КонецЕсли;
	
	НомерПП=0;
	Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда 
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Стр=ВыборкаДетальныеЗаписи;
			Если Стр.НомерКороткий=Стр.НомерКМ Тогда
				
				Сообщить("Пропущен КМ "+Стр.НомерКМ+" так как у него убран криптохвост");
				Продолжить;
				
			Конецесли;
			
			
			Если СоответствоватьТребованиямЦРПТ=Истина Тогда
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	КМРаспечатано_ХамелеонЦРПТ.Распечатан,
						|	КМРаспечатано_ХамелеонЦРПТ.cis
						|ИЗ
						|	РегистрСведений.КМРаспечатано_ХамелеонЦРПТ КАК КМРаспечатано_ХамелеонЦРПТ
						|ГДЕ
						|	КМРаспечатано_ХамелеонЦРПТ.cis = &cis";
					
					Запрос.УстановитьПараметр("cis", Стр.НомерКМ_Короткий);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи_1 = РезультатЗапроса.Выбрать();
					НашлиКМЭЭ=ЛОжь;
					Пока ВыборкаДетальныеЗаписи_1.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						если ВыборкаДетальныеЗаписи_1.cis=Стр.НомерКМ_Короткий 
							И ВыборкаДетальныеЗаписи_1.Распечатан=Истина Тогда
							НашлиКМЭЭ=Истина;
							Прервать;
						Конецесли;
						
					КонецЦикла;
					Если НашлиКМЭЭ=Истина Тогда
						Продолжить;
					Конецесли;
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					НомерПП=НомерПП+1;
					МассивКМРаспечатали.Добавить(Новый Структура("cis,НомерПП",Стр.НомерКМ_Короткий,НомерПП));
					
					//РегДв=РегистрыСведений.КМРаспечатано_ХамелеонЦРПТ.СоздатьНаборЗаписей();
					//РегДв.Отбор.cis.Установить(Стр.НомерКМ_Короткий);
					//НомерПП=НомерПП+1;
					//РегДв.Отбор.НомерПП.Установить(НомерПП);
					//Добав=РегДв.Добавить();
					//Добав.cis=Стр.НомерКМ_Короткий;
					//Добав.НомерПП=НомерПП;
					//Добав.Распечатан=Истина;
					//РегДв.Записать(Истина);
				
			Конецесли;
			

			
			//НСтр=Объект.Товары.НайтиСтроки(Новый Структура("ID",Стр.Order_Id_Line));
			//Если НСтр.Количество()=0  Тогда
			//	Продолжить;
			//Иначе
			//	НСтр=НСтр[0];
			//КонецЕсли;
			
			ГТИН=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьGTINСМарки(Стр.НомерКМ);
			//ГТИН=Сред(ГТИН,1,14);
			GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
			
			ОблМ.Параметры.Марка=GTIN.БрендТорговаяМарка;
			Если ЗначениеЗАполнено(GTIN.Размер) Тогда
				ОблМ.Параметры.Размер=GTIN.Размер;
			Иначе
				ОблМ.Параметры.Размер="--";
			КонецЕсли;
			ОблМ.Параметры.Артикул=GTIN.МодельПроизводителяАртикул;
			ОблМ.Параметры.Проудкция=GTIN;
			ОблМ.Параметры.Цвет=GTIN.Цвет;
			ОблМ.Параметры.Вверх=GTIN.МатериалВерха;
			ОблМ.Параметры.Подладка=GTIN.МатериалПодкладки;
			ОблМ.Параметры.Стелька=GTIN.Стелька;
			ОблМ.Параметры.Низ=GTIN.МатериалНиза;
			Если ЗначениеЗаполнено(GTIN.Изготовитель) Тогда
				ОблМ.Параметры.Изготовитель=GTIN.Изготовитель	;
			Иначе
				ОблМ.Параметры.Изготовитель=GTIN.ИННПроизводителяИмпортёра;
			КонецЕсли;
			ОблМ.Параметры.страна=GTIN.СтранаПроизводства;
			ОблМ.Параметры.Дата=Формат(Ссылка.Дата,"ДЛФ=Д");
			ОблМ.Параметры.Сезон=GTIN.Сезон;
			ОблМ.Параметры.Адрес=GTIN.ИННПроизводителяИмпортёра.ЮридическийАдрес;
			
			//ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
				 ;
	CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
		ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
		
				ГТИН=Сред(ГТИН,14+3);
			
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
				ГТИН=Сред(ГТИН,6);
			
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			
			Если ЗначениеЗаполнено(GTIN.КодВУчетнойСистеме) тогда
				ГУДИ=GTIN.КодВУчетнойСистеме;
			Иначе
				ГУДИ=xmlString(GTIN.GTIN);
			Конецесли;
			//ОблМ.Параметры.ШтрихКод=ГУДИ;
			
			ОблМ.Параметры.ШтрихКод=ГУДИ;
			
			Попытка
				Если версияПравильная Тогда
					Картинка = ГенераторМатрицы.Сгенерировать(ООО);
				Иначе
										ГенераторМатрицы=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();

					Картинка = ГенераторМатрицы.Сгенерировать(ООО);
КонецЕсли;
			ОблМ.Рисунки.ДатаМ.Картинка=Новый Картинка(Картинка);
			
			
			Если ЗначениеЗАполнено(ГУДИ) Тогда
				Если ВерсияПравильная Тогда
			Генератор=Обработки.ГенерацияEAN13_ХамелеонЦРПТ.Создать();
		
			Картинка = Генератор.Сгенерировать(ГУДИ);
		Иначе
						Генератор=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();
		
			Картинка = Генератор.Сгенерировать13(ГУДИ);

			КонецЕсли;
			ОблМ.Рисунки.ШтрихКод_1.Картинка=Новый Картинка(Картинка);
			КонецЕсли;
			
			
			Исключение
			//	Сообщить("Для печати Data Matrix необходим релиз 8.3.9 или выше");
			//	Возврат;
			Конецпопытки;
			
				Если ПервыйРисунок Тогда
					Если НЕ Таб.ПроверитьВывод(ОблМ) Тогда
						Таб.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					Таб.Вывести(ОблМ);
					ПервыйРисунок=ложь;
				Иначе
					Таб.Присоединить(ОблМ);
					
					ПервыйРисунок=Истина;
					
				Конецесли;
			
		КонецЦикла;
	
	Иначе
		
		Для Каждого Стр Из Ссылка.КМИзAPI Цикл
			
			//НСтр=Объект.Товары.НайтиСтроки(Новый Структура("ID",Стр.Order_Id_Line));
			//Если НСтр.Количество()=0  Тогда
			//	Продолжить;
			//Иначе
			//	НСтр=НСтр[0];
			//КонецЕсли;
			
						Если Стр.НомерКороткий=Стр.НомерКМ Тогда
				
				Сообщить("Пропущен КМ "+Стр.НомерКМ+" так как у него убран криптохвост");
				Продолжить;
				
			Конецесли;

Если СоответствоватьТребованиямЦРПТ=Истина Тогда
				
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	КМРаспечатано_ХамелеонЦРПТ.Распечатан,
						|	КМРаспечатано_ХамелеонЦРПТ.cis
						|ИЗ
						|	РегистрСведений.КМРаспечатано_ХамелеонЦРПТ КАК КМРаспечатано_ХамелеонЦРПТ
						|ГДЕ
						|	КМРаспечатано_ХамелеонЦРПТ.cis = &cis";
					
					Запрос.УстановитьПараметр("cis", Стр.НомерКМ_Короткий);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи_1 = РезультатЗапроса.Выбрать();
					НашлиКМЭЭ=ЛОжь;
					Пока ВыборкаДетальныеЗаписи_1.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						если ВыборкаДетальныеЗаписи_1.cis=Стр.НомерКМ_Короткий 
							И ВыборкаДетальныеЗаписи_1.Распечатан=Истина Тогда
							НашлиКМЭЭ=Истина;
							Прервать;
						Конецесли;
						
					КонецЦикла;
					Если НашлиКМЭЭ=Истина Тогда
						Продолжить;
					Конецесли;
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					НомерПП=НомерПП+1;
					МассивКМРаспечатали.Добавить(Новый Структура("cis,НомерПП",Стр.НомерКМ_Короткий,НомерПП));
					
					//РегДв=РегистрыСведений.КМРаспечатано_ХамелеонЦРПТ.СоздатьНаборЗаписей();
					//РегДв.Отбор.cis.Установить(Стр.НомерКМ_Короткий);
					//НомерПП=НомерПП+1;
					//РегДв.Отбор.НомерПП.Установить(НомерПП);
					//Добав=РегДв.Добавить();
					//Добав.cis=Стр.НомерКМ_Короткий;
					//Добав.НомерПП=НомерПП;
					//Добав.Распечатан=Истина;
					//РегДв.Записать(Истина);
				
			Конецесли;
			
			ГТИН=Сред(Стр.НомерКМ,3);
			ГТИН=Сред(ГТИН,1,15-1);
			GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
			
			ОблМ.Параметры.Марка=GTIN.БрендТорговаяМарка;
			Если ЗначениеЗаполнено(GTIN.Размер) Тогда
				ОблМ.Параметры.Размер=GTIN.Размер;
			Иначе
				ОблМ.Параметры.Размер="--";
			Конецесли;
			ОблМ.Параметры.Артикул=GTIN.МодельПроизводителяАртикул;
			ОблМ.Параметры.Проудкция=GTIN;
			ОблМ.Параметры.Цвет=GTIN.Цвет;
			ОблМ.Параметры.Вверх=GTIN.МатериалВерха;
			ОблМ.Параметры.Подладка=GTIN.МатериалПодкладки;
			ОблМ.Параметры.Стелька=GTIN.Стелька;
			ОблМ.Параметры.Низ=GTIN.МатериалНиза;
			Если ЗначениеЗаполнено(GTIN.Изготовитель) Тогда
				ОблМ.Параметры.Изготовитель=GTIN.Изготовитель	;
			Иначе
				ОблМ.Параметры.Изготовитель=GTIN.ИННПроизводителяИмпортёра;
			КонецЕсли;
			ОблМ.Параметры.страна=GTIN.СтранаПроизводства;
			ОблМ.Параметры.Дата=Формат(GTIN.ДатаПубликации,"ДЛФ=Д");
			ОблМ.Параметры.Сезон=GTIN.Сезон;
			ОблМ.Параметры.Адрес=GTIN.ИННПроизводителяИмпортёра.ЮридическийАдрес;
			
			ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			//ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
	CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
					ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
		
				ГТИН=Сред(ГТИН,14+3);
			
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
				ГТИН=Сред(ГТИН,6);
			
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			
			
Если ЗначениеЗаполнено(GTIN.КодВУчетнойСистеме) тогда
				ГУДИ=GTIN.КодВУчетнойСистеме;
			Иначе
				ГУДИ=xmlString(GTIN.GTIN);
			Конецесли;			//ОблМ.Параметры.ШтрихКод=ГУДИ;
			
			ОблМ.Параметры.ШтрихКод=ГУДИ;
			
			Попытка
				Если ВерсияПравильная Тогда
						Картинка = ГенераторМатрицы.Сгенерировать(ООО);
					Иначе
					ГенераторМатрицы=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();

					Картинка = ГенераторМатрицы.Сгенерировать(ООО);
						
					КонецЕсли;
			ОблМ.Рисунки.ДатаМ.Картинка=Новый Картинка(Картинка);
			Если ЗначениеЗАполнено(ГУДИ) Тогда
				Если ВерсияПравильная Тогда
				Генератор=Обработки.ГенерацияEAN13_ХамелеонЦРПТ.Создать();
		
			Картинка = Генератор.Сгенерировать(ГУДИ);
		Иначе
						Генератор=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();
		
			Картинка = Генератор.Сгенерировать13(ГУДИ);
Конецесли;
			ОблМ.Рисунки.ШтрихКод_1.Картинка=Новый Картинка(Картинка);
			
			КонецЕсли;
			
			
		Исключение
				Сообщить("Для печати Data Matrix необходим релиз 8.3.9 или выше");
			//	Возврат;
			
			КонецПопытки;
			
		
							
				Если ПервыйРисунок Тогда
					Если НЕ Таб.ПроверитьВывод(ОблМ) Тогда
						Таб.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					Таб.Вывести(ОблМ);
					ПервыйРисунок=ложь;
				Иначе
					Таб.Присоединить(ОблМ);
					
					ПервыйРисунок=Истина;
					
				Конецесли;
			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция EncodeURL(URL)
    Результат1 = "";
    Для Сч = 1 По СтрДлина(URL) Цикл
        ch = Сред(URL,Сч,1);
        vch = КодСимвола(ch);

		Если ("A" <= ch ) И ( ch <= "Z") Тогда      
			Результат1 = Результат1 + ch;
		ИначеЕсли ("a" <= ch ) И ( ch <= "z") Тогда 
			Результат1 = Результат1 + ch;
        ИначеЕсли ("0" <= ch ) И ( ch <= "9") Тогда 
            Результат1 = Результат1 + ch;
        ИначеЕсли (ch = " ") ИЛИ ( ch = "+") Тогда          
            Результат1 = Результат1 + "+";
		ИначеЕсли (ch = "-" ) ИЛИ ( ch = "_")       
			ИЛИ (ch = ".") ИЛИ (ch = "!")
            ИЛИ (ch = "~") ИЛИ (ch = "*")
            ИЛИ (ch = "") ИЛИ (ch = "(")
            ИЛИ (ch = ")") Тогда
            Результат1 = Результат1 + ch;
        ИначеЕсли (vch <= 127) Тогда        
            Результат1 = Результат1 + hex(vch);
        ИначеЕсли (vch <= 2047) Тогда       
            Результат1 = Результат1 + hex(192 + Цел(vch / 64));
            Результат1 = Результат1 + hex(128 + (vch % 64));
		Иначе                  
			Результат1 = Результат1 + hex(224 + Цел(vch / 4096));
            Результат1 = Результат1 + hex(128 + (Цел(vch / 64) % 64));
            Результат1 = Результат1 + hex(128 + (vch % 64));
        КонецЕсли;
    КонецЦикла;

    Возврат Результат1;
КонецФункции // ()


Функция hex(Знач Значение__)
    Значение__=Число(Значение__);
    Если Значение__<=0 Тогда
        Результат1="0";
    Иначе
        Значение__=Цел(Значение__);
        Результат1="";
        Пока Значение__>0 Цикл
            Результат1=Сред("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",Значение__%16 + 1,1)+Результат1;
            Значение__=Цел(Значение__/16) ;
        КонецЦикла;
    КонецЕсли;
    Если СтрДлина(Результат1) < 2 Тогда

        Результат1 = "0" + Результат1;

    КонецЕсли;
    Возврат "%" + Результат1;
КонецФункции


Функция ПолучитьИзПользователя(Пользователь=Неопределено)
	Если Объект.Организация.ИНН=ТекущийПользователь.Организация.ИНН 
		И Объект.ТекущийПользователь.СайтыВходаВСистему=ТекущийПользователь.СайтыВходаВСистему Тогда
		Пользователь=Текущийпользователь;
		Возврат Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(Текущийпользователь);
	ИначеЕсли Объект.ТекущийПользователь.ПометкаУдаления=Ложь Тогда
		Пользователь=Объект.ТекущийПользователь;
		Возврат Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);
	Иначе
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Пользователи_ХамелеонЦРПТ КАК Пользователи_ХамелеонЦРПТ
		|ГДЕ
		|	Пользователи_ХамелеонЦРПТ.Организация.ИНН = &Организация
		|	И Пользователи_ХамелеонЦРПТ.СайтыВходаВСистему = &СайтыВходаВСистему
		|	И НЕ Пользователи_ХамелеонЦРПТ.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация.ИНН);
	Запрос.УстановитьПараметр("СайтыВходаВСистему", Объект.ТекущийПользователь.СайтыВходаВСистему);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НайтиПольз=Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		
		АдресРаздробить=ВыборкаДетальныеЗаписи.Ссылка.АдресСайтаСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
		
		Если Значениезаполнено(Адрес) Тогда
		                      НайтиПольз=ВыборкаДетальныеЗаписи.Ссылка;
							  
				КонецЕсли;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		
		//НайтиПольз=Справочники.Пользователи_ХамелеонЦРПТ.НайтиПоРеквизиту("Организация",Объект.Организация);
		Если ЗначениеЗаполнено(НайтиПольз) Тогда
			Пользователь=НайтиПольз;
			Возврат Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(НайтиПольз);
		КонецЕсли;
			
	КонецЕслИ;
	Возврат Неопределено;
КонецФункции

Функция СначалGTINБезПод()
	МассиПП=Новый Массив;
	Для Каждого Стр Из ОБъект.Товары Цикл
		Если Не ЗначениеЗаполнено(Стр.GTIN.ДатаПубликации) тогда
			МассиПП.Добавить(Стр.GTIN.GTIN)
		КонецЕсли;
	Конеццикла;
	Возврат МассиПП
КонецФункции

Функция ЗагрузканаСервереДатаПубликации(Thumbprint_1,СРегистра,УжеОтправили,Пользователь,ММ)
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
	HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
	HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
//			ИНН=ВернутьИНН(Обр.Организации[0].Организация );
Для Каждого Стр_1 Из ММ Цикл
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?gtin="+дополнитьСтроку(Стр_1));
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	Если Ответ.КодСостояния=200 Тогда
		//ЗагружаемШаблоныНасервере(Текст1,Обр.Пользователь);
		Если ЗагружаемГТИН(Текст1,Стр_1) Тогда
			Возврат Истина;
		КонецЕсли;
		
	ИначеЕсли Ответ.КодСостояния=401 
		ИЛИ Ответ.КодСостояния=502  
		Тогда
			Если УжеОтправили=Истина Тогда
			Иначе
				Возврат Ложь;
		КонецЕсли
	КонецЕсли;
КонецЦикла;
Возврат Истина
	
Конецфункции

&НаКлиенте
Процедура		ОбновлямДатуПубликации(ММ,УжеОтправили=Ложь)
	
	Обр=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Если Обр.Организации.Количество()=0 Тогда
		Обр.ПодключитьсяКЦРПТ(ММ,Ложь);
	КонецЕсли;
	Если Обр.Организации.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Thumbprint_1=ПолучитьИзПользователя();	
		Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
			Возврат;
		КонецЕслИ;
	
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
	Если ОбработкаWEBНаСервере Тогда
		Если НЕ ЗагрузканаСервереДатаПубликации(Thumbprint_1,СРегистра,УжеОтправили,Обр.Пользователь,ММ) Тогда
				Если УжеОтправили=Истина Тогда
				//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОбновлямДатуПубликации(ММ,Истина)			
		КонецЕсли
		
		КонецЕсли;
		
		
	Иначе
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
	HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
	HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
//			ИНН=ВернутьИНН(Обр.Организации[0].Организация );
Для Каждого Стр_1 Из ММ Цикл
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?gtin="+дополнитьСтроку(Стр_1));
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	Если Ответ.КодСостояния=200 Тогда
		//ЗагружаемШаблоныНасервере(Текст1,Обр.Пользователь);
		Если ЗагружаемГТИН(Текст1,Стр_1) Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Ответ.КодСостояния=401 
		ИЛИ Ответ.КодСостояния=502  
		Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Возврат;
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОбновлямДатуПубликации(ММ,Истина);
				Возврат;
		КонецЕсли
	КонецЕсли;
КонецЦикла;	
КонецЕсли;
КонецПроцедуры


Функция ЗагружаемГТИН(Текст,Стр_1)
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Текст);
			Попытка
				NNN=ПрочитатьJSON(ЧтениеJSON);
				Для Каждого Стр Из NNN.results Цикл
					Если Стр_1<>Число(Стр.gtin) Тогда
						Продолжить;
					КонецЕсли;
					СпрД=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Стр.gtin));
					Если СпрД<>Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка() Тогда
						СпрД=СпрД.ПолучитьОбъект();
					Иначе
						СпрД=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
					КонецЕсли;
					СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
					
					СпрД.БрендТорговаяМарка=Стр.brand;
					СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(Стр.country);
					СпрД.GTIN=Число(Стр.gtin);
					СпрД.id=Стр.id;
					СпрД.ИННПроизводителяИмпортёра=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",Стр.inn);
					Если Не ЗначениеЗАполнено(СпрД.ИННПроизводителяИмпортёра) Тогда
						Спр_К=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
						Спр_К.ИНН=Стр.inn;
						Спр_К.Наименование=Спр_К.ИНН;
						Спр_К.Записать();
						СпрД.ИННПроизводителяИмпортёра=Спр_К.Ссылка;
						
					Конецесли;
					Стр.Свойство("materialDown",СпрД.МатериалНиза);
					Стр.Свойство("materialLining",СпрД.МатериалПодкладки);
					Стр.Свойство("materialUpper",СпрД.МатериалВерха);
					Стр.Свойство("color",СпрД.Цвет);
					
					Стр.Свойство("tnVedCode",СпрД.КодТНВЭДКороткий);
					СпрД.МодельПроизводителяАртикул=Стр.model;
					СпрД.Наименование=Стр.name;
					СпрД.НаименованиеТовара=Стр.name;
					СпрД.ВидОбуви=Справочники.ВидОбуви_ХамелеонЦРПТ.НайтиПоКоду(Стр.productType);
					Если Не ЗначениеЗаполнено(СпрД.ВидОбуви) тогда
						СпрВ=Справочники.ВидОбуви_ХамелеонЦРПТ.СоздатьЭлемент();
						СпрВ.Код=Стр.productType;
						СпрВ.Наименование=Стр.productTypeDesc;
						СпрВ.Записать();
						СпрД.ВидОбуви=СпрВ.Ссылка;
					КонецЕсли;
					
					СпрД.ДатаПубликации=Дата(1970,1,1)+Стр.publicationDate/1000;					
					СпрД.Записать();
					Если Не ЗначениеЗаполнено(СпрД.ДатаПубликации) Тогда
						Возврат Истина;
					КонецЕсли;
				Конеццикла;
				
			Исключение
						Возврат Истина;
			КонецПопытки;
	
	Возврат Ложь;
КонецФункции

&НаСервереБезКонтекста
Функция РежимРаботы()
	Константы.РежимРаботыХамелеонЦРПТ.Получить()
КонецФункции


Функция ЗагрузканаСервереОтправитьВРЦПТ(Thumbprint_1,СРегистра,УжеОтправили,Тело)
	
Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
	
	Если ЗначениеЗаполнено(ОБъект._Order_ID) Тогда
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/order/"+Объект._Order_ID);      //создаем новый черновик
	Иначе
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/order/draft");       //обновляем черновик
	КонецЕсли;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Если ЗначениеЗаполнено(ОБъект._Order_ID) Тогда
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("PATCH",HTTPЗапрос);
	Иначе
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("POST",HTTPЗапрос);
		
	КонецЕсли;
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Текст1);
	КонецЕсли;
	 
		 
	Если Ответ.КодСостояния=202 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Объект._Order_ID=NNN.order_id;
	
	ИначеЕсли Ответ.КодСостояния=200 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Объект._Order_ID=NNN.order_id;
			
	ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502      Тогда
			Если УжеОтправили=Истина Тогда
			Иначе
				Возврат Истина
			КонецЕсли
	Иначе
		Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
			Попытка
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				попытка
					
					Объект.ОшибкаОтправки=NNN.error_message;
				Исключение
					Попытка
						Объект.ОшибкаОтправки=NNN.error_description;
						Если NNN.error="access_denied" Тогда
							Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
						КонецЕсли;
					Исключение
						Сообщить(Текст1);
					КонецПопытки;
					
				КонецПопытки;
				
			Исключение
				Сообщить(Текст1);
			КонецПопытки;
	КонецЕсли;
	
	Возврат Истина	
КонецФункции

Процедура ОтправитьФармацевтику()
	
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("documents");
	
	Чтение.ЗаписатьНачалоЭлемента("code_emission");
	Чтение.ЗаписатьАтрибут("action_id","10300");
	Чтение.ЗаписатьНачалоЭлемента("subject_id");
	Чтение.ЗаписатьТекст(Объект.Организация.subjectIdФармацевтика);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("operation_date");
	Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс"""));
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("oms_id");
	Чтение.ЗаписатьТекст(Объект.НомерПервичногоДокумента);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("doc_date");
	Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=дд.ММ.гггг"));
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("turnover_type");
	Если Объект.ТипОтгрузкиФармацевтика=Перечисления.ТипыОперацииОтгрузкиСоСкладаФармацевтика_ХамелеонЦРПТ.Возврат Тогда
		Чтение.ЗаписатьТекст("2");
	Иначе
		Чтение.ЗаписатьТекст("1");
	КонецЕсли;
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Чтение.ЗаписатьНачалоЭлемента("source");
	Чтение.ЗаписатьТекст("1");
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("contract_type");
	Чтение.ЗаписатьТекст("1");
	Чтение.ЗаписатьКонецЭлемента();
	
//	Чтение.ЗаписатьНачалоЭлемента("order_details");
	//Чтение.ЗаписатьТекст(ДополнитьСтроку(xmlString(Стр_1.gtin.gtin)));
	//Чтение.ЗаписатьКонецЭлемента();
Для Каждого Стр_1 Из Объект.Товары Цикл
	
	//Чтение.ЗаписатьНачалоЭлемента("signs");
	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));
	Для Каждого Стр_c Из НСтрок Цикл
		Чтение.ЗаписатьНачалоЭлемента("order_details");
		Чтение.ЗаписатьНачалоЭлемента("sgtin");
		
		Штрих=Стр_c.cis;
		Если Сред(Штрих,1,2)="01" Тогда
			Штрих=Сред(Штрих,3,14)+Сред(Штрих,19);
		КонецЕсли;
		
		Чтение.ЗаписатьТекст(Штрих);
	////s	Чтение.ЗаписатьКонецЭлемента();
		
		Чтение.ЗаписатьНачалоЭлемента("cost");
		
		Чтение.ЗаписатьТекст(xmlString(Стр_1.Цена));
		Чтение.ЗаписатьКонецЭлемента();
		
		Если ЗначениеЗАполнено(Стр_1.НДС) ТОгда
			
			Чтение.ЗаписатьНачалоЭлемента("vat_value");
			
			Чтение.ЗаписатьТекст(xmlString(Стр_1.НДС));
			Чтение.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
		Чтение.ЗаписатьКонецЭлемента();
		
	Чтение.ЗаписатьКонецЭлемента();
		
	Конеццикла;
Конеццикла;
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();	
КонецПроцедуры

Функция ПроверкаЗаполнения_1()
	Если ЗначениеЗАполнено(ОБъект.Ссылка) Тогда	
		
		Для Каждого Стр_1 Из ОБъект.Товары Цикл
			
			ГТИН=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Стр_1.GTIN.GTIN,14,"0");
			Попытка
				Если Число(ГТИН)=0 Тогда
					Сообщить("В документе "+Строка(ОБъект.Ссылка)+" не заполнено поле GTIN в продукции "+Строка(Стр_1.GTIN));
					Возврат ложь;
				КонецЕсли;
			Исключение
					Сообщить("В документе "+Строка(ОБъект.Ссылка)+" не заполнено поле GTIN в продукции "+Строка(Стр_1.GTIN));
				Возврат Ложь;
			КонецПопытки;
				
			
			Если Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Молоко Тогда
				Если не ЗначениеЗаполнено(Стр_1.НомерВСД) И ИспользоватьОтчетОбИспользовании=ЛОжь тогда
					
					Сообщить("В документе "+Строка(ОБъект.Ссылка)+" не заполнено поле номер ВСД в продукции "+Строка(Стр_1.GTIN));
					Возврат Ложь;
					
				Конецесли;
			КонецЕсли;
			
			
		Конеццикла;
		
		
		Возврат Объект.Ссылка.ПолучитьОбъект().ПроверитьЗаполнение()
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции


&НаСервереБезКонтекста
Функция Автомат(ТекущийПОльзователь)
	Возврат ТекущийПОльзователь.СоздаватьИОтправлятьВводВОборотПослеЭмитирования
Конецфункции
&НаКлиенте
Процедура ОтправитьВЦРПТ(Команда,УжеОтправили=Ложь) Экспорт
	
//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОтправитьВЦРПТЗаказНаКМНаСервере(Объект.Ссылка,ТекущийПользователь);
//	Возврат;
	
	Если Не ЗначениеЗаполнено(Объект.ТипПродукции) Тогда
			ПриИзмененияПользователя()
	КонецЕслИ;
	
	ЭтаФорма.Записать();
	Если НЕ ПроверкаЗаполнения_1() Тогда
		Сообщить("Не заполнены все поля");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект._Order_ID) Тогда
		Сообщить("Отправка не возможно. Документ уже отправлен в ЦРПТ");
		Возврат;
	КонецЕсли;
	

	
	Если 
	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен")
	
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован") Тогда
		
		Возврат
		
	КонецЕсли;
	
	Thumbprint_1=ПолучитьИзПользователя();	
		Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
			Возврат;
		КонецЕслИ;
	
		
		
		Попытка
		Форм=Получитьформу("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Форм.ЛицензияОпределить_Просто(Thumbprint_1);
Исключение
КонецПопытки;
	
	Если Объект.Товары.Количество()>10 Тогда
		Сообщить("При отправке в ЦРПТ максимальное количество строк 10. У вас "+
		Строка(объект.Товары.Количество())+". Отправка отменена");
		Возврат;
	КонецЕсли;
	
	Автомат=Автомат(Объект.ТекущийПользователь);
	Объект.ВвестиВОборотПослеЭмитирования=Автомат;
	
	Если Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Молоко") Тогда
		Объект.ИспользоватьОтчетОбИспользовании=ИспользоватьОтчетОбИспользовании
	КонецЕсли;
	
	ЭтаФорма.Записать();
		
	ОтпрваитьШины(Thumbprint_1);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьТокенСрегистра(ТТ)
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(ТТ,"")
КонецПроцедуры

Функция НеПрошлаПроверка21(Файл_1) Экспорт
	//	Возврат Ложь;
	КаталогВременногоФайла=КаталогВременныхФайлов()+"new_maket_V21\";
	СоздатьКаталог(КаталогВременногоФайла);
		
	Файл=ПолучитьИмяВременногоФайла("xml");
	
	Файл=СтрЗаменить(Файл,КаталогВременныхФайлов(),КаталогВременногоФайла);
	
	
	Файл_2=Новый ТекстовыйДокумент;
	Файл_2.ДобавитьСтроку(Файл_1);
	Файл_2.Записать(Файл,КодировкаТекста.UTF8);
	
	//ИмяВремен=ПолучитьИмяВременногоФайла("xsd");
	//МакетXDTO.Записать(ИмяВремен,КодировкаТекста.ANSI);
	//dictionary_v20=ПолучитьИмяВременногоФайла("xsd");
	//dictionary_v20=КаталогВременногоФайла+"dictionary_v21.xsd";
	dictionary_v20=ПолучитьИмяВременногоФайла("xsd");
	dictionary_v20=СтрЗаменить(dictionary_v20,КаталогВременныхФайлов(),КаталогВременногоФайла);
	
	
	
	LP_base_types=ПолучитьИмяВременногоФайла("xsd");
	LP_base_types=СтрЗаменить(LP_base_types,КаталогВременныхФайлов(),КаталогВременногоФайла);

	Если Константы.РежимРаботыХамелеонЦРПТ.Получить()=1 Тогда	
		Текст=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("dictionary_v21");
	Иначе
		Текст=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("Тестовый");
	КонецЕсли;
	Текст.Записать(dictionary_v20,КодировкаТекста.UTF8);
	
	
	Текст=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("LP_base_types");
	Текст.Записать(LP_base_types,КодировкаТекста.UTF8);
	
	XMLDoc = New COMObject("Msxml2.DOMDocument.6.0");
    XMLDoc.Async = false;
    XMLDoc.ValidateOnParse = true;
    SchemaCache = New COMObject("Msxml2.XMLSchemaCache.6.0");
	SchemaCache.Add("LP_base_types.xsd",LP_base_types);
	SchemaCache.Add("",dictionary_v20);
	
	XMLDoc.Schemas = SchemaCache;
    XMLDoc.SetProperty("MultipleErrorMessages", true);
    XMLDoc.Load(Файл);
    ErrObj = XMLDoc.ParseError;
	Ошибка="";
    If ErrObj.ErrorCode <> 0 Then
        For Each ErrItem In ErrObj.AllErrors Do 
            //Message("Ошибка : " + ErrItem.Reason + " " + ErrItem.SrcText);
			Ошибка=Ошибка+"В строке № "+Erritem.line+" в колонке № "++Erritem.linepos+" ошибка: "+ErrItem.Reason+" "+ErrItem.SrcText+Символы.ПС+Символы.ПС;
		EndDo;
//		УдалитьФайлы(ИмяВремен);
		Сообщить(Ошибка);
		Возврат Истина;
    EndIf;
	УдалитьФайлы(Файл);
	УдалитьФайлы(dictionary_v20);
	УдалитьФайлы(LP_base_types);
	
	Возврат Ложь;
КонецФункции


&НаСервереБезКонтекста
Функция дополнитьСтроку(Ср)
	ВОзврат Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(Ср),14,"0");
	
Конецфункции
Функция НаСервереФормируемЗаказ(Thumbprint_1)
		Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();
		Чтен.ЗаписатьИмяСвойства("order_id");
		Чтен.ЗаписатьЗначение(Объект._Order_ID);
		Чтен.ЗаписатьИмяСвойства("contract_number");
		Чтен.ЗаписатьЗначение(Объект.НомерДоговораСОператором);
		Чтен.ЗаписатьИмяСвойства("contract_date");
		Чтен.ЗаписатьЗначение(Формат(Объект.ДатаДоговораСОператором,"ДФ=""гггг-ММ-ддT00:00:00""")+".000Z");
		Чтен.ЗаписатьИмяСвойства("operator_contract_date");
		Чтен.ЗаписатьЗначение(Формат(Объект.ДатаДоговораСОператором,"ДФ=""дд.ММ.гггг"""));
		Чтен.ЗаписатьИмяСвойства("production_type");
	 Если Объект.СпособИзготовленияСИ=Перечисления.СпособИзготовленияСИ_ХамелеонЦРПТ.Самостоятельно Тогда
		Чтен.ЗаписатьЗначение("SELF_MADE");
 Иначе
		Чтен.ЗаписатьЗначение("OPERATOR");
	КонецЕсли;
		Чтен.ЗаписатьИмяСвойства("contact_person");
		Чтен.ЗаписатьЗначение(Объект.ТекущийПользователь.КонтактноеЛицо);
		
		Чтен.ЗаписатьИмяСвойства("delivery_address");
		Чтен.ЗаписатьЗначение(Объект.Организация.АдресМестонахождения);
		
		Чтен.ЗаписатьИмяСвойства("delivery_type");
		Чтен.ЗаписатьЗначение("PHYSICAL_DEVICE");
		
		Чтен.ЗаписатьИмяСвойства("label_template_id");
		Чтен.ЗаписатьЗначение(xmlString(Объект.Ссылка.ШаблонЭтикетки.УникальныйИдентификатор));
		
		
		
		Чтен.ЗаписатьИмяСвойства("products_information");
		Чтен.ЗаписатьНачалоМассива();
		
		Для Каждого Стр Из Объект.Товары Цикл
			Чтен.ЗаписатьНачалоОбъекта();
			Если ЗначениеЗаполнено(Стр.ID) Тогда
				Чтен.ЗаписатьИмяСвойства("orderLineId");
				Чтен.ЗаписатьЗначение(xmlString(Стр.ID));
			КонецЕсли;
			
				Чтен.ЗаписатьИмяСвойства("gtin");
				Чтен.ЗаписатьЗначение(дополнитьСтроку(Стр.GTIN.GTIN));
				Если Объект.СпособВыпускаТоваров<>Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.МаркировкаОстатков Тогда
					Если ЗначениеЗаполнено(Стр.КодТНВЭД) Тогда
							Если ТипЗнч(Стр.КодТНВЭД)=Тип("Строка") Тогда
								Чтен.ЗаписатьИмяСвойства("tn_ved_code");
							
								
								Чтен.ЗаписатьЗначение(Сред(xmlString(Стр.КодТНВЭД),1,4));
							ИначеЕсли ТипЗнч(Стр.КодТНВЭД)=Тип("СправочникСсылка.КодТНВЭД_ХамелеонЦРПТ") Тогда
								Чтен.ЗаписатьИмяСвойства("tn_ved_code");
							
								
								Чтен.ЗаписатьЗначение(Сред(xmlString(Стр.КодТНВЭД.Код),1,4));
								
							КонецЕсли;
						КонецЕсли;
				КонецеСли;
				Чтен.ЗаписатьИмяСвойства("emission_type");
				
		Если Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.МаркировкаОстатков Тогда
				
				Чтен.ЗаписатьЗначение("REMAINS");
				
			ИначеЕсли Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ВвезенВРФ Тогда
				Чтен.ЗаписатьЗначение("IMPORT");
		Иначе
				Чтен.ЗаписатьЗначение("PRODUCTION");
				
			КонецЕсли;
				Чтен.ЗаписатьИмяСвойства("code_quantity");
				Чтен.ЗаписатьЗначение(xmlString(Стр.КоличествоКМ));

				Чтен.ЗаписатьИмяСвойства("serial_num_type");
			Если Стр.СпособФормированияСН=перечисления.СпособФормированияСН_ХамелеонЦРПТ.ОператорИСМП Тогда
				Чтен.ЗаписатьЗначение("OPERATOR");
				Чтен.ЗаписатьИмяСвойства("serial_number");
				Чтен.ЗаписатьЗначение("null");
				
			Иначе
				Чтен.ЗаписатьЗначение("SELF_MADE");
				чтен.ЗаписатьИмяСвойства("serial_numbers");
				чтен.ЗаписатьНачалоМассива();
						НСтр=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
				БылаПозиция=Ложь;
			Для Каждого Стр_1 Из НСтр Цикл
				Если ЗначениеЗаполнено(Стр_1.СерийныйНомер) Тогда
					
					чтен.ЗаписатьЗначение(Стр_1.СерийныйНомер)
					
				КонецЕсли;
			Конеццикла;
			    чтен.ЗаписатьКонецМассива();
			
	
			КонецЕсли;
			
			Чтен.ЗаписатьКонецОбъекта();
				
				
		Конеццикла;
		Чтен.ЗаписатьКонецМассива();
			Чтен.ЗаписатьКонецОбъекта();
					
		
		
		Текст=Чтен.Закрыть();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
	
	
	Возврат Текст;
	 ТекстДокумента="<MKIO_Order action_id=""01"">  
	 |<TRADE_PARTICIPANT_INN>"+Объект.Организация.ИНН+"</TRADE_PARTICIPANT_INN>
	 |<OPERATOR_CONTRACT_NUM>"+Объект.НомерДоговораСОператором+"</OPERATOR_CONTRACT_NUM>  
	 |<OPERATOR_CONTRACT_DATE>"+Формат(Объект.ДатаДоговораСОператором,"ДФ=""дд.ММ.гггг""")+"</OPERATOR_CONTRACT_DATE>  
	 |<PREP_METHOD>";
	 Если Объект.СпособИзготовленияСИ=Перечисления.СпособИзготовленияСИ_ХамелеонЦРПТ.Самостоятельно Тогда
	 ТекстДокумента= ТекстДокумента+"1";
 Иначе
	 ТекстДокумента= ТекстДокумента+"2";
	КонецЕсли;
	 
	ТекстДокумента= ТекстДокумента+"</PREP_METHOD>";
	 ТекстДокумента= ТекстДокумента+"
	 |<RECEPTION_METHOD>";
	 Если Объект.СпособИзготовленияСИ=Перечисления.СпособИзготовленияСИ_ХамелеонЦРПТ.Самостоятельно Тогда
	 	ТекстДокумента= ТекстДокумента+"1";
	 Иначе
		 ТекстДокумента= ТекстДокумента+"2";
	 КонецЕсли;
	ТекстДокумента= ТекстДокумента+"</RECEPTION_METHOD>";
	 
	ТекстДокумента= ТекстДокумента+"	
	|<LABEL_TEMPLATE_ID>"+xmlString(Объект.Ссылка.ШаблонЭтикетки.УникальныйИдентификатор)+"</LABEL_TEMPLATE_ID> ";
	
	
	//Если Объект.СпособИзготовленияСИ=Перечисления.СпособИзготовленияСИ_ХамелеонЦРПТ.ЦентрЭтикетированияИМаркировки Тогда
	//	ТекстДокумента= ТекстДокумента+"	
	//	|<LABELLING_CENTER_NAME>"+xmlString(Объект.НаименованиеЦЭМ)+"</LABELLING_CENTER_NAME> 
	//	|<LABELLING_CENTER_INN>"+xmlString(Объект.ИННЦЭМ)+"</LABELLING_CENTER_INN> 
	//	|<LABELLING_CENTER_CONTRACT_NUM>"+xmlString(Объект.НомерДогоораСЦЭМ)+"</LABELLING_CENTER_CONTRACT_NUM> 
	//	 |<LABELLING_CENTER_CONTRACT_DATE>"+Формат(Объект.ДатаДоговораСЦЭМ,"ДФ=""дд.ММ.гггг""")+"</LABELLING_CENTER_CONTRACT_DATE> "; 
	//	
	//КонецЕслИ;
	//
	ТекстДокумента= ТекстДокумента+"	
	|<CONTACT>"+Объект.ТекущийПользователь.КонтактноеЛицо+"</CONTACT> ";
	
	Если ЗначениеЗаполнено(Объект.Организация.АдресМестонахождения) Тогда
		ТекстДокумента= ТекстДокумента+"	
		|<DELIVERY_ADDRESS>"+Объект.Организация.АдресМестонахождения+"</DELIVERY_ADDRESS>  ";
	КонецЕсли;
	Если Объект.Товары.Количество()>0 Тогда
	ТекстДокумента= ТекстДокумента+"	
	|<PRODUCT_DETAILS>    ";
	
	Для Каждого Стр Из Объект.Товары Цикл
		ТекстДокумента= ТекстДокумента+"
		|<PRODUCT>";
		Если ЗначениеЗаполнено(Стр.GTIN.GTIN) Тогда
			ТекстДокумента= ТекстДокумента+"
			|<GTIN>"+дополнитьСтроку(xmlString(Стр.GTIN.GTIN))+"</GTIN>";
		КонецЕсли;
		
			Если ТипЗнч(Стр.КодТНВЭД)=Тип("Строка") Тогда
		ТекстДокумента= ТекстДокумента+"
		
		|<TNVED_CODE>"+Сред(xmlString(Стр.КодТНВЭД),1,4)+"</TNVED_CODE>      
		|<RELEASE_METHOD>";
	        ИначеЕсли ТипЗнч(Стр.КодТНВЭД)=Тип("СправочникСсылка.КодТНВЭД_ХамелеонЦРПТ") Тогда
	        
		ТекстДокумента= ТекстДокумента+"
		
		|<TNVED_CODE>"+Сред(xmlString(Стр.КодТНВЭД.Код),1,4)+"</TNVED_CODE>      
		|<RELEASE_METHOD>";
	Иначе
				ТекстДокумента= ТекстДокумента+"
		
		|      
		|<RELEASE_METHOD>";

		    КонецЕслИ;
		Если Стр.СпособВыпускаТоваров="Ввезен в РФ" Тогда
			ТекстДокумента= ТекстДокумента+"2";
		Иначе
			ТекстДокумента= ТекстДокумента+"1";
		КонецЕсли;
			ТекстДокумента= ТекстДокумента+"
			|</RELEASE_METHOD>      
			|<MKIO_QUANTITY>"+xmlString(Стр.КоличествоКМ)+"</MKIO_QUANTITY>      
			|";
			
			Если Thumbprint_1.РежимРаботы=1 Тогда
			ТекстДокумента= ТекстДокумента+"
			|<IO_TYPE>";
				Если Стр.ВидСИ=Перечисления.ВидСИ_ХамелеонЦРПТ.GLUED Тогда
					
					ТекстДокумента=ТекстДокумента+"2";
				ИначеЕсли Стр.ВидСИ=Перечисления.ВидСИ_ХамелеонЦРПТ.HINGED Тогда
				
					ТекстДокумента=ТекстДокумента+"3";
				Иначе
					ТекстДокумента=ТекстДокумента+"1";
					
				КонецЕсли;
			
				ТекстДокумента=ТекстДокумента+			
			"</IO_TYPE>";
			КонецЕсли;
					ТекстДокумента=ТекстДокумента+"
			|<S_ORG_METHOD>";

			Если Стр.СпособФормированияСН=перечисления.СпособФормированияСН_ХамелеонЦРПТ.ОператорИСМП Тогда
				ТекстДокумента=ТекстДокумента+"2";
				
			Иначе
				ТекстДокумента=ТекстДокумента+"1";
				
			КонецЕсли;
					

ТекстДокумента=ТекстДокумента+"</S_ORG_METHOD>";
			Если Thumbprint_1.РежимРаботы=1 Тогда

ТекстДокумента=ТекстДокумента+"
	|<MARKING_TYPE>";
								Если Стр.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаПотребительскуюУпаковку Тогда
				ТекстДокумента=ТекстДокумента+"1";
			ИначеЕсли Стр.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаТовар Тогда
				ТекстДокумента=ТекстДокумента+"2";
			
			ИначеЕсли Стр.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаТоварныйЯрлык Тогда
				ТекстДокумента=ТекстДокумента+"3";
			Иначе
				Сообщить("Заполните поле вид марокировки, или перевыберите пользователя в документе");
			Конецесли;

					ТекстДокумента=ТекстДокумента+"</MARKING_TYPE>";    
КонецЕсли;					


				НСтр=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
				БылаПозиция=Ложь;
			Для Каждого Стр_1 Из НСтр Цикл
				Если ЗначениеЗаполнено(Стр_1.СерийныйНомер) Тогда
					Если Не БылаПозиция Тогда
						ТекстДокумента=ТекстДокумента+"
						|<S_NUMS>        ";
						БылаПозиция=Истина;
					КонецЕсли;	
					ТекстДокумента=ТекстДокумента+"
					|<SERIAL_NUMBER>"+Стр_1.СерийныйНомер+"</SERIAL_NUMBER>";
					
				КонецЕсли;
			Конеццикла;

	                Если БылаПозиция=Истина Тогда
					ТекстДокумента=ТекстДокумента+"
	|</S_NUMS>";
				Конецесли;
				
ТекстДокумента=ТекстДокумента+"
|</PRODUCT>  ";

					Конеццикла;
					
					ТекстДокумента=ТекстДокумента+"
					|</PRODUCT_DETAILS>";
					
					КонецЕсли;
					ТекстДокумента=ТекстДокумента+"
					|</MKIO_Order>";
					
				
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(ТекстДокумента);
	КонецЕсли;
	
		
	
	
	
	Возврат      ТекстДокумента;    //отправляем данный текст в ЦРПТ
	
	TimeStamp = 1000 * (Объект.ДатаДоговораСОператором - Date(1970,1,1) - 3 * 3600);
	
		
		ТекстДокумент="
		|{   			
		|   ""contract_number"":"""+Объект.НомерДоговораСОператором+""",
		|   ""contract_date"":"""+xmlString(TimeStamp)+""",   
		|""operator_contract_date"":"""+Формат(Объект.ДатаДоговораСОператором,"ДФ=""дд.ММ.гггг""")+""",
		|   ""production_type"":""";
		
		
		
		Если Объект.СпособИзготовленияСИ=Перечисления.СпособИзготовленияСИ_ХамелеонЦРПТ.Самостоятельно Тогда
			ТекстДокумент=ТекстДокумент+
			"SELF_MADE"",";
		Иначе
			ТекстДокумент=ТекстДокумент+
			"CEM"",";
		КонецЕсли;
		ТекстДокумент=ТекстДокумент+
		"""contact_person"":"""+Объект.ТекущийПользователь.КонтактноеЛицо+""",
		|""delivery_address"":"""",
		|""products_information"":[";
		
		Для Каждого Стр Из Объект.Товары Цикл
			ТекстДокумент=ТекстДокумент+
			"{";
			
			Если Не ЗначениеЗаполненО(Стр.ID) тогда
				СпрОрд=Справочники.ID_строки_партия_ХамелеонЦРПТ.СоздатьЭлемент();
				СпрОрд.ОбменДанными.Загрузка=Истина;
				СпрОрд.Записать();
				СпрОрд.ОбменДанными.Загрузка=Ложь;
				СпрОрд.Наименование=xmlString(СпрОрд.Ссылка.УникальныйИдентификатор());
				СпрОрд.Записать();
				Стр.ID=СпрОрд.Ссылка;
			КонецЕсли;
			ТекстДокумент=ТекстДокумент+
			"""orderLineId"": """+Строка(Стр.id)+""",
			|""gtin"": """+xmlString(Стр.GTIN.GTIN)+""",
			|""tn_ved_code"":"""+xmlString(Стр.КодТНВЭД.Код)+""",
			|""emission_type"": ";
			Если Стр.СпособВыпускаТоваров="Ввезен в РФ" Тогда
				ТекстДокумент=ТекстДокумент+"""LOCAL""";
			Иначе
				ТекстДокумент=ТекстДокумент+"""FOREIGN""";
			КонецЕсли;
				
			
			ТекстДокумент=ТекстДокумент+",
			|""code_quantity"":"""+xmlString(Стр.КоличествоКМ)+ """,
			|""code_type"":""";
			Если Стр.ВидСИ=Перечисления.ВидСИ_ХамелеонЦРПТ.GLUED Тогда
				
				ТекстДокумент=ТекстДокумент+"GLUEABLE""";
			ИначеЕсли Стр.ВидСИ=Перечисления.ВидСИ_ХамелеонЦРПТ.HINGED Тогда
			
				ТекстДокумент=ТекстДокумент+"MOUNTABLE""";
			Иначе
				ТекстДокумент=ТекстДокумент+"PRINTABLE""";
				
			КонецЕсли;
			
			ТекстДокумент=ТекстДокумент+",
			|""serial_num_type"": """;
			Если Стр.СпособФормированияСН=перечисления.СпособФормированияСН_ХамелеонЦРПТ.ОператорИСМП Тогда
				ТекстДокумент=ТекстДокумент+"OPERATOR""";
				
			Иначе
				ТекстДокумент=ТекстДокумент+"SELF_MADE""";
				
			КонецЕсли;
			
			ТекстДокумент=ТекстДокумент+",			
			|            ""serial_numbers"":  [";
			
			НСтр=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
			Для Каждого Стр_1 Из НСтр Цикл
				Если ЗначениеЗаполнено(Стр_1.СерийныйНомер) Тогда
					ТекстДокумент=ТекстДокумент+""""+			Стр_1.СерийныйНомер+""",";
				КонецЕсли;
			Конеццикла;
			
			ТекстДокумент=ТекстДокумент+"],
			|""marking_type"":""";
			Если Стр.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаПотребительскуюУпаковку Тогда
				ТекстДокумент=ТекстДокумент+"PRODUCT_PACKAGE""";
			ИначеЕсли Стр.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаТовар Тогда
				ТекстДокумент=ТекстДокумент+"PRODUCT""";
			
			ИначеЕсли Стр.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаТоварныйЯрлык Тогда
				ТекстДокумент=ТекстДокумент+"PRODUCT_LABEL""";
			Конецесли;
			ТекстДокумент=ТекстДокумент+"}";			
		Конеццикла;
ТекстДокумент=ТекстДокумент+"]  }";
			Попытка
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(ТекстДокумент);
				NNN=ПрочитатьJSON(ЧтениеJSON);
			Исключение
				Сообщить(ОписаниеОшибки());
//				Сообщить("Текстовая строка "+ТекстJSON+" не соответствует шаблону JSON");
				Возврат "";
			КонецПопытки;


	Возврат ТекстДокумент	
Конецфункции

Процедура ЗапишемВРегистр_Ответ(ТекстДокумент)
	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Объект.Ссылка);
	РегДв.Отбор.Вид.Установить("Получили ответ");
	Добав=РегДв.Добавить();
	Добав.Документ=ОБъект.Ссылка;
	Добав.Вид="Получили ответ";
	Добав.Файл=Новый ХранилищеЗначения(ТекстДокумент,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
КонецПроцедуры

Процедура ЗапишемВРегистр_Марки(ТекстДокумент,НомерСтроки)
	

	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Объект.Ссылка);
	
	ОтборПоВиду="Получили марки "+xmlString(Новый УникальныйИдентификатор())+Строка(ТекущаяДата()+Строка(ТекущаяУниверсальнаяДатаВМиллисекундах()));
	РегДв.Отбор.Вид.Установить(ОтборПоВиду);
	Добав=РегДв.Добавить();
	Добав.Документ=ОБъект.Ссылка;
	Добав.Вид=ОтборПоВиду;
	Добав.Файл=Новый ХранилищеЗначения(ТекстДокумент,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
КонецПроцедуры



Процедура ЗапишемВРегистр(ТекстДокумент)
	
	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Объект.Ссылка);
	РегДв.Отбор.Вид.Установить("Отправлен заказ");
	Добав=РегДв.Добавить();
	Добав.Документ=ОБъект.Ссылка;
	Добав.Вид="Отправлен заказ";
	Добав.Файл=Новый ХранилищеЗначения(ТекстДокумент,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТокенСрегистра(Thumbprint_1)
	Возврат Регистрысведений.ТокенПоСертификату_ХамелеонЦРПТ.Получить(Новый Структура("Отпечаток",Thumbprint_1)).Токен;
КонецФункции

&НаКлиенте
Процедура ПослеПолученияСертификатов(Хранилище,ДД) Экспорт
	Хранилище.НачатьПолучениеВсех(Новый ОписаниеОповещения("ПослеПолученияВсех",ЭтаФорма,ДД));
КонецПроцедуры


&НаСервереБезКонтекста
Функция КодСтрСервер(Добав)
	Возврат КодироватьСтроку(Добав,СпособКодированияСтроки.КодировкаURL);
Конецфункции

&НаСервереБезКонтекста
Функция КодСтрСервер_Дв(ДвД)
	//Добав=ПолучитьСтрокуИзДвоичныхДанных(ДвД);
	Добав=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(ДвД);
	Возврат КодироватьСтроку(Добав,СпособКодированияСтроки.КодировкаURL);
Конецфункции

&НаКлиенте
Процедура ПослеПодписиФайлаТокен(РР,ДД) Экспорт
	//Тело = "{
	//|""uuid"": """+ОтветСтруктура.uuid+""",
	//|""data"": """+Добав+"""
	//|}";
	//HTTPЗапрос=Новый HTTPЗапрос("/api/v3/auth/cert/");
	//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	////HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	//
	//HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВнешняяВ(ТекущийПользователь)
	Возврат ТекущийПользователь.ИспользоватьВнешнийСертификат
КонецФункции

&НаКлиенте
Процедура ПослеЗаписиФайлаТокен(РР,ДД) Экспорт
	Сертификат=ДД.Сертификат;
	HTTPСервисЗапрос=ДД.HTTPСервисЗапрос;
	ФайлВременный=ДД.ФайлВременный;
	ИмяВр=ДД.ИмяВр;
	ОтветСтруктура=ДД.ОтветСтруктура;
	ВыбСертификатЭЦП=ДД.ВыбСертификатЭЦП;
	
	
	Данные=Новый ДвоичныеДанные(ИмяВр);
    Строка64=Base64Строка(Данные);
    Строка64=Лев(Строка64,СтрДлина(Строка64)-4);
    ДанныеНаЗапись=Base64Значение(Строка64);
   // ДанныеНаЗапись.Записать(ИмяВр);
	
	
	Каталог = КаталогВременныхФайловНаКлиенте;
	ИмяФайла = Строка(Новый УникальныйИдентификатор) + "2.xml";
	ИмяВр_1= Каталог+ИмяФайла;
	
	//ИмяВр_1=ПолучитьИмяВременногоФайла();
	Текущийпользователь=ВыбСертификатЭЦП.Thumbprint;
	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(ВнешняяВ(Объект.ТекущийПользователь),ДанныеНаЗапись,ИмяВр_1,Текущийпользователь,
	"ПослеПодписиФайлаТокен",ЭтаФорма);	
	
	Возврат;
	
	
	
  	Текст=Новый ТекстовыйДокумент;
	Текст.Прочитать(ИмяВр_1);

 	Добав=Текст.ПолучитьТекст();
	Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
	Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
	Добав=Сред(Добав,1,стрДлина(Добав)-4);
	Добав=СтрЗаменить(Добав,"\r\n","");
	УдалитьФайлы(ИмяВр);
	УдалитьФайлы(ИмяВр_1);
	
	Тело = "{
	|""uuid"": """+ОтветСтруктура.uuid+""",
	|""data"": """+Добав+"""
	|}";
	HTTPЗапрос=Новый HTTPЗапрос("/api/v3/auth/cert/");
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	
	
	Парамукк="";
	ОтветСтруктура_1 =ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
	Если HTTPСервисЗапрос.Status=200 Тогда
		ТОКЕН=ОтветСтруктура_1.token;                                 
	ИначеЕсли ОтветСтруктура_1.Свойство("error",Парамукк) Тогда
		
		ТекстОшибки="";
		Если ТипЗнч(Парамукк)=Тип("Массив") тогда
			Для Каждого Стр Из Парамукк Цикл
				ТекстОшибки=ТекстОшибки+стр;
			Конеццикла;
		Иначе
			ТекстОшибки=Парамукк;
		КонецЕсли;
		Сообщить(ТекстОшибки);
		Возврат       
	Конецесли;

	
КонецПроцедуры


Функция ЗагрузканаСервереОтправитьЗаявка(Thumbprint_1,СРегистра,УжеОтправили,Тело)
Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
	
	Если ЗначениеЗаполнено(ОБъект._Order_ID) Тогда
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/order/"+Объект._Order_ID);
	Иначе
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/order");
	КонецЕсли;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Текст1);
	КонецЕсли;
	
	
	Если Ответ.КодСостояния=202 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Объект._Order_ID=NNN.order_id;
	
	ИначеЕсли Ответ.КодСостояния=200 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Объект._Order_ID=NNN.order_id;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
			Иначе
				Возврат Ложь
			КонецЕсли
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция НаСервереФормируемЗаказ_Шины(Thumbprint_1)
	
	Если Объект.Товары.Количество()=0 Тогда
		Возврат "";
	КонецЕсли;
	//МассивФайлов=Новый Массив;
//Для Каждого Стр Из Объект.Товары Цикл
	
	
		Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();
		              Стр=Объект.Товары[0];
		Если Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Шины  ИЛИ
			Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Свет 
			ИЛИ 			Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь 
			ИЛИ 			Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Одежда 
			ИЛИ Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Молоко
			
			ИЛИ Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Велосипеды
			ИЛИ Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.ПитьеваяВода
			ИЛИ Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.КреслаКоляски
			ИЛИ Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Пиво
			
			ИЛИ Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Парфюм
			ИЛИ объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Фото

			Тогда
			
			
			Чтен.ЗаписатьИмяСвойства("contactPerson");
			Чтен.ЗаписатьЗначение(Объект.ТекущийПользователь.КонтактноеЛицо);
			
			
				Чтен.ЗаписатьИмяСвойства("releaseMethodType");
		Если Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.МаркировкаОстатков Тогда
				
				Чтен.ЗаписатьЗначение("REMAINS");
				
			ИначеЕсли Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ВвезенВРФ Тогда
				Чтен.ЗаписатьЗначение("IMPORT");
		ИначеЕсли Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.Перемаркировка Тогда
				Чтен.ЗаписатьЗначение("REMARK");
			Иначе
				Чтен.ЗаписатьЗначение("PRODUCTION");
				
			КонецЕсли;
			
			
			Если Объект.ТипПродукции<>Перечисления.ТипПродукции_ХамелеонЦРПТ.Молоко Тогда
			
			Чтен.ЗаписатьИмяСвойства("remainsAvailable");
			Чтен.ЗаписатьЗначение(Объект.ТоварПроизведенПриобретенДо1032020);
			Чтен.ЗаписатьИмяСвойства("remainsImport");
			Чтен.ЗаписатьЗначение(Объект.ТоварВвезенВРФПосле1032020 );
		    Конецесли;
							
			//Если Объект.ТоварВвезенВРФПосле1032020 Тогда
				
			//КонецЕсли;
			
					
			
				Чтен.ЗаписатьИмяСвойства("createMethodType");
				
				Если Не ЗначениеЗаполнено(Объект.СпособИзготовленияСИ)
					ИЛИ Объект.СпособИзготовленияСИ=Перечисления.СпособИзготовленияСИ_ХамелеонЦРПТ.Самостоятельно Тогда
				
						Чтен.ЗаписатьЗначение("SELF_MADE");
				Иначе
					Если Объект.СпособИзготовленияСИ=Перечисления.СпособИзготовленияСИ_ХамелеонЦРПТ.CL Тогда	
					
						Чтен.ЗаписатьЗначение("CL");
					ИначеЕсли Объект.СпособИзготовленияСИ=Перечисления.СпособИзготовленияСИ_ХамелеонЦРПТ.CM Тогда	
					
						Чтен.ЗаписатьЗначение("CM");
					ИначеЕсли Объект.СпособИзготовленияСИ=Перечисления.СпособИзготовленияСИ_ХамелеонЦРПТ.ЦентрЭтикетированияИМаркировки Тогда	
					
						Чтен.ЗаписатьЗначение("CEM");
					Конецесли;
					
					Если ЗначениеЗаполнено(Объект.СервисПровайдер.guid_СервисПровайдера) Тогда
						Чтен.ЗаписатьИмяСвойства("contractorId");
						Чтен.ЗаписатьЗначение(Объект.СервисПровайдер.guid_СервисПровайдера);
						Чтен.ЗаписатьИмяСвойства("serviceProviderId");
						Чтен.ЗаписатьЗначение(Объект.СервисПровайдер.guid_СервисПровайдера);
						
						
					КонецЕсли;
					
					Чтен.ЗаписатьИмяСвойства("productGroupType");
					Чтен.ЗаписатьЗначение(Врег(Thumbprint_1.Что));
					
					
					
					
					
						
				КонецЕсли;
				
				Если Объект.ТипПродукции<>Перечисления.ТипПродукции_ХамелеонЦРПТ.Молоко Тогда
				
				Чтен.ЗаписатьИмяСвойства("contractNumber");
				Чтен.ЗаписатьЗначение(СокрЛП(Объект.НомерДоговораСОператором));
				Чтен.ЗаписатьИмяСвойства("contractDate");
				Чтен.ЗаписатьЗначение(Формат(Объект.ДатаДоговораСОператором,"ДФ=""гггг-ММ-дд"""));
				Конецесли;
					
					
					
			ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак 
				ИЛИ
				Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак Тогда
			Чтен.ЗаписатьИмяСвойства("contactPerson");
			Чтен.ЗаписатьЗначение(Объект.ТекущийПользователь.КонтактноеЛицо);
			
			
				Чтен.ЗаписатьИмяСвойства("releaseMethodType");
		Если Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.МаркировкаОстатков Тогда
				
				Чтен.ЗаписатьЗначение("REMAINS");
				
			ИначеЕсли Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ВвезенВРФ Тогда
				Чтен.ЗаписатьЗначение("IMPORT");
		ИначеЕсли Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.Перемаркировка Тогда
				Чтен.ЗаписатьЗначение("REMARK");
			Иначе
				Чтен.ЗаписатьЗначение("PRODUCTION");
				
			КонецЕсли;
			
				Чтен.ЗаписатьИмяСвойства("createMethodType");
				
						Чтен.ЗаписатьЗначение("SELF_MADE");
			
		//	Чтен.ЗаписатьИмяСвойства("expectedStartDate");
		//	Чтен.ЗаписатьЗначение(Формат(Объект.Дата,"ДФ=""гггг-ММ-дд"""));
			Продукция=Объект.Товары[0].GTIN;
			Если Продукция.ИННПроизводителяИмпортёра.ИНН=Объект.Организация.ИНН Тогда
			
				Чтен.ЗаписатьИмяСвойства("factoryAddress");
				Чтен.ЗаписатьЗначение(Объект.Организация.АдресМестонахождения);
				
				Чтен.ЗаписатьИмяСвойства("factoryCountry");
				Если ЗначениеЗаполнено(Объект.Организация.Страна) тогда
					Чтен.ЗаписатьЗначение(Объект.Организация.Страна.Наименование);
				Иначе
					Чтен.ЗаписатьЗначение("Россия");
				КонецЕсли;
				
				Чтен.ЗаписатьИмяСвойства("factoryId");
				Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
				
						
			
				Чтен.ЗаписатьИмяСвойства("factoryName");
				Чтен.ЗаписатьЗначение(Объект.Организация.Наименование);
				
				
			Иначе
			
				Чтен.ЗаписатьИмяСвойства("factoryAddress");
				Чтен.ЗаписатьЗначение(Продукция.ИННПроизводителяИмпортёра.ЮридическийАдрес);
				
				Чтен.ЗаписатьИмяСвойства("factoryCountry");
				Если ЗначениеЗаполнено(Продукция.СтранаПроизводства) тогда
					Чтен.ЗаписатьЗначение(Продукция.СтранаПроизводства.Наименование);
				Иначе
					Чтен.ЗаписатьЗначение("Россия");
				КонецЕсли;
				
				Чтен.ЗаписатьИмяСвойства("factoryId");
				Чтен.ЗаписатьЗначение(Продукция.ИННПроизводителяИмпортёра.ИНН);
				
						
			
				Чтен.ЗаписатьИмяСвойства("factoryName");
				Чтен.ЗаписатьЗначение(Продукция.ИННПроизводителяИмпортёра.Наименование);
			КонецЕсли;
			
			Чтен.ЗаписатьИмяСвойства("poNumbere");
			Чтен.ЗаписатьЗначение(Объект.Номер);
			
			Чтен.ЗаписатьИмяСвойства("productCode");
			Чтен.ЗаписатьЗначение(Стр.GTIN.Код);
			
			Чтен.ЗаписатьИмяСвойства("productDescription");
			Чтен.ЗаписатьЗначение(Стр.GTIN.Наименование);
			
			Чтен.ЗаписатьИмяСвойства("productionLineId");
			Чтен.ЗаписатьЗначение("1");
		ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Фармацевтика Тогда
			Чтен.ЗаписатьИмяСвойства("freeСode");
			
			Чтен.ЗаписатьЗначение(Объект.КМНеПодлежитОплате);
		
		КонецЕсли;
		
		Чтен.ЗаписатьИмяСвойства("paymentType");
		Если Объект.ТипОплаты=Перечисления.ТипОплаты_ХамелеонЦРПТ.ОплатаПоНанесению 
			ИЛИ Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Молоко Тогда 
			
			Чтен.ЗаписатьЗначение(2);
		Иначе
			Чтен.ЗаписатьЗначение(1);
		КонецЕсли;
		
		Чтен.ЗаписатьИмяСвойства("products");
		Чтен.ЗаписатьНачалоМассива();
		Для Каждого Стр Из Объект.Товары Цикл
		
			Чтен.ЗаписатьНачалоОбъекта();
			
			
			Если Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.ПитьеваяВода Тогда
				Чтен.ЗаписатьИмяСвойства("group");
				Чтен.ЗаписатьЗначение("WATER");
			КонецЕсли;
			
				Чтен.ЗаписатьИмяСвойства("gtin");
				Если Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак
					ИЛИ Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак
					Тогда
				
					
					Если Объект.ШаблонКМ_Табак=Перечисления.Шаблоны_подписи_кодов_КМ_Табак_ХамелеонЦРПТ.Блок Тогда
						Если ЗначениеЗаполнено(Стр.GTIN.GTINУпаковки) Тогда
							Чтен.ЗаписатьЗначение(дополнитьСтроку(Стр.GTIN.GTINУпаковки));
						Иначе
							Чтен.ЗаписатьЗначение(дополнитьСтроку(Стр.GTIN.GTIN));
							
						КонецЕсли;
						Чтен.ЗаписатьИмяСвойства("mrp");
						КолВБлоке=Стр.gtin.КоличествоВБлоке;
						Если не ЗначениеЗаполнено(КолВБлоке) тогда
							КолВБлоке=10;
						КонецЕсли;
						МаксимальнаяЦена=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(Стр.GTIN.МинимальнаяЦенаНаСигареты*100*КолВБлоке),6,"0");
					 	Чтен.ЗаписатьЗначение(МаксимальнаяЦена);
					Иначе
						Чтен.ЗаписатьЗначение(дополнитьСтроку(Стр.GTIN.GTIN));
						Чтен.ЗаписатьИмяСвойства("mrp");
						МаксимальнаяЦена=xmlString(Стр.GTIN.МинимальнаяЦенаНаСигареты*100);
						МаксимальнаяЦена=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(МаксимальнаяЦена,4,"0");
					 	Чтен.ЗаписатьЗначение(МаксимальнаяЦена);
						
					КонецЕсли;
				Иначе	
					Если ЗначениеЗАполнено(Стр.ТипКодаМаркировки) И Стр.ТипКодаМаркировки=Перечисления.ТипКодаМаркировки_ХамелеонЦРПТ.GROUP тогда
						
						
						GTIN=ДополнитьСтроку(Стр.GTIN.GTIN);
						Для Каждого Стр_Уп ИЗ Стр.GTIN.ДополнительныйРеквизитОбщиеНК.ДополнительныеУпаковки Цикл
							Если Стр_Уп.УровеньУпаковки=Перечисления.УровниУпаковок_ХамелеонЦРПТ.ГрупповаяПотребительскаяУпаковка Тогда
								Если ЗначениеЗаполнено(Стр_Уп.КодТовараУпаковки) Тогда
									GTIN=ДополнитьСтроку(Стр_Уп.КодТовараУпаковки);
									прервать;
								Конецесли;
							Конецесли;
							
						Конеццикла;
						Чтен.ЗаписатьЗначение(GTIN);
						
					Иначе
						Чтен.ЗаписатьЗначение(дополнитьСтроку(Стр.GTIN.GTIN));
					Конецесли;
					
				КонецЕсли;
				
				Если РаботатьНаV1=Истина Тогда
					
					Стр.ИДСУЗ=xmlString(Новый УникальныйИдентификатор());
				//	КонецЕсли;
					Чтен.ЗаписатьИмяСвойства("orderLineId");
					Чтен.ЗаписатьЗначение(СокрЛП(Стр.ИДСУЗ));
					
					
					Чтен.ЗаписатьИмяСвойства("markingType");
					чтен.ЗаписатьЗначение("PRODUCT");
					
						Чтен.ЗаписатьИмяСвойства("identificationType");
					
					Чтен.ЗаписатьЗначение(xmlString(Стр.ВидСИ));

					Чтен.ЗаписатьИмяСвойства("releaseMethodType");
					//Если Стр.СпособВыпускаТоваров="Остаток" Тогда
				
					Если Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.МаркировкаОстатков Тогда
							
							Чтен.ЗаписатьЗначение("REMAINS");
							
						ИначеЕсли Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ВвезенВРФ Тогда
							Чтен.ЗаписатьЗначение("IMPORT");
		ИначеЕсли Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.Перемаркировка Тогда
				Чтен.ЗаписатьЗначение("REMARK");
						Иначе
							Чтен.ЗаписатьЗначение("PRODUCTION");
							
						КонецЕсли;
					
					
				Конецесли;
				
				
				
				Чтен.ЗаписатьИмяСвойства("quantity");
				Чтен.ЗаписатьЗначение(xmlString(Стр.КоличествоКМ));

				Чтен.ЗаписатьИмяСвойства("serialNumberType");
			Если Стр.СпособФормированияСН=перечисления.СпособФормированияСН_ХамелеонЦРПТ.ОператорИСМП Тогда
				Чтен.ЗаписатьЗначение("OPERATOR");
			//	Чтен.ЗаписатьИмяСвойства("serial_numbers");
			//	Чтен.ЗаписатьЗначение("null");
				
			Иначе
				Чтен.ЗаписатьЗначение("SELF_MADE");
				чтен.ЗаписатьИмяСвойства("serialNumbers");
				чтен.ЗаписатьНачалоМассива();
						НСтр=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
				БылаПозиция=Ложь;
			Для Каждого Стр_1 Из НСтр Цикл
				Если ЗначениеЗаполнено(Стр_1.СерийныйНомер) Тогда
					
					чтен.ЗаписатьЗначение(Стр_1.СерийныйНомер)
					
				КонецЕсли;
		//	Конеццикла;
			
	         Конеццикла;
			    чтен.ЗаписатьКонецМассива();
				
				
			КонецЕсли;
			
			
			Если ЗначениеЗаполнено(Объект.ШаблонЭтикетки.stickers) Тогда
				Чтен.ЗаписатьИмяСвойства("stickerId");
				Чтен.ЗаписатьЗначение(Объект.ШаблонЭтикетки.stickers);
				
			КонецЕсли;
			
			
			
			
			Чтен.ЗаписатьИмяСвойства("templateId");
			Если Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Шины Тогда
				Чтен.ЗаписатьЗначение(7);
			ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Молоко Тогда 
				Чтен.ЗаписатьЗначение(20);
				
			
					Чтен.ЗаписатьИмяСвойства("cisType");
					
					
					

					Если ЗначениеЗАполнено(Стр.ТипКодаМаркировки) тогда
					    Чтен.ЗаписатьЗначение(xmlString(Стр.ТипКодаМаркировки));
					

					Иначе
					    Чтен.ЗаписатьЗначение("UNIT");
						
					КонецЕсли;
					
				
				//Если ЗначениеЗаполнено(Стр.Годендо) тогда
				//	
				//	Если Стр.ДоЧаса Тогда
				//		Чтен.ЗаписатьИмяСвойства("expDate72");
				//		Чтен.ЗаписатьЗначение(Формат(Стр.Годендо,"ДФ=""ггММддЧЧмм"""));
				//	Иначе
				//		Чтен.ЗаписатьИмяСвойства("expDate");
				//		Чтен.ЗаписатьЗначение(Формат(Стр.Годендо,"ДФ=""ггММдд"""));
				//	КонецЕсли;
				//	
				//	
				//Иначе
				//	//Чтен.ЗаписатьИмяСвойства("expDate");
				//	//Чтен.ЗаписатьЗначение("010101");
				//		
				//	
				//КонецЕсли;
				
				
			ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Одежда Тогда 
			
			
				
				Чтен.ЗаписатьЗначение(10);
				Чтен.ЗаписатьИмяСвойства("cisType");
				
				
				

				Если ЗначениеЗАполнено(Стр.ТипКодаМаркировки) тогда
				    Чтен.ЗаписатьЗначение(xmlString(Стр.ТипКодаМаркировки));
				

				Иначе
				    Чтен.ЗаписатьЗначение("UNIT");
					
				КонецЕсли;
				
			ИначеЕсли 
				Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак
				Тогда 
				
				Если Использовать15ШаблонДляАльтернативногоТабакаСУказаниемМРЦ=Истина Тогда
					Если Объект.ШаблонКМ_Табак=Перечисления.Шаблоны_подписи_кодов_КМ_Табак_ХамелеонЦРПТ.Блок Тогда
						Чтен.ЗаписатьЗначение(14);
					Иначе
						Чтен.ЗаписатьЗначение(15);
					КонецЕсли;
				Иначе
					Чтен.ЗаписатьЗначение(14);
				КонецЕсли;
					
				Чтен.ЗаписатьИмяСвойства("cisType");
						

				Если Объект.ШаблонКМ_Табак=Перечисления.Шаблоны_подписи_кодов_КМ_Табак_ХамелеонЦРПТ.Блок Тогда
				    Чтен.ЗаписатьЗначение(xmlString("GROUP"));
				

				Иначе
				    Чтен.ЗаписатьЗначение("UNIT");
					
				КонецЕсли;

				//Иначе
				//	Чтен.ЗаписатьЗначение(4);
				//КонецЕсли;
			ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак
				Тогда 
				
				Если Объект.ШаблонКМ_Табак=Перечисления.Шаблоны_подписи_кодов_КМ_Табак_ХамелеонЦРПТ.Блок Тогда
					Чтен.ЗаписатьЗначение(3);
				Иначе
					Чтен.ЗаписатьЗначение(4);
				КонецЕсли;
			
				
//				Чтен.ЗаписатьЗначение(3);
			ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Фармацевтика Тогда 
				Если Объект.ШаблонКМ=Перечисления.Шаблоны_подписи_кодов_КМ_ХамелеонЦРПТ._88_Фармацевтика Тогда
					Чтен.ЗаписатьЗначение(2);
				Иначе
					Чтен.ЗаписатьЗначение(5);
				КонецЕсли;
			ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Фото Тогда 
				Чтен.ЗаписатьЗначение(8);
				
				Чтен.ЗаписатьИмяСвойства("cisType");
				Если ЗначениеЗАполнено(Стр.ТипКодаМаркировки) тогда
				    Чтен.ЗаписатьЗначение(xmlString(Стр.ТипКодаМаркировки));
				

				Иначе
				    Чтен.ЗаписатьЗначение("UNIT");
					
				КонецЕсли;

			ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Парфюм Тогда 
				Чтен.ЗаписатьЗначение(9);
				
				Чтен.ЗаписатьИмяСвойства("cisType");
				Если ЗначениеЗАполнено(Стр.ТипКодаМаркировки) тогда
				    Чтен.ЗаписатьЗначение(xmlString(Стр.ТипКодаМаркировки));
				

				Иначе
				    Чтен.ЗаписатьЗначение("UNIT");
					
				КонецЕсли;

			ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь Тогда 
				Чтен.ЗаписатьЗначение(1);
			ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Велосипеды Тогда 
				Чтен.ЗаписатьЗначение(11);
			ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.ПитьеваяВода Тогда 
				Чтен.ЗаписатьЗначение(16);
				
				Чтен.ЗаписатьИмяСвойства("cisType");
				Если ЗначениеЗАполнено(Стр.ТипКодаМаркировки) тогда
				    Чтен.ЗаписатьЗначение(xmlString(Стр.ТипКодаМаркировки));
				

				Иначе
				    Чтен.ЗаписатьЗначение("UNIT");
					
				КонецЕсли;
				
			ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.КреслаКоляски Тогда 
				Чтен.ЗаписатьЗначение(12);
			ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Пиво Тогда 
				Чтен.ЗаписатьЗначение(18);
				
				Чтен.ЗаписатьИмяСвойства("cisType");
				Если ЗначениеЗАполнено(Стр.ТипКодаМаркировки) тогда
				    Чтен.ЗаписатьЗначение(xmlString(Стр.ТипКодаМаркировки));
				

				Иначе
				    Чтен.ЗаписатьЗначение("UNIT");
					
				КонецЕсли;
				
			КонецЕсли;
			
			  			
			Чтен.ЗаписатьКонецОбъекта();
				
				
		Конеццикла;
		Чтен.ЗаписатьКонецМассива();
		
		Если Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.ПитьеваяВода Тогда
			
			Чтен.ЗаписатьИмяСвойства("@class");
			//Чтен.ЗаписатьЗначение(Объект.Организация.subjectIdФармацевтика);
			Чтен.ЗаписатьЗначение("com.equiron.sitemanager.api.v2.model.order.OrderDtoWater");
		
		ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Фармацевтика Тогда
		
			Чтен.ЗаписатьИмяСвойства("subjectId");
			//Чтен.ЗаписатьЗначение(Объект.Организация.subjectIdФармацевтика);
			Чтен.ЗаписатьЗначение(Объект.ТекущийПользователь.РегисстрационныйНомер);
		КонецЕсли;

					
			Чтен.ЗаписатьКонецОбъекта();
					
		
		
		Текст=Чтен.Закрыть();
//	     МассивФайлов.Добавить(Новый Структура("Текст,Идентификатор",Текст,Стр.ПолучитьИдентификатор()));
	
	// Конеццикла;
	
	
	Возврат Текст;
Конецфункции


&НаСервереБезКонтекста
Функция СоздатьТелоПо(NNN,Подписанный)
	Чтен_Подкл=Новый  ЗаписьJSON;
	Чтен_Подкл.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен_Подкл.ЗаписатьНачалоОбъекта();
	Чтен_Подкл.ЗаписатьИмяСвойства("id");
	Чтен_Подкл.ЗаписатьЗначение(NNN.id);
	Чтен_Подкл.ЗаписатьИмяСвойства("orderInfoInBase64");
	Чтен_Подкл.ЗаписатьЗначение(NNN.orderInfoInBase64);
	Чтен_Подкл.ЗаписатьИмяСвойства("signature");
	Чтен_Подкл.ЗаписатьЗначение(Подписанный);
	Чтен_Подкл.ЗаписатьКонецОбъекта();
	Возврат   Чтен_Подкл.Закрыть()
КонецФункции

Функция ИДСерв()
	Возврат Объект.СервисПровайдер.guid_СервисПровайдера;
КонецФункции
Процедура ОтправитьШиныНаСервере(Thumbprint_1)
	
	
		Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
			Возврат;
		КонецЕслИ;
	
	//Если Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Обувь") Тогда
//		СформироватьФайлДляОтправки_1=НаСервереФормируемЗаказ_ОбувьСУЗ(Thumbprint_1)[0];
	
	//Иначе
		СформироватьФайлДляОтправки_1=НаСервереФормируемЗаказ_Шины(Thumbprint_1);
		//();		
	//КонецЕсли;
	СформироватьФайлДляОтправки_3=СформироватьФайлДляОтправки_1;
//	НеПрошлаПроверка21(СформироватьФайлДляОтправки);
//Для Каждого СформироватьФайлДляОтправки_3 ИЗ СформироватьФайлДляОтправки_1 Цикл
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки_3,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
	
	Подписанный="";
	Попытка
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1,Подписанный,Истина);
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
			Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	Исключение
КонецПопытки;
	
	//Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
	//			Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
	//		Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
	//		Добав=СтрЗаменить(Добав,"\r\n","");

	Тело=СформироватьФайлДляОтправки;
		АдресРаздробить=Thumbprint_1.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
		
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
			
			
			
			
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			//ПоказатьПредупреждение(,"В пользователе не заполнен адрес СУЗ");
			Возврат;
			
		КонецЕсли;
	
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;
			
			
		Если РаботатьНаV1=Истина Тогда
		HTTPЗапрос=Новый HTTPЗапрос("api/orders");
			
		
		
		
	Иначе
		
		Если не ЗначениеЗаполнено(Объект.СпособИзготовленияСИ) ИЛИ Объект.СпособИзготовленияСИ=
			ПредопределенноеЗначение("Перечисление.СпособИзготовленияСИ_ХамелеонЦРПТ.Самостоятельно") ТОгда
			HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/orders?omsId="+Thumbprint_1.ИдентификаторСУЗ);
		Иначе
			HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/orders?omsId="+Thumbprint_1.ИдентификаторСУЗ+"&contractorId="+ИДСерв());
			
		КонецЕсли;
	КонецЕсли;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	
								ТокенСУЗ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);

	HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
	Если ЗначениеЗаполнено(Подписанный) тогда
		HTTPЗапрос.Заголовки.Вставить("X-Signature",Подписанный);
	КонецЕсли;

	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	
	
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Текст1);
	КонецЕсли;
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
		
//		Если Thumbprint_1.НаименованиеСтенда="Питьевая вода"  Тогда
//			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
//				//ЧтениеJSON = Новый ЧтениеJSON;
//				//ЧтениеJSON.УстановитьСтроку(Текст1);
//			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
////				НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
//			Объект._Order_ID=NNN.orderId;
//			
//			HTTPЗапрос=Новый HTTPЗапрос("webapi/v1/orders/"+Объект._Order_ID+"/signed");
//			HTTPЗапрос.Заголовки.Вставить("Cookie",куки);
//			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
//			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
//			Текст1=Ответ.ПолучитьТелоКакСтроку();
//			
//			Объект.ИспользоватьОтчетОбИспользовании=Истина;
//			Если Ответ.КодСостояния=200 Тогда
//				
//				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
//				
//				Подписанный="";
//				Попытка
//					ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,NNN.orderInfoInBase64,Thumbprint_1.Thumbprint_1,Подписанный,Истина,Истина);
//					
//					//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
//					//Подписанный,КодировкаТекста.UTF8,Ложь));
//					
//							Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
//							Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
//							Подписанный=СтрЗаменить(Подписанный,"\r\n","");
//				Исключение
//				КонецПопытки;
//				
//				Тело=СоздатьТелоПо(NNN,Подписанный);
//				
//				HTTPЗапрос=Новый HTTPЗапрос("webapi/v1/orders/"+Объект._Order_ID+"/sign");
//				HTTPЗапрос.Заголовки.Вставить("Cookie",куки);
//				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
//				HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
//				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
//				

//			КонецЕслИ;
//			
//			

//			
//		Иначе
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
//				НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
				Объект._Order_ID=NNN.orderId;
				
		//	КонецЕсли;

			//Объект._Order_ID=NNN.order_id;
	
		ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	//Если Ответ.КодСостояния<>200 Тогда
	//	
	//	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
	//	  Текст1=Ответ.ПолучитьТелоКакСтроку();
	//		Попытка
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//			Объект.ОшибкаОтправки=NNN.error_message;
	//			
	//		Исключение
	//		КонецПопытки;
	//	Иначе
	//		Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета");
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//		Объект._Order_ID=NNN.order_id;
	//КонецЕсли;
	УправлениеВидимостью()
	
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьПодключениюКСУЗНаСервере(Ссылка)
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.ТокенДинамичкийДляСУЗ_По_Идентификатору_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Пользователь.Установить(Ссылка);
	РегДв.Записать(Истина);
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ОчиститьДинамическийТокен(Пользователь,ТТ)
	ОчиститьТокенСрегистра(ТТ);
	
	РегДв=РегистрыСведений.ТокенДинамичкийДляСУЗ_По_Идентификатору_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Пользователь.Установить(Пользователь.ИдентификаторСоединения);
	РегДв.Записать(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтпрваитьШины(Thumbprint_1,УжеОтправляли=Ложь)
	Если ОбработкаWEBНаСервере Тогда
		ОтправитьШиныНаСервере(Thumbprint_1);
		Этаформа.Записать();
		Возврат;
	КонецЕсли;
	
	//Thumbprint_1=ПолучитьИзПользователя();	
		Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
			Возврат;
		КонецЕслИ;
	
	//Если Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Обувь") Тогда
//		СформироватьФайлДляОтправки_1=НаСервереФормируемЗаказ_ОбувьСУЗ(Thumbprint_1)[0];
	
	//Иначе
		СформироватьФайлДляОтправки_1=НаСервереФормируемЗаказ_Шины(Thumbprint_1);
		//();		
	//КонецЕсли;
	СформироватьФайлДляОтправки_3=СформироватьФайлДляОтправки_1;
//	НеПрошлаПроверка21(СформироватьФайлДляОтправки);
//Для Каждого СформироватьФайлДляОтправки_3 ИЗ СформироватьФайлДляОтправки_1 Цикл
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки_3,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
	
	Подписанный="";
	Попытка
	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1,Подписанный,Истина);
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
			Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	Исключение
КонецПопытки;
	
	//Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
	//			Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
	//		Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
	//		Добав=СтрЗаменить(Добав,"\r\n","");

	Тело=СформироватьФайлДляОтправки;
		АдресРаздробить=Thumbprint_1.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		
		
		ТелоДляСохранения=Адрес;
	
		
		Попытка
			Порт=число(Порт);
			ТелоДляСохранения=ТелоДляСохранения+":"+Формат(Порт,"ЧГ=");
		Исключение
			Порт=Неопределено;
		КонецПопытки;
		
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
				ТелоДляСохранения="https://"+ТелоДляСохранения;
			Иначе
				Защищ=Неопределено;
				ТелоДляСохранения="http://"+ТелоДляСохранения;
			КонецЕсли;
			ТелоДляСохранения="POST "+ТелоДляСохранения;
			
			
			
			
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			//ПоказатьПредупреждение(,"В пользователе не заполнен адрес СУЗ");
			Возврат;
			
		КонецЕсли;
	
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;
			
			
			
		Если РаботатьНаV1=Истина Тогда
			
			
		HTTPЗапрос=Новый HTTPЗапрос("api/orders");
			ТелоДляСохранения=ТелоДляСохранения+"/api/orders";
		
		
		
	Иначе
		Если не ЗначениеЗаполнено(Объект.СпособИзготовленияСИ) ИЛИ Объект.СпособИзготовленияСИ=
			ПредопределенноеЗначение("Перечисление.СпособИзготовленияСИ_ХамелеонЦРПТ.Самостоятельно") ТОгда
			HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/orders?omsId="+Thumbprint_1.ИдентификаторСУЗ);
			ТелоДляСохранения=ТелоДляСохранения+"/api/v2/"+Thumbprint_1.СайтКСУЗ+"/orders?omsId="+Thumbprint_1.ИдентификаторСУЗ;
		Иначе
			ТекстОтправки="api/v2/"+Thumbprint_1.СайтКСУЗ+"/orders?omsId="+Thumbprint_1.ИдентификаторСУЗ+"&contractorId="+ИДСерв();
			HTTPЗапрос=Новый HTTPЗапрос(ТекстОтправки);
			ТелоДляСохранения=ТелоДляСохранения+ТекстОтправки;
		КонецЕсли;
//		HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/orders?omsId="+Thumbprint_1.ИдентификаторСУЗ);
	КонецЕсли;


	ТокенСУЗ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);

	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	ТелоДляСохранения=ТелоДляСохранения+Символы.ПС+"Заголовки";
	
	ТелоДляСохранения=ТелоДляСохранения+Символы.ПС+"Content-Type:application/json;charset=UTF-8";
	
	HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
	ТелоДляСохранения=ТелоДляСохранения+Символы.ПС+"clientToken:"+ТокенСУЗ;
	Если ЗначениеЗаполнено(Подписанный) тогда
		HTTPЗапрос.Заголовки.Вставить("X-Signature",Подписанный);
		ТелоДляСохранения=ТелоДляСохранения+Символы.ПС+"X-Signature:"+Сред(Подписанный,1,100);
	Иначе
		Сообщить("Не удалось подписать заказ на КМ. Отправка документа "+Строка(объект.Ссылка)+" отменена!!");
		Возврат;
	КонецЕсли;
	
	ТелоДляСохранения=ТелоДляСохранения+Символы.ПС+"Тело запроса";
	ТелоДляСохранения=ТелоДляСохранения+Символы.ПС+Тело;

	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(ТелоДляСохранения);
	КонецЕсли;
	
	
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Текст1);
	КонецЕсли;
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
//				НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
				Объект._Order_ID=NNN.orderId;
				
		//	КонецЕсли;

			//Объект._Order_ID=NNN.order_id;
			
		ИначеЕсли Ответ.КодСостояния=400    Тогда
			
			Если УжеОтправляли=Ложь Тогда
				
				
				ОчиститьПодключениюКСУЗНаСервере(Thumbprint_1.ТекущийПользователь);						
				ОчиститьДинамическийТокен(Thumbprint_1.ТекущийПользователь,Thumbprint_1.Thumbprint_1);
				ОтпрваитьШины(Thumbprint_1,Истина);
				Возврат;
			Иначе
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Если ТипЗнч(NNN)=Тип("Структура") Тогда
					globalErrors="";
					Если NNN.Свойство("globalErrors",globalErrors) Тогда
						Для Каждого Стр_errors Из globalErrors Цикл
							Если Стр_errors.errorCode=1160
								ИЛИ Стр_errors.errorCode=1090
								Тогда
								
								////ОЧИЩАЕМ ТОКен и получаем новый
								
								
								ОчиститьПодключениюКСУЗНаСервере(Thumbprint_1.ТекущийПользователь);						
								
								ОчиститьДинамическийТокен(Thumbprint_1.ТекущийПользователь,Thumbprint_1.Thumbprint_1);
								Если УжеОтправляли=Ложь Тогда
									ОтпрваитьШины(Thumbprint_1,Истина);
									Возврат;
								Иначе
									Возврат
								Конецесли;
								
							Конецесли;
							
						Конеццикла;
					Конецесли;
					
					globalErrors="";
					Ошибка="";
					Если NNN.Свойство("globalErrors",globalErrors) Тогда
						Для Каждого Стр_errors Из globalErrors Цикл
							//Если Стр_errors.errorCode=1160 Тогда
								Ошибка=Ошибка+Стр_errors.error;
								////ОЧИЩАЕМ ТОКен и получаем новый
								
								
							///Конецесли;
						 	
						Конеццикла;
					Конецесли;
					Объект.ОшибкаОтправки=Ошибка;
					Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				ЭтаФорма.Записать();
					
				Конецесли;
				Возврат;
			Конецесли;
			
//			
			
		ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			
			////ПОЛУЧАЕМ НОВЫЙ ТОКЕН 
			Если УжеОтправляли=Ложь Тогда
				ОчиститьДинамическийТокен(Thumbprint_1.ТекущийПользователь,Thumbprint_1.Thumbprint_1);
				ОтпрваитьШины(Thumbprint_1,Истина);
				Возврат;
			Иначе
				Возврат;
			Конецесли;
			
			
		Иначе
			Если УжеОтправляли=Ложь Тогда
				ОчиститьДинамическийТокен(Thumbprint_1.ТекущийПользователь,Thumbprint_1.Thumbprint_1);
				ОтпрваитьШины(Thumbprint_1,Истина);
				Возврат;
			Иначе

		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
			Конецесли;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	//Если Ответ.КодСостояния<>200 Тогда
	//	
	//	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
	//	  Текст1=Ответ.ПолучитьТелоКакСтроку();
	//		Попытка
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//			Объект.ОшибкаОтправки=NNN.error_message;
	//			
	//		Исключение
	//		КонецПопытки;
	//	Иначе
	//		Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета");
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//		Объект._Order_ID=NNN.order_id;
	//КонецЕсли;
	ЭтаФорма.Записать();
	УправлениеВидимостью()
	
	
КонецПроцедуры


Процедура ЗаполнитьДанныеНаСервере(NNN)
	Для Каждого Стр Из NNN Цикл
		Добав=ОБъект.Товары.Добавить();
		Добав.GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(Стр.GTIN));
		Добав.КоличествоКМ=Стр.quantity;
		Добав.ИДСУЗ=Стр.orderLineId;
		Добав.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаТовар;
		
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ПодписатьИОтправить_ПоОстальным(Thumbprint_1)
	
	СформироватьФайлДляОтправки=НаСервереФормируемЗаказ_ОбувьСУЗ(Thumbprint_1);
//	НеПрошлаПроверка21(СформироватьФайлДляОтправки);

	Тело_Ответ=СформироватьФайлДляОтправки;
//	Тело=Подписанный;
	//Тело="{
	//|""document"":"""+Добав+""",
	//|""document_format"": ""MANUAL"",
	//|""signature"":"""+Подписанный +"""}";

	
	АдресРаздробить=Thumbprint_1.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
		
	
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
	
	Если ОбработкаWEBНаСервере Тогда
		//ЗагрузканаСервереОтправитьЗаявка_Обувь(Thumbprint_1,Тело,Адрес,Порт,Защищ);
		
		
	Иначе
		
		

	   		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;

			
			
			
		Куки="";	
			
	
				HTTPЗапрос = Новый HTTPЗапрос(); //"static/1555676332000/js/main/preload.js");
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		//HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
		
			
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
	
			Текст=Новый ТекстовыйДОкумент;
			Текст.УстановитьТекст(Текст1);
			Для сч=1 По Текст.КоличествоСтрок() Цикл
				ПолучСтр=Текст.ПолучитьСтроку(сч);
				Если Найти(ПолучСтр,"preload.js")>0 Тогда
					Адрес_1=Сред(получСтр,Найти(получСтр,"src=""/")+6);
					Адрес_1=Сред(Адрес_1,1,Найти(Адрес_1,""">")-1);
					Прервать;
				КонецЕсли;
			Конеццикла;
			
			HTTPЗапрос = Новый HTTPЗапрос(Адрес_1); //"static/1555676332000/js/main/preload.js");
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			Токен=Ответ.ПолучитьТелоКакСтроку();
			Токен=Сред(Токен,Найти(Токен,"'clientToken', """)+16);
			Токен=Сред(Токен,1,Найти(Токен,"""")-1);

	
	
	Чтен_Подкл=Новый  ЗаписьJSON;
	Чтен_Подкл.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен_Подкл.ЗаписатьНачалоОбъекта();
	Чтен_Подкл.ЗаписатьИмяСвойства("id");
	Чтен_Подкл.ЗаписатьЗначение(Thumbprint_1.ПользовательСУЗ);
	Чтен_Подкл.ЗаписатьИмяСвойства("password");
	Чтен_Подкл.ЗаписатьЗначение(Thumbprint_1.ПарольСУЗ);
	Чтен_Подкл.ЗаписатьКонецОбъекта();
	Текст_Подкл=Чтен_Подкл.Закрыть();
	Текст_Подкл=СтрЗаменить(Текст_Подкл,Символы.ПС,"");
	Текст_Подкл=СтрЗаменить(Текст_Подкл,Символы.ВК,"");
	HTTPЗапрос=Новый HTTPЗапрос("signin");
	
	//HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0");
	Если НЕ НеИспользоватьТокен Тогда
		HTTPЗапрос.Заголовки.Вставить("clientToken",Токен);
	КонецЕсли;
	
	HTTPЗапрос.УстановитьТелоИзСтроки(Текст_Подкл);
	//
	Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("POST",HTTPЗапрос);
	
	
	Если Ответ.КодСостояния<>200 Тогда
		СообщитЬ("Не удалось подключиться к СУЗ");
		Сообщить(Ответ.ПолучитьТелоКакСтроку());
		ВозвраТ;
	КонецЕслИ;
		Куки=Ответ.Заголовки["Set-Cookie"];
		Если Куки=Неопределено Тогда
			Куки=Ответ.Заголовки["set-cookie"]
			
		Конецесли;
		
		куки=СтрЗаменить(куки,"Path=/, ","");
		
		//"certSerial="+Thumbprint_1.Thumbprint_1+"; org.springframework.web.servlet.i18n.CookieLocaleResolver.LOCALE=ru; count=2; JSESSIONID="+НСтр+"; tokenPart1="+Сред(СРегистра,1,4000)+"; "+
		//"tokenPart2="+Сред(СРегистра,4001) ;
		
			
			
		//НСтр=Сред(Текст1,Найти(Текст1,"?sid=")+5);
		//НСтр=Сред(НСтр,1,Найти(НСтр,"""")-1);
			
		//НСтр=СтрЗаменить(НСтр,"");
		//	
		//	
		//Куки="certSerial="+Thumbprint_1.Thumbprint_1+"; org.springframework.web.servlet.i18n.CookieLocaleResolver.LOCALE=ru; count=2; JSESSIONID="+НСтр+"; tokenPart1="+Сред(СРегистра,1,4000)+"; "+
		//"tokenPart2="+Сред(СРегистра,4001) ;
		//	
			
			
	//HTTPЗапрос=Новый HTTPЗапрос("businessOrders/"+Объект._Order_ID);
	////	HTTPЗапрос=Новый HTTPЗапрос("api/orders");
	//	
	//HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	//HTTPЗапрос.Заголовки.Вставить("clientToken",Токен);
	//HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
	//HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0");
	//HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
	//HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
	

	

	//Адрес11=Адрес;
	//Если ЗначениеЗаполнено(Порт) Тогда
	//	Адрес11=Адрес11+":"+Формат(Порт,"ЧГ=");
	//КонецЕслИ;
	//HTTPЗапрос.Заголовки.Вставить("Host",Адрес11);
	//HTTPЗапрос.УстановитьТелоИзСтроки(Текст_Подкл);

	//Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	//Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	//Текст1="{""id"":""c778f55f-348e-4503-b540-593a509f0b8d"",""orderInfo"":{"+Сред(Текст1,Найти(Текст1,"contactPerson")-1);
	//NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);	
	
	//Объект.Товары.Очистить();
	//ЗаполнитьДанныеНаСервере(NNN.orderInfo.products);
	
	
			
			
	HTTPЗапрос=Новый HTTPЗапрос("businessOrders/tosign?orderId="+Объект._Order_ID);
	//	HTTPЗапрос=Новый HTTPЗапрос("api/orders");
		
	HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("clientToken",Токен);
	HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
	HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0");
	HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
	HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
	

	

	Адрес11=Адрес;
	Если ЗначениеЗаполнено(Порт) Тогда
		Адрес11=Адрес11+":"+Формат(Порт,"ЧГ=");
	КонецЕслИ;
	HTTPЗапрос.Заголовки.Вставить("Host",Адрес11);
	//HTTPЗапрос.УстановитьТелоИзСтроки(Текст_Подкл);

	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);	
	
		Подписанный="";
		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,NNN.orderInfoInBase64,Thumbprint_1,Подписанный,Ложь,Истина);
		
		Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"");
		Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
		
		
		
	Чтен_Подкл=Новый  ЗаписьJSON;
	Чтен_Подкл.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен_Подкл.ЗаписатьНачалоОбъекта();
	Чтен_Подкл.ЗаписатьИмяСвойства("id");
	Чтен_Подкл.ЗаписатьЗначение(Объект._Order_ID);
	Чтен_Подкл.ЗаписатьИмяСвойства("signature");
	Чтен_Подкл.ЗаписатьЗначение(Подписанный);
	Чтен_Подкл.ЗаписатьКонецОбъекта();
	Текст_Подкл=Чтен_Подкл.Закрыть();
		
		
		
				HTTPЗапрос=Новый HTTPЗапрос("businessOrders/fromsign");
	//	HTTPЗапрос=Новый HTTPЗапрос("api/orders");
		
	HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	Если НЕ НеИспользоватьТокен Тогда
		HTTPЗапрос.Заголовки.Вставить("clientToken",Токен);
	КонецЕсли;
	HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
	HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0");
	HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
	HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
	

	

	Адрес11=Адрес;
	Если ЗначениеЗаполнено(Порт) Тогда
		Адрес11=Адрес11+":"+Формат(Порт,"ЧГ=");
	КонецЕслИ;
	HTTPЗапрос.Заголовки.Вставить("Host",Адрес11);
	HTTPЗапрос.УстановитьТелоИзСтроки(Текст_Подкл);

	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Текст1);
	КонецЕсли;
	
	
	Если Ответ.КодСостояния=202 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
			//	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				
			//	Строкк=Объект.Товары.НайтиПоИдентификатору(Тело_1.Идентификатор);
			//Объект._Order_ID=NNN.orderId;
	
	ИначеЕсли Ответ.КодСостояния=200 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				//NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				//Строкк=Объект.Товары.НайтиПоИдентификатору(Тело_1.Идентификатор);
		//	Объект._Order_ID=NNN.orderId;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	ЭтаФорма.Записать();
	УправлениеВидимостью();
	
	Возврат;
			
			
			
		
		    Для Каждого Тело_1 Из    Тело_Ответ Цикл
		Тело=Тело_1.Текст;
		
		Тело=СтрЗаменить(Тело,Символы.ПС,"");
		Тело=СтрЗаменить(Тело,Символы.ВК,"");
		Подписанный="";
		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,Тело,Thumbprint_1,Подписанный,Ложь);
		
		Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"");
		Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
		
		
		
	Чтен_Подкл=Новый  ЗаписьJSON;
	Чтен_Подкл.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен_Подкл.ЗаписатьНачалоОбъекта();
	Чтен_Подкл.ЗаписатьИмяСвойства("id");
	Чтен_Подкл.ЗаписатьЗначение(Объект._Order_ID);
	Чтен_Подкл.ЗаписатьИмяСвойства("signature");
	Чтен_Подкл.ЗаписатьЗначение(Подписанный);
	Чтен_Подкл.ЗаписатьКонецОбъекта();
	Текст_Подкл=Чтен_Подкл.Закрыть();
		
		
		
				HTTPЗапрос=Новый HTTPЗапрос("businessOrders/fromsign");
	//	HTTPЗапрос=Новый HTTPЗапрос("api/orders");
		
	HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	Если НЕ НеИспользоватьТокен Тогда
		HTTPЗапрос.Заголовки.Вставить("clientToken",Токен);
	КонецЕсли;
	HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
	HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0");
	HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
	HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
	

	

	Адрес11=Адрес;
	Если ЗначениеЗаполнено(Порт) Тогда
		Адрес11=Адрес11+":"+Формат(Порт,"ЧГ=");
	КонецЕслИ;
	HTTPЗапрос.Заголовки.Вставить("Host",Адрес11);
	HTTPЗапрос.УстановитьТелоИзСтроки(Текст_Подкл);

	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Текст1);
	КонецЕсли;
	
	
	Если Ответ.КодСостояния=202 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				
			//	Строкк=Объект.Товары.НайтиПоИдентификатору(Тело_1.Идентификатор);
			//Объект._Order_ID=NNN.orderId;
	
	ИначеЕсли Ответ.КодСостояния=200 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				//Строкк=Объект.Товары.НайтиПоИдентификатору(Тело_1.Идентификатор);
		//	Объект._Order_ID=NNN.orderId;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	//Если Ответ.КодСостояния<>200 Тогда
	//	
	//	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
	//	  Текст1=Ответ.ПолучитьТелоКакСтроку();
	//		Попытка
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//			Объект.ОшибкаОтправки=NNN.error_message;
	//			
	//		Исключение
	//		КонецПопытки;
	//	Иначе
	//		Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета");
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//		Объект._Order_ID=NNN.order_id;
	//КонецЕсли;
		Конеццикла;
	КонецЕсли;
	ЭтаФорма.Записать();
	УправлениеВидимостью()
	
	
КонецПроцедуры


//&НаКлиенте
//Процедура ОтправитьЗаявку(Команда,УжеОтправили=Ложь) Экспорт
//	Thumbprint_1=ПолучитьИзПользователя();	
//		Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
//			Возврат;
//		КонецЕслИ;
//	
//	Если Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен")
//		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус")
//		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство")
//		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы")
//		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован") Тогда
//		
//		Возврат
//		
//	КонецЕсли;
//	 
//	Если Не ЗначениеЗаполнено(Объект.ТипПродукции) Тогда
//			ПриИзмененияПользователя()
////Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь
//	КонецЕслИ;
//	// Вставить содержимое обработчика.
//	Этаформа.Записать();
//	
//	
//	 Если не ЗначениеЗаполнено(ОБъект._Order_ID) Тогда
//		 Сообщить("По документу не сформирован черновик. Отправка отменена");
//		 Возврат;
//	 КонецЕслИ;
//		 
//		 
//		 
//	
//	 
//	 Если Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Обувь")
//		// И Thumbprint_1.ПараметрРаботы<>"Тестовый"
//		 Тогда
//		 ПодписатьИОтправить(Thumbprint_1);
//	 Иначе
//		 
//		 ПодписатьИОтправить_ПоОстальным(Thumbprint_1);
//		 
//	КонецЕсли;
//	
//	Возврат;
//	//КонецЕсли;
//	
//	Объект.СУЗОбувь=Ложь;
//	Если Не ЗначениеЗаполненО(Объект._Order_ID) Тогда
//		ОтправитьВЦРПТ(Команда);
//	КонецЕсли;
//	Если Не ЗначениеЗаполненО(Объект._Order_ID) Тогда
//		ПоказатьПредупреждение(,"Не удалось отправить черновик");
//		Возврат;
//	КонецЕсли;	
//	
//	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
//	Если Не ЗначениеЗаполнено(СРегистра) тогда
//		Попытка
//			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
//		исключение
//			СРегистра=Неопределено;
//		КонецПопытки;
//	КонецЕсли;
//	Если Не ЗначениеЗаполнено(СРегистра) Тогда
//		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
//		Возврат;
//	Конецесли;
//	СформироватьФайлДляОтправки=НаСервереФормируемЗаказ(Thumbprint_1);
////	НеПрошлаПроверка21(СформироватьФайлДляОтправки);
//		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
//		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
//	
//	Подписанный="";
//	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
//	
//	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
//	//Подписанный,КодировкаТекста.UTF8,Ложь));
//	
//				Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
//			Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
//			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
//	
//	
//	//Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
//	//СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
//	
//	Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
//	СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
//	
//	
//				Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
//			Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
//			Добав=СтрЗаменить(Добав,"\r\n","");

//	Тело="{
//	|""document"":"""+Добав+""",
//	|""document_format"": ""MANUAL"",
//	|""signature"":"""+Подписанный +"""}";
//	
//	
//	Если ОбработкаWEBНаСервере Тогда
//		Если НЕ ЗагрузканаСервереОтправитьЗаявка(Thumbprint_1,СРегистра,УжеОтправили,Тело) Тогда
//				Если УжеОтправили=Истина Тогда
//				//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
//			Иначе
//				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
//				ОтправитьВЦРПТ(Команда,Истина)			
//		КонецЕсли
//		
//		КонецЕсли;
//		
//		
//	Иначе
//	
//			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
//				Прокси=Новый ИнтернетПрокси;
//				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
//			
//				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
//			Иначе
//				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
//			КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ОБъект._Order_ID) Тогда
//		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/order/"+Объект._Order_ID);
//	Иначе
//		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/order");
//	КонецЕсли;
//	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
//	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
//	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
//	///Константин           
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
//	Попытка
//		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
//		
//		Текст1=Ответ.ПолучитьТелоКакСтроку();
//		
//	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
//		ЗапишемВРегистр_Ответ(Текст1);
//	КонецЕсли;
//	
//	
//	Если Ответ.КодСостояния=202 Тогда
//			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
//				//ЧтениеJSON = Новый ЧтениеJSON;
//				//ЧтениеJSON.УстановитьСтроку(Текст1);
//				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
//			Объект._Order_ID=NNN.order_id;
//	
//	ИначеЕсли Ответ.КодСостояния=200 Тогда
//			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
//				//ЧтениеJSON = Новый ЧтениеJSON;
//				//ЧтениеJSON.УстановитьСтроку(Текст1);
//				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
//			Объект._Order_ID=NNN.order_id;
//			
//	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
//			Если УжеОтправили=Истина Тогда
//				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
//			Иначе
//				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
//				ОтправитьЗаявку(Команда,Истина)			
//			КонецЕсли
//	Иначе
//		//	Если УжеОтправили=Истина Тогда
//			//	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
//					Попытка
//						//ЧтениеJSON = Новый ЧтениеJSON;
//						//ЧтениеJSON.УстановитьСтроку(Текст1);
//						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
//						попытка
//							
//							Объект.ОшибкаОтправки=NNN.error_message;
//						Исключение
//							Попытка
//							//	Объект.ОшибкаОтправки=NNN.error_description;
//							//	Если NNN.error="access_denied" Тогда
//							//		Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
//							//	КонецЕсли;
//							Исключение
//							КонецПопытки;
//							
//						КонецПопытки;
//						
//					Исключение
//					КонецПопытки;
//		//	Иначе
//		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
//		//		ОтправитьЗаявку(Команда,Истина)			
//		//	КонецЕсли
//	КонецЕсли;
//	//Если Ответ.КодСостояния<>200 Тогда
//	//	
//	//	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
//	//	  Текст1=Ответ.ПолучитьТелоКакСтроку();
//	//		Попытка
//	//			ЧтениеJSON = Новый ЧтениеJSON;
//	//			ЧтениеJSON.УстановитьСтроку(Текст1);
//	//			NNN=ПрочитатьJSON(ЧтениеJSON);
//	//			Объект.ОшибкаОтправки=NNN.error_message;
//	//			
//	//		Исключение
//	//		КонецПопытки;
//	//	Иначе
//	//		Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета");
//	//			ЧтениеJSON = Новый ЧтениеJSON;
//	//			ЧтениеJSON.УстановитьСтроку(Текст1);
//	//			NNN=ПрочитатьJSON(ЧтениеJSON);
//	//		Объект._Order_ID=NNN.order_id;
//	//КонецЕсли;
//	Исключение
//		
//	КонецПопытки;
//	КонецЕсли;
//	ЭтаФорма.Записать();
//	УправлениеВидимостью()
//	
//КонецПроцедуры

Процедура УправлениеВидимостью()
	ТолькоПросмотр_1=Объект.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен
	ИЛИ Объект.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус
	ИЛИ Объект.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство
	ИЛИ Объект.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы
	ИЛИ Объект.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован
	ИЛИ Объект.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВПроцессе;
	//
	//;
	Элементы.ДекорацияПеремкаркировки.Видимость=
	Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.Перемаркировка;
	
	Элементы.ГруппаКнопок.Видимость=НЕ ТолькоПросмотр_1;
	Элементы.СтраницыТЧ.ТолькоПросмотр=ТолькоПросмотр_1;
	
	Элементы.Комментарий.ТолькоПросмотр=ложь;
	
	
	
	
	
	
	
	//Если Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь Тогда
	//	Если Элементы.ОтправитьВЦРПТ.Видимость Тогда
	//		Элементы.ОтправитьЗаявкуВЦРПТ.Видимость=Истина;
	//	КонецЕсли;
	//	Элементы.ОтправитьВЦРПТ.Заголовок="Черновик в ЦРПТ";
	//	
	//Иначе
		//Если Элементы.ОтправитьВЦРПТ.Видимость Тогда
		Элементы.ОтправитьЗаявкуВЦРПТ.Видимость=Ложь;
		//КонецЕсли;
		Элементы.ОтправитьВЦРПТ.Заголовок="Отправить в ЦРПТ";
		
	//КонецЕсли;
	

	Элементы.КМНеПодлежитОплате.Видимость=Объект.ТипПродукции=перечисления.ТипПродукции_ХамелеонЦРПТ.Фармацевтика;
	
	
//	Элементы.ПолучитьКМ.Видимость=
//	Объект.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство
//	ИЛИ Объект.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодТНВЭДПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ТекД=Элементы.Товары.ТекущиеДанные;
	ЗаписатьТНВЭД(ТекД.GTIN,ТекД.КодТНВЭД)
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьТНВЭД(GTIN,КодТНВЭД)
	ТекН=                   GTIN.ПолучитьОбъект();
	Если ТипЗнч(КодТНВЭД)=Тип("Строка") Тогда
		ТекН.КодТНВЭДКороткий=КодТНВЭД;
	ИначеЕсли ТипЗнч(КодТНВЭД)=Тип("СправочникСсылка.КодТНВЭД_ХамелеонЦРПТ") Тогда
		ТекН.КодТНВЭД=КодТНВЭД;
	Иначе
		Возврат;
	КонецЕсли;	
	ТекН.Записать()
Конецпроцедуры

&НаСервере
Процедура СчитатьОтправкуНаСервере()
	// Вставить содержимое обработчика.
	Хр=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.Получить(Новый Структура("Документ,Вид",Объект.Ссылка,"Отправлен заказ")).Файл;
	Если Хр<>Неопределено тогда
		Отправка=Хр.Получить();
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура СчитатьОтправку(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	СчитатьОтправкуНаСервере();
КонецПроцедуры

&НаСервере
Процедура СчитатьОтветНаСервере()
	// Вставить содержимое обработчика.
	Хр=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.Получить(Новый Структура("Документ,Вид",Объект.Ссылка,"Получили ответ")).Файл;
	Если Хр<>Неопределено тогда
		ОтветОтЦРПТ=Хр.Получить();
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура СчитатьОтвет(Команда)
	СчитатьОтветНаСервере();
КонецПроцедуры

Функция ЗагрузканаСервереПолучитьКМ(ПараметрыДлякилента,Адрес,Порт,Защищ)
	

			Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,ПараметрыДлякилента.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,ПараметрыДлякилента.Таймаут,Защищ);
			КонецЕсли;
			
			HTTPЗапрос = Новый HTTPЗапрос("signin");
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			
			HTTPЗапрос = Новый HTTPЗапрос("static/1555676332000/js/main/preload.js");
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			Токен=Ответ.ПолучитьТелоКакСтроку();
			Токен=Сред(Токен,Найти(Токен,"'clientToken', """)+16);
			Токен=Сред(Токен,1,Найти(Токен,"""")-1);
			Тело="{""id"":"""+ПараметрыДлякилента.ПользовательСУЗ+""",""password"":"""+ПараметрыДлякилента.ПарольСУЗ+"""}";
			
			
			
			HTTPЗапрос = Новый HTTPЗапрос("signin");
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	Если НЕ НеИспользоватьТокен Тогда
		HTTPЗапрос.Заголовки.Вставить("clientToken",Токен);
	КонецЕсли;
			
			HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
			Кэш_3=Ответ.Заголовки["Set-Cookie"];
			Если Кэш_3=Неопределено тогда
				Кэш_3=Ответ.Заголовки["set-cookie"];
			Конецесли;
			Если Ответ.КодСостояния=200 И Не ЗначениеЗАполнено(Ответ.ПолучитьТелоКакСтроку()) Тогда
				HTTPЗапрос = Новый HTTPЗапрос("/");
				HTTPЗапрос.Заголовки.Вставить("Accept","text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
				HTTPЗапрос.Заголовки.Вставить("Refer","http://"+Адрес+":"+Формат(Порт,"ЧГ=")+"/signin");
				HTTPЗапрос.Заголовки.Вставить("Host",""+Адрес+":"+Формат(Порт,"ЧГ=")+"");
				HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
				 
				HTTPЗапрос.Заголовки.Вставить("Cookie",Кэш_3);
				Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
				Для Каждого Стр Из Объект.Товары Цикл
					HTTPЗапрос = Новый HTTPЗапрос("codes/print");
					HTTPЗапрос.Заголовки.Вставить("Accept","*/*");
//					HTTPЗапрос.Заголовки.Вставить("Refer","http://"+Адрес+":"+Формат(Порт,"ЧГ=")+"/signin");
//					HTTPЗапрос.Заголовки.Вставить("Host",""+Адрес+":"+Формат(Порт,"ЧГ=")+"");
					HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded; charset=UTF-8");
					HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
	Если НЕ НеИспользоватьТокен Тогда
		HTTPЗапрос.Заголовки.Вставить("clientToken",Токен);
	КонецЕсли;
					 
				HTTPЗапрос.Заголовки.Вставить("Refer","http://"+Адрес+":"+Формат(Порт,"ЧГ=")+"/signin");
				HTTPЗапрос.Заголовки.Вставить("Host",""+Адрес+":"+Формат(Порт,"ЧГ=")+"");
					HTTPЗапрос.Заголовки.Вставить("Cookie",Кэш_3);
					
					GTIN=Продукция.Соответствие.Получить(Стр.GTIN);
					Если Не ЗначениеЗаполнено(GTIN) тогда
						GTIN=ВернутьГТИН(Стр.GTIN);
						Продукция.Соответствие.Вставить(GTIN,GTIN);
					КонецЕсли;

					
					HTTPЗапрос.УстановитьТелоИзСтроки("orderId="+оБЪЕКТ._Order_ID+
					"&gtin="+дополнитьСтроку(GTIN)+"&newStickerId="+НайтиШаблон(Объект.ШаблонЭтикетки)+"&quantity="+
					Формат(Стр.КоличествоКМ,"ЧГ=")+"&orderLineId="+СокрЛП(Стр.ID),КодировкаТекста.ANSI);
					Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.success  Тогда
						HTTPЗапрос = Новый HTTPЗапрос("download?filename="+NNN.filename);
						HTTPЗапрос.Заголовки.Вставить("Accept","*/*");
	//					HTTPЗапрос.Заголовки.Вставить("Refer","http://"+Адрес+":"+Формат(Порт,"ЧГ=")+"/signin");
	//					HTTPЗапрос.Заголовки.Вставить("Host",""+Адрес+":"+Формат(Порт,"ЧГ=")+"");
						HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
	Если НЕ НеИспользоватьТокен Тогда
		HTTPЗапрос.Заголовки.Вставить("clientToken",Токен);
	КонецЕсли;
						 
						HTTPЗапрос.Заголовки.Вставить("Cookie",Кэш_3);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						
						Текст=Ответ.ПолучитьТелоКакДвоичныеДанные();
						
						ЗаписатьВрегистрPDF(Текст,Объект.Ссылка,Стр.ID,NNN.filename);
					КонецЕсли
					
					
				Конеццикла;
				
				
				Возврат Истина
			Иначе
				Возврат ложь;
			КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбновимСтатсыПострчокам() Экспорт
	
	//Если Не ЗначениеЗаполнено(Объект._Order_ID) Тогда
	//	Возврат;                       
	//КонецЕслИ;
	
		
	ЭтаФорма.Модифицированность=Истина;
	
	//Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	//Текст=Форм.Пользователь;
//	Форм.Пользователь=Объект.ТекущийПользователь;
//	ПараметрыДлякилента=Неопределено;
//	Если Форм.НаКлиенте(ПараметрыДлякилента) Тогда
//		Форм.Пользователь=Текст;
			ПараметрыДлякилента=ПолучитьИзПользователя();
		Если Не ЗначениеЗаполнено(ПараметрыДлякилента) Тогда
			Возврат;
		КонецЕслИ;
		
		
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(ПараметрыДлякилента.Thumbprint_1,СтруктураНастроек);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(ПараметрыДлякилента,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(ПараметрыДлякилента.АдресДляПолученияТокена,,,,Прокси,ПараметрыДлякилента.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(ПараметрыДлякилента.АдресДляПолученияТокена,,,,,ПараметрыДлякилента.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(ПараметрыДлякилента,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(Срегистра) тогда
			Возврат;
		Конецесли;
		
				АдресРаздробить=ПараметрыДлякилента.АдресСУЗ;
				Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
				Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
				Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
				Порт=Сред(Порт,Найти(Порт,":")+1);
				Попытка
					Порт=число(Порт);
				Исключение
					Порт=Неопределено;
				КонецПопытки;
				
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			ПоказатьПредупреждение(,"В пользователе не заполнен адрес СУЗ");
			Возврат;
			
		КонецЕсли;
		
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
				
				
					Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
					
						HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,,Защищ);
					Иначе
						HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,,Защищ);
					КонецЕсли;
					
					
					НомерПП=0;
					
					Для Каждого Стр Из Объект.Товары Цикл
							НомерПП=НомерПП+1;
							Стр.СтатусСтроки="";
							Стр.ОшибкаПолучения="";
							//Если НЕ ЗначениеЗаполнено(Стр.ИДСУЗ)  Тогда
							//	Продолжить;
							//КонецЕсли;
						//		Иначе
								
							//Если ОБъект.СУЗОбувь Тогда
								HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/status?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+
								"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
						//		Конецесли;
							//Иначе
							//	HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
							//	Формат(Получить,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								
							//КонецЕслИ;
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
								ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
								nnn=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);
								
								Если Ответ.КодСостояния=200 Тогда
									
									Стр.СтатусСтроки=nnn.bufferStatus;
									
									
									Если nnn.bufferStatus="ACTIVE" Тогда
										Стр.СтатусСтроки="В процессе";
										Стр.КоличествоПолучено=nnn.totalPassed;
									ИначеЕсли 	nnn.bufferStatus="EXHAUSTED" Тогда
										Стр.СтатусСтроки="Получено";
										Стр.КоличествоПолучено=nnn.totalPassed;
									ИначеЕсли nnn.bufferStatus="CLOSED" Тогда
										Стр.СтатусСтроки="Получено";
										Стр.КоличествоПолучено=nnn.totalPassed;
									КонецЕсли;
									Если nnn.bufferStatus<>"PENDING" Тогда
										Стр.КоличествоКМ=nnn.totalCodes;
									КонецЕсли;
								ИначеЕсли Ответ.КодСостояния=404 Тогда
									//Стр.СтатусСтроки="Получено";
									//Если Стр.КоличествоКМ=0 Тогда
										//Стр.КоличествоПолучено=Стр.КоличествоКМ;
									//КонецЕслИ;
									
									СерийныйНомер="";
	  						Куки=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитькукиВСУЗ(ПараметрыДлякилента,,Срегистра,СерийныйНомер);
									
		//														
								HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/orders/history/"+Объект._Order_ID);
								//"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/history/status?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+
															//"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
													//		Конецесли;
														//Иначе
														//	HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
														//	Формат(Получить,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
															
														//КонецЕслИ;
																					куки=СтрЗаменить(куки,"Path=/, ","");
							куки=СтрЗаменить(куки,"path=/,","");
		Куки=Куки+"certSerial="+СерийныйНомер+"; tokenPart1="+Сред(СРегистра,1,4000)+"; "+
					"tokenPart2="+Сред(СРегистра,4001) ;

														HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
															//HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
															HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
															Попытка
																Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
														
															ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
															nnn=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(ТекстДокумента);
															Для Каждого Стр_nnn Из nnn["products"] Цикл
																Для Каждого ИщемПродукцию Из Объект.Товары ЦИкл
																	Если число(ВернутьгТИН(ИщемПродукцию.GTIN))=Число(Стр_nnn["gtin"]) Тогда
																		
																		Статус=Стр_nnn["bufferStatus"];
																		   Стр.СтатусСтроки=Статус;
																			
																		Если Статус="ACTIVE" Тогда
																			Стр.СтатусСтроки="В процессе";
																			Стр.КоличествоПолучено=Стр_nnn["totalPassed"];
																		ИначеЕсли 	Статус="EXHAUSTED" Тогда
																			Стр.СтатусСтроки="Получено";
																			Стр.КоличествоПолучено=Стр_nnn["totalPassed"];
																		ИначеЕсли Статус="CLOSED" Тогда
																			Стр.СтатусСтроки="Получено";
																			Стр.КоличествоПолучено=Стр_nnn["totalPassed"];
																		КонецЕсли;

																		
																		
																	КонецЕсли;
																КонецциклА;
															Конеццикла;
															
															
															Прервать;
														Исключение
									//Стр.СтатусСтроки="Получено";
															
														КонецПопытки;
																							
									
									
								КонецЕсли;
								Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
									ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП);
								КонецЕсли;
								//Стр.КоличествоПолучено=Получить;
						
					КонецЦикла;
				//КонецЕсли;
			
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
			
			 ЭтаФорма.Прочитать();  
		
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКМ(Команда) Экспорт
	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Форм.ОбновитьСтатусыДокументов(Команда,,,Объект.Ссылка);
	ЭтаФорма.Прочитать();
	
	// Вставить содержимое обработчика.
	Если Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован") Тогда
		Сообщить("По документу "+Строка(объект.Ссылка)+" уже получены номера КМ");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СервисПровайдер) Тогда
		ОбновимСтатсыПострчокам();
		
		//Сообщить("Данный докумнет отправлен в типографию!! Получение КМ не возможно");
		Возврат;
	КонецЕслИ;
	
	
	Если Объект.Статус<>ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы")
		И  Объект.Статус<>ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство")
		Тогда
		ПоказатьПредупреждение(,"Документ еще не обработан в системе управления!!");
	КонецЕсли;
	
	ТекСт=Форм.Пользователь;
	Форм.Пользователь=Объект.ТекущийПользователь;
	ПараметрыДлякилента=Неопределено;
	Если Форм.НаКлиенте(ПараметрыДлякилента) Тогда
		Форм.Пользователь=ТекСт;
		
		АдресРаздробить=ПараметрыДлякилента.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
			
		
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			ПоказатьПредупреждение(,"В пользователе не заполнен адрес СУЗ");
			Возврат;
			
		КонецЕсли;
		
Если ОбработкаWEBНаСервере Тогда
		Если НЕ ЗагрузканаСервереПолучитьКМ(ПараметрыДлякилента,Адрес,Порт,Защищ) Тогда
					ПоказатьПредупреждение(,"Не удалось подключиться к СУЗ");
	
		КонецЕсли;
		
		
	Иначе
		
			Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,ПараметрыДлякилента.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,ПараметрыДлякилента.Таймаут,Защищ);
			КонецЕсли;
			
			HTTPЗапрос = Новый HTTPЗапрос("signin");
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			
			HTTPЗапрос = Новый HTTPЗапрос("static/1555676332000/js/main/preload.js");
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			Токен=Ответ.ПолучитьТелоКакСтроку();
			Токен=Сред(Токен,Найти(Токен,"'clientToken', """)+16);
			Токен=Сред(Токен,1,Найти(Токен,"""")-1);
			Тело="{""id"":"""+ПараметрыДлякилента.ПользовательСУЗ+""",""password"":"""+ПараметрыДлякилента.ПарольСУЗ+"""}";
			
			
			
			HTTPЗапрос = Новый HTTPЗапрос("signin");
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	Если НЕ НеИспользоватьТокен Тогда
		HTTPЗапрос.Заголовки.Вставить("clientToken",Токен);
	КонецЕсли;
			
			HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
			Кэш_3=Ответ.Заголовки["Set-Cookie"];
			Если Кэш_3=Неопределено Тогда
				  Кэш_3=Ответ.Заголовки["set-cookie"];
			Конецесли;
			Если Ответ.КодСостояния=200 И Не ЗначениеЗАполнено(Ответ.ПолучитьТелоКакСтроку()) Тогда
				HTTPЗапрос = Новый HTTPЗапрос("/");
				HTTPЗапрос.Заголовки.Вставить("Accept","text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
				HTTPЗапрос.Заголовки.Вставить("Refer","http://"+Адрес+":"+Формат(Порт,"ЧГ=")+"/signin");
				HTTPЗапрос.Заголовки.Вставить("Host",""+Адрес+":"+Формат(Порт,"ЧГ=")+"");
				HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
				 
				HTTPЗапрос.Заголовки.Вставить("Cookie",Кэш_3);
				Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
				Для Каждого Стр Из Объект.Товары Цикл
					HTTPЗапрос = Новый HTTPЗапрос("codes/print");
					HTTPЗапрос.Заголовки.Вставить("Accept","*/*");
//					HTTPЗапрос.Заголовки.Вставить("Refer","http://"+Адрес+":"+Формат(Порт,"ЧГ=")+"/signin");
//					HTTPЗапрос.Заголовки.Вставить("Host",""+Адрес+":"+Формат(Порт,"ЧГ=")+"");
					HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded; charset=UTF-8");
					HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
	Если НЕ НеИспользоватьТокен Тогда
		HTTPЗапрос.Заголовки.Вставить("clientToken",Токен);
	КонецЕсли;
					 
				HTTPЗапрос.Заголовки.Вставить("Refer","http://"+Адрес+":"+Формат(Порт,"ЧГ=")+"/signin");
				HTTPЗапрос.Заголовки.Вставить("Host",""+Адрес+":"+Формат(Порт,"ЧГ=")+"");
					HTTPЗапрос.Заголовки.Вставить("Cookie",Кэш_3);
					
					GTIN=Продукция.Соответствие.Получить(Стр.GTIN);
					Если Не ЗначениеЗаполнено(GTIN) тогда
						GTIN=ВернутьГТИН(Стр.GTIN);
						Продукция.Соответствие.Вставить(GTIN,GTIN);
					КонецЕсли;

					
					HTTPЗапрос.УстановитьТелоИзСтроки("orderId="+оБЪЕКТ._Order_ID+
					"&gtin="+дополнитьСтроку(GTIN)+"&newStickerId="+НайтиШаблон(Объект.ШаблонЭтикетки)+"&quantity="+
					Формат(Стр.КоличествоКМ,"ЧГ=")+"&orderLineId="+СокрЛП(Стр.ID),КодировкаТекста.ANSI);
					Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.success  Тогда
						HTTPЗапрос = Новый HTTPЗапрос("download?filename="+NNN.filename);
						HTTPЗапрос.Заголовки.Вставить("Accept","*/*");
	//					HTTPЗапрос.Заголовки.Вставить("Refer","http://"+Адрес+":"+Формат(Порт,"ЧГ=")+"/signin");
	//					HTTPЗапрос.Заголовки.Вставить("Host",""+Адрес+":"+Формат(Порт,"ЧГ=")+"");
						HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
	Если НЕ НеИспользоватьТокен Тогда
		HTTPЗапрос.Заголовки.Вставить("clientToken",Токен);
	КонецЕсли;
						 
						HTTPЗапрос.Заголовки.Вставить("Cookie",Кэш_3);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						
						Текст=Ответ.ПолучитьТелоКакДвоичныеДанные();
						
						ЗаписатьВрегистрPDF(Текст,Объект.Ссылка,Стр.ID,NNN.filename);
					КонецЕсли
					
					
				Конеццикла;
				
				
			Иначе
				ПоказатьПредупреждение(,"Не удалось подключиться к СУЗ");
			КонецЕсли;
		КонецЕсли;	
		Иначе
			Форм.Пользователь=ТекСт;
		КонецЕсли;	
		Задержка_бычн(ПараметрыДлякилента.ТаймаутОжиданияПослеПлученияКМ);
	    Форм.ОбновитьСтатусыДокументов(Команда);
КонецПроцедуры

&НасервереБезКонтекста
Функция Задержка_бычн(Секунд)
	Попытка
		Сигнатура = Формат(ТекущаяДата(), "ДФ=yyyyMMddhhmmss");
		ПутьСкрипта = КаталогВременныхФайлов()+"SleepScript"+Сигнатура+".vbs";
		СкриптФайл = Новый ТекстовыйДокумент;
		СкриптФайл.ДобавитьСтроку("WScript.Sleep("+Формат(Секунд*1000, "ЧГ=0")+")");
		СкриптФайл.Записать(ПутьСкрипта, КодировкаТекста.OEM);
	//	WSHShell = Новый COMОбъект("WScript.Shell");
	//	WSHShell.Run("wscript.exe """+ПутьСкрипта+"""", 0, Истина);
		ЗапуститьПриложение("wscript.exe """+ПутьСкрипта+"""", , Истина);
		УдалитьФайлы(ПутьСкрипта);
	исключение
	КонецПопытки;
	
КонецФункции

Функция НайтиШаблон(Ш)
	К=Справочники.ШаблоныЭтикетокПриПечатиPDF_ХамелеонЦРПТ.НайтиПоНаименованию(Ш.Наименование);
	Если Не ЗначениеЗаполнено(К) Тогда
		К=1;
	Иначе
		К=К.Код;
	КонецЕсли;
	Возврат К
КонецФункции


Процедура ЗаписатьВрегистрPDF(PDF,Ссылка,orderID,НазваниеФайла)
	
	РегГ=РегистрыСведений.PDFФайлы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегГ.Отбор.Заказ.Установить(Ссылка);
	РегГ.Отбор.Код.Установить(orderID);
	Добав=РегГ.Добавить();
	Добав.Заказ=Ссылка;
	Добав.Код=orderID;
	Добав.НазваниеФайла=НазваниеФайла;
	Добав.ХранилищеФайла=Новый ХранилищеЗначения(PDF,Новый СжатиеДанных(9));
	РегГ.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	// Вставить содержимое обработчика.
	
	
	Если 	АвтоСерийные Тогда
		ТоварыСерийныйНомерНачалоВыбора(Элемент, "",Истина,ЛОжь)
		
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	// Вставить содержимое обработчика.
	
	ТекД=Элементы.Товары.ТекущиеДанные;
	НН=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",ТекД.ПолучитьИдентификатор()));
	Для Каждого Стр_1 Из НН Цикл
		Объект.СерийныеНомера.Удалить(Стр_1);
	КонецЦикла;
КонецПроцедуры

Функция ЗагрузканаСервереУдалитьчерновик(Thumbprint_1,УжеОтправили,СРегистра)
Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
	HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
	HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОБъект._Order_ID) Тогда
		Возврат Истина
	КонецЕсли;
	HTTPЗапрос=Новый HTTPЗапрос(" api/v3/lk/documents/draft/"+Объект._Order_ID);      //создаем новый черновик
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("POST",HTTPЗапрос);
		
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Текст1);
	КонецЕсли;
	 
		 
	Если Ответ.КодСостояния=200 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
			Объект._Order_ID="";
			Объект.ПометкаУдаления=Истина;
			Если ОБъект.Проведен Тогда
				ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.ОтменаПроведения));		
			Иначе
				ЭтаФорма.Записать();		
				
			КонецЕсли
			
	ИначеЕсли Ответ.КодСостояния=401  		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
			Иначе
				Возврат Ложь;
			КонецЕсли
		КонецЕсли;
		Возврат Истина;
КонецФункции
&НаКлиенте
Процедура УдалитьЧерновик(Команда,УжеОтправили=Ложь )
	// Вставить содержимое обработчика.
	Если Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ЧерновикОбработан") Тогда
		
	ЭтаФорма.Записать();
	Thumbprint_1=ПолучитьИзПользователя();	
		Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
			Возврат;
		КонецЕслИ;
	
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
	Если ОбработкаWEBНаСервере Тогда
		Если НЕ ЗагрузканаСервереУдалитьчерновик(Thumbprint_1,УжеОтправили,СРегистра) Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				УдалитьЧерновик(Команда,Истина)			
			КонецЕсли
	
		КонецЕсли;
		
		
	Иначе

			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
	HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
	HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОБъект._Order_ID) Тогда
		Возврат
	КонецЕсли;
	HTTPЗапрос=Новый HTTPЗапрос(" api/v3/lk/documents/draft/"+Объект._Order_ID);      //создаем новый черновик
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("POST",HTTPЗапрос);
		
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Текст1);
	КонецЕсли;
	 
		 
	Если Ответ.КодСостояния=200 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
			Объект._Order_ID="";
			Объект.ПометкаУдаления=Истина;
			Если ОБъект.Проведен Тогда
				ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.ОтменаПроведения));		
			Иначе
				ЭтаФорма.Записать();		
				
			КонецЕсли
			
	ИначеЕсли Ответ.КодСостояния=401  		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				УдалитьЧерновик(Команда,Истина)			
			КонецЕсли
	КонецЕсли;
	КонецЕсли;  КонецЕсли;
КонецПроцедуры

Функция ПолучитьФайлыПоДокументу()
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	PDFФайлы_ХамелеонЦРПТ.ХранилищеФайла
		|ИЗ
		|	РегистрСведений.PDFФайлы_ХамелеонЦРПТ КАК PDFФайлы_ХамелеонЦРПТ
		|ГДЕ
		|	PDFФайлы_ХамелеонЦРПТ.Заказ = &Заказ";
	
	Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивФайлов=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		МассивФайлов.Добавить(ВыборкаДетальныеЗаписи.ХранилищеФайла.Получить());
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Возврат 	МассивФайлов
КонецФункции

&НаКлиенте
Процедура ПечатьPDF(Команда,Yjv=0)  Экспорт
	// Вставить содержимое обработчика.
	//Yjv=0;
	ПолучилиФайл=ПолучитьФайлыПоДокументу();
	Для Каждого Стр Из ПолучилиФайл Цикл
		Если Стр=Неопределено Тогда
			Продолжить;
		КонецЕсли;
				ДвоичныеДанные=Стр;
	Каталог = КаталогВременныхФайловНаКлиенте;
	ИмяФайла = Строка(Новый УникальныйИдентификатор) + "2.xml";
	ВремФайл= Каталог+ИмяФайла;
				
				//ВремФайл=ПолучитьИмяВременногоФайла(".pdf");
				ДвоичныеДанные.Записать(ВремФайл);
				//Если НаПринтер Тогда
				//	Shell = Новый COMОбъект("Shell.Application");
	    		//	Shell.ShellExecute(ВремФайл, "", "", "print", 0);				
					
					
//				Иначе
				
				Yjv=Yjv+1;
				ОткрытьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаСертификата",Новый Структура("Файл",ВремФайл),,Yjv);
//				КонецЕслИ;
			КонецЦикла;
	
КонецПроцедуры

Функция  СоздатьНайтиИДСТРОКИ(orderID)
	ГТИН=Сред(orderID,3);
	ГТИН=Сред(ГТИН,1,15-1);
	Попытка
		ППП=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
	Исключение
	КонецПопытки;
	Если ЗначениеЗаполнено(ППП) тогда
		ТТТ=Объект.Товары.НайтиСтроки(Новый Структура("GTIN",ППП));
		Если ТТТ.Количество()>0 Тогда
			
						СпрОрд=Справочники.ID_строки_партия_ХамелеонЦРПТ.НайтиПоНаименованию(ТТТ[0].ID);
					Если Не ЗначениеЗаполнено(СпрОрд) Тогда
								
								СпрОрд=Справочники.ID_строки_партия_ХамелеонЦРПТ.СоздатьЭлемент();
								СпрОрд.Наименование=orderID;
								СпрОрд.Записать();
							КонецЕсли;
						Возврат       СпрОрд.Ссылка;
		КонецЕсли;
	КонецЕсли;						
	Возврат Неопределено
КонецФункции

Процедура НайтиВсеOrderlineПоНомеркуКМ()
	Для Каждого Стр_1 Из ОБъект.КМИзAPI Цикл
		Стр_1.НомерКМ=РаскодироватьСтроку(Стр_1.НомерКМ,СпособКодированияСтроки.КодировкаURL);
		Стр_1.OrderID=СоздатьНайтиИДСТРОКИ(Стр_1.НомерКМ)
	КонецциклА;
	
КонецПроцедуры

Процедура ЗаписатьВРегистр(МассивМарок,ИД)
	ТаблицаЗн=Новый ТаблицаЗначений;
	ТаблицаЗн.Колонки.Добавить("ДокументЗаказа");
	ТаблицаЗн.Колонки.Добавить("НомерКМ");
	ТаблицаЗн.Колонки.Добавить("НомерКМ_Короткий");
	ТаблицаЗн.Колонки.Добавить("OrderID");
	ТаблицаЗн.Колонки.Добавить("НомерСтроки_1");
	Для Каждого Стр Из МассивМарок Цикл
		Добав=ТаблицаЗн.Добавить();
		Добав.НомерКМ=Стр;
		
		
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			// Данный фрагмент построен конструктором.
			// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	НомераКМ_ХамелеонЦРПТ.НомерКМ
				|ИЗ
				|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
				|ГДЕ
				|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа
				|	И НомераКМ_ХамелеонЦРПТ.НомерКМ = &НомерКМ";
			
			Запрос.УстановитьПараметр("ДокументЗаказа", Объект.Ссылка);
			Запрос.УстановитьПараметр("НомерКМ", Стр);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				// Вставить обработку выборки ВыборкаДетальныеЗаписи
				Если ВыборкаДетальныеЗаписи.НомерКМ=Стр Тогда
					Возврат;
				Конецесли;
			КонецЦикла;
			
			//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		
		
		Добав.ДокументЗаказа =Объект.Ссылка;
		
		cis=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьКороткийНомерКМ(
		Добав.НомерКМ,Объект.ТипПродукции);
		Добав.НомерКМ_Короткий=cis;				
		
		МаксисумСтроки=МаксисумСтроки+1;
		Добав.НомерСтроки_1=МаксисумСтроки;
		Добав.OrderID=ИД;
	КонецЦИкла;
		
	РегДв=РегистрыСведений.НомераКМ_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Загрузить(ТаблицаЗн);
	Попытка
		РегДв.Записать(Ложь);
	Исключение
	КонецПопытки;
		//Д=РегДв.Добавить();

КонецПроцедуры


Функция Вргеистре(КоличествоОгранчений)
	
	КоличествоОгранчений=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КоличествоКМВЗаказеОтображаемое;
	
	Если Не ЗначениеЗаполнено(ОБъект.Ссылка) Тогда
		Возврат Ложь;
	Конецесли;
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ
		|ИЗ
		|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
		|ГДЕ
		|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа";
	
	Запрос.УстановитьПараметр("ДокументЗаказа", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Возврат ВыборкаДетальныеЗаписи.Количество()>0
	
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
КонецФункции
	
	


Функция ПолучитьGTIN(Н)
	Если (ОБъект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак 
		ИЛИ ОБъект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак
		)И ОБъект.ШаблонКМ_Табак=Перечисления.Шаблоны_подписи_кодов_КМ_Табак_ХамелеонЦРПТ.Блок Тогда
		Если ЗначениеЗаполнено(Н.GTINУпаковки) Тогда
			Возврат дополнитьСтроку(Н.GTINУпаковки)
		Иначе
			Возврат дополнитьСтроку(Н.GTIN)
			
		КонецЕсли;
	Иначе
		Возврат дополнитьСтроку(Н.GTIN)
	КонецЕсли;
Конецфункции

&НаКлиенте
Процедура ПолучитьКМИзAPI_ОбувьСУЗ_Новый()
	//Если Не ЗначениеЗаполнено(Объект._Order_ID) Тогда
	//	Возврат;                       
	//КонецЕслИ;
	
		
	ЭтаФорма.Модифицированность=Истина;
	
	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Текст=Форм.Пользователь;
	Форм.Пользователь=Объект.ТекущийПользователь;
	ПараметрыДлякилента=Неопределено;
	Если Форм.НаКлиенте(ПараметрыДлякилента) Тогда
		Форм.Пользователь=Текст;
	
				АдресРаздробить=ПараметрыДлякилента.АдресСУЗ;
				Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
				Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
				Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
				Порт=Сред(Порт,Найти(Порт,":")+1);
				Попытка
					Порт=число(Порт);
				Исключение
					Порт=Неопределено;
				КонецПопытки;
				
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			ПоказатьПредупреждение(,"В пользователе не заполнен адрес СУЗ");
			Возврат;
			
		КонецЕсли;
		
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
				
						
					Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
					
						HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,,Защищ);
					Иначе
						HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,,Защищ);
					КонецЕсли;
					
					КоличествоОгранчений=0;
					ВРегистре=Вргеистре(КоличествоОгранчений);
					Если ВРегистре ИЛИ Объект.Товары.Итог("КоличествоКМ")>КоличествоОгранчений Тогда
						 Состояние("Получение "+Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
						 0);
						
						НомерПП=0;
						Для Каждого Стр Из Объект.Товары Цикл
							НомерПП=НомерПП+1;
							Если НЕ ЗначениеЗаполнено(Стр.ИДСУЗ)  Тогда
								Продолжить;
							КонецЕсли;
							Пока Стр.КоличествоКМ-Стр.КоличествоПолучено>0 Цикл
								
								Получить=Мин(Стр.КоличествоКМ-Стр.КоличествоПолучено,10000);
								
								
								HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
								Формат(Получить,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
								ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
								Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
									ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП);
								КонецЕсли;
								//Стр.КоличествоПолучено=Получить;
								 Попытка
									//ЧтениеJSON = Новый ЧтениеJSON;
									//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
									Если Ответ.КодСостояния=200 Тогда
										НаСервереСДобавлениемРегистра_Шины(ТекстДокумента,Стр.ID,Стр.ПоследнийБлок);
										
								//
						                    		 сТР.ОшибкаПолучения="В обработке";
													 
													Стр.СтатусСтроки="В обработке";
											

									   	// ЭтаФорма.Прочитать();
									        	 Стр.КоличествоПолучено=Стр.КоличествоПолучено+Получить; 
///												 Стр.ПоследнийБлок=
												 Если Стр.КоличествоПолучено=Стр.КОличествоКМ Тогда
													 сТР.ОшибкаПолучения="Получено";
													 
													Стр.СтатусСтроки="Получено";
								HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)
								+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								Попытка
									Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
								Исключение
								КонецПопытки;
								
								
																						 
													 
													КонецЕсли;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
												 Состояние("Получено "+Формат(Объект.Товары.Итог("КоличествоПолучено"),"ЧГ=")+" из "+
												 Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
												 Окр(Объект.Товары.Итог("КоличествоПолучено")*100/Объект.Товары.Итог("КоличествоКМ")));
										//НайтиВсеOrderlineПоНомеркуКМ();
									Иначе
										
										
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
										
										
										Если NNN.success=Ложь Тогда
										globalErrors="";
										Для Каждого Стр_1 Из NNN.globalErrors Цикл
											globalErrors=globalErrors+Стр_1+"
											|"
										Конеццикла;
										Стр.ОшибкаПолучения=globalErrors;
										Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: EXHAUSTED")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ;
													Стр.СтатусСтроки="Получено";
											
								HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)
								+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								Попытка
									Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
								Исключение
							КонецПопытки;
								
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
																						 
											
										Конецесли;
										
										Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: PENDING")>0 Тогда
											Возврат;;
										Конецесли;
										
										Если Найти(globalErrors,"Not enough balance")>0 Тогда
											Сообщить("Необходимо пополнить баланс в ЦРПТ");
										Конецесли;
										
										Сообщить("Не удалось обработать документ: "+globalErrors);
										
										Если Найти(globalErrors,"Quantity must be less or equals buffer size")>0 Тогда
											
											Дальше=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Buffer size: ")+13));
											ЧислоОсталось=Число(СокрЛП(Сред(Дальше,1,Найти(Дальше,".")-1)));
											Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
												 НеНадоОбновлятьСтатус=Истина;
											ИначеЕсли Найти(globalErrors,"Требуемое количество ")>0 Тогда
											ЧислоОсталось=Число(СокрЛП(Сред(globalErrors,Найти(globalErrors,"осталось использовать ")+22)));
											Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
												 НеНадоОбновлятьСтатус=Истина;
								ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше,чем размер буфера")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше, чем размер буфера")>0 Тогда
			
						НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
										ИначеЕсли Найти(globalErrors,"DELETE")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ ; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
											
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕСЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Табак")
			ИЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак")
			Тогда
								 	Сообщить("Возможно указано заказанное количество меньше 2 штук!!");
										Конецесли;
										
									ИначеЕсли NNN.success=Истина Тогда
										   Прервать;
										
									КонецЕсли;
									  КонецЕсли; 
								Исключение
									
									Сообщить("Ошибка "+Ответ.ПолучитьТелоКакСтроку());
								 КонецПопытки;
								
								
							Конеццикла;
						КонецциклА;
						
					Иначе
						Состояние("Получение "+Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
						 0);
					
						НомерПП=0;
						Для Каждого Стр Из Объект.Товары Цикл
							Если НЕ ЗначениеЗаполнено(Стр.ИДСУЗ)  Тогда
								Продолжить;
							КонецЕсли;
							Если Стр.КоличествоКМ=Стр.КоличествоПолучено Тогда
								Продолжить;
							КонецЕслИ;
						НомерПП=НомерПП+1;
	HTTPЗапрос = Новый HTTPЗапрос("api/codes?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
								Формат(Стр.КоличествоКМ,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок));
													HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
						Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
							ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП);
						КонецЕсли;
						
						Попытка
							//ЧтениеJSON = Новый ЧтениеJSON;
							//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
							Если Ответ.КодСостояния=200 Тогда
								НеобходимоВсеНаСервереДелать_Шины(ТекстДокумента,Стр.ID,Стр.ПоследнийБлок);
								
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
								Стр.КоличествоПолучено=Стр.КоличествоКМ;
								
								
								HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)
								+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								Попытка
									Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
								Исключение
							КонецПопытки;
								
								
								
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
												 Состояние("Получено "+Формат(Объект.Товары.Итог("КоличествоПолучено"),"ЧГ=")+" из "+
												 Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
												 Окр(Объект.Товары.Итог("КоличествоПолучено")*100/Объект.Товары.Итог("КоличествоКМ")));
									
								//НайтиВсеOrderlineПоНомеркуКМ();
							ИначеЕсли Ответ.КодСостояния=404 Тогда
								Сообщить("Не обработано в ЦРПТ");
							Иначе
								стр.СтатусСтроки="Отказ";
								NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
						
								Если NNN.success=Ложь Тогда
								globalErrors="";
								Для Каждого Стр_1 Из NNN.globalErrors Цикл
									globalErrors=globalErrors+Стр_1+"
									|"
								Конеццикла;
								Стр.ОшибкаПолучения=globalErrors;
								Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: EXHAUSTED")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ;
											Стр.СтатусСтроки="Получено";
								HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)
								+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								Попытка
									Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
								Исключение
							КонецПопытки;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								
											
										Конецесли;
										Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: PENDING")>0 Тогда
											Стр.СтатусСтроки="Обработка в ЦРПТ";
											Возврат;;
										Конецесли;
										Если Найти(globalErrors,"Not enough balance")>0 Тогда
											Сообщить("Необходимо пополнить баланс в ЦРПТ");
										Конецесли;

								Сообщить("Не удалось обработать документ: "+globalErrors);
								Если Найти(globalErrors,"Требуемое количество ")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=Число(СокрЛП(Сред(globalErrors,Найти(globalErrors,"осталось использовать ")+22)));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше,чем размер буфера")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше, чем размер буфера")>0 Тогда
			
						НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								ИначеЕсли Найти(globalErrors,"DELETE")>0 Тогда
									Стр.КоличествоПолучено=Стр.КоличествоКМ ; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
									
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕСЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Табак")
			ИЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак") Тогда
								 	Сообщить("Возможно указано заказанное количество меньше 2 штук!!");
								Конецесли;
							ИначеЕсли NNN.success=Истина Тогда
								
								
							КонецЕсли;
		
	КонецЕсли;
							
							
						Исключение
							
							Сообщить("Ошибка "+Ответ.ПолучитьТелоКакСтроку());
						КонецПопытки;
						
					КонецЦикла;
				КонецЕсли;
				
			Иначе
				Форм.Пользователь=Текст;
			КонецЕсли;			
			
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
			Текст=Форм.Пользователь;
			Форм.Пользователь=Объект.ТекущийПользователь;
			
			Форм.Пользователь=Текст;
			 ЭтаФорма.Прочитать();  
		
	
КонецПроцедуры


Процедура ПолучитьКМИзAPI_ШиныНаСервере()
	//Если Не ЗначениеЗаполнено(Объект._Order_ID) Тогда
	//	Возврат;                       
	//КонецЕслИ;
	
		
	ЭтаФорма.Модифицированность=Истина;
	
	//Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	//Текст=Форм.Пользователь;
//	Форм.Пользователь=Объект.ТекущийПользователь;
//	ПараметрыДлякилента=Неопределено;
//	Если Форм.НаКлиенте(ПараметрыДлякилента) Тогда
//		Форм.Пользователь=Текст;
			ПараметрыДлякилента=ПолучитьИзПользователя();
		Если Не ЗначениеЗаполнено(ПараметрыДлякилента) Тогда
			Возврат;
		КонецЕслИ;
			
				АдресРаздробить=ПараметрыДлякилента.АдресСУЗ;
				Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
				Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
				Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
				Порт=Сред(Порт,Найти(Порт,":")+1);
				Попытка
					Порт=число(Порт);
				Исключение
					Порт=Неопределено;
				КонецПопытки;
				
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			Сообщить("В пользователе не заполнен адрес СУЗ");
			Возврат;
			
		КонецЕсли;
		
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
				
						
					Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
					
						HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,,Защищ);
					Иначе
						HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,,Защищ);
					КонецЕсли;
					
					КоличествоОгранчений=0;
					ВРегистре=Вргеистре(КоличествоОгранчений);
					Если ВРегистре ИЛИ Объект.Товары.Итог("КоличествоКМ")>КоличествоОгранчений Тогда
						// Состояние("Получение "+Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
//						 0);
						
						НомерПП=0;
						Для Каждого Стр Из Объект.Товары Цикл
							НомерПП=НомерПП+1;
							Стр.СтатусСтроки="";
							Стр.ОшибкаПолучения="";
							//Если НЕ ЗначениеЗаполнено(Стр.ИДСУЗ)  Тогда
							//	Продолжить;
							//КонецЕсли;
							Пока Стр.КоличествоКМ-Стр.КоличествоПолучено>0 Цикл
								
								Получить=Мин(Стр.КоличествоКМ-Стр.КоличествоПолучено,10000);
								
								
								
								Если РаботатьНаV1 Тогда
						HTTPЗапрос = Новый HTTPЗапрос("api/codes?orderId="+Объект._Order_ID+"&orderLineId="+СокрЛП(Стр.ID)+"&quantity="+Формат(Получить,"ЧГ="));
								Иначе
								
							//Если ОБъект.СУЗОбувь Тогда
								HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
								Формат(Получить,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								Конецесли;
							//Иначе
							//	HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
							//	Формат(Получить,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								
							//КонецЕслИ;
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
								ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
								Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
									ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП);
								КонецЕсли;
								//Стр.КоличествоПолучено=Получить;
								 Попытка
									//ЧтениеJSON = Новый ЧтениеJSON;
									//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
									Если Ответ.КодСостояния=200 Тогда
										НаСервереСДобавлениемРегистра_Шины(ТекстДокумента,Стр.ID,Стр.ПоследнийБлок);
										
								//
						                    		 сТР.ОшибкаПолучения="В обработке";
													 
													Стр.СтатусСтроки="В обработке";
											

									   	// ЭтаФорма.Прочитать();
									        	 Стр.КоличествоПолучено=Стр.КоличествоПолучено+Получить; 
///												 Стр.ПоследнийБлок=
												 Если Стр.КоличествоПолучено=Стр.КОличествоКМ Тогда
													 сТР.ОшибкаПолучения="Получено";
													 
													Стр.СтатусСтроки="Получено";
													
										//	КонецЕсли;		
						//Если ОБъект.СУЗОбувь Тогда
								Если РаботатьНаV1 ТОгда
//						HTTPЗапрос = Новый HTTPЗапрос("api/codes?orderId="+Объект._Order_ID+"&orderLineId="+СокрЛП(Стр.ID)+"&quantity="+Формат(Получить,"ЧГ="));
Иначе						
								HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)
								+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
							КонецЕсли;
						//	Иначе
						//		HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"buffer/close?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)
						//		+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
						//		
								
						//	КонецЕсли;
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								Попытка
									Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
								Исключение
							КонецПопытки;
								    КонецЕсли;
																						 
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
//												 Состояние("Получено "+Формат(Объект.Товары.Итог("КоличествоПолучено"),"ЧГ=")+" из "+
//												 Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
//												 Окр(Объект.Товары.Итог("КоличествоПолучено")*100/Объект.Товары.Итог("КоличествоКМ")));
										//НайтиВсеOrderlineПоНомеркуКМ();
									Иначе
										
										
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
										
										
										Если NNN.success=Ложь Тогда
										globalErrors="";
										Для Каждого Стр_1 Из NNN.globalErrors Цикл
											globalErrors=globalErrors+Стр_1+"
											|"
										Конеццикла;
										Стр.ОшибкаПолучения=globalErrors;
										Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: EXHAUSTED")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ;
													Стр.СтатусСтроки="Получено";
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
													
										//	КонецЕсли;
						//Если ОБъект.СУЗОбувь Тогда
						
						
								Если РаботатьНаV1 Тогда
Иначе						
								HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)
								+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
							КонецЕсли;
						//	Иначе
						//		HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"buffer/close?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)
						//		+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								
								
						//	КонецЕслИ;
								
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								Попытка
									Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
								Исключение
							КонецПопытки;
								
																						 
											
										Конецесли;
										
										Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: PENDING")>0 Тогда
											Возврат;;
										Конецесли;
										
										
										Если Найти(globalErrors,"Not enough balance")>0 Тогда
											Сообщить("Необходимо пополнить баланс в ЦРПТ");
										Конецесли;
										Если Найти(globalErrors,"Not enough balance")>0 Тогда
											Сообщить("Необходимо пополнить баланс в ЦРПТ");
										Конецесли;
	
										Сообщить("Не удалось обработать документ: "+globalErrors);
										
										Если Найти(globalErrors,"Quantity must be less or equals buffer size")>0 Тогда
											
											Дальше=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Buffer size: ")+13));
											ЧислоОсталось=Число(СокрЛП(Сред(Дальше,1,Найти(Дальше,".")-1)));
											Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
												 НеНадоОбновлятьСтатус=Истина;
											ИначеЕсли Найти(globalErrors,"Требуемое количество ")>0 Тогда
											ЧислоОсталось=Число(СокрЛП(Сред(globalErrors,Найти(globalErrors,"осталось использовать ")+22)));
											Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
												 НеНадоОбновлятьСтатус=Истина;
								ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше,чем размер буфера")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше, чем размер буфера")>0 Тогда
			
						НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								ИначеЕсли Найти(globalErrors,"DELETE")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ ; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
											
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕСЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Табак")
			ИЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак")
			Тогда
								 	Сообщить("Возможно указано заказанное количество меньше 2 штук!!");
										Конецесли;
										       Прервать;
									ИначеЕсли NNN.success=Истина Тогда
										   Прервать;
										
									   КонецЕсли;
									   
									    прервать;
									   
									  КонецЕсли; 
								Исключение
									    прервать;
									
									Сообщить("Ошибка "+Ответ.ПолучитьТелоКакСтроку());
								 КонецПопытки;
								
								  
							Конеццикла;
						КонецциклА;
						
					Иначе
//						Состояние("Получение "+Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
//						 0);
					
						НомерПП=0;
						Для Каждого Стр Из Объект.Товары Цикл
							Стр.СтатусСтроки="";
							Стр.ОшибкаПолучения="";
							Если Стр.КоличествоКМ=Стр.КоличествоПолучено Тогда
								Продолжить;
							КонецЕслИ;
						НомерПП=НомерПП+1;
					//	Если ОБъект.СУЗОбувь Тогда
							
	//HTTPЗапрос = Новый HTTPЗапрос("api/v2/tires/codes?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
								Если РаботатьНаV1 Тогда
						HTTPЗапрос = Новый HTTPЗапрос("api/codes?orderId="+Объект._Order_ID+"&orderLineId="+СокрЛП(Стр.ID)+"&quantity="+Формат(Получить,"ЧГ="));
					Иначе
	HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
								Формат(Стр.КоличествоКМ-Стр.КоличествоПолучено,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
КонецЕсли;					
					//	Иначе
	//HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
//
//								Формат(Стр.КоличествоКМ,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
//								КонецЕслИ;
													HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
						Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
							ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП);
						КонецЕсли;
						
						Попытка
							//ЧтениеJSON = Новый ЧтениеJSON;
							//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
							Если Ответ.КодСостояния=200 Тогда
								НеобходимоВсеНаСервереДелать_Шины(ТекстДокумента,Стр.ID,Стр.ПоследнийБлок);
								
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
								Стр.КоличествоПолучено=Стр.КоличествоКМ;
								
								
								//Если Объект.СУЗОбувь=Истина Тогда
									HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)
									+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
									HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
									HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								//Иначе
								//	HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)
								//	+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								//	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
							//		HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
							//	КонецЕслИ;
								Попытка
									Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
								Исключение
							КонецПопытки;
								
								
								
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
//												 Состояние("Получено "+Формат(Объект.Товары.Итог("КоличествоПолучено"),"ЧГ=")+" из "+
//												 Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
//												 Окр(Объект.Товары.Итог("КоличествоПолучено")*100/Объект.Товары.Итог("КоличествоКМ")));
									
								//НайтиВсеOrderlineПоНомеркуКМ();
							ИначеЕсли Ответ.КодСостояния=404 Тогда
								
								
								
								
								
								Сообщить("Не обработано в ЦРПТ");
							Иначе
								стр.СтатусСтроки="Отказ";
								NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
						
								Если NNN.success=Ложь Тогда
								globalErrors="";
								Для Каждого Стр_1 Из NNN.globalErrors Цикл
									globalErrors=globalErrors+Стр_1+"
									|"
								Конеццикла;
								Стр.ОшибкаПолучения=globalErrors;
								Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: EXHAUSTED")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ;
											Стр.СтатусСтроки="Получено";
								HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)
								+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								Попытка
									Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
								Исключение
							КонецПопытки;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								
											
										Конецесли;
										Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: PENDING")>0 Тогда
											Стр.СтатусСтроки="Обработка в ЦРПТ";
											Возврат;;
										Конецесли;
										Если Найти(globalErrors,"Not enough balance")>0 Тогда
											Сообщить("Необходимо пополнить баланс в ЦРПТ");
										Конецесли;

								Сообщить("Не удалось обработать документ: "+globalErrors);
								Если Найти(globalErrors,"Требуемое количество ")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=Число(СокрЛП(Сред(globalErrors,Найти(globalErrors,"осталось использовать ")+22)));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
										 									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше,чем размер буфера")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше, чем размер буфера")>0 Тогда
			
						НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								ИначеЕсли Найти(globalErrors,"DELETE")>0 Тогда
									Стр.КоличествоПолучено=Стр.КоличествоКМ ; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
									
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕСЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Табак")
			ИЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак")
			Тогда
								 	Сообщить("Возможно указано заказанное количество меньше 2 штук!!");
								Конецесли;
							ИначеЕсли NNN.success=Истина Тогда
								
								
							КонецЕсли;
		
	КонецЕсли;
							
			Если Ответ.КодСостояния<>200 Тогда
		HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/status?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+
		"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
			 HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
						
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Объект.Ссылка,ТекстДокумента);
				
			Конецесли;
						
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
				NNN.Свойство("bufferStatus",Стр.СтатусСтроки);
				NNN.Свойство("rejectionReason",Стр.ОшибкаПолучения);
				
				
			КонецЕслИ;
	
	
						Исключение
							
							Сообщить("Ошибка "+Ответ.ПолучитьТелоКакСтроку());
						КонецПопытки;
						
					КонецЦикла;
				КонецЕсли;
				
			
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
			
			 ЭтаФорма.Прочитать();  
		
	
КонецПроцедуры


Процедура ПолучитьКМИзAPI_Молоко_CSVНаСервере()
	// Вставить содержимое обработчика.
	
	
   
	
    
	Thumbprint_1=ПолучитьИзПользователя();	
		    ПараметрыДлякилента=Thumbprint_1;
			
			
		АдресРаздробить=ПараметрыДлякилента.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			Сообщить("В пользователе не заполнен адрес СУЗ");
			Возврат;
			
		КонецЕсли;
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
			
			СРегистра="";
			СерийныйНомер="";
			
		Куки=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитькукиВСУЗ(Thumbprint_1,,СРегистра,СерийныйНомер);
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;

			
			
			 	
						КоличествоОгранчений=0;
				ВРегистре=Вргеистре(КоличествоОгранчений);
					Если ВРегистре ИЛИ Объект.Товары.Итог("КоличествоКМ")>КоличествоОгранчений Тогда
//						 Состояние("Получение "+Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
//						 0);
						
						НомерПП=0;
						Для Каждого Стр Из Объект.Товары Цикл
							НомерПП=НомерПП+1;
							Стр.СтатусСтроки="";
							Стр.ОшибкаПолучения="";
							//Если НЕ ЗначениеЗаполнено(Стр.ИДСУЗ)  Тогда
							//	Продолжить;
							//КонецЕсли;
							Пока Стр.КоличествоКМ-Стр.КоличествоПолучено>0 Цикл
								
								Получить=Мин(Стр.КоличествоКМ-Стр.КоличествоПолучено,10000);
								
								
								
								
								
								
								//HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
								//Формат(Получить,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								
								Объем="";
								Если Не ЗначениеЗАполненО(Стр.ОБъем) тогда
									Объем=Стр.Объем*Получить/Стр.КоличествоКМ;
									Объем=Формат(Объем,"ЧГ=");
								КонецЕсли;
								
								HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/orders/"+
								Объект._Order_ID+"/codes/"+ПолучитьGTIN(Стр.GTIN)+"/print/CSV?expirationDate="+Формат(Стр.Годендо,"ДФ=""ггММдд""")+
								"&stickerId=12&accompanyingDocument="+Стр.НомерВСД+Объем+"&quantity="+Формат(Получить,"ЧГ="));
								
								HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
								
								//КонецЕслИ;
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
								
								ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
							//	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
							//		ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП);
							//	КонецЕсли;
								
								HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/download?filename="+
								СтрЗаменить(СтрЗаменить(текстДокумента,"""",""),"%2F","/"));
								
								HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);


					//	Иначе
	//HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
//
//								Формат(Стр.КоличествоКМ,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
//								КонецЕслИ;


	//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
						//HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
						ТекстДокумента=СтрЗаменить(ТекстДокумента,Символ(29),"<GS>");
								Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
									ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП);
								КонецЕсли;
								
								//Стр.КоличествоПолучено=Получить;
								 Попытка
									//ЧтениеJSON = Новый ЧтениеJSON;
									//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
									Если Ответ.КодСостояния=200 Тогда
										//НаСервереСДобавлениемРегистра_Шины(ТекстДокумента,Стр.ID,Стр.ПоследнийБлок);
										НеобходимоВсеНаСервереДелать_МОЛОКО(ТекстДокумента,Стр.ID,Стр.ПоследнийБлок);
										
								//
						                    		 сТР.ОшибкаПолучения="В обработке";
													 
													Стр.СтатусСтроки="В обработке";
											

									   	// ЭтаФорма.Прочитать();
									        	 Стр.КоличествоПолучено=Стр.КоличествоПолучено+Получить; 
///												 Стр.ПоследнийБлок=
												 Если Стр.КоличествоПолучено=Стр.КОличествоКМ Тогда
													 сТР.ОшибкаПолучения="Получено";
													 
													Стр.СтатусСтроки="Получено";
													
										//	КонецЕсли;		
						//Если ОБъект.СУЗОбувь Тогда
								//HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)
								//+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
						//	Иначе
						//		HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"buffer/close?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)
						//		+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
						//		
								
						//	КонецЕсли;
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								Попытка
									Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
								Исключение
							КонецПопытки;
								    КонецЕсли;
																						 
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
//												 Состояние("Получено "+Формат(Объект.Товары.Итог("КоличествоПолучено"),"ЧГ=")+" из "+
//												 Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
//												 Окр(Объект.Товары.Итог("КоличествоПолучено")*100/Объект.Товары.Итог("КоличествоКМ")));
										//НайтиВсеOrderlineПоНомеркуКМ();
									Иначе
										
										
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
										
										
										Если NNN.success=Ложь Тогда
										globalErrors="";
										Для Каждого Стр_1 Из NNN.globalErrors Цикл
											globalErrors=globalErrors+Стр_1+"
											|"
										Конеццикла;
										Стр.ОшибкаПолучения=globalErrors;
										Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: EXHAUSTED")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ;
													Стр.СтатусСтроки="Получено";
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
													
										//	КонецЕсли;
						//Если ОБъект.СУЗОбувь Тогда
						
						
											
										Конецесли;
										
										Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: PENDING")>0 Тогда
											Возврат;;
										Конецесли;
										
										
										Если Найти(globalErrors,"Not enough balance")>0 Тогда
											Сообщить("Необходимо пополнить баланс в ЦРПТ");
										Конецесли;
										Если Найти(globalErrors,"Not enough balance")>0 Тогда
											Сообщить("Необходимо пополнить баланс в ЦРПТ");
										Конецесли;
	
										Сообщить("Не удалось обработать документ: "+globalErrors);
										
										Если Найти(globalErrors,"Quantity must be less or equals buffer size")>0 Тогда
											
											Дальше=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Buffer size: ")+13));
											ЧислоОсталось=Число(СокрЛП(Сред(Дальше,1,Найти(Дальше,".")-1)));
											Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
												 НеНадоОбновлятьСтатус=Истина;
											ИначеЕсли Найти(globalErrors,"Требуемое количество ")>0 Тогда
											ЧислоОсталось=Число(СокрЛП(Сред(globalErrors,Найти(globalErrors,"осталось использовать ")+22)));
											Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
												 НеНадоОбновлятьСтатус=Истина;
								ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше,чем размер буфера")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше, чем размер буфера")>0 Тогда
			
						НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								ИначеЕсли Найти(globalErrors,"DELETE")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ ; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
											
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕСЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Табак")
			ИЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак") Тогда
								 	Сообщить("Возможно указано заказанное количество меньше 2 штук!!");
										Конецесли;
										       Прервать;
									ИначеЕсли NNN.success=Истина Тогда
										   Прервать;
										
									   КонецЕсли;
									   
									    прервать;
									   
									  КонецЕсли; 
								Исключение
									    прервать;
									
									Сообщить("Ошибка "+Ответ.ПолучитьТелоКакСтроку());
								 КонецПопытки;
								
								  
							Конеццикла;
						КонецциклА;
						
					Иначе
//						Состояние("Получение "+Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
//						 0);
					
						НомерПП=0;
						Для Каждого Стр Из Объект.Товары Цикл
							Стр.СтатусСтроки="";
							Стр.ОшибкаПолучения="";
							Если Стр.КоличествоКМ=Стр.КоличествоПолучено Тогда
								Продолжить;
							КонецЕслИ;
						НомерПП=НомерПП+1;
					//	Если ОБъект.СУЗОбувь Тогда
							
	//HTTPЗапрос = Новый HTTPЗапрос("api/v2/tires/codes?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
//	HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
//								Формат(Стр.КоличествоКМ-Стр.КоличествоПолучено,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								Получить=Стр.КоличествоКМ-Стр.КоличествоПолучено;
								Объем="";
								Если ЗначениеЗАполненО(Стр.ОБъем) тогда
									Объем=Стр.Объем*Получить/Стр.КоличествоКМ;
									Объем=Формат(Объем,"ЧГ=");
								КонецЕсли;
								
								HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/orders/"+
								Объект._Order_ID+"/codes/"+ПолучитьGTIN(Стр.GTIN)+"/print/CSV?expirationDate="+Формат(Стр.Годендо,"ДФ=""ггММдд""")+
								"&accompanyingDocument="+Стр.НомерВСД+Объем+"&quantity="+Формат(Получить,"ЧГ="));
								
								HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);


					//	Иначе
	//HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
//
//								Формат(Стр.КоличествоКМ,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
//								КонецЕслИ;
													HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
						HTTPЗапрос.УстановитьТелоИзСтроки("{}");
						
						Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
						ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
						//Если Ответ.КодСостояния=200 Тогда
								HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/download?filename="+
								СтрЗаменить(СтрЗаменить(текстДокумента,"""",""),"%2F","/"));
								
								HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);


					//	Иначе
	//HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
//
//								Формат(Стр.КоличествоКМ,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
//								КонецЕслИ;


	//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
						//HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
						ТекстДокумента=СтрЗаменить(ТекстДокумента,Символ(29),"<GS>");
						
						Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
							ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП);
						КонецЕсли;
						
						Попытка
							//ЧтениеJSON = Новый ЧтениеJSON;
							//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
							Если Ответ.КодСостояния=200 Тогда
								
								
								НеобходимоВсеНаСервереДелать_МОЛОКО(ТекстДокумента,Стр.ID,Стр.ПоследнийБлок);
								
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
								Стр.КоличествоПолучено=Стр.КоличествоКМ;
								
								
								//Если Объект.СУЗОбувь=Истина Тогда
								//	HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)
								//	+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								//	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								//	HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								//Иначе
								//	HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)
								//	+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								//	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
							//		HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
							//	КонецЕслИ;
								Попытка
									Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
								Исключение
							КонецПопытки;
								
								
								
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
//												 Сообщить("Получено "+Формат(Объект.Товары.Итог("КоличествоПолучено"),"ЧГ=")+" из "+
//												 Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
//												 Окр(Объект.Товары.Итог("КоличествоПолучено")*100/Объект.Товары.Итог("КоличествоКМ")));
									
								//НайтиВсеOrderlineПоНомеркуКМ();
							ИначеЕсли Ответ.КодСостояния=404 Тогда
								
								
								
								
								
								Сообщить("Не обработано в ЦРПТ");
							Иначе
								стр.СтатусСтроки="Отказ";
								NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
						
								Если NNN.success=Ложь Тогда
								globalErrors="";
								Для Каждого Стр_1 Из NNN.globalErrors Цикл
									globalErrors=globalErrors+Стр_1+"
									|"
								Конеццикла;
								Стр.ОшибкаПолучения=globalErrors;
								Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: EXHAUSTED")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ;
											Стр.СтатусСтроки="Получено";
										ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								
											
										Конецесли;
										Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: PENDING")>0 Тогда
											Стр.СтатусСтроки="Обработка в ЦРПТ";
											Возврат;;
										Конецесли;
										Если Найти(globalErrors,"Not enough balance")>0 Тогда
											Сообщить("Необходимо пополнить баланс в ЦРПТ");
										Конецесли;

								Сообщить("Не удалось обработать документ: "+globalErrors);
								Если Найти(globalErrors,"Требуемое количество ")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=Число(СокрЛП(Сред(globalErrors,Найти(globalErrors,"осталось использовать ")+22)));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
										 									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше,чем размер буфера")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше, чем размер буфера")>0 Тогда
			
						НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								ИначеЕсли Найти(globalErrors,"DELETE")>0 Тогда
									Стр.КоличествоПолучено=Стр.КоличествоКМ ; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
									
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕСЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Табак")
			ИЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак")
			Тогда
								 	Сообщить("Возможно указано заказанное количество меньше 2 штук!!");
								Конецесли;
							ИначеЕсли NNN.success=Истина Тогда
								
								
							КонецЕсли;
		
	КонецЕсли;
							
			Если Ответ.КодСостояния<>200 Тогда
//		HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/status?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+
//		"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								Объем="";
								Если Не ЗначениеЗАполненО(Стр.ОБъем) тогда
									Объем=Стр.Объем*Получить/Стр.КоличествоКМ;
									Объем=Формат(Объем,"ЧГ=");
								КонецЕсли;
								
								HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/orders/"+
								Объект._Order_ID+"/codes/"+ПолучитьGTIN(Стр.GTIN)+"/print/CSV?expirationDate="+Формат(Стр.Годендо,"ДФ=""ггММдд""")+
								"&stickerId=12&accompanyingDocument="+Стр.НомерВСД+Объем+"&quantity="+Формат(Получить,"ЧГ="));
								
								HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);


			 		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
						Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
						ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
						
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Объект.Ссылка,ТекстДокумента);
				
			Конецесли;
						
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
				NNN.Свойство("bufferStatus",Стр.СтатусСтроки);
				NNN.Свойство("rejectionReason",Стр.ОшибкаПолучения);
				
				
			КонецЕслИ;
	
	
						Исключение
							
							Сообщить("Ошибка "+Ответ.ПолучитьТелоКакСтроку());
						КонецПопытки;
						
					КонецЦикла;
				КонецЕсли;
				
			
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
			
			 ЭтаФорма.Прочитать();  
		
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НасервереПолучаемВФоне(ТокенСУЗ,Пользователь,Ссылка)
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ссылка);
	МассивПараметров.Добавить(Пользователь);
	МассивПараметров.Добавить(ТокенСУЗ);
	
	Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьКМИзAPIЗаказНаКМНаСервере", МассивПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКМИзAPI_Шины(УжеПолучили=Ложь)
	//Если Не ЗначениеЗаполнено(Объект._Order_ID) Тогда
	//	Возврат;                       
	//КонецЕслИ;
	
	
	Объект.ОшибкиПолучения.Очистить();
	
	
	
	
	
	
	
	ПолучитьСтатусыСтрочек("");
	

		
	ЭтаФорма.Модифицированность=Истина;
	
	//Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	//Текст=Форм.Пользователь;
//	Форм.Пользователь=Объект.ТекущийПользователь;
//	ПараметрыДлякилента=Неопределено;
//	Если Форм.НаКлиенте(ПараметрыДлякилента) Тогда
//		Форм.Пользователь=Текст;
Пользователь=Неопределено;
			ПараметрыДлякилента=ПолучитьИзПользователя(Пользователь);
		Если Не ЗначениеЗаполнено(ПараметрыДлякилента) Тогда
			Возврат;
		КонецЕслИ;
		
		
		
	ТокенСУЗ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(ПараметрыДлякилента);
				АдресРаздробить=ПараметрыДлякилента.АдресСУЗ;
				Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
				Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
				Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
				Порт=Сред(Порт,Найти(Порт,":")+1);
				ТекстСайта=Адрес;
			
				Попытка
					Порт=число(Порт);
					ТекстСайта=ТекстСайта+":"+Формат(Порт,"ЧГ=");
				Исключение
					Порт=Неопределено;
				КонецПопытки;
				
				
				
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			ПоказатьПредупреждение(,"В пользователе не заполнен адрес СУЗ");
			Возврат;
			
		КонецЕсли;
		
	//	ТекстСохранить1
		
	Если Найти(АдресРаздробить,"https")=1 Тогда
		ТекстСайта="https://"+ТекстСайта;
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				ТекстСайта="https://"+ТекстСайта;
				Защищ=Неопределено;
			КонецЕсли;
			
			ТекстСайта="GET "+ТекстСайта+"\";
			ТекстСайта_Закрытие="POST "+ТекстСайта+"\";
			Если ПолучатьКМВФоне=Истина Тогда
				НасервереПолучаемВФоне(ТокенСУЗ,Пользователь,Объект.Ссылка);
				Возврат;
			Конецесли;
			
					Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
					
						HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,,Защищ);
					Иначе
						HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,,Защищ);
					КонецЕсли;
					
					КоличествоОгранчений=0;
					ВРегистре=Вргеистре(КоличествоОгранчений);
					
					
					Сч=0;
					ТекстСохранить="";
					ОтветыПоЗаказу="";
					
					ТекстЗакрытьБуфер="";
					ОтветЗакрытиеБуфера="";
					
					
					Если ВРегистре ИЛИ Объект.Товары.Итог("КоличествоКМ")>КоличествоОгранчений Тогда
						 Состояние("Получение "+Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
						 0);
						
						НомерПП=0;
						Для Каждого Стр Из Объект.Товары Цикл
							Если Стр.СтатусСтроки="PENDING" 
								ИЛИ Не ЗначениеЗАполнено(Стр.СтатусСтроки)
								Тогда
								Продолжить;
							Конецесли;
							
							
							
							НомерПП=НомерПП+1;
							Стр.СтатусСтроки="";
							Стр.ОшибкаПолучения="";
							//Если НЕ ЗначениеЗаполнено(Стр.ИДСУЗ)  Тогда
							//	Продолжить;
							//КонецЕсли;
							Пока Стр.КоличествоКМ-Стр.КоличествоПолучено>0 Цикл
								
								Получить=Мин(Стр.КоличествоКМ-Стр.КоличествоПолучено,10000);
								
								Сч=Сч+1;
								ТекстСохранить=ТекстСохранить+Символы.ПС+" запрос № "+Формат(Сч,"ЧГ=");
								ОтветыПоЗаказу=ОтветыПоЗаказу+Символы.ПС+" запрос № "+Формат(Сч,"ЧГ=");
								
								Если РаботатьНаV1 Тогда
						HTTPЗапрос = Новый HTTPЗапрос("api/codes?orderId="+Объект._Order_ID+"&orderLineId="+СокрЛП(Стр.ID)+"&quantity="+Формат(Получить,"ЧГ="));
								ТекстСохранить=ТекстСохранить+Символы.ПС+ТекстСайта+"api/codes?orderId="+Объект._Order_ID+"&orderLineId="+СокрЛП(Стр.ID)+"&quantity="+Формат(Получить,"ЧГ=");
								Иначе
								
							//Если ОБъект.СУЗОбувь Тогда
								HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
								Формат(Получить,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								ТекстСохранить=ТекстСохранить+Символы.ПС+ТекстСайта+"api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
								Формат(Получить,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ;
								Конецесли;
							//Иначе
							//	HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
							//	Формат(Получить,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								
							//КонецЕслИ;
							ТекстСохранить=ТекстСохранить+Символы.ПС+"Заголовки";
							ТекстСохранить=ТекстСохранить+Символы.ПС+"Content-Type:application/x-www-form-urlencoded;charset=UTF-8";
							ТекстСохранить=ТекстСохранить+Символы.ПС+"clientToken:"+ТокенСУЗ;
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
								Попытка
									Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
								Исключение
								конецПопытки;
								ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
								ОтветыПоЗаказу=ОтветыПоЗаказу+Символы.ПС+ТекстДокумента;
								
								
								
								Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
									ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП);
								КонецЕсли;
								//Стр.КоличествоПолучено=Получить;
								 Попытка
									//ЧтениеJSON = Новый ЧтениеJSON;
									//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
									Если Ответ.КодСостояния=200 Тогда
										НаСервереСДобавлениемРегистра_Шины(ТекстДокумента,Стр.ID,Стр.ПоследнийБлок);
										
								//
						                    		 сТР.ОшибкаПолучения="В обработке";
													 
													Стр.СтатусСтроки="В обработке";
											

									   	// ЭтаФорма.Прочитать();
									        	 Стр.КоличествоПолучено=Стр.КоличествоПолучено+Получить; 
///												 Стр.ПоследнийБлок=
												 Если Стр.КоличествоПолучено=Стр.КОличествоКМ Тогда
													 сТР.ОшибкаПолучения="Получено";
													 
													Стр.СтатусСтроки="Получено";
													
										//	КонецЕсли;		
						//Если ОБъект.СУЗОбувь Тогда
								Если РаботатьНаV1 ТОгда
//						HTTPЗапрос = Новый HTTPЗапрос("api/codes?orderId="+Объект._Order_ID+"&orderLineId="+СокрЛП(Стр.ID)+"&quantity="+Формат(Получить,"ЧГ="));
Иначе						
								ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"Запрос № "+Формат(Сч,"ЧГ=");
								ОтветЗакрытиеБуфера=ОтветЗакрытиеБуфера+Символы.ПС+"Запрос № "+Формат(Сч,"ЧГ=");
								
								ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+ТекстСайта_Закрытие+"api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)
								+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ;
								HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)
								+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
							КонецЕсли;
						//	Иначе
						//		HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"buffer/close?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)
						//		+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
						//		
								
						//	КонецЕсли;
						
								ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"Заголовки";
								ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"Content-Type:application/x-www-form-urlencoded;charset=UTF-8";
								ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"clientToken:"+ТокенСУЗ;
								
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
								Попытка
									Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
									ОтветЗакрытиеБуфера=ОтветЗакрытиеБуфера+Символы.ПС+Ответ.ПолучитьТелоКакСтроку();
								Исключение
								КонецПопытки;
								
								
								    КонецЕсли;
																						 
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
												 Состояние("Получено "+Формат(Объект.Товары.Итог("КоличествоПолучено"),"ЧГ=")+" из "+
												 Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
												 Окр(Объект.Товары.Итог("КоличествоПолучено")*100/Объект.Товары.Итог("КоличествоКМ")));
										//НайтиВсеOrderlineПоНомеркуКМ();
									Иначе
										
										
										
										
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
										
										
										Если NNN["success"]=Ложь Тогда
										globalErrors="";
										Для Каждого Стр_1 Из NNN["globalErrors"] Цикл
								//Если ТипЗнч(Стр_1)=Тип("Структура") ТОгда
								
											добав_1=Объект.ОшибкиПолучения.Добавить();
											добав_1.Ошибка=Стр_1["error"];
											добав_1.КодОшибки=Стр_1["errorCode"];
											globalErrors=globalErrors+добав_1.Ошибка;
											
											Если Стр_1["errorCode"]=1160 
												ИЛИ Стр_1["errorCode"]=1100 
												ИЛИ Стр_1["errorCode"]=1090 
												Тогда
													ОчиститьПодключениюКСУЗНаСервере(ПараметрыДлякилента.ТекущийПользователь);						
													ОчиститьДинамическийТокен(ПараметрыДлякилента.ТекущийПользователь,ПараметрыДлякилента.Thumbprint_1);
													
													
													Если УжеПолучили=Ложь Тогда
														ПолучитьКМИзAPI_Шины(Истина);
														Возврат;
													Иначе
														Возврат
													Конецесли;
												ИначеЕсли Стр_1["errorCode"]=3390
													И Найти(Стр_1["error"],"PENDING")=0
													Тогда
													/////ЗАКРЫВАЕМ ЗАКАЗ

													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"Запрос № "+Формат(Сч,"ЧГ=");
													ОтветЗакрытиеБуфера=ОтветЗакрытиеБуфера+Символы.ПС+"Запрос № "+Формат(Сч,"ЧГ=");
													
													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+ТекстСайта_Закрытие+"api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)
													+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ;
													
													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"Заголовки";
													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"Content-Type:application/x-www-form-urlencoded;charset=UTF-8";
													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"clientToken:"+ТокенСУЗ;
													
													
													HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)
													+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
													

													HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
													HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
													Попытка
														Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
														ОтветЗакрытиеБуфера=ОтветЗакрытиеБуфера+Символы.ПС+Ответ.ПолучитьТелоКакСтроку();
							
													Исключение
													КонецПопытки;
													   												
											КонецеслИ;
										Конеццикла;
										//Для Каждого Стр_111 Из Стр_1 Цикл
										//	globalErrors=globalErrors+Стр_111.Значение+"
										//	|"
										//Конеццикла;
										
								//	Иначе
								//		globalErrors=globalErrors+Стр_1+"
								//		|"
								//	Конецесли;										Конеццикла;
										стр.СтатусСтроки="Отказ";
							
										Стр.ОшибкаПолучения=globalErrors;
										Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: EXHAUSTED")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ;
													Стр.СтатусСтроки="Получено";
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
													
										//	КонецЕсли;
						//Если ОБъект.СУЗОбувь Тогда
						
						
								Если РаботатьНаV1 Тогда
								Иначе						
									
									
								HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)
								+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
							КонецЕсли;
							
													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"Запрос № "+Формат(Сч,"ЧГ=");
													ОтветЗакрытиеБуфера=ОтветЗакрытиеБуфера+Символы.ПС+"Запрос № "+Формат(Сч,"ЧГ=");
													
													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+ТекстСайта_Закрытие+"api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)
													+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ;
													
													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"Заголовки";
													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"Content-Type:application/x-www-form-urlencoded;charset=UTF-8";
													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"clientToken:"+ТокенСУЗ;

						//	Иначе
						//		HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"buffer/close?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)
						//		+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								
								
						//	КонецЕслИ;
								
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
								Попытка
									Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
														ОтветЗакрытиеБуфера=ОтветЗакрытиеБуфера+Символы.ПС+Ответ.ПолучитьТелоКакСтроку();
								Исключение
									Продолжить;
							КонецПопытки;
								
																						 
											
										Конецесли;
										
										Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: PENDING")>0 Тогда
											Продолжить;;
										Конецесли;
										
										
										Если Найти(globalErrors,"Not enough balance")>0 Тогда
											Сообщить("Необходимо пополнить баланс в ЦРПТ");
										Конецесли;
										Если Найти(globalErrors,"Not enough balance")>0 Тогда
											Сообщить("Необходимо пополнить баланс в ЦРПТ");
										Конецесли;
	
										Сообщить("Не удалось обработать документ: "+globalErrors);
										
										Если Найти(globalErrors,"Quantity must be less or equals buffer size")>0 Тогда
											
											Дальше=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Buffer size: ")+13));
											ЧислоОсталось=Число(СокрЛП(Сред(Дальше,1,Найти(Дальше,".")-1)));
											Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
												 НеНадоОбновлятьСтатус=Истина;
											ИначеЕсли Найти(globalErrors,"Требуемое количество ")>0 Тогда
											ЧислоОсталось=Число(СокрЛП(Сред(globalErrors,Найти(globalErrors,"осталось использовать ")+22)));
											Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
												 НеНадоОбновлятьСтатус=Истина;
								ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше,чем размер буфера")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше, чем размер буфера")>0 Тогда
			
						НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								ИначеЕсли Найти(globalErrors,"DELETE")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ ; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
											
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕСЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Табак")
			ИЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак")
			Тогда
								 	Сообщить("Возможно указано заказанное количество меньше 2 штук!!");
										Конецесли;
										       Прервать;
									ИначеЕсли NNN.success=Истина Тогда
										   Прервать;
										
									   КонецЕсли;
									   
									    прервать;
									   
									  КонецЕсли; 
								Исключение
									    прервать;
									
									Сообщить("Ошибка "+Ответ.ПолучитьТелоКакСтроку());
								 КонецПопытки;
								
								  
							Конеццикла;
						КонецциклА;
						
					Иначе
						Состояние("Получение "+Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
						 0);
					
						НомерПП=0;
						Для Каждого Стр Из Объект.Товары Цикл
							Стр.СтатусСтроки="";
							Стр.ОшибкаПолучения="";
							Если Стр.КоличествоКМ=Стр.КоличествоПолучено Тогда
								Продолжить;
							КонецЕслИ;
							
								Сч=Сч+1;
								ТекстСохранить=ТекстСохранить+Символы.ПС+" запрос № "+Формат(Сч,"ЧГ=");
								ОтветыПоЗаказу=ОтветыПоЗаказу+Символы.ПС+" запрос № "+Формат(Сч,"ЧГ=");
							
						НомерПП=НомерПП+1;
					//	Если ОБъект.СУЗОбувь Тогда
							
	//HTTPЗапрос = Новый HTTPЗапрос("api/v2/tires/codes?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
								Если РаботатьНаV1 Тогда
						HTTPЗапрос = Новый HTTPЗапрос("api/codes?orderId="+Объект._Order_ID+"&orderLineId="+СокрЛП(Стр.ID)+"&quantity="+Формат(Получить,"ЧГ="));
						ТекстСохранить=ТекстСохранить+Символы.ПС+ТекстСайта+"api/codes?orderId="+Объект._Order_ID+"&orderLineId="+СокрЛП(Стр.ID)+"&quantity="+Формат(Получить,"ЧГ=");
					Иначе
	HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
								Формат(Стр.КоличествоКМ-Стр.КоличествоПолучено,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
						ТекстСохранить=ТекстСохранить+Символы.ПС+ТекстСайта+"api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
								Формат(Стр.КоличествоКМ-Стр.КоличествоПолучено,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ;
КонецЕсли;					
					//	Иначе
	//HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
//
//								Формат(Стр.КоличествоКМ,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
//								КонецЕслИ;

							ТекстСохранить=ТекстСохранить+Символы.ПС+"Заголовки";
							ТекстСохранить=ТекстСохранить+Символы.ПС+"Content-Type:application/x-www-form-urlencoded;charset=UTF-8";
							ТекстСохранить=ТекстСохранить+Символы.ПС+"clientToken:"+ТокенСУЗ;

									HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
						Попытка
							Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						Исключение
							Продолжить;
							
						КонецПопытки;
						ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
						ОтветыПоЗаказу=ОтветыПоЗаказу+Символы.ПС+ТекстДокумента;
						
						Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
							ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП);
						КонецЕсли;
						
						Попытка
							//ЧтениеJSON = Новый ЧтениеJSON;
							//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
							Если Ответ.КодСостояния=200 Тогда
								НеобходимоВсеНаСервереДелать_Шины(ТекстДокумента,Стр.ID,Стр.ПоследнийБлок);
								
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
								Стр.КоличествоПолучено=Стр.КоличествоКМ;
								
								
								//Если Объект.СУЗОбувь=Истина Тогда
								
								   													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"Запрос № "+Формат(Сч,"ЧГ=");
													ОтветЗакрытиеБуфера=ОтветЗакрытиеБуфера+Символы.ПС+"Запрос № "+Формат(Сч,"ЧГ=");
													
													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+ТекстСайта_Закрытие+"api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)
													+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ;
													
													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"Заголовки";
													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"Content-Type:application/x-www-form-urlencoded;charset=UTF-8";
													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"clientToken:"+ТокенСУЗ;

								
									HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)
									+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
									HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
									HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
								//Иначе
								//	HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)
								//	+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								//	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
							//		HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
							//	КонецЕслИ;
								Попытка
									Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
														ОтветЗакрытиеБуфера=ОтветЗакрытиеБуфера+Символы.ПС+Ответ.ПолучитьТелоКакСтроку();
								Исключение
									Продолжить;
							КонецПопытки;
								
								
								
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
												 Состояние("Получено "+Формат(Объект.Товары.Итог("КоличествоПолучено"),"ЧГ=")+" из "+
												 Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
												 Окр(Объект.Товары.Итог("КоличествоПолучено")*100/Объект.Товары.Итог("КоличествоКМ")));
									
								//НайтиВсеOrderlineПоНомеркуКМ();
							Иначе
								
									
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
										
										
								Если NNN["success"]=Ложь Тогда
										globalErrors="";
										Для Каждого Стр_1 Из NNN["globalErrors"] Цикл
								//Если ТипЗнч(Стр_1)=Тип("Структура") ТОгда
								
											добав_1=Объект.ОшибкиПолучения.Добавить();
											добав_1.Ошибка=Стр_1["error"];
											добав_1.КодОшибки=Стр_1["errorCode"];
											globalErrors=globalErrors+добав_1.Ошибка;
											
											Если Стр_1["errorCode"]=1160 
												ИЛИ Стр_1["errorCode"]=1100 
												ИЛИ Стр_1["errorCode"]=1090 
												
												Тогда
													ОчиститьПодключениюКСУЗНаСервере(ПараметрыДлякилента.ТекущийПользователь);						
													ОчиститьДинамическийТокен(ПараметрыДлякилента.ТекущийПользователь,ПараметрыДлякилента.Thumbprint_1);
													
													
													Если УжеПолучили=Ложь Тогда
														ПолучитьКМИзAPI_Шины(Истина);
														Возврат;
													Иначе
														Возврат
													Конецесли;
												ИначеЕсли Стр_1["errorCode"]=3390
													И Найти(Стр_1["error"],"PENDING")=0
													Тогда
													/////ЗАКРЫВАЕМ ЗАКАЗ
								   													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"Запрос № "+Формат(Сч,"ЧГ=");
													ОтветЗакрытиеБуфера=ОтветЗакрытиеБуфера+Символы.ПС+"Запрос № "+Формат(Сч,"ЧГ=");
													
													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+ТекстСайта_Закрытие+"api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)
													+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ;
													
													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"Заголовки";
													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"Content-Type:application/x-www-form-urlencoded;charset=UTF-8";
													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"clientToken:"+ТокенСУЗ;

								

													HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)
													+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
													HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
													HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
													Попытка
														Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
														ОтветЗакрытиеБуфера=ОтветЗакрытиеБуфера+Символы.ПС+Ответ.ПолучитьТелоКакСтроку();
													Исключение
													КонецПопытки;
													   			
												
											КонецеслИ;
										Конеццикла;

								
								стр.СтатусСтроки="Отказ";
								
								Стр.ОшибкаПолучения=globalErrors;
								Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: EXHAUSTED")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ;
											Стр.СтатусСтроки="Получено";
											
											
																		   													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"Запрос № "+Формат(Сч,"ЧГ=");
													ОтветЗакрытиеБуфера=ОтветЗакрытиеБуфера+Символы.ПС+"Запрос № "+Формат(Сч,"ЧГ=");
													
													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+ТекстСайта_Закрытие+"api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)
													+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ;
													
													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"Заголовки";
													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"Content-Type:application/x-www-form-urlencoded;charset=UTF-8";
													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"clientToken:"+ТокенСУЗ;
	
											
								HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)
								+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
								Попытка
									Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
						ОтветЗакрытиеБуфера=ОтветЗакрытиеБуфера+Символы.ПС+Ответ.ПолучитьТелоКакСтроку();
			
		Исключение
							КонецПопытки;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								
											
										Конецесли;
										Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: PENDING")>0 Тогда
											Стр.СтатусСтроки="Обработка в ЦРПТ";
											Продолжить;;
										Конецесли;
										Если Найти(globalErrors,"Not enough balance")>0 Тогда
											Сообщить("Необходимо пополнить баланс в ЦРПТ");
										Конецесли;

								Сообщить("Не удалось обработать документ: "+globalErrors);
								Если Найти(globalErrors,"Требуемое количество ")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=Число(СокрЛП(Сред(globalErrors,Найти(globalErrors,"осталось использовать ")+22)));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
										 									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше,чем размер буфера")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше, чем размер буфера")>0 Тогда
			
						НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								ИначеЕсли Найти(globalErrors,"DELETE")>0 Тогда
									Стр.КоличествоПолучено=Стр.КоличествоКМ ; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
									
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕСЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Табак")
			ИЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак")
			Тогда
								 	Сообщить("Возможно указано заказанное количество меньше 2 штук!!");
								Конецесли;
							ИначеЕсли NNN.success=Истина Тогда
								
								
							КонецЕсли;
		
	КонецЕсли;
							
			Если Ответ.КодСостояния<>200 Тогда
		HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/status?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+
		"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
			 HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
						
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Объект.Ссылка,ТекстДокумента);
				
			Конецесли;
						
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
				NNN.Свойство("bufferStatus",Стр.СтатусСтроки);
				NNN.Свойство("rejectionReason",Стр.ОшибкаПолучения);
				
				
			КонецЕслИ;
	
	
						Исключение
							
							Сообщить("Ошибка "+Ответ.ПолучитьТелоКакСтроку());
						КонецПопытки;
						
					КонецЦикла;
				КонецЕсли;
				
				
				
				
				
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда

				
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапишемВРЕГИСТР_ОтправленныеПолученные_ХамелеонЦРПТ(Объект.Ссылка,ТекстСохранить,"Запрос на получение КМ по заказу");
				
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапишемВРЕГИСТР_ОтправленныеПолученные_ХамелеонЦРПТ(Объект.Ссылка,ОтветыПоЗаказу,"Ответ на запрос на получение КМ по заказу");

				
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапишемВРЕГИСТР_ОтправленныеПолученные_ХамелеонЦРПТ(Объект.Ссылка,ТекстЗакрытьБуфер,"Закрыть заказ на КМ");
				
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапишемВРЕГИСТР_ОтправленныеПолученные_ХамелеонЦРПТ(Объект.Ссылка,ОтветЗакрытиеБуфера,"Ответ на закрытие заказ на КМ");
				
			Конецесли;	
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
			
			 ЭтаФорма.Прочитать();  
		
	
КонецПроцедуры




&НаКлиенте
Процедура ПолучитьКМИзAPI_Молоко_CSV()
	// Вставить содержимое обработчика.
	
	
   
	
    
	Thumbprint_1=ПолучитьИзПользователя();	
		    ПараметрыДлякилента=Thumbprint_1;
			
			
		АдресРаздробить=ПараметрыДлякилента.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			ПоказатьПредупреждение(,"В пользователе не заполнен адрес СУЗ");
			Возврат;
			
		КонецЕсли;
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
			
			СРегистра="";
			СерийныйНомер="";
			
		Куки=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитькукиВСУЗ(Thumbprint_1,,СРегистра,СерийныйНомер);
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;

			
			
			 	
						
				КоличествоОгранчений=0;
				ВРегистре=Вргеистре(КоличествоОгранчений);
					Если ВРегистре ИЛИ Объект.Товары.Итог("КоличествоКМ")>КоличествоОгранчений Тогда
						 Состояние("Получение "+Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
						 0);
						
						НомерПП=0;
						Для Каждого Стр Из Объект.Товары Цикл
							НомерПП=НомерПП+1;
							Стр.СтатусСтроки="";
							Стр.ОшибкаПолучения="";
							//Если НЕ ЗначениеЗаполнено(Стр.ИДСУЗ)  Тогда
							//	Продолжить;
							//КонецЕсли;
							Пока Стр.КоличествоКМ-Стр.КоличествоПолучено>0 Цикл
								
								Получить=Мин(Стр.КоличествоКМ-Стр.КоличествоПолучено,10000);
								
								
								
								
								
								
								//HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
								//Формат(Получить,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								
								Объем="";
								Если Не ЗначениеЗАполненО(Стр.ОБъем) тогда
									Объем=Стр.Объем*Получить/Стр.КоличествоКМ;
									Объем=Формат(Объем,"ЧГ=");
								КонецЕсли;
								
								HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/orders/"+
								Объект._Order_ID+"/codes/"+ПолучитьGTIN(Стр.GTIN)+"/print/CSV?expirationDate="+Формат(Стр.Годендо,"ДФ=""ггММдд""")+
								"&stickerId=12&accompanyingDocument="+Стр.НомерВСД+Объем+"&quantity="+Формат(Получить,"ЧГ="));
								
								HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
								
								//КонецЕслИ;
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
								
								ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
							//	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
							//		ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП);
							//	КонецЕсли;
								
								HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/download?filename="+
								СтрЗаменить(СтрЗаменить(текстДокумента,"""",""),"%2F","/"));
								
								HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);


					//	Иначе
	//HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
//
//								Формат(Стр.КоличествоКМ,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
//								КонецЕслИ;


	//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
						//HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
						ТекстДокумента=СтрЗаменить(ТекстДокумента,Символ(29),"<GS>");
								Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
									ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП);
								КонецЕсли;
								
								//Стр.КоличествоПолучено=Получить;
								 Попытка
									//ЧтениеJSON = Новый ЧтениеJSON;
									//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
									Если Ответ.КодСостояния=200 Тогда
										//НаСервереСДобавлениемРегистра_Шины(ТекстДокумента,Стр.ID,Стр.ПоследнийБлок);
										НеобходимоВсеНаСервереДелать_МОЛОКО(ТекстДокумента,Стр.ID,Стр.ПоследнийБлок);
										
								//
						                    		 сТР.ОшибкаПолучения="В обработке";
													 
													Стр.СтатусСтроки="В обработке";
											

									   	// ЭтаФорма.Прочитать();
									        	 Стр.КоличествоПолучено=Стр.КоличествоПолучено+Получить; 
///												 Стр.ПоследнийБлок=
												 Если Стр.КоличествоПолучено=Стр.КОличествоКМ Тогда
													 сТР.ОшибкаПолучения="Получено";
													 
													Стр.СтатусСтроки="Получено";
													
										//	КонецЕсли;		
						//Если ОБъект.СУЗОбувь Тогда
								//HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)
								//+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
						//	Иначе
						//		HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"buffer/close?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)
						//		+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
						//		
								
						//	КонецЕсли;
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								Попытка
									Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
								Исключение
							КонецПопытки;
								    КонецЕсли;
																						 
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
												 Состояние("Получено "+Формат(Объект.Товары.Итог("КоличествоПолучено"),"ЧГ=")+" из "+
												 Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
												 Окр(Объект.Товары.Итог("КоличествоПолучено")*100/Объект.Товары.Итог("КоличествоКМ")));
										//НайтиВсеOrderlineПоНомеркуКМ();
									Иначе
										
										
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
										
										
										Если NNN.success=Ложь Тогда
										globalErrors="";
										Для Каждого Стр_1 Из NNN.globalErrors Цикл
											globalErrors=globalErrors+Стр_1+"
											|"
										Конеццикла;
										Стр.ОшибкаПолучения=globalErrors;
										Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: EXHAUSTED")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ;
													Стр.СтатусСтроки="Получено";
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
													
										//	КонецЕсли;
						//Если ОБъект.СУЗОбувь Тогда
						
						
											
										Конецесли;
										
										Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: PENDING")>0 Тогда
											Возврат;;
										Конецесли;
										
										
										Если Найти(globalErrors,"Not enough balance")>0 Тогда
											Сообщить("Необходимо пополнить баланс в ЦРПТ");
										Конецесли;
										Если Найти(globalErrors,"Not enough balance")>0 Тогда
											Сообщить("Необходимо пополнить баланс в ЦРПТ");
										Конецесли;
	
										Сообщить("Не удалось обработать документ: "+globalErrors);
										
										Если Найти(globalErrors,"Quantity must be less or equals buffer size")>0 Тогда
											
											Дальше=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Buffer size: ")+13));
											ЧислоОсталось=Число(СокрЛП(Сред(Дальше,1,Найти(Дальше,".")-1)));
											Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
												 НеНадоОбновлятьСтатус=Истина;
											ИначеЕсли Найти(globalErrors,"Требуемое количество ")>0 Тогда
											ЧислоОсталось=Число(СокрЛП(Сред(globalErrors,Найти(globalErrors,"осталось использовать ")+22)));
											Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
												 НеНадоОбновлятьСтатус=Истина;
								ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше,чем размер буфера")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше, чем размер буфера")>0 Тогда
			
						НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								ИначеЕсли Найти(globalErrors,"DELETE")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ ; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
											
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕСЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Табак")
			ИЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак") Тогда
								 	Сообщить("Возможно указано заказанное количество меньше 2 штук!!");
										Конецесли;
										       Прервать;
									ИначеЕсли NNN.success=Истина Тогда
										   Прервать;
										
									   КонецЕсли;
									   
									    прервать;
									   
									  КонецЕсли; 
								Исключение
									    прервать;
									
									Сообщить("Ошибка "+Ответ.ПолучитьТелоКакСтроку());
								 КонецПопытки;
								
								  
							Конеццикла;
						КонецциклА;
						
					Иначе
						Состояние("Получение "+Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
						 0);
					
						НомерПП=0;
						Для Каждого Стр Из Объект.Товары Цикл
							Стр.СтатусСтроки="";
							Стр.ОшибкаПолучения="";
							Если Стр.КоличествоКМ=Стр.КоличествоПолучено Тогда
								Продолжить;
							КонецЕслИ;
						НомерПП=НомерПП+1;
					//	Если ОБъект.СУЗОбувь Тогда
							
	//HTTPЗапрос = Новый HTTPЗапрос("api/v2/tires/codes?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
//	HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
//								Формат(Стр.КоличествоКМ-Стр.КоличествоПолучено,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								Получить=Стр.КоличествоКМ-Стр.КоличествоПолучено;
								Объем="";
								Если ЗначениеЗАполненО(Стр.ОБъем) тогда
									Объем=Стр.Объем*Получить/Стр.КоличествоКМ;
									Объем=Формат(Объем,"ЧГ=");
								КонецЕсли;
								
								HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/orders/"+
								Объект._Order_ID+"/codes/"+ПолучитьGTIN(Стр.GTIN)+"/print/CSV?expirationDate="+Формат(Стр.Годендо,"ДФ=""ггММдд""")+
								"&accompanyingDocument="+Стр.НомерВСД+Объем+"&quantity="+Формат(Получить,"ЧГ="));
								
								HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);


					//	Иначе
	//HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
//
//								Формат(Стр.КоличествоКМ,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
//								КонецЕслИ;
													HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
						HTTPЗапрос.УстановитьТелоИзСтроки("{}");
						
						Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
						ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
						//Если Ответ.КодСостояния=200 Тогда
								HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/download?filename="+
								СтрЗаменить(СтрЗаменить(текстДокумента,"""",""),"%2F","/"));
								
								HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);


					//	Иначе
	//HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
//
//								Формат(Стр.КоличествоКМ,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
//								КонецЕслИ;


	//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
						//HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
						ТекстДокумента=СтрЗаменить(ТекстДокумента,Символ(29),"<GS>");
						
						Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
							ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП);
						КонецЕсли;
						
						Попытка
							//ЧтениеJSON = Новый ЧтениеJSON;
							//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
							Если Ответ.КодСостояния=200 Тогда
								
								
								НеобходимоВсеНаСервереДелать_МОЛОКО(ТекстДокумента,Стр.ID,Стр.ПоследнийБлок);
								
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
								Стр.КоличествоПолучено=Стр.КоличествоКМ;
								
								
								//Если Объект.СУЗОбувь=Истина Тогда
								//	HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)
								//	+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								//	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								//	HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								//Иначе
								//	HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)
								//	+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								//	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
							//		HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
							//	КонецЕслИ;
								Попытка
									Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
								Исключение
							КонецПопытки;
								
								
								
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
												 Состояние("Получено "+Формат(Объект.Товары.Итог("КоличествоПолучено"),"ЧГ=")+" из "+
												 Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
												 Окр(Объект.Товары.Итог("КоличествоПолучено")*100/Объект.Товары.Итог("КоличествоКМ")));
									
								//НайтиВсеOrderlineПоНомеркуКМ();
							ИначеЕсли Ответ.КодСостояния=404 Тогда
								
								
								
								
								
								Сообщить("Не обработано в ЦРПТ");
							Иначе
								стр.СтатусСтроки="Отказ";
								NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
						
								Если NNN.success=Ложь Тогда
								globalErrors="";
								Для Каждого Стр_1 Из NNN.globalErrors Цикл
									globalErrors=globalErrors+Стр_1+"
									|"
								Конеццикла;
								Стр.ОшибкаПолучения=globalErrors;
								Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: EXHAUSTED")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ;
											Стр.СтатусСтроки="Получено";
										ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								
											
										Конецесли;
										Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: PENDING")>0 Тогда
											Стр.СтатусСтроки="Обработка в ЦРПТ";
											Возврат;;
										Конецесли;
										Если Найти(globalErrors,"Not enough balance")>0 Тогда
											Сообщить("Необходимо пополнить баланс в ЦРПТ");
										Конецесли;

								Сообщить("Не удалось обработать документ: "+globalErrors);
								Если Найти(globalErrors,"Требуемое количество ")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=Число(СокрЛП(Сред(globalErrors,Найти(globalErrors,"осталось использовать ")+22)));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
										 									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше,чем размер буфера")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше, чем размер буфера")>0 Тогда
			
						НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								ИначеЕсли Найти(globalErrors,"DELETE")>0 Тогда
									Стр.КоличествоПолучено=Стр.КоличествоКМ ; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
									
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕСЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Табак")
			ИЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак")
			Тогда
								 	Сообщить("Возможно указано заказанное количество меньше 2 штук!!");
								Конецесли;
							ИначеЕсли NNN.success=Истина Тогда
								
								
							КонецЕсли;
		
	КонецЕсли;
							
			Если Ответ.КодСостояния<>200 Тогда
//		HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/status?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+
//		"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								Объем="";
								Если Не ЗначениеЗАполненО(Стр.ОБъем) тогда
									Объем=Стр.Объем*Получить/Стр.КоличествоКМ;
									Объем=Формат(Объем,"ЧГ=");
								КонецЕсли;
								
								HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/orders/"+
								Объект._Order_ID+"/codes/"+ПолучитьGTIN(Стр.GTIN)+"/print/CSV?expirationDate="+Формат(Стр.Годендо,"ДФ=""ггММдд""")+
								"&stickerId=12&accompanyingDocument="+Стр.НомерВСД+Объем+"&quantity="+Формат(Получить,"ЧГ="));
								
								HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);


			 		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
						Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
						ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
						
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Объект.Ссылка,ТекстДокумента);
				
			Конецесли;
						
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
				NNN.Свойство("bufferStatus",Стр.СтатусСтроки);
				NNN.Свойство("rejectionReason",Стр.ОшибкаПолучения);
				
				
			КонецЕслИ;
	
	
						Исключение
							
							Сообщить("Ошибка "+Ответ.ПолучитьТелоКакСтроку());
						КонецПопытки;
						
					КонецЦикла;
				КонецЕсли;
				
			
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
			
			 ЭтаФорма.Прочитать();  
		
	
КонецПроцедуры


&НаСервере
Процедура ПолучитьКМИзAPIНаСервере()
			
		Если ОБъект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Молоко") Тогда
				
				//Если 	Объект.ИспользоватьОтчетОбИспользовании=Истина Тогда
					ПолучитьКМИзAPI_ШиныНаСервере();
				//Иначе
				//	ПолучитьКМИзAPI_Молоко_CSVНаСервере();
				//КонецЕсли;
				
				Возврат;
				
			КонецЕсли;
			
		Если 								НЕ РаботатьНаV1 Тогда
			ПолучитьКМИзAPI_ШиныНаСервере();
			
		Иначе
			
			
		//	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
		//	Текст=Форм.Пользователь;
		//	Форм.Пользователь=Объект.ТекущийПользователь;
		//	ПараметрыДлякилента=Неопределено;
		//	Если Форм.НаКлиенте(ПараметрыДлякилента) Тогда
		//		Форм.Пользователь=Текст;
				ПараметрыДлякилента=ПолучитьИзПользователя();
			
				
				АдресРаздробить=ПараметрыДлякилента.АдресСУЗ;
				Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
				Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
				Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
				Порт=Сред(Порт,Найти(Порт,":")+1);
				Попытка
					Порт=число(Порт);
				Исключение
					Порт=Неопределено;
				КонецПопытки;
				Если Не ЗначениеЗаполнено(Адрес) Тогда
					
					Сообщить("В пользователе не заполнен адрес СУЗ");
					Возврат;
					
				КонецЕсли;
					Если Найти(АдресРаздробить,"https")=1 Тогда
						Защищ=Новый ЗащищенноеСоединениеopenSSL();
					Иначе
						Защищ=Неопределено;
					КонецЕсли;
						
				
				
					Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
					
						HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,,Защищ);
					Иначе
						HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,,Защищ);
					КонецЕсли;
					
					КоличествоОгранчений=0;
					ВРегистре=Вргеистре(КоличествоОгранчений);
					Если ВРегистре ИЛИ Объект.Товары.Итог("КоличествоКМ")>КоличествоОгранчений Тогда
						// Состояние("Получение "+Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
//						 0);
						
						НомерПП=0;
						Для Каждого Стр Из Объект.Товары Цикл
							НомерПП=НомерПП+1;
							Пока Стр.КоличествоКМ-Стр.КоличествоПолучено>0 Цикл
								
								Получить=Мин(Стр.КоличествоКМ-Стр.КоличествоПолучено,10000);
								
								HTTPЗапрос = Новый HTTPЗапрос("api/codes?orderId="+Объект._Order_ID+"&orderLineId="+СокрЛП(Стр.ИДСУЗ)+"&quantity="+Формат(Получить,"ЧГ="));
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
								ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
								Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
									ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП);
								КонецЕсли;
								//Стр.КоличествоПолучено=Получить;
								 Попытка
									//ЧтениеJSON = Новый ЧтениеJSON;
									//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
									Если Ответ.КодСостояния=200 Тогда
										НаСервереСДобавлениемРегистра(ТекстДокумента,Стр.ID);
			                            
									   	// ЭтаФорма.Прочитать();
									        	 Стр.КоличествоПолучено=Стр.КоличествоПолучено+Получить; 
											Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
								
								КонецЕсли;
												 
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
												// Состояние("Получено "+Формат(Объект.Товары.Итог("КоличествоПолучено"),"ЧГ=")+" из "+
//												 Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
//												 Окр(Объект.Товары.Итог("КоличествоПолучено")*100/Объект.Товары.Итог("КоличествоКМ")));
										//НайтиВсеOrderlineПоНомеркуКМ();
									Иначе
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
										
										Если NNN.success=Ложь Тогда
										globalErrors="";
										Для Каждого Стр_1 Из NNN.globalErrors Цикл
											globalErrors=globalErrors+Стр_1+"
											|"
										Конеццикла;
												Если Найти(globalErrors,"Not enough balance")>0 Тогда
													Сообщить("Необходимо пополнить баланс в ЦРПТ");
												Конецесли;
										
										Сообщить("Не удалось обработать документ: "+globalErrors);
										Если Найти(globalErrors,"Требуемое количество ")>0 Тогда
											ЧислоОсталось=Число(СокрЛП(Сред(globalErrors,Найти(globalErrors,"осталось использовать ")+22)));
											Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
											Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
								
								КонецЕсли;
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
												 НеНадоОбновлятьСтатус=Истина;
										ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше,чем размер буфера")>0 Тогда
											НеНадоОбновлятьСтатус=Истина;
											ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
											ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
											Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше, чем размер буфера")>0 Тогда
			
						НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
										ИначеЕсли Найти(globalErrors,"DELETE")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ ; 
											Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
								
								КонецЕсли;
											
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
				ИначеЕСЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Табак")
					ИЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак")
					Тогда
										 	Сообщить("Возможно указано заказанное количество меньше 2 штук!!");
										Конецесли;
										
									ИначеЕсли NNN.success=Истина Тогда
										   Прервать;
										
									КонецЕсли;
									  КонецЕсли; 
								Исключение
									
									Сообщить("Ошибка "+Ответ.ПолучитьТелоКакСтроку());
								 КонецПопытки;
								
								
							Конеццикла;
						КонецциклА;
						
					Иначе
						//Состояние("Получение "+Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
						// 0);
					
						НомерПП=0;
						Для Каждого Стр Из Объект.Товары Цикл
						НомерПП=НомерПП+1;
						HTTPЗапрос = Новый HTTPЗапрос("api/codes?orderId="+Объект._Order_ID+"&orderLineId="+СокрЛП(Стр.ИДСУЗ)+"&quantity="+Формат(Стр.КоличествоКМ-стр.КоличествоПолучено,"ЧГ="));
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
						Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
							ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП);
						КонецЕсли;
						
						Попытка
							//ЧтениеJSON = Новый ЧтениеJSON;
							//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
							Если Ответ.КодСостояния=200 Тогда
								НеобходимоВсеНаСервереДелать(ТекстДокумента,Стр.ID);
						
								Стр.КоличествоПолучено=Стр.КоличествоКМ;
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
												 //Сообщить("Получено "+Формат(Объект.Товары.Итог("КоличествоПолучено"),"ЧГ=")+" из "+
												 //Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
												 //Окр(Объект.Товары.Итог("КоличествоПолучено")*100/Объект.Товары.Итог("КоличествоКМ")));
									
								//НайтиВсеOrderlineПоНомеркуКМ();
							Иначе
								NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
						
								Если NNN.success=Ложь Тогда
								globalErrors="";
								Для Каждого Стр_1 Из NNN.globalErrors Цикл
									globalErrors=globalErrors+Стр_1+"
									|"
								Конеццикла;
												Если Найти(globalErrors,"Not enough balance")>0 Тогда
													Сообщить("Необходимо пополнить баланс в ЦРПТ");
												Конецесли;
								
								Сообщить("Не удалось обработать документ: "+globalErrors);
								Если Найти(globalErrors,"Требуемое количество ")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=Число(СокрЛП(Сред(globalErrors,Найти(globalErrors,"осталось использовать ")+22)));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
		КонецЕслИ;								
									
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
										ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше,чем размер буфера")>0 Тогда
											НеНадоОбновлятьСтатус=Истина;
											ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
											ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
											Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
												 ЭтаФорма.Записать();
		ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше, чем размер буфера")>0 Тогда
			
						НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								ИначеЕсли Найти(globalErrors,"DELETE")>0 Тогда
									Стр.КоличествоПолучено=Стр.КоличествоКМ ; 
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
									
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
				ИначеЕСЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Табак") 
					ИЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак") 
					Тогда
										 	Сообщить("Возможно указано заказанное количество меньше 2 штук!!");
								Конецесли;
							ИначеЕсли NNN.success=Истина Тогда
								
								
							КонецЕсли;
		КонецЕсли;
							
							
						Исключение
							
							Сообщить("Ошибка "+Ответ.ПолучитьТелоКакСтроку());
						КонецПопытки;
						
					КонецЦикла;
				КонецЕсли;
			//Иначе
			///	Форм.Пользователь=Текст;
		//	КонецЕсли;			
		
			
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьКМИзAPI(Команда,НеОбновлять=Ложь) Экспорт
//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьКМИзAPIЗаказНаКМНаСервере(Объект.Ссылка,Объект.ТекущийПользователь);	
//	Возврат;
	Если ОбработкаWEBНаСервере Тогда
		ПолучитьКМИзAPIНаСервере();
		ЭтаФорма.Записать();
		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПроверкаВводВОБорот(Объект.Ссылка,Истина);
				
	Иначе
		
	
			Если ЗначениеЗаполнено(Объект.СервисПровайдер) Тогда
				
				ОбновимСтатсыПострчокам();
				
				//Сообщить("Данный докумнет отправлен в типографию!! Получение КМ не возможно");
				Возврат;
			КонецЕслИ;
	
		
		
			//Если ОБъект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Молоко") Тогда
				
			//	Если 	Объект.ИспользоватьОтчетОбИспользовании=Истина Тогда
			//		ПолучитьКМИзAPI_Шины();
			//	Иначе
			//		ПолучитьКМИзAPI_Молоко_CSV();
			//	КонецЕсли;
			//	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПроверкаВводВОБорот(Объект.Ссылка,Истина);
				
			//	Возврат;
				
			//КонецЕсли;
			
		Если 						Истина ИЛИ 		НЕ РаботатьНаV1 Тогда
			ПолучитьКМИзAPI_Шины();
			ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПроверкаВводВОБорот(Объект.Ссылка,Истина);
			
		Иначе
			
			ЭтаФорма.Модифицированность=Истина;
			
		//	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
		//	Текст=Форм.Пользователь;
		//	Форм.Пользователь=Объект.ТекущийПользователь;
		//	ПараметрыДлякилента=Неопределено;
		//	Если Форм.НаКлиенте(ПараметрыДлякилента) Тогда
		//		Форм.Пользователь=Текст;
					ПараметрыДлякилента=ПолучитьИзПользователя();
				Если Не ЗначениеЗаполнено(ПараметрыДлякилента) Тогда
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПроверкаВводВОБорот(Объект.Ссылка,Истина);
					Возврат;
				КонецЕслИ;
			
				
				
				АдресРаздробить=ПараметрыДлякилента.АдресСУЗ;
				Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
				Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
				Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
				Порт=Сред(Порт,Найти(Порт,":")+1);
				Попытка
					Порт=число(Порт);
				Исключение
					Порт=Неопределено;
				КонецПопытки;
				Если Не ЗначениеЗаполнено(Адрес) Тогда
					
					ПоказатьПредупреждение(,"В пользователе не заполнен адрес СУЗ");
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПроверкаВводВОБорот(Объект.Ссылка,Истина);
					Возврат;
					
				КонецЕсли;
					Если Найти(АдресРаздробить,"https")=1 Тогда
						Защищ=Новый ЗащищенноеСоединениеopenSSL();
					Иначе
						Защищ=Неопределено;
					КонецЕсли;
						
				
				
							Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
					
						HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,,Защищ);
					Иначе
						HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,,Защищ);
					КонецЕсли;
					
					КоличествоОгранчений=0;
					ВРегистре=Вргеистре(КоличествоОгранчений);
					Если ВРегистре ИЛИ Объект.Товары.Итог("КоличествоКМ")>КоличествоОгранчений Тогда
						 Состояние("Получение "+Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
						 0);
						
						НомерПП=0;
						Для Каждого Стр Из Объект.Товары Цикл
							НомерПП=НомерПП+1;
							Пока Стр.КоличествоКМ-Стр.КоличествоПолучено>0 Цикл
								
								Получить=Мин(Стр.КоличествоКМ-Стр.КоличествоПолучено,10000);
								
								HTTPЗапрос = Новый HTTPЗапрос("api/codes?orderId="+Объект._Order_ID+"&orderLineId="+СокрЛП(Стр.ИДСУЗ)+"&quantity="+Формат(Получить,"ЧГ="));
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
								ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
								Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
									ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП);
								КонецЕсли;
								//Стр.КоличествоПолучено=Получить;
								 Попытка
									//ЧтениеJSON = Новый ЧтениеJSON;
									//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
									Если Ответ.КодСостояния=200 Тогда
										НаСервереСДобавлениемРегистра(ТекстДокумента,Стр.ID);
			                            
									   	// ЭтаФорма.Прочитать();
									        	 Стр.КоличествоПолучено=Стр.КоличествоПолучено+Получить; 
											Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
								
								КонецЕсли;
												 
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
												 Состояние("Получено "+Формат(Объект.Товары.Итог("КоличествоПолучено"),"ЧГ=")+" из "+
												 Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
												 Окр(Объект.Товары.Итог("КоличествоПолучено")*100/Объект.Товары.Итог("КоличествоКМ")));
										//НайтиВсеOrderlineПоНомеркуКМ();
									Иначе
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
										
										Если NNN.success=Ложь Тогда
										globalErrors="";
										Для Каждого Стр_1 Из NNN.globalErrors Цикл
											globalErrors=globalErrors+Стр_1+"
											|"
										Конеццикла;
												Если Найти(globalErrors,"Not enough balance")>0 Тогда
													Сообщить("Необходимо пополнить баланс в ЦРПТ");
												Конецесли;
										
										Сообщить("Не удалось обработать документ: "+globalErrors);
										Если Найти(globalErrors,"Требуемое количество ")>0 Тогда
											ЧислоОсталось=Число(СокрЛП(Сред(globalErrors,Найти(globalErrors,"осталось использовать ")+22)));
											Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
											Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
								
								КонецЕсли;
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
												 НеНадоОбновлятьСтатус=Истина;
										ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше,чем размер буфера")>0 Тогда
											НеНадоОбновлятьСтатус=Истина;
											ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
											ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
											Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше, чем размер буфера")>0 Тогда
			
						НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
			
										ИначеЕсли Найти(globalErrors,"DELETE")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ ; 
											Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
								
								КонецЕсли;
											
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
				ИначеЕСЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Табак")
					ИЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак")
					Тогда
										 	Сообщить("Возможно указано заказанное количество меньше 2 штук!!");
										Конецесли;
										
									ИначеЕсли NNN.success=Истина Тогда
										   Прервать;
										
									КонецЕсли;
									  КонецЕсли; 
								Исключение
									
									Сообщить("Ошибка "+Ответ.ПолучитьТелоКакСтроку());
								 КонецПопытки;
								
								
							Конеццикла;
						КонецциклА;
						
					Иначе
						Состояние("Получение "+Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
						 0);
					
						НомерПП=0;
						Для Каждого Стр Из Объект.Товары Цикл
						НомерПП=НомерПП+1;
						HTTPЗапрос = Новый HTTPЗапрос("api/codes?orderId="+Объект._Order_ID+"&orderLineId="+СокрЛП(Стр.ИДСУЗ)+"&quantity="+Формат(Стр.КоличествоКМ-стр.КоличествоПолучено,"ЧГ="));
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
						Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
							ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП);
						КонецЕсли;
						
						Попытка
							//ЧтениеJSON = Новый ЧтениеJSON;
							//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
							Если Ответ.КодСостояния=200 Тогда
								НеобходимоВсеНаСервереДелать(ТекстДокумента,Стр.ID);
						
								Стр.КоличествоПолучено=Стр.КоличествоКМ;
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
												 Состояние("Получено "+Формат(Объект.Товары.Итог("КоличествоПолучено"),"ЧГ=")+" из "+
												 Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
												 Окр(Объект.Товары.Итог("КоличествоПолучено")*100/Объект.Товары.Итог("КоличествоКМ")));
									
								//НайтиВсеOrderlineПоНомеркуКМ();
							Иначе
								NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
						
								Если NNN.success=Ложь Тогда
								globalErrors="";
								Для Каждого Стр_1 Из NNN.globalErrors Цикл
									globalErrors=globalErrors+Стр_1+"
									|"
								Конеццикла;
												Если Найти(globalErrors,"Not enough balance")>0 Тогда
													Сообщить("Необходимо пополнить баланс в ЦРПТ");
												Конецесли;
								
								Сообщить("Не удалось обработать документ: "+globalErrors);
								Если Найти(globalErrors,"Требуемое количество ")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=Число(СокрЛП(Сред(globalErrors,Найти(globalErrors,"осталось использовать ")+22)));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
		КонецЕслИ;								
									
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
										ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше,чем размер буфера")>0 Тогда
											НеНадоОбновлятьСтатус=Истина;
											ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
											ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
											Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
												 ЭтаФорма.Записать();
		ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше, чем размер буфера")>0 Тогда
			
						НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								ИначеЕсли Найти(globalErrors,"DELETE")>0 Тогда
									Стр.КоличествоПолучено=Стр.КоличествоКМ ; 
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
									
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
				ИначеЕСЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Табак") 
					ИЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак") 
					Тогда
										 	Сообщить("Возможно указано заказанное количество меньше 2 штук!!");
								Конецесли;
							ИначеЕсли NNN.success=Истина Тогда
								
								
							КонецЕсли;
		КонецЕсли;
							
							
						Исключение
							
							Сообщить("Ошибка "+Ответ.ПолучитьТелоКакСтроку());
						КонецПопытки;
						
					КонецЦикла;
				КонецЕсли;
			//Иначе
			///	Форм.Пользователь=Текст;
		//	КонецЕсли;			
		
	ЭтаФорма.Записать();
	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПроверкаВводВОБорот(Объект.Ссылка,Истина);
			
		КонецЕсли;	 
	КонецЕсли;
КонецПроцедуры
 
Процедура НаСервереСДобавлениемРегистра_Шины(ТекстДокумента,ID,Последнийлок)
	 NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
	 
	 
						Попытка
							Последнийлок=NNN.blockId;
						Исключение
							КонецПопытки;
	 
								МассивМарок=Новый Массив;
									//Для Каждого Стр_1 Из NNN Цикл
				//						ЗаписатьВДокумент(NNN);
//										Добав=Объект.КМИзAPI.Добавить();
										 //СпрОД=СоздатьНайтиИДСТРОКИ(Стр);
										//Добав.Order_Id_Line=СпрОД;
									//	ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1);
 									//	 НомерКМ=КодСтрСервер_Дв(ДвоичнД);
										 //МассивМарок.Добавить(НомерКМ);
								Для Каждого Стр_1 Из NNN.codes Цикл
		//						ЗаписатьВДокумент(NNN);
								//Добав=Объект.КМИзAPI.Добавить();
								 //СпрОД=СоздатьНайтиИДСТРОКИ(Стр);
								//Добав.Order_Id_Line=СпрОД;
								
								

	//ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1);
	
	ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1);
								НомерКМ=КодСтрСервер_Дв(ДвоичнД);
										 МассивМарок.Добавить(НомерКМ);
								//Добав.Order_Id_Line=ID;
							Конеццикла;
									 
										 
									 ЗаписатьВРегистр(МассивМарок,ID);
									 
КонецПроцедуры

 
Процедура НаСервереСДобавлениемРегистра(ТекстДокумента,ID)
	 NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
	МассивМарок=Новый Массив;
								
	Если ТипЗнч(NNN)=Тип("Массив") тогда							
			Для Каждого Стр_1 Из NNN Цикл
//						ЗаписатьВДокумент(NNN);
//										Добав=Объект.КМИзAPI.Добавить();
				 //СпрОД=СоздатьНайтиИДСТРОКИ(Стр);
				//Добав.Order_Id_Line=СпрОД;
				
				
				//ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1);
				ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1);
 				 НомерКМ=КодСтрСервер_Дв(ДвоичнД);
				 
				 МассивМарок.Добавить(НомерКМ);
				 
				 
			 Конеццикла;
		 Иначе
			 Для каждого Стр_1 Из NNN.codes Цикл
				 
				//ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1);
				ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1);
 				 НомерКМ=КодСтрСервер_Дв(ДвоичнД);
				 
				 МассивМарок.Добавить(НомерКМ);
				 
				 
				 
				Конеццикла;
			 
			 
			Конецесли;
								 ЗаписатьВРегистр(МассивМарок,ID);
									 
КонецПроцедуры


Процедура НаСервереСДобавлениемРегистра_МОЛОКО(ТекстДокумента,ID,Последнийлок)
	 NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
	 
	ТекстДокумента=СтрЗаменить(ТекстДокумента,"<GS>",Символ(29));
	текстовД=Новый ТекстовыйДокумент;
								МассивМарок=Новый Массив;
	текстовД.УстановитьТекст(ТекстДокумента);
	Для Сч=1 По текстовД.КоличествоСтрок() Цикл
		
									//ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстовД.ПолучитьСтроку(сч));
									
									ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстовД.ПолучитьСтроку(сч));
									
								НомерКМ=КодСтрСервер_Дв(ДвоичнД);
										 МассивМарок.Добавить(НомерКМ);
		////Добав=Объект.КМИзAPI.Добавить();
			//ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстовД.ПолучитьСтроку(сч));
			//Добав.НомерКМ=КодСтрСервер_Дв(ДвоичнД);
		
	Конеццикла;
	 
				 
										 
		ЗаписатьВРегистр(МассивМарок,ID);
									 
КонецПроцедуры


Процедура НеобходимоВсеНаСервереДелать_МОЛОКО(Знач ТекстДокумента,ID,Последнийлок=0)
	
	ТекстДокумента=СтрЗаменить(ТекстДокумента,"<GS>",Символ(29));
	текстовД=Новый ТекстовыйДокумент;
	текстовД.УстановитьТекст(ТекстДокумента);
	Для Сч=1 По текстовД.КоличествоСтрок() Цикл
		
			Добав=Объект.КМИзAPI.Добавить();
			
			
			//ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстовД.ПолучитьСтроку(сч));
			ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстовД.ПолучитьСтроку(сч));
			Добав.НомерКМ=КодСтрСервер_Дв(ДвоичнД);
		
	Конеццикла;
	
		//	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
		//				//Стр.КоличествоПолучено=Стр.КоличествоКМ;
		//				Попытка
		//					Последнийлок=xmlString(NNN.blockId);
		//				Исключение
		//					КонецПопытки;
		//					Для Каждого Стр_1 Из NNN.codes Цикл
		////						ЗаписатьВДокумент(NNN);
		//						Добав=Объект.КМИзAPI.Добавить();
		//						 //СпрОД=СоздатьНайтиИДСТРОКИ(Стр);
		//						//Добав.Order_Id_Line=СпрОД;
		//						ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1);
		//						Добав.НомерКМ=КодСтрСервер_Дв(ДвоичнД);
		//						
		//			cis=Сред(СтрЗаменить(Добав.НомерКМ,"%1D",""),1,38);
		//			   	Если Сред(cis,32,3)<>"240" Тогда
		//						//cis=Сред(cis,1,31);
		//						cis=Сред(Добав.НомерКМ,1,Найти(Добав.НомерКМ,"%1D")-1);
		//						cis=РаскодироватьСтроку(cis,СпособКодированияСтроки.КодировкаURL);
		//					Иначе
		//						
		//					cis=РаскодироватьСтроку(cis,СпособКодированияСтроки.КодировкаURL);
		//						
		//					КонецЕсли;
		//		Добав.НомерКМ_Короткий=cis;				
		//						
		//						Добав.Order_Id_Line=ID;
		//					Конеццикла;
КонецПроцедуры



Процедура НеобходимоВсеНаСервереДелать_Шины(ТекстДокумента,ID,Последнийлок=0)
	
	 			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
						//Стр.КоличествоПолучено=Стр.КоличествоКМ;
						Попытка
							Последнийлок=xmlString(NNN.blockId);
						Исключение
							КонецПопытки;
							Для Каждого Стр_1 Из NNN.codes Цикл
		//						ЗаписатьВДокумент(NNN);
								Добав=Объект.КМИзAPI.Добавить();
								 //СпрОД=СоздатьНайтиИДСТРОКИ(Стр);
								//Добав.Order_Id_Line=СпрОД;
								
								
								//ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1);
								ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1);
								Добав.НомерКМ=КодСтрСервер_Дв(ДвоичнД);
								
								cis=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьКороткийНомерКМ(
								Добав.НомерКМ,Объект.ТипПродукции);
								Добав.НомерКМ_Короткий=cis;				
								
								Добав.Order_Id_Line=ID;
							Конеццикла;
КонецПроцедуры

 Процедура НеобходимоВсеНаСервереДелать(ТекстДокумента,ID)
	 			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
						//Стр.КоличествоПолучено=Стр.КоличествоКМ;
							Для Каждого Стр_1 Из NNN Цикл
		//						ЗаписатьВДокумент(NNN);
								Добав=Объект.КМИзAPI.Добавить();
								 //СпрОД=СоздатьНайтиИДСТРОКИ(Стр);
								//Добав.Order_Id_Line=СпрОД;
								
								
								//ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1);
								ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1);
								Добав.НомерКМ=КодСтрСервер_Дв(ДвоичнД);
								
					cis=Сред(СтрЗаменить(Добав.НомерКМ,"%1D",""),1,38);
					   	Если Сред(cis,32,3)<>"240" Тогда
								//cis=Сред(cis,1,31);
								cis=Сред(Добав.НомерКМ,1,Найти(Добав.НомерКМ,"%1D")-1);
								cis=РаскодироватьСтроку(cis,СпособКодированияСтроки.КодировкаURL);
							Иначе
								
							cis=РаскодироватьСтроку(cis,СпособКодированияСтроки.КодировкаURL);
								
							КонецЕсли;
				Добав.НомерКМ_Короткий=cis;				
								
								
								Добав.Order_Id_Line=ID;
							Конеццикла;
КонецПроцедуры

&НаКлиенте
Процедура СтраницыТЧПриСменеСтраницы(Элемент, ТекущаяСтраница)
	// Вставить содержимое обработчика.
	Если ТекущаяСтраница=Элементы.ТоварыСтраница Тогда
		Элементы.СерийныеНомераТаблица.ОтборСтрок=Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СерийныеНомераТаблицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если Поле.Имя="ТоварыСерийныйНомер" Тогда
		// Вставить содержимое обработчика.
		Если НЕ Элементы.СтраницыТЧ.ТолькоПросмотр Тогда
			СтандартнаяОбработка=Ложь;
				ТоварыСерийныйНомерНачалоВыбора(Элемент, "", Истина)			
		Иначе
			СтандартнаяОбработка=Ложь;
			Элементы.СтраницыТЧ.ТекущаяСтраница=Элементы.СерийныеНомера;
			
			ТекД=Элементы.Товары.ТекущиеДанные;
			ТекД.НомерСтрокиСвязи=ТекД.ПолучитьИдентификатор();
			Объект.СерийныеНомера.Сортировать("НомерСтрокиСвязи");
			р=оБЪЕКТ.СерийныеНомера.НайтиСтроки(нОВЫЙ СТРУКТУРА("НомерСтрокиСвязи",Текд.НомерСтрокиСвязи));
			Если Р.Количество()>0 Тогда
				Элементы.СерийныеНомераТаблица.ТекущаяСтрока=Р[0].Получитьидентификатор();
			КонецЕсли;
				КодЕг=Элементы.Товары.ТекущиеДанные.НомерСтрокиСвязи;
				
				ААА=Новый ФиксированнаяСтруктура(Новый Структура("НомерСтрокиСвязи",Кодег));
				Элементы.СерийныеНомераТаблица.ОтборСтрок=ААА;
				
				
		КонецЕсли;
	ИначеЕсли Поле.Имя="ТоварыGTIN"	 Тогда
		ОткрытьФорму("Справочник.Продукция_ХамелеонЦРПТ.ФормаОбъекта",Новый Структура("Ключ",Элементы.Товары.ТекущиеДанные.GTIN));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СчитатьМаркиНаСервере()
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтправленныеПолученные_ХамелеонЦРПТ.Файл
		|ИЗ
		|	РегистрСведений.ОтправленныеПолученные_ХамелеонЦРПТ КАК ОтправленныеПолученные_ХамелеонЦРПТ
		|ГДЕ
		|	ОтправленныеПолученные_ХамелеонЦРПТ.Документ = &Документ
		|	И ОтправленныеПолученные_ХамелеонЦРПТ.Вид ПОДОБНО &Вид";
	
	Запрос.УстановитьПараметр("Вид", "Получили марки%");
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	считатьМарки.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Хр=ВыборкаДетальныеЗаписи.Файл;
		Если Хр<>Неопределено тогда
			Добав=считатьМарки.Добавить();
			Добав.Файл=Хр.Получить();
		Конецесли;
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры

&НаКлиенте
Процедура СчитатьМарки(Команда)
	СчитатьМаркиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	ЗаполнитьЗначенияСвойств(Объект,Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СпособИзготовленияСИПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	//Элементы.ЦЭМ.Видимость=Объект.СпособИзготовленияСИ=ПредопределенноеЗначение("Перечисление.СпособИзготовленияСИ_ХамелеонЦРПТ.ЦентрЭтикетированияИМаркировки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСПО(Команда)
	// Вставить содержимое обработчика.
	Счетч=1;
	Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводПервогоЧисла",ЭтаФорма));
	Форм.Число=Счетч;
	Форм.Заголовок="Начать печать с № КМ";
	//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводПервогоЧисла",ЭтаФорма),Счетч,"Начать печать с № КМ");
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводПервогоЧисла(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
		
			Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводВторогоЧисла",ЭтаФорма,РР));
	Форм.Число=30;
	Форм.Заголовок="Допечатать указанное количество № КМ";
//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводВторогоЧисла",ЭтаФорма,РР),30,"Допечатать указанное количество № КМ");
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводВторогоЧисла(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
		
		МассивКМРаспечатали=Новый Массив;
		
		

		
		Если ЗначениеЗаполненО(ЧислоПараллельныхПотоков) тогда
			
			
			
			
			
			
			
			
			
			//МассивКМРаспечатали=Новый Массив;

			
			Таб = ПечатьЭти_1_Функция(ДД,РР,МассивКМРаспечатали);
			Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
			
			Таб.Показать();
			
		Иначе
		
			Таб=Новый ТабличныйДокумент;
			ПечатьЭти_1(Таб,ДД,РР,МассивКМРаспечатали);
			Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
			
			Таб.Показать();
		Конецесли;
//		Таб=Новый ТабличныйДокумент;
//		ПечатьЭти_1(Таб,ДД,РР);
//		Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
		
//		Таб.Показать();

		ЗаполнитьрегистрПечати(МассивКМРаспечатали);


	КонецЕсли;
КонецПроцедуры



Функция ПечатьЭти_1_Функция(Смещение,Количество,МассивКМРаспечатали) Экспорт
	                                                               
	Ссылка=Объект.Ссылка;
	НомерТТН=Объект.Номер;
	Таб = Новый ТабличныйДокумент;
	
	Мак=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	ОблМ=Мак.ПолучитьОбласть("Строка|Шапка");
	ПервыйРисунок=Истина;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ,
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий
		|ИЗ
		|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
		|ГДЕ
		|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа";
	
	Запрос.УстановитьПараметр("ДокументЗаказа", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВерсияПравильная Тогда
	ГенераторМатрицы=Обработки.ГенерацияDataMatrix_ХамелеонЦРПТ.Создать();
	ГенераторМатрицы.Инициализировать();
	                           КонецЕсли;
							   
							   МассивЗаданий = Новый Массив;
	ЧислоПараллельныхПотоков = РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КоличествоЯдерДляГенерацииDataMatrix; 
	//ВремПапка = КаталогВременныхФайлов() + Формат(ТекущаяДата(), "ДФ=yyyyMMddHHmmss") + "\";
	
	
		ВремПапка=ПолучитьИмяВременногоФайла()+"\";	

	СчРисунков = 0;
	
	НомерПП=0;
	Если РезультатЗапроса.Количество()>0 Тогда 
		Если Смещение>РезультатЗапроса.Количество() Тогда
			Возврат Таб;
		КонецЕсли;
		МинимумМ=Мин(РезультатЗапроса.Количество()+1,Смещение+Количество)-1;
		Для Сч=СМещение По МинимумМ
			//+1 
			Цикл
			ОблМ=Мак.ПолучитьОбласть("Строка|Шапка");
			Стр=РезультатЗапроса[Сч-1];
			
			Если СоответствоватьТребованиямЦРПТ=Истина Тогда
				
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	КМРаспечатано_ХамелеонЦРПТ.Распечатан,
						|	КМРаспечатано_ХамелеонЦРПТ.cis
						|ИЗ
						|	РегистрСведений.КМРаспечатано_ХамелеонЦРПТ КАК КМРаспечатано_ХамелеонЦРПТ
						|ГДЕ
						|	КМРаспечатано_ХамелеонЦРПТ.cis = &cis";
					
					Запрос.УстановитьПараметр("cis", Стр.НомерКМ_Короткий);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи_1 = РезультатЗапроса.Выбрать();
					НашлиКМЭЭ=ЛОжь;
					Пока ВыборкаДетальныеЗаписи_1.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						если ВыборкаДетальныеЗаписи_1.cis=Стр.НомерКМ_Короткий 
							И ВыборкаДетальныеЗаписи_1.Распечатан=Истина Тогда
							НашлиКМЭЭ=Истина;
							Прервать;
						Конецесли;
						
					КонецЦикла;
					Если НашлиКМЭЭ=Истина Тогда
						Продолжить;
					Конецесли;
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					НомерПП=НомерПП+1;
					МассивКМРаспечатали.Добавить(Новый Структура("cis,НомерПП",Стр.НомерКМ_Короткий,Сч));
					
					//РегДв=РегистрыСведений.КМРаспечатано_ХамелеонЦРПТ.СоздатьНаборЗаписей();
					//РегДв.Отбор.cis.Установить(Стр.НомерКМ_Короткий);
					//НомерПП=НомерПП+1;
					//РегДв.Отбор.НомерПП.Установить(НомерПП);
					//Добав=РегДв.Добавить();
					//Добав.cis=Стр.НомерКМ_Короткий;
					//Добав.НомерПП=НомерПП;
					//Добав.Распечатан=Истина;
					//РегДв.Записать(Истина);
				
			Конецесли;
			
			
			//НСтр=Объект.Товары.НайтиСтроки(Новый Структура("ID",Стр.Order_Id_Line));
			//Если НСтр.Количество()=0  Тогда
			//	Продолжить;
			//Иначе
			//	НСтр=НСтр[0];
			//КонецЕсли;
			
			ГТИН=Сред(Стр.НомерКМ,3);
			ГТИН=Сред(ГТИН,1,15-1);
			GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
			
			ОблМ.Параметры.Марка=GTIN.БрендТорговаяМарка;
			Если ЗначениеЗаполнено(GTIN.Размер) Тогда
				ОблМ.Параметры.Размер=GTIN.Размер;
			Иначе
				ОблМ.Параметры.Размер="--";
			Конецесли;
			ОблМ.Параметры.Артикул=GTIN.МодельПроизводителяАртикул;
			ОблМ.Параметры.Проудкция=GTIN;
			ОблМ.Параметры.Цвет=GTIN.Цвет;
			ОблМ.Параметры.Вверх=GTIN.МатериалВерха;
			ОблМ.Параметры.Подладка=GTIN.МатериалПодкладки;
			ОблМ.Параметры.Стелька=GTIN.Стелька;
			ОблМ.Параметры.Низ=GTIN.МатериалНиза;
			Если ЗначениеЗаполнено(GTIN.Изготовитель) Тогда
				ОблМ.Параметры.Изготовитель=GTIN.Изготовитель	;
			Иначе
				ОблМ.Параметры.Изготовитель=GTIN.ИННПроизводителяИмпортёра;
			КонецЕсли;
			ОблМ.Параметры.страна=GTIN.СтранаПроизводства;
			ОблМ.Параметры.Дата=Формат(GTIN.ДатаПубликации,"ДЛФ=Д");
			ОблМ.Параметры.Сезон=GTIN.Сезон;
			ОблМ.Параметры.Адрес=GTIN.ИННПроизводителяИмпортёра.ЮридическийАдрес;
			
			ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			CIS="("+Сред(ООО,1,2)+")";
			
			//ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			//CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
	CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
		ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
		
				ГТИН=Сред(ГТИН,14+3);
			
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
				ГТИН=Сред(ГТИН,6);
				
				
				
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			
			
Если ЗначениеЗаполнено(GTIN.КодВУчетнойСистеме) тогда
				ГУДИ=GTIN.КодВУчетнойСистеме;
			Иначе
				ГУДИ=xmlString(GTIN.GTIN);
			Конецесли;			//ОблМ.Параметры.ШтрихКод=ГУДИ;
			
			ОблМ.Параметры.ШтрихКод=ГУДИ;
			Попытка
				
							Если ЗначениеЗАполнено(ГУДИ) Тогда
			
			Если ВерсияПравильная Тогда
			Генератор=Обработки.ГенерацияEAN13_ХамелеонЦРПТ.Создать();
		
			Картинка = Генератор.Сгенерировать(ГУДИ);
		Иначе
						Генератор=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();
		
			Картинка = Генератор.Сгенерировать13(ГУДИ);
КонецЕсли;
			ОблМ.Рисунки.ШтрихКод_1.Картинка=Новый Картинка(Картинка);
					КонецЕсли;
			
			
			Исключение
				Сообщить("Для печати Data Matrix необходим релиз 8.3.9 или выше");
				//Возврат;
			КонецПопытки;
			
			
		
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(ООО);
			МассивПараметров.Добавить(ВремПапка + СчРисунков + ".bmp");
			МассивПараметров.Добавить(ГенераторМатрицы.ПобитИсклИли);
			
			Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СгенерироватьDataMatrix", МассивПараметров);
			МассивЗаданий.Добавить(Задание);
			
			Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
				Попытка
					ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
				Исключение
				КонецПопытки;
				МассивЗаданий.Очистить();
			КонецЕсли;
			
			ОблМ.Рисунки.ДатаМ.Имя = "Рис" + СчРисунков;
			СчРисунков = СчРисунков + 1;
			
							
				Если ПервыйРисунок Тогда
					Если НЕ Таб.ПроверитьВывод(ОблМ) Тогда
						Таб.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					Таб.Вывести(ОблМ);
					ПервыйРисунок=ложь;
				Иначе
					Таб.Присоединить(ОблМ);
					
					ПервыйРисунок=Истина;
					
				Конецесли;
			
		КонецЦикла;       
	Иначе
		Если Смещение>Объект.КМИзAPI.Количество() Тогда
			Возврат Таб;
		КонецЕсли;
		МинимумМ=Мин(Объект.КМИзAPI.Количество()+1,СМещение+Количество)-1;
		Для СЧ=Смещение По МинимумМ
			//+1 
			Цикл
		ОблМ=Мак.ПолучитьОбласть("Строка|Шапка");
			Стр=Объект.КМИзAPI[СЧ-1];
			
Если СоответствоватьТребованиямЦРПТ=Истина Тогда
				
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	КМРаспечатано_ХамелеонЦРПТ.Распечатан,
						|	КМРаспечатано_ХамелеонЦРПТ.cis
						|ИЗ
						|	РегистрСведений.КМРаспечатано_ХамелеонЦРПТ КАК КМРаспечатано_ХамелеонЦРПТ
						|ГДЕ
						|	КМРаспечатано_ХамелеонЦРПТ.cis = &cis";
					
					Запрос.УстановитьПараметр("cis", Стр.НомерКМ_Короткий);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи_1 = РезультатЗапроса.Выбрать();
					НашлиКМЭЭ=ЛОжь;
					Пока ВыборкаДетальныеЗаписи_1.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						если ВыборкаДетальныеЗаписи_1.cis=Стр.НомерКМ_Короткий 
							И ВыборкаДетальныеЗаписи_1.Распечатан=Истина Тогда
							НашлиКМЭЭ=Истина;
							Прервать;
						Конецесли;
						
					КонецЦикла;
					Если НашлиКМЭЭ=Истина Тогда
						Продолжить;
					Конецесли;
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					НомерПП=НомерПП+1;
					МассивКМРаспечатали.Добавить(Новый Структура("cis,НомерПП",Стр.НомерКМ_Короткий,Сч));
					
					//РегДв=РегистрыСведений.КМРаспечатано_ХамелеонЦРПТ.СоздатьНаборЗаписей();
					//РегДв.Отбор.cis.Установить(Стр.НомерКМ_Короткий);
					//НомерПП=НомерПП+1;
					//РегДв.Отбор.НомерПП.Установить(НомерПП);
					//Добав=РегДв.Добавить();
					//Добав.cis=Стр.НомерКМ_Короткий;
					//Добав.НомерПП=НомерПП;
					//Добав.Распечатан=Истина;
					//РегДв.Записать(Истина);
				
			Конецесли;
			
			
			//НСтр=Объект.Товары.НайтиСтроки(Новый Структура("ID",Стр.Order_Id_Line));
			//Если НСтр.Количество()=0  Тогда
			//	Продолжить;
			//Иначе
			//	НСтр=НСтр[0];
			//КонецЕсли;
			
			ГТИН=Сред(Стр.НомерКМ,3);
			ГТИН=Сред(ГТИН,1,15-1);
			GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
			
			ОблМ.Параметры.Марка=GTIN.БрендТорговаяМарка;
			Если ЗначениеЗаполнено(GTIN.Размер) Тогда
				ОблМ.Параметры.Размер=GTIN.Размер;
			Иначе
				ОблМ.Параметры.Размер="--";
			Конецесли;
			ОблМ.Параметры.Артикул=GTIN.МодельПроизводителяАртикул;
			ОблМ.Параметры.Проудкция=GTIN;
			ОблМ.Параметры.Цвет=GTIN.Цвет;
			ОблМ.Параметры.Вверх=GTIN.МатериалВерха;
			ОблМ.Параметры.Подладка=GTIN.МатериалПодкладки;
			ОблМ.Параметры.Стелька=GTIN.Стелька;
			ОблМ.Параметры.Низ=GTIN.МатериалНиза;
			Если ЗначениеЗаполнено(GTIN.Изготовитель) Тогда
				ОблМ.Параметры.Изготовитель=GTIN.Изготовитель	;
			Иначе
				ОблМ.Параметры.Изготовитель=GTIN.ИННПроизводителяИмпортёра;
			КонецЕсли;
			ОблМ.Параметры.страна=GTIN.СтранаПроизводства;
			ОблМ.Параметры.Дата=Формат(GTIN.ДатаПубликации,"ДЛФ=Д");
			ОблМ.Параметры.Сезон=GTIN.Сезон;
			ОблМ.Параметры.Адрес=GTIN.ИННПроизводителяИмпортёра.ЮридическийАдрес;
			
			ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			//ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
	CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
		ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
		
				ГТИН=Сред(ГТИН,14+3);
			
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
				ГТИН=Сред(ГТИН,6);
			
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			
			
Если ЗначениеЗаполнено(GTIN.КодВУчетнойСистеме) тогда
				ГУДИ=GTIN.КодВУчетнойСистеме;
			Иначе
				ГУДИ=xmlString(GTIN.GTIN);
			Конецесли;			//ОблМ.Параметры.ШтрихКод=ГУДИ;
			
			ОблМ.Параметры.ШтрихКод=ГУДИ;
			Попытка
				Если ЗначениеЗАполнено(ГУДИ) Тогда
				Если ВерсияПравильная Тогда
			Генератор=Обработки.ГенерацияEAN13_ХамелеонЦРПТ.Создать();
		
			Картинка = Генератор.Сгенерировать(ГУДИ);
		Иначе
					Генератор=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();
		
			Картинка = Генератор.Сгенерировать13(ГУДИ);

			КонецЕсли;
			ОблМ.Рисунки.ШтрихКод_1.Картинка=Новый Картинка(Картинка);
			КонецЕсли;
			
			
			
			Исключение
				Сообщить("Для печати Data Matrix необходим релиз 8.3.9 или выше");
				//Возврат;
			КонецПопытки;
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(ООО);
			МассивПараметров.Добавить(ВремПапка + СчРисунков + ".bmp");
			МассивПараметров.Добавить(ГенераторМатрицы.ПобитИсклИли);
			
			Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СгенерироватьDataMatrix", МассивПараметров);
			МассивЗаданий.Добавить(Задание);
			
			Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
				Попытка
					ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
				Исключение
				КонецПопытки;
				МассивЗаданий.Очистить();
			КонецЕсли;
			
			ОблМ.Рисунки.ДатаМ.Имя = "Рис" + СчРисунков;
			СчРисунков = СчРисунков + 1;
			
		
							
				Если ПервыйРисунок Тогда
					Если НЕ Таб.ПроверитьВывод(ОблМ) Тогда
						Таб.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					Таб.Вывести(ОблМ);
					ПервыйРисунок=ложь;
				Иначе
					Таб.Присоединить(ОблМ);
					
					ПервыйРисунок=Истина;
					
				Конецесли;
			
			КонецЦикла;
			КонецЕсли;
	Если МассивЗаданий.Количество() > 0 Тогда
		Попытка
			ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
		Исключение
		КонецПопытки;
		МассивЗаданий.Очистить();
	КонецЕсли;
	
	Для Сч = 0 По СчРисунков - 1 Цикл
		ИсходнаяКартинка = Новый Картинка(ВремПапка + Сч + ".bmp");
		Таб.Рисунки["Рис"+Сч].Картинка = ИсходнаяКартинка.Преобразовать(ФорматКартинки.PNG);
	КонецЦикла;
	
	УдалитьФайлы(ВремПапка);
	Возврат Таб;
КонецФункции


Процедура ПечатьЭти_1(Таб,Смещение,Количество,МассивКМРаспечатали) Экспорт
	Мак=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	ОблМ=Мак.ПолучитьОбласть("Строка|Шапка");
	ПервыйРисунок=Истина;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ,
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий
		|ИЗ
		|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
		|ГДЕ
		|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа";
	
	Запрос.УстановитьПараметр("ДокументЗаказа", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
НомерПП=0;
	Если ВерсияПравильная Тогда
	ГенераторМатрицы=Обработки.ГенерацияDataMatrix_ХамелеонЦРПТ.Создать();
	ГенераторМатрицы.Инициализировать();
	                           КонецЕсли;
	Если РезультатЗапроса.Количество()>0 Тогда 
		Если Смещение>РезультатЗапроса.Количество() Тогда
			Возврат;
		КонецЕсли;
		МинимумМ=Мин(РезультатЗапроса.Количество()+1,Смещение+Количество)-1;
		Для Сч=СМещение По МинимумМ
			//+1 
			Цикл
			
	ОблМ=Мак.ПолучитьОбласть("Строка|Шапка");
			Стр=РезультатЗапроса[Сч-1];
			
			Если СоответствоватьТребованиямЦРПТ=Истина Тогда
				
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	КМРаспечатано_ХамелеонЦРПТ.Распечатан,
						|	КМРаспечатано_ХамелеонЦРПТ.cis
						|ИЗ
						|	РегистрСведений.КМРаспечатано_ХамелеонЦРПТ КАК КМРаспечатано_ХамелеонЦРПТ
						|ГДЕ
						|	КМРаспечатано_ХамелеонЦРПТ.cis = &cis";
					
					Запрос.УстановитьПараметр("cis", Стр.НомерКМ_Короткий);
					
					РезультатЗапроса_1 = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи_1 = РезультатЗапроса_1.Выбрать();
					НашлиКМЭЭ=ЛОжь;
					Пока ВыборкаДетальныеЗаписи_1.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						если ВыборкаДетальныеЗаписи_1.cis=Стр.НомерКМ_Короткий 
							И ВыборкаДетальныеЗаписи_1.Распечатан=Истина Тогда
							НашлиКМЭЭ=Истина;
							Прервать;
						Конецесли;
						
					КонецЦикла;
					Если НашлиКМЭЭ=Истина Тогда
						Продолжить;
					Конецесли;
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

					//РегДв=РегистрыСведений.КМРаспечатано_ХамелеонЦРПТ.СоздатьНаборЗаписей();
					//РегДв.Отбор.cis.Установить(Стр.НомерКМ_Короткий);
					НомерПП=НомерПП+1;
					МассивКМРаспечатали.Добавить(Новый Структура("cis,НомерПП",Стр.НомерКМ_Короткий,Сч));
					
					//РегДв.Отбор.НомерПП.Установить(НомерПП);
					//Добав=РегДв.Добавить();
					//Добав.cis=Стр.НомерКМ_Короткий;
					//Добав.НомерПП=НомерПП;
					//Добав.Распечатан=Истина;
					//РегДв.Записать(Истина);
				
			Иначе
					
				//РегДв=		
					
			Конецесли;
			

			//НСтр=Объект.Товары.НайтиСтроки(Новый Структура("ID",Стр.Order_Id_Line));
			//Если НСтр.Количество()=0  Тогда
			//	Продолжить;
			//Иначе
			//	НСтр=НСтр[0];
			//КонецЕсли;
			
			ГТИН=Сред(Стр.НомерКМ,3);
			ГТИН=Сред(ГТИН,1,15-1);
			GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
			
			ОблМ.Параметры.Марка=GTIN.БрендТорговаяМарка;
			Если ЗначениеЗаполнено(GTIN.Размер) Тогда
				ОблМ.Параметры.Размер=GTIN.Размер;
			Иначе
				ОблМ.Параметры.Размер="--";
			Конецесли;
			ОблМ.Параметры.Артикул=GTIN.МодельПроизводителяАртикул;
			ОблМ.Параметры.Проудкция=GTIN;
			ОблМ.Параметры.Цвет=GTIN.Цвет;
			ОблМ.Параметры.Вверх=GTIN.МатериалВерха;
			ОблМ.Параметры.Подладка=GTIN.МатериалПодкладки;
			ОблМ.Параметры.Стелька=GTIN.Стелька;
			ОблМ.Параметры.Низ=GTIN.МатериалНиза;
			Если ЗначениеЗаполнено(GTIN.Изготовитель) Тогда
				ОблМ.Параметры.Изготовитель=GTIN.Изготовитель	;
			Иначе
				ОблМ.Параметры.Изготовитель=GTIN.ИННПроизводителяИмпортёра;
			КонецЕсли;
			ОблМ.Параметры.страна=GTIN.СтранаПроизводства;
			ОблМ.Параметры.Дата=Формат(Объект.Дата,"ДЛФ=Д");
			ОблМ.Параметры.Сезон=GTIN.Сезон;
			ОблМ.Параметры.Адрес=GTIN.ИННПроизводителяИмпортёра.ЮридическийАдрес;
			
			ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			CIS="("+Сред(ООО,1,2)+")";
			
			//ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			//CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
	CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
		ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
		
				ГТИН=Сред(ГТИН,14+3);
			
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
				ГТИН=Сред(ГТИН,6);
				
				
				
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			
			
Если ЗначениеЗаполнено(GTIN.КодВУчетнойСистеме) тогда
				ГУДИ=GTIN.КодВУчетнойСистеме;
			Иначе
				ГУДИ=xmlString(GTIN.GTIN);
			Конецесли;			//ОблМ.Параметры.ШтрихКод=ГУДИ;
			
			ОблМ.Параметры.ШтрихКод=ГУДИ;
			Попытка
				
				Если версияПравильная Тогда
			Картинка = ГенераторМатрицы.Сгенерировать(ООО);Иначе
									ГенераторМатрицы=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();

					Картинка = ГенераторМатрицы.Сгенерировать(ООО);
КонецЕсли;
			ОблМ.Рисунки.ДатаМ.Картинка=Новый Картинка(Картинка);
			Если ЗначениеЗАполнено(ГУДИ) Тогда
			
			Если ВерсияПравильная Тогда
			Генератор=Обработки.ГенерацияEAN13_ХамелеонЦРПТ.Создать();
		
			Картинка = Генератор.Сгенерировать(ГУДИ);
		Иначе
						Генератор=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();
		
			Картинка = Генератор.Сгенерировать13(ГУДИ);
КонецЕсли;
			ОблМ.Рисунки.ШтрихКод_1.Картинка=Новый Картинка(Картинка);
					КонецЕсли;
			
			
			Исключение
				Сообщить("Для печати Data Matrix необходим релиз 8.3.9 или выше");
				//Возврат;
			КонецПопытки;
			
			
		
							
				Если ПервыйРисунок Тогда
					Если НЕ Таб.ПроверитьВывод(ОблМ) Тогда
						Таб.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					Таб.Вывести(ОблМ);
					ПервыйРисунок=ложь;
				Иначе
					Таб.Присоединить(ОблМ);
					
					ПервыйРисунок=Истина;
					
				Конецесли;
			
		КонецЦикла;       
	Иначе
		Если Смещение>Объект.КМИзAPI.Количество() Тогда
			Возврат;
		КонецЕсли;
		МинимумМ=Мин(Объект.КМИзAPI.Количество()+1,СМещение+Количество)-1;
		Для СЧ=Смещение По МинимумМ
			//+1 
			Цикл
			ОблМ=Мак.ПолучитьОбласть("Строка|Шапка");
			Стр=Объект.КМИзAPI[СЧ-1];
			
			
Если СоответствоватьТребованиямЦРПТ=Истина Тогда
				
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	КМРаспечатано_ХамелеонЦРПТ.Распечатан,
						|	КМРаспечатано_ХамелеонЦРПТ.cis
						|ИЗ
						|	РегистрСведений.КМРаспечатано_ХамелеонЦРПТ КАК КМРаспечатано_ХамелеонЦРПТ
						|ГДЕ
						|	КМРаспечатано_ХамелеонЦРПТ.cis = &cis";
					
					Запрос.УстановитьПараметр("cis", Стр.НомерКМ_Короткий);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи_1 = РезультатЗапроса.Выбрать();
					НашлиКМЭЭ=ЛОжь;
					Пока ВыборкаДетальныеЗаписи_1.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						если ВыборкаДетальныеЗаписи_1.cis=Стр.НомерКМ_Короткий 
							И ВыборкаДетальныеЗаписи_1.Распечатан=Истина Тогда
							НашлиКМЭЭ=Истина;
							Прервать;
						Конецесли;
						
					КонецЦикла;
					Если НашлиКМЭЭ=Истина Тогда
						Продолжить;
					Конецесли;
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

					//РегДв=РегистрыСведений.КМРаспечатано_ХамелеонЦРПТ.СоздатьНаборЗаписей();
					//РегДв.Отбор.cis.Установить(Стр.НомерКМ_Короткий);
					НомерПП=НомерПП+1;
					МассивКМРаспечатали.Добавить(Новый Структура("cis,НомерПП",Стр.НомерКМ_Короткий,Сч));
					
					//РегДв.Отбор.НомерПП.Установить(НомерПП);
					//Добав=РегДв.Добавить();
					//Добав.cis=Стр.НомерКМ_Короткий;
					//Добав.НомерПП=НомерПП;
					//Добав.Распечатан=Истина;
					//РегДв.Записать(Истина);
				
			Иначе
					
				//РегДв=		
					
			Конецесли;
			
			
			//НСтр=Объект.Товары.НайтиСтроки(Новый Структура("ID",Стр.Order_Id_Line));
			//Если НСтр.Количество()=0  Тогда
			//	Продолжить;
			//Иначе
			//	НСтр=НСтр[0];
			//КонецЕсли;
			
			ГТИН=Сред(Стр.НомерКМ,3);
			ГТИН=Сред(ГТИН,1,15-1);
			GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
			
			ОблМ.Параметры.Марка=GTIN.БрендТорговаяМарка;
			Если ЗначениеЗаполнено(GTIN.Размер) Тогда
				ОблМ.Параметры.Размер=GTIN.Размер;
			Иначе
				ОблМ.Параметры.Размер="--";
			Конецесли;
			ОблМ.Параметры.Артикул=GTIN.МодельПроизводителяАртикул;
			ОблМ.Параметры.Проудкция=GTIN;
			ОблМ.Параметры.Цвет=GTIN.Цвет;
			ОблМ.Параметры.Вверх=GTIN.МатериалВерха;
			ОблМ.Параметры.Подладка=GTIN.МатериалПодкладки;
			ОблМ.Параметры.Стелька=GTIN.Стелька;
			ОблМ.Параметры.Низ=GTIN.МатериалНиза;
			Если ЗначениеЗаполнено(GTIN.Изготовитель) Тогда
				ОблМ.Параметры.Изготовитель=GTIN.Изготовитель	;
			Иначе
				ОблМ.Параметры.Изготовитель=GTIN.ИННПроизводителяИмпортёра;
			КонецЕсли;
			ОблМ.Параметры.страна=GTIN.СтранаПроизводства;
			ОблМ.Параметры.Дата=Формат(Объект.Дата,"ДЛФ=Д");
			ОблМ.Параметры.Сезон=GTIN.Сезон;
			ОблМ.Параметры.Адрес=GTIN.ИННПроизводителяИмпортёра.ЮридическийАдрес;
			
			ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			//ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
	CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
		ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
		
				ГТИН=Сред(ГТИН,14+3);
			
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
				ГТИН=Сред(ГТИН,6);
			
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			
			
Если ЗначениеЗаполнено(GTIN.КодВУчетнойСистеме) тогда
				ГУДИ=GTIN.КодВУчетнойСистеме;
			Иначе
				ГУДИ=xmlString(GTIN.GTIN);
			Конецесли;			//ОблМ.Параметры.ШтрихКод=ГУДИ;
			
			ОблМ.Параметры.ШтрихКод=ГУДИ;
			Попытка
				Если ВерсияПравильная Тогда
			Картинка = ГенераторМатрицы.Сгенерировать(ООО); Иначе					ГенераторМатрицы=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();

					Картинка = ГенераторМатрицы.Сгенерировать(ООО);
КонецЕсли;
			ОблМ.Рисунки.ДатаМ.Картинка=Новый Картинка(Картинка);
			Если ЗначениеЗАполнено(ГУДИ) Тогда
				Если ВерсияПравильная Тогда
			Генератор=Обработки.ГенерацияEAN13_ХамелеонЦРПТ.Создать();
		
			Картинка = Генератор.Сгенерировать(ГУДИ);
		Иначе
					Генератор=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();
		
			Картинка = Генератор.Сгенерировать13(ГУДИ);

			КонецЕсли;
			ОблМ.Рисунки.ШтрихКод_1.Картинка=Новый Картинка(Картинка);
			КонецЕсли;
			
			
			Исключение
				Сообщить("Для печати Data Matrix необходим релиз 8.3.9 или выше");
				//Возврат;
			КонецПопытки;
		
							
				Если ПервыйРисунок Тогда
					Если НЕ Таб.ПроверитьВывод(ОблМ) Тогда
						Таб.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					Таб.Вывести(ОблМ);
					ПервыйРисунок=ложь;
				Иначе
					Таб.Присоединить(ОблМ);
					
					ПервыйРисунок=Истина;
					
				Конецесли;
			
			КонецЦикла;
			КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьКолонкуКоличествоПолучено(Команда)
	// Вставить содержимое обработчика.
	ЗаполнитьКоличествуПолучено();
	ЭтаФорма.Записать();
КонецПроцедуры
Процедура ЗаполнитьКоличествуПолучено()
	Для Каждого Стр_1 Из Объект.Товары Цикл
		Стр_1.КоличествоПолучено=0;
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НомераКМ_ХамелеонЦРПТ.НомерКМ
			|ИЗ
			|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
			|ГДЕ
			|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа";
		
		Запрос.УстановитьПараметр("ДокументЗаказа", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
		Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда 
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Стр=ВыборкаДетальныеЗаписи;
				cis=Сред(СтрЗаменить(Стр.НомерКМ,"%1D",""),1,38);
						Если Сред(cis,32,3)<>"240" Тогда
								cis=Сред(cis,1,31);
							КонецЕсли;
					
				Если Число(Стр_1.GTIN.GTIN)=Число(Сред(cis,3,14)) Тогда
					Стр_1.КоличествоПолучено=Стр_1.КоличествоПолучено+1;
				КонецЕсли;
				
			КонецЦикла;
		
		Иначе
		
			Для Каждого Стр_2 Из Объект.КМИзAPI Цикл
				Если Число(Стр_1.GTIN.GTIN)=Число(Сред(Стр_2.НомерКМ,3,14)) Тогда
					Стр_1.КоличествоПолучено=Стр_1.КоличествоПолучено+1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Конеццикла;
КонецПроцедуры


&НаКлиенте
Процедура ШтрихКодАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если СтрДлина(Текст)>=13 Тогда
		СтандартнаяОбработка=Ложь;
		ШтрихКод=Текст;
		  ЗаполнитьИнфуПоШтриху();
		ПодключитьОбработчикОЖидания("аа",0.1,Истина);
КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьИнфуПоШтриху(Стр_1=Неопределено)
	 	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	ШтрихКод=СокрЛП(ШтрихКод);
		
		              			Продукция_2=Неопределено;
		Попытка
			Продукция_2=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",число(ШтрихКод));
		исключение
		КонецПопытки;
		Если Не ЗначениеЗАполнено(Продукция_2) Тогда
			Продукция_2=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("КодВУчетнойСистеме",ШтрихКод);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Продукция_2) Тогда
			Сообщить("Не правильный отсканированный штрихкод "+ШтрихКод);
			Возврат;
		КонецЕсли;
		НСтр=ОБъект.Товары.НайтиСтроки(Новый Структура("GTIN",Продукция_2));
		Если НСтр.Количество()=0 Тогда
			НСтр=Объект.Товары.Добавить();
			ПолучитьПараметрыПоПльзователию=ПолучитьПараметрыПоПользователю(Объект.ТекущийПользователь);
			ЗаполнитьЗначенияСвойств(НСтр, ПолучитьПараметрыПоПльзователию);
			НСтр.КодТНВЭД=Продукция_2.КодТНВЭД;
			Если Не ЗначениезАполнено(НСтр.КодТНВЭД) Тогда
				НСтр.КодТНВЭД=Продукция_2.КодТНВЭДКороткий;
			
				
			КонецЕсли;
			Если Продукция_2.Остатки Тогда
						НСтр.СпособВыпускаТоваров="Остаток";
				
				ИначеЕсли Продукция_2.СтранаПроизводства.Альфа2="RU" Тогда
						НСтр.СпособВыпускаТоваров="Производство в РФ";
					Иначе
								НСтр.СпособВыпускаТоваров="Ввезен в РФ";
						
					КонецЕсли;
		Иначе
			НСтр=Нстр[0];
		КонецЕсли;
		НСтр.GTIN=Продукция_2;
			НСтр.НомерСтрокиСвязи=НСтр.ПолучитьИдентификатор();
			НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
		    НСтр.Обрабатывать=Истина;
	 	ТекД=НСтр;
		
	ЗаполнитьЗначенияСвойств(ТекД,ТоварыGTINПриИзмененииНаСервере(ТекД.GTIN));

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры



&НаКлиенте
Процедура ШтрихКодПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	ЗаполнитьИнфуПоШтриху();
	ПодключитьОбработчикОЖидания("аа",0.1,Истина);
КонецПроцедуры

&НаКлиенте
Процедура аа() Экспорт
	ШтрихКод="";
	ЭтаФорма.ТекущийЭлемент=Элементы.ШтрихКод;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Вставить содержимое обработчика.
	//Если Не ЗначениеЗаполнено(ТекущийПользователь) тогда
	//	Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	//	ТекущийПользователь=Форм.Пользователь;
	//КонецЕсли;
	ЭтаФорма.Активизировать();
	Если Не ЗначениеЗАполнено(Объект.ТекущийПользователь) Тогда
		Обр=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
		Объект.ТекущийПользователь=Обр.Пользователь;
		ТекущийПользователь=Объект.ТекущийПользователь;
		ТекущийПользовательПриИзменении(Отказ);
		
	Конецесли;
	
	Обр=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Если НЕ Обр.Открыта() Тогда
		Обр.Открыть();
		ЭтаФорма.Активизировать();
	Конецесли;
		ТекущийПользователь=Обр.Пользователь;
	
	НачатьПолучениеКаталогаВременныхФайлов(Новый ОписаниеОповещения("ПослеПолученияКаталога",Этаформа));
	ПодключитьОбработчикОжидания("выаыва",0.1,Истина);
	
	

    Попытка
	Thumbprint_1=ПолучитьИзПользователя();	
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика"
				 Тогда
				 Возврат;
				Конецесли;
	
		
		АдресРаздробить=Thumbprint_1.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
		
	
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
			
			
		
					Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;

			Срегистра="";
			СерийныйНомер="";
	  	Куки=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитькукиВСУЗ(Thumbprint_1,,Срегистра,СерийныйНомер);
			
		Если Не ЗначениеЗаполнено(Куки) 
			ИЛИ Не ЗначениеЗаполнено(Срегистра) ИЛИ Не ЗначениеЗаполнено(СерийныйНомер) 
			Тогда
			
		//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(Thumbprint_1.Thumbprint_1,"");
		//	Если УжеОтправили<>Истина Тогда
		//		 ПолучитьТокенИИД(Команда,Истина)
		//	КонецЕсли;
			Возврат;
			
		КонецЕсли;
		
		ОМС=Сред(Куки,Найти(Куки,"omsId=")+6);
		
		Если Найти(ОМС,";")>0 Тогда
			ОМС=Сред(ОМС,1,Найти(ОМС,";")-1);
			
		КонецЕсли;
		
///		Объект.ИдентификаторСУЗ=ОМС;
		
							куки=СтрЗаменить(куки,"Path=/, ","");
							куки=СтрЗаменить(куки,"path=/,","");
		Куки=Куки+"certSerial="+СерийныйНомер+"; tokenPart1="+Сред(СРегистра,1,4000)+"; "+
					"tokenPart2="+Сред(СРегистра,4001) ;
					
				
					//HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/enterpriseProfiles/"+ОМС+"/clientDevices?limit=10&skip=0"); //"static/1555676332000/js/main/preload.js");
					HTTPЗапрос = Новый HTTPЗапрос("/webapi/v1/contractors/active"); //"static/1555676332000/js/main/preload.js");
					HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
				
					
				Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
				Текст1=Ответ.ПолучитьТелоКакСтроку();
				
				
				
				NNN_20=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);
				
				
		//	Попытка
				СоздатьОбновитьСправочникЦСМ(NNN_20);
		//	Исключение
		//	КонецПопытки;
			
	Исключение
	КонецПопытки;
	
	
КонецПроцедуры
Процедура СоздатьОбновитьСправочникЦСМ(NNN_20)
	Элементы.СервисПровайдер.СписокВыбора.Очистить();
	Для Каждого Стр_22 Из NNN_20.result Цикл
		
		СпрПр=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("guid_СервисПровайдера",
		Стр_22.contractorId);
		Если ЗначениеЗаполнено(СпрПр) Тогда
			СпрПр=СпрПр.ПолучитьОбъект()
		Иначе
			СпрПр=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрПр.guid_СервисПровайдера=Стр_22.contractorId;
		Конецесли;
		СпрПр.Наименование=Стр_22.name;
		СпрПр.НаименованиеПолное=Стр_22.nameOrTin;
		Если Стр_22.role="CM" Тогда
			СпрПр.СпособИзготовления=Перечисления.СпособИзготовленияСИ_ХамелеонЦРПТ.CM;
		ИначеЕсли Стр_22.role="CL" Тогда
			СпрПр.СпособИзготовления=Перечисления.СпособИзготовленияСИ_ХамелеонЦРПТ.CL;
		ИначеЕсли Стр_22.role="CEM"  Тогда
			СпрПр.СпособИзготовления=Перечисления.СпособИзготовленияСИ_ХамелеонЦРПТ.ЦентрЭтикетированияИМаркировки;
		Иначе
			СпрПр.СпособИзготовления=Перечисления.СпособИзготовленияСИ_ХамелеонЦРПТ.Самостоятельно;
		КонецЕсли;
		СпрПр.ИНН=Стр_22.taxIdentificationNumber;
		СпрПр.СтранаПроисхождения=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоРеквизиту("Альфа2",Стр_22.country);
		
		СпрПр.Записать();
		
		Элементы.СервисПровайдер.СписокВыбора.Добавить(СпрПр.Ссылка);
	Конеццикла;
	
	
КонецПроцедуры
			


&НаКлиенте
Процедура выаыва() Экспорт
	ИзменитьВидимостьОстатков()
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьОстатков()
	Элементы._1Марта2020.Видимость=Объект.СпособВыпускаТоваров=ПредопределенноеЗначение("Перечисление.СпособВыпускаТоваров_ХамелеонЦРПТ.МаркировкаОстатков");
	УстВидим()
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияКаталога(Кат,ДД) Экспорт
	КаталогВременныхФайловНаКлиенте=Кат;
КонецПроцедуры
&НаКлиенте
Процедура ЗаполнитьКодТНВЭД(Команда)
	// Вставить содержимое обработчика.
	ОткрытьФорму("Справочник.КодТНВЭД_ХамелеонЦРПТ.ФормаВыбора",,,,,,Новый ОписаниеОповещения("ПослеВыборкааКодТВЭД",ЭтаФорма,Элементы.Товары.ВыделенныеСтроки));
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыборкааКодТВЭД(РР,ДД) Экспорт
	Если РР<>Неопределено Тогда
		Для Каждого Стр_1 Из ДД Цикл
			Стр=Объект.Товары.НайтиПоИдентификатору(Стр_1);
			Стр.КодТНВЭД=РР;
			
			ЗаписатьТНВЭД(Стр.GTIN,Стр.КодТНВЭД)
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ПечатьНомеровКМПоВыделеннымТоварамНаСервере(Таб,МассивКМРаспечатали)
	// Вставить содержимое обработчика.
	Мак=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	ОблМ=Мак.ПолучитьОбласть("Строка|Шапка");
	ПервыйРисунок=Истина;
	
	НомерПП=0;
	Для Каждого Стр_2 Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		
		Стр=Объект.Товары.НайтиПоИдентификатору(Стр_2);
		ГТИН_1=Стр.GTIN.GTIN;
			GTIN=Стр.GTIN;
			
			
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ КАК НомерКМ,
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий
		|ИЗ
		|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
		|ГДЕ
		|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа";
	
	Запрос.УстановитьПараметр("ДокументЗаказа", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВерсияПравильная Тогда
	ГенераторМатрицы=Обработки.ГенерацияDataMatrix_ХамелеонЦРПТ.Создать();
	ГенераторМатрицы.Инициализировать();
	                           КонецЕсли;
	Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Стр_1=ВыборкаДетальныеЗаписи;
		      	НомерПП=НомерПП+1;
				
		
				Если Число(ГТИН_1)<>Число(Сред(Стр_1.НомерКМ,3,14)) Тогда
					Продолжить;
				КонецЕсли;
				
				
				Если СоответствоватьТребованиямЦРПТ=Истина Тогда
				
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	КМРаспечатано_ХамелеонЦРПТ.Распечатан,
						|	КМРаспечатано_ХамелеонЦРПТ.cis
						|ИЗ
						|	РегистрСведений.КМРаспечатано_ХамелеонЦРПТ КАК КМРаспечатано_ХамелеонЦРПТ
						|ГДЕ
						|	КМРаспечатано_ХамелеонЦРПТ.cis = &cis";
					
					Запрос.УстановитьПараметр("cis", Стр_1.НомерКМ_Короткий);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи_1 = РезультатЗапроса.Выбрать();
					НашлиКМЭЭ=ЛОжь;
					Пока ВыборкаДетальныеЗаписи_1.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						если ВыборкаДетальныеЗаписи_1.cis=Стр_1.НомерКМ_Короткий 
							И ВыборкаДетальныеЗаписи_1.Распечатан=Истина Тогда
							НашлиКМЭЭ=Истина;
							Прервать;
						Конецесли;
						
					КонецЦикла;
					Если НашлиКМЭЭ=Истина Тогда
						Продолжить;
					Конецесли;
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

					//РегДв=РегистрыСведений.КМРаспечатано_ХамелеонЦРПТ.СоздатьНаборЗаписей();
					//РегДв.Отбор.cis.Установить(Стр.НомерКМ_Короткий);
					МассивКМРаспечатали.Добавить(Новый Структура("cis,НомерПП",Стр_1.НомерКМ_Короткий,НомерПП));
					
					//РегДв.Отбор.НомерПП.Установить(НомерПП);
					//Добав=РегДв.Добавить();
					//Добав.cis=Стр.НомерКМ_Короткий;
					//Добав.НомерПП=НомерПП;
					//Добав.Распечатан=Истина;
					//РегДв.Записать(Истина);
				
			Иначе
					
				//РегДв=		
					
			Конецесли;
			

			
			ОблМ.Параметры.Марка=GTIN.БрендТорговаяМарка;
			Если ЗначениеЗаполнено(GTIN.Размер) Тогда
				ОблМ.Параметры.Размер=GTIN.Размер;
			Иначе
				ОблМ.Параметры.Размер="--";
			Конецесли;
			ОблМ.Параметры.Артикул=GTIN.МодельПроизводителяАртикул;
			ОблМ.Параметры.Проудкция=GTIN;
			ОблМ.Параметры.Цвет=GTIN.Цвет;
			ОблМ.Параметры.Вверх=GTIN.МатериалВерха;
			ОблМ.Параметры.Подладка=GTIN.МатериалПодкладки;
			ОблМ.Параметры.Стелька=GTIN.Стелька;
			ОблМ.Параметры.Низ=GTIN.МатериалНиза;
			Если ЗначениеЗаполнено(GTIN.Изготовитель) Тогда
				ОблМ.Параметры.Изготовитель=GTIN.Изготовитель	;
			Иначе
				ОблМ.Параметры.Изготовитель=GTIN.ИННПроизводителяИмпортёра;
			КонецЕсли;
			ОблМ.Параметры.страна=GTIN.СтранаПроизводства;
			ОблМ.Параметры.Дата=Формат(GTIN.ДатаПубликации,"ДЛФ=Д");
			ОблМ.Параметры.Сезон=GTIN.Сезон;
			ОблМ.Параметры.Адрес=GTIN.ИННПроизводителяИмпортёра.ЮридическийАдрес;
			
			ООО=РаскодироватьСтроку(Стр_1.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			//ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
	CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
		ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
		
				ГТИН=Сред(ГТИН,14+3);
			
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
				ГТИН=Сред(ГТИН,6);
				
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			
			
Если ЗначениеЗаполнено(GTIN.КодВУчетнойСистеме) тогда
				ГУДИ=GTIN.КодВУчетнойСистеме;
			Иначе
				ГУДИ=xmlString(GTIN.GTIN);
			Конецесли;			//ОблМ.Параметры=ГУДИ;
			ОблМ.Параметры.ШтрихКод=ГУДИ;
			
			Попытка
				Если ВерсияПравильная Тогда
			Картинка = ГенераторМатрицы.Сгенерировать(ООО);
		Иначе
								ГенераторМатрицы=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();

					Картинка = ГенераторМатрицы.Сгенерировать(ООО);
КонецЕсли;
			ОблМ.Рисунки.ДатаМ.Картинка=Новый Картинка(Картинка);
			Если ЗначениеЗАполнено(ГУДИ) Тогда
				Если ВерсияПравильная Тогда
			Генератор=Обработки.ГенерацияEAN13_ХамелеонЦРПТ.Создать();
		
			Картинка = Генератор.Сгенерировать(ГУДИ);
		Иначе
						Генератор=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();
		
			Картинка = Генератор.Сгенерировать13(ГУДИ);

	КонецЕсли;
			ОблМ.Рисунки.ШтрихКод_1.Картинка=Новый Картинка(Картинка);
			КонецЕсли;
			
			
			Исключение
				Сообщить("Для печати Data Matrix необходим релиз 8.3.9 или выше");
				//Возврат;
			Конецпопытки;
							
				Если ПервыйРисунок Тогда
					Если НЕ Таб.ПроверитьВывод(ОблМ) Тогда
						Таб.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					Таб.Вывести(ОблМ);
					ПервыйРисунок=ложь;
				Иначе
					Таб.Присоединить(ОблМ);
					
					ПервыйРисунок=Истина;
					
				Конецесли;
		           Конеццикла;
	                          
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Продолжить;
КонецЕсли;
			
			
			Для Каждого Стр_1 Из ОБъект.КМИзAPI Цикл
				
							НомерПП=НомерПП+1;
		Если Число(ГТИН_1)<>Число(Сред(Стр_1.НомерКМ,3,14)) Тогда
					Продолжить;
				КонецЕсли;
				
		
				
Если СоответствоватьТребованиямЦРПТ=Истина Тогда
				
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	КМРаспечатано_ХамелеонЦРПТ.Распечатан,
						|	КМРаспечатано_ХамелеонЦРПТ.cis
						|ИЗ
						|	РегистрСведений.КМРаспечатано_ХамелеонЦРПТ КАК КМРаспечатано_ХамелеонЦРПТ
						|ГДЕ
						|	КМРаспечатано_ХамелеонЦРПТ.cis = &cis";
					
					Запрос.УстановитьПараметр("cis", Стр_1.НомерКМ_Короткий);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи_1 = РезультатЗапроса.Выбрать();
					НашлиКМЭЭ=ЛОжь;
					Пока ВыборкаДетальныеЗаписи_1.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						если ВыборкаДетальныеЗаписи_1.cis=Стр_1.НомерКМ_Короткий 
							И ВыборкаДетальныеЗаписи_1.Распечатан=Истина Тогда
							НашлиКМЭЭ=Истина;
							Прервать;
						Конецесли;
						
					КонецЦикла;
					Если НашлиКМЭЭ=Истина Тогда
						Продолжить;
					Конецесли;
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

					//РегДв=РегистрыСведений.КМРаспечатано_ХамелеонЦРПТ.СоздатьНаборЗаписей();
					//РегДв.Отбор.cis.Установить(Стр.НомерКМ_Короткий);
					МассивКМРаспечатали.Добавить(Новый Структура("cis,НомерПП",Стр_1.НомерКМ_Короткий,НомерПП));
					
					//РегДв.Отбор.НомерПП.Установить(НомерПП);
					//Добав=РегДв.Добавить();
					//Добав.cis=Стр.НомерКМ_Короткий;
					//Добав.НомерПП=НомерПП;
					//Добав.Распечатан=Истина;
					//РегДв.Записать(Истина);
				
			Иначе
					
				//РегДв=		
					
			Конецесли;
			
				
			ОблМ.Параметры.Марка=GTIN.БрендТорговаяМарка;
			Если ЗначениеЗаполнено(GTIN.Размер) Тогда
				ОблМ.Параметры.Размер=GTIN.Размер;
			Иначе
				ОблМ.Параметры.Размер="--";
			Конецесли;
			ОблМ.Параметры.Артикул=GTIN.МодельПроизводителяАртикул;
			ОблМ.Параметры.Проудкция=GTIN;
			ОблМ.Параметры.Цвет=GTIN.Цвет;
			ОблМ.Параметры.Вверх=GTIN.МатериалВерха;
			ОблМ.Параметры.Подладка=GTIN.МатериалПодкладки;
			ОблМ.Параметры.Стелька=GTIN.Стелька;
			ОблМ.Параметры.Низ=GTIN.МатериалНиза;
			Если ЗначениеЗаполнено(GTIN.Изготовитель) Тогда
				ОблМ.Параметры.Изготовитель=GTIN.Изготовитель	;
			Иначе
				ОблМ.Параметры.Изготовитель=GTIN.ИННПроизводителяИмпортёра;
			КонецЕсли;
			ОблМ.Параметры.страна=GTIN.СтранаПроизводства;
			ОблМ.Параметры.Дата=Формат(GTIN.ДатаПубликации,"ДЛФ=Д");
			ОблМ.Параметры.Сезон=GTIN.Сезон;
			ОблМ.Параметры.Адрес=GTIN.ИННПроизводителяИмпортёра.ЮридическийАдрес;
			
			ООО=РаскодироватьСтроку(Стр_1.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			//ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
	CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
					ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
		
				ГТИН=Сред(ГТИН,14+3);
			
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
				ГТИН=Сред(ГТИН,6);
			
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			
			
Если ЗначениеЗаполнено(GTIN.КодВУчетнойСистеме) тогда
				ГУДИ=GTIN.КодВУчетнойСистеме;
			Иначе
				ГУДИ=xmlString(GTIN.GTIN);
			Конецесли;			//ОблМ.Параметры=ГУДИ;
			ОблМ.Параметры.ШтрихКод=ГУДИ;
			
			Попытка
				Если ВерсияПравильная Тогда
			Картинка = ГенераторМатрицы.Сгенерировать(ООО);
		Иначе
								ГенераторМатрицы=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();

					Картинка = ГенераторМатрицы.Сгенерировать(ООО);
КонецЕсли;
			ОблМ.Рисунки.ДатаМ.Картинка=Новый Картинка(Картинка);
			Если ЗначениеЗАполнено(ГУДИ) Тогда
				Если версияПравильная Тогда
			Генератор=Обработки.ГенерацияEAN13_ХамелеонЦРПТ.Создать();
		
			Картинка = Генератор.Сгенерировать(ГУДИ);
		Иначе
						Генератор=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();
		
			Картинка = Генератор.Сгенерировать13(ГУДИ);

			КонецЕсли;
			ОблМ.Рисунки.ШтрихКод_1.Картинка=Новый Картинка(Картинка);
			КонецЕсли;
			
			
			Исключение
				Сообщить("Для печати Data Matrix необходим релиз 8.3.9 или выше");
				//Возврат;
			Конецпопытки;
							
				Если ПервыйРисунок Тогда
					Если НЕ Таб.ПроверитьВывод(ОблМ) Тогда
						Таб.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					Таб.Вывести(ОблМ);
					ПервыйРисунок=ложь;
				Иначе
					Таб.Присоединить(ОблМ);
					
					ПервыйРисунок=Истина;
					
				Конецесли;
		           Конеццикла
	Конеццикла;
	
	 КонецПроцедуры


&НаКлиенте
Процедура ПечатьНомеровКМПоВыделеннымТоварам(Команда)
		Таб=Новый ТабличныйДокумент;

		МассивКМРаспечатали=Новый Массив;
		
	ПечатьНомеровКМПоВыделеннымТоварамНаСервере(Таб,МассивКМРаспечатали);
	Таб.ТолькоПросмотр=Истина;
	Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
	
	
	
		Таб.Показать();
			ЗаполнитьрегистрПечати(МассивКМРаспечатали);

КонецПроцедуры


&НаКлиенте
Процедура ПолучитьПо1Штуке(Команда)
		// Вставить содержимое обработчика.
	Если Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован") Тогда
		Сообщить("По документу "+Строка(объект.Ссылка)+" уже получены номера КМ");
		Возврат;
	КонецЕсли;
				Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеУказанияКоличества",ЭтаФорма));
	Форм.Число=1;
	Форм.Заголовок="Укажите число получаемых КМ";

	//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеУказанияКоличества",ЭтаФорма),1,"Укажите число получаемых КМ",10,0);		
КонецПроцедуры


Функция ЗагрузканаСервереПолучитьКМИзКоличество(ПараметрыДлякилента,Адрес,Порт,РР,Защищ)
			Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,,Защищ);
			КонецЕсли;
//				 Состояние("Получение "+Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
//				 0);
				
				НомерПП=0;
				Для Каждого Стр Из Объект.Товары Цикл
					НомерПП=НомерПП+1;
					Пока Стр.КоличествоКМ-Стр.КоличествоПолучено>0 Цикл
						
						//Получить=1;
						Получить=Мин(Стр.КоличествоКМ-Стр.КоличествоПолучено,РР);
						
						HTTPЗапрос = Новый HTTPЗапрос("api/codes?orderId="+Объект._Order_ID+"&orderLineId="+СокрЛП(Стр.ИДСУЗ)+"&quantity="+Формат(Получить,"ЧГ="));
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
						Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
							ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП);
						КонецЕсли;
						//Стр.КоличествоПолучено=Получить;
						 Попытка
							//ЧтениеJSON = Новый ЧтениеJSON;
							//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
							Если Ответ.КодСостояния=200 Тогда
								НаСервереСДобавлениемРегистра(ТекстДокумента,Стр.ID);
	                            
							   	// ЭтаФорма.Прочитать();
							        	 Стр.КоличествоПолучено=Стр.КоличествоПолучено+Получить; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
										 
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
//										 Состояние("Получено "+Формат(Объект.Товары.Итог("КоличествоПолучено"),"ЧГ=")+" из "+
//										 Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
//										 Окр(Объект.Товары.Итог("КоличествоПолучено")*100/Объект.Товары.Итог("КоличествоКМ")));
								//НайтиВсеOrderlineПоНомеркуКМ();
							Иначе
								NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
								
								Если NNN.success=Ложь Тогда
								globalErrors="";
								Для Каждого Стр_1 Из NNN.globalErrors Цикл
									globalErrors=globalErrors+Стр_1+"
									|"
								Конеццикла;
										Если Найти(globalErrors,"Not enough balance")>0 Тогда
											Сообщить("Необходимо пополнить баланс в ЦРПТ");
										Конецесли;
								
								Сообщить("Не удалось обработать документ: "+globalErrors);
								Если Найти(globalErrors,"Требуемое количество ")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=Число(СокрЛП(Сред(globalErrors,Найти(globalErrors,"осталось использовать ")+22)));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше,чем размер буфера")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше, чем размер буфера")>0 Тогда
			
						НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								ИначеЕсли Найти(globalErrors,"DELETE")>0 Тогда
									Стр.КоличествоПолучено=Стр.КоличествоКМ ; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
									
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕСЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Табак"
			)
			 ИЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак"
			)
			Тогда
								 	Сообщить("Возможно указано заказанное количество меньше 2 штук!!");
								Конецесли;
								
							ИначеЕсли NNN.success=Истина Тогда
								   Прервать;
								
							КонецЕсли;
							  КонецЕсли; 
							
						Исключение
							
							Сообщить("Ошибка "+Ответ.ПолучитьТелоКакСтроку());
						 КонецПопытки;
						
						
					Конеццикла;
				КонецциклА;	
				Возврат Истина
КонецФункции
&НаКлиенте
 Процедура ПослеУказанияКоличества(РР,ДД) Экспорт
	Если Не ЗначениеЗаполнено(РР) Тогда
		Возврат
	КонецЕсли;
	
	ЭтаФорма.Модифицированность=Истина;
	
	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Текст=Форм.Пользователь;
	Форм.Пользователь=Объект.ТекущийПользователь;
	ПараметрыДлякилента=Неопределено;
	Если Форм.НаКлиенте(ПараметрыДлякилента) Тогда
		Форм.Пользователь=Текст;
	
		
		
		АдресРаздробить=ПараметрыДлякилента.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			ПоказатьПредупреждение(,"В пользователе не заполнен адрес СУЗ");
			Возврат;
			
		КонецЕсли;
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
		
Если ОбработкаWEBНаСервере Тогда
		Если НЕ ЗагрузканаСервереПолучитьКМИзКоличество(ПараметрыДлякилента,Адрес,Порт,РР,Защищ) Тогда
					ПоказатьПредупреждение(,"Не удалось подключиться к СУЗ");
	
		КонецЕсли;
		
		
	Иначе
		
			Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,,Защищ);
			КонецЕсли;
				 Состояние("Получение "+Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
				 0);
				
				НомерПП=0;
				Для Каждого Стр Из Объект.Товары Цикл
					НомерПП=НомерПП+1;
					Пока Стр.КоличествоКМ-Стр.КоличествоПолучено>0 Цикл
						
						//Получить=1;
						Получить=Мин(Стр.КоличествоКМ-Стр.КоличествоПолучено,РР);
						
						HTTPЗапрос = Новый HTTPЗапрос("api/codes?orderId="+Объект._Order_ID+"&orderLineId="+СокрЛП(Стр.ИДСУЗ)+"&quantity="+Формат(Получить,"ЧГ="));
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
						Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
							ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП);
						КонецЕсли;
						//Стр.КоличествоПолучено=Получить;
						 Попытка
							//ЧтениеJSON = Новый ЧтениеJSON;
							//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
							Если Ответ.КодСостояния=200 Тогда
								НаСервереСДобавлениемРегистра(ТекстДокумента,Стр.ID);
	                            
							   	// ЭтаФорма.Прочитать();
							        	 Стр.КоличествоПолучено=Стр.КоличествоПолучено+Получить; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
										 
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
										 Состояние("Получено "+Формат(Объект.Товары.Итог("КоличествоПолучено"),"ЧГ=")+" из "+
										 Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
										 Окр(Объект.Товары.Итог("КоличествоПолучено")*100/Объект.Товары.Итог("КоличествоКМ")));
								//НайтиВсеOrderlineПоНомеркуКМ();
							Иначе
								NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
								
								Если NNN.success=Ложь Тогда
								globalErrors="";
								Для Каждого Стр_1 Из NNN.globalErrors Цикл
									globalErrors=globalErrors+Стр_1+"
									|"
								Конеццикла;
										Если Найти(globalErrors,"Not enough balance")>0 Тогда
											Сообщить("Необходимо пополнить баланс в ЦРПТ");
										Конецесли;
								
								Сообщить("Не удалось обработать документ: "+globalErrors);
								Если Найти(globalErrors,"Требуемое количество ")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=Число(СокрЛП(Сред(globalErrors,Найти(globalErrors,"осталось использовать ")+22)));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше,чем размер буфера")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше, чем размер буфера")>0 Тогда
			
						НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
					ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
								ИначеЕсли Найти(globalErrors,"DELETE")>0 Тогда
									Стр.КоличествоПолучено=Стр.КоличествоКМ ; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
									
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		ИначеЕСЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Табак")
			ИЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак")
			Тогда
								 	Сообщить("Возможно указано заказанное количество меньше 2 штук!!");
								Конецесли;
								
							ИначеЕсли NNN.success=Истина Тогда
								   Прервать;
								
							КонецЕсли;
							  КонецЕсли; 
							
						Исключение
							
							Сообщить("Ошибка "+Ответ.ПолучитьТелоКакСтроку());
						 КонецПопытки;
						
						
					Конеццикла;
				КонецциклА;
			КонецЕсли;
				
	Иначе
		Форм.Пользователь=Текст;
	КонецЕсли;			
	
	ЭтаФорма.Записать();
	Текст=Форм.Пользователь;
	Форм.Пользователь=Объект.ТекущийПользователь;
	 Форм.ОбновитьСтатусыДокументов("");
		Форм.Пользователь=Текст;
	 ЭтаФорма.Прочитать();  

КонецПроцедуры


&НаСервере
Процедура ВосстановитьМаркиНаСервере()
	// Вставить содержимое обработчика.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтправленныеПолученные_ХамелеонЦРПТ.Файл
		|ИЗ
		|	РегистрСведений.ОтправленныеПолученные_ХамелеонЦРПТ КАК ОтправленныеПолученные_ХамелеонЦРПТ
		|ГДЕ
		|	ОтправленныеПолученные_ХамелеонЦРПТ.Документ = &Документ
		|	И ОтправленныеПолученные_ХамелеонЦРПТ.Вид ПОДОБНО &Вид";
	
	Запрос.УстановитьПараметр("Вид", "Получили марки%");
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Хр=ВыборкаДетальныеЗаписи.Файл;
		Если Хр<>Неопределено тогда
			
			ТекстДокумента=Хр.Получить();
			Попытка
				НаСервереСДобавлениемРегистра(ТекстДокумента,"")
			Исключение
			КонецПопытки;
			//ЗапишемВРегистр_Маркиf(Текст,НомерСтроки)			
		Конецесли;
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ВосстановитьМарки(Команда)
	ВосстановитьМаркиНаСервере();
	УстВидим();
	ЭтаФорма.Записать(Новый Структура("РежимЗаписиДокумента",РежимЗаписиДокумента.Проведение));
КонецПроцедуры


&НаКлиенте
Процедура ОпределитьСтатусыПоКМ(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	МассивКМ=Новый массив;
	Для каждого Стр_1 Из Объект.КМИзAPI Цикл
		Стр_1.Статус="В ЦРПТ не найдено";
		МассивКМ.Добавить(Стр_1.НомерКМ_Короткий);
	Конеццикла;
	ОбработатьстатусыКМ(МассивКМ);
	
КонецПроцедуры

Функция РаскодируемНаСервере(НомерКМ)
	cis=Сред(СтрЗаменить(НомерКМ,"%1D",""),1,38);
							Если Сред(cis,32,3)<>"240" Тогда
							//	cis=Сред(cis,1,31);
							//Иначе
								cis=Сред(НомерКМ,1,Найти(НомерКМ,"%1D")-1);
								cis=РаскодироватьСтроку(cis,СпособКодированияСтроки.КодировкаURL);
								
								
							КонецЕсли;
					Возврат cis
					//РаскодироватьСтроку(cis,СпособКодированияСтроки.КодировкаURL);
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьТелоЗапросаПодключение(cis)
	МассивКодо=Новый Массив;
	          МассивКодо.Добавить(cis);
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("ids", МассивКодо);
			ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, "  ");
			
			ЗаписьJSON = Новый ЗаписьJSON();
			ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
			
			ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
			
			Возврат ЗаписьJSON.Закрыть();

КонецФункции

&НаКлиенте
Процедура РазбитьДокументыНаСтрокНаСервере()
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Записать();
	УФ=Объект.Ссылка;

	//Если Объект.Тип="" 
		
	//	 Тогда
		//ЭтаФорма.Закрыть();
		
		АА=10;
						Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВыбораКСтрок",ЭтаФорма,УФ));
	Форм.Число=АА;
	Форм.Заголовок="Выберите на сколько строк Вы хотите разбить документ";

		//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВыбораКСтрок",ЭтаФорма,УФ),АА,"Выберите на сколько строк Вы хотите разбить документ");
	//КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПослеВыбораКСтрок(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
		РазбитьДокумент(РР,ДД);
		ЭтаФорма.Закрыть();
	КонецЕсли;
КонецПроцедуры

Процедура РазбитьДокумент(РР,ДД)
	УдалитьНадо=ДД.ПолучитьОбъект();
	былПроведен=ложь;
	Если УдалитьНадо.Проведен Тогда
		УдалитьНадо.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		БылПроведен=Истина;
	КонецЕслИ;
	
	НовыйДокумент=Документы.ЗаказМарок_ХамелеонЦРПТ.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(НовыйДокумент,УдалитьНадо,,"Номер,_Order_ID,Статус,ОшибкаОтправки");
	НовыйДокумент.Дата=ТекущаяДата();
	
	
	МассивДокументовПервый=Новый Массив;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Справочник_Документ
		|ИЗ
		|	РегистрСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ КАК СопоставлениеСправочниковДокументов_ХамелеонЦРПТ
		|ГДЕ
		|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СправочникДокумент_Меркурия = &СправочникДокумент_Меркурия";
	
	Запрос.УстановитьПараметр("СправочникДокумент_Меркурия", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		МассивДокументовПервый.Добавить(ВыборкаДетальныеЗаписи.Справочник_Документ);
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	   КонецЕсли;
	Смещение=0;
	Для Каждого Стр Из УдалитьНадо.Товары Цикл
		Если СМещение>=РР Тогда
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			Если БылПроведен Тогда
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
			Для Каждого Стр_1 Из МассивДокументовПервый Цикл
				
				РегДв=РегистрыСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СоздатьНаборЗаписей();
				РегДв.Отбор.Справочник_Документ.Установить(Стр_1);
				Добав=РегДв.Добавить();
				Добав.Справочник_Документ=Стр_1;
				Добав.СправочникДокумент_Меркурия=НовыйДокумент.Ссылка;
				РегДв.Записать(Истина);
				
			Конеццикла;
			
			МассивДокументовПервый.Очистить();
			МассивДокументовПервый.Добавить(НовыйДокумент.Ссылка);
			
			
			
			НовыйДокумент=Документы.ЗаказМарок_ХамелеонЦРПТ.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(НовыйДокумент,УдалитьНадо,,"Номер,_Order_ID,Статус,ОшибкаОтправки");
				НовыйДокумент.Дата=Текущаядата();
				СМещение=0;
		КонецЕсли;
		Добав=НовыйДокумент.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Добав ,Стр);
		Добав.ИДСУЗ="";
		Добав.СтатусСтроки="";
		Добав.ID="";
		Добав.ПоследнийБлок="";
		СМещение=СМещение+1;
	Конеццикла;
	Если УдалитьНадо.Товары.Количество()>0 Тогда
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		Если БылПроведен Тогда
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Для Каждого Стр_1 Из МассивДокументовПервый Цикл
				
				РегДв=РегистрыСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СоздатьНаборЗаписей();
				РегДв.Отбор.Справочник_Документ.Установить(Стр_1);
				Добав=РегДв.Добавить();
				Добав.Справочник_Документ=Стр_1;
				Добав.СправочникДокумент_Меркурия=НовыйДокумент.Ссылка;
				РегДв.Записать(Истина);
				
			Конеццикла;
		
		
	КонецЕсли;
	УдалитьНадо.ПометкаУдаления=Истина;
	УдалитьНадо.Записать(РежимЗаписиДокумента.Запись);
		
КонецПроцедуры


&НаКлиенте
Процедура РазбитьДокументыНаСтрок(Команда)
	// Вставить содержимое обработчика.
	РазбитьДокументыНаСтрокНаСервере()
КонецПроцедуры


&НаКлиенте
Процедура ЗакрытьЗаказ(Команда,УжеОтправляли=Ложь) Экспорт
	// Вставить содержимое обработчика.
	ЭтаФорма.Модифицированность=Истина;
					ТекстЗакрытьБуфер="";
					ОтветЗакрытиеБуфера="";;
	
	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Текст=Форм.Пользователь;
	Форм.Пользователь=Объект.ТекущийПользователь;
	ПараметрыДлякилента=Неопределено;
	Если Форм.НаКлиенте(ПараметрыДлякилента) Тогда
		ТокенСУЗ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(ПараметрыДлякилента);
		Форм.Пользователь=Текст;
	
				АдресРаздробить=ПараметрыДлякилента.АдресСУЗ;
				Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
				Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
				Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
				Порт=Сред(Порт,Найти(Порт,":")+1);
				
				
				ТекстСайт=Адрес;
				Попытка
					Порт=число(Порт);
					ТекстСайт=ТекстСайт+":"+Формат(Порт,"ЧГ=");
				Исключение
					Порт=Неопределено;
				КонецПопытки;
				
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			ПоказатьПредупреждение(,"В пользователе не заполнен адрес СУЗ");
			Возврат;
			
		КонецЕсли;
		
		Если Найти(АдресРаздробить,"https")=1 Тогда
			ТекстСайт="https://"+ТекстСайт;
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
			ТекстСайт="http://"+ТекстСайт;
				Защищ=Неопределено;
			КонецЕсли;
				     ТекстСайт="POST "+ТекстСайт;
						
					Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
					                                                         
						HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,,Защищ);
					Иначе
						HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,,Защищ);
					КонецЕсли;
					
					КоличествоОгранчений=0;
					ВРегистре=Вргеистре(КоличествоОгранчений);
					НомерПП=0;
					
					сч=0;
					Для Каждого Стр Из Объект.Товары Цикл
						сч=1;
							НомерПП=НомерПП+1;
							Стр.СтатусСтроки="";
							Стр.ОшибкаПолучения="";
							//Если НЕ ЗначениеЗаполнено(Стр.ИДСУЗ)  Тогда
							//	Продолжить;
							//КонецЕсли;
							
							сТР.ОшибкаПолучения="Получено";
													 
												Стр.СтатусСтроки="Получено";
						//Если ОБъект.СУЗОбувь Тогда
						Если Стр.ПоследнийБлок="" Тогда
							Стр.ПоследнийБлок=0;
						КонецЕсли;
						
													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"Запрос № "+Формат(Сч,"ЧГ=");
													ОтветЗакрытиеБуфера=ОтветЗакрытиеБуфера+Символы.ПС+"Запрос № "+Формат(Сч,"ЧГ=");
													
													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+ТекстСайт+"api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)
													+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ;
													
													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"Заголовки";
													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"Content-Type:application/x-www-form-urlencoded;charset=UTF-8";
													ТекстЗакрытьБуфер=ТекстЗакрытьБуфер+Символы.ПС+"clientToken:"+ТокенСУЗ;
						
								HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)
								+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
						//	Иначе
						//		HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"buffer/close?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)
						//		+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
						//		
								
						//	КонецЕсли;
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
								Попытка
									Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
									ОтветЗакрытиеБуфера=ОтветЗакрытиеБуфера+Символы.ПС+Ответ.ПолучитьТелоКакСтроку();
									
									Если Ответ.КодСостояния=400    Тогда
										
										Если УжеОтправляли=Ложь Тогда
											
											ОчиститьДинамическийТокен(ПараметрыДлякилента.ТекущийПользователь,ПараметрыДлякилента.Thumbprint_1);
											ЗакрытьЗаказ(Команда,Истина) ;
											Возврат;
										Иначе
											ОчиститьДинамическийТокен(ПараметрыДлякилента.ТекущийПользователь,ПараметрыДлякилента.Thumbprint_1);
											Возврат;
										Конецесли;
									кОНЕЦеСЛИ;
								Исключение
								КонецПопытки;
								
								
								
																						 
													 
			КонецциклА;
						
												
		КонецЕсли;
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда

					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапишемВРЕГИСТР_ОтправленныеПолученные_ХамелеонЦРПТ(Объект.Ссылка,ТекстЗакрытьБуфер,"Закрыть заказ на КМ");
				
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапишемВРЕГИСТР_ОтправленныеПолученные_ХамелеонЦРПТ(Объект.Ссылка,ОтветЗакрытиеБуфера,"Ответ на закрытие заказ на КМ");
			Конецесли;			
			
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
			Текст=Форм.Пользователь;
			Форм.Пользователь=Объект.ТекущийПользователь;
			
			Форм.Пользователь=Текст;
			 ЭтаФорма.Прочитать();  
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭтикеток_Один(Таб) Экспорт
	
	Если Не ЗначениеЗАполнено(Объект._Order_ID) Тогда
		Возврат;
	КонецЕсли;
//	ПечатьЭти(Таб,Объект.Ссылка);
	МассивКМРаспечатали=Новый Массив;
	Если ЗначениеЗаполненО(ЧислоПараллельныхПотоков) тогда
//			МассивКМРаспечатали=Новый Массив;
			Таб = ПечатьЭти_Функция(МассивКМРаспечатали);
			//Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
			
			//Таб.Показать();
	Иначе
		//Таб=Новый ТабличныйДокумент;
		ПечатьЭти(Таб,Объект.Ссылка,МассивКМРаспечатали,СоответствоватьТребованиямЦРПТ);
		//Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
		
		//Таб.Показать();
	КонецЕсли;
	ЗаполнитьрегистрПечати(МассивКМРаспечатали);
	
КонецПроцедуры


&НаКлиенте
Процедура СпособВыпускаТоваровПриИзменении(Элемент)
	// Вставить содержимое обработчика.
//	Объект.Товары.Очистить();
УправлениеВидимостью();
ИзменитьВидимостьОстатков()
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
	//Если Не ЗначениеЗаполнено(Объект.СпособВыпускаТоваров) Тогда
	//	Объект.Товары.Очистить();
		//Отказ=Истина;
		//ПоказатьПредупреждение(,"Не выбрна способ выпуска товара");
		
		//ЭтаФорма.ТекущийЭлемент=Элементы.СпособВыпускаТоваров;

		//ОтменаРедактирования=Истина;
	//	Возврат;
	//КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборНесколько(РР,ДД) Экспорт
	Если РР<>Неопределено И РР.Количество()>0 Тогда
		
		ПолучитьПараметрыПоПльзователию=ПолучитьПараметрыПоПользователю(Объект.ТекущийПользователь);
		//ТекД=Элементы.Товары.ТекущиеДанные;
		//ЗаполнитьЗначенияСвойств(ТекД,ПолучитьПараметрыПоПльзователию);
		//ТекД.Обрабатывать=Истина;
		//ТекД.КоличествоКМ=1;
		
		Если ДД<>Неопределено тогда
			ДД.GTIN=РР[0];
			//ЗаполнитьЗначенияСвойств(ДД,ПолучитьПараметрыПоПльзователию);
			//ДД.Обрабатывать=Истина;
			//ДД.КоличествоКМ=1;
			ЗаполнитьЗначенияСвойств(ДД,ТоварыGTINПриИзмененииНаСервере(ДД.GTIN));
		Иначе
			ДобавР=Объект.Товары.Добавить();
			ДобавР.GTIN=РР[0];
			ЗаполнитьЗначенияСвойств(ДобавР,ПолучитьПараметрыПоПльзователию);
			ДобавР.Обрабатывать=Истина;
			ДобавР.КоличествоКМ=1;
			ЗаполнитьЗначенияСвойств(ДобавР,ТоварыGTINПриИзмененииНаСервере(ДобавР.GTIN));
			
			
		КонецЕсли;
		Если РР.Количество()>1 Тогда
			Для Сч=1 По РР.количество()-1 Цикл
				
				ДобавР=Объект.Товары.Добавить();
				ДобавР.GTIN=РР[Сч];
			ЗаполнитьЗначенияСвойств(ДобавР,ПолучитьПараметрыПоПльзователию);
			ДобавР.Обрабатывать=Истина;
			ДобавР.КоличествоКМ=1;
				ЗаполнитьЗначенияСвойств(ДобавР,ТоварыGTINПриИзмененииНаСервере(ДобавР.GTIN));
				
			Конеццикла;
		КонецЕсли;
		
		Элементы.Товары.ДобавитьСтроку();
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыGTINНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	//Если Не ЗначениеЗаполнено(Объект.СпособВыпускаТоваров) Тогда
	//	ПоказатьПредупреждение(,"Не выбрна способ выпуска товара");
	//	ЭтаФорма.ТекущийЭлемент=Элементы.СпособВыпускаТоваров;
	//	СтандартнаяОбработка=Ложь;
	//КонецЕсли;
	
	Параметры_1=Неопределено;
	ТекД=Элементы.Товары.ТекущиеДанные;
	Если ТекД<>Неопределено Тогда
		ГТИН=ТекД.GTIN;
		Если ЗначениеЗаполнено(ГТИН) Тогда
			Параметры_1=Новый Структура("ТекущаяСтрока",ГТИН);
		КонецЕсли;
	КонецЕсли;
	Форм=ОткрытьФорму("Справочник.Продукция_ХамелеонЦРПТ.Форма.ФормаВыбораМножество",Параметры_1,,,,,Новый оПисаниеОповещения("ВыборНесколько",ЭтаФорма,ТекД));
	СтандартнаяОбработка=Ложь;
	
	Стр=Форм.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Стр.ВидСравнения=ВидСравненияКомпоновкиДанных.НеРавно;
	Стр.Использование=Истина;
	Стр.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("СтатусКарточки");
	Стр.ПравоеЗначение=ПредопределенноеЗначение("Перечисление.СтатусыКарточекВНК_ХамелеонЦРПТ.archive"); 
	Стр.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
	
	
	Если Объект.СпособВыпускаТоваров=ПредопределенноеЗначение("Перечисление.СпособВыпускаТоваров_ХамелеонЦРПТ.ПроизведенВРФ") Тогда
		
		
		ГруппаЭлем=Форм.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаЭлем.ТипГруппы=ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
			Стр=ГруппаЭлем.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Стр.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
			Стр.Использование=Истина;
			Стр.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("СтранаПроизводства.Код");
			Стр.ПравоеЗначение="643"; 
			Стр.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		
			Стр=ГруппаЭлем.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Стр.ВидСравнения=ВидСравненияКомпоновкиДанных.НеЗаполнено;
			Стр.Использование=Истина;
			Стр.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("СтранаПроизводства");
			Стр.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
			
		ИначеЕсли Объект.СпособВыпускаТоваров=ПредопределенноеЗначение("Перечисление.СпособВыпускаТоваров_ХамелеонЦРПТ.ВвезенВРФ") Тогда
			
			ГруппаЭлем=Форм.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаЭлем.ТипГруппы=ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
			Стр=ГруппаЭлем.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Стр.ВидСравнения=ВидСравненияКомпоновкиДанных.НеРавно;
			Стр.Использование=Истина;
			Стр.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("СтранаПроизводства.Код");
			Стр.ПравоеЗначение="643"; 
			Стр.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		
			Стр=ГруппаЭлем.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Стр.ВидСравнения=ВидСравненияКомпоновкиДанных.Заполнено;
			Стр.Использование=Истина;
			Стр.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("СтранаПроизводства");
			Стр.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
			
	КонецЕсли;
	
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыGTINНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	
СтандартнаяОбработка=Ложь;		
	
КонецПроцедуры


&НаКлиенте
Процедура ПечатьСПОКакВЦРПТ(Команда)
	// Вставить содержимое обработчика.
	Счетч=1;
						Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводПервогоЧисла_ЦРПТ",ЭтаФорма));
	Форм.Число=Счетч;
	Форм.Заголовок="Начать печать с № КМ";
	
	//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводПервогоЧисла_ЦРПТ",ЭтаФорма),Счетч,"Начать печать с № КМ");
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводПервогоЧисла_ЦРПТ(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
								Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводВторогоЧисла_ЦРПТ",ЭтаФорма,РР));
	Форм.Число=30;
	Форм.Заголовок="Допечатать указанное количество № КМ";

		//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводВторогоЧисла_ЦРПТ",ЭтаФорма,РР),30,"Допечатать указанное количество № КМ");
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводВторогоЧисла_ЦРПТ(РР,ДД) Экспорт
	
	
	МассивКМРаспечатали=Новый Массив;
		
	
	Если ЗначениеЗаполнено(РР) Тогда
		Если ЗначениеЗаполненО(ЧислоПараллельныхПотоков) тогда
			Таб = ПечатьЭти_1_ЦРПТ_Функция(ДД,РР,,МассивКМРаспечатали);
			Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
			
			Таб.Показать();
			
		Иначе
		
			Таб=Новый ТабличныйДокумент;
			ПечатьЭти_1_ЦРПТ(Таб,ДД,РР,,МассивКМРаспечатали);
			Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
			
			Таб.Показать();
		Конецесли;
		
	КонецЕсли;
	
	ЗаполнитьрегистрПечати(МассивКМРаспечатали);
	
	
	
	

КонецПроцедуры

&НаСервере
Функция ПечатьЭти_1_ЦРПТ_Функция(Смещение,Количество,НомерТТН="",МассивКМРаспечатали) Экспорт
	
	//Обр=РеквизитФормыВЗначение("Объект_1");
	Ссылка=Объект.Ссылка;
	НомерТТН=Объект.Номер;
	Таб = Новый ТабличныйДокумент;
	
	Мак=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("Макет1");
	ОблМ=Мак.ПолучитьОбласть("Строка");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НомераКМ_ХамелеонЦРПТ.НомерКМ
	|ИЗ
	|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
	|ГДЕ
	|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа";
	
	Запрос.УстановитьПараметр("ДокументЗаказа", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВерсияПравильная Тогда
		ГенераторМатрицы=Обработки.ГенерацияDataMatrix_ХамелеонЦРПТ.Создать();
		ГенераторМатрицы.Инициализировать();
	КонецЕсли;
	
	МассивЗаданий = Новый Массив;
	ЧислоПараллельныхПотоков = РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КоличествоЯдерДляГенерацииDataMatrix; 
	//ВремПапка = КаталогВременныхФайлов() + Формат(ТекущаяДата(), "ДФ=yyyyMMddHHmmss") + "\";
	
		ВремПапка=ПолучитьИмяВременногоФайла()+"\";	

	
	СчРисунков = 0;
	
	Если РезультатЗапроса.Количество()>0 Тогда 
		Если Смещение>РезультатЗапроса.Количество() Тогда
			Возврат ПоместитьВоВременноеХранилище(Таб);
		КонецЕсли;
		МинимумМ=Мин(РезультатЗапроса.Количество()+1,Смещение+Количество)-1;
		
		Для Сч=СМещение По МинимумМ
			//+1 
			Цикл
			Стр=РезультатЗапроса[Сч-1];
			//НСтр=Объект.Товары.НайтиСтроки(Новый Структура("ID",Стр.Order_Id_Line));
			//Если НСтр.Количество()=0  Тогда
			//	Продолжить;
			//Иначе
			//	НСтр=НСтр[0];
			//КонецЕсли;
			
			ГТИН=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьGTINСМарки(Стр.НомерКМ);;
			//Сред(Стр.НомерКМ,3);
			//ГТИН=Сред(ГТИН,1,15-1);
			GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
			
			ОблМ=Мак.ПолучитьОбласть("Строка");
			ОблМ.Параметры.Модель=GTIN.МодельПроизводителяАртикул;
			Если ЗначениеЗаполнено(GTIN.Размер) Тогда
				ОблМ.Параметры.Размер=GTIN.Размер;
			Иначе
				ОблМ.Параметры.Размер="--";
			Конецесли;
			ОблМ.Параметры.Цвет=GTIN.Цвет;
			
			ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			CIS="("+Сред(ООО,1,2)+")";
			
			//ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			//CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
			CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
			ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
				
				ГТИН=Сред(ГТИН,14+3);
				
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
			ГТИН=Сред(ГТИН,6);
			
			
			
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			//Попытка
			//						
			//	Если версияПравильная Тогда
			//		Картинка = ГенераторМатрицы.Сгенерировать(ООО);
			//	Иначе
			//		ГенераторМатрицы=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();						
			//		Картинка = ГенераторМатрицы.Сгенерировать(ООО);
			//	КонецЕсли;
			//	ОблМ.Рисунки.ДатаМ.Картинка=Новый Картинка(Картинка);
			//	
			//Исключение
			//	Сообщить("Для печати Data Matrix необходим релиз 8.3.9 или выше");
			//	//Возврат;
			//КонецПопытки;
			
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(ООО);
			МассивПараметров.Добавить(ВремПапка + СчРисунков + ".bmp");
			МассивПараметров.Добавить(ГенераторМатрицы.ПобитИсклИли);
			
			Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СгенерироватьDataMatrix", МассивПараметров);
			МассивЗаданий.Добавить(Задание);
			
			Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
				Попытка
					ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
				Исключение
				КонецПопытки;
				МассивЗаданий.Очистить();
			КонецЕсли;
			
			ОблМ.Рисунки.ДатаМ.Имя = "Рис" + СчРисунков;
			СчРисунков = СчРисунков + 1;
			
			Таб.Вывести(ОблМ);
			Таб.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЦикла;       
	Иначе
		Если Смещение>Объект.КМИзAPI.Количество() Тогда
			Возврат ПоместитьВоВременноеХранилище(Таб);
		КонецЕсли;
		МинимумМ=Мин(Объект.КМИзAPI.Количество()+1,СМещение+Количество)-1;
		Для СЧ=Смещение По МинимумМ
			//+1 
			Цикл
			ОблМ=Мак.ПолучитьОбласть("Строка");
			
			Стр=Ссылка.КМИзAPI[СЧ-1];
			
			//НСтр=Объект.Товары.НайтиСтроки(Новый Структура("ID",Стр.Order_Id_Line));
			//Если НСтр.Количество()=0  Тогда
			//	Продолжить;
			//Иначе
			//	НСтр=НСтр[0];
			//КонецЕсли;
			
			ГТИН=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьGTINСМарки(Стр.НомерКМ);
			

			//Сред(Стр.НомерКМ,3);
			ГТИН=Сред(ГТИН,1,15-1);
			GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
			
			ОблМ.Параметры.Модель=GTIN.МодельПроизводителяАртикул;
			Если ЗначениеЗаполнено(GTIN.Размер) Тогда
				ОблМ.Параметры.Размер=GTIN.Размер;
			Иначе
				ОблМ.Параметры.Размер="--";
			Конецесли;
			ОблМ.Параметры.Цвет=GTIN.Цвет;
			
			ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			//ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
			CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
			ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
				
				ГТИН=Сред(ГТИН,14+3);
				
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
			ГТИН=Сред(ГТИН,6);
			
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			//Попытка
			//	Если ВерсияПравильная Тогда
			//		Картинка = ГенераторМатрицы.Сгенерировать(ООО);
			//	Иначе
			//		ГенераторМатрицы=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();
			//		
			//		Картинка = ГенераторМатрицы.Сгенерировать(ООО);
			//	КонецЕсли;
			//	ОблМ.Рисунки.ДатаМ.Картинка=Новый Картинка(Картинка);
			//	
			//Исключение
			//	Сообщить("Для печати Data Matrix необходим релиз 8.3.9 или выше");
			//	//Возврат;
			//КонецПопытки;
			
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(ООО);
			МассивПараметров.Добавить(ВремПапка + СчРисунков + ".bmp");
			МассивПараметров.Добавить(ГенераторМатрицы.ПобитИсклИли);
			
			Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СгенерироватьDataMatrix", МассивПараметров);
			МассивЗаданий.Добавить(Задание);
			
			Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
				Попытка
					ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
				Исключение
				КонецПопытки;
				МассивЗаданий.Очистить();
			КонецЕсли;
			
			ОблМ.Рисунки.ДатаМ.Имя = "Рис" + СчРисунков;
			СчРисунков = СчРисунков + 1;
			
			Таб.Вывести(ОблМ);
			Таб.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЦикла;
	КонецЕсли;
	
	Если МассивЗаданий.Количество() > 0 Тогда
		Попытка
			ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
		Исключение
		КонецПопытки;
		МассивЗаданий.Очистить();
	КонецЕсли;
	
	Для Сч = 0 По СчРисунков - 1 Цикл
		ИсходнаяКартинка = Новый Картинка(ВремПапка + Сч + ".bmp");
		Таб.Рисунки["Рис"+Сч].Картинка = ИсходнаяКартинка.Преобразовать(ФорматКартинки.PNG);
	КонецЦикла;
	
	УдалитьФайлы(ВремПапка);
	Возврат Таб;
	
КонецФункции


Процедура ПечатьЭти_1_ЦРПТ(Таб,Смещение,Количество,НомерТТН="",МассивКМРаспечатали) Экспорт
	//Обр=РеквизитФормыВЗначение("Объект_1");
	Ссылка=Объект.Ссылка;
	НомерТТН=Объект.Номер;
	//Если ВерсияПравильная Тогда
	//	ГенераторМатрицы=Обработки.ГенерацияDataMatrix_ХамелеонЦРПТ.Создать();
	//	ГенераторМатрицы.Инициализировать();
	//КонецЕсли;
	
	Мак=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("Макет1");
	ОблМ=Мак.ПолучитьОбласть("Строка");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ,
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий
		|ИЗ
		|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
		|ГДЕ
		|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа";
	
	Запрос.УстановитьПараметр("ДокументЗаказа", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	НомерПП=0;
	Если ВерсияПравильная Тогда
	ГенераторМатрицы=Обработки.ГенерацияDataMatrix_ХамелеонЦРПТ.Создать();
	ГенераторМатрицы.Инициализировать();
	                           КонецЕсли;
	Если РезультатЗапроса.Количество()>0 Тогда 
		Если Смещение>РезультатЗапроса.Количество() Тогда
			Возврат;
		КонецЕсли;
		МинимумМ=Мин(РезультатЗапроса.Количество()+1,Смещение+Количество)-1;
		Для Сч=СМещение По МинимумМ
			//+1 
			Цикл
			ОблМ=Мак.ПолучитьОбласть("Строка");
			
			Стр=РезультатЗапроса[Сч-1];
			
Если СоответствоватьТребованиямЦРПТ=Истина Тогда
				
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	КМРаспечатано_ХамелеонЦРПТ.Распечатан,
						|	КМРаспечатано_ХамелеонЦРПТ.cis
						|ИЗ
						|	РегистрСведений.КМРаспечатано_ХамелеонЦРПТ КАК КМРаспечатано_ХамелеонЦРПТ
						|ГДЕ
						|	КМРаспечатано_ХамелеонЦРПТ.cis = &cis";
					
					Запрос.УстановитьПараметр("cis", Стр.НомерКМ_Короткий);
					
					РезультатЗапроса_1 = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи_1 = РезультатЗапроса_1.Выбрать();
					НашлиКМЭЭ=ЛОжь;
					Пока ВыборкаДетальныеЗаписи_1.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						если ВыборкаДетальныеЗаписи_1.cis=Стр.НомерКМ_Короткий 
							И ВыборкаДетальныеЗаписи_1.Распечатан=Истина Тогда
							НашлиКМЭЭ=Истина;
							Прервать;
						Конецесли;
						
					КонецЦикла;
					Если НашлиКМЭЭ=Истина Тогда
						Продолжить;
					Конецесли;
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					НомерПП=НомерПП+1;
					МассивКМРаспечатали.Добавить(Новый Структура("cis,НомерПП",Стр.НомерКМ_Короткий,НомерПП));
					
					//РегДв=РегистрыСведений.КМРаспечатано_ХамелеонЦРПТ.СоздатьНаборЗаписей();
					//РегДв.Отбор.cis.Установить(Стр.НомерКМ_Короткий);
					//НомерПП=НомерПП+1;
					//РегДв.Отбор.НомерПП.Установить(НомерПП);
					//Добав=РегДв.Добавить();
					//Добав.cis=Стр.НомерКМ_Короткий;
					//Добав.НомерПП=НомерПП;
					//Добав.Распечатан=Истина;
					//РегДв.Записать(Истина);
				
			Конецесли;
			
			//НСтр=Объект.Товары.НайтиСтроки(Новый Структура("ID",Стр.Order_Id_Line));
			//Если НСтр.Количество()=0  Тогда
			//	Продолжить;
			//Иначе
			//	НСтр=НСтр[0];
			//КонецЕсли;
			
			ГТИН=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьGTINСМарки(Стр.НомерКМ);
			//Сред(Стр.НомерКМ,3);
			ГТИН=Сред(ГТИН,1,15-1);
			GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
			
			ОблМ.Параметры.Модель=GTIN.МодельПроизводителяАртикул;
			Если ЗначениеЗаполнено(GTIN.Размер) Тогда
				ОблМ.Параметры.Размер=GTIN.Размер;
			Иначе
				ОблМ.Параметры.Размер="--";
			Конецесли;
			ОблМ.Параметры.Цвет=GTIN.Цвет;
			
			ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			CIS="("+Сред(ООО,1,2)+")";
			
			//ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			//CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
	CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
		ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
		
				ГТИН=Сред(ГТИН,14+3);
			
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
				ГТИН=Сред(ГТИН,6);
				
				
				
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			
			
			Попытка
				
				Если версияПравильная Тогда
			Картинка = ГенераторМатрицы.Сгенерировать(ООО);Иначе
									ГенераторМатрицы=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();

					Картинка = ГенераторМатрицы.Сгенерировать(ООО);
КонецЕсли;
			ОблМ.Рисунки.ДатаМ.Картинка=Новый Картинка(Картинка);
						
			Исключение
				Сообщить("Для печати Data Matrix необходим релиз 8.3.9 или выше");
				//Возврат;
			КонецПопытки;
			
			
		
							
									Таб.Вывести(ОблМ);
					Таб.ВывестиГоризонтальныйРазделительСтраниц();
									
						КонецЦикла;       
	Иначе
		Если Смещение>Объект.КМИзAPI.Количество() Тогда
			Возврат;
		КонецЕсли;
		МинимумМ=Мин(Объект.КМИзAPI.Количество()+1,СМещение+Количество)-1;
		Для СЧ=Смещение По МинимумМ
			//+1 
			Цикл
			ОблМ=Мак.ПолучитьОбласть("Строка");
			
			Стр=Ссылка.КМИзAPI[СЧ-1];
			
Если СоответствоватьТребованиямЦРПТ=Истина Тогда
				
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	КМРаспечатано_ХамелеонЦРПТ.Распечатан,
						|	КМРаспечатано_ХамелеонЦРПТ.cis
						|ИЗ
						|	РегистрСведений.КМРаспечатано_ХамелеонЦРПТ КАК КМРаспечатано_ХамелеонЦРПТ
						|ГДЕ
						|	КМРаспечатано_ХамелеонЦРПТ.cis = &cis";
					
					Запрос.УстановитьПараметр("cis", Стр.НомерКМ_Короткий);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи_1 = РезультатЗапроса.Выбрать();
					НашлиКМЭЭ=ЛОжь;
					Пока ВыборкаДетальныеЗаписи_1.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						если ВыборкаДетальныеЗаписи_1.cis=Стр.НомерКМ_Короткий 
							И ВыборкаДетальныеЗаписи_1.Распечатан=Истина Тогда
							НашлиКМЭЭ=Истина;
							Прервать;
						Конецесли;
						
					КонецЦикла;
					Если НашлиКМЭЭ=Истина Тогда
						Продолжить;
					Конецесли;
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					НомерПП=НомерПП+1;
					МассивКМРаспечатали.Добавить(Новый Структура("cis,НомерПП",Стр.НомерКМ_Короткий,НомерПП));
					
					//РегДв=РегистрыСведений.КМРаспечатано_ХамелеонЦРПТ.СоздатьНаборЗаписей();
					//РегДв.Отбор.cis.Установить(Стр.НомерКМ_Короткий);
					//НомерПП=НомерПП+1;
					//РегДв.Отбор.НомерПП.Установить(НомерПП);
					//Добав=РегДв.Добавить();
					//Добав.cis=Стр.НомерКМ_Короткий;
					//Добав.НомерПП=НомерПП;
					//Добав.Распечатан=Истина;
					//РегДв.Записать(Истина);
				
			Конецесли;
			
			
			//НСтр=Объект.Товары.НайтиСтроки(Новый Структура("ID",Стр.Order_Id_Line));
			//Если НСтр.Количество()=0  Тогда
			//	Продолжить;
			//Иначе
			//	НСтр=НСтр[0];
			//КонецЕсли;
			
			ГТИН=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьGTINСМарки(Стр.НомерКМ);
			//Сред(Стр.НомерКМ,3);
			ГТИН=Сред(ГТИН,1,15-1);
			GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
			
			ОблМ.Параметры.Модель=GTIN.МодельПроизводителяАртикул;
			Если ЗначениеЗаполнено(GTIN.Размер) Тогда
				ОблМ.Параметры.Размер=GTIN.Размер;
			Иначе
				ОблМ.Параметры.Размер="--";
			Конецесли;
			ОблМ.Параметры.Цвет=GTIN.Цвет;
			
			ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			//ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
	CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
		ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
		
				ГТИН=Сред(ГТИН,14+3);
			
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
				ГТИН=Сред(ГТИН,6);
			
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			
			
			Попытка
				Если ВерсияПравильная Тогда
			Картинка = ГенераторМатрицы.Сгенерировать(ООО); Иначе					ГенераторМатрицы=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();

					Картинка = ГенераторМатрицы.Сгенерировать(ООО);
КонецЕсли;
			ОблМ.Рисунки.ДатаМ.Картинка=Новый Картинка(Картинка);
						
			Исключение
				Сообщить("Для печати Data Matrix необходим релиз 8.3.9 или выше");
				//Возврат;
			КонецПопытки;
		
							
					Таб.Вывести(ОблМ);
					Таб.ВывестиГоризонтальныйРазделительСтраниц();
			
			КонецЦикла;
			КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПечатьСПоОстаток(Команда)
	// Вставить содержимое обработчика.
	
	Счетч=1;
								Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводПервогоЧисла_Остаток",ЭтаФорма));
	Форм.Число=Счетч;
	Форм.Заголовок="Начать печать с № КМ";

	//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводПервогоЧисла_Остаток",ЭтаФорма),Счетч,"Начать печать с № КМ");
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводПервогоЧисла_Остаток(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
								Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводВторогоЧисла_Остаток",ЭтаФорма,РР));
	Форм.Число=30;
	Форм.Заголовок="Допечатать указанное количество № КМ";
		
		//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводВторогоЧисла_Остаток",ЭтаФорма,РР),30,"Допечатать указанное количество № КМ");
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводВторогоЧисла_Остаток(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
		
		МассивКМРаспечатали=Новый Массив;
		Если ЗначениеЗаполненО(ЧислоПараллельныхПотоков) тогда
			Таб = ПечатьЭти_1_Остатки_Функция(ДД,РР,МассивКМРаспечатали);
			Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
			
			Таб.Показать();
			
		Иначе
		
			Таб=Новый ТабличныйДокумент;
			ПечатьЭти_1_Остатки(Таб,ДД,РР,МассивКМРаспечатали);
			Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
			
			Таб.Показать();
		Конецесли;
		ЗаполнитьрегистрПечати(МассивКМРаспечатали);
		//
		//Таб=Новый ТабличныйДокумент;
		//ПечатьЭти_1_Остатки(Таб,ДД,РР);
		//Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
		//
		//Таб.Показать();
		
	КонецЕсли;
КонецПроцедуры


Функция ПечатьЭти_1_Остатки_Функция(Смещение,Количество,МассивКМРаспечатали) Экспорт
	//Обр=РеквизитФормыВЗначение("Объект_1");
	Ссылка=Объект.Ссылка;
	НомерТТН=Объект.Номер;
	Таб = Новый ТабличныйДокумент;
	Если ВерсияПравильная Тогда
		ГенераторМатрицы=Обработки.ГенерацияDataMatrix_ХамелеонЦРПТ.Создать();
		ГенераторМатрицы.Инициализировать();
	КонецЕсли;
	
	Мак=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("Макет2");
	ОблМ=Мак.ПолучитьОбласть("Строка");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ,
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий
		|ИЗ
		|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
		|ГДЕ
		|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа";
	
	Запрос.УстановитьПараметр("ДокументЗаказа", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВерсияПравильная Тогда
	ГенераторМатрицы=Обработки.ГенерацияDataMatrix_ХамелеонЦРПТ.Создать();
	ГенераторМатрицы.Инициализировать();
	                           КонецЕсли;
	МассивЗаданий = Новый Массив;
	ЧислоПараллельныхПотоков = РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КоличествоЯдерДляГенерацииDataMatrix; 
	//ВремПапка = КаталогВременныхФайлов() + Формат(ТекущаяДата(), "ДФ=yyyyMMddHHmmss") + "\";
	
		ВремПапка=ПолучитьИмяВременногоФайла()+"\";	

		НомерПП=0;
	СчРисунков = 0;
	Если РезультатЗапроса.Количество()>0 Тогда 
		Если Смещение>РезультатЗапроса.Количество() Тогда
			Возврат Таб;
		КонецЕсли;
		МинимумМ=Мин(РезультатЗапроса.Количество()+1,Смещение+Количество)-1;
		Для Сч=СМещение По МинимумМ
			//+1 
			Цикл
	ОблМ=Мак.ПолучитьОбласть("Строка");
			Стр=РезультатЗапроса[Сч-1];
			
Если СоответствоватьТребованиямЦРПТ=Истина Тогда
				
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	КМРаспечатано_ХамелеонЦРПТ.Распечатан,
						|	КМРаспечатано_ХамелеонЦРПТ.cis
						|ИЗ
						|	РегистрСведений.КМРаспечатано_ХамелеонЦРПТ КАК КМРаспечатано_ХамелеонЦРПТ
						|ГДЕ
						|	КМРаспечатано_ХамелеонЦРПТ.cis = &cis";
					
					Запрос.УстановитьПараметр("cis", Стр.НомерКМ_Короткий);
					
					РезультатЗапроса_1 = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи_1 = РезультатЗапроса_1.Выбрать();
					НашлиКМЭЭ=ЛОжь;
					Пока ВыборкаДетальныеЗаписи_1.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						если ВыборкаДетальныеЗаписи_1.cis=Стр.НомерКМ_Короткий 
							И ВыборкаДетальныеЗаписи_1.Распечатан=Истина Тогда
							НашлиКМЭЭ=Истина;
							Прервать;
						Конецесли;
						
					КонецЦикла;
					Если НашлиКМЭЭ=Истина Тогда
						Продолжить;
					Конецесли;
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					НомерПП=НомерПП+1;
					МассивКМРаспечатали.Добавить(Новый Структура("cis,НомерПП",Стр.НомерКМ_Короткий,НомерПП));
					
					//РегДв=РегистрыСведений.КМРаспечатано_ХамелеонЦРПТ.СоздатьНаборЗаписей();
					//РегДв.Отбор.cis.Установить(Стр.НомерКМ_Короткий);
					//НомерПП=НомерПП+1;
					//РегДв.Отбор.НомерПП.Установить(НомерПП);
					//Добав=РегДв.Добавить();
					//Добав.cis=Стр.НомерКМ_Короткий;
					//Добав.НомерПП=НомерПП;
					//Добав.Распечатан=Истина;
					//РегДв.Записать(Истина);
				
			Конецесли;
			
			
			//НСтр=Объект.Товары.НайтиСтроки(Новый Структура("ID",Стр.Order_Id_Line));
			//Если НСтр.Количество()=0  Тогда
			//	Продолжить;
			//Иначе
			//	НСтр=НСтр[0];
			//КонецЕсли;
			
			ГТИН=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьGTINСМарки(Стр.НомерКМ);
			//Сред(Стр.НомерКМ,3);
			ГТИН=Сред(ГТИН,1,15-1);
			GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
			
			ОблМ.Параметры.Пол=GTIN.Пол;
				ОблМ.Параметры.Страна=GTIN.СтранаПроизводства;
			ОблМ.Параметры.GTIN=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(GTIN.GTIN),14,"0");
			
			ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			CIS="("+Сред(ООО,1,2)+")";
			
			//ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			//CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
	CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
		ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
		
				ГТИН=Сред(ГТИН,14+3);
			
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
				ГТИН=Сред(ГТИН,6);
				
				
				
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			
			
			//Попытка
				
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(ООО);
			МассивПараметров.Добавить(ВремПапка + СчРисунков + ".bmp");
			МассивПараметров.Добавить(ГенераторМатрицы.ПобитИсклИли);
			
			Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СгенерироватьDataMatrix", МассивПараметров);
			МассивЗаданий.Добавить(Задание);
			
			Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
				Попытка
					ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
				Исключение
				КонецПопытки;
				МассивЗаданий.Очистить();
			КонецЕсли;
			
			ОблМ.Рисунки.ДатаМ.Имя = "Рис" + СчРисунков;
			СчРисунков = СчРисунков + 1;
						
		
							
									Таб.Вывести(ОблМ);
					Таб.ВывестиГоризонтальныйРазделительСтраниц();
									
			КонецЦикла;       
	Иначе
		Если Смещение>Объект.КМИзAPI.Количество() Тогда
			Возврат Таб;
		КонецЕсли;
		МинимумМ=Мин(Объект.КМИзAPI.Количество()+1,СМещение+Количество)-1;
		Для СЧ=Смещение По МинимумМ
			//+1 
			Цикл
			Стр=Ссылка.КМИзAPI[СЧ-1];
			
Если СоответствоватьТребованиямЦРПТ=Истина Тогда
				
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	КМРаспечатано_ХамелеонЦРПТ.Распечатан,
						|	КМРаспечатано_ХамелеонЦРПТ.cis
						|ИЗ
						|	РегистрСведений.КМРаспечатано_ХамелеонЦРПТ КАК КМРаспечатано_ХамелеонЦРПТ
						|ГДЕ
						|	КМРаспечатано_ХамелеонЦРПТ.cis = &cis";
					
					Запрос.УстановитьПараметр("cis", Стр.НомерКМ_Короткий);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи_1 = РезультатЗапроса.Выбрать();
					НашлиКМЭЭ=ЛОжь;
					Пока ВыборкаДетальныеЗаписи_1.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						если ВыборкаДетальныеЗаписи_1.cis=Стр.НомерКМ_Короткий 
							И ВыборкаДетальныеЗаписи_1.Распечатан=Истина Тогда
							НашлиКМЭЭ=Истина;
							Прервать;
						Конецесли;
						
					КонецЦикла;
					Если НашлиКМЭЭ=Истина Тогда
						Продолжить;
					Конецесли;
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					НомерПП=НомерПП+1;
					МассивКМРаспечатали.Добавить(Новый Структура("cis,НомерПП",Стр.НомерКМ_Короткий,НомерПП));
					
					//РегДв=РегистрыСведений.КМРаспечатано_ХамелеонЦРПТ.СоздатьНаборЗаписей();
					//РегДв.Отбор.cis.Установить(Стр.НомерКМ_Короткий);
					//НомерПП=НомерПП+1;
					//РегДв.Отбор.НомерПП.Установить(НомерПП);
					//Добав=РегДв.Добавить();
					//Добав.cis=Стр.НомерКМ_Короткий;
					//Добав.НомерПП=НомерПП;
					//Добав.Распечатан=Истина;
					//РегДв.Записать(Истина);
				
			Конецесли;
			
			
			ОблМ=Мак.ПолучитьОбласть("Строка");
			
			//НСтр=Объект.Товары.НайтиСтроки(Новый Структура("ID",Стр.Order_Id_Line));
			//Если НСтр.Количество()=0  Тогда
			//	Продолжить;
			//Иначе
			//	НСтр=НСтр[0];
			//КонецЕсли;
			
			ГТИН=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьGTINСМарки(Стр.НомерКМ);
			//Сред(Стр.НомерКМ,3);
			ГТИН=Сред(ГТИН,1,15-1);
			GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
			
			ОблМ.Параметры.Пол=GTIN.Пол;
				ОблМ.Параметры.Страна=GTIN.СтранаПроизводства;
			ОблМ.Параметры.GTIN=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(GTIN.GTIN),14,"0");
			
			ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			//ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
	CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
		ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
		
				ГТИН=Сред(ГТИН,14+3);
			
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
				ГТИН=Сред(ГТИН,6);
			
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			
			
						МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(ООО);
			МассивПараметров.Добавить(ВремПапка + СчРисунков + ".bmp");
			МассивПараметров.Добавить(ГенераторМатрицы.ПобитИсклИли);
			
			Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СгенерироватьDataMatrix", МассивПараметров);
			МассивЗаданий.Добавить(Задание);
			
			Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
				Попытка
					ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
				Исключение
				КонецПопытки;
				МассивЗаданий.Очистить();
			КонецЕсли;
			
			ОблМ.Рисунки.ДатаМ.Имя = "Рис" + СчРисунков;
			СчРисунков = СчРисунков + 1;
							
					Таб.Вывести(ОблМ);
					Таб.ВывестиГоризонтальныйРазделительСтраниц();
			
			КонецЦикла;
			КонецЕсли;

	Если МассивЗаданий.Количество() > 0 Тогда
		Попытка
			ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
		Исключение
		КонецПопытки;
		МассивЗаданий.Очистить();
	КонецЕсли;
	
	Для Сч = 0 По СчРисунков - 1 Цикл
		ИсходнаяКартинка = Новый Картинка(ВремПапка + Сч + ".bmp");
		Таб.Рисунки["Рис"+Сч].Картинка = ИсходнаяКартинка.Преобразовать(ФорматКартинки.PNG);
	КонецЦикла;
	
	УдалитьФайлы(ВремПапка);
	Возврат Таб;
Конецфункции


Процедура ПечатьЭти_1_Остатки(Таб,Смещение,Количество,МассивКМРаспечатали) Экспорт
	//Обр=РеквизитФормыВЗначение("Объект_1");
	Ссылка=Объект.Ссылка;
	Если ВерсияПравильная Тогда
		ГенераторМатрицы=Обработки.ГенерацияDataMatrix_ХамелеонЦРПТ.Создать();
		ГенераторМатрицы.Инициализировать();
	КонецЕсли;
	
	Мак=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("Макет2");
	ОблМ=Мак.ПолучитьОбласть("Строка");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ,
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий
		|ИЗ
		|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
		|ГДЕ
		|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа";
	
	Запрос.УстановитьПараметр("ДокументЗаказа", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВерсияПравильная Тогда
	ГенераторМатрицы=Обработки.ГенерацияDataMatrix_ХамелеонЦРПТ.Создать();
	ГенераторМатрицы.Инициализировать();
	                           КонецЕсли;
	Если РезультатЗапроса.Количество()>0 Тогда 
		Если Смещение>РезультатЗапроса.Количество() Тогда
			Возврат;
		КонецЕсли;
		МинимумМ=Мин(РезультатЗапроса.Количество()+1,Смещение+Количество)-1;
		Для Сч=СМещение По МинимумМ
			//+1 
			Цикл
			ОблМ=Мак.ПолучитьОбласть("Строка");
			
			Стр=РезультатЗапроса[Сч-1];
			
Если СоответствоватьТребованиямЦРПТ=Истина Тогда
				
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	КМРаспечатано_ХамелеонЦРПТ.Распечатан,
						|	КМРаспечатано_ХамелеонЦРПТ.cis
						|ИЗ
						|	РегистрСведений.КМРаспечатано_ХамелеонЦРПТ КАК КМРаспечатано_ХамелеонЦРПТ
						|ГДЕ
						|	КМРаспечатано_ХамелеонЦРПТ.cis = &cis";
					
					Запрос.УстановитьПараметр("cis", Стр.НомерКМ_Короткий);
					
					РезультатЗапроса_1 = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи_1 = РезультатЗапроса_1.Выбрать();
					НашлиКМЭЭ=ЛОжь;
					Пока ВыборкаДетальныеЗаписи_1.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						если ВыборкаДетальныеЗаписи_1.cis=Стр.НомерКМ_Короткий 
							И ВыборкаДетальныеЗаписи_1.Распечатан=Истина Тогда
							НашлиКМЭЭ=Истина;
							Прервать;
						Конецесли;
						
					КонецЦикла;
					Если НашлиКМЭЭ=Истина Тогда
						Продолжить;
					Конецесли;
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					НомерПП=НомерПП+1;
					МассивКМРаспечатали.Добавить(Новый Структура("cis,НомерПП",Стр.НомерКМ_Короткий,НомерПП));
					
					//РегДв=РегистрыСведений.КМРаспечатано_ХамелеонЦРПТ.СоздатьНаборЗаписей();
					//РегДв.Отбор.cis.Установить(Стр.НомерКМ_Короткий);
					//НомерПП=НомерПП+1;
					//РегДв.Отбор.НомерПП.Установить(НомерПП);
					//Добав=РегДв.Добавить();
					//Добав.cis=Стр.НомерКМ_Короткий;
					//Добав.НомерПП=НомерПП;
					//Добав.Распечатан=Истина;
					//РегДв.Записать(Истина);
				
			Конецесли;
			
			//НСтр=Объект.Товары.НайтиСтроки(Новый Структура("ID",Стр.Order_Id_Line));
			//Если НСтр.Количество()=0  Тогда
			//	Продолжить;
			//Иначе
			//	НСтр=НСтр[0];
			//КонецЕсли;
			
			ГТИН=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьGTINСМарки(Стр.НомерКМ);
			//Сред(Стр.НомерКМ,3);
			ГТИН=Сред(ГТИН,1,15-1);
			GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
			
			ОблМ.Параметры.Пол=GTIN.Пол;
				ОблМ.Параметры.Страна=GTIN.СтранаПроизводства;
			ОблМ.Параметры.GTIN=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(GTIN.GTIN),14,"0");
			
			ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			CIS="("+Сред(ООО,1,2)+")";
			
			//ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			//CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
	CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
		ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
		
				ГТИН=Сред(ГТИН,14+3);
			
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
				ГТИН=Сред(ГТИН,6);
				
				
				
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			
			
			Попытка
				
				Если версияПравильная Тогда
			Картинка = ГенераторМатрицы.Сгенерировать(ООО);Иначе
									ГенераторМатрицы=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();

					Картинка = ГенераторМатрицы.Сгенерировать(ООО);
КонецЕсли;
			ОблМ.Рисунки.ДатаМ.Картинка=Новый Картинка(Картинка);
						
			Исключение
				Сообщить("Для печати Data Matrix необходим релиз 8.3.9 или выше");
				//Возврат;
			КонецПопытки;
			
			
		
							
									Таб.Вывести(ОблМ);
					Таб.ВывестиГоризонтальныйРазделительСтраниц();
									
						КонецЦикла;       
	Иначе
		Если Смещение>Объект.КМИзAPI.Количество() Тогда
			Возврат;
		КонецЕсли;
		МинимумМ=Мин(Объект.КМИзAPI.Количество()+1,СМещение+Количество)-1;
		Для СЧ=Смещение По МинимумМ
			//+1 
			Цикл
			ОблМ=Мак.ПолучитьОбласть("Строка");
			
			Стр=Ссылка.КМИзAPI[СЧ-1];
			
			
Если СоответствоватьТребованиямЦРПТ=Истина Тогда
				
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	КМРаспечатано_ХамелеонЦРПТ.Распечатан,
						|	КМРаспечатано_ХамелеонЦРПТ.cis
						|ИЗ
						|	РегистрСведений.КМРаспечатано_ХамелеонЦРПТ КАК КМРаспечатано_ХамелеонЦРПТ
						|ГДЕ
						|	КМРаспечатано_ХамелеонЦРПТ.cis = &cis";
					
					Запрос.УстановитьПараметр("cis", Стр.НомерКМ_Короткий);
					
					РезультатЗапроса_1 = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи_1 = РезультатЗапроса_1.Выбрать();
					НашлиКМЭЭ=ЛОжь;
					Пока ВыборкаДетальныеЗаписи_1.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						если ВыборкаДетальныеЗаписи_1.cis=Стр.НомерКМ_Короткий 
							И ВыборкаДетальныеЗаписи_1.Распечатан=Истина Тогда
							НашлиКМЭЭ=Истина;
							Прервать;
						Конецесли;
						
					КонецЦикла;
					Если НашлиКМЭЭ=Истина Тогда
						Продолжить;
					Конецесли;
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					НомерПП=НомерПП+1;
					МассивКМРаспечатали.Добавить(Новый Структура("cis,НомерПП",Стр.НомерКМ_Короткий,НомерПП));
					
					//РегДв=РегистрыСведений.КМРаспечатано_ХамелеонЦРПТ.СоздатьНаборЗаписей();
					//РегДв.Отбор.cis.Установить(Стр.НомерКМ_Короткий);
					//НомерПП=НомерПП+1;
					//РегДв.Отбор.НомерПП.Установить(НомерПП);
					//Добав=РегДв.Добавить();
					//Добав.cis=Стр.НомерКМ_Короткий;
					//Добав.НомерПП=НомерПП;
					//Добав.Распечатан=Истина;
					//РегДв.Записать(Истина);
				
			Конецесли;
			
			//НСтр=Объект.Товары.НайтиСтроки(Новый Структура("ID",Стр.Order_Id_Line));
			//Если НСтр.Количество()=0  Тогда
			//	Продолжить;
			//Иначе
			//	НСтр=НСтр[0];
			//КонецЕсли;
			
			ГТИН=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьGTINСМарки(Стр.НомерКМ);
			//Сред(Стр.НомерКМ,3);
			ГТИН=Сред(ГТИН,1,15-1);
			GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
			
			ОблМ.Параметры.Пол=GTIN.Пол;
				ОблМ.Параметры.Страна=GTIN.СтранаПроизводства;
			ОблМ.Параметры.GTIN=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(GTIN.GTIN),14,"0");
			
			ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			//ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
	CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
		ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
		
				ГТИН=Сред(ГТИН,14+3);
			
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
				ГТИН=Сред(ГТИН,6);
			
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			
			
			Попытка
				Если ВерсияПравильная Тогда
			Картинка = ГенераторМатрицы.Сгенерировать(ООО); Иначе					ГенераторМатрицы=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();

					Картинка = ГенераторМатрицы.Сгенерировать(ООО);
КонецЕсли;
			ОблМ.Рисунки.ДатаМ.Картинка=Новый Картинка(Картинка);
						
			Исключение
				Сообщить("Для печати Data Matrix необходим релиз 8.3.9 или выше");
				//Возврат;
			КонецПопытки;
		
							
					Таб.Вывести(ОблМ);
					Таб.ВывестиГоризонтальныйРазделительСтраниц();
			
			КонецЦикла;
			КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПечатьСПоPDF(Команда)
	// Вставить содержимое обработчика.
	
	Счетч=1;
								Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводПервогоЧисла_PDF",ЭтаФорма));
	Форм.Число=Счетч;
	Форм.Заголовок="Начать печать с № КМ";
	//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводПервогоЧисла_PDF",ЭтаФорма),Счетч,"Начать печать с № КМ");
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводПервогоЧисла_PDF(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
								Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводВторогоЧисла_PDF",ЭтаФорма,РР));
	Форм.Число=30;
	Форм.Заголовок="Допечатать указанное количество № КМ";
		
		//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводВторогоЧисла_PDF",ЭтаФорма,РР),30,"Допечатать указанное количество № КМ");
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводВторогоЧисла_PDF(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
		
		Режим=РежимДиалогаВыбораФайла.ВыборКаталога;
		нДиалог= НОвый ДиалогВыбораФайла(Режим);
		нДиалог.Заголовок="Выберите каталог для сохранения КМ" ;
		Если нДиалог.Выбрать() Тогда
	//		Объект.ПапкаСохраненияФайловПечати= нДиалог.Каталог;
	
	МассивКМРаспечатали=Новый Массив;
			Табл=Новый ТабличныйДокумент;
			//Табл.Записать(,ТипФайлаТабличногоДокумента.PDF)
			ПечатьЭти_1_ЦРПТ(Табл,ДД,РР,,МассивКМРаспечатали);
			Номер_1=0;
			//Для Каждого Стр Из Табл Цикл
			//	Номер_1=Номер_1+1;
			//	НомерСтт=СтроковыеФункцииКлиентСервер.ДополнитьСтроку(xmlstring(Номер_1),5,"0");
			Табл.Записать(нДиалог.Каталог+"\"+Объект.Номер+"_c_"+Формат(ДД,"ЧГ=")+"_по_"+Формат(РР,"ЧГ=")+".pdf",ТипФайлаТабличногоДокумента.PDF);
			//КонецЦикла;
			
		ЗаполнитьрегистрПечати(МассивКМРаспечатали);
				
			//Табл.Показать();
		КонецЕсли;
		Отказ=Истина;
		
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьСтатусыПоКМ(Команда,ТолькоА=Ложь)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	МассивКМ=Новый Массив;
	Для каждого Стр_1 Из Объект.КМИзAPI Цикл
		
		Если ВРЕГ(Стр_1.статус)="INTRODUCED" ИЛИ (Врег(Стр_1.Статус)="APPLIED" И ТолькоА=Ложь) Тогда
			Продолжить;
		КонецЕсли;
		Стр_1.Статус="Не найдено в ЦРПТ";
		МассивКМ.Добавить(Стр_1.НомерКМ_Короткий);
	Конеццикла;	
	ОбработатьстатусыКМ(МассивКМ);
	
	Возврат;
	
	

	Thumbprint_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
	//СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	

	
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	
	
		Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Возврат;
		конецесли;
	Для каждого Стр_1 Из Объект.КМИзAPI Цикл
		
		Если ВРЕГ(Стр_1.статус)="INTRODUCED" ИЛИ (Врег(Стр_1.Статус)="APPLIED" И ТолькоА=Ложь) Тогда
			Продолжить;
		КонецЕсли;
		    Стр_1.Статус=Неопределено;
	   НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	
	   Если НаСервере Тогда
		 Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Стр_1.НомерКМ_Короткий);  
		Иначе
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			Если Thumbprint_1.НаименованиеСтенда="Табак" 
							ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
Тогда
	
		NN=ВернутьТелоЗапросаПодключение(Стр_1.НомерКМ_Короткий);
						
	
			HTTPЗапрос=Новый HTTPЗапрос("private-office-api/private/v2/cis/status");
			//private-office-api/private/v2/cis/"+КодМаркировки+"/mrp"
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин   
			HTTPЗапрос.УстановитьТелоИзСтроки(NN,КодировкаТекста.UTF8);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
Иначе
			
			Текст=Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(Стр_1.НомерКМ_Короткий);
			Марк=Текст.Получитьтекст();
	
			что=Thumbprint_1.что;
	
	ММ= Стр_1.НомерКМ_Короткий;
	
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"&pg="+что);
	//	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"&pg="+что);;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
КонецЕсли;
КонецЕсли;

		Если НаСервере Тогда
			Текст1=Ответ.ПолучитьТелоКакСтроку;
			
		Иначе
			Текст1=Ответ.ПолучитьТелоКакСтроку();
		КонецЕсли;	
		
		Если Thumbprint_1.НаименованиеСтенда="Табак"
						ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
Тогда
		
			Попытка
		//ЧтениеJSON = Новый ЧтениеJSON;
		//	ЧтениеJSON.УстановитьСтроку(Текст1);
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Если NNN=Неопределено тогда
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Стр_1.Статус=NNN["status"];
					
			Иначе
				Стр_1.Статус=NNN[0].status;
			КонецЕсли;
			
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Сообщить(Текст1);
			КонецПопытки;
	
Иначе
//ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(Текст1);
Попытка
	Если Ответ.КодСостояния=200 Тогда
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Если NNN=Неопределено тогда
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Стр_1.Статус=NNN["status"];
					
			Иначе
				Стр_1.Статус=NNN.status;
			КонецЕсли;
		Иначе
		
		Стр_1.Статус=Ответ.КодСостояния;
		 Сообщить(Текст1);
	КонецЕсли;
	

	
Исключение
	Сообщить(ОписаниеОшибки());
	Сообщить(Текст1);
КонецПопытки;
КонецЕсли;



	Конеццикла;

	
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьСтатусыПоКМАльтернит(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	ПроверитьВсеСтатусыНаСервере();
	
	
	
КонецПроцедуры

Процедура ПроверитьВсеСтатусыНаСервере()
	ЧислоПараллельныхПотоков = РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КоличествоЯдерДляГенерацииDataMatrix;
	МассивЗаданий = Новый Массив;
	ЗаданияПоСтрокам = Новый Соответствие;
	Thumbprint = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);	
	Если Не ЗначениеЗаполнено(Thumbprint) Тогда
		Возврат;
	КонецЕслИ;
	
	Для каждого СерийныйНомер Из Объект.КМИзAPI Цикл
		
		Если ВРЕГ(СерийныйНомер.статус)="INTRODUCED" ИЛИ (Врег(СерийныйНомер.Статус)="APPLIED") Тогда
			Продолжить;
		КонецЕсли;
		
		СерийныйНомер.Статус = Неопределено;
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(СерийныйНомер.НомерКМ_Короткий);
		МассивПараметров.Добавить(Thumbprint);
		
		Если ЧислоПараллельныхПотоков=0 Тогда
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				shoesD="";
				Если Данные <> Неопределено И данные.Свойство("shoesData",shoesD) Тогда
					СерийныйНомер.Статус = shoesD.status;
				КонецЕсли;
		Иначе
			Попытка
				Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара", МассивПараметров);
				ЗаданияПоСтрокам.Вставить(Задание.УникальныйИдентификатор, СерийныйНомер);
				МассивЗаданий.Добавить(Задание);
				
				Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
					ЗаполнитьСтатусыСерийныхНомеров(ЗаданияПоСтрокам, МассивЗаданий); 
				КонецЕсли;
			Исключение
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				shoesD="";
				Если Данные <> Неопределено И данные.Свойство("shoesData",shoesD) Тогда
					СерийныйНомер.Статус = shoesD.status;
				КонецЕсли;
					
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивЗаданий.Количество() >= 0 Тогда
		ЗаполнитьСтатусыСерийныхНомеров(ЗаданияПоСтрокам, МассивЗаданий); 
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыСерийныхНомеров(Знач ЗаданияПоСтрокам, МассивЗаданий)
	
	Попытка
		ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
	Исключение
	КонецПопытки;
	Для каждого Задание Из МассивЗаданий Цикл
		Данные = Неопределено;
		Для каждого Сообщение Из Задание.ПолучитьСообщенияПользователю() Цикл
			Если ЗначениеЗаполнено(Сообщение.Текст) Тогда
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Сообщение.Текст);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Данные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТекСтр = ЗаданияПоСтрокам.Получить(Задание.УникальныйИдентификатор);
		ТекСтр.Статус = Данные.shoesData.status;
	КонецЦикла;
	МассивЗаданий.Очистить();
	
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьСтатусыAPPLIED(Команда)
	// Вставить содержимое обработчика.	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	ПолучитьСтатусыПоКМ(Команда,истина)	
	

	
КонецПроцедуры


&НаКлиенте
Процедура ПроверитьСтатусыПоВыделенным(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	МассивКМ=Новый Массив;
	Для каждого Стр_2 Из Элементы.КМИзAPI.ВыделенныеСтроки Цикл
		Стр_1=Объект.КМИзAPI.НайтиПоИдентификатору(Стр_2);
		Стр_1.Статус="В ЦРПТ не найдено";
		МассивКМ.Добавить(Стр_1.НомерКМ_Короткий);
	Конеццикла;	
	ОбработатьстатусыКМ(МассивКМ);
	
	Возврат;
	
	Thumbprint_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
	//СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	

	

СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Сообщить("Не удалось подключиться к ЦРПТ");
			Возврат;
		КонецЕсли;

	
	
	Для каждого Стр_2 Из Элементы.КМИзAPI.ВыделенныеСтроки Цикл
		Стр_1=Объект.КМИзAPI.НайтиПоИдентификатору(Стр_2);
		    Стр_1.Статус=Неопределено;
	   НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	
	   Если НаСервере Тогда
		 Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Стр_1.НомерКМ_Короткий);  
		Иначе
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			Если Thumbprint_1.НаименованиеСтенда="Табак"
							ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
Тогда
	
		NN=ВернутьТелоЗапросаПодключение(Стр_1.НомерКМ_Короткий);
						
	
			HTTPЗапрос=Новый HTTPЗапрос("private-office-api/private/v2/cis/status");
			//private-office-api/private/v2/cis/"+КодМаркировки+"/mrp"
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин   
			HTTPЗапрос.УстановитьТелоИзСтроки(NN,КодировкаТекста.UTF8);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
Иначе
			
			Текст=Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(Стр_1.НомерКМ_Короткий);
			Марк=Текст.Получитьтекст();
	
			что=Thumbprint_1.что;
	
	ММ= Стр_1.НомерКМ_Короткий;
	
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"&pg="+что);
		//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"&pg="+что);;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
КонецЕсли;
КонецЕсли;

		Если НаСервере Тогда
			Текст1=Ответ.ПолучитьТелоКакСтроку;
			
		Иначе
			Текст1=Ответ.ПолучитьТелоКакСтроку();
		КонецЕсли;	
		
		Если Thumbprint_1.НаименованиеСтенда="Табак"
						ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
Тогда
		
			Попытка
		//ЧтениеJSON = Новый ЧтениеJSON;
		//	ЧтениеJSON.УстановитьСтроку(Текст1);
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Если NNN=Неопределено тогда
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Стр_1.Статус=NNN["status"];
					
			Иначе
				Стр_1.Статус=NNN[0].status;
			КонецЕсли;
			
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Сообщить(Текст1);
			КонецПопытки;
	
Иначе
//ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(Текст1);
Попытка
	Если Ответ.КодСостояния=200 Тогда
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Если NNN=Неопределено тогда
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Стр_1.Статус=NNN["status"];
					
			Иначе
				Стр_1.Статус=NNN.status;
			КонецЕсли;
		Иначе
		
		Стр_1.Статус=Ответ.КодСостояния;
		 Сообщить(Текст1);
	КонецЕсли;
	

	
Исключение
	Сообщить(ОписаниеОшибки());
	Сообщить(Текст1);
КонецПопытки;
КонецЕсли;



	Конеццикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ПроверитьСтатусыПоВыделеннымАльтернатива(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	// Вставить содержимое обработчика.
	ПроверитьСтатусыПоВыделеннымАльтернативаНаСервере();
	
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСтатусыПоВыделеннымАльтернативаНаСервере()
	
	ЧислоПараллельныхПотоков = РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КоличествоЯдерДляГенерацииDataMatrix;
	
	МассивЗаданий = Новый Массив;
	ЗаданияПоСтрокам = Новый Соответствие;
	Thumbprint = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);	
	
	Если Не ЗначениеЗаполнено(Thumbprint) Тогда
		Возврат;
	КонецЕслИ;
	
	Для каждого Стр Из Элементы.КМИзAPI.ВыделенныеСтроки Цикл
		
		СерийныйНомер = Объект.КМИзAPI.НайтиПоИдентификатору(Стр);
		СерийныйНомер.Статус = Неопределено;
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(СерийныйНомер.НомерКМ_Короткий);
		МассивПараметров.Добавить(Thumbprint);
		
		Если ЧислоПараллельныхПотоков=0 Тогда
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				shoesD="";
				Если Данные <> Неопределено И данные.Свойство("shoesData",shoesD) Тогда
					СерийныйНомер.Статус = shoesD.status;
				КонецЕсли;
		Иначе
			Попытка
				Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара", МассивПараметров);
				ЗаданияПоСтрокам.Вставить(Задание.УникальныйИдентификатор, СерийныйНомер);
				МассивЗаданий.Добавить(Задание);
				
				Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
					ЗаполнитьСтатусыСерийныхНомеров(ЗаданияПоСтрокам, МассивЗаданий); 
				КонецЕсли;
			Исключение
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				shoesD="";
				Если Данные <> Неопределено И данные.Свойство("shoesData",shoesD) Тогда
					СерийныйНомер.Статус = shoesD.status;
				КонецЕсли;
					
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивЗаданий.Количество() >= 0 Тогда
		ЗаполнитьСтатусыСерийныхНомеров(ЗаданияПоСтрокам, МассивЗаданий); 
	КонецЕсли;
	
	
КонецПроцедуры


&НаКлиенте
Процедура ПечатьПростаяБелая(Команда) Экспорт
	// Вставить содержимое обработчика.
	Счетч=1;
		Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводПервогоЧисла_ЦРПТ_ПростаяБелая",ЭтаФорма));
	Форм.Число=Счетч;
	Форм.Заголовок="Начать печать с № КМ";
		
	
	//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводПервогоЧисла_ЦРПТ_ПростаяБелая",ЭтаФорма),Счетч,"Начать печать с № КМ");
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводПервогоЧисла_ЦРПТ_ПростаяБелая(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
		Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводВторогоЧисла_ЦРПТ_ПростаяБелая",ЭтаФорма,РР));
	Форм.Число=30;
	Форм.Заголовок="Допечатать указанное количество № КМ";
		
		//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводВторогоЧисла_ЦРПТ_ПростаяБелая",ЭтаФорма,РР),30,"Допечатать указанное количество № КМ");
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводВторогоЧисла_ЦРПТ_ПростаяБелая(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
		
		
		
		МассивКМРаспечатали=Новый Массив;
		
		Если ЗначениеЗаполненО(ЧислоПараллельныхПотоков) тогда
			Таб = ПечатьЭти_1_ЦРПТ_Функция_ПростаяБелая(ДД,РР,,МассивКМРаспечатали);
			Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
			
			Таб.Показать();
			
		Иначе
		
			Таб=Новый ТабличныйДокумент;
			ПечатьЭти_1_ЦРПТ_ПростаяБелая(Таб,ДД,РР,,МассивКМРаспечатали);
			Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
			
			Таб.Показать();
		Конецесли;
		
		ЗаполнитьрегистрПечати(МассивКМРаспечатали);
		
		
	КонецЕсли;
КонецПроцедуры


&НаСервере
Функция ПечатьЭти_1_ЦРПТ_Функция_ПростаяБелая(Смещение,Количество,НомерТТН="",МассивКМРаспечатали) Экспорт
	
	//Обр=РеквизитФормыВЗначение("Объект_1");
	Ссылка=Объект.Ссылка;
	НомерТТН=Объект.Номер;
	Таб = Новый ТабличныйДокумент;
	
	Мак=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("ПростаяБелая");
	ОблМ=Мак.ПолучитьОбласть("Строка");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НомераКМ_ХамелеонЦРПТ.НомерКМ
	|ИЗ
	|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
	|ГДЕ
	|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа";
	
	Запрос.УстановитьПараметр("ДокументЗаказа", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВерсияПравильная Тогда
		ГенераторМатрицы=Обработки.ГенерацияDataMatrix_ХамелеонЦРПТ.Создать();
		ГенераторМатрицы.Инициализировать();
	КонецЕсли;
	
	МассивЗаданий = Новый Массив;
	ЧислоПараллельныхПотоков = РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КоличествоЯдерДляГенерацииDataMatrix; 
	//ВремПапка = КаталогВременныхФайлов() + Формат(ТекущаяДата(), "ДФ=yyyyMMddHHmmss") + "\";
	СчРисунков = 0;
	
		ВремПапка=ПолучитьИмяВременногоФайла()+"\";	

	Если РезультатЗапроса.Количество()>0 Тогда 
		Если Смещение>РезультатЗапроса.Количество() Тогда
			Возврат ПоместитьВоВременноеХранилище(Таб);
		КонецЕсли;
		МинимумМ=Мин(РезультатЗапроса.Количество()+1,Смещение+Количество)-1;
		
		Для Сч=СМещение По МинимумМ
			//+1 
			Цикл
			Стр=РезультатЗапроса[Сч-1];
			//НСтр=Объект.Товары.НайтиСтроки(Новый Структура("ID",Стр.Order_Id_Line));
			//Если НСтр.Количество()=0  Тогда
			//	Продолжить;
			//Иначе
			//	НСтр=НСтр[0];
			//КонецЕсли;
			
			//ГТИН=Сред(Стр.НомерКМ,3);
			//ГТИН=Сред(ГТИН,1,15-1);
			//GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
			//
			//ОблМ=Мак.ПолучитьОбласть("Строка");
			//ОблМ.Параметры.Модель=GTIN.МодельПроизводителяАртикул;
			//Если ЗначениеЗаполнено(GTIN.Размер) Тогда
			//	ОблМ.Параметры.Размер=GTIN.Размер;
			//Иначе
			//	ОблМ.Параметры.Размер="--";
			//Конецесли;
			//ОблМ.Параметры.Цвет=GTIN.Цвет;
			
			ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			CIS="("+Сред(ООО,1,2)+")";
			
			//ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			//CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
			CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
			ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
				
				ГТИН=Сред(ГТИН,14+3);
				
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
			ГТИН=Сред(ГТИН,6);
			
			
			
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			//Попытка
			//						
			//	Если версияПравильная Тогда
			//		Картинка = ГенераторМатрицы.Сгенерировать(ООО);
			//	Иначе
			//		ГенераторМатрицы=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();						
			//		Картинка = ГенераторМатрицы.Сгенерировать(ООО);
			//	КонецЕсли;
			//	ОблМ.Рисунки.ДатаМ.Картинка=Новый Картинка(Картинка);
			//	
			//Исключение
			//	Сообщить("Для печати Data Matrix необходим релиз 8.3.9 или выше");
			//	//Возврат;
			//КонецПопытки;
			
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(ООО);
			МассивПараметров.Добавить(ВремПапка + СчРисунков + ".bmp");
			МассивПараметров.Добавить(ГенераторМатрицы.ПобитИсклИли);
			
			Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СгенерироватьDataMatrix", МассивПараметров);
			МассивЗаданий.Добавить(Задание);
			
			Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
				Попытка
					ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
				Исключение
				КонецПопытки;
				МассивЗаданий.Очистить();
			КонецЕсли;
			
			ОблМ.Рисунки.ДатаМ.Имя = "Рис" + СчРисунков;
			СчРисунков = СчРисунков + 1;
			
			Таб.Вывести(ОблМ);
			Таб.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЦикла;       
	Иначе
		Если Смещение>Объект.КМИзAPI.Количество() Тогда
			Возврат ПоместитьВоВременноеХранилище(Таб);
		КонецЕсли;
		МинимумМ=Мин(Объект.КМИзAPI.Количество()+1,СМещение+Количество)-1;
		Для СЧ=Смещение По МинимумМ
			//+1 
			Цикл
			ОблМ=Мак.ПолучитьОбласть("Строка");
			
			Стр=Ссылка.КМИзAPI[СЧ-1];
			
			//НСтр=Объект.Товары.НайтиСтроки(Новый Структура("ID",Стр.Order_Id_Line));
			//Если НСтр.Количество()=0  Тогда
			//	Продолжить;
			//Иначе
			//	НСтр=НСтр[0];
			//КонецЕсли;
			
			//ГТИН=Сред(Стр.НомерКМ,3);
			//ГТИН=Сред(ГТИН,1,15-1);
			//GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
			//
			//ОблМ.Параметры.Модель=GTIN.МодельПроизводителяАртикул;
			//Если ЗначениеЗаполнено(GTIN.Размер) Тогда
			//	ОблМ.Параметры.Размер=GTIN.Размер;
			//Иначе
			//	ОблМ.Параметры.Размер="--";
			//Конецесли;
			//ОблМ.Параметры.Цвет=GTIN.Цвет;
			
			ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			//ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
			CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
			ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
				
				ГТИН=Сред(ГТИН,14+3);
				
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
			ГТИН=Сред(ГТИН,6);
			
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			//Попытка
			//	Если ВерсияПравильная Тогда
			//		Картинка = ГенераторМатрицы.Сгенерировать(ООО);
			//	Иначе
			//		ГенераторМатрицы=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();
			//		
			//		Картинка = ГенераторМатрицы.Сгенерировать(ООО);
			//	КонецЕсли;
			//	ОблМ.Рисунки.ДатаМ.Картинка=Новый Картинка(Картинка);
			//	
			//Исключение
			//	Сообщить("Для печати Data Matrix необходим релиз 8.3.9 или выше");
			//	//Возврат;
			//КонецПопытки;
			
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(ООО);
			МассивПараметров.Добавить(ВремПапка + СчРисунков + ".bmp");
			МассивПараметров.Добавить(ГенераторМатрицы.ПобитИсклИли);
			
			Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СгенерироватьDataMatrix", МассивПараметров);
			МассивЗаданий.Добавить(Задание);
			
			Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
				Попытка
					ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
				Исключение
				КонецПопытки;
				МассивЗаданий.Очистить();
			КонецЕсли;
			
			ОблМ.Рисунки.ДатаМ.Имя = "Рис" + СчРисунков;
			СчРисунков = СчРисунков + 1;
			
			Таб.Вывести(ОблМ);
			Таб.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЦикла;
	КонецЕсли;
	
	Если МассивЗаданий.Количество() > 0 Тогда
		Попытка
			ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
		Исключение
		КонецПопытки;
		МассивЗаданий.Очистить();
	КонецЕсли;
	
	Для Сч = 0 По СчРисунков - 1 Цикл
		ИсходнаяКартинка = Новый Картинка(ВремПапка + Сч + ".bmp");
		Таб.Рисунки["Рис"+Сч].Картинка = ИсходнаяКартинка.Преобразовать(ФорматКартинки.PNG);
	КонецЦикла;
	
	УдалитьФайлы(ВремПапка);
	Возврат Таб;
	
КонецФункции


Процедура ПечатьЭти_1_ЦРПТ_ПростаяБелая(Таб,Смещение,Количество,НомерТТН="",МассивКМРаспечатали) Экспорт
	//Обр=РеквизитФормыВЗначение("Объект_1");
	Ссылка=Объект.Ссылка;
	НомерТТН=Объект.Номер;
	//Если ВерсияПравильная Тогда
	//	ГенераторМатрицы=Обработки.ГенерацияDataMatrix_ХамелеонЦРПТ.Создать();
	//	ГенераторМатрицы.Инициализировать();
	//КонецЕсли;
	
	Мак=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("ПростаяБелая");
	ОблМ=Мак.ПолучитьОбласть("Строка");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ,
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий
		|ИЗ
		|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
		|ГДЕ
		|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа";
	
	Запрос.УстановитьПараметр("ДокументЗаказа", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
НомерПП=0;
	Если ВерсияПравильная Тогда
	ГенераторМатрицы=Обработки.ГенерацияDataMatrix_ХамелеонЦРПТ.Создать();
	ГенераторМатрицы.Инициализировать();
	                           КонецЕсли;
	Если РезультатЗапроса.Количество()>0 Тогда 
		Если Смещение>РезультатЗапроса.Количество() Тогда
			Возврат;
		КонецЕсли;
		МинимумМ=Мин(РезультатЗапроса.Количество()+1,Смещение+Количество)-1;
		Для Сч=СМещение По МинимумМ
			//+1 
			Цикл
			ОблМ=Мак.ПолучитьОбласть("Строка");
			
			Стр=РезультатЗапроса[Сч-1];
			
Если СоответствоватьТребованиямЦРПТ=Истина Тогда
				
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	КМРаспечатано_ХамелеонЦРПТ.Распечатан,
						|	КМРаспечатано_ХамелеонЦРПТ.cis
						|ИЗ
						|	РегистрСведений.КМРаспечатано_ХамелеонЦРПТ КАК КМРаспечатано_ХамелеонЦРПТ
						|ГДЕ
						|	КМРаспечатано_ХамелеонЦРПТ.cis = &cis";
					
					Запрос.УстановитьПараметр("cis", Стр.НомерКМ_Короткий);
					
					РезультатЗапроса_1 = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи_1 = РезультатЗапроса_1.Выбрать();
					НашлиКМЭЭ=ЛОжь;
					Пока ВыборкаДетальныеЗаписи_1.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						если ВыборкаДетальныеЗаписи_1.cis=Стр.НомерКМ_Короткий 
							И ВыборкаДетальныеЗаписи_1.Распечатан=Истина Тогда
							НашлиКМЭЭ=Истина;
							Прервать;
						Конецесли;
						
					КонецЦикла;
					Если НашлиКМЭЭ=Истина Тогда
						Продолжить;
					Конецесли;
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					НомерПП=НомерПП+1;
					МассивКМРаспечатали.Добавить(Новый Структура("cis,НомерПП",Стр.НомерКМ_Короткий,НомерПП));
					
					//РегДв=РегистрыСведений.КМРаспечатано_ХамелеонЦРПТ.СоздатьНаборЗаписей();
					//РегДв.Отбор.cis.Установить(Стр.НомерКМ_Короткий);
					//НомерПП=НомерПП+1;
					//РегДв.Отбор.НомерПП.Установить(НомерПП);
					//Добав=РегДв.Добавить();
					//Добав.cis=Стр.НомерКМ_Короткий;
					//Добав.НомерПП=НомерПП;
					//Добав.Распечатан=Истина;
					//РегДв.Записать(Истина);
				
			Конецесли;
			
			//НСтр=Объект.Товары.НайтиСтроки(Новый Структура("ID",Стр.Order_Id_Line));
			//Если НСтр.Количество()=0  Тогда
			//	Продолжить;
			//Иначе
			//	НСтр=НСтр[0];
			//КонецЕсли;
			
			ГТИН=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьGTINСМарки(Стр.НомерКМ);
			//Сред(Стр.НомерКМ,3);
			ГТИН=Сред(ГТИН,1,15-1);
			GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
			
			//ОблМ.Параметры.Модель=GTIN.МодельПроизводителяАртикул;
			//Если ЗначениеЗаполнено(GTIN.Размер) Тогда
			//	ОблМ.Параметры.Размер=GTIN.Размер;
			//Иначе
			//	ОблМ.Параметры.Размер="--";
			//Конецесли;
			//ОблМ.Параметры.Цвет=GTIN.Цвет;
			
			ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			CIS="("+Сред(ООО,1,2)+")";
			
			//ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			//CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
	CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
		ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
		
				ГТИН=Сред(ГТИН,14+3);
			
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
				ГТИН=Сред(ГТИН,6);
				
				
				
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			
			
			Попытка
				
				Если версияПравильная Тогда
			Картинка = ГенераторМатрицы.Сгенерировать(ООО);Иначе
									ГенераторМатрицы=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();

					Картинка = ГенераторМатрицы.Сгенерировать(ООО);
КонецЕсли;
			ОблМ.Рисунки.ДатаМ.Картинка=Новый Картинка(Картинка);
						
			Исключение
				Сообщить("Для печати Data Matrix необходим релиз 8.3.9 или выше");
				//Возврат;
			КонецПопытки;
			
			
		
							
									Таб.Вывести(ОблМ);
					Таб.ВывестиГоризонтальныйРазделительСтраниц();
									
						КонецЦикла;       
	Иначе
		Если Смещение>Объект.КМИзAPI.Количество() Тогда
			Возврат;
		КонецЕсли;
		МинимумМ=Мин(Объект.КМИзAPI.Количество()+1,СМещение+Количество)-1;
		Для СЧ=Смещение По МинимумМ
			//+1 
			Цикл
			ОблМ=Мак.ПолучитьОбласть("Строка");
			
			Стр=Ссылка.КМИзAPI[СЧ-1];
			
Если СоответствоватьТребованиямЦРПТ=Истина Тогда
				
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	КМРаспечатано_ХамелеонЦРПТ.Распечатан,
						|	КМРаспечатано_ХамелеонЦРПТ.cis
						|ИЗ
						|	РегистрСведений.КМРаспечатано_ХамелеонЦРПТ КАК КМРаспечатано_ХамелеонЦРПТ
						|ГДЕ
						|	КМРаспечатано_ХамелеонЦРПТ.cis = &cis";
					
					Запрос.УстановитьПараметр("cis", Стр.НомерКМ_Короткий);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи_1 = РезультатЗапроса.Выбрать();
					НашлиКМЭЭ=ЛОжь;
					Пока ВыборкаДетальныеЗаписи_1.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						если ВыборкаДетальныеЗаписи_1.cis=Стр.НомерКМ_Короткий 
							И ВыборкаДетальныеЗаписи_1.Распечатан=Истина Тогда
							НашлиКМЭЭ=Истина;
							Прервать;
						Конецесли;
						
					КонецЦикла;
					Если НашлиКМЭЭ=Истина Тогда
						Продолжить;
					Конецесли;
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					НомерПП=НомерПП+1;
					МассивКМРаспечатали.Добавить(Новый Структура("cis,НомерПП",Стр.НомерКМ_Короткий,НомерПП));
					
					//РегДв=РегистрыСведений.КМРаспечатано_ХамелеонЦРПТ.СоздатьНаборЗаписей();
					//РегДв.Отбор.cis.Установить(Стр.НомерКМ_Короткий);
					//НомерПП=НомерПП+1;
					//РегДв.Отбор.НомерПП.Установить(НомерПП);
					//Добав=РегДв.Добавить();
					//Добав.cis=Стр.НомерКМ_Короткий;
					//Добав.НомерПП=НомерПП;
					//Добав.Распечатан=Истина;
					//РегДв.Записать(Истина);
				
			Конецесли;
			
			
			//НСтр=Объект.Товары.НайтиСтроки(Новый Структура("ID",Стр.Order_Id_Line));
			//Если НСтр.Количество()=0  Тогда
			//	Продолжить;
			//Иначе
			//	НСтр=НСтр[0];
			//КонецЕсли;
			
			ГТИН=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьGTINСМарки(Стр.НомерКМ);
			//Сред(Стр.НомерКМ,3);
			ГТИН=Сред(ГТИН,1,15-1);
			GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
			
			//ОблМ.Параметры.Модель=GTIN.МодельПроизводителяАртикул;
			//Если ЗначениеЗаполнено(GTIN.Размер) Тогда
			//	ОблМ.Параметры.Размер=GTIN.Размер;
			//Иначе
			//	ОблМ.Параметры.Размер="--";
			//Конецесли;
			//ОблМ.Параметры.Цвет=GTIN.Цвет;
			//
			ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			//ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
	CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
		ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
		
				ГТИН=Сред(ГТИН,14+3);
			
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
				ГТИН=Сред(ГТИН,6);
			
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			
			
			Попытка
				Если ВерсияПравильная Тогда
			Картинка = ГенераторМатрицы.Сгенерировать(ООО); Иначе					ГенераторМатрицы=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();

					Картинка = ГенераторМатрицы.Сгенерировать(ООО);
КонецЕсли;
			ОблМ.Рисунки.ДатаМ.Картинка=Новый Картинка(Картинка);
						
			Исключение
				Сообщить("Для печати Data Matrix необходим релиз 8.3.9 или выше");
				//Возврат;
			КонецПопытки;
		
							
					Таб.Вывести(ОблМ);
					Таб.ВывестиГоризонтальныйРазделительСтраниц();
			
			КонецЦикла;
			КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ОтправитьВЦРПТПотомВвсестиВОБорот(Команда) Экспорт
	// Вставить содержимое обработчика.
	
	Объект.ВвестиВОборотПослеЭмитирования=Истина;
	ОтправитьВЦРПТ(Команда)
КонецПроцедуры


Функция ГУИДНет()
	Возврат Не ЗначениеЗаполнено(Объект.СервисПровайдер.guid_СервисПровайдера);
КонецФункции

&НаКлиенте
Процедура СервисПровайдерПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	
	Если ГУИДНет() ТОгда
		Сообщить("Выберите сервис-провайдера из списка!!");
		Объект.СервисПровайдер=Неопределено;
	КонецЕсли;
	НаСервереОпределеяемТипСпособа();
	
КонецПроцедуры

Процедура НаСервереОпределеяемТипСпособа()
	Объект.СпособИзготовленияСИ=Объект.СервисПровайдер.СпособИзготовления;
	Если Не ЗначениеЗаполнено(Объект.СпособИзготовленияСИ) тогда
		Объект.СпособИзготовленияСИ=Перечисления.СпособИзготовленияСИ_ХамелеонЦРПТ.Самостоятельно
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СервисПровайдерНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура СервисПровайдерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
//	СтандартнаяОбработка=Ложь;
КонецПроцедуры

Функция ПолучитьКМ_Р(Стр)
	//Возврат Стр.НомерКМ_Короткий
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий
		|ИЗ
		|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
		|ГДЕ
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ = &НомерКМ";
	
	Запрос.УстановитьПараметр("НомерКМ", Стр.НомерКМ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НомерКМ_Короткий) тогда
			Возврат ВыборкаДетальныеЗаписи.НомерКМ_Короткий 
		КонецЕсли;
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ВывестиОтчетПоРегистру(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	МассивКМ=Новый СписокЗначений;
	Для Каждого Стр Из Элементы.РегистрСерийныеНомераКМ.ВыделенныеСтроки Цикл
		
		
		
		Стр_1=ПолучитьКМ_Р(Стр);
		Если ЗначениеЗаполненО(Стр_1) Тогда
			МассивКМ.Добавить(Стр_1);
		КонецЕсли;
		
	Конеццикла;
	
	Форм=ОткрытьФорму("Отчет.ОтчетПоКМ_ХамелеонЦРПТ.Форма.ФормаОтчета");
	Форм.ПрименитьОтбор(МассивКМ);
	
КонецПроцедуры



&НаКлиенте
Процедура ОбновитьИзНК(Команда) Экспорт
 	// Вставить содержимое обработчика.
	Для Каждого Стр_1 Из Объект.Товары Цикл
		Форм=ПолучитьФорму("Справочник.Продукция_ХамелеонЦРПТ.Форма.ФормаЭлемента",
		Новый Структура("Ключ",Стр_1.GTIN));
		Форм.ОбновитьКарточкуИзНК(Команда);
		Форм.Записать();
		
	Конеццикла;
	ЭтаФорма.Прочитать();
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьНаМодерацию(Команда) Экспорт
	// Вставить содержимое обработчика.
	Для Каждого Стр_1 Из Объект.Товары Цикл
		Форм=ПолучитьФорму("Справочник.Продукция_ХамелеонЦРПТ.Форма.ФормаЭлемента",
		Новый Структура("Ключ",Стр_1.GTIN));
		Форм.ОтправитьНаМодерацию(Команда);
		
	Конеццикла;
	ЭтаФорма.Прочитать();
	
КонецПроцедуры


&НаКлиенте
Процедура ПодписатьИОпубликовать(Команда)  Экспорт
	// Вставить содержимое обработчика.
	Для Каждого Стр_1 Из Объект.Товары Цикл
		Форм=ПолучитьФорму("Справочник.Продукция_ХамелеонЦРПТ.Форма.ФормаЭлемента",
		Новый Структура("Ключ",Стр_1.GTIN));
		Форм.ПодписатьИОпубликовать(Команда);
	
	Конеццикла;
	ЭтаФорма.Прочитать();
	
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьДаныеВНК(Команда) Экспорт
	// Вставить содержимое обработчика.
	Для Каждого Стр_1 Из Объект.Товары Цикл
		Форм=ПолучитьФорму("Справочник.Продукция_ХамелеонЦРПТ.Форма.ФормаЭлемента",
		Новый Структура("Ключ",Стр_1.GTIN));
		Форм.ЗарегистрироватьВКаталогеТоваров(Команда);
	
	Конеццикла;
	ЭтаФорма.Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьКМИзФайлаИзЦРПТ(Команда)
	// Вставить содержимое обработчика.
	ВклЗаг = 0;
	Отказ=Истина;
	//ДанныеЛиста.Очистить();
	Режим=РежимДиалогаВыбораФайла.Открытие;
	нДиалог= НОвый ДиалогВыбораФайла(Режим);
	//Фильтр="Файл *|*.*";
	
	//нДиалог.Фильтр=Фильтр;
	нДиалог.Заголовок="Выберите файл для загрузки..." ;
	нДиалог.МножественныйВыбор=Истина;
	
	
	МассивКМ=Новый Массив;
	
	Если нДиалог.Выбрать() тогда
//		Файл=НОвый Файл(пвФайл);
		Состояние("Выполняется инициализация...");
	иначе
		Возврат;
	КонецЕсли;
	для Каждого 		ВыборЗагрExcel ИЗ нДиалог.ВыбранныеФайлы Цикл

		ТекстовыйД=Новый ТекстовыйДокумент;
		ТекстовыйД.Прочитать(ВыборЗагрExcel);
		Текст=ТекстовыйД.ПолучитьТекст();
		
		НасервереДелаем(Текст);
				
	Конеццикла;
	УстВидим();

КонецПроцедуры

Процедура НаСервереДелаем(Текст)
	
		РРР=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст);
		
		HHH=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(РРР["content"]);
		HHH=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(HHH);
		
	МассивМарок=Новый Массив;
								
	Для Каждого Стр_1 Из HHH["metadata"]["results"] Цикл
		Для каждого Стр_2 Из Стр_1["cisList"] Цикл
//						ЗаписатьВДокумент(NNN);
//										Добав=Объект.КМИзAPI.Добавить();
				 //СпрОД=СоздатьНайтиИДСТРОКИ(Стр);
				//Добав.Order_Id_Line=СпрОД;
				
				
				//ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1);
				ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_2["cis"]);
 				 НомерКМ=КодСтрСервер_Дв(ДвоичнД);
				 
				 МассивМарок.Добавить(НомерКМ);
				 
				  Конеццикла;
			 Конеццикла;
		 ЗаписатьВРегистр(МассивМарок,"");
		
КонецПроцедуры

//++ МВ:Овчинников 30.09.2020  •1
Процедура ДобавитьРеквизитыНаФорму()
	// добавляем элемент формы "МВ_Интегратор"
	НовыйЭлемент = Элементы.Добавить("МВ_Интегратор", Тип("ПолеФормы"), Элементы.Общая);
    НовыйЭлемент.ПутьКДанным                  = "Объект.МВ_Интегратор";
    НовыйЭлемент.Вид                          = ВидПоляФормы.ПолеВвода;
	
	ФТО_РаботаСФормами.ДобавитьКомандуФормы(ЭтаФорма,"ВыгрузитьФайлКМ_ОКТО","КомандаВыгрузитьФайлКМ_ОКТО","Выгрузить Файл КМ ОКТО",ВидКнопкиФормы.КнопкаКоманднойПанели,КоманднаяПанель,КоманднаяПанель.ПодчиненныеЭлементы.ГруппаКнопок);
	//ФТО_РаботаСФормами.ДобавитьКомандуФормы(ЭтаФорма,"ОтправитьОтчетАрле","КомандаСформироватьВводВОборотДляАрлы","Отправить отчет Арле",ВидКнопкиФормы.ОбычнаяКнопка, Элементы.Товары.КоманднаяПанель,Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Подсчитать);
	//ФТО_РаботаСФормами.ДобавитьПолеФормы(ЭтаФорма,"МВ_ОтчетАрлеОтправлен","Объект.МВ_ОтчетАрлеОтправлен","Отправлен Арле" ,ВидПоляФормы.ПолеФлажка,Элементы.НомерДта);
КонецПроцедуры //ДобавитьРеквизитыНаФорму //-- Овчинников

&НаКлиенте
Процедура РазбитьНаКоличествоКМ(Команда)
	Попытка
	Записать();
Исключение
	КонецПопытки;
	
	ПоказатьВводЧисла(Новый ОписаниеОповещения("ПолсеВыбора",ЭтаФорма),150000,"Укажите количество КМ на которое необходимо разбить документ",10,0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолсеВыбора(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
		РазбитьДокументНаНесколько(РР);
		
		ЭтаФорма.Закрыть();
		
	КонецЕсли;
	
	
Конецпроцедуры

Процедура РазбитьДокументНаНесколько(РР)
	Если Объект.Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
		ИЛИ Объект.Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ЧастичноПринят
		Или Объект.Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента
		ИЛИ Объект.Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик
		Тогда
		Возврат;
	КонецЕсли;
	УдалитьНадо=Объект.Ссылка.ПолучитьОбъект();
	
	былПроведен=ложь;
	Если УдалитьНадо.Проведен Тогда
		УдалитьНадо.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		БылПроведен=Истина;
	КонецЕслИ;
	
	
	
	МассивДокументовПервый=Новый Массив;
		Смещение=0;
		
	Для Каждого СТр Из Объект.Товары Цикл
		
		Смещение=Стр.КоличествоКМ;
		Пока смещение>0 ЦИкл
			Списать=Мин(Смещение,РР);
			
			НовыйДокумент=Документы.ЗаказМарок_ХамелеонЦРПТ.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НовыйДокумент,Объект,,"Номер,_Order_ID,Статус,ОшибкаОтправки");
			НовыйДокумент.Дата=ТекущаяДата();
			Добав=НовыйДокумент.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(Добав,Стр);
			Добав.КоличествоКМ=Списать;
			
			
			Если Объект.СерийныеНомера.Количество()>0 Тогда
				
				Удалим=Новый Массив;
				НСтр=ОБъект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
				КолСер=Мин(Списать,НСтр.Количество());
				Если КолСер>0 Тогда
					Для сч=1 по колСер цикл
						Добав_С=Объект.СерийныеНомера.Добавить();
						ЗаполнитьЗначенияСвойств(Добав_С,НСтр[Сч-1] );
						Удалим.Добавить(НСтр[Сч-1] );
					Конеццикла;
					Для Каждого СтрСУд Из Удалим Цикл
						Объект.СерийныеНомера.Удалить(СтрСУд);
					Конеццикла;
				Конецесли;
				
			Конецесли;
			
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			Если БылПроведен Тогда
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
				
			Смещение=Смещение-Списать;
			
		Конеццикла;
			 				
	Конеццикла;
	//Если Объект.Товары.Количество()>0 Тогда
	//	НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
	//	Если БылПроведен Тогда
	//		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	//	КонецЕсли;
	//		
	//КонецЕсли;
	Попытка
		УдалитьНадо.ПометкаУдаления=Истина;
		УдалитьНадо.Записать(РежимЗаписиДокумента.Запись);
	Исключение
	КонецПопытки;

		
		
		
		
		
		
		
		
	
	
Конецпроцедуры

&НаКлиенте
Процедура ПолучитьСтатусыСтрочек(Команда,УжеПолучили=Ложь)
	// Вставить содержимое обработчика.
	
	Объект.ОшибкиПолучения.Очистить();
	
		
	ЭтаФорма.Модифицированность=Истина;
	
	Пользователь=Неопределено;
	ПараметрыДлякилента=ПолучитьИзПользователя(Пользователь);
	Если Не ЗначениеЗаполнено(ПараметрыДлякилента) Тогда
		Возврат;
	КонецЕслИ;
			
	ТокенСУЗ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(ПараметрыДлякилента);
	
	ТекстСохранения="";
				АдресРаздробить=ПараметрыДлякилента.АдресСУЗ;
				Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
				Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
				Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
				Порт=Сред(Порт,Найти(Порт,":")+1);
				ТекстСохранения=Адрес;
				Попытка
					Порт=число(Порт);
					ТекстСохранения=ТекстСохранения+":"+Формат(Порт,"ЧГ=");
				Исключение
					Порт=Неопределено;
				КонецПопытки;
				
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			ПоказатьПредупреждение(,"В пользователе не заполнен адрес СУЗ");
			Возврат;
			
		КонецЕсли;
		
		Если Найти(АдресРаздробить,"https")=1 Тогда
			ТекстСохранения="https://"+ТекстСохранения;
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				ТекстСохранения="http://"+ТекстСохранения;
				Защищ=Неопределено;
			КонецЕсли;
				ТекстСохранения="GET "+ТекстСохранения+"/";
				
			
			
					Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
					
						HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,,Защищ);
					Иначе
						HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,,Защищ);
					КонецЕсли;
					
					сч=0;
					ТекстСохранения_1="";
					
					ОтветыОтСУЗ="";
						Для Каждого Стр Из Объект.Товары Цикл
						Сч=СЧ+1;
						Если ЗначениезАполнено(ТекстСохранения_1) тогда
							ТекстСохранения_1=ТекстСохранения_1+Символы.ПС;
						Конецесли;
						ТекстСохранения_1=Символы.ПС+" запрос по "+Формат(Сч,"ЧГ=")+" строке";
						
						
							Стр.СтатусСтроки="";
							Стр.ОшибкаПолучения="";
							//Если НЕ ЗначениеЗаполнено(Стр.ИДСУЗ)  Тогда
							//	Продолжить;
							//КонецЕсли;
															
								HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/status?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+
								"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								ТекстСохранения_1=ТекстСохранения_1+Символы.ПС+ТекстСохранения+"api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/status?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+
								"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ;
								
								ТекстСохранения_1=ТекстСохранения_1+Символы.ПС+"Заголовки";
								
								ТекстСохранения_1=ТекстСохранения_1+Символы.ПС+"Content-Type:application/x-www-form-urlencoded;charset=UTF-8";
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								ТекстСохранения_1=ТекстСохранения_1+Символы.ПС+"clientToken:"+ТокенСУЗ;
								HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
								
								
								Попытка
									Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
								Исключение
								конецПопытки;
								ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
								Если ЗначениеЗаполненО(ОтветыОтСУЗ) Тогда	
									ОтветыОтСУЗ=ОтветыОтСУЗ+Символы.ПС;
								Конецесли;
								ОтветыОтСУЗ=ОтветыОтСУЗ+" ответ по "+Формат(Сч,"ЧГ=")+" строке";
								ОтветыОтСУЗ=ОтветыОтСУЗ+Символы.ПС+ТекстДокумента;
								
								
					//ОтветыОтСУЗ=ОтветыОтСУЗ+"
								
								
								//Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
								//	ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП);
								//КонецЕсли;
								//Стр.КоличествоПолучено=Получить;
								 //Попытка
									//ЧтениеJSON = Новый ЧтениеJSON;
									//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
										Если Ответ.КодСостояния=200 Тогда
											
											//Если NNN["bufferStatus"]="ACTIVE" Тогда
											Стр.СтатусСтроки=NNN["bufferStatus"];
											Стр.ОшибкаПолучения=NNN["rejectionReason"];
											//Конецесли;
											
											
									Иначе
										
										
										
										
										
								//		
								//		Если NNN["success"]=Ложь Тогда
								//		globalErrors="";
								//		Для Каждого Стр_1 Из NNN["globalErrors"] Цикл
								////Если ТипЗнч(Стр_1)=Тип("Структура") ТОгда
								//
								//			добав_1=Объект.ОшибкиПолучения.Добавить();
								//			добав_1.Ошибка=Стр_1["error"];
								//			добав_1.КодОшибки=Стр_1["errorCode"];
								//			globalErrors=globalErrors+добав_1.Ошибка;
								//			
								//			Если Стр_1["errorCode"]=1160 
								//				ИЛИ Стр_1["errorCode"]=1100 
								//				ИЛИ Стр_1["errorCode"]=1090 
								//				Тогда
								//					ОчиститьПодключениюКСУЗНаСервере(ПараметрыДлякилента.ТекущийПользователь);						
								//					ОчиститьДинамическийТокен(ПараметрыДлякилента.ТекущийПользователь,ПараметрыДлякилента.Thumbprint_1);
								//					
								//					
								//					Если УжеПолучили=Ложь Тогда
								//						ПолучитьСтатусыСтрочек(Команда,Истина);
								//						Возврат;
								//					Иначе
								//						Возврат
								//					Конецесли;
								//				//ИначеЕсли Стр_1["errorCode"]=3390
								//				//	И Найти(Стр_1["error"],"PENDING")=0
								//				//	Тогда
								//				//	/////ЗАКРЫВАЕМ ЗАКАЗ

								//				//	HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)
								//				//	+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								//				//	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								//				//	HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
								//				//	Попытка
								//				//		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
								//				//	Исключение
								//				//	КонецПопытки;
								//					   												
								//			КонецеслИ;
								//		Конеццикла;
										//Для Каждого Стр_111 Из Стр_1 Цикл
										//	globalErrors=globalErrors+Стр_111.Значение+"
										//	|"
										//Конеццикла;
										
								//	Иначе
								//		globalErrors=globalErrors+Стр_1+"
								//		|"
								//	Конецесли;										Конеццикла;
										//стр.СтатусСтроки="Отказ";
							
									//	Конецесли;									   
									   
									  Конецесли;								  
							Конеццикла;
						//КонецциклА;
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
						
						ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапишемВРЕГИСТР_ОтправленныеПолученные_ХамелеонЦРПТ(Объект.Ссылка,ТекстСохранения_1,"Получение статусов по заказу КМ");
						ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапишемВРЕГИСТР_ОтправленныеПолученные_ХамелеонЦРПТ(Объект.Ссылка,ОтветыОтСУЗ,"Ответ на получение статусов по заказу КМ");
						
				Конецесли;
						
	ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
			
	ЭтаФорма.Прочитать();  
		
	

	
КонецПроцедуры


&НаКлиенте
Процедура ОтправкаСтатусов(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	СчитатьОтправкуНаСервере_Статусы();
КонецПроцедуры

&НаСервере
Процедура СчитатьОтправкуНаСервере_Статусы()
	// Вставить содержимое обработчика.
	Хр=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.Получить(Новый Структура("Документ,Вид",Объект.Ссылка,"Получение статусов по заказу КМ")).Файл;
	Если Хр<>Неопределено тогда
		Отправка=Хр.Получить();
	Конецесли;
КонецПроцедуры

&НаСервере
Процедура ПолучениеОтватеаПоОтправкеСтатусовНаСервере()
	// Вставить содержимое обработчика.
	Хр=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.Получить(Новый Структура("Документ,Вид",Объект.Ссылка,"Ответ на получение статусов по заказу КМ")).Файл;
	Если Хр<>Неопределено тогда
		ОтветОтЦРПТ=Хр.Получить();
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеОтватеаПоОтправкеСтатусов(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	ПолучениеОтватеаПоОтправкеСтатусовНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЛогОтветаПолучениеКМНаСервере()
	// Вставить содержимое обработчика.
	


	Хр=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.Получить(Новый Структура("Документ,Вид",Объект.Ссылка,"Ответ на запрос на получение КМ по заказу")).Файл;
	Если Хр<>Неопределено тогда
		ОтветОтЦРПТ=Хр.Получить();
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура ЛогОтветаПолучениеКМ(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	ЛогОтветаПолучениеКМНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЛогЗапросаНаПолучениеКМНаСервере()
	// Вставить содержимое обработчика.
	Хр=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.Получить(Новый Структура("Документ,Вид",Объект.Ссылка,"Запрос на получение КМ по заказу")).Файл;
	Если Хр<>Неопределено тогда
		Отправка=Хр.Получить();
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура ЛогЗапросаНаПолучениеКМ(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	ЛогЗапросаНаПолучениеКМНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЛогЗАкртиыеНаСервере()
	// Вставить содержимое обработчика.
	Хр=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.Получить(Новый Структура("Документ,Вид",Объект.Ссылка,"Закрыть заказ на КМ")).Файл;
	Если Хр<>Неопределено тогда
		Отправка=Хр.Получить();
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура ЛогЗАкртиые(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	ЛогЗАкртиыеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЛогОтветЗакртытиеНаСервере()
		Хр=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.Получить(Новый Структура("Документ,Вид",Объект.Ссылка,"Ответ на закрытие заказ на КМ")).Файл;
	Если Хр<>Неопределено тогда
		ОтветОтЦРПТ=Хр.Получить();
	Конецесли;
// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ЛогОтветЗакртытие(Команда)
	ЛогОтветЗакртытиеНаСервере();
КонецПроцедуры
	
	
//++ МВ:Овчинников 01.07.2021  •0
&НаКлиенте
Процедура КомандаВыгрузитьФайлКМ_ОКТО(Команда)

	СтруктураНастроек = ПолучитьНастройкиОКТО();
	Если СтруктураНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Каталог = СтруктураНастроек.ОКТОКаталог;
	ИД_Организации_в_ОКТО = СтруктураНастроек.ИдентификаторОрганизации;
	Login = СтруктураНастроек.Логин;
	Password = СтруктураНастроек.Пароль;

		Количество = 0;
		GTINСтрока = "";
		//ИД_Организации_в_ОКТО ="";
		ДвоичныеДанные = ПолучитьФайлДляОКТО(Объект.Ссылка, GTINСтрока, Количество);
		Если Каталог = "" Тогда
			Каталог =  "C:\temp" ;
		КонецЕсли;	
		Если ДвоичныеДанные <> Неопределено Тогда 
			//++ МВ:Овчинников 24.05.2021  •0
			//idкомпании_gtin_количество_дата (ДДММГГ)_время (ччммсс).csv
			ИмяФайла = Каталог+"\"+ИД_Организации_в_ОКТО+СтрЗаменить(СокрЛП(GTINСтрока),Символ("160"),"")+"_"+Количество+"_"+Формат(ТекущаяДата(),"ДФ=ddMMyy_HHmmss")+".csv";
			//-- МВ:Овчинников 24.05.2021

			ДвоичныеДанные.Записать(ИмяФайла);
		КонецЕсли;
	

КонецПроцедуры //-- МВ:Овчинников 01.07.2021

//++ МВ:Овчинников 01.07.2021  •0
&НаСервере
Функция ПолучитьФайлДляОКТО(Ссылка, GTINСтрока, Количество)
	Количество = 0;	

	ДанныеТекст = Новый ТекстовыйДокумент;
	GTINСтрока = "";
	Для Каждого СтрокаТовары Из Ссылка.Товары Цикл 
		Если ЗначениеЗаполнено(GTINСтрока) Тогда 
			GTINСтрока = GTINСтрока + ",";
		КонецЕсли;
		GTINСтрока = GTINСтрока + СтрокаТовары.GTIN.GTIN;
	КонецЦикла;
	
	GTINСтрока = Лев(GTINСтрока, 170);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ КАК НомерКМ
		|ИЗ
		|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
		|ГДЕ
		|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа
		|	И НомераКМ_ХамелеонЦРПТ.КМНапечатан = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ДокументЗаказа", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		
		Для Каждого КМИзДокумента ИЗ Ссылка.КМИзAPI Цикл
			ДанныеСтрока = РаскодироватьСтроку(КМИзДокумента.НомерКМ, СпособКодированияСтроки.КодировкаURL);
			ДанныеТекст.ДобавитьСтроку(ДанныеСтрока);
		Конеццикла;
		
	Иначе
		
		Пока Выборка.Следующий() Цикл
			ДанныеСтрока = РаскодироватьСтроку(Выборка.НомерКМ, СпособКодированияСтроки.КодировкаURL);
			ДанныеТекст.ДобавитьСтроку(ДанныеСтрока);	
		КонецЦикла;	
		
	КонецеслИ;
	
	Если ДанныеТекст.КоличествоСтрок() > 0 Тогда 
		ВременныйФайлТекст = ПолучитьИмяВременногоФайла();
		ДанныеТекст.Записать(ВременныйФайлТекст, КодировкаТекста.UTF8);
		ДанныеДвоичныеДанные = Новый ДвоичныеДанные(ВременныйФайлТекст);
	    Строка64 = Base64Строка(ДанныеДвоичныеДанные);
	    Строка64 = Прав(Строка64,СтрДлина(Строка64)-4);
	    ДанныеДвоичныеДанные = Base64Значение(Строка64);
		УдалитьФайлы(ВременныйФайлТекст);
		
		ДокументЗаказаОбъект = Ссылка.ПолучитьОбъект();
		Для Каждого СтрокаКМ Из ДокументЗаказаОбъект.КМИзAPI Цикл 
			СтрокаКМ.Статус = "НАПЕЧАТАН";
		КонецЦикла;
		
		Попытка
			ДокументЗаказаОбъект.Записать();
		Исключение КонецПопытки;
		
		ДанныеНомераКМ = РегистрыСведений.НомераКМ_ХамелеонЦРПТ.СоздатьНаборЗаписей();
		ДанныеНомераКМ.Отбор.ДокументЗаказа.Установить(Ссылка);
		ДанныеНомераКМ.Прочитать();
		
		Для Каждого ЗаписьНомераКМ Из ДанныеНомераКМ Цикл 
			ЗаписьНомераКМ.КМНапечатан = Истина;
		КонецЦикла;
		
		ДанныеНомераКМ.Записать(Истина);
		
		//++ МВ:Овчинников 21.05.2021  •0
		//id для ЛК Калача  - dcc9df8b-1955-43e2-be30-29ec0c5da619
		//id для "Малыш" - 6c2f1250-0f84-47a6-a2fe-04ea8abacc11
		//ИД_Организации_в_ОКТО = РегистрыСведений.МВ_ДополнительныеНастройки.ПолучитьЗначения(ПланыВидовХарактеристик.МВ_ПереченьДополнительныхНастроек.ОКТОИдентификаторОрганизации, ТекущаяДата(),Ссылка.Организация);
		//Каталог = РегистрыСведений.МВ_ДополнительныеНастройки.ПолучитьЗначения(ПланыВидовХарактеристик.МВ_ПереченьДополнительныхНастроек.ОКТОКаталогФайловДляЗагрузкиКМ, ТекущаяДата(),Ссылка.Организация);
		//-- МВ:Овчинников 21.05.2021
		//Если Каталог = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Каталог) Тогда 
		//	Каталог = Ссылка.МВ_Интегратор.КаталогВыгрузкиКодов;
		//КонецЕсли;	
		Количество =  ДанныеТекст.КоличествоСтрок();
		Возврат ДанныеДвоичныеДанные; 
	Иначе 
		Возврат Неопределено;
	КонецЕсли;

КонецФункции   //-- МВ:Овчинников 01.07.2021

//++ МВ:Овчинников 24.06.2021  •0
&НаСервереБезКонтекста
Функция ПолучитьНастройкиОКТО()
	
	ТекДата = ТекущаяДатаСеанса();	
	МассивНастроек = Новый Массив;
	ПереченьНастроек = ПланыВидовХарактеристик.МВ_ПереченьДополнительныхНастроек;
	МассивНастроек.Добавить(ПереченьНастроек.ОКТОКаталогДляВыгрузкиКМ);
	МассивНастроек.Добавить(ПереченьНастроек.ОКТОИдентификаторОрганизации);
	МассивНастроек.Добавить(ПереченьНастроек.ОКТОЛогин);
	МассивНастроек.Добавить(ПереченьНастроек.ОКТОПароль);
	Организация = РегистрыСведений.МВ_ДополнительныеНастройки.ПолучитьЗначения(ПланыВидовХарактеристик.МВ_ПереченьДополнительныхНастроек.ОсновнаяОрганизация, ТекДата);
	
	СоответствиеНастроек = РегистрыСведений.МВ_ДополнительныеНастройки.ПолучитьЗначения(МассивНастроек,ТекДата,Организация);
	Интерактивно = Истина;
	ОКТОКаталог = СоответствиеНастроек.Получить(МассивНастроек[0]);
	ИдентификаторОрганизации = СоответствиеНастроек.Получить(МассивНастроек[1]);
	Если ОКТОКаталог = Неопределено Тогда		
		Текст = НСтр("ru = 'Не смогли определить путь выгрузки КМ для ОКТО, заполните значение для %1 .'");
		Если Интерактивно Тогда			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Текст;
			Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%1", Организация);
			Сообщение.Сообщить();
		Иначе		
			ДобавитьЗаписьЖурналаРегистрации(НСтр("ru = '(МВ).Выгрузка КМ для ОКТО.'", ОбщегоНазначения.КодОсновногоЯзыка()), Текст,Истина);
			//ЗаписьЖурналаРегистрации(НСтр("ru = '(МВ).Выгрузка Арле Ввод в оборот.'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Информация, Метаданные.Обработки.МВ_ИнтеграцияСФилиальнойБазойРозница.Имя,, НСтр("ru = 'Не смогли определить путь выгрузки.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Логин = СокрЛП(СоответствиеНастроек.Получить(МассивНастроек[2]));
	Пароль = СокрЛП(СоответствиеНастроек.Получить(МассивНастроек[3]));
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ОКТОКаталог",ОКТОКаталог);
	СтруктураНастроек.Вставить("ИдентификаторОрганизации",ИдентификаторОрганизации);
	СтруктураНастроек.Вставить("Логин",Логин);
	СтруктураНастроек.Вставить("Пароль",Пароль);
	Возврат СтруктураНастроек;
КонецФункции //-- МВ:Овчинников 01.07.2021

//++ МВ:Овчинников 29.06.2021  •0
&НаСервереБезКонтекста
Процедура ДобавитьЗаписьЖурналаРегистрации(Заголовок, ИнформационныйТекст, Ошибка = Ложь)
	Ошибка = ?(Ошибка = Истина, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	ЗаписьЖурналаРегистрации(
	Заголовок,
	Ошибка,
	,
	,
	ИнформационныйТекст);
КонецПроцедуры //-- МВ:Овчинников 29.06.2021