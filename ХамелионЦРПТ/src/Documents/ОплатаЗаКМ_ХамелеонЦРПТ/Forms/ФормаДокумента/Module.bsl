&НаКлиенте
Процедура ОткрытьВнешниеОбработки(Команда)
	// Вставить содержимое обработчика.
	ОткрытьФорму("Справочник.ВнешниеОбработки_ХамелеонЦРПТ.Форма.ФормаСписка",
	Новый структура("Тип",
		ТипДокумента()));
КонецПроцедуры


Функция ТипДокумента()
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя()
КонецФункции


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
									   ОбработкаWEBНаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	Орг=Неопределено;
	Параметры.Свойство("Организация",Орг);
	Если ЗначениеЗаполнено(Орг) Тогда
		Объект.Организация=Орг;
	КонецЕсли;
	Поль=Неопределено;
	Параметры.Свойство("Пользовтаель",Поль);
	Если ЗначениеЗаполнено(Поль) Тогда
		Объект.ТекущийПользователь=Поль;
	КонецЕсли;
	ОбновитьВнешниеКнопки();
	Если Объект.Собственник.ИНН=Объект.Организация.ИНН Тогда
		Собственник=0;
	Иначе
		Собственник=1;
	Конецесли;
	УправлениеВидимостью();
 	ППП=РегистрыСведений.СохранитьДеревоИнформациюОНомерахКМВводВОборот_ХамелеонЦРПТ.Получить(Новый Структура("ВводВОборот",Объект.Ссылка)).Хранилище.Получить();
	Если ППП<>Неопределено Тогда
		Для Каждого Стр_1 Из ППП.Строки Цикл
			
			Добав=ДеревоКМ.ПолучитьЭлементы().Добавить();
			РекурсияДеревоКМ(Добав,СТр_1);
			
		Конеццикла;
		
		//ДеервоКМ=ППП;
	КонецЕслИ;
	МодульПриСозданииДокументов_ХамелеонЦРПТ.ОплатаЗаКМ_ХамелеонЦРПТ_ПриСозданииНаСервере(ЭтаФорма,Отказ,СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РекурсияДеревоКМ(Добав,Стр_1)
	ЗаполнитьЗначенияСвойств(Добав,Стр_1);
	Для Каждого Стр_22 Из Стр_1.Строки Цикл
		Добав_1=Добав.ПолучитьЭлементы().Добавить();
		РекурсияДеревоКМ(Добав_1,Стр_22);
		
		
	Конеццикла;
	
КонецПроцедуры

Функция СоздатьНайтиСобственникаПоОрг()
	СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",Объект.Организация.ИНН);
	Если ЗначениеЗаполнено(СпрК) тогда
		СпрК=СпрК.ПолучитьОбъект();
	Иначе
		спрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
	КонецЕсли;
	СпрК.ИНН=Объект.Организация.ИНН;
	СпрК.Наименование=ОБъект.Организация.Наименование;
	СпрК.Записать();
	Возврат СпрК.Ссылка;
Конецфункции
Процедура УправлениеВидимостью(ПоменятьПро=Ложь)
//	Элементы.ВводВОборот.Видимость=Ложь;
//	Элементы.ВводВОборотИмпорт.Видимость=Ложь;
//	Элементы.ВводВОборотКонтракт.Видимость=Ложь;
//	Элементы.ВводВОборотФизЛицо.Видимость=Ложь;
//	Элементы.ВыводИзОборота.Видимость=Ложь;
	
	
		
КонецПроцедуры



Процедура ОбновитьВнешниеКнопки()
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнешниеОбработки_ХамелеонЦРПТ.ИмяВнешнейОБработки,
		|	ВнешниеОбработки_ХамелеонЦРПТ.НаименованиеКнопки,
		|	ВнешниеОбработки_ХамелеонЦРПТ.Код
		|ИЗ
		|	Справочник.ВнешниеОбработки_ХамелеонЦРПТ КАК ВнешниеОбработки_ХамелеонЦРПТ
		|ГДЕ
		|	ВнешниеОбработки_ХамелеонЦРПТ.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ИмяКоманды="Команда"+ВыборкаДетальныеЗаписи.Код;
		Попытка
		КомандаФормы = Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуВнешняя";
		КомандаФормы.Заголовок = ВыборкаДетальныеЗаписи.ИмяВнешнейОБработки;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.Текст;
		
		//ОписаниеКомандыПечати.ИмяКомандыНаФорме = ИмяКоманды;
		
		НовыйЭлемент = Элементы.Добавить("ГруппаКнопокВнешняя" + ИмяКоманды, Тип("КнопкаФормы"), Элементы.ГруппаКнопокВнешняя);
		НовыйЭлемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		НовыйЭлемент.Заголовок=ВыборкаДетальныеЗаписи.НаименованиеКнопки;
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	Исключение
		КонецПопытки;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуВнешняя(Команда)
	
	// Вставить содержимое обработчика.	// Вставить содержимое обработчика.
	Попытка
		
		ВернДв=ВернутьИмяФайла(Команда.Имя);
		Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
			ДвоичныеДанные=ВернДв;
		Иначе
			ДвоичныеДанные=Новый ДвоичныеДанные(ВернДв);
		Конецесли;
		ОбработкаИмя=ПолучитьИмяВнешней(Двоичныеданные);
		ОткрытьФорму("ВнешняяОбработка."+ОбработкаИмя+".Форма",,ЭтаФорма);
	Исключение
			Попытка
#Если ТолстыйКлиентОбычноеПриложение  Тогда
		ВернДв=ВернутьИмяФайла(Команда.Имя);
		Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
			//ДвоичныеДанные=ВернДв;
			ДвоичныеДанные=ПолучитьИмяВременногоФайла();
			ВернДв.Записать(ДвоичныеДанные);
			
		Иначе
			ДвоичныеДанные=ВернДв;
		Конецесли;
				ВернутьВн(ДвоичныеДанные);
				Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
					УдалитьФайлы(ДвоичныеДанные);
				КонецЕсли;
#Иначе
				
			ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
#КонецЕсли
			Исключение
				ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
			КонецПопытки;
		//	
	//	
	КонецПопытки;

	//УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


#Если ТолстыйКлиентОбычноеПриложение  Тогда
&НаКлиенте
Процедура ВернутьВн(ДвоичныеДанные)
	//ИмяВременФ=ПолучитьИмяВременногоФайла();
	//ДвоичныеДанные.Записать(ИмяВременФ);
	ВнешняяОбработка=ВнешниеОбработки.Создать(ДвоичныеДанные);
	Фоорма=ВнешняяОбработка.ПолучитьФорму(,ЭтаФорма);
	Попытка
		Фоорма.УФ=ЭтаФорма;
	Исключение
	КонецПопытки;
	Фоорма.Открыть();
Конецпроцедуры      	
#КонецЕсли



Функция ВернутьИмяФайла(Команда)
//	Если РегистрыСведений.НастройкиПрограммыЦРПТ.Получить().ЗагружатьВнешниеОбработкиИзХранилища Тогда
		Возврат Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоКоду(Сред(Команда,8)).Хранилище.Получить();
//	Иначе
//		СпрВн=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоКоду(Сред(Команда,8));
//	Конецесли;
	
//	Возврат СпрВн.ИмяВнешнейОБработки
	//НаимСправочника=Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя();
	//Спр=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоНаименованию(НаимСправочника,Истина);
	//Если Спр<>Справочники.ВнешниеОбработки_ХамелеонЦРПТ.ПустаяСсылка() Тогда
	//	Возврат Спр.ИмяВнешнейОБработки;
	//Конецесли;
	
КонецФункции

Функция ПолучитьИмяВнешней(ИмяФайла)
    АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ИмяФайла);
    ИмяОбр = ВнешниеОбработки.Подключить(АдресВоВременномХранилище,,Ложь);
    Возврат ИмяОбр;
КонецФункции

&НаКлиенте
Процедура ТекущийПользовательПриИзменении(Элемент)
	// Вставить содержимое обработчика.

КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьПараметрыПоПользователю(Польз)
	
	Возврат Новый Структура("СпособФормированияСН,ВидМаркировки,ВидСИ",Польз.СпособФормированияСН,Польз.ВидМаркировки,Польз.ВидСИ);
	
КонецФункции

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	// Вставить содержимое обработчика.
	//Если НоваяСтрока Тогда
	//	ПолучитьПараметрыПоПльзователию=ПолучитьПараметрыПоПользователю(Объект.ТекущийПользователь);
	//	ТекД=Элементы.Товары.ТекущиеДанные;
	//	ЗаполнитьЗначенияСвойств(ТекД,ПолучитьПараметрыПоПльзователию);
	//	ТекД.Обрабатывать=Истина;
	//	ТекД.КоличествоКМ=1;
	//	ТекД.Документ=ВернутьДокументСД(ТекД.Продукция,Объект.Дата);
	//КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Функция ВернутьДокументСД(Пр,Дата1)  
	Возврат Регистрысведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(
	Дата1,Новый Структура("Продукция",Пр)).Документ
КонецФункции
  

&НаСервере
Функция ТоварыGTINПриИзмененииНаСервере(Товар)
	// Вставить содержимое обработчика.    
	Если Товар.СтранаПроизводства.Альфа2="RU" Тогда
		СтрП="Производство в РФ";
	Иначе
		СтрП="Ввезен в РФ";
		
	КонецЕсли;
	Возврат Новый Структура("КодТНВЭД,СпособВыпускаТоваров",Товар.КодТНВЭД,СтрП);
Конецфункции

&НаКлиенте
Процедура ТоварыGTINПриИзменении(Элемент)
	ТекД=Элементы.Товары.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекД,ТоварыGTINПриИзмененииНаСервере(ТекД.GTIN));
КонецПроцедуры


&НаКлиенте
Процедура ТоварыСерийныйНомерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка,Переходить=Истина)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка=Ложь;
	Если Переходить<>Ложь Тогда
		Элементы.СтраницыТЧ.ТекущаяСтраница=Элементы.СерийныеНомера;
	КонецЕсли; 
	
	ТекД=Элементы.Товары.ТекущиеДанные;
	ТекД.НомерСтрокиСвязи=ТекД.ПолучитьИдентификатор();
	НН=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",ТекД.ПолучитьИдентификатор()));
	Для Каждого Стр_1 Из НН Цикл
		Объект.СерийныеНомера.Удалить(Стр_1);
	КонецЦикла;
	//АвтоСерийные=Автосерийные(Объект.ТекущийПользователь);
	Для Сч=1 По ТекД.КоличествоКМ цикл
		Добав=Объект.СерийныеНомера.Добавить();
		Добав.НомерСтрокиСвязи=ТекД.ПолучитьИдентификатор();
		Добав.GTIN=ВернутьГТИН(ТекД.GTIN);
		Добав.НаименованиеТовара=ТекД.GTIN;
	КонецЦикла;
	
	Объект.СерийныеНомера.Сортировать("НомерСтрокиСвязи");
	р=оБЪЕКТ.СерийныеНомера.НайтиСтроки(нОВЫЙ СТРУКТУРА("НомерСтрокиСвязи",Текд.НомерСтрокиСвязи));
	Если Р.Количество()>0 Тогда
		Элементы.СерийныеНомераТаблица.ТекущаяСтрока=Р[0].Получитьидентификатор();
	КонецЕсли;
	Если АвтоСерийные Тогда
		СгенерироватьНаСервере()
	КонецЕсли;
КонецПроцедуры

Функция ВернутьГТИН(Н)	
	Возврат xmlString(Н.GTIN)
КонецФункции

&НаСервере
Процедура СгенерироватьНаСервере()
	// Вставить содержимое обработчика.
	Для Каждого Стр Из ОБъект.СерийныеНомера Цикл
		Если Не Значениезаполнено(Стр.СерийныйНомер) Тогда
			
			СерийныйНомер=xmlString(Новый УникальныйИдентификатор());
			СерийныйНомер=СтрЗаменить(СерийныйНомер,"-","");
			Стр.СерийныйНомер=Сред(СерийныйНомер,1,13);
			
		КонецЕсли;
	Конеццикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Сгенерировать(Команда)
	СгенерироватьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭтикеток(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры
Процедура ПечатьЭти(Таб)
КонецПроцедуры

Функция EncodeURL(URL)
    Результат1 = "";
    Для Сч = 1 По СтрДлина(URL) Цикл
        ch = Сред(URL,Сч,1);
        vch = КодСимвола(ch);

		Если ("A" <= ch ) И ( ch <= "Z") Тогда      
			Результат1 = Результат1 + ch;
		ИначеЕсли ("a" <= ch ) И ( ch <= "z") Тогда 
			Результат1 = Результат1 + ch;
        ИначеЕсли ("0" <= ch ) И ( ch <= "9") Тогда 
            Результат1 = Результат1 + ch;
        ИначеЕсли (ch = " ") ИЛИ ( ch = "+") Тогда          
            Результат1 = Результат1 + "+";
		ИначеЕсли (ch = "-" ) ИЛИ ( ch = "_")       
			ИЛИ (ch = ".") ИЛИ (ch = "!")
            ИЛИ (ch = "~") ИЛИ (ch = "*")
            ИЛИ (ch = "") ИЛИ (ch = "(")
            ИЛИ (ch = ")") Тогда
            Результат1 = Результат1 + ch;
        ИначеЕсли (vch <= 127) Тогда        
            Результат1 = Результат1 + hex(vch);
        ИначеЕсли (vch <= 2047) Тогда       
            Результат1 = Результат1 + hex(192 + Цел(vch / 64));
            Результат1 = Результат1 + hex(128 + (vch % 64));
		Иначе                  
			Результат1 = Результат1 + hex(224 + Цел(vch / 4096));
            Результат1 = Результат1 + hex(128 + (Цел(vch / 64) % 64));
            Результат1 = Результат1 + hex(128 + (vch % 64));
        КонецЕсли;
    КонецЦикла;

    Возврат Результат1;
КонецФункции // ()


Функция hex(Знач Значение__)
    Значение__=Число(Значение__);
    Если Значение__<=0 Тогда
        Результат1="0";
    Иначе
        Значение__=Цел(Значение__);
        Результат1="";
        Пока Значение__>0 Цикл
            Результат1=Сред("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",Значение__%16 + 1,1)+Результат1;
            Значение__=Цел(Значение__/16) ;
        КонецЦикла;
    КонецЕсли;
    Если СтрДлина(Результат1) < 2 Тогда

        Результат1 = "0" + Результат1;

    КонецЕсли;
    Возврат "%" + Результат1;
КонецФункции


Функция ПолучитьИзПользователя()
	//Возврат Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);
	Струк=Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);
	
	Струк.Вставить("РасчетОстатков",РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().РасчетОстатков);
	
	Возврат Струк;
КонецФункции

&НаКлиенте
Процедура ОтправитьВЦРПТ(Команда,УжеОтправили=Ложь) Экспорт
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьТокенСрегистра(ТТ)
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(ТТ,"")
КонецПроцедуры

Функция НеПрошлаПроверка21(Файл_1) Экспорт
	//	Возврат Ложь;
	КаталогВременногоФайла=КаталогВременныхФайлов()+"new_maket_V21\";
	СоздатьКаталог(КаталогВременногоФайла);
		
	//Файл=ПолучитьИмяВременногоФайла("xml");
	Файл=ПолучитьИмяВременногоФайла("xml");
	Файл=СтрЗаменить(Файл,КаталогВременныхФайлов(),КаталогВременногоФайла);
	
	
	Файл_2=Новый ТекстовыйДокумент;
	Файл_2.ДобавитьСтроку(Файл_1);
	Файл_2.Записать(Файл,КодировкаТекста.UTF8);
	
	//ИмяВремен=ПолучитьИмяВременногоФайла("xsd");
	//МакетXDTO.Записать(ИмяВремен,КодировкаТекста.ANSI);
	//dictionary_v20=ПолучитьИмяВременногоФайла("xsd");
	//dictionary_v20=КаталогВременногоФайла+"dictionary_v21.xsd";
	
	dictionary_v20=ПолучитьИмяВременногоФайла("xsd");
	dictionary_v20=СтрЗаменить(dictionary_v20,КаталогВременныхФайлов(),КаталогВременногоФайла);
	
	LP_base_types=ПолучитьИмяВременногоФайла("xsd");
	LP_base_types=СтрЗаменить(LP_base_types,КаталогВременныхФайлов(),КаталогВременногоФайла);

	Текст=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("dictionary_v21");
	Текст.Записать(dictionary_v20,КодировкаТекста.UTF8);
	
	
	Текст=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("LP_base_types");
	Текст.Записать(dictionary_v20,КодировкаТекста.UTF8);
	
	XMLDoc = New COMObject("Msxml2.DOMDocument.6.0");
    XMLDoc.Async = false;
    XMLDoc.ValidateOnParse = true;
    SchemaCache = New COMObject("Msxml2.XMLSchemaCache.6.0");
	SchemaCache.Add("LP_base_types.xsd",LP_base_types);
	SchemaCache.Add("",dictionary_v20);
	
	XMLDoc.Schemas = SchemaCache;
    XMLDoc.SetProperty("MultipleErrorMessages", true);
    XMLDoc.Load(Файл);
    ErrObj = XMLDoc.ParseError;
	Ошибка="";
    If ErrObj.ErrorCode <> 0 Then
        For Each ErrItem In ErrObj.AllErrors Do 
            //Message("Ошибка : " + ErrItem.Reason + " " + ErrItem.SrcText);
			Ошибка=Ошибка+"В строке № "+Erritem.line+" в колонке № "++Erritem.linepos+" ошибка: "+ErrItem.Reason+" "+ErrItem.SrcText+Символы.ПС+Символы.ПС;
		EndDo;
//		УдалитьФайлы(ИмяВремен);
		Сообщить(Ошибка);
		Возврат Истина;
    EndIf;
	УдалитьФайлы(Файл);
	УдалитьФайлы(dictionary_v20);
	
	Возврат Ложь;
КонецФункции

&НаСервереБезКонтекста
Функция дополнитьСтроку(Ср)
	ВОзврат Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Ср,14,"0");
	
Конецфункции

Процедура ЗапишемВРегистр_Ответ(ТекстДокумент)
	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Объект.Ссылка);
	РегДв.Отбор.Вид.Установить("Получили ответ");
	Добав=РегДв.Добавить();
	Добав.Документ=ОБъект.Ссылка;
	Добав.Вид="Получили ответ";
	Добав.Файл=Новый ХранилищеЗначения(ТекстДокумент,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
КонецПроцедуры


Процедура ЗапишемВРегистр(ТекстДокумент)
	
	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Объект.Ссылка);
	РегДв.Отбор.Вид.Установить("Отправлен заказ");
	Добав=РегДв.Добавить();
	Добав.Документ=ОБъект.Ссылка;
	Добав.Вид="Отправлен заказ";
	Добав.Файл=Новый ХранилищеЗначения(ТекстДокумент,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТокенСрегистра(Thumbprint_1)
	Возврат Регистрысведений.ТокенПоСертификату_ХамелеонЦРПТ.Получить(Новый Структура("Отпечаток",Thumbprint_1)).Токен;
КонецФункции

&НаКлиенте
Процедура ПослеПолученияСертификатов(Хранилище,ДД) Экспорт
	Хранилище.НачатьПолучениеВсех(Новый ОписаниеОповещения("ПослеПолученияВсех",ЭтаФорма,ДД));
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияВсех(СертификатыХранилища,ДД) Экспорт
	ТекущаяДата = ТекущаяДата();
	Для Каждого Сертификат Из СертификатыХранилища Цикл
	    Если Сертификат.ДатаОкончания < ТекущаяДата Тогда 
	        // Пропускаем истекшие сертификаты, если нужно
	        Продолжить;
		КонецЕсли;
		Если СтрЗаменить(Строка(Сертификат.Отпечаток)," ","")=ДД.ТекущийПользователь.Thumbprint_1 Тогда
			ДД.МенеджерКриптографии.НачатьПодписывание(Новый Описаниеоповещения("ПослеПодписиФайла",ЭтаФорма,ДД),
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ДД.ИмяВр,КодировкаТекста.ANSI,Ложь)),КодировкаТекста.ANSI,Ложь),Сертификат);
			Возврат;
			
		КонецЕсли;
		//ПолучитьСтрокуИзДвоичныхДанных(Сертификат.Отпечаток);
		//СтрСер=РаскодироватьнаСервере(Base64Строка(Сертификат.СерийныйНомер));
		                  		
	    //СписокСертификатов.Добавить(Сертификат);
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Функция КодСтрСервер(Добав)
	Возврат КодироватьСтроку(Добав,СпособКодированияСтроки.КодировкаURL);
Конецфункции

&НаКлиенте
Процедура ПослеПодписиФайлаТокен(РР,ДД) Экспорт
	//Тело = "{
	//|""uuid"": """+ОтветСтруктура.uuid+""",
	//|""data"": """+Добав+"""
	//|}";
	//HTTPЗапрос=Новый HTTPЗапрос("/api/v3/auth/cert/");
	//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	////HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	//
	//HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВнешняяВ(ТекущийПользователь)
	Возврат ТекущийПользователь.ИспользоватьВнешнийСертификат
КонецФункции

&НаКлиенте
Процедура ПослеЗаписиФайлаТокен(РР,ДД) Экспорт
	Сертификат=ДД.Сертификат;
	HTTPСервисЗапрос=ДД.HTTPСервисЗапрос;
	ФайлВременный=ДД.ФайлВременный;
	ИмяВр=ДД.ИмяВр;
	ОтветСтруктура=ДД.ОтветСтруктура;
	ВыбСертификатЭЦП=ДД.ВыбСертификатЭЦП;
	
	
	Данные=Новый ДвоичныеДанные(ИмяВр);
    Строка64=Base64Строка(Данные);
    Строка64=Лев(Строка64,СтрДлина(Строка64)-4);
    ДанныеНаЗапись=Base64Значение(Строка64);
   // ДанныеНаЗапись.Записать(ИмяВр);
	
	
	Каталог = КаталогВременныхФайловНаКлиенте;
	ИмяФайла = Строка(Новый УникальныйИдентификатор) + "2.xml";
	ИмяВр_1= Каталог+ИмяФайла;
	
	//ИмяВр_1=ПолучитьИмяВременногоФайла();
	Текущийпользователь=ВыбСертификатЭЦП.Thumbprint;
	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(ВнешняяВ(Объект.ТекущийПользователь),ДанныеНаЗапись,ИмяВр_1,Текущийпользователь,
	"ПослеПодписиФайлаТокен",ЭтаФорма);	
	
	Возврат;
	
	
	
  	Текст=Новый ТекстовыйДокумент;
	Текст.Прочитать(ИмяВр_1);

 	Добав=Текст.ПолучитьТекст();
	Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
	Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
	Добав=Сред(Добав,1,стрДлина(Добав)-4);
	Добав=СтрЗаменить(Добав,"\r\n","");
	УдалитьФайлы(ИмяВр);
	УдалитьФайлы(ИмяВр_1);
	
	Тело = "{
	|""uuid"": """+ОтветСтруктура.uuid+""",
	|""data"": """+Добав+"""
	|}";
	HTTPЗапрос=Новый HTTPЗапрос("/api/v3/auth/cert/");
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	
	
	Парамукк="";
	ОтветСтруктура_1 =ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
	Если HTTPСервисЗапрос.Status=200 Тогда
		ТОКЕН=ОтветСтруктура_1.token;                                 
	ИначеЕсли ОтветСтруктура_1.Свойство("error",Парамукк) Тогда
		
		ТекстОшибки="";
		Если ТипЗнч(Парамукк)=Тип("Массив") тогда
			Для Каждого Стр Из Парамукк Цикл
				ТекстОшибки=ТекстОшибки+стр;
			Конеццикла;
		Иначе
			ТекстОшибки=Парамукк;
		КонецЕсли;
		Сообщить(ТекстОшибки);
		Возврат       
	Конецесли;

	
КонецПроцедуры

Функция ПроверкаЗаполнения_1()
	Если ЗначениеЗАполнено(ОБъект.Ссылка) Тогда	
		Возврат Объект.Ссылка.ПолучитьОбъект().ПроверитьЗаполнение()
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ЗагрузканаСервереОтправитьЗаявку(Thumbprint_1,СРегистра,УжеОтправили,Тело)
	Возврат Истина;
КонецФункции

Функция НаСервереФормируемОтчетОбИспользовании(Thumbprint_1)
	
	
	Если Объект.СерийныеНомера.Количество()=0 Тогда
		Возврат "";
	КонецЕсли;
	//МассивФайлов=Новый Массив;
//Для Каждого Стр Из Объект.Товары Цикл
	
//Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
//	
//	МассивТекстов=Новый Массив;
//Для Каждого Стр_1 Из Объект.Товары Цикл
//	Чтение=Новый ЗаписьXML;
//	Чтение.УстановитьСтроку("UTF-8");
//	Чтение.ЗаписатьОбъявлениеXML();
//	Чтение.ЗаписатьНачалоЭлемента("documents");
//	Чтение.ЗаписатьАтрибут("version","1.34");
//	
//	Чтение.ЗаписатьНачалоЭлемента("register_end_packing");
//	Чтение.ЗаписатьАтрибут("action_id","311");
//	Чтение.ЗаписатьНачалоЭлемента("subject_id");
//	Чтение.ЗаписатьТекст(Объект.Организация.subjectIdФармацевтика);
//	Чтение.ЗаписатьКонецЭлемента();
//	Чтение.ЗаписатьНачалоЭлемента("operation_date");
//	Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
//		
//		//Время=ПолучитьЧасовойПоясИнформационнойБазы();
//		
//		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"+00:00");
//	Иначе
//		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:ссZ"""));
//	
//	конецесли;
//	Чтение.ЗаписатьКонецЭлемента();
//	Чтение.ЗаписатьНачалоЭлемента("order_type");
//	Чтение.ЗаписатьТекст("1");
//	Чтение.ЗаписатьКонецЭлемента();
//	
//	Чтение.ЗаписатьНачалоЭлемента("series_number");
//	Чтение.ЗаписатьТекст("1");
//	Чтение.ЗаписатьКонецЭлемента();
//	
//	Чтение.ЗаписатьНачалоЭлемента("expiration_date");
//	Чтение.ЗаписатьТекст(Формат(Стр_1.Годендо,"ДФ=""дд.ММ.гггг"""));
//	Чтение.ЗаписатьКонецЭлемента();
//	
//	Чтение.ЗаписатьНачалоЭлемента("gtin");
//	Чтение.ЗаписатьТекст(ДополнитьСтроку(xmlString(Стр_1.gtin.gtin)));
//	Чтение.ЗаписатьКонецЭлемента();
//	
//	Чтение.ЗаписатьНачалоЭлемента("signs");
//	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
//	Для Каждого Стр_c Из НСтрок Цикл
//		Чтение.ЗаписатьНачалоЭлемента("sgtin");
//		
//		Штрих=Стр_c.cis;
//		Штрих=Сред(Штрих,3,14)+Сред(Штрих,19);
//		
//		Чтение.ЗаписатьТекст(Штрих);
//		Чтение.ЗаписатьКонецЭлемента();
//		
//		
//		
//	Конеццикла;
//	Чтение.ЗаписатьКонецЭлемента();
//	Чтение.ЗаписатьКонецЭлемента();
//	Чтение.ЗаписатьКонецЭлемента();
//	
//	
//	Текст=Чтение.Закрыть();
//	МассивТекстов.Добавить(Текст);
//	 	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
//		ЗапишемВРегистр(Текст);
//	КонецЕсли;
//Конеццикла;
//	Возврат МассивТекстов
Если Thumbprint_1.НаименованиеСтенда="Табак" 
			ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
	Тогда
	Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();
				Чтен.ЗаписатьИмяСвойства("sntins");
		
              		Чтен.ЗаписатьНачалоМассива();
		Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		
			Если ЗначениеЗаполнено(Стр_1.cis) Тогда
				
				Если Сред(Стр_1.cis,1,2)="01" Тогда /////ВВОД В ОБОРОТ!!!!
												//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
							// Данный фрагмент построен конструктором.
							// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
							
							Запрос = Новый Запрос;
							Запрос.Текст = 
								"ВЫБРАТЬ
								|	ЗаказМарок_ХамелеонЦРПТКМИзAPI.НомерКМ,
								|	ЗаказМарок_ХамелеонЦРПТКМИзAPI.НомерКМ_Короткий
								|ИЗ
								|	Документ.ЗаказМарок_ХамелеонЦРПТ.КМИзAPI КАК ЗаказМарок_ХамелеонЦРПТКМИзAPI
								|ГДЕ
								|	ЗаказМарок_ХамелеонЦРПТКМИзAPI.НомерКМ_Короткий = &НомерКМ_Короткий";
							
							Запрос.УстановитьПараметр("НомерКМ_Короткий", Сред(Стр_1.cis,1,25));
							
							РезультатЗапроса = Запрос.Выполнить();
							
							ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
							сшы=Стр_1.cis;
							Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
								Если ВыборкаДетальныеЗаписи.НомерКМ_Короткий=Сред(Стр_1.cis,1,25) Тогда
									сшы=РаскодироватьСтроку(ВыборкаДетальныеЗаписи.НомерКМ,СпособКодированияСтроки.КодировкаURL);
									Прервать;
								КонецЕсли;
							конеццикла;
							
								чтен.ЗаписатьЗначение(сшы)
							
							//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

					
				Иначе
					чтен.ЗаписатьЗначение(Стр_1.cis)
				КонецЕсли;
					
				КонецЕсли;
		//	Конеццикла;
			
	         Конеццикла;
			    чтен.ЗаписатьКонецМассива();
				
				Чтен.ЗаписатьИмяСвойства("usageType");
				
				Чтен.ЗаписатьЗначение("USED_FOR_PRODUCTION");
				
				//Если ЗначениеЗаполнено(Стр_1.Годендо) тогда
//					Чтен.ЗаписатьИмяСвойства("expirationDate");
//					Чтен.ЗаписатьЗначение(Формат(Стр_1.Годендо,"ДФ=""дд.ММ.гггг"""));
					
					
				//Иначе
					//Чтен.ЗаписатьИмяСвойства("expirationDate");
					//Чтен.ЗаписатьЗначение("010101");
						
					
				//КонецЕсли;
				
//					Чтен.ЗаписатьИмяСвойства("orderType");
//					Чтен.ЗаписатьЗначение(Объект.OrderType);
					
					
					//Чтен.ЗаписатьИмяСвойства("ownerId");
					//Чтен.ЗаписатьЗначение(Объект.ТекущийПользователь.ИдентификаторСУЗ);
					Чтен.ЗаписатьИмяСвойства("productionLineId");
					Чтен.ЗаписатьЗначение("1");
					Чтен.ЗаписатьИмяСвойства("productionOrderId");
					Чтен.ЗаписатьЗначение(xmlString(Объект.Ссылка.УникальныйИдентификатор()));
					
	
			Чтен.ЗаписатьКонецОбъекта();
					
		
		
		Текст=Чтен.Закрыть();
//	     МассивФайлов.Добавить(Новый Структура("Текст,Идентификатор",Текст,Стр.ПолучитьИдентификатор()));
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
	
Иначе


		Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();
				Чтен.ЗаписатьИмяСвойства("sntins");
		
              		Чтен.ЗаписатьНачалоМассива();
		Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		
			Если ЗначениеЗаполнено(Стр_1.cis) Тогда
					
					чтен.ЗаписатьЗначение(Стр_1.cis)
					
				КонецЕсли;
		//	Конеццикла;
			
	         Конеццикла;
			    чтен.ЗаписатьКонецМассива();
				
				Чтен.ЗаписатьИмяСвойства("usageType");
				
				Чтен.ЗаписатьЗначение("USED_FOR_PRODUCTION");
				
				//Если ЗначениеЗаполнено(Стр_1.Годендо) тогда
					Чтен.ЗаписатьИмяСвойства("expirationDate");
					Чтен.ЗаписатьЗначение(Формат(Стр_1.Годендо,"ДФ=""дд.ММ.гггг"""));
					
					
				//Иначе
					//Чтен.ЗаписатьИмяСвойства("expirationDate");
					//Чтен.ЗаписатьЗначение("010101");
						
					
				//КонецЕсли;
				
					Чтен.ЗаписатьИмяСвойства("orderType");
					Чтен.ЗаписатьЗначение(Объект.OrderType);
					
					
					Чтен.ЗаписатьИмяСвойства("ownerId");
					Чтен.ЗаписатьЗначение(Объект.ТекущийПользователь.ИдентификаторСУЗ);
					Чтен.ЗаписатьИмяСвойства("seriesNumber");
					Чтен.ЗаписатьЗначение("1");
					Чтен.ЗаписатьИмяСвойства("subjectId");
					Чтен.ЗаписатьЗначение(Объект.ТекущийПользователь.ИдентификаторСУЗ);
					
	
			Чтен.ЗаписатьКонецОбъекта();
					
		
		
		Текст=Чтен.Закрыть();
//	     МассивФайлов.Добавить(Новый Структура("Текст,Идентификатор",Текст,Стр.ПолучитьИдентификатор()));
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
//		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
	// Конеццикла;
	 КонецЕсли;
	
	Возврат Текст;
	
	
КонецФункции

Функция ВернутьУНИКУМ()
	Возврат xmlString(Новый УникальныйИдентификатор())
КонецФункции

&НаКлиенте
Процедура ОтправитьОтчетОбИспользовании()
	

		Thumbprint_1=ПолучитьИзПользователя();	
	
	СформироватьФайлДляОтправки_1=НаСервереФормируемОтчетОбИспользовании(Thumbprint_1);
	
	Если ТипЗнч(СформироватьФайлДляОтправки_1)=Тип("Массив") тогда
		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
		
		Сч=0;
		Для Каждого Стр_1 Из Объект.Товары Цикл
			
			СформироватьФайлДляОтправки=СформироватьФайлДляОтправки_1[0];
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
		
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

				
				Подписанный="";

				
			Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1,Подписанный,Истина);
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл_ЛДМП(СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Ложь);
				
				
			КонецЕсли;
		//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//Подписанный,КодировкаТекста.UTF8,Ложь));
		
					Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
				Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
				 Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("document");
	Чтен.ЗаписатьЗначение(Добав);
	Чтен.ЗаписатьИмяСвойства("sign");
	Чтен.ЗаписатьЗначение(Подписанный);
	Чтен.ЗаписатьИмяСвойства("request_id");
	Чтен.ЗаписатьЗначение(ВернутьУНИКУМ());
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();
	
				 
				 
		//Тело="{
		//|""doc_type"":""311"",
		//|""document"":"""+Добав+""",
		//|""sign"":"""+Подписанный+""",
		//|""request_id"":"""+ВернутьУНИКУМ()+"
		//|}";
			
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/send");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		
		
	Если Ответ.КодСостояния=200 ИЛИ Ответ.КодСостояния=200  Тогда
			Стр_1.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Стр_1.order_ID=NNN.document_id;
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
				//НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
//				Объект._Order_ID=NNN.orderId;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Стр_1.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Стр_1.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Стр_1.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;

		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Ответ(Текст1);
		КонецЕсли;
			
		
		
		
			
			
		Конеццикла;
		
		 ЭтаФорма.Записать();
		 УправлениеВидимостью();
		
		Возврат;
	КонецЕсли;
	
	
	СформироватьФайлДляОтправки_3=СформироватьФайлДляОтправки_1;
//	НеПрошлаПроверка21(СформироватьФайлДляОтправки);
//Для Каждого СформироватьФайлДляОтправки_3 ИЗ СформироватьФайлДляОтправки_1 Цикл
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки_3,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
	
	//Подписанный="";
	//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
	//			Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
	//		Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
	//		Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	
	
	//Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
	//			Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
	//		Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
	//		Добав=СтрЗаменить(Добав,"\r\n","");

	Тело=СформироватьФайлДляОтправки;
		АдресРаздробить=Thumbprint_1.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
		
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
			
			
			
			
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			ПоказатьПредупреждение(,"В пользователе не заполнен адрес СУЗ");
			Возврат;
			
		КонецЕсли;
	
	Если ОбработкаWEBНаСервере Тогда
		//ЗагрузканаСервереОтправитьЗаявка_Шины(Thumbprint_1,Тело,Адрес,Порт,Защищ,СформироватьФайлДляОтправки_3.Идентификатор);
		
		
	Иначе
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;
			
	
		HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/utilisation?omsId="+Thumbprint_1.ИдентификаторСУЗ);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("clientToken",Thumbprint_1.ТокенСУЗ);
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
					Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Текст1);
	КонецЕсли;
	
	
	Если Ответ.КодСостояния=202 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
//				НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
				Объект._Order_ID=NNN.orderId;
			

			//Объект._Order_ID=NNN.order_id;
	
	ИначеЕсли Ответ.КодСостояния=200 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Объект._Order_ID=NNN.reportId;
				//НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
//				Объект._Order_ID=NNN.orderId;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	//Если Ответ.КодСостояния<>200 Тогда
	//	
	//	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
	//	  Текст1=Ответ.ПолучитьТелоКакСтроку();
	//		Попытка
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//			Объект.ОшибкаОтправки=NNN.error_message;
	//			
	//		Исключение
	//		КонецПопытки;
	//	Иначе
	//		Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета");
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//		Объект._Order_ID=NNN.order_id;
	//КонецЕсли;
КонецЕсли;
	ЭтаФорма.Записать();
	УправлениеВидимостью()
	

	
КонецПроцедуры
&НаКлиенте
Процедура ОтправитьЗаявку(Команда,УжеОтправили=Ложь) Экспорт
	Если Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован") 
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан") Тогда
		
		Возврат
	КонецЕсли;
	
	ЭтаФорма.Записать();
	
	Если НЕ ПроверкаЗаполнения_1() Тогда
		Возврат;
	КонецЕсли;
	
	
	Thumbprint_1=ПолучитьИзПользователя();	
	
	Если        Thumbprint_1.РасчетОстатков Тогда
		Подсчитать(Команда);
	КонецЕсли;
	ОтправитьОтчетОбИспользовании();
	ЭтаФорма.Записать();
	
КонецПроцедуры


Функция НеПрошлаПроверкаВвод(Файл_1) Экспорт
	//	Возврат Ложь;
	КаталогВременногоФайла=КаталогВременныхФайлов()+"new_maket_V21\";
	СоздатьКаталог(КаталогВременногоФайла);
		
	//Файл=ПолучитьИмяВременногоФайла("xml");
	Файл=ПолучитьИмяВременногоФайла("xml");
	Файл=СтрЗаменить(Файл,КаталогВременныхФайлов(),КаталогВременногоФайла);
	
	
	Файл_2=Новый ТекстовыйДокумент;
	Файл_2.ДобавитьСтроку(Файл_1);
	Файл_2.Записать(Файл,КодировкаТекста.UTF8);
	
	//ИмяВремен=ПолучитьИмяВременногоФайла("xsd");
	//МакетXDTO.Записать(ИмяВремен,КодировкаТекста.ANSI);
	//dictionary_v20=ПолучитьИмяВременногоФайла("xsd");
	//dictionary_v20=КаталогВременногоФайла+"dictionary_v21.xsd";
	
	dictionary_v20=ПолучитьИмяВременногоФайла("xsd");
	dictionary_v20=СтрЗаменить(dictionary_v20,КаталогВременныхФайлов(),КаталогВременногоФайла);
	
	
	Текст=Документы.ВводВОборот_ХамелеонЦРПТ.ПолучитьМакет("ВводВОборот");
	Текст.Записать(dictionary_v20,КодировкаТекста.UTF8);
	
	
	
	XMLDoc = New COMObject("Msxml2.DOMDocument.6.0");
    XMLDoc.Async = false;
    XMLDoc.ValidateOnParse = true;
    SchemaCache = New COMObject("Msxml2.XMLSchemaCache.6.0");
	SchemaCache.Add("",dictionary_v20);
	
	XMLDoc.Schemas = SchemaCache;
    XMLDoc.SetProperty("MultipleErrorMessages", true);
    XMLDoc.Load(Файл);
    ErrObj = XMLDoc.ParseError;
	Ошибка="";
    If ErrObj.ErrorCode <> 0 Then
        For Each ErrItem In ErrObj.AllErrors Do 
            //Message("Ошибка : " + ErrItem.Reason + " " + ErrItem.SrcText);
			Ошибка=Ошибка+"В строке № "+Erritem.line+" в колонке № "++Erritem.linepos+" ошибка: "+ErrItem.Reason+" "+ErrItem.SrcText+Символы.ПС+Символы.ПС;
		EndDo;
//		УдалитьФайлы(ИмяВремен);
		Сообщить(Ошибка);
		Возврат Истина;
    EndIf;
	УдалитьФайлы(Файл);
	УдалитьФайлы(dictionary_v20);
	
	Возврат Ложь;
КонецФункции

Функция НеПрошлаПроверкаИмпорт(Файл_1) Экспорт
	//	Возврат Ложь;
	КаталогВременногоФайла=КаталогВременныхФайлов()+"new_maket_V21\";
	СоздатьКаталог(КаталогВременногоФайла);
		
	//Файл=ПолучитьИмяВременногоФайла("xml");
	Файл=ПолучитьИмяВременногоФайла("xml");
	Файл=СтрЗаменить(Файл,КаталогВременныхФайлов(),КаталогВременногоФайла);
	
	
	Файл_2=Новый ТекстовыйДокумент;
	Файл_2.ДобавитьСтроку(Файл_1);
	Файл_2.Записать(Файл,КодировкаТекста.UTF8);
	
	//ИмяВремен=ПолучитьИмяВременногоФайла("xsd");
	//МакетXDTO.Записать(ИмяВремен,КодировкаТекста.ANSI);
	//dictionary_v20=ПолучитьИмяВременногоФайла("xsd");
	//dictionary_v20=КаталогВременногоФайла+"dictionary_v21.xsd";
	
	dictionary_v20=ПолучитьИмяВременногоФайла("xsd");
	dictionary_v20=СтрЗаменить(dictionary_v20,КаталогВременныхФайлов(),КаталогВременногоФайла);
	
	
	Текст=Документы.ВводВОборот_ХамелеонЦРПТ.ПолучитьМакет("Импорт");
	Текст.Записать(dictionary_v20,КодировкаТекста.UTF8);
	
	
	
	XMLDoc = New COMObject("Msxml2.DOMDocument.6.0");
    XMLDoc.Async = false;
    XMLDoc.ValidateOnParse = true;
    SchemaCache = New COMObject("Msxml2.XMLSchemaCache.6.0");
	SchemaCache.Add("",dictionary_v20);
	
	XMLDoc.Schemas = SchemaCache;
    XMLDoc.SetProperty("MultipleErrorMessages", true);
    XMLDoc.Load(Файл);
    ErrObj = XMLDoc.ParseError;
	Ошибка="";
    If ErrObj.ErrorCode <> 0 Then
        For Each ErrItem In ErrObj.AllErrors Do 
            //Message("Ошибка : " + ErrItem.Reason + " " + ErrItem.SrcText);
			Ошибка=Ошибка+"В строке № "+Erritem.line+" в колонке № "++Erritem.linepos+" ошибка: "+ErrItem.Reason+" "+ErrItem.SrcText+Символы.ПС+Символы.ПС;
		EndDo;
//		УдалитьФайлы(ИмяВремен);
		Сообщить(Ошибка);
		Возврат Истина;
    EndIf;
	УдалитьФайлы(Файл);
	УдалитьФайлы(dictionary_v20);
	
	Возврат Ложь;
КонецФункции

Функция СформироватьXmlФайлИмпорт()
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("doc_type");
	Чтен.ЗаписатьЗначение("GOODSIMPORT");
	
	
	Чтен.ЗаписатьИмяСвойства("document_description");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("participant_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	Чтен.ЗаписатьИмяСвойства("declaration_date");
	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаДекларацииТовара,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
	Чтен.ЗаписатьИмяСвойства("declaration_number");
	Чтен.ЗаписатьЗначение(Объект.НомерДекларацииТовара);
	Чтен.ЗаписатьИмяСвойства("customs_code");
	Чтен.ЗаписатьЗначение(Объект.КодТаможенногоОргана);
	Чтен.ЗаписатьИмяСвойства("decision_code");
	Чтен.ЗаписатьЗначение(Число(Объект.КодПринятогоРешения.Код));
	Чтен.ЗаписатьКонецОбъекта();

	Чтен.ЗаписатьИмяСвойства("products");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		Если СтрДлина(Стр.Cis)<=18 Тогда
			Чтен.ЗаписатьИмяСвойства("uitu_code");
		Иначе
			Чтен.ЗаписатьИмяСвойства("uit_code");
		КонецЕсли;
		Чтен.ЗаписатьЗначение(Стр.cis);
		Чтен.ЗаписатьИмяСвойства("tnved_code");
		Чтен.ЗаписатьЗначение(НСТР.КодТНВЭД.Код);
		Чтен.ЗаписатьИмяСвойства("certificate_document");
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Чтен.ЗаписатьЗначение("CONFORMITY_CERT");
		Иначе
			Чтен.ЗаписатьЗначение("CONFORMITY_DECLAR");
		КонецЕсли;
		Чтен.ЗаписатьИмяСвойства("certificate_document_number");
		Чтен.ЗаписатьЗначение(НСтр.ДекларацияИлиСертификатСоответствия.Наименование);
		Чтен.ЗаписатьИмяСвойства("certificate_document_date");
		Чтен.ЗаписатьЗначение(Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
		Чтен.ЗаписатьКонецОбъекта();;
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;

	Возврат Текст;
//		Текст="<Vvod action_id=""05"">
//	|<DocType>Promotion_Inform_Selfmade</DocType>  
//	|<Participant_INN>"+Объект.Организация.ИНН+"</Participant_INN>  
//	|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//	|<Producer_INN>"+Объект.Организация.ИНН+"</Producer_INN>  
//	|<INNOwner>"+Объект.Организация.ИНН+"</INNOwner>  
//	|<Production_Order>2</Production_Order>  
//	|<Marking_Type>1</Marking_Type>  
////	|<Declaration_Date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</Declaration_Date>  
////	|<Declaration_Number>"+Объект.НомерДекларацииТовара+"</Declaration_Number>  
////	|<Customs_Code>"+Объект.КодТаможенногоОргана+"</Customs_Code>  
////	|<Decision_Code>"+Объект.КодПринятогоРешения.Код+"</Decision_Code>  
//	|<Products_List>";
//	Для Каждого Стр Из Объект.СерийныеНомера Цикл
//		
//		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
//		НСтр=НСтр[0];
//		
//	    Текст=Текст+"
//		|<PRODUCT>  
//		|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//		|<UIT>"+Стр.cis+"</UIT>
//		|<CodeTNVED>"+НСТР.КодТНВЭД.Код+"</CodeTNVED>
//		|<MarkingType>"+"3"+"</MarkingType>";
//		
//		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
//			Текст=Текст+"
//			|<Certificate_Doc>1</Certificate_Doc>";
//		Иначе
//			Текст=Текст+"
//			|<Certificate_Doc>2</Certificate_Doc>"
//		КонецЕсли;
//		
//		Текст=Текст+"
//		|<Certificate_Doc_Number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</Certificate_Doc_Number>
//		|<Certificate_Doc_Date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</Certificate_Doc_Date>
//		|</PRODUCT> ";
//		
//		
//		
//	КонецЦикла;
//	    Текст=Текст+"
//		|</Products_List>
//		|</Vvod>
//		|";
		

	
	Текст="<vvod_import action_id=""5.1"" version=""3"">
	//|<DocType>GOODSIMPORT</DocType>  
	|<trade_participant_inn>"+Объект.Организация.ИНН+"</trade_participant_inn>  
	//|<Marking_Type>2</Marking_Type>  
	|<declaration_date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</declaration_date>  
	|<declaration_number>"+Объект.НомерДекларацииТовара+"</declaration_number>  
	|<customs_code>"+Объект.КодТаможенногоОргана+"</customs_code>  
	|<decision_code>"+Объект.КодПринятогоРешения.Код+"</decision_code>  
	|<products_list>";
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		НСтр=НСтр[0];
		
	    Текст=Текст+"
		|<product>  
		|<kit>"+Стр.cis+"</kit>";
//		Если ЗначениеЗАполнено(Стр.НомерКороба) Тогда
//		    Текст=Текст+"
//			|<UITU>"+Стр.НомерКороба+"</UITU>";
//		КонецЕсли;
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERTIFICATE</certificate_type>";
		Иначе
			Текст=Текст+"
			|<Certificate_Doc>CONFORMITY_CERTIFICATE</Certificate_Doc>"
		КонецЕсли;
		
		Текст=Текст+"
		|<certificate_number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</certificate_number>
		|<certificate_date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""дд.ММ.гггг""")+"</certificate_date>
		|<tnved_code>"+НСТР.КодТНВЭД.Код+"</tnved_code>";
		
		
		Текст=Текст+"
		|</product> ";
		
		
		
	КонецЦикла;
	    Текст=Текст+"
		|</products_list>
		|</vvod_import>
		|";
//		
				
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
Возврат Текст 	
КонецФункции

Функция СформироватьXmlФайлостатков()
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
//	Чтен.ЗаписатьИмяСвойства("document_description");
//	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("trade_participant_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	
	Чтен.ЗаписатьИмяСвойства("products_list");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		Чтен.ЗаписатьИмяСвойства("ki");
		Чтен.ЗаписатьЗначение(Стр.cis);
		Чтен.ЗаписатьКонецОбъекта();;
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	Возврат Текст;
	
	
//		Текст="<Vvod action_id=""05"">
//	|<DocType>Promotion_Inform_Selfmade</DocType>  
//	|<Participant_INN>"+Объект.Организация.ИНН+"</Participant_INN>  
//	|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//	|<Producer_INN>"+Объект.Организация.ИНН+"</Producer_INN>  
//	|<INNOwner>"+Объект.Организация.ИНН+"</INNOwner>  
//	|<Production_Order>2</Production_Order>  
//	|<Marking_Type>1</Marking_Type>  
////	|<Declaration_Date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</Declaration_Date>  
////	|<Declaration_Number>"+Объект.НомерДекларацииТовара+"</Declaration_Number>  
////	|<Customs_Code>"+Объект.КодТаможенногоОргана+"</Customs_Code>  
////	|<Decision_Code>"+Объект.КодПринятогоРешения.Код+"</Decision_Code>  
//	|<Products_List>";
//	Для Каждого Стр Из Объект.СерийныеНомера Цикл
//		
//		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
//		НСтр=НСтр[0];
//		
//	    Текст=Текст+"
//		|<PRODUCT>  
//		|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//		|<UIT>"+Стр.cis+"</UIT>
//		|<CodeTNVED>"+НСТР.КодТНВЭД.Код+"</CodeTNVED>
//		|<MarkingType>"+"3"+"</MarkingType>";
//		
//		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
//			Текст=Текст+"
//			|<Certificate_Doc>1</Certificate_Doc>";
//		Иначе
//			Текст=Текст+"
//			|<Certificate_Doc>2</Certificate_Doc>"
//		КонецЕсли;
//		
//		Текст=Текст+"
//		|<Certificate_Doc_Number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</Certificate_Doc_Number>
//		|<Certificate_Doc_Date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</Certificate_Doc_Date>
//		|</PRODUCT> ";
//		
//		
//		
//	КонецЦикла;
//	    Текст=Текст+"
//		|</Products_List>
//		|</Vvod>
//		|";
		

	
	Текст="<vvod action_id=""05""  version=""5"">
	|<trade_participant_inn>"+Объект.Организация.ИНН+"</trade_participant_inn>  
	|<producer_inn>"+Объект.Организация.ИНН+"</producer_inn>  
	|<owner_inn>"+Объект.Организация.ИНН+"</owner_inn>  
	|<product_date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_date>  
	|<production_order>"+"OWN_PRODUCTION"+"</production_order> ";
	
//	    Текст=Текст+"
//		|<MarkingType>"+"1 "+"</MarkingType>  ";
	    Текст=Текст+"
	|<products_list>";
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		НСтр=НСтр[0];
		
	    Текст=Текст+"
		|<product>  
		|<kit>"+Стр.cis+"</kit>
		|<product_Date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_Date>";
//		Если ЗначениеЗАполнено(Стр.НомерКороба) Тогда
//		    Текст=Текст+"
//			|<UITU>"+Стр.НомерКороба+"</UITU>";
//		КонецЕсли;
		   Текст=Текст+"
		|<tnved_code>"+НСТР.КодТНВЭД.Код+"</tnved_code>";
		
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>";
		Иначе
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>"
		КонецЕсли;
		
		Текст=Текст+"
		|<certificate_number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</certificate_number>
		|<certificate_date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</certificate_date>";
		
		
		Текст=Текст+"
		|</product> ";
		
		
		
	КонецЦикла;
	    Текст=Текст+"
		|</products_list>
		|</vvod>
		|";
//		
				
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
Возврат Текст 	
КонецФункции



Функция СформироватьXmlФайлВвод()
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("document_description");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("participant_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	Чтен.ЗаписатьИмяСвойства("production_date");
	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
	Чтен.ЗаписатьИмяСвойства("producer_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	Чтен.ЗаписатьИмяСвойства("owner_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	
	Чтен.ЗаписатьИмяСвойства("production_type");
	Чтен.ЗаписатьЗначение("OWN_PRODUCTION");
	
	Чтен.ЗаписатьКонецОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("doc_type");
	Чтен.ЗаписатьЗначение("Promotion_Inform_Selfmade");
	Чтен.ЗаписатьИмяСвойства("products");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		Чтен.ЗаписатьИмяСвойства("production_date");
		Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
		
		Если СтрДлина(Стр.Cis)<=18 Тогда
			Чтен.ЗаписатьИмяСвойства("uitu_code");
		Иначе
			Чтен.ЗаписатьИмяСвойства("uit_code");
		КонецЕсли;
		Чтен.ЗаписатьЗначение(Стр.cis);
		Чтен.ЗаписатьИмяСвойства("tnved_code");
		Чтен.ЗаписатьЗначение(НСТР.КодТНВЭД.Код);
		Чтен.ЗаписатьИмяСвойства("producer_inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		Чтен.ЗаписатьИмяСвойства("owner_inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		Чтен.ЗаписатьИмяСвойства("certificate_document");
		
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Чтен.ЗаписатьЗначение("CONFORMITY_CERT");
		Иначе
			Чтен.ЗаписатьЗначение("CONFORMITY_DECLAR");
		КонецЕсли;
		Чтен.ЗаписатьИмяСвойства("certificate_document_number");
		Чтен.ЗаписатьЗначение(НСтр.ДекларацияИлиСертификатСоответствия.Наименование);
		Чтен.ЗаписатьИмяСвойства("certificate_document_date");
		Чтен.ЗаписатьЗначение(Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
		Чтен.ЗаписатьКонецОбъекта();;
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	Возврат Текст;
	
	
//		Текст="<Vvod action_id=""05"">
//	|<DocType>Promotion_Inform_Selfmade</DocType>  
//	|<Participant_INN>"+Объект.Организация.ИНН+"</Participant_INN>  
//	|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//	|<Producer_INN>"+Объект.Организация.ИНН+"</Producer_INN>  
//	|<INNOwner>"+Объект.Организация.ИНН+"</INNOwner>  
//	|<Production_Order>2</Production_Order>  
//	|<Marking_Type>1</Marking_Type>  
////	|<Declaration_Date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</Declaration_Date>  
////	|<Declaration_Number>"+Объект.НомерДекларацииТовара+"</Declaration_Number>  
////	|<Customs_Code>"+Объект.КодТаможенногоОргана+"</Customs_Code>  
////	|<Decision_Code>"+Объект.КодПринятогоРешения.Код+"</Decision_Code>  
//	|<Products_List>";
//	Для Каждого Стр Из Объект.СерийныеНомера Цикл
//		
//		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
//		НСтр=НСтр[0];
//		
//	    Текст=Текст+"
//		|<PRODUCT>  
//		|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//		|<UIT>"+Стр.cis+"</UIT>
//		|<CodeTNVED>"+НСТР.КодТНВЭД.Код+"</CodeTNVED>
//		|<MarkingType>"+"3"+"</MarkingType>";
//		
//		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
//			Текст=Текст+"
//			|<Certificate_Doc>1</Certificate_Doc>";
//		Иначе
//			Текст=Текст+"
//			|<Certificate_Doc>2</Certificate_Doc>"
//		КонецЕсли;
//		
//		Текст=Текст+"
//		|<Certificate_Doc_Number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</Certificate_Doc_Number>
//		|<Certificate_Doc_Date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</Certificate_Doc_Date>
//		|</PRODUCT> ";
//		
//		
//		
//	КонецЦикла;
//	    Текст=Текст+"
//		|</Products_List>
//		|</Vvod>
//		|";
		

	
	Текст="<vvod action_id=""05""  version=""5"">
	|<trade_participant_inn>"+Объект.Организация.ИНН+"</trade_participant_inn>  
	|<producer_inn>"+Объект.Организация.ИНН+"</producer_inn>  
	|<owner_inn>"+Объект.Организация.ИНН+"</owner_inn>  
	|<product_date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_date>  
	|<production_order>"+"OWN_PRODUCTION"+"</production_order> ";
	
//	    Текст=Текст+"
//		|<MarkingType>"+"1 "+"</MarkingType>  ";
	    Текст=Текст+"
	|<products_list>";
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		НСтр=НСтр[0];
		
	    Текст=Текст+"
		|<product>  
		|<kit>"+Стр.cis+"</kit>
		|<product_Date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_Date>";
//		Если ЗначениеЗАполнено(Стр.НомерКороба) Тогда
//		    Текст=Текст+"
//			|<UITU>"+Стр.НомерКороба+"</UITU>";
//		КонецЕсли;
		   Текст=Текст+"
		|<tnved_code>"+НСТР.КодТНВЭД.Код+"</tnved_code>";
		
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>";
		Иначе
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>"
		КонецЕсли;
		
		Текст=Текст+"
		|<certificate_number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</certificate_number>
		|<certificate_date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</certificate_date>";
		
		
		Текст=Текст+"
		|</product> ";
		
		
		
	КонецЦикла;
	    Текст=Текст+"
		|</products_list>
		|</vvod>
		|";
//		
				
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
Возврат Текст 	
КонецФункции

&НаКлиенте
Процедура ТоварыКодТНВЭДПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ТекД=Элементы.Товары.ТекущиеДанные;
	ЗаписатьТНВЭД(ТекД.GTIN,ТекД.КодТНВЭД)
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьТНВЭД(GTIN,КодТНВЭД)
	ТекН=                   GTIN.ПолучитьОбъект();
	ТекН.КодТНВЭД=КодТНВЭД;
	ТекН.Записать()
Конецпроцедуры

&НаСервере
Процедура СчитатьОтправкуНаСервере()
	// Вставить содержимое обработчика.
	Хр=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.Получить(Новый Структура("Документ,Вид",Объект.Ссылка,"Отправлен заказ")).Файл;
	Если Хр<>Неопределено тогда
		Отправка=Хр.Получить();
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура СчитатьОтправку(Команда)
	СчитатьОтправкуНаСервере();
КонецПроцедуры

&НаСервере
Процедура СчитатьОтветНаСервере()
	// Вставить содержимое обработчика.
	Хр=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.Получить(Новый Структура("Документ,Вид",Объект.Ссылка,"Получили ответ")).Файл;
	Если Хр<>Неопределено тогда
		ОтветОтЦРПТ=Хр.Получить();
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура СчитатьОтвет(Команда)
	СчитатьОтветНаСервере();
КонецПроцедуры


Функция НайтиШаблон(Ш)
	К=Справочники.ШаблоныЭтикетокПриПечатиPDF_ХамелеонЦРПТ.НайтиПоНаименованию(Ш.Наименование);
	Если Не ЗначениеЗаполнено(К) Тогда
		К=1;
	Иначе
		К=К.Код;
	КонецЕсли;
	Возврат К
КонецФункции


Процедура ЗаписатьВрегистрPDF(PDF,Ссылка,orderID,НазваниеФайла)
	
	РегГ=РегистрыСведений.PDFФайлы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегГ.Отбор.Заказ.Установить(Ссылка);
	РегГ.Отбор.Код.Установить(orderID);
	Добав=РегГ.Добавить();
	Добав.Заказ=Ссылка;
	Добав.Код=orderID;
	Добав.НазваниеФайла=НазваниеФайла;
	Добав.ХранилищеФайла=Новый ХранилищеЗначения(PDF,Новый СжатиеДанных(9));
	РегГ.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	// Вставить содержимое обработчика.
	Если 	АвтоСерийные Тогда
		ТоварыСерийныйНомерНачалоВыбора(Элемент, "",Истина,ЛОжь)
		
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	// Вставить содержимое обработчика.
	
	ТекД=Элементы.Товары.ТекущиеДанные;
	НН=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",ТекД.НомерСтрокиСвязи));
	Для Каждого Стр_1 Из НН Цикл
		Объект.СерийныеНомера.Удалить(Стр_1);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЧерновик(Команда,УжеОтправили=Ложь )
	// Вставить содержимое обработчика.
	КонецПроцедуры

Функция ПолучитьФайлыПоДокументу()
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	PDFФайлы_ХамелеонЦРПТ.ХранилищеФайла
		|ИЗ
		|	РегистрСведений.PDFФайлы_ХамелеонЦРПТ КАК PDFФайлы_ХамелеонЦРПТ
		|ГДЕ
		|	PDFФайлы_ХамелеонЦРПТ.Заказ = &Заказ";
	
	Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивФайлов=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		МассивФайлов.Добавить(ВыборкаДетальныеЗаписи.ХранилищеФайла.Получить());
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Возврат 	МассивФайлов
КонецФункции

&НаКлиенте
Процедура ПечатьPDF(Команда)
	// Вставить содержимое обработчика.
	Yjv=0;
	ПолучилиФайл=ПолучитьФайлыПоДокументу();
	Для Каждого Стр Из ПолучилиФайл Цикл
		Если Стр=Неопределено Тогда
			Продолжить;
		КонецЕсли;
				ДвоичныеДанные=Стр;
				
					Каталог = КаталогВременныхФайлов();
	ИмяФайла = Строка(Новый УникальныйИдентификатор) + "2.xml";
	ВремФайл= Каталог+ИмяФайла;

			//	ВремФайл=ПолучитьИмяВременногоФайла(".pdf");
				ДвоичныеДанные.Записать(ВремФайл);
				//Если НаПринтер Тогда
				//	Shell = Новый COMОбъект("Shell.Application");
	    		//	Shell.ShellExecute(ВремФайл, "", "", "print", 0);				
					
					
//				Иначе
				
				Yjv=Yjv+1;
				ОткрытьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаСертификата",Новый Структура("Файл",ВремФайл),,Yjv);
//				КонецЕслИ;
			КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ТипДокументаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	УправлениеВидимостью(Истина );
КонецПроцедуры

&НаКлиенте
Процедура СобственникПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	УправлениеВидимостью(Истина)
КонецПроцедуры

&НаКлиенте
Процедура ШтрихКодПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ЗаполнитьИнфуПоШтриху();
	ПодключитьОбработчикОЖидания("аа",0.1,Истина);
КонецПроцедуры

&НаКлиенте
Процедура аа() Экспорт
	ШтрихКод="";
	ЭтаФорма.ТекущийЭлемент=Элементы.ШтрихКод;
КонецПроцедуры

Процедура ЗаполнитьИнфуПоШтриху(Стр_1=Неопределено)
	 	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Если Стр_1<>Неопределено Тогда
		стр=Объект.СерийныеНомера.НайтиПоИдентификатору(Стр_1);
		ШтрихКод=Стр.cis;
	КонецЕсли;
	ШтрихКод_1=(ШтрихКод);
	
	//ШтрихКод_1=КодироватьСтроку(ШтрихКод,СпособКодированияСтроки.КодировкаURL);
	//штрихКод=СтрЗаменить(ШтрихКод_1,"%1D","");
	ШтрихКод=Сред(ШтрихКод,1,38);
	//штрихКод_1=РаскодироватьСтроку(ШтрихКод,СпособКодированияСтроки.КодировкаURL);
		Если Сред(штрихКод_1,32,3)<>"240" Тогда
								ШтрихКод=Сред(ШтрихКод,1,31);
								//ШтрихКод=Сред(штрихКод_1,1,Найти(штрихКод_1,"%1D")-1);
								//ШтрихКод=РаскодироватьСтроку(ШтрихКод,СпособКодированияСтроки.КодировкаURL);
							Иначе
								
								           ШтрихКод=штрихКод_1;
							
							КонецЕсли;
						
	Если Стр_1=Неопределено Тогда
		Если Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",ШтрихКод)).Количество()>0 Тогда
			Сообщить("CiS "+ШтрихКод+" уже присутствует в документе");
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция
		|ИЗ
		|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер = &СерийныйНомер
		|				И НЕ КМОплачен) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СерийныйНомер", ШтрихКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		
		Продукция=ВыборкаДетальныеЗаписи.Продукция;
		Если Стр=Неопределено тогда
			Добав=Объект.СерийныеНомера.Добавить();
		Иначе
			Добав=Стр;
		КонецЕсли;
		Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
		Добав.НаименованиеТовара=Продукция;
		Добав.cis=ШтрихКод;
		
		
		ППП=Объект.Товары.НайтиСтроки(Новый структура("gtin",Продукция));
		Если ППП.Количество()=0 Тогда
			Добав_1=Объект.Товары.Добавить();
			Добав_1.GTIN=Продукция;
			Добав_1.КодТНВЭД=Продукция.КодТНВЭД;
	Если Продукция.СтранаПроизводства.Альфа2="RU" Тогда
		//СтрП="Производство в РФ";
			Добав_1.СпособВыпускаТоваров="Производство в РФ";
	Иначе
		//СтрП="Ввезен в РФ";
			Добав_1.СпособВыпускаТоваров="Ввезен в РФ";
		
	КонецЕсли;
			Добав_1.НомерСтрокиСвязи=Добав_1.ПолучитьИдентификатор();
			Добав_1.КоличествоКМ=1;
			Добав_1.ДекларацияИлиСертификатСоответствия=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(Объект.Дата,
			Новый Структура("Продукция",Продукция)).Документ;
		Иначе
			Добав_1=ППП[0];
			Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
			
		КонецЕсли;
		Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры

&НаКлиенте
Процедура ШтрихКодАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если СтрДлина(Текст)>=18
		Тогда
		       СтандартнаяОбработка=Ложь;
			   ШтрихКод=Текст;
			  ЗаполнитьИнфуПоШтриху(); 
	ПодключитьОбработчикОЖидания("аа",0.1,Истина);
			  КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СерийныеНомераТаблицаСерийныйНомерПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ЗаполнитьИнфуПоШтриху(Элементы.СерийныеНомераТаблица.ТекущиеДанные.ПолучитьИдентификатор());
	ПодключитьОбработчикОЖидания("аа",0.1,Истина);
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ДекларацияИлиСертификатСоответствияПриИзмененииНаСервере(ДатаТ,Продукция,Декларация)
	// Вставить содержимое обработчика.
	
	Если ЗначениеЗаполнено(Декларация.ДатаНачалаДействия)
		И РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(ДатаТ,
		Новый Структура("Продукция",Продукция)).Документ<>Декларация Тогда
		
		РегСв=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
		РегСв.Отбор.Продукция.Установить(Продукция);
		РегСв.Отбор.Период.Установить(Декларация.ДатаНачалаДействия);
		Добав=РегСв.Добавить();
		Добав.Период=Декларация.ДатаНачалаДействия;
		Добав.Продукция=Продукция;
		Добав.Документ=Декларация;
		Регсв.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДекларацияИлиСертификатСоответствияПриИзменении(Элемент)
	ТекД=Элементы.Товары.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекД.GTIN)
		И ЗначениеЗаполнено(ТекД.ДекларацияИлиСертификатСоответствия) Тогда
		ДекларацияИлиСертификатСоответствияПриИзмененииНаСервере(Объект.Дата,ТекД.GTIN,ТекД.ДекларацияИлиСертификатСоответствия);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
		Если Копирование=Ложь тОгда
		Отказ=Истина;
		Если Элемент.ТекущиеДанные<>Неопределено Тогда
			РРР=Элемент.ТекущиеДанные.GTIN;
		Иначе
			РРР=Неопределено;
		КонецЕсли;
		ОткрытьФорму("Документ.ОплатаЗаКМ_ХамелеонЦРПТ.Форма.ФормаВыбораКМ",
		Новый структура("Организация,ТекущаяСтрока",Объект.Организация,РРР),,,,,
		Новый ОписаниеОповещения("ПослеВыбораПродукции",ЭтаФорма,Элемент));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПродукции(РР,ДД) Экспорт
	Если РР<>Неопределено Тогда
		Для Каждого Стр Из РР ЦИкл
			ШтрихКод=Стр;
			ЗаполнитьИнфуПоШтриху();
		Конеццикла;
		ШтрихКод="";
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СерийныеНомераТаблицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
		Отказ=Истина;
		Если Элемент.ТекущиеДанные<>Неопределено Тогда
			РРР=Элемент.ТекущиеДанные.GTIN;
		Иначе
			РРР=Неопределено;
		КонецЕсли;
		ОткрытьФорму("Документ.ОплатаЗаКМ_ХамелеонЦРПТ.Форма.ФормаВыбораКМ",
		Новый структура("Организация,ТекущаяСтрока",Объект.Организация,РРР),,,,,
		Новый ОписаниеОповещения("ПослеВыбораПродукции",ЭтаФорма,Элемент));
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьНомерКоробаДляВыделенных(Команда)
	УстановитьНомерКоробаДляВыделенныхСервер(Элементы.СерийныеНомераТаблица.ВыделенныеСтроки);
	
КонецПроцедуры
Процедура УстановитьНомерКоробаДляВыделенныхСервер(Выд)
	НоваяУпаковка=xmlString(Новый УникальныйИдентификатор());
	НоваяУпаковка=СтрЗаменить(НоваяУпаковка,"-","");
	НоваяУпаковка=Сред(НоваяУпаковка,1,18);
	Для Каждого Стр_1 Из Выд Цикл
		
		
	Конеццикла;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если Поле.Имя="ТоварыGTIN" Тогда
		ОткрытьФорму("Справочник.Продукция_ХамелеонЦРПТ.ФормаОбъекта",Новый Структура("КЛюч",Элементы.Товары.ТекущиеДанные.GTIN));
	КонецЕслИ;
КонецПроцедуры
&НаКлиенте
Процедура Подсчитать(Команда)
	// Вставить содержимое обработчика.
	Thumbprint_1=ПолучитьИзПользователя();	
	
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра)  Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	
	Для Каждого Стр Из Объект.Товары Цикл
		Стр.КоличествоНомеровКМ=0;
		Нстр=ОБъект.СерийныеНомера.НайтиСтроки(Новый Структура("НаименованиеТовара",Стр.GTIN));
		
		Для Каждого Стр_М Из НСТр Цикл
			Если СтрДлина(Стр_М.cis)=18 Тогда
				
				РекурсияУпаковки(Стр_М,Стр.КоличествоНомеровКМ,Thumbprint_1,СРегистра);
				
				
			Иначе
				Стр.КоличествоНомеровКМ=Стр.КоличествоНомеровКМ+1;
			КонецЕсли;
			
		КонецциклА;
		
		
		
	КонецЦикла;
КонецПроцедуры



&НаКлиенте
Процедура РекурсияУпаковки(Строк,Количество,Thumbprint_1,СРегистра)
	
	
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		Сообщить("Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
	ММ= Строк.cis;
			
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ));
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	//ЧтениеJSON = Новый ЧтениеJSON;
	//ЧтениеJSON.УстановитьСтроку(Текст1);
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);
	
	Для Каждого Стр_1 Из NNN.children Цикл
		Если СтрДлина(Стр_1.cis)=18 Тогда
			РекурсияУпаковки(Стр_1 ,Количество,Thumbprint_1,СРегистра)
		Иначе
			Количество=Количество+1;
		КонецеслИ;
	КонецЦиклА;
	
КонецПроцедуры


Процедура РекурсияУпаковкиСервер(Строк,Количество,Thumbprint_1,СРегистра)
	
	
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		Сообщить("Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
	ММ= Строк.cis;
			
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ));
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	//ЧтениеJSON = Новый ЧтениеJSON;
	//ЧтениеJSON.УстановитьСтроку(Текст1);
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);
	
	Для Каждого Стр_1 Из NNN.children Цикл
		Если СтрДлина(Стр_1.cis)=18 Тогда
			РекурсияУпаковкиСервер(Стр_1 ,Количество,Thumbprint_1,СРегистра)
		Иначе
			Количество=Количество+1;
		КонецеслИ;
	КонецЦиклА;
	
КонецПроцедуры

Процедура   НаСервереВыд(СРегистра,Thumbprint_1)
Для Каждого Стр_1 Из Элементы.Товары.ВыделенныеСтроки Цикл
			Стр=Объект.Товары.НайтиПоИдентификатору(Стр_1);
			Стр.КоличествоНомеровКМ=0;
			Нстр=ОБъект.СерийныеНомера.НайтиСтроки(Новый Структура("НаименованиеТовара",Стр.GTIN));
			
			Для Каждого Стр_М Из НСТр Цикл
				Если СтрДлина(Стр_М.cis)=18 Тогда
					
					РекурсияУпаковкиСервер(Стр_М,Стр.КоличествоНомеровКМ,Thumbprint_1,СРегистра);
					
					
				Иначе
					Стр.КоличествоНомеровКМ=Стр.КоличествоНомеровКМ+1;
				КонецЕсли;
				
			КонецциклА;
			
			
			
		КонецЦикла;	
	КонецПроцедуры
&НаКлиенте
Процедура ВУпаковке(Команда)
	// Вставить содержимое обработчика.
	Thumbprint_1=ПолучитьИзПользователя();	
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра)  Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	
	
	Если ОбработкаWEBНаСервере Тогда
		НаСервереВыд(СРегистра,Thumbprint_1);
			
		
	Иначе

		Для Каждого Стр_1 Из Элементы.Товары.ВыделенныеСтроки Цикл
			Стр=Объект.Товары.НайтиПоИдентификатору(Стр_1);
			Стр.КоличествоНомеровКМ=0;
			Нстр=ОБъект.СерийныеНомера.НайтиСтроки(Новый Структура("НаименованиеТовара",Стр.GTIN));
			
			Для Каждого Стр_М Из НСТр Цикл
				Если СтрДлина(Стр_М.cis)=18 Тогда
					
					РекурсияУпаковки(Стр_М,Стр.КоличествоНомеровКМ,Thumbprint_1,СРегистра);
					
					
				Иначе
					Стр.КоличествоНомеровКМ=Стр.КоличествоНомеровКМ+1;
				КонецЕсли;
				
			КонецциклА;
			
			
			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Вставить содержимое обработчика.
	НачатьПолучениеКаталогаВременныхФайлов(Новый ОписаниеОповещения("ПослеПолученияКаталога",Этаформа));
	ПодсчетИтоговПоКМ()
	
	
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеПолученияКаталога(Кат,ДД) Экспорт
	КаталогВременныхФайловНаКлиенте=Кат;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтатусыПоКМ(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	Thumbprint_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);	
	
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра)  Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;

	Для каждого Стр_1 Из Объект.СерийныеНомера Цикл
		    Стр_1.Статус=Неопределено;
	   НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	
	   Если НаСервере Тогда
		 Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Стр_1.cis);  
		Иначе
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			Если Thumbprint_1.НаименованиеСтенда="Табак"
							ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
Тогда
	
		NN=ВернутьТелоЗапросаПодключение(Стр_1.cis);
						
	
			HTTPЗапрос=Новый HTTPЗапрос("private-office-api/private/v2/cis/status");
			//private-office-api/private/v2/cis/"+КодМаркировки+"/mrp"
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин   
			HTTPЗапрос.УстановитьТелоИзСтроки(NN,КодировкаТекста.UTF8);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
Иначе
	
	ММ= Стр_1.cis;
	
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ));
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Попытка
		Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
	исключение
		Возврат;
	Конецпопытки;
КонецЕсли;
КонецЕсли;

		Если НаСервере Тогда
			Текст1=Ответ.ПолучитьТелоКакСтроку;
			
		Иначе
			Текст1=Ответ.ПолучитьТелоКакСтроку();
		КонецЕсли;	
		
		Если Thumbprint_1.НаименованиеСтенда="Табак"
						ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
Тогда
		
			Попытка
		//ЧтениеJSON = Новый ЧтениеJSON;
		//	ЧтениеJSON.УстановитьСтроку(Текст1);
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Стр_1.Статус=NNN[0].status;
			
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Сообщить(Текст1);
			КонецПопытки;
	
Иначе
//ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(Текст1);
Попытка
	
	Если Ответ.КодСостояния=200 Тогда
		NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
		Стр_1.Статус=NNN.status;
	Иначе
		
					Стр_1.Статус=Ответ.КодСостояния;
					Если   Ответ.КодСостояния=404 Тогда
						Стр_1.Статус=Стр_1.Статус+" не найдено в базе"
				КонецЕсли;
		 Сообщить(Текст1);
	КонецЕсли;
	
	
Исключение
	Сообщить(ОписаниеОшибки());
	Сообщить(Текст1);
КонецПопытки;
КонецЕсли;



	Конеццикла;
	
	
КонецПроцедуры
&НаСервереБезКонтекста
Функция ВернутьТелоЗапросаПодключение(cis)
	МассивКодо=Новый Массив;
	          МассивКодо.Добавить(cis);
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("ids", МассивКодо);
			ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, "  ");
			
			ЗаписьJSON = Новый ЗаписьJSON();
			ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
			
			ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
			
			Возврат ЗаписьJSON.Закрыть();

КонецФункции

&НаКлиенте
Процедура ПодсчетИтоговПоКМ()
	ИтогоКМ=0;
	ИтогУпаковок=0;
	Для Каждого Стр_1 Из ДеревоКМ.ПолучитьЭлементы() Цикл
		Стр_1.Количество=0;
		РекурсияПодсчета(Стр_1);
	Конеццикла;
	
	Для Каждого Стр_1 Из ДеревоКМ.ПолучитьЭлементы() Цикл
		
		РекурсияПодсчета_Суммы(Стр_1,Стр_1.Количество);
		
		
	Конеццикла;
КонецПроцедуры
&НаКлиенте
Процедура ПоказатьИнформацию(Команда)
	ЭтаФорма.Записать();
	МассивCis=Новый Массив;
	ДеревоКМ.ПолучитьЭлементы().Очистить();
	Для Каждого Стр_ иЗ ОБъект.СерийныеНомера Цикл
		МассивCis.Добавить(Стр_.cis);
	Конеццикла;
	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюПоКМ_Массив(ДеревоКМ,МассивCis,Объект.ТекущийПользователь);
	
	
	ПодсчетИтоговПоКМ();
	
	Элементы.СтраницыТЧ.ТекущаяСтраница=Элементы.ИнформацияОКМ;
	
	
	СохранитьДеревоНаСервере();
	
КонецПроцедуры

Процедура СохранитьДеревоНаСервере()
	РегДв=РегистрыСведений.СохранитьДеревоИнформациюОНомерахКМВводВОборот_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.ВводВОборот.Установить(Объект.Ссылка);
	Добав=РегДв.Добавить();
	Добав.ВводВОборот=Объект.Ссылка;
	
	ТаблицаВыгрузки=Новый ДеревоЗначений;
	ТаблицаВыгрузки.Колонки.Добавить("Уровень");
	ТаблицаВыгрузки.Колонки.Добавить("НомерКороба");
	ТаблицаВыгрузки.Колонки.Добавить("НомерКМ");
	ТаблицаВыгрузки.Колонки.Добавить("Продукция");
	ТаблицаВыгрузки.Колонки.Добавить("Количество");
	ТаблицаВыгрузки.Колонки.Добавить("cis");
	ТаблицаВыгрузки.Колонки.Добавить("Статус");
	ТаблицаВыгрузки.Колонки.Добавить("Вспомогательный");
	
	Сч=0;
	Для Каждого Стр_1 Из ДеревоКМ.ПолучитьЭлементы() Цикл
		Добав_Т=ТаблицаВыгрузки.Строки.Добавить();
		РекурсияПоДереву(Добав_Т,Сч,Стр_1);
	Конеццикла;
	
	
	Добав.Хранилище=Новый ХранилищеЗначения(ТаблицаВыгрузки);
	РегДв.Записать(Истина);
КонецПроцедуры

Процедура РекурсияПоДереву(Добав,Знач Сч,Стр_1)
	//Добав=ТаблицаВыгрузки.Добавить();
	ЗаполнитьЗначенияСвойств(Добав,Стр_1);
	Добав.Уровень=Сч;
	Сч=Сч+1;
	Для Каждого Стр_2 Из Стр_1.ПолучитьЭлементы() Цикл
		Добав_22=Добав.Строки.Добавить();
		РекурсияПоДереву(Добав_22,Сч,Стр_2);
	Конеццикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РекурсияПодсчета(Стр_2)
	
	Если Стр_2.ПолучитьЭлементы().Количество()=0 Тогда
		Стр_2.Количество=0;
		ИтогоКМ=ИтогоКМ+1;
	Иначе
		ИтогУпаковок=ИтогУпаковок+1;
		Для Каждого Стр_3 Из Стр_2.ПолучитьЭлементы() Цикл
			Стр_3.Количество=0;
			РекурсияПодсчета(Стр_3)
		Конеццикла;
	КонецЕсли;
	
КонецПроцедуры



&НаКлиенте
Процедура РекурсияПодсчета_Суммы(Стр_2,КоличествоКМ)
	
	Если Стр_2.ПолучитьЭлементы().Количество()=0 Тогда
		КоличествоКМ=КоличествоКМ+1;
		Стр_2.Количество=1;
	Иначе
		Для Каждого Стр_3 Из Стр_2.ПолучитьЭлементы() Цикл
			РекурсияПодсчета_Суммы(Стр_3,Стр_3.Количество);
			КоличествоКМ=КоличествоКМ+Стр_3.Количество;
		Конеццикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИз(Команда)
	// Вставить содержимое обработчика.
		// Вставить содержимое обработчика.
	МассивКМ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ВернутьКМИзФайлов();
		
	Для Каждого ШтрихОбраб Из МассивКМ Цикл
		//ШтрихОбраб=ТекстовыйД.ПолучитьСтроку(Сч);
	
			ШтрихКод68=ШтрихОбраб;
			
			шТРИХкОД=ШтрихКод68;
			ЗаполнитьИнфуПоШтриху();

		
		КонецЦикла;
	
	
	ПодключитьОбработчикОЖидания("аа",0.1,Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура ПроверкаКМВДереве(Команда)
	// Вставить содержимое обработчика.
	
	Thumbprint_1=ПолучитьИзПользователя();	
	
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра)  Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		Сообщить("Не удалось получить токен по организации");
		Возврат;
	Конецесли;

	Для Каждого стр_1 Из ДеревоКМ.ПолучитьЭлементы() Цикл
		
		
		Рекурсия_статуссов(Стр_1,Thumbprint_1,СРегистра)
		
	Конеццикла;
КонецПроцедуры

&НаКлиенте
Процедура Рекурсия_статуссов(Стр_1,Thumbprint_1,СРегистра)	
	
	Если Не ЗначениеЗаполнено(Стр_1.cis) Тогда
	                 Стр_1.cis=Стр_1.НомерКМ;
					КонецЕсли;
		  Стр_1.Статус=Неопределено;
	   НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	
	   Если НаСервере Тогда
		 Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Стр_1.cis);  
		Иначе
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			Если Thumbprint_1.НаименованиеСтенда="Табак"
							ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
Тогда
	
		NN=ВернутьТелоЗапросаПодключение(Стр_1.cis);
						
	
			HTTPЗапрос=Новый HTTPЗапрос("private-office-api/private/v2/cis/status");
			//private-office-api/private/v2/cis/"+КодМаркировки+"/mrp"
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин   
			HTTPЗапрос.УстановитьТелоИзСтроки(NN,КодировкаТекста.UTF8);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
Иначе
	
	ММ= Стр_1.cis;
	
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ));
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Попытка
		Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
	исключение
		Возврат;
	Конецпопытки;
КонецЕсли;
КонецЕсли;

		Если НаСервере Тогда
			Текст1=Ответ.ПолучитьТелоКакСтроку;
			
		Иначе
			Текст1=Ответ.ПолучитьТелоКакСтроку();
		КонецЕсли;	
		
		Если Thumbprint_1.НаименованиеСтенда="Табак"
						ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
Тогда
		
			Попытка
		//ЧтениеJSON = Новый ЧтениеJSON;
		//	ЧтениеJSON.УстановитьСтроку(Текст1);
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Стр_1.Статус=NNN[0].status;
			
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Сообщить(Текст1);
			КонецПопытки;
	
Иначе
//ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(Текст1);
Попытка
	
	Если Ответ.КодСостояния=200 Тогда
		NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
		Стр_1.Статус=NNN.status;
	Иначе
		
					Стр_1.Статус=Ответ.КодСостояния;
					Если   Ответ.КодСостояния=404 Тогда
						Стр_1.Статус=Стр_1.Статус+" не найдено в базе"
				КонецЕсли;
		 Сообщить(Текст1);
	КонецЕсли;
	
	
Исключение
	Сообщить(ОписаниеОшибки());
	Сообщить(Текст1);
КонецПопытки;
КонецЕсли;


	
Для Каждого Стр_2 Из Стр_1.ПолучитьЭлементы() Цикл
	Рекурсия_статуссов(Стр_2,Thumbprint_1,СРегистра)	
	Конеццикла;
	
Конецпроцедуры


&НаКлиенте
Процедура ПолучитьДлинныеКМ(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Стр_2 Из ДеревоКМ.ПолучитьЭлементы() Цикл
		Рек(Стр_2);
		
	Конеццикла;
	
	СохранитьДеревоНаСервере()
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиПо(cis)
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказМарок_ХамелеонЦРПТКМИзAPI.НомерКМ
		|ИЗ
		|	Документ.ЗаказМарок_ХамелеонЦРПТ.КМИзAPI КАК ЗаказМарок_ХамелеонЦРПТКМИзAPI
		|ГДЕ
		|	ЗаказМарок_ХамелеонЦРПТКМИзAPI.НомерКМ_Короткий = &НомерКМ_Короткий";
	
	Запрос.УстановитьПараметр("НомерКМ_Короткий", cis);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Возврат ВыборкаДетальныеЗаписи.НомерКМ
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты.Регистратор
		|ИЗ
		|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Обороты(, , Регистратор, СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты
		|ГДЕ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты.Регистратор ССЫЛКА Документ.ЗаказМарок_ХамелеонЦРПТ";
	
	Запрос.УстановитьПараметр("СерийныйНомер", cis);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		КодИр=КодироватьСтроку(cis,СпособКодированияСтроки.КодировкаURL);
		Для Каждого Стр_1 Из    ВыборкаДетальныеЗаписи.Регистратор.КМИзAPI Цикл
			
			Если Найти(Стр_1.НомерКМ,КодИр)=1 Тогда
				Возврат             Стр_1.НомерКМ
			Конецесли;
		Конеццикла;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
КонецФункции

&НаКлиенте
Процедура Рек (Стр_3)
	
	Если Стр_3.ПолучитьЭлементы().Количество()=0 ТОгда
	Если Не ЗначениеЗаполнено(Стр_3.cis) Тогда
	                 Стр_3.cis=Стр_3.НомерКМ;
					КонецЕсли;
		Стр_3.Вспомогательный=НайтиПо(Стр_3.cis);
	Иначе
		ДЛя Каждого Стр_2 Из Стр_3.ПолучитьЭлементы() Цикл
			Рек(Стр_2);
		Конеццикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВTXT(Команда)
	// Вставить содержимое обработчика.
	ДилогВыбора=Новый ДиалогВыбораФайла(РежимдиалогаВыбораФайла.ВыборКаталога);
	ДилогВыбора.Заголовок="Выберите каталог для сохранения файлов с номерами КМ";
	Если ДилогВыбора.Выбрать() Тогда
		Каталог=ДилогВыбора.Каталог;
	//	Форм=ЭтаФорма.ВладелецФормы.Элементы.ЗаказыТаблица.ВыделенныеСтроки;
	//	Для Каждого Стр_1 Из Форм Цикл
			
			Номер="";
			ДвоичнД=СохранитьФайлНаДИске(Объект.Ссылка,Номер);
			
			ИмяФ=Каталог+"\"+Номер+".txt";
			ДвоичнД.Записать(ИмяФ);
	//	Конеццикла;
		
		
	КонецЕсли;
	
	
	
КонецПроцедуры

Процедура Рек_Запис(ТексТД,ДД)
	
	
	Если ЗначениеЗаполнено(ДД.Вспомогательный) Тогда
		сшш=РаскодироватьСтроку(ДД.Вспомогательный,способКодированияСтроки.КодировкаURL);
		ТексТД.ДобавитьСтроку(сшш);
		
	КонецЕсли;
	Для Каждого Стр_2 Из ДД.ПолучитьЭлементы() Цикл
		Рек_Запис(ТексТД,Стр_2)
		
	Конеццикла;
	
КонецПроцедуры

Функция СохранитьФайлНаДИске(Ссылка,Номер)
	
	ТекстД=Новый ТекстовыйДокумент;
	Номер=Объект.Номер;
	//ТекстД.ДобавитьСтроку(Ссылка.Номер);
	
	ТаблицаТоваров=Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	//ТаблицаТоваров.Колонки.Добавить("Продукция");
	ТаблицаТоваров.Колонки.Добавить("НомерКороба");
	
	Для Каждого Стр_1 ИЗ Объект.Товары Цикл
		
		НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",
		Стр_1.НомерСтрокиСвязи));
		Для Каждого Стр_2 Из НСтрок Цикл
			
			Добав=ТаблицаТоваров.Добавить();
			Добав.Артикул=Стр_1.gtin.МодельПроизводителяАртикул;
			//Добав.Продукция=Стр_1.gtin;
			Добав.НомерКороба=Стр_2.cis;
			
		Конеццикла;
		
		
	Конеццикла;
	таблицаТоваров.Свернуть("Артикул,НомерКороба");
	таблицаТоваров.Сортировать("Артикул,НомерКороба");
	
	Артикул="ываывавыаываываыв";
	
	Для Каждого Стр_1 Из таблицаТоваров Цикл
		Если Артикул<>Стр_1.Артикул Тогда
				ТекстД.ДобавитьСтроку(Стр_1.Артикул);
			КонецЕсли;
		ТекстД.ДобавитьСтроку(Стр_1.НомерКороба);
		Для Каждого ДД ИЗ ДеревоКМ.ПолучитьЭлементы() Цикл
			Если ДД.НомерКороба=Стр_1.НомерКороба Тогда
				
				Рек_Запис(ТексТД,ДД);
			
//				РР=РаскодироватьСтроку(ДД.НомерКМ,СпособКодированияСтроки.КодировкаURL);
//				ТекстД.ДобавитьСтроку(РР);
			КонецЕсли;
		Конеццикла;
		
		Артикул=Стр_1.Артикул;
		
		
	Конеццикла;
	
	
	//ТаблицаТоваров.Колонки.Добавить("Артикул");
	
	
	
	

	
//	Для Каждого ДД ИЗ ДеревоКМ.ПолучитьЭлементы() Цикл
//		Рек_Запис(ТексТД,ДД);
		
//		РР=РаскодироватьСтроку(ДД.НомерКМ,СпособКодированияСтроки.КодировкаURL);
//		ТекстД.ДобавитьСтроку(РР);
//	Конеццикла;
	
	//ИмяТекст=ПолучитьИмяВременногоФайла();
	//ТекстД.Записать(ИмяТекст);
	ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстД.ПолучитьТекст());//Новый ДвоичныеДанные(ИмяТекст);
	//УдалитьФайлы(ИмяТекст);
	Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстД.ПолучитьТекст());
	
КонецФункции

&НаСервере
Функция СохранитьФайлНаДИске_БезКоробов(Ссылка,Номер)
	// Вставить содержимое обработчика.
	
	ТекстД=Новый ТекстовыйДокумент;
	Номер=Объект.Номер;
	//ТекстД.ДобавитьСтроку(Ссылка.Номер);
	
	ТаблицаТоваров=Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	//ТаблицаТоваров.Колонки.Добавить("Продукция");
	ТаблицаТоваров.Колонки.Добавить("НомерКороба");
	
	Для Каждого Стр_1 ИЗ Объект.Товары Цикл
		
		НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",
		Стр_1.НомерСтрокиСвязи));
		Для Каждого Стр_2 Из НСтрок Цикл
			
			Добав=ТаблицаТоваров.Добавить();
			Добав.Артикул=Стр_1.gtin.МодельПроизводителяАртикул;
			//Добав.Продукция=Стр_1.gtin;
			Добав.НомерКороба=Стр_2.cis;
			
		Конеццикла;
		
		
	Конеццикла;
	таблицаТоваров.Свернуть("Артикул,НомерКороба");
	таблицаТоваров.Сортировать("Артикул,НомерКороба");
	
	Артикул="ываывавыаываываыв";
	
	Для Каждого Стр_1 Из таблицаТоваров Цикл
		Если Артикул<>Стр_1.Артикул Тогда
				ТекстД.ДобавитьСтроку(Стр_1.Артикул);
			КонецЕсли;
	//	ТекстД.ДобавитьСтроку(Стр_1.НомерКороба);
		Для Каждого ДД ИЗ ДеревоКМ.ПолучитьЭлементы() Цикл
			Если ДД.НомерКороба=Стр_1.НомерКороба Тогда
				
				Рек_Запис(ТексТД,ДД);
			
//				РР=РаскодироватьСтроку(ДД.НомерКМ,СпособКодированияСтроки.КодировкаURL);
//				ТекстД.ДобавитьСтроку(РР);
			КонецЕсли;
		Конеццикла;
		
		Артикул=Стр_1.Артикул;
		
		
	Конеццикла;
	
	
	//ТаблицаТоваров.Колонки.Добавить("Артикул");
	
	
	
	

	
//	Для Каждого ДД ИЗ ДеревоКМ.ПолучитьЭлементы() Цикл
//		Рек_Запис(ТексТД,ДД);
		
//		РР=РаскодироватьСтроку(ДД.НомерКМ,СпособКодированияСтроки.КодировкаURL);
//		ТекстД.ДобавитьСтроку(РР);
//	Конеццикла;
	
	//ИмяТекст=ПолучитьИмяВременногоФайла();
	//ТекстД.Записать(ИмяТекст);
	ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстД.ПолучитьТекст());//Новый ДвоичныеДанные(ИмяТекст);
	//УдалитьФайлы(ИмяТекст);
	Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстД.ПолучитьТекст());
	
КонецФункции

&НаКлиенте
Процедура СохранитьВtXTБезКоробов(Команда)
	// Вставить содержимое обработчика.
	ДилогВыбора=Новый ДиалогВыбораФайла(РежимдиалогаВыбораФайла.ВыборКаталога);
	ДилогВыбора.Заголовок="Выберите каталог для сохранения файлов с номерами КМ";
	Если ДилогВыбора.Выбрать() Тогда
		Каталог=ДилогВыбора.Каталог;
	//	Форм=ЭтаФорма.ВладелецФормы.Элементы.ЗаказыТаблица.ВыделенныеСтроки;
	//	Для Каждого Стр_1 Из Форм Цикл
			
			Номер="";
			ДвоичнД=СохранитьФайлНаДИске_БезКоробов(Объект.Ссылка,Номер);
			
			ИмяФ=Каталог+"\"+Номер+".txt";
			ДвоичнД.Записать(ИмяФ);
	//	Конеццикла;
		
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКороткиеНомераКМБезКоробов(Команда)
	// Вставить содержимое обработчика.
	ДилогВыбора=Новый ДиалогВыбораФайла(РежимдиалогаВыбораФайла.ВыборКаталога);
	ДилогВыбора.Заголовок="Выберите каталог для сохранения файлов с номерами КМ";
	Если ДилогВыбора.Выбрать() Тогда
		Каталог=ДилогВыбора.Каталог;
	//	Форм=ЭтаФорма.ВладелецФормы.Элементы.ЗаказыТаблица.ВыделенныеСтроки;
	//	Для Каждого Стр_1 Из Форм Цикл
			
			Номер="";
			ДвоичнД=СохранитьФайлНаДИске_БезКоробовКороткие(Объект.Ссылка,Номер);
			
			ИмяФ=Каталог+"\"+Номер+".txt";
			ДвоичнД.Записать(ИмяФ);
	//	Конеццикла;
		
		
	КонецЕсли;	
	
	
	
КонецПроцедуры

&НаСервере
Функция СохранитьФайлНаДИске_БезКоробовКороткие(Ссылка,Номер)
	// Вставить содержимое обработчика.
	
	//Объект=УФ.Объект;
	ТекстД=Новый ТекстовыйДокумент;
	Номер=Объект.Номер;
	//ТекстД.ДобавитьСтроку(Ссылка.Номер);
	
	ТаблицаТоваров=Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	//ТаблицаТоваров.Колонки.Добавить("Продукция");
	ТаблицаТоваров.Колонки.Добавить("НомерКороба");
	
	Для Каждого Стр_1 ИЗ Объект.Товары Цикл
		
		НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",
		Стр_1.НомерСтрокиСвязи));
		Для Каждого Стр_2 Из НСтрок Цикл
			
			Добав=ТаблицаТоваров.Добавить();
			Добав.Артикул=Стр_1.gtin.МодельПроизводителяАртикул;
			//Добав.Продукция=Стр_1.gtin;
			Добав.НомерКороба=Стр_2.cis;
			
		Конеццикла;
		
		
	Конеццикла;
	таблицаТоваров.Свернуть("Артикул,НомерКороба");
	таблицаТоваров.Сортировать("Артикул,НомерКороба");
	
	Артикул="ываывавыаываываыв";
	
	Для Каждого Стр_1 Из таблицаТоваров Цикл
		Если Артикул<>Стр_1.Артикул Тогда
				ТекстД.ДобавитьСтроку(Стр_1.Артикул);
			КонецЕсли;
	//	ТекстД.ДобавитьСтроку(Стр_1.НомерКороба);
		Для Каждого ДД ИЗ ДеревоКМ.ПолучитьЭлементы() Цикл
			Если ДД.НомерКороба=Стр_1.НомерКороба Тогда
				
				Рек_Запис_Короткие(ТексТД,ДД);
			
//				РР=РаскодироватьСтроку(ДД.НомерКМ,СпособКодированияСтроки.КодировкаURL);
//				ТекстД.ДобавитьСтроку(РР);
			КонецЕсли;
		Конеццикла;
		
		Артикул=Стр_1.Артикул;
		
		
	Конеццикла;
	
	
	//ТаблицаТоваров.Колонки.Добавить("Артикул");
	
	
	
	

	
//	Для Каждого ДД ИЗ ДеревоКМ.ПолучитьЭлементы() Цикл
//		Рек_Запис(ТексТД,ДД);
		
//		РР=РаскодироватьСтроку(ДД.НомерКМ,СпособКодированияСтроки.КодировкаURL);
//		ТекстД.ДобавитьСтроку(РР);
//	Конеццикла;
	
	//ИмяТекст=ПолучитьИмяВременногоФайла();
	//ТекстД.Записать(ИмяТекст);
	ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстД.ПолучитьТекст());//Новый ДвоичныеДанные(ИмяТекст);
	//УдалитьФайлы(ИмяТекст);
	Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстД.ПолучитьТекст());
	
КонецФункции

Процедура Рек_Запис_Короткие(ТексТД,ДД)
	
	
	Если ЗначениеЗаполнено(ДД.Вспомогательный) Тогда
	//	сшш=РаскодироватьСтроку(ДД.Вспомогательный,способКодированияСтроки.КодировкаURL);
		ТексТД.ДобавитьСтроку(ДД.cis);
		
	КонецЕсли;
	Для Каждого Стр_2 Из ДД.ПолучитьЭлементы() Цикл
		Рек_Запис_Короткие(ТексТД,Стр_2)
		
	Конеццикла;
	
КонецПроцедуры

