&НаКлиенте
Процедура ОпределитьСтатусПоФармацевтике(Thumbprint_1,МассивКМ)
	
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
					Иначе
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		
		
		

				СРегистра="";///Thumbprint_1.Thumbprint_1;
				Если Не ЗначениеЗаполнено(СРегистра) тогда
					Попытка
						СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
					исключение
						СРегистра=Неопределено;
					КонецПопытки;
				КонецЕсли;
				
				
				
						Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Возврат;
		КонецЕсли;

		Пока МассивКМ.Количество()>0 Цикл
		 	МассивОпределям=Новый Массив;
			МассивОпределям.Очистить();
			КоличествоПр=Мин(1,МассивКМ.Количество());
			Для Сч=1 По КоличествоПр Цикл
				МассивОпределям.Добавить(МассивКМ[0]);
				МассивКМ.Удалить(0);
			Конеццикла;
		 	ВернутьСтатусы=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьСтатусыПоМассивуКМ_Лекарства(Thumbprint_1,Срегистра,МассивОпределям);
			
			Для Каждого Стр_1 Из ВернутьСтатусы Цикл
				Нстрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1.cis));
				Нстрок[0].Статус=Стр_1.Статус;
			Конеццикла;
			
			
		Конеццикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьстатусыКМ(МассивКМ)
	
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
		
		ОпределитьСтатусПоФармацевтике(Thumbprint_1,МассивКМ);
		
		Возврат;
				 
				 
	КонецЕсли;	
	
	
	СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
	СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
	Если Не ЗначениеЗаполнено(СРегистра)  Тогда
		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
	Иначе
		   	
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
			Прокси=Новый ИнтернетПрокси;
			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		Иначе
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
				
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
		Если Ответ.КодСостояния<>200 Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		КонецЕсли;
	КонецЕсли;

		Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Сообщить("Не удалось подключиться к ЦРПТ");
			Возврат;
		КонецЕсли;
		
		
	
	
   НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();

   Если НаСервере Тогда
	// Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Стр_1.Марка);  
	Иначе
		Пока МассивКМ.Количество()>0 Цикл
		 	МассивОпределям=Новый Массив;
			МассивОпределям.Очистить();
			КоличествоПр=Мин(1,МассивКМ.Количество());
			Для Сч=1 По КоличествоПр Цикл
				МассивОпределям.Добавить(МассивКМ[0]);
				МассивКМ.Удалить(0);
			Конеццикла;
		 	ВернутьСтатусы=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьСтатусыПоМассивуКМ(Thumbprint_1,Срегистра,МассивОпределям);
			
			Для Каждого Стр_1 Из ВернутьСтатусы Цикл
				Нстрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1.cis));
				Нстрок[0].Статус=Стр_1.Статус;
			Конеццикла;
			
			
		Конеццикла;
		
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьВнешниеОбработки(Команда)
	// Вставить содержимое обработчика.
	ОткрытьФорму("Справочник.ВнешниеОбработки_ХамелеонЦРПТ.Форма.ФормаСписка",
	Новый структура("Тип",
		ТипДокумента()));
КонецПроцедуры


Функция ТипДокумента()
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя()
КонецФункции


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	//РаботатьНаV1=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().РаботатьНаV1;
									   ОбработкаWEBНаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	Орг=Неопределено;
	Параметры.Свойство("Организация",Орг);
	Если ЗначениеЗаполнено(Орг) Тогда
		Объект.Организация=Орг;
	КонецЕсли;
	Поль=Неопределено;
	Параметры.Свойство("Пользовтаель",Поль);
	Если ЗначениеЗаполнено(Поль) Тогда
		Объект.ТекущийПользователь=Поль;
	КонецЕсли;
	ОбновитьВнешниеКнопки();
	
	Если Не ЗначениеЗаполнено(Объект.ТипДокумента) Тогда
		Объект.ТипДокумента=Перечисления.ТипДокументаПеремаркировки_ХамелеонЦРПТ.DESCRIPTION_ERRORS;
	КонецЕсли;
 	ППП=РегистрыСведений.СохранитьДеревоИнформациюОНомерахКМВводВОборот_ХамелеонЦРПТ.Получить(Новый Структура("ВводВОборот",Объект.Ссылка)).Хранилище.Получить();
	Если ППП<>Неопределено Тогда
		Для Каждого Стр_1 Из ППП.Строки Цикл
			
			Добав=ДеревоКМ.ПолучитьЭлементы().Добавить();
			РекурсияДеревоКМ(Добав,СТр_1);
			
		Конеццикла;
		
		//ДеервоКМ=ППП;
	КонецЕслИ;
	МодульПриСозданииДокументов_ХамелеонЦРПТ.Перемаркировка_ХамелеонЦРПТ_ПриСозданииНаСервере(ЭтаФорма,Отказ,СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РекурсияДеревоКМ(Добав,Стр_1)
	ЗаполнитьЗначенияСвойств(Добав,Стр_1);
	Для Каждого Стр_22 Из Стр_1.Строки Цикл
		Добав_1=Добав.ПолучитьЭлементы().Добавить();
		РекурсияДеревоКМ(Добав_1,Стр_22);
		
		
	Конеццикла;
	
КонецПроцедуры

Функция СоздатьНайтиСобственникаПоОрг()
	СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",Объект.Организация.ИНН);
	Если ЗначениеЗаполнено(СпрК) тогда
		СпрК=СпрК.ПолучитьОбъект();
	Иначе
		спрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
	КонецЕсли;
	СпрК.ИНН=Объект.Организация.ИНН;
	СпрК.Наименование=ОБъект.Организация.Наименование;
	СпрК.Записать();
	Возврат СпрК.Ссылка;
Конецфункции
&НаКлиенте
Процедура ИзменитьВидимость() Экспорт
	ИтогЭмитирован=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("Статус","APPLIED")).Количество();
	ИтогВОбороте=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("Статус","INTRODUCED")).Количество();
	ИтогRet=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("Статус","RETIRED")).Количество();
	ИтогоОшибки=Объект.СерийныеНомера.Количество()-ИтогВОбороте-ИтогЭмитирован-ИтогRet;
КонецПроцедуры



Процедура ОбновитьВнешниеКнопки()
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнешниеОбработки_ХамелеонЦРПТ.ИмяВнешнейОБработки,
		|	ВнешниеОбработки_ХамелеонЦРПТ.НаименованиеКнопки,
		|	ВнешниеОбработки_ХамелеонЦРПТ.Код
		|ИЗ
		|	Справочник.ВнешниеОбработки_ХамелеонЦРПТ КАК ВнешниеОбработки_ХамелеонЦРПТ
		|ГДЕ
		|	ВнешниеОбработки_ХамелеонЦРПТ.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ИмяКоманды="Команда"+ВыборкаДетальныеЗаписи.Код;
		Попытка
		КомандаФормы = Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуВнешняя";
		КомандаФормы.Заголовок = ВыборкаДетальныеЗаписи.ИмяВнешнейОБработки;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.Текст;
		
		//ОписаниеКомандыПечати.ИмяКомандыНаФорме = ИмяКоманды;
		
		НовыйЭлемент = Элементы.Добавить("ГруппаКнопокВнешняя" + ИмяКоманды, Тип("КнопкаФормы"), Элементы.ГруппаКнопокВнешняя);
		НовыйЭлемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		НовыйЭлемент.Заголовок=ВыборкаДетальныеЗаписи.НаименованиеКнопки;
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	Исключение
		КонецПопытки;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуВнешняя(Команда)
	
	// Вставить содержимое обработчика.	// Вставить содержимое обработчика.
	Попытка
		
		ВернДв=ВернутьИмяФайла(Команда.Имя);
		Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
			ДвоичныеДанные=ВернДв;
		Иначе
			ДвоичныеДанные=Новый ДвоичныеДанные(ВернДв);
		Конецесли;
		ОбработкаИмя=ПолучитьИмяВнешней(Двоичныеданные);
		ОткрытьФорму("ВнешняяОбработка."+ОбработкаИмя+".Форма",,ЭтаФорма);
	Исключение
			Попытка
#Если ТолстыйКлиентОбычноеПриложение  Тогда
		ВернДв=ВернутьИмяФайла(Команда.Имя);
		Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
			//ДвоичныеДанные=ВернДв;
			ДвоичныеДанные=ПолучитьИмяВременногоФайла();
			ВернДв.Записать(ДвоичныеДанные);
			
		Иначе
			ДвоичныеДанные=ВернДв;
		Конецесли;
				ВернутьВн(ДвоичныеДанные);
				Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
					УдалитьФайлы(ДвоичныеДанные);
				КонецЕсли;
#Иначе
				
			ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
#КонецЕсли
			Исключение
				ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
			КонецПопытки;
		//	
	//	
	КонецПопытки;

	//УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


#Если ТолстыйКлиентОбычноеПриложение  Тогда
&НаКлиенте
Процедура ВернутьВн(ДвоичныеДанные)
	//ИмяВременФ=ПолучитьИмяВременногоФайла();
	//ДвоичныеДанные.Записать(ИмяВременФ);
	ВнешняяОбработка=ВнешниеОбработки.Создать(ДвоичныеДанные);
	Фоорма=ВнешняяОбработка.ПолучитьФорму(,ЭтаФорма);
	Попытка
		Фоорма.УФ=ЭтаФорма;
	Исключение
	КонецПопытки;
	Фоорма.Открыть();
Конецпроцедуры      	
#КонецЕсли



Функция ВернутьИмяФайла(Команда)
//	Если РегистрыСведений.НастройкиПрограммыЦРПТ.Получить().ЗагружатьВнешниеОбработкиИзХранилища Тогда
		Возврат Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоКоду(Сред(Команда,8)).Хранилище.Получить();
//	Иначе
//		СпрВн=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоКоду(Сред(Команда,8));
//	Конецесли;
	
//	Возврат СпрВн.ИмяВнешнейОБработки
	//НаимСправочника=Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя();
	//Спр=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоНаименованию(НаимСправочника,Истина);
	//Если Спр<>Справочники.ВнешниеОбработки_ХамелеонЦРПТ.ПустаяСсылка() Тогда
	//	Возврат Спр.ИмяВнешнейОБработки;
	//Конецесли;
	
КонецФункции

Функция ПолучитьИмяВнешней(ИмяФайла)
    АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ИмяФайла);
    ИмяОбр = ВнешниеОбработки.Подключить(АдресВоВременномХранилище,,Ложь);
    Возврат ИмяОбр;
КонецФункции

&НаКлиенте
Процедура ТекущийПользовательПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ТекПользСервер();


	
КонецПроцедуры

Процедура ТекПользСервер()
	Элементы.ПервыичныйДокумент.Видимость=Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипДокументаПеремаркировки_ХамелеонЦРПТ.REMOTE_SALE_RETURN")
	ИЛИ Объект.ТипДокумента=
	ПредопределенноеЗначение("Перечисление.ТипДокументаПеремаркировки_ХамелеонЦРПТ.RETAIL_RETURN")
	
	ИЛИ Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипДокументаПеремаркировки_ХамелеонЦРПТ.LEGAL_RETURN")
	ИЛИ Объект.ТипДокумента=
	ПредопределенноеЗначение("Перечисление.ТипДокументаПеремаркировки_ХамелеонЦРПТ.EEC_EXPORT_RETURN");
	
	

	
	Элементы.ВидПервичногоДокумента.Видимость
	=Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипДокументаПеремаркировки_ХамелеонЦРПТ.REMOTE_SALE_RETURN")
	ИЛИ Объект.ТипДокумента=
	ПредопределенноеЗначение("Перечисление.ТипДокументаПеремаркировки_ХамелеонЦРПТ.RETAIL_RETURN");
	
	Элементы.ВидПервичногоДокументаНеРозница.Видимость
	=Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипДокументаПеремаркировки_ХамелеонЦРПТ.LEGAL_RETURN")
	ИЛИ Объект.ТипДокумента=
	ПредопределенноеЗначение("Перечисление.ТипДокументаПеремаркировки_ХамелеонЦРПТ.EEC_EXPORT_RETURN");
	
	
	Элементы.СерийныеНомераТаблицаОбувь.Видимость=
	Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Обувь";
	
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьПараметрыПоПользователю(Польз)
	
	Возврат Новый Структура("СпособФормированияСН,ВидМаркировки,ВидСИ",Польз.СпособФормированияСН,Польз.ВидМаркировки,Польз.ВидСИ);
	
КонецФункции

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	// Вставить содержимое обработчика.
	//Если НоваяСтрока Тогда
	//	ПолучитьПараметрыПоПльзователию=ПолучитьПараметрыПоПользователю(Объект.ТекущийПользователь);
	//	ТекД=Элементы.Товары.ТекущиеДанные;
	//	ЗаполнитьЗначенияСвойств(ТекД,ПолучитьПараметрыПоПльзователию);
	//	ТекД.Обрабатывать=Истина;
	//	ТекД.КоличествоКМ=1;
	//	ТекД.Документ=ВернутьДокументСД(ТекД.Продукция,Объект.Дата);
	//КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Функция ВернутьДокументСД(Пр,Дата1)  
	Возврат Регистрысведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(
	Дата1,Новый Структура("Продукция",Пр)).Документ
КонецФункции
  

&НаСервере
Функция ТоварыGTINПриИзмененииНаСервере(Товар)
	// Вставить содержимое обработчика.    
	Если Товар.СтранаПроизводства.Альфа2="RU" Тогда
		СтрП="Производство в РФ";
	Иначе
		СтрП="Ввезен в РФ";
		
	КонецЕсли;
	Возврат Новый Структура("КодТНВЭД,СпособВыпускаТоваров",Товар.КодТНВЭД,СтрП);
Конецфункции

&НаКлиенте
Процедура ТоварыGTINПриИзменении(Элемент)
	ТекД=Элементы.Товары.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекД,ТоварыGTINПриИзмененииНаСервере(ТекД.GTIN));
КонецПроцедуры


&НаКлиенте
Процедура ТоварыСерийныйНомерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка,Переходить=Истина)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка=Ложь;
	Если Переходить<>Ложь Тогда
		Элементы.СтраницыТЧ.ТекущаяСтраница=Элементы.СерийныеНомера;
	КонецЕсли; 
	
	ТекД=Элементы.Товары.ТекущиеДанные;
	ТекД.НомерСтрокиСвязи=ТекД.ПолучитьИдентификатор();
	НН=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",ТекД.ПолучитьИдентификатор()));
	Для Каждого Стр_1 Из НН Цикл
		Объект.СерийныеНомера.Удалить(Стр_1);
	КонецЦикла;
	//АвтоСерийные=Автосерийные(Объект.ТекущийПользователь);
	Для Сч=1 По ТекД.КоличествоКМ цикл
		Добав=Объект.СерийныеНомера.Добавить();
		Добав.НомерСтрокиСвязи=ТекД.ПолучитьИдентификатор();
		Добав.GTIN=ВернутьГТИН(ТекД.GTIN);
		Добав.НаименованиеТовара=ТекД.GTIN;
	КонецЦикла;
	
	Объект.СерийныеНомера.Сортировать("НомерСтрокиСвязи");
	р=оБЪЕКТ.СерийныеНомера.НайтиСтроки(нОВЫЙ СТРУКТУРА("НомерСтрокиСвязи",Текд.НомерСтрокиСвязи));
	Если Р.Количество()>0 Тогда
		Элементы.СерийныеНомераТаблица.ТекущаяСтрока=Р[0].Получитьидентификатор();
	КонецЕсли;
	Если АвтоСерийные Тогда
		СгенерироватьНаСервере()
	КонецЕсли;
КонецПроцедуры

Функция ВернутьГТИН(Н)	
	Возврат xmlString(Н.GTIN)
КонецФункции

&НаСервере
Процедура СгенерироватьНаСервере()
	// Вставить содержимое обработчика.
	Для Каждого Стр Из ОБъект.СерийныеНомера Цикл
		Если Не Значениезаполнено(Стр.СерийныйНомер) Тогда
			
			СерийныйНомер=xmlString(Новый УникальныйИдентификатор());
			СерийныйНомер=СтрЗаменить(СерийныйНомер,"-","");
			Стр.СерийныйНомер=Сред(СерийныйНомер,1,13);
			
		КонецЕсли;
	Конеццикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Сгенерировать(Команда)
	СгенерироватьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭтикеток(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры
Процедура ПечатьЭти(Таб)
КонецПроцедуры

Функция EncodeURL(URL)
    Результат1 = "";
    Для Сч = 1 По СтрДлина(URL) Цикл
        ch = Сред(URL,Сч,1);
        vch = КодСимвола(ch);

		Если ("A" <= ch ) И ( ch <= "Z") Тогда      
			Результат1 = Результат1 + ch;
		ИначеЕсли ("a" <= ch ) И ( ch <= "z") Тогда 
			Результат1 = Результат1 + ch;
        ИначеЕсли ("0" <= ch ) И ( ch <= "9") Тогда 
            Результат1 = Результат1 + ch;
        ИначеЕсли (ch = " ") ИЛИ ( ch = "+") Тогда          
            Результат1 = Результат1 + "+";
		ИначеЕсли (ch = "-" ) ИЛИ ( ch = "_")       
			ИЛИ (ch = ".") ИЛИ (ch = "!")
            ИЛИ (ch = "~") ИЛИ (ch = "*")
            ИЛИ (ch = "") ИЛИ (ch = "(")
            ИЛИ (ch = ")") Тогда
            Результат1 = Результат1 + ch;
        ИначеЕсли (vch <= 127) Тогда        
            Результат1 = Результат1 + hex(vch);
        ИначеЕсли (vch <= 2047) Тогда       
            Результат1 = Результат1 + hex(192 + Цел(vch / 64));
            Результат1 = Результат1 + hex(128 + (vch % 64));
		Иначе                  
			Результат1 = Результат1 + hex(224 + Цел(vch / 4096));
            Результат1 = Результат1 + hex(128 + (Цел(vch / 64) % 64));
            Результат1 = Результат1 + hex(128 + (vch % 64));
        КонецЕсли;
    КонецЦикла;

    Возврат Результат1;
КонецФункции // ()


Функция hex(Знач Значение__)
    Значение__=Число(Значение__);
    Если Значение__<=0 Тогда
        Результат1="0";
    Иначе
        Значение__=Цел(Значение__);
        Результат1="";
        Пока Значение__>0 Цикл
            Результат1=Сред("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",Значение__%16 + 1,1)+Результат1;
            Значение__=Цел(Значение__/16) ;
        КонецЦикла;
    КонецЕсли;
    Если СтрДлина(Результат1) < 2 Тогда

        Результат1 = "0" + Результат1;

    КонецЕсли;
    Возврат "%" + Результат1;
КонецФункции


Функция ПолучитьИзПользователя()
	//Возврат Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);
	    Струк=Неопределено;
	Если Объект.Организация.ИНН=ТекущийПользователь.Организация.ИНН 
		И Объект.ТекущийПользователь.СайтыВходаВСистему=ТекущийПользователь.СайтыВходаВСистему Тогда
		Струк=Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(ТекущийПользователь);
	ИначеЕсли НЕ Объект.ТекущийПользователь.ПометкаУдаления ТОгда
		Струк=Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);
		
	Иначе
		
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Пользователи_ХамелеонЦРПТ КАК Пользователи_ХамелеонЦРПТ
		|ГДЕ
		|	Пользователи_ХамелеонЦРПТ.Организация.ИНН = &Организация
		|	И Пользователи_ХамелеонЦРПТ.СайтыВходаВСистему = &СайтыВходаВСистему
		|	И НЕ Пользователи_ХамелеонЦРПТ.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация.ИНН);
	Запрос.УстановитьПараметр("СайтыВходаВСистему", Объект.ТекущийПользователь.СайтыВходаВСистему);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НайтиПольз=Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		                      НайтиПольз=ВыборкаДетальныеЗаписи.Ссылка
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		
		//НайтиПольз=Справочники.Пользователи_ХамелеонЦРПТ.НайтиПоРеквизиту("Организация",Объект.Организация);
		Если ЗначениеЗаполнено(НайтиПольз) Тогда
			Струк=Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(НайтиПольз);
		КонецЕсли;
		
	КонецЕслИ;
	
	
	Если ЗначениеЗаполнено(Струк) тогда
	
		Струк.Вставить("РасчетОстатков",РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().РасчетОстатков);
	
		Возврат Струк;
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьВЦРПТ(Команда,УжеОтправили=Ложь) Экспорт
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьТокенСрегистра(ТТ)
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(ТТ,"")
КонецПроцедуры

Функция НеПрошлаПроверка21(Файл_1) Экспорт
	//	Возврат Ложь;
	КаталогВременногоФайла=КаталогВременныхФайлов()+"new_maket_V21\";
	СоздатьКаталог(КаталогВременногоФайла);
		
	//Файл=ПолучитьИмяВременногоФайла("xml");
	Файл=ПолучитьИмяВременногоФайла("xml");
	Файл=СтрЗаменить(Файл,КаталогВременныхФайлов(),КаталогВременногоФайла);
	
	
	Файл_2=Новый ТекстовыйДокумент;
	Файл_2.ДобавитьСтроку(Файл_1);
	Файл_2.Записать(Файл,КодировкаТекста.UTF8);
	
	//ИмяВремен=ПолучитьИмяВременногоФайла("xsd");
	//МакетXDTO.Записать(ИмяВремен,КодировкаТекста.ANSI);
	//dictionary_v20=ПолучитьИмяВременногоФайла("xsd");
	//dictionary_v20=КаталогВременногоФайла+"dictionary_v21.xsd";
	
	dictionary_v20=ПолучитьИмяВременногоФайла("xsd");
	dictionary_v20=СтрЗаменить(dictionary_v20,КаталогВременныхФайлов(),КаталогВременногоФайла);
	
	LP_base_types=ПолучитьИмяВременногоФайла("xsd");
	LP_base_types=СтрЗаменить(LP_base_types,КаталогВременныхФайлов(),КаталогВременногоФайла);

	Текст=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("dictionary_v21");
	Текст.Записать(dictionary_v20,КодировкаТекста.UTF8);
	
	
	Текст=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("LP_base_types");
	Текст.Записать(dictionary_v20,КодировкаТекста.UTF8);
	
	XMLDoc = New COMObject("Msxml2.DOMDocument.6.0");
    XMLDoc.Async = false;
    XMLDoc.ValidateOnParse = true;
    SchemaCache = New COMObject("Msxml2.XMLSchemaCache.6.0");
	SchemaCache.Add("LP_base_types.xsd",LP_base_types);
	SchemaCache.Add("",dictionary_v20);
	
	XMLDoc.Schemas = SchemaCache;
    XMLDoc.SetProperty("MultipleErrorMessages", true);
    XMLDoc.Load(Файл);
    ErrObj = XMLDoc.ParseError;
	Ошибка="";
    If ErrObj.ErrorCode <> 0 Then
        For Each ErrItem In ErrObj.AllErrors Do 
            //Message("Ошибка : " + ErrItem.Reason + " " + ErrItem.SrcText);
			Ошибка=Ошибка+"В строке № "+Erritem.line+" в колонке № "++Erritem.linepos+" ошибка: "+ErrItem.Reason+" "+ErrItem.SrcText+Символы.ПС+Символы.ПС;
		EndDo;
//		УдалитьФайлы(ИмяВремен);
		Сообщить(Ошибка);
		Возврат Истина;
    EndIf;
	УдалитьФайлы(Файл);
	УдалитьФайлы(dictionary_v20);
	
	Возврат Ложь;
КонецФункции

&НаСервереБезКонтекста
Функция дополнитьСтроку(Ср)
	ВОзврат Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Ср,14,"0");
	
Конецфункции

Процедура ЗапишемВРегистр_Ответ(ТекстДокумент)
	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Объект.Ссылка);
	РегДв.Отбор.Вид.Установить("Получили ответ");
	Добав=РегДв.Добавить();
	Добав.Документ=ОБъект.Ссылка;
	Добав.Вид="Получили ответ";
	Добав.Файл=Новый ХранилищеЗначения(ТекстДокумент,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
КонецПроцедуры


Процедура ЗапишемВРегистр(ТекстДокумент)
	
	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Объект.Ссылка);
	РегДв.Отбор.Вид.Установить("Отправлен заказ");
	Добав=РегДв.Добавить();
	Добав.Документ=ОБъект.Ссылка;
	Добав.Вид="Отправлен заказ";
	Добав.Файл=Новый ХранилищеЗначения(ТекстДокумент,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТокенСрегистра(Thumbprint_1)
	Возврат Регистрысведений.ТокенПоСертификату_ХамелеонЦРПТ.Получить(Новый Структура("Отпечаток",Thumbprint_1)).Токен;
КонецФункции

&НаКлиенте
Процедура ПослеПолученияСертификатов(Хранилище,ДД) Экспорт
	Хранилище.НачатьПолучениеВсех(Новый ОписаниеОповещения("ПослеПолученияВсех",ЭтаФорма,ДД));
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияВсех(СертификатыХранилища,ДД) Экспорт
	ТекущаяДата = ТекущаяДата();
	Для Каждого Сертификат Из СертификатыХранилища Цикл
	    Если Сертификат.ДатаОкончания < ТекущаяДата Тогда 
	        // Пропускаем истекшие сертификаты, если нужно
	        Продолжить;
		КонецЕсли;
		Если СтрЗаменить(Строка(Сертификат.Отпечаток)," ","")=ДД.ТекущийПользователь.Thumbprint_1 Тогда
			ДД.МенеджерКриптографии.НачатьПодписывание(Новый Описаниеоповещения("ПослеПодписиФайла",ЭтаФорма,ДД),
			
			
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ДД.ИмяВр,КодировкаТекста.ANSI,Ложь)),КодировкаТекста.ANSI,Ложь),Сертификат);
			
			//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ДД.ИмяВр,КодировкаТекста.ANSI,Ложь)),КодировкаТекста.ANSI,Ложь),Сертификат);
			Возврат;
			
		КонецЕсли;
		//ПолучитьСтрокуИзДвоичныхДанных(Сертификат.Отпечаток);
		//СтрСер=РаскодироватьнаСервере(Base64Строка(Сертификат.СерийныйНомер));
		                  		
	    //СписокСертификатов.Добавить(Сертификат);
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Функция КодСтрСервер(Добав)
	Возврат КодироватьСтроку(Добав,СпособКодированияСтроки.КодировкаURL);
Конецфункции

&НаКлиенте
Процедура ПослеПодписиФайлаТокен(РР,ДД) Экспорт
	//Тело = "{
	//|""uuid"": """+ОтветСтруктура.uuid+""",
	//|""data"": """+Добав+"""
	//|}";
	//HTTPЗапрос=Новый HTTPЗапрос("/api/v3/auth/cert/");
	//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	////HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	//
	//HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВнешняяВ(ТекущийПользователь)
	Возврат ТекущийПользователь.ИспользоватьВнешнийСертификат
КонецФункции
&НаКлиенте
Процедура ПослеЗаписиФайлаТокен(РР,ДД) Экспорт
	Сертификат=ДД.Сертификат;
	HTTPСервисЗапрос=ДД.HTTPСервисЗапрос;
	ФайлВременный=ДД.ФайлВременный;
	ИмяВр=ДД.ИмяВр;
	ОтветСтруктура=ДД.ОтветСтруктура;
	ВыбСертификатЭЦП=ДД.ВыбСертификатЭЦП;
	
	
	Данные=Новый ДвоичныеДанные(ИмяВр);
    Строка64=Base64Строка(Данные);
    Строка64=Лев(Строка64,СтрДлина(Строка64)-4);
    ДанныеНаЗапись=Base64Значение(Строка64);
   // ДанныеНаЗапись.Записать(ИмяВр);
	
	
	Каталог = КаталогВременныхФайловНаКлиенте;
	ИмяФайла = Строка(Новый УникальныйИдентификатор) + "2.xml";
	ИмяВр_1= Каталог+ИмяФайла;
	
	//ИмяВр_1=ПолучитьИмяВременногоФайла();
	Текущийпользователь=ВыбСертификатЭЦП.Thumbprint;
	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(ВнешняяВ(Объект.ТекущийПользователь),ДанныеНаЗапись,ИмяВр_1,Текущийпользователь,
	"ПослеПодписиФайлаТокен",ЭтаФорма);	
	
	Возврат;
	
	
	
  	Текст=Новый ТекстовыйДокумент;
	Текст.Прочитать(ИмяВр_1);

 	Добав=Текст.ПолучитьТекст();
	Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
	Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
	Добав=Сред(Добав,1,стрДлина(Добав)-4);
	Добав=СтрЗаменить(Добав,"\r\n","");
	УдалитьФайлы(ИмяВр);
	УдалитьФайлы(ИмяВр_1);
	
	Тело = "{
	|""uuid"": """+ОтветСтруктура.uuid+""",
	|""data"": """+Добав+"""
	|}";
	HTTPЗапрос=Новый HTTPЗапрос("/api/v3/auth/cert/");
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	
	
	Парамукк="";
	ОтветСтруктура_1 =ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
	Если HTTPСервисЗапрос.Status=200 Тогда
		ТОКЕН=ОтветСтруктура_1.token;                                 
	ИначеЕсли ОтветСтруктура_1.Свойство("error",Парамукк) Тогда
		
		ТекстОшибки="";
		Если ТипЗнч(Парамукк)=Тип("Массив") тогда
			Для Каждого Стр Из Парамукк Цикл
				ТекстОшибки=ТекстОшибки+стр;
			Конеццикла;
		Иначе
			ТекстОшибки=Парамукк;
		КонецЕсли;
		Сообщить(ТекстОшибки);
		Возврат       
	Конецесли;

	
КонецПроцедуры

Функция ПроверкаЗаполнения_1()
	Если ЗначениеЗАполнено(ОБъект.Ссылка) Тогда	
		Возврат Объект.Ссылка.ПолучитьОбъект().ПроверитьЗаполнение()
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ЗагрузканаСервереОтправитьЗаявку(Thumbprint_1,СРегистра,УжеОтправили,Тело)
					Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
		Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотИмпорт") Тогда
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/import/send");
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборот") Тогда
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/send");
		КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		
		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Ответ(Текст1);
		КонецЕсли;
			
		
	
	
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
		ИЛИ Ответ.КодСостояния=201 
		Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			Объект._Order_ID=Текст1;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				Возврат Ложь
			КонецЕсли
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли      ;
	Возврат Истина;
КонецФункции

Функция НаСервереФормируемОтчетОбИспользовании(Thumbprint_1,session_ui)
	
	
	Если Объект.СерийныеНомера.Количество()=0 Тогда
		Возврат "";
	КонецЕсли;
	//МассивФайлов=Новый Массив;
//Для Каждого Стр Из Объект.Товары Цикл
	
Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
	
	//МассивТекстов=Новый Массив;

		//Текст = Сформировать311_XSD(session_ui,НСтрок);
		
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("documents");
	Чтение.ЗаписатьАтрибут("version","1.34");
	
	Чтение.ЗаписатьНачалоЭлемента("register_product_emission");
	Чтение.ЗаписатьАтрибут("action_id","313");
	Чтение.ЗаписатьНачалоЭлемента("subject_id");
	Чтение.ЗаписатьТекст(Объект.Организация.subjectIdФармацевтика);
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьНачалоЭлемента("operation_date");
	Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
		
		//Время=ПолучитьЧасовойПоясИнформационнойБазы();
		
		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"+00:00");
	Иначе
		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:ссZ"""));
	
	конецесли;
	
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("release_info");
	
	Чтение.ЗаписатьНачалоЭлемента("doc_date");
	Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=дд.ММ.гггг"));
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("doc_num");
	Чтение.ЗаписатьТекст(Объект.Номер);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("confirmation_num");
	Чтение.ЗаписатьТекст(Объект.Номер);
	Чтение.ЗаписатьКонецЭлемента();

	
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Чтение.ЗаписатьНачалоЭлемента("signs");
//	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));

	Для Каждого Стр_c Из Объект.СерийныеНомера Цикл
		Чтение.ЗаписатьНачалоЭлемента("sgtin");
		
		Штрих=Стр_c.cis;
		Штрих=Сред(Штрих,3,14)+Сред(Штрих,19);
		
		Чтение.ЗаписатьТекст(Штрих);
		Чтение.ЗаписатьКонецЭлемента();
		
		  
		
	Конеццикла;
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Текст=Чтение.Закрыть();
//	МассивТекстов.Добавить(Текст);
	 	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
	Возврат Текст;
		
	
	
	
	
	Для Каждого Стр_1 Из Объект.Товары Цикл
		
		НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));

		//Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));

		//Текст = Сформировать311_XSD(session_ui,НСтрок);
		
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("documents");
	Чтение.ЗаписатьАтрибут("version","1.34");
	
	Чтение.ЗаписатьНачалоЭлемента("register_end_packing");
	Чтение.ЗаписатьАтрибут("action_id","313");
	Чтение.ЗаписатьНачалоЭлемента("subject_id");
	Чтение.ЗаписатьТекст(Объект.Организация.subjectIdФармацевтика);
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьНачалоЭлемента("operation_date");
	Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:ссZ"""));
	Чтение.ЗаписатьКонецЭлемента();
	
	
	
	
	
	Чтение.ЗаписатьНачалоЭлемента("signs");
//	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));

	Для Каждого Стр_c Из НСтрок Цикл
		Чтение.ЗаписатьНачалоЭлемента("sgtin");
		
		Штрих=Стр_c.cis;
		Штрих=Сред(Штрих,3,14)+Сред(Штрих,19);
		
		Чтение.ЗаписатьТекст(Штрих);
		Чтение.ЗаписатьКонецЭлемента();
		
		  
		
	Конеццикла;
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Текст=Чтение.Закрыть();
	//МассивТекстов.Добавить(Текст);
	 	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
		
		
		
		Продолжить;
		
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("documents");
	Чтение.ЗаписатьАтрибут("version","1.34");
	
	Чтение.ЗаписатьНачалоЭлемента("register_end_packing");
	Чтение.ЗаписатьАтрибут("action_id","311");
	Чтение.ЗаписатьНачалоЭлемента("subject_id");
	Чтение.ЗаписатьТекст(Объект.Организация.subjectIdФармацевтика);
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьНачалоЭлемента("operation_date");
	Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:ссZ"""));
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьНачалоЭлемента("order_type");
	Чтение.ЗаписатьТекст("1");
	Чтение.ЗаписатьКонецЭлемента();
	//
	Чтение.ЗаписатьНачалоЭлемента("series_number");
	Чтение.ЗаписатьТекст("1");
	Чтение.ЗаписатьКонецЭлемента();
	//
	Чтение.ЗаписатьНачалоЭлемента("expiration_date");
	Чтение.ЗаписатьТекст(Формат(Стр_1.Годендо,"ДФ=""дд.ММ.гггг"""));
	Чтение.ЗаписатьКонецЭлемента();
	//
	Чтение.ЗаписатьНачалоЭлемента("gtin");
	Чтение.ЗаписатьТекст(ДополнитьСтроку(xmlString(Стр_1.gtin.gtin)));
	Чтение.ЗаписатьКонецЭлемента();
	//
	Чтение.ЗаписатьНачалоЭлемента("signs");
//	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));

	Для Каждого Стр_c Из НСтрок Цикл
		Чтение.ЗаписатьНачалоЭлемента("sgtin");
		
		Штрих=Стр_c.cis;
		Штрих=Сред(Штрих,3,14)+Сред(Штрих,19);
		
		Чтение.ЗаписатьТекст(Штрих);
		Чтение.ЗаписатьКонецЭлемента();
		
		  
		
	Конеццикла;
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Текст=Чтение.Закрыть();
	//МассивТекстов.Добавить(Текст);
	 	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
Конеццикла;
	//Возврат МассивТекстов
ИначеЕсли Thumbprint_1.НаименованиеСтенда="Табак"
	ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
	Тогда
	Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();
				Чтен.ЗаписатьИмяСвойства("sntins");
		
              		Чтен.ЗаписатьНачалоМассива();
		Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		
			Если ЗначениеЗаполнено(Стр_1.cis) Тогда
				
				Если Сред(Стр_1.cis,1,2)="01" Тогда /////ВВОД В ОБОРОТ!!!!
												//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
							// Данный фрагмент построен конструктором.
							// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
							
							Запрос = Новый Запрос;
							Запрос.Текст = 
								"ВЫБРАТЬ
								|	ЗаказМарок_ХамелеонЦРПТКМИзAPI.НомерКМ,
								|	ЗаказМарок_ХамелеонЦРПТКМИзAPI.НомерКМ_Короткий
								|ИЗ
								|	Документ.ЗаказМарок_ХамелеонЦРПТ.КМИзAPI КАК ЗаказМарок_ХамелеонЦРПТКМИзAPI
								|ГДЕ
								|	ЗаказМарок_ХамелеонЦРПТКМИзAPI.НомерКМ_Короткий = &НомерКМ_Короткий";
							
							Запрос.УстановитьПараметр("НомерКМ_Короткий", Сред(Стр_1.cis,1,25));
							
							РезультатЗапроса = Запрос.Выполнить();
							
							ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
							сшы=Стр_1.cis;
							Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
								Если ВыборкаДетальныеЗаписи.НомерКМ_Короткий=Сред(Стр_1.cis,1,25) Тогда
									сшы=РаскодироватьСтроку(ВыборкаДетальныеЗаписи.НомерКМ,СпособКодированияСтроки.КодировкаURL);
									Прервать;
								КонецЕсли;
							конеццикла;
							//Если ВыборкаДетальныеЗаписи.Следующий() И ЗначениеЗАполнено(ВыборкаДетальныеЗаписи.НомерКМ) Тогда
								// Вставить обработку выборки ВыборкаДетальныеЗаписи
							//	чтен.ЗаписатьЗначение(РаскодироватьСтроку(ВыборкаДетальныеЗаписи.НомерКМ,СпособКодированияСтроки.КодировкаURL))
								
							//Иначе
								чтен.ЗаписатьЗначение(сшы)
								
							//КонецЕсли;;
							
							//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

					
				Иначе
					чтен.ЗаписатьЗначение(Стр_1.cis)
				КонецЕсли;
					
				КонецЕсли;
		//	Конеццикла;
			
	         Конеццикла;
			    чтен.ЗаписатьКонецМассива();
				
				Чтен.ЗаписатьИмяСвойства("usageType");
				
				Чтен.ЗаписатьЗначение("USED_FOR_PRODUCTION");
				
				//Если ЗначениеЗаполнено(Стр_1.Годендо) тогда
//					Чтен.ЗаписатьИмяСвойства("expirationDate");
//					Чтен.ЗаписатьЗначение(Формат(Стр_1.Годендо,"ДФ=""дд.ММ.гггг"""));
					
					
				//Иначе
					//Чтен.ЗаписатьИмяСвойства("expirationDate");
					//Чтен.ЗаписатьЗначение("010101");
						
					
				//КонецЕсли;
				
//					Чтен.ЗаписатьИмяСвойства("orderType");
//					Чтен.ЗаписатьЗначение(Объект.OrderType);
					
					
					//Чтен.ЗаписатьИмяСвойства("ownerId");
					//Чтен.ЗаписатьЗначение(Объект.ТекущийПользователь.ИдентификаторСУЗ);
					Чтен.ЗаписатьИмяСвойства("productionLineId");
					Чтен.ЗаписатьЗначение("1");
					Чтен.ЗаписатьИмяСвойства("productionOrderId");
					Чтен.ЗаписатьЗначение(xmlString(Объект.Ссылка.УникальныйИдентификатор()));
					
	
			Чтен.ЗаписатьКонецОбъекта();
					
		
		
		Текст=Чтен.Закрыть();
//	     МассивФайлов.Добавить(Новый Структура("Текст,Идентификатор",Текст,Стр.ПолучитьИдентификатор()));
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
	
Иначе


		Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();
				Чтен.ЗаписатьИмяСвойства("sntins");
		
              		Чтен.ЗаписатьНачалоМассива();
		Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		
			Если ЗначениеЗаполнено(Стр_1.cis) Тогда
					
					чтен.ЗаписатьЗначение(Стр_1.cis)
					
				КонецЕсли;
		//	Конеццикла;
			
	         Конеццикла;
			    чтен.ЗаписатьКонецМассива();
				
				Чтен.ЗаписатьИмяСвойства("usageType");
				
				Чтен.ЗаписатьЗначение("USED_FOR_PRODUCTION");
				
				//Если ЗначениеЗаполнено(Стр_1.Годендо) тогда
					Чтен.ЗаписатьИмяСвойства("expirationDate");
					Чтен.ЗаписатьЗначение(Формат(Стр_1.Годендо,"ДФ=""дд.ММ.гггг"""));
					
					
				//Иначе
					//Чтен.ЗаписатьИмяСвойства("expirationDate");
					//Чтен.ЗаписатьЗначение("010101");
						
					
				//КонецЕсли;
				
					Чтен.ЗаписатьИмяСвойства("orderType");
					Чтен.ЗаписатьЗначение(Объект.OrderType);
					
					
					Чтен.ЗаписатьИмяСвойства("ownerId");
					Чтен.ЗаписатьЗначение(Объект.ТекущийПользователь.ИдентификаторСУЗ);
					Чтен.ЗаписатьИмяСвойства("seriesNumber");
					Чтен.ЗаписатьЗначение("1");
					Чтен.ЗаписатьИмяСвойства("subjectId");
					Чтен.ЗаписатьЗначение(Объект.ТекущийПользователь.ИдентификаторСУЗ);
					
	
			Чтен.ЗаписатьКонецОбъекта();
					
		
		
		Текст=Чтен.Закрыть();
//	     МассивФайлов.Добавить(Новый Структура("Текст,Идентификатор",Текст,Стр.ПолучитьИдентификатор()));
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
//		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
	// Конеццикла;
	 КонецЕсли;
	
	Возврат Текст;
	
	
КонецФункции

Функция ВернутьУНИКУМ()
	Возврат xmlString(Новый УникальныйИдентификатор())
КонецФункции

&НаКлиенте
Процедура ОтправитьОтчетОбИспользовании()
	

		Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
	СформироватьФайлДляОтправки_1=НаСервереФормируемОтчетОбИспользовании(Thumbprint_1,"");
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
	//ТипЗнч(СформироватьФайлДляОтправки_1)=Тип("Массив") тогда
		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
		
		Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Возврат;
		КонецЕсли;

	СформироватьФайлДляОтправки_1=НаСервереФормируемОтчетОбИспользовании(Thumbprint_1,СРегистра);
		
		//Сч=0;
		//Для Каждого Стр_1 Из Объект.Товары Цикл
			
			СформироватьФайлДляОтправки=СформироватьФайлДляОтправки_1;
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
		
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

				
				Подписанный="";
		//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
		//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл_ЛДМП(СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Ложь);
			Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл_ЛДМП(СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Ложь);
				
				
			КонецЕсли;
		
		//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//Подписанный,КодировкаТекста.UTF8,Ложь));
		
					Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
				Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
				 Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("document");
	Чтен.ЗаписатьЗначение(Добав);
	Чтен.ЗаписатьИмяСвойства("sign");
	Чтен.ЗаписатьЗначение(Подписанный);
	Чтен.ЗаписатьИмяСвойства("request_id");
	Чтен.ЗаписатьЗначение(ВернутьУНИКУМ());
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();
	
				 
				 
		//Тело="{
		//|""doc_type"":""311"",
		//|""document"":"""+Добав+""",
		//|""sign"":"""+Подписанный+""",
		//|""request_id"":"""+ВернутьУНИКУМ()+"
		//|}";
			
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/send");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		
	Если Ответ.КодСостояния=200 ИЛИ Ответ.КодСостояния=200  Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Объект._Order_ID=NNN.document_id;
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
				//НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
//				Объект._Order_ID=NNN.orderId;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Объект.ОшибкаОтправки=Текст1;
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;

		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Ответ(Текст1);
		КонецЕсли;
			
		
		
		
			
			
		///Конеццикла;
		
		 ЭтаФорма.Записать();
		
		Возврат;
	КонецЕсли;
	
	
	СформироватьФайлДляОтправки_3=СформироватьФайлДляОтправки_1;
//	НеПрошлаПроверка21(СформироватьФайлДляОтправки);
//Для Каждого СформироватьФайлДляОтправки_3 ИЗ СформироватьФайлДляОтправки_1 Цикл
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки_3,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
	
	//Подписанный="";
	//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
	//			Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
	//		Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
	//		Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	
	
	//Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
	//			Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
	//		Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
	//		Добав=СтрЗаменить(Добав,"\r\n","");

	Тело=СформироватьФайлДляОтправки;
		АдресРаздробить=Thumbprint_1.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
		
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
			
			
			
			
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			ПоказатьПредупреждение(,"В пользователе не заполнен адрес СУЗ");
			Возврат;
			
		КонецЕсли;
	
	Если ОбработкаWEBНаСервере Тогда
		//ЗагрузканаСервереОтправитьЗаявка_Шины(Thumbprint_1,Тело,Адрес,Порт,Защищ,СформироватьФайлДляОтправки_3.Идентификатор);
		
		
	Иначе
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;
			
			
//			Если РаботатьНаV1 Тогда
//		HTTPЗапрос=Новый HTTPЗапрос("api/utilisation");
//			Иначе
		HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/utilisation?omsId="+Thumbprint_1.ИдентификаторСУЗ);
//		КонецЕсли;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("clientToken",Thumbprint_1.ТокенСУЗ);
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
					Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Текст1);
	КонецЕсли;
	
	
	Если Ответ.КодСостояния=202 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
//				НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
				Объект._Order_ID=NNN.orderId;
			

			//Объект._Order_ID=NNN.order_id;
	
	ИначеЕсли Ответ.КодСостояния=200 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
//				Если РаботатьнаV1 Тогда
//			Объект._Order_ID=NNN;
//				Иначе
			Объект._Order_ID=NNN.reportId;
//			Конецесли;
				//НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
//				Объект._Order_ID=NNN.orderId;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	//Если Ответ.КодСостояния<>200 Тогда
	//	
	//	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
	//	  Текст1=Ответ.ПолучитьТелоКакСтроку();
	//		Попытка
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//			Объект.ОшибкаОтправки=NNN.error_message;
	//			
	//		Исключение
	//		КонецПопытки;
	//	Иначе
	//		Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета");
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//		Объект._Order_ID=NNN.order_id;
	//КонецЕсли;
КонецЕсли;
	ЭтаФорма.Записать();
	

	
КонецПроцедуры


Функция НаСервереФормируемвыводизОборот(Thumbprint_1,session_ui)
	
	
	Если Объект.СерийныеНомера.Количество()=0 Тогда
		Возврат "";
	КонецЕсли;
	//МассивФайлов=Новый Массив;
//Для Каждого Стр Из Объект.Товары Цикл
	

		Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();
		
		Чтен.ЗаписатьИмяСвойства("inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		
		
		Чтен.ЗаписатьИмяСвойства("participantInn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		
		
		Чтен.ЗаписатьИмяСвойства("participant_inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		
		Чтен.ЗаписатьИмяСвойства("trade_participant_inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
			
		Чтен.ЗаписатьИмяСвойства("action_date");
		Чтен.ЗаписатьЗначение(Формат(Объект.Дата,"ДФ=""гггг-ММ-дд"""));
		
		Чтен.ЗаписатьИмяСвойства("action");
		Если Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота Тогда
			Чтен.ЗаписатьЗначение("RETAIL");
		ИначеЕсли Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНужд Тогда
			Чтен.ЗаписатьЗначение("ENTERPRISE_USE");
		Иначе
			Чтен.ЗаписатьЗначение("NO_RETAIL_USE");
			
		КонецЕсли;
		
		
		Чтен.ЗаписатьИмяСвойства("document_type");
		Чтен.ЗаписатьЗначение(xmlString(Объект.ВидПервичногоДокумента));
		
		Чтен.ЗаписатьИмяСвойства("document_number");
		Чтен.ЗаписатьЗначение(Формат(Объект.НомерПервичногоДокумента,"ДФ=""гггг-ММ-дд"""));
		
		Чтен.ЗаписатьИмяСвойства("document_date");
		Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПервичногоДокумента,"ДФ=""гггг-ММ-дд"""));
		
				
		
		
		Чтен.ЗаписатьИмяСвойства("products");
	
              		Чтен.ЗаписатьНачалоМассива();
		Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		
			Если ЗначениеЗаполнено(Стр_1.cis) Тогда
		Чтен.ЗаписатьНачалоОбъекта();
				//	Чтен.ЗаписатьИмяСвойства("uitu");
				///	чтен.ЗаписатьЗначение(Стр_1.cis);
					Чтен.ЗаписатьИмяСвойства("cis");
					чтен.ЗаписатьЗначение(Стр_1.cis);
					
		Чтен.ЗаписатьИмяСвойства("document_type");
		Чтен.ЗаписатьЗначение(xmlString(Объект.ВидПервичногоДокумента));
 		Чтен.ЗаписатьИмяСвойства("document_date");
		Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПервичногоДокумента,"ДФ=""гггг-ММ-дд"""));
		Чтен.ЗаписатьИмяСвойства("document_number");
		Чтен.ЗаписатьЗначение(Формат(Объект.НомерПервичногоДокумента,"ДФ=""гггг-ММ-дд"""));
		
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
		
					Чтен.ЗаписатьИмяСвойства("product_cost");
					чтен.ЗаписатьЗначение(НСтр[0].Цена*100);
		
		
		Чтен.ЗаписатьКонецОбъекта();
				КонецЕсли;
		//	Конеццикла;
			
	         Конеццикла;
		
			    чтен.ЗаписатьКонецМассива();
		Чтен.ЗаписатьКонецОбъекта();
				
			Текст=Чтен.Закрыть();
//	     МассивФайлов.Добавить(Новый Структура("Текст,Идентификатор",Текст,Стр.ПолучитьИдентификатор()));
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
	// Конеццикла;
	 //КонецЕсли;
	
	Возврат Текст;
	
	
КонецФункции


&НаКлиенте
Процедура ОтправитьВыводИзОборота(УжеОтправили=Ложь)
	

		Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
		
		
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	
			Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Возврат;
		КонецЕсли;

		
	СформироватьФайлДляОтправки_1=НаСервереФормируемвыводизОборот(Thumbprint_1,"");
	
	СформироватьФайлДляОтправки_3=СформироватьФайлДляОтправки_1;
//	НеПрошлаПроверка21(СформироватьФайлДляОтправки);
//Для Каждого СформироватьФайлДляОтправки_3 ИЗ СформироватьФайлДляОтправки_1 Цикл
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки_3,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
	
	//Подписанный="";
	//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
	//			Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
	//		Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
	//		Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	
	
	//Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
	//			Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
	//		Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
	//		Добав=СтрЗаменить(Добав,"\r\n","");

	Тело=СформироватьФайлДляОтправки;
		АдресРаздробить=Thumbprint_1.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
		
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
			
			
			
			Подписанный="";
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
		
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

				
		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
		
		//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//Подписанный,КодировкаТекста.UTF8,Ложь));
		
					Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
				Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
				 Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				
		Тело="{
		|""product_document"":"""+Добав+""",
		|""document_format"": ""MANUAL"",";
		
		//Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота") Тогда	
			Тело=Тело+"
			|""type"":""LK_RECEIPT"",";
	//		Тело=Тело+"
	//		|""ProductGroup"":""shoes"",";
			
			//|}";
			
		//КонецЕсли;
		Тело=Тело+"
		|""signature"":"""+Подписанный+"""}";
		
		      //ЗапишемВРегистр(Тело);
		
	Если ОбработкаWEBНаСервере Тогда
		Если НЕ ЗагрузканаСервереОтправитьЗаявку(Thumbprint_1,СРегистра,УжеОтправили,Тело) Тогда
				Если УжеОтправили=Истина Тогда
				//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОтправитьВыводИзОборота(Истина)			
		КонецЕсли
		
		КонецЕсли;
		
		
	Иначе
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
		Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотИмпорт") Тогда
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/import/send");
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборот") Тогда
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/send");
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота") 
			ИЛИ Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНужд") 
		//	ИЛИ Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНуждПокупателем")
			Тогда
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/receipt/send");
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.МаркировкаОстатков") Тогда
			
			
 			что=Thumbprint_1.что;
			
			//Если	 Thumbprint_1.НаименованиеСтенда="Обувь" Тогда
			//	HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg=shoes");
			//Иначе
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg="+Что);
				
			//КонецЕсли;
		
		КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		
		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Ответ(Текст1);
		КонецЕсли;
			
		
	
	
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
		ИЛИ Ответ.КодСостояния=201 
		Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			Объект._Order_ID=Текст1;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОтправитьВыводИзОборота(Истина)			
			КонецЕсли
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	   КонецЕсли;
	ЭтаФорма.Записать();

	
КонецПроцедуры


Функция СформироватьВозвратИзРозницы()
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("documentType");
	Чтен.ЗаписатьЗначение("RETAIL_RETURN");
	Чтен.ЗаписатьИмяСвойства("trade_participant_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	
	
	
	Если ЗначениеЗаполнено(Объект.ДокументПодтверждения) Тогда
		Чтен.ЗаписатьИмяСвойства("certificate_date");
		Чтен.ЗаписатьЗначение(Формат(Объект.ДокументПодтверждения.ДатаНачалаДействия,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
		
		Чтен.ЗаписатьИмяСвойства("certificate_number");
		Чтен.ЗаписатьЗначение(Объект.ДокументПодтверждения.Наименование);
		
		Чтен.ЗаписатьИмяСвойства("certificate_type");
		Если Объект.ДокументПодтверждения.ЭтоСертификат Тогда
			Чтен.ЗаписатьЗначение("CONFORMITY_CERTIFICATE");
		Иначе
			Чтен.ЗаписатьЗначение("CONFORMITY_DECLARATION");
			
		КонецЕсли;
	КонецЕсли;
	
	Чтен.ЗаписатьИмяСвойства("primary_document_date");
	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПервичногоДокумента,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
	
	
	Чтен.ЗаписатьИмяСвойства("primary_document_number");
	Чтен.ЗаписатьЗначение(Объект.НомерПервичногоДокумента);
	
	Чтен.ЗаписатьИмяСвойства("primary_document_type");
		Чтен.ЗаписатьЗначение(xmlString(Объект.ВидПервичногоДокумента));
		
	Чтен.ЗаписатьИмяСвойства("products_list");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		Чтен.ЗаписатьИмяСвойства("tnved_code");
		Чтен.ЗаписатьЗначение(НСТР.КодТНВЭД.Код);
		
		Если ЗначениеЗаполнено(НСтр.ДекларацияИлиСертификатСоответствия) тогда
			Чтен.ЗаписатьИмяСвойства("certificate_type");
			
			Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
				Чтен.ЗаписатьЗначение("CONFORMITY_CERTIFICATE");
			Иначе
				Чтен.ЗаписатьЗначение("CONFORMITY_DECLARATION");
			КонецЕсли;
			Чтен.ЗаписатьИмяСвойства("certificate_number");
			Чтен.ЗаписатьЗначение(НСтр.ДекларацияИлиСертификатСоответствия.Наименование);
			Чтен.ЗаписатьИмяСвойства("certificate_date");
			Чтен.ЗаписатьЗначение(Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
			//Чтен.ЗаписатьКонецОбъекта();;

		КонецЕсли;
		//Чтен.ЗаписатьИмяСвойства("cost");
		//чтен.ЗаписатьЗначение(НСтр.Цена);
		//Чтен.ЗаписатьИмяСвойства("vat_value");
		//чтен.ЗаписатьЗначение(НСтр.суммаНДС);
		
		Если СтрДлина(Стр.cis)<19 Тогда
			Чтен.ЗаписатьИмяСвойства("kitu");
		Иначе
			Чтен.ЗаписатьИмяСвойства("ki");
		КонецЕсли;
		Чтен.ЗаписатьЗначение(Стр.cis);
		Чтен.ЗаписатьКонецОбъекта();;
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	Возврат Текст;
	
КонецФункции


&НаКлиенте
Процедура ОтправитьЗаявку(Команда,УжеОтправили=Ложь) Экспорт
	Если Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован") 
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан") Тогда
		
		Возврат
	КонецЕсли;
	
	ЭтаФорма.Записать();
	
	//Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.МаркировкаОстатков") ТОгда
	//	ОтправитьМаркировкуОстатков();
	//	Возврат;
	//Конецесли;

	
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	Этаформа.Записать();
	
	Если        Thumbprint_1.РасчетОстатков Тогда
		Подсчитать(Команда);
	КонецЕсли;
	
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
	
		СформироватьФайлДляОтправки=СформироватьXmlФайлИмпорт();
		
		
		
		Подписанный="";
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
		
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

				
		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
		
		//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//Подписанный,КодировкаТекста.UTF8,Ложь));
		
					Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
				Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
				 Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				
		Тело="{
		|""product_document"":"""+Добав+""",
		|""document_format"": ""MANUAL"",";
		
			Тело=Тело+"
			|""type"":""LK_REMARK"",";
			
		Тело=Тело+"
		|""signature"":"""+Подписанный+"""}";
		
		      //ЗапишемВРегистр(Тело);
		
	Если ОбработкаWEBНаСервере Тогда
		Если НЕ ЗагрузканаСервереОтправитьЗаявку(Thumbprint_1,СРегистра,УжеОтправили,Тело) Тогда
				Если УжеОтправили=Истина Тогда
				//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОтправитьЗаявку(Команда,Истина)			
		КонецЕсли
		
		КонецЕсли;
		
		
	Иначе
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
 			что=Thumbprint_1.что;

			
			//Если	 Thumbprint_1.НаименованиеСтенда="Обувь" Тогда
			//	HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg=shoes");
			//Иначе
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg="+Что);
				
			//КонецЕсли;
		
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		
		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Ответ(Текст1);
		КонецЕсли;
			
		
	
	
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
		ИЛИ Ответ.КодСостояния=201 
		Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			Объект._Order_ID=Текст1;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОтправитьЗаявку(Команда,Истина)			
			КонецЕсли
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	   КонецЕсли;
	ЭтаФорма.Записать();
	
КонецПроцедуры


Функция НеПрошлаПроверкаВвод(Файл_1) Экспорт
	//	Возврат Ложь;
	КаталогВременногоФайла=КаталогВременныхФайлов()+"new_maket_V21\";
	СоздатьКаталог(КаталогВременногоФайла);
		
	//Файл=ПолучитьИмяВременногоФайла("xml");
	Файл=ПолучитьИмяВременногоФайла("xml");
	Файл=СтрЗаменить(Файл,КаталогВременныхФайлов(),КаталогВременногоФайла);
	
	
	Файл_2=Новый ТекстовыйДокумент;
	Файл_2.ДобавитьСтроку(Файл_1);
	Файл_2.Записать(Файл,КодировкаТекста.UTF8);
	
	//ИмяВремен=ПолучитьИмяВременногоФайла("xsd");
	//МакетXDTO.Записать(ИмяВремен,КодировкаТекста.ANSI);
	//dictionary_v20=ПолучитьИмяВременногоФайла("xsd");
	//dictionary_v20=КаталогВременногоФайла+"dictionary_v21.xsd";
	
	dictionary_v20=ПолучитьИмяВременногоФайла("xsd");
	dictionary_v20=СтрЗаменить(dictionary_v20,КаталогВременныхФайлов(),КаталогВременногоФайла);
	
	
	Текст=Документы.ВводВОборот_ХамелеонЦРПТ.ПолучитьМакет("ВводВОборот");
	Текст.Записать(dictionary_v20,КодировкаТекста.UTF8);
	
	
	
	XMLDoc = New COMObject("Msxml2.DOMDocument.6.0");
    XMLDoc.Async = false;
    XMLDoc.ValidateOnParse = true;
    SchemaCache = New COMObject("Msxml2.XMLSchemaCache.6.0");
	SchemaCache.Add("",dictionary_v20);
	
	XMLDoc.Schemas = SchemaCache;
    XMLDoc.SetProperty("MultipleErrorMessages", true);
    XMLDoc.Load(Файл);
    ErrObj = XMLDoc.ParseError;
	Ошибка="";
    If ErrObj.ErrorCode <> 0 Then
        For Each ErrItem In ErrObj.AllErrors Do 
            //Message("Ошибка : " + ErrItem.Reason + " " + ErrItem.SrcText);
			Ошибка=Ошибка+"В строке № "+Erritem.line+" в колонке № "++Erritem.linepos+" ошибка: "+ErrItem.Reason+" "+ErrItem.SrcText+Символы.ПС+Символы.ПС;
		EndDo;
//		УдалитьФайлы(ИмяВремен);
		Сообщить(Ошибка);
		Возврат Истина;
    EndIf;
	УдалитьФайлы(Файл);
	УдалитьФайлы(dictionary_v20);
	
	Возврат Ложь;
КонецФункции

Функция НеПрошлаПроверкаИмпорт(Файл_1) Экспорт
	//	Возврат Ложь;
	КаталогВременногоФайла=КаталогВременныхФайлов()+"new_maket_V21\";
	СоздатьКаталог(КаталогВременногоФайла);
		
	//Файл=ПолучитьИмяВременногоФайла("xml");
	Файл=ПолучитьИмяВременногоФайла("xml");
	Файл=СтрЗаменить(Файл,КаталогВременныхФайлов(),КаталогВременногоФайла);
	
	
	Файл_2=Новый ТекстовыйДокумент;
	Файл_2.ДобавитьСтроку(Файл_1);
	Файл_2.Записать(Файл,КодировкаТекста.UTF8);
	
	//ИмяВремен=ПолучитьИмяВременногоФайла("xsd");
	//МакетXDTO.Записать(ИмяВремен,КодировкаТекста.ANSI);
	//dictionary_v20=ПолучитьИмяВременногоФайла("xsd");
	//dictionary_v20=КаталогВременногоФайла+"dictionary_v21.xsd";
	
	dictionary_v20=ПолучитьИмяВременногоФайла("xsd");
	dictionary_v20=СтрЗаменить(dictionary_v20,КаталогВременныхФайлов(),КаталогВременногоФайла);
	
	
	Текст=Документы.ВводВОборот_ХамелеонЦРПТ.ПолучитьМакет("Импорт");
	Текст.Записать(dictionary_v20,КодировкаТекста.UTF8);
	
	
	
	XMLDoc = New COMObject("Msxml2.DOMDocument.6.0");
    XMLDoc.Async = false;
    XMLDoc.ValidateOnParse = true;
    SchemaCache = New COMObject("Msxml2.XMLSchemaCache.6.0");
	SchemaCache.Add("",dictionary_v20);
	
	XMLDoc.Schemas = SchemaCache;
    XMLDoc.SetProperty("MultipleErrorMessages", true);
    XMLDoc.Load(Файл);
    ErrObj = XMLDoc.ParseError;
	Ошибка="";
    If ErrObj.ErrorCode <> 0 Then
        For Each ErrItem In ErrObj.AllErrors Do 
            //Message("Ошибка : " + ErrItem.Reason + " " + ErrItem.SrcText);
			Ошибка=Ошибка+"В строке № "+Erritem.line+" в колонке № "++Erritem.linepos+" ошибка: "+ErrItem.Reason+" "+ErrItem.SrcText+Символы.ПС+Символы.ПС;
		EndDo;
//		УдалитьФайлы(ИмяВремен);
		Сообщить(Ошибка);
		Возврат Истина;
    EndIf;
	УдалитьФайлы(Файл);
	УдалитьФайлы(dictionary_v20);
	
	Возврат Ложь;
КонецФункции

Функция СформироватьXmlФайлИмпорт()
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("participant");
	Чтен.ЗаписатьЗначение(Объект.Организация.Наименование);
	
	Чтен.ЗаписатьИмяСвойства("participant_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	
	
	Чтен.ЗаписатьИмяСвойства("products");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
			Чтен.ЗаписатьНачалоОбъекта();
			
			Если ЗначениеЗаполнено(Стр.Сертификат) Тогда
		Чтен.ЗаписатьИмяСвойства("certificate_document");
		Если Стр.Сертификат.ЭтоСертификат Тогда
			Чтен.ЗаписатьЗначение("CONFORMITY_CERT");
		Иначе
			Чтен.ЗаписатьЗначение("CONFORMITY_DECLAR");
		КонецЕсли;
		Чтен.ЗаписатьИмяСвойства("certificate_document_number");
		Чтен.ЗаписатьЗначение(Стр.Сертификат.Наименование);
		Чтен.ЗаписатьИмяСвойства("certificate_document_date");
		Чтен.ЗаписатьЗначение(Формат(Стр.Сертификат.ДатаНачалаДействия,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
		КонецЕсли;
		
		Чтен.ЗаписатьИмяСвойства("last_uin");
		Чтен.ЗаписатьЗначение(Стр.cis);
		
		Если ЗначениеЗаполнено(Стр.НовыйКМ) Тогда
			Чтен.ЗаписатьИмяСвойства("new_uin");
			Чтен.ЗаписатьЗначение(Стр.НовыйКМ);
		КонецЕсли;
		
		
		Если Объект.ТипДокумента=Перечисления.ТипДокументаПеремаркировки_ХамелеонЦРПТ.REMOTE_SALE_RETURN
			ИЛИ Объект.ТипДокумента=Перечисления.ТипДокументаПеремаркировки_ХамелеонЦРПТ.RETAIL_RETURN Тогда
		
		Если 
			Объект.ТипДокумента<>Перечисления.ТипДокументаПеремаркировки_ХамелеонЦРПТ.REMOTE_SALE_RETURN 
			ИЛИ 
			Объект.ТоварОплачен=Истина 
			Тогда
		
			Если ЗначениеЗаполнено(Объект.ВидПервичногоДокумента) Тогда
				Чтен.ЗаписатьИмяСвойства("primary_document_type");
				Чтен.ЗаписатьЗначение(xmlString(Объект.ВидПервичногоДокумента));
				
			Конецесли;
			Если ЗначениеЗаполнено(Объект.НаименованиеПервичногоДокумента)
				И Объект.ВидПервичногоДокумента=Перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ.OTHER Тогда
				Чтен.ЗаписатьИмяСвойства("primary_document_custom_name");
				Чтен.ЗаписатьЗначение(xmlString(Объект.НаименованиеПервичногоДокумента));
				
			Конецесли;
			
			Если ЗначениеЗаполнено(Объект.ДатаПервичногоДокумента) Тогда
				Чтен.ЗаписатьИмяСвойства("primary_document_date");
				Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПервичногоДокумента,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
				
			Конецесли;
			Если ЗначениеЗаполнено(Объект.НомерПервичногоДокумента) Тогда
				Чтен.ЗаписатьИмяСвойства("primary_document_number");
				Чтен.ЗаписатьЗначение(Объект.НомерПервичногоДокумента);
				
			Конецесли;
		Конецесли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.КодТНВЭД) Тогда
			Чтен.ЗаписатьИмяСвойства("tnved_10");
			Чтен.ЗаписатьЗначение(Стр.КодТНВЭД.Код);
			
		Конецесли;
		Если Объект.ТипДокумента=Перечисления.ТипДокументаПеремаркировки_ХамелеонЦРПТ.REMOTE_SALE_RETURN 
			ИЛИ Объект.ТипДокумента=Перечисления.ТипДокументаПеремаркировки_ХамелеонЦРПТ.RETAIL_RETURN
			Тогда
			
			Чтен.ЗаписатьИмяСвойства("paid");
			Чтен.ЗаписатьЗначение(Объект.ТоварОплачен);
		КонецЕсли;
		
		Чтен.ЗаписатьИмяСвойства("remarking_cause");
		Чтен.ЗаписатьЗначение(xmlString(Объект.ТипДокумента));
		
		Чтен.ЗаписатьИмяСвойства("remarking_date");
		Чтен.ЗаписатьЗначение(Формат(Объект.Дата,"ДФ=""гггг-ММ-дд"""));
		
		Если ЗначениеЗаполнено(Стр.СтранаПроизводства) тогда
			Чтен.ЗаписатьИмяСвойства("production_country");
			Чтен.ЗаписатьЗначение(Стр.СтранаПроизводства.Код);
		КонецЕсли;	
		
		
		Если ЗначениеЗаполнено(Стр.Цвет) тогда
			Чтен.ЗаписатьИмяСвойства("color");
			Чтен.ЗаписатьЗначение(Стр.Цвет);
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Стр.размер) тогда
			Чтен.ЗаписатьИмяСвойства("product_size");
			Чтен.ЗаписатьЗначение(Стр.Размер);
		КонецЕсли;	
		
		Чтен.ЗаписатьКонецОбъекта();;
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	
	Чтен.ЗаписатьИмяСвойства("remarking_cause");
	Чтен.ЗаписатьЗначение(xmlString(Объект.ТипДокумента));
	
	Чтен.ЗаписатьИмяСвойства("remarking_date");
	Чтен.ЗаписатьЗначение(Формат(Объект.Дата,"ДФ=""гггг-ММ-дд"""));
	
	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;

	Возврат Текст;
//		Текст="<Vvod action_id=""05"">
//	|<DocType>Promotion_Inform_Selfmade</DocType>  
//	|<Participant_INN>"+Объект.Организация.ИНН+"</Participant_INN>  
//	|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//	|<Producer_INN>"+Объект.Организация.ИНН+"</Producer_INN>  
//	|<INNOwner>"+Объект.Организация.ИНН+"</INNOwner>  
//	|<Production_Order>2</Production_Order>  
//	|<Marking_Type>1</Marking_Type>  
////	|<Declaration_Date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</Declaration_Date>  
////	|<Declaration_Number>"+Объект.НомерДекларацииТовара+"</Declaration_Number>  
////	|<Customs_Code>"+Объект.КодТаможенногоОргана+"</Customs_Code>  
////	|<Decision_Code>"+Объект.КодПринятогоРешения.Код+"</Decision_Code>  
//	|<Products_List>";
//	Для Каждого Стр Из Объект.СерийныеНомера Цикл
//		
//		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
//		НСтр=НСтр[0];
//		
//	    Текст=Текст+"
//		|<PRODUCT>  
//		|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//		|<UIT>"+Стр.cis+"</UIT>
//		|<CodeTNVED>"+НСТР.КодТНВЭД.Код+"</CodeTNVED>
//		|<MarkingType>"+"3"+"</MarkingType>";
//		
//		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
//			Текст=Текст+"
//			|<Certificate_Doc>1</Certificate_Doc>";
//		Иначе
//			Текст=Текст+"
//			|<Certificate_Doc>2</Certificate_Doc>"
//		КонецЕсли;
//		
//		Текст=Текст+"
//		|<Certificate_Doc_Number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</Certificate_Doc_Number>
//		|<Certificate_Doc_Date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</Certificate_Doc_Date>
//		|</PRODUCT> ";
//		
//		
//		
//	КонецЦикла;
//	    Текст=Текст+"
//		|</Products_List>
//		|</Vvod>
//		|";
		

	
	Текст="<vvod_import action_id=""5.1"" version=""3"">
	//|<DocType>GOODSIMPORT</DocType>  
	|<trade_participant_inn>"+Объект.Организация.ИНН+"</trade_participant_inn>  
	//|<Marking_Type>2</Marking_Type>  
	|<declaration_date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</declaration_date>  
	|<declaration_number>"+Объект.НомерДекларацииТовара+"</declaration_number>  
	|<customs_code>"+Объект.КодТаможенногоОргана+"</customs_code>  
	|<decision_code>"+Объект.КодПринятогоРешения.Код+"</decision_code>  
	|<products_list>";
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		
	    Текст=Текст+"
		|<product>  
		|<kit>"+Стр.cis+"</kit>";
//		Если ЗначениеЗАполнено(Стр.НомерКороба) Тогда
//		    Текст=Текст+"
//			|<UITU>"+Стр.НомерКороба+"</UITU>";
//		КонецЕсли;
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERTIFICATE</certificate_type>";
		Иначе
			Текст=Текст+"
			|<Certificate_Doc>CONFORMITY_CERTIFICATE</Certificate_Doc>"
		КонецЕсли;
		
		Текст=Текст+"
		|<certificate_number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</certificate_number>
		|<certificate_date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""дд.ММ.гггг""")+"</certificate_date>
		|<tnved_code>"+НСТР.КодТНВЭД.Код+"</tnved_code>";
		
		
		Текст=Текст+"
		|</product> ";
		
		
		
	КонецЦикла;
	    Текст=Текст+"
		|</products_list>
		|</vvod_import>
		|";
//		
				
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
Возврат Текст 	
КонецФункции

Функция СформироватьXmlФайлостатков()
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
//	Чтен.ЗаписатьИмяСвойства("document_description");
//	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("trade_participant_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	
	Чтен.ЗаписатьИмяСвойства("products_list");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		
		Если ЗначениеЗаполнено(НСтр.ДекларацияИлиСертификатСоответствия) тогда
			Чтен.ЗаписатьИмяСвойства("certificate_type");
			
			Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
				Чтен.ЗаписатьЗначение("CONFORMITY_CERTIFICATE");
			Иначе
				Чтен.ЗаписатьЗначение("CONFORMITY_DECLARATION");
			КонецЕсли;
			Чтен.ЗаписатьИмяСвойства("certificate_number");
			Чтен.ЗаписатьЗначение(НСтр.ДекларацияИлиСертификатСоответствия.Наименование);
			Чтен.ЗаписатьИмяСвойства("certificate_date");
			Чтен.ЗаписатьЗначение(Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
			//Чтен.ЗаписатьКонецОбъекта();;

		КонецЕсли;
		
		Если СтрДлина(Стр.cis)<19 Тогда
			Чтен.ЗаписатьИмяСвойства("kitu");
		Иначе
			Чтен.ЗаписатьИмяСвойства("ki");
		КонецЕсли;
		Чтен.ЗаписатьЗначение(Стр.cis);
		Чтен.ЗаписатьКонецОбъекта();;
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	Возврат Текст;
	
	
//		Текст="<Vvod action_id=""05"">
//	|<DocType>Promotion_Inform_Selfmade</DocType>  
//	|<Participant_INN>"+Объект.Организация.ИНН+"</Participant_INN>  
//	|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//	|<Producer_INN>"+Объект.Организация.ИНН+"</Producer_INN>  
//	|<INNOwner>"+Объект.Организация.ИНН+"</INNOwner>  
//	|<Production_Order>2</Production_Order>  
//	|<Marking_Type>1</Marking_Type>  
////	|<Declaration_Date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</Declaration_Date>  
////	|<Declaration_Number>"+Объект.НомерДекларацииТовара+"</Declaration_Number>  
////	|<Customs_Code>"+Объект.КодТаможенногоОргана+"</Customs_Code>  
////	|<Decision_Code>"+Объект.КодПринятогоРешения.Код+"</Decision_Code>  
//	|<Products_List>";
//	Для Каждого Стр Из Объект.СерийныеНомера Цикл
//		
//		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
//		НСтр=НСтр[0];
//		
//	    Текст=Текст+"
//		|<PRODUCT>  
//		|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//		|<UIT>"+Стр.cis+"</UIT>
//		|<CodeTNVED>"+НСТР.КодТНВЭД.Код+"</CodeTNVED>
//		|<MarkingType>"+"3"+"</MarkingType>";
//		
//		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
//			Текст=Текст+"
//			|<Certificate_Doc>1</Certificate_Doc>";
//		Иначе
//			Текст=Текст+"
//			|<Certificate_Doc>2</Certificate_Doc>"
//		КонецЕсли;
//		
//		Текст=Текст+"
//		|<Certificate_Doc_Number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</Certificate_Doc_Number>
//		|<Certificate_Doc_Date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</Certificate_Doc_Date>
//		|</PRODUCT> ";
//		
//		
//		
//	КонецЦикла;
//	    Текст=Текст+"
//		|</Products_List>
//		|</Vvod>
//		|";
		

	
	Текст="<vvod action_id=""05""  version=""5"">
	|<trade_participant_inn>"+Объект.Организация.ИНН+"</trade_participant_inn>  
	|<producer_inn>"+Объект.Организация.ИНН+"</producer_inn>  
	|<owner_inn>"+Объект.Организация.ИНН+"</owner_inn>  
	|<product_date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_date>  
	|<production_order>"+"OWN_PRODUCTION"+"</production_order> ";
	
//	    Текст=Текст+"
//		|<MarkingType>"+"1 "+"</MarkingType>  ";
	    Текст=Текст+"
	|<products_list>";
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		
	    Текст=Текст+"
		|<product>  
		|<kit>"+Стр.cis+"</kit>
		|<product_Date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_Date>";
//		Если ЗначениеЗАполнено(Стр.НомерКороба) Тогда
//		    Текст=Текст+"
//			|<UITU>"+Стр.НомерКороба+"</UITU>";
//		КонецЕсли;
		   Текст=Текст+"
		|<tnved_code>"+НСТР.КодТНВЭД.Код+"</tnved_code>";
		
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>";
		Иначе
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>"
		КонецЕсли;
		
		Текст=Текст+"
		|<certificate_number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</certificate_number>
		|<certificate_date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</certificate_date>";
		
		
		Текст=Текст+"
		|</product> ";
		
		
		
	КонецЦикла;
	    Текст=Текст+"
		|</products_list>
		|</vvod>
		|";
//		
				
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
Возврат Текст 	
КонецФункции

Функция СформироватьТС()
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("documentType");
	Чтен.ЗаписатьЗначение("CROSSBORDER");
	Чтен.ЗаписатьИмяСвойства("trade_participant_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	
	
	
	Чтен.ЗаписатьИмяСвойства("exporter_name");
	Чтен.ЗаписатьЗначение(Объект.НаименованиеЭкспортера);
	
	Чтен.ЗаписатьИмяСвойства("country_oksm");
	Чтен.ЗаписатьЗначение(Объект.СтранаТС.Код);
	Чтен.ЗаписатьИмяСвойства("primary_document_number");
	Чтен.ЗаписатьЗначение(Объект.НомерПервичногоДокумента);
	
	Чтен.ЗаписатьИмяСвойства("sender_tax_number");
	Чтен.ЗаписатьЗначение(Объект.НомерНалогоплательщикаОтправителя);
	Чтен.ЗаписатьИмяСвойства("import_date");
	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаИмпорта,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
	Чтен.ЗаписатьИмяСвойства("primary_document_date");
	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПервичногоДокумента,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
	
	Чтен.ЗаписатьИмяСвойства("products_list");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		Чтен.ЗаписатьИмяСвойства("tnved_code");
		Чтен.ЗаписатьЗначение(НСТР.КодТНВЭД.Код);
		
		Если ЗначениеЗаполнено(НСтр.ДекларацияИлиСертификатСоответствия) тогда
			Чтен.ЗаписатьИмяСвойства("certificate_type");
			
			Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
				Чтен.ЗаписатьЗначение("CONFORMITY_CERTIFICATE");
			Иначе
				Чтен.ЗаписатьЗначение("CONFORMITY_DECLARATION");
			КонецЕсли;
			Чтен.ЗаписатьИмяСвойства("certificate_number");
			Чтен.ЗаписатьЗначение(НСтр.ДекларацияИлиСертификатСоответствия.Наименование);
			Чтен.ЗаписатьИмяСвойства("certificate_date");
			Чтен.ЗаписатьЗначение(Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
			//Чтен.ЗаписатьКонецОбъекта();;

		КонецЕсли;
		Чтен.ЗаписатьИмяСвойства("cost");
		чтен.ЗаписатьЗначение(НСтр.Цена);
		Чтен.ЗаписатьИмяСвойства("vat_value");
		чтен.ЗаписатьЗначение(НСтр.суммаНДС);
		
		Если СтрДлина(Стр.cis)<19 Тогда
			Чтен.ЗаписатьИмяСвойства("kitu");
		Иначе
			Чтен.ЗаписатьИмяСвойства("ki");
		КонецЕсли;
		Чтен.ЗаписатьЗначение(Стр.cis);
		Чтен.ЗаписатьКонецОбъекта();;
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	Возврат Текст;
	
	
//		Текст="<Vvod action_id=""05"">
//	|<DocType>Promotion_Inform_Selfmade</DocType>  
//	|<Participant_INN>"+Объект.Организация.ИНН+"</Participant_INN>  
//	|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//	|<Producer_INN>"+Объект.Организация.ИНН+"</Producer_INN>  
//	|<INNOwner>"+Объект.Организация.ИНН+"</INNOwner>  
//	|<Production_Order>2</Production_Order>  
//	|<Marking_Type>1</Marking_Type>  
////	|<Declaration_Date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</Declaration_Date>  
////	|<Declaration_Number>"+Объект.НомерДекларацииТовара+"</Declaration_Number>  
////	|<Customs_Code>"+Объект.КодТаможенногоОргана+"</Customs_Code>  
////	|<Decision_Code>"+Объект.КодПринятогоРешения.Код+"</Decision_Code>  
//	|<Products_List>";
//	Для Каждого Стр Из Объект.СерийныеНомера Цикл
//		
//		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
//		НСтр=НСтр[0];
//		
//	    Текст=Текст+"
//		|<PRODUCT>  
//		|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//		|<UIT>"+Стр.cis+"</UIT>
//		|<CodeTNVED>"+НСТР.КодТНВЭД.Код+"</CodeTNVED>
//		|<MarkingType>"+"3"+"</MarkingType>";
//		
//		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
//			Текст=Текст+"
//			|<Certificate_Doc>1</Certificate_Doc>";
//		Иначе
//			Текст=Текст+"
//			|<Certificate_Doc>2</Certificate_Doc>"
//		КонецЕсли;
//		
//		Текст=Текст+"
//		|<Certificate_Doc_Number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</Certificate_Doc_Number>
//		|<Certificate_Doc_Date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</Certificate_Doc_Date>
//		|</PRODUCT> ";
//		
//		
//		
//	КонецЦикла;
//	    Текст=Текст+"
//		|</Products_List>
//		|</Vvod>
//		|";
		

	
	Текст="<vvod action_id=""05""  version=""5"">
	|<trade_participant_inn>"+Объект.Организация.ИНН+"</trade_participant_inn>  
	|<producer_inn>"+Объект.Организация.ИНН+"</producer_inn>  
	|<owner_inn>"+Объект.Организация.ИНН+"</owner_inn>  
	|<product_date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_date>  
	|<production_order>"+"OWN_PRODUCTION"+"</production_order> ";
	
//	    Текст=Текст+"
//		|<MarkingType>"+"1 "+"</MarkingType>  ";
	    Текст=Текст+"
	|<products_list>";
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		
	    Текст=Текст+"
		|<product>  
		|<kit>"+Стр.cis+"</kit>
		|<product_Date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_Date>";
//		Если ЗначениеЗАполнено(Стр.НомерКороба) Тогда
//		    Текст=Текст+"
//			|<UITU>"+Стр.НомерКороба+"</UITU>";
//		КонецЕсли;
		   Текст=Текст+"
		|<tnved_code>"+НСТР.КодТНВЭД.Код+"</tnved_code>";
		
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>";
		Иначе
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>"
		КонецЕсли;
		
		Текст=Текст+"
		|<certificate_number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</certificate_number>
		|<certificate_date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</certificate_date>";
		
		
		Текст=Текст+"
		|</product> ";
		
		
		
	КонецЦикла;
	    Текст=Текст+"
		|</products_list>
		|</vvod>
		|";
//		
				
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
Возврат Текст 	
КонецФункции



Функция СформироватьXmlФайлВвод()
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("document_description");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("participant_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	Чтен.ЗаписатьИмяСвойства("production_date");
	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
	Чтен.ЗаписатьИмяСвойства("producer_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	Чтен.ЗаписатьИмяСвойства("owner_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	
	Чтен.ЗаписатьИмяСвойства("production_type");
	Чтен.ЗаписатьЗначение("OWN_PRODUCTION");
	
	Чтен.ЗаписатьКонецОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("doc_type");
	Чтен.ЗаписатьЗначение("Promotion_Inform_Selfmade");
	Чтен.ЗаписатьИмяСвойства("products");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		Чтен.ЗаписатьИмяСвойства("production_date");
		Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
		
		Если СтрДлина(Стр.Cis)<=18 Тогда
			Чтен.ЗаписатьИмяСвойства("uitu_code");
		Иначе
			Чтен.ЗаписатьИмяСвойства("uit_code");
		КонецЕсли;
		Чтен.ЗаписатьЗначение(Стр.cis);
		Чтен.ЗаписатьИмяСвойства("tnved_code");
		Чтен.ЗаписатьЗначение(НСТР.КодТНВЭД.Код);
		Чтен.ЗаписатьИмяСвойства("producer_inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		Чтен.ЗаписатьИмяСвойства("owner_inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		Чтен.ЗаписатьИмяСвойства("certificate_document");
		
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Чтен.ЗаписатьЗначение("CONFORMITY_CERT");
		Иначе
			Чтен.ЗаписатьЗначение("CONFORMITY_DECLAR");
		КонецЕсли;
		Чтен.ЗаписатьИмяСвойства("certificate_document_number");
		Чтен.ЗаписатьЗначение(НСтр.ДекларацияИлиСертификатСоответствия.Наименование);
		Чтен.ЗаписатьИмяСвойства("certificate_document_date");
		Чтен.ЗаписатьЗначение(Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
		Чтен.ЗаписатьКонецОбъекта();;
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	Возврат Текст;
	
	
//		Текст="<Vvod action_id=""05"">
//	|<DocType>Promotion_Inform_Selfmade</DocType>  
//	|<Participant_INN>"+Объект.Организация.ИНН+"</Participant_INN>  
//	|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//	|<Producer_INN>"+Объект.Организация.ИНН+"</Producer_INN>  
//	|<INNOwner>"+Объект.Организация.ИНН+"</INNOwner>  
//	|<Production_Order>2</Production_Order>  
//	|<Marking_Type>1</Marking_Type>  
////	|<Declaration_Date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</Declaration_Date>  
////	|<Declaration_Number>"+Объект.НомерДекларацииТовара+"</Declaration_Number>  
////	|<Customs_Code>"+Объект.КодТаможенногоОргана+"</Customs_Code>  
////	|<Decision_Code>"+Объект.КодПринятогоРешения.Код+"</Decision_Code>  
//	|<Products_List>";
//	Для Каждого Стр Из Объект.СерийныеНомера Цикл
//		
//		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
//		НСтр=НСтр[0];
//		
//	    Текст=Текст+"
//		|<PRODUCT>  
//		|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//		|<UIT>"+Стр.cis+"</UIT>
//		|<CodeTNVED>"+НСТР.КодТНВЭД.Код+"</CodeTNVED>
//		|<MarkingType>"+"3"+"</MarkingType>";
//		
//		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
//			Текст=Текст+"
//			|<Certificate_Doc>1</Certificate_Doc>";
//		Иначе
//			Текст=Текст+"
//			|<Certificate_Doc>2</Certificate_Doc>"
//		КонецЕсли;
//		
//		Текст=Текст+"
//		|<Certificate_Doc_Number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</Certificate_Doc_Number>
//		|<Certificate_Doc_Date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</Certificate_Doc_Date>
//		|</PRODUCT> ";
//		
//		
//		
//	КонецЦикла;
//	    Текст=Текст+"
//		|</Products_List>
//		|</Vvod>
//		|";
		

	
	Текст="<vvod action_id=""05""  version=""5"">
	|<trade_participant_inn>"+Объект.Организация.ИНН+"</trade_participant_inn>  
	|<producer_inn>"+Объект.Организация.ИНН+"</producer_inn>  
	|<owner_inn>"+Объект.Организация.ИНН+"</owner_inn>  
	|<product_date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_date>  
	|<production_order>"+"OWN_PRODUCTION"+"</production_order> ";
	
//	    Текст=Текст+"
//		|<MarkingType>"+"1 "+"</MarkingType>  ";
	    Текст=Текст+"
	|<products_list>";
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		
	    Текст=Текст+"
		|<product>  
		|<kit>"+Стр.cis+"</kit>
		|<product_Date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_Date>";
//		Если ЗначениеЗАполнено(Стр.НомерКороба) Тогда
//		    Текст=Текст+"
//			|<UITU>"+Стр.НомерКороба+"</UITU>";
//		КонецЕсли;
		   Текст=Текст+"
		|<tnved_code>"+НСТР.КодТНВЭД.Код+"</tnved_code>";
		
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>";
		Иначе
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>"
		КонецЕсли;
		
		Текст=Текст+"
		|<certificate_number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</certificate_number>
		|<certificate_date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</certificate_date>";
		
		
		Текст=Текст+"
		|</product> ";
		
		
		
	КонецЦикла;
	    Текст=Текст+"
		|</products_list>
		|</vvod>
		|";
//		
				
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
Возврат Текст 	
КонецФункции

&НаКлиенте
Процедура ТоварыКодТНВЭДПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ТекД=Элементы.Товары.ТекущиеДанные;
	ЗаписатьТНВЭД(ТекД.GTIN,ТекД.КодТНВЭД)
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьТНВЭД(GTIN,КодТНВЭД)
	ТекН=                   GTIN.ПолучитьОбъект();
	ТекН.КодТНВЭД=КодТНВЭД;
	ТекН.Записать()
Конецпроцедуры

&НаСервере
Процедура СчитатьОтправкуНаСервере()
	// Вставить содержимое обработчика.
	Хр=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.Получить(Новый Структура("Документ,Вид",Объект.Ссылка,"Отправлен заказ")).Файл;
	Если Хр<>Неопределено тогда
		Отправка=Хр.Получить();
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура СчитатьОтправку(Команда)
	СчитатьОтправкуНаСервере();
КонецПроцедуры

&НаСервере
Процедура СчитатьОтветНаСервере()
	// Вставить содержимое обработчика.
	Хр=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.Получить(Новый Структура("Документ,Вид",Объект.Ссылка,"Получили ответ")).Файл;
	Если Хр<>Неопределено тогда
		ОтветОтЦРПТ=Хр.Получить();
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура СчитатьОтвет(Команда)
	СчитатьОтветНаСервере();
КонецПроцедуры


Функция НайтиШаблон(Ш)
	К=Справочники.ШаблоныЭтикетокПриПечатиPDF_ХамелеонЦРПТ.НайтиПоНаименованию(Ш.Наименование);
	Если Не ЗначениеЗаполнено(К) Тогда
		К=1;
	Иначе
		К=К.Код;
	КонецЕсли;
	Возврат К
КонецФункции


Процедура ЗаписатьВрегистрPDF(PDF,Ссылка,orderID,НазваниеФайла)
	
	РегГ=РегистрыСведений.PDFФайлы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегГ.Отбор.Заказ.Установить(Ссылка);
	РегГ.Отбор.Код.Установить(orderID);
	Добав=РегГ.Добавить();
	Добав.Заказ=Ссылка;
	Добав.Код=orderID;
	Добав.НазваниеФайла=НазваниеФайла;
	Добав.ХранилищеФайла=Новый ХранилищеЗначения(PDF,Новый СжатиеДанных(9));
	РегГ.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	// Вставить содержимое обработчика.
	Если 	АвтоСерийные Тогда
		ТоварыСерийныйНомерНачалоВыбора(Элемент, "",Истина,ЛОжь)
		
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	// Вставить содержимое обработчика.
	
	ТекД=Элементы.Товары.ТекущиеДанные;
	НН=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",ТекД.НомерСтрокиСвязи));
	Для Каждого Стр_1 Из НН Цикл
		Объект.СерийныеНомера.Удалить(Стр_1);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЧерновик(Команда,УжеОтправили=Ложь )
	// Вставить содержимое обработчика.
	КонецПроцедуры

Функция ПолучитьФайлыПоДокументу()
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	PDFФайлы_ХамелеонЦРПТ.ХранилищеФайла
		|ИЗ
		|	РегистрСведений.PDFФайлы_ХамелеонЦРПТ КАК PDFФайлы_ХамелеонЦРПТ
		|ГДЕ
		|	PDFФайлы_ХамелеонЦРПТ.Заказ = &Заказ";
	
	Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивФайлов=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		МассивФайлов.Добавить(ВыборкаДетальныеЗаписи.ХранилищеФайла.Получить());
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Возврат 	МассивФайлов
КонецФункции

&НаКлиенте
Процедура ПечатьPDF(Команда)
	// Вставить содержимое обработчика.
	Yjv=0;
	ПолучилиФайл=ПолучитьФайлыПоДокументу();
	Для Каждого Стр Из ПолучилиФайл Цикл
		Если Стр=Неопределено Тогда
			Продолжить;
		КонецЕсли;
				ДвоичныеДанные=Стр;
				
					Каталог = КаталогВременныхФайлов();
	ИмяФайла = Строка(Новый УникальныйИдентификатор) + "2.xml";
	ВремФайл= Каталог+ИмяФайла;

			//	ВремФайл=ПолучитьИмяВременногоФайла(".pdf");
				ДвоичныеДанные.Записать(ВремФайл);
				//Если НаПринтер Тогда
				//	Shell = Новый COMОбъект("Shell.Application");
	    		//	Shell.ShellExecute(ВремФайл, "", "", "print", 0);				
					
					
//				Иначе
				
				Yjv=Yjv+1;
				ОткрытьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаСертификата",Новый Структура("Файл",ВремФайл),,Yjv);
//				КонецЕслИ;
			КонецЦикла;
	
КонецПроцедуры




&НаКлиенте
Процедура ШтрихКодПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ЗаполнитьИнфуПоШтриху();
	ПодключитьОбработчикОЖидания("аа",0.1,Истина);
КонецПроцедуры

&НаКлиенте
Процедура аа() Экспорт
	//Если Элементы.СерийныеНомераТаблица.ТекущиеДанные=Неопределено Тогда
	Если Объект.СерийныеНомера.Количество()>0 Тогда
		Элементы.СерийныеНомераТаблица.ТекущаяСтрока=Объект.СерийныеНомера[Объект.СерийныеНомера.Количество()-1].ПолучитьИдентификатор();
	Конецесли;
	//КонецЕсли;
	ТекД=Элементы.СерийныеНомераТаблица.ТекущиеДанные;
	
	Если ТекД<>Неопределено И ЗначениеЗаполнено(ТекД.cis) И ЗначениеЗАполнено(текД.НовыйКМ) Тогда
		                                             Элементы.СерийныеНомераТаблица.ТекущаяСтрока=Неопределено;
													КонецЕсли;
	ШтрихКод="";
	ЭтаФорма.ТекущийЭлемент=Элементы.ШтрихКод;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИнфуПоШтриху(Стр_1=Неопределено)
	Стр_2=Неопределено;
	Если Элементы.СерийныеНомераТаблица.ТекущиеДанные<>Неопределено
		и ЗначениеЗаполнено(Элементы.СерийныеНомераТаблица.ТекущиеДанные.cis)
		И Не ЗначениеЗаполнено(Элементы.СерийныеНомераТаблица.ТекущиеДанные.НовыйКМ)
		Тогда
		Стр_2=Элементы.СерийныеНомераТаблица.ТекущиеДанные.ПолучитьИдентификатор();
	Иначеесли Стр_1=Истина И
		Элементы.СерийныеНомераТаблица.ТекущиеДанные<>Неопределено
		и НЕ ЗначениеЗаполнено(Элементы.СерийныеНомераТаблица.ТекущиеДанные.cis)
		И ЗначениеЗаполнено(Элементы.СерийныеНомераТаблица.ТекущиеДанные.НовыйКМ)
		
		Тогда
		
		Стр_2=Элементы.СерийныеНомераТаблица.ТекущиеДанные.ПолучитьИдентификатор();
	Иначеесли ЗагрузитьВСтарыеКМ=Истина И
		Элементы.СерийныеНомераТаблица.ТекущиеДанные<>Неопределено
		Тогда
		
		Стр_2=Элементы.СерийныеНомераТаблица.ТекущиеДанные.ПолучитьИдентификатор();
		
	КонецЕсли;
	Если Стр_1=Ложь Тогда
		Стр_2=Элементы.СерийныеНомераТаблица.ТекущиеДанные.ПолучитьИдентификатор();
	КонецЕсли;
	
	ЗаполнитьИнфуПоШтрихуСервере(Стр_1,Стр_2)
КонецПроцедуры

Процедура ЗаполнитьИнфуПоШтрихуСервере(Стр_1=Неопределено,Стр_3)
	
	Если СтрДлина(Штрихкод)=20 Тогда
		Штрихкод=Сред(Штрихкод,3);
	КонецЕсли;
	
	ШтрихКод_1=(ШтрихКод);
	
	//ШтрихКод_1=КодироватьСтроку(ШтрихКод,СпособКодированияСтроки.КодировкаURL);
	//штрихКод=СтрЗаменить(ШтрихКод_1,"%1D","");
	Если НЕ Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак"
		И НЕ Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак"
	Тогда
		ШтрихКод=Сред(ШтрихКод,1,38);
	//штрихКод_1=РаскодироватьСтроку(ШтрихКод,СпособКодированияСтроки.КодировкаURL);
	
			Если Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Фото" Тогда
								ШтрихКод=Сред(ШтрихКод,1,38);
		ИначеЕсли Сред(штрихКод_1,32,3)<>"240" Тогда
								ШтрихКод=Сред(ШтрихКод,1,31);
								//ШтрихКод=Сред(штрихКод_1,1,Найти(штрихКод_1,"%1D")-1);
								//ШтрихКод=РаскодироватьСтроку(ШтрихКод,СпособКодированияСтроки.КодировкаURL);
							Иначе
								
								           ШтрихКод=штрихКод_1;
							
							КонецЕсли;
	КонецЕсли;					
	
	Если Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",ШтрихКод)).Количество()>0 
		ИЛИ Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НовыйКМ",ШтрихКод)).Количество()>0
		Тогда
			Сообщить("CiS "+ШтрихКод+" уже присутствует в документе");
			Возврат;
		КонецЕсли;
	Если Стр_3<>Неопределено Тогда
		Стр_2=Объект.СерийныеНомера.НайтиПоИдентификатору(Стр_3)
	Иначе
		Стр_2=Неопределено
	КонецЕсли;
	 	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Если Стр_1<>Неопределено И Стр_1<>ИСтина 
		Тогда
		стр=Объект.СерийныеНомера.НайтиПоИдентификатору(Стр_1);
//		ШтрихКод=Стр.cis;
	ИначеЕсли Стр_1=Истина Тогда
	 	Если Стр_2<>Неопределено И 
			( не ЗначениеЗАполнено(Стр_2.СерийныйНомер)
			ИЛИ не ЗначениеЗАполнено(Стр_2.НовыйКМ))
			Тогда
			стр=Стр_2;
			Если ЗначениеЗаполнено(Стр_2.НовыйКМ) Тогда
				Если ЗагрузитьВСтарыеКМ=Истина Тогда
					Стр_1="СТАРЫЙ";
				Иначе
					Стр_1=Истина;
				Конецесли;
			Иначе
				Стр_1=Ложь;
				//Стр_1=Истина;
				
			КонецЕсли;
		ИначеЕсли Стр_2<>Неопределено И 
			( не ЗначениеЗАполнено(Стр_2.СерийныйНомер)
			ИЛИ не ЗначениеЗАполнено(Стр_2.НовыйКМ))
			Тогда
			стр=Стр_2;
			Если ЗначениеЗаполнено(Стр_2.НовыйКМ) Тогда
				Стр_1=Истина;
			Иначе
				Стр_1="СТАРЫЙ";
				//Стр_1=Истина;
				
			КонецЕсли;
		//ИначеЕсли ЗагрузитьВСтарыеКМ=Истина
			
			
		Иначе
				Стр_1=Истина;
			
		КонецЕсли;
		
		
		
	КонецЕсли;
	
	Если Стр<>Истина И  Стр_2<>Неопределено 
		И ЗначениеЗаполнено(Стр_2.cis)
		И Стр_1<>"СТАРЫЙ"
		Тогда
		Если Не ЗначениеЗаполнено(Стр_2.НовыйКМ) Тогда
			Стр=Стр_2
		Иначе
			Стр=Неопределено;
			Для Каждого Стр_1111 Из Объект.СерийныеНомера Цикл
				Если Не ЗначениеЗаполнено(Стр_1111.НовыйКМ) тогда
					Стр=Стр_1111;
					Прервать;
				Конецесли;
			Конеццикла;
		Конецесли;
		
	ИначеЕсли Стр_1="СТАРЫЙ" И  Стр_2<>Неопределено 
		И ЗначениеЗаполнено(Стр_2.НовыйКМ)
		Тогда
		Если Не ЗначениеЗаполнено(Стр_2.cis) Тогда
			Стр=Стр_2
		Иначе
			Стр=Неопределено;
			Для Каждого Стр_1111 Из Объект.СерийныеНомера Цикл
				Если Не ЗначениеЗаполнено(Стр_1111.cis)
					тогда
					Стр=Стр_1111;
					Прервать;
				Конецесли;
			Конеццикла;
		Конецесли;
	Конецесли;
	
	//Если Стр_1=Неопределено Тогда
		//КонецЕсли;	
	
	
	
	Если Стр_1=истина Тогда
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.СерийныйНомер
		|ИЗ
		|	РегистрНакопления.ОстаткиКМ_в_Обороте_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки";
	Иначе
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер
		|ИЗ
		|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки";
	
КонецЕсли;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СерийныйНомер", ШтрихКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество()=0 Тогда
				
			
			
			попытка
				Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
				Число(Сред(ШтрихКод,3,14)));;
			Исключение
				Продукция=Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка();
			КонецПопытки;
			Если Стр=Неопределено 
				тогда
				Добав=Объект.СерийныеНомера.Добавить();
			Иначе
				Если Стр_1=Ложь И Не ЗначениеЗаполнено(Стр.НовыйКМ) Тогда
					Добав=Стр;
				ИначеЕсли Стр_1=Ложь  Тогда
					Добав=Объект.СерийныеНомера.Добавить();
				Иначе
					
					Добав=Стр;
				Конецесли;
			КонецЕсли;
				Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
				Добав.НаименованиеТовара=Продукция;
				Если Стр_1="СТАРЫЙ" Тогда
					Добав.cis=ШтрихКод;
				ИначеЕсли Стр_1=Истина Тогда
					Добав.cis=ШтрихКод;
				Иначе
					Добав.НовыйКМ=ШтрихКод;
				КонецЕсли;
				
				Добав.Сертификат=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(Объект.Дата,
					Новый Структура("Продукция",Продукция)).Документ;
				
			//	ППП=Объект.Товары.НайтиСтроки(Новый структура("gtin",Продукция));
			//	Если ППП.Количество()=0 Тогда
			//		Добав_1=Объект.Товары.Добавить();
			//		Добав_1.GTIN=Продукция;
			//		Добав_1.КодТНВЭД=Продукция.КодТНВЭД;
			//Если Продукция.СтранаПроизводства.Альфа2="RU" Тогда
			//	//СтрП="Производство в РФ";
			//		Добав_1.СпособВыпускаТоваров="Производство в РФ";
			//Иначе
			//	//СтрП="Ввезен в РФ";
			//		Добав_1.СпособВыпускаТоваров="Ввезен в РФ";
			//	
			//КонецЕсли;
			//		Добав_1.НомерСтрокиСвязи=Добав_1.ПолучитьИдентификатор();
			//		Добав_1.КоличествоКМ=1;
			//		Добав_1.ДекларацияИлиСертификатСоответствия=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(Объект.Дата,
			//		Новый Структура("Продукция",Продукция)).Документ;
			//	Иначе
			//		Добав_1=ППП[0];
			//		Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
			//		
			//	КонецЕсли;
			//	Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
				
			
	Иначе
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
			Если ВыборкаДетальныеЗаписи.СерийныйНомер<>ШтрихКод Тогда
				Продолжить;
			КонецЕсли;
		
			
			Продукция=ВыборкаДетальныеЗаписи.Продукция;
			Если Стр=Неопределено 
				тогда
				Добав=Объект.СерийныеНомера.Добавить();
			Иначе
				Если Стр_1=Ложь И Не ЗначениеЗаполнено(Стр.НовыйКМ) Тогда
					Добав=Стр;
				ИначеЕсли Стр_1=Ложь  Тогда
					Добав=Объект.СерийныеНомера.Добавить();
				Иначе
					
					Добав=Стр;
				Конецесли;
			КонецЕсли;

			//Если Стр=Неопределено тогда
			//	Добав=Объект.СерийныеНомера.Добавить();
			//Иначе
			//	Добав=Стр;
			//КонецЕсли;
			Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
			Добав.НаименованиеТовара=Продукция;
				Если Стр_1="СТАРЫЙ" Тогда
					Добав.cis=ШтрихКод;
				ИначеЕсли Стр_1=Истина Тогда
					Добав.cis=ШтрихКод;
				Иначе
					Добав.НовыйКМ=ШтрихКод;
				КонецЕсли;
				

			
				Добав.Сертификат=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(Объект.Дата,
					Новый Структура("Продукция",Продукция)).Документ;
			
		//	
		//	ППП=Объект.Товары.НайтиСтроки(Новый структура("gtin",Продукция));
		//	Если ППП.Количество()=0 Тогда
		//		Добав_1=Объект.Товары.Добавить();
		//		Добав_1.GTIN=Продукция;
		//		Добав_1.КодТНВЭД=Продукция.КодТНВЭД;
		//Если Продукция.СтранаПроизводства.Альфа2="RU" Тогда
		//	//СтрП="Производство в РФ";
		//		Добав_1.СпособВыпускаТоваров="Производство в РФ";
		//Иначе
		//	//СтрП="Ввезен в РФ";
		//		Добав_1.СпособВыпускаТоваров="Ввезен в РФ";
		//	
		//КонецЕсли;
		//		Добав_1.НомерСтрокиСвязи=Добав_1.ПолучитьИдентификатор();
		//		Добав_1.КоличествоКМ=1;
		//		Добав_1.ДекларацияИлиСертификатСоответствия=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(Объект.Дата,
		//		Новый Структура("Продукция",Продукция)).Документ;
		//	Иначе
		//		Добав_1=ППП[0];
		//		Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
		//		
		//	КонецЕсли;
		//	Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры

&НаКлиенте
Процедура ШтрихКодАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если СтрДлина(Текст)>=18
		Тогда
		       СтандартнаяОбработка=Ложь;
			   ШтрихКод=Текст;
			  ЗаполнитьИнфуПоШтриху(); 
			  
			  
	ПодключитьОбработчикОЖидания("аа",0.1,Истина);
			  КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СерийныеНомераТаблицаСерийныйНомерПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ЗаполнитьИнфуПоШтриху(Элементы.СерийныеНомераТаблица.ТекущиеДанные.ПолучитьИдентификатор());
	ПодключитьОбработчикОЖидания("аа",0.1,Истина);
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ДекларацияИлиСертификатСоответствияПриИзмененииНаСервере(ДатаТ,Продукция,Декларация)
	// Вставить содержимое обработчика.
	
	Если ЗначениеЗаполнено(Декларация.ДатаНачалаДействия)
		И РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(ДатаТ,
		Новый Структура("Продукция",Продукция)).Документ<>Декларация Тогда
		
		РегСв=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
		РегСв.Отбор.Продукция.Установить(Продукция);
		РегСв.Отбор.Период.Установить(Декларация.ДатаНачалаДействия);
		Добав=РегСв.Добавить();
		Добав.Период=Декларация.ДатаНачалаДействия;
		Добав.Продукция=Продукция;
		Добав.Документ=Декларация;
		Регсв.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДекларацияИлиСертификатСоответствияПриИзменении(Элемент)
	ТекД=Элементы.Товары.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекД.GTIN)
		И ЗначениеЗаполнено(ТекД.ДекларацияИлиСертификатСоответствия) Тогда
		ДекларацияИлиСертификатСоответствияПриИзмененииНаСервере(Объект.Дата,ТекД.GTIN,ТекД.ДекларацияИлиСертификатСоответствия);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
		Если Копирование=Ложь тОгда
		Отказ=Истина;
		
		
	// Вставить содержимое обработчика.
		Отказ=Истина;
		Если Элемент.ТекущиеДанные<>Неопределено Тогда
			РРР=Элемент.ТекущиеДанные.GTIN;
			Если Элементы.СерийныеНомераТаблица.ТекущиеДанные<>Неопределено Тогда
				Если ЗначениеЗаполнено(Элементы.СерийныеНомераТаблица.ТекущиеДанные.cis)  Тогда
					
					ОткрытьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаВыбораКМ",
					Новый структура("Организация,ТекущаяСтрока",Объект.Организация,РРР),,,,,
					Новый ОписаниеОповещения("ПослеВыбораПродукции",ЭтаФорма,Элемент));
					Возврат;
				КонецЕсли;
			Иначе
				
			КонецЕсли;
			
			
			
		Иначе
			РРР=Неопределено;
		КонецЕсли;
		ОткрытьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаВыбораКМ",
		Новый структура("Организация,ТекущаяСтрока",Объект.Организация,РРР),,,,,
		Новый ОписаниеОповещения("ПослеВыбораПродукции",ЭтаФорма,Элемент));
	
		
		
//		Если Элемент.ТекущиеДанные<>Неопределено Тогда
//			РРР=Элемент.ТекущиеДанные.GTIN;
//		Иначе
//			РРР=Неопределено;
//		КонецЕсли;
//		Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота") 
//			ИЛИ Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНужд")
////			ИЛИ Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНуждПокупателем")
//			
//		Тогда
//			ОткрытьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаВыбораКМ",
//			Новый структура("Организация,ТекущаяСтрока",Объект.Организация,РРР),,,,,
//			Новый ОписаниеОповещения("ПослеВыбораПродукции",ЭтаФорма,Истина));
//		Иначе
//		ОткрытьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаВыбораКМ",
//		Новый структура("Организация,ТекущаяСтрока",Объект.Организация,РРР),,,,,
//		Новый ОписаниеОповещения("ПослеВыбораПродукции",ЭтаФорма,Элемент));
//		КонецЕсли;
	КонецЕсли;

КонецПроцедуры



&НаКлиенте
Процедура ПослеВыбораПродукции(РР,ДД) Экспорт
	Если РР<>Неопределено Тогда
		Для Каждого Стр Из РР ЦИкл
			ШтрихКод=Стр;
			Если ДД=Истина Тогда
				ЗаполнитьИнфуПоШтриху(ДД);
			Иначе
				ЗаполнитьИнфуПоШтриху(Ложь);
			КонецЕслИ;
		Конеццикла;
		ШтрихКод="";
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СерийныеНомераТаблицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
		Отказ=Истина;
		Если Элемент.ТекущиеДанные<>Неопределено Тогда
			РРР=Элемент.ТекущиеДанные.GTIN;
			Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.cis)  Тогда
				
				ОткрытьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаВыбораКМ",
				Новый структура("Организация,ТекущаяСтрока",Объект.Организация,РРР),,,,,
				Новый ОписаниеОповещения("ПослеВыбораПродукции",ЭтаФорма,Элемент));
				Возврат;
			КонецЕсли;
				
			
		Иначе
			РРР=Неопределено;
		КонецЕсли;
		ОткрытьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаВыбораКМ",
		Новый структура("Организация,ТекущаяСтрока",Объект.Организация,РРР),,,,,
		Новый ОписаниеОповещения("ПослеВыбораПродукции",ЭтаФорма,Элемент));
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьНомерКоробаДляВыделенных(Команда)
	УстановитьНомерКоробаДляВыделенныхСервер(Элементы.СерийныеНомераТаблица.ВыделенныеСтроки);
	
КонецПроцедуры
Процедура УстановитьНомерКоробаДляВыделенныхСервер(Выд)
	НоваяУпаковка=xmlString(Новый УникальныйИдентификатор());
	НоваяУпаковка=СтрЗаменить(НоваяУпаковка,"-","");
	НоваяУпаковка=Сред(НоваяУпаковка,1,18);
	Для Каждого Стр_1 Из Выд Цикл
		
		
	Конеццикла;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если Поле.Имя="ТоварыGTIN" Тогда
		ОткрытьФорму("Справочник.Продукция_ХамелеонЦРПТ.ФормаОбъекта",Новый Структура("КЛюч",Элементы.Товары.ТекущиеДанные.GTIN));
	КонецЕслИ;
КонецПроцедуры
&НаКлиенте
Процедура Подсчитать(Команда)
	// Вставить содержимое обработчика.
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра)  Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
		
				Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Возврат;
		КонецЕсли;

	Для Каждого Стр Из Объект.Товары Цикл
		Стр.КоличествоНомеровКМ=0;
		Нстр=ОБъект.СерийныеНомера.НайтиСтроки(Новый Структура("НаименованиеТовара",Стр.GTIN));
		
		Для Каждого Стр_М Из НСТр Цикл
			Если СтрДлина(Стр_М.cis)=18 Тогда
				
				РекурсияУпаковки(Стр_М,Стр.КоличествоНомеровКМ,Thumbprint_1,СРегистра);
				
				
			Иначе
				Стр.КоличествоНомеровКМ=Стр.КоличествоНомеровКМ+1;
			КонецЕсли;
			
		КонецциклА;
		
		
		
	КонецЦикла;
КонецПроцедуры



&НаКлиенте
Процедура РекурсияУпаковки(Строк,Количество,Thumbprint_1,СРегистра)
	
	
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		Сообщить("Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
	ММ= Строк.cis;
			
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ));
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	//ЧтениеJSON = Новый ЧтениеJSON;
	//ЧтениеJSON.УстановитьСтроку(Текст1);
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);
	
	Попытка
	Для Каждого Стр_1 Из NNN.children Цикл
		Если СтрДлина(Стр_1.cis)=18 Тогда
			РекурсияУпаковки(Стр_1 ,Количество,Thumbprint_1,СРегистра)
		Иначе
			Количество=Количество+1;
		КонецеслИ;
	КонецЦиклА;
Исключение
	КонецПопытки; 
	
КонецПроцедуры


Процедура РекурсияУпаковкиСервер(Строк,Количество,Thumbprint_1,СРегистра)
	
	
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		Сообщить("Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
	ММ= Строк.cis;
			
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ));
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	//ЧтениеJSON = Новый ЧтениеJSON;
	//ЧтениеJSON.УстановитьСтроку(Текст1);
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);
	
	Для Каждого Стр_1 Из NNN.children Цикл
		Если СтрДлина(Стр_1.cis)=18 Тогда
			РекурсияУпаковкиСервер(Стр_1 ,Количество,Thumbprint_1,СРегистра)
		Иначе
			Количество=Количество+1;
		КонецеслИ;
	КонецЦиклА;
	
КонецПроцедуры

Процедура   НаСервереВыд(СРегистра,Thumbprint_1)
Для Каждого Стр_1 Из Элементы.Товары.ВыделенныеСтроки Цикл
			Стр=Объект.Товары.НайтиПоИдентификатору(Стр_1);
			Стр.КоличествоНомеровКМ=0;
			Нстр=ОБъект.СерийныеНомера.НайтиСтроки(Новый Структура("НаименованиеТовара",Стр.GTIN));
			
			Для Каждого Стр_М Из НСТр Цикл
				Если СтрДлина(Стр_М.cis)=18 Тогда
					
					РекурсияУпаковкиСервер(Стр_М,Стр.КоличествоНомеровКМ,Thumbprint_1,СРегистра);
					
					
				Иначе
					Стр.КоличествоНомеровКМ=Стр.КоличествоНомеровКМ+1;
				КонецЕсли;
				
			КонецциклА;
			
			
			
		КонецЦикла;	
	КонецПроцедуры
&НаКлиенте
Процедура ВУпаковке(Команда)
	// Вставить содержимое обработчика.
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра)  Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	
	       		Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Возврат;
		КонецЕсли;

	Если ОбработкаWEBНаСервере Тогда
		НаСервереВыд(СРегистра,Thumbprint_1);
			
		
	Иначе

		Для Каждого Стр_1 Из Элементы.Товары.ВыделенныеСтроки Цикл
			Стр=Объект.Товары.НайтиПоИдентификатору(Стр_1);
			Стр.КоличествоНомеровКМ=0;
			Нстр=ОБъект.СерийныеНомера.НайтиСтроки(Новый Структура("НаименованиеТовара",Стр.GTIN));
			
			Для Каждого Стр_М Из НСТр Цикл
				Если СтрДлина(Стр_М.cis)=18 Тогда
					
					РекурсияУпаковки(Стр_М,Стр.КоличествоНомеровКМ,Thumbprint_1,СРегистра);
					
					
				Иначе
					Стр.КоличествоНомеровКМ=Стр.КоличествоНомеровКМ+1;
				КонецЕсли;
				
			КонецциклА;
			
			
			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Вставить содержимое обработчика.
	НачатьПолучениеКаталогаВременныхФайлов(Новый ОписаниеОповещения("ПослеПолученияКаталога",Этаформа));
	ПодсчетИтоговПоКМ()                  ;
	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Если не Форм.Открыта() Тогда
		Форм.Открыть();
	Конецесли;
	ТекущийПользователь=Форм.Пользователь;
	ПослеИзмененияПользователя();
	
	
	ЭтаФорма.Активизировать();
	ИзменитьВидимость();
	
	
	ТекПользСервер();
	
КонецПроцедуры

Процедура ПослеИзмененияПользователя()
	Если Не значениеЗаполнено(Объект.ТекущийПользователь) тогда
		Объект.ТекущийПользователь=ТекущийПользователь;
		Объект.Организация=Объект.ТекущийПользователь.Организация;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияКаталога(Кат,ДД) Экспорт
	КаталогВременныхФайловНаКлиенте=Кат;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтатусыПоКМ(Команда,ТолькоА=Ложь)
	// Вставить содержимое обработчика.
	МассивКМ=Новый Массив;
	Для каждого Стр_1 Из Объект.СерийныеНомера Цикл
		
		Если ВРЕГ(Стр_1.статус)="INTRODUCED" ИЛИ (Врег(Стр_1.Статус)="APPLIED" И ТолькоА=Ложь) Тогда
			Продолжить;
		КонецЕсли;
		Стр_1.Статус="Не найдено в ЦРПТ";
		МассивКМ.Добавить(Стр_1.cis);
	Конеццикла;	
	ОбработатьстатусыКМ(МассивКМ);
	
	Возврат;
	
	
	Thumbprint_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра)  Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;

				Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Возврат;
		КонецЕсли;

	Для каждого Стр_1 Из Объект.СерийныеНомера Цикл
		
		Если ВРЕГ(Стр_1.статус)="INTRODUCED" ИЛИ (Врег(Стр_1.Статус)="APPLIED" И ТолькоА=Ложь) Тогда
			Продолжить;
		КонецЕсли;
		    Стр_1.Статус=Неопределено;
	   НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	
	   Если НаСервере Тогда
		 Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Стр_1.cis);  
		Иначе
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			Если Thumbprint_1.НаименованиеСтенда="Табак"
				ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
				Тогда
	
		NN=ВернутьТелоЗапросаПодключение(Стр_1.cis);
						
	
			HTTPЗапрос=Новый HTTPЗапрос("private-office-api/private/v2/cis/status");
			//private-office-api/private/v2/cis/"+КодМаркировки+"/mrp"
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин   
			HTTPЗапрос.УстановитьТелоИзСтроки(NN,КодировкаТекста.UTF8);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
Иначе
			
			Текст=Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(Стр_1.cis);
			Марк=Текст.Получитьтекст();
	
 			что=Thumbprint_1.что;
	
	ММ= Стр_1.cis;
	
//	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ));
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"&pg="+что);;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
КонецЕсли;
КонецЕсли;

		Если НаСервере Тогда
			Текст1=Ответ.ПолучитьТелоКакСтроку;
			
		Иначе
			Текст1=Ответ.ПолучитьТелоКакСтроку();
		КонецЕсли;	
		
		Если Thumbprint_1.НаименованиеСтенда="Табак"
							ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
Тогда
		
			Попытка
		//ЧтениеJSON = Новый ЧтениеJSON;
		//	ЧтениеJSON.УстановитьСтроку(Текст1);
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Стр_1.Статус=NNN[0].status;
			
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Сообщить(Текст1);
			КонецПопытки;
	
Иначе
//ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(Текст1);
Попытка
	Если Ответ.КодСостояния=200 Тогда
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
	Стр_1.Статус=NNN.status;
		Иначе
		
		Стр_1.Статус=Ответ.КодСостояния;
		 Сообщить(Текст1);
	КонецЕсли;
	

	
Исключение
	Сообщить(ОписаниеОшибки());
	Сообщить(Текст1);
КонецПопытки;
КонецЕсли;



	Конеццикла;

	ИзменитьВидимость()
	
КонецПроцедуры
&НаСервереБезКонтекста
Функция ВернутьТелоЗапросаПодключение(cis)
	МассивКодо=Новый Массив;
	          МассивКодо.Добавить(cis);
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("ids", МассивКодо);
			ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, "  ");
			
			ЗаписьJSON = Новый ЗаписьJSON();
			ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
			
			ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
			
			Возврат ЗаписьJSON.Закрыть();

КонецФункции

&НаКлиенте
Процедура ПодсчетИтоговПоКМ()
	ИтогоКМ=0;
	ИтогУпаковок=0;
	КоличествоКрасныхтрочек=0;
	Для Каждого Стр_1 Из ДеревоКМ.ПолучитьЭлементы() Цикл
		Стр_1.Количество=0;
		Если Стр_1.ПолучитьЭлементы().Количество()=0 Тогда
			Стр_1.Красный=Истина;
			КоличествоКрасныхтрочек=КоличествоКрасныхтрочек+1;
		КонецЕсли;
		РекурсияПодсчета(Стр_1);
	Конеццикла;
	
	Для Каждого Стр_1 Из ДеревоКМ.ПолучитьЭлементы() Цикл
		
		РекурсияПодсчета_Суммы(Стр_1,Стр_1.Количество);
		
		
	Конеццикла;
КонецПроцедуры
&НаКлиенте
Процедура ПоказатьИнформацию(Команда)
	ЭтаФорма.Записать();
	МассивCis=Новый Массив;
	ДеревоКМ.ПолучитьЭлементы().Очистить();
	Для Каждого Стр_ иЗ ОБъект.СерийныеНомера Цикл
		МассивCis.Добавить(Стр_.cis);
	Конеццикла;
	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюПоКМ_Массив(ДеревоКМ,МассивCis,Объект.ТекущийПользователь);
	
	
	ПодсчетИтоговПоКМ();
	
	Элементы.СтраницыТЧ.ТекущаяСтраница=Элементы.ИнформацияОКМ;
	
	
	СохранитьДеревоНаСервере();
	
КонецПроцедуры

Процедура СохранитьДеревоНаСервере()
	РегДв=РегистрыСведений.СохранитьДеревоИнформациюОНомерахКМВводВОборот_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.ВводВОборот.Установить(Объект.Ссылка);
	Добав=РегДв.Добавить();
	Добав.ВводВОборот=Объект.Ссылка;
	
	ТаблицаВыгрузки=Новый ДеревоЗначений;
	ТаблицаВыгрузки.Колонки.Добавить("Уровень");
	ТаблицаВыгрузки.Колонки.Добавить("НомерКороба");
	ТаблицаВыгрузки.Колонки.Добавить("НомерКМ");
	ТаблицаВыгрузки.Колонки.Добавить("Продукция");
	ТаблицаВыгрузки.Колонки.Добавить("Количество");
	ТаблицаВыгрузки.Колонки.Добавить("cis");
	ТаблицаВыгрузки.Колонки.Добавить("Статус");
	ТаблицаВыгрузки.Колонки.Добавить("Вспомогательный");
	
	Сч=0;
	Для Каждого Стр_1 Из ДеревоКМ.ПолучитьЭлементы() Цикл
		Добав_Т=ТаблицаВыгрузки.Строки.Добавить();
		РекурсияПоДереву(Добав_Т,Сч,Стр_1);
	Конеццикла;
	
	
	Добав.Хранилище=Новый ХранилищеЗначения(ТаблицаВыгрузки);
	РегДв.Записать(Истина);
КонецПроцедуры

Процедура РекурсияПоДереву(Добав,Знач Сч,Стр_1)
	//Добав=ТаблицаВыгрузки.Добавить();
	ЗаполнитьЗначенияСвойств(Добав,Стр_1);
	Добав.Уровень=Сч;
	Сч=Сч+1;
	Для Каждого Стр_2 Из Стр_1.ПолучитьЭлементы() Цикл
		Добав_22=Добав.Строки.Добавить();
		РекурсияПоДереву(Добав_22,Сч,Стр_2);
	Конеццикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РекурсияПодсчета(Стр_2)
	
	Если Стр_2.ПолучитьЭлементы().Количество()=0 Тогда
		Стр_2.Количество=0;
		ИтогоКМ=ИтогоКМ+1;
	Иначе
		ИтогУпаковок=ИтогУпаковок+1;
		Для Каждого Стр_3 Из Стр_2.ПолучитьЭлементы() Цикл
			Стр_3.Количество=0;
			РекурсияПодсчета(Стр_3)
		Конеццикла;
	КонецЕсли;
	
КонецПроцедуры



&НаКлиенте
Процедура РекурсияПодсчета_Суммы(Стр_2,КоличествоКМ)
	
	Если Стр_2.ПолучитьЭлементы().Количество()=0 Тогда
		КоличествоКМ=КоличествоКМ+1;
		Стр_2.Количество=1;
	Иначе
		Для Каждого Стр_3 Из Стр_2.ПолучитьЭлементы() Цикл
			РекурсияПодсчета_Суммы(Стр_3,Стр_3.Количество);
			КоличествоКМ=КоличествоКМ+Стр_3.Количество;
		Конеццикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИз(Команда)
	// Вставить содержимое обработчика.
		// Вставить содержимое обработчика.
	МассивКМ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ВернутьКМИзФайлов();
		
			Для Каждого ШтрихОбраб из  МассивКМ Цикл
				//ШтрихОбраб=ТекстовыйД.ПолучитьСтроку(Сч);
			
					ШтрихКод68=ШтрихОбраб;
					
					шТРИХкОД=ШтрихКод68;
					шТРИХкОД=СтрЗаменить(шТРИХкОД,Символ(29),"");
					
					Если Элементы.СерийныеНомераТаблица.ТекущиеДанные<>Неопределено Тогда
						ЗаполнитьИнфуПоШтриху(Ложь);
					Иначе
						ЗаполнитьИнфуПоШтриху();
						
					Конецесли;

				
				КонецЦикла;
	
	
	
	ПодключитьОбработчикОЖидания("аа",0.1,Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура ПроверкаКМВДереве(Команда)
	// Вставить содержимое обработчика.
	
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра)  Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		Сообщить("Не удалось получить токен по организации");
		Возврат;
	Конецесли;

	Для Каждого стр_1 Из ДеревоКМ.ПолучитьЭлементы() Цикл
		
		
		Рекурсия_статуссов(Стр_1,Thumbprint_1,СРегистра)
		
	Конеццикла;
КонецПроцедуры

&НаКлиенте
Процедура Рекурсия_статуссов(Стр_1,Thumbprint_1,СРегистра)	
	
	Если Не ЗначениеЗаполнено(Стр_1.cis) Тогда
	                 Стр_1.cis=Стр_1.НомерКМ;
					КонецЕсли;
		  Стр_1.Статус=Неопределено;
	   НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	
	   Если НаСервере Тогда
		 Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Стр_1.cis);  
		Иначе
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			Если Thumbprint_1.НаименованиеСтенда="Табак"
								ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
Тогда
	
		NN=ВернутьТелоЗапросаПодключение(Стр_1.cis);
						
	
			HTTPЗапрос=Новый HTTPЗапрос("private-office-api/private/v2/cis/status");
			//private-office-api/private/v2/cis/"+КодМаркировки+"/mrp"
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин   
			HTTPЗапрос.УстановитьТелоИзСтроки(NN,КодировкаТекста.UTF8);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
Иначе
	
	ММ= Стр_1.cis;
	
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ));
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Попытка
		Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
	исключение
		Возврат;
	Конецпопытки;
КонецЕсли;
КонецЕсли;

		Если НаСервере Тогда
			Текст1=Ответ.ПолучитьТелоКакСтроку;
			
		Иначе
			Текст1=Ответ.ПолучитьТелоКакСтроку();
		КонецЕсли;	
		
		Если Thumbprint_1.НаименованиеСтенда="Табак"
							ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
Тогда
		
			Попытка
		//ЧтениеJSON = Новый ЧтениеJSON;
		//	ЧтениеJSON.УстановитьСтроку(Текст1);
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Стр_1.Статус=NNN[0].status;
			
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Сообщить(Текст1);
			КонецПопытки;
	
Иначе
//ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(Текст1);
Попытка
	
	Если Ответ.КодСостояния=200 Тогда
		NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
		Стр_1.Статус=NNN.status;
	Иначе
		
					Стр_1.Статус=Ответ.КодСостояния;
					Если   Ответ.КодСостояния=404 Тогда
						Стр_1.Статус=Стр_1.Статус+" не найдено в базе"
				КонецЕсли;
		 Сообщить(Текст1);
	КонецЕсли;
	
	
Исключение
	Сообщить(ОписаниеОшибки());
	Сообщить(Текст1);
КонецПопытки;
КонецЕсли;


	
Для Каждого Стр_2 Из Стр_1.ПолучитьЭлементы() Цикл
	Рекурсия_статуссов(Стр_2,Thumbprint_1,СРегистра)	
	Конеццикла;
	
Конецпроцедуры


&НаКлиенте
Процедура ПолучитьДлинныеКМ(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Стр_2 Из ДеревоКМ.ПолучитьЭлементы() Цикл
		Рек(Стр_2);
		
	Конеццикла;
	
	СохранитьДеревоНаСервере()
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиПо(cis)
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказМарок_ХамелеонЦРПТКМИзAPI.НомерКМ,
		|	ЗаказМарок_ХамелеонЦРПТКМИзAPI.НомерКМ_Короткий
		|ИЗ
		|	Документ.ЗаказМарок_ХамелеонЦРПТ.КМИзAPI КАК ЗаказМарок_ХамелеонЦРПТКМИзAPI
		|ГДЕ
		|	ЗаказМарок_ХамелеонЦРПТКМИзAPI.НомерКМ_Короткий = &НомерКМ_Короткий";
	
	Запрос.УстановитьПараметр("НомерКМ_Короткий", cis);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.НомерКМ_Короткий=cis Тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
			Возврат ВыборкаДетальныеЗаписи.НомерКМ
		Конецесли;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты.Регистратор
		|ИЗ
		|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Обороты(, , Регистратор, СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты
		|ГДЕ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты.Регистратор ССЫЛКА Документ.ЗаказМарок_ХамелеонЦРПТ";
	
	Запрос.УстановитьПараметр("СерийныйНомер", cis);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		КодИр=КодироватьСтроку(cis,СпособКодированияСтроки.КодировкаURL);
		Для Каждого Стр_1 Из    ВыборкаДетальныеЗаписи.Регистратор.КМИзAPI Цикл
			
			Если Найти(Стр_1.НомерКМ,КодИр)=1 Тогда
				Возврат             Стр_1.НомерКМ
			Конецесли;
		Конеццикла;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
КонецФункции

&НаКлиенте
Процедура Рек (Стр_3)
	
	Если Стр_3.ПолучитьЭлементы().Количество()=0 ТОгда
	Если Не ЗначениеЗаполнено(Стр_3.cis) Тогда
	                 Стр_3.cis=Стр_3.НомерКМ;
					КонецЕсли;
		Стр_3.Вспомогательный=НайтиПо(Стр_3.cis);
	Иначе
		ДЛя Каждого Стр_2 Из Стр_3.ПолучитьЭлементы() Цикл
			Рек(Стр_2);
		Конеццикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВTXT(Команда)
	// Вставить содержимое обработчика.
	ДилогВыбора=Новый ДиалогВыбораФайла(РежимдиалогаВыбораФайла.ВыборКаталога);
	ДилогВыбора.Заголовок="Выберите каталог для сохранения файлов с номерами КМ";
	Если ДилогВыбора.Выбрать() Тогда
		Каталог=ДилогВыбора.Каталог;
	//	Форм=ЭтаФорма.ВладелецФормы.Элементы.ЗаказыТаблица.ВыделенныеСтроки;
	//	Для Каждого Стр_1 Из Форм Цикл
			
			Номер="";
			ДвоичнД=СохранитьФайлНаДИске(Объект.Ссылка,Номер);
			
			ИмяФ=Каталог+"\"+Номер+".txt";
			ДвоичнД.Записать(ИмяФ);
	//	Конеццикла;
		
		
	КонецЕсли;
	
	
	
КонецПроцедуры

Процедура Рек_Запис(ТексТД,ДД)
	
	
	Если ЗначениеЗаполнено(ДД.Вспомогательный) Тогда
		сшш=РаскодироватьСтроку(ДД.Вспомогательный,способКодированияСтроки.КодировкаURL);
		ТексТД.ДобавитьСтроку(сшш);
		
	КонецЕсли;
	Для Каждого Стр_2 Из ДД.ПолучитьЭлементы() Цикл
		Рек_Запис(ТексТД,Стр_2)
		
	Конеццикла;
	
КонецПроцедуры

Функция СохранитьФайлНаДИске(Ссылка,Номер)
	
	ТекстД=Новый ТекстовыйДокумент;
	Номер=Объект.Номер;
	//ТекстД.ДобавитьСтроку(Ссылка.Номер);
	
	ТаблицаТоваров=Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	//ТаблицаТоваров.Колонки.Добавить("Продукция");
	ТаблицаТоваров.Колонки.Добавить("НомерКороба");
	
	Для Каждого Стр_1 ИЗ Объект.Товары Цикл
		
		НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",
		Стр_1.НомерСтрокиСвязи));
		Для Каждого Стр_2 Из НСтрок Цикл
			
			Добав=ТаблицаТоваров.Добавить();
			Добав.Артикул=Стр_1.gtin.МодельПроизводителяАртикул;
			//Добав.Продукция=Стр_1.gtin;
			Добав.НомерКороба=Стр_2.cis;
			
		Конеццикла;
		
		
	Конеццикла;
	таблицаТоваров.Свернуть("Артикул,НомерКороба");
	таблицаТоваров.Сортировать("Артикул,НомерКороба");
	
	Артикул="ываывавыаываываыв";
	
	Для Каждого Стр_1 Из таблицаТоваров Цикл
		Если Артикул<>Стр_1.Артикул Тогда
				ТекстД.ДобавитьСтроку(Стр_1.Артикул);
			КонецЕсли;
		ТекстД.ДобавитьСтроку(Стр_1.НомерКороба);
		Для Каждого ДД ИЗ ДеревоКМ.ПолучитьЭлементы() Цикл
			Если ДД.НомерКороба=Стр_1.НомерКороба Тогда
				
				Рек_Запис(ТексТД,ДД);
			
//				РР=РаскодироватьСтроку(ДД.НомерКМ,СпособКодированияСтроки.КодировкаURL);
//				ТекстД.ДобавитьСтроку(РР);
			КонецЕсли;
		Конеццикла;
		
		Артикул=Стр_1.Артикул;
		
		
	Конеццикла;
	
	
	//ТаблицаТоваров.Колонки.Добавить("Артикул");
	
	
	
	

	
//	Для Каждого ДД ИЗ ДеревоКМ.ПолучитьЭлементы() Цикл
//		Рек_Запис(ТексТД,ДД);
		
//		РР=РаскодироватьСтроку(ДД.НомерКМ,СпособКодированияСтроки.КодировкаURL);
//		ТекстД.ДобавитьСтроку(РР);
//	Конеццикла;
	
	//ИмяТекст=ПолучитьИмяВременногоФайла();
	//ТекстД.Записать(ИмяТекст);
	ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстД.ПолучитьТекст());//Новый ДвоичныеДанные(ИмяТекст);
	//УдалитьФайлы(ИмяТекст);
	Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстД.ПолучитьТекст());
	
КонецФункции

&НаСервере
Функция СохранитьФайлНаДИске_БезКоробов(Ссылка,Номер)
	// Вставить содержимое обработчика.
	
	ТекстД=Новый ТекстовыйДокумент;
	Номер=Объект.Номер;
	//ТекстД.ДобавитьСтроку(Ссылка.Номер);
	
	ТаблицаТоваров=Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	//ТаблицаТоваров.Колонки.Добавить("Продукция");
	ТаблицаТоваров.Колонки.Добавить("НомерКороба");
	
	Для Каждого Стр_1 ИЗ Объект.Товары Цикл
		
		НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",
		Стр_1.НомерСтрокиСвязи));
		Для Каждого Стр_2 Из НСтрок Цикл
			
			Добав=ТаблицаТоваров.Добавить();
			Добав.Артикул=Стр_1.gtin.МодельПроизводителяАртикул;
			//Добав.Продукция=Стр_1.gtin;
			Добав.НомерКороба=Стр_2.cis;
			
		Конеццикла;
		
		
	Конеццикла;
	таблицаТоваров.Свернуть("Артикул,НомерКороба");
	таблицаТоваров.Сортировать("Артикул,НомерКороба");
	
	Артикул="ываывавыаываываыв";
	
	Для Каждого Стр_1 Из таблицаТоваров Цикл
		Если Артикул<>Стр_1.Артикул Тогда
				ТекстД.ДобавитьСтроку(Стр_1.Артикул);
			КонецЕсли;
	//	ТекстД.ДобавитьСтроку(Стр_1.НомерКороба);
		Для Каждого ДД ИЗ ДеревоКМ.ПолучитьЭлементы() Цикл
			Если ДД.НомерКороба=Стр_1.НомерКороба Тогда
				
				Рек_Запис(ТексТД,ДД);
			
//				РР=РаскодироватьСтроку(ДД.НомерКМ,СпособКодированияСтроки.КодировкаURL);
//				ТекстД.ДобавитьСтроку(РР);
			КонецЕсли;
		Конеццикла;
		
		Артикул=Стр_1.Артикул;
		
		
	Конеццикла;
	
	
	//ТаблицаТоваров.Колонки.Добавить("Артикул");
	
	
	
	

	
//	Для Каждого ДД ИЗ ДеревоКМ.ПолучитьЭлементы() Цикл
//		Рек_Запис(ТексТД,ДД);
		
//		РР=РаскодироватьСтроку(ДД.НомерКМ,СпособКодированияСтроки.КодировкаURL);
//		ТекстД.ДобавитьСтроку(РР);
//	Конеццикла;
	
	//ИмяТекст=ПолучитьИмяВременногоФайла();
	//ТекстД.Записать(ИмяТекст);
	ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстД.ПолучитьТекст());//Новый ДвоичныеДанные(ИмяТекст);
	//УдалитьФайлы(ИмяТекст);
	Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстД.ПолучитьТекст());
	
КонецФункции

&НаКлиенте
Процедура СохранитьВtXTБезКоробов(Команда)
	// Вставить содержимое обработчика.
	ДилогВыбора=Новый ДиалогВыбораФайла(РежимдиалогаВыбораФайла.ВыборКаталога);
	ДилогВыбора.Заголовок="Выберите каталог для сохранения файлов с номерами КМ";
	Если ДилогВыбора.Выбрать() Тогда
		Каталог=ДилогВыбора.Каталог;
	//	Форм=ЭтаФорма.ВладелецФормы.Элементы.ЗаказыТаблица.ВыделенныеСтроки;
	//	Для Каждого Стр_1 Из Форм Цикл
			
			Номер="";
			ДвоичнД=СохранитьФайлНаДИске_БезКоробов(Объект.Ссылка,Номер);
			
			ИмяФ=Каталог+"\"+Номер+".txt";
			ДвоичнД.Записать(ИмяФ);
	//	Конеццикла;
		
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКороткиеНомераКМБезКоробов(Команда)
	// Вставить содержимое обработчика.
	ДилогВыбора=Новый ДиалогВыбораФайла(РежимдиалогаВыбораФайла.ВыборКаталога);
	ДилогВыбора.Заголовок="Выберите каталог для сохранения файлов с номерами КМ";
	Если ДилогВыбора.Выбрать() Тогда
		Каталог=ДилогВыбора.Каталог;
	//	Форм=ЭтаФорма.ВладелецФормы.Элементы.ЗаказыТаблица.ВыделенныеСтроки;
	//	Для Каждого Стр_1 Из Форм Цикл
			
			Номер="";
			ДвоичнД=СохранитьФайлНаДИске_БезКоробовКороткие(Объект.Ссылка,Номер);
			
			ИмяФ=Каталог+"\"+Номер+".txt";
			ДвоичнД.Записать(ИмяФ);
	//	Конеццикла;
		
		
	КонецЕсли;	
	
	
	
КонецПроцедуры

&НаСервере
Функция СохранитьФайлНаДИске_БезКоробовКороткие(Ссылка,Номер)
	// Вставить содержимое обработчика.
	
	//Объект=УФ.Объект;
	ТекстД=Новый ТекстовыйДокумент;
	Номер=Объект.Номер;
	//ТекстД.ДобавитьСтроку(Ссылка.Номер);
	
	ТаблицаТоваров=Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	//ТаблицаТоваров.Колонки.Добавить("Продукция");
	ТаблицаТоваров.Колонки.Добавить("НомерКороба");
	
	Для Каждого Стр_1 ИЗ Объект.Товары Цикл
		
		НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",
		Стр_1.НомерСтрокиСвязи));
		Для Каждого Стр_2 Из НСтрок Цикл
			
			Добав=ТаблицаТоваров.Добавить();
			Добав.Артикул=Стр_1.gtin.МодельПроизводителяАртикул;
			//Добав.Продукция=Стр_1.gtin;
			Добав.НомерКороба=Стр_2.cis;
			
		Конеццикла;
		
		
	Конеццикла;
	таблицаТоваров.Свернуть("Артикул,НомерКороба");
	таблицаТоваров.Сортировать("Артикул,НомерКороба");
	
	Артикул="ываывавыаываываыв";
	
	Для Каждого Стр_1 Из таблицаТоваров Цикл
		Если Артикул<>Стр_1.Артикул Тогда
				ТекстД.ДобавитьСтроку(Стр_1.Артикул);
			КонецЕсли;
	//	ТекстД.ДобавитьСтроку(Стр_1.НомерКороба);
		Для Каждого ДД ИЗ ДеревоКМ.ПолучитьЭлементы() Цикл
			Если ДД.НомерКороба=Стр_1.НомерКороба Тогда
				
				Рек_Запис_Короткие(ТексТД,ДД);
			
//				РР=РаскодироватьСтроку(ДД.НомерКМ,СпособКодированияСтроки.КодировкаURL);
//				ТекстД.ДобавитьСтроку(РР);
			КонецЕсли;
		Конеццикла;
		
		Артикул=Стр_1.Артикул;
		
		
	Конеццикла;
	
	
	//ТаблицаТоваров.Колонки.Добавить("Артикул");
	
	
	
	

	
//	Для Каждого ДД ИЗ ДеревоКМ.ПолучитьЭлементы() Цикл
//		Рек_Запис(ТексТД,ДД);
		
//		РР=РаскодироватьСтроку(ДД.НомерКМ,СпособКодированияСтроки.КодировкаURL);
//		ТекстД.ДобавитьСтроку(РР);
//	Конеццикла;
	
	//ИмяТекст=ПолучитьИмяВременногоФайла();
	//ТекстД.Записать(ИмяТекст);
	
	ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстД.ПолучитьТекст());//Новый ДвоичныеДанные(ИмяТекст);
	
	//ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстД.ПолучитьТекст());//Новый ДвоичныеДанные(ИмяТекст);
	//УдалитьФайлы(ИмяТекст);
	Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстД.ПолучитьТекст());
	//Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстД.ПолучитьТекст());
	
КонецФункции

Процедура Рек_Запис_Короткие(ТексТД,ДД)
	
	
	Если ЗначениеЗаполнено(ДД.Вспомогательный) Тогда
	//	сшш=РаскодироватьСтроку(ДД.Вспомогательный,способКодированияСтроки.КодировкаURL);
		ТексТД.ДобавитьСтроку(ДД.cis);
		
	КонецЕсли;
	Для Каждого Стр_2 Из ДД.ПолучитьЭлементы() Цикл
		Рек_Запис_Короткие(ТексТД,Стр_2)
		
	Конеццикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ДополучитьИнформациюОКМ(Команда)
	// Вставить содержимое обработчика.
	
	Thumbprint_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);	
		Что=Thumbprint_1.что;
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра)  Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
		
				Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Возврат;
		КонецЕсли;

	Для Каждого Добав Из ДеревоКМ.ПолучитьЭлементы() Цикл
		
		//Добав=Дерево.ПолучитьЭлементы().Добавить();
		//Добав=Дерево.ПолучитьЭлементы().Добавить();
		 Если Добав.ПолучитьЭлементы().Количество()=0 Тогда
		
			//Добав.Продукция=НайтиПроудкцияюПоcis(Thumbprint_1,Срегистра,Стр_1);

			//Добав.НомерКороба=Стр_1;
			//Добав.cis=Стр_1;
			
			
	
			МассивКМ=Новый Массив;
			МассивКМ.Очистить();
			МассивКМ.Добавить(Добав.cis);
					//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Добав.cis)+"&pg="+что);;
				Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьтелоПоcis(МассивКМ);
				HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/cis/cis_list?pg="+Что);
						
							
						//ИНН=ВернутьИНН(Обр.Организации[0].Организация );
				///HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Добав.cis));;
				//HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?gtin="+ДополнитьСтроку(Стр_11)+"&limit=100&offset=0");;
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			#Если ВебКлиент Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
			#Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
				
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
				Текст1=Ответ.ПолучитьТелоКакСтроку();
				
				числоЗагрузили=0;
				
				Тотал=0;
				Если Ответ.КодСостояния=200 Тогда
							
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюПоКМ(Добав,Добав.cis,ТекущийПользователь,"",Ложь)
					//Реку(NNN[Добав.cis],УжеЗапрашивали,Добав.cis,HTTPСервисЗапрос,Thumbprint_1,СРегистра);
				КонецЕсли;			
			
			//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.РекурсияУпаковки(Добав,Thumbprint_1,СРегистра,Добав.cis);
		КонецЕсли;
	Конеццикла;

КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьДекларацииПоВыделенным(Команда)
	// Вставить содержимое обработчика.
	ОткрытьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаУФ",,ЭтаФорма);
КонецПроцедуры


&НаСервере
Процедура УдалитьСтрочкиНаСервере()
	// Вставить содержимое обработчика.
	МассивД=Новый Массив;
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		Если Стр.Статус<>"APPLIED" Тогда
			МассивД.Добавить(Стр);
		КонецЕсли;
	Конеццикла;
	
	МассивУд=Новый Массив;
	Для Каждого Стр Из МассивД Цикл
		
		
		НСтрок=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		НСтрок[0].КоличествоКМ=НСтрок[0].КоличествоКМ-1;
		Если 
		НСтрок[0].КоличествоКМ=0 Тогда
		МассивУд.Добавить(НСтрок[0]);
		КонецЕсли;
		Объект.СерийныеНомера.Удалить(Стр);
			
	Конеццикла;
	
	Для Каждого Стр_1 Из МассивУд Цикл
		ОБъект.Товары.Удалить(Стр_1);
	Конеццикла;
	//Нстр=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("Статус","APPLIED"));
КонецПроцедуры


&НаКлиенте
Процедура УдалитьСтрочки(Команда)
	УдалитьСтрочкиНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура СтранаТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка=Ложь;
КонецПроцедуры


&НаКлиенте
Процедура СтранаТСПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если Элементы.СтранаТС.СписокВыбора.НайтиПоЗначению(Объект.СтранаТС)=Неопределено Тогда
		Объект.СтранаТС=НЕопределено;
	КонецЕсли;
КонецПроцедуры


Процедура ПроверитьВсеСтатусыНаСервере()
	ЧислоПараллельныхПотоков = РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КоличествоЯдерДляГенерацииDataMatrix;
	МассивЗаданий = Новый Массив;
	ЗаданияПоСтрокам = Новый Соответствие;
	Thumbprint = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);	
	Если Не ЗначениеЗаполнено(Thumbprint) Тогда
		Возврат;
	КонецЕслИ;
	
	Для каждого СерийныйНомер Из Объект.СерийныеНомера Цикл
		
		Если ВРЕГ(СерийныйНомер.статус)="INTRODUCED" ИЛИ (Врег(СерийныйНомер.Статус)="APPLIED") Тогда
			Продолжить;
		КонецЕсли;
		
		СерийныйНомер.Статус = Неопределено;
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(СерийныйНомер.cis);
		МассивПараметров.Добавить(Thumbprint);
		
		Если ЧислоПараллельныхПотоков=0 Тогда
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				shoesD="";
				Если Данные <> Неопределено И данные.Свойство("shoesData",shoesD) Тогда
					СерийныйНомер.Статус = shoesD.status;
				КонецЕсли;
		Иначе
			Попытка
				Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара", МассивПараметров);
				ЗаданияПоСтрокам.Вставить(Задание.УникальныйИдентификатор, СерийныйНомер);
				МассивЗаданий.Добавить(Задание);
				
				Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
					ЗаполнитьСтатусыСерийныхНомеров(ЗаданияПоСтрокам, МассивЗаданий); 
				КонецЕсли;
			Исключение
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				shoesD="";
				Если Данные <> Неопределено И данные.Свойство("shoesData",shoesD) Тогда
					СерийныйНомер.Статус = shoesD.status;
				КонецЕсли;
					
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивЗаданий.Количество() >= 0 Тогда
		ЗаполнитьСтатусыСерийныхНомеров(ЗаданияПоСтрокам, МассивЗаданий); 
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыСерийныхНомеров(Знач ЗаданияПоСтрокам, МассивЗаданий)
	
	Попытка
		ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
	Исключение
	КонецПопытки;
	Для каждого Задание Из МассивЗаданий Цикл
		Данные = Неопределено;
		Для каждого Сообщение Из Задание.ПолучитьСообщенияПользователю() Цикл
			Если ЗначениеЗаполнено(Сообщение.Текст) Тогда
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Сообщение.Текст);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Данные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТекСтр = ЗаданияПоСтрокам.Получить(Задание.УникальныйИдентификатор);
		ТекСтр.Статус = Данные.shoesData.status;
	КонецЦикла;
	МассивЗаданий.Очистить();
	
КонецПроцедуры



&НаКлиенте
Процедура ПолучитьСтатусыПоКМАльтернит(Команда)
	// Вставить содержимое обработчика.
	ПроверитьВсеСтатусыНаСервере();
	ИзменитьВидимость()
	
	
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьСтатусыКМВсе(Команда)
	МассивКМ=Новый Массив;
	Для каждого Стр_1 Из Объект.СерийныеНомера Цикл
		
		Стр_1.Статус="Не найдено в ЦРПТ";
		МассивКМ.Добавить(Стр_1.cis);
	Конеццикла;	
	ОбработатьстатусыКМ(МассивКМ);
	
	Возврат;
	
	
	
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		Стр_1.Статус="";
	Конеццикла;
	ПолучитьСтатусыПоКМ(Команда);
	
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьСтатусыAPPLIED(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	ПолучитьСтатусыПоКМ(Команда,истина)	
	
КонецПроцедуры


&НаКлиенте
Процедура ПроверитьСтатусыПоВыделенным(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	МассивКМ=Новый Массив;
	Для каждого Стр_2 Из Элементы.СерийныеНомераТаблица.ВыделенныеСтроки Цикл
		Стр_1=Объект.СерийныеНомера.НайтиПоИдентификатору(Стр_2);
		Стр_1.Статус="Не найдено в ЦРПТ";
		МассивКМ.Добавить(Стр_1.cis);
	Конеццикла;	
	ОбработатьстатусыКМ(МассивКМ);
	
	Возврат;
	
	
	Thumbprint_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра)  Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;

				Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Возврат;
		КонецЕсли;

	Для каждого Стр_2 Из Элементы.СерийныеНомераТаблица.ВыделенныеСтроки Цикл
		Стр_1=Объект.СерийныеНомера.НайтиПоИдентификатору(Стр_2);
		    Стр_1.Статус=Неопределено;
	   НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	
	   Если НаСервере Тогда
		 Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Стр_1.cis);  
		Иначе
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			Если Thumbprint_1.НаименованиеСтенда="Табак"
								ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
Тогда
	
		NN=ВернутьТелоЗапросаПодключение(Стр_1.cis);
						
	
			HTTPЗапрос=Новый HTTPЗапрос("private-office-api/private/v2/cis/status");
			//private-office-api/private/v2/cis/"+КодМаркировки+"/mrp"
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин   
			HTTPЗапрос.УстановитьТелоИзСтроки(NN,КодировкаТекста.UTF8);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
Иначе
			
			Текст=Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(Стр_1.cis);
			Марк=Текст.Получитьтекст();
	
 			что=Thumbprint_1.что;
	
	ММ= Стр_1.cis;
	
//	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ));
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"&pg="+что);;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
КонецЕсли;
КонецЕсли;

		Если НаСервере Тогда
			Текст1=Ответ.ПолучитьТелоКакСтроку;
			
		Иначе
			Текст1=Ответ.ПолучитьТелоКакСтроку();
		КонецЕсли;	
		
		Если Thumbprint_1.НаименованиеСтенда="Табак"
							ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
Тогда
		
			Попытка
		//ЧтениеJSON = Новый ЧтениеJSON;
		//	ЧтениеJSON.УстановитьСтроку(Текст1);
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Стр_1.Статус=NNN[0].status;
			
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Сообщить(Текст1);
			КонецПопытки;
	
Иначе
//ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(Текст1);
Попытка
	Если Ответ.КодСостояния=200 Тогда
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
	Стр_1.Статус=NNN.status;
		Иначе
		
		Стр_1.Статус=Ответ.КодСостояния;
		 Сообщить(Текст1);
	КонецЕсли;
	

	
Исключение
	Сообщить(ОписаниеОшибки());
	Сообщить(Текст1);
КонецПопытки;
КонецЕсли;



	Конеццикла;
	ИзменитьВидимость()
	
КонецПроцедуры


&НаКлиенте
Процедура ПроверитьСтатусыПоВыделеннымАльтернатива(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	// Вставить содержимое обработчика.
	ПроверитьСтатусыПоВыделеннымАльтернативаНаСервере();
		ИзменитьВидимость()

КонецПроцедуры

&НаСервере
Процедура ПроверитьСтатусыПоВыделеннымАльтернативаНаСервере()
	
	ЧислоПараллельныхПотоков = РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КоличествоЯдерДляГенерацииDataMatrix;
	
	МассивЗаданий = Новый Массив;
	ЗаданияПоСтрокам = Новый Соответствие;
	Thumbprint = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);	
	
	Если Не ЗначениеЗаполнено(Thumbprint) Тогда
		Возврат;
	КонецЕслИ;
	
	Для каждого Стр Из Элементы.СерийныеНомераТаблица.ВыделенныеСтроки Цикл
		
		СерийныйНомер = Объект.СерийныеНомера.НайтиПоИдентификатору(Стр);
		СерийныйНомер.Статус = Неопределено;
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(СерийныйНомер.cis);
		МассивПараметров.Добавить(Thumbprint);
		
		Если ЧислоПараллельныхПотоков=0 Тогда
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				shoesD="";
				Если Данные <> Неопределено И данные.Свойство("shoesData",shoesD) Тогда
					СерийныйНомер.Статус = shoesD.status;
				КонецЕсли;
		Иначе
			Попытка
				Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара", МассивПараметров);
				ЗаданияПоСтрокам.Вставить(Задание.УникальныйИдентификатор, СерийныйНомер);
				МассивЗаданий.Добавить(Задание);
				
				Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
					ЗаполнитьСтатусыСерийныхНомеров(ЗаданияПоСтрокам, МассивЗаданий); 
				КонецЕсли;
			Исключение
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				shoesD="";
				Если Данные <> Неопределено И данные.Свойство("shoesData",shoesD) Тогда
					СерийныйНомер.Статус = shoesD.status;
				КонецЕсли;
					
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивЗаданий.Количество() >= 0 Тогда
		ЗаполнитьСтатусыСерийныхНомеров(ЗаданияПоСтрокам, МассивЗаданий); 
	КонецЕсли;
	
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ЗаполнитьПоВсемОстаткамНаСервере(Объект_1)
	// Вставить содержимое обработчика.
	Объект=Объект_1.ПолучитьОбъект();
			
	
	
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер КАК СерийныйНомер,
				|	СУММА(ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток) КАК КоличествоОстаток
				|ИЗ
				|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Остатки(, Организация = &Организация) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
				|
				|СГРУППИРОВАТЬ ПО
				|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер";
			
			Запрос.УстановитьПараметр("Организация", Объект.Организация);
			
			
			
			 РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗАпроса.Прямой);
			
				КоличествоНеобходмо=РезультатЗапроса.Количество();
				Смещение=0;
				Пока КоличествоНеобходмо>0 Цикл
					Если КоличествоНеобходмо<=99999 Тогда
						Для Сч=Смещение По  Смещение+КоличествоНеобходмо-1 Цикл
							
							GGG=РезультатЗапроса[Сч].СерийныйНомер;
							cis=GGG;
							
								Продукция=Неопределено;
							
							ДД=Объект.СерийныеНомера.Добавить();
							Если ЗначениеЗаполнено(Продукция) Тогда
								ДД.НаименованиеТовара=Продукция
							Иначе
								Если Сред(cis,1,2)="01" тогда
								
									ДД.GTIN=Сред(cis,3,14);
								Иначе
									ДД.GTIN=Сред(cis,1,14);
									
								КонецЕсли;
								ДД.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(ДД.GTIN));
							КонецЕсли;
							ДД.cis=cis;
							
							Добав=Объект.Товары.Найти(ДД.НаименованиеТовара,"GTIN");
							Если Добав=Неопределено Тогда
								Добав=Объект.Товары.Добавить();
								Добав.GTIN=ДД.НаименованиеТовара;
								Добав.ДекларацияИлиСертификатСоответствия=РЕгистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(
										ТекущаяДата(),Новый Структура("Продукция",Добав.GTIN)).Документ;
								Добав.НомерСтрокиСвязи=Добав.НомерСтроки;
								Добав.КодТНВЭД=Добав.GTIN.КодТНВЭД;
							КонецЕсли;
							ДД.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
							Добав.КоличествоКМ=Добав.КоличествоКМ+1;
							Добав.СпособВыпускаТоваров="";
							
						КонецЦикла;;
						
						КоличествоНеобходмо=0;               
					Иначе
						НадоСпсать=Мин(КоличествоНеобходмо,99999);
						ДокумС=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
						ЗаполнитьЗначенияСвойств(ДокумС,Объект,,"Номер");
						ДокумС.Дата=ТекущаяДата();
						Для Сч=Смещение По Смещение+НадоСпсать-1 Цикл
						GGG=РезультатЗапроса[Сч].СерийныйНомер;
							cis=GGG;
							
								Продукция=Неопределено;
							
							
							ДД=ДокумС.СерийныеНомера.Добавить();
							Если ЗначениеЗаполнено(Продукция) Тогда
								ДД.НаименованиеТовара=Продукция
							Иначе
								Если Сред(cis,1,2)="01" тогда
								
									ДД.GTIN=Сред(cis,3,14);
								Иначе
									ДД.GTIN=Сред(cis,1,14);
									
								КонецЕсли;
								ДД.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(ДД.GTIN));;
							КонецЕсли;
							ДД.cis=cis;
							
							Добав=ДокумС.Товары.Найти(ДД.НаименованиеТовара,"GTIN");
							Если Добав=Неопределено Тогда
								Добав=ДокумС.Товары.Добавить();
								Добав.GTIN=ДД.НаименованиеТовара;
								Добав.ДекларацияИлиСертификатСоответствия=РЕгистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(
										ТекущаяДата(),Новый Структура("Продукция",Добав.GTIN)).Документ;
								Добав.НомерСтрокиСвязи=Добав.НомерСтроки;
								Добав.КодТНВЭД=Добав.GTIN.КодТНВЭД;
							КонецЕсли;
							ДД.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
							Добав.КоличествоКМ=Добав.КоличествоКМ+1;
							Добав.СпособВыпускаТоваров="";

						КонецЦикла;
						Смещение=Смещение+НадоСпсать;
						КоличествоНеобходмо=КоличествоНеобходмо-НадоСпсать;
						ДокумС.Записать();
						Сообщить("Создан документ "+Строка(ДокумС.Ссылка));
					КонецЕсли;
					
				КонецЦикла;
		       
			//ЭтотОбъект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотИмпорт;
			 
	
	Объект.Записать();	
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПоВсемОстаткам(Команда)
	ЭтаФорма.Записать();
	ЗаполнитьПоВсемОстаткамНаСервере(Объект.Ссылка);
	ЭтаФорма.Прочитать();
КонецПроцедуры


&НаКлиенте
Процедура СерийныеНомераТаблицаСерийныйНомерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
		Отказ=Истина;
		Если Элементы.СерийныеНомераТаблица.ТекущиеДанные<>Неопределено Тогда
			РРР=Элементы.СерийныеНомераТаблица.ТекущиеДанные.GTIN;
		//	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.cis)  Тогда
		//		
		//		ОткрытьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаВыбораКМ",
		//		Новый структура("Организация,ТекущаяСтрока",Объект.Организация,РРР),,,,,
		//		Новый ОписаниеОповещения("ПослеВыбораПродукции",ЭтаФорма,Элемент));
		//		Возврат;
		//	КонецЕсли;
		//		
		//	
		Иначе
			РРР=Неопределено;
		КонецЕсли;
		ОткрытьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаВыбораКМ",
		Новый структура("Организация,ТекущаяСтрока",Объект.Организация,РРР),,,,,
		Новый ОписаниеОповещения("ПослеВыбораПродукции_1",ЭтаФорма,Элементы.СерийныеНомераТаблица.ТекущиеДанные.ПолучитьИдентификатор()));
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПродукции_1(РР,ДД) Экспорт
	Если РР<>Неопределено Тогда
		Для Каждого Стр Из РР ЦИкл
			ШтрихКод=Стр;
			ЗаполнитьИнфуПоШтриху_1(ДД);
		Конеццикла;
		ШтрихКод="";
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИнфуПоШтриху_1(ДД)
	Стр_2=Неопределено;
	//Если Элементы.СерийныеНомераТаблица.ТекущиеДанные<>Неопределено
//	Стр_2=Элементы.СерийныеНомераТаблица.ТекущиеДанные.ПолучитьИдентификатор();
	//КонецЕсли;
	
	ЗаполнитьИнфуПоШтрихуСервере_1(ДД)
КонецПроцедуры

Процедура ЗаполнитьИнфуПоШтрихуСервере_1(Стр_3)
		Стр=Объект.СерийныеНомера.НайтиПоИдентификатору(Стр_3);
	
	
	Если СтрДлина(Штрихкод)=20 Тогда
		Штрихкод=Сред(Штрихкод,3);
	КонецЕсли;
	
	ШтрихКод_1=(ШтрихКод);
	
	//ШтрихКод_1=КодироватьСтроку(ШтрихКод,СпособКодированияСтроки.КодировкаURL);
	//штрихКод=СтрЗаменить(ШтрихКод_1,"%1D","");
	Если НЕ Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак"
		И НЕ Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак"
	Тогда
		ШтрихКод=Сред(ШтрихКод,1,38);
	//штрихКод_1=РаскодироватьСтроку(ШтрихКод,СпособКодированияСтроки.КодировкаURL);
	
			Если Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Фото" Тогда
								ШтрихКод=Сред(ШтрихКод,1,38);
		ИначеЕсли Сред(штрихКод_1,32,3)<>"240" Тогда
								ШтрихКод=Сред(ШтрихКод,1,31);
								//ШтрихКод=Сред(штрихКод_1,1,Найти(штрихКод_1,"%1D")-1);
								//ШтрихКод=РаскодироватьСтроку(ШтрихКод,СпособКодированияСтроки.КодировкаURL);
							Иначе
								
								           ШтрихКод=штрихКод_1;
							
							КонецЕсли;
	КонецЕсли;					
	//Если Стр_1=Неопределено Тогда
	Если Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",ШтрихКод)).Количество()>0 
		ИЛИ Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НовыйКМ",ШтрихКод)).Количество()>0
		Тогда
			Сообщить("CiS "+ШтрихКод+" уже присутствует в документе");
			Возврат;
		КонецЕсли;
	//КонецЕсли;	
	
	
	
	//Если Стр_1=истина Тогда
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.СерийныйНомер
		|ИЗ
		|	РегистрНакопления.ОстаткиКМ_в_Обороте_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки";
	//Иначе
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция,
//		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер
//		|ИЗ
//		|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Остатки(
//		|			,
//		|			Организация = &Организация
//		|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки";
	
//КонецЕсли;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СерийныйНомер", ШтрихКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Стр_1=Истина;
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество()=0 Тогда
				
		Если РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ПриЗаполненииОтгрузкиНеУчитыватьОстаток 
			ИЛИ Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотВозвратВРозницу
			тогда
			
			
			попытка
				Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
				Число(Сред(ШтрихКод,3,14)));;
			Исключение
				Продукция=Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка();
			КонецПопытки;
			Если Стр=Неопределено тогда
				Добав=Объект.СерийныеНомера.Добавить();
			Иначе
					Добав=Стр;
				КонецЕсли;
				Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
				Добав.НаименованиеТовара=Продукция;
				Если Стр_1=Истина Тогда
					Добав.cis=ШтрихКод;
				Иначе
					Добав.НовыйКМ=ШтрихКод;
				КонецЕсли;
				
				Добав.Сертификат=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(Объект.Дата,
					Новый Структура("Продукция",Продукция)).Документ;
				
			//	ППП=Объект.Товары.НайтиСтроки(Новый структура("gtin",Продукция));
			//	Если ППП.Количество()=0 Тогда
			//		Добав_1=Объект.Товары.Добавить();
			//		Добав_1.GTIN=Продукция;
			//		Добав_1.КодТНВЭД=Продукция.КодТНВЭД;
			//Если Продукция.СтранаПроизводства.Альфа2="RU" Тогда
			//	//СтрП="Производство в РФ";
			//		Добав_1.СпособВыпускаТоваров="Производство в РФ";
			//Иначе
			//	//СтрП="Ввезен в РФ";
			//		Добав_1.СпособВыпускаТоваров="Ввезен в РФ";
			//	
			//КонецЕсли;
			//		Добав_1.НомерСтрокиСвязи=Добав_1.ПолучитьИдентификатор();
			//		Добав_1.КоличествоКМ=1;
			//		Добав_1.ДекларацияИлиСертификатСоответствия=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(Объект.Дата,
			//		Новый Структура("Продукция",Продукция)).Документ;
			//	Иначе
			//		Добав_1=ППП[0];
			//		Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
			//		
			//	КонецЕсли;
			//	Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
				
			
		КонецЕслИ;
	Иначе
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
			Если ВыборкаДетальныеЗаписи.СерийныйНомер<>ШтрихКод Тогда
				Продолжить;
			КонецЕсли;
		
			
			Продукция=ВыборкаДетальныеЗаписи.Продукция;
			Если Стр=Неопределено тогда
				Добав=Объект.СерийныеНомера.Добавить();
			Иначе
				Добав=Стр;
			КонецЕсли;
			Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
			Добав.НаименованиеТовара=Продукция;
			Если Стр_1=Истина Тогда
					Добав.cis=ШтрихКод;
				Иначе
					Добав.НовыйКМ=ШтрихКод;
				КонецЕсли;
				

			
				Добав.Сертификат=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(Объект.Дата,
					Новый Структура("Продукция",Продукция)).Документ;
			
		//	
		//	ППП=Объект.Товары.НайтиСтроки(Новый структура("gtin",Продукция));
		//	Если ППП.Количество()=0 Тогда
		//		Добав_1=Объект.Товары.Добавить();
		//		Добав_1.GTIN=Продукция;
		//		Добав_1.КодТНВЭД=Продукция.КодТНВЭД;
		//Если Продукция.СтранаПроизводства.Альфа2="RU" Тогда
		//	//СтрП="Производство в РФ";
		//		Добав_1.СпособВыпускаТоваров="Производство в РФ";
		//Иначе
		//	//СтрП="Ввезен в РФ";
		//		Добав_1.СпособВыпускаТоваров="Ввезен в РФ";
		//	
		//КонецЕсли;
		//		Добав_1.НомерСтрокиСвязи=Добав_1.ПолучитьИдентификатор();
		//		Добав_1.КоличествоКМ=1;
		//		Добав_1.ДекларацияИлиСертификатСоответствия=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(Объект.Дата,
		//		Новый Структура("Продукция",Продукция)).Документ;
		//	Иначе
		//		Добав_1=ППП[0];
		//		Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
		//		
		//	КонецЕсли;
		//	Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры


&НаКлиенте
Процедура СерийныеНомераТаблицаПоле2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
		Отказ=Истина;
		Если Элементы.СерийныеНомераТаблица.ТекущиеДанные<>Неопределено Тогда
			РРР=Элементы.СерийныеНомераТаблица.ТекущиеДанные.GTIN;
		//	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.cis)  Тогда
				
				ОткрытьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаВыбораКМ",
				Новый структура("Организация,ТекущаяСтрока",Объект.Организация,РРР),,,,,
				Новый ОписаниеОповещения("ПослеВыбораПродукции",ЭтаФорма,Элемент));
				Возврат;
		//	КонецЕсли;
		//		
		//	
		Иначе
			РРР=Неопределено;
		КонецЕсли;
		//ОткрытьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаВыбораКМ",
		//Новый структура("Организация,ТекущаяСтрока",Объект.Организация,РРР),,,,,
		//Новый ОписаниеОповещения("ПослеВыбораПродукции",ЭтаФорма,Элементы.СерийныеНомераТаблица.ТекущиеДанные.ПолучитьИдентификатор()));
		
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьВСтарыеКМ(Команда)
	// Вставить содержимое обработчика.
	ЗагрузитьВСтарыеКМ=Истина;
	МассивКМ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ВернутьКМИзФайлов();
		
			Для Каждого ШтрихОбраб из  МассивКМ Цикл
				//ШтрихОбраб=ТекстовыйД.ПолучитьСтроку(Сч);
			
					ШтрихКод68=ШтрихОбраб;
					
					шТРИХкОД=ШтрихКод68;
					шТРИХкОД=СтрЗаменить(шТРИХкОД,Символ(29),"");
					ЗаполнитьИнфуПоШтриху(Истина);

				
				КонецЦикла;
	
	
	
	ПодключитьОбработчикОЖидания("аа",0.1,Истина);
	
	ЗагрузитьВСтарыеКМ=Ложь;
КонецПроцедуры

