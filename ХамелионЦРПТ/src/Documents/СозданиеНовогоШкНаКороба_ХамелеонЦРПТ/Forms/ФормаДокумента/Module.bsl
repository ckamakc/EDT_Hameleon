&НаКлиенте
Перем ДанныеИзПользователя;
Функция ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр =  Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр =  Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр =  Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр =  Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр =  Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр =  Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр =  Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр =  Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр =  Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции


Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ИспользоватьАльтернативныйАлгоритм = 
		Найти(Параметр1, "%")
		Или Найти(Параметр2, "%")
		Или Найти(Параметр3, "%")
		Или Найти(Параметр4, "%")
		Или Найти(Параметр5, "%")
		Или Найти(Параметр6, "%")
		Или Найти(Параметр7, "%")
		Или Найти(Параметр8, "%")
		Или Найти(Параметр9, "%");
		
	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	КонецЕсли;
	
	Возврат СтрокаПодстановки;
КонецФункции

Функция ОбъектXDTOПоИмениСвойства(ОбъектXDTOРодитель, ИмяСвойства, URIПространстваИмен = Неопределено) Экспорт
	
	Если ОбъектXDTOРодитель = Неопределено Тогда
		СвойствоXDTO = ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен).КорневыеСвойства.Получить(ИмяСвойства);
	Иначе
		СвойствоXDTO = ОбъектXDTOРодитель.Тип().Свойства.Получить(ИмяСвойства);
	КонецЕсли;
	
	Если СвойствоXDTO = Неопределено Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Свойство %1 отсутствует в составе типов информационной системы маркировки.'"), ИмяСвойства);
	Иначе
		Возврат ФабрикаXDTO.Создать(СвойствоXDTO.Тип);
	КонецЕсли;
	
КонецФункции

Процедура УстановитьВерсиюСхемОбменаПакета(Пакет) Экспорт
	
	Если Не ЗначениеЗаполнено(Пакет.version) Тогда
		// Берем версию из URI пространства имен: http://nalog.ru/MarkInfo/med/1.27
		Пакет.version = Прав(Пакет.Тип().URIПространстваИмен, 4);
	Иначе
		Пакет.version = Пакет.version;
	КонецЕсли;
	
КонецПроцедуры

// Функция - Есть реквизит или свойство объекта
//
// Параметры:
//  Объект	 - в котором проверяется наличие реквизита или свойства
//  Свойство - проверяемое свойство по имени
// 
// Возвращаемое значение:
//  Булево - признак наличия реквизита/свойства
//
Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Экспорт
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции


Процедура ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, ЗначениеСвойства = Неопределено, КэшОшибок = Неопределено, Глубина = Неопределено) Экспорт
	
	Если Не ЕстьРеквизитИлиСвойствоОбъекта(ОбъектXDTO, ИмяСвойства) Тогда
		Возврат;
	КонецЕсли;
	
	РазрешеноНеЗаполнять = ОбъектXDTO.Тип().Свойства.Получить(ИмяСвойства).НижняяГраница = 0;
	Если Не ЗначениеЗаполнено(ЗначениеСвойства) И РазрешеноНеЗаполнять Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Если ТипЗнч(ОбъектXDTO[ИмяСвойства]) = Тип("СписокXDTO") Тогда
			ОбъектXDTO[ИмяСвойства].Добавить(ЗначениеСвойства);
		Иначе
			ОбъектXDTO[ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли;
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());		
	КонецПопытки;
	
КонецПроцедуры

Функция СтруктураСообщенияКПередаче() Экспорт
	
	Сообщение = Новый Структура;
	
	Сообщение.Вставить("ТекстСообщения");
	Сообщение.Вставить("ИдентификаторСубъектаОбращения");
	Сообщение.ВСтавить("ИдентификаторЗапроса");
	
	Сообщение.Вставить("ТекстОшибки", "");
	Сообщение.Вставить("Ошибки", Новый Соответствие);
	
	Сообщение.Вставить("Ссылка");
	Сообщение.Вставить("ОбновитьСостояниеПодтверждения", Ложь);
	Сообщение.Вставить("СообщениеОснование");
	Сообщение.Вставить("УникальныйИдентификатор");
	Сообщение.Вставить("ПередачаСведенийЧерезСКЗКМ", Ложь);
	
	// Для отображения в сообщениях пользователям
	Сообщение.Вставить("Описание", "");
	
	Сообщение.Вставить("Операция");
	Сообщение.Вставить("КодОперации");
	
	// Для сохранения в Протокол обмена
	Сообщение.Вставить("ТипСообщения");
	Сообщение.Вставить("Документ");
	
	// Для обновления в формах
	Сообщение.Вставить("Основание");
	
	Сообщение.Вставить("Размер");
	Сообщение.Вставить("ХешСумма");
	Сообщение.Вставить("Подпись");
	
	Возврат Сообщение;
	
КонецФункции

// Формирует представление даты с часовым поясом.
//
// Параметры:
//  Дата         - Дата   - преобразуемая дата.
//  ЧасовойПояс  - Строка - часовой пояс.
// 
// Возвращаемое значение:
//  Строка - представление даты с часовым поясом.
//
Функция ДатаСЧасовымПоясом(Дата, Знач ЧасовойПояс = Неопределено) Экспорт
	
	Если ЧасовойПояс = Неопределено Тогда
		ЧасовойПояс = ЧасовойПоясСеанса();
	КонецЕсли;
	
	Смещение = (Дата - УниверсальноеВремя(Дата, ЧасовойПояс)) / 3600;
	Если Смещение > 0 Тогда
		Результат = Формат(Дата, "ДФ=yyyy-MM-ddTЧЧ:мм:сс") + "+" + Формат(+Смещение, "ЧЦ=2; ЧН=; ЧВН=") + ":00";
	Иначе
		Результат = Формат(Дата, "ДФ=yyyy-MM-ddTЧЧ:мм:сс") + "-" + Формат(-Смещение, "ЧЦ=2; ЧН=; ЧВН=") + ":00";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует представление даты в формате Coordinated Universal Time.
//
// Параметры:
//  Дата - ДатаВремя - дата, представление которой необходимо получить.
// 
// Возвращаемое значение:
//  Строка - представление даты в формате Coordinated Universal Time(UTC).
//
Функция ДатаUTC(Дата) Экспорт
	
	Результат = Формат(Дата, "ДФ=yyyy-MM-ddTЧЧ:мм:сс") + "Z";
	
	Возврат Результат;
	
КонецФункции

// Возвращает временную дату, которая будет в дальнейшем преобразована в дату с часовым поясом.
//
// Параметры:
//  Дата - Дата - Дата для преобразования.
// 
// Возвращаемое значение:
//  Дата - Временная дата.
//
Функция ВременнаяДата(Дата) Экспорт
	
	Возврат ДобавитьМесяц(Дата, -12 * 1000);
	
КонецФункции


Процедура ЗапишемВРегистр(ТекстДокумент)
	
	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Объект.Ссылка);
	РегДв.Отбор.Вид.Установить("Отправлен заказ");
	Добав=РегДв.Добавить();
	Добав.Документ=ОБъект.Ссылка;
	Добав.Вид="Отправлен заказ";
	Добав.Файл=Новый ХранилищеЗначения(ТекстДокумент,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
КонецПроцедуры

Процедура ЗапишемВРегистр_Ответ(ТекстДокумент)
	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Объект.Ссылка);
	РегДв.Отбор.Вид.Установить("Получили ответ");
	Добав=РегДв.Добавить();
	Добав.Документ=ОБъект.Ссылка;
	Добав.Вид="Получили ответ";
	Добав.Файл=Новый ХранилищеЗначения(ТекстДокумент,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
КонецПроцедуры


&НаКлиенте
Процедура Поле18АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если СтрДлина(Текст)>=18 Тогда
		       СтандартнаяОбработка=Ложь;
			   ШтрихКод=Текст;
			Если СтрДлина(ШтрихКод)<24 Тогда
				ШтрихКод=СтрЗаменить(ШтрихКод,Символ(29),"");
				ШтрихКод=СтрЗаменить(ШтрихКод,"|","");
				ШтрихКод=Сред(ШтрихКод,1,20);
				Если СтрДлина(ШтрихКод)=19 Тогда
					ШтрихКод=Сред(ШтрихКод,1,18);
				КонецЕсли;
				
				
			КонецЕсли;
	Если СтрДлина(Штрихкод)=20 Тогда
		Штрихкод=Сред(Штрихкод,3);
	КонецЕсли;
	ТипУпаковки=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ВернутьИнформациюОКМ(ШтрихКод,ДанныеИзПользователя);
			ЗаполнитьИнфуПоШтриху(ТипУпаковки);
	ПодключитьОбработчикОЖидания("аа",0.1,Истина);
	Иначе
		ШтрихКод="";
		
		ПодключитьОбработчикОжидания("аа",0.1,Истина);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура аа() Экспорт
	ШтрихКод="";
	ЭтаФорма.ТекущийЭлемент=Элементы.ШтрихКод;
КонецПроцедуры


&наклиенте
процедура моо_1() экспорт
	
	
	Поле18ПриИзменении("");
конецпроцедуры

&НаКлиенте
Процедура моо_2() Экспорт
	ЭтаФорма.ТекущийЭлемент=Элементы.ШтрихКод;
КонецПроцедуры

&НаКлиенте
Процедура Поле18ПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если СтрДлина(ШтрихКод)<24 Тогда
		ШтрихКод=СтрЗаменить(ШтрихКод,Символ(29),"");
		ШтрихКод=СтрЗаменить(ШтрихКод,"|","");
		ШтрихКод=Сред(ШтрихКод,1,20);
		Если СтрДлина(ШтрихКод)=19 Тогда
			ШтрихКод=Сред(ШтрихКод,1,18);
		КонецЕсли;
		
		
	КонецЕсли;
	Если СтрДлина(Штрихкод)=20 Тогда
		Штрихкод=Сред(Штрихкод,3);
	КонецЕсли;
	ТипУпаковки=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ВернутьИнформациюОКМ(ШтрихКод,ДанныеИзПользователя);
			ЗаполнитьИнфуПоШтриху(ТипУпаковки);
	ПодключитьОбработчикОЖидания("аа",0.1,Истина);
		
КонецПроцедуры


Процедура ЗаполнитьИнфуПоШтриху_1(ТипУпаковки)
	
	
	
	Если ТипУпаковки=истина Тогда
		Если Объект.Марки.НайтиСтроки(Новый Структура("Марка",ШтрихКод)).Количество()>0 Тогда
			Сообщить("Данный CIS "+Штрихкод+" уже присутствует в документе");
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Если Объект.СтатусКМ=Перечисления.СтатусыКМДляАгрегации_ХамелеонЦРПТ.КМВОбороте Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция КАК Продукция,
			|	СУММА(ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток - ЕСТЬNULL(Резервы_ХамелеонЦРПТОстатки.КоличествоОстаток, 0)) КАК Остаток
			|ИЗ
			|	РегистрНакопления.ОстаткиКМ_в_Обороте_ХамелеонЦРПТ.Остатки(
			|			,
			|			Организация = &Организация
			|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Резервы_ХамелеонЦРПТ.Остатки(
			|				,
			|				Организация = &Организация
			|					И СерийныйНомер = &СерийныйНомер) КАК Резервы_ХамелеонЦРПТОстатки
			|		ПО ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер = Резервы_ХамелеонЦРПТОстатки.СерийныйНомер
			|			И ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Организация = Резервы_ХамелеонЦРПТОстатки.Организация
			|
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция
			|ИТОГИ
			|	СУММА(Остаток)
			|ПО
			|	Продукция";
			
	ИначеЕсли  Объект.СтатусКМ=Перечисления.СтатусыКМДляАгрегации_ХамелеонЦРПТ.КМДоЭммитирования Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.Продукция КАК Продукция,
			|	СУММА(ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.КоличествоОстаток - ЕСТЬNULL(Резервы_ХамелеонЦРПТОстатки.КоличествоОстаток, 0)) КАК Остаток
			|ИЗ
			|	РегистрНакопления.ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТ.Остатки(
			|			,
			|			Организация = &Организация
			|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Резервы_ХамелеонЦРПТ.Остатки(
			|				,
			|				Организация = &Организация
			|					И СерийныйНомер = &СерийныйНомер) КАК Резервы_ХамелеонЦРПТОстатки
			|		ПО ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.СерийныйНомер = Резервы_ХамелеонЦРПТОстатки.СерийныйНомер
			|			И ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.Организация = Резервы_ХамелеонЦРПТОстатки.Организация
			|
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.Продукция
			|ИТОГИ
			|	СУММА(Остаток)
			|ПО
			|	Продукция";
		
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция КАК Продукция,
			|	СУММА(ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток - ЕСТЬNULL(Резервы_ХамелеонЦРПТОстатки.КоличествоОстаток, 0)) КАК Остаток
			|ИЗ
			|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Остатки(
			|			,
			|			Организация = &Организация
			|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Резервы_ХамелеонЦРПТ.Остатки(
			|				,
			|				Организация = &Организация
			|					И СерийныйНомер = &СерийныйНомер) КАК Резервы_ХамелеонЦРПТОстатки
			|		ПО ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер = Резервы_ХамелеонЦРПТОстатки.СерийныйНомер
			|			И ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Организация = Резервы_ХамелеонЦРПТОстатки.Организация
			|
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция
			|ИТОГИ
			|	СУММА(Остаток)
			|ПО
			|	Продукция";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("СерийныйНомер", ШтрихКод);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
			Если 		                   ВыборкаДетальныеЗаписи.Остаток<=0 Тогда
				Продолжить;
			КонецЕсли;
			Если Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.ИзъятиеИзУпаковки Тогда
				Объект.НомерКороба=ШтрихКод;
				Объект.Продукция=ВыборкаДетальныеЗаписи.Продукция;
				Если Значениезаполнено(Объект.НомерКороба) Тогда
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	УникальныеУпаковки_ХамелеонЦРПТ.УИТ,
						|	УникальныеУпаковки_ХамелеонЦРПТ.Ссылканаобъект
						|ИЗ
						|	РегистрСведений.УникальныеУпаковки_ХамелеонЦРПТ КАК УникальныеУпаковки_ХамелеонЦРПТ
						|ГДЕ
						|	УникальныеУпаковки_ХамелеонЦРПТ.УИТУпаковки = &УИТУпаковки";
					
					Запрос.УстановитьПараметр("УИТУпаковки", Объект.НомерКороба);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Объект.Марки.Очистить();
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						Добав=Объект.Марки.Добавить();
						Добав.cis=ВыборкаДетальныеЗаписи.УИТ;
						Добав.Марка=Добав.cis;
						Добав.Продукция=ВыборкаДетальныеЗаписи.Ссылканаобъект;
						
					КонецЦикла;
					
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				КонецЕсли;
				
				Прервать;
				
			Иначе
				Добав=Объект.Марки.Добавить();
				Добав.Марка=ШтрихКод;
				Добав.Продукция=ВыборкаДетальныеЗаписи.Продукция;
			КонецЕсли;
			
		КонецЦикла;
		
		
		Возврат;

	КонецЕсли;
	
//	ШтрихКод=КодироватьСтроку(ШтрихКод,СпособКодированияСтроки.КодировкаURL);
//	штрихКод=СтрЗаменить(ШтрихКод,"%1D","");
//	ШтрихКод=Сред(ШтрихКод,1,38);
////			Если Сред(ШтрихКод,32,3)<>"240" Тогда
	//							ШтрихКод=Сред(ШтрихКод,1,31);
	//						КонецЕсли;

	Если Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.Расформирование Тогда
		
		Движ=РегистрыСведений.УникальныеУпаковки_ХамелеонЦРПТ.Получить(Новый Структура("УИТ")).УИТУпаковки;
		Если ЗначениеЗаполнено(Движ) Тогда
		
			Если Объект.Марки.НайтиСтроки(Новый Структура("Марка",Движ)).Количество()>0 Тогда
				Сообщить("Данный CIS "+Движ+" уже присутствует в документе");
				Возврат;
			КонецЕсли;
			
			Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция КАК Продукция
					|ИЗ
					|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Остатки(
					|			,
					|			Организация = &Организация
					|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
					|
					|СГРУППИРОВАТЬ ПО
					|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция
					|ИТОГИ ПО
					|	Продукция";
				
				Запрос.УстановитьПараметр("Организация", Объект.Организация);
				Запрос.УстановитьПараметр("СерийныйНомер", Движ);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					Если 		                   ВыборкаДетальныеЗаписи.Остаток<=0 Тогда
						Продолжить;
					КонецЕсли;
					Добав=Объект.Марки.Добавить();
					Добав.Марка=Движ;
					Добав.Продукция=ВыборкаДетальныеЗаписи.Продукция;
			
					
				КонецЦикла;
				
			
			
			
		КонецЕсли;
		
		Возврат;
	КонецЕслИ;
	
	
	
	Если Объект.Марки.НайтиСтроки(Новый Структура("Марка",ШтрихКод)).Количество()>0 Тогда
		Сообщить("Данный CIS "+Штрихкод+" уже присутствует в документе");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция КАК Продукция,
		|	СУММА(ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток - -ЕСТЬNULL(Резервы_ХамелеонЦРПТОстатки.КоличествоОстаток, 0)) КАК Остаток
		|ИЗ
		|	РегистрНакопления.ОстаткиКМ_в_Обороте_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Резервы_ХамелеонЦРПТ.Остатки(
		|				,
		|				Организация = &Организация
		|					И СерийныйНомер = &СерийныйНомер) КАК Резервы_ХамелеонЦРПТОстатки
		|		ПО ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер = Резервы_ХамелеонЦРПТОстатки.СерийныйНомер
		|			И ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Организация = Резервы_ХамелеонЦРПТОстатки.Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.КоличествоОстаток
		|ИТОГИ
		|	СУММА(Остаток)
		|ПО
		|	Продукция";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СерийныйНомер", ШтрихКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Если 		                   ВыборкаДетальныеЗаписи.Остаток<=0 Тогда
			Продолжить;
		КонецЕсли;
		Добав=Объект.Марки.Добавить();
		Добав.Марка=ШтрихКод;
		Добав.Продукция=ВыборкаДетальныеЗаписи.Продукция;
			
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры


Процедура ЗаполнитьИнфуПоШтриху(ТипУпаковки)
	
	
	
	
	Если ТипУпаковки=Истина 
		И
		Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование<>"Табак"
		И Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование<>"Альтернативный табак"
	//	И Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование<>"Фармацевтика"
		Тогда
		Если Объект.Марки.НайтиСтроки(Новый Структура("Марка",ШтрихКод)).Количество()>0 Тогда
			Сообщить("Данный CIS "+Штрихкод+" уже присутствует в документе");
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Если Объект.СтатусКМ=Перечисления.СтатусыКМДляАгрегации_ХамелеонЦРПТ.КМВОбороте Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция КАК Продукция,
			|	СУММА(ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток - ЕСТЬNULL(Резервы_ХамелеонЦРПТОстатки.КоличествоОстаток, 0)) КАК Остаток
			|ИЗ
			|	РегистрНакопления.ОстаткиКМ_в_Обороте_ХамелеонЦРПТ.Остатки(
			|			,
			|			Организация = &Организация
			|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Резервы_ХамелеонЦРПТ.Остатки(
			|				,
			|				Организация = &Организация
			|					И СерийныйНомер = &СерийныйНомер) КАК Резервы_ХамелеонЦРПТОстатки
			|		ПО ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер = Резервы_ХамелеонЦРПТОстатки.СерийныйНомер
			|			И ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Организация = Резервы_ХамелеонЦРПТОстатки.Организация
			|
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция
			|ИТОГИ
			|	СУММА(Остаток)
			|ПО
			|	Продукция";
			
		Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция КАК Продукция,
			|	СУММА(ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток - ЕСТЬNULL(Резервы_ХамелеонЦРПТОстатки.КоличествоОстаток, 0)) КАК Остаток
			|ИЗ
			|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Остатки(
			|			,
			|			Организация = &Организация
			|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Резервы_ХамелеонЦРПТ.Остатки(
			|				,
			|				Организация = &Организация
			|					И СерийныйНомер = &СерийныйНомер) КАК Резервы_ХамелеонЦРПТОстатки
			|		ПО ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер = Резервы_ХамелеонЦРПТОстатки.СерийныйНомер
			|			И ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Организация = Резервы_ХамелеонЦРПТОстатки.Организация
			|
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция
			|ИТОГИ
			|	СУММА(Остаток)
			|ПО
			|	Продукция";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("СерийныйНомер", ШтрихКод);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		надо=Ложь;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
			Если 		                   ВыборкаДетальныеЗаписи.Остаток<=0 Тогда
				Продолжить;
			КонецЕсли;
			
			Надо=истина;
		Конеццикла;
		
		ВыборкаДетальныеЗаписи.Сбросить();
		Если Надо=Ложь Тогда
			
								
					Если Объект.СтатусКМ<>Перечисления.СтатусыКМДляАгрегации_ХамелеонЦРПТ.КМВОбороте Тогда
							Запрос.Текст = 
								"ВЫБРАТЬ
								|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция КАК Продукция,
								|	СУММА(ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток - ЕСТЬNULL(Резервы_ХамелеонЦРПТОстатки.КоличествоОстаток, 0)) КАК Остаток
								|ИЗ
								|	РегистрНакопления.ОстаткиКМ_в_Обороте_ХамелеонЦРПТ.Остатки(
								|			,
								|			Организация = &Организация
								|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
								|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Резервы_ХамелеонЦРПТ.Остатки(
								|				,
								|				Организация = &Организация
								|					И СерийныйНомер = &СерийныйНомер) КАК Резервы_ХамелеонЦРПТОстатки
								|		ПО ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер = Резервы_ХамелеонЦРПТОстатки.СерийныйНомер
								|			И ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Организация = Резервы_ХамелеонЦРПТОстатки.Организация
								|
								|СГРУППИРОВАТЬ ПО
								|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция
								|ИТОГИ
								|	СУММА(Остаток)
								|ПО
								|	Продукция";
								
							Иначе
							Запрос.Текст = 
								"ВЫБРАТЬ
								|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция КАК Продукция,
								|	СУММА(ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток - ЕСТЬNULL(Резервы_ХамелеонЦРПТОстатки.КоличествоОстаток, 0)) КАК Остаток
								|ИЗ
								|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Остатки(
								|			,
								|			Организация = &Организация
								|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
								|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Резервы_ХамелеонЦРПТ.Остатки(
								|				,
								|				Организация = &Организация
								|					И СерийныйНомер = &СерийныйНомер) КАК Резервы_ХамелеонЦРПТОстатки
								|		ПО ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер = Резервы_ХамелеонЦРПТОстатки.СерийныйНомер
								|			И ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Организация = Резервы_ХамелеонЦРПТОстатки.Организация
								|
								|СГРУППИРОВАТЬ ПО
								|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция
								|ИТОГИ
								|	СУММА(Остаток)
								|ПО
								|	Продукция";
							КонецЕсли;
							
			        		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("СерийныйНомер", ШтрихКод);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда
			Если Объект.СтатусКМ=Перечисления.СтатусыКМДляАгрегации_ХамелеонЦРПТ.КМВОбороте Тогда
				Объект.СтатусКМ=Перечисления.СтатусыКМДляАгрегации_ХамелеонЦРПТ.КМЭмитирован
			Иначе
				Объект.СтатусКМ=Перечисления.СтатусыКМДляАгрегации_ХамелеонЦРПТ.КМВОбороте
				
					
				КонецЕсли;
			
		Конецесли;
			
			
			
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.Количество()=0 Тогда
			Если Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.Расформирование Тогда

					Добав=Объект.Марки.Добавить();
					Добав.cis=ШтрихКод;
					Добав.Марка=Добав.cis;
					//Добав.Продукция=ВыборкаДетальныеЗаписи.Ссылканаобъект;
			КонецЕсли;
		КонецЕслИ;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
			Если 		                   ВыборкаДетальныеЗаписи.Остаток<=0 Тогда
				Продолжить;
			КонецЕсли;
			Если Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.ИзъятиеИзУпаковки Тогда
				Объект.НомерКороба=ШтрихКод;
				Объект.Продукция=ВыборкаДетальныеЗаписи.Продукция;
				Если Значениезаполнено(Объект.НомерКороба) Тогда
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	УникальныеУпаковки_ХамелеонЦРПТ.УИТ,
						|	УникальныеУпаковки_ХамелеонЦРПТ.Ссылканаобъект
						|ИЗ
						|	РегистрСведений.УникальныеУпаковки_ХамелеонЦРПТ КАК УникальныеУпаковки_ХамелеонЦРПТ
						|ГДЕ
						|	УникальныеУпаковки_ХамелеонЦРПТ.УИТУпаковки = &УИТУпаковки";
					
					Запрос.УстановитьПараметр("УИТУпаковки", Объект.НомерКороба);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Объект.Марки.Очистить();
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						Добав=Объект.Марки.Добавить();
						Добав.cis=ВыборкаДетальныеЗаписи.УИТ;
						Добав.Марка=Добав.cis;
						Добав.Продукция=ВыборкаДетальныеЗаписи.Ссылканаобъект;
						
					КонецЦикла;
					
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				КонецЕсли;
				
				Прервать;
				
			Иначе
				Добав=Объект.Марки.Добавить();
				Добав.Марка=ШтрихКод;
				Добав.Продукция=ВыборкаДетальныеЗаписи.Продукция;
			КонецЕсли;
			
		КонецЦикла;
		
		
		Возврат;
	КонецЕсли;
	Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ВидДокументаУпаковок_ХамелеонЦРПТ.ИзъятиеИзУпаковки") Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихКод=КодироватьСтроку(ШтрихКод,СпособКодированияСтроки.КодировкаURL);
	штрихКод=СтрЗаменить(ШтрихКод,"%1D","");
	ШтрихКод_1=РаскодироватьСтроку(ШтрихКод,СпособКодированияСтроки.КодировкаURL);
	ШтрихКод=Сред(ШтрихКод_1,1,45);
	Если Сред(ШтрихКод,32,3)<>"240" Тогда
		//Если Найти(штрихКод_1,Символ(29))=0 Тогда
		Если Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Молоко" Тогда
				//ШтрихКод=Сред(ШтрихКод,1,39);
						Если Сред(ШтрихКод,32,4)="7003" Тогда	
			 			 	ШтрихКод=Сред(ШтрихКод,1,45);
						ИначеЕсли Сред(ШтрихКод,32,2)="17" Тогда	
						 	ШтрихКод=Сред(ШтрихКод,1,39);
						Иначе
							ШтрихКод=Сред(ШтрихКод,1,31);
							
						КонецЕсли;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак"
						ИЛИ Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак"
						Тогда
						Если СтрДлина(ШтрихКод)<>18  Тогда
							Если  Сред(ШтрихКод,1,2)="01" Тогда
				ШтрихКод=Сред(ШтрихКод,1,25);
			Иначе
				ШтрихКод=Сред(ШтрихКод,1,21);
				
			КонецЕсли;
		КонецЕсли;

		ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Фармацевтика" Тогда
				ШтрихКод=Сред(ШтрихКод,1,31);
		Если Сред(ШтрихКод,1,2)="01" Тогда
			ШтрихКод=Сред(ШтрихКод,3,14)+Сред(ШтрихКод,19);
		КонецЕсли;
		ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Фото" Тогда
				ШтрихКод=Сред(ШтрихКод,1,38);
			Иначе					
							//КОнецЕсли;

				ШтрихКод=Сред(ШтрихКод,1,31);
			КонецЕсли;
		//Иначе
		//		ШтрихКод=Сред(штрихКод_1,1,Найти(штрихКод_1,"%1D")-1);
		//		ШтрихКод=РаскодироватьСтроку(ШтрихКод,СпособКодированияСтроки.КодировкаURL);
		//КонецЕсли;		
	КонецЕсли;
	
	Если Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.Расформирование Тогда
		
		Движ=РегистрыСведений.УникальныеУпаковки_ХамелеонЦРПТ.Получить(Новый Структура("УИТ")).УИТУпаковки;
		Если ЗначениеЗаполнено(Движ) Тогда
		
			Если Объект.Марки.НайтиСтроки(Новый Структура("Марка",Движ)).Количество()>0 Тогда
				Сообщить("Данный CIS "+Движ+" уже присутствует в документе");
				Возврат;
			КонецЕсли;
			
			Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция КАК Продукция,
					|	СУММА(ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток-ЕСТЬNULL(Резервы_ХамелеонЦРПТОстатки.КоличествоОстаток, 0)) КАК Остаток
					|ИЗ
					|	РегистрНакопления.ОстаткиКМ_в_Обороте_ХамелеонЦРПТ.Остатки(
					|			,
					|			Организация = &Организация
					|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Резервы_ХамелеонЦРПТ.Остатки(
					|				,
					|				Организация = &Организация
					|					И СерийныйНомер = &СерийныйНомер) КАК Резервы_ХамелеонЦРПТОстатки
					|		ПО ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер = Резервы_ХамелеонЦРПТОстатки.СерийныйНомер
					|			И ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Организация = Резервы_ХамелеонЦРПТОстатки.Организация
					|
					|СГРУППИРОВАТЬ ПО
					|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция
					|ИТОГИ
					|	СУММА(Остаток)
					|ПО
					|	Продукция";
				
				Запрос.УстановитьПараметр("Организация", Объект.Организация);
				Запрос.УстановитьПараметр("СерийныйНомер", Движ);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					Если 		                   ВыборкаДетальныеЗаписи.Остаток<=0 Тогда
						Продолжить;
					КонецЕсли;
					Добав=Объект.Марки.Добавить();
					Добав.Марка=Движ;
					Добав.Продукция=ВыборкаДетальныеЗаписи.Продукция;
			
					
				КонецЦикла;
				
			
			
			
		КонецЕсли;
		
		Возврат;
	КонецЕслИ;
	
	
	
	Если Объект.Марки.НайтиСтроки(Новый Структура("Марка",ШтрихКод)).Количество()>0 Тогда
		Сообщить("Данный CIS "+Штрихкод+" уже присутствует в документе");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция КАК Продукция,
		|	СУММА(ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток - -ЕСТЬNULL(Резервы_ХамелеонЦРПТОстатки.КоличествоОстаток, 0)) КАК Остаток
		|ИЗ
		|	РегистрНакопления.ОстаткиКМ_в_Обороте_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Резервы_ХамелеонЦРПТ.Остатки(
		|				,
		|				Организация = &Организация
		|					И СерийныйНомер = &СерийныйНомер) КАК Резервы_ХамелеонЦРПТОстатки
		|		ПО ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер = Резервы_ХамелеонЦРПТОстатки.СерийныйНомер
		|			И ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Организация = Резервы_ХамелеонЦРПТОстатки.Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток
		|ИТОГИ
		|	СУММА(Остаток)
		|ПО
		|	Продукция";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СерийныйНомер", ШтрихКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Если 		                   ВыборкаДетальныеЗаписи.Остаток<=0 Тогда
			Продолжить;
		КонецЕсли;
		Добав=Объект.Марки.Добавить();
		Добав.Марка=ШтрихКод;
		Добав.Продукция=ВыборкаДетальныеЗаписи.Продукция;
			
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры


Функция ПроверкаНаДубльИДоЭтого(МаркаСоШтрихом,НомерСтроки)
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Структ=Команда29Север(МаркаСоШтрихом);
	Если Структ.Штрих=Неопределено Тогда
		//Сообщить("НЕ ПРАВИЛЬНЫЙ ШТРИХКОД "+МаркаСоШтрихом+" В СТРОКЕ "+Строка(НомерСтроки)+" ");
		Возврат Истина;
	Конецесли;
	МаркаСоШтрихом=Структ.ШтрихНовый;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	//ВыгрузитьТ=ОБъект.Марки.Выгрузить();
	НайтиСтроки=ОБъект.Марки.НайтиСтроки(Новый Структура("Марка",МаркаСоШтрихом));
	Для Каждого Стр Из НайтиСтроки Цикл
		Если Стр.НомерСтроки<>НомерСтроки ТОгда
			Сообщить("Вы уже остканировали штрихкод "+МаркаСоШтрихом+" в документ!!! Он в строке "+Строка(Стр.НомерСтроки)); 
			Возврат Истина;
		КонецЕсли;
	Конеццикла;
	
	
	
	Возврат Ложь;
	
	
КонецФункции


функция получитьИдТСм(НомерМарки) ЭКСПОРТ
	
//НомерМарки=ОБработатьРусскиеБуквы(НомерМарки);
	
	итр = 0;
	Значение=СокрЛП(НомерМарки);
		
		
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		// Данный фрагмент построен конструктором.
		// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Марки_V3_ЦРПТОстатки.СправкаАБ.НоменклатураЦРПТ КАК НоменклатураЦРПТ,
			|	Марки_V3_ЦРПТОстатки.СправкаАБ
			|ИЗ
			|	РегистрНакопления.Марки_V3_ЦРПТ.Остатки КАК Марки_V3_ЦРПТОстатки
			|ГДЕ
			|	Марки_V3_ЦРПТОстатки.Марка = &Марка";
		
		Запрос.УстановитьПараметр("Марка", СокрЛП(Значение));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
			Если Не ЗначениеЗаполнено(Объект.НоменклатураЦРПТ) тогда
				Объект.НоменклатураЦРПТ=ВыборкаДетальныеЗаписи.НоменклатураЦРПТ;
				Объект.СправкаАБ=ВыборкаДетальныеЗаписи.СправкаАБ;
				Если Не ЗначениеЗаполнено(Объект.СправкаАБ) Тогда
					Продолжить;
				КонецЕсли;
				ТипМаркиЦРПТ();				
				Возврат Объект.НоменклатураЦРПТ
				
			ИначеЕсли Объект.НоменклатураЦРПТ<>ВыборкаДетальныеЗаписи.НоменклатураЦРПТ Тогда
				Сообщить("Марка принадлежит другой номенклатуре ЦРПТ, а именно "+ВыборкаДетальныеЗаписи.НоменклатураЦРПТ);
				Возврат Неопределено;
	
			ИначеЕсли Объект.СправкаАБ<>ВыборкаДетальныеЗаписи.СправкаАБ Тогда
				Сообщить("Марка принадлежит другой справке ЦРПТ, а именно "+ВыборкаДетальныеЗаписи.СправкаАБ.РегБ);
				Возврат Неопределено;
				
			Конецесли;
			Возврат Объект.НоменклатураЦРПТ
			
		КонецЦикла;
		
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		Сообщить("Для штрихкода "+Значение+" не нашли на остатках номенклтауру ЦРПТ");
		
		
		Возврат Неопределено;


конецФункции //функция получитьИдТовараСмарки(НомерМарки) ЭКСПОРТ

Функция Команда29Север(ЗНАЧ Штрих)
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Штрих=Обработки.ЗапускЦРПТ.ОБработатьРусскиеБуквы(Штрих);
	

	
	
	
	КодШт=получитьИдТСм(Штрих);
	
	
	Если КодШт=Неопределено Тогда
		Сообщить("Не известный штрих код");
		ВСтруктура=Новый Структура;
		ВСтруктура.Вставить("Штрих",КодШт);
		ВСтруктура.Вставить("Номенкл",Неопределено);
		ВСтруктура.Вставить("ШтрихНовый",Штрих);
		Возврат ВСтруктура;
		
	КонецЕсли;
	
	ВСтруктура=Новый Структура;
	ВСтруктура.Вставить("Штрих",КодШт);
	ВСтруктура.Вставить("ШтрихНовый",Штрих);
	
	
	ВСтруктура.Вставить("Номенкл",Неопределено);
	
	Возврат ВСтруктура;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


КонецФункции


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
ПроверятьПередОтправкойНомерКоробаИСоздаватьНовый=	РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ПроверятьПередОтправкойНомерКоробаИСоздаватьНовый;
	ПослеОтправкиОтчетовВСУЗПодписать=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ПослеОтправкиОтчетовВСУЗПодписать;
	РаботатьНаV1=Ложь;
	//РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().РаботатьНаV1;
	
	ОбработкаWEBНаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ВерсияПравильная=Сред(СистемнаяИнформация.ВерсияПриложения,1,6)<>"8.3.6." 
			И Сред(СистемнаяИнформация.ВерсияПриложения,1,6)<>"8.3.7."
			И Сред(СистемнаяИнформация.ВерсияПриложения,1,6)<>"8.3.8."
			И Сред(СистемнаяИнформация.ВерсияПриложения,1,6)<>"8.3.9.";
	Орг=Неопределено;
	Параметры.Свойство("Организация",Орг);
	Если ЗначениеЗаполнено(Орг) Тогда
		Объект.Организация=Орг;
	КонецЕсли;
	Поль=Неопределено;
	Параметры.Свойство("Пользовтаель",Поль);
	Если ЗначениеЗаполнено(Поль) Тогда
		Объект.ТекущийПользователь=Поль;
	КонецЕсли;
	ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	
	КоличествоОтсканированоБокс=0;
	
	
	ОбновитьВнешниеКнопки();
	//КонецЕслИ;
	//Если Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Обувь"
	//	И Константы.РежимРаботыХамелеонЦРПТ.Получить()=1 
	//тогда
	//	Объект.ЧерезСУЗ=ложь;
	//Конецесли;
	
	Если не ЗначениеЗаполнено(Объект.ИдПроизводственногоЗаказа) Тогда
		Объект.ИдПроизводственногоЗаказа="1";
	КонецЕсли;
	
	Если Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.Формирование 
		ИЛИ Не ЗначениеЗаполнено(Объект.ТипДокумента)
		ИЛИ Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.ДобавлениеВУпаковку
		Тогда
		Элементы.ГруппаКороб.Видимость=Истина;
		Элементы.ОсновнаяГруппа.Видимость=Истина;
		Элементы.Изъятие.Видимость=Ложь;
	ИначеЕсли ОБъект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.Расформирование Тогда
		Элементы.ГруппаКороб.Видимость=Ложь;
		Элементы.ОсновнаяГруппа.Видимость=Истина;
		Элементы.Изъятие.Видимость=Ложь;
		
	ИначеЕсли ОБъект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.ИзъятиеИзУпаковки Тогда
		Элементы.ГруппаКороб.Видимость=Истина;
		Элементы.ОсновнаяГруппа.Видимость=Ложь;
		Элементы.Изъятие.Видимость=Истина;
		
	КонецЕсли;
	
	ТекущийПользователь=Объект.ТекущийПользователь;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) тогда
		Объект.Дата=Текущаядата();
	КонецЕслИ;
	
КонецПроцедуры

Процедура ОбновитьВнешниеКнопки()
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнешниеОбработки_ХамелеонЦРПТ.ИмяВнешнейОБработки,
		|	ВнешниеОбработки_ХамелеонЦРПТ.НаименованиеКнопки,
		|	ВнешниеОбработки_ХамелеонЦРПТ.Код
		|ИЗ
		|	Справочник.ВнешниеОбработки_ХамелеонЦРПТ КАК ВнешниеОбработки_ХамелеонЦРПТ
		|ГДЕ
		|	ВнешниеОбработки_ХамелеонЦРПТ.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ИмяКоманды="Команда"+ВыборкаДетальныеЗаписи.Код;
		Попытка
		КомандаФормы = Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуВнешняя";
		КомандаФормы.Заголовок = ВыборкаДетальныеЗаписи.ИмяВнешнейОБработки;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.Текст;
		
		//ОписаниеКомандыПечати.ИмяКомандыНаФорме = ИмяКоманды;
		
		НовыйЭлемент = Элементы.Добавить("ГруппаКнопокВнешняя" + ИмяКоманды, Тип("КнопкаФормы"), Элементы.ГруппаКнопокВнешняя);
		НовыйЭлемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		НовыйЭлемент.Заголовок=ВыборкаДетальныеЗаписи.НаименованиеКнопки;
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	Исключение
		КонецПопытки;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
КонецПроцедуры


Функция ПолучитьИмяВнешней(ИмяФайла)
    АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ИмяФайла);
    ИмяОбр = ВнешниеОбработки.Подключить(АдресВоВременномХранилище,,Ложь);
    Возврат ИмяОбр;
КонецФункции


&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуВнешняя(Команда)
	
	// Вставить содержимое обработчика.	// Вставить содержимое обработчика.
	Попытка
		//рнДвВернутьИмяФайла(Команда.Имя));
			ВернДв=ВернутьИмяФайла(Команда.Имя);
			Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
				ДвоичныеДанные=ВернДв;
			Иначе
				ДвоичныеДанные=Новый ДвоичныеДанные(ВернДв);
			Конецесли;
		ОбработкаИмя=ПолучитьИмяВнешней(Двоичныеданные);
		ОткрытьФорму("ВнешняяОбработка."+ОбработкаИмя+".Форма",,ЭтаФорма);
	Исключение
			Попытка
#Если ТолстыйКлиентОбычноеПриложение  Тогда
		ВернДв=ВернутьИмяФайла(Команда.Имя);
		Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
			//ДвоичныеДанные=ВернДв;
			ДвоичныеДанные=ПолучитьИмяВременногоФайла();
			ВернДв.Записать(ДвоичныеДанные);
			
		Иначе
			ДвоичныеДанные=ВернДв;
		Конецесли;
				ВернутьВн(ДвоичныеДанные);
				Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
					УдалитьФайлы(ДвоичныеДанные);
				КонецЕсли;
#Иначе
				
			ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
#КонецЕсли
			Исключение
				ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
			КонецПопытки;
		//	
	//	
	КонецПопытки;

	//УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


#Если ТолстыйКлиентОбычноеПриложение  Тогда
&НаКлиенте
Процедура ВернутьВн(ДвоичныеДанные)
	//ИмяВременФ=ПолучитьИмяВременногоФайла();
	//ДвоичныеДанные.Записать(ИмяВременФ);
	ВнешняяОбработка=ВнешниеОбработки.Создать(ДвоичныеДанные);
	Фоорма=ВнешняяОбработка.ПолучитьФорму(,ЭтаФорма);
	Попытка
		Фоорма.УФ=ЭтаФорма;
	Исключение
	КонецПопытки;
	Фоорма.Открыть();
Конецпроцедуры      	
#КонецЕсли


Процедура ЗаписатьИмяФайлаВнешняяобработка(ИмяФайла)
	
	НаимСправочника=Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя();
	Спр=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоНаименованию(НаимСправочника,Истина);
	Если Спр<>Справочники.ВнешниеОбработки_ХамелеонЦРПТ.ПустаяСсылка() Тогда
		Спр=Спр.ПолучитьОбъект();
	Иначе
		
		Спр=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.СоздатьЭлемент();
		
	Конецесли;
	Спр.Наименование=НаимСправочника;
	Спр.ИмяВнешнейОБработки=ИмяФайла;
	Спр.Записать();;
КонецПроцедуры


Функция ВернутьИмяФайла(Команда)
	Возврат Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоКоду(Сред(Команда,8)).Хранилище.Получить();
	
	СпрВн=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоКоду(Сред(Команда,8));
	
	Возврат СпрВн.ИмяВнешнейОБработки
	//НаимСправочника=Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя();
	//Спр=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоНаименованию(НаимСправочника,Истина);
	//Если Спр<>Справочники.ВнешниеОбработки_ХамелеонЦРПТ.ПустаяСсылка() Тогда
	//	Возврат Спр.ИмяВнешнейОБработки;
	//Конецесли;
	
КонецФункции


Функция ВернутьТекущийСклад(РегКК)
		Запрос=Новый Запрос;
Запрос.Текст = 
			"ВЫБРАТЬ
			|	Склады.Ссылка,
			|	1 КАК Поле1
			|ИЗ
			|	Справочник.ПодразделениеЦРПТ КАК Склады
			|		ГДЕ ПОДСТРОКА(Склады.ClientRegId,1,1000)= &РегЦРПТ";
			
			
		Запрос.УстановитьПараметр("РегЦРПТ", РегКК);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Объект.НомерЛинии=ВыборкаДетальныеЗаписи.Ссылка.НомерЛинии;
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Если	Не зНачениеЗаполнено(Объект.Организация)
		ИЛИ Не ЗначениеЗаполнено(Объект.ТекущийПользователь) Тогда
		Обр=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
		Если Не Обр.Открыта() Тогда
			Обр.Открыть()
		КонецЕсли;
		//Если Обр.Организации.Количество()=0 Тогда
		//	Обр.ПодключитьсяКЦРПТ("",Ложь);
		//КонецЕсли;
		//Если Обр.Организации.Количество()=0 Тогда
		//	Возврат;
		//КонецЕсли;
		Объект.ТекущийПользователь=Обр.Пользователь;
		Объект.Организация=Орг();
		ЗаполнитьКМ();
		ТекущийПользователь=Объект.ТекущийПользователь;
	Конецесли;
	Если Не ЗначениеЗаполнено(ТекущийПользователь) тогда
		Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
		Текущийпользователь=Форм.Пользователь;
		
	КонецЕсли;
	ЭтаФорма.Активизировать();
	ТекущийПользовательПриИзмененииНаСервере();
	ДанныеИзПользователя=ПолучитьИзПользователя();
КонецПроцедуры

Процедура ЗаполнитьКМ()
	Объект.СтатусКМ=Объект.ТекущийПользователь.ВидКМ;
КонецПроцедуры

Функция Орг()
	Возврат Объект.ТекущийПользователь.Организация;
КонецФункции


&НаКлиенте
Процедура НоменклатураЦРПТПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	  ТипМаркиЦРПТ()
КонецПроцедуры


Процедура ТипМаркиЦРПТ()
//	Объект.КоличествоВКоробе=Объект.НоменклатураЦРПТ.КоличествоВМесте;
//	Объект.ТипЛогистическойЕдиницыКороб=Объект.НоменклатураЦРПТ.ТипЛогистическойЕдиницы;
	ПриИзмененииНоменклатурыЦРПТ();
	
	
КонецПроцедуры

Процедура ПриИзмененииНоменклатурыЦРПТ()
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	

	Поле3ПриИзмененииНаСервере();	
КонецПроцедуры

&НаКлиенте
Процедура Команда7(Команда)
	// Вставить содержимое обработчика.
	ОткрытьФорму("Справочник.ВнешниеОбработки_ХамелеонЦРПТ.Форма.ФормаСписка",
	Новый структура("Тип",
		ТипДокумента()));
КонецПроцедуры


Функция ТипДокумента()
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя()
КонецФункции

&НаКлиенте
Процедура Команда1(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	ТаблЧ=Новый ТабличныйДОкумент;
	ВывестиТаблКодCODE128_КОРОБА(ТаблЧ);
	ТаблЧ.ТолькоПросмотр=Истина;
	ТаблЧ.Показать();
	
КонецПроцедуры


Процедура  ВывестиТаблКодCODE128_КОРОБА(ТаблЧ) эКспорт
		Макет=Документы.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.ПолучитьМакет("ШтрихКодДлинный");
		ТаблЧ.ИмяПараметровПечати="Печать BAR CODE";
	
		ОблЧек=Макет.ПолучитьОбласть("Шапка");
		
		Марки=ОБъект.Марки.Выгрузить();
		Марки.Свернуть("НомерБокса");
		Если ВерсияПравильная Тогда
		ГенераторМатрицы=Обработки.ГенерацияDataMatrix_ХамелеонЦРПТ.Создать();
	ГенераторМатрицы.Инициализировать();
КонецЕсли;
	Облчек.Параметры.Продукция=Объект.Продукция;
	ОБлЧек.Параметры.ШтрихКод=Объект.НомерКороба;

		
		
		
					
					              
					АдресКонец=Объект.НомерКороба;
				Если ВерсияПравильная Тогда
				ОблЧек.Рисунки.ШтрихКод_1.Картинка=Новый Картинка(ГенераторМатрицы.Сгенерировать128(АдресКонец));
			Иначе
				ГенераторМатрицы=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();
				ОблЧек.Рисунки.ШтрихКод_1.Картинка=Новый Картинка(ГенераторМатрицы.Сгенерировать128(АдресКонец));
				
				                           КонецЕсли;
				
						
						ТаблЧ.Вывести(ОблЧек);
	
КонецПроцедуры


Функция EncodeURL(URL)
    Рез = "";
    Для Сч = 1 По СтрДлина(URL) Цикл
        ch = Сред(URL,Сч,1);
        vch = КодСимвола(ch);

        Если ("A" <= ch ) И ( ch <= "Z") Тогда      // "A".."Z"
            Рез = Рез + ch;
        ИначеЕсли ("a" <= ch ) И ( ch <= "z") Тогда // "a".."z"
            Рез = Рез + ch;
        ИначеЕсли ("0" <= ch ) И ( ch <= "9") Тогда // "0".."9"
            Рез = Рез + ch;
        ИначеЕсли (ch = " ") ИЛИ ( ch = "+") Тогда          // space
            Рез = Рез + "+";
        ИначеЕсли (ch = "-" ) ИЛИ ( ch = "_")       // unreserved
            ИЛИ (ch = ".") ИЛИ (ch = "!")
            ИЛИ (ch = "~") ИЛИ (ch = "*")
            ИЛИ (ch = "") ИЛИ (ch = "(")
            ИЛИ (ch = ")") Тогда
            Рез = Рез + ch;
        ИначеЕсли (vch <= 127) Тогда        // other ASCII
            Рез = Рез + hex(vch);
        ИначеЕсли (vch <= 2047) Тогда       // non-ASCII <= 0x7FF
            Рез = Рез + hex(192 + Цел(vch / 64));
            Рез = Рез + hex(128 + (vch % 64));
        Иначе                   // 0x7FF < ch <= 0xFFFF
            Рез = Рез + hex(224 + Цел(vch / 4096));
            Рез = Рез + hex(128 + (Цел(vch / 64) % 64));
            Рез = Рез + hex(128 + (vch % 64));
        КонецЕсли;
    КонецЦикла;

    Возврат Рез;
КонецФункции // ()
Функция hex(Знач Значение)
    Значение=Число(Значение);
    Если Значение<=0 Тогда
        Результат="0";
    Иначе
        Значение=Цел(Значение);
        Результат="";
        Пока Значение>0 Цикл
            Результат=Сред("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",Значение%16 + 1,1)+Результат;
            Значение=Цел(Значение/16) ;
        КонецЦикла;
    КонецЕсли;
    Если СтрДлина(Результат) < 2 Тогда

        Результат = "0" + Результат;

    КонецЕсли;
    Возврат "%" + Результат;
КонецФункции


Функция СохранитьДвоичныйБуферВФайл(Буфер, ИмяФайла) Экспорт
    Поток = Новый COMОбъект("ADODB.Stream");
    Поток.Type = 1;  //Бинарный
    Поток.Mode = 3;
    Поток.Open();
    Поток.Write(Буфер);
    Поток.SaveToFile(ИмяФайла);
    Поток.Close();
КонецФункции


&НаКлиенте
Процедура Команда2(Команда)
	// Вставить содержимое обработчика.
	ТаблЧ=Новый ТабличныйДОкумент;
	ВывестиТаблКодCODE128_П(ТаблЧ);
	ТаблЧ.ТолькоПросмотр=Истина;
	ТаблЧ.Показать();
	
КонецПроцедуры


Процедура  ВывестиТаблКодCODE128_П(ТаблЧ)
		Макет=Документы.ОтчетОПроизводствеЦРПТ.ПолучитьМакет("ШтрихКодДлинный");
		ТаблЧ.ИмяПараметровПечати="Печать BAR CODE";
	
		ОблЧек=Макет.ПолучитьОбласть("Шапка");
		
		Марки=ОБъект.Марки.Выгрузить();
		Марки.Свернуть("НомерПаллеты");
		Если ВерсияПравильная Тогда
	ГенераторМатрицы=Обработки.ГенерацияDataMatrix_ХамелеонЦРПТ.Создать();
	ГенераторМатрицы.Инициализировать();
		                           КонецЕсли;
		Для Каждого Стр Из Марки Цикл
		
		
		
					АдресКонец=Стр.НомерПаллеты;
					
					
					Если ВерсияПравильная Тогда
				ОблЧек.Рисунки.ШтрихКод_1.Картинка=Новый Картинка(ГенераторМатрицы.Сгенерировать128(АдресКонец));
			Иначе
									ГенераторМатрицы=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();

				ОблЧек.Рисунки.ШтрихКод_1.Картинка=Новый Картинка(ГенераторМатрицы.Сгенерировать128(АдресКонец));
				Конецесли;
						
						ТаблЧ.Вывести(ОблЧек);
		//Партия="";
		Конеццикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	// Вставить содержимое обработчика.
		ШтрихКод=Данные;
		подключитьобработчикожидания("моо_1",0.1,истина);
	
КонецПроцедуры


&НаСервере
Процедура Поле3ПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	//	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	//// Данный фрагмент построен конструктором.
	//// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ЕдиницыИзмерения.Ссылка
	//	|ИЗ
	//	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	//	|ГДЕ
	//	|	ЕдиницыИзмерения.Владелец = &Владелец
	//	|	И ЕдиницыИзмерения.Наименование = ""пал.""";
	//
	//Запрос.УстановитьПараметр("Владелец", Объект.Номенклатура1С);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//	
	//	Объект.ЕдиницаПаллет=ВыборкаДетальныеЗаписи.Ссылка;
	//КонецЦикла;
	//Объект.КоличествоВПаллете=Объект.ЕдиницаПаллет.Коэффициент*Объект.Номенклатура1С.ЕдиницаИзмеренияМест.Коэффициент;
	//
	////}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	//Объект.КоличествоВПаллете=Объект.Номенклатура1С.
КонецПроцедуры

&НаКлиенте
Процедура Поле3ПриИзменении(Элемент)
	Поле3ПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Поле5ПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	 НаСервереЕд()
КонецПроцедуры

Процедура НаСервереЕд()
	Объект.КоличествоВПаллете=Объект.ЕдиницаПаллет.Коэффициент*Объект.Номенклатура1С.ЕдиницаИзмеренияМест.Коэффициент;
	
КонецПроцедуры

Функция ПолучитьИзПользователя()
	Если Объект.Организация.ИНН=ТекущийПользователь.Организация.ИНН 
		И Объект.ТекущийПользователь.СайтыВходаВСистему=ТекущийПользователь.СайтыВходаВСистему Тогда
		Возврат Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(Текущийпользователь);
	ИначеЕсли Объект.ТекущийПользователь.ПометкаУдаления=Ложь Тогда
		Возврат Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);
		
	Иначе
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Пользователи_ХамелеонЦРПТ КАК Пользователи_ХамелеонЦРПТ
		|ГДЕ
		|	Пользователи_ХамелеонЦРПТ.Организация.ИНН = &Организация
		|	И Пользователи_ХамелеонЦРПТ.СайтыВходаВСистему = &СайтыВходаВСистему
		|	И НЕ Пользователи_ХамелеонЦРПТ.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация.ИНН);
	Запрос.УстановитьПараметр("СайтыВходаВСистему", Объект.ТекущийПользователь.СайтыВходаВСистему);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НайтиПольз=Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		                      НайтиПольз=ВыборкаДетальныеЗаписи.Ссылка
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		
		//НайтиПольз=Справочники.Пользователи_ХамелеонЦРПТ.НайтиПоРеквизиту("Организация",Объект.Организация);
		Если ЗначениеЗаполнено(НайтиПольз) Тогда
			Возврат Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(НайтиПольз);
		КонецЕсли;
		
	КонецЕслИ;
	Возврат Неопределено;
КонецФункции

&НаСервереБезКонтекста
Процедура ОчиститьТокенСрегистра(ТТ)
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(ТТ,"")
КонецПроцедуры

Функция СформироватьXmlФайлИмпорт()
	
	Если    Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.ДобавлениеВУпаковку Тогда
		
			Чтен=Новый  ЗаписьJSON;
			Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
			Чтен.ЗаписатьНачалоОбъекта();
			Чтен.ЗаписатьИмяСвойства("participant_inn");
			Чтен.ЗаписатьЗначение(xmlString(Объект.Организация.ИНН));
			Чтен.ЗаписатьИмяСвойства("reaggregation_type");
			Чтен.ЗаписатьЗначение("ADDING");
			Чтен.ЗаписатьИмяСвойства("uitu");
			Чтен.ЗаписатьЗначение(Объект.НомерКороба);
			Чтен.ЗаписатьИмяСвойства("uit_uitu_list");
			Чтен.ЗаписатьНачалоМассива();
			
			
			Для Каждого Стр_1 Из Объект.Марки Цикл
					Чтен.ЗаписатьНачалоОбъекта();
					Чтен.ЗаписатьИмяСвойства("uit_uitu");
					Чтен.ЗаписатьЗначение(Стр_1.Марка);
					Чтен.ЗаписатьКонецОбъекта();
					
			Конеццикла;
			Чтен.ЗаписатьКонецМассива();
			Чтен.ЗаписатьКонецОбъекта();
			Текст=Чтен.Закрыть();
			Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
				ЗапишемВРегистр(Текст);
			КонецЕсли;
			
			Возврат Текст;
			
			
			
	
	ИначеЕсли Не ЗначениеЗаполнено(Объект.ТипДокумента) ИЛИ
		Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.Формирование
	//	ИЛИ Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.ДобавлениеВУпаковку
		Тогда
		
		
		Если (Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак"
			  ИЛИ Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак")
			И Объект.НомераБлоков.Количество()>0
			Тогда
			
			Если Объект.Продукция.КоличествоВБлоке=0 Тогда
				Сообщить("В продукции не указано количество в блоке");
				Возврат НЕопределено;
			КонецЕсли;
			
			Сч_поК=Объект.Продукция.КоличествоВБлоке;
			
			Если Сч_поК*Объект.НомераБлоков.Количество()<Объект.Марки.Количество() Тогда
				Сообщить("Не хватает пачек для формирования короба!!");
				Возврат Неопределено;
			КонецеслИ;
			Смещение=0;
			Для Каждого Стр_Блк Из Объект.НомераБлоков Цикл
				Сч_Первый=Смещение;
				Для Сч_ББл=0 По Сч_ПоК-1 Цикл
					Объект.Марки[Сч_Первый+Сч_ББл].НомерБокса=Стр_Блк.НомерБлока;
					
				Конеццикла;
				Смещение=Смещение+Сч_поК;
			Конеццикла;
			
			Чтен=Новый  ЗаписьJSON;
			Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
			Чтен.ЗаписатьНачалоОбъекта();
			//Чтен.ЗаписатьИмяСвойства("document_description");
			//Чтен.ЗаписатьНачалоОбъекта();
					Чтен.ЗаписатьИмяСвойства("participantId");
				Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
			
			
					
					Чтен.ЗаписатьИмяСвойства("productionLineId");
					Чтен.ЗаписатьЗначение(xmlString(Объект.ИдПроизводственногоЗаказа));
				
			
			Чтен.ЗаписатьИмяСвойства("aggregationUnits");
			
			
			
			Чтен.ЗаписатьНачалоМассива();
			
			
			
			Чтен.ЗаписатьНачалоОбъекта();
			Чтен.ЗаписатьИмяСвойства("unitSerialNumber");
			Чтен.ЗаписатьЗначение(Объект.НомерКороба);
			
			
			Если Объект.ЧерезСУЗ 
				Тогда
			
				
				Чтен.ЗаписатьИмяСвойства("aggregatedItemsCount");
				Чтен.ЗаписатьЗначение(Объект.НомераБлоков.Количество());
				
				
			КонецЕслИ;
			
				Чтен.ЗаписатьИмяСвойства("aggregationType");
				Чтен.ЗаписатьЗначение("AGGREGATION");
			
			
				
				Чтен.ЗаписатьИмяСвойства("aggregationUnitCapacity");
				Чтен.ЗаписатьЗначение(Объект.НомераБлоков.Количество());
			
			Чтен.ЗаписатьИмяСвойства("sntins");
			Чтен.ЗаписатьНачалоМассива();
			
			Для Каждого Стр Из Объект.НомераБлоков Цикл
				Чтен.ЗаписатьЗначение(Стр.НомерБлока);
			Конеццикла;
			Чтен.ЗаписатьКонецМассива();
			Чтен.ЗаписатьКонецОбъекта();
			
			
			
			

			
			
			
			Для Каждого Стр_1_БЛ Из Объект.НомераБлоков Цикл
			
			
			Чтен.ЗаписатьНачалоОбъекта();
			Чтен.ЗаписатьИмяСвойства("unitSerialNumber");
			Чтен.ЗаписатьЗначение(Стр_1_БЛ.НомерБлока);
			
			Пачки_=Объект.Марки.НайтиСтроки(Новый Структура("НомерБокса",Стр_1_БЛ.НомерБлока));
			
			Если Объект.ЧерезСУЗ 
				//ИЛИ 	Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак"
				Тогда
			
				
				Чтен.ЗаписатьИмяСвойства("aggregatedItemsCount");
				Чтен.ЗаписатьЗначение(Пачки_.Количество());
				
				
			КонецЕслИ;
			
				Чтен.ЗаписатьИмяСвойства("aggregationType");
				Чтен.ЗаписатьЗначение("AGGREGATION");
			
			
				
				Чтен.ЗаписатьИмяСвойства("aggregationUnitCapacity");
				Чтен.ЗаписатьЗначение(Пачки_.Количество());
			
			Чтен.ЗаписатьИмяСвойства("sntins");
			Чтен.ЗаписатьНачалоМассива();
			
			Для Каждого Стр Из Пачки_ Цикл
				Чтен.ЗаписатьЗначение(Сред(Стр.Марка,1,21));
			Конеццикла;
			Чтен.ЗаписатьКонецМассива();
			Чтен.ЗаписатьКонецОбъекта();
			Конеццикла;
			
			
			
			
			
			
			
			
						
		
		
			Чтен.ЗаписатьКонецМассива();
			
			Чтен.ЗаписатьКонецОбъекта();
			
			Текст=Чтен.Закрыть();			
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
			
			
			
			Возврат Текст;
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		КонецЕсли;
		
		
		Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();
		//Чтен.ЗаписатьИмяСвойства("document_description");
		//Чтен.ЗаписатьНачалоОбъекта();
		Если РаботатьНаV1 Тогда
		Чтен.ЗаписатьИмяСвойства("aggregationSntin");
		Чтен.ЗаписатьЗначение(Объект.НомерКороба);
		
		
		Чтен.ЗаписатьИмяСвойства("aggregationType");
		Если Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.ДобавлениеВУпаковку Тогда
			Чтен.ЗаписатьЗначение("UPDATE");
		Иначе
			Чтен.ЗаписатьЗначение("AGGREGATION");
		КонецЕслИ;
		
		
		Чтен.ЗаписатьИмяСвойства("sntins");
		Чтен.ЗаписатьНачалоМассива();
		
		Для Каждого Стр Из Объект.Марки Цикл
			Чтен.ЗаписатьЗначение(Стр.Марка);
		Конеццикла;
		Чтен.ЗаписатьКонецМассива();
		
		Чтен.ЗаписатьИмяСвойства("sourceDocDate");
		Чтен.ЗаписатьЗначение(Формат(Объект.Дата,"ДФ=""дд.ММ.гггг"""));
	
		Чтен.ЗаписатьИмяСвойства("sourceDocNum");
		Чтен.ЗаписатьЗначение(Объект.Номер);
		

		 Иначе
		Чтен.ЗаписатьИмяСвойства("participantId");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		
		
		Если Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак" 
			ИЛИ Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак" 
			Тогда
				
				Чтен.ЗаписатьИмяСвойства("productionLineId");
				Чтен.ЗаписатьЗначение(xmlString(Объект.ИдПроизводственногоЗаказа));
			КонецЕсли;
			
		
		Чтен.ЗаписатьИмяСвойства("aggregationUnits");
		
		
		
		Чтен.ЗаписатьНачалоМассива();
		Чтен.ЗаписатьНачалоОбъекта();
		Чтен.ЗаписатьИмяСвойства("unitSerialNumber");
		Чтен.ЗаписатьЗначение(Объект.НомерКороба);
		Если Объект.ЧерезСУЗ 
			//ИЛИ 	Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак"
			Тогда
		
			
			Чтен.ЗаписатьИмяСвойства("aggregatedItemsCount");
			Чтен.ЗаписатьЗначение(объект.Марки.Количество());
			
			
		КонецЕслИ;
		
		Если Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.ДобавлениеВУпаковку Тогда
			Чтен.ЗаписатьИмяСвойства("reaggregation_type");
			Чтен.ЗаписатьЗначение("ADDING");
		Иначе
			Чтен.ЗаписатьИмяСвойства("aggregationType");
			Чтен.ЗаписатьЗначение("AGGREGATION");
		КонецЕслИ;
		
		
		Если Объект.ЧерезСУЗ 
			//ИЛИ 	Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак" 
			Тогда
			
			Чтен.ЗаписатьИмяСвойства("aggregationUnitCapacity");
			Чтен.ЗаписатьЗначение(объект.Марки.Количество());
			
			
			
		КонецЕслИ;
		
		Чтен.ЗаписатьИмяСвойства("sntins");
		Чтен.ЗаписатьНачалоМассива();
		
		Для Каждого Стр Из Объект.Марки Цикл
			Чтен.ЗаписатьЗначение(Стр.Марка);
		Конеццикла;
		Чтен.ЗаписатьКонецМассива();
		Чтен.ЗаписатьКонецОбъекта();
		Чтен.ЗаписатьКонецМассива();
		
		КонецЕсли;
		Чтен.ЗаписатьКонецОбъекта();
		
		Текст=Чтен.Закрыть();
	ИначеЕсли Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.Расформирование Тогда
		Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();
		//Чтен.ЗаписатьИмяСвойства("document_description");
		//Чтен.ЗаписатьНачалоОбъекта();
		Чтен.ЗаписатьИмяСвойства("participant_inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		Чтен.ЗаписатьИмяСвойства("products_list");
		Чтен.ЗаписатьНачалоМассива();
		
		Для Каждого Стр Из Объект.Марки Цикл
			Чтен.ЗаписатьНачалоОбъекта();
			Чтен.ЗаписатьИмяСвойства("uitu");
			Чтен.ЗаписатьЗначение(Стр.Марка);
			Чтен.ЗаписатьКонецОбъекта();
		Конеццикла;
		Чтен.ЗаписатьКонецМассива();
		Чтен.ЗаписатьКонецОбъекта();
		
		Текст=Чтен.Закрыть();		
	
	//ИначеЕсли  Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.ИзъятиеИзУпаковки Тогда
		
	Конецесли;
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	Возврат Текст;

	ДатаТекущая=Формат(Текущаядата(),"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""");
	
	ДатаДокумента=Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""");
		Текст="<unit_pack document_id=""unit_pack_doc_id"" VerForm=""1.03"" file_date_time="""+ДатаТекущая+""" VerProg=""VerProg1"">
|<Document operation_date_time="""+ДатаДокумента+""" document_number="""+Объект.Номер+""">
|<organisation>
|<id_info>
|<LP_info org_name="""+Обработки._Запуск_ХамелеонЦРПТ.xml_ЗаписатьАтрибут(Объект.Организация.Наименование)+""" LP_TIN="""+Объект.Организация.ИНН+""" RRC="""+ОБъект.Организация.КПП+"""/>
|</id_info>
|<Address>
|<location_address country_code=""643"" text_address="""+Обработки._Запуск_ХамелеонЦРПТ.xml_ЗаписатьАтрибут(Объект.Организация.АдресМестонахождения)+"""/>
|</Address>
|<contacts phone_number="""" email=""""/>
|</organisation>
|<pack_content>
|<pack_code>"+Объект.НомерКороба+"</pack_code>";

Для Каждого Стр ИЗ ОБъект.Марки Цикл

	Текст=Текст+"
|<cis>"+Стр.Марка+"</cis>";
	             КонецЦикла;
	Текст=Текст+"
|</pack_content>
|</Document>
|</unit_pack>
		|";

		
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
Возврат Текст 	
КонецФункции

Функция ЗагрузканаСервереОтправить(Thumbprint_1,СРегистра,УжеОтправили,Тело)
Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			
			Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ВидДокументаУпаковок_ХамелеонЦРПТ.Расформирование") Тогда
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/disaggregation/create");
			Иначе
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/aggregation/create");
			КонецЕсли;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Текст1);
	КонецЕсли;
		
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
		ИЛИ Ответ.КодСостояния=201 
		Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			Объект._Order_ID=Текст1;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				Возврат Ложь;
			КонецЕсли
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	
	
	Возврат Истина
КонецФункции


Процедура ЗагрузканаСервереОтправитьЗаявка_ЧерезСУЗ(Thumbprint_1,Тело,Адрес,Порт,Защищ)
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;
			
	
		HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/aggregation?omsId="+Thumbprint_1.ИдентификаторСУЗ);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
														ТокенСУЗ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);

	HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Текст1);
	КонецЕсли;
	
	
	Если Ответ.КодСостояния=202 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Объект._Order_ID=NNN.order_id;
	
	ИначеЕсли Ответ.КодСостояния=200 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Объект._Order_ID=NNN.reportId;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	
КонецПроцедуры


Функция СформироватьXmlФайлИмпорт_СУЗ()
	
		
		
		Если (Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак"
			  ИЛИ Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак")
			И Объект.НомераБлоков.Количество()>0
			Тогда
			
			Если Объект.Продукция.КоличествоВБлоке=0 Тогда
				Сообщить("В продукции не указано количество в блоке");
				Возврат НЕопределено;
			КонецЕсли;
			
			Сч_поК=Объект.Продукция.КоличествоВБлоке;
			
			Если Сч_поК*Объект.НомераБлоков.Количество()<Объект.Марки.Количество() Тогда
				Сообщить("Не хватает пачек для формирования короба!!");
				Возврат Неопределено;
			КонецеслИ;
			Смещение=0;
			Для Каждого Стр_Блк Из Объект.НомераБлоков Цикл
				Сч_Первый=Смещение;
				Для Сч_ББл=0 По Сч_ПоК-1 Цикл
					Объект.Марки[Сч_Первый+Сч_ББл].НомерБокса=Стр_Блк.НомерБлока;
					
				Конеццикла;
				Смещение=Смещение+Сч_поК;
			Конеццикла;
			
			Чтен=Новый  ЗаписьJSON;
			Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
			Чтен.ЗаписатьНачалоОбъекта();
			//Чтен.ЗаписатьИмяСвойства("document_description");
			//Чтен.ЗаписатьНачалоОбъекта();
					Чтен.ЗаписатьИмяСвойства("participantId");
				Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
			
			
					
					Чтен.ЗаписатьИмяСвойства("productionLineId");
					Чтен.ЗаписатьЗначение(xmlString(Объект.ИдПроизводственногоЗаказа));
				
			
			Чтен.ЗаписатьИмяСвойства("aggregationUnits");
			
			
			
			Чтен.ЗаписатьНачалоМассива();
			
			
			
			Чтен.ЗаписатьНачалоОбъекта();
			Чтен.ЗаписатьИмяСвойства("unitSerialNumber");
			Чтен.ЗаписатьЗначение(Объект.НомерКороба);
			
			
			Если Объект.ЧерезСУЗ 
				Тогда
			
				
				Чтен.ЗаписатьИмяСвойства("aggregatedItemsCount");
				Чтен.ЗаписатьЗначение(Объект.НомераБлоков.Количество());
				
				
			КонецЕслИ;
			
				Чтен.ЗаписатьИмяСвойства("aggregationType");
				Чтен.ЗаписатьЗначение("AGGREGATION");
			
			
				
				Чтен.ЗаписатьИмяСвойства("aggregationUnitCapacity");
				Чтен.ЗаписатьЗначение(Объект.НомераБлоков.Количество());
			
			Чтен.ЗаписатьИмяСвойства("sntins");
			Чтен.ЗаписатьНачалоМассива();
			
			Для Каждого Стр Из Объект.НомераБлоков Цикл
				Чтен.ЗаписатьЗначение(Стр.НомерБлока);
			Конеццикла;
			Чтен.ЗаписатьКонецМассива();
			Чтен.ЗаписатьКонецОбъекта();
			
			
			
			

			
			
			
			Для Каждого Стр_1_БЛ Из Объект.НомераБлоков Цикл
			
			
			Чтен.ЗаписатьНачалоОбъекта();
			Чтен.ЗаписатьИмяСвойства("unitSerialNumber");
			Чтен.ЗаписатьЗначение(Стр_1_БЛ.НомерБлока);
			
			Пачки_=Объект.Марки.НайтиСтроки(Новый Структура("НомерБокса",Стр_1_БЛ.НомерБлока));
			
			Если Объект.ЧерезСУЗ 
				//ИЛИ 	Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак"
				Тогда
			
				
				Чтен.ЗаписатьИмяСвойства("aggregatedItemsCount");
				Чтен.ЗаписатьЗначение(Пачки_.Количество());
				
				
			КонецЕслИ;
			
				Чтен.ЗаписатьИмяСвойства("aggregationType");
				Чтен.ЗаписатьЗначение("AGGREGATION");
			
			
				
				Чтен.ЗаписатьИмяСвойства("aggregationUnitCapacity");
				Чтен.ЗаписатьЗначение(Пачки_.Количество());
			
			Чтен.ЗаписатьИмяСвойства("sntins");
			Чтен.ЗаписатьНачалоМассива();
			
			Для Каждого Стр Из Пачки_ Цикл
				   				 	cis=Стр.Марка;

		           Если Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование<>"Альтернативный табак"  Тогда
				

		НомерКМ="";	
	
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	НомераКМ_ХамелеонЦРПТ.НомерКМ
					|ИЗ
					|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
					|ГДЕ
					|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий = &НомерКМ_Короткий";
				
				Запрос.УстановитьПараметр("НомерКМ_Короткий", cis);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					НомерКМ=ВыборкаДетальныеЗаписи.НомерКМ
					
				КонецЦикла;
				Если Не ЗначениеЗАполнено(НомерКМ) Тогда
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
						
						
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОбороты.Регистратор
					|ИЗ
					|	РегистрНакопления.ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТ.Обороты(, , Регистратор, СерийныйНомер = &cis) КАК ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОбороты
					|ГДЕ
					|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОбороты.Регистратор ССЫЛКА Документ.ЗаказМарок_ХамелеонЦРПТ";
				
				Запрос.УстановитьПараметр("cis", cis);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				РРР=КодироватьСтроку(cis,СпособКодированияСТроки.КодировкаURL);
				НомерКМ="";
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				
				//Сообщить(Стр.cis);

				//Сообщить(РРР);
				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					Для Каждого Стр_111 Из  ВыборкаДетальныеЗаписи.Регистратор.КМИзAPI Цикл
						Если Найти(Стр_111.НомерКМ,РРР)=1 Тогда
							НомерКМ=Стр_111.НомерКМ;
							
						КонецЕсли;
						
					Конеццикла;
					
					
				КонецЕсли;
				КонецЕсли ;
				

				Если ЗначениеЗаполнено(НомерКМ) тогда
					cis=РаскодироватьСтроку(НомерКМ,СпособКодированияСтроки.КодировкаURL);
				Иначе
					cis=РаскодироватьСтроку(Стр.Марка,СпособКодированияСтроки.КодировкаURL);
				КонецЕсли;
		КонецЕсли;
		
		Чтен.ЗаписатьЗначение(cis);

				
				//Чтен.ЗаписатьЗначение(Сред(Стр.Марка,1,21));
			Конеццикла;
			Чтен.ЗаписатьКонецМассива();
			Чтен.ЗаписатьКонецОбъекта();
			Конеццикла;
			
			
			
			
			
			
			
			
						
		
		
			Чтен.ЗаписатьКонецМассива();
			
			Чтен.ЗаписатьКонецОбъекта();
			
			Текст=Чтен.Закрыть();			
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
			
			
			
			Возврат Текст;
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		КонецЕсли;
		
		
		Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();
		//Чтен.ЗаписатьИмяСвойства("document_description");
		//Чтен.ЗаписатьНачалоОбъекта();
		Если РаботатьНаV1 Тогда
		Чтен.ЗаписатьИмяСвойства("aggregationSntin");
		Чтен.ЗаписатьЗначение(Объект.НомерКороба);
		
		
		Чтен.ЗаписатьИмяСвойства("aggregationType");
		Если Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.ДобавлениеВУпаковку Тогда
			Чтен.ЗаписатьЗначение("UPDATE");
		Иначе
			Чтен.ЗаписатьЗначение("AGGREGATION");
		КонецЕслИ;
		
		
		Чтен.ЗаписатьИмяСвойства("sntins");
		Чтен.ЗаписатьНачалоМассива();
		
		Для Каждого Стр Из Объект.Марки Цикл
			Чтен.ЗаписатьЗначение(Стр.Марка);
		Конеццикла;
		Чтен.ЗаписатьКонецМассива();
		
		Чтен.ЗаписатьИмяСвойства("sourceDocDate");
		Чтен.ЗаписатьЗначение(Формат(Объект.Дата,"ДФ=""дд.ММ.гггг"""));
	
		Чтен.ЗаписатьИмяСвойства("sourceDocNum");
		Чтен.ЗаписатьЗначение(Объект.Номер);
		

		 Иначе
		Чтен.ЗаписатьИмяСвойства("participantId");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		
		
		Если Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак" 
			ИЛИ Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак" 
			Тогда
				
				Чтен.ЗаписатьИмяСвойства("productionLineId");
				Чтен.ЗаписатьЗначение(xmlString(Объект.ИдПроизводственногоЗаказа));
			КонецЕсли;
			
		
		Чтен.ЗаписатьИмяСвойства("aggregationUnits");
		
		
		
		Чтен.ЗаписатьНачалоМассива();
		Чтен.ЗаписатьНачалоОбъекта();
		Чтен.ЗаписатьИмяСвойства("unitSerialNumber");
		Чтен.ЗаписатьЗначение(Объект.НомерКороба);
		Если Объект.ЧерезСУЗ 
			//ИЛИ 	Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак"
			Тогда
		
			
			Чтен.ЗаписатьИмяСвойства("aggregatedItemsCount");
			Чтен.ЗаписатьЗначение(объект.Марки.Количество());
			
			
		КонецЕслИ;
		
		Если Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.ДобавлениеВУпаковку Тогда
			Чтен.ЗаписатьИмяСвойства("reaggregation_type");
			Чтен.ЗаписатьЗначение("ADDING");
		Иначе
			Чтен.ЗаписатьИмяСвойства("aggregationType");
			Чтен.ЗаписатьЗначение("AGGREGATION");
		КонецЕслИ;
		
		
		Если Объект.ЧерезСУЗ 
			//ИЛИ 	Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак" 
			Тогда
			
			Чтен.ЗаписатьИмяСвойства("aggregationUnitCapacity");
			Чтен.ЗаписатьЗначение(объект.Марки.Количество());
			
			
			
		КонецЕслИ;
		
		Чтен.ЗаписатьИмяСвойства("sntins");
		Чтен.ЗаписатьНачалоМассива();
		
		Для Каждого Стр Из Объект.Марки Цикл   
	cis=Стр.Марка;

			           Если Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование<>"Альтернативный табак"  Тогда
	
		НомерКМ="";	
	
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	НомераКМ_ХамелеонЦРПТ.НомерКМ
					|ИЗ
					|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
					|ГДЕ
					|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий = &НомерКМ_Короткий";
				
				Запрос.УстановитьПараметр("НомерКМ_Короткий", cis);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					НомерКМ=ВыборкаДетальныеЗаписи.НомерКМ
					
				КонецЦикла;
				Если Не ЗначениеЗАполнено(НомерКМ) Тогда
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
						
						
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОбороты.Регистратор
					|ИЗ
					|	РегистрНакопления.ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТ.Обороты(, , Регистратор, СерийныйНомер = &cis) КАК ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОбороты
					|ГДЕ
					|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОбороты.Регистратор ССЫЛКА Документ.ЗаказМарок_ХамелеонЦРПТ";
				
				Запрос.УстановитьПараметр("cis", cis);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				РРР=КодироватьСтроку(cis,СпособКодированияСТроки.КодировкаURL);
				НомерКМ="";
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				
				//Сообщить(Стр.cis);

				//Сообщить(РРР);
				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					Для Каждого Стр_111 Из  ВыборкаДетальныеЗаписи.Регистратор.КМИзAPI Цикл
						Если Найти(Стр_111.НомерКМ,РРР)=1 Тогда
							НомерКМ=Стр_111.НомерКМ;
							
						КонецЕсли;
						
					Конеццикла;
					
					
				КонецЕсли;
				КонецЕсли ;
				

				Если ЗначениеЗаполнено(НомерКМ) тогда
					cis=РаскодироватьСтроку(НомерКМ,СпособКодированияСтроки.КодировкаURL);
				Иначе
					cis=РаскодироватьСтроку(Стр.Марка,СпособКодированияСтроки.КодировкаURL);
				КонецЕсли;
		
		       КонецЕсли;
		Чтен.ЗаписатьЗначение(cis);

						
			
			//Чтен.ЗаписатьЗначение(Стр.Марка);
		Конеццикла;
		Чтен.ЗаписатьКонецМассива();
		Чтен.ЗаписатьКонецОбъекта();
		Чтен.ЗаписатьКонецМассива();
		
		КонецЕсли;
		Чтен.ЗаписатьКонецОбъекта();
		
		Текст=Чтен.Закрыть();
		
		
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	Возврат Текст;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьАгрегациюЧереСУЗ(Thumbprint_1)
	
	СформироватьФайлДляОтправки=СформироватьXmlФайлИмпорт_СУЗ();
	Если Не ЗначениеЗаполнено(СформироватьФайлДляОтправки) Тогда
		Возврат;
	КонецЕсли;
	
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
	

	Тело=СформироватьФайлДляОтправки;
		АдресРаздробить=Thumbprint_1.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			ПоказатьПредупреждение(,"В пользователе не заполнен адрес СУЗ");
			Возврат;
			
		КонецЕсли;
	
	
	//Если ОбработкаWEBНаСервере Тогда
	//		ЗагрузканаСервереОтправитьЗаявка_ЧерезСУЗ(Thumbprint_1,Тело,Адрес,Порт,Защищ);
		
		
	//Иначе
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;
			
			Если РаботатьНаV1=Истина Тогда
		HTTPЗапрос=Новый HTTPЗапрос("api/aggregation");
			Иначе
		HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/aggregation?omsId="+Thumbprint_1.ИдентификаторСУЗ);
		КонецЕсли;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
																			ТокенСУЗ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);

	HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Попытка
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		Возврат;
	КонецПопытки;
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Текст1);
	КонецЕсли;
	
	
	Если Ответ.КодСостояния=202 ИЛИ  Ответ.КодСостояния=200 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Если РаботатьНаV1=Истина Тогда
			Объект._Order_ID=NNN;
				Иначе
			Объект._Order_ID=NNN.reportId;
		КонецЕсли;
		
		Если ПослеОтправкиОтчетовВСУЗПодписать Тогда
				
				
					Срегистра="";
					СерийныйНомер="";
					Куки=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитькукиВСУЗ(Thumbprint_1,
					,Срегистра,СерийныйНомер);
					Если Не ЗначениеЗАполнено(Куки) ИЛИ Не ЗначениеЗаполнено(Срегистра)
						ИЛИ Не ЗначениеЗаполнено(СерийныйНомер) Тогда
						ВОзврат;
					КонецЕсли;
					
					HTTPЗапрос=Новый HTTPЗапрос("webapi/v1/reports/signed");
					HTTPЗапрос.Заголовки.Вставить("Cookie",куки);
					
					Тело_1="["""+Объект._Order_ID+"""]";
					HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
																							ТокенСУЗ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);

					HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
					HTTPЗапрос.УстановитьТелоИзСтроки(Тело_1);
					Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
					Текст1=Ответ.ПолучитьТелоКакСтроку();
					
					NNN_2=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				
					
							Подписанный="";
						ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,NNN_2[0].content ,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
						
						//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
						//Подписанный,КодировкаТекста.UTF8,Ложь));
						
									Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
								Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
								 Подписанный=СтрЗаменить(Подписанный,"\r\n","");
								Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ДляОтправкиОтчетаОбИспользовании(Подписанный,NNN_2[0]);
								
					HTTPЗапрос=Новый HTTPЗапрос("webapi/v1/reports/sign");
					HTTPЗапрос.Заголовки.Вставить("Cookie",куки);
					
					HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
																							ТокенСУЗ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);

					HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
					HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
					Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("PUT",HTTPЗапрос);
					Текст1=Ответ.ПолучитьТелоКакСтроку();
					
								
								
						//Тело="{
						//|""product_document"":"""+Добав+""",
						//|""document_format"": ""MANUAL"",";

				
				
			КонецЕсли;

	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	//Если Ответ.КодСостояния<>200 Тогда
	//	
	//	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
	//	  Текст1=Ответ.ПолучитьТелоКакСтроку();
	//		Попытка
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//			Объект.ОшибкаОтправки=NNN.error_message;
	//			
	//		Исключение
	//		КонецПопытки;
	//	Иначе
	//		Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета");
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//		Объект._Order_ID=NNN.order_id;
	//КонецЕсли;
//	КонецЕсли;
	ЭтаФорма.Записать();
	
КонецПроцедуры


Процедура ОтправитьАгрегациюЧереСУЗСервер(Thumbprint_1)
	
	СформироватьФайлДляОтправки=СформироватьXmlФайлИмпорт();
	Если Не ЗначениеЗаполнено(СформироватьФайлДляОтправки) Тогда
		Возврат;
	КонецЕсли;
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
	

	Тело=СформироватьФайлДляОтправки;
		АдресРаздробить=Thumbprint_1.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			Сообщить("В пользователе не заполнен адрес СУЗ");
			Возврат;
			
		КонецЕсли;
	
	
	//Если ОбработкаWEBНаСервере Тогда
	//		ЗагрузканаСервереОтправитьЗаявка_ЧерезСУЗ(Thumbprint_1,Тело,Адрес,Порт,Защищ);
		
		
	//Иначе
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;
			
			Если РаботатьНаV1=Истина Тогда
		HTTPЗапрос=Новый HTTPЗапрос("api/aggregation");
			Иначе
		HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/aggregation?omsId="+Thumbprint_1.ИдентификаторСУЗ);
		КонецЕсли;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
																			ТокенСУЗ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);

	HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Попытка
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		Возврат;
	КонецПопытки;
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Текст1);
	КонецЕсли;
	
	
	Если Ответ.КодСостояния=202 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Объект._Order_ID=NNN.order_id;
	
	ИначеЕсли Ответ.КодСостояния=200 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Если РаботатьНаV1=Истина Тогда
			Объект._Order_ID=NNN;
				Иначе
			Объект._Order_ID=NNN.reportId;
			         КонецЕсли;
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	//КонецЕсли;
	//Если Ответ.КодСостояния<>200 Тогда
	//	
	//	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
	//	  Текст1=Ответ.ПолучитьТелоКакСтроку();
	//		Попытка
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//			Объект.ОшибкаОтправки=NNN.error_message;
	//			
	//		Исключение
	//		КонецПопытки;
	//	Иначе
	//		Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета");
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//		Объект._Order_ID=NNN.order_id;
	//КонецЕсли;
	КонецЕсли;
	ЭтаФорма.Записать();
	
КонецПроцедуры


Функция ВернутьУНИКУМ()
	Возврат xmlString(Новый УникальныйИдентификатор())
КонецФункции

Процедура УстановитьДатуСЧасовымПоясом(ОбъектXDTO, ИмяСвойства, Дата, ХранилищеВременныхДат, КэшОшибок = Неопределено) Экспорт
	
	ДатаСЧасовымПоясом = ДатаСЧасовымПоясом(Дата);
	
	ВременнаяДатаUTC = ДатаUTC(ВременнаяДата(Дата));
	
	ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, ВременнаяДатаUTC, КэшОшибок);
	ЛексическоеЗначениеВременнойДаты = ОбъектXDTO.ПолучитьXDTO(ИмяСвойства).ЛексическоеЗначение;
	
	ХранилищеВременныхДат.Вставить(ЛексическоеЗначениеВременнойДаты, ДатаСЧасовымПоясом);
	         
КонецПроцедуры

Функция ОбъектXDTOВXML(ОбъектXDTO, ИмяТипа, URIПространстваИмен) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	temp = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML.УстановитьСтроку(ПараметрыФорматированияXML(Ложь));
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO, ИмяТипа);
	ТекстXML = ЗаписьXML.Закрыть();
	
	ТекстXML = СтрЗаменить(ТекстXML, "xmlns:d2p1=""" + URIПространстваИмен + """", "");
	ТекстXML = СтрЗаменить(ТекстXML, URIПространстваИмен, "");
	ТекстXML = СтрЗаменить(ТекстXML, "xmlns=""""", "");
	
	Возврат ТекстXML;
	
КонецФункции

Функция ПараметрыФорматированияXML(ИспользоватьОтступы = Истина, СимволОтступа = "  ") Экспорт
	
	ПараметрыЗаписи = Новый ПараметрыЗаписиXML(
		"UTF-8",
		"1.0",
		ИспользоватьОтступы,
		ИспользоватьОтступы,
		СимволОтступа);
	
	Возврат ПараметрыЗаписи;
	
КонецФункции
 



Функция СформироватьАгрегациюЛекарства_XSD(Thumbprint_1,session_ui)
	Если Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.Формирование Тогда
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("documents");
	Чтение.ЗаписатьАтрибут("version","1.35");
 	
	Чтение.ЗаписатьНачалоЭлемента("unit_pack");
	Чтение.ЗаписатьАтрибут("action_id","911");
	
	
	Если ЗначениеЗАполнено(Объект.ДоговорЛекарства) Тогда
		Чтение.ЗаписатьНачалоЭлемента("subject_id");
		Чтение.ЗаписатьТекст(Объект.ДоговорЛекарства.РегистрационныйНомер);
		Чтение.ЗаписатьКонецЭлемента();
	Иначе
		
		Чтение.ЗаписатьНачалоЭлемента("subject_id");
		Чтение.ЗаписатьТекст(Объект.Организация.subjectIdФармацевтика);
		Чтение.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	Чтение.ЗаписатьНачалоЭлемента("sscc");
	Чтение.ЗаписатьТекст(Объект.НомерКороба);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("operation_date");
	//Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
		
		//Время=ПолучитьЧасовойПоясИнформационнойБазы();
		
	Прибавка="Z";
		Если ЗначениеЗаполнено(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств) тогда
			Прибавка=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств,2,"0");
			Если Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств>0 Тогда
				     Прибавка="+"+Прибавка+":00";
			Иначе
				     Прибавка="-"+Прибавка+":00";
			Конецесли;
		Конецесли;
		
		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+Прибавка);
//	Иначе
//		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"Z");
	
//	конецесли;
	Чтение.ЗаписатьКонецЭлемента();
	
		Чтение.ЗаписатьНачалоЭлемента("content");
Для Каждого Стр_1 Из Объект.Марки Цикл
	
	//Чтение.ЗаписатьНачалоЭлемента("signs");
//	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));
//	Для Каждого Стр_c Из НСтрок Цикл
		//Чтение.ЗаписатьНачалоЭлемента("union");
		Штрих=СокрЛП(Стр_1.марка);
		Если СтрДлина(Штрих)=18 Тогда
			
				Чтение.ЗаписатьНачалоЭлемента("sscc");
			Иначе
				Чтение.ЗаписатьНачалоЭлемента("sgtin");
		
		
		Если СтрДлина(Штрих)>27 Тогда
			Штрих=Сред(Штрих,3,14)+Сред(Штрих,19);
		КонецЕсли;
		
		КонецЕсли;
		Чтение.ЗаписатьТекст(Штрих);
		
		Чтение.ЗаписатьКонецЭлемента();
	////s	Чтение.ЗаписатьКонецЭлемента();
		
// 	Чтение.ЗаписатьКонецЭлемента();
		
//	Конеццикла;
Конеццикла;
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Текст=Чтение.Закрыть();	
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;

	
	Возврат Текст;
	
ИначеЕсли Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.Расформирование Тогда
	
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("documents");
	Чтение.ЗаписатьАтрибут("version","1.35");
 	
	Чтение.ЗаписатьНачалоЭлемента("unit_unpack");
	Чтение.ЗаписатьАтрибут("action_id","912");
	
		Если ЗначениеЗАполнено(Объект.ДоговорЛекарства) Тогда
		Чтение.ЗаписатьНачалоЭлемента("subject_id");
		Чтение.ЗаписатьТекст(Объект.ДоговорЛекарства.РегистрационныйНомер);
		Чтение.ЗаписатьКонецЭлемента();
	Иначе
		Чтение.ЗаписатьНачалоЭлемента("subject_id");
		Чтение.ЗаписатьТекст(Объект.Организация.subjectIdФармацевтика);
		Чтение.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	
	Чтение.ЗаписатьНачалоЭлемента("operation_date");
	//Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
		
		//Время=ПолучитьЧасовойПоясИнформационнойБазы();
		
			Прибавка="Z";
		Если ЗначениеЗаполнено(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств) тогда
			Прибавка=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств,2,"0");
			Если Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств>0 Тогда
				     Прибавка="+"+Прибавка+":00";
			Иначе
				     Прибавка="-"+Прибавка+":00";
			Конецесли;
		Конецесли;

		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+ПРибавка);
//	Иначе
//		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"Z");
	
//	конецесли;
	Чтение.ЗаписатьКонецЭлемента();
	Для Каждого Стр_1 Из Объект.Марки Цикл
		
		Чтение.ЗаписатьНачалоЭлемента("sscc");
		Чтение.ЗаписатьТекст(Стр_1.Марка);
		Чтение.ЗаписатьКонецЭлемента();
	Конеццикла;
	
	
	//Чтение.ЗаписатьКонецЭлемента();
	
	
	
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Текст=Чтение.Закрыть();	
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;

	
	Возврат Текст;
	
		
	
	
	ИначеЕсли Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.ИзъятиеИзУпаковки Тогда
	
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("documents");
	Чтение.ЗаписатьАтрибут("version","1.35");
 	
	Чтение.ЗаписатьНачалоЭлемента("unit_extract");
	Чтение.ЗаписатьАтрибут("action_id","913");
	
	
	Если ЗначениеЗАполнено(Объект.ДоговорЛекарства) Тогда
		Чтение.ЗаписатьНачалоЭлемента("subject_id");
		Чтение.ЗаписатьТекст(Объект.ДоговорЛекарства.РегистрационныйНомер);
		Чтение.ЗаписатьКонецЭлемента();
	Иначе
		
		Чтение.ЗаписатьНачалоЭлемента("subject_id");
		Чтение.ЗаписатьТекст(Объект.Организация.subjectIdФармацевтика);
		Чтение.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	//Чтение.ЗаписатьНачалоЭлемента("sscc");
	//Чтение.ЗаписатьТекст(Объект.НомерКороба);
	//Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("operation_date");
	//Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
		
		//Время=ПолучитьЧасовойПоясИнформационнойБазы();
		 	Прибавка="Z";
		Если ЗначениеЗаполнено(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств) тогда
			Прибавка=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств,2,"0");
			Если Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств>0 Тогда
				     Прибавка="+"+Прибавка+":00";
			Иначе
				     Прибавка="-"+Прибавка+":00";
			Конецесли;
		Конецесли;

		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+Прибавка);
//	Иначе
//		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"Z");
	
//	конецесли;
	Чтение.ЗаписатьКонецЭлемента();
	
		Чтение.ЗаписатьНачалоЭлемента("content");
Для Каждого Стр_1 Из Объект.Марки Цикл
	
	//Чтение.ЗаписатьНачалоЭлемента("signs");
//	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));
//	Для Каждого Стр_c Из НСтрок Цикл
		//Чтение.ЗаписатьНачалоЭлемента("union");
		Если Стр_1.ИзъятьИзУпаковки=Истина Тогда
			Штрих=Стр_1.марка;
			Если СтрДлина(Штрих)=18 Тогда
				
					Чтение.ЗаписатьНачалоЭлемента("sscc");
				Иначе
					Чтение.ЗаписатьНачалоЭлемента("sgtin");
			
			
			Если СтрДлина(Штрих)>27 Тогда
				Штрих=Сред(Штрих,3,14)+Сред(Штрих,19);
			КонецЕсли;
			
			КонецЕсли;
			Чтение.ЗаписатьТекст(Штрих);
			
			Чтение.ЗаписатьКонецЭлемента();
		КонецЕсли;
	////s	Чтение.ЗаписатьКонецЭлемента();
		
// 	Чтение.ЗаписатьКонецЭлемента();
		
//	Конеццикла;
Конеццикла;
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Текст=Чтение.Закрыть();	
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;

	
	Возврат Текст;

		
	

	
	
	
	
	
	
	
	
	
	
	
	
	

	КонецЕсли;
	
	
	
	Возврат "";
//	ТипОбъекта911 = ФабрикаXDTO.Тип("911",);
//	Объект911 = ФабрикаXDTO.Создать(ТипОбъекта911);

	СообщениеКПередаче = СтруктураСообщенияКПередаче();
                    

	ИмяТипа   = "documents";
	ИмяПакета = "unit_pack";
	УстановленныеДаты = Новый Соответствие;


	ПространствоИмен ="http://nalog.ru/MarkInfo/med/1.32";
	
	ПередачаДанных = ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ПередачаДанных.version = 1.34;
	ПередачаДанных.session_ui = session_ui;

	
	Уведомление = ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;

	Уведомление.action_id =911;

	//ЗаполнитьСвойствоXDTO(Уведомление, "subject_id" , Объект.Организация.subjectIdФармацевтика, СообщениеКПередаче);
	ЗаполнитьСвойствоXDTO(Уведомление, "subject_id" , Строка(Объект.Организация.subjectIdФармацевтика));
	ЗаполнитьСвойствоXDTO(Уведомление, "sscc", Объект.НомерКороба, СообщениеКПередаче);
	//"2019-11-25T13:52:54.265+03:00"УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Объект.Дата, УстановленныеДаты, СообщениеКПередаче);
	
	ЗаполнитьСвойствоXDTO(Уведомление,"operation_date", Формат(Объект.Дата, "ДФ=yyyy-MM-ddTЧЧ:мм:сс") + "Z");	
	
	
	Уведомление.content = ОбъектXDTOПоИмениСвойства(Уведомление, "content");
	Для Каждого Стр_c Из Объект.Марки Цикл
		
		ЗаполнитьСвойствоXDTO(Уведомление.content, "sgtin", Прав(Стр_c.Марка,27));
		Сообщить("!");


	Конеццикла;                       
	                     
	ПередачаДанных.Проверить();
	Возврат ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);



//	
//	
//	ТипОбъекта_ЮнитПак = ФабрикаXDTO.Тип("http://nalog.ru/MarkInfo/med/1.32","unit_pack");
//	ОбъектЮнитПак = ФабрикаXDTO.Создать(ТипОбъекта_ЮнитПак);
//	
//	
//	

//	
//	ОбъектЮнитПак.action_id = 911;
//	ОбъектЮнитПак.subject_id = Объект.Организация.subjectIdФармацевтика;
//	ОбъектЮнитПак.sscc = Объект.НомерКороба;
//	ОбъектЮнитПак.operation_date = Объект.Дата;
//	ОбъектЮнитПак.content = "";

//	
//	
//	//Объект911.Добавить(ОбъектЮнитПак);
//	
//	Запись = Новый ЗаписьXML;
//	Запись.УстановитьСтроку(); // запись в строку
//	
//	ФабрикаXDTO.Записать(Запись, ОбъектЮнитПак);
//	ДанныеXML = Запись.Закрыть(); // документ готов!
//	
//	Возврат ДанныеXML;
	
	

КонецФункции // СформироватьАгрегациюЛекарства_XSD()


Процедура ОтправитьАгрегациюЛекартсваСервер(Thumbprint_1)
	
	
	
	
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
	//СформироватьФайлДляОтправки=СформироватьАгрегациюЛекарства(СРегистра);
	СформироватьФайлДляОтправки = СформироватьАгрегациюЛекарства_XSD(Thumbprint_1,СРегистра);
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(СформироватьФайлДляОтправки);
	Чтение.Закрыть();
	
	//ВремФайл = ПолучитьИмяВременногоФайла("xml");
	//ТекстовыйДокИзФайла = Новый ТекстовыйДокумент;
	//ТекстовыйДокИзФайла.ДобавитьСтроку(СформироватьФайлДляОтправки);
	//ТекстовыйДокИзФайла.Записать(ВремФайл, КодировкаТекста.UTF8);
	
	Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
	Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
	Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
	Добав=СтрЗаменить(Добав,"\r\n","");

				
				Подписанный="";
		//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
	//	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл_ЛДМП(СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Ложь);
			Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
			Иначе
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПодписатьФайл_ЛДМП(СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Ложь);
				
				
			КонецЕсли;
		
		//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//Подписанный,КодировкаТекста.UTF8,Ложь));
		
					Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
				Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
				 Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				 
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("document");
	Чтен.ЗаписатьЗначение(Добав);
	Чтен.ЗаписатьИмяСвойства("sign");
	Чтен.ЗаписатьЗначение(Подписанный);
	Чтен.ЗаписатьИмяСвойства("request_id");
	Чтен.ЗаписатьЗначение(ВернутьУНИКУМ());
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();
	
				 
				 
		//Тело="{
		//|""doc_type"":""311"",
		//|""document"":"""+Добав+""",
		//|""sign"":"""+Подписанный+""",
		//|""request_id"":"""+ВернутьУНИКУМ()+"
		//|}";
			
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/send");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		
	//	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	//	ТекстовыйДокИзФайла = Новый ТекстовыйДокумент;
	//	ТекстовыйДокИзФайла.ДобавитьСтроку(Тело);
	//	ТекстовыйДокИзФайла.Записать(ВремФайл, КодировкаТекста.UTF8);
		
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		
	
			
	
	
	Если Ответ.КодСостояния=202 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Объект._Order_ID=NNN.order_id;
	
	ИначеЕсли Ответ.КодСостояния=200 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Объект._Order_ID=NNN.document_id;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Ответ(Текст1);
		КонецЕсли;
	
	//Если Ответ.КодСостояния<>200 Тогда
	//	
	//	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
	//	  Текст1=Ответ.ПолучитьТелоКакСтроку();
	//		Попытка
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//			Объект.ОшибкаОтправки=NNN.error_message;
	//			
	//		Исключение
	//		КонецПопытки;
	//	Иначе
	//		Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета");
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//		Объект._Order_ID=NNN.order_id;
	//КонецЕсли;
	
КонецПроцедуры


Функция Вернутьsub()
	Возврат Объект.ДоговорЛекарства.РегистрационныйНомер
Конецфункции

&НаКлиенте
Процедура ОтправитьАгрегациюЛекартсва(Thumbprint_1)
		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	

				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
	Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ВидДокументаУпаковок_ХамелеонЦРПТ.Расформирование") Тогда
		
		subjectIdФармацевтика=ВернутьSUB();
		
		Объект.МаркиОприходовать.Очистить();
		 
		////Ищем 
		
		
		
		МассивЗапросов.Очистить();//=Новый Массив;
		//МассивЗапросов.Колонки.Добавить("ИдЗапроса");
		//МассивЗапросов.Колонки.Добавить("Обработан");
		
		
		
		Для каждого Стр_1 Из Объект.Марки Цикл
			
			
			
			
			
			
			Страница=0;
			
			Чтение=Новый ЗаписьXML;
			Чтение.УстановитьСтроку("UTF-8");
			Чтение.ЗаписатьОбъявлениеXML();
			Чтение.ЗаписатьНачалоЭлемента("documents");
			Чтение.ЗаписатьАтрибут("version","1.35");
		 	
			Чтение.ЗаписатьНачалоЭлемента("query_hierarchy_info");
			Чтение.ЗаписатьАтрибут("action_id","220");
			
			Чтение.ЗаписатьНачалоЭлемента("subject_id");
			Чтение.ЗаписатьТекст(subjectIdФармацевтика);
			Чтение.ЗаписатьКонецЭлемента();
			
			Чтение.ЗаписатьНачалоЭлемента("sscc");
			Чтение.ЗаписатьТекст(Стр_1.Марка);
			Чтение.ЗаписатьКонецЭлемента();
			
			Чтение.ЗаписатьКонецЭлемента();
			Чтение.ЗаписатьКонецЭлемента();
			СформироватьФайлДляОтправки=Чтение.Закрыть();
			
			
			
			
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

				
				Подписанный="";
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
		
			Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
		Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("document");
	Чтен.ЗаписатьЗначение(Добав);
	Чтен.ЗаписатьИмяСвойства("sign");
	Чтен.ЗаписатьЗначение(Подписанный);
	Чтен.ЗаписатьИмяСвойства("request_id");
	Чтен.ЗаписатьЗначение(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВернутьУНИКУМ());
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();
	
				 
				 
		//Тело="{
		//|""doc_type"":""311"",
		//|""document"":"""+Добав+""",
		//|""sign"":"""+Подписанный+""",
		//|""request_id"":"""+ВернутьУНИКУМ()+"
		//|}";
			
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/send");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		
		Если Ответ.КодСостояния=200 Тогда
			
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Добав_Запрос=МассивЗапросов.Добавить();
			Добав_Запрос.ИдЗапроса=NNN.document_id;
			Добав_Запрос.Марка=Стр_1.Марка;
			Добав_Запрос.Обработан=Ложь;
			//МассивЗапросов.Добавить(Новый );
			
		КонецЕсли;
	Конеццикла;
	
	
	    ОбработаныВсе=Ложь;
	Пока ОбработаныВсе=Ложь Цикл
		ОбработаныВсе=Истина;
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
				
				Для Каждого Стр_1_З Из МассивЗапросов Цикл
					Если Стр_1_З.Обработан=Истина Тогда
						Продолжить;
					Конецесли;
					 ОбработаныВсе=Ложь;
				_Order_ID=	Стр_1_З.ИдЗапроса;
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+_Order_ID+"/ticket");
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("documents/"+_Order_ID+"/ticket");
					
				Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
					
					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
					
				КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	
		
	//	 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				 
				 
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					
					
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(NNN.link,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//
					Сайт_1=NNN.link;
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
					
					
					
					
					
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
	//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Текст1) 
		ИЛИ Найти(Текст1,"Ошибка при выполнении операции: запись не найдена"" }")>1
		тогда
					//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
						 
						 Продолжить;
					 КонецЕсли;
					 
					 МассивУп=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.МассивКмОвДляОбработки_Упаковки(Текст1);
					 Для Каждого Стр_222 Из МассивУп Цикл
						 
						Если Объект.МаркиОприходовать.НайтиСтроки(Новый Структура("НомерКороба,Марка",Стр_1_З.Марка,Стр_222.НомерКМ)).Количество()=0 Тогда
						 ДДД_Агр=Объект.МаркиОприходовать.Добавить();
						 ДДД_Агр.Марка=Стр_222.НомерКМ;
						 ДДД_Агр.НомерКороба=Стр_1_З.Марка;
						 
					 КонецЕсли;
						//Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",cis_1,Стр_1.НомерКМ)).Количество()=0 Тогда
						
						//	ДобавК=Объект.Короба.Добавить();
						//	ДобавК.НомерКороба=cis_1;
						//	ДобавК.ШтрихКод=Стр_1.НомерКМ;
						//	БылиУпаковки=Истина;
						//КонецЕсли;
						
						//Строк_1.НомерКМ=ключ;    
						//Если Стр_1.Продолжить=Истина Тогда
						//	РекурсияУпаковки_Лекарства(Строк,Количество,Thumbprint_1,Срегистра,subjectIdФармацевтика)								
						//Иначе
						  //   Количество=Количество+1;
						
						//КонецЕсли;
						 
					Конеццикла;
					 Стр_1_З.Обработан=Истина;
					 
					 Продолжить;
					 
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					    	Возврат;					
				ИначеЕсли Ответ.КодСостояния=301 Тогда
					Возврат;
					
				Иначе
				//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
						Продолжить;
				КонецЕсли;
		
				//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
				
	              
		
		
				
				
			Конеццикла;	
			Если ОбработаныВсе=Истина Тогда
				Прервать;
			КонецЕсли;
		Конеццикла;
		
		///ОтправилиЗапросНаИнформацию();
		
	//	Для каждого Стр_1 Из Объект.Марки Цикл
	//		
	//		
	//		
	//		
	//		
	//		
	//		Страница=0;
	//		
	//		Чтение=Новый ЗаписьXML;
	//		Чтение.УстановитьСтроку("UTF-8");
	//		Чтение.ЗаписатьОбъявлениеXML();
	//		Чтение.ЗаписатьНачалоЭлемента("documents");
	//		Чтение.ЗаписатьАтрибут("version","1.35");
	//	 	
	//		Чтение.ЗаписатьНачалоЭлемента("query_hierarchy_info");
	//		Чтение.ЗаписатьАтрибут("action_id","220");
	//		
	//		Чтение.ЗаписатьНачалоЭлемента("subject_id");
	//		Чтение.ЗаписатьТекст(subjectIdФармацевтика);
	//		Чтение.ЗаписатьКонецЭлемента();
	//		
	//		Чтение.ЗаписатьНачалоЭлемента("sscc");
	//		Чтение.ЗаписатьТекст(Стр_1.Марка);
	//		Чтение.ЗаписатьКонецЭлемента();
	//		
	//		Чтение.ЗаписатьКонецЭлемента();
	//		Чтение.ЗаписатьКонецЭлемента();
	//		СформироватьФайлДляОтправки=Чтение.Закрыть();
	//		
	//		
	//		
	//		
	//	Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//	СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
	//				Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
	//			Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
	//			Добав=СтрЗаменить(Добав,"\r\n","");

	//			
	//			Подписанный="";
	//			ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
	//	
	//		Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
	//	Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
	//		Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	//			
	//			 
	//Чтен=Новый  ЗаписьJSON;
	//Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	//Чтен.ЗаписатьНачалоОбъекта();
	//Чтен.ЗаписатьИмяСвойства("document");
	//Чтен.ЗаписатьЗначение(Добав);
	//Чтен.ЗаписатьИмяСвойства("sign");
	//Чтен.ЗаписатьЗначение(Подписанный);
	//Чтен.ЗаписатьИмяСвойства("request_id");
	//Чтен.ЗаписатьЗначение(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВернутьУНИКУМ());
	//Чтен.ЗаписатьКонецОбъекта();
	//Тело=Чтен.Закрыть();
	//
	//			 
	//			 
	//	//Тело="{
	//	//|""doc_type"":""311"",
	//	//|""document"":"""+Добав+""",
	//	//|""sign"":"""+Подписанный+""",
	//	//|""request_id"":"""+ВернутьУНИКУМ()+"
	//	//|}";
	//		
	//			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
	//				Прокси=Новый ИнтернетПрокси;
	//				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
	//			
	//				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	//			Иначе
	//				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	//			КонецЕсли;
	//	
	//		HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/send");
	//	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	//	HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
	//	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	//	///Константин           
	//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
	//	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	//	Текст1=Ответ.ПолучитьТелоКакСтроку();
	//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	//	
	//	
	//	Если Ответ.КодСостояния=200 Тогда
	//		
	//		NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
	//		_Order_ID=NNN.document_id;
			
			
	//		Пока Истина Цикл
	//			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	//			
	//			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
	//				Прокси=Новый ИнтернетПрокси;
	//				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
	//			
	//				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	//			Иначе
	//				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	//			КонецЕсли;
	//			Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
	//				HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+_Order_ID+"/ticket");
	//			Иначе
	//				HTTPЗапрос=Новый HTTPЗапрос("documents/"+_Order_ID+"/ticket");
	//				
	//			Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
	//				
	//				HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	//				
	//			КонецЕсли;
	//	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	//	HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
	//	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	//	///Константин           
	//	//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
	//	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	//	Текст1=Ответ.ПолучитьТелоКакСтроку();
	//		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	//
	//	
	////	 Попытка				
	//		 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
	//			 
	//			 
	//			 
	//			 
	//			Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
	//			 
	//			 
	//				//ЧтениеJSON = Новый ЧтениеJSON;
	//				//ЧтениеJSON.УстановитьСтроку(Текст1);
	//				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
	//				
	//				
	//				//Сайт="http://"+Thumbprint_1.АдресКАПИ;
	//				//Сайт_1=СтрЗаменить(NNN.link,Сайт,"");
	//				//Сайт="https://"+Thumbprint_1.АдресКАПИ;
	//				//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
	//				//
	//				Сайт_1=NNN.link;
	//				Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
	//				Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
	//				
	//				
	//				
	//				
	//				
	//							HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
	//	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	//	HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
	//	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	//	///Константин           
	//	//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
	//	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	//	Текст1=Ответ.ПолучитьТелоКакСтроку();
	//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	//	
	//КонецЕсли;
	//Если Не ЗначениеЗаполнено(Текст1) 
	//	ИЛИ Найти(Текст1,"Ошибка при выполнении операции: запись не найдена"" }")>1
	//	тогда
	//					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	//					 
	//					 Продолжить;
	//				 КонецЕсли;
	//				 
	//				 МассивУп=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.МассивКмОвДляОбработки_Упаковки(Текст1);
	//				 Для Каждого Стр_222 Из МассивУп Цикл
	//					 
	//					Если Объект.МаркиОприходовать.НайтиСтроки(Новый Структура("НомерКороба,Марка",Стр_1.Марка,Стр_222.НомерКМ)).Количество()=0 Тогда
	//					 ДДД_Агр=Объект.МаркиОприходовать.Добавить();
	//					 ДДД_Агр.Марка=Стр_222.НомерКМ;
	//					 ДДД_Агр.НомерКороба=Стр_1.Марка;
	//					 
	//					КонецЕсли;
	//					//Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",cis_1,Стр_1.НомерКМ)).Количество()=0 Тогда
	//					
	//					//	ДобавК=Объект.Короба.Добавить();
	//					//	ДобавК.НомерКороба=cis_1;
	//					//	ДобавК.ШтрихКод=Стр_1.НомерКМ;
	//					//	БылиУпаковки=Истина;
	//					//КонецЕсли;
	//					
	//					//Строк_1.НомерКМ=ключ;    
	//					//Если Стр_1.Продолжить=Истина Тогда
	//					//	РекурсияУпаковки_Лекарства(Строк,Количество,Thumbprint_1,Срегистра,subjectIdФармацевтика)								
	//					//Иначе
	//					  //   Количество=Количество+1;
	//					
	//					//КонецЕсли;
	//					 
	//				Конеццикла;
	//				 
	//				 Прервать;
	//				 
	//			ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
	//				    	Возврат;					
	//			ИначеЕсли Ответ.КодСостояния=301 Тогда
	//				Возврат;
	//				
	//			Иначе
	//				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	//					Продолжить;
	//			КонецЕсли;
	//	
	//			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	//			
	//              Прервать;
	//	
	//	
	//			
	//			
	//		Конеццикла;
						
		//Сообщить(Ответ.ПолучитьТелоКакСтроку());	
	КонецЕсли;
		//КонецЦикла;	
			
		
		
	//Конецесли;
	
	//Возврат;
	
	//СформироватьФайлДляОтправки=СформироватьАгрегациюЛекарства(СРегистра);
	СформироватьФайлДляОтправки = СформироватьАгрегациюЛекарства_XSD(Thumbprint_1,СРегистра);
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(СформироватьФайлДляОтправки);
	Чтение.Закрыть();
	
	//ВремФайл = ПолучитьИмяВременногоФайла("xml");
	//ТекстовыйДокИзФайла = Новый ТекстовыйДокумент;
	//ТекстовыйДокИзФайла.ДобавитьСтроку(СформироватьФайлДляОтправки);
	//ТекстовыйДокИзФайла.Записать(ВремФайл, КодировкаТекста.UTF8);
	
	Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
	Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
	Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
	Добав=СтрЗаменить(Добав,"\r\n","");

				
				Подписанный="";
		//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
	//	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл_ЛДМП(СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Ложь);
			Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл_ЛДМП(СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Ложь);
				
				
			КонецЕсли;
		
		//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//Подписанный,КодировкаТекста.UTF8,Ложь));
		
					Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
				Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
				 Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				 
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("document");
	Чтен.ЗаписатьЗначение(Добав);
	Чтен.ЗаписатьИмяСвойства("sign");
	Чтен.ЗаписатьЗначение(Подписанный);
	Чтен.ЗаписатьИмяСвойства("request_id");
	Чтен.ЗаписатьЗначение(ВернутьУНИКУМ());
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();
	
				 
				 
		//Тело="{
		//|""doc_type"":""311"",
		//|""document"":"""+Добав+""",
		//|""sign"":"""+Подписанный+""",
		//|""request_id"":"""+ВернутьУНИКУМ()+"
		//|}";
			
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/send");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		
	//	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	//	ТекстовыйДокИзФайла = Новый ТекстовыйДокумент;
	//	ТекстовыйДокИзФайла.ДобавитьСтроку(Тело);
	//	ТекстовыйДокИзФайла.Записать(ВремФайл, КодировкаТекста.UTF8);
		
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		
	
			
	
	
	Если Ответ.КодСостояния=202 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Объект._Order_ID=NNN.order_id;
	
	ИначеЕсли Ответ.КодСостояния=200 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Объект._Order_ID=NNN.document_id;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Ответ(Текст1);
		КонецЕсли;
	
	//Если Ответ.КодСостояния<>200 Тогда
	//	
	//	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
	//	  Текст1=Ответ.ПолучитьТелоКакСтроку();
	//		Попытка
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//			Объект.ОшибкаОтправки=NNN.error_message;
	//			
	//		Исключение
	//		КонецПопытки;
	//	Иначе
	//		Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета");
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//		Объект._Order_ID=NNN.order_id;
	//КонецЕсли;
	ЭтаФорма.Записать();
	
КонецПроцедуры


Функция СформироватьФайлИзъятия()
	ЕстьИзъятие=Ложь;
	
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("participant_inn");
	Чтен.ЗаписатьЗначение(xmlString(Объект.Организация.ИНН));
	Чтен.ЗаписатьИмяСвойства("reaggregation_type");
	Чтен.ЗаписатьЗначение("REMOVING");
	Чтен.ЗаписатьИмяСвойства("uitu");
	Чтен.ЗаписатьЗначение(Объект.НомерКороба);
	Чтен.ЗаписатьИмяСвойства("uit_uitu_list");
	Чтен.ЗаписатьНачалоМассива();
	
	
	Для Каждого Стр_1 Из Объект.Марки Цикл
		Если Стр_1.ИзъятьИзУпаковки Тогда
			Чтен.ЗаписатьНачалоОбъекта();
			Чтен.ЗаписатьИмяСвойства("uit_uitu");
			Если ЗначениеЗаполнено(Стр_1.cis) тогда
				Чтен.ЗаписатьЗначение(Стр_1.cis);
			Иначе
				Чтен.ЗаписатьЗначение(Стр_1.Марка);
				
			КонецЕсли;
			Чтен.ЗаписатьКонецОбъекта();
			ЕстьИзъятие=Истина;
			
			
			
		КонецЕсли;
	Конеццикла;
	Если ЕстьИзъятие=Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	Текст=Чтен.Закрыть();
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
	Возврат Текст;
	
	
	
	
КонецФункции

Процедура ИзъятьИзУпаковкиСервер(Thumbprint_1,УжеОтправили=Ложь)
	СформироватьФайлДляОтправки=СформироватьФайлИзъятия();
	Если СформироватьФайлДляОтправки=Неопределено Тогда
		Сообщить("Не выбраны строчки для изъятия");
		Возврат;
	Конецесли;
	
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		Сообщить("Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
		
	Подписанный="";
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
	Подписанный="";
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
				Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	
	
	Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
				Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
			Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
			Добав=СтрЗаменить(Добав,"\r\n","");

	Тело="{
	|""product_document"":"""+Добав+""",
	|""document_format"": ""MANUAL"",
	|""signature"":"""+Подписанный+"""}";
	
 		
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			
 			что=Thumbprint_1.что;
			
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/reaggregation/create?pg="+Что);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
		ИЛИ Ответ.КодСостояния=201 
		Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			Объект._Order_ID=Текст1;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ИзъятьИзУпаковкиСервер("",Истина)			
			КонецЕсли
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						
						Если Найти(Текст1,"Billing contract for shoes product group not signed by participant")>0 Тогда
							Сообщить("Договор биллинга для выбранной группы не подписан участником.");
						Иначе
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
							КонецПопытки;
							
						КонецПопытки;
						КонецЕсли;
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	
	КонецЕсли;
	ЭтаФорма.Записать();	
	
	
КонецПроцедуры


&НаКлиенте
Процедура ИзъятьИзУпаковки(Thumbprint_1,УжеОтправили=Ложь)
	СформироватьФайлДляОтправки=СформироватьФайлИзъятия();
	Если СформироватьФайлДляОтправки=Неопределено Тогда
		Сообщить("Не выбраны строчки для изъятия");
		Возврат;
	Конецесли;
	
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
		
	Подписанный="";
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
	Подписанный="";
	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
				Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	
	
	Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
				Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
			Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
			Добав=СтрЗаменить(Добав,"\r\n","");

	Тело="{
	|""product_document"":"""+Добав+""",
	|""document_format"": ""MANUAL"",
	|""signature"":"""+Подписанный+"""}";
	
 	//Если ОбработкаWEBНаСервере Тогда
		//Если НЕ ЗагрузканаСервереОтправить(Thumbprint_1,СРегистра,УжеОтправили,Тело) Тогда
		//		Если УжеОтправили=Истина Тогда
		//		//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
		//		ОтправитьВЦРПТ(Команда,Истина)			
		//КонецЕсли
		//
		//КонецЕсли;
		
		
	//Иначе
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			
 			что=Thumbprint_1.что;
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/reaggregation/create?pg="+Что);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
		ИЛИ Ответ.КодСостояния=201 
		Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			Объект._Order_ID=Текст1;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ИзъятьИзУпаковки("",Истина)			
			КонецЕсли
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						
						Если Найти(Текст1,"Billing contract for shoes product group not signed by participant")>0 Тогда
							Сообщить("Договор биллинга для выбранной группы не подписан участником.");
						Иначе
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
							КонецПопытки;
							
						КонецПопытки;
						КонецЕсли;
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	//КонецЕсли;
	
	КонецЕсли;
	ЭтаФорма.Записать();	
	
	
КонецПроцедуры

&НаСервере
Процедура ОтправимВсенаСервере(Thumbprint_1,УжеОтправили=Ложь)
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
		ОтправитьАгрегациюЛекартсваСервер(Thumbprint_1);
		Возврат;
	ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ВидДокументаУпаковок_ХамелеонЦРПТ.ИзъятиеИзУпаковки") Тогда
		
		ИзъятьИзУпаковкиСервер(Thumbprint_1);
		
		Возврат;
		
		
	ИначеЕсли Объект.ЧерезСУЗ 
//		ИЛИ Thumbprint_1.НаименованиеСтенда="Табак"
		Тогда
		ОтправитьАгрегациюЧереСУЗСервер(Thumbprint_1);
		
		Возврат;
	КонецЕсли;
	
	
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеТокенаНаСервере(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		Сообщить("Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
	
		СформироватьФайлДляОтправки=СформироватьXmlФайлИмпорт();
	Если Не ЗначениеЗаполнено(СформироватьФайлДляОтправки) Тогда
		Возврат;
	КонецЕсли;		
		Попытка
//			Если НеПрошлаПроверкаИмпорт(СформироватьФайлДляОтправки) Тогда
//				Объект.ОшибкаОтправки="Проверка документа не прошла по схеме xsd";
				//ПоказатьПредупреждение("");
//				Возврат;
//				
//			КонецЕсли;
			
			
		Исключение
		КонецПопытки;
		
	Подписанный="";
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
	Подписанный="";
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
				Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	
	
	Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
				Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
			Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
			Добав=СтрЗаменить(Добав,"\r\n","");

	Тело="{
	|""product_document"":"""+Добав+""",
	|""document_format"": ""MANUAL"",
	|""signature"":"""+Подписанный+"""}";
	
 //	Если ОбработкаWEBНаСервере Тогда
	//	Если НЕ ЗагрузканаСервереОтправить(Thumbprint_1,СРегистра,УжеОтправили,Тело) Тогда
	//			Если УжеОтправили=Истина Тогда
	//			//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
	//		Иначе
	//			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
	//			ОтправимВсенаСервере("",Истина)			
	//	КонецЕсли
		
	//	КонецЕсли;
		
		
	//Иначе
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			
 			что=Thumbprint_1.что;
			Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ВидДокументаУпаковок_ХамелеонЦРПТ.Расформирование") Тогда
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/disaggregation/create?pg="+Что);
			ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ВидДокументаУпаковок_ХамелеонЦРПТ.ДобавлениеВУпаковку") Тогда
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/reaggregation/create?pg="+Что);
			Иначе
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/aggregation/create?pg="+Что);
			КонецЕсли;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Текст1);
	КонецЕсли;
		
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
		ИЛИ Ответ.КодСостояния=201 
		Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			Объект._Order_ID=Текст1;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОтправимВсенаСервере("",Истина)			
			КонецЕсли
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						
						Если Найти(Текст1,"Billing contract for shoes product group not signed by participant")>0 Тогда
							Сообщить("Договор биллинга для выбранной группы не подписан участником.");
						Иначе
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
							КонецПопытки;
							
						КонецПопытки;
						КонецЕсли;
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	//КонецЕсли;
	
	КонецЕсли;
	
	
	
КонецПроцедуры


&НаКлиенте
Процедура ОформитьЛекарства(Thumbprint_1)
	Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ВидДокументаУпаковок_ХамелеонЦРПТ.Расформирование") Тогда
		
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьИнформациюПоКМ_1(Thumbprint_1)

	Для Каждого Стро Из  Объект.Марки Цикл
		Штрих=Стро.Марка;
	Если Thumbprint_1.НаименованиеСтенда="Табак"
		ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак" Тогда
		
			СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
				КонецЕсли;
					
		КонецЕсли;
		
		
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
	
		     Что=Thumbprint_1.что;
		 
			МассивКМ=Новый Массив;
			МассивКМ.Очистить();
			МассивКМ.Добавить(Штрих);
					//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_11.Марка)+"&pg="+что);;
				Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьтелоПоcis(МассивКМ);
				HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/cis/cis_list?pg="+Что);
						
							
						//ИНН=ВернутьИНН(Обр.Организации[0].Организация );
				///HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_11.Марка));;
				//HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?gtin="+ДополнитьСтроку(Стр_11)+"&limit=100&offset=0");;
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			#Если ВебКлиент Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
			#Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
				
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
				Текст1=Ответ.ПолучитьТелоКакСтроку();
				
				числоЗагрузили=0;
				
				Тотал=0;
		//		БылиУпаковки=Ложь;
				Если Ответ.КодСостояния=200 Тогда
					//ЗагружаемШаблоныНасервере(Текст1,Обр.Пользователь);
					
					
					//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке(Текст1,ИННПоставщика,Тотал,числоЗагрузили,Thumbprint_1);
						//НеобходимоА=Ложь;
						//Попытка
						//	Если Число(Стр_11.GTIN)=0  Тогда
						//		НеобходимоА=Истина;
						//	КонецЕсли;
						//	
						//Исключение
						//		НеобходимоА=Истина;
						//КонецПопытки;
						
						//Если НеобходимоА=Истина Тогда
							
											
					КонецЕсли;	
		 
//		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	

		//РекурсияУпаковки_Табак(Добав,Thumbprint_1,СРегистра,Штрих);
	
		
		
	Иначе
		   ////МЕНЯТЬ!!!
		   
		СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
				КонецЕсли;
					
		КонецЕсли;
		
		   
		 
//		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
//	Добав.НомерКороба=Штрих;
//		Добав.cis=Штрих;
		
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
	
		     Что=Thumbprint_1.что;
		 
	МассивКМ=Новый Массив;
			МассивКМ.Очистить();
			МассивКМ.Добавить(Штрих);
					//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_11.Марка)+"&pg="+что);;
				Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьтелоПоcis(МассивКМ);
				HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/cis/cis_list?pg="+Что);
						
							
						//ИНН=ВернутьИНН(Обр.Организации[0].Организация );
				///HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_11.Марка));;
				//HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?gtin="+ДополнитьСтроку(Стр_11)+"&limit=100&offset=0");;
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			#Если ВебКлиент Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
			#Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
				
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
				Текст1=Ответ.ПолучитьТелоКакСтроку();
				
				числоЗагрузили=0;
				
				Тотал=0;
		//		БылиУпаковки=Ложь;
				Если Ответ.КодСостояния=200 Тогда
					//ЗагружаемШаблоныНасервере(Текст1,Обр.Пользователь);
					
					
					//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке(Текст1,ИННПоставщика,Тотал,числоЗагрузили,Thumbprint_1);
						//НеобходимоА=Ложь;
						//Попытка
						//	Если Число(Стр_11.GTIN)=0  Тогда
						//		НеобходимоА=Истина;
						//	КонецЕсли;
						//	
						//Исключение
						//		НеобходимоА=Истина;
						//КонецПопытки;
						
						//Если НеобходимоА=Истина Тогда
							
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					//МассивКМ=Новый Массив;
						//РекурсияПоПолучениюИнформации_1(NNN[Штрих],Штрих,HTTPСервисЗапрос,Thumbprint_1,СРегистра,Добав,УжеЗапрашивали,МассивКМ);
						//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапишемТип_КМ_Из_Массива(МассивКМ);
						
						Карта=NNN[Штрих];
							//Если Карта<>Неопределено И Карта["childrenMap"]<>Неопределено Тогда
							//		
							//		что=Thumbprint_1.Что;
							//		Для Каждого Стр_К Из Карта["childrenMap"] Цикл
							//			
							//			ШтрихКод=Стр_к.Ключ;
							//			///Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Марка,ШтрихКод)).Количество()=0 Тогда
							//				//ДобавК=Добав.ПолучитьЭлементы().Добавить();
							//				//ДобавК.НомерКМ=ШтрихКод;
							//				//		Добавк.Продукция=НайтиПроудкцияюПоcis(Thumbprint_1,Срегистра,ШтрихКод);
							//				Если Объект.МаркиОприходовать.НайтиСтроки(Новый Структура("Марка,НомерКороба",ШтрихКод,Штрих)).Количество()=0 Тогда
							//					
							//					Добав=Объект.МаркиОприходовать.Добавить();
							//					Добав.Марка=ШтрихКод;
							//					Добав.НомерКороба=Штрих;
							//					
							//				КонецЕсли;
							//				
							//															
							//		Конеццикла;
							//	Иначе
							Если Карта<>Неопределено И Карта["children"]<>Неопределено Тогда
									
									Для Каждого Стр_К Из Карта["children"] Цикл
									
											ШтрихКод=Стр_к["cis"];
											Если Объект.МаркиОприходовать.НайтиСтроки(Новый Структура("Марка,НомерКороба",ШтрихКод,Штрих)).Количество()=0 Тогда
												
												Добав=Объект.МаркиОприходовать.Добавить();
												Добав.Марка=ШтрихКод;
												Добав.НомерКороба=Штрих;
												
											КонецЕсли;
										
										
									Конеццикла;						
						 		КонецЕсли;
						
						
						
						
						
						
		//РекурсияПоПолучениюИнформации_1(NNN[Штрих],Штрих,HTTPСервисЗапрос,Thumbprint_1,СРегистра,Добав,УжеЗапрашивали,МассивКМ);
						//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапишемТип_КМ_Из_Массива(МассивКМ);
						
						
					КонецЕсли;			
		//РекурсияУпаковки(Добав,Thumbprint_1,СРегистра,Штрих);
	КонецЕсли;
	Конеццикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВЦРПТ(Команда,УжеОтправили=Ложь) Экспорт
	// Вставить содержимое обработчика.
	
	
	
	Если (ЗначениеЗаполнено(Объект._Order_ID) 
		И Объект.Статус<>ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ")
		) ИЛИ Объект.ВходитВГрупповую=Истина
		Тогда
		Сообщить("Агрегация "+Строка(объект.Ссылка)+" отправлена.");
		Возврат;
	КонецЕслИ;
	
	
	
	ЭтаФорма.Записать();
	
	
	
	Thumbprint_1=ПолучитьИзПользователя();	
	
//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОтправитьАгрегациюНаСервере_ХамелеонЦРПТ(Объект.ТекущийПользователь,Объект.Ссылка);
//	Возврат;
	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
	Если ОбработкаWEBНаСервере Тогда
		
		ОтправимВсенаСервере(Thumbprint_1);
		
		Возврат;
	КонецЕсли;
	Если Найти(Объект.ОшибкаОтправки,"17: Значение поля ""Номер кода агрегата (упаковки)")>0 Тогда
		выбранаНоменклатура=Истина;
		СтарыйНомер=Объект.НомерКороба;
		Объект.НомерКороба="";
		СформироватьСлучайныйКороб(Команда);
		//Обработки._Запуск_ХамелеонЦРПТ.СформироватьСлучайныйКоробСервер(Добб,выбранаНоменклатура);
		//Если выбранаНоменклатура тогда
		Если Объект.НомерКороба<>СтарыйНомер И Значениезаполнено(Объект.НомерКороба) тогда
			Сообщить("В документе "+Строка(Объект.Ссылка)+" поменяли номер короба с "+Строка(СтарыйНомер)+" на "+Строка(Объект.НомерКороба));
			Объект.ОшибкаОтправки="";
		Иначе
			Объект.НомерКороба=СтарыйНомер;
			Сообщить("Не удалось получить новый номер короба по документу "+Строка(Объект.Ссылка));
		КонецЕсли;
	Конецесли;
	
	
	Если Thumbprint_1.НаименованиеСтенда="Табак"
		ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак" Тогда
		Если Объект.ЧерезСУЗ=Ложь Тогда
			Объект.ЧерезСУЗ=Истина;
		КонецЕсли;
	КонецЕсли;
	
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
		ОтправитьАгрегациюЛекартсва(Thumbprint_1);
		Возврат;
	ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ВидДокументаУпаковок_ХамелеонЦРПТ.ИзъятиеИзУпаковки") Тогда
		
		
		
			СРегистра=Thumbprint_1.ТокенПоОтпечатку;
			Если Не ЗначениеЗаполнено(СРегистра) тогда
				Попытка
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
				исключение
					СРегистра=Неопределено;
				КонецПопытки;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СРегистра) Тогда
				ПоказатьПредупреждение(,"Не удалось получить токен по организации");
				Возврат;
			Конецесли;

		
		
		ИзъятьИзУпаковки(Thumbprint_1);
		
		Возврат;
		
		
	ИначеЕсли Объект.ЧерезСУЗ И Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ВидДокументаУпаковок_ХамелеонЦРПТ.Формирование") 
//		ИЛИ Thumbprint_1.НаименованиеСтенда="Табак"
		Тогда
		
		ОтправитьАгрегациюЧереСУЗ(Thumbprint_1);
		
		Возврат;
	ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ВидДокументаУпаковок_ХамелеонЦРПТ.Расформирование") Тогда
		////НЕОБХОДИМО ДОБАВИТЬ УПАКОВКИ
		//Если Объект.МаркиОприходовать.Количество()=0 Тогда
			
			
		//Конецесли;
		
		//Для Каждого Стр_1 Из Объект.Марки Цикл
		
		
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
			Если Не ЗначениеЗаполнено(СРегистра) тогда
				Попытка
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
				исключение
					СРегистра=Неопределено;
				КонецПопытки;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СРегистра) Тогда
				ПоказатьПредупреждение(,"Не удалось получить токен по организации");
				Возврат;
			Конецесли;
		
		
		ПолучитьИнформациюПоКМ_1(Thumbprint_1);
			
			
		//Конеццикла;
		
		
		
		Если Объект.МаркиОприходовать.Количество()=0 Тогда
			
			Сообщить("По документу "+Строка(объект.Ссылка)+" не смогли определить КМ в агрегациях");
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
	
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
		Прокси=Новый ИнтернетПрокси;
		Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
	
		HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	Иначе
		HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	КонецЕсли;
	
	Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ВидДокументаУпаковок_ХамелеонЦРПТ.Формирование") 
		И ПроверятьПередОтправкойНомерКоробаИСоздаватьНовый
		И ЗначениеЗаполнено(Объект.НомерКороба)
		Тогда
		
			МассивКМ=Новый Массив;
			МассивКМ.Очистить();
			МассивКМ.Добавить(Объект.НомерКороба);		 			
			что=Thumbprint_1.что;
			Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьтелоПоcis(МассивКМ);
			HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/cis/cis_list?pg="+Что);
						
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			#Если ВебКлиент Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
			#Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
			
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин           
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
			//Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если Ответ.КодСостояния=200 Тогда
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(
				Ответ.ПолучитьТелоКакСтроку());
				Если NNN[Объект.НомерКороба]<>Неопределено Тогда
					
					СтарыйКороб=Объект.НомерКороба;
					Если НЕ ЗначениеЗаполнено(Объект.СтарыйКороб) Тогда
						Объект.СтарыйКороб=Объект.НомерКороба;
					КонецЕсли;
					Объект.НомерКороба="";
					//Обработки._Запуск_ХамелеонЦРПТ.СформироватьСлучайныйКоробСервер(
					выбранаНоменклатура=Истина;
					СформироватьСлучайныйКоробСервер(выбранаНоменклатура);
					Сообщить("Поменяли номер короба с "+СтарыйКороб+" на "+Объект.НомерКороба);
					ОтправитьВЦРПТ(Команда,УжеОтправили);
					Возврат;
				КонецЕсли;
			КонецЕслИ;
			
		
		
	КонецЕслИ;
	
	
		СформироватьФайлДляОтправки=СформироватьXmlФайлИмпорт();
Если Не ЗначениеЗаполнено(СформироватьФайлДляОтправки) Тогда
		Возврат;
	КонецЕсли;		
		Попытка
//			Если НеПрошлаПроверкаИмпорт(СформироватьФайлДляОтправки) Тогда
//				Объект.ОшибкаОтправки="Проверка документа не прошла по схеме xsd";
				//ПоказатьПредупреждение("");
//				Возврат;
//				
//			КонецЕсли;
			
			
		Исключение
		КонецПопытки;
		
	Подписанный="";
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
	Подписанный="";
	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
				Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	
	
	Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
				Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
			Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
			Добав=СтрЗаменить(Добав,"\r\n","");

	Тело="{
	|""product_document"":"""+Добав+""",
	|""document_format"": ""MANUAL"",";
	
	Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ВидДокументаУпаковок_ХамелеонЦРПТ.Расформирование") Тогда
			Тело=Тело+"
			|""type"":""DISAGGREGATION_DOCUMENT"",";
		КонецЕсли;
	
	Тело=Тело+"
	|""signature"":"""+Подписанный+"""}";
	
 	//Если ОбработкаWEBНаСервере Тогда
	//	Если НЕ ЗагрузканаСервереОтправить(Thumbprint_1,СРегистра,УжеОтправили,Тело) Тогда
	//			Если УжеОтправили=Истина Тогда
	//			//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
	//		Иначе
	//			ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
	//			ОтправитьВЦРПТ(Команда,Истина)			
	//	КонецЕсли
		
	//	КонецЕсли;
		
		
	//Иначе
	
 			что=Thumbprint_1.что;
			
			
			Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ВидДокументаУпаковок_ХамелеонЦРПТ.Расформирование") Тогда
				Если Thumbprint_1.НаименованиеСтенда="Альтернативный табак" ИЛИ Thumbprint_1.НаименованиеСтенда="Табак" Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v3/true-api/lk/documents/create?pg="+что);
					
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/disaggregation/create?pg="+что);
				КонецЕсли;
			ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ВидДокументаУпаковок_ХамелеонЦРПТ.ДобавлениеВУпаковку") Тогда
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/reaggregation/create?pg="+что);
			Иначе
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/aggregation/create?pg="+что);
			КонецЕсли;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Текст1);
	КонецЕсли;
		
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
		ИЛИ Ответ.КодСостояния=201 
		Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			Объект._Order_ID=Текст1;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОтправитьВЦРПТ(Команда,Истина)			
			КонецЕсли
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						
						Если Найти(Текст1,"Billing contract for shoes product group not signed by participant")>0 Тогда
							Сообщить("Договор биллинга для выбранной группы не подписан участником.");
						Иначе
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
							КонецПопытки;
							
						КонецПопытки;
						КонецЕсли;
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	//КонецЕсли;
	
	КонецЕсли;
	ЭтаФорма.Записать();
	
КонецПроцедуры

Функция ПолучитьТекст()
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("aggregationSntin");
	Чтен.ЗаписатьЗначение(xmlString(Объект.Ссылка.УникальныйИдентификатор()));
	Чтен.ЗаписатьИмяСвойства("sntins");
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из ОБъект.Марки Цикл
		Чтен.ЗаписатьЗначение(Стр.Марка);
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	
	Чтен.ЗаписатьИмяСвойства("aggregationType");
	Чтен.ЗаписатьЗначение("AGGREGATION");
	Чтен.ЗаписатьИмяСвойства("sourceDocDate");
	Чтен.ЗаписатьЗначение(Формат(Объект.Дата,"ДФ=dd.MM.yyyy"));
	Чтен.ЗаписатьИмяСвойства("sourceDocNum");
	Чтен.ЗаписатьЗначение(Объект.Номер);
	Чтен.ЗаписатьИмяСвойства("details");
	Чтен.ЗаписатьЗначение(Объект.Комментарий);
	Чтен.ЗаписатьКонецОбъекта();
	ТекстЗаписать=Чтен.Закрыть();
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(ТекстЗаписать);
	КонецЕсли;
	

	Возврат ТекстЗаписать
КонецФункции
&НаСервере
Процедура СчитатьОтветНаСервере()
	// Вставить содержимое обработчика.
	Хр=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.Получить(Новый Структура("Документ,Вид",Объект.Ссылка,"Получили ответ")).Файл;
	Если Хр<>Неопределено тогда
		ОтветОтЦРПТ=Хр.Получить();
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура СчитатьОтвет(Команда)
	СчитатьОтветНаСервере();
КонецПроцедуры

&НаСервере
Процедура СчитатьОтправкуНаСервере()
	// Вставить содержимое обработчика.
	Хр=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.Получить(Новый Структура("Документ,Вид",Объект.Ссылка,"Отправлен заказ")).Файл;
	Если Хр<>Неопределено тогда
		Отправка=Хр.Получить();
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура СчитатьОтправку(Команда)
	СчитатьОтправкуНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура СформироватьСлучайныйКороб(Команда)  Экспорт
	// Вставить содержимое обработчика.
	Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ВидДокументаУпаковок_ХамелеонЦРПТ.Формирование")
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ТипДокумента) 
		ИЛИ Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ВидДокументаУпаковок_ХамелеонЦРПТ.ДобавлениеВУпаковку")
		Тогда
		выбранаНоменклатура=Истина;
		СформироватьСлучайныйКоробСервер(выбранаНоменклатура);
		Если НЕ выбранаНоменклатура Тогда
			ОткрытьФорму("Справочник.Продукция_ХамелеонЦРПТ.ФормаВыбора",,,,,,Новый ОписаниеОповещения("ПослеПолученияПродукции",ЭтаФорма));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияПродукции(РР,ДД) Экспорт
	
	Если ЗначениеЗаполнено(РР) Тогда
		Объект.Продукция=РР;
		СформироватьСлучайныйКороб(РР)
		
	КонецЕсли;
	
КонецПроцедуры


Процедура СформироватьСлучайныйКоробСервер(выбранаНоменклатура)
	Обработки._Запуск_ХамелеонЦРПТ.СформироватьСлучайныйКоробСервер(ОБъект,выбранаНоменклатура);
КонецПроцедуры

&НаКлиенте
Процедура МаркиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
		
		
	Если Копирование=Ложь тОгда
		
		Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ВидДокументаУпаковок_ХамелеонЦРПТ.Расформирование") Тогда
			
			Если Объект.СтатусКМ=ПредопределенноеЗначение("Перечисление.СтатусыКМДляАгрегации_ХамелеонЦРПТ.КМВОбороте") Тогда
				
				Отказ=Истина;
				Если Элемент.ТекущиеДанные<>Неопределено Тогда
					РРР=Элемент.ТекущиеДанные.GTIN;
				Иначе
					РРР=Неопределено;
				КонецЕсли;
				ОткрытьФорму("Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Форма.ФормаВыбораУпаковок",
				Новый структура("Организация,ТекущаяСтрока",Объект.Организация,РРР),,,,,
				Новый ОписаниеОповещения("ПослеВыбораПродукции",ЭтаФорма,Элемент));
		Иначе		
				Отказ=Истина;
				Если Элемент.ТекущиеДанные<>Неопределено Тогда
					РРР=Элемент.ТекущиеДанные.GTIN;
				Иначе
					РРР=Неопределено;
				КонецЕсли;
				ОткрытьФорму("Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Форма.ФормаВыбораУпаковокЭм",
				Новый структура("Организация,ТекущаяСтрока",Объект.Организация,РРР),,,,,
				Новый ОписаниеОповещения("ПослеВыбораПродукции_1",ЭтаФорма,Элемент));
		КонецЕсли;
				
		//ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ВидДокументаУпаковок_ХамелеонЦРПТ.УдалениеИзУпаковки") Тогда
		//	
		//	//ПоКоробуВернутьМарки=ВернутьМарки(Объект.НомерКороба);
		//	
		//	Отказ=Истина;
		//	//Если Элемент.ТекущиеДанные<>Неопределено Тогда
		//	//	РРР=Элемент.ТекущиеДанные.GTIN;
		//	//Иначе
		//	//	РРР=Неопределено;
		//	//КонецЕсли;
		//	Форм=ОткрытьФорму("Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Форма.ФормаВыбораКМ",
		//	,Элемент);
			
			
		Иначе
			Если Объект.СтатусКМ=ПредопределенноеЗначение("Перечисление.СтатусыКМДляАгрегации_ХамелеонЦРПТ.КМВОбороте") Тогда
				Отказ=Истина;
				Парааа=Новый структура("Организация",Объект.Организация);
				
				GTIN="";
				Если Табак(Объект.ТекущийПользователь,GTIN,Объект.НомерКороба) Тогда
					
					Парааа.Вставить("GTIN",GTIN);
					
				КонецЕсли;
				
				ОткрытьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаВыбораКМ",
				Парааа,,,,,
				Новый ОписаниеОповещения("ПослеВыбораПродукции",ЭтаФорма,Элемент));
			ИначеЕсли Объект.СтатусКМ=ПредопределенноеЗначение("Перечисление.СтатусыКМДляАгрегации_ХамелеонЦРПТ.КМДоЭммитирования") Тогда
				Парааа=Новый структура("Организация",Объект.Организация);
				
				GTIN="";
				Если Табак(Объект.ТекущийПользователь,GTIN,Объект.НомерКороба) Тогда
					
					Парааа.Вставить("GTIN",GTIN);
					
				КонецЕсли;
				
				Отказ=Истина;
				ОткрытьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаВыбораКМ_Отчет",
				Парааа,,,,,
				Новый ОписаниеОповещения("ПослеВыбораПродукции_1",ЭтаФорма,Элемент));
				
			Иначе
				Парааа=Новый структура("Организация",Объект.Организация);
				
				GTIN="";
				Если Табак(Объект.ТекущийПользователь,GTIN,Объект.НомерКороба) Тогда
					
					Парааа.Вставить("GTIN",GTIN);
					
				КонецЕсли;
				
				Отказ=Истина;
				ОткрытьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаВыбораКМ",
				Парааа,,,,,
				Новый ОписаниеОповещения("ПослеВыбораПродукции_1",ЭтаФорма,Элемент));
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НасервереБезКонтекста
Функция Табак(ТекущийПользователь,GTIN,НомерКороба)
	
	Если ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак" ИЛИ
		ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак" Тогда
		
		Попытка
			Если ЗначениеЗаполнено(НомерКороба) тогда
				GTIN_=Сред(НомерКороба,3,14);
				Попытка
					СпрП=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTINУпаковки",xmlString(число(GTIN_)));
				Исключение
					СпрП=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTINУпаковки",GTIN_);
				КонецПопытки;
				Если ЗначениеЗАполненО(СпрП) Тогда
					GTIN=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(СпрП.GTIN),14,"0");
					Возврат Истина;
					
				Конецесли;
				Попытка
					СпрП=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTINКороба",xmlString(число(GTIN_)));
				Исключение
					СпрП=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTINКороба",GTIN_);
				Конецпопытки;
				Если ЗначениезАполнено(СпрП) тогда
					GTIN=СпрП.GTINУпаковки;
					Возврат Истина;
					
				КонецЕсли;
				
			Конецесли;
			
		Исключение
		КонецПопытки;
		
		
		//Возврат Истина
		
	Конецесли;
	Возврат ложь
Конецфункции
&НаКлиенте
Процедура ПослеВыбораПродукции_1(РР,ДД) Экспорт
	Если РР<>Неопределено Тогда
		Для Каждого Стр Из РР ЦИкл
			ШтрихКод=Стр;
			
			ТипУпаковки=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ВернутьИнформациюОКМ(ШтрихКод,ДанныеИзПользователя);
			ЗаполнитьИнфуПоШтриху_1(ТипУпаковки);
		Конеццикла;
		ШтрихКод="";
		
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПослеВыбораПродукции(РР,ДД) Экспорт
	Если РР<>Неопределено Тогда
		Для Каждого Стр Из РР ЦИкл
			ШтрихКод=Стр;
	Если СтрДлина(Штрихкод)=20 Тогда
		Штрихкод=Сред(Штрихкод,3);
	КонецЕсли;
	ТипУпаковки=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ВернутьИнформациюОКМ(ШтрихКод,ДанныеИзПользователя);
			ЗаполнитьИнфуПоШтриху(ТипУпаковки);
		Конеццикла;
		ШтрихКод="";
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТипДокументаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ФормированиеВидимости();
КонецПроцедуры

Процедура ФормированиеВидимости()
	
	
	
	//Объект.НомерКороба="";
	//Объект.Марки.Очистить();
	Если Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.Формирование 
		ИЛИ Не ЗначениеЗаполнено(Объект.ТипДокумента)
		ИЛИ Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.ДобавлениеВУпаковку
		Тогда
		Элементы.ГруппаКороб.Видимость=Истина;
		Элементы.ОсновнаяГруппа.Видимость=Истина;
		Элементы.Изъятие.Видимость=Ложь;
	ИначеЕсли ОБъект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.Расформирование Тогда
		Элементы.ГруппаКороб.Видимость=Ложь;
		Элементы.ОсновнаяГруппа.Видимость=Истина;
		Элементы.Изъятие.Видимость=Ложь;
		
	ИначеЕсли ОБъект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.ИзъятиеИзУпаковки Тогда
		Элементы.ГруппаКороб.Видимость=Истина;
		Элементы.ОсновнаяГруппа.Видимость=Ложь;
		Элементы.Изъятие.Видимость=Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НомерКоробаПриИзмененииНаСервере()
		Запрос = Новый Запрос;
		Если Объект.СтатусКМ=Перечисления.СтатусыКМДляАгрегации_ХамелеонЦРПТ.КМВОбороте Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция КАК Продукция,
			|	СУММА(ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток - ЕСТЬNULL(Резервы_ХамелеонЦРПТОстатки.КоличествоОстаток, 0)) КАК Остаток
			|ИЗ
			|	РегистрНакопления.ОстаткиКМ_в_Обороте_ХамелеонЦРПТ.Остатки(
			|			,
			|			Организация = &Организация
			|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Резервы_ХамелеонЦРПТ.Остатки(
			|				,
			|				Организация = &Организация
			|					И СерийныйНомер = &СерийныйНомер) КАК Резервы_ХамелеонЦРПТОстатки
			|		ПО ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер = Резервы_ХамелеонЦРПТОстатки.СерийныйНомер
			|			И ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Организация = Резервы_ХамелеонЦРПТОстатки.Организация
			|
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция
			|ИТОГИ
			|	СУММА(Остаток)
			|ПО
			|	Продукция";
			
		Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция КАК Продукция,
			|	СУММА(ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток - ЕСТЬNULL(Резервы_ХамелеонЦРПТОстатки.КоличествоОстаток, 0)) КАК Остаток
			|ИЗ
			|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Остатки(
			|			,
			|			Организация = &Организация
			|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Резервы_ХамелеонЦРПТ.Остатки(
			|				,
			|				Организация = &Организация
			|					И СерийныйНомер = &СерийныйНомер) КАК Резервы_ХамелеонЦРПТОстатки
			|		ПО ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер = Резервы_ХамелеонЦРПТОстатки.СерийныйНомер
			|			И ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Организация = Резервы_ХамелеонЦРПТОстатки.Организация
			|
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция
			|ИТОГИ
			|	СУММА(Остаток)
			|ПО
			|	Продукция";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("СерийныйНомер", Объект.НомерКороба);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ВыборкаДетальныеЗаписи.Следующий() Тогда
			Объект.НомерКороба=Неопределено;
			Возврат;
		КонецЕсли;
		
			Если Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.ИзъятиеИзУпаковки Тогда
				//Объект.НомерКороба=ШтрихКод;
				Объект.Продукция=ВыборкаДетальныеЗаписи.Продукция;
				Если Значениезаполнено(Объект.НомерКороба) Тогда
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	УникальныеУпаковки_ХамелеонЦРПТ.УИТ,
						|	УникальныеУпаковки_ХамелеонЦРПТ.Ссылканаобъект
						|ИЗ
						|	РегистрСведений.УникальныеУпаковки_ХамелеонЦРПТ КАК УникальныеУпаковки_ХамелеонЦРПТ
						|ГДЕ
						|	УникальныеУпаковки_ХамелеонЦРПТ.УИТУпаковки = &УИТУпаковки";
					
					Запрос.УстановитьПараметр("УИТУпаковки", Объект.НомерКороба);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Объект.Марки.Очистить();
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						Добав=Объект.Марки.Добавить();
						Добав.cis=ВыборкаДетальныеЗаписи.УИТ;
						Добав.Марка=Добав.cis;
						Добав.Продукция=ВыборкаДетальныеЗаписи.Ссылканаобъект;
						
					КонецЦикла;
					
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				КонецЕсли;
				
			//	Прервать;
				
			КонецЕсли;
			
		//КонецЕсли;;
		
	
	// Вставить содержимое обработчика.
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТ.Продукция
	//	|ИЗ
	//	|	РегистрНакопления.ОстаткиКМ_в_Обороте_ХамелеонЦРПТ КАК ОстаткиКМ_в_Обороте_ХамелеонЦРПТ
	//	|ГДЕ
	//	|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТ.СерийныйНомер = &СерийныйНомер";
	//
	//Запрос.УстановитьПараметр("СерийныйНомер", Объект.НомерКороба);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//Продукция=Неопределено;
	//Если НЕ ВыборкаДетальныеЗаписи.Следующий() Тогда
	//	// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//	
	//	Объект.НомерКороба="";
	//	
	//	
	//Конецесли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура НомерКоробаПриИзменении(Элемент)
	Если Объект.ТипДокумента<>ПредопределенноеЗначение("Перечисление.ВидДокументаУпаковок_ХамелеонЦРПТ.Формирование")
		И ЗначениеЗаполнено(Объект.ТипДокумента)  
		И Объект.ТипДокумента<>ПредопределенноеЗначение("Перечисление.ВидДокументаУпаковок_ХамелеонЦРПТ.ДобавлениеВУпаковку")
		Тогда
		НомерКоробаПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НомерКоробаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Возврат;
	// Вставить содержимое обработчика.
	СтандартнаяОбработка=ложь;
	ОткрытьФорму("Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Форма.ФормаВыбораУпаковок",
	Новый структура("Организация",Объект.Организация),Элемент,,,,
	);
	
КонецПроцедуры

&НаКлиенте
Процедура МаркиПродукцияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура МаркиПродукцияОчистка(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка=ложь
КонецПроцедуры

&НаКлиенте
Процедура МаркиПродукцияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СтатусКМПриИзменении(Элемент)
	// Вставить содержимое обработчика.
//	ОБъект.Марки.Очистить();
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ВернутьТелоЗапросаПодключение(cis)
	МассивКодо=Новый Массив;
	          МассивКодо.Добавить(cis);
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("ids", МассивКодо);
			ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, "  ");
			
			ЗаписьJSON = Новый ЗаписьJSON();
			ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
			
			ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
			
			Возврат ЗаписьJSON.Закрыть();

КонецФункции


&НаКлиенте
Процедура ПолучитЬСтатусыПоКМ(Команда,ПроверятьВсе=Истина) Экспорт
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	МассивКМ=Новый Массив;
	МассивКМ.Добавить(Объект.НомерКороба);
	Объект.Статус="Не найдено в ЦРПТ";
	Для каждого Стр_1 Из Объект.Марки Цикл
		Стр_1.Статус="Не найдено в ЦРПТ";
		МассивКМ.Добавить(Стр_1.марка);
	КонецЦикла;
	ОбработатьстатусыКМ(МассивКМ);
		
КонецПроцедуры


&НаКлиенте
Процедура ПечатьСКМ(Команда,ТаблЧ_1=Неопределено) ЭКспорт		
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	ТаблЧ=Новый ТабличныйДОкумент;
	ВывестиТаблКодCODE128_КОРОБА_КМ(ТаблЧ);
	ТаблЧ.ТолькоПросмотр=Истина;
	ТаблЧ.Показать();
	
	
КонецПроцедуры

Процедура  ВывестиТаблКодCODE128_КОРОБА_КМ(ТаблЧ) эКспорт
		Макет=Документы.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.ПолучитьМакет("ШтрихКодДлинныйКМ");
		ТаблЧ.ИмяПараметровПечати="Печать BAR CODE";
	
		ОблЧек=Макет.ПолучитьОбласть("Шапка");
		
		Марки=ОБъект.Марки.Выгрузить();
		Марки.Свернуть("НомерБокса");
		Если ВерсияПравильная Тогда
		ГенераторМатрицы=Обработки.ГенерацияDataMatrix_ХамелеонЦРПТ.Создать();
	ГенераторМатрицы.Инициализировать();
КонецЕсли;
	Облчек.Параметры.Продукция=Объект.Продукция;
	ОБлЧек.Параметры.ШтрихКод=Объект.НомерКороба;

		
		
		
					
					              
					АдресКонец=Объект.НомерКороба;
				Если ВерсияПравильная Тогда
				ОблЧек.Рисунки.ШтрихКод_1.Картинка=Новый Картинка(ГенераторМатрицы.Сгенерировать128(АдресКонец));
			Иначе
				ГенераторМатрицы=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();
				ОблЧек.Рисунки.ШтрихКод_1.Картинка=Новый Картинка(ГенераторМатрицы.Сгенерировать128(АдресКонец));
				
				                           КонецЕсли;
				
					Если НЕ ТаблЧ.ПроверитьВывод(ОблЧек) Тогда
						ТаблЧ.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
						
		ТаблЧ.Вывести(ОблЧек);
						
		СистемнаяИнформация = Новый СистемнаяИнформация;

	ОблМ=Макет.ПолучитьОбласть("Строка");
	
	
	Если ВерсияПравильная Тогда
		ГенераторМатрицы=Обработки.ГенерацияDataMatrix_ХамелеонЦРПТ.Создать();
		ГенераторМатрицы.Инициализировать();
	КонецЕсли;
	
	Для Каждого ВыборкаДетальныеЗаписи_123 Из Объект.Марки Цикл
			//Стр_2=ВыборкаДетальныеЗаписи;
			//НСтр=Объект.Товары.НайтиСтроки(Новый Структура("ID",Стр.Order_Id_Line));
			//Если НСтр.Количество()=0  Тогда
			//	Продолжить;
			//Иначе
			//	НСтр=НСтр[0];
			//КонецЕсли;
			
			ГТИН=Сред(ВыборкаДетальныеЗаписи_123.Марка,3);
			ГТИН=Сред(ГТИН,1,14);
			GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
			
			ОблМ.Параметры.Марка=GTIN.БрендТорговаяМарка;
			Если ЗначениеЗАполнено(GTIN.Размер) Тогда
				ОблМ.Параметры.Размер=GTIN.Размер;
			Иначе
				ОблМ.Параметры.Размер="--";
			КонецЕсли;
			ОблМ.Параметры.Артикул=GTIN.МодельПроизводителяАртикул;
			ОблМ.Параметры.Проудкция=GTIN;
			ОблМ.Параметры.Цвет=GTIN.Цвет;
			ОблМ.Параметры.Вверх=GTIN.МатериалВерха;
			ОблМ.Параметры.Подладка=GTIN.МатериалПодкладки;
			ОблМ.Параметры.Стелька=GTIN.Стелька;
			ОблМ.Параметры.Низ=GTIN.МатериалНиза;
			Если ЗначениеЗаполнено(GTIN.Изготовитель) Тогда
				ОблМ.Параметры.Изготовитель=GTIN.Изготовитель	;
			Иначе
				ОблМ.Параметры.Изготовитель=GTIN.ИННПроизводителяИмпортёра;
			КонецЕсли;
			ОблМ.Параметры.страна=GTIN.СтранаПроизводства;
			ОблМ.Параметры.Дата=Формат(GTIN.ДатаПубликации,"ДЛФ=Д");
			ОблМ.Параметры.Сезон=GTIN.Сезон;
			ОблМ.Параметры.Адрес=GTIN.ИННПроизводителяИмпортёра.ЮридическийАдрес;
			
			//ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			
			
			
				//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты.Регистратор
		|ИЗ
		|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Обороты(, , Регистратор, СерийныйНомер = &cis) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты
		|ГДЕ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты.Регистратор ССЫЛКА Документ.ЗаказМарок_ХамелеонЦРПТ";
	
	Запрос.УстановитьПараметр("cis", ВыборкаДетальныеЗаписи_123.Марка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	РРР=КодироватьСтроку(ВыборкаДетальныеЗаписи_123.Марка,СпособКодированияСТроки.КодировкаURL);
	НомерКМ=ВыборкаДетальныеЗаписи_123.Марка;
	Есть=ложь;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Для Каждого Стр_111 Из  ВыборкаДетальныеЗаписи.Регистратор.КМИзAPI Цикл
			Если Найти(Стр_111.НомерКМ,РРР)=1 Тогда
				НомерКМ=Стр_111.НомерКМ;
				Есть=Истина;Прервать;
			КонецЕсли;
			
		Конеццикла;
		
		
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

			  Если Есть=Истина тогда
			
				ООО=РаскодироватьСтроку(НомерКМ,СпособКодированияСтроки.КодировкаURL);
			Иначе
				ООО=НомерКМ
			КонецЕсли;
			CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
				 ;
		ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
		
				ГТИН=Сред(ГТИН,14+3);
			
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
				ГТИН=Сред(ГТИН,6);
			
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			
			
			ГУДИ=GTIN.КодВУчетнойСистеме;
			//ОблМ.Параметры.ШтрихКод=ГУДИ;
			
			ОблМ.Параметры.ШтрихКод=ГУДИ;
			
			Попытка
				Если версияПравильная Тогда
					Картинка = ГенераторМатрицы.Сгенерировать(ООО);
				Иначе
										ГенераторМатрицы=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();

					Картинка = ГенераторМатрицы.Сгенерировать(ООО);
КонецЕсли;
			ОблМ.Рисунки.ДатаМ.Картинка=Новый Картинка(Картинка);
			
			
			Если ЗначениеЗАполнено(ГУДИ) Тогда
				Если ВерсияПравильная Тогда
			Генератор=Обработки.ГенерацияEAN13_ХамелеонЦРПТ.Создать();
		
			Картинка = Генератор.Сгенерировать(ГУДИ);
		Иначе
						Генератор=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();
		
			Картинка = Генератор.Сгенерировать13(ГУДИ);

			КонецЕсли;
			ОблМ.Рисунки.D2.Картинка=Новый Картинка(Картинка);
			КонецЕсли;
			
			
			Исключение
			//	Сообщить("Для печати Data Matrix необходим релиз 8.3.9 или выше");
			//	Возврат;
			Конецпопытки;
			
				//Если ПервыйРисунок Тогда
				//	Если НЕ Таб.ПроверитьВывод(ОблМ) Тогда
				//		Таб.ВывестиГоризонтальныйРазделительСтраниц();
				//	КонецЕсли;
					Если НЕ ТаблЧ.ПроверитьВывод(ОблМ) Тогда
						ТаблЧ.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					ТаблЧ.Вывести(ОблМ);
					ПервыйРисунок=ложь;
				//Иначе
				//	Таб.Присоединить(ОблМ);
					
				//	ПервыйРисунок=Истина;
					
				//Конецесли;
			
		КонецЦикла;
	
						
КонецПроцедуры


&НаСервере
Процедура СформироватьУпаковкуПоGTINНаСервере()
	// Вставить содержимое обработчика.
	Линия=Объект.ИдПроизводственногоЗаказа;
	Если ЗначениеЗаполнено(Объект.GTINУпаковки) Тогда
		
		Объект.GTINУпаковки=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Объект.GTINУпаковки,14,"0");
		
		СерийныйНомер=Объект.ИдПроизводственногоЗаказа;
		
		НомерП=РегистрыСведений.СчетчикАгрегаций_ХамелеонЦРПТ.Получить(Новый Структура("GTIN,НомерЛинии",
		Объект.GTINУпаковки,Объект.ИдПроизводственногоЗаказа)).Счетчик+1;
		
		РегДв=РегистрыСведений.СчетчикАгрегаций_ХамелеонЦРПТ.СоздатьНаборЗаписей();
		РегДв.Отбор.GTIN.Установить(Объект.GTINУпаковки);
		РегДв.Отбор.НомерЛинии.Установить(Объект.ИдПроизводственногоЗаказа);
		Добав=РегДв.Добавить();
		Добав.GTIN=Объект.GTINУпаковки;
		Добав.НомерЛинии=Объект.ИдПроизводственногоЗаказа;
		Добав.Счетчик=НомерП;
		
		
		//СерийныйНомер=СерийныйНомер+
		
		
		
		//Объект.НомерКороба="01"+Объект.GTINУпаковки+"21"+;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СформироватьУпаковкуПоGTIN(Команда)
	//СформироватьУпаковкуПоGTINНаСервере();
	
	
	Если ЗначениеЗаполнено(Объект.ЗаказДляФормированияНомераКОроба) Тогда
		//Если Объект.ЗаказДляФормированияНомераКОроба.
		Если ВозьмемИзЗаказаНомерКМ() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтрпавимЗаказ=СоздатьНайтиЗаказКМ();
	Если ТипЗнч(ОтрпавимЗаказ)=Тип("ДокументСсылка.ЗаказМарок_ХамелеонЦРПТ") тогда
		Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура("КЛюч",ОтрпавимЗаказ));
		Форм.ОтправитьВЦРПТ(Команда);
		
	ИначеЕсли ЗначениеЗаполнено(ОтрпавимЗаказ) Тогда
		Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура("КЛюч",ОтрпавимЗаказ.Документ));
		Форм.ПолучитьКМИзAPI(Команда);
		
	КонецЕсли;
	
	ЭтаФорма.Записать();
	Сообщить("Не удалось получить номер короба. Нажмите кнопку еще раз");
КонецПроцедуры


Функция СоздатьНайтиЗаказКМ()
	
	Если ЗначениеЗаполнено(Объект.ЗаказДляФормированияНомераКОроба) Тогда
				
		Если Не ЗначениеЗаполнено(Объект.ЗаказДляФормированияНомераКОроба.Статус)
			ИЛИ Объект.ЗаказДляФормированияНомераКОроба.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ
			ИЛИ Объект.ЗаказДляФормированияНомераКОроба.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПодготовленКОтправке
			тогда
			Докум=Объект.ЗаказДляФормированияНомераКОроба.ПолучитьОбъект();
		Докум.Дата=ТекущаяДата();
		Докум.Статус=Неопределено;
		Докум.Организация=Объект.Организация;
		Докум.ТекущийПользователь=Объект.ТекущийПользователь		;
		
		
	Если Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Шины" Тогда
		Докум.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Шины;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Молоко" Тогда
		Докум.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Молоко;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Одежда" Тогда
		Докум.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Одежда;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Свет" Тогда
		Докум.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Свет;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак" Тогда
		Докум.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак" Тогда
		Докум.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Фармацевтика" Тогда
		Докум.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Фармацевтика;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Фото" Тогда
		Докум.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Фото;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Парфюм" Тогда
		Докум.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Парфюм;
	Иначе
		Докум.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь
	КонецЕсли;
		
		Докум.ТипОплаты=Объект.ТекущийПользователь.ТипОплаты;
		Докум.СпособИзготовленияСИ=Объект.ТекущийПользователь.СпособИзготовленияСИ;
		Докум.НомерДоговораСОператором=Объект.ТекущийПользователь.НомерДоговораСОператором;
		Докум.ДатаДоговораСОператором=Объект.ТекущийПользователь.ДатаДоговораСОператором;
		
		//Докум.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак;
		Докум.СУЗОбувь=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ОтправлятьПоУмолчаниюАгрегациюЧерезСУЗ;
		Докум.ШаблонКМ_Табак=Перечисления.Шаблоны_подписи_кодов_КМ_Табак_ХамелеонЦРПТ.Блок;
		Докум.ШаблонЭтикетки=справочники.ШаблоныЭтикеток_ХамелеонЦРПТ.НайтиПоКоду("000000004");
		//Для Каждого Стр_1 Из Стр.buffers Цикл
		Докум.Товары.Очистить();
			Добав=Докум.Товары.Добавить();
			
			Строчк=Объект.Марки[0];
			
			Добав.GTIN=Строчк.Продукция;
			Добав.КоличествоКМ= 1;
			Добав.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаТовар;
			
			Добав.ВидСИ=Объект.ТекущийПользователь.ВидСИ;
			Добав.КоличествоПолучено=0;
			Добав.СпособФормированияСН=Перечисления.СпособФормированияСН_ХамелеонЦРПТ.ОператорИСМП;
			Добав.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаПотребительскуюУпаковку;
				Если Добав.GTIN.СтранаПроизводства.Альфа2="RU" Тогда
						Добав.СпособВыпускаТоваров="Производство в РФ";
					Иначе
								Добав.СпособВыпускаТоваров="Ввезен в РФ";
						
							КонецЕсли;
							
							
							Добав.КодТНВЭД=Добав.GTIN.КодТНВЭД;
			
						//Конеццикла;
						
						Если Докум.Товары.Количество()>0 Тогда
							
							товар=Докум.Товары[0].GTIN;
							Если Товар.СтранаПроизводства.Код="643"
								ИЛИ Не ЗначениеЗаполнено(товар.СтранаПроизводства) Тогда
								Докум.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ПроизведенВРФ;
							Иначе
								Докум.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ВвезенВРФ;
							КонецЕсли;
							
							
						КонецЕсли;
						
				Докум.Записать(РежимЗаписиДокумента.Запись);
				Объект.ЗаказДляФормированияНомераКОроба=Докум.Ссылка;
		        Возврат Докум.Ссылка;			
			
			
//			Возврат Объект.ЗаказДляФормированияНомераКОроба.Ссылка;
		Иначе
			Возврат  Новый Структура("Документ,Статус",Объект.ЗаказДляФормированияНомераКОроба,Объект.ЗаказДляФормированияНомераКОроба.Статус);
		КонецЕсли;
	ИначеЕсли Объект.Марки.Количество()>0 Тогда
		
		Докум=Документы.ЗаказМарок_ХамелеонЦРПТ.СоздатьДокумент();
		Докум.Дата=ТекущаяДата();
		Докум.Статус=Неопределено;
		Докум.Организация=Объект.Организация;
		Докум.ТекущийПользователь=Объект.ТекущийПользователь		;
		
			
		
	Если Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Шины" Тогда
		Докум.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Шины;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Молоко" Тогда
		Докум.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Молоко;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Одежда" Тогда
		Докум.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Одежда;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Свет" Тогда
		Докум.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Свет;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак" Тогда
		Докум.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак" Тогда
		Докум.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Фармацевтика" Тогда
		Докум.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Фармацевтика;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Фото" Тогда
		Докум.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Фото;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Парфюм" Тогда
		Докум.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Парфюм;
	Иначе
		Докум.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь
	КонецЕсли;

		Докум.ТипОплаты=Объект.ТекущийПользователь.ТипОплаты;
		Докум.СпособИзготовленияСИ=Объект.ТекущийПользователь.СпособИзготовленияСИ;
		Докум.НомерДоговораСОператором=Объект.ТекущийПользователь.НомерДоговораСОператором;
		Докум.ДатаДоговораСОператором=Объект.ТекущийПользователь.ДатаДоговораСОператором;
		
		//Докум.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак;
		Докум.СУЗОбувь=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ОтправлятьПоУмолчаниюАгрегациюЧерезСУЗ;
		Докум.ШаблонКМ_Табак=Перечисления.Шаблоны_подписи_кодов_КМ_Табак_ХамелеонЦРПТ.Блок;
		Докум.ШаблонЭтикетки=справочники.ШаблоныЭтикеток_ХамелеонЦРПТ.НайтиПоКоду("000000004");
		//Для Каждого Стр_1 Из Стр.buffers Цикл
		Докум.Товары.Очистить();
			Добав=Докум.Товары.Добавить();
			
			Строчк=Объект.Марки[0];
			
			Добав.GTIN=Строчк.Продукция;
			Добав.КоличествоКМ= 1;
			Добав.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаТовар;
			
			Добав.ВидСИ=Объект.ТекущийПользователь.ВидСИ;
			Добав.КоличествоПолучено=0;
			Добав.СпособФормированияСН=Перечисления.СпособФормированияСН_ХамелеонЦРПТ.ОператорИСМП;
			Добав.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаПотребительскуюУпаковку;
				Если Добав.GTIN.СтранаПроизводства.Альфа2="RU" Тогда
						Добав.СпособВыпускаТоваров="Производство в РФ";
					Иначе
								Добав.СпособВыпускаТоваров="Ввезен в РФ";
						
							КонецЕсли;
							
							
							Добав.КодТНВЭД=Добав.GTIN.КодТНВЭД;
			
						//Конеццикла;
						
						Если Докум.Товары.Количество()>0 Тогда
							
							товар=Докум.Товары[0].GTIN;
							Если Товар.СтранаПроизводства.Код="643"
								ИЛИ Не ЗначениеЗаполнено(товар.СтранаПроизводства) Тогда
								Докум.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ПроизведенВРФ;
							Иначе
								Докум.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ВвезенВРФ;
							КонецЕсли;
							
							
						КонецЕсли;
						
				Докум.Записать(РежимЗаписиДокумента.Запись);
				Объект.ЗаказДляФормированияНомераКОроба=Докум.Ссылка;
		        Возврат Докум.Ссылка
			КонецЕслИ;
			Возврат Неопределено;
	
	
Конецфункции

Функция ВозьмемИзЗаказаНомерКМ(Сч=0)
	
	Если Объект.ЗаказДляФормированияНомераКОроба.КМИзAPI.Количество()>0  Тогда
		Объект.НомерКороба=Объект.ЗаказДляФормированияНомераКОроба.КМИзAPI[Сч].НомерКМ_Короткий;
		Возврат Истина;
		
	КонецЕсли;
	Возврат Ложь;
Конецфункции

&НаКлиенте
Процедура ИзхятиеМаркиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИзхятиеМаркиПередУдалением(Элемент, Отказ)
	// Вставить содержимое обработчика.
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказДляФормированияНомераКОробаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если ЗначениеЗаполнено(Объект.ЗаказДляФормированияНомераКОроба) Тогда
		ЭтаФорма.Записать();
		ПроверимПоДокументу();
		ЭтаФорма.Записать();
		Объект.НомерКороба=СоздатьНомерКороба(Объект.Продукция,Объект.Дата);
		
	КонецЕсли;
КонецПроцедуры




Функция СоздатьНомерКороба(Продукция,ДатаПр)
	Начнем="01";
	GTIN=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Продукция.GTINКороба,14,"0");
	Начнем=Начнем+GTIN+"11"+Формат(ДатаПр,"ДФ=""ггММдд""")+"21";
	
	НомерП=РегистрыСведений.СчетчикАгрегацииТабак_ХамелеонЦРПТ.Получить(Новый Структура("GTIN,ДатаФормирования,НомерЛинии",
	GTIN,НачалоДня(ДатаПр),Объект.ИдПроизводственногоЗаказа)).Счетчик;
	НомерП=НомерП+1;
	
	НомерЛинии=Сред(ОБработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Объект.ИдПроизводственногоЗаказа,1),"1" );
	
	РегДв=РегистрыСведений.СчетчикАгрегацииТабак_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	Регдв.Отбор.GTIN.Установить(GTIN);
	Регдв.Отбор.ДатаФормирования.Установить(НачалоДня(ДатаПр));
	
	Регдв.Отбор.НомерЛинии.Установить(НомерЛинии);
	Добав=РегДв.Добавить();
	Добав.GTIN=GTIN;
	Добав.ДатаФормирования=НачалоДня(ДатаПр);
	Добав.НомерЛинии=НомерЛинии;
	Добав.Счетчик=НомерП;
	Регдв.Записать(Истина);
	
	НачНем=Начнем+НомерЛинии+"RU"+Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(
	НомерП),4 ,"0");
	
	
//	Начнем=Начнем+Сред(СформироватьСлучайныйКоробСервер_1(),1,7);
	
	Возврат Начнем
	
КонецФункции

Процедура ПроверимПоДокументу()
	
	Объект.НомераБлоков.Очистить();
	Для Каждого Стр_1 ИЗ Объект.ЗаказДляФормированияНомераКОроба.КМИзAPI Цикл
		Добав=Объект.НомераБлоков.Добавить();
		Добав.НомерБлока=Стр_1.НомерКМ_Короткий;
	Конеццикла;
		
	//Объект.ЗаказДляФормированияНомераКОроба.КМИзAPI[Сч].НомерКМ_Короткий	

	Возврат;
	Если Объект.ЗаказДляФормированияНомераКОроба.КМИзAPI.Количество()>0 Тогда
		
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ КАК СозданиеНовогоШкНаКороба_ХамелеонЦРПТ
		|ГДЕ
		|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.ЗаказДляФормированияНомераКОроба = &ЗаказДляФормированияНомераКОроба
		|	И СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("ЗаказДляФормированияНомераКОроба", Объект.ЗаказДляФормированияНомераКОроба);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	КоличетсовУжеБыло=0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		КоличетсовУжеБыло=КоличетсовУжеБыло+1;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Если КоличетсовУжеБыло>=Объект.ЗаказДляФормированияНомераКОроба.КМИзAPI.Количество() Тогда
		Объект.ЗаказДляФормированияНомераКОроба=Неопределено;
		Сообщить("По заказу "+Строка(объект.Ссылка)+" израсходованы все КМ");
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ЗаказДляФормированияНомераКОроба) Тогда
		//Если Объект.ЗаказДляФормированияНомераКОроба.
		 ВозьмемИзЗаказаНомерКМ(КоличетсовУжеБыло) 
	КонецЕсли;
	
	
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтатусыКМПоВыделенным(Команда)
		// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	МассивКМ=Новый Массив;
	Для каждого Стр_2 Из Элементы.Марки.ВыделенныеСтроки Цикл
		Стр_1=Объект.Марки.НайтиПоИдентификатору(Стр_2);
		Стр_1.Статус="Не найдено в ЦРПТ";
		МассивКМ.Добавить(Стр_1.марка);
	КонецЦикла;
	ОбработатьстатусыКМ(МассивКМ)
КонецПроцедуры	

&НаКлиенте
Процедура ОпределитьСтатусПоФармацевтике(Thumbprint_1,МассивКМ)
	
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
					Иначе
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		
		
		

				СРегистра="";///Thumbprint_1.Thumbprint_1;
				Если Не ЗначениеЗаполнено(СРегистра) тогда
					Попытка
						СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
					исключение
						СРегистра=Неопределено;
					КонецПопытки;
				КонецЕсли;
				
				
				
		Пока МассивКМ.Количество()>0 Цикл
		 	МассивОпределям=Новый Массив;
			МассивОпределям.Очистить();
			КоличествоПр=Мин(1,МассивКМ.Количество());
			Для Сч=1 По КоличествоПр Цикл
				МассивОпределям.Добавить(МассивКМ[0]);
				МассивКМ.Удалить(0);
			Конеццикла;
		 	ВернутьСтатусы=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьСтатусыПоМассивуКМ_Лекарства(Thumbprint_1,Срегистра,МассивОпределям);
			
			Для Каждого Стр_1 Из ВернутьСтатусы Цикл
				Нстрок=Объект.Марки.НайтиСтроки(Новый Структура("Марка",Стр_1.cis));
				Нстрок[0].Статус=Стр_1.Статус;
			Конеццикла;
			
			
		Конеццикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьстатусыКМ(МассивКМ)
	
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
		
		ОпределитьСтатусПоФармацевтике(Thumbprint_1,МассивКМ);
		
		Возврат;
				 
				 
	КонецЕсли;	
	
	
	СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
	СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
	Если Не ЗначениеЗаполнено(СРегистра)  Тогда
		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
	Иначе
		   	
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
			Прокси=Новый ИнтернетПрокси;
			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		Иначе
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
				
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
		Если Ответ.КодСостояния<>200 Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Сообщить("Не удалось подключиться к ЦРПТ");
			Возврат;
		КонецЕсли;
	КонецЕсли;

		
		
	
	
   НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();

   Если НаСервере Тогда
	// Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Стр_1.Марка);  
	Иначе
		Пока МассивКМ.Количество()>0 Цикл
		 	МассивОпределям=Новый Массив;
			МассивОпределям.Очистить();
			КоличествоПр=Мин(1,МассивКМ.Количество());
			Для Сч=1 По КоличествоПр Цикл
				МассивОпределям.Добавить(МассивКМ[0]);
				МассивКМ.Удалить(0);
			Конеццикла;
		 	ВернутьСтатусы=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьСтатусыПоМассивуКМ(Thumbprint_1,Срегистра,МассивОпределям);
			
			Для Каждого Стр_1 Из ВернутьСтатусы Цикл
				Если Объект.НомерКороба=Стр_1.cis Тогда
					Объект.СтатусУпаковки=Стр_1.Статус;
				Иначе
				
					Нстрок=Объект.Марки.НайтиСтроки(Новый Структура("Марка",Стр_1.cis));
					Нстрок[0].Статус=Стр_1.Статус;
				КонецЕсли;
			Конеццикла;
			
			
		Конеццикла;
		
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ТекущийПользовательПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	Элементы.ДоговорЛекарства.Видимость=Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Фармацевтика"
КонецПроцедуры


&НаКлиенте
Процедура ТекущийПользовательПриИзменении(Элемент)
	ТекущийПользовательПриИзмененииНаСервере();
	ДанныеИзПользователя=ПолучитьИзПользователя();
КонецПроцедуры


&НаКлиенте
Процедура ПроверитьВложенностьИЗаменить(Команда)
	// Вставить содержимое обработчика.
	Thumbprint_1=ПолучитьИзПользователя();
	что=Thumbprint_1.что;
	
	СтруктураНастроек=Неопределено;
	СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
	СерийныйНомер=СтруктураНастроек.СерийныйНомер;

	Если Не ЗначениеЗаполнено(СРегистра) ИЛИ Не ЗначениеЗаполнено(СерийныйНомер) Тогда
		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
	Иначе
	   
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
			Прокси=Новый ИнтернетПрокси;
			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
		
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		Иначе
		
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
		//Текст1=Ответ.ПолучитьТелоКакСтроку();
		Если Ответ.КодСостояния<>200 Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		КонецЕсли;
			
	КонецЕсли;
	
	
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
		Прокси=Новый ИнтернетПрокси;
		Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
		HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	Иначе
		HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	КонецЕсли;      	
	
	Для Каждого Стр_22 Из Объект.Марки Цикл
		
		HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_22.Марка)+"&pg="+что);;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		
		NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);
		
		Если NNN["parent"]=Неопределено Тогда
			Стр_22.НомерАгрегации="";
			
		Иначе
			Стр_22.НомерАгрегации=NNN["parent"];
			
		КонецЕслИ;
		
	Конеццикла;
	
	
	Если Найти(Объект.ОшибкаОтправки,"58: Код маркировки")>0   Тогда
		
		
		
		//Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
    	
		
		
		НомерКороба=Сред(Объект.ОшибкаОтправки,Найти(Объект.ОшибкаОтправки,"входит в состав транспортной упаковки ")+38);
		НомерКороба=СокрЛП(Сред(НомерКороба,1,Найти(НомерКороба,".")-1));
		HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(НомерКороба)+"&pg="+что);;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		
		NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);
		МассивКМ=Новый СписокЗначений;
		МассивКМ.Очистить();
		Для Каждого Стр_11 Из Объект.Марки Цикл
			МассивКМ.Добавить(Стр_11.Марка);
		Конеццикла;
		МассивКМИзЦРПТ=Новый СписокЗначений;
		МассивКМИзЦРПТ.Очистить();
		Если NNN["cisChildren"]<>Неопределено Тогда
			Для каждого Стр_11 Из NNN["cisChildren"] Цикл
				МассивКМИзЦРПТ.Добавить(Стр_11);
			КонецЦикла
		КонецЕсли;
		УдалитьИзМассива1=Новый Массив;
		УдалитьИзМассива2=Новый Массив;
		
		Для Каждого Стр_1 Из МассивКМИзЦРПТ Цикл
			НСтр=МассивКМ.НайтиПоЗначению(Стр_1.Значение);
			Если НСтр<>Неопределено Тогда
				УдалитьИзМассива1.Добавить(НСтр);
				УдалитьИзМассива2.Добавить(Стр_1);
				
				
			КонецЕсли;
			
		Конеццикла;
		
		Для Каждого Стр_Уд Из УдалитьИзМассива1 Цикл
			МассивКМ.Удалить(Стр_Уд);
		Конеццикла;
		
		Для Каждого Стр_Уд Из УдалитьИзМассива2 Цикл
			МассивКМИзЦРПТ.Удалить(Стр_Уд);
		Конеццикла;
		
		Если МассивКМ.Количество()=0 И МассивКМИзЦРПТ.Количество()=0 Тогда
			Объект.НомерКороба=НомерКороба;
			Сообщить("Данные КМ из короба "+НомерКороба+" поменяли на данный короб");
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан");
		Иначе
			
			Если МассивКМ.Количество()>0 Тогда
				Сообщить("Данные КМ не входят в номер короба "+Строка(НомерКороба)+":");
				Для Каждого Стр_1 Из МассивКМ Цикл
					Сообщить(Стр_1.Значение);
				Конеццикла;
			КонецЕсли;
			
			Если МассивКМИзЦРПТ.Количество()>0 Тогда
				Сообщить("Данные КМ не входят в документ, но в ЦРПТ входят в номер короба "+Строка(НомерКороба)+":");
				Для Каждого Стр_1 Из МассивКМИзЦРПТ Цикл
					Сообщить(Стр_1.Значение);
				Конеццикла;
			КонецЕсли;
			
		КонецЕслИ;
		
		 
		
		
	КонецЕсли;
КонецПроцедуры


&НаСервере
Функция СоздатьРазегргациюНаСервере()
	// Вставить содержимое обработчика.
	Агрег=Документы.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(Агрег,Объект,,"Номер,Дата,Статус,ОшибкаОтправки,НомерКороба,_Order_ID");
	Агрег.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.Расформирование;
	Агрег.Дата=ТекущаяДата();
	Для каждого Стр_2 Из Объект.Марки Цикл
		Если ЗначениеЗАполнено(Стр_2.НомерАгрегации) 
			И Агрег.Марки.НайтиСтроки(Новый Структура("Марка",Стр_2.НомерАгрегации)).Количество()=0
			Тогда
			Стр_2.Марка=Стр_2.НомерАгрегации;
		КонецЕсли;
	Конеццикла;
	Агрег.Записать();
	Возврат Агрег.Ссылка;
КонецФункции


&НаКлиенте
Процедура СоздатьРазегргацию(Команда)
	Агер=СоздатьРазегргациюНаСервере();
	ОткрытьФорму("Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Форма.ФормаДокумента",
	Новый Структура("Ключ",Агер));
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьИз(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
		// Вставить содержимое обработчика.
	МассивКМ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ВернутьКМИзФайлов();
		
	Для Каждого ШтрихОбраб ИЗ МассивКМ Цикл
		ШтрихКод68=ШтрихОбраб;
		
		шТРИХкОД=ШтрихКод68;
		штрихКод=СтрЗаменить(ШтрихКод,Символ(29),"");

        
		////НЕОБХОДИМО БУДЕТ ПОМЕНЯТЬ
		Если СтрДлина(Штрихкод)=20 И Сред(ШтрихКод,1,2)="00" Тогда
			Штрихкод=Сред(Штрихкод,3);
		КонецЕсли;

		ЗаполнитьИнфуПоШтриху(ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ВернутьИнформациюОКМ(ШтрихКод,ДанныеИзПользователя));
		
	КонецЦикла;
		
	ПодключитьОбработчикОЖидания("аа",0.1,Истина);
	
	
КонецПроцедуры
Процедура ЗагрузитьФайл_НаСервере(Адр,Расширение,МассивКМ)
	
	
	Имяекселя_1=ПолучитьИмяВременногоФайла(Расширение);
	
	Дан=ПолучитьИзВременногоХранилища(Адр);
	Дан.Записать(Имяекселя_1);
	ОбластьФайла = Новый ТабличныйДокумент;
	Попытка
		// Выполняется долго на больших файлах.
		ОбластьФайла.Прочитать(Имяекселя_1, СпособЧтенияЗначенийТабличногоДокумента.Значение);
		УдалитьФайлы(Имяекселя_1);
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
		УдалитьФайлы(Имяекселя_1);
		Возврат;
	КонецПопытки;
	
	
	
	КолСтр = ОбластьФайла.ВысотаТаблицы;
	КолКолонок = ОбластьФайла.ШиринаТаблицы;
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	ТаблицаРезультат.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"), "№", 4);
	ТаблицаРезультат.Колонки.Добавить("Сопоставлено", Новый ОписаниеТипов("Булево"), "Сопоставлено", 1);
	
	Для Сч = 1 ПО КолКолонок Цикл
		нКолонка = СтрЗаменить(Сч, Символы.НПП, "");
		ИмяКолонки = "N" + нКолонка;
		ТаблицаРезультат.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	// 1-я строка. Заголовки.
	НоваяСтрокаТФ = ТаблицаРезультат.Добавить();
	НоваяСтрокаТФ.НомерСтроки = 1;
	Для Сч=1 ПО КолКолонок Цикл
		нКолонка = СтрЗаменить(Сч, Символы.НПП, "");
		ИмяКолонки = "N" + нКолонка;
		НоваяСтрокаТФ[ИмяКолонки] = ОбластьФайла.ПолучитьОбласть("R1" + "C"+нКолонка).ТекущаяОбласть.Текст;
		
		// Используется при формировании таблицы на форме обработки.
		ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
		ДлинаСтроки    = СтрДлина(СокрЛП(НоваяСтрокаТФ[ИмяКолонки]));
		ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
	КонецЦикла;
	
	НачСтрока = ?(Не ЗначениеЗаполнено(НачСтрока), 2, НачСтрока);
	КонСтрока = ?(Не ЗначениеЗаполнено(КонСтрока), КолСтр, КонСтрока);
	
	Для нСтрокаТФ = НачСтрока ПО КонСтрока Цикл
		НоваяСтрокаТФ = ТаблицаРезультат.Добавить();
		НоваяСтрокаТФ[0] = нСтрокаТФ;
		нСтрока = СтрЗаменить(нСтрокаТФ, Символы.НПП, "");
		Для Колонка = 1 ПО КолКолонок Цикл
			нКолонка = СтрЗаменить(Колонка, Символы.НПП, "");
			Область = ОбластьФайла.ПолучитьОбласть("R"+нСтрока+"C"+нКолонка);
			ТекущаяОбласть = Область.ТекущаяОбласть;
			Если Колонка=2 Или Колонка=5 Тогда
				ЗначениеЯчейки = xmlstring(сокрЛП(ТекущаяОбласть.Текст));    // Строка, Булево. (Булево как строка "ИСТИНА"/"ЛОЖЬ")
				Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
					ЗначениеЯчейки = СокрЛП(ЗначениеЯчейки);
				Иначе
					ЗначениеЯчейки = Неопределено;
				КонецЕсли;
			Иначе
				Попытка
					ЗначениеЯчейки = xmlString(ТекущаяОбласть.Значение);        // Число, Дата.
				Исключение
					ЗначениеЯчейки = xmlstring(сокрЛП(ТекущаяОбласть.Текст));    // Строка, Булево. (Булево как строка "ИСТИНА"/"ЛОЖЬ")
					Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
						ЗначениеЯчейки = СокрЛП(ЗначениеЯчейки);
					Иначе
						ЗначениеЯчейки = Неопределено;
					КонецЕсли;
				КонецПопытки;
			КонецЕсли;
			ИмяКолонки = "N" + нКолонка;
			НоваяСтрокаТФ[ИмяКолонки] = ЗначениеЯчейки;
			
			// Используется при формировании таблицы на форме обработки.
			ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
			ДлинаСтроки    = СтрДлина(СокрЛП(НоваяСтрокаТФ[ИмяКолонки]));
			ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
		КонецЦикла;
	КонецЦикла;
	МассивКМ.Очистить();
	
	Для Каждого Стр Из ТаблицаРезультат Цикл
		
		
		ШтрихОбраб=Стр.N1;
		шТРИХкОД=ШтрихОбраб;
	штрихКод=СтрЗаменить(ШтрихКод,Символ(29),"");
	МассивКМ.Добавить(штрихКод);
		//ЗаполнитьИнфуПоШтриху();

	Конеццикла;
	
	
КонецПроцедуры


&НаКлиенте
Процедура ПечатьШаблонаТабак(Команда)
	// Вставить содержимое обработчика.
	ТаблЧ=Новый ТабличныйДОкумент;
	ПечатьЭтикеткиТабакСервер(ТаблЧ);
	ТаблЧ.ТолькоПросмотр=Истина;
	ТаблЧ.Показать();
	
	
КонецПроцедуры

Процедура  ПечатьЭтикеткиТабакСервер(ТаблЧ) эКспорт
		Макет=Документы.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.ПолучитьМакет("АльтернативныйТабак");
		ТаблЧ.ИмяПараметровПечати="Печать агрегации ТАБАК";
	
		ОблЧек=Макет.ПолучитьОбласть("Агрегация");
		
		Марки=ОБъект.Марки.Выгрузить();
		Марки.Свернуть("НомерБокса");
	Если ВерсияПравильная Тогда
		ГенераторМатрицы=Обработки.ГенерацияDataMatrix_ХамелеонЦРПТ.Создать();
		ГенераторМатрицы.Инициализировать();
	КонецЕсли;

	Облчек.Параметры.Бренд=Объект.Продукция.БрендТорговаяМарка;
	ОБлЧек.Параметры.НомерДокумента=Объект.Номер;
	ОБлЧек.Параметры.Комментарий=Объект.Комментарий;

		
		
		
					
					              
					АдресКонец=Объект.НомерКороба;

						
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты.Регистратор
		|ИЗ
		|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Обороты(, , Регистратор, СерийныйНомер = &cis) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты
		|ГДЕ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты.Регистратор ССЫЛКА Документ.ЗаказМарок_ХамелеонЦРПТ";
	
	Запрос.УстановитьПараметр("cis", АдресКонец);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	РРР=КодироватьСтроку(АдресКонец,СпособКодированияСТроки.КодировкаURL);
	НомерКМ=АдресКонец;
	Есть=ложь;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Для Каждого Стр_111 Из  ВыборкаДетальныеЗаписи.Регистратор.КМИзAPI Цикл
			Если Найти(Стр_111.НомерКМ,РРР)=1 Тогда
				НомерКМ=Стр_111.НомерКМ;
				Есть=Истина;Прервать;
			КонецЕсли;
			
		Конеццикла;
		
		
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

			  Если Есть=Истина тогда
			
				ООО=РаскодироватьСтроку(НомерКМ,СпособКодированияСтроки.КодировкаURL);
			Иначе
				ООО=НомерКМ
			КонецЕсли;
					
				Если версияПравильная Тогда
					Картинка = ГенераторМатрицы.Сгенерировать(ООО);
				Иначе
										ГенераторМатрицы=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();

					Картинка = ГенераторМатрицы.Сгенерировать(ООО);
КонецЕсли;
			ОблЧек.Рисунки.ДатаМ.Картинка=Новый Картинка(Картинка);
			
			     ОблЧек.Параметры.cis=АдресКонец;

					Если НЕ ТаблЧ.ПроверитьВывод(ОблЧек) Тогда
						ТаблЧ.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					
					
		ТаблЧ.Вывести(ОблЧек);
						
		СистемнаяИнформация = Новый СистемнаяИнформация;

	ОблМ=Макет.ПолучитьОбласть("Агрегация");
	
	
	
	Для Каждого ВыборкаДетальныеЗаписи_123 Из Объект.Марки Цикл
			//Стр_2=ВыборкаДетальныеЗаписи;
			//НСтр=Объект.Товары.НайтиСтроки(Новый Структура("ID",Стр.Order_Id_Line));
			//Если НСтр.Количество()=0  Тогда
			//	Продолжить;
			//Иначе
			//	НСтр=НСтр[0];
			//КонецЕсли;
			
			ГТИН=Сред(ВыборкаДетальныеЗаписи_123.Марка,3);
			ГТИН=Сред(ГТИН,1,14);
			GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
			
			ОблМ.Параметры.Бренд=GTIN.БрендТорговаяМарка;
			ОблМ.Параметры.НомерДокумента=Объект.Номер;
			ОблМ.Параметры.Комментарий=Объект.Комментарий;
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты.Регистратор
		|ИЗ
		|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Обороты(, , Регистратор, СерийныйНомер = &cis) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты
		|ГДЕ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты.Регистратор ССЫЛКА Документ.ЗаказМарок_ХамелеонЦРПТ";
	
	Запрос.УстановитьПараметр("cis", ВыборкаДетальныеЗаписи_123.Марка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	РРР=КодироватьСтроку(ВыборкаДетальныеЗаписи_123.Марка,СпособКодированияСТроки.КодировкаURL);
	НомерКМ=ВыборкаДетальныеЗаписи_123.Марка;
	Есть=ложь;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Для Каждого Стр_111 Из  ВыборкаДетальныеЗаписи.Регистратор.КМИзAPI Цикл
			Если Найти(Стр_111.НомерКМ,РРР)=1 Тогда
				НомерКМ=Стр_111.НомерКМ;
				Есть=Истина;Прервать;
			КонецЕсли;
			
		Конеццикла;
		
		
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

			  Если Есть=Истина тогда
			
				ООО=РаскодироватьСтроку(НомерКМ,СпособКодированияСтроки.КодировкаURL);
			Иначе
				ООО=НомерКМ
			КонецЕсли;
			CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
				 ;
		ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
		
				ГТИН=Сред(ГТИН,14+3);
			
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			cis=НомерКМ;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
				ГТИН=Сред(ГТИН,6);
			
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			
			
			Попытка
				Если версияПравильная Тогда
					Картинка = ГенераторМатрицы.Сгенерировать(ООО);
				Иначе
										ГенераторМатрицы=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();

					Картинка = ГенераторМатрицы.Сгенерировать(ООО);
КонецЕсли;
			ОблМ.Рисунки.ДатаМ.Картинка=Новый Картинка(Картинка);
			
			
			
			Исключение
			//	Сообщить("Для печати Data Matrix необходим релиз 8.3.9 или выше");
			//	Возврат;
			Конецпопытки;
			
				//Если ПервыйРисунок Тогда
				//	Если НЕ Таб.ПроверитьВывод(ОблМ) Тогда
				//		Таб.ВывестиГоризонтальныйРазделительСтраниц();
				//	КонецЕсли;
					Если НЕ ТаблЧ.ПроверитьВывод(ОблМ) Тогда
						ТаблЧ.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					ТаблЧ.Вывести(ОблМ);
					ПервыйРисунок=ложь;
				//Иначе
				//	Таб.Присоединить(ОблМ);
					
				//	ПервыйРисунок=Истина;
					
				//Конецесли;
			
		КонецЦикла;
	
						
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДвижения(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	МассивКМ=Новый СписокЗначений;
	Для Каждого Стр Из Элементы.Марки.ВыделенныеСтроки Цикл
		Стр_1=Объект.Марки.НайтиПоИдентификатору(Стр);
		Если ЗначениеЗаполненО(Стр_1.марка) Тогда
			МассивКМ.Добавить(Стр_1.марка);
		КонецЕсли;
		
	Конеццикла;
	
	Форм=ОткрытьФорму("Отчет.ОтчетПоКМ_ХамелеонЦРПТ.Форма.ФормаОтчета");
	Форм.ПрименитьОтбор(МассивКМ);
	
КонецПроцедуры


