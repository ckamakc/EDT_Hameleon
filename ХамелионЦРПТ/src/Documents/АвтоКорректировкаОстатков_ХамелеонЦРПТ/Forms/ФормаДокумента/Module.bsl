&НаСервереБезКонтекста
Функция ВернутьИНН(О)
	Возврат О.ИНН
Конецфункции
&НаСервереБезКонтекста
Функция ЗаписатьПродукциюТабак(Стр) Экспорт
		СпрПр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(Стр.gtin));
		Если ЗначениеЗАполнено(СпрПр) тогда
			Возврат СпрПр;
			СпрПр=СпрПр.ПолучитьОбъект();
		Иначе
			СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
		КонецЕсли;
		СпрПр.GTIN=Число(Стр.gtin);
		
		Стр.Свойство("productName",СпрПр.Наименование);
		Стр.Свойство("productName",СпрПр.НаименованиеТовара);
		
		Если не ЗначениеЗаполнено(СпрПр.НаименованиеТовара) тогда	
			СпрПр.НаименованиеТовара=СпрПр.Наименование;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СпрПр.НаименованиеТовара) тогда
			СпрПр.НаименованиеТовара=xmlString(СпрПр.GTIN)
		КонецЕслИ;
		СпрПр.Записать();
Возврат СпрПр.Ссылка;
КонецФункции

&НаКлиенте
Процедура ОбновитьОстаткиПоКМТабак(Thumbprint_1)
	ЭтаФорма.Записать();
	   Объект.СерийныеНомера.Очистить();
	   
	   ИНН="";
	СписокГТИН=МассивГТИН(,ИНН);
	
	
	СчетчикОбщий=0;
	УдаялемСРегистра();
	
	ОБъект.Статус=Предопределенноезначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВПроцессе");
	ЭтаФорма.Записать();
	ИсключаемИзЗапроса=Новый СписокЗначений;
	
//	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
		
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Сообщить("Не удалось подключиться к ЦРПТ");
			Возврат;
		КонецЕсли;

		
		
УжеЗаписалиГТИН=Новый Массив;
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				
				Смещение=0;
				Тотал=1;
				Пока    Истина Цикл
					
					        			Если Объект.СерийныеНомера.Количество()>=500 Тогда
											ЗагрузитьИнфуВРегистр(Неопределено);
											Объект.СерийныеНомера.Очистить();
											
											ОбработкаПрерыванияПользователя();
														
										КонецЕсли;
										
										
										Если Смещение=0 Тогда
											Сместить="0";
										Иначе
											Сместить=Формат(Смещение,"ЧГ=");
										КонецЕсли;
										
										
			Тело="{""filters"":[{""operator"":""="",""column"":""owner"",""filterTerm"":"""+ВернутьИНН(Объект.Организация)+"""}],""sorts"":[],""pageSize"":"+"10"+",""currentPage"":"+Сместить+"}";
										
						
						
								HTTPЗапрос=Новый HTTPЗапрос("api/km-grid/getPageData");
								
								#Если ВебКлиент Тогда
HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
												#Иначе

HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
								
												//	Иначе
												//	HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.document_id+"");
											/////			
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
												//	КонецЕсли;
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
											HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),	"ЧГ="));
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
											Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
											NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);
									Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
				ЗапишемВРегистр(Текст1);
			КонецЕсли;

											entries="";
											Если NNN.Свойство("kizes",entries) Тогда
												Если entries.Количество()=0 Тогда
													Прервать;;
												КонецЕслИ;
												Для Каждого Стр_1 ИЗ entries Цикл
													Если Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1.cis)).Количество()>0 Тогда
														Продолжить;
													КонецЕсли;
													//Если     УжеЗаписалиГТИН.Найти(Стр_1.gtin)=Неопределено Тогда
													
													Если Стр_1.status>2 Тогда
														Продолжить;
													КонецеслИ;
														   Продукция=ЗаписатьПродукциюТабак(Стр_1);
														
														//УжеЗаписалиГТИН.Добавить(Стр_1.gtin);
													//КонецЕсли;
												Добав_1=Объект.СерийныеНомера.Добавить();
				
												//ИсключаемИзЗапроса.Добавить(Стр_1.cis);				
													Добав_1.КоличествоКМ_в_Обороте=1;
													Статус_1="";
													//Если Стр_1.Свойство("goodsStatus",статус_1) И Статус_1="WAIT_SHIPMENT"
													//	Тогда
													//	Добав_1.Резерв=Добав_1 .Резерв+1;
														
													//КонецЕсли;
													
												Добав_1.GTIN=Стр_1.gtin;
												Добав_1.НаименованиеТовара=Продукция;
												//Стр_1.Свойство("sgtin",Добав_1.СерийныйНомер);
												Добав_1.cis=Стр_1.cis;
												

													
											Конеццикла;   
										Иначе
											Прервать;
											КонецЕсли;
//Тотал=NNN.count;
Если Булево(NNN.last)=Истина Тогда
	Прервать;
Конецесли;
Смещение=Смещение+1;
				 Состояние("Обрабатывается: "+Строка(Смещение*10)+" из "+Строка(Тотал),Смещение*10*100/Тотал);
								
		Конеццикла;											
		
													ЗагрузитьИнфуВРегистр(Неопределено);
											Объект.СерийныеНомера.Очистить();
											
											ОбработкаПрерыванияПользователя();

		//ЗагружаемШаблоныНасервере(Текст1,Форм.Пользователь);
	
КонецПроцедуры


Функция ВернутьSUB()
	Возврат Объект.Договор.РегистрационныйНомер
КонецФункции

&НаКлиенте
Процедура ОбновитьОстаткиПоКМЛекарства(Thumbprint_1)
	ЭтаФорма.Записать();
	sysLfyyst=ВернутьSUB();
	МассивУпаковок=Новый Массив;
	МассивУпаковок.Очистить();
		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
УжеЗаписалиГТИН=Новый Массив;
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				
		Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Сообщить("Не удалось подключиться к ЦРПТ");
			Возврат;
		КонецЕсли;
				
				Смещение=0;
				Тотал=1;
				Пока    Смещение*20<=Тотал Цикл
					
					        			Если Объект.СерийныеНомера.Количество()>=500 Тогда
											ЗагрузитьИнфуВРегистр(Неопределено);
											Объект.СерийныеНомера.Очистить();
											
											ОбработкаПрерыванияПользователя();
														
										КонецЕсли;
										
										
					
										Чтен=Новый  ЗаписьJSON;
										Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
										Чтен.ЗаписатьНачалоОбъекта();
										Чтен.ЗаписатьИмяСвойства("start_from");	
										Чтен.ЗаписатьЗначение(Смещение*20);
										Чтен.ЗаписатьИмяСвойства("count");
										Чтен.ЗаписатьЗначение(20);
										Чтен.ЗаписатьИмяСвойства("sort");
										Чтен.ЗаписатьЗначение("NO_SORT");
										Чтен.ЗаписатьИмяСвойства("filter");
										Чтен.ЗаписатьНачалоОбъекта();
										
										Если ЗначениеЗаполнено(sysLfyyst) ТОгда
											Чтен.ЗаписатьИмяСвойства("sys_id");
											Чтен.ЗаписатьЗначение(sysLfyyst);
											
											
											
										КонецЕсли;
										
										
										
										Чтен.ЗаписатьКонецОбъекта();
										Чтен.ЗаписатьКонецОбъекта();
										Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
										Тело=СтрЗаменить(Тело,Символы.ПС,"");
										Тело=СтрЗаменить(Тело,Символы.ВК,"");
										
						
						
								HTTPЗапрос=Новый HTTPЗапрос("api/v1/reestr/sgtin/filter");
								         HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
								
												//	Иначе
												//	HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.document_id+"");
											/////			
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
												//	КонецЕсли;
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
											HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
											Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
											ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
											NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);
														Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
				ЗапишемВРегистр(Текст1);
			КонецЕсли;

											entries="";
											Если NNN.Свойство("entries",entries) Тогда
												Для Каждого Стр_1 ИЗ entries Цикл
													Если Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1.id)).Количество()>0 Тогда
														Продолжить;
													КонецЕсли;
													//Если     УжеЗаписалиГТИН.Найти(Стр_1.gtin)=Неопределено Тогда
														
														   Продукция=ЗаписатьПродукцию(Стр_1);
														
														//УжеЗаписалиГТИН.Добавить(Стр_1.gtin);
													//КонецЕсли;
												Добав_1=Объект.СерийныеНомера.Добавить();
				
												//ИсключаемИзЗапроса.Добавить(Стр_1.cis);				
													Добав_1.КоличествоКМ_в_Обороте=1;
													Статус_1="";
													//Если Стр_1.Свойство("goodsStatus",статус_1) И Статус_1="WAIT_SHIPMENT"
													//	Тогда
													//	Добав_1.Резерв=Добав_1 .Резерв+1;
														
													//КонецЕсли;
													
												Добав_1.GTIN=Стр_1.gtin;
												Добав_1.НаименованиеТовара=Продукция;
												
												
												
												sscc="";
												Стр_1.Свойство("pack3_id",sscc);
												
												Если ЗначениеЗаполнено(sscc) Тогда
													Если МассивУпаковок.Найти(sscc)=Неопределено Тогда
														Добав_1.cis=sscc;
														МассивУпаковок.Добавить(sscc);
													КонецЕсли;
												Иначе
													Стр_1.Свойство("sgtin",Добав_1.СерийныйНомер);
													Добав_1.cis=Стр_1.id;
												КонецЕсли;
												

													
												Конеццикла;
											КонецЕсли;
Тотал=NNN.Total;
Смещение=Смещение+1;
				 Состояние("Обрабатывается: "+Строка(Смещение*20)+" из "+Строка(Тотал),Смещение*20*100/Тотал);
								
		Конеццикла;											
		
													ЗагрузитьИнфуВРегистр(Неопределено);
											Объект.СерийныеНомера.Очистить();
											
											ОбработкаПрерыванияПользователя();

		//ЗагружаемШаблоныНасервере(Текст1,Форм.Пользователь);
	
КонецПроцедуры

Функция ЗаписатьПродукцию(Стр) Экспорт
		СпрПр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(Стр.gtin));
		Если ЗначениеЗАполнено(СпрПр) тогда
			СпрПр=СпрПр.ПолучитьОбъект();
		Иначе
			СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
		КонецЕсли;
		СпрПр.GTIN=Число(Стр.gtin);
		
		Если  НЕ Стр.Свойство("prod_sell_name",СпрПр.Наименование) Тогда
			Стр.Свойство("prod_name",СпрПр.Наименование);
		КонецЕслИ;
		
		СпрПр.НаименованиеТовара=Стр.prod_form_name;
		Стр.Свойство("prod_desc",СпрПр.Комментарий);
		Стр.Свойство("reg_number",СпрПр.МодельПроизводителяАртикул);
		стр.Свойство("prod_pack_1_name",СпрПр.БрендТорговаяМарка);
		
		//СпрПр.Изготовитель=Справочники.Изготовители_ХамелеонЦРПТ.НайтиПоНаименованию(Стр.glf_name);
		//Если Не ЗначениеЗаполнено(СпрПр.Изготовитель) Тогда
		//	СпрИзг=Справочники.Изготовители_ХамелеонЦРПТ.СоздатьЭлемент();
		//	СпрИзг.Наименование=Стр.glf_name;
		//	СпрИзг.Записать();
		//	СпрПр.Изготовитель=СпрИзг.Ссылка;
		//Конецесли;
		glf_country=Неопределено;
		Если Стр.Свойство("glf_country",glf_country) Тогда
						Если glf_country="РОССИЙСКАЯ ФЕДЕРАЦИЯ" Тогда
							СпрПр.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
						Иначе
							СпрПр.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(glf_country);
						КонецЕсли;	
			//СпрПр.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(glf_country);
		КонецЕсли;
		СпрПр.Записать();
		
КонецФункции


Процедура УстановитьПараметр()
	
	СписокСерийников.Параметры.УстановитьЗначениеПараметра("ДокументКорректировки",Объект.Ссылка);
	
КонецПроцедуры

Процедура ЗапишемВРегистр(ТекстДокумент)
	
	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Объект.Ссылка);
	РегДв.Отбор.Вид.Установить("Получили ответ");
	Добав=РегДв.Добавить();
	Добав.Документ=ОБъект.Ссылка;
	Добав.Вид="Получили ответ";
	Добав.Файл=Новый ХранилищеЗначения(ТекстДокумент,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ОчиститьТокенСрегистра(ТТ)
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(ТТ,"")
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТокенСрегистра(Thumbprint_1)
	Возврат Регистрысведений.ТокенПоСертификату_ХамелеонЦРПТ.Получить(Новый Структура("Отпечаток",Thumbprint_1)).Токен;
КонецФункции

Функция ПолучитьИзПользователя()
	Возврат Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);
КонецФункции


&НаСервереБезКонтекста
Функция СоздатьНайтиПоGTIN_Соответствие(Стр)
	
	//Контр=Справочники.ПроизводителиИмпортеры_ХамелеонЦРПТ.
	
	
	Спр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Стр["gtin"]));
	Если Спр<>Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка() Тогда
		Спр_1=Спр.ПолучитьОбъект();
	Иначе
		Спр_1=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
	КонецЕсли;
					Спр_1.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
					
					tnVedEaesGroup=Стр["tnVedEaesGroup"];
					//Если ЗначениеЗаполненО(tnVedEaesGroup) Тогда
					//	Стр.Свойство("tnVedEaesGroup",tnVedEaesGroup);
					//КонецЕсли;
					
					productName=Стр["productName"];
					//Стр.Свойство("productName",productName);
					
	Если Не ЗначениеЗаполнено(productName) тогда
						productName=Спр_1.gtin;
	КонецЕсли;				
	
	Попытка
 		productName_Число=Число(productName);
	Исключение
		productName_Число=0;
	КонецПопытки;
	Если productName<>спр_1.НаименованиеТовара 
		ИЛИ Число(Стр["gtin"])<>Спр_1.gtin 
		ИЛИ tnVedEaesGroup<>Спр_1.КодТНВЭД
		Тогда
		Спр_1.GTIN=стр["gtin"];
		Спр_1.КодТНВЭД=tnVedEaesGroup;
		Если НЕ ЗначениеЗаполнено(Спр_1.Наименование)
			ИЛИ  productName_Число<>Спр_1.gtin Тогда
			Спр_1.Наименование=productName;
			Спр_1.НаименованиеТовара=productName;
		КонецЕсли;
		Спр_1.Записать();;
	КонецЕсли;
	Возврат Спр_1.Ссылка
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьНайтиПоGTIN_Соответствие_IDENT(Стр,GTIN)
	
	//Контр=Справочники.ПроизводителиИмпортеры_ХамелеонЦРПТ.
	cis=Стр["cis"];
	Если СтрДлина(cis)=18 Тогда
		Возврат Неопределено;
	Иначе
		Спр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Сред(cis,3,14)));
		GTIN=Сред(cis,3,14);
		Возврат  Спр
	КонецЕсли;
	
	
	Спр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Стр["gtin"]));
	Если Спр<>Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка() Тогда
		Спр_1=Спр.ПолучитьОбъект();
	Иначе
		Спр_1=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
	КонецЕсли;
					Спр_1.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
					
					tnVedEaesGroup=Стр["tnVedEaesGroup"];
					//Если ЗначениеЗаполненО(tnVedEaesGroup) Тогда
					//	Стр.Свойство("tnVedEaesGroup",tnVedEaesGroup);
					//КонецЕсли;
					
					productName=Стр["productName"];
					//Стр.Свойство("productName",productName);
					
	Если Не ЗначениеЗаполнено(productName) тогда
						productName=Спр_1.gtin;
	КонецЕсли;				
	
	Попытка
 		productName_Число=Число(productName);
	Исключение
		productName_Число=0;
	КонецПопытки;
	Если productName<>спр_1.НаименованиеТовара 
		ИЛИ Число(Стр["gtin"])<>Спр_1.gtin 
		ИЛИ tnVedEaesGroup<>Спр_1.КодТНВЭД
		Тогда
		Спр_1.GTIN=стр["gtin"];
		Спр_1.КодТНВЭД=tnVedEaesGroup;
		Если НЕ ЗначениеЗаполнено(Спр_1.Наименование)
			ИЛИ  productName_Число<>Спр_1.gtin Тогда
			Спр_1.Наименование=productName;
			Спр_1.НаименованиеТовара=productName;
		КонецЕсли;
		Спр_1.Записать();;
	КонецЕсли;
	Возврат Спр_1.Ссылка
КонецФункции


&НаСервереБезКонтекста
Функция СоздатьНайтиПоGTIN_IDENT(Стр,GTIN)
	
	//Контр=Справочники.ПроизводителиИмпортеры_ХамелеонЦРПТ.
	
	Если СтрДлина(Стр.cis)=18 Тогда
		Возврат Неопределено;
	Иначе
		Спр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Сред(Стр.cis,3,14)));
		GTIN=Сред(Стр.cis,3,14);
		Возврат  Спр
	КонецЕсли;
	
	Спр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Стр.gtin));
	Если Спр<>Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка() Тогда
		Спр_1=Спр.ПолучитьОбъект();
	Иначе
		Спр_1=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
	КонецЕсли;
					Спр_1.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
					
					tnVedEaesGroup="";
					Стр.Свойство("tnVedEaesGroup",tnVedEaesGroup);
					
					productName="";
					Стр.Свойство("productName",productName);
					
	Если Не ЗначениеЗаполнено(productName) тогда
						productName=Спр_1.gtin;
	КонецЕсли;				
	
	Попытка
		productName_Число=Число(productName);
	Исключение
		productName_Число=0;
	КонецПопытки;
			
	Если productName<>спр_1.НаименованиеТовара 
		ИЛИ Число(Стр.gtin)<>Спр_1.gtin 
		ИЛИ tnVedEaesGroup<>Спр_1.КодТНВЭД
		Тогда
		
		Спр_1.GTIN=стр.gtin;
		Спр_1.КодТНВЭД=tnVedEaesGroup;
		Если НЕ ЗначениеЗаполнено(Спр_1.Наименование)
			ИЛИ  Число(productName_Число)<>Спр_1.gtin Тогда
			Спр_1.Наименование=productName;
			Спр_1.НаименованиеТовара=productName;
		КонецЕсли;
		Спр_1.Записать();;
	КонецЕсли;
	Возврат Спр_1.Ссылка
КонецФункции



&НаСервереБезКонтекста
Функция СоздатьНайтиПоGTIN(Стр)
	
	//Контр=Справочники.ПроизводителиИмпортеры_ХамелеонЦРПТ.
	
	
	Спр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Стр.gtin));
	Если Спр<>Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка() Тогда
		Спр_1=Спр.ПолучитьОбъект();
	Иначе
		Спр_1=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
	КонецЕсли;
					Спр_1.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
					
					tnVedEaesGroup="";
					Стр.Свойство("tnVedEaesGroup",tnVedEaesGroup);
					
					productName="";
					Стр.Свойство("productName",productName);
					
	Если Не ЗначениеЗаполнено(productName) тогда
						productName=Спр_1.gtin;
	КонецЕсли;				
	
	Попытка
		productName_Число=Число(productName);
	Исключение
		productName_Число=0;
	КонецПопытки;
			
	Если productName<>спр_1.НаименованиеТовара 
		ИЛИ Число(Стр.gtin)<>Спр_1.gtin 
		ИЛИ tnVedEaesGroup<>Спр_1.КодТНВЭД
		Тогда
		
		Спр_1.GTIN=стр.gtin;
		Спр_1.КодТНВЭД=tnVedEaesGroup;
		Если НЕ ЗначениеЗаполнено(Спр_1.Наименование)
			ИЛИ  Число(productName_Число)<>Спр_1.gtin Тогда
			Спр_1.Наименование=productName;
			Спр_1.НаименованиеТовара=productName;
		КонецЕсли;
		Спр_1.Записать();;
	КонецЕсли;
	Возврат Спр_1.Ссылка
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьНайтиТНВЭД(Код)
	ТТ=Справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(Код);
	Если ЗначениеЗАполнено(ТТ) Тогда
		Возврат ТТ
	Иначе
		СпрТ=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрТ.Код=Код;
		СпрТ.Наименование=Код;
		СпрТ.Записать();
		Возврат СпрТ.Ссылка
	КонецЕсли
КонецФункции

&НаСервереБезКонтекста
Функция  СоздатьНайтиИДСТРОКИ(orderID)
								СпрОрд=Справочники.ID_строки_партия_ХамелеонЦРПТ.НайтиПоНаименованию(orderID);
							Если Не ЗначениеЗаполнено(СпрОрд) Тогда
								
								СпрОрд=Справочники.ID_строки_партия_ХамелеонЦРПТ.СоздатьЭлемент();
								СпрОрд.Наименование=orderID;
								СпрОрд.Записать();
							КонецЕсли;
							
							Возврат СпрОрд.Ссылка
КонецФункции

Функция ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса=Неопределено)
	
	
		
	
	Серийники=Объект.СерийныеНомера.Выгрузить();
	Масс=Серийники.ВыгрузитьКолонку("cis");
	Серийники.Колонки.Добавить("ДокументКорректировки");
	Серийники.ЗаполнитьЗначения(ОБъект.Ссылка,"ДокументКорректировки");
	
	СюдаДобавить=Серийники.СкопироватьКолонки();
	СюдаДобавить.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.СерийныйНомер КАК СерийныйНомер,
		|	СУММА(ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.КоличествоОстаток) КАК Вобороте,
		|	0 КАК Эмитировано,
		|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.Продукция КАК Продукция,
		|	0 КАК Резерв,
		|	0 КАК Получены
		|ИЗ
		|	РегистрНакопления.ОстаткиКМ_в_Обороте_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер В (&cis)) КАК ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.СерийныйНомер,
		|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.Продукция
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер,
		|	0,
		|	СУММА(ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток),
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция,
		|	0,
		|	0
		|ИЗ
		|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер В (&cis)) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер,
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Резервы_ХамелеонЦРПТОстатки.СерийныйНомер,
		|	0,
		|	0,
		|	NULL,
		|	СУММА(Резервы_ХамелеонЦРПТОстатки.КоличествоОстаток),
		|	0
		|ИЗ
		|	РегистрНакопления.Резервы_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер В (&cis)) КАК Резервы_ХамелеонЦРПТОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Резервы_ХамелеонЦРПТОстатки.СерийныйНомер
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.СерийныйНомер,
		|	0,
		|	0,
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.Продукция,
		|	0,
		|	СУММА(ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.КоличествоОстаток)
		|ИЗ
		|	РегистрНакопления.ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер В (&cis)) КАК ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.СерийныйНомер,
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.Продукция
		|ИТОГИ
		|	СУММА(Вобороте),
		|	СУММА(Эмитировано),
		|	СУММА(Резерв),
		|	СУММА(Получены)
		|ПО
		|	Продукция,
		|	СерийныйНомер";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("cis", масс);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПродукция = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПродукция.Следующий() Цикл
		// Вставить обработку выборки ВыборкаПродукция
	
		ВыборкаСерийныйНомер = ВыборкаПродукция.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ВыборкаСерийныйНомер.Следующий() Цикл
			// Вставить обработку выборки ВыборкаСерийныйНомер
			
			
			НайтиСтр=Серийники.НайтиСтроки(Новый Структура("cis",ВыборкаСерийныйНомер.СерийныйНомер));
			Если НайтиСтр.Количество()=0 Тогда
				//ИсключаемИзЗапроса.Добавить(ВыборкаСерийныйНомер.СерийныйНомер);
				Добав=СюдаДобавить.Добавить();
				Попытка
					Добав.GTIN=дополнитьСтроку(xmlString(ВыборкаСерийныйНомер.Продукция.gtin));
				Исключение
				КонецПопытки;
				Добав.НаименованиеТовара=ВыборкаСерийныйНомер.Продукция;
				Добав.cis=ВыборкаСерийныйНомер.СерийныйНомер;
								
			Иначе
				Добав=НайтиСтр[0];
				Если Не ЗначениеЗаполнено(Добав.GTIN) Тогда
					
					Попытка
						Добав.GTIN=дополнитьСтроку(xmlString(ВыборкаСерийныйНомер.Продукция.gtin));
					Исключение
					КонецПопытки;
					
				Конецесли;
			КонецЕсли;
			Добав.ДокументКорректировки=Объект.Ссылка;
				Добав.КоличествоКМ_ЭмитированоПрограммно=Добав.КоличествоКМ_ЭмитированоПрограммно+ВыборкаСерийныйНомер.Эмитировано;
				Добав.КоличествоКМ_в_ОборотеПрограммно=Добав.КоличествоКМ_в_ОборотеПрограммно+ВыборкаСерийныйНомер.Вобороте;
				Добав.Резерв=Добав.Резерв+ВыборкаСерийныйНомер.Резерв;  
				Добав.КоличествоКМ_До_ЭмитированоПрограммно=Добав.КоличествоКМ_До_ЭмитированоПрограммно+ВыборкаСерийныйНомер.Получены;
				//Добав.НомерСтрокиСвязи=Добав_Т.НомерСтрокиСвязи;
			
		КонецЦикла;
	КонецЦикла;
	Если Серийники.Количество()>0 ТОгда
		РегДв=РегистрыСведений.СерийныеНомера_ХамелеонЦРПТ.СоздатьНаборЗаписей();
		РегДв.Отбор.ДокументКорректировки.Установить(объект.Ссылка);
		//РегДв.Прочитать();
		РегДв.Загрузить(Серийники);
		РегДв.Записать(Ложь);
	КонецЕсли;
	Если СюдаДобавить.Количество()>0 ТОгда
		РегДв=РегистрыСведений.СерийныеНомера_ХамелеонЦРПТ.СоздатьНаборЗаписей();
		РегДв.Отбор.ДокументКорректировки.Установить(объект.Ссылка);
		//РегДв.Прочитать();
		РегДв.Загрузить(СюдаДобавить);
		РегДв.Записать(Ложь);
	Конецесли;
	
КонецФункции

Процедура УдаялемСРегистра()
	РегДв=РегистрыСведений.СерийныеНомера_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.ДокументКорректировки.Установить(Объект.Ссылка);
	РегДв.Записать(Истина);
КонецПроцедуры


Процедура ЗапишемВРегистр_Марки(ТекстДокумент,НомерСтроки,Дата_1)
	

	РегДв=РегистрыСведений.ОтветыКорректировок_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Объект.Ссылка);
	//ОтборПоВиду="Получили корректировку "+Формат(Дата_1,"ДЛФ=Д")+Строка(НомерСтроки);
	РегДв.Отбор.Запрос.Установить(НомерСтроки);
	Добав=РегДв.Добавить();
	Добав.Документ=ОБъект.Ссылка;
	Добав.Запрос=НомерСтроки;
	Добав.Файл=Новый ХранилищеЗначения(ТекстДокумент,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
КонецПроцедуры

Функция МассивГТИН(РР=Неопределено,ИНН="")
	              ИНН=Объект.Организация.ИНН;
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Продукция_ХамелеонЦРПТ.GTIN
		|ИЗ
		|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ";
	Если РР<>Неопределено тогда
		Запрос.Текст=Запрос.Текст+"
		|ГДЕ
		|	Продукция_ХамелеонЦРПТ.Ссылка В(&Ссылка)";
		Запрос.УстановитьПараметр("Ссылка",РР);
	Конецесли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивГТИН=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.GTIN)  Тогда
			ДобавляемГТИН=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(ВыборкаДетальныеЗаписи.GTIN),14,"0");
			Если МассивГТИН.Найти(ДобавляемГТИН)=Неопределено Тогда
			  МассивГТИН.Добавить(ДобавляемГТИН);
			Конецесли;
			
		КонецЕсли;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Возврат МассивГТИН
	
Конецфункции

&НаКлиенте
Процедура ПроводимПоДругомуИСразу(Thumbprint_1)
	Если Объект.Статус=Предопределенноезначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан") Тогда
		Возврат;
	КонецЕсли;
	   Объект.СерийныеНомера.Очистить();
	
	СписокГТИН=МассивГТИН();
	ЗагрузитьПоGTINКлиент(СписокГТИН,Thumbprint_1)

КонецПроцедуры


&НаКлиенте
Процедура ОбновитьОстаткиПоКМЛекарства_ГТИН(СписокГТИН,Thumbprint_1)
	ЭтаФорма.Записать();
		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
		
		Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Сообщить("Не удалось подключиться к ЦРПТ");
			Возврат;
		КонецЕсли;

УжеЗаписалиГТИН=Новый Массив;
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				
			КоличествоГТИНов=СписокГТИН.Количество();
			
			НомерПП=0;
			Для Каждого Стр_ГТИН Из СписокГТИН Цикл
				
				НомерПП=НомерПП+1;
				Смещение=0;
				Тотал=1;
				Пока    Смещение*20<=Тотал Цикл
					
					        			Если Объект.СерийныеНомера.Количество()>=500 Тогда
											ЗагрузитьИнфуВРегистр(Неопределено);
											Объект.СерийныеНомера.Очистить();
											
											ОбработкаПрерыванияПользователя();
														
										КонецЕсли;
										
										
					
										Чтен=Новый  ЗаписьJSON;
										Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
										Чтен.ЗаписатьНачалоОбъекта();
										Чтен.ЗаписатьИмяСвойства("start_from");	
										Чтен.ЗаписатьЗначение(Смещение*20);
										Чтен.ЗаписатьИмяСвойства("count");
										Чтен.ЗаписатьЗначение(20);
										Чтен.ЗаписатьИмяСвойства("sort");
										Чтен.ЗаписатьЗначение("NO_SORT");
										Чтен.ЗаписатьИмяСвойства("filter");
										Чтен.ЗаписатьНачалоОбъекта();
										
										Чтен.ЗаписатьИмяСвойства("gtin");
										Чтен.ЗаписатьЗначение(Стр_ГТИН);
										
										
										Чтен.ЗаписатьИмяСвойства("sort");
										Чтен.ЗаписатьЗначение("NO_SORT");
										
										
										Чтен.ЗаписатьКонецОбъекта();
										Чтен.ЗаписатьКонецОбъекта();
										Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
										Тело=СтрЗаменить(Тело,Символы.ПС,"");
										Тело=СтрЗаменить(Тело,Символы.ВК,"");
										
						
						
								HTTPЗапрос=Новый HTTPЗапрос("api/v1/reestr/sgtin/filter");
								         HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
								
												//	Иначе
												//	HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.document_id+"");
											/////			
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
												//	КонецЕсли;
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
											HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
											Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
											Если Ответ.КодСостояния<>200 ТОГДА
												
												вызватьИсключение "Не удалось загрузить остатки "+Ответ.ПолучитьТелоКакСтроку();
											КОНЕЦЕСЛИ;
											
											
											ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
											NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);
														Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
				ЗапишемВРегистр(Текст1);
			КонецЕсли;

											entries="";
											Если NNN.Свойство("entries",entries) Тогда
												Для Каждого Стр_1 ИЗ entries Цикл
													Если Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1.id)).Количество()>0 Тогда
														Продолжить;
													КонецЕсли;
													//Если     УжеЗаписалиГТИН.Найти(Стр_1.gtin)=Неопределено Тогда
														
														   Продукция=ЗаписатьПродукцию(Стр_1);
														
														//УжеЗаписалиГТИН.Добавить(Стр_1.gtin);
													//КонецЕсли;
												Добав_1=Объект.СерийныеНомера.Добавить();
				
												//ИсключаемИзЗапроса.Добавить(Стр_1.cis);				
													Добав_1.КоличествоКМ_в_Обороте=1;
													Статус_1="";
													//Если Стр_1.Свойство("goodsStatus",статус_1) И Статус_1="WAIT_SHIPMENT"
													//	Тогда
													//	Добав_1.Резерв=Добав_1 .Резерв+1;
														
													//КонецЕсли;
													
												Добав_1.GTIN=Стр_1.gtin;
												Добав_1.НаименованиеТовара=Продукция;
												Стр_1.Свойство("sgtin",Добав_1.СерийныйНомер);
												Добав_1.cis=Стр_1.id;
												

													
												Конеццикла;
											КонецЕсли;
Тотал=NNN.Total;
Если Тотал=0 Тогда
	Прервать;
КонецЕсли;
Смещение=Смещение+1;
				 Состояние("Обрабатывается: "+Строка(Смещение*20)+" из "+Строка(Тотал),Смещение*20*100/Тотал);
								
		Конеццикла;											
		
	КонецЦикла;
													ЗагрузитьИнфуВРегистр(Неопределено);
											Объект.СерийныеНомера.Очистить();
											
											ОбработкаПрерыванияПользователя();

		//ЗагружаемШаблоныНасервере(Текст1,Форм.Пользователь);
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьПоGTINКлиент(СписокГТИН,Thumbprint_1)
	СчетчикОбщий=0;
	УдаялемСРегистра();
	
	ОБъект.Статус=Предопределенноезначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВПроцессе");
	ЭтаФорма.Записать();
	ИсключаемИзЗапроса=Новый СписокЗначений;
	
//	СРегистра=Thumbprint_1.ТокенПоОтпечатку;


	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика"  Тогда
		
		ОбновитьОстаткиПоКМЛекарства_ГТИН(СписокГТИН,Thumbprint_1);
		ЗаполнитьОстаткиИз1С_1_ГТИН(СписокГТИН);
		
		
		Возврат;
	КонецЕслИ;
	

СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Возврат;
		КонецЕсли;
	

	
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;

			
			КоличествоГТИН=СписокГТИН.Количество();
			КолТ_=0;
			Для Каждого СтрГТИН1 ИЗ  СписокГТИН Цикл
				
					ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
					Объект.СерийныеНомера.Очистить();
				
				   КолТ_=КолТ_+1;
		 Состояние("Обрабатывается: ГТИН "+стрГТИН1+". Колич. "+Строка(КолТ_)+" из "+Строка(КоличествоГТИН),КолТ_*100/КоличествоГТИН);
		
	HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/listV2?"+
	"limit="+Формат(1,"ЧГ=")+"&order=DESC&orderColumn=emd"+"&gtin="+СтрГТИН1+"&cache=false");
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	//HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Попытка
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Исключение
		Сообщить("Не удалось получить данные по GTIN "+СтрГтин1);
		Продолжить;
	КонецПопытки;
	Если Ответ.КодСостояния<>200 Тогда
		ПоказатьПредупреждение(,"Не удалось получить остатки");
		Возврат;
	КонецЕсли;
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
 	Тотал_ВСЕГО=NNN["results"].Количество();
	
	Попытка
		Кол=NNN["results"].Количество();
	исключение
		Кол=0;
	КонецПопытки;
	
	Если Тотал_ВСЕГО=0 И Кол=0 Тогда
		Продолжить;
	КонецЕсли;
	ИтогоСделаноПоЗ=0;

	
	
	Объект.Товары.Очистить();
		Объект.Статус=Неопределено;
	Объект.ОшибкаОтправки="";
	Если ЗначениеЗаполнено(Объект.ДатаНачалаПолучения) тогда
		НачальНаяДата=Объект.ДатаНачалаПолучения
	КонецЕсли;
			//	Если Не значениеЗАполнено(НачальНаяДата) Тогда
			//		НачальНаяДата=Дата(2019,6,1);
			//	КонецЕсли;
			//	Если НЕ ЗначениеЗаполнено(ШагВсекундах) Тогда
//	ШагВсекундах=60*60*24;
//	КонецЕсли;			
	    //Объект.СерийныеНомера.Очистить();
		
	 	 //ДатаНач=НачалоДня(НачальНаяДата);
	Если ИСТИНА ИЛИ НЕ ЗначениеЗаполнено(Объект.cis) тогда		 
		
		//ДатаНач_1=ДатаНач;
		
		                                //Разница=Объект.Дата-ДатаНач;
										//Если Разница=0 Тогда
										//	         Разница=1;
										//КонецЕсли;
									///	Пока ДатаНач<=Объект.Дата ЦИкл
											
									//		Объект.ДатаНачалаПолучения=ДатаНач;
									//		ЭтаФорма.Записать();
											
									//		РазницаТ=ДатаНач-ДатаНач_1;
											
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
			
		emis="";
			       ID="";
	//	ДатаКон =КонецДня(ДатаНач);
		
		
		ЗапросЗаписываем="api/v4/facade/identifytools/listV2?"+
	"&limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&gtin="+СтрГТИН1+"&cache=false";
	
	HTTPЗапрос=Новый HTTPЗапрос(ЗапросЗаписываем);
	//"&order=DESC&orderColumn=emd");
		
		
		
//		ДатаЗапоминть=ДатаНач;
//	ДатаНач=КонецДня(датаНач)+1;
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	//HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	
	Если Ответ.КодСостояния=200 Тогда
		Страница=0;
		Тотал=1;
		Пока Страница*СколькоНаСтранице<=Тотал Цикл
			
			
			
			страница=Страница+1;
			//Попытка
			
			//ЧтениеJSON = Новый ЧтениеJSON;
			Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
				ЗапишемВРегистр(Текст1);
			КонецЕсли;
		
			СчетчикОбщий=СчетчикОбщий+1;
			
			ЗапишемВРегистр_Марки(Текст1,ЗапросЗаписываем,"");
			
			//ЧтениеJSON.УстановитьСтроку(Текст1);
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			
		Если 	NNN<>Неопределено Тогда		
			
			
			ИтогоСделаноПоЗ=ИтогоСделаноПоЗ+NNN["results"].Количество();
			Попытка
	 Состояние("Обрабатывается: ГТИН "+стрГТИН1+". Колич. "+Строка(ИтогоСделаноПоЗ)+" из "+Строка(Тотал_ВСЕГО),ИтогоСделаноПоЗ*100/Тотал_ВСЕГО);
 Исключение
	 КонецПопытки;
			Тотал=99999999999999999999999;
			Если СколькоНаСтранице>NNN["results"].Количество() Тогда
				Тотал=NNN["results"].Количество()
			КонецЕсли;
			
			
			emis="";
			       ID="";
			Для Каждого Стр_1 Из NNN["results"] Цикл
		//		Если ПервуюПропустить=Истина Тогда
		////			ПервуюПропустить=Ложь;
			//		Продолжить;
			//	КонецЕсли;
				Если Стр_1["status"]="RETIRED" Тогда
					Продолжить;
				КонецЕсли;
			
			                     uit=Стр_1["uit"];
			Если Стр_1["uit"]<>Неопределено Тогда
				
			
				emis=Стр_1["emissionDate"];
				ID=uit;
				Номенклатура=СоздатьНайтиПоGTIN_Соответствие(Стр_1);
				
				
				//Добав.КодТНВЭД=СоздатьНайтиТНВЭД(Стр_1.tnVedEaesGroup);
				
				Если Объект.СерийныеНомера.Количество()>=99999 Тогда
					ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
					Объект.СерийныеНомера.Очистить();
				КонецЕсли;
				
				
				Если Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1["cis"])).Количество()>0 
					ИЛИ ИсключаемИзЗапроса.НайтиПоЗначению(Стр_1["cis"])<>Неопределено
					Тогда
					Продолжить;
				КонецЕсли;
				
				Добав_1=Объект.СерийныеНомера.Добавить();
				
			//	ИсключаемИзЗапроса.Добавить(Стр_1["cis"]);				
				Если Стр_1["status"]="APPLIED" Тогда
					Добав_1.КоличествоКМ_Эмитировано=1;
					//Статус_1="";
					//Если Стр_1.Свойство("goodsStatus",статус_1) И Статус_1="WAIT_SHIPMENT"
					//	Тогда
					//	Добав_1.Резерв=Добав_1 .Резерв+1;
					//	
					//КонецЕсли;
					
				ИначеЕсли Стр_1["status"]="EMITTED" Тогда
					Добав_1.КоличествоКМ_До_Эмитировано=1;
				ИначеЕсли Стр_1["status"]="INTRODUCED" Тогда
					Добав_1.КоличествоКМ_в_Обороте=1;
					Статус_1=Стр_1["goodsStatus"];
					Если Статус_1="WAIT_SHIPMENT"
						Тогда
						Добав_1.Резерв=Добав_1 .Резерв+1;
						
					КонецЕсли;
					
				ИначеЕсли Стр_1["status"]="RETIRED" Тогда
					Добав_1.КоличествоКМ_выбыло=1;
				КонецЕсли;
				//Добав_1.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
				Добав_1.GTIN=Стр_1["gtin"];
				Добав_1.НаименованиеТовара=Номенклатура;
				Добав_1.СерийныйНомер=Стр_1["sgtin"];
				Добав_1.cis=Стр_1["cis"];
				
			ИначеЕсли Стр_1["uitu"]<>Неопределено Тогда
				
				
				emis=Стр_1["emissionDate"];
				ID=Стр_1["uitu"];
				Если Стр_1["status"]="DISAGGREGATION" Тогда
					Продолжить;
				КонецЕсли;
				Если Стр_1["children"].Количество()>0 Тогда
					Номенклатура=СоздатьНайтиПоGTIN_Соответствие(Стр_1["children"][0]);
				КонецЕсли;
				
				//Добав.КодТНВЭД=СоздатьНайтиТНВЭД(Стр_1.tnVedEaesGroup);
				
				Если Объект.СерийныеНомера.Количество()>=99999 Тогда
					ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
					Объект.СерийныеНомера.Очистить();
				КонецЕсли;
				
				
				Если Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1["cis"])).Количество()>0 
					ИЛИ ИсключаемИзЗапроса.НайтиПоЗначению(Стр_1["cis"])<>Неопределено
					Тогда
					Продолжить;
				КонецЕсли;
				
				Добав_1=Объект.СерийныеНомера.Добавить();
				
		//		ИсключаемИзЗапроса.Добавить(Стр_1["cis"]);				
				Если Стр_1["status"]="APPLIED" Тогда
					Добав_1.КоличествоКМ_Эмитировано=1;
					//Статус_1="";
					//Если Стр_1.Свойство("goodsStatus",статус_1) И Статус_1="WAIT_SHIPMENT"
					//	Тогда
					//	Добав_1.Резерв=Добав_1 .Резерв+1;
					//	
					//КонецЕсли;
					
				ИначеЕсли Стр_1["status"]="EMITTED" Тогда
					Добав_1.КоличествоКМ_До_Эмитировано=1;
				ИначеЕсли Стр_1["status"]="INTRODUCED" Тогда
					Добав_1.КоличествоКМ_в_Обороте=1;
					Статус_1=Стр_1["goodsStatus"];
					Если Статус_1="WAIT_SHIPMENT"
						Тогда
						Добав_1.Резерв=Добав_1 .Резерв+1;
						
					КонецЕсли;
					
				ИначеЕсли Стр_1["status"]="RETIRED" Тогда
					Добав_1.КоличествоКМ_выбыло=1;
				КонецЕсли;
				//Добав_1.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
				Добав_1.GTIN=Стр_1["gtin"];
				Добав_1.НаименованиеТовара=Номенклатура;
				Добав_1.СерийныйНомер=Стр_1["sgtin"];
				Добав_1.cis=Стр_1["cis"];
				
				Иначе
					а=1;
					
					
				КонецЕсли;
				
				
				
		//КонецЕсли;
	КонецЦикла;
	
	Иначе
		
		
		

	
	
	
	
	
	КонецЕсли;
//Исключение
	
//страница=страница-1;
	
	//КонецПопытки;
			Если Страница*СколькоНаСтранице>Тотал Тогда
				ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
				Объект.СерийныеНомера.Очистить();
				
				//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан");
				
				//ЗаполнитьОстаткиИз1С_1(ИсключаемИзЗапроса);
				
				//Сообщить("Остатки загружены");
				Прервать;
			КонецЕсли;
			ПервуюПропустить=Истина;
			HTTPСервисЗапрос=Неопределено;
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			//HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/listV2?limit="+xmlstring(СколькоНаСтранице+1)+"&order=DESC&orderColumn=emd&uit="+ID+"&pageDir=NEXT");
			
			//HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/listV2?limit="+xmlstring(СколькоНаСтранице)+"&order=DESC&orderColumn=emd&uit="+ID+"&orderedColumnValue="
			//+emis+"&pageDir=NEXT");
			
			ЗапросЗаписываем="api/v4/facade/identifytools/listV2?"+
			"&limit="+Формат(СколькоНаСтранице,"ЧГ=")
			//+"&order=DESC&orderColumn=emd
			+"&uit="
			+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ID)+"&orderedColumnValue="
			+emis+"&pageDir=NEXT"+"&gtin="+СтрГТИН1;
			HTTPЗапрос=Новый HTTPЗапрос(ЗапросЗаписываем);
//emis="";
		//	HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/listV2?limit="+xmlstring(СколькоНаСтранице+1)+"&order=DESC&orderColumn=emd&orderedColumnValue="
		//	+emis+"&pageDir=NEXT");
//			HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/listV2");
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			
			
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			//HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			
		
		КонецЦикла;
	
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение    
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
						Объект.ОшибкаОтправки=Текст1;
					КонецПопытки;
					Возврат;
		//	Иначе
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	
///КонецЦикла;

Иначе
//	 Пока ДатаНач<=Объект.Дата ЦИкл
			 
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
		emis="";
			       ID="";
//		ДатаКон =КонецДня(ДатаНач);
		
		ЗапросЗаписываем="api/v4/facade/identifytools/listV2?limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&uit="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Объект.cis)+"&orderedColumnValue="
			+Объект.dataemission+"&pageDir=NEXT"+"&gtin="+СтрГТИН1;
			HTTPЗапрос=Новый HTTPЗапрос(ЗапросЗаписываем);
	ДатаНач=КонецДня(датаНач)+1;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	//HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния=200 Тогда
		Страница=0;
		Тотал=1;
		Пока Страница*СколькоНаСтранице<=Тотал Цикл
			страница=Страница+1;
			
			//ЧтениеJSON = Новый ЧтениеJSON;
			Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
				ЗапишемВРегистр(Текст1);
			КонецЕсли;
			
			
			СчетчикОбщий=СчетчикОбщий+1;
			
			ЗапишемВРегистр_Марки(Текст1,ЗапросЗаписываем,ДатаНач);
			
			//ЧтениеJSON.УстановитьСтроку(Текст1);
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Тотал=99999999999999999999999;
			Если СколькоНаСтранице>NNN.results.Количество Тогда
				Тотал=NNN.results.Количество
			КонецЕсли;
			
			emis="";
			       ID="";
			Для Каждого Стр_1 Из NNN["results"] Цикл
		//		Если ПервуюПропустить=Истина Тогда
		////			ПервуюПропустить=Ложь;
			//		Продолжить;
			//	КонецЕсли;
			
			                     uit=Стр_1["uit"];
			Если Стр_1["uit"]<>Неопределено Тогда
				
			
				emis=Стр_1["emissionDate"];
				ID=uit;
				Номенклатура=СоздатьНайтиПоGTIN_Соответствие(Стр_1);
				
				
				//Добав.КодТНВЭД=СоздатьНайтиТНВЭД(Стр_1.tnVedEaesGroup);
				
				Если Объект.СерийныеНомера.Количество()>=99999 Тогда
					ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
					Объект.СерийныеНомера.Очистить();
				КонецЕсли;
				
				
				Если Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1["cis"])).Количество()>0 
					ИЛИ ИсключаемИзЗапроса.НайтиПоЗначению(Стр_1["cis"])<>Неопределено
					Тогда
					Продолжить;
				КонецЕсли;
				
				Добав_1=Объект.СерийныеНомера.Добавить();
				
		//		ИсключаемИзЗапроса.Добавить(Стр_1["cis"]);				
				Если Стр_1["status"]="APPLIED" Тогда
					Добав_1.КоличествоКМ_Эмитировано=1;
					//Статус_1="";
					//Если Стр_1.Свойство("goodsStatus",статус_1) И Статус_1="WAIT_SHIPMENT"
					//	Тогда
					//	Добав_1.Резерв=Добав_1 .Резерв+1;
					//	
					//КонецЕсли;
					
				ИначеЕсли Стр_1["status"]="EMITTED" Тогда
					Добав_1.КоличествоКМ_До_Эмитировано=1;
				ИначеЕсли Стр_1["status"]="INTRODUCED" Тогда
					Добав_1.КоличествоКМ_в_Обороте=1;
					Статус_1=Стр_1["goodsStatus"];
					Если Статус_1="WAIT_SHIPMENT"
						Тогда
						Добав_1.Резерв=Добав_1 .Резерв+1;
						
					КонецЕсли;
					
				ИначеЕсли Стр_1["status"]="RETIRED" Тогда
					Добав_1.КоличествоКМ_выбыло=1;
				КонецЕсли;
				//Добав_1.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
				Добав_1.GTIN=Стр_1["gtin"];
				Добав_1.НаименованиеТовара=Номенклатура;
				Добав_1.СерийныйНомер=Стр_1["sgtin"];
				Добав_1.cis=Стр_1["cis"];
				
			Иначе
				
				
				emis=Стр_1["emissionDate"];
				ID=Стр_1["uitu"];
				Если Стр_1["children"].Количество()>0 Тогда
					Номенклатура=СоздатьНайтиПоGTIN_Соответствие(Стр_1["children"][0]);
				КонецЕсли;
				
				//Добав.КодТНВЭД=СоздатьНайтиТНВЭД(Стр_1.tnVedEaesGroup);
				
				Если Объект.СерийныеНомера.Количество()>=99999 Тогда
					ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
					Объект.СерийныеНомера.Очистить();
				КонецЕсли;
				
				
				Если Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1["cis"])).Количество()>0 
					ИЛИ ИсключаемИзЗапроса.НайтиПоЗначению(Стр_1["cis"])<>Неопределено
					Тогда
					Продолжить;
				КонецЕсли;
				
				Добав_1=Объект.СерийныеНомера.Добавить();
				
				//ИсключаемИзЗапроса.Добавить(Стр_1["cis"]);				
				Если Стр_1["status"]="APPLIED" Тогда
					Добав_1.КоличествоКМ_Эмитировано=1;
					//Статус_1="";
					//Если Стр_1.Свойство("goodsStatus",статус_1) И Статус_1="WAIT_SHIPMENT"
					//	Тогда
					//	Добав_1.Резерв=Добав_1 .Резерв+1;
					//	
					//КонецЕсли;
					
				ИначеЕсли Стр_1["status"]="EMITTED" Тогда
					Добав_1.КоличествоКМ_До_Эмитировано=1;
				ИначеЕсли Стр_1["status"]="INTRODUCED" Тогда
					Добав_1.КоличествоКМ_в_Обороте=1;
					Статус_1=Стр_1["goodsStatus"];
					Если Статус_1="WAIT_SHIPMENT"
						Тогда
						Добав_1.Резерв=Добав_1 .Резерв+1;
						
					КонецЕсли;
					
				ИначеЕсли Стр_1["status"]="RETIRED" Тогда
					Добав_1.КоличествоКМ_выбыло=1;
				КонецЕсли;
				//Добав_1.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
				Добав_1.GTIN=Стр_1["gtin"];
				Добав_1.НаименованиеТовара=Номенклатура;
				Добав_1.СерийныйНомер=Стр_1["sgtin"];
				Добав_1.cis=Стр_1["cis"];
				

				КонецЕсли;
				
				
				
		//КонецЕсли;
	КонецЦикла;

	
			Если Страница*СколькоНаСтранице>Тотал Тогда
				ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
				Объект.СерийныеНомера.Очистить();
				
				//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан");
				
				//ЗаполнитьОстаткиИз1С_1(ИсключаемИзЗапроса);
				
				//Сообщить("Остатки загружены");
				Прервать;
			КонецЕсли;
			ПервуюПропустить=Истина;
			HTTPСервисЗапрос=Неопределено;
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			//HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/listV2?limit="+xmlstring(СколькоНаСтранице+1)+"&order=DESC&orderColumn=emd&uit="+ID+"&pageDir=NEXT");
			
			//HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/listV2?limit="+xmlstring(СколькоНаСтранице)+"&order=DESC&orderColumn=emd&uit="+ID+"&orderedColumnValue="
			//+emis+"&pageDir=NEXT");
			ЗапросЗаписываем="api/v4/facade/identifytools/listV2?limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&uit="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ID)+"&orderedColumnValue="
			+emis+"&pageDir=NEXT"+"&gtin="+СтрГТИН1;
			HTTPЗапрос=Новый HTTPЗапрос(ЗапросЗаписываем);
//emis="";
		//	HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/listV2?limit="+xmlstring(СколькоНаСтранице+1)+"&order=DESC&orderColumn=emd&orderedColumnValue="
		//	+emis+"&pageDir=NEXT");
//			HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/listV2");
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			
			
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			//HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			
		
		КонецЦикла;
	
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение    
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
						Объект.ОшибкаОтправки=Текст1;
					КонецПопытки;
					Возврат;
		//	Иначе
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;

	
	//   КонецЦикла;
	
   КонецЕсли;
   Конеццикла;
	//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан");

   //ЗаполнитьОстаткиИз1С_1(ИсключаемИзЗапроса);
   
     
//	Сообщить("Остатки загружены");
   
КонецПроцедуры




&НаКлиенте
Процедура ЗагрузкаДанныхИзЦРПТ(Команда,УжеОтправили=Ложь)
	// Вставить содержимое обработчика.
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Thumbprint_1.НаименованиеСтенда="Табак"
		ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
		Тогда
		
		ОбновитьОстаткиПоКМТабак(Thumbprint_1);
		
		Возврат;
	КонецЕслИ;
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика"  Тогда
		
		ОбновитьОстаткиПоКМЛекарства(Thumbprint_1);
		
		Возврат;
	КонецЕслИ;
	Этаформа.Записать();
	
	ПроводимПоДругомуИСразу(Thumbprint_1);

	ЭтаФорма.Записать();
	
	
КонецПроцедуры


Процедура ЗаполнитьОстаткиИз1С_1(ИсключаемИзЗапроса)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	ИсключаемИзЗапроса=Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НомераКМ_ХамелеонЦРПТ.cis
		|ИЗ
		|	РегистрСведений.СерийныеНомера_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
		|ГДЕ
		|	НомераКМ_ХамелеонЦРПТ.ДокументКорректировки = &ДокументЗаказа";
	
	Запрос.УстановитьПараметр("ДокументЗаказа", Объект.Ссылка);
	
	ИсключаемИзЗапроса=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("cis");
	
	
	СюдаДобавить=Объект.СерийныеНомера.Выгрузить();
	СюдаДобавить.Очистить();
	СюдаДобавить.Колонки.Добавить("ДокументКорректировки");
	СюдаДобавить.Индексы.Добавить("cis");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.СерийныйНомер КАК СерийныйНомер,
		|	СУММА(ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.КоличествоОстаток) КАК Вобороте,
		|	0 КАК Эмитировано,
		|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.Продукция КАК Продукция,
		|	0 КАК Резерв,
		|	0 КАК Получены
		|ИЗ
		|	РегистрНакопления.ОстаткиКМ_в_Обороте_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И НЕ СерийныйНомер В (&cis)) КАК ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.СерийныйНомер,
		|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.Продукция
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер,
		|	0,
		|	СУММА(ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток),
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция,
		|	0,
		|	0
		|ИЗ
		|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И НЕ СерийныйНомер В (&cis)) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер,
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Резервы_ХамелеонЦРПТОстатки.СерийныйНомер,
		|	0,
		|	0,
		|	ЗНАЧЕНИЕ(Справочник.Продукция_ХамелеонЦРПТ.ПустаяСсылка),
		|	СУММА(Резервы_ХамелеонЦРПТОстатки.КоличествоОстаток),
		|	0
		|ИЗ
		|	РегистрНакопления.Резервы_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И НЕ СерийныйНомер В (&cis)) КАК Резервы_ХамелеонЦРПТОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Резервы_ХамелеонЦРПТОстатки.СерийныйНомер
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.СерийныйНомер,
		|	0,
		|	0,
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.Продукция,
		|	0,
		|	СУММА(ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.КоличествоОстаток)
		|ИЗ
		|	РегистрНакопления.ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И НЕ СерийныйНомер В (&cis)) КАК ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.СерийныйНомер,
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.Продукция
		|ИТОГИ
		|	СУММА(Вобороте),
		|	СУММА(Эмитировано),
		|	СУММА(Резерв),
		|	СУММА(Получены)
		|ПО
		|	Продукция,
		|	СерийныйНомер";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("cis", ИсключаемИзЗапроса);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПродукция = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПродукция.Следующий() Цикл
		// Вставить обработку выборки ВыборкаПродукция
	
		ВыборкаСерийныйНомер = ВыборкаПродукция.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ВыборкаСерийныйНомер.Следующий() Цикл
			//Если ИсключаемИзЗапроса.НайтиПоЗначению(ВыборкаСерийныйНомер.СерийныйНомер)=Неопределено Тогда
				// Вставить обработку выборки ВыборкаСерийныйНомер
				Добав_1=СюдаДобавить.Найти(ВыборкаСерийныйНомер.СерийныйНомер,"cis");
				Если   Добав_1=Неопределено Тогда
						//ИсключаемИзЗапроса.Добавить(ВыборкаСерийныйНомер.СерийныйНомер);
						Добав_1=СюдаДобавить.Добавить();
				Конецесли;
				
				//Если Не ЗначениеЗаполнено(Добав_1.НаименованиеТовара) Тогда
					Добав_1.GTIN=дополнитьСтроку(xmlString(ВыборкаСерийныйНомер.Продукция.gtin));
					Добав_1.НаименованиеТовара=ВыборкаСерийныйНомер.Продукция;
				//КонецЕсли;
					Добав_1.cis=ВыборкаСерийныйНомер.СерийныйНомер;
				Добав_1.ДокументКорректировки=Объект.Ссылка;
					Добав_1.КоличествоКМ_ЭмитированоПрограммно=Добав_1.КоличествоКМ_ЭмитированоПрограммно+ВыборкаСерийныйНомер.Эмитировано;
					Добав_1.КоличествоКМ_в_ОборотеПрограммно=Добав_1.КоличествоКМ_в_ОборотеПрограммно+ВыборкаСерийныйНомер.Вобороте;
					Добав_1.Резерв=Добав_1.Резерв+ВыборкаСерийныйНомер.Резерв;  
					Добав_1.КоличествоКМ_До_ЭмитированоПрограммно=Добав_1.КоличествоКМ_До_ЭмитированоПрограммно+ВыборкаСерийныйНомер.Получены
			//КонецЕсли;

		КонецЦикла;
	КонецЦикла;
	
	//СюдаДобавить.Свернуть("cis,");
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Если СюдаДобавить.Количество()>0 ТОгда
		РегДв=РегистрыСведений.СерийныеНомера_ХамелеонЦРПТ.СоздатьНаборЗаписей();
		РегДв.Загрузить(СюдаДобавить);
		РегДв.Записать(Ложь);
	Конецесли;
	
 	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СерийныеНомера_ХамелеонЦРПТ.GTIN,
		|	СУММА(СерийныеНомера_ХамелеонЦРПТ.КоличествоКМ_Эмитировано) КАК КоличествоКМ_Эмитировано,
		|	СУММА(СерийныеНомера_ХамелеонЦРПТ.КоличествоКМ_в_Обороте) КАК КоличествоКМ_в_Обороте,
		|	СУММА(СерийныеНомера_ХамелеонЦРПТ.КоличествоКМ_выбыло) КАК КоличествоКМ_выбыло,
		|	СУММА(СерийныеНомера_ХамелеонЦРПТ.КоличествоКМ_ЭмитированоПрограммно) КАК КоличествоКМ_ЭмитированоПрограммно,
		|	СУММА(СерийныеНомера_ХамелеонЦРПТ.КоличествоКМ_в_ОборотеПрограммно) КАК КоличествоКМ_в_ОборотеПрограммно,
		|	СУММА(СерийныеНомера_ХамелеонЦРПТ.КоличествоКМ_выбылоПрограммно) КАК КоличествоКМ_выбылоПрограммно,
		|	СУММА(СерийныеНомера_ХамелеонЦРПТ.Резерв) КАК Резерв,
		|	СУММА(СерийныеНомера_ХамелеонЦРПТ.Резерв1С) КАК Резерв1С
		|ИЗ
		|	РегистрСведений.СерийныеНомера_ХамелеонЦРПТ КАК СерийныеНомера_ХамелеонЦРПТ
		|ГДЕ
		|	СерийныеНомера_ХамелеонЦРПТ.ДокументКорректировки = &ДокументКорректировки
		|
		|СГРУППИРОВАТЬ ПО
		|	СерийныеНомера_ХамелеонЦРПТ.GTIN";
	
	Запрос.УстановитьПараметр("ДокументКорректировки", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Объект.Товары.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Добав=объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Добав,ВыборкаДетальныеЗаписи);
		Попытка
			Добав.GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(ВыборкаДетальныеЗаписи.Gtin));
		Исключение
		КонецПопытки;
		Добав.КодТНВЭД=Добав.GTIN.КодТНВЭД;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

   
	

КонецПроцедуры


&НаСервереБезКонтекста
Функция дополнитьСтроку(Ср)
	ВОзврат Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Ср,14,"0");
	
Конецфункции


&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если Поле.Имя="ТоварыКоличествоКМ_Эмитировано" Тогда
		
		Если Элементы.Товары.ТекущиеДанные<>Неопределено Тогда
			
			КодЕг=Элементы.Товары.ТекущиеДанные.gtin;
			
			ААА=Новый ФиксированнаяСтруктура(Новый Структура("НаименованиеТовара",Кодег));
			Элементы.СерийныеНомера.ОтборСтрок=ААА;
		Иначе
			Элементы.СерийныеНомера.ОтборСтрок=Неопределено;

		КонецЕсли;
		Элементы.Страницы.ТекущаяСтраница=Элементы.ГруппаСерийныеНомера;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	// Вставить содержимое обработчика.
	Если ТекущаяСтраница=Элементы.ГруппаТовары Тогда
//			Элементы.СерийныеНомера.ОтборСтрок=Неопределено;
		КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОставитьРасхождения(Команда) Экспорт
	// Вставить содержимое обработчика.
	УдаляемСерийники=Новый Массив;
	УдаляемТоварыНулевые=Новый Массив;
	Для Каждого Стр_1 Из ОБъект.СерийныеНомера Цикл
		Если Стр_1.КоличествоКМ_ЭмитированоПрограммно=Стр_1.КоличествоКМ_Эмитировано
			И  Стр_1.КоличествоКМ_в_ОборотеПрограммно=Стр_1.КоличествоКМ_в_Обороте Тогда
			УдаляемСерийники.Добавить(Стр_1);
		КонецЕслИ;
		
	КонецЦикла;
	Для Каждого Стр Из УдаляемСерийники Цикл
		СтрТ=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		СтрТ[0].КоличествоКМ_Эмитировано=СтрТ[0].КоличествоКМ_Эмитировано-Стр.КоличествоКМ_Эмитировано;
		СтрТ[0].КоличествоКМ_ЭмитированоПрограммно=СтрТ[0].КоличествоКМ_ЭмитированоПрограммно-Стр.КоличествоКМ_Эмитировано;
		СтрТ[0].КоличествоКМ_в_Обороте=СтрТ[0].КоличествоКМ_в_Обороте-Стр.КоличествоКМ_в_Обороте;
		СтрТ[0].КоличествоКМ_в_ОборотеПрограммно=СтрТ[0].КоличествоКМ_в_ОборотеПрограммно-Стр.КоличествоКМ_в_Обороте;
		Объект.СерийныеНомера.Удалить(Стр);
	КонецЦикла;
	Для Каждого Стр Из Объект.Товары Цикл
		Если Стр.КоличествоКМ_ЭмитированоПрограммно=Стр.КоличествоКМ_Эмитировано
			И  Стр.КоличествоКМ_в_ОборотеПрограммно=Стр.КоличествоКМ_в_Обороте Тогда
			УдаляемТоварыНулевые.Добавить(Стр);
		КонецЕслИ;
		
		
	КонецциклА;
	Для Каждого Стр Из УдаляемТоварыНулевые Цикл
		Объект.Товары.Удалить(Стр);
	КонецциклА;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьПараметр();
	// Вставить содержимое обработчика.
	ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	Орг=Неопределено;
	Параметры.Свойство("Организация",Орг);
	Если ЗначениеЗаполнено(Орг) Тогда
		Объект.Организация=Орг;
	КонецЕсли;
	Поль=Неопределено;
	Параметры.Свойство("Пользовтаель",Поль);
	Если ЗначениеЗаполнено(Поль) Тогда
		Объект.ТекущийПользователь=Поль;
	КонецЕсли;
	СколькоНаСтранице=10000;
	ЗаполнитьСправочникВнешний("Документ.АвтоКорректировкаОстатков_ХамелеонЦРПТ","",Элементы.ГруппаКнопокВнешняя,"Подключаемый_ВыполнитьКомандуВнешняя_ЗаказМарокОсновная");
	МодульПриСозданииДокументов_ХамелеонЦРПТ.АвтоКорректировкаОстатков_ХамелеонЦРПТ_ПриСозданииНаСервере(ЭтаФорма,Отказ,СтандартнаяОбработка);
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьВнешниеОбработки(Команда)
	// Вставить содержимое обработчика.
		// Вставить содержимое обработчика.
		ОткрытьФорму("Справочник.ВнешниеОбработки_ХамелеонЦРПТ.Форма.ФормаСписка",
		Новый структура("Тип",
			"Документ.АвтоКорректировкаОстатков_ХамелеонЦРПТ"));

КонецПроцедуры

Функция ВернутьИмяФайла(Команда)
//	Если РегистрыСведений.НастройкиПрограммыЦРПТ.Получить().ЗагружатьВнешниеОбработкиИзХранилища Тогда
		Возврат Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоКоду(Сред(Команда,8)).Хранилище.Получить();
//	Иначе
//		СпрВн=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоКоду(Сред(Команда,8));
//	Конецесли;
	
//	Возврат СпрВн.ИмяВнешнейОБработки
	//НаимСправочника=Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя();
	//Спр=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоНаименованию(НаимСправочника,Истина);
	//Если Спр<>Справочники.ВнешниеОбработки_ХамелеонЦРПТ.ПустаяСсылка() Тогда
	//	Возврат Спр.ИмяВнешнейОБработки;
	//Конецесли;
	
КонецФункции

Функция ПолучитьИмяВнешней(ИмяФайла)
    АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ИмяФайла);
    ИмяОбр = ВнешниеОбработки.Подключить(АдресВоВременномХранилище,,Ложь);
    Возврат ИмяОбр;
КонецФункции



Процедура   ЗаполнитьСправочникВнешний(ИмяСпрД,Доп,ГруппаКнопокВнешняя,ИмяДейстия)
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнешниеОбработки_ХамелеонЦРПТ.ИмяВнешнейОБработки,
		|	ВнешниеОбработки_ХамелеонЦРПТ.НаименованиеКнопки,
		|	ВнешниеОбработки_ХамелеонЦРПТ.Код
		|ИЗ
		|	Справочник.ВнешниеОбработки_ХамелеонЦРПТ КАК ВнешниеОбработки_ХамелеонЦРПТ
		|ГДЕ
		|	ВнешниеОбработки_ХамелеонЦРПТ.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", ИмяСпрД); //"Документ.ВетеринарныеСправки_ХамелеонЦРПТ");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ИмяКоманды="Команда"+ВыборкаДетальныеЗаписи.Код;
		Попытка
		КомандаФормы = Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = ИмяДейстия;
		КомандаФормы.Заголовок = ВыборкаДетальныеЗаписи.ИмяВнешнейОБработки;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.Текст;
		
		//ОписаниеКомандыПечати.ИмяКомандыНаФорме = ИмяКоманды;
		
		НовыйЭлемент = Элементы.Добавить("ГруппаКнопокВнешняя"+Доп+ ИмяКоманды, Тип("КнопкаФормы"), ГруппаКнопокВнешняя);
		НовыйЭлемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		НовыйЭлемент.Заголовок=ВыборкаДетальныеЗаписи.НаименованиеКнопки;
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	Исключение
		КонецПопытки;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуВнешняя_ЗаказМарокОсновная(Команда)
	
//	// Вставить содержимое обработчика.	// Вставить содержимое обработчика.
		Ссылка=Объект.Ссылка;
		Попытка
			ВернДв=ВернутьИмяФайла(Команда.Имя);
			Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
				ДвоичныеДанные=ВернДв;
			Иначе
				ДвоичныеДанные=Новый ДвоичныеДанные(ВернДв);
			Конецесли;
			ОбработкаИмя=ПолучитьИмяВнешней(Двоичныеданные);
			ОткрытьФорму("ВнешняяОбработка."+ОбработкаИмя+".Форма",Новый Структура("Ссылка",Ссылка),ЭтаФорма);
		Исключение
			Попытка
#Если ТолстыйКлиентОбычноеПриложение  Тогда
		ВернДв=ВернутьИмяФайла(Команда.Имя);
		Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
			//ДвоичныеДанные=ВернДв;
			ДвоичныеДанные=ПолучитьИмяВременногоФайла();
			ВернДв.Записать(ДвоичныеДанные);
			
		Иначе
			ДвоичныеДанные=ВернДв;
		Конецесли;
				ВернутьВн(ДвоичныеДанные);
				Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
					УдалитьФайлы(ДвоичныеДанные);
				КонецЕсли;
#Иначе
				
			ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
#КонецЕсли
			Исключение
				ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
			КонецПопытки;
		КонецПопытки;
	//КонецЕсли;
КонецПроцедуры


#Если ТолстыйКлиентОбычноеПриложение  Тогда
&НаКлиенте
Процедура ВернутьВн(ДвоичныеДанные)
	//ИмяВременФ=ПолучитьИмяВременногоФайла();
	//ДвоичныеДанные.Записать(ИмяВременФ);
	ВнешняяОбработка=ВнешниеОбработки.Создать(ДвоичныеДанные);
	Фоорма=ВнешняяОбработка.ПолучитьФорму(,ЭтаФорма);
	Попытка
		Фоорма.УФ=ЭтаФорма;
	Исключение
	КонецПопытки;
	Фоорма.Открыть();
Конецпроцедуры      	
#КонецЕсли


&НаСервере
Процедура СчитатьОтветНаСервере()
	// Вставить содержимое обработчика.
	Хр=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.Получить(Новый Структура("Документ,Вид",Объект.Ссылка,"Получили ответ")).Файл;
	Если Хр<>Неопределено тогда
		ОтветОтЦРПТ=Хр.Получить();
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура СчитатьОтвет(Команда)
	СчитатьОтветНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Вставить содержимое обработчика.

				Если Не значениеЗАполнено(НачальНаяДата) Тогда
					НачальНаяДата=Дата(2019,6,1);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ШагВсекундах) Тогда
	ШагВсекундах=60*60*24;
	КонецЕсли;			
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// Вставить содержимое обработчика.	
	УстановитьПараметр()	
КонецПроцедуры

&НаКлиенте
Процедура Команда1(Команда)
	// Вставить содержимое обработчика.
	СчитатьОтветы();
КонецПроцедуры

Процедура СчитатьОтветы()
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтправленныеПолученные_ХамелеонЦРПТ.Файл,
		|	ОтправленныеПолученные_ХамелеонЦРПТ.Запрос
		|ИЗ
		|	РегистрСведений.ОтветыКорректировок_ХамелеонЦРПТ КАК ОтправленныеПолученные_ХамелеонЦРПТ
		|ГДЕ
		|	ОтправленныеПолученные_ХамелеонЦРПТ.Документ = &Документ";
	
	Запрос.УстановитьПараметр("Вид", "Получили корректировку%");
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СчитатьВсеОтвет.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Хр=ВыборкаДетальныеЗаписи.Файл;
		Если Хр<>Неопределено тогда
			Добав=СчитатьВсеОтвет.Добавить();
			Добав.Запрос=ВыборкаДетальныеЗаписи.Запрос;
			Добав.Файл=Хр.Получить();
		Конецесли;
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиМаркировки(Команда)
	// Вставить содержимое обработчика.
	Объект.ТипОстаткаПоследний=ПредопределенноеЗначение("Перечисление.СпособВыпускаТоваров_ХамелеонЦРПТ.МаркировкаОстатков");
	ОБъект.cis="";
	Объект.dataemission="";
	
	
	Этаформа.Записать();
	
	Thumbprint_1=ПолучитьИзПользователя();	
	ОстаткиЗагрузить(Thumbprint_1,"REMAINS","LP_INTRODUCE_OST");
	

КонецПроцедуры



&НаКлиенте
Процедура ЗакачатьКМПроизводствоРФ(Команда)
	// Вставить содержимое обработчика.
	
	Thumbprint_1=ПолучитьИзПользователя();	
	
	Если Thumbprint_1.НаименованиеСтенда="Табак"
		ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
		Тогда
		
		ОбновитьОстаткиПоКМТабак(Thumbprint_1);
		
		Возврат;
	КонецЕслИ;
	
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика"  Тогда
		
		ОбновитьОстаткиПоКМЛекарства(Thumbprint_1);
		
		Возврат;
	КонецЕслИ;
	
	
	
	Объект.ТипОстаткаПоследний=ПредопределенноеЗначение("Перечисление.СпособВыпускаТоваров_ХамелеонЦРПТ.ПроизведенВРФ");
	ОБъект.cis="";
	Объект.dataemission="";
				
	
	Этаформа.Записать();
	
	
	ОстаткиОбороты(Thumbprint_1,,,"APPLIED");
	//ОстаткиЗагрузить(Thumbprint_1,"LOCAL","LP_INTRODUCE_GOODS");
	


	
КонецПроцедуры



&НаКлиенте
Процедура ОстаткиКМНеРФ(Команда)
	// Вставить содержимое обработчика.
	
	// Вставить содержимое обработчика.
	
	Объект.ТипОстаткаПоследний=ПредопределенноеЗначение("Перечисление.СпособВыпускаТоваров_ХамелеонЦРПТ.ВвезенВРФ");
	ОБъект.cis="";
	Объект.dataemission="";
				
	Этаформа.Записать();
	
	Thumbprint_1=ПолучитьИзПользователя();	
	ОстаткиЗагрузить(Thumbprint_1,"FOREIGN","LP_GOODS_IMPORT");
	


КонецПроцедуры



&НаКлиенте
Процедура ОстаткиЗагрузить(Thumbprint_1,Какие,ТипКакие,ПРодолжим=Ложь,УжеОтправили=Ложь)
	Если Объект.Статус=Предопределенноезначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан") Тогда
		Возврат;
	КонецЕсли;
	Страница=1;
	
	
	СчетчикОбщий=0;
	//УдаялемСРегистра();
	
	ОБъект.Статус=Предопределенноезначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВПроцессе");
	ЭтаФорма.Записать();
	ИсключаемИзЗапроса=Новый СписокЗначений;
	
//	СРегистра=Thumbprint_1.ТокенПоОтпечатку;

СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Возврат;
		КонецЕсли;
	

	
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;

			
			что=Thumbprint_1.что;

		
//	HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/count?cisStatus=APPLIED&emissionType="+Какие+"&pg="+что);
	HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/count?cisStatus=APPLIED&pg="+что);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	//HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
		Если 
Ответ.КодСостояния=401
		ИЛИ Ответ.КодСостояния=502  
		Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Сообщить("Не удалос подключиться к ЦРПТ");
				Возврат;
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				Thumbprint_1=ПолучитьИзПользователя();	
				ОстаткиЗагрузить(Thumbprint_1,Какие,ТипКакие,ПРодолжим,Истина);
				Возврат;
			КонецЕсли
		КонецЕсли;	
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
 	Тотал_ВСЕГО=NNN.count;
	
	
	//Если Тотал_ВСЕГО=0 Тогда
		//Сообщить("Данных для загрузок нет");
		//Возврат;
//	КонецЕсли;
	ИтогоСделаноПоЗ=0;

	
	
	Объект.Товары.Очистить();
	Объект.Статус=Неопределено;
	Объект.ОшибкаОтправки="";
											
	///СколькоНаСтранице=100;			
		Если   ПРодолжим=Истина Тогда
			ID=Объект.cis;
			emis=Объект.dataemission;
			Страница=Объект.Страница;
			
			
			
			ЗапросЗаписываем="api/v4/facade/identifytools/listV2?"+
			"limit="+Формат(СколькоНаСтранице,"ЧГ=")+
			"&cisStatus=APPLIED&order=ASC&orderColumn=type&uit="+
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ID)+"&pageDir=NEXT&pg="+Что;
			///emis+"&page"+xmlString(Страница)+"&cisStatus=APPLIED&emissionType="+Какие+"&docType="+ТипКакие;

			
			//"&pageDir=NEXT&orderColumn=emd&uit="+
			//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ID)+"&orderedColumnValue="+
			///emis+"&page"+xmlString(Страница)+"&cisStatus=APPLIED&emissionType="+Какие+"&docType="+ТипКакие;
			
			
			///ПО ДОКУМЕНТУ!!!
			
			//ЗапросЗаписываем="api/v4/facade/identifytools/listV2?"+
			//"pg="+что+"&limit="+Формат(СколькоНаСтранице,"ЧГ=")+
			//"&pageDir=NEXT&orderColumn=emd&uit="+
			//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ID)+"&orderedColumnValue="+
			///emis+"&page"+xmlString(Страница)+"&cisStatus=APPLIED&emissionType="+Какие+"&docType="+ТипКакие;
			
			
			
			//"&cisStatus=APPLIED&emissionType="+Какие+"&order=DESC&orderColumn=emd&uit="+
			//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ID)+"&orderedColumnValue="+emis+
			//"&pageDir=NEXT&pg="+Что;
			
			//
			//"emissionDateFrom="+Формат(ДатаЗапоминть,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z"+
			//"&emissionDateTo="+Формат(ДатаКон,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z"+
			//"&limit="+Формат(СколькоНаСтранице,"ЧГ=")
			////+"&order=DESC&orderColumn=emd
			//+"&uit="
			//+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ID)+"&orderedColumnValue="
			//+emis+"&pageDir=NEXT";
			HTTPЗапрос=Новый HTTPЗапрос(ЗапросЗаписываем);

		Иначе
			ID="";
			emis="";
			
			
			
	HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/listV2?"+
	"limit="+Формат(СколькоНаСтранице,"ЧГ=")+
	"&cisStatus=APPLIED&order=ASC&orderColumn=type&pg="+Что);//+Какие+"&docType="+ТипКакие);//+"&order=DESC&orderColumn=emd&pg="+что);
			
			////ИЗ ДОКУМЕНТА!!
	//HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/listV2?"+
	//"pg"+что+"&limit="+Формат(СколькоНаСтранице,"ЧГ=")+
	//"&cisStatus=APPLIED&emissionType="+Какие+"&docType="+ТипКакие);//+"&order=DESC&orderColumn=emd&pg="+что);
КонецЕсли;	
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	//HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Попытка
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
Исключение
	Сообщить("не удалось выполнить первый запрос");
	Возврат;
	КонецПопытки;
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
		//	emis="";
		//	       ID="";
		
//Тотал_ВСЕГО=99999999999999999999999999999;	
	
	Если Ответ.КодСостояния=200 Тогда
		//Страница=0;
		Пока Истина ИЛИ Страница*СколькоНаСтранице<=Тотал_ВСЕГО Цикл
			
				
				Если Объект.СерийныеНомера.Количество()>=500 Тогда
					ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
					Объект.СерийныеНомера.Очистить();
					
					Объект.cis=ID;
					Объект.dataemission=emis;
					Объект.Страница=Страница;
					ЭтаФорма.Записать();
					
					ОбработкаПрерыванияПользователя();
								
				КонецЕсли;
				
		//		Попытка
			
			//ЧтениеJSON = Новый ЧтениеJSON;
			Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
				ЗапишемВРегистр(Текст1);
			КонецЕсли;
		
			СчетчикОбщий=СчетчикОбщий+1;
			
			//ЗапишемВРегистр_Марки(Текст1,ЗапросЗаписываем,ДатаНач);
			
			//ЧтениеJSON.УстановитьСтроку(Текст1);
			
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Если NNN=Неопределено Тогда
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);
				Если NNN["results"].Количество()=0 Тогда
					
					
					
						ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
						Объект.СерийныеНомера.Очистить();
						
						Объект.cis=ID;
						Объект.dataemission=emis;
						Объект.Страница=Страница;
						
						ЭтаФорма.Записать();

						Если УжеОтправили=Истина Тогда
							Сообщить("Не удалось получить номера КМ");
							Возврат;
						Иначе
							ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
							Thumbprint_1=ПолучитьИзПользователя();	
							ОстаткиЗагрузить(Thumbprint_1,Какие,ТипКакие,Истина,Истина);
							Возврат;
						КонецЕсли;
					

					
				КонецЕсли;
			
			
				ИтогоСделаноПоЗ=ИтогоСделаноПоЗ+NNN["results"].Количество();

				
			Иначе
				Если NNN.results.Количество()=0 Тогда
					
					
					
						ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
						Объект.СерийныеНомера.Очистить();
						
						Объект.cis=ID;
						Объект.dataemission=emis;
						Объект.Страница=Страница;
						ЭтаФорма.Записать();

						Если УжеОтправили=Истина Тогда
							Сообщить("Не удалось получить номера КМ");
							Возврат;
						Иначе
							ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
							Thumbprint_1=ПолучитьИзПользователя();	
							ОстаткиЗагрузить(Thumbprint_1,Какие,ТипКакие,Истина,Истина);
							Возврат;
						КонецЕсли;
					

					
				КонецЕсли;
			
			
				ИтогоСделаноПоЗ=ИтогоСделаноПоЗ+NNN.results.Количество();
			КонецЕсли;
			Попытка
	 Состояние("Обрабатывается: "+Строка(ИтогоСделаноПоЗ)+" из "+Строка(Тотал_ВСЕГО),ИтогоСделаноПоЗ*100/Тотал_ВСЕГО);
 Исключение
	      
		  
	 
 КонецПопытки;
 
 Если ТипЗнч(NNN)=Тип("Структура") Тогда
	
			Для Каждого Стр_1 Из NNN.results Цикл
		//		Если ПервуюПропустить=Истина Тогда
		////			ПервуюПропустить=Ложь;
			//		Продолжить;
			//	КонецЕсли;
			
			                     uit="";
			Если Стр_1.Свойство("uit",uit) Тогда
				
			
				emis=Стр_1.emissionDate;
				ID=Стр_1.uit;
				Номенклатура=СоздатьНайтиПоGTIN(Стр_1);
				
				
				//Добав.КодТНВЭД=СоздатьНайтиТНВЭД(Стр_1.tnVedEaesGroup);
				
				
				
				//Если Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1.cis)).Количество()>0 
				//	ИЛИ ИсключаемИзЗапроса.НайтиПоЗначению(Стр_1.cis)<>Неопределено
				//	Тогда
				//	Продолжить;
				//КонецЕсли;
				
				Добав_1=Объект.СерийныеНомера.Добавить();
				
				//ИсключаемИзЗапроса.Добавить(Стр_1.cis);				
				Если Стр_1.status="APPLIED" Тогда
					Добав_1.КоличествоКМ_Эмитировано=1;
					//Статус_1="";
					//Если Стр_1.Свойство("goodsStatus",статус_1) И Статус_1="WAIT_SHIPMENT"
					//	Тогда
					//	Добав_1.Резерв=Добав_1 .Резерв+1;
					//	
					//КонецЕсли;
					
				ИначеЕсли Стр_1.status="EMITTED" Тогда
					Добав_1.КоличествоКМ_До_Эмитировано=1;
				ИначеЕсли Стр_1.status="INTRODUCED" Тогда
					Добав_1.КоличествоКМ_в_Обороте=1;
					Статус_1="";
					Если Стр_1.Свойство("goodsStatus",статус_1) И Статус_1="WAIT_SHIPMENT"
						Тогда
						Добав_1.Резерв=Добав_1 .Резерв+1;
						
					КонецЕсли;
					
				ИначеЕсли Стр_1.status="RETIRED" Тогда
					Добав_1.КоличествоКМ_выбыло=1;
				КонецЕсли;
				//Добав_1.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
				Добав_1.GTIN=Стр_1.gtin;
				Добав_1.НаименованиеТовара=Номенклатура;
				Добав_1.СерийныйНомер=Стр_1.sgtin;
				Добав_1.cis=Стр_1.cis;
				
				lastDocId="";
				Если Стр_1.Свойство("lastDocId",lastDocId) Тогда
					Добав_1.ID_строки_партии=СоздатьНайтиИДСТРОКИ(lastDocId);
				КонецЕсли;	
			Иначе
				
				
				emis=Стр_1.emissionDate;
				ID=Стр_1.uitu;
				Если Стр_1.children.Количество()>0 Тогда
					Номенклатура=СоздатьНайтиПоGTIN(Стр_1.children[0]);
				КонецЕсли;
				
				//Добав.КодТНВЭД=СоздатьНайтиТНВЭД(Стр_1.tnVedEaesGroup);
				
				//Если Объект.СерийныеНомера.Количество()>=500 Тогда
				//	ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
				//	Объект.СерийныеНомера.Очистить();
				//	
				//	Объект.cis=emis;
				//	Объект.dataemission=ID;
				//	ЭтаФорма.Записать();
				//	ОбработкаПрерыванияПользователя();
				//				
				//КонецЕсли;
				//
				
				//Если Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1.cis)).Количество()>0 
				//	ИЛИ ИсключаемИзЗапроса.НайтиПоЗначению(Стр_1.cis)<>Неопределено
				//	Тогда
				//	Продолжить;
				//КонецЕсли;
				
				Добав_1=Объект.СерийныеНомера.Добавить();
				
				//ИсключаемИзЗапроса.Добавить(Стр_1.cis);				
				Если Стр_1.status="APPLIED" Тогда
					Добав_1.КоличествоКМ_Эмитировано=1;
					//Статус_1="";
					//Если Стр_1.Свойство("goodsStatus",статус_1) И Статус_1="WAIT_SHIPMENT"
					//	Тогда
					//	Добав_1.Резерв=Добав_1 .Резерв+1;
						
					//КонецЕсли;
					
				ИначеЕсли Стр_1.status="EMITTED" Тогда
					Добав_1.КоличествоКМ_До_Эмитировано=1;
				ИначеЕсли Стр_1.status="INTRODUCED" Тогда
					Добав_1.КоличествоКМ_в_Обороте=1;
					Статус_1="";
					Если Стр_1.Свойство("goodsStatus",статус_1) И Статус_1="WAIT_SHIPMENT"
						Тогда
						Добав_1.Резерв=Добав_1 .Резерв+1;
						
					КонецЕсли;
					
				ИначеЕсли Стр_1.status="RETIRED" Тогда
					Добав_1.КоличествоКМ_выбыло=1;
				КонецЕсли;
				//Добав_1.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
				Если Стр_1.children.Количество()>0 Тогда
					
					Стр_2=Стр_1.children[0];	
						
					Добав_1.GTIN=Стр_2.gtin;
					//Добав_1.СерийныйНомер=Стр_1.sgtin;
				КонецЕсли;
					Добав_1.НаименованиеТовара=Номенклатура;
					Добав_1.cis=Стр_1.cis;
					
					lastDocId="";
					Если Стр_1.Свойство("lastDocId",lastDocId) Тогда
						Добав_1.ID_строки_партии=СоздатьНайтиИДСТРОКИ(lastDocId);
					КонецЕсли;	
				КонецЕсли;
				
				
				
		//КонецЕсли;
	КонецЦикла;
Иначе
	
	
	
	
	
	Для Каждого Стр_1 Из NNN["results"] Цикл
		//		Если ПервуюПропустить=Истина Тогда
		////			ПервуюПропустить=Ложь;
			//		Продолжить;
			//	КонецЕсли;
			      
			
			                     uit=Стр_1["uit"];
								 Если //Стр_1.Свойство("uit",uit) 
									 uit<>Неопределено Тогда
				
			
				emis=Стр_1["emissionDate"];
				ID=Стр_1["uit"];
				
				Номенклатура=СоздатьНайтиПоGTIN_Соответствие(Стр_1);
				
				
				//Добав.КодТНВЭД=СоздатьНайтиТНВЭД(Стр_1.tnVedEaesGroup);
				
				
				
				//Если Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1.cis)).Количество()>0 
				//	ИЛИ ИсключаемИзЗапроса.НайтиПоЗначению(Стр_1.cis)<>Неопределено
				//	Тогда
				//	Продолжить;
				//КонецЕсли;
				
				Добав_1=Объект.СерийныеНомера.Добавить();
				
				//ИсключаемИзЗапроса.Добавить(Стр_1.cis);				
				Если Стр_1["status"]="APPLIED" Тогда
					Добав_1.КоличествоКМ_Эмитировано=1;
					//Статус_1="";
					//Если Стр_1.Свойство("goodsStatus",статус_1) И Статус_1="WAIT_SHIPMENT"
					//	Тогда
					//	Добав_1.Резерв=Добав_1 .Резерв+1;
					//	
					//КонецЕсли;
					
				ИначеЕсли Стр_1["status"]="EMITTED" Тогда
					Добав_1.КоличествоКМ_До_Эмитировано=1;
				ИначеЕсли Стр_1["status"]="INTRODUCED" Тогда
					Добав_1.КоличествоКМ_в_Обороте=1;
					Статус_1="";
					Если Стр_1.Свойство("goodsStatus",статус_1) И Статус_1="WAIT_SHIPMENT"
						Тогда
						Добав_1.Резерв=Добав_1 .Резерв+1;
						
					КонецЕсли;
					
				ИначеЕсли Стр_1["status"]="RETIRED" Тогда
					Добав_1.КоличествоКМ_выбыло=1;
				КонецЕсли;
				//Добав_1.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
				Добав_1.GTIN=Стр_1["gtin"];
				Добав_1.НаименованиеТовара=Номенклатура;
				Добав_1.СерийныйНомер=Стр_1["sgtin"];
				Добав_1.cis=Стр_1["cis"];
				
				lastDocId=Стр_1["lastDocId"];
				Если lastDocId<>Неопределено Тогда
					Добав_1.ID_строки_партии=СоздатьНайтиИДСТРОКИ(lastDocId);
				КонецЕсли;	
			Иначе
				
				
				emis=Стр_1["emissionDate"];
				ID=Стр_1["uitu"];
				Если Стр_1["children"].Количество()>0 Тогда
					Номенклатура=СоздатьНайтиПоGTIN_Соответствие(Стр_1["children"][0]);
				КонецЕсли;
				
				//Добав.КодТНВЭД=СоздатьНайтиТНВЭД(Стр_1.tnVedEaesGroup);
				
				//Если Объект.СерийныеНомера.Количество()>=500 Тогда
				//	ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
				//	Объект.СерийныеНомера.Очистить();
				//	
				//	Объект.cis=emis;
				//	Объект.dataemission=ID;
				//	ЭтаФорма.Записать();
				//	ОбработкаПрерыванияПользователя();
				//				
				//КонецЕсли;
				//
				
				//Если Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1.cis)).Количество()>0 
				//	ИЛИ ИсключаемИзЗапроса.НайтиПоЗначению(Стр_1.cis)<>Неопределено
				//	Тогда
				//	Продолжить;
				//КонецЕсли;
				
				Добав_1=Объект.СерийныеНомера.Добавить();
				
				//ИсключаемИзЗапроса.Добавить(Стр_1.cis);				
				Если Стр_1["status"]="APPLIED" Тогда
					Добав_1.КоличествоКМ_Эмитировано=1;
					//Статус_1="";
					//Если Стр_1.Свойство("goodsStatus",статус_1) И Статус_1="WAIT_SHIPMENT"
					//	Тогда
					//	Добав_1.Резерв=Добав_1 .Резерв+1;
						
					//КонецЕсли;
					
				ИначеЕсли Стр_1["status"]="EMITTED" Тогда
					Добав_1.КоличествоКМ_До_Эмитировано=1;
				ИначеЕсли Стр_1["status"]="INTRODUCED" Тогда
					Добав_1.КоличествоКМ_в_Обороте=1;
					Статус_1=Стр_1["goodsStatus"];
					Если Статус_1="WAIT_SHIPMENT"
						Тогда
						Добав_1.Резерв=Добав_1 .Резерв+1;
						
					КонецЕсли;
					
				ИначеЕсли Стр_1["status"]="RETIRED" Тогда
					Добав_1.КоличествоКМ_выбыло=1;
				КонецЕсли;
				//Добав_1.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
				///Если Стр_1.children.Количество()>0 Тогда
					
					//Стр_2=Стр_1.children[0];	
						
					//Добав_1.GTIN=Стр_2.gtin;
					//Добав_1.СерийныйНомер=Стр_1.sgtin;
				//КонецЕсли;
					Добав_1.НаименованиеТовара=Номенклатура;
					Добав_1.cis=Стр_1["cis"];
					
					lastDocId=Стр_1["lastDocId"];
					Если lastDocId<>Неопределено Тогда
						Добав_1.ID_строки_партии=СоздатьНайтиИДСТРОКИ(lastDocId);
					КонецЕсли;	
				КонецЕсли;
				
				
				
		//КонецЕсли;
	КонецЦикла;

	
	КонецЕсли;
//Исключение
	
//страница=страница+1;
	
//	КонецПопытки;
	Если    ЛОЖЬ И
		Страница*СколькоНаСтранице>Тотал_ВСЕГО 
		//Объект.СерийныеНомера.Количество()>500
		Тогда
		
				ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
				Объект.СерийныеНомера.Очистить();
				
				Объект.cis=ID;
				Объект.dataemission=emis;
				
				Объект.Страница=Страница;
				ЭтаФорма.Записать();
				//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан");
				
				//ЗаполнитьОстаткиИз1С_1(ИсключаемИзЗапроса);
				
				//Сообщить("Остатки загружены");
				Прервать;
			КонецЕсли;
			ПервуюПропустить=Истина;
			HTTPСервисЗапрос=Неопределено;
			страница=Страница+1;
		
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			//HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/listV2?limit="+xmlstring(СколькоНаСтранице+1)+"&order=DESC&orderColumn=emd&uit="+ID+"&pageDir=NEXT");
			
			//HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/listV2?limit="+xmlstring(СколькоНаСтранице)+"&order=DESC&orderColumn=emd&uit="+ID+"&orderedColumnValue="
			//+emis+"&pageDir=NEXT");
			
		//	ЗапросЗаписываем="api/v4/facade/identifytools/listV2?limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&cisStatus=APPLIED&emissionType="+Какие+"&order=DESC&orderColumn=emd&uit="+
		//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ID)+"&orderedColumnValue="+emis+
		//	"&pageDir=NEXT&pg="+Что;
		
		
			ЗапросЗаписываем="api/v4/facade/identifytools/listV2?"+
			"limit="+Формат(СколькоНаСтранице,"ЧГ=")+
			"&cisStatus=APPLIED&order=ASC&orderColumn=type&uit="+
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ID)+"&pageDir=NEXT&pg="+Что;
		
		
		
			//ЗапросЗаписываем="api/v4/facade/identifytools/listV2?"+
			//"pg="+что+"&limit="+Формат(СколькоНаСтранице,"ЧГ=")+
			//"&pageDir=NEXT&orderColumn=emd&uit="+
			//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ID)+"&orderedColumnValue="+
			//emis+"&page="+xmlString(Страница)+"&cisStatus=APPLIED&emissionType="+Какие+"&docType="+ТипКакие;
			
			
			//
			//"emissionDateFrom="+Формат(ДатаЗапоминть,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z"+
			//"&emissionDateTo="+Формат(ДатаКон,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z"+
			//"&limit="+Формат(СколькоНаСтранице,"ЧГ=")
			////+"&order=DESC&orderColumn=emd
			//+"&uit="
			//+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ID)+"&orderedColumnValue="
			//+emis+"&pageDir=NEXT";
			HTTPЗапрос=Новый HTTPЗапрос(ЗапросЗаписываем);
//emis="";
		//	HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/listV2?limit="+xmlstring(СколькоНаСтранице+1)+"&order=DESC&orderColumn=emd&orderedColumnValue="
		//	+emis+"&pageDir=NEXT");
//			HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/listV2");
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			
			
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			//HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
		Попытка
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			Если Ответ.КодСостояния<>200 Тогда
				
				
					ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
					Объект.СерийныеНомера.Очистить();
					
					Объект.cis=ID;
					Объект.dataemission=emis;
					ЭтаФорма.Записать();

					Если УжеОтправили=Истина Тогда
						Сообщить("Не удалось получить номера КМ");
						Возврат;
					Иначе
					ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
					Thumbprint_1=ПолучитьИзПользователя();	
					ОстаткиЗагрузить(Thumbprint_1,Какие,ТипКакие,Истина,Истина);
					Возврат;
				КонецЕсли;
				
				
				
				
			
			КонецЕсли;
		Исключение
			Сообщить("Не удалось получить номера КМ");
			Возврат;
			//страница=Страница-1;
		  	//ОбработкаПрерыванияПользователя();
		КонецПопытки;
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			
		
		КонецЦикла;
	
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение    
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
						Объект.ОшибкаОтправки=Текст1;
					КонецПопытки;
					Возврат;
		//	Иначе
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
   
	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВПроцессе");
   
     
	Сообщить("Остатки загружены по РФ");
   
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОстаткиИз1с(Команда)
	// Вставить содержимое обработчика.
	
	Thumbprint_1=ПолучитьИзПользователя();	
	
	Этаформа.Записать();
	
	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан");

	   ЗаполнитьОстаткиИз1С_1("");
   
     
	Сообщить("Остатки загружены");
	
КонецПроцедуры

&НаКлиенте
Процедура Продолжить_1(Команда)
	// Вставить содержимое обработчика.
	
	Если Объект.ТипОстаткаПоследний=ПредопределенноеЗначение("Перечисление.СпособВыпускаТоваров_ХамелеонЦРПТ.ПроизведенВРФ") Тогда
		Какие="LOCAL";
		ТипКакие="LP_INTRODUCE_GOODS";
		
	ИначеЕсли Объект.ТипОстаткаПоследний=ПредопределенноеЗначение("Перечисление.СпособВыпускаТоваров_ХамелеонЦРПТ.ВвезенВРФ") Тогда
		Какие="FOREIGN";
		ТипКакие="LP_GOODS_IMPORT";
		
		
	ИначеЕсли Объект.ТипОстаткаПоследний=ПредопределенноеЗначение("Перечисление.СпособВыпускаТоваров_ХамелеонЦРПТ.МаркировкаОстатков") Тогда
		Какие="REMAINS";
		ТипКакие="LP_INTRODUCE_OST";
	ИначеЕсли Значениезаполнено(объект.cis) Тогда
		Thumbprint_1=ПолучитьИзПользователя();	
		ОстаткиОбороты(Thumbprint_1,Истина,Истина,"INTRODUCED");
		Возврат;		
		
	Иначе
		Сообщить("Не известен документ Продолжения");
		Возврат;
	КонецЕсли;
		
		Thumbprint_1=ПолучитьИзПользователя();	
		ОстаткиОбороты(Thumbprint_1,Истина,Истина,"APPLIED");
		
		
		//ОстаткиЗагрузить(Thumbprint_1,Какие,ТипКакие,Истина,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиВОбороте(Команда)
	
	Thumbprint_1=ПолучитьИзПользователя();	
	
	Если Thumbprint_1.НаименованиеСтенда="Табак"
		ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
		Тогда
		
		ОбновитьОстаткиПоКМТабак(Thumbprint_1);
		
		Возврат;
	КонецЕслИ;
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика"  Тогда
		
		ОбновитьОстаткиПоКМЛекарства(Thumbprint_1);
		
		Возврат;
	КонецЕслИ;
	
	
	
	
	// Вставить содержимое обработчика.
	Объект.ТипОстаткаПоследний=Неопределено;
	ОБъект.cis="";
	Объект.dataemission="";
	
	
	Этаформа.Записать();
	
	ОстаткиОбороты(Thumbprint_1,,,"INTRODUCED");

	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиОбороты(Thumbprint_1,УжеОтправили=Ложь,Продолжим=Ложь,Тип)
	
	
	Если Объект.Статус=Предопределенноезначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан") Тогда
		Возврат;
	КонецЕсли;
	
	
	СчетчикОбщий=0;
	//УдаялемСРегистра();
	
	ОБъект.Статус=Предопределенноезначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВПроцессе");
	ЭтаФорма.Записать();
	ИсключаемИзЗапроса=Новый СписокЗначений;
	
	
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	
		Если не ЗначениеЗаполнено(Срегистра) Тогда
			Возврат;
		Конецесли;
	
		
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;

			
			что=Thumbprint_1.что;

	
//	HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/marked_products/count?cisStatus=INTRODUCED&aggregation=true&pg="+что);
	HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/count?cisStatus="+Тип+"&pg="+что);
	

	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	//HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
		Если 
Ответ.КодСостояния=401
		ИЛИ Ответ.КодСостояния=502  
		Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Сообщить("Не удалос подключиться к ЦРПТ");
				Возврат;
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				Thumbprint_1=ПолучитьИзПользователя();	
				ОстаткиОбороты(Thumbprint_1,ПРодолжим,Истина,Тип);
				Возврат;
			КонецЕсли
		КонецЕсли;	
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
	Попытка
 		Тотал_ВСЕГО=NNN.count;
	Исключение
		Тотал_ВСЕГО=0;
	КонецПопытки;
	
	
	Если Тотал_ВСЕГО=0 Тогда
		Сообщить("Данных для загрузок нет");
		Возврат;
	КонецЕсли;
	ИтогоСделаноПоЗ=0;

	Уммножаем=1;
	
	
	Объект.Товары.Очистить();
	Объект.Статус=Неопределено;
	Объект.ОшибкаОтправки="";
	
											
	///СколькоНаСтранице=100;			
		Если   ПРодолжим=Истина И ЗначениеЗаполнено(Объект.cis) И ЗначениеЗаполнено(Объект.dataemission) Тогда
			ID=Объект.cis;
			emis=Объект.dataemission;
			ЗапросЗаписываем="api/v4/facade/identifytools/listV2?limit="+
			Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=emd"+
			"&uit="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ID)+
			"&orderedColumnValue="+emis+"&pageDir=NEXT&cisStatus="+Тип+"&cache=false&pg="+Что;
		//	"&orderedColumnValue="+emis+"&pageDir=NEXT&cisStatus="+Тип+"&pg="+Что;
			
			//
			//"emissionDateFrom="+Формат(ДатаЗапоминть,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z"+
			//"&emissionDateTo="+Формат(ДатаКон,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z"+
			//"&limit="+Формат(СколькоНаСтранице,"ЧГ=")
			////+"&order=DESC&orderColumn=emd
			//+"&uit="
			//+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ID)+"&orderedColumnValue="
			//+emis+"&pageDir=NEXT";
			HTTPЗапрос=Новый HTTPЗапрос(ЗапросЗаписываем);

		Иначе
			ID="";
			emis="";
	ЗапросЗаписываем="api/v4/facade/identifytools/listV2?limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=emd&cisStatus="+Тип+"&cache=false&pg="+что;		
//	ЗапросЗаписываем="api/v4/facade/identifytools/listV2?limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=emd&cisStatus="+Тип+"&pg="+что;		
	HTTPЗапрос=Новый HTTPЗапрос(ЗапросЗаписываем);
	//HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/marked_products/listV2?limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&cisStatus=MODAL_GOODS_SHIPMENT&aggregation=true&order=DESC&orderColumn=emd&pg="+что);
КонецЕсли;	
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	//HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Попытка
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
Исключение
	Сообщить("не удалось выполнить первый запрос");
	Возврат;
	КонецПопытки;
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	ЗапишемВРегистр_Марки(Текст1,ЗапросЗаписываем,"");
	
		//	emis="";
		//	       ID="";
		
	
	
	Если Ответ.КодСостояния=200 Тогда
		Страница=0;
		Тотал=99999999999999999999999;
		Пока Страница*СколькоНаСтранице<=Тотал Цикл
			
			
			
				Если Объект.СерийныеНомера.Количество()>=500 Тогда
					ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
					Объект.СерийныеНомера.Очистить();
					
					Объект.cis=ID;
					Объект.dataemission=emis;
					ЭтаФорма.Записать();
					
					ОбработкаПрерыванияПользователя();
								
				КонецЕсли;
				
			
			страница=Страница+1;
			//Попытка
			
			//ЧтениеJSON = Новый ЧтениеJSON;
			Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
				ЗапишемВРегистр(Текст1);
			КонецЕсли;
		
			СчетчикОбщий=СчетчикОбщий+1;
			
			//ЗапишемВРегистр_Марки(Текст1,ЗапросЗаписываем,ДатаНач);
			
			//ЧтениеJSON.УстановитьСтроку(Текст1);
			Соответствие=Ложь;
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Если NNN=Неопределено тогда
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Соответствие=Истина;
			//Если СколькоНаСтранице>NNN["results"].Количество() Тогда
			Если NNN["results"].Количество()=0 Тогда
			
				Тотал=NNN["results"].Количество()
			КонецЕсли;

				
				Если NNN["results"].Количество()=0 Тогда
						ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
						Объект.СерийныеНомера.Очистить();
						
						Объект.cis=ID;
						Объект.dataemission=emis;
						ЭтаФорма.Записать();

						Если УжеОтправили=Истина Тогда
							Сообщить("Не удалось получить номера КМ");
							Возврат;
						Иначе
							ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
							Thumbprint_1=ПолучитьИзПользователя();	
							ОстаткиОбороты(Thumbprint_1,Истина,Истина,Тип);
							Возврат;
						КонецЕсли;
					
					
				КонецЕсли;
			Иначе
			//Если СколькоНаСтранице>NNN.results.Количество() Тогда
			Если NNN.results.Количество()=0 Тогда
				Тотал=NNN.results.Количество()
			КонецЕсли;
				Если NNN.results.Количество()=0 Тогда
					
		
					
						ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
						Объект.СерийныеНомера.Очистить();
						
						Объект.cis=ID;
						Объект.dataemission=emis;
						ЭтаФорма.Записать();

						Возврат;
						
					
				КонецЕсли;
			КонецЕсли;
			
			Если 			Соответствие=Ложь Тогда

				ИтогоСделаноПоЗ=ИтогоСделаноПоЗ+NNN.results.Количество();
			Иначе
				ИтогоСделаноПоЗ=ИтогоСделаноПоЗ+NNN["results"].Количество();
			КонецЕсли;
			Попытка
	 Состояние("Обрабатывается: "+Строка(ИтогоСделаноПоЗ)+" из "+Строка(Тотал_ВСЕГО),ИтогоСделаноПоЗ*100/Тотал_ВСЕГО);
 Исключение
	      
		  
	 
 КонецПопытки;
 
		Если 			Соответствие=Ложь Тогда
			Для Каждого Стр_1 Из NNN.results Цикл
		//		Если ПервуюПропустить=Истина Тогда
		////			ПервуюПропустить=Ложь;
			//		Продолжить;
			//	КонецЕсли;
			
			                     uit=стр_1.cis;
			//Если Стр_1.Свойство("cis",uit) Тогда
				
			
				emis=Стр_1.emissionDate;
				ID=uit;
				GTIN="";
				Номенклатура=СоздатьНайтиПоGTIN_IDENT(Стр_1,GTIN);
				Если Не ЗначениеЗаполнено(Номенклатура) тогда
					
					HTTPЗапрос_20=Новый HTTPЗапрос("api/v4/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(uit)+"&pg="+что);;
					//HTTPЗапрос_20=Новый HTTPЗапрос("api/v4/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(uit)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(uit)+"&pg="+что);;
					HTTPЗапрос_20.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
					HTTPЗапрос_20.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
					Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос_20);
					Текст20=Ответ.ПолучитьТелоКакСтроку();
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст20);
					NNN_20=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст20);//ПрочитатьJSON(ЧтениеJSON,Истина);
						GTIN=NNN_20["gtin"];
					Если ЗначениеЗаполнено(GTIN) тогда
						Номенклатура=СоздатьНайтиПоGTIN_Соответствие(NNN_20);
					КонецЕсли;
					
					
					
					
					
					
				КонецЕслИ;
				
				//Добав.КодТНВЭД=СоздатьНайтиТНВЭД(Стр_1.tnVedEaesGroup);
				
				
				
				//Если Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1.cis)).Количество()>0 
				//	ИЛИ ИсключаемИзЗапроса.НайтиПоЗначению(Стр_1.cis)<>Неопределено
				//	Тогда
				//	Продолжить;
				//КонецЕсли;
				
				Добав_1=Объект.СерийныеНомера.Добавить();
				
				//ИсключаемИзЗапроса.Добавить(Стр_1.cis);				
				Если Стр_1.status="APPLIED" Тогда
					Добав_1.КоличествоКМ_Эмитировано=1;
					//Статус_1="";
					//Если Стр_1.Свойство("goodsStatus",статус_1) И Статус_1="WAIT_SHIPMENT"
					//	Тогда
					//	Добав_1.Резерв=Добав_1 .Резерв+1;
					//	
					//КонецЕсли;
					
				ИначеЕсли Стр_1.status="EMITTED" Тогда
					Добав_1.КоличествоКМ_До_Эмитировано=1;
				ИначеЕсли Стр_1.status="INTRODUCED" Тогда
					Добав_1.КоличествоКМ_в_Обороте=1;
					Статус_1="";
					Если Стр_1.Свойство("goodsStatus",статус_1) И Статус_1="WAIT_SHIPMENT"
						Тогда
						Добав_1.Резерв=Добав_1 .Резерв+1;
						
					КонецЕсли;
					
				ИначеЕсли Стр_1.status="RETIRED" Тогда
					Добав_1.КоличествоКМ_выбыло=1;
				КонецЕсли;
				//Добав_1.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
				Добав_1.GTIN=gtin;
				Добав_1.НаименованиеТовара=Номенклатура;
				Стр_1.Свойство("sgtin",Добав_1.СерийныйНомер);
				Добав_1.cis=Стр_1.cis;
				
				lastDocId="";
				Если Стр_1.Свойство("lastDocId",lastDocId) Тогда
					Добав_1.ID_строки_партии=СоздатьНайтиИДСТРОКИ(lastDocId);
				КонецЕсли;	
	КонецЦикла;
Иначе
	
	
	
		Для Каждого Стр_1 Из NNN["results"] Цикл
		//		Если ПервуюПропустить=Истина Тогда
		////			ПервуюПропустить=Ложь;
			//		Продолжить;
			//	КонецЕсли;
			      
//								 uit=Стр_1["uti"];
								 
			
			                     uit=Стр_1["cis"];
								 
								 
								// Если //Стр_1.Свойство("uit",uit) 
									 //uit<>Неопределено 
								//	 СтрДлина(uit)<>18
								//	 Тогда
				
			
				emis=Стр_1["emissionDate"];
				ID=uit;
				GTIN="";
				Номенклатура=СоздатьНайтиПоGTIN_Соответствие_IDENT(Стр_1,GTIN);
				Если Не ЗначениеЗаполнено(Номенклатура) тогда
					
					HTTPЗапрос_20=Новый HTTPЗапрос("api/v4/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(uit)+"&pg="+что);;
					HTTPЗапрос_20.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
					HTTPЗапрос_20.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
					Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос_20);
					Текст20=Ответ.ПолучитьТелоКакСтроку();
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст20);
					NNN_20=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст20);//(ЧтениеJSON,Истина);
						GTIN=NNN_20["gtin"];
					Если ЗначениеЗаполнено(GTIN) тогда
						Номенклатура=СоздатьНайтиПоGTIN_Соответствие(NNN_20);
					КонецЕсли;
					
					
					
				КонецЕслИ;
				
								
				Добав_1=Объект.СерийныеНомера.Добавить();
				
				//ИсключаемИзЗапроса.Добавить(Стр_1.cis);				
				Если Стр_1["status"]="APPLIED" Тогда
					Добав_1.КоличествоКМ_Эмитировано=1;
					//Статус_1="";
					//Если Стр_1.Свойство("goodsStatus",статус_1) И Статус_1="WAIT_SHIPMENT"
					//	Тогда
					//	Добав_1.Резерв=Добав_1 .Резерв+1;
					//	
					//КонецЕсли;
					
				ИначеЕсли Стр_1["status"]="EMITTED" Тогда
					Добав_1.КоличествоКМ_До_Эмитировано=1;
				ИначеЕсли Стр_1["status"]="INTRODUCED" Тогда
					Добав_1.КоличествоКМ_в_Обороте=1;
					Статус_1=Стр_1["goodsStatus"];
					Если Статус_1="WAIT_SHIPMENT"
						Тогда
						Добав_1.Резерв=Добав_1 .Резерв+1;
						
					КонецЕсли;
					
				ИначеЕсли Стр_1["status"]="RETIRED" Тогда
					Добав_1.КоличествоКМ_выбыло=1;
				КонецЕсли;
				//Добав_1.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
				Добав_1.GTIN=gtin;
				Добав_1.НаименованиеТовара=Номенклатура;
				Добав_1.СерийныйНомер=Стр_1["sgtin"];
				Добав_1.cis=Стр_1["cis"];
				
				lastDocId=Стр_1["lastDocId"];
				Если lastDocId<>Неопределено Тогда
					Добав_1.ID_строки_партии=СоздатьНайтиИДСТРОКИ(lastDocId);
				КонецЕсли;	
		//КонецЕсли;
	КонецЦикла;

	
	
	
	КонецЕсли;
//Исключение
	
//страница=страница-1;
	
//	КонецПопытки;
	//Если 
	//	Страница*СколькоНаСтранице>Тотал_ВСЕГО 
	//	//Объект.СерийныеНомера.Количество()>500
	//	Тогда
	//	
	//			ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
	//			Объект.СерийныеНомера.Очистить();
	//			
	//			Объект.cis=ID;
	//			Объект.dataemission=emis;
	//			ЭтаФорма.Записать();
	//			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан");
	//			
	//			//ЗаполнитьОстаткиИз1С_1(ИсключаемИзЗапроса);
	//			
	//			//Сообщить("Остатки загружены");
	//			Прервать;
	//		КонецЕсли;
			ПервуюПропустить=Истина;
			HTTPСервисЗапрос=Неопределено;
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			//HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/listV2?limit="+xmlstring(СколькоНаСтранице+1)+"&order=DESC&orderColumn=emd&uit="+ID+"&pageDir=NEXT");
			
			//HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/listV2?limit="+xmlstring(СколькоНаСтранице)+"&order=DESC&orderColumn=emd&uit="+ID+"&orderedColumnValue="
			//+emis
		//	Если       Страница*СколькоНаСтранице>=600*Уммножаем Тогда
//				ЗапросЗаписываем="api/v4/facade/marked_products/listV2?limit="+
//				Формат(СколькоНаСтранице,"ЧГ=")+"&cisStatus=MODAL_GOODS_SHIPMENT&aggregation=true&order=DESC&orderColumn=emd&uit="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ID)+
//				"&orderedColumnValue="+emis+"&pageDir=NEXT&cache=false&pg="+Что;
//				"&orderedColumnValue="+emis+"&pageDir=NEXT&pg="+Что;
				
				
				ЗапросЗаписываем="api/v4/facade/identifytools/listV2?limit="+
				Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=emd"+
				"&orderedColumnValue="+emis+"&uit="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ID)+"&pageDir=NEXT&cisStatus="+Тип+"&cache=false&pg="+Что;
//				"&orderedColumnValue="+emis+"&uit="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ID)+"&pageDir=NEXT&cisStatus="+Тип+"&pg="+Что;
				
				
				
		       Уммножаем=Уммножаем+1;
		//	Иначе
		///////	
		//		ЗапросЗаписываем="api/v4/facade/marked_products/listV2?limit="+
		//		Формат(СколькоНаСтранице,"ЧГ=")+"&cisStatus=MODAL_GOODS_SHIPMENT&aggregation=true&order=DESC&orderColumn=emd&uit="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ID)+
		//		"&orderedColumnValue="+emis+"&pageDir=NEXT&pg="+Что;
		//	КонецЕсли;
				
//			ЗапросЗаписываем="api/v4/facade/identifytools/listV2?limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&cisStatus=APPLIED&emissionType="+Какие+"&order=DESC&orderColumn=emd&uit="+
//			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ID)+"&orderedColumnValue="+emis+
//			"&pageDir=NEXT&pg="+Что;
			
			//                                     
			//"emissionDateFrom="+Формат(ДатаЗапоминть,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z"+
			//"&emissionDateTo="+Формат(ДатаКон,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z"+
			//"&limit="+Формат(СколькоНаСтранице,"ЧГ=")
			////+"&order=DESC&orderColumn=emd
			//+"&uit="
			//+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ID)+"&orderedColumnValue="
			//+emis+"&pageDir=NEXT";
			HTTPЗапрос=Новый HTTPЗапрос(ЗапросЗаписываем);
//emis="";
		//	HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/listV2?limit="+xmlstring(СколькоНаСтранице+1)+"&order=DESC&orderColumn=emd&orderedColumnValue="
		//	+emis+"&pageDir=NEXT");
//			HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/listV2");
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			
			
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			//HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
		Попытка
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			Если Ответ.КодСостояния<>200 Тогда
				
				
					ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
					Объект.СерийныеНомера.Очистить();
					
					Объект.cis=ID;
					Объект.dataemission=emis;
					ЭтаФорма.Записать();

					//Если УжеОтправили=Истина Тогда
					//	Сообщить("Не удалось получить номера КМ");
					//	Возврат;
					//Иначе
					ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
					Thumbprint_1=ПолучитьИзПользователя();	
					ОстаткиОбороты(Thumbprint_1,Истина,Истина,Тип);
					Возврат;
			//	КонецЕсли;
				
				
				
				
			
			КонецЕсли;
		Исключение
			Сообщить("Не удалось получить номера КМ");
			Возврат;
			//страница=Страница-1;
		  	//ОбработкаПрерыванияПользователя();
		КонецПопытки;
			Текст1=Ответ.ПолучитьТелоКакСтроку();
		ЗапишемВРегистр_Марки(Текст1,ЗапросЗаписываем,"");
			
		
		КонецЦикла;
	
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение    
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
						Объект.ОшибкаОтправки=Текст1;
					КонецПопытки;
					Возврат;
		//	Иначе
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	
	
	Если Объект.СерийныеНомера.Количество()>0 Тогда
					ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
					Объект.СерийныеНомера.Очистить();
					
					Объект.cis=ID;
					Объект.dataemission=emis;
					ЭтаФорма.Записать();
					
					ОбработкаПрерыванияПользователя();
								
				КонецЕсли;

	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВПроцессе");
   
     
	Сообщить("Остатки загружены по РФ");
   

КонецПроцедуры

&НаКлиенте
Процедура ЗапросОстатковПоGTIN(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Объект.ТипОстаткаПоследний=Неопределено;
	ОБъект.cis="";
	Объект.dataemission="";
	
	
	Этаформа.Записать();
	
	Thumbprint_1=ПолучитьИзПользователя();	
	ОстаткиОбороты_ПоGTIN(Thumbprint_1);

	
КонецПроцедуры
&НаКлиенте
Процедура ОстаткиОбороты_ПоGTIN(Thumbprint_1,УжеОтправили=Ложь,Продолжим=Ложь)
	
	
	Если Объект.Статус=Предопределенноезначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан") Тогда
		Возврат;
	КонецЕсли;
	
	
	СчетчикОбщий=0;
	//УдаялемСРегистра();
	
	ОБъект.Статус=Предопределенноезначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВПроцессе");
	ЭтаФорма.Записать();
	ИсключаемИзЗапроса=Новый СписокЗначений;
	

СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	
		
		Если не ЗначениеЗаполнено(Срегистра) Тогда
			Возврат;
		Конецесли;

	
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;

			
			что=Thumbprint_1.что;

	
	//HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/marked_products/count?cisStatus=MODAL_GOODS_SHIPMENT&aggregation=true&pg="+что);
	HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/listV2?"+
	"limit="+Формат(1,"ЧГ=")+"&order=DESC&orderColumn=emd");
	

	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	//HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
		Если 
Ответ.КодСостояния=401
		ИЛИ Ответ.КодСостояния=502  
		Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Сообщить("Не удалос подключиться к ЦРПТ");
				Возврат;
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				Thumbprint_1=ПолучитьИзПользователя();	
				ОстаткиОбороты_ПоGTIN(Thumbprint_1,ПРодолжим,Истина);
				Возврат;
			КонецЕсли
		КонецЕсли;	
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
 	Тотал_ВСЕГО=NNN.count;
	
	
	Если Тотал_ВСЕГО=0 Тогда
		Сообщить("Данных для загрузок нет");
		Возврат;
	КонецЕсли;
	ИтогоСделаноПоЗ=0;

	
	
	Объект.Товары.Очистить();
	Объект.Статус=Неопределено;
	Объект.ОшибкаОтправки="";
											
	///СколькоНаСтранице=100;			
		Если   ПРодолжим=Истина Тогда
			ID=Объект.cis;
			emis=Объект.dataemission;
			ЗапросЗаписываем="api/v4/facade/marked_products/listV2?limit="+
			Формат(СколькоНаСтранице,"ЧГ=")+"&cisStatus=MODAL_GOODS_SHIPMENT&aggregation=true&order=DESC&orderColumn=emd&uit="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ID)+
			"&orderedColumnValue="+emis+"&pageDir=NEXT&pg="+Что;
			
			//
			//"emissionDateFrom="+Формат(ДатаЗапоминть,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z"+
			//"&emissionDateTo="+Формат(ДатаКон,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z"+
			//"&limit="+Формат(СколькоНаСтранице,"ЧГ=")
			////+"&order=DESC&orderColumn=emd
			//+"&uit="
			//+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ID)+"&orderedColumnValue="
			//+emis+"&pageDir=NEXT";
			HTTPЗапрос=Новый HTTPЗапрос(ЗапросЗаписываем);

		Иначе
			ID="";
			emis="";
			
	HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/marked_products/listV2?limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&cisStatus=MODAL_GOODS_SHIPMENT&aggregation=true&order=DESC&orderColumn=emd&pg="+что);
КонецЕсли;	
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	//HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Попытка
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
Исключение
	Сообщить("не удалось выполнить первый запрос");
	Возврат;
	КонецПопытки;
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
		//	emis="";
		//	       ID="";
		
	
	
	Если Ответ.КодСостояния=200 Тогда
		Страница=0;
		Пока Страница*СколькоНаСтранице<=Тотал_ВСЕГО Цикл
			
				
				Если Объект.СерийныеНомера.Количество()>=500 Тогда
					ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
					Объект.СерийныеНомера.Очистить();
					
					Объект.cis=ID;
					Объект.dataemission=emis;
					ЭтаФорма.Записать();
					
					ОбработкаПрерыванияПользователя();
								
				КонецЕсли;
				
			
			страница=Страница+1;
			Попытка
			
			//ЧтениеJSON = Новый ЧтениеJSON;
			Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
				ЗапишемВРегистр(Текст1);
			КонецЕсли;
		
			СчетчикОбщий=СчетчикОбщий+1;
			
			//ЗапишемВРегистр_Марки(Текст1,ЗапросЗаписываем,ДатаНач);
			
			//ЧтениеJSON.УстановитьСтроку(Текст1);
			Соответствие=Ложь;
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Если NNN=Неопределено тогда
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Соответствие=Истина;

				Если NNN["results"].Количество()=0 Тогда
						ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
						Объект.СерийныеНомера.Очистить();
						
						Объект.cis=ID;
						Объект.dataemission=emis;
						ЭтаФорма.Записать();

						Если УжеОтправили=Истина Тогда
							Сообщить("Не удалось получить номера КМ");
							Возврат;
						Иначе
							ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
							Thumbprint_1=ПолучитьИзПользователя();	
							ОстаткиОбороты_ПоGTIN(Thumbprint_1,Истина,Истина);
							Возврат;
						КонецЕсли;
					
					
				КонецЕсли;
			Иначе
				Если NNN.results.Количество()=0 Тогда
					
					
					
						ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
						Объект.СерийныеНомера.Очистить();
						
						Объект.cis=ID;
						Объект.dataemission=emis;
						ЭтаФорма.Записать();

						Если УжеОтправили=Истина Тогда
							Сообщить("Не удалось получить номера КМ");
							Возврат;
						Иначе
							ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
							Thumbprint_1=ПолучитьИзПользователя();	
							ОстаткиОбороты_ПоGTIN(Thumbprint_1,Истина,Истина);
							Возврат;
						КонецЕсли;
					

					
				КонецЕсли;
			КонецЕсли;
			
			Если 			Соответствие=Ложь Тогда

				ИтогоСделаноПоЗ=ИтогоСделаноПоЗ+NNN.results.Количество();
			Иначе
				ИтогоСделаноПоЗ=ИтогоСделаноПоЗ+NNN["results"].Количество();
			КонецЕсли;
			Попытка
	 Состояние("Обрабатывается: "+Строка(ИтогоСделаноПоЗ)+" из "+Строка(Тотал_ВСЕГО),ИтогоСделаноПоЗ*100/Тотал_ВСЕГО);
 Исключение
	      
		  
	 
 КонецПопытки;
 
		Если 			Соответствие=Ложь Тогда
			Для Каждого Стр_1 Из NNN.results Цикл
		//		Если ПервуюПропустить=Истина Тогда
		////			ПервуюПропустить=Ложь;
			//		Продолжить;
			//	КонецЕсли;
			
			                     uit=стр_1.cis;
			//Если Стр_1.Свойство("cis",uit) Тогда
				
			
				emis=Стр_1.emissionDate;
				ID=uit;
				Номенклатура=СоздатьНайтиПоGTIN(Стр_1);
				
				
				//Добав.КодТНВЭД=СоздатьНайтиТНВЭД(Стр_1.tnVedEaesGroup);
				
				
				
				//Если Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1.cis)).Количество()>0 
				//	ИЛИ ИсключаемИзЗапроса.НайтиПоЗначению(Стр_1.cis)<>Неопределено
				//	Тогда
				//	Продолжить;
				//КонецЕсли;
				
				Добав_1=Объект.СерийныеНомера.Добавить();
				
				//ИсключаемИзЗапроса.Добавить(Стр_1.cis);				
				Если Стр_1.status="APPLIED" Тогда
					Добав_1.КоличествоКМ_Эмитировано=1;
					//Статус_1="";
					//Если Стр_1.Свойство("goodsStatus",статус_1) И Статус_1="WAIT_SHIPMENT"
					//	Тогда
					//	Добав_1.Резерв=Добав_1 .Резерв+1;
					//	
					//КонецЕсли;
					
				ИначеЕсли Стр_1.status="EMITTED" Тогда
					Добав_1.КоличествоКМ_До_Эмитировано=1;
				ИначеЕсли Стр_1.status="INTRODUCED" Тогда
					Добав_1.КоличествоКМ_в_Обороте=1;
					Статус_1="";
					Если Стр_1.Свойство("goodsStatus",статус_1) И Статус_1="WAIT_SHIPMENT"
						Тогда
						Добав_1.Резерв=Добав_1 .Резерв+1;
						
					КонецЕсли;
					
				ИначеЕсли Стр_1.status="RETIRED" Тогда
					Добав_1.КоличествоКМ_выбыло=1;
				КонецЕсли;
				//Добав_1.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
				Добав_1.GTIN=Стр_1.gtin;
				Добав_1.НаименованиеТовара=Номенклатура;
				Добав_1.СерийныйНомер=Стр_1.sgtin;
				Добав_1.cis=Стр_1.cis;
				
				lastDocId="";
				Если Стр_1.Свойство("lastDocId",lastDocId) Тогда
					Добав_1.ID_строки_партии=СоздатьНайтиИДСТРОКИ(lastDocId);
				КонецЕсли;	
				
				
		//КонецЕсли;
	КонецЦикла;
Иначе
	
	
	
		Для Каждого Стр_1 Из NNN["results"] Цикл
		//		Если ПервуюПропустить=Истина Тогда
		////			ПервуюПропустить=Ложь;
			//		Продолжить;
			//	КонецЕсли;
			      
//								 uit=Стр_1["uti"];
								 
			
			                     uit=Стр_1["cis"];
								 
								 
								// Если //Стр_1.Свойство("uit",uit) 
									 //uit<>Неопределено 
								//	 СтрДлина(uit)<>18
								//	 Тогда
				
			
				emis=Стр_1["emissionDate"];
				ID=uit;
				Номенклатура=СоздатьНайтиПоGTIN_Соответствие(Стр_1);
				
				
				//Добав.КодТНВЭД=СоздатьНайтиТНВЭД(Стр_1.tnVedEaesGroup);
				
				
				
				//Если Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1.cis)).Количество()>0 
				//	ИЛИ ИсключаемИзЗапроса.НайтиПоЗначению(Стр_1.cis)<>Неопределено
				//	Тогда
				//	Продолжить;
				//КонецЕсли;
				
				Добав_1=Объект.СерийныеНомера.Добавить();
				
				//ИсключаемИзЗапроса.Добавить(Стр_1.cis);				
				Если Стр_1["status"]="APPLIED" Тогда
					Добав_1.КоличествоКМ_Эмитировано=1;
					//Статус_1="";
					//Если Стр_1.Свойство("goodsStatus",статус_1) И Статус_1="WAIT_SHIPMENT"
					//	Тогда
					//	Добав_1.Резерв=Добав_1 .Резерв+1;
					//	
					//КонецЕсли;
					
				ИначеЕсли Стр_1["status"]="EMITTED" Тогда
					Добав_1.КоличествоКМ_До_Эмитировано=1;
				ИначеЕсли Стр_1["status"]="INTRODUCED" Тогда
					Добав_1.КоличествоКМ_в_Обороте=1;
					Статус_1=Стр_1["goodsStatus"];
					Если Статус_1="WAIT_SHIPMENT"
						Тогда
						Добав_1.Резерв=Добав_1 .Резерв+1;
						
					КонецЕсли;
					
				ИначеЕсли Стр_1["status"]="RETIRED" Тогда
					Добав_1.КоличествоКМ_выбыло=1;
				КонецЕсли;
				//Добав_1.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
				Добав_1.GTIN=Стр_1["gtin"];
				Добав_1.НаименованиеТовара=Номенклатура;
				Добав_1.СерийныйНомер=Стр_1["sgtin"];
				Добав_1.cis=Стр_1["cis"];
				
				lastDocId=Стр_1["lastDocId"];
				Если lastDocId<>Неопределено Тогда
					Добав_1.ID_строки_партии=СоздатьНайтиИДСТРОКИ(lastDocId);
				КонецЕсли;	
						
		//КонецЕсли;
	КонецЦикла;

	
	
	
	КонецЕсли;
Исключение
	
страница=страница-1;
	
	КонецПопытки;
	Если 
		Страница*СколькоНаСтранице>Тотал_ВСЕГО 
		//Объект.СерийныеНомера.Количество()>500
		Тогда
		
				ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
				Объект.СерийныеНомера.Очистить();
				
				Объект.cis=ID;
				Объект.dataemission=emis;
				ЭтаФорма.Записать();
				//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан");
				
				//ЗаполнитьОстаткиИз1С_1(ИсключаемИзЗапроса);
				
				//Сообщить("Остатки загружены");
				Прервать;
			КонецЕсли;
			ПервуюПропустить=Истина;
			HTTPСервисЗапрос=Неопределено;
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			//HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/listV2?limit="+xmlstring(СколькоНаСтранице+1)+"&order=DESC&orderColumn=emd&uit="+ID+"&pageDir=NEXT");
			
			//HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/listV2?limit="+xmlstring(СколькоНаСтранице)+"&order=DESC&orderColumn=emd&uit="+ID+"&orderedColumnValue="
			//+emis
			
			ЗапросЗаписываем="api/v4/facade/marked_products/listV2?limit="+
			Формат(СколькоНаСтранице,"ЧГ=")+"&cisStatus=MODAL_GOODS_SHIPMENT&aggregation=true&order=DESC&orderColumn=emd&uit="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ID)+
			"&orderedColumnValue="+emis+"&pageDir=NEXT&pg="+Что;
			
//			ЗапросЗаписываем="api/v4/facade/identifytools/listV2?limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&cisStatus=APPLIED&emissionType="+Какие+"&order=DESC&orderColumn=emd&uit="+
//			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ID)+"&orderedColumnValue="+emis+
//			"&pageDir=NEXT&pg="+Что;
			
			//
			//"emissionDateFrom="+Формат(ДатаЗапоминть,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z"+
			//"&emissionDateTo="+Формат(ДатаКон,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z"+
			//"&limit="+Формат(СколькоНаСтранице,"ЧГ=")
			////+"&order=DESC&orderColumn=emd
			//+"&uit="
			//+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ID)+"&orderedColumnValue="
			//+emis+"&pageDir=NEXT";
			HTTPЗапрос=Новый HTTPЗапрос(ЗапросЗаписываем);
//emis="";
		//	HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/listV2?limit="+xmlstring(СколькоНаСтранице+1)+"&order=DESC&orderColumn=emd&orderedColumnValue="
		//	+emis+"&pageDir=NEXT");
//			HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/listV2");
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			
			
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			//HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
		Попытка
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			Если Ответ.КодСостояния<>200 Тогда
				
				
					ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
					Объект.СерийныеНомера.Очистить();
					
					Объект.cis=ID;
					Объект.dataemission=emis;
					ЭтаФорма.Записать();

					Если УжеОтправили=Истина Тогда
						Сообщить("Не удалось получить номера КМ");
						Возврат;
					Иначе
					ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
					Thumbprint_1=ПолучитьИзПользователя();	
					ОстаткиОбороты_ПоGTIN(Thumbprint_1,Истина,Истина);
					Возврат;
				КонецЕсли;
				
				
				
				
			
			КонецЕсли;
		Исключение
			Сообщить("Не удалось получить номера КМ");
			Возврат;
			//страница=Страница-1;
		  	//ОбработкаПрерыванияПользователя();
		КонецПопытки;
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			
		
		КонецЦикла;
	
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение    
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
						Объект.ОшибкаОтправки=Текст1;
					КонецПопытки;
					Возврат;
		//	Иначе
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
   
	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВПроцессе");
   
     
	Сообщить("Остатки загружены по РФ");
   

КонецПроцедуры


&НаКлиенте
Процедура ЗагрузкаИзЦРПТ_marked_products(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Thumbprint_1=ПолучитьИзПользователя();
	
	Если Thumbprint_1.НаименованиеСтенда="Табак"
		ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
		Тогда
		
		ОбновитьОстаткиПоКМТабак(Thumbprint_1);
		
		Возврат;
	КонецЕслИ;
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика"  Тогда
		
		ОбновитьОстаткиПоКМЛекарства(Thumbprint_1);
		
		Возврат;
	КонецЕслИ;
	Этаформа.Записать();
	
	ПроводимПоДругомуИСразу_marked(Thumbprint_1);

	ЭтаФорма.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ПроводимПоДругомуИСразу_marked(Thumbprint_1)
	Если Объект.Статус=Предопределенноезначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан") Тогда
		Возврат;
	КонецЕсли;
	   Объект.СерийныеНомера.Очистить();
	
	СписокГТИН=МассивГТИН();
	
	
	СчетчикОбщий=0;
	УдаялемСРегистра();
	
	ОБъект.Статус=Предопределенноезначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВПроцессе");
	ЭтаФорма.Записать();
	ИсключаемИзЗапроса=Новый СписокЗначений;
	
//	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
		
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	
		Если не ЗначениеЗаполнено(Срегистра) тогда
			Возврат;
		КонецеслИ;
	
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;

			
			КоличествоГТИН=СписокГТИН.Количество();
			КолТ_=0;
			Для Каждого СтрГТИН1 ИЗ  СписокГТИН Цикл
				
					ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
					Объект.СерийныеНомера.Очистить();
				
				   КолТ_=КолТ_+1;
		 Состояние("Обрабатывается: ГТИН "+стрГТИН1+". Колич. "+Строка(КолТ_)+" из "+Строка(КоличествоГТИН),КолТ_*100/КоличествоГТИН);
		
	HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/marked_products/listV2?"+
	"limit="+Формат(1,"ЧГ=")+"&order=DESC&orderColumn=emd"+"&gtin="+СтрГТИН1);
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	//HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Если Ответ.КодСостояния<>200 Тогда
		ПоказатьПредупреждение(,"Не удалось получить остатки");
		Возврат;
	КонецЕсли;
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
 	Тотал_ВСЕГО=NNN["results"].Количество();
	
	Попытка
		Кол=NNN["results"].Количество();
	исключение
		Кол=0;
	КонецПопытки;
	
	Если Тотал_ВСЕГО=0 И Кол=0 Тогда
		Продолжить;
	КонецЕсли;
	ИтогоСделаноПоЗ=0;

	
	
	Объект.Товары.Очистить();
		Объект.Статус=Неопределено;
	Объект.ОшибкаОтправки="";
	Если ЗначениеЗаполнено(Объект.ДатаНачалаПолучения) тогда
		НачальНаяДата=Объект.ДатаНачалаПолучения
	КонецЕсли;
			//	Если Не значениеЗАполнено(НачальНаяДата) Тогда
			//		НачальНаяДата=Дата(2019,6,1);
			//	КонецЕсли;
			//	Если НЕ ЗначениеЗаполнено(ШагВсекундах) Тогда
//	ШагВсекундах=60*60*24;
//	КонецЕсли;			
	    //Объект.СерийныеНомера.Очистить();
		
	 	 //ДатаНач=НачалоДня(НачальНаяДата);
		
		//ДатаНач_1=ДатаНач;
		
		                                //Разница=Объект.Дата-ДатаНач;
										//Если Разница=0 Тогда
										//	         Разница=1;
										//КонецЕсли;
									///	Пока ДатаНач<=Объект.Дата ЦИкл
											
									//		Объект.ДатаНачалаПолучения=ДатаНач;
									//		ЭтаФорма.Записать();
											
									//		РазницаТ=ДатаНач-ДатаНач_1;
											
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
			
		emis="";
			       ID="";
	//	ДатаКон =КонецДня(ДатаНач);
		
		
		ЗапросЗаписываем="api/v4/facade/marked_products/listV2?"+
	"&limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&gtin="+СтрГТИН1;
	
	HTTPЗапрос=Новый HTTPЗапрос(ЗапросЗаписываем);
	//"&order=DESC&orderColumn=emd");
		
		
		
//		ДатаЗапоминть=ДатаНач;
//	ДатаНач=КонецДня(датаНач)+1;
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	//HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	
	Если Ответ.КодСостояния=200 Тогда
		Страница=0;
		Тотал=1;
		Пока Страница*СколькоНаСтранице<=Тотал Цикл
			
			
			
			страница=Страница+1;
			//Попытка
			
			//ЧтениеJSON = Новый ЧтениеJSON;
			Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
				ЗапишемВРегистр(Текст1);
			КонецЕсли;
		
			СчетчикОбщий=СчетчикОбщий+1;
			
			ЗапишемВРегистр_Марки(Текст1,ЗапросЗаписываем,"");
			
			//ЧтениеJSON.УстановитьСтроку(Текст1);
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			
		Если 	NNN<>Неопределено Тогда		
			
			
			ИтогоСделаноПоЗ=ИтогоСделаноПоЗ+NNN["results"].Количество();
			Попытка
	 Состояние("Обрабатывается: ГТИН "+стрГТИН1+". Колич. "+Строка(ИтогоСделаноПоЗ)+" из "+Строка(Тотал_ВСЕГО),ИтогоСделаноПоЗ*100/Тотал_ВСЕГО);
 Исключение
	 КонецПопытки;
			Тотал=99999999999999999999999;
			Если СколькоНаСтранице>NNN["results"].Количество() Тогда
				Тотал=NNN["results"].Количество()
			КонецЕсли;
			
			
			emis="";
			       ID="";
			Для Каждого Стр_1 Из NNN["results"] Цикл
		//		Если ПервуюПропустить=Истина Тогда
		////			ПервуюПропустить=Ложь;
			//		Продолжить;
			//	КонецЕсли;
				Если Стр_1["status"]="EMITTED" Тогда
					//Продолжить;
				КонецЕсли;
			
			//                     uit=Стр_1["uit"];
			//Если Стр_1["uit"]<>Неопределено Тогда
				
			
				emis=Стр_1["emissionDate"];
				ID=Стр_1["cis"];
				Номенклатура=СоздатьНайтиПоGTIN_Соответствие(Стр_1);
				
				
				//Добав.КодТНВЭД=СоздатьНайтиТНВЭД(Стр_1.tnVedEaesGroup);
				
				Если Объект.СерийныеНомера.Количество()>=99999 Тогда
					ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
					Объект.СерийныеНомера.Очистить();
				КонецЕсли;
				
				
				Если Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1["cis"])).Количество()>0 
					ИЛИ ИсключаемИзЗапроса.НайтиПоЗначению(Стр_1["cis"])<>Неопределено
					Тогда
					Продолжить;
				КонецЕсли;
				
				Добав_1=Объект.СерийныеНомера.Добавить();
				
			//	ИсключаемИзЗапроса.Добавить(Стр_1["cis"]);				
				Если Стр_1["status"]="APPLIED" Тогда
					Добав_1.КоличествоКМ_Эмитировано=1;
					//Статус_1="";
					//Если Стр_1.Свойство("goodsStatus",статус_1) И Статус_1="WAIT_SHIPMENT"
					//	Тогда
					//	Добав_1.Резерв=Добав_1 .Резерв+1;
					//	
					//КонецЕсли;
					
				ИначеЕсли Стр_1["status"]="EMITTED" Тогда
					Добав_1.КоличествоКМ_До_Эмитировано=1;
				ИначеЕсли Стр_1["status"]="INTRODUCED" Тогда
					Добав_1.КоличествоКМ_в_Обороте=1;
					Статус_1=Стр_1["goodsStatus"];
					Если Статус_1="WAIT_SHIPMENT"
						Тогда
						Добав_1.Резерв=Добав_1 .Резерв+1;
						
					КонецЕсли;
					
				ИначеЕсли Стр_1["status"]="RETIRED" Тогда
					Добав_1.КоличествоКМ_выбыло=1;
				КонецЕсли;
				//Добав_1.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
				Добав_1.GTIN=Стр_1["gtin"];
				Добав_1.НаименованиеТовара=Номенклатура;
				Добав_1.СерийныйНомер=Стр_1["sgtin"];
				Добав_1.cis=Стр_1["cis"];
				
	КонецЦикла;
	
	Иначе
		
		
		

	
	
	
	
	
	КонецЕсли;
//Исключение
	
//страница=страница-1;
	
	//КонецПопытки;
			Если Страница*СколькоНаСтранице>Тотал Тогда
				ЗагрузитьИнфуВРегистр(ИсключаемИзЗапроса);
				Объект.СерийныеНомера.Очистить();
				
				//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан");
				
				//ЗаполнитьОстаткиИз1С_1(ИсключаемИзЗапроса);
				
				//Сообщить("Остатки загружены");
				Прервать;
			КонецЕсли;
			ПервуюПропустить=Истина;
			HTTPСервисЗапрос=Неопределено;
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			//HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/marked_products/listV2?limit="+xmlstring(СколькоНаСтранице+1)+"&order=DESC&orderColumn=emd&uit="+ID+"&pageDir=NEXT");
			
			//HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/marked_products/listV2?limit="+xmlstring(СколькоНаСтранице)+"&order=DESC&orderColumn=emd&uit="+ID+"&orderedColumnValue="
			//+emis+"&pageDir=NEXT");
			
			ЗапросЗаписываем="api/v4/facade/marked_products/listV2?"+
			"&limit="+Формат(СколькоНаСтранице,"ЧГ=")
			//+"&order=DESC&orderColumn=emd
			+"&uit="
			+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ID)+"&orderedColumnValue="
			+emis+"&pageDir=NEXT"+"&gtin="+СтрГТИН1;
			HTTPЗапрос=Новый HTTPЗапрос(ЗапросЗаписываем);
//emis="";
		//	HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/marked_products/listV2?limit="+xmlstring(СколькоНаСтранице+1)+"&order=DESC&orderColumn=emd&orderedColumnValue="
		//	+emis+"&pageDir=NEXT");
//			HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/marked_products/listV2");
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			
			
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			//HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			
		
		КонецЦикла;
	
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение    
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
						Объект.ОшибкаОтправки=Текст1;
					КонецПопытки;
					Возврат;
		//	Иначе
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	
///КонецЦикла;

   Конеццикла;
	//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан");

   //ЗаполнитьОстаткиИз1С_1(ИсключаемИзЗапроса);
   
     
//	Сообщить("Остатки загружены");
   
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузкаПоОпределеннымGTIN(Команда)
	// Вставить содержимое обработчика.
	Thumbprint_1=ПолучитьИзПользователя();	
	
	Если Thumbprint_1.НаименованиеСтенда="Табак"
		ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
		Тогда
		
		ОбновитьОстаткиПоКМТабак(Thumbprint_1);
		
		Возврат;
	КонецЕслИ;
	
	//Если Thumbprint_1.НаименованиеСтенда="Фармацевтика"  Тогда
		
	//	ОбновитьОстаткиПоКМЛекарства(Thumbprint_1);
	//	ЗагрузитьОстаткиИз1с(Команда);
		
		
	//	Возврат;
	//КонецЕслИ;
	
	ОткрытьФорму("Справочник.Продукция_ХамелеонЦРПТ.Форма.ФормаВыбораМножество",,,,,,
	Новый ОписаниеОповещения("ПослеВыбораПродукций",ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПродукций(РР,ДД) Экспорт
	Если РР<>Неопределено тогда
		
		СписокГТИН=МассивГТИН(РР);
		Thumbprint_1=ПолучитьИзПользователя();	
		
		ЗагрузитьПоGTINКлиент(СписокГТИН,Thumbprint_1);
		Этаформа.Записать();
		
		Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан");

		 ЗаполнитьОстаткиИз1С_1_ГТИН(РР);
	   
	     
		Сообщить("Остатки загружены");
		
		
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьОстаткиИз1С_1_ГТИН(РР)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	ИсключаемИзЗапроса=Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НомераКМ_ХамелеонЦРПТ.cis
		|ИЗ
		|	РегистрСведений.СерийныеНомера_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
		|ГДЕ
		|	НомераКМ_ХамелеонЦРПТ.ДокументКорректировки = &ДокументЗаказа";
	
	Запрос.УстановитьПараметр("ДокументЗаказа", Объект.Ссылка);
	
	ИсключаемИзЗапроса=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("cis");
	
	
	СюдаДобавить=Объект.СерийныеНомера.Выгрузить();
	СюдаДобавить.Очистить();
	СюдаДобавить.Колонки.Добавить("ДокументКорректировки");
	СюдаДобавить.Индексы.Добавить("cis");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.СерийныйНомер КАК СерийныйНомер,
		|	СУММА(ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.КоличествоОстаток) КАК Вобороте,
		|	0 КАК Эмитировано,
		|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.Продукция КАК Продукция,
		|	0 КАК Резерв,
		|	0 КАК Получены
		|ИЗ
		|	РегистрНакопления.ОстаткиКМ_в_Обороте_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И НЕ СерийныйНомер В (&cis)
		|				И Продукция В (&Ссылка)) КАК ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.СерийныйНомер,
		|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.Продукция
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер,
		|	0,
		|	СУММА(ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток),
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция,
		|	0,
		|	0
		|ИЗ
		|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И НЕ СерийныйНомер В (&cis)
		|				И Продукция В (&Ссылка)) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер,
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.СерийныйНомер,
		|	0,
		|	0,
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.Продукция,
		|	0,
		|	СУММА(ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.КоличествоОстаток)
		|ИЗ
		|	РегистрНакопления.ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И НЕ СерийныйНомер В (&cis)
		|				И Продукция В (&Ссылка)) КАК ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.СерийныйНомер,
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.Продукция
		|ИТОГИ
		|	СУММА(Вобороте),
		|	СУММА(Эмитировано),
		|	СУММА(Резерв),
		|	СУММА(Получены)
		|ПО
		|	Продукция,
		|	СерийныйНомер";
	
	Запрос.УстановитьПараметр("Ссылка", РР);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("cis", ИсключаемИзЗапроса);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПродукция = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПродукция.Следующий() Цикл
		// Вставить обработку выборки ВыборкаПродукция
	
		ВыборкаСерийныйНомер = ВыборкаПродукция.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ВыборкаСерийныйНомер.Следующий() Цикл
			//Если ИсключаемИзЗапроса.НайтиПоЗначению(ВыборкаСерийныйНомер.СерийныйНомер)=Неопределено Тогда
				// Вставить обработку выборки ВыборкаСерийныйНомер
				Добав_1=СюдаДобавить.Найти(ВыборкаСерийныйНомер.СерийныйНомер,"cis");
				Если   Добав_1=Неопределено Тогда
						//ИсключаемИзЗапроса.Добавить(ВыборкаСерийныйНомер.СерийныйНомер);
						Добав_1=СюдаДобавить.Добавить();
				Конецесли;
				
				//Если Не ЗначениеЗаполнено(Добав_1.НаименованиеТовара) Тогда
					Добав_1.GTIN=дополнитьСтроку(xmlString(ВыборкаСерийныйНомер.Продукция.gtin));
					Добав_1.НаименованиеТовара=ВыборкаСерийныйНомер.Продукция;
				//КонецЕсли;
					Добав_1.cis=ВыборкаСерийныйНомер.СерийныйНомер;
				Добав_1.ДокументКорректировки=Объект.Ссылка;
					Добав_1.КоличествоКМ_ЭмитированоПрограммно=Добав_1.КоличествоКМ_ЭмитированоПрограммно+ВыборкаСерийныйНомер.Эмитировано;
					Добав_1.КоличествоКМ_в_ОборотеПрограммно=Добав_1.КоличествоКМ_в_ОборотеПрограммно+ВыборкаСерийныйНомер.Вобороте;
					Добав_1.Резерв=Добав_1.Резерв+ВыборкаСерийныйНомер.Резерв;  
					Добав_1.КоличествоКМ_До_ЭмитированоПрограммно=Добав_1.КоличествоКМ_До_ЭмитированоПрограммно+ВыборкаСерийныйНомер.Получены;  
			//КонецЕсли;

		КонецЦикла;
	КонецЦикла;
	
	//СюдаДобавить.Свернуть("cis,");
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Если СюдаДобавить.Количество()>0 ТОгда
		РегДв=РегистрыСведений.СерийныеНомера_ХамелеонЦРПТ.СоздатьНаборЗаписей();
		РегДв.Загрузить(СюдаДобавить);
		РегДв.Записать(Ложь);
	Конецесли;
	
 	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СерийныеНомера_ХамелеонЦРПТ.GTIN,
		|	СУММА(СерийныеНомера_ХамелеонЦРПТ.КоличествоКМ_Эмитировано) КАК КоличествоКМ_Эмитировано,
		|	СУММА(СерийныеНомера_ХамелеонЦРПТ.КоличествоКМ_в_Обороте) КАК КоличествоКМ_в_Обороте,
		|	СУММА(СерийныеНомера_ХамелеонЦРПТ.КоличествоКМ_выбыло) КАК КоличествоКМ_выбыло,
		|	СУММА(СерийныеНомера_ХамелеонЦРПТ.КоличествоКМ_ЭмитированоПрограммно) КАК КоличествоКМ_ЭмитированоПрограммно,
		|	СУММА(СерийныеНомера_ХамелеонЦРПТ.КоличествоКМ_в_ОборотеПрограммно) КАК КоличествоКМ_в_ОборотеПрограммно,
		|	СУММА(СерийныеНомера_ХамелеонЦРПТ.КоличествоКМ_выбылоПрограммно) КАК КоличествоКМ_выбылоПрограммно,
		|	СУММА(СерийныеНомера_ХамелеонЦРПТ.Резерв) КАК Резерв,
		|	СУММА(СерийныеНомера_ХамелеонЦРПТ.Резерв1С) КАК Резерв1С
		|ИЗ
		|	РегистрСведений.СерийныеНомера_ХамелеонЦРПТ КАК СерийныеНомера_ХамелеонЦРПТ
		|ГДЕ
		|	СерийныеНомера_ХамелеонЦРПТ.ДокументКорректировки = &ДокументКорректировки
		|
		|СГРУППИРОВАТЬ ПО
		|	СерийныеНомера_ХамелеонЦРПТ.GTIN";
	
	Запрос.УстановитьПараметр("ДокументКорректировки", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Объект.Товары.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Добав=объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Добав,ВыборкаДетальныеЗаписи);
		Попытка
			Добав.GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(ВыборкаДетальныеЗаписи.Gtin));
		Исключение
		КонецПопытки;
		Добав.КодТНВЭД=Добав.GTIN.КодТНВЭД;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

   
	

КонецПроцедуры


&НаКлиенте
Процедура СоздатьАвтокорректировкуПоДаннымGTIN(Команда) Экспорт
 	// Вставить содержимое обработчика.
	
	РР=Новый Массив;
	Для Каждого Стр_1 Из Объект.ФильтрПоGTIN Цикл
		РР.Добавить(Стр_1.GTIN);
	Конеццикла;
	
	ПослеВыбораПродукций(РР,Неопределено);
	
КонецПроцедуры


&НаКлиенте
Процедура ЗакачатьДоЭмитирования(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	Thumbprint_1=ПолучитьИзПользователя();	
	
	Если Thumbprint_1.НаименованиеСтенда="Табак"
		ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
		Тогда
		
		ОбновитьОстаткиПоКМТабак(Thumbprint_1);
		
		Возврат;
	КонецЕслИ;
	
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика"  Тогда
		
		ОбновитьОстаткиПоКМЛекарства(Thumbprint_1);
		
		Возврат;
	КонецЕслИ;
	
	
	
	Объект.ТипОстаткаПоследний=ПредопределенноеЗначение("Перечисление.СпособВыпускаТоваров_ХамелеонЦРПТ.ПроизведенВРФ");
	ОБъект.cis="";
	Объект.dataemission="";
				
	
	Этаформа.Записать();
	
	
	ОстаткиОбороты(Thumbprint_1,,,"EMITTED");
	//ОстаткиЗагрузить(Thumbprint_1,"LOCAL","LP_INTRODUCE_GOODS");
	
	
КонецПроцедуры

