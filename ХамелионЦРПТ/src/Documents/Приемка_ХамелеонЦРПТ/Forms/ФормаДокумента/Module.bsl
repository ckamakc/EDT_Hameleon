&НаКлиенте
Перем БылаБлокировка;

&НаКлиенте
Процедура ВывестиОтчет(Команда)
	// Вставить содержимое обработчика.
	МассивКМ=Новый СписокЗначений;
	Для Каждого Стр Из Элементы.СерийныеНомера.ВыделенныеСтроки Цикл
		Стр_1=Объект.СерийныеНомера.НайтиПоИдентификатору(Стр);
		Если ЗначениеЗаполненО(Стр_1.cis) Тогда
			МассивКМ.Добавить(Стр_1.cis);
		КонецЕсли;
		
	Конеццикла;
	
	Форм=ОткрытьФорму("Отчет.ОтчетПоКМ_ХамелеонЦРПТ.Форма.ФормаОтчета");
	Форм.ПрименитьОтбор(МассивКМ);
	
КонецПроцедуры


Процедура РекурсияПодсчета_Суммы(Стр_2,КоличествоКМ)
	
	Если Стр_2.ПолучитьЭлементы().Количество()=0 Тогда
		КоличествоКМ=КоличествоКМ+1;
		Стр_2.Количество=1;
	Иначе
		Для Каждого Стр_3 Из Стр_2.ПолучитьЭлементы() Цикл
			РекурсияПодсчета_Суммы(Стр_3,Стр_3.Количество);
			КоличествоКМ=КоличествоКМ+Стр_3.Количество;
		Конеццикла;
	КонецЕсли;
	
КонецПроцедуры


Процедура ПодсчетКоличестваВДереве()
	Для Каждого Стр_1 Из ДеревоКМ.ПолучитьЭлементы() Цикл
		
		РекурсияПодсчета_Суммы(Стр_1,Стр_1.Количество);
		
	Конеццикла;
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьСтатусПоФармацевтике(Thumbprint_1,МассивКМ)
	
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
					Иначе
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		
		
		

				СРегистра="";///Thumbprint_1.Thumbprint_1;
				Если Не ЗначениеЗаполнено(СРегистра) тогда
					Попытка
						СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
					исключение
						СРегистра=Неопределено;
					КонецПопытки;
				КонецЕсли;
				Если не ЗначениеЗаполнено(Срегистра) тогда
					Возврат;
				КонецЕсли;
				
				
		Пока МассивКМ.Количество()>0 Цикл
		 	МассивОпределям=Новый Массив;
			МассивОпределям.Очистить();
			КоличествоПр=Мин(1,МассивКМ.Количество());
			Для Сч=1 По КоличествоПр Цикл
				МассивОпределям.Добавить(МассивКМ[0]);
				МассивКМ.Удалить(0);
			Конеццикла;
		 	ВернутьСтатусы=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьСтатусыПоМассивуКМ_Лекарства(Thumbprint_1,Срегистра,МассивОпределям);
			
			Для Каждого Стр_1 Из ВернутьСтатусы Цикл
				Нстрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1.cis));
				Нстрок[0].Статус=Стр_1.Статус;
			Конеццикла;
			
			
		Конеццикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьстатусыКМ_Марки(МассивКМ)
	
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
	
	
	СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
	СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
	Если Не ЗначениеЗаполнено(СРегистра)  Тогда
		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
	Иначе
		   	
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
			Прокси=Новый ИнтернетПрокси;
			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		Иначе
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
				
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
		Если Ответ.КодСостояния<>200 Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Срегистра) Тогда
		Сообщить("Не удалось подключиться к ЦРПТ");
		Возврат;
	КонецЕсли;

		
		
	
	
   НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();

   Если НаСервере Тогда
	// Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Стр_1.Марка);  
	Иначе
		Пока МассивКМ.Количество()>0 Цикл
		 	МассивОпределям=Новый Массив;
			МассивОпределям.Очистить();
			КоличествоПр=Мин(50,МассивКМ.Количество());
			Для Сч=1 По КоличествоПр Цикл
				Если Thumbprint_1.НаименованиеСтенда="Табак"
					ИЛИ 
					Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
					Тогда
					НомерКМ=        МассивКМ[0];
					Если Сред(НомеркМ,1,3)="010" Тогда
						НомерКМ="("+Сред(НомерКМ,1,2)+")"+Сред(НомерКМ,3,14)+"("+Сред(НомерКМ,17,2)+")"+Сред(НомерКМ,19);
						
					КонецЕсли;
					
					МассивОпределям.Добавить(НомерКМ);
					
				Иначе
				
					МассивОпределям.Добавить(МассивКМ[0]);
				КонецЕсли;
				МассивКМ.Удалить(0);
			Конеццикла;
		 	ВернутьСтатусы=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьСтатусыПоМассивуКМ(Thumbprint_1,Срегистра,МассивОпределям);
			
			Для Каждого Стр_1 Из ВернутьСтатусы Цикл
				Нстрок=Объект.Марки.НайтиСтроки(Новый Структура("Марка",Стр_1.cis));
				Нстрок[0].Статус=Стр_1.Статус;
			Конеццикла;
			
			
		Конеццикла;
		
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьстатусыКМ(МассивКМ)
	
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
		
		ОпределитьСтатусПоФармацевтике(Thumbprint_1,МассивКМ);
		
		Возврат;
				 
				 
	КонецЕсли;	
	

	СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
	СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
	Если Не ЗначениеЗаполнено(СРегистра)  Тогда
		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
	Иначе
		   	
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
			Прокси=Новый ИнтернетПрокси;
			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		Иначе
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
				
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
		Если Ответ.КодСостояния<>200 Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Сообщить("Не удалось подключиться к ЦРПТ");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Срегистра) Тогда
		Возврат;
	КонецЕсли;

		
		
	
	
   НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();

   Если НаСервере Тогда
	// Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Стр_1.Марка);  
	Иначе
		Пока МассивКМ.Количество()>0 Цикл
		 	МассивОпределям=Новый Массив;
			МассивОпределям.Очистить();
			КоличествоПр=Мин(50,МассивКМ.Количество());
			Для Сч=1 По КоличествоПр Цикл
				Если Thumbprint_1.НаименованиеСтенда="Табак"
					ИЛИ 
					Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
					Тогда
					НомерКМ=        МассивКМ[0];
					Если Сред(НомеркМ,1,3)="010" Тогда
						НомерКМ="("+Сред(НомерКМ,1,2)+")"+Сред(НомерКМ,3,14)+"("+Сред(НомерКМ,17,2)+")"+Сред(НомерКМ,19);
						
					КонецЕсли;
					
					МассивОпределям.Добавить(НомерКМ);
					
				Иначе
				
					МассивОпределям.Добавить(МассивКМ[0]);
				КонецЕсли;
				МассивКМ.Удалить(0);
			Конеццикла;
		 	ВернутьСтатусы=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьСтатусыПоМассивуКМ(Thumbprint_1,Срегистра,МассивОпределям);
			
			Для Каждого Стр_1 Из ВернутьСтатусы Цикл
				Нстрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1.cis));
				Нстрок[0].Статус=Стр_1.Статус;
				Нстрок[0].ВОбороте=Стр_1.ВОбороте;
			Конеццикла;
			
			
		Конеццикла;
		
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИзПользователя(ИННПоставщика="")
	ИННПоставщика=Объект.Поставщик.Инн;
	
	Если НЕ ЗначениеЗаполнено(объект.ТекущийПользователь) ИЛИ (Объект.Организация.ИНН=ТекущийПользователь.Организация.ИНН 
		И Объект.ТекущийПользователь.СайтыВходаВСистему=ТекущийПользователь.СайтыВходаВСистему) Тогда
		Возврат Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(Текущийпользователь);
	Иначе
		
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Пользователи_ХамелеонЦРПТ КАК Пользователи_ХамелеонЦРПТ
		|ГДЕ
		|	Пользователи_ХамелеонЦРПТ.Организация.ИНН = &Организация
		|	И Пользователи_ХамелеонЦРПТ.СайтыВходаВСистему = &СайтыВходаВСистему
		|	И НЕ Пользователи_ХамелеонЦРПТ.ПометкаУдаления ";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация.ИНН);
	Запрос.УстановитьПараметр("СайтыВходаВСистему", Объект.ТекущийПользователь.СайтыВходаВСистему);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НайтиПольз=Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		                      НайтиПольз=ВыборкаДетальныеЗаписи.Ссылка
	КонецЦикла;
	
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		
		//НайтиПольз=Справочники.Пользователи_ХамелеонЦРПТ.НайтиПоРеквизиту("Организация",Объект.Организация);
		Если ЗначениеЗаполнено(НайтиПольз) Тогда
			ТекущийПользователь=НайтиПольз;
			Возврат Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(НайтиПольз);
		КонецЕсли;
		
	КонецЕслИ;
	Возврат Неопределено;
КонецФункции

Процедура ЗапишемВРегистр_Акт(ТекстДокумент)
	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Объект.Ссылка);
	РегДв.Отбор.Вид.Установить("Акт о решении");
	Добав=РегДв.Добавить();
	Добав.Документ=ОБъект.Ссылка;
	Добав.Вид="Акт о решении";
	Добав.Файл=Новый ХранилищеЗначения(ТекстДокумент,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
КонецПроцедуры



Функция СформироватьXmlФайлИмпорт(Отказ=Ложь)
		Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();
		Чтен.ЗаписатьИмяСвойства("request_type");
		Чтен.ЗаписатьЗначение("ACCEPTANCE");
		Чтен.ЗаписатьИмяСвойства("release_order_number");
		Чтен.ЗаписатьЗначение(Объект.ДокументОтгрузки);
		
		Чтен.ЗаписатьИмяСвойства("accept_all");
		Чтен.ЗаписатьЗначение(Истина);
		
		//Чтен.ЗаписатьИмяСвойства("products");
		//Чтен.ЗаписатьНачалоМассива();
		//
		//Для Каждого Стр Из Объект.СерийныеНомера Цикл
		//	Чтен.ЗаписатьНачалоОбъекта();
		//	Если СтрДлина(Стр.cis)=18 Тогда
		//		Чтен.ЗаписатьИмяСвойства("uitu_code");
		//		Чтен.ЗаписатьЗначение(Стр.cis);
		//		Чтен.ЗаписатьИмяСвойства("product_description");
		//		Чтен.ЗаписатьЗначение(Стр.НаименованиеТовараСтрокой);
		//		Чтен.ЗаписатьИмяСвойства("product_cost");
		//		Чтен.ЗаписатьЗначение(xmlString(окр(Стр.Цена,2)));
		//		Чтен.ЗаписатьИмяСвойства("product_tax");
		//		Чтен.ЗаписатьЗначение(xmlString(Окр(Стр.НДС,2)));
		//		Чтен.ЗаписатьИмяСвойства("accepted");
		//		Если Отказ=Истина Тогда
		//			Чтен.ЗаписатьЗначение("false");
		//		Иначе
		//			Чтен.ЗаписатьЗначение("true");
		//			
		//		КонецЕслИ;
		//		Чтен.ЗаписатьКонецОбъекта();
		//		
		//	Иначе
		//		Чтен.ЗаписатьИмяСвойства("uit_code");
		//		Чтен.ЗаписатьЗначение(Стр.cis);
		//		Чтен.ЗаписатьИмяСвойства("product_description");
		//		Чтен.ЗаписатьЗначение(Стр.НаименованиеТовараСтрокой);
		//		Чтен.ЗаписатьИмяСвойства("product_cost");
		//		Чтен.ЗаписатьЗначение(xmlString(Окр(Стр.Цена,2)*100));
		//		Чтен.ЗаписатьИмяСвойства("product_tax");
		//		Чтен.ЗаписатьЗначение(xmlString(Окр(Стр.НДС,2)*100));
		//		Чтен.ЗаписатьИмяСвойства("accepted");
		//		Если Отказ=Истина Тогда
		//			Чтен.ЗаписатьЗначение("false");
		//		Иначе
		//			Чтен.ЗаписатьЗначение("true");
		//			
		//		КонецЕслИ;
		//		Чтен.ЗаписатьКонецОбъекта();
		//		
		//		
		//	КонецЕслИ;
		//Конеццикла;
		//Чтен.ЗаписатьКонецМассива();
		Чтен.ЗаписатьИмяСвойства("document_date");
		Чтен.ЗаписатьЗначение(Формат(Объект.ДатаВходящий,"ДФ=""гггг-ММ-ддT00:00:00""")+".000Z");
		Чтен.ЗаписатьИмяСвойства("transfer_date");
		Чтен.ЗаписатьЗначение(Формат(КонецДня(Объект.ДатаПолуччения),"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
		Чтен.ЗаписатьИмяСвойства("document_number");
		Если ЗначениеЗаполненО(Объект.НомерВходящий) Тогда
			Чтен.ЗаписатьЗначение(Объект.НомерВходящий);
		Иначе
			Чтен.ЗаписатьЗначение(Объект.Номер);
		КонецЕсли;
		
		Чтен.ЗаписатьИмяСвойства("trade_sender_inn");
		Чтен.ЗаписатьЗначение(Объект.Поставщик.ИНН);
		Чтен.ЗаписатьИмяСвойства("trade_owner_inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		Чтен.ЗаписатьИмяСвойства("trade_recipient_inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		
		
		Чтен.ЗаписатьИмяСвойства("trade_sender_name");
		Чтен.ЗаписатьЗначение(Объект.Поставщик.Наименование);
		Чтен.ЗаписатьИмяСвойства("rade_owner_name");
		Чтен.ЗаписатьЗначение(Объект.Организация.Наименование);
		Чтен.ЗаписатьИмяСвойства("turnover_type");
		
		Если ЗначениеЗаполнено(Объект.ВидТоварооборота) тогда
			Чтен.ЗаписатьЗначение(xmlString(Объект.ВидТоварооборота));
		Иначе
		
			Чтен.ЗаписатьЗначение("SELLING");
		КонецЕсли;
		Чтен.ЗаписатьИмяСвойства("acceptance_date");
		Чтен.ЗаписатьЗначение(Формат(КонецДня(Объект.ДатаПолуччения),"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
		Чтен.ЗаписатьКонецОбъекта();
					
		
		
		Текст=Чтен.Закрыть();
	
		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Акт(Текст);
		КонецЕсли;
	
	
	Возврат Текст;
	Текст="
	|
	|<reception_signs action_id=""11"" version=""1.02"">
	|<session_ui>"+Объект.ДокументОтгрузки+"</session_ui>  
	|<subject_inn>"+Объект.Поставщик.ИНН+"</subject_inn>  
	|<recipient_inn>"+Объект.Организация.ИНН+"</recipient_inn>  
	|<owner_inn>"+Объект.Поставщик.ИНН+"</owner_inn>  
	|<sender_date>"+Формат(Объект.Дата,"ДФ=""дд.ММ.гггг""")+"</sender_date>  
	|<recipient_date>"+Формат(Объект.ДатаПолуччения,"ДФ=""дд.ММ.гггг""")+"</recipient_date>  
	|<transfer_date>"+Формат(Объект.ДатаПолуччения,"ДФ=""дд.ММ.гггг""")+"</transfer_date>  
	|<move_doc_num>"+Объект.НомерВходящий+"</move_doc_num>  
	|<move_doc_date>"+Формат(Объект.ДатаВходящий,"ДФ=""дд.ММ.гггг""")+"</move_doc_date>  
	|<turnover_type>"+"1"+"</turnover_type>  
	|<order_details>";
	Если Отказ Тогда
		Ассепт="false"
	else
		Ассепт="true"
	Endif;
		
	
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		
//		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
//		НСтр=НСтр[0];

		
	    Текст=Текст+"
		|<signs>  
		|<sign_uit accept_type="""+Ассепт+""" сost="""+xmlString(Стр.Цена)+""" vat_value="""+xmlString(Окр(Стр.НДС,2))+""">
		|<uit>"+Сред(Стр.cis,1,31)+"</uit>
		|</sign_uit>
		|</signs> ";
		
		
		
	КонецЦикла;
	    Текст=Текст+"
		|</order_details>
		|</reception_signs>
		|";
		
	
Возврат Текст; 	
КонецФункции

Процедура ЗапишемВРегистр_Ответ(ТекстДокумент)
	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Объект.Ссылка);
	РегДв.Отбор.Вид.Установить("Получили ответ");
	Добав=РегДв.Добавить();
	Добав.Документ=ОБъект.Ссылка;
	Добав.Вид="Получили ответ";
	Добав.Файл=Новый ХранилищеЗначения(ТекстДокумент,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
КонецПроцедуры

Функция НеПрошлаПроверкаИмпорт(Файл_1) Экспорт
	//	Возврат Ложь;
	КаталогВременногоФайла=КаталогВременныхФайлов()+"new_maket_V21\";
	СоздатьКаталог(КаталогВременногоФайла);
		
	//Файл=ПолучитьИмяВременногоФайла("xml");
	Файл=ПолучитьИмяВременногоФайла("xml");
	Файл=СтрЗаменить(Файл,КаталогВременныхФайлов(),КаталогВременногоФайла);
	
	
	Файл_2=Новый ТекстовыйДокумент;
	Файл_2.ДобавитьСтроку(Файл_1);
	Файл_2.Записать(Файл,КодировкаТекста.UTF8);
	
	//ИмяВремен=ПолучитьИмяВременногоФайла("xsd");
	//МакетXDTO.Записать(ИмяВремен,КодировкаТекста.ANSI);
	//dictionary_v20=ПолучитьИмяВременногоФайла("xsd");
	//dictionary_v20=КаталогВременногоФайла+"dictionary_v21.xsd";
	
	dictionary_v20=ПолучитьИмяВременногоФайла("xsd");
	dictionary_v20=СтрЗаменить(dictionary_v20,КаталогВременныхФайлов(),КаталогВременногоФайла);
	
	
	Текст=Документы.Приемка_ХамелеонЦРПТ.ПолучитьМакет("ПринятьТовар");
	Текст.Записать(dictionary_v20,КодировкаТекста.UTF8);
	
	
	
	XMLDoc = New COMObject("Msxml2.DOMDocument.6.0");
    XMLDoc.Async = false;
    XMLDoc.ValidateOnParse = true;
    SchemaCache = New COMObject("Msxml2.XMLSchemaCache.6.0");
	SchemaCache.Add("",dictionary_v20);
	
	XMLDoc.Schemas = SchemaCache;
    XMLDoc.SetProperty("MultipleErrorMessages", true);
    XMLDoc.Load(Файл);
    ErrObj = XMLDoc.ParseError;
	Ошибка="";
    If ErrObj.ErrorCode <> 0 Then
        For Each ErrItem In ErrObj.AllErrors Do 
            //Message("Ошибка : " + ErrItem.Reason + " " + ErrItem.SrcText);
			Ошибка=Ошибка+"В строке № "+Erritem.line+" в колонке № "++Erritem.linepos+" ошибка: "+ErrItem.Reason+" "+ErrItem.SrcText+Символы.ПС+Символы.ПС;
		EndDo;
//		УдалитьФайлы(ИмяВремен);
		Сообщить(Ошибка);
		Возврат Истина;
    EndIf;
	УдалитьФайлы(Файл);
	УдалитьФайлы(dictionary_v20);
	
	Возврат Ложь;
КонецФункции


&НаСервереБезКонтекста
Процедура ОчиститьТокенСрегистра(ТТ)
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(ТТ,"")
КонецПроцедуры

Функция ЗагрузканаСервереПринять(Thumbprint_1,СРегистра,УжеОтправили,Тело)
Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				
						
 			что=Thumbprint_1.что;
	
				
				
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/acceptance/create?pg="+Что);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		
		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Ответ(Текст1);
		КонецЕсли;
			
		
		
		Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
			ИЛИ Ответ.КодСостояния=201 
			Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				Объект._Order_ID=Текст1;
				
		ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
				Если УжеОтправили=Истина Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
				Иначе
					Возврат Ложь
				КонецЕсли
		Иначе
			//	Если УжеОтправили=Истина Тогда
					Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
						Попытка
							//ЧтениеJSON = Новый ЧтениеJSON;
							//ЧтениеJSON.УстановитьСтроку(Текст1);
							NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
							попытка
								
								Объект.ОшибкаОтправки=NNN.error_message;
							Исключение
								Попытка
									Объект.ОшибкаОтправки=NNN.error_description;
									Если NNN.error="access_denied" Тогда
										Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
									КонецЕсли;
								Исключение
								КонецПопытки;
								
							КонецПопытки;
							
						Исключение
						КонецПопытки;
			//	Иначе
			//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
			//		ОтправитьЗаявку(Команда,Истина)			
			//	КонецЕсли
		КонецЕсли;
	
	Возврат Истина
КонецФункции


Функция СформироватьУПД()
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("status");
	Чтен.ЗаписатьЗначение(4);
	
	
	Чтен.ЗаписатьИмяСвойства("content");
	
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("signer");
	
	Чтен.ЗаписатьНачалоОбъекта();
	
	
	Чтен.ЗаписатьИмяСвойства("inn");
	Чтен.ЗаписатьЗначение(Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Объект.Организация.ИНН,12,"0"));
//	Чтен.ЗаписатьИмяСвойства("name");
//	Чтен.ЗаписатьЗначение(Объект.Организация.Наименование);
	Если СтрДлина(Объект.Организация.ИНН)=12 Тогда
		Наименование=Объект.Организация.Наименование;
		
		Если Найти(Наименование,"ИП")>0 Тогда
			Наименование=СокрЛП(Сред(Наименование,3));
		КонецЕслИ;
		Наименование_1=Сред(Наименование,1,Найти(Наименование," "));
		Чтен.ЗаписатьИмяСвойства("surname");
		Чтен.ЗаписатьЗначение(Наименование_1);
		
		Наименование=Сред(Наименование,Найти(Наименование," ")+1);
		
		Наименование_1=Сред(Наименование,1,Найти(Наименование," "));
		Чтен.ЗаписатьИмяСвойства("name");
		Чтен.ЗаписатьЗначение(Наименование_1);
		
		Наименование=Сред(Наименование,Найти(Наименование," ")+1);
		Если ЗначениеЗаполнено(Наименование) тогда 
			Чтен.ЗаписатьИмяСвойства("patronymic");
			Чтен.ЗаписатьЗначение(Наименование);
		КонецЕсли;
		
		
	Иначе		
		Чтен.ЗаписатьИмяСвойства("name");
		Чтен.ЗаписатьЗначение(Объект.Организация.Наименование);
	КонецЕсли;
	
		Наименование=Объект.ТекущийПользователь.КонтактноеЛицо;
		
		Наименование_1=Сред(Наименование,1,Найти(Наименование," "));
		Чтен.ЗаписатьИмяСвойства("surname");
		Чтен.ЗаписатьЗначение(Наименование_1);
		
		Наименование=Сред(Наименование,Найти(Наименование," ")+1);
		
		Наименование_1=Сред(Наименование,1,Найти(Наименование," "));
		Чтен.ЗаписатьИмяСвойства("name");
		Чтен.ЗаписатьЗначение(Наименование_1);
		
		Наименование=Сред(Наименование,Найти(Наименование," ")+1);
		Если ЗначениеЗаполнено(Наименование) тогда 
			Чтен.ЗаписатьИмяСвойства("patronymic");
			Чтен.ЗаписатьЗначение(Наименование);
		КонецЕсли;
		
	
	
	Чтен.ЗаписатьИмяСвойства("status");
	Чтен.ЗаписатьЗначение(5);
	
	Чтен.ЗаписатьИмяСвойства("details");
	Чтен.ЗаписатьЗначение("");
	
	Чтен.ЗаписатьИмяСвойства("grounds");
	Чтен.ЗаписатьЗначение("Должностные обязанности");
	
	Чтен.ЗаписатьИмяСвойства("authority");
	Чтен.ЗаписатьЗначение(1);
	
	Чтен.ЗаписатьКонецОбъекта();
	
	
	Чтен.ЗаписатьИмяСвойства("author");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("name");
	Чтен.ЗаписатьЗначение(Объект.Организация.Наименование+", ИНН: "+Объект.Организация.ИНН);
	Чтен.ЗаписатьКонецОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("acceptance");
	Чтен.ЗаписатьНачалоОбъекта();
	
	
	Чтен.ЗаписатьИмяСвойства("content_code");
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("code");
	Чтен.ЗаписатьЗначение(1);
	
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецОбъекта();
	
	
//	Чтен.ЗаписатьИмяСвойства("signer");
//	Чтен.ЗаписатьНачалоОбъекта();
	
	//Чтен.ЗаписатьИмяСвойства("status");
	//Чтен.ЗаписатьЗначение(1);
	
	//Чтен.ЗаписатьИмяСвойства("grounds");
	//Чтен.ЗаписатьЗначение("Должностные обязанности");
	//Чтен.ЗаписатьИмяСвойства("authority");
	//Чтен.ЗаписатьЗначение(0);
		
//	Чтен.ЗаписатьКонецМассива();	
	
	
	Тело=Чтен.Закрыть();
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Акт(Тело);
		КонецЕсли;
		
	Возврат Тело;
	
КонецФункции

&НаКлиенте
Процедура      ПродолжимДальшенаКлиенте(HTTPСервисЗапрос,Thumbprint_1,СерийныйНомер,СРегистра )
					HTTPЗапрос=Новый HTTPЗапрос("edo-api/incoming-documents/"+Объект.ДокументОтгрузки+"/events/"+Объект._Order_ID+"/content");
				
				
				
				//HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
				
					

				
				HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
				HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
				HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
				HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
				//HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ +"/documents/incoming/list");
				
				
				
				HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");
				
				//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
				HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
				HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
				
				
				
			//	Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
				Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
				"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


				HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
				
				//Тело="documentType=LP_ACCEPT_GOODS_XML";
			//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.ANSI);
				//Текст1 =Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.ANSI);//Base64Строка(Ответ.ПолучитьТелоКакДвоичныеДанные());
				Текст1=Base64Строка(Ответ.ПолучитьТелоКакДвоичныеДанные());
				
				//Xml=Новый ЧтениеXML;
				//Xml.УстановитьСтроку(Текст1);
				
				Подписанный="";
				//Пока xml.Прочитать() Цикл
				//	Если xml.ТипУзла=ТипУзлаXML.НачалоЭлемента И xml.Имя="ЭП" Тогда
				//		xml.Прочитать();
				//		Подписанный=СокрЛП(xml.Значение);
				//		Прервать;;
				//		
				//	КонецЕсли;
				//	
				//Конеццикла;
				
				Подписанный="";
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,Текст1,Thumbprint_1,Подписанный,,Истина);
				
				//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
				//Подписанный,КодировкаТекста.UTF8,Ложь));
				
							Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
						Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
						Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				
				
			//	Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
			//	Текст1,КодировкаТекста.UTF8,Ложь));
			//				Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
			//			Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				//		Добав=СтрЗаменить(Добав,"\r\n","");

				//Тело=Добав;
				
				
				HTTPЗапрос=Новый HTTPЗапрос("edo-api/incoming-documents/"+Объект.ДокументОтгрузки+"/events/"+Объект._Order_ID+"/signature");
				
				
				HTTPЗапрос.УстановитьТелоИзСтроки(Подписанный,КодировкаТекста.ANSI);
				
				HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");
		//		HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
				
					

				
				HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
				HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
				HTTPЗапрос.Заголовки.Вставить("Content-Encoding","base64");
				HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(стрДлина(Подписанный),"ЧГ="));
				HTTPЗапрос.Заголовки.Вставить("Content-Type","text/plain");
				Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
				"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


				HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
				HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
				HTTPЗапрос.Заголовки.Вставить("Origin","https://"+Thumbprint_1.АдресКАПИ);
				HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ+"/documents/outgoing/list");
				
				
				
				
				
			
				HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
				HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
				HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
				
				
				
				
			//	Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
				
				//Тело="documentType=LP_ACCEPT_GOODS_XML";
			//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
				Текст1=Ответ.ПолучитьТелоКакСтроку("windows-1251");
				
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюОбУПДПриемка(Объект.ДокументОтгрузки,ЗагрузатьНаименованиеПриПриемке,ЗаписыватьДанныеПриОтправкеЗаказа,ТекущийПользователь,HTTPСервисЗапрос,СерийныйНомер,СРегистра,Thumbprint_1) ;
КонецПроцедуры

Функция ВернутьУНИКУМ()
	Возврат xmlString(Новый УникальныйИдентификатор())
КонецФункции



Функция ФормируемXMLФармацевтика(Thumbprint_1,СРегистра)
	//МассивТекстов=Новый Массив;

		//Текст = Сформировать311_XSD(session_ui,НСтрок);
		
Если Объект.ОбратныйАкцепт Тогда
	Если НЕ ОБъект._702Схема тогда			
			
			
		Чтение=Новый ЗаписьXML;
		Чтение.УстановитьСтроку("UTF-8");
		Чтение.ЗаписатьОбъявлениеXML();
		Чтение.ЗаписатьНачалоЭлемента("documents");
		Чтение.ЗаписатьАтрибут("version","1.35");
		
		Чтение.ЗаписатьНачалоЭлемента("receive_order");
		Чтение.ЗаписатьАтрибут("action_id","416");
		Чтение.ЗаписатьНачалоЭлемента("subject_id");
		Чтение.ЗаписатьТекст(Объект.ДоговорОрганизации.РегистрационныйНомер);
		Чтение.ЗаписатьКонецЭлемента();
		
		Чтение.ЗаписатьНачалоЭлемента("shipper_id");
		Чтение.ЗаписатьТекст(Объект.ДоговорПоставщика.РегистрационныйНомер);
		Чтение.ЗаписатьКонецЭлемента();
		
		Чтение.ЗаписатьНачалоЭлемента("operation_date");
		//Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
			
			//Время=ПолучитьЧасовойПоясИнформационнойБазы();
		Прибавка="Z";
		Если ЗначениеЗаполнено(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств) тогда
			Прибавка=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств,2,"0");
			Если Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств>0 Тогда
				     Прибавка="+"+Прибавка+":00";
			Иначе
				     Прибавка="-"+Прибавка+":00";
			Конецесли;
		Конецесли;
		
			
			Чтение.ЗаписатьТекст(Формат(ТекущаяДата(),"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+Прибавка);
///		Иначе
	//		Чтение.ЗаписатьТекст(Формат(ТекущаяДата(),"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"Z");
		
	//	конецесли;
		
		Чтение.ЗаписатьКонецЭлемента();
		
		Чтение.ЗаписатьНачалоЭлемента("doc_num");
			
		Чтение.ЗаписатьТекст(Объект.НомерВходящий);
		
		Чтение.ЗаписатьКонецЭлемента();
		
		Чтение.ЗаписатьНачалоЭлемента("doc_date");
		Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
			
			//Время=ПолучитьЧасовойПоясИнформационнойБазы();
			
			Чтение.ЗаписатьТекст(Формат(Объект.ДатаВходящий,"ДФ=""дд.ММ.гггг"""));
		Иначе
			Чтение.ЗаписатьТекст(Формат(Объект.ДатаВходящий,"ДФ=""дд.ММ.гггг"""));
		
		конецесли;
		
		
		Чтение.ЗаписатьКонецЭлемента();
				
		
		Чтение.ЗаписатьНачалоЭлемента("receive_type");
			
		Чтение.ЗаписатьТекст(xmlString("1"));
		
		Чтение.ЗаписатьКонецЭлемента();
		
		Чтение.ЗаписатьНачалоЭлемента("source");
			
		Чтение.ЗаписатьТекст("1");
		
		Чтение.ЗаписатьКонецЭлемента();
		
		Чтение.ЗаписатьНачалоЭлемента("contract_type");
			
		Чтение.ЗаписатьТекст("1");
		
		Чтение.ЗаписатьКонецЭлемента();
		
		
		
		Чтение.ЗаписатьНачалоЭлемента("order_details");
		
		
	//	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));

	Для Каждого Стр_c Из Объект.Марки Цикл
		Штрих=Стр_c.Марка;
		Если СтрДлина(Штрих)=18 Тогда
			
			Чтение.ЗаписатьНачалоЭлемента("union");
			Чтение.ЗаписатьНачалоЭлемента("sscc_detail");
			Чтение.ЗаписатьНачалоЭлемента("sscc");
			
			Чтение.ЗаписатьТекст(Штрих);
			
			Чтение.ЗаписатьКонецЭлемента();
			
			Стр_1_1=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_c.НомерСтрокиСвязи));
			Если Стр_1_1.Количество()>0 Тогда
				Стр_1=Стр_1_1[0];
			
				Чтение.ЗаписатьНачалоЭлемента("detail");
				Чтение.ЗаписатьНачалоЭлемента("gtin");
				Чтение.ЗаписатьТекст(ДополнитьСтроку(xmlString(Стр_1.gtin.gtin)));
				Чтение.ЗаписатьКонецЭлемента();
				
				Чтение.ЗаписатьНачалоЭлемента("series_number");
				Если ЗначениеЗаполнено(Стр_c.СерийныйНомер) Тогда
					Чтение.ЗаписатьТекст(Стр_c.СерийныйНомер);
				Иначе
					Чтение.ЗаписатьТекст(xmlString(Стр_c.ПолучитьИдентификатор()+1));
				КонецЕсли;
				
				Чтение.ЗаписатьКонецЭлемента();
				
				Чтение.ЗаписатьНачалоЭлемента("cost");
				
		//		Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
		//			Цена=Окр((Стр_1.Цена*Стр_1.КоличествоКМ)/Стр_1.КоличествоНомеровКМ,2);
		//		Иначе
					Цена=Стр_1.Цена;
					
		//		КонецЕсли;
				
				Если ЗначениеЗаполнено(Цена) тогда
					Чтение.ЗаписатьТекст(xmlString(Цена));
				Иначе
					Если Стр_1.КоличествоКМ<>0 Тогда
						Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.Сумма/Стр_1.КоличествоКМ,2)));
					КонецЕсли;
				КонецЕсли;
				Чтение.ЗаписатьКонецЭлемента();
				
				Если ЗначениеЗАполнено(Стр_1.НДС) ТОгда
					
					Чтение.ЗаписатьНачалоЭлемента("vat_value");
					
					Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
						КоличествоКМ=Стр_1.КоличествоНомеровКМ;
					Иначе
						КоличествоКМ=Стр_1.КоличествоКМ;
						
					КонецЕслИ;
					
					Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.НДС/КоличествоКМ,2)));
					Чтение.ЗаписатьКонецЭлемента();
					
				КонецЕсли;
				//Чтение.ЗаписатьКонецЭлемента();
				Чтение.ЗаписатьКонецЭлемента();
				    Чтение.ЗаписатьКонецЭлемента();
			
				

			////s	Чтение.ЗаписатьКонецЭлемента();
				
				Чтение.ЗаписатьНачалоЭлемента("cost");
				
		//		Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
		//			Цена=Окр((Стр_1.Цена*Стр_1.КоличествоКМ)/Стр_1.КоличествоНомеровКМ,2);
		//		Иначе
					Цена=Стр_1.Цена;
					
		//		КонецЕсли;
				
				Если ЗначениеЗаполнено(Цена) тогда
					Чтение.ЗаписатьТекст(xmlString(Цена));
				Иначе
					Если Стр_1.КоличествоКМ<>0 Тогда
						Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.Сумма/Стр_1.КоличествоКМ,2)));
					КонецЕсли;
				КонецЕсли;
				Чтение.ЗаписатьКонецЭлемента();
				
				Если ЗначениеЗАполнено(Стр_1.НДС) ТОгда
					
					Чтение.ЗаписатьНачалоЭлемента("vat_value");
					
					Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
						КоличествоКМ=Стр_1.КоличествоНомеровКМ;
					Иначе
						КоличествоКМ=Стр_1.КоличествоКМ;
						
					КонецЕслИ;
					
					Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.НДС/КоличествоКМ,2)));
					Чтение.ЗаписатьКонецЭлемента();
					
				КонецЕсли;
				
			 КонецЕсли;
			//	Чтение.ЗаписатьНачалоЭлемента("sscc");
				
		Иначе
			Чтение.ЗаписатьНачалоЭлемента("union");
			Штрих=Стр_c.Марка;
			Чтение.ЗаписатьНачалоЭлемента("sgtin");
			
			Если Сред(Штрих,1,2)="01" ТОгда
				Штрих=Сред(Штрих,3,14)+Сред(Штрих,19);
			КонецЕсли;
			
			Чтение.ЗаписатьТекст(Штрих);
			
			Чтение.ЗаписатьКонецЭлемента();
		////s	Чтение.ЗаписатьКонецЭлемента();
			
			Стр_1_1=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_c.НомерСтрокиСвязи));
			Если Стр_1_1.Количество()>0 Тогда
				Стр_1=Стр_1_1[0];
			
	//		Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
	//			Цена=Окр((Стр_1.Цена*Стр_1.КоличествоКМ)/Стр_1.КоличествоНомеровКМ,2);
	//		Иначе
				Цена=Стр_1.Цена;
				
	//		КонецЕсли;
						Чтение.ЗаписатьНачалоЭлемента("cost");

			Если ЗначениеЗаполнено(Цена) тогда
				Чтение.ЗаписатьТекст(xmlString(Цена));
			Иначе
				Если Стр_1.КоличествоКМ<>0 Тогда
					Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.Сумма/Стр_1.КоличествоКМ,2)));
				КонецЕсли;
			КонецЕсли;
			Чтение.ЗаписатьКонецЭлемента();
			
			Если ЗначениеЗАполнено(Стр_1.НДС) ТОгда
				
				Чтение.ЗаписатьНачалоЭлемента("vat_value");
				
				Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
					КоличествоКМ=Стр_1.КоличествоНомеровКМ;
				Иначе
					КоличествоКМ=Стр_1.КоличествоКМ;
					
				КонецЕслИ;
				
				Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.НДС/КоличествоКМ,2)));
				Чтение.ЗаписатьКонецЭлемента();
				
			КонецЕсли;
			КонецЕсли;
 		 КонецЕсли;
 	Чтение.ЗаписатьКонецЭлемента();
			
	Конеццикла;
		Чтение.ЗаписатьКонецЭлемента();
		Чтение.ЗаписатьКонецЭлемента();
		Чтение.ЗаписатьКонецЭлемента();
		
	Иначе        ////702 схема
			
		Чтение=Новый ЗаписьXML;
		Чтение.УстановитьСтроку("UTF-8");
		Чтение.ЗаписатьОбъявлениеXML();
		Чтение.ЗаписатьНачалоЭлемента("documents");
		Чтение.ЗаписатьАтрибут("version","1.35");
		
		Чтение.ЗаписатьНачалоЭлемента("posting");
		Чтение.ЗаписатьАтрибут("action_id","702");
		Чтение.ЗаписатьНачалоЭлемента("subject_id");
		Чтение.ЗаписатьТекст(Объект.ДоговорОрганизации.РегистрационныйНомер);
		Чтение.ЗаписатьКонецЭлемента();
		
		
		
		Чтение.ЗаписатьНачалоЭлемента("shipper_info");
		Чтение.ЗаписатьНачалоЭлемента("inn");
		Чтение.ЗаписатьТекст(Объект.Поставщик.ИНН);
		Чтение.ЗаписатьКонецЭлемента();
		Чтение.ЗаписатьНачалоЭлемента("kpp");
		Чтение.ЗаписатьТекст(Объект.Поставщик.КПП);
		Чтение.ЗаписатьКонецЭлемента();
		Чтение.ЗаписатьКонецЭлемента();
		
		Чтение.ЗаписатьНачалоЭлемента("operation_date");
		//Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
			
			//Время=ПолучитьЧасовойПоясИнформационнойБазы();
		Прибавка="Z";
		Если ЗначениеЗаполнено(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств) тогда
			Прибавка=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств,2,"0");
			Если Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств>0 Тогда
				     Прибавка="+"+Прибавка+":00";
			Иначе
				     Прибавка="-"+Прибавка+":00";
			Конецесли;
		Конецесли;
		
			
			Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+Прибавка);
		//Иначе
		//	Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"Z");
		
		//конецесли;
		
		Чтение.ЗаписатьКонецЭлемента();
		
		Чтение.ЗаписатьНачалоЭлемента("doc_num");
			
		Чтение.ЗаписатьТекст(Объект.НомерВходящий);
		
		Чтение.ЗаписатьКонецЭлемента();
		
		Чтение.ЗаписатьНачалоЭлемента("doc_date");
		Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
			
			//Время=ПолучитьЧасовойПоясИнформационнойБазы();
			
			Чтение.ЗаписатьТекст(Формат(Объект.ДатаВходящий,"ДФ=""дд.ММ.гггг"""));
		Иначе
			Чтение.ЗаписатьТекст(Формат(Объект.ДатаВходящий,"ДФ=""дд.ММ.гггг"""));
		
		конецесли;
		
		
		Чтение.ЗаписатьКонецЭлемента();
				
		
		//Чтение.ЗаписатьНачалоЭлемента("receive_type");
		//	
		//Чтение.ЗаписатьТекст(xmlString("1"));
		//
		//Чтение.ЗаписатьКонецЭлемента();
		//
		
		Чтение.ЗаписатьНачалоЭлемента("contract_type");
			
		Чтение.ЗаписатьТекст("1");
		
		Чтение.ЗаписатьКонецЭлемента();
		
		Чтение.ЗаписатьНачалоЭлемента("source");
		//	
		Чтение.ЗаписатьТекст("1");
		//
		Чтение.ЗаписатьКонецЭлемента();
		
		
		Чтение.ЗаписатьНачалоЭлемента("order_details");
		
		
	//	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));

	Для Каждого Стр_c Из Объект.Марки Цикл
		Штрих=Стр_c.Марка;
		Если СтрДлина(Штрих)=18 Тогда
		Чтение.ЗаписатьНачалоЭлемента("union");
			Чтение.ЗаписатьНачалоЭлемента("sscc_detail");
			Чтение.ЗаписатьНачалоЭлемента("sscc");
			
			Чтение.ЗаписатьТекст(Штрих);
			
			Чтение.ЗаписатьКонецЭлемента();
			
			Стр_1_1=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_c.НомерСтрокиСвязи));
			Если Стр_1_1.Количество()>0 Тогда
				Стр_1=Стр_1_1[0];
			
				Чтение.ЗаписатьНачалоЭлемента("detail");
				Чтение.ЗаписатьНачалоЭлемента("gtin");
				Чтение.ЗаписатьТекст(ДополнитьСтроку(xmlString(Стр_1.gtin.gtin)));
				Чтение.ЗаписатьКонецЭлемента();
				
				Чтение.ЗаписатьНачалоЭлемента("series_number");
				Если ЗначениеЗаполнено(Стр_c.СерийныйНомер) Тогда
					Чтение.ЗаписатьТекст(Стр_c.СерийныйНомер);
				Иначе
					Чтение.ЗаписатьТекст(xmlString(Стр_c.ПолучитьИдентификатор()+1));
				КонецЕсли;
				
				Чтение.ЗаписатьКонецЭлемента();
				
				Чтение.ЗаписатьНачалоЭлемента("cost");
				
		//		Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
		//			Цена=Окр((Стр_1.Цена*Стр_1.КоличествоКМ)/Стр_1.КоличествоНомеровКМ,2);
		//		Иначе
					Цена=Стр_1.Цена;
					
		//		КонецЕсли;
				
				Если ЗначениеЗаполнено(Цена) тогда
					Чтение.ЗаписатьТекст(xmlString(Цена));
				Иначе
					Если Стр_1.КоличествоКМ<>0 Тогда
						Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.Сумма/Стр_1.КоличествоКМ,2)));
					КонецЕсли;
				КонецЕсли;
				Чтение.ЗаписатьКонецЭлемента();
				
				Если ЗначениеЗАполнено(Стр_1.НДС) ТОгда
					
					Чтение.ЗаписатьНачалоЭлемента("vat_value");
					
					Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
						КоличествоКМ=Стр_1.КоличествоНомеровКМ;
					Иначе
						КоличествоКМ=Стр_1.КоличествоКМ;
						
					КонецЕслИ;
					
					Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.НДС/КоличествоКМ,2)));
					Чтение.ЗаписатьКонецЭлемента();
					
				КонецЕсли;
				//Чтение.ЗаписатьКонецЭлемента();
				Чтение.ЗаписатьКонецЭлемента();
				    Чтение.ЗаписатьКонецЭлемента();
			
				

			////s	Чтение.ЗаписатьКонецЭлемента();
				
				Чтение.ЗаписатьНачалоЭлемента("cost");
				
		//		Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
		//			Цена=Окр((Стр_1.Цена*Стр_1.КоличествоКМ)/Стр_1.КоличествоНомеровКМ,2);
		//		Иначе
					Цена=Стр_1.Цена;
					
		//		КонецЕсли;
				
				Если ЗначениеЗаполнено(Цена) тогда
					Чтение.ЗаписатьТекст(xmlString(Цена));
				Иначе
					Если Стр_1.КоличествоКМ<>0 Тогда
						Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.Сумма/Стр_1.КоличествоКМ,2)));
					КонецЕсли;
				КонецЕсли;
				Чтение.ЗаписатьКонецЭлемента();
				
				Если ЗначениеЗАполнено(Стр_1.НДС) ТОгда
					
					Чтение.ЗаписатьНачалоЭлемента("vat_value");
					
					Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
						КоличествоКМ=Стр_1.КоличествоНомеровКМ;
					Иначе
						КоличествоКМ=Стр_1.КоличествоКМ;
						
					КонецЕслИ;
					
					Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.НДС/КоличествоКМ,2)));
					Чтение.ЗаписатьКонецЭлемента();
					
				КонецЕсли;
				
			 КонецЕсли;

				
		Иначе
			Чтение.ЗаписатьНачалоЭлемента("union");
			Штрих=Стр_c.Марка;
			Чтение.ЗаписатьНачалоЭлемента("sgtin");
			
			Если Сред(Штрих,1,2)="01" ТОгда
				Штрих=Сред(Штрих,3,14)+Сред(Штрих,19);
			КонецЕсли;
			
			Чтение.ЗаписатьТекст(Штрих);
			
			Чтение.ЗаписатьКонецЭлемента();
		////s	Чтение.ЗаписатьКонецЭлемента();
			
			Стр_1_1=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_c.НомерСтрокиСвязи));
			Если Стр_1_1.Количество()>0 Тогда
				Стр_1=Стр_1_1[0];
			
	//		Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
	//			Цена=Окр((Стр_1.Цена*Стр_1.КоличествоКМ)/Стр_1.КоличествоНомеровКМ,2);
	//		Иначе
				Цена=Стр_1.Цена;
				
	//		КонецЕсли;
						Чтение.ЗаписатьНачалоЭлемента("cost");

			Если ЗначениеЗаполнено(Цена) тогда
				Чтение.ЗаписатьТекст(xmlString(Цена));
			Иначе
				Если Стр_1.КоличествоКМ<>0 Тогда
					Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.Сумма/Стр_1.КоличествоКМ,2)));
				КонецЕсли;
			КонецЕсли;
			Чтение.ЗаписатьКонецЭлемента();
			
			Если ЗначениеЗАполнено(Стр_1.НДС) ТОгда
				
				Чтение.ЗаписатьНачалоЭлемента("vat_value");
				
				Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
					КоличествоКМ=Стр_1.КоличествоНомеровКМ;
				Иначе
					КоличествоКМ=Стр_1.КоличествоКМ;
					
				КонецЕслИ;
				
				Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.НДС/КоличествоКМ,2)));
				Чтение.ЗаписатьКонецЭлемента();
				
			КонецЕсли;
			КонецЕсли;
 		 КонецЕсли;
 	Чтение.ЗаписатьКонецЭлемента();
			
	Конеццикла;
		Чтение.ЗаписатьКонецЭлемента();
		Чтение.ЗаписатьКонецЭлемента();
		Чтение.ЗаписатьКонецЭлемента();
		
		
	КонецЕсли;	
		
	Иначе
		Чтение=Новый ЗаписьXML;
		Чтение.УстановитьСтроку("UTF-8");
		Чтение.ЗаписатьОбъявлениеXML();
		Чтение.ЗаписатьНачалоЭлемента("documents");
		Чтение.ЗаписатьАтрибут("version","1.35");
		
		Чтение.ЗаписатьНачалоЭлемента("accept");
		Чтение.ЗаписатьАтрибут("action_id","701");
		Чтение.ЗаписатьНачалоЭлемента("subject_id");
		Чтение.ЗаписатьТекст(Объект.ОрганизацияПолучатель_Лекарства.subjectIdФармацевтика);
		Чтение.ЗаписатьКонецЭлемента();
		
		Чтение.ЗаписатьНачалоЭлемента("counterparty_id");
		Чтение.ЗаписатьТекст(Объект.ОрганизацияОтправитьль_Лекарства.subjectIdФармацевтика);
		Чтение.ЗаписатьКонецЭлемента();
		
		Чтение.ЗаписатьНачалоЭлемента("operation_date");
	//	Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
			
			//Время=ПолучитьЧасовойПоясИнформационнойБазы();
	Прибавка="Z";
		Если ЗначениеЗаполнено(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств) тогда
			Прибавка=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств,2,"0");
			Если Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств>0 Тогда
				     Прибавка="+"+Прибавка+":00";
			Иначе
				     Прибавка="-"+Прибавка+":00";
			Конецесли;
		Конецесли;
				
			Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+Прибавка);
	//	Иначе
	//		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"Z");
		
	//	конецесли;
		
		Чтение.ЗаписатьКонецЭлемента();
		
			
		
		Чтение.ЗаписатьНачалоЭлемента("order_details");
		
		
	//	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));

	Для Каждого Стр_c Из Объект.СерийныеНомера Цикл
			Штрих=Стр_c.cis;
			Если СтрДлина(Штрих)=18 Тогда
				Чтение.ЗаписатьНачалоЭлемента("sscc");
			Иначе
				Чтение.ЗаписатьНачалоЭлемента("sgtin");
			КонецЕсли;
			
			Чтение.ЗаписатьТекст(Штрих);
			Чтение.ЗаписатьКонецЭлемента();
			
			  
			
		Конеццикла;
		Чтение.ЗаписатьКонецЭлемента();
		Чтение.ЗаписатьКонецЭлемента();
		Чтение.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	Текст=Чтение.Закрыть();
	 Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Акт(Текст);
	КонецЕсли;
	
	Возврат Текст;
	
Конецфункции
	
	


&НаКлиенте
Процедура ОтправитьПриемкуФармацевтика(Thumbprint_1)
	
	Если Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ЧастичноПринят")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ЧерновикОбработан")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан")
		тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ОбратныйАкцепт=Истина Тогда
		Если Объект.Товары.Количество()=0 Тогда
			ПолучитьИнформациюОКМ("");
			ПоказатьПредупреждение(,"Не заполнены цены!!! Заполните их после чего примите документ заново");
			Возврат;
		КонецЕсли;;
		
	КонецЕслИ;
	
	СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
	
	Если Не ЗначениеЗаполнено(Срегистра) Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьФайлДляОтправки_1=ФормируемXMLФармацевтика(Thumbprint_1,СРегистра);
		
		//Сч=0;
		//Для Каждого Стр_1 Из Объект.Товары Цикл
			
		СформироватьФайлДляОтправки=СформироватьФайлДляОтправки_1;
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
		
		
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
		//Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

				
				Подписанный="";
		//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
		//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл_ЛДМП(СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Ложь);
			//Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1,Подписанный,Истина);
			//Иначе
			//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл_ЛДМП(СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Ложь);
				
				
			//КонецЕсли;
		
		//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//Подписанный,КодировкаТекста.UTF8,Ложь));
		
					Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
				Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
				 Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("document");
	Чтен.ЗаписатьЗначение(Добав);
	Чтен.ЗаписатьИмяСвойства("sign");
	Чтен.ЗаписатьЗначение(Подписанный);
	Чтен.ЗаписатьИмяСвойства("request_id");
	Чтен.ЗаписатьЗначение(ВернутьУНИКУМ());
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();
	
				 
				 
		//Тело="{
		//|""doc_type"":""311"",
		//|""document"":"""+Добав+""",
		//|""sign"":"""+Подписанный+""",
		//|""request_id"":"""+ВернутьУНИКУМ()+"
		//|}";
			
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/send");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		
	Если Ответ.КодСостояния=200 ИЛИ Ответ.КодСостояния=200  Тогда
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Объект._Order_ID=NNN.document_id;
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
				//НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
//				Объект._Order_ID=NNN.orderId;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
	Иначе
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Объект.ОшибкаОтправки=Текст1;
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
	КонецЕсли;

		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Ответ(Текст1);
		КонецЕсли;
			
		
		
		
			
			
		///Конеццикла;
		
		 ЭтаФорма.Записать();
		 //УправлениеВидимостью();
		
	
КонецПроцедуры

Функция ПолучитьТекстПодтверждения()
	
	
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("Document");
	//Чтение.ЗаписатьАтрибут("xmlns","http://api-invoice.taxcom.ru/meta");
	//Чтение.ЗаписатьАтрибут("xmlns:xs","http://www.w3.org/2001/XMLSchema");
	//Чтение.ЗаписатьАтрибут("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
	
	//Чтение.ЗаписатьНачалоЭлемента("DocFlow");
	Чтение.ЗаписатьАтрибут("InternalId",Объект.ДокументОтгрузки);
	Чтение.ЗаписатьАтрибут("Action","SendCustomerInformation");
	
	
	Чтение.ЗаписатьНачалоЭлемента("AdditionalData");
	
	
	Чтение.ЗаписатьНачалоЭлемента("AdditionalParameter");
	Чтение.ЗаписатьАтрибут("Name","Покупатель.НаименованиеЭкономическогоСубъектаСоставителя");
	Чтение.ЗаписатьАтрибут("Value",Объект.Организация.Наименование);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("AdditionalParameter");
	Чтение.ЗаписатьАтрибут("Name","СодержаниеФактаХозЖизни.СодержаниеОперации");
	Чтение.ЗаписатьАтрибут("Value","Товары принял без претензий");
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("AdditionalParameter");
	Чтение.ЗаписатьАтрибут("Name","Подписант.ОблПолн");
	Чтение.ЗаписатьАтрибут("Value","1");
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("AdditionalParameter");
	Чтение.ЗаписатьАтрибут("Name","Подписант.Статус");
	Чтение.ЗаписатьАтрибут("Value","5");
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("AdditionalParameter");
	Чтение.ЗаписатьАтрибут("Name","Подписант.ОснПолн");
	Чтение.ЗаписатьАтрибут("Value","Должностные обязанности");
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("Signers");
	
	Чтение.ЗаписатьНачалоЭлемента("Signer");
	
	Чтение.ЗаписатьНачалоЭлемента("Person");
	
    Наименование=Объект.ТекущийПользователь.КонтактноеЛицо;
	
	Наименование_1=Сред(Наименование,1,Найти(Наименование," "));
	Чтение.ЗаписатьАтрибут("LastName",Наименование_1);
	//Чтение.ЗаписатьАтрибут("LastName");
	//Чтение.ЗаписатьЗначение(Наименование_1);
	
	Наименование=Сред(Наименование,Найти(Наименование," ")+1);
	
	Наименование_1=Сред(Наименование,1,Найти(Наименование," "));
	Чтение.ЗаписатьАтрибут("FirstName",Наименование_1);
	//Чтение.ЗаписатьАтрибут("FirstName");
	//Чтение.ЗаписатьЗначение(Наименование_1);
	
	Наименование=Сред(Наименование,Найти(Наименование," ")+1);
	Если ЗначениеЗаполнено(Наименование) тогда 
		Чтение.ЗаписатьАтрибут("Patronimic",Наименование);
		//Чтение.ЗаписатьАтрибут("Patronimic");
		//Чтение.ЗаписатьЗначение(Наименование);
	КонецЕсли;
	Чтение.ЗаписатьАтрибут("Inn",Объект.Организация.ИНН);
	
	Чтение.ЗаписатьАтрибут("AreaOfAuthority","1");
	
	Чтение.ЗаписатьАтрибут("SignerPersonStatus","5");

	Чтение.ЗаписатьАтрибут("ReasonTheAuthority","Должностные обязанности");
	
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	//Чтение.ЗаписатьКонецЭлемента();
	Возврат Чтение.Закрыть();
	
	
	
	
Конецфункции

&НаКлиенте
Процедура ПринятьПоТХЦу(Thumbprint_1) Экспорт
	СайтДляПодключенияПоТакскму=Thumbprint_1.ТХЦ;
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
		Прокси=Новый ИнтернетПрокси;
		Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
		HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	Иначе
				
		HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	КонецЕсли;

	Маркер=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОТХЦ(Thumbprint_1,"",HTTPСервисЗапрос_ТХЦ);
	Если  ЗначениеЗаполнено(Маркер) тогда
		АдресРесурса = "api/SendCustomerInformation";
		
		ЗапросСпискаДокументов = Новый HTTPЗапрос;
		ЗапросСпискаДокументов.АдресРесурса = АдресРесурса;
		
		Заголовки = Новый Соответствие();
		Заголовки.Вставить("Integrator-Id", "Kartoteka_9AFE5408-C930-47FA-9CE4-FAE615EED09E");
		Заголовки.Вставить("Assistant-Key", Маркер);
		ЗапросСпискаДокументов.Заголовки = Заголовки;
		
		
		ТекстПодтверждения=ПолучитьТекстПодтверждения();
		
		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Акт(ТекстПодтверждения);
		КонецЕсли;
	
		
			#Если ВебКлиент Тогда
		ЗапросСпискаДокументов.УстановитьТелоИзСтроки(ТекстПодтверждения,Кодировкатекста.UTF8);
			#Иначе
		ЗапросСпискаДокументов.УстановитьТелоИзСтроки(ТекстПодтверждения,Кодировкатекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
		
		Ответ = HTTPСервисЗапрос_ТХЦ.ОтправитьДляОбработки(ЗапросСпискаДокументов);
		Если Ответ.КодСостояния=200 Тогда
			Сообщить("Документ приемки "+Строка(объект.Ссылка)+" успешно принят.");
			//Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПрочитатьСведенияОбОрганизацииНаСервере(Ответ.ПолучитьТелоКакСтроку());
		Иначе
			Сообщить("Не удалось принять приемку "+Строка(Объект.Ссылка)+". Ошибка: "+Ответ.ПолучитьТелоКакСтроку());
			//Возврат Новый Структура("ИНН, Идентификатор","","");
		КонецЕсли;
		
		
	Иначе
		Сообщить("Не удалось отменить приемку "+Строка(объект.Ссылка));
	КонецЕсли;
	
	
	
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьПоСБ(Ссылка,Thumbprint_1,Отмена="Утвердить",Комментарий="") Экспорт
	СайтДляПодключенияПоТакскму=Thumbprint_1.СБ;

	
	Результат="";
	Организация=Неопределено;
	ДанныеИнтеграции="";ОбъектПлагин=Неопределено;
		
		
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
						
				HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
						
				HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
	ДанныеАгрегации="";
	ОбъектПлагин=Неопределено;
			
			СерийныйНомер="";
		Если Thumbprint_1.ТипПодключения=ПредопределенноеЗначение("Перечисление.ТипыПодключенияКЭДОСБ_ХамелеонЦРПТ.SDK") Тогда
		//Маркер=РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОСб_SDK(Thumbprint_1,ПолучитьИдЭд(Пользователь),HTTPСервисЗапрос_ТХЦ,СерийныйНомер,ДанныеАгрегации,ОбъектПлагин);
			Маркер=РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОСб_SDK(Thumbprint_1,"",HTTPСервисЗапрос_ТХЦ,СерийныйНомер,ДанныеАгрегации,ОбъектПлагин,СайтДляПодключенияПоТакскму);
		
			
			
		ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();

		СБВыполнитьКомандуSDK(Объект.ДокументОтгрузки,Отмена,ДанныеАгрегации,ОбъектПлагин,Комментарий);	
		
		
		СоставПакета = ПрочитатьДокументSDK(Объект.ДокументОтгрузки,,,ДанныеАгрегации,ОбъектПлагин);
		Попытка
			СтатусДокумента=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ВернутьСтатусДокументаСБ(СоставПакета.Состояние.Код);
		Исключение
			Сообщить("Не удалось получить статус документа "+Строка(Объект.Ссылка));
			Возврат;
		КонецПопытки;
	Если Объект.статусУПД<>СтатусДокумента Тогда
		
				Объект.СтатусУПД=СтатусДокумента;
									Если ЗначениеЗаполнено(СоставПакета.Состояние.Примечание) Тогда
						Объект.ОшибкаОтправки=
СоставПакета.Состояние.Примечание;					
Иначе
						Объект.ОшибкаОтправки=
СоставПакета.Состояние.Название;					

					КонецЕсли;

				Если Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Подписан")
					ИЛИ Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Уточнён") Тогда
					ЭтаФорма.Записать(Новый Структура("РжеиммЗаписиДокумента",РежимЗаписиДокумента.Проведение));
				ИначеЕсли Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Отклонен")
					ИЛИ ОБъект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Отозван")
					Тогда
					Если Объект.Проведен Тогда
						ЭтаФОрма.Записать(Новый Структура("РжеиммЗаписиДокумента",РежимЗаписиДокумента.ОтменаПроведения));
					Иначе
						ЭтаФОрма.Записать(Новый Структура("РжеиммЗаписиДокумента",РежимЗаписиДокумента.Запись));
					КонецЕсли;	
				Иначе
						ЭтаФОрма.Записать(Новый Структура("РжеиммЗаписиДокумента",РежимЗаписиДокумента.Запись));
				КонецЕсли;
		
	КонецЕсли;
	
	
		
		
	Иначе		
			Результат=РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОСб_Новый(Thumbprint_1,"",HTTPСервисЗапрос_ТХЦ,СерийныйНомер,ДанныеИнтеграции,ОбъектПлагин);
			
			Если Не ЗначениеЗаполнено(Результат) Тогда
				Возврат;
			КонецЕсли;
			//Организация=Идентификатор;
			
	
			
			
		ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();

		СБВыполнитьКоманду(Объект.ДокументОтгрузки,Отмена,ДанныеИнтеграции,ОбъектПлагин,Комментарий);	
		
		СоставПакета = ПрочитатьДокумент(Объект.ДокументОтгрузки,,,ДанныеИнтеграции,ОбъектПлагин);
		 Попытка
				СтатусДокумента=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ВернутьСтатусДокументаСБ(СоставПакета.Состояние.Код);
			Исключение
				
				Сообщить("Не удалось получить состояния документа "+Строка(Объект.Ссылка));
				Возврат;
			КонецПопытки;
	Если Объект.статусУПД<>СтатусДокумента Тогда
		
				Объект.СтатусУПД=СтатусДокумента;
									Если ЗначениеЗаполнено(СоставПакета.Состояние.Примечание) Тогда
						Объект.ОшибкаОтправки=
СоставПакета.Состояние.Примечание;					
Иначе
						Объект.ОшибкаОтправки=
СоставПакета.Состояние.Название;					

					КонецЕсли;

				Если Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Подписан")
					ИЛИ Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Уточнён") Тогда
					ЭтаФорма.Записать(Новый Структура("РжеиммЗаписиДокумента",РежимЗаписиДокумента.Проведение));
				ИначеЕсли Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Отклонен")
					ИЛИ ОБъект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Отозван")
					Тогда
					Если Объект.Проведен Тогда
						ЭтаФОрма.Записать(Новый Структура("РжеиммЗаписиДокумента",РежимЗаписиДокумента.ОтменаПроведения));
					Иначе
						ЭтаФОрма.Записать(Новый Структура("РжеиммЗаписиДокумента",РежимЗаписиДокумента.Запись));
					КонецЕсли;	
				Иначе
						ЭтаФОрма.Записать(Новый Структура("РжеиммЗаписиДокумента",РежимЗаписиДокумента.Запись));
				КонецЕсли;
		
	КонецЕсли;
	
	
	КонецЕсли;	
		
		
		
		//Если ТипЗнч(РезультатОтправки) = Тип("Структура") Тогда  // если необходимо активировать сертификаты перед отправкой
		//	СчетчикВведенныхПинкодов = 0;
		//	счСертификатов = 0;
		//	Для Каждого Элемент Из РезультатОтправки.СписокСертификатов Цикл
		//		Сертификат = Элемент.Значение;
		//		Если Сертификат.Ключ.СпособАктивации<>"СтатическийКод" Тогда
		//			Кэш.Интеграция.ПолучитьКодАктивацииСертификата(Кэш, Сертификат);				
		//		КонецЕсли;
		//		СертификатИмя = "Введите код активации сертификата "+Кэш.ОбщиеФункции.СокращенноеФИО(Кэш,Сертификат.ФИО)+?(Сертификат.Свойство("Должность"),"("+Сертификат.Должность+")", "")+", "+Сертификат.Название+?(Сертификат.Свойство("ИНН"),"(ИНН "+Сертификат.ИНН+")","");
		//		ОткрытьФорму("ВнешняяОбработка.СБИС.Форма.ФормаВводаПинкода",Новый Структура("СертификатИмя,счСертификатов",СертификатИмя,счСертификатов),ЭтаФорма,счСертификатов,,,Новый ОписаниеОповещения("АктивироватьСертификатыЗавершение",ЭтаФорма,Новый Структура("Кэш,РезультатОтправки",Кэш,РезультатОтправки)));	
		//		счСертификатов = счСертификатов+1;
		//	КонецЦикла;
		//КонецЕсли;
		
		
//	Конеццикла;
	
	
	
	
КонецПроцедуры

&НаКлиенте
Функция СериализоватьСтруктуруВObject(Структура,Кэш) Экспорт
	// сериализует  com-объект в структуру	
	Object = Кэш.CreateSimpleObject();
	Для Каждого Элемент Из Структура Цикл	
		Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			ObjectList = Кэш.CreateSimpleObjectList(); 
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				ObjectList.add(СериализоватьСтруктуруВObject(ЭлементМассива,Кэш));	
			КонецЦикла;
			Object.WriteObjectList(Элемент.Ключ, ObjectList);	
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			Object.WriteObject(Элемент.Ключ, СериализоватьСтруктуруВObject(Элемент.Значение,Кэш));
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			Object.Write(Элемент.Ключ,формат(Элемент.Значение, "ДФ='дд.ММ.гггг ЧЧ.мм.сс'"));
		Иначе
			Object.Write(Элемент.Ключ,Элемент.Значение);
		КонецЕсли;
	КонецЦикла;	
	Возврат Object;
КонецФункции

&НаКлиенте
функция ПрочитатьДокументSDK(ИдДок,ДопПараметры=Неопределено,Отказ=Ложь,ДанныеИнтеграции,ОбъектПлагин) экспорт
	// Получает структуру документа СБИС	
	document = ОбъектПлагин.CreateSimpleObject(); 
	document.Write( "Идентификатор", ИдДок ); 
	
	Если Не	ДопПараметры = Неопределено
		И	ДопПараметры.Свойство("Этап") Тогда
		document.WriteObject("Этап", СериализоватьСтруктуруВObject(ДопПараметры.Этап,ОбъектПлагин));
	КонецЕсли;
	
	РезультатЧтения = ОбъектПлагин.ReadDocument(document);
	Если РезультатЧтения = Неопределено Тогда//Метод не отработал, смотрим ошибку
		Отказ = Истина;
		Если ДопПараметры = Неопределено Тогда//Старый вызов, не ожидаем возврат ошибки
			//сбисСообщитьОбОшибке();
			Возврат Ложь;
		Иначе
			checkparam = Неопределено;
			//Ошибка = сбисПолучитьСтруктуруОшибки(Кэш);
			//Если Не ДопПараметры.Свойство("СообщатьПриОшибке", checkparam)
			//	Или	checkparam Тогда
			//	Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Ошибка);
			//КонецЕсли;
			Если 	ДопПараметры.Свойство("ВернутьОшибку", checkparam)
				И	checkparam Тогда
				Возврат Неопределено; 
			КонецЕсли;
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	Возврат СериализоватьObjectВСтруктуру(РезультатЧтения);
КонецФункции

&НаКлиенте
Функция СериализоватьObjectВСтруктуру(Object) Экспорт
	Попытка
		ComКлючиОбъекта	= Object.keys;
	Исключение
		Сообщить("Ошибка при работе с SimpleObject. У объекта отсутствует описание ключей. Детально: " + ИнформацияОбОшибке().Причина);
		Возврат Неопределено;
	КонецПопытки;
	сбисСтруктура	= Новый Структура();
	Для Каждого ИмяОбъекта Из ComКлючиОбъекта Цикл
		Тип = Object.TypeOf(ИмяОбъекта);	
		Если Тип = "строка" Тогда
			Строка = Object.Read(ИмяОбъекта);
			Если Сред(Строка,3,1)="." и Сред(Строка,6,1)="." и (СтрДлина(Строка)=10 или СтрДлина(Строка)=19) Тогда //видимо это дата
				Попытка
					Если СтрДлина(Строка)=10 Тогда
						Строка = Дата(Сред(Строка,7,4), Сред(Строка,4,2), Лев(Строка, 2));
					Иначе
						Строка = Дата(Сред(Строка,7,4), Сред(Строка,4,2), Лев(Строка, 2), Сред(Строка,12, 2), Сред(Строка,15, 2), Сред(Строка,18, 2))
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
			сбисСтруктура.Вставить(ИмяОбъекта,Строка);
		ИначеЕсли Тип = "объект" Тогда
			сбисСтруктура.Вставить(ИмяОбъекта,СериализоватьObjectВСтруктуру(Object.ReadObject(ИмяОбъекта)));
		ИначеЕсли Тип = "массив объектов" Тогда
			сбисСтруктура.Вставить(ИмяОбъекта,Новый Массив());
			ObjectList = Object.ReadObjectList(ИмяОбъекта);
			ObjectListCount = ObjectList.count;
			Для сч = 0 По ObjectListCount - 1 Цикл
				сбисСтруктура[ИмяОбъекта].Добавить(СериализоватьObjectВСтруктуру(ObjectList.at(сч)));
			КонецЦикла;	
		Иначе
			Сообщить("Обратитесь в техподдержку. Появился новый тип Object "+Тип);
		КонецЕсли;		
	КонецЦикла;
	Возврат сбисСтруктура;		
КонецФункции
	

&НаКлиенте
Функция СБВыполнитьКомандуSDK(Идентификатор,ИмяКоманды,ДанныеИнтеграции,ОбъектПлагин,Комментарий) Экспорт
	// Выполняет указанную команду по документу СБИС (утверждение/отклонение)	
	//МестныйКэш = Кэш;	
	//ГлавноеОкно = Кэш.ГлавноеОкно;
	
	document_out = ОбъектПлагин.CreateSimpleObject();
	document_out.Write( "Идентификатор", Идентификатор );

	// Прочитаем пакет   
	СоставПакета = ПрочитатьДокументSDK(Идентификатор,,,ДанныеИнтеграции,ОбъектПлагин);
	Если СоставПакета=Ложь Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если СоставПакета.Свойство("Этап") и (СоставПакета.Этап[0].Название  = "Утверждение" или СоставПакета.Этап[0].Название  = "Утвердить") Тогда
		action = Неопределено;
		//Комментарий = "";
		ПараметрыОтклонения = Новый Структура("Кэш,СоставПакета,ИмяКоманды,ПредставлениеПакета",Неопределено, СоставПакета, ИмяКоманды, "");
		//Если ИмяКоманды = "Отклонить" Тогда
		//	СтрокаПодсказка = "Причина отклонения"; 
		//	Возврат ВыполнитьКомандуПослеВвводаКомментария(Комментарий,  ПараметрыОтклонения,ДанныеИнтеграции,ОбъектПлагин);
		//	
		//	#Если ТолстыйКлиентОбычноеПриложение Тогда
		//		Если Не ВвестиСтроку(Комментарий,СтрокаПодсказка,,Истина) Тогда
		//			Комментарий = "";
		//		КонецЕсли;
		//	#Иначе
		//		ПоказатьВводСтроки(Новый ОписаниеОповещения("сбисВыполнитьКомандуПослеВвводаКомментария",ЭтаФорма, ПараметрыОтклонения),Комментарий,СтрокаПодсказка,,Истина);
		//		Возврат Ложь;
		//	#КонецЕсли
		//КонецЕсли;	
		Возврат ВыполнитьКомандуПослеВвводаКомментарияSDK(Комментарий,  ПараметрыОтклонения,ДанныеИнтеграции,ОбъектПлагин);
	КонецЕсли;	
	Возврат Ложь;
КонецФункции


&НаКлиенте
Функция ПрочитатьДокумент(ИдДок, ДопПараметры=Неопределено, Отказ=Ложь,ДанныеИнтеграции,ОбъектПлагин) Экспорт
	Отказ				= Ложь;
	//МестныйКэш			= Кэш;
	
	ПараметрыЧтения = Новый Структура("Идентификатор",ИдДок);
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	ИначеЕсли ДопПараметры.Свойство("Этап") Тогда
		ПараметрыЧтения.Вставить("Этап", ДопПараметры.Этап);
	КонецЕсли;
	ДопПараметры.Вставить("ЕстьРезультат", Истина);
	
	оДокумент = РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ОтправитьИОбработатьКоманду("ReadDocument", ПараметрыЧтения, ДопПараметры,Отказ,ДанныеИнтеграции,ОбъектПлагин);
	Если	Отказ//Для сохранения совместимости со старым функционалом.
		И	оДокумент = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат оДокумент;
КонецФункции


&НаКлиенте
Функция СБВыполнитьКоманду(Идентификатор,ИмяКоманды,ДанныеИнтеграции,ОбъектПлагин,Комментарий) Экспорт
	// Выполняет указанную команду по документу СБИС (утверждение/отклонение)	
	//МестныйКэш = Кэш;	
	//ГлавноеОкно = Кэш.ГлавноеОкно;
	
	// Прочитаем пакет   
	СоставПакета = ПрочитатьДокумент(Идентификатор,,,ДанныеИнтеграции,ОбъектПлагин);
	Если СоставПакета=Ложь Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если СоставПакета.Свойство("Этап") и (СоставПакета.Этап[0].Название  = "Утверждение" или СоставПакета.Этап[0].Название  = "Утвердить") Тогда
		action = Неопределено;
		//Комментарий = "";
		ПараметрыОтклонения = Новый Структура("Кэш,СоставПакета,ИмяКоманды,ПредставлениеПакета",Неопределено, СоставПакета, ИмяКоманды, "");
		//Если ИмяКоманды = "Отклонить" Тогда
		//	СтрокаПодсказка = "Причина отклонения"; 
		//	Возврат ВыполнитьКомандуПослеВвводаКомментария(Комментарий,  ПараметрыОтклонения,ДанныеИнтеграции,ОбъектПлагин);
		//	
		//	#Если ТолстыйКлиентОбычноеПриложение Тогда
		//		Если Не ВвестиСтроку(Комментарий,СтрокаПодсказка,,Истина) Тогда
		//			Комментарий = "";
		//		КонецЕсли;
		//	#Иначе
		//		ПоказатьВводСтроки(Новый ОписаниеОповещения("сбисВыполнитьКомандуПослеВвводаКомментария",ЭтаФорма, ПараметрыОтклонения),Комментарий,СтрокаПодсказка,,Истина);
		//		Возврат Ложь;
		//	#КонецЕсли
		//КонецЕсли;	
		Возврат ВыполнитьКомандуПослеВвводаКомментария(Комментарий,  ПараметрыОтклонения,ДанныеИнтеграции,ОбъектПлагин);
	КонецЕсли;	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ПолучитьСписокСертификатов(filter=Неопределено,ДанныеИнтеграции,ОбъектПлагин) Экспорт
	//МестныйКэш			= Кэш;
	Отказ				= Ложь;
	СписокСертификатов	= Новый СписокЗначений();
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	
	Если filter=Неопределено Тогда
		filter = Новый Структура;
	КонецЕсли;
	
	РезультатЗапроса = РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ОтправитьИОбработатьКоманду("ReadCertificates", filter, ДопПараметрыЗапроса,Отказ,ДанныеИнтеграции,ОбъектПлагин);
	Если Отказ Тогда
		Возврат СписокСертификатов;
	КонецЕсли;
	
	ObjectList = РезультатЗапроса.Сертификат;
	Если ObjectList<>Неопределено Тогда
		Размер = ObjectList.Количество();
		Для сч=0 По Размер-1 Цикл
			Сертификат = ObjectList[сч];
			Если ТипЗнч(Сертификат.ДействителенПо)=Тип("Дата") Тогда
				ДействителенПо = Дата(Год(Сертификат.ДействителенПо), Месяц(Сертификат.ДействителенПо), День(Сертификат.ДействителенПо));
			Иначе
				ДействителенПо = Дата(Сред(Сертификат.ДействителенПо,7,4), Сред(Сертификат.ДействителенПо,4,2), Лев(Сертификат.ДействителенПо, 2));
			КонецЕсли;
			Если ДействителенПо>=ТекущаяДата() Тогда
				СписокСертификатов.Добавить(Сертификат);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокСертификатов;
КонецФункции

&НаКлиенте
Функция ОбработатьСлужебныеДокументыПоПакету(СоставПакета,ДанныеИнтеграции,ОбъектПлагин) Экспорт
	Отказ				= Ложь;
	//МестныйКэш			= Кэш;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	
	Парам   = Новый Структура;
	Парам.Вставить("ИдентификаторДокумента",СоставПакета.Идентификатор);
	
	ИнформацияПоНеобработанным = РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ОтправитьИОбработатьКоманду("ReadServiceStagesInfo", Парам, ДопПараметрыЗапроса, Отказ,ДанныеИнтеграции,ОбъектПлагин);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Всего = Число(ИнформацияПоНеобработанным.ЧислоНеобработанныхЭтапов);
	
	Если Всего>0 Тогда
		ДопПараметрыЗапроса = Новый Структура;
		РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ОтправитьИОбработатьКоманду( "ProcessServiceStagesEx", Парам, ДопПараметрыЗапроса, Отказ,ДанныеИнтеграции,ОбъектПлагин);
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция СформироватьТитулы(СоставПакета, Действие, ДополнительныеПараметры, Отказ) Экспорт
	ДополнительныеПараметры.Вставить("Шифрование", Ложь);
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		Зашифрован		= Вложение.Свойство("Зашифрован") И Вложение.Зашифрован = "Да";
		СбисТип			= Неопределено;
		СбисПодтип		= Неопределено;
		СбисВерсияФормат= Неопределено;
		Если Не	(	Вложение.Свойство("Тип", сбисТип)
				И	Вложение.Свойство("ВерсияФормата", СбисВерсияФормат)
				И	ЗначениеЗаполнено(СбисВерсияФормат)) Тогда
				//В случае неформализованных вложений будет пустая версия формата
			Продолжить;
		КонецЕсли;
		сбисДействие	= СтрЗаменить(Действие.Название, " ", "");
		сбисТип			= СтрЗаменить(сбисТип, " ", "");
		сбисВерсияФормат= СтрЗаменить(СтрЗаменить(сбисВерсияФормат, ".", "_"), " ", "");
		Если Вложение.Свойство("ПодТип", сбисПодтип) Тогда
			сбисПодтип = СтрЗаменить(сбисПодтип, " ", "");
		Иначе
			сбисПодтип = "";
		КонецЕсли;
		
		ИмяФункции = сбисДействие + "_" + сбисТип + "_" + сбисПодтип + "_" + сбисВерсияФормат;
		//Если Зашифрован Тогда
		//	ИмяОсновнойФормы = Кэш.ИнтеграцияИмя;
		//	ИмяВспомогательнойФормы = "";
		//	ДополнительныеПараметры.Шифрование = Истина;
		//Иначе
			ИмяОсновнойФормы = "Файл_Шаблон";
			ИмяВспомогательнойФормы = "Файл_" + сбисТип + "_" + сбисВерсияФормат;
		//КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ОбработатьСлужебныеДокументыПоПакетуSDK(Кэш, СоставПакета) Экспорт
	// Обрабатывает служебные по одному пакету
	МестныйКэш = Кэш;
	param   = МестныйКэш.CreateSimpleObject();
	param.Write("ИдентификаторДокумента",СоставПакета.Идентификатор);
	ИнформацияПоНеобработанным = МестныйКэш.ReadServiceStagesInfo(param);
	Если ИнформацияПоНеобработанным = Неопределено Тогда //почему неопределено
//		сбисСообщитьОбОшибке();
	КонецЕсли;
	ИнформацияПоНеобработанным = СериализоватьObjectВСтруктуру(ИнформацияПоНеобработанным);
	Всего = Число(ИнформацияПоНеобработанным.ЧислоНеобработанныхЭтапов);
	
	Если Всего>0 Тогда
		Результат = МестныйКэш.ProcessServiceStagesEx(param);
		Если Результат = Неопределено Тогда //почему неопределено
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
КонецФункции


&НаКлиенте
Функция сбВыполнитьДействиеSDK(СоставПакета, Этап, Действие, Комментарий, ПредставлениеПакета,ДанныеИнтеграции,ОбъектПлагин) Экспорт
	// Выполняет указанное действие по документу СБИС
	Если (НЕ Действие.Свойство("Сертификат") или  Действие.Сертификат.Количество()=0) и (Действие.ТребуетПодписания = "Да") Тогда
		Сообщить("Отсутствует сертификат ЭЦП для утверждения/отклонения пакета документов "+ПредставлениеПакета);
		Возврат Ложь;
	КонецЕсли;
	ОбработатьСлужебныеДокументыПоПакетуSDK(ОбъектПлагин, СоставПакета);
	
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		Если Вложение.Свойство("Зашифрован") и Вложение.Зашифрован = "Да" Тогда
			Сообщить("Для корректной обработки зашифрованных документов выберите способ обмена ""extSDK"" на вкладке Настройки.");
			Возврат Ложь;
		КонецЕсли;
		Прервать;
	КонецЦикла;
	
	// Назначение действие на этап
	action = ОбъектПлагин.CreateSimpleObject();
	action.Write("Название", Действие.Название);
	Если Действие.Свойство("Сертификат") и Действие.Сертификат.Количество()>0 Тогда
		certificate = СериализоватьСтруктуруВObject(Действие.Сертификат[0],ОбъектПлагин);
		action.WriteObject("Сертификат", certificate);
	КонецЕсли;
	Если Комментарий<>"" Тогда
		action.Write("Комментарий", Комментарий);
	КонецЕсли;	
	
	
	// Назначение этапа
	stage = ОбъектПлагин.CreateSimpleObject();
	stage.Write("Название", Этап.Название);
	stage.Write("Идентификатор",Этап.Идентификатор); 
	stage.WriteObject("Действие", action);
	
	
	document_in = ОбъектПлагин.CreateSimpleObject();
	document_in.WriteObject( "Этап", stage );
	document_in.Write( "Идентификатор", СоставПакета.Идентификатор );	
	
	// Подготовка этапа
	prepared_document = ОбъектПлагин.PrepareAction(document_in);
	Если prepared_document  = Неопределено Тогда
		Возврат Ложь
	КонецЕсли;
	
	attachmentListPrepared = prepared_document.ReadObjectList("Этап").at(0).ReadObjectList("Вложение");     // вложения из ПодготовитьДействие
	Если attachmentListPrepared = Неопределено Тогда
		attachmentListPrepared = ОбъектПлагин.CreateSimpleObjectList();
	КонецЕсли;
	
	//UAA формирование титулов
	//Пока тут заглушка на проброску результата подготовки, так как COM. При необходимости, доработать.
	//сбисПараметрыТитулов = Новый Структура("РезультатПодготовки", prepared_document);
	сбисПараметрыТитулов = Новый Структура;
	ОшибкаФормирования = Ложь;
	РезультатФормирования = //СформироватьТитулы(Кэш, СоставПакета, Действие, сбисПараметрыТитулов, ОшибкаФормирования);
	СформироватьТитулы(СоставПакета, Действие, сбисПараметрыТитулов, ОшибкаФормирования);
	Если ОшибкаФормирования Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Размер = attachmentListPrepared.count;
	attachmentList = ОбъектПлагин.CreateSimpleObjectList();  // вложения, которые будем передавать в ВыполнитьДействие
	Если Действие.Свойство("Сертификат") и Действие.Сертификат.Количество()>0 и Действие.Сертификат[0].Ключ.Тип = "Клиентский" и Действие.ТребуетПодписания = "Да" Тогда  // если ключ клиентский, то надо передать все вложения в ExecuteAction для подписания
		Для сч=0 По Размер-1 Цикл
			Запись = attachmentListPrepared.at(сч);
			attachment = ОбъектПлагин.CreateSimpleObject();
			attachment.Write( "Идентификатор",  Запись.Read("Идентификатор"));
			file = ОбъектПлагин.CreateSimpleObject();
			file.Write( "Имя", Запись.ReadObject("Файл").Read("Имя") );
			file.Write( "Хеш", Запись.ReadObject("Файл").Read("Хеш") ); 
			attachment.WriteObject( "Файл", file );
			attachmentList.Add( attachment );
		КонецЦикла;	
	КонецЕсли;
	
	// ищем подтверждение заказа, чтобы проставить подтверждению, сформированному в 1С, тот же идентификатор
	
	ИдПодтвЗаказа = "";
	НомПодтвЗаказа = 0;
	Для сч=0 По Размер-1 Цикл
		Запись = attachmentListPrepared.at(сч);
		Если Запись.Read("Тип") = "ПодтверждениеЗаказа" Тогда
			ИдПодтвЗаказа = Запись.Read("Идентификатор");
			НомПодтвЗаказа = сч;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	StreamHelper = Новый COMОбъект("SBIS.StreamHelper");
	
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		Если Не Вложение.Свойство("Идентификатор") Тогда
			attachment = ОбъектПлагин.CreateSimpleObject();
			file = ОбъектПлагин.CreateSimpleObject();
			ИмяФайла = Вложение.СтруктураФайла.Файл.Имя+"__"+Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+"_"+строка(Новый УникальныйИдентификатор())+".xml";
			file.Write( "Имя", ИмяФайла ); 
			file.Write( "ДвоичныеДанные", StreamHelper.StringToBase64(Вложение.XMLДокумента) ); 
			attachment.WriteObject( "Файл", file );
			Если (Вложение.Название="Подтверждение заказа" и ЗначениеЗаполнено(ИдПодтвЗаказа) ) Тогда 
				ИдВложения = ИдПодтвЗаказа; 
				Если Действие.Свойство("Сертификат") и Действие.Сертификат.Количество()>0 и Действие.Сертификат[0].Ключ.Тип = "Клиентский" и Действие.ТребуетПодписания = "Да" Тогда  // если ключ клиентский, значит подтверждение, сформированное онлайном, нужно удалить из списка вложений и добавить наше подтверждение
					attachmentList.Delete(НомПодтвЗаказа);
				КонецЕсли;
			Иначе 
				ИдВложения = строка(Новый УникальныйИдентификатор());
			КонецЕсли;
			attachment.Write( "Идентификатор",  ИдВложения);
			attachmentList.Add( attachment );
		КонецЕсли;
	КонецЦикла;
	
	
	prepared_stage = prepared_document.ReadObjectList("Этап").at(0);
	prepared_action = prepared_document.ReadObjectList("Этап").at(0).ReadObjectList("Действие").at(0);
	prepared_certificates = prepared_action.ReadObjectList("Сертификат");
	certificates = ОбъектПлагин.CreateSimpleObjectList();
	Если prepared_certificates<>Неопределено Тогда
		КолСерт = prepared_certificates.count;
		Для сч=0 По КолСерт-1 Цикл
			certificate = ОбъектПлагин.CreateSimpleObject();
			certificate.Write( "Отпечаток", prepared_certificates.at(сч).Read("Отпечаток") );
			certificatekey = ОбъектПлагин.CreateSimpleObject();
			certificatekey.Write( "Тип", prepared_certificates.at(сч).ReadObject("Ключ").Read("Тип") );
			certificate.WriteObject( "Ключ", certificatekey );
			certificates.Add( certificate );
		КонецЦикла;
	КонецЕсли;
	action = ОбъектПлагин.CreateSimpleObject();
	action.Write("Комментарий", prepared_action.Read("Комментарий"));
	action.Write("Название", prepared_action.Read("Название"));
	action.Write("Идентификатор", prepared_action.Read("Идентификатор"));
	action.WriteObjectList("Сертификат", certificates);
	action.Write("ТребуетПодписания", prepared_action.Read("ТребуетПодписания"));
	stage = ОбъектПлагин.CreateSimpleObject();
	stage.WriteObject("Действие", action);
	stage.WriteObjectList("Вложение", attachmentList);
	stage.Write("Идентификатор", prepared_stage.Read("Идентификатор"));
	stage.Write("Название", prepared_stage.Read("Название"));
	Если Этап.Свойство("Исполнитель") Тогда//Добавлено, так как у документов может быть этап, связанный с исполнителем не только при работе через extSDK
		Исполнитель = ОбъектПлагин.CreateSimpleObject();
		Для Каждого КлючИЗначение Из Этап.Исполнитель Цикл
			Исполнитель.Write(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		stage.WriteObject("Исполнитель", Исполнитель);
	КонецЕсли;
	document_in = ОбъектПлагин.CreateSimpleObject();
	document_in.Write( "Идентификатор", prepared_document.Read("Идентификатор") );
	prepared_redact = prepared_document.ReadObjectList("Редакция");
	redactions = ОбъектПлагин.CreateSimpleObjectList();
	КолРедакций = prepared_redact.count;
	Для сч=0 По КолРедакций-1 Цикл
		redaction = ОбъектПлагин.CreateSimpleObject();
		redaction.Write( "Идентификатор", prepared_redact.at(сч).Read("Идентификатор") );
		redactions.Add( redaction );
	КонецЦикла;
	document_in.WriteObjectList( "Редакция", redactions );
	document_in.WriteObject( "Этап", stage );
	
	// Завершение этапа
	completed_document = ОбъектПлагин.ExecuteAction(document_in);
	Если completed_document  = Неопределено Тогда 
		Ошибка=ПолучитьСообщениеОбОшибкеSDK(ОбъектПлагин);
		Сообщить("Не удалось принять дкоумент "+Строка(Объект.Ссылка)+
		" "+Ошибка.ТекстОшибки+"; "+Ошибка.ИнформацияОбОшибке);
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;

КонецФункции

&НаКлиенте
Функция ПолучитьСообщениеОбОшибкеSDK(ОбъектПлагин) Экспорт
	// Получает последнюю ошибку SDK	
	Ошибка = Новый Структура();
	Error = ОбъектПлагин.ReadLastErrorEx();
	Попытка
		Ошибка.Вставить("ТекстОшибки", строка(Error.Read("Описание")));
		Ошибка.Вставить("ИнформацияОбОшибке", строка(Error.Read("ОписаниеРасширенное")));
	Исключение
		Ошибка.Вставить("ТекстОшибки", "");
		Ошибка.Вставить("ИнформацияОбОшибке", "");
	КонецПопытки;
	Ошибка.Вставить("ПолныйТекст",Ошибка.ТекстОшибки+?(Ошибка.ТекстОшибки<>Ошибка.ИнформацияОбОшибке," ("+Ошибка.ИнформацияОбОшибке+")","" ));
	Возврат Ошибка;
КонецФункции


&НаКлиенте
Функция сбВыполнитьДействие(СоставПакета, Этап, Действие, Комментарий, ПредставлениеПакета,ДанныеИнтеграции,ОбъектПлагин) Экспорт
	Отказ				= Ложь;
	//МестныйКэш			= Кэш;
	//ГлавноеОкно			= Кэш.ГлавноеОкно;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	     
	Если СоставПакета.Свойство("НашаОрганизация") Тогда
		ИННОрг = ?(СоставПакета.НашаОрганизация.Свойство("СвЮЛ"), СоставПакета.НашаОрганизация.СвЮЛ.ИНН, СоставПакета.НашаОрганизация.СвФЛ.ИНН);
	Иначе
		ИННОрг = "";
	КонецЕсли;
	//Если Кэш.КэшСертификатов.Свойство("с"+ИННОрг) и Кэш.КэшСертификатов["с"+ИННОрг]<>Неопределено и ТекущаяДата()-Кэш.КэшСертификатов.ДатаОбновления<=60 Тогда
	//	Сертификат = Кэш.КэшСертификатов["с"+ИННОрг];
	//Иначе
		СписокСертификатов = ПолучитьСписокСертификатов( Новый Структура("ИНН",ИННОрг),ДанныеИнтеграции,ОбъектПлагин);
		Если СписокСертификатов.Количество()>0 Тогда
			Сертификат = СписокСертификатов[0].Значение;	
		Иначе
			Сертификат = Неопределено;
		КонецЕсли;
		//Кэш.КэшСертификатов.Вставить("с"+ИННОрг,Сертификат);
		//Кэш.КэшСертификатов.Вставить("ДатаОбновления", ТекущаяДата());
	//КонецЕсли;
	Если (Сертификат = Неопределено) и (Действие.ТребуетПодписания = "Да") Тогда
		Сообщить("Отсутствует сертификат ЭЦП для утверждения/отклонения пакета документов "+ПредставлениеПакета);
		Возврат Ложь;
	КонецЕсли;
	ОбработатьСлужебныеДокументыПоПакету(СоставПакета,ДанныеИнтеграции,ОбъектПлагин);
	
	// Назначение действие на этап
	action = Новый Структура;
	action.Вставить("Название", Действие.Название);
	Если Сертификат <> Неопределено Тогда
		certificate = Сертификат;
		action.Вставить("Сертификат", certificate);
		Действие.Вставить("Сертификат", certificate);
	КонецЕсли;
	Если Комментарий<>"" Тогда
		action.Вставить("Комментарий", Комментарий);
	КонецЕсли;	
	
	
	// Назначение этапа
	stage = Новый Структура;
	stage.Вставить("Название", Этап.Название);
	stage.Вставить("Идентификатор",Этап.Идентификатор); 
	stage.Вставить("Действие", action);
	
	
	document_in = Новый Структура;
	document_in.Вставить( "Этап", stage );
	document_in.Вставить( "Идентификатор", СоставПакета.Идентификатор );	
	
	// Подготовка этапа
	prepared_document = РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ОтправитьИОбработатьКоманду("PrepareAction", document_in, ДопПараметрыЗапроса, Отказ,ДанныеИнтеграции,ОбъектПлагин);
	Если Отказ Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	attachmentListPrepared = ?(prepared_document.Этап[0].Свойство("Вложение"),prepared_document.Этап[0].Вложение,Новый Массив);
	Размер = attachmentListPrepared.Количество();
	attachmentList = Новый Массив;  // вложения, которые будем передавать в ВыполнитьДействие
	
	//UAA формирование титулов
	сбисПараметрыТитулов = Новый Структура("РезультатПодготовки", prepared_document);
	ОшибкаФормирования = Ложь;
	РезультатФормирования = СформироватьТитулы(СоставПакета, Действие, сбисПараметрыТитулов, ОшибкаФормирования);
	Если ОшибкаФормирования Тогда
		//Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Кэш.ОбщиеФункции.сбисИсключение(РезультатФормирования, "ExtSDK.сбисВыполнитьДействие"));
		Возврат Ложь;
	КонецЕсли;
	// формирование титулов для зашифрованных вложений
	Шифрование = сбисПараметрыТитулов.Шифрование;
	
	Если Сертификат <> Неопределено и Сертификат.Ключ.Тип = "Клиентский" и Действие.ТребуетПодписания = "Да" Тогда  // если ключ клиентский, то надо передать все вложения в ExecuteAction для подписания
		Для сч=0 По Размер-1 Цикл
			Запись = attachmentListPrepared[сч];
			attachment = Новый Структура;
			attachment.Вставить( "Идентификатор",  Запись.Идентификатор);
			file = Новый Структура;
			file.Вставить( "Имя", Запись.Файл.Имя );
			file.Вставить( "Хеш", Запись.Файл.Хеш ); 
			Если Запись.Свойство("Зашифрован") и Запись.Зашифрован = "Да" Тогда   // для зашифрованных вложений передаем ссылку, чтобы в ExecuteAction получить данные, расшифровать и подписать
				attachment.Вставить( "Зашифрован",  "Да");	
				file.Вставить( "Ссылка", Запись.Файл.Ссылка );
			КонецЕсли;
			attachment.Вставить( "Файл", file );
			attachmentList.Добавить( attachment );
		КонецЦикла;	
	КонецЕсли;
	
	Если СоставПакета.Свойство("Вложение") Тогда
		// ищем подтверждение заказа, чтобы проставить подтверждению, сформированному в 1С, тот же идентификатор
		ИдПодтвЗаказа = "";
		НомПодтвЗаказа = 0;
		Для сч=0 По Размер-1 Цикл
			Запись = attachmentListPrepared[сч];
			Если Запись.Свойство("Тип") и Запись.Тип = "ПодтверждениеЗаказа" Тогда
				ИдПодтвЗаказа = Запись.Идентификатор;
				НомПодтвЗаказа = сч;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Вложение Из СоставПакета.Вложение Цикл
			Если Не Вложение.Свойство("Идентификатор") Тогда
				attachment = Новый Структура;
				file = Новый Структура;
				ИмяФайла = ?(Вложение.Свойство("ИмяФайла"),Вложение.ИмяФайла,Вложение.СтруктураФайла.Файл.Имя+"__"+Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+"_"+строка(Новый УникальныйИдентификатор())+".xml");
				file.Вставить( "Имя", ИмяФайла ); 
				file.Вставить( "ДвоичныеДанные", ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.сбСтрокаВBASE64(Вложение.XMLДокумента) ); 
				attachment.Вставить( "Файл", file );
				Если (Вложение.Название="Подтверждение заказа" и ЗначениеЗаполнено(ИдПодтвЗаказа) ) Тогда 
					ИдВложения = ИдПодтвЗаказа; 
					Если Сертификат <> Неопределено и Сертификат.Ключ.Тип = "Клиентский" и Действие.ТребуетПодписания = "Да" Тогда  // если ключ клиентский, значит подтверждение, сформированное онлайном, нужно удалить из списка вложений и добавить наше подтверждение
						attachmentList.Удалить(НомПодтвЗаказа);
					КонецЕсли;
				Иначе 
					ИдВложения = строка(Новый УникальныйИдентификатор());
				КонецЕсли;
				attachment.Вставить( "Идентификатор",  ИдВложения);
				Если Шифрование Тогда      // если входящие документы зашифрованы, то и ответ шифруем
					attachment.Вставить( "ТребуетШифрования",  "Да");
					Если Вложение.Свойство("Тип") и ЗначениеЗаполнено(Вложение.Тип) и ЗначениеЗаполнено(Вложение.ВерсияФормата) Тогда
						attachment.Вставить( "Тип",  Вложение.Тип);
						attachment.Вставить( "Подтип",  Вложение.ПодТип);
						attachment.Вставить( "ВерсияФормата",  Вложение.ВерсияФормата);
					КонецЕсли;
					Если Вложение.Свойство("Дата") и ЗначениеЗаполнено(Вложение.Дата) Тогда
						attachment.Вставить( "Дата",  Вложение.Дата);
					КонецЕсли;
					Если Вложение.Свойство("Название") и ЗначениеЗаполнено(Вложение.Название) Тогда
						attachment.Вставить( "Название",  Вложение.Название);
					КонецЕсли;
				КонецЕсли;
				
				attachment.Вставить( "Служебный",  ?(Вложение.Свойство("Служебный"),Вложение.Служебный,"Нет"));
				attachmentList.Добавить( attachment );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	prepared_stage = prepared_document.Этап[0];
	prepared_action = prepared_document.Этап[0].Действие[0];
	prepared_certificates = ?(prepared_action.Свойство("Сертификат"),prepared_action.Сертификат,Неопределено);
	certificates = Новый Массив;
	Если prepared_certificates<>Неопределено Тогда
		КолСерт = prepared_certificates.Количество();
		Для сч=0 По КолСерт-1 Цикл
			certificate = Новый Структура;
			certificate.Вставить( "Отпечаток", prepared_certificates[сч].Отпечаток );
			certificates.Добавить( certificate );
		КонецЦикла;
	КонецЕсли;
	action = Новый Структура;
	action.Вставить("Комментарий", prepared_action.Комментарий);
	action.Вставить("Название", prepared_action.Название);
	action.Вставить("Идентификатор", ?(prepared_action.Свойство("Идентификатор"),prepared_action.Идентификатор,""));
	action.Вставить("Сертификат", certificates);
	action.Вставить("ТребуетПодписания", prepared_action.ТребуетПодписания);
	stage = Новый Структура;
	stage.Вставить("Действие", action);
	stage.Вставить("Вложение", attachmentList);
	stage.Вставить("Идентификатор", prepared_stage.Идентификатор);
	stage.Вставить("Название", prepared_stage.Название);
	Если Этап.Свойство("Исполнитель") Тогда
		stage.Вставить("Исполнитель", Этап.Исполнитель);
	КонецЕсли;
	document_in = Новый Структура;
	document_in.Вставить( "Идентификатор", prepared_document.Идентификатор );
	prepared_redact = prepared_document.Редакция;
	redactions = Новый Массив;
	КолРедакций = prepared_redact.Количество();
	Для сч=0 По КолРедакций-1 Цикл
		redaction = Новый Структура;
		redaction.Вставить( "Идентификатор", prepared_redact[сч].Идентификатор );
		redactions.Добавить( redaction );
	КонецЦикла;
	document_in.Вставить( "Редакция", redactions );
	document_in.Вставить( "Этап", stage );
	// добавляем на случай шифрования
	Если СоставПакета.Свойство("НашаОрганизация") Тогда
		document_in.Вставить( "НашаОрганизация", СоставПакета.НашаОрганизация );
	КонецЕсли;
	Если СоставПакета.Свойство("Контрагент") Тогда
		document_in.Вставить( "Контрагент", СоставПакета.Контрагент );
	КонецЕсли;
	
	// Завершение этапа
	ДопПараметрыЗапроса	= Новый Структура;
	Парам = Новый Структура("document_in", document_in);
	РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ОтправитьИОбработатьКоманду( "ExecuteAction2", Парам, ДопПараметрыЗапроса, Отказ,ДанныеИнтеграции,ОбъектПлагин);
	
	Возврат Не Отказ;
КонецФункции

&НаКлиенте
Функция ВыполнитьКомандуПослеВвводаКомментарияSDK(Комментарий, ДополнительныеПараметры,ДанныеИнтеграции,ОбъектПлагин) Экспорт
	// Выполняет указанную команду по документу СБИС (утверждение/отклонение)	
	//Кэш = ДополнительныеПараметры.Кэш;
	СоставПакета = ДополнительныеПараметры.СоставПакета;
	ПредставлениеПакета = ДополнительныеПараметры.ПредставлениеПакета;
	ИмяКоманды = ДополнительныеПараметры.ИмяКоманды;
	
	Если ИмяКоманды = "Отклонить" и НЕ ЗначениеЗаполнено(Комментарий) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Ищем действие соответсвующее команде
	Для Каждого Действие из СоставПакета.Этап[0].Действие Цикл
		Если Действие.Название = ИмяКоманды Тогда
			результат = сбВыполнитьДействиеSDK(СоставПакета, СоставПакета.Этап[0], Действие, Комментарий, ПредставлениеПакета,ДанныеИнтеграции,ОбъектПлагин);
			//Если	Кэш.ПараметрыСистемы.Клиент.УправляемоеПРиложение
			//	И	ИмяКоманды = "Отклонить" Тогда
			//	Кэш.ГлавноеОкно.ОбновитьКонтент();
			//КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции



&НаКлиенте
Функция ВыполнитьКомандуПослеВвводаКомментария(Комментарий, ДополнительныеПараметры,ДанныеИнтеграции,ОбъектПлагин) Экспорт
	// Выполняет указанную команду по документу СБИС (утверждение/отклонение)	
	//Кэш = ДополнительныеПараметры.Кэш;
	СоставПакета = ДополнительныеПараметры.СоставПакета;
	ПредставлениеПакета = ДополнительныеПараметры.ПредставлениеПакета;
	ИмяКоманды = ДополнительныеПараметры.ИмяКоманды;
	
	Если ИмяКоманды = "Отклонить" и НЕ ЗначениеЗаполнено(Комментарий) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Ищем действие соответсвующее команде
	Для Каждого Действие из СоставПакета.Этап[0].Действие Цикл
		Если Действие.Название = ИмяКоманды Тогда
			результат = сбВыполнитьДействие(СоставПакета, СоставПакета.Этап[0], Действие, Комментарий, ПредставлениеПакета,ДанныеИнтеграции,ОбъектПлагин);
			//Если	Кэш.ПараметрыСистемы.Клиент.УправляемоеПРиложение
			//	И	ИмяКоманды = "Отклонить" Тогда
			//	Кэш.ГлавноеОкно.ОбновитьКонтент();
			//КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции


Функция ПодготовитьПоУмолчаниюОбъД()
	
	Чтен=Новый  ЗаписьJSON;
				ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, ,,ЭкранированиеСимволовJSON.СимволыВнеASCII);
	Чтен.УстановитьСтроку(ПараметрыЗаписиJSON );
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Thumbprint");
	Чтен.ЗаписатьЗначение(Неопределено);
	Чтен.ЗаписатьИмяСвойства("Inn");
	Чтен.ЗаписатьЗначение(Неопределено);
	
	Чтен.ЗаписатьИмяСвойства("DocumentTitleType");
	Чтен.ЗаписатьЗначение(0);
	Чтен.ЗаписатьИмяСвойства("SignerStatus");
	Чтен.ЗаписатьЗначение(6);
	Чтен.ЗаписатьИмяСвойства("SignerType");
	Чтен.ЗаписатьЗначение(1);
	Чтен.ЗаписатьИмяСвойства("Position");
	Чтен.ЗаписатьЗначение("Руководитель");
	Чтен.ЗаписатьИмяСвойства("SignerPowersBase");
	Чтен.ЗаписатьЗначение("Должностные обязанности");
	Чтен.ЗаписатьИмяСвойства("OrganizationBase");
	Чтен.ЗаписатьЗначение(Неопределено);
	Чтен.ЗаписатьИмяСвойства("RegistrationCertificate");
	Чтен.ЗаписатьЗначение(Неопределено);
	Чтен.ЗаписатьИмяСвойства("AdditionalInfo");
	Чтен.ЗаписатьЗначение(Неопределено);
	Чтен.ЗаписатьКонецОбъекта();
	
	Возврат Чтен
	
КонецФункции


&НаКлиенте
Процедура ПринятьПоКонДи(Thumbprint_1)
	
	
	Request=Неопределено;
	
	boxId="";
	
	BoxUrl="";
	PortalUserId="";
	VerificationToken="";
	Если НЕ РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ПодключениеПоКонтурДиадок(Request,Thumbprint_1,boxId,BoxUrl,PortalUserId,VerificationToken) Тогда
		Сообщить("Не удалось подключиться к Диадок");
		возврат;
	КонецЕсли;
	
	
	////7001201  - не выяснил где брать
	
	
	
	Request.Open("GET", "https://diadoc.kontur.ru/" + BoxId + "/Candy/FindEmployeeCredentials?thumbprint="+Врег(Thumbprint_1.Thumbprint_1)+"&documentTitleType=8");
	Request.Send();
	Request.WaitForResponse();
	
	
	
	Если Request.Status<>200 
		
		
		Тогда
		
		////Делаем сами параметр 1
		Параметр1=ПодготовитьПоУмолчаниюОбъД();
		
		
				
	Иначе
		Параметр1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Request.ResponseText);
	КонецЕсли;
	
	
	Request.Open("GET", "https://diadoc.kontur.ru/api/boxes/"+BoxId+"/employees/certificates?_="+TimeStamp());
	Request.Send();
	Request.WaitForResponse();
	Параметр2=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Request.ResponseText);
	
	
	//Request.Open("OPTIONS", "https://api.kontur.ru/candy/v1/ns/"+BoxId+"/drafts/"+идЧерновик+"/presentations/inner?src=changeSet&dataVersion=0&resourceZone=candy.resources.diadoc");
	//Request.Send();
	//Request.WaitForResponse();
	//
	//||Request.Open("OPTIONS", "https://api.kontur.ru/candy/v1/ns/"+BoxId+"/drafts/"+идЧерновик+"/presentations/inner?src=changeSet&dataVersion=0&resourceZone=candy.resources.diadoc");
	//Request.Send();
	//Request.WaitForResponse();
	
	
	//// https://api.kontur.ru/candy/static/public/styles/7001201.diadoc.min.css?v=2020.7.21-build11089.v2&resourceZone=candy.resources.diadoc
	
	
	 //
	 
	Request.Open("GET", "https://diadoc.kontur.ru/api/me");
	Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
	Request.Send();
	Request.WaitForResponse();
	 
	Параметр3=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Request.ResponseText);
	
	
	
	Request.Open("POST", "https://diadoc.kontur.ru/api/boxes/"+boxid+"/organization");
	//body="{""added"":[],""changed"":{""SignViewModel/Date.value"":"""+Формат(ТекущаяДата(),"ДЛФ=""""")+""",""SignViewModel/ForceValidations.value"":""true""},""removed"":[]}""";
	body="{""boxIds"":["""+boxid+"""]}";
	
	
	Request.SetRequestHeader("Content-Length", Формат(StrLen(body),"ЧГ="));
	Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
	Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
	Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");

	Request.Send(body);
	Request.WaitForResponse();
	 
	Параметр4=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Request.ResponseText)[0];
	
	
	Request.Open("GET", "https://api.kontur.ru/candy/static/public/scripts/7001201.min.js?v=2021.5.21-build14884.v2&resourceZone=candy.resources.diadoc");
	Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
	Request.Send();
	Request.WaitForResponse();
	
	
	resourcesHash=Сред(Request.ResponseText,Найти(Request.ResponseText,"var m=""")+7);
	resourcesHash=Сред(resourcesHash,1,Найти(resourcesHash,"""")-1);
	
	
	
	
		         Request.Open("POST", "https://diadoc.kontur.ru/" + BoxId + "/documents/precheck");
				 
				 
				 body="{""documentIds"":[{""letterId"":""8cea3ff6-6482-41c1-8cce-501bb9a30f23"",""entityId"":""6b0017d4-d9f1-4610-8b85-fcafa7831e3f""}]}";
				 
			Request.SetRequestHeader("Content-Length", Формат(StrLen(body),"ЧГ="));
			Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
			Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
			Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");
	Request.Send(body);
	Request.WaitForResponse();
	

		
		
		
		
		Request.Open("POST", "https://diadoc.kontur.ru/" + BoxId + "/Candy/NewDraft?gfv=7001201");
			Request.SetRequestHeader("Content-Length", Формат(StrLen("{}"),"ЧГ="));
			Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
			Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
			Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");
	Request.Send("{}");
	Request.WaitForResponse();
	
	идЧерновик=Request.ResponseText;


	
	
	
	  Стр=Объект;
	
	
	
	
	
	 
	
	
	ТелоА=ПараметрыДляОтгрузки_1(Параметр1,Thumbprint_1.Thumbprint_1,Параметр3,Параметр4,resourcesHash,boxid);

	
	Request.Open("OPTIONS", "https://api.kontur.ru/candy/v1/ns/"+boxid+"/drafts/"+ИдЧерновик+"/presentations/inner?src=changeSet&dataVersion=0&resourceZone=candy.resources.diadoc");
	
	
	Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
	Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
	Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");

	Request.Send();
	Request.WaitForResponse();
	
	

	
	 Request.Open("POST", "https://api.kontur.ru/candy/v1/ns/"+boxid+"/drafts/"+ИдЧерновик+"/presentations/inner?src=changeSet&dataVersion=0&resourceZone=candy.resources.diadoc");
	
	
	Request.SetRequestHeader("Content-Length", Формат(StrLen(ТелоА),"ЧГ="));
	Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
	Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
	Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");

	Request.Send(ТелоА);
	Request.WaitForResponse();
	
		Request.Open("OPTIONS", "https://api.kontur.ru/candy/v1/ns/"+boxid+"/drafts/"+ИдЧерновик+"/presentations/inner?src=changeSet&dataVersion=0&resourceZone=candy.resources.diadoc");
	
	
	Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
	Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
	Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");

	Request.Send();
	Request.WaitForResponse();
	
	

	
	 Request.Open("POST", "https://api.kontur.ru/candy/v1/ns/"+boxid+"/drafts/"+ИдЧерновик+"/presentations/inner?src=changeSet&dataVersion=0&resourceZone=candy.resources.diadoc");
//	body="{""added"":[],""changed"":{""SignViewModel/Date.value"":"""+Формат(ТекущаяДата(),"ДЛФ=Д")+""",""SignViewModel/ForceValidations.value"":""true""},""removed"":[]}""";
	body="{""added"":[],""changed"":{""SignViewModel/ForceValidations.value"":""true"",""SignViewModel/Signer/Mode.value"":""Edit""},""removed"":[]}""";
	
	Request.SetRequestHeader("Content-Length", Формат(StrLen(body),"ЧГ="));
	Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
	Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
	Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");

	Request.Send(body);
	Request.WaitForResponse();
	
	//	 Request.Open("POST", "https://api.kontur.ru/candy/v1/ns/"+boxid+"/drafts/"+ИдЧерновик+"/get-inner?resourceZone=candy.resources.diadoc");
	//body="[""@attachment/*""]";
	
	
	//Request.SetRequestHeader("Content-Length", Формат(StrLen(body),"ЧГ="));
	//Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
	//Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
	//Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");

	//Request.Send(body);
	//Request.WaitForResponse();
	
	
	
	 	
	 Request.Open("POST", "https://diadoc.kontur.ru/"+boxid+"/Candy/PrepareCandyContent?gfv=7001201");
	body="{""draftId"":"""+ИдЧерновик+"""}";
	
	Request.SetRequestHeader("Content-Length", Формат(StrLen(body),"ЧГ="));
	Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
	Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
	Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");

	Request.Send(body);
	Request.WaitForResponse();
	

	
	
	   	   	
	body="{""draftId"":"""+ИдЧерновик+""",""sellerTitleLetterId"":"""+Стр.ДокументОтгрузки+""",""sellerTitleEntityId"":"""+Стр._Order_ID+"""}";
	
	
	
	Request.Open("POST", "https://diadoc.kontur.ru/"+boxid+"/Candy/MakeBuyerTitle");
	
	
	Request.SetRequestHeader("Content-Length", Формат(StrLen(body),"ЧГ="));
	Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
	Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
	Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");

	Request.Send(body);
	Request.WaitForResponse();
	
		ТТТ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Request.ResponseText);
		
		shelfPath=ТТТ.shelfPath;
		
		BL=Прав(shelfPath,36);
		
			
	Request.Open("GET", "https://diadoc.kontur.ru/ShelfDownload?nameOnShelf=__userId__/"+BL+"&originalFileName=internal&makeBase64=true&_="+TimeStamp());
	
	
	Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
	
	Request.Send();
	Request.WaitForResponse();
	
	
						ИмяВр_1="";
						SignatureBase64="";
						ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,Request.ResponseText ,
						Thumbprint_1,SignatureBase64,, Истина);
						//SignatureBase64=base64Строка(ДанныеФайла);
SignatureBase64=СтрЗаменить(SignatureBase64,Символы.ПС,"");

SignatureBase64=СтрЗаменить(SignatureBase64,Символы.ВК,"");

body=ТелоДляОтправкиККД(SignatureBase64,shelfPath);

	
	Request.Open("POST", "https://diadoc.kontur.ru/api/boxes/"+boxid+"/documents/primary-signatures");
	
	
	Request.SetRequestHeader("Content-Length", Формат(StrLen(body),"ЧГ="));
	Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
	Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
	Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");

	Request.Send(body);
	Request.WaitForResponse();
	Если   Request.Status=200 Тогда
		ТТТТ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Request.ResponseText);
		Если ТТТТ<>Неопределено И ТТТТ.documentResults[0].success=Истина Тогда
			Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Подписан");
			ЭтаФорма.Записать(Новый Структура("РжеиммЗаписиДокумента",РежимЗаписиДокумента.Проведение));
			
		КонецЕсли;
	КонецЕсли;
	//Сообщить(Request.ResponseText);

	
	
КонецПроцедуры

Функция ТелоДляОтправкиККД(SignatureBase64,shelfPath)
	Стр=Объект;
	Чтен=Новый  ЗаписьJSON;
				ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, ,,ЭкранированиеСимволовJSON.СимволыВнеASCII);
	Чтен.УстановитьСтроку(ПараметрыЗаписиJSON );
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("primarySignatures");
	Чтен.ЗаписатьНачалоМассива();
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("documentId");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("entityId");
	Чтен.ЗаписатьЗначение(Стр._Order_ID);
	Чтен.ЗаписатьИмяСвойства("letterId");
	Чтен.ЗаписатьЗначение(Стр.ДокументОтгрузки);
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьИмяСвойства("primarySignature");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("recipientTitle");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("comment");
	Чтен.ЗаписатьЗначение(Неопределено);
	Чтен.ЗаписатьИмяСвойства("location");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("contentBase64");
	Чтен.ЗаписатьЗначение(Неопределено);
	Чтен.ЗаписатьИмяСвойства("entityContent");
	Чтен.ЗаписатьЗначение(Неопределено);
	Чтен.ЗаписатьИмяСвойства("patchedContentId");
	Чтен.ЗаписатьЗначение(Неопределено);
	Чтен.ЗаписатьИмяСвойства("shelfPath");
	Чтен.ЗаписатьЗначение(shelfPath);
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьИмяСвойства("signatureLocation");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("contentBase64");
	Чтен.ЗаписатьЗначение(SignatureBase64);
	чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();
	Возврат Тело
	
	
Конецфункции



Функция ПараметрыДляОтгрузки_1(Параметр1,Thumbprint_1,Параметр3,Параметр4,resourcesHash,boxid)
	
	Чтен=Новый  ЗаписьJSON;
				ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, ,,ЭкранированиеСимволовJSON.СимволыВнеASCII);
	Чтен.УстановитьСтроку(ПараметрыЗаписиJSON );
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("added");
	Чтен.ЗаписатьНачалоМассива();
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьИмяСвойства("changed");
	Чтен.ЗаписатьНачалоОбъекта();
	
	Наччало="SignViewModel/Signer/";
	
	//Чтен.ЗаписатьИмяСвойства("SignViewModel/UserContractData.value");
	//Чтен.ЗаписатьЗначение(Формат(ТекущаяДата(),"ДЛФ=Д"));
	
	
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/Date.value");
	Чтен.ЗаписатьЗначение(Формат(ТекущаяДата(),"ДЛФ=Д"));
	//Чтен.ЗаписатьЗначение("");
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel.value");
	Чтен.ЗаписатьЗначение("");
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/Consignee/AdditionalInfo.value");
	Чтен.ЗаписатьЗначение("");

	Чтен.ЗаписатьИмяСвойства("SignViewModel/Consignee/AdditionalInfoVisible.value");
	Чтен.ЗаписатьЗначение("");
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/Consignee/EmployeeBase.value");
	Чтен.ЗаписатьЗначение("Должностные обязанности");
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/Consignee/FirstName.value");
	Чтен.ЗаписатьЗначение("");
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/Consignee/LastName.value");
	Чтен.ЗаписатьЗначение("");
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/Consignee/MiddleName.value");
	Чтен.ЗаписатьЗначение("");
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/Consignee/OrganizationBase.value");
	Чтен.ЗаписатьЗначение("");
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/Consignee/OrganizationName.value");
	Чтен.ЗаписатьЗначение("");
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/Consignee/Position.value");
	Чтен.ЗаписатьЗначение("");
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/Consignee/Type.value");
	Чтен.ЗаписатьЗначение("CargoReceiver");
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/Consignee/Type.disabled");
	Чтен.ЗаписатьЗначение(false);
	
	
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/ContentOperCode/Date.value");
	Чтен.ЗаписатьЗначение("");
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/ContentOperCode/NameDiscrepDocument.value");
	Чтен.ЗаписатьЗначение("");
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/ContentOperCode/NumberDiscrepDocument.value");
	Чтен.ЗаписатьЗначение("");
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/ContentOperCode/TypeDiscrepDocument.disabled");
	Чтен.ЗаписатьЗначение(false);
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/ContentOperCode/TypeDiscrepDocument.value");
	Чтен.ЗаписатьЗначение("1");
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/DisagreementInfo.value");
	Чтен.ЗаписатьЗначение("");
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/HasDisagreements.value");
	Чтен.ЗаписатьЗначение("1");
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/HasDisagreements.disabled");
	Чтен.ЗаписатьЗначение(false);
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/Consignee/AdditionalInfo.visible");
	Чтен.ЗаписатьЗначение(false);
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel.errorsCount");
	Чтен.ЗаписатьЗначение(0);
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel.resourcesHash");
	Чтен.ЗаписатьЗначение(resourcesHash);
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/CurrentUser/EmployeePosition.value");
	Чтен.ЗаписатьЗначение(Параметр1.Position);
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/CurrentUser/OrganizationName.value");
	Чтен.ЗаписатьЗначение(Параметр4.fullName);
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/CurrentUser/PersonName.value");
	Чтен.ЗаписатьЗначение(Параметр3.currentUserFio);
	
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/CurrentUser/PersonShortName.value");
	Чтен.ЗаписатьЗначение(Параметр3.nameOrLogin);
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/CurrentUser/Email.value");
	Чтен.ЗаписатьЗначение(Параметр3.currentUserEmail);
	
	
	AdditionalInfo="";
	Параметр1.Свойство("AdditionalInfo",AdditionalInfo);
	Чтен.ЗаписатьИмяСвойства(Наччало+"AdditionalInfo"+".value");
	Чтен.ЗаписатьЗначение(AdditionalInfo);
	
	
	AdditionalInfoVisible="";
	Параметр1.Свойство("AdditionalInfoVisible",AdditionalInfoVisible);
	Чтен.ЗаписатьИмяСвойства(Наччало+"AdditionalInfoVisible"+".value");
	Чтен.ЗаписатьЗначение(AdditionalInfoVisible);
	
	
	Mode="";
	Параметр1.Свойство("Mode",Mode);
	Чтен.ЗаписатьИмяСвойства(Наччало+"Mode"+".value");
	Чтен.ЗаписатьЗначение(Mode);
	
	OrganizationBase="";
	Параметр1.Свойство("OrganizationBase",OrganizationBase);
	Чтен.ЗаписатьИмяСвойства(Наччало+"OrganizationBase"+".value");
	Чтен.ЗаписатьЗначение(OrganizationBase);
	
	
	Position="";
	Параметр1.Свойство("Position",Position);
	Чтен.ЗаписатьИмяСвойства(Наччало+"Position"+".value");
	Чтен.ЗаписатьЗначение(Position);
	
	RegistrationCertificate="";
	Параметр1.Свойство("RegistrationCertificate",RegistrationCertificate);
	Чтен.ЗаписатьИмяСвойства(Наччало+"RegistrationCertificate"+".value");
	Чтен.ЗаписатьЗначение(RegistrationCertificate);
	
	
	Чтен.ЗаписатьИмяСвойства(Наччало+"RegistrationCertificateVisible"+".value");
	Чтен.ЗаписатьЗначение(false);
	
	SignerPowers="";
	Параметр1.Свойство("SignerPowers",SignerPowers);
	Чтен.ЗаписатьИмяСвойства(Наччало+"SignerPowers"+".value");
	Чтен.ЗаписатьЗначение(SignerPowers);
	
	
	Чтен.ЗаписатьИмяСвойства(Наччало+"SignerPowers"+".disabled");
	Чтен.ЗаписатьЗначение(false);
	
	
	SignerPowersBase="";
	Параметр1.Свойство("SignerPowersBase",SignerPowersBase);
	Чтен.ЗаписатьИмяСвойства(Наччало+"SignerPowersBase"+".value");
	Чтен.ЗаписатьЗначение(SignerPowersBase);
	
	SignerStatus="";
	Параметр1.Свойство("SignerStatus",SignerStatus);
	Чтен.ЗаписатьИмяСвойства(Наччало+"SignerStatus"+".value");
	Чтен.ЗаписатьЗначение(SignerStatus);
	
	Чтен.ЗаписатьИмяСвойства(Наччало+"SignerStatus"+".disabled");
	Чтен.ЗаписатьЗначение(false);
	
	Чтен.ЗаписатьИмяСвойства(Наччало+"AdditionalInfo"+".visible");
	Чтен.ЗаписатьЗначение(false);
	
	
	
	
	Чтен.ЗаписатьИмяСвойства(Наччало+"RegistrationCertificateLinkVisible"+".value");
	Чтен.ЗаписатьЗначение(false);
	
	Чтен.ЗаписатьИмяСвойства(Наччало+"OrganizationBaseVisible"+".value");
	Чтен.ЗаписатьЗначение(false);
	
	Чтен.ЗаписатьИмяСвойства(Наччало+"OrganizationBasePreviewVisible"+".value");
	Чтен.ЗаписатьЗначение(false);
	
	Чтен.ЗаписатьИмяСвойства(Наччало+"PositionVisible"+".value");
	Чтен.ЗаписатьЗначение(true);
	
	Чтен.ЗаписатьИмяСвойства(Наччало+"SignerStatus"+".touched");
	Чтен.ЗаписатьЗначение(false);
	
	Чтен.ЗаписатьИмяСвойства(Наччало+"SignerPowersBase"+".touched");
	Чтен.ЗаписатьЗначение(false);
	
	
	Inn="";
	Параметр4.Свойство("Inn",Inn);
	Чтен.ЗаписатьИмяСвойства(Наччало+"Inn"+".value");
	Чтен.ЗаписатьЗначение(Inn);
	
	
	Inn="";
	Параметр4.Свойство("Inn",Inn);
	Чтен.ЗаписатьИмяСвойства("SignViewModel/CurrentUser/OrganizationInn.value");
	Чтен.ЗаписатьЗначение(Inn);
	
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/CurrentUser/BoxId.value");
	Чтен.ЗаписатьЗначение(boxid);
	
	
	
	KPP="";
	Параметр4.Свойство("kpp",KPP);
	Чтен.ЗаписатьИмяСвойства("SignViewModel/CurrentUser/OrganizationKpp.value");
	Чтен.ЗаписатьЗначение(KPP);
	
	
	
	Чтен.ЗаписатьИмяСвойства(Наччало+"IsLegalEntity"+".value");
	Чтен.ЗаписатьЗначение(false);
	
	
	
	
	
	SignerType="";
	Параметр1.Свойство("SignerType",SignerType);
	Чтен.ЗаписатьИмяСвойства(Наччало+"SignerType"+".value");
	Чтен.ЗаписатьЗначение(SignerType);
	
	DocumentTitleType="";
	Параметр1.Свойство("DocumentTitleType",DocumentTitleType);
	Чтен.ЗаписатьИмяСвойства(Наччало+"DocumentTitleType"+".value");
	Чтен.ЗаписатьЗначение(DocumentTitleType);
	
	
	ФИО=Параметр3.currentUserFio;
	LastName=Сред(ФИО,1,Найти(ФИО," ")-1);
	
	Чтен.ЗаписатьИмяСвойства(Наччало+"LastName"+".value");
	Чтен.ЗаписатьЗначение(LastName);
	
	Имя=Сред(ФИО,Найти(ФИО," ")+1);
	Отчетство=Сред(Имя,Найти(Имя," ")+1);
	
	Имя=Сред(Имя,1,Найти(Имя," ")-1);
	
	Чтен.ЗаписатьИмяСвойства(Наччало+"FirstName"+".value");
	Чтен.ЗаписатьЗначение(Имя);
	
	Чтен.ЗаписатьИмяСвойства(Наччало+"MiddleName"+".value");
	Чтен.ЗаписатьЗначение(Отчетство);
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/CurrentUser/MiddleName.value");
	Чтен.ЗаписатьЗначение(Отчетство);
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/CurrentUser/FirstName.value");
	Чтен.ЗаписатьЗначение(Имя);
	
	Чтен.ЗаписатьИмяСвойства("SignViewModel/CurrentUser/LastName.value");
	Чтен.ЗаписатьЗначение(LastName);
	
	///MiddleName
	
	Чтен.ЗаписатьИмяСвойства(Наччало+"CommonName"+".value");
	Чтен.ЗаписатьЗначение(Параметр4.fullName);
	
	Чтен.ЗаписатьИмяСвойства(Наччало+"PersonName"+".value");
	Чтен.ЗаписатьЗначение(Параметр3.currentUserFio);
	
	Чтен.ЗаписатьИмяСвойства(Наччало+"OrganizationName"+".value");
	Чтен.ЗаписатьЗначение(Параметр4.fullName);
	
	Чтен.ЗаписатьИмяСвойства(Наччало+"Thumbprint"+".value");
	Чтен.ЗаписатьЗначение(Thumbprint_1);
	
	Чтен.ЗаписатьИмяСвойства(Наччало+"SignerPowers"+".touched");
	Чтен.ЗаписатьЗначение(true);
	Чтен.ЗаписатьКонецОбъекта();
	
	
	Чтен.ЗаписатьИмяСвойства("removed")	;
	Чтен.ЗаписатьНачалоМассива();
	Чтен.ЗаписатьКонецМассива();
	
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();

Возврат Тело	
	
КонецФункции


&AtServerNoContext
Function TimeStamp()
	
	Return xmlsTring(CurrentUniversalDate() - Date(1970, 1, 1));
	
EndFunction



&НаКлиенте
Процедура Принять(Команда,УжеОтправили=Ложь) Экспорт
 	// Вставить содержимое обработчика.
	Thumbprint_1=ПолучитьИзПользователя();
	
	Если Thumbprint_1=Неопределено Тогда
		Сообщить("Не удалось принять документ "+Строка(Объект.Ссылка));
		Возврат;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Объект.ТипЭДО) Тогда
		
		Если Объект.ТипЭДО=ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОТензор") Тогда
			
			ПринятьпоСБ(Объект.Ссылка,Thumbprint_1);			
			Возврат;
		ИначеЕсли Объект.ТипЭДО=ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОТакском") Тогда
			ПринятьПоТХЦу(Thumbprint_1);
			Возврат;
		ИначеЕсли Объект.ТипЭДО=ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОКонтур") Тогда
			ПринятьПоКонДи(Thumbprint_1);
			Возврат;
		ИначеЕсли Объект.ТипЭДО<>ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОЛайт") Тогда
			Сообщить("Документ получен по "+Строка(Объект.ТипЭДО));
			ВОзврат;
		конецЕсли;
	КонецЕсли;
	
	
	Если Объект.УПД Тогда
	// Вставить содержимое обработчика.
	Если  ОБъект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан")
		Тогда
				Возврат;
			КонецЕсли;
			
				
				Попытка
		//			ЛицензияОпределить_Просто(Thumbprint_1);
				Исключение
				КонецПопытки;
				
		//		СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		//		СРегистра=Неопределено;
		//		Если Не ЗначениеЗаполнено(СРегистра) тогда
		
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра) ИЛИ Не ЗначениеЗАполненО(СерийныйНомер) тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
			КонецЕсли;
			
		//		КонецЕсли;
				Если Не ЗначениеЗаполнено(СРегистра) Тогда
					ПоказатьПредупреждение(,"Не удалось получить токен по организации");
					Возврат;
				Конецесли;
				
		 	Если ОбработкаWEBНаСервере Тогда
				//Если НЕ ЗагрузканаСерверИзЦРПТ(Thumbprint_1,СРегистра,УжеОтправили) Тогда
				//		Если УжеОтправили=Истина Тогда
				//		//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
				//	Иначе
				//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				//		ЗагрузитьИзЦРПТ(Команда,Истина)			
				//КонецЕсли
				//
				//КонецЕсли;
				//
				
			Иначе
				
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;  

					                                                     
				Если ЗначениеЗаполнено(Объект._Order_ID) Тогда
					
						ПродолжимДальшенаКлиенте(HTTPСервисЗапрос,Thumbprint_1,СерийныйНомер,СРегистра);
					Этаформа.Прочитать();		
					Возврат;
				КонецеслИ;
			
			СформироВатьУПД=СформироватьУПД();
			
										СформироВатьУПД=СтрЗаменить(СформироВатьУПД,Символы.ПС,"\r\n");
						СформироВатьУПД=СтрЗаменить(СформироВатьУПД,Символы.ВК,"\r\n");
						СформироВатьУПД=СтрЗаменить(СформироВатьУПД,"\r\n","");
				

			HTTPЗапрос=Новый HTTPЗапрос("edo-api/incoming-documents/"+Объект.ДокументОтгрузки+"/events");
			

			
			
			
			
			HTTPЗапрос.УстановитьТелоИзСтроки(СформироВатьУПД,КодировкаТекста.ANSI);
			HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
			HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
			HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(СформироватьУПД),"ЧГ="));
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
			"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


			HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
			HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
			HTTPЗапрос.Заголовки.Вставить("Origin","https://"+Thumbprint_1.АдресКАПИ);
			HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
			HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
			HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ+"/documents/incoming/upd820SfDop/"+Объект.ДокументОтгрузки);
			
			
			
			
			HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
			
			
			
		//	Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
			
			//Тело="documentType=LP_ACCEPT_GOODS_XML";
		//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин           
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если Ответ.КодСостояния=200 ИЛИ Ответ.КодСостояния=201 Тогда
				
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Объект._Order_ID=NNN.id;
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				Объект.ОшибкаОтправки="";
				этаФорма.Записать();
				
				ПродолжимДальшенаКлиенте(HTTPСервисЗапрос,Thumbprint_1,СерийныйНомер,СРегистра);
				
				ЭтаФорма.Прочитать();
							
			Иначе
				Сообщить("Код состояния "+Ответ.КодСостояния);
				объект.ОшибкаОтправки=Текст1;
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Сообщить(Текст1);
			    КонецЕсли;
			КонецЕслИ;
			
			//Этаформа.Записать();
		
		Возврат;
	КонецЕслИ;
	
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
		
		ОтправитьПриемкуФармацевтика(Thumbprint_1);
		
		Возврат;
	КонецЕсли;
	
	
	Если Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента") Тогда
		
		Объект.ЧастичныйОтказ.Очистить();
		
		Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
			Возврат;
		КонецЕслИ;
		
		СРегистра=Thumbprint_1.ТокенПоОтпечатку;
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			Попытка
				СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
			исключение
				СРегистра=Неопределено;
			КонецПопытки;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			ПоказатьПредупреждение(,"Не удалось получить токен по организации");
			Возврат;
		Конецесли;
		
		
			СформироватьФайлДляОтправки=СформироватьXmlФайлИмпорт();
	 				СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС," ");
				СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК," ");
			
		Подписанный="";
		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1,Подписанный,Истина);
		
		//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//Подписанный,КодировкаТекста.UTF8,Ложь));
		
					Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
				Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
				Подписанный=СтрЗаменить(Подписанный,"\r\n","");
		
				
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
				
		//Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

		Тело="{
		|""product_document"":"""+Добав+""",
		|""document_format"": ""MANUAL"",
		|""signature"":"""+Подписанный+"""}";
		
		
	 	Если ОбработкаWEBНаСервере Тогда
		Если НЕ ЗагрузканаСервереПринять(Thumbprint_1,СРегистра,УжеОтправили,Тело) Тогда
				Если УжеОтправили=Истина Тогда
				//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				Принять(Команда,Истина)			
		КонецЕсли
		
		КонецЕсли;
		
		
	Иначе
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				             
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				
						
 			что=Thumbprint_1.что;
	
				
				
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/acceptance/create?pg="+Что);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		
		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Ответ(Текст1);
		КонецЕсли;
			
		
		
		Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
			ИЛИ Ответ.КодСостояния=201 
			Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				Объект._Order_ID=Текст1;
				
		ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
				Если УжеОтправили=Истина Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
				Иначе
					ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
					Принять(Команда,Истина)			
				КонецЕсли
		Иначе
			//	Если УжеОтправили=Истина Тогда
					Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
						Попытка
							//ЧтениеJSON = Новый ЧтениеJSON;
							//ЧтениеJSON.УстановитьСтроку(Текст1);
							NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
							попытка
								
								Объект.ОшибкаОтправки=NNN.error_message;
							Исключение
								Попытка
									Объект.ОшибкаОтправки=NNN.error_description;
									Если NNN.error="access_denied" Тогда
										Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
									КонецЕсли;
								Исключение
								КонецПопытки;
								
							КонецПопытки;
							
						Исключение
						КонецПопытки;
			//	Иначе
			//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
			//		ОтправитьЗаявку(Команда,Истина)			
			//	КонецЕсли
		КонецЕсли;
		         КонецЕсли;
		ЭтаФорма.Записать();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Элементы.УКД_Страница.Видимость=Объект.УКД;
	Элементы.ГруппаТовары.Видимость=Не Объект.УКД;
	Элементы.ГруппаСерийныеНомера.Видимость=Не Объект.УКД;
	
	
	
			Элементы._702Схема.Видимость=Объект.ОбратныйАкцепт;
	элементы.ТоварыНомерКороба.Видимость=Ложь;
	Для Каждого Стр_1 из Объект.Товары Цикл
		Если Значениезаполнено(Стр_1.НомерКороба) Тогда
			Элементы.ТоварыНомерКороба.Видимость=Истина;
			Прервать;
		Конецесли;
		
	конеццикла;
	НастройкиПрограммы=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить();
	ПроверкаНаСимволКриллицы=НастройкиПрограммы.ПроверкаНаСимволКриллицы;
	УбратьПриемкуЕслиНетСопоставления= НастройкиПрограммы.УбратьПриемкуЕслиНетСопоставления;
	ПриЗагрузкеИнформацииПоЭДОПриемкаВКоличество=НастройкиПрограммы.ПриЗагрузкеИнформацииПоЭДОПриемкаВКоличество;
	Показать=Истина;
	Если УбратьПриемкуЕслиНетСопоставления Тогда
		Если ЗначениеЗАполнено(Объект.Ссылка) тогда
		
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Справочник_Документ
		|ИЗ
		|	РегистрСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ КАК СопоставлениеСправочниковДокументов_ХамелеонЦРПТ
		|ГДЕ
		|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СправочникДокумент_Меркурия = &СправочникДокумент_Меркурия";
	
	Запрос.УстановитьПараметр("СправочникДокумент_Меркурия", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Показать=ВыборкаДетальныеЗаписи.Количество()<>0;
Иначе
	       Показать=Ложь;
	КонецЕсли;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		КонецЕсли;
	Элементы.Принять.Видимость=Показать;
	ВремФайл=xmlString(Объект.Ссылка.УникальныйИдентификатор());
	Элементы.ГруппаОбратныйакцепт.Видимость=Объект.ОбратныйАкцепт;
	Элементы.Поставщик.ТолькоПросмотр=Не Объект.ОбратныйАкцепт;
	Если Объект.ОбратныйАкцепт Тогда
		Элементы.Принять.Заголовок="Отправить поставщику";
		
	КонецЕсли;
	
	Элементы.ТоварыОчиститьИДобавитьТовары.Видимость=Объект.ОбратныйАкцепт;
	
	Элементы.Статус.Видимость=НЕ Объект.УПД;
	Элементы.СтатусУПД.Видимость=Объект.УПД;
									   ОбработкаWEBНаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	
	Элементы.Подсчитать.Видимость=Объект.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан;
	ОбновитьВнешниеКнопки();
	ЧислоПараллельныхПотоков = РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КоличествоЯдерДляГенерацииDataMatrix;
	ТекущийПользовательПриИзмененииНаСервере();
	
	Настройки = РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить();
	
	ЗагрузатьНаименованиеПриПриемке=Настройки.ЗагрузатьНаименованиеПриПриемке;
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ВерсияПравильная=Сред(СистемнаяИнформация.ВерсияПриложения,1,6)<>"8.3.6." 
			И Сред(СистемнаяИнформация.ВерсияПриложения,1,6)<>"8.3.7."
			И Сред(СистемнаяИнформация.ВерсияПриложения,1,6)<>"8.3.8."
	 		И Сред(СистемнаяИнформация.ВерсияПриложения,1,6)<>"8.3.9.";
			
		
		
		Если	Настройки.ЗапрещатьРедактироватьПриемкуЕслиОнаОтправленаИлиОбработана
				Тогда
		
		ЭтаФорма.ТолькоПросмотр=Объект.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен
		ИЛИ Объект.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик
		ИЛИ Объект.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
		ИЛИ 
		(Значениезаполнено(Объект.СтатусУПД) И 
		(Объект.СтатусУПД<>Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отклонен
		
		ИЛИ
		 Объект.СтатусУПД<>Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отозван
		)
		)
		
		;
		Элементы.СканироватьМарку.ТолькоПросмотр=ЭтаФорма.ТолькоПросмотр;
		
		
				
		Конецесли;
		
	МодульПриСозданииДокументов_ХамелеонЦРПТ.Приемка_ХамелеонЦРПТ_ПриСозданииНаСервере(ЭтаФорма,Отказ,СтандартнаяОбработка);
		
КонецПроцедуры

Функция ЗагрузканаСервереОтклонить(Thumbprint_1,СРегистра,УжеОтправили,Тело)
Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				
						
 			что=Thumbprint_1.что;
	
				
				
//			HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/shipment/cancel");
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/acceptance/create?pg="+Что);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		
		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Ответ(Текст1);
		КонецЕсли;
			
		
		
		Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
			ИЛИ Ответ.КодСостояния=201 
			Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				Объект._Order_ID=Текст1;
				
		ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
				Если УжеОтправили=Истина Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
				Иначе
					возврат Ложь;
				КонецЕсли
		Иначе
			//	Если УжеОтправили=Истина Тогда
					Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
						Попытка
							//ЧтениеJSON = Новый ЧтениеJSON;
							//ЧтениеJSON.УстановитьСтроку(Текст1);
							NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
							попытка
								
								Объект.ОшибкаОтправки=NNN.error_message;
							Исключение
								Попытка
									Объект.ОшибкаОтправки=NNN.error_description;
									Если NNN.error="access_denied" Тогда
										Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
									КонецЕсли;
								Исключение
								КонецПопытки;
								
							КонецПопытки;
							
						Исключение
						КонецПопытки;
			//	Иначе
			//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
			//		ОтправитьЗаявку(Команда,Истина)			
			//	КонецЕсли
		КонецЕсли;
		
	
	Возврат истина;
КонецФункции


&НаКлиенте
Процедура ОтменаПоТХЦу(Thumbprint_1)
	
	ПоказатьВводСтроки(Новый ОписаниеОповещения("ПослеКомментарий",ЭтаФорма,Thumbprint_1), "","Введите причину отмены документа № "+Строка(Объект.НомерВходящий)+". "+Строка(объект.Ссылка),, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПослеКомментарий(РР,ДД) Экспорт
	Если РР=Неопределено тогда
		Возврат;
	КонецЕсли;
	Thumbprint_1=ДД;
	
	
	Если Объект.ТипЭДО=ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОТензор") Тогда
		ПринятьпоСБ(Объект.Ссылка,Thumbprint_1,"Отклонить",РР);
		
		Возврат;
	КонецЕсли;
	
	СайтДляПодключенияПоТакскму=Thumbprint_1.ТХЦ;
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
		Прокси=Новый ИнтернетПрокси;
		Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
		HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	Иначе
				
		HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	КонецЕсли;

	Маркер=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОТХЦ(Thumbprint_1,"",HTTPСервисЗапрос_ТХЦ);
	Если  ЗначениеЗаполнено(Маркер) тогда
		АдресРесурса = "api/Reject?docflowId="+Объект.ДокументОтгрузки+"&comment="+РР;
		
		ЗапросСпискаДокументов = Новый HTTPЗапрос;
		ЗапросСпискаДокументов.АдресРесурса = АдресРесурса;
		
		Заголовки = Новый Соответствие();
		Заголовки.Вставить("Integrator-Id", "Kartoteka_9AFE5408-C930-47FA-9CE4-FAE615EED09E");
		Заголовки.Вставить("Assistant-Key", Маркер);
		ЗапросСпискаДокументов.Заголовки = Заголовки;
		
		Ответ = HTTPСервисЗапрос_ТХЦ.Получить(ЗапросСпискаДокументов);
		Если Ответ.КодСостояния=200 Тогда
			Сообщить("Документ приемки "+Строка(объект.Ссылка)+" успешно отменен.");
			//Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПрочитатьСведенияОбОрганизацииНаСервере(Ответ.ПолучитьТелоКакСтроку());
		Иначе
			Сообщить("Не удалось отменить приемку "+Строка(Объект.Ссылка)+". Ошибка: "+Ответ.ПолучитьТелоКакСтроку());
			//Возврат Новый Структура("ИНН, Идентификатор","","");
		КонецЕсли;
		
		
	Иначе
		Сообщить("Не удалось отменить приемку "+Строка(объект.Ссылка));
	КонецЕсли;
	
	
	
	
	
КонецПроцедуры

Функция СоздатьДокументОтказаЛекарства()
	
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрацияСеденийОбОтзывеОтгрузок_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Документ.РегистрацияСеденийОбОтзывеОтгрузок_ХамелеонЦРПТ КАК РегистрацияСеденийОбОтзывеОтгрузок_ХамелеонЦРПТ
		|ГДЕ
		|	РегистрацияСеденийОбОтзывеОтгрузок_ХамелеонЦРПТ.ДокументОснование = &ДокументОснование
		|	И НЕ РегистрацияСеденийОбОтзывеОтгрузок_ХамелеонЦРПТ.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Докум=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
Иначе
	Докум=Документы.РегистрацияСеденийОбОтзывеОтгрузок_ХамелеонЦРПТ.СоздатьДокумент();
КонецЕсли;
	Докум.ДокументОснование=Объект.Ссылка;
	дОКУМ.Дата=ТекущаяДата();
	Докум.ТекущийПользователь=Объект.ТекущийПользователь;
	Докум.Записать();
	Возврат Докум.Ссылка
КонецФункции


&НаКлиенте
Процедура Отклонить(Команда,УжеОтправили=ложь,НеЗадаватьВопрос=Ложь) Экспорт
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
		
		Если Объект.ОбратныйАкцепт=Истина Тогда
			
	
			ИщемСоздаемДокументОтказа=СоздатьДокументОтказаЛекарства();
			ОткрытьФорму("Документ.РегистрацияСеденийОбОтзывеОтгрузок_ХамелеонЦРПТ.Форма.ФормаДокумента",
			Новый Структура("Ключ",ИщемСоздаемДокументОтказа));
			Возврат;
	
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	Если Объект.УПД Тогда
		
		Если Объект.ТипЭДО=ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОТакском") 
			ИЛИ   Объект.ТипЭДО=ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОТензор") Тогда
			ОтменаПоТХЦу(Thumbprint_1);
			
			Возврат;
		КонецЕсли;
		
		
		
		Сообщить("Приемку, полученную по УПД нельзя отклонять!!");
		
		Возврат;
	КонецЕслИ;
	
	
	
	Если НеЗадаватьВопрос=Истина Тогда
		ПослеВопросаОтклонения(КодВозвратаДиалога.Да,Thumbprint_1);
	Иначе
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопросаОтклонения",ЭтаФорма,Thumbprint_1),"Полный отказ правильнее делать со стороны поставщика, все равно отказать?",РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры	


&НаКлиенте
Процедура ПослеВопросаОтклонения(РР,Thumbprint_1) Экспорт
	Если РР<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОтклонитьДокумент(РР,Thumbprint_1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьДокумент(РР,Thumbprint_1,УжеОтправили=ЛОжь)
	
	Если Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента") Тогда
		Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
			Возврат;
		КонецЕслИ;
		
		СРегистра=Thumbprint_1.ТокенПоОтпечатку;
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			Попытка
				СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
			исключение
				СРегистра=Неопределено;
			КонецПопытки;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			ПоказатьПредупреждение(,"Не удалось получить токен по организации");
			Возврат;
		Конецесли;
		
		
			СформироватьФайлДляОтправки=СформироватьXmlФайлИмпорт(Истина);
			//Попытка
			//	Если НеПрошлаПроверкаИмпорт_Отклонить(СформироватьФайлДляОтправки) Тогда
			//		Объект.ОшибкаОтправки="Проверка документа не прошла по схеме xsd";
					//ПоказатьПредупреждение("");
		//			Возврат;
					
			//	КонецЕсли;
				
				
		//	Исключение
		//	КонецПопытки;
			
		Подписанный="";
		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1,Подписанный,Истина);
		
		//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//Подписанный,КодировкаТекста.UTF8,Ложь));
		
					Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
				Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
				Подписанный=СтрЗаменить(Подписанный,"\r\n","");
		
				
				
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
		//Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

		Тело="{
		|""product_document"":"""+Добав+""",
		|""document_format"": ""MANUAL"",
		|""signature"":"""+Подписанный+"""}";
		
		
	 	Если ОбработкаWEBНаСервере Тогда
		Если НЕ ЗагрузканаСервереОтклонить(Thumbprint_1,СРегистра,УжеОтправили,Тело) Тогда
				Если УжеОтправили=Истина Тогда
				//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОтклонитьДокумент(РР,Thumbprint_1,Истина)			
		КонецЕсли
		
		КонецЕсли;
		
		
	Иначе
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				
						
 			что=Thumbprint_1.что;
	
				
				
//			HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/shipment/cancel");
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/acceptance/create?pg="+Что);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		
		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Ответ(Текст1);
		КонецЕсли;
			
		
		
		Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
			ИЛИ Ответ.КодСостояния=201 
			Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				Объект._Order_ID=Текст1;
				
		ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
				Если УжеОтправили=Истина Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
				Иначе
					ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
					ОтклонитьДокумент(РР,Thumbprint_1,Истина)			
				КонецЕсли
		Иначе
			//	Если УжеОтправили=Истина Тогда
					Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
						Попытка
							//ЧтениеJSON = Новый ЧтениеJSON;
							//ЧтениеJSON.УстановитьСтроку(Текст1);
							NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
							попытка
								
								Объект.ОшибкаОтправки=NNN.error_message;
							Исключение
								Попытка
									Объект.ОшибкаОтправки=NNN.error_description;
									Если NNN.error="access_denied" Тогда
										Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
									КонецЕсли;
								Исключение
								КонецПопытки;
								
							КонецПопытки;
							
						Исключение
						КонецПопытки;
			//	Иначе
			//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
			//		ОтправитьЗаявку(Команда,Истина)			
			//	КонецЕсли
		КонецЕсли;
		
		  КонецЕсли;
		//
		//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		//HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		////HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		/////Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
		//Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		//Текст1=Ответ.ПолучитьТелоКакСтроку();
		//
		//HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/doc/"+Объект._Order_ID+"/body");
		//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		//HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
		//Текст1=Ответ.ПолучитьТелоКакСтроку();
		//
		//	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
		//				ЧтениеJSON = Новый ЧтениеJSON;
		//				ЧтениеJSON.УстановитьСтроку(Текст1);
		//				NNN=ПрочитатьJSON(ЧтениеJSON);
		//				Если NNN.status="CHECKED_NOT_OK" Тогда
		//					ОбновитьСтатусДокумента_Отгрузка(Объект.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
		//				ИначеЕсли 	NNN.status="WAIT_ACCEPTANCE" Тогда
		//					ОбновитьСтатусДокумента_Отгрузка(Объект.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),NNN.downloadDesc);
		//				ИначеЕсли 	NNN.status="CANCELLED" Тогда
		//					ОбновитьСтатусДокумента_Отгрузка(Объект.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"");
		//				КонецЕсли;
		//			
		//			
		//	ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
		//			ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
		//		ИначеЕсли Ответ.КодСостояния=301 Тогда
		//			
		//			    ОшибкаОтправки="";
		//		//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
		//			Попытка
		//				ЧтениеJSON = Новый ЧтениеJSON;
		//				ЧтениеJSON.УстановитьСтроку(Текст1);
		//				NNN=ПрочитатьJSON(ЧтениеJSON);
		//				ОшибкаОтправки=NNN.error_message;
		//				
		//			Исключение
		//			КонецПопытки;
		//		ОбновитьСтатусДокумента_Отгрузка(Объект.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
		//	

		//	КонецЕсли;
		//	
			ЭтаФорма.записать();
	КонецЕсли ;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьСтатусДокумента_Отгрузка(Ссылка,Статус,Ошибка,Заказ=неопределено)
	
	Если Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ Тогда
		Если Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета
			ИЛИ Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус
			ИЛИ Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы
			ИЛИ Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован Тогда
			Возврат;
		КонецЕсли;
			
		
	КонецЕсли;
	
	Добб=Ссылка.ПолучитьОбъект();
	Добб.ОшибкаОтправки=Ошибка;
	Добб.Статус=Статус;
	
	
	
	Добб.Записать();
	Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета  
		ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
		Тогда
		Попытка
			Добб.Записать(РежимЗаписиДокумента.Проведение) 
		Исключение
		КонецПопытки;
	ИначеЕсли Добб.статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ Тогда
		Добб.ПометкаУдаления=Истина;
		Если Добб.Проведен Тогда
			Добб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Добб.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


Функция СформироватьXmlФайлОтклонить()
	
	Текст="<cancel_shipment_signs action_id=""12"">
	|<shipment_number>"+xmlString(Объект.Ссылка.УникальныйИдентификатор())+"</shipment_number>
	|<participant_inn>"+Объект.Поставщик  .ИНН+"</participant_inn>
	|</cancel_shipment_signs>";
		
	
Возврат Текст 	
КонецФункции

&НаКлиенте
Процедура Подсчитать(Команда)
	// Вставить содержимое обработчика.
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика"
		ИЛИ Thumbprint_1.НаименованиеСтенда="Табак"
		ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
		
		Тогда
		ЗакачатьДетальнуюИнформацию(Команда);
		Возврат;
	КонецЕсли;
	
			
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Возврат;
		КонецЕсли;
	
	
	Для Каждого Стр Из Объект.Товары Цикл
		Стр.КоличествоНомеровКМ=0;
		Нстр=ОБъект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		
		Для Каждого Стр_М Из НСТр Цикл
			//Если СтрДлина(Стр_М.cis)=18 Тогда
				
				РекурсияУпаковки(Стр_М,Стр.КоличествоНомеровКМ,Thumbprint_1,СРегистра);
				
				
			//Иначе
			//	Стр.КоличествоНомеровКМ=Стр.КоличествоНомеровКМ+1;
			//КонецЕсли;
			
		КонецциклА;
		
		
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РекурсияУпаковки(Строк,Количество,Thumbprint_1,СРегистра)
	
	
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		Сообщить("Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
	ММ= Строк.cis;
			
	HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ));
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	попытка
		//ЧтениеJSON = Новый ЧтениеJSON;
		//ЧтениеJSON.УстановитьСтроку(Текст1);
		NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
		
		Для Каждого Стр_1 Из NNN.children Цикл
		//	Если СтрДлина(Стр_1.cis)=18 Тогда
				РекурсияУпаковки(Стр_1 ,Количество,Thumbprint_1,СРегистра)
		//	Иначе
		//		Количество=Количество+1;
		//	КонецеслИ;
		КонецЦиклА;
	Исключение
			Количество=Количество+1;
		
	КонецПопытки;
КонецПроцедуры

Процедура РекурсияУпаковкиСервер(Строк,Количество,Thumbprint_1,СРегистра)
	
	
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		Сообщить("Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
	ММ= Строк.cis;
			
	HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ));
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	//ЧтениеJSON = Новый ЧтениеJSON;
	//ЧтениеJSON.УстановитьСтроку(Текст1);
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);
	
	Для Каждого Стр_1 Из NNN.children Цикл
		Если СтрДлина(Стр_1.cis)=18 Тогда
			РекурсияУпаковкиСервер(Стр_1 ,Количество,Thumbprint_1,СРегистра)
		Иначе
			Количество=Количество+1;
		КонецеслИ;
	КонецЦиклА;
	
КонецПроцедуры

Процедура   НаСервереВыд(СРегистра,Thumbprint_1)
Для Каждого Стр_1 Из Элементы.Товары.ВыделенныеСтроки Цикл
			Стр=Объект.Товары.НайтиПоИдентификатору(Стр_1);
			Стр.КоличествоНомеровКМ=0;
			Нстр=ОБъект.СерийныеНомера.НайтиСтроки(Новый Структура("НаименованиеТовара",Стр.GTIN));
			
			Для Каждого Стр_М Из НСТр Цикл
				Если СтрДлина(Стр_М.cis)=18 Тогда
					
					РекурсияУпаковкиСервер(Стр_М,Стр.КоличествоНомеровКМ,Thumbprint_1,СРегистра);
					
					
				Иначе
					Стр.КоличествоНомеровКМ=Стр.КоличествоНомеровКМ+1;
				КонецЕсли;
				
			КонецциклА;
			
			
			
		КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ВУпаковке(Команда)
	// Вставить содержимое обработчика.
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	

СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
			КонецЕсли;
			
		Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Возврат;
		КонецЕсли;
			
		            	Если ОбработкаWEBНаСервере Тогда
		НаСервереВыд(СРегистра,Thumbprint_1);
			
		
	Иначе

	Для Каждого Стр_1 Из Элементы.Товары.ВыделенныеСтроки Цикл
		Стр=Объект.Товары.НайтиПоИдентификатору(Стр_1);
		Стр.КоличествоНомеровКМ=0;
		Нстр=ОБъект.СерийныеНомера.НайтиСтроки(Новый Структура("НаименованиеТовара",Стр.GTIN));
		
		Для Каждого Стр_М Из НСТр Цикл
			Если СтрДлина(Стр_М.cis)=18 Тогда
				
				РекурсияУпаковки(Стр_М,Стр.КоличествоНомеровКМ,Thumbprint_1,СРегистра);
				
				
			Иначе
				Стр.КоличествоНомеровКМ=Стр.КоличествоНомеровКМ+1;
			КонецЕсли;
			
		КонецциклА;

		
		
		
	КонецЦикла;
КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнформацию(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	//Обр=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	//Если Обр.Организации.Количество()=0 Тогда
	//	Обр.ПодключитьсяКЦРПТ(Команда,Ложь);
	//КонецЕсли;
	//Если Обр.Организации.Количество()=0 Тогда
	//	Возврат;
	//КонецЕсли;
	//		
	Если Элементы.СерийныеНомера.ТекущиеДанные<>Неопределено Тогда
	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюПоКМ(ДеревоКМ,Элементы.СерийныеНомера.ТекущиеДанные.cis,Объект.ТекущийПользователь,Субъект(Объект.ОрганизацияПолучатель_Лекарства));
	Элементы.Страницы.ТекущаяСтраница=Элементы.ИнформацияОКМ;
	ПодсчетКоличестваВДереве();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Субъект(ОРР)
	Возврат Орр.subjectIdФармацевтика
КонецФункции

Процедура НаСервереБлокировка()
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка,,ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СканироватьМаркуПриИзменении(Элемент) Экспорт
	// Вставить содержимое обработчика.
	//СканироватьМарку=СтрЗаменить(СканироватьМарку,Символ(29),"");
	
	Если БылаБлокировка<>Истина Тогда
		НаСервереБлокировка();
		//ЗаблокироватьДанныеФормыДляРедактирования();
		БылаБлокировка=Истина;
		ЭтаФорма.Модифицированность=Истина;
	Конецесли;
	
	Если СтрДлина(СканироватьМарку)<24 Тогда
		сканироватьМарку=СтрЗаменить(СканироватьМарку,Символ(29),"");
		сканироватьМарку=СтрЗаменить(СканироватьМарку,"|","");
		сканироватьМарку=Сред(сканироватьМарку,1,20);
		Если СтрДлина(сканироватьМарку)=19 Тогда
			сканироватьМарку=Сред(сканироватьМарку,1,18);
		КонецЕсли;
		
		
	КонецЕсли;
	
	
	СканироватьМарку=СтрЗаменить(СканироватьМарку,Символ(29),"<ГС1>");
	ДобавитьcisВдокумент(СканироватьМарку);
	ПодключитьОбработчикОжидания("аа",0.1,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура аа()
	СканироватьМарку="";
	ЭтаФорма.ТекущийЭлемент=Элементы.СканироватьМарку;
	
КонецПроцедуры



Функция ЕстьКириллица(ИсходнаяСтрока) Экспорт
	ЕстьКириллица=ложь;
	ИсходнаяСтрока=СокрЛП(ИсходнаяСтрока);
	Если СтрДлина(ИсходнаяСтрока)>0 Тогда
		Для Сч=1 по СтрДлина(ИсходнаяСтрока) Цикл
			Символ = НРег(Сред(ИсходнаяСтрока, Сч, 1));
			Если Найти("абвгдеёжзийклмнопрстуфхцчшщъыьэюя", Символ) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Процедура ДобавитьcisВдокумент(Знач Марка_1)   Экспорт 
	
	//Если Элементы.Страницы.ТекущаяСтраница<>Элементы.ПроверкаПоКМ Тогда	
		//Элементы.Страницы.ТекущаяСтраница=Элементы.ПроверкаПоКМ;
	//КонецЕсли;
	
	
	
	Если ПроверкаНаСимволКриллицы И ЕстьКириллица(Марка_1) тогда
		Сообщить("В строке "+Марка_1+" присутствует символ кириллицы!!");
		Возврат;
	Конецесли;

	Если Объект.ПроверкаПростая.Количество()=0 Тогда
		ЗагрузитьобновитьПроверкуПросту();
	КонецЕслИ;
	Идентификатор1=Неопределено;
	
	Идентификатор2=Неопределено;
	Идентификатор3=Неопределено;
	
	Идентификатор4=Неопределено;
	Документы.Приемка_ХамелеонЦРПТ.ДобавитьcisВдокумент(Марка_1,Объект,
	Идентификатор1,Идентификатор2,Идентификатор3,Идентификатор4);
	Если Идентификатор1<>Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока=Идентификатор1;
	КонецЕсли;
	Если Идентификатор2<>Неопределено Тогда
		Элементы.ПроверкаПоНомерамКМ.ТекущаяСтрока=Идентификатор2;
	КонецЕсли;
	Если Идентификатор3<>Неопределено Тогда
		Элементы.СерийныеНомера.ТекущаяСтрока=Идентификатор3;
	КонецЕсли;
	Если Идентификатор4<>Неопределено Тогда
		Элементы.ПроверкаПростая.ТекущаяСтрока=Идентификатор4;
	КонецЕсли;
	
КонецПроцедуры

Процедура РекурсияУпаковкиСкан(Стр_2,КолСтрок)
						НайтиВдругомМесте=Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба",Стр_2.ШтрихКод));
						Если НайтиВдругомМесте.Количество()=0 Тогда
							Возврат;
						Иначе
							    ////Короб в сотсаве друогого короба рекурсия (надо еще найти короб верхний)
								
								
								
								Для Каждого стр_1 Из НайтиВдругомМесте Цикл
									Если СтрДлина(Стр_1.ШтрихКод)=18 Тогда
										РекурсияУпаковкиСкан(Стр_1,КолСтрок);
									Иначе
										КолСтрок=КолСтрок+1;
									КонецЕсли;
									
								Конеццикла;
								
						КонецЕслИ;
	
КонецПроцедуры

//Процедура ЗагрузитьКМ()

//	Объект.ПроверкаПоНомерамКМ.Очистить();;
//	Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
//		
//		Если СтрДлина(Стр_1.cis)=18 Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Если  ЗначениеЗаполнено(Стр_1.GTIN) Тогда
//			НСтр=Объект.ПроверкаПоНомерамКМ.НайтиСтроки(Новый Структура("GTINНаименованиеТовара",Стр_1.gtin));
//			Если НСтр.Количество()=0 Тогда
//			Добав_пр=Объект.ПроверкаПоНомерамКМ.Добавить();
//			Добав_пр.GTINНаименованиеТовара=Стр_1.gtin;
//			 Добав_пр.Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(Стр_1.gtin));
//			
//			Добав_пр.Количество=1;
//		Иначе
//			
//			Нстр[0].Количество=НСТр[0].Количество+1;
//			КонецЕсли;
//		Иначе
//			НСтр=Объект.ПроверкаПоНомерамКМ.НайтиСтроки(Новый Структура("GTINНаименованиеТовара",Стр_1.НаименованиеТовараСтрокой));
//			Если НСтр.Количество()=0 Тогда
//			Добав_пр=Объект.ПроверкаПоНомерамКМ.Добавить();
//			Добав_пр.GTINНаименованиеТовара=Стр_1.НаименованиеТовараСтрокой;
//			Если ЗначениеЗаполнено(Стр_1.КоличествоКМ) Тогда
//				Добав_пр.Количество=Стр_1.КоличествоКМ;
//			Иначе
//				Добав_пр.Количество=1;
//			КонецЕсли;
//		Иначе
//			Если ЗначениеЗаполнено(Стр_1.КоличествоКМ) Тогда
//				//Добав_пр.Количество=Стр_1.КоличествоКМ;
//				Нстр[0].Количество=НСТр[0].Количество+Стр_1.КоличествоКМ;
//			Иначе
//				Нстр[0].Количество=НСТр[0].Количество+1;
//			КонецЕсли;
//			
//			//Нстр[0].Количество=НСТр[0].Количество+1;
//			КонецЕсли;
//			
//			
//		КонецЕсли;
//		
//	Конеццикла;
//	Для Каждого Стр_2 Из Объект.Короба Цикл

//		Если СтрДлина(Стр_2.ШтрихКод)=18 Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Стр_1=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_2.НомерКороба))[0];
//		
//		
//		Если  ЗначениеЗаполнено(Стр_1.GTIN) Тогда
//			НСтр=Объект.ПроверкаПоНомерамКМ.НайтиСтроки(Новый Структура("GTINНаименованиеТовара",Стр_1.gtin));
//			Если НСтр.Количество()=0 Тогда
//			Добав_пр=Объект.ПроверкаПоНомерамКМ.Добавить();
//			Добав_пр.GTINНаименованиеТовара=Стр_1.gtin;
//			 Добав_пр.Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(Стр_1.gtin));
//			
//			Добав_пр.Количество=1;
//		Иначе
//			
//			Нстр[0].Количество=НСТр[0].Количество+1;
//			КонецЕсли;
//		Иначе
//			НСтр=Объект.ПроверкаПоНомерамКМ.НайтиСтроки(Новый Структура("GTINНаименованиеТовара",Стр_1.НаименованиеТовараСтрокой));
//			Если НСтр.Количество()=0 Тогда
//			Добав_пр=Объект.ПроверкаПоНомерамКМ.Добавить();
//			Добав_пр.GTINНаименованиеТовара=Стр_1.НаименованиеТовараСтрокой;
//			Если ЗначениеЗаполнено(Стр_1.КоличествоКМ) Тогда
//				Добав_пр.Количество=Стр_1.КоличествоКМ;
//			Иначе
//				Добав_пр.Количество=1;
//			КонецЕсли;
//		Иначе
//			Если ЗначениеЗаполнено(Стр_1.КоличествоКМ) Тогда
//				//Добав_пр.Количество=Стр_1.КоличествоКМ;
//				Нстр[0].Количество=НСТр[0].Количество+Стр_1.КоличествоКМ;
//			Иначе
//				Нстр[0].Количество=НСТр[0].Количество+1;
//			КонецЕсли;
//			
//			//Нстр[0].Количество=НСТр[0].Количество+1;
//			КонецЕсли;
//			
//			
//		КонецЕсли;
//		
//		
//		
//	Конеццикла;
//	
//	
//	
//	
//	Для каждого Стр_1 Из Объект.Марки Цикл
//		Марка=Стр_1.Марка;
//		Попытка	
//				СпрП=Неопределено;
//				ДД=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Марка));
//				Если ДД.Количество()=0 Тогда
//					
//					НайтиВдругомМесте=Объект.Короба.НайтиСтроки(Новый Структура("ШтрихКод",Марка));
//					Если НайтиВдругомМесте.Количество()=0 Тогда
//						GTIN="НЕ ПОЛУЧАЛИ";
//					Иначе
//						//GTIN=Сред(Марка,3,14);
//						НомерКороба=НайтиВдругомМесте[0].НомерКороба;
//						Нстроку=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",НомерКороба));
//						Если Нстроку.Количество()>0 Тогда
//							GTIN=Нстроку[0].GTIN;
//						КонецЕслИ;
//						
//					КонецЕслИ;
//					
//				Иначе
//				Если Сред(Марка,1,2)="01" Тогда
//					GTIN=Сред(Марка,3,14);
//				Иначе
//					GTIN=Сред(Марка,1,14);
//					
//				КонецЕсли;
//				СпрП =справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(gtin));
//					
//				КонецЕсли;
//				//Добав.Продукция=СпрП;
//				ДД=Объект.ПроверкаПоНомерамКМ.НайтиСтроки(Новый Структура("GTINНаименованиеТовара",GTIN));
//				Если ДД.Количество()=0 Тогда
//		GTIN		="НЕ ПОЛУЧАЛИ";
//		Стр_1.Нет=Истина;
//				ДД=Объект.ПроверкаПоНомерамКМ.НайтиСтроки(Новый Структура("GTINНаименованиеТовара",GTIN));
//				Если ДД.Количество()=0 Тогда
//					Добав_пр=Объект.ПроверкаПоНомерамКМ.Добавить();
//					Добав_пр.GTINНаименованиеТовара="НЕ ПОЛУЧАЛИ";
//					Добав_пр.КоличествоСканированных=1;
//					Добав_Пр.Продукция=СпрП;
//					
//				Иначе
//					
//					ДД[0].КоличествоСканированных=ДД[0].КоличествоСканированных+1;
//					//Добав.GTIN=gtin;

//					КонецЕсли;
//				Иначе
//					ДД[0].КоличествоСканированных=ДД[0].КоличествоСканированных+1;

//				КонецЕсли;
//				//Если Не ЗначениеЗаполнено(СпрП) Тогда
//				//	
//				//	СпрП=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
//				//	СпрП.GTIN=Число(gtin);
//				//	ДД=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("GTIN",gtin));
//				//	Если ДД.Количество()>0 Тогда
//				//		СпрП.Наименование=ДД[0].НаименованиеТовараСтрокой;
//				//	КонецЕслИ;
//				//	СпрП.Записать();
//				//КонецЕсли;
//				//КонецЕсли;
//			Исключение
//				Сообщить("Сканируемая cis "+марка+" имеет не правильный формат");
//			КонецПопытки;
//			//КонецЕсли;
//			
//		
//	Конеццикла;
//	
//	
//КонецПроцедуры

Процедура ЗагрузитьобновитьПроверкуПросту()
	Документы.Приемка_ХамелеонЦРПТ.ЗагрузитьобновитьПроверкуПросту(Объект);
КонецПроцедуры


&НаСервере
Процедура ПрочитатьОтветНаСервере()
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Хр=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.Получить(Новый Структура("Документ,Вид",Объект.Ссылка,"Загрузка приемки")).Файл;
	Если Хр<>Неопределено тогда
		ПринятДокумент=Хр.Получить();
	Конецесли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПрочитатьОтвет(Команда)
	ПрочитатьОтветНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	// Вставить содержимое обработчика.
	Если ТекущаяСтраница=Элементы.СканМарок
		ИЛИ ТекущаяСтраница=Элементы.ПроверкаПоКМ Тогда
		ЗагрузитьобновитьПроверкуПросту()
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СканироватьМаркуАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если БылаБлокировка<>Истина Тогда
		НаСервереБлокировка();
		//ЗаблокироватьДанныеФормыДляРедактирования();
		БылаБлокировка=Истина;
		ЭтаФорма.Модифицированность=Истина;
	Конецесли;
	Если СтрДлина(Текст)>=18 Тогда
		СтандартнаяОбработка=Ложь;
		Текст=СтрЗаменить(Текст,Символ(29),"");
		
		
		Если СтрДлина(Текст)<24 Тогда
			Текст=СтрЗаменить(Текст,Символ(29),"");
			Текст=СтрЗаменить(Текст,"|","");
			Текст=Сред(Текст,1,20);
			Если СтрДлина(Текст)=19 Тогда
				Текст=Сред(Текст,1,18);
			КонецЕсли;
			
			
		КонецЕсли;
		
		Текст=СтрЗаменить(Текст,Символ(29),"<ГС1>");
	
		
		ДобавитьcisВдокумент(Текст); 
		ПодключитьОбработчикОжидания("аа",0.1,Истина);
	Иначе
		ШтрихКод="";
		
		ПодключитьОбработчикОжидания("аа",0.1,Истина);
	КонецЕслИ;
КонецПроцедуры


Процедура МассивГТИН(Массив,МассивДобавили)
	Массив.Очистить();
	Для Каждого Стр_1 Из Объект.Товары Цикл
		
		Нстр=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
		
		Если НСтр.Количество()>0 Тогда
			Если Нстр[0].ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука Тогда
				
				Если МассивДобавили.найти(Нстр[0].cis)=неопределено Тогда
					Массив.Добавить(
					Новый Структура("GTIN,Марка",
					ОБработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(Стр_1.GTIN.GTIN) ,14,"0"),Нстр[0].cis));
					МассивДобавили.Добавить(Нстр[0].cis);
				Конецесли;
			КонецЕсли;
		КонецЕсли;
		
	Конеццикла;
КонецПроцедуры

Функция СоздатьНайтиGTIN(ГТИН)
	
	Попытка
		Спр_1=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(ГТИН));
	Исключение
		Спр_1=Неопределено
		
	КонецПопытки;
	Если Не ЗначениеЗаполнено(Спр_1) Тогда
		Спр_1=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
			Спр_1.GTIN=ГТИН;
			Спр_1.Наименование=ГТИН;
			Спр_1.НаименованиеТовара=ГТИН;
			Спр_1.Записать();;
		КонецЕсли;
		
	Возврат Спр_1.Ссылка
КонецФункции

Процедура АлгоритмСохраненияКоробовНаСервере(Текст1,ИННПоставщика,Тотал,числоЗагрузили,Thumbprint_1,БылиУпаковки)
						//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке(Текст1,ИННПоставщика,Тотал,числоЗагрузили,Thumbprint_1);
					//	НеобходимоА=Ложь;
						//Попытка
						//	Если Число(Стр_11.GTIN)=0  Тогда
						//		НеобходимоА=Истина;
						//	КонецЕсли;
							
						//Исключение
						//		НеобходимоА=Истина;
						//КонецПопытки;
						
			что=Thumbprint_1.что;
						
	СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	Если Не ЗначениеЗаполнено(СРегистра) тогда
			Возврат;;
	КонецЕсли;
						
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
						
						УжеЗапрашивали=Новый Массив;
			
						//Если НеобходимоА=Истина Тогда
							
							NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
							//Марка=NNN.
							
							Для Каждого Стр_ММ Из NNN Цикл
								Значен=Стр_ММ.Ключ;
								
							Конеццикла;
							
							Если Не Значениезаполнено(Значен) тогда
								Возврат;
							КонецЕсли;
							
							Если NNN[Значен]<>Неопределено И NNN[Значен]["children"]<>Неопределено Тогда
								children=NNN[Значен]["children"];
								Для Каждого Стр_1 Из children Цикл
									ШтрихКод=Стр_1;
									Если СтрДлина(ШтрихКод)=18 Тогда
										
											Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Значен,ШтрихКод)).Количество()=0 Тогда
											
																					ДобавК=Объект.Короба.Добавить();
											ДобавК.НомерКороба=ШтрихКод;
											ДобавК.ШтрихКод=Значен;
											БылиУпаковки=Истина;
										КонецЕсли;
											

										
										
										
										
										
										
										
										
										
										
										
										
										
										
										
										
										
										
										
										
										
										
	МассивКМ=Новый Массив;
			МассивКМ.Добавить(ШтрихКод);
					//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Значен)+"&pg="+что);;
				Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьтелоПоcis(МассивКМ);
				HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/cis/cis_list?pg="+Что);
						
							
						//ИНН=ВернутьИНН(Обр.Организации[0].Организация );
				///HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Значен));;
				//HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?gtin="+ДополнитьСтроку(Стр_11)+"&limit=100&offset=0");;
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			#Если ВебКлиент Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
			#Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
				
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
				Текст1=Ответ.ПолучитьТелоКакСтроку();
				
				числоЗагрузили=0;
				
				Тотал=0;
				БылиУпаковки=Ложь;
				Если Ответ.КодСостояния=200 Тогда
					//ЗагружаемШаблоныНасервере(Текст1,Обр.Пользователь);
					
					
					//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке(Текст1,ИННПоставщика,Тотал,числоЗагрузили,Thumbprint_1);
						//НеобходимоА=Ложь;
						//Попытка
						//	Если Число(Стр_11.GTIN)=0  Тогда
						//		НеобходимоА=Истина;
						//	КонецЕсли;
						//	
						//Исключение
						//		НеобходимоА=Истина;
						//КонецПопытки;
						
						//Если НеобходимоА=Истина Тогда
							
							NNN_К=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
							
							
							Если     NNN_К[ШтрихКод]<>Неопределено Тогда
							
								children=NNN_К[ШтрихКод]["children"];
								Если children<>Неопределено Тогда
									Для Каждого Стр_1 Из children Цикл
										ШтрихКод_1=Стр_1;
										Если СтрДлина(ШтрихКод_1)=18 Тогда
											
											////Рекурсяи
										Иначе
											
											ГТИН=Сред(ШтрихКод_1,3,14);
												
												
												Если УжеЗапрашивали.Найти(ГТИН)=Неопределено Тогда
													////ИЩЕМ ПРОДУКЦИЮ И ЗАПРАШИВАЕМ
													
														МассивКМ=Новый Массив;
														МассивКМ.Добавить(ШтрихКод_1);
																//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_11.Марка)+"&pg="+что);;
															Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьтелоПоcis(МассивКМ);
															HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/cis/cis_list?pg="+Что);
																	
																		
																	//ИНН=ВернутьИНН(Обр.Организации[0].Организация );
															///HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_11.Марка));;
															//HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?gtin="+ДополнитьСтроку(Стр_11)+"&limit=100&offset=0");;
															HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
															HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
														#Если ВебКлиент Тогда
															HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
														#Иначе
															HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
														#КонецЕсли
															
															//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
															///Константин           
															Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
															Текст1=Ответ.ПолучитьТелоКакСтроку();
															//NNN_Т=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//


															ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке_Соответвтвие(Текст1,ИННПоставщика,Тотал,числоЗагрузили,Thumbprint_1);
																	
												КонецЕсли;
												

										
											Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",ШтрихКод,ШтрихКод_1)).Количество()=0 Тогда
												
																							ДобавК=Объект.Короба.Добавить();
												ДобавК.НомерКороба=ШтрихКод;
												ДобавК.ШтрихКод=ШтрихКод_1;
												БылиУпаковки=Истина;
											КонецЕсли;
												
												
										КонецЕсли;
										
										
									КонецЦикла;
								КонецЕсли;
					         Конецесли;
						
				ИначеЕсли Ответ.КодСостояния=401 
					ИЛИ Ответ.КодСостояния=502  
					Тогда
				КонецЕсли;
		//	КонецЕсли;
		//	КонецЦикла;  
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
										
										
										
								Иначе
										
									
										ГТИН=Сред(ШтрихКод,3,14);
											
											
											Если УжеЗапрашивали.Найти(ГТИН)=Неопределено Тогда
												////ИЩЕМ ПРОДУКЦИЮ И ЗАПРАШИВАЕМ
												
													МассивКМ=Новый Массив;
													МассивКМ.Добавить(ШтрихКод);
															//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_11.Марка)+"&pg="+что);;
														Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьтелоПоcis(МассивКМ);
														HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/cis/cis_list?pg="+Что);
																
																	
																//ИНН=ВернутьИНН(Обр.Организации[0].Организация );
														///HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_11.Марка));;
														//HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?gtin="+ДополнитьСтроку(Стр_11)+"&limit=100&offset=0");;
														HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
														HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
													#Если ВебКлиент Тогда
														HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
													#Иначе
														HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
													#КонецЕсли
														
														//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
														///Константин           
														Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
														Текст1=Ответ.ПолучитьТелоКакСтроку();
														//NNN_Т=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//


														ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке_Соответвтвие(Текст1,ИННПоставщика,Тотал,числоЗагрузили,Thumbprint_1);
																
											КонецЕсли;
											

										Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Значен,ШтрихКод)).Количество()=0 Тогда
											
																					ДобавК=Объект.Короба.Добавить();
											ДобавК.НомерКороба=Значен;
											ДобавК.ШтрихКод=ШтрихКод;
											БылиУпаковки=Истина;
										КонецЕсли;
											
											
									КонецЕсли;
									
									
								КонецЦикла;
							КонецЕсли;

конецПроцедуры

Процедура ЗаполнитьИнформациюОПродукцииИУпаковках(МассивЗаданий,Thumbprint_1,БылиУпаковки,ИННПоставщика)
	Попытка
		ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
	Исключение
	КонецПопытки;
	
	
	
	
			что=Thumbprint_1.что;
						
	СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	Если Не ЗначениеЗаполнено(СРегистра) тогда
			Возврат;;
	КонецЕсли;
						
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
						
						УжеЗапрашивали=Новый Массив;
	
	
	

	
	
	Для каждого Задание Из МассивЗаданий Цикл
		NNN = Неопределено;
		Для каждого Сообщение Из Задание.ПолучитьСообщенияПользователю() Цикл
			Текст=Сообщение.Текст;
			Если ЗначениеЗаполнено(Текст) Тогда
				NNN= ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если NNN = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		
		
		
		
							Для Каждого Стр_ММ Из NNN Цикл
								Значен=Стр_ММ.Ключ;
								
							Конеццикла;
							
							Если Не Значениезаполнено(Значен) тогда
								Возврат;
							КонецЕсли;
							
							Если NNN[Значен]<>Неопределено И NNN[Значен]["children"]<>Неопределено Тогда
								children=NNN[Значен]["children"];
								Для Каждого Стр_1 Из children Цикл
									ШтрихКод=Стр_1;
									Если СтрДлина(ШтрихКод)=18 Тогда
										
											Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Значен,ШтрихКод)).Количество()=0 Тогда
											
																					ДобавК=Объект.Короба.Добавить();
											ДобавК.НомерКороба=ШтрихКод;
											ДобавК.ШтрихКод=Значен;
											БылиУпаковки=Истина;
										КонецЕсли;
											

										
										
										
										
										
										
										
										
										
										
										
										
										
										
										
										
										
										
										
										
										
										
	МассивКМ=Новый Массив;
			МассивКМ.Добавить(ШтрихКод);
					//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Значен)+"&pg="+что);;
				Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьтелоПоcis(МассивКМ);
				HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/cis/cis_list?pg="+Что);
						
							
						//ИНН=ВернутьИНН(Обр.Организации[0].Организация );
				///HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Значен));;
				//HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?gtin="+ДополнитьСтроку(Стр_11)+"&limit=100&offset=0");;
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			#Если ВебКлиент Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
			#Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
				
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
				Текст1=Ответ.ПолучитьТелоКакСтроку();
				
				числоЗагрузили=0;
				
				Тотал=0;
				БылиУпаковки=Ложь;
				Если Ответ.КодСостояния=200 Тогда
					//ЗагружаемШаблоныНасервере(Текст1,Обр.Пользователь);
					
					
					//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке(Текст1,ИННПоставщика,Тотал,числоЗагрузили,Thumbprint_1);
						//НеобходимоА=Ложь;
						//Попытка
						//	Если Число(Стр_11.GTIN)=0  Тогда
						//		НеобходимоА=Истина;
						//	КонецЕсли;
						//	
						//Исключение
						//		НеобходимоА=Истина;
						//КонецПопытки;
						
						//Если НеобходимоА=Истина Тогда
							
							NNN_К=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
							
							
							Если     NNN_К[ШтрихКод]<>Неопределено Тогда
							
								children=NNN_К[ШтрихКод]["children"];
								Если children<>Неопределено Тогда
									Для Каждого Стр_1 Из children Цикл
										ШтрихКод_1=Стр_1;
										Если СтрДлина(ШтрихКод_1)=18 Тогда
											
											////Рекурсяи
										Иначе
											
											ГТИН=Сред(ШтрихКод_1,3,14);
												
												
												Если УжеЗапрашивали.Найти(ГТИН)=Неопределено Тогда
													////ИЩЕМ ПРОДУКЦИЮ И ЗАПРАШИВАЕМ
													
														МассивКМ=Новый Массив;
														МассивКМ.Добавить(ШтрихКод_1);
																//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_11.Марка)+"&pg="+что);;
															Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьтелоПоcis(МассивКМ);
															HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/cis/cis_list?pg="+Что);
																	
																		
																	//ИНН=ВернутьИНН(Обр.Организации[0].Организация );
															///HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_11.Марка));;
															//HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?gtin="+ДополнитьСтроку(Стр_11)+"&limit=100&offset=0");;
															HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
															HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
														#Если ВебКлиент Тогда
															HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
														#Иначе
															HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
														#КонецЕсли
															
															//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
															///Константин           
															Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
															Текст1=Ответ.ПолучитьТелоКакСтроку();
															//NNN_Т=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//


															ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке_Соответвтвие(Текст1,ИННПоставщика,Тотал,числоЗагрузили,Thumbprint_1);
																	
												КонецЕсли;
												

										
											Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",ШтрихКод,ШтрихКод_1)).Количество()=0 Тогда
												
																							ДобавК=Объект.Короба.Добавить();
												ДобавК.НомерКороба=ШтрихКод;
												ДобавК.ШтрихКод=ШтрихКод_1;
												БылиУпаковки=Истина;
											КонецЕсли;
												
												
										КонецЕсли;
										
										
									КонецЦикла;
								КонецЕсли;
					          Конецесли;
						
				ИначеЕсли Ответ.КодСостояния=401 
					ИЛИ Ответ.КодСостояния=502  
					Тогда
				КонецЕсли;
		//	КонецЕсли;
		//	КонецЦикла;  
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
										
										
										
								Иначе
										
									
										ГТИН=Сред(ШтрихКод,3,14);
											
											
											Если УжеЗапрашивали.Найти(ГТИН)=Неопределено Тогда
												////ИЩЕМ ПРОДУКЦИЮ И ЗАПРАШИВАЕМ
												
													МассивКМ=Новый Массив;
													МассивКМ.Добавить(ШтрихКод);
															//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_11.Марка)+"&pg="+что);;
														Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьтелоПоcis(МассивКМ);
														HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/cis/cis_list?pg="+Что);
																
																	
																//ИНН=ВернутьИНН(Обр.Организации[0].Организация );
														///HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_11.Марка));;
														//HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?gtin="+ДополнитьСтроку(Стр_11)+"&limit=100&offset=0");;
														HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
														HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
													#Если ВебКлиент Тогда
														HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
													#Иначе
														HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
													#КонецЕсли
														
														//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
														///Константин           
														Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
														Текст1=Ответ.ПолучитьТелоКакСтроку();
														//NNN_Т=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//


														ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке_Соответвтвие(Текст1,ИННПоставщика,Тотал,числоЗагрузили,Thumbprint_1);
																
											КонецЕсли;
											

										Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Значен,ШтрихКод)).Количество()=0 Тогда
											
																					ДобавК=Объект.Короба.Добавить();
											ДобавК.НомерКороба=Значен;
											ДобавК.ШтрихКод=ШтрихКод;
											БылиУпаковки=Истина;
										КонецЕсли;
											
											
									КонецЕсли;
									
									
								КонецЦикла;
							КонецЕсли;
							
							Возврат;
							
							
		//ТекСтр = ЗаданияПоСтрокам.Получить(Задание.УникальныйИдентификатор);
		//ТекСтр.Статус = Данные.shoesData.status;
	
							children="";
							еСЛИ                        NNN.Свойство("children",children) Тогда
								Для Каждого Стр_children Из children Цикл
									ШтрихКод="";
									Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
										Стр_children.Свойство("uit_code",ШтрихКод);
										Если Не ЗначениеЗаполнено(ШтрихКод) тогда
											Стр_children.Свойство("cis",ШтрихКод);
										КонецЕсли;
										
									КонецЕсли;
									Если Не ЗначениеЗаполнено(ШтрихКод) тогда
										Продолжить;
									КонецЕсли;
									uitu_code="";
									NNN.Свойство("uitu_code",uitu_code);
									Если Не ЗначениеЗАполнено(uitu_code) Тогда
										NNN.Свойство("cis",uitu_code);
									КонецЕсли;
									
									Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",uitu_code,ШтрихКод)).Количество()=0 Тогда
									
										ДобавК=Объект.Короба.Добавить();
										ДобавК.НомерКороба=uitu_code;
										ДобавК.ШтрихКод=ШтрихКод;
										БылиУпаковки=Истина;
									КонецЕсли;
									
								КонецЦикла;
							КонецЕсли;
	КонецЦикла;
	МассивЗаданий.Очистить();
								
								
КонецПроцедуры

Процедура ПолучаемИнформациюнаСервереПоКоробам(Thumbprint_1,Срегистра,Массив,БылиУпаковки)
	
	МассивЗаданий=Новый Массив;
	ИННПоставщика="";
			Для Каждого Стр_11 Из Массив Цикл
				Если Ложь Тогда
				Иначе
					МассивПараметров = Новый Массив;
					МассивПараметров.Добавить(Стр_11.Марка);
					МассивПараметров.Добавить(Thumbprint_1);
					МассивПараметров.Добавить(СрегиСтра);
					числоЗагрузили=0;
					
					Тотал=0;
					//БылиУпаковки=Ложь;
						
					Попытка
						Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИнформациюСMarked_Products", МассивПараметров);
						//ЗаданияПоСтрокам.Вставить(Задание.УникальныйИдентификатор, СерийныйНомер);
						МассивЗаданий.Добавить(Задание);
						
						Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
							ЗаполнитьИнформациюОПродукцииИУпаковках(МассивЗаданий,Thumbprint_1,БылиУпаковки,ИННПоставщика); 
							МассивЗаданий.Очистить();
						КонецЕсли;
					Исключение
						Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИнформациюСMarked_Products(МассивПараметров[0],МассивПараметров[1],МассивПараметров[2]);
						//Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
						Если ЗначениеЗаполнено(текст) Тогда
							АлгоритмСохраненияКоробовНаСервере(текст,ИННПоставщика,Тотал,числоЗагрузили,Thumbprint_1,БылиУпаковки);
						Конецесли;
							
					КонецПопытки;
					
					
				
				КонецЕсли;
			КонецЦикла;  
			
			Если МассивЗаданий.Количество() >0 Тогда
				ЗаполнитьИнформациюОПродукцииИУпаковках(МассивЗаданий,Thumbprint_1,БылиУпаковки,ИННПоставщика); 
				МассивЗаданий.Очистить();
			КонецЕсли;
			

Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
	
	
	Если СтрДлина(Стр_1.cis)=18 Тогда
		Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба",Стр_1.cis)).Количество()=0 Тогда
			
					МассивПараметров = Новый Массив;
					МассивПараметров.Добавить(Стр_1.cis);
					МассивПараметров.Добавить(Thumbprint_1);
					МассивПараметров.Добавить(СрегиСтра);
					числоЗагрузили=0;
					
					Тотал=0;
					//БылиУпаковки=Ложь;
						
					Попытка
						Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИнформациюСMarked_Products", МассивПараметров);
						//ЗаданияПоСтрокам.Вставить(Задание.УникальныйИдентификатор, СерийныйНомер);
						МассивЗаданий.Добавить(Задание);
						
						Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
							ЗаполнитьИнформациюОПродукцииИУпаковках(МассивЗаданий,Thumbprint_1,БылиУпаковки,ИННПоставщика); 
							МассивЗаданий.Очистить();
						КонецЕсли;
					Исключение
						Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИнформациюСMarked_Products(МассивПараметров[0],МассивПараметров[1],МассивПараметров[2]);
						//Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
						Если ЗначениеЗаполнено(текст) Тогда
							АлгоритмСохраненияКоробовНаСервере(текст,ИННПоставщика,Тотал,числоЗагрузили,Thumbprint_1,БылиУпаковки);
						Конецесли;
							
					КонецПопытки;
					
			
			
			
		КонецЕсли;
		
	Конецесли;
	
	
Конеццикла;
			
			
			Если МассивЗаданий.Количество() >0 Тогда
				ЗаполнитьИнформациюОПродукцииИУпаковках(МассивЗаданий,Thumbprint_1,БылиУпаковки,ИННПОставщика); 
				МассивЗаданий.Очистить();
			КонецЕсли;
			
			
			
			
	
			
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВсюИнформациюПоФармацевтике(Thumbprint_1,СРегистра)
	
subjectIdФармацевтика=вернутьSUB();
	МассивУжеБылоНеИскать=Новый Массив;
	
	
	МассивДляЗапроса=Новый Массив;
	МассивЗапросов.Очистить();
	Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		Если СтрДлина(Стр_1.cis)=18 
			И Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба",Стр_1.cis)).Количество()=0 
			Тогда
	
	//Если МассивДляЗапроса.Количество()>0 Тогда
		
		

			
			
			Страница=0;
			
			Чтение=Новый ЗаписьXML;
			Чтение.УстановитьСтроку("UTF-8");
			Чтение.ЗаписатьОбъявлениеXML();
			Чтение.ЗаписатьНачалоЭлемента("documents");
			Чтение.ЗаписатьАтрибут("version","1.35");
		 	
			Чтение.ЗаписатьНачалоЭлемента("query_hierarchy_info");
			Чтение.ЗаписатьАтрибут("action_id","220");
			
			Чтение.ЗаписатьНачалоЭлемента("subject_id");
			Чтение.ЗаписатьТекст(subjectIdФармацевтика);
			Чтение.ЗаписатьКонецЭлемента();
			
			Чтение.ЗаписатьНачалоЭлемента("sscc");
			Чтение.ЗаписатьТекст(Стр_1.cis);
			Чтение.ЗаписатьКонецЭлемента();
			
			Чтение.ЗаписатьКонецЭлемента();
			Чтение.ЗаписатьКонецЭлемента();
			СформироватьФайлДляОтправки=Чтение.Закрыть();
			
			
			
			
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

				
				Подписанный="";
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1,Подписанный,Истина);
		
			Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
		Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("document");
	Чтен.ЗаписатьЗначение(Добав);
	Чтен.ЗаписатьИмяСвойства("sign");
	Чтен.ЗаписатьЗначение(Подписанный);
	Чтен.ЗаписатьИмяСвойства("request_id");
	Чтен.ЗаписатьЗначение(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВернутьУНИКУМ());
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();
	
				 
				 
		//Тело="{
		//|""doc_type"":""311"",
		//|""document"":"""+Добав+""",
		//|""sign"":"""+Подписанный+""",
		//|""request_id"":"""+ВернутьУНИКУМ()+"
		//|}";
			
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/send");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		
		Если Ответ.КодСостояния=200 Тогда
			
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Добав_Запрос=МассивЗапросов.Добавить();
			Добав_Запрос.ИдЗапроса=NNN.document_id;
			Добав_Запрос.Обработан=Ложь;
			Добав_Запрос.Марка=Стр_1.cis;
			
			//МассивЗапросов.Добавить(Новый );
			
		КонецЕсли;
		
		
	КонецЕсли;
	

	Конеццикла;
	
	Если МассивЗапросов.Количество()>0 Тогда
		
		
		
	
						
					    ОбработаныВсе=Ложь;
					Пока ОбработаныВсе=Ложь Цикл
						ОбработаныВсе=Истина;
								ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
								
								Для Каждого Стр_1_З Из МассивЗапросов Цикл
									Если Стр_1_З.Обработан=Истина Тогда
										Продолжить;
									Конецесли;
									 ОбработаныВсе=Ложь;
								_Order_ID=	Стр_1_З.ИдЗапроса;
								Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
									Прокси=Новый ИнтернетПрокси;
									Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
								
									HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
								Иначе
									HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
								КонецЕсли;
								Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
									HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+_Order_ID+"/ticket");
								Иначе
									HTTPЗапрос=Новый HTTPЗапрос("documents/"+_Order_ID+"/ticket");
									
								Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
									
									HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
									
								КонецЕсли;
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
						//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
						///Константин           
						//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						Текст1=Ответ.ПолучитьТелоКакСтроку();
						//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
					
						
					//	 Попытка				
							 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
								 
								 
								 
								 
								Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
								 
								 
									//ЧтениеJSON = Новый ЧтениеJSON;
									//ЧтениеJSON.УстановитьСтроку(Текст1);
									NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
									
									
									//Сайт="http://"+Thumbprint_1.АдресКАПИ;
									//Сайт_1=СтрЗаменить(NNN.link,Сайт,"");
									//Сайт="https://"+Thumbprint_1.АдресКАПИ;
									//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
									//
									Сайт_1=NNN.link;
									Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
									Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
									
									
									
									
									
												HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
						//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
						///Константин           
						//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						Текст1=Ответ.ПолучитьТелоКакСтроку();
					//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
						
					КонецЕсли;
					Если Не ЗначениеЗаполнено(Текст1) 
						ИЛИ Найти(Текст1,"Ошибка при выполнении операции: запись не найдена")>1
						тогда
									//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
										 
										 Продолжить;
									 КонецЕсли;
									 
									 МассивУп=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.МассивКмОвДляОбработки_Упаковки(Текст1);
									 Если МассивУп.Количество()>0 Тогда
											НСтрП=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1_З.Марка));
											Для Каждого Стр___ Из НСтрП Цикл
												Если Не ЗначениеЗаполнено(Стр___.СерийныйНомер) тогда
													Стр___.СерийныйНомер=МассивУп[0].series_number;
												КонецЕсли;
											Конеццикла;
									КонецЕсли;
										
									Для Каждого Стр_222 Из МассивУп Цикл
										
											Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Стр_1_З.Марка,Стр_222.НомерКМ)).Количество()=0 Тогда
						
														ДобавК=Объект.Короба.Добавить();
														ДобавК.НомерКороба=Стр_1_З.Марка;
														ДобавК.ШтрихКод=Стр_222.НомерКМ;
														БылиУпаковки=Истина;
														
														
													КонецЕсли;

										
																				 
									Конеццикла;
									
									 Стр_1_З.Обработан=Истина;
									 
									 Продолжить;
									 
								ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
									 Стр_1_З.Обработан=Истина;
									 
									 Продолжить;
									 
								ИначеЕсли Ответ.КодСостояния=301 Тогда
									 Стр_1_З.Обработан=Истина;
									 
									 Продолжить;
									 
									
								Иначе
								//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
										Продолжить;
								КонецЕсли;
						
								//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
								
					              
						
						
								
								
							Конеццикла;	
							Если ОбработаныВсе=Истина Тогда
								Прервать;
							КонецЕсли;
						Конеццикла;
						

					
					
					
															
		
		
	конецЕсли;
	
	
	
	
	
	
	
	
	
	
	Возврат;
	
	subjectIdФармацевтика="";
	
	Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		Если СтрДлина(Стр_1.cis)=18 
			И Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба",Стр_1.cis)).Количество()=0 
			Тогда
			Счетчик=0;
			РекурсияУпаковки_Лекарства(СРегистра,Thumbprint_1,Стр_1.cis,Вернутьsub(),Счетчик);
		КонецЕсли;
	Конеццикла;
	
	
	
	
	
КонецПроцедуры

Функция Вернутьsub_Договор()
//Возврат Объект.ДоговорОрганизации.РегистрационныйНомер
	РегК= Объект.ДоговорОрганизации.РегистрационныйНомер;
	Если ЗначениеЗаполнено(РегК) тогда
		Возврат РегК
	КонецЕсли;
		Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Договора_ХамелеонЦРПТ.РегистрационныйНомер КАК ссылка
		|ИЗ
		|	Справочник.Договора_ХамелеонЦРПТ КАК Договора_ХамелеонЦРПТ
		|ГДЕ
		|	Договора_ХамелеонЦРПТ.Владелец = &Владелец
		|	И Договора_ХамелеонЦРПТ.РегистрационныйНомер <> """"";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Возврат ВыборкаДетальныеЗаписи.Ссылка
	КонецЦикла;
Конецфункции


Функция Вернутьsub()
	РегПр=Объект.ОрганизацияПолучатель_Лекарства.subjectIdФармацевтика   ;
	Если ЗначениеЗаполнено(РегПР) Тогда
		Возврат РегПр
		
	КонецЕсли;
	
	
	СпрФ=Справочники.Договора_ХамелеонЦРПТ.Выбрать(,ОБъект.Организация);
	Пока СпрФ.Следующий() Цикл
		Если ЗначениеЗаполнено(СпрФ.РегистрационныйНомер) тогда
			Возврат СпрФ.РегистрационныйНомер
		КонецЕсли;
	Конеццикла;
	
Конецфункции

&НаКлиенте
Процедура РекурсияУпаковки_Лекарства(СРегистра,Thumbprint_1,cis_1,subjectIdФармацевтика,Счетчик) Экспорт
	
	Если Счетчик>10 Тогда
		Возврат;
	Конецесли;
	Счетчик=Счетчик+1;
	 НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	 
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
	 
	   
	Если СтрДлина(cis_1)=20 Тогда
		cis_1=Сред(cis_1,3);
	КонецЕслИ;
		Если СтрДлина(cis_1)<>18 Тогда
			Возврат;
		КонецЕсли;
	   Если НаСервере Тогда
		// Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Строк.cis);  
	Иначе
		
		        //     НомерКМ=cis_1;
		
				HTTPЗапрос=Новый HTTPЗапрос("api/v1/reestr/sscc/"+cis_1+"/full-hierarchy");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(31);
		    Если Ответ.КодСостояния=200 Тогда
					//	ЗагружаемШаблоныНасервере(Текст1,Форм.Пользователь);
					
					             NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);
								 
			down=Неопределено;
			childs=Неопределено;
			Если NNN.Свойство("down",down) И
				down.Свойство("childs",childs) Тогда
				Для Каждого Стр_childs Из childs Цикл
					ключ=Неопределено;
					Если 
						Стр_childs.Свойство("sgtin",ключ) И ЗначениеЗАполнено(Ключ) Тогда
								//Строк_1.НомерКМ=ключ;                         	
								
								Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",cis_1,ключ)).Количество()=0 Тогда
						
									ДобавК=Объект.Короба.Добавить();
									ДобавК.НомерКороба=cis_1;
									ДобавК.ШтрихКод=ключ;
									БылиУпаковки=Истина;
									
									Если СтрДлина(ключ)=18 Тогда
										РекурсияУпаковки_Лекарства(СРегистра,Thumbprint_1,ключ,subjectIdФармацевтика,Счетчик)								
									КонецЕсли;
									
								КонецЕсли;
								
								КонецЕсли
				 КонецЦикла;
								 
						
						//Строк_1.НомерКМ=ключ;    
						 

											
											////Если Стр_С_С["ownerInn"]<>Thumbprint_1.ИНН Тогда
											////	МассивСтруктур.Добавить(Новый Структура("cis,статус",НомерКМ,"КМ принадлежит "+Стр_С_С["ownerInn"]+", "+
											////	Стр_С_С["ownerName"]));
											//Если Стр_С.status="in_realization" Тогда
											//	МассивСтруктур.Добавить(Новый Структура("cis,статус",БылНомерКМ,"Ожидает ответа от клиента по документу "));
											//	//Стр_С_С["lastDocId"]));
											////ИначеЕсли ЗначениеЗаполнено(Стр_С_С["agentInn"]) И Стр_С_С["agentInn"]<>Thumbprint_1.ИНН Тогда
											//	
											////	МассивСтруктур.Добавить(Новый Структура("cis,статус",НомерКМ,"КМ передан на комиссию "+Стр_С_С["agentInn"]+", "+
											////	Стр_С_С["agentName"]));
											//Иначе
											//	МассивСтруктур.Добавить(Новый Структура("cis,статус",БылНомерКМ,Стр_С.status));
											//КонецЕсли;
											//
					КонецЕсли;
		
		
		
		 	//		Исключение
	//	
			КонецЕсли;	
				
			//Конеццикла;
						
		//Сообщить(Ответ.ПолучитьТелоКакСтроку());	
	КонецЕсли;
//КонецЕсли;
КонецПроцедуры


Процедура НаСервереПроудкцию()

	Для Каждого Стр_1 Из Объект.ПроверкаПоНомерамКМ Цикл
		Если не ЗначениеЗаполнено(Стр_1.Продукция) Тогда
			Попытка
				Стр_1.Проудкция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Стр_1.GTINНаименованиеТовара));
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	Конеццикла;
	
КонецПроцедуры

&НаКлиенте
Процедура 		ОпределимКоробаПоТабаку();
	
	ДеревоКМ.ПолучитьЭлементы().Очистить();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюПоКМ(ДеревоКМ,Стр.cis,Объект.ТекущийПользователь,Субъект(Объект.ОрганизацияПолучатель_Лекарства),Ложь);
//	Прервать;	
		
	Конеццикла;
	
	Для Каждого Стр_1 Из ДеревоКМ.ПолучитьЭлементы() Цикл
		СтрНом=Стр_1.НомерКороба;
		Для Каждого Стр_2 Из Стр_1.ПолучитьЭлементы() Цикл
			Если Сред(Стр_2.НомерКМ,1,1)="(" Тогда
				
				Стр_2.НомерКМ=Сред(Стр_2.НомерКМ,2,2)+Сред(Стр_2.НомерКМ,5,14)+
				Сред(Стр_2.НомерКМ,20,2)+Сред(Стр_2.НомерКМ,23);
				
			КонецЕсли;
			
			
		                   Если Объект.Короба.НайтиСтроки(Новый Структура("ШтрихКод",Стр_2.НомерКМ)).Количество()=0 Тогда
											ДобавК=Объект.Короба.Добавить();
										ДобавК.НомерКороба=СтрНом;
										ДобавК.ШтрихКод=Стр_2.НомерКМ;
									КонецЕсли;
										СтрНомБокса=Стр_2.НомерКМ;
										Для Каждого Стр_3 Из Стр_2.ПолучитьЭлементы() Цикл
			Если Сред(Стр_3.НомерКМ,1,1)="(" Тогда
				
				Стр_3.НомерКМ=Сред(Стр_3.НомерКМ,2,2)+Сред(Стр_3.НомерКМ,5,14)+
				Сред(Стр_3.НомерКМ,20,2)+Сред(Стр_3.НомерКМ,23);
				
			КонецЕсли;
											
											Если Объект.Короба.НайтиСтроки(Новый Структура("ШтрихКод",Стр_3.НомерКМ)).Количество()=0 Тогда
											ДобавК=Объект.Короба.Добавить();
										ДобавК.НомерКороба=СтрНомБокса;
										ДобавК.ШтрихКод=Стр_3.НомерКМ;
									КонецЕсли;

											
										Конеццикла;
										
										
			Конеццикла;
		Конеццикла;	
		ПодсчетКоличестваВДереве();
	
ЗагрузитьобновитьПроверкуПросту()
	             
КонецПроцедуры

&НаКлиенте
Процедура РекурсияПоПолучениюИнформации_1(Карта,УжеЗапрашивали,Марка,HTTPСервисЗапрос,Thumbprint_1,СРегистра,БылиУпаковки,МассивКМ)
	
	что=Thumbprint_1.Что;
	Если Карта<>Неопределено И Карта["children"]<>Неопределено Тогда
		
		ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка");
			
		МассивКМ.Добавить(Новый Структура("КМ,Тип",Марка,ТипУпаковки));
		
		Для Каждого Стр_К Из Карта["children"] Цикл
		
			ШтрихКод=Стр_к["cis"];
			ДобавК=Объект.Короба.Добавить();
			ДобавК.НомерКороба=Марка;
			ДобавК.ШтрихКод=ШтрихКод;
			
			
			Если ЗначениеЗАполнено(Стр_к["countChildren"]) 
				И число(Стр_к["countChildren"])>0
				Тогда

				ПолучитьИнформациюОКМ_ПоСтранично(ШтрихКод,Thumbprint_1,СРегистра,БылиУпаковки,УжеЗапрашивали);
			
			Конецесли;
		Конеццикла;
	ИначеЕсли Карта<>Неопределено Тогда
			ШтрихКод=Карта["cis"];
			Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба",ШтрихКод)).Количество()=0 
				И Объект.Короба.НайтиСтроки(Новый Структура("ШтрихКод",ШтрихКод)).Количество()=0 Тогда
				ДобавК=Объект.Короба.Добавить();
				ДобавК.НомерКороба=Марка+" UNIT";
				ДобавК.ШтрихКод=Марка;
			Конецесли;
					
			
			//
			Если Карта["packType"]="UNIT" Тогда
				
						
			ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Штука");
			
		//Конецесли;
		МассивКМ.Добавить(Новый Структура("КМ,Тип",Марка,ТипУпаковки));
		
		ГТИН_1=Сред(ШтрихКод,3,14);
		Если УжеЗапрашивали.Найти(ГТИН_1)=Неопределено Тогда
		
					
			HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ШтрихКод)+"&pg="+что);;
			//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ШтрихКод)+"&pg="+что);;

			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);

			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			Если Ответ.КодСостояния=200 ИЛИ Ответ.КодСостояния=202 Тогда
				Текст1=Ответ.ПолучитьТелоКакСтроку();
				ГТИН="";                                                               Тотал=0;числоЗагрузили=0;
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке(Текст1,"",Тотал,числоЗагрузили,Thumbprint_1,ГТИН);
			Иначе
						
						ГТИН="";
						ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке_Соответвтвие(Карта,"",Тотал,числоЗагрузили,Thumbprint_1,ГТИН);
								
			//	Вызватьисключение ГТИН;
			КонецЕсли;				
				УжеЗапрашивали.Добавить(ГТИН_1);
		КонецЕсли ;
		Иначе
						ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка");
							МассивКМ.Добавить(Новый Структура("КМ,Тип",Марка,ТипУпаковки));
		
		
		Конецесли;
//		Если Не ЗначениеЗаполнено(Стр_11.НаименованиеТовара) тогда
//			Стр_11.НаименованиеТовара=СоздатьНайтиGTIN(ГТИН);
//		КонецЕсли;
	
	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОПределитьУпаковки(Thumbprint_1) Экспорт
		Для Каждого Стр_2 Из Объект.СерийныеНомера Цикл
			Если Не ЗначениеЗАполненО(Стр_2.ТипУпаковки) Тогда
				ТипУпаковки=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ВернутьИнформациюОКМ(Стр_2.cis,Thumbprint_1);
				Если ТипУпаковки=Истина Тогда
					Стр_2.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка");
				ИначеЕсли ТипУпаковки=2 тогда
					Стр_2.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.АТК");
					
				ИначеЕсли ТипУпаковки=Ложь Тогда
					Стр_2.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Штука");
					
					
				КонецЕсли;
			КонецЕсли;
			
		Конеццикла;
	
КонецПроцедуры



&НаКлиенте
Процедура ЗакачатьДетальнуюИнформацию(Команда)    Экспорт
	ЗакачатьДетальнуюИнформациюНаКлиенте();
	
	Для Каждого Стр Из Объект.Товары Цикл
		Стр.ИтогоВложенийПоСтроке=0;
		Нстр=ОБъект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Для Каждого Стр_М Из НСТр Цикл
			Счетчик=0;
			РекурсияУпаковки_ИтогоВложений(Стр_М.cis,Стр.ИтогоВложенийПоСтроке,Счетчик);
		КонецциклА;
	КонецЦикла;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура РекурсияУпаковки_ИтогоВложений(Стр_М,КоличествоНомеровКМ,Счетчик)
	
	Если Счетчик>10  Тогда
		Возврат;
	Конецесли;
	Счетчик=Счетчик+1;
	НСтр=ОБъект.Короба.НайтиСтроки(Новый Структура("НомерКороба",Стр_М));
	
	Если НСтр.Количество()=0 тогда
		КоличествоНомеровКМ=КоличествоНомеровКМ+1;
	Иначе
		Для Каждого Стр_М_1 Из НСТр Цикл
			РекурсияУпаковки_ИтогоВложений(Стр_М_1.ШтрихКод,КоличествоНомеровКМ,Счетчик);
		КонецциклА;	
	Конецесли;
	Счетчик=Счетчик-1;
	
КонецПроцедуры




&НаКлиенте
Процедура ПолучитьИнформациюОКМ_ПоСтранично(Марка,Thumbprint_1,СРегистра,БылиУпаковки,УжеЗапрашивали)
	

	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
			Прокси=Новый ИнтернетПрокси;
			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
		
HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		Иначе
HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		
			что=Thumbprint_1.что;
			
			
			
			
			
			
			
			
				
		МассивКМ_1=Новый Массив;
		МассивКМ_1.Очистить();
		МассивКМ_1.Добавить(Марка);
		Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьтелоПоcis(МассивКМ_1);
		Страница=0;
		Пока Истина Цикл
			Страница=Страница+1;
			HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/cis/cis_list?childrenPaging=true&childrenPage="+Формат(Страница,"ЧГ=")+"&childrenLimit=10&?pg="+Что);
						
							
						//ИНН=ВернутьИНН(Обр.Организации[0].Организация );
				///HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_11.Марка));;
				//HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?gtin="+ДополнитьСтроку(Стр_11)+"&limit=100&offset=0");;
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			#Если ВебКлиент Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
			#Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
				
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
				Текст1=Ответ.ПолучитьТелоКакСтроку();
				
				числоЗагрузили=0;
				
				Тотал=0;
		//		БылиУпаковки=Ложь;
				Если Ответ.КодСостояния=200 Тогда
					
					МассивКМ=Новый Массив;
							NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
							
							Если NNN[Марка]<>Неопределено тогда
								Если NNN[Марка]["children"]=Неопределено тогда
									РекурсияПоПолучениюИнформации_1(NNN[Марка],УжеЗапрашивали,Марка,HTTPСервисЗапрос,Thumbprint_1,СРегистра,БылиУпаковки,МассивКМ);
							
									ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапишемТип_КМ_Из_Массива(МассивКМ);
								
									Прервать;
								Конецесли;
								
								РекурсияПоПолучениюИнформации_1(NNN[Марка],УжеЗапрашивали,Марка,HTTPСервисЗапрос,Thumbprint_1,СРегистра,БылиУпаковки,МассивКМ);
							
								ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапишемТип_КМ_Из_Массива(МассивКМ);
							Иначе
								РекурсияПоПолучениюИнформации_1(NNN[Марка],УжеЗапрашивали,Марка,HTTPСервисЗапрос,Thumbprint_1,СРегистра,БылиУпаковки,МассивКМ);
							
								ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапишемТип_КМ_Из_Массива(МассивКМ);
									
								Прервать;
							КонецЕсли;	
													
				ИначеЕсли Ответ.КодСостояния=401 
					ИЛИ Ответ.КодСостояния=502  
					Тогда
						//Если УжеОтправили=Истина Тогда
							ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
							Прервать;
						Иначе
							Прервать;
				КонецЕсли;
			
				
			Конеццикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакачатьДетальнуюИнформациюНаКлиенте()
	
	
	Объект.ПроверкаПоНомерамКМ.Очистить();
		ИННПоставщика="";
				Thumbprint_1=ПолучитьИзПользователя(ИННПоставщика);
				
				
	ОПределитьУпаковки(Thumbprint_1);
				
				Если        Thumbprint_1=Неопределено тогда
					Возврат;
				КонецЕсли;
	Если Thumbprint_1.НаименованиеСтенда="Табак"
		ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
		Тогда
		ОпределимКоробаПоТабаку();
			Возврат;
	КонецЕсли;
	
	
	
	МассивДобавили=Новый Массив;
	
	Массив=Новый Массив;
	МассивГТИН(Массив,МассивДобавили);	
	
	Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		Если Стр_1.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка")
			ИЛИ Не ЗначениеЗаполнено(Стр_1.ТипУпаковки) Тогда
			//Если Массив.Найти(Стр_1.cis)=Неопределено Тогда
			Если МассивДобавили.Найти(Стр_1.cis)=неопределено тогда
				БылиУпаковки=Истина;
				Массив.Добавить(Новый Структура("GTIN,Марка",Стр_1.GTIN,Стр_1.cis));
				МассивДобавили.Добавить(Стр_1.cis);
			КонецЕсли;
		КонецЕсли;
	Конеццикла;
	
	УжеЗапрашивали=Новый Массив;
				Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
					Возврат;
				КонецЕслИ;
				
				
				
				Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
					
						Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
							Прокси=Новый ИнтернетПрокси;
							Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
						
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
						Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
						КонецЕсли;
					
						
	СРегистра="";
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
						
						
					ПолучитьВсюИнформациюПоФармацевтике(Thumbprint_1,СРегистра);
					ЗагрузитьобновитьПроверкуПросту();
					
					МассивПроудкций=Новый Массив;
					Для Каждого Стр_1 Из Объект.ПроверкаПоНомерамКМ Цикл
						Если не ЗначениеЗАполнено(Стр_1.Продукция) 
							И Стр_1.GTINНаименованиеТовара<>"НЕ ПОЛУЧАЛИ" Тогда
							МассивПроудкций.Добавить(Стр_1.GTINНаименованиеТовара);
						ИНАЧЕ
							Попытка
								Если ЗначениеЗаполнено(Стр_1.Продукция)
									И Число(Стр_1.GTINНаименованиеТовара)=Число(Строка(Стр_1.Продукция)) Тогда
									Если МассивПроудкций.Найти(Стр_1.GTINНаименованиеТовара)=Неопределено тогда
									 	МассивПроудкций.Добавить(Стр_1.GTINНаименованиеТовара);
									КонецеслИ;
								Конецесли;
							Исключение
							КонецПопытки;
							
							
						КонецЕсли;
						
					Конеццикла;
						
					Для Каждого Стр_1 Из МассивПроудкций Цикл
						
									Чтен=Новый  ЗаписьJSON;
										Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
										Чтен.ЗаписатьНачалоОбъекта();
										Чтен.ЗаписатьИмяСвойства("start_from");	
										Чтен.ЗаписатьЗначение(0);
										Чтен.ЗаписатьИмяСвойства("count");
										Чтен.ЗаписатьЗначение(10);
										Чтен.ЗаписатьИмяСвойства("filter");
										Чтен.ЗаписатьНачалоОбъекта();
										
										Чтен.ЗаписатьИмяСвойства("gtin");
										Чтен.ЗаписатьЗначение(Стр_1);
										
										
													       Чтен.ЗаписатьКонецОбъекта();
										
										//Чтен.ЗаписатьЗначение("{}");
													       Чтен.ЗаписатьКонецОбъекта();
													
													Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
										Тело=СтрЗаменить(Тело,Символы.ПС,"");
										Тело=СтрЗаменить(Тело,Символы.ВК,"");
										
						
						
								HTTPЗапрос=Новый HTTPЗапрос("api/v1/reestr/med_products/public/filter");
								          HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
								
												//	Иначе
												//	HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.document_id+"");
											/////			
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
												//	КонецЕсли;
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
											HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
											Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
											ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьПродукцию(Текст1);
											
											
												ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
											
												//Стр_1.Обновить();										
						
											Конеццикла;		
											НаСервереПроудкцию();
											
																			
								Если Объект.Короба.Количество()>0 Тогда
									Объект.Товары.Очистить();
									
									Для КаждоГо Добав Из объект.СерийныеНомера Цикл
										
										
										
										Нстроки=Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба",Добав.cis));
										ГТИН="00000000000000";
										Если НСтроки.Количество()=0 Тогда
											Если СтрДлина(Добав.cis)>18 Тогда
												ГТИН=ДополнитьСтроку(Сред(Добав.cis,1,14))
											КонецЕсли;
										Иначе
											Для Каждого Стр_11_Н Из НСтроки Цикл
												Если СтрДлина(Стр_11_Н.ШтрихКод)>18 Тогда
													ГТИН=ДополнитьСтроку(Сред(Стр_11_Н.ШтрихКод,1,14));
													Прервать;
												КонецЕсли;
												
											КонецЦикла
											
										КонецЕсли;
										
										//Проудкция=Неопределено;
										Продукция=ПредопределенноеЗначение("Справочник.Продукция_ХамелеонЦРПТ.ПустаяСсылка");
										Если ГТИН<>"00000000000000" Тогда
											Продукция=СоздатьНайтиGTIN(ГТИН);
										КонецЕсли;
											КоличествоКМ=Макс(1,НСтроки.Количество()); 
											Если ЗначениеЗаполнено(Продукция) тогда
												НСтр=Объект.Товары.НайтиСтроки(Новый Структура("GTIN",Продукция));
												Если НСтр.Количество()=0 Тогда
												
													НСТр=Объект.Товары.Добавить();
													Попытка
														НСТр.НаименованиеТовара=Продукция.Наименование;
													Исключение
													КонецПопытки;
													НСТр.GTIN=Продукция;
													НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
												Иначе
													НСТР=НСТР[0];
								//					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
												КонецЕсли;
											Иначе
													НСТр=Объект.Товары.Добавить();
													НСТр.НаименованиеТовара="";
													НСТр.GTIN="";
													НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
											КонецЕсли;
											
											
								//					Добав=Объект.СерийныеНомера.Добавить();
													Добав.КоличествоКМ=КоличествоКМ;
													НСТР.КоличествоКМ=НСТР.КоличествоКМ+1;
													НСТР.КоличествоНомеровКМ=НСТР.КоличествоНомеровКМ+КоличествоКМ;
													
													НСТр.Сумма=НСтр.Сумма+Добав.Цена;
													НСтр.НДС=НСТР.НДС+Добав.НДС;
													НСТр.Цена=НСтр.Сумма/НСтр.КоличествоКМ;
													
													
													Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
													Добав.НаименованиеТовараСтрокой=НСТр.НаименованиеТовара;
													Добав.НаименованиеТовара=Продукция;
													Если ЗначениеЗаполнено(Продукция)   Тогда
														Добав.GTIN=ГТИН;
													КонецЕсли;
													
								//				Исключение
								//				КонецПопытки;
										
									Конеццикла;
								КонецЕсли;
											
								Попытка
							этаФорма.Записать();
												
					этаФорма.Прочитать();
				Исключение
					КонецПопытки;
					
					Возврат;
				КонецЕсли;
				

				
				       Объект.Короба.Очистить();
				
				//НЕ ЛЕКАРСТВА!!!!!!
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
				Если Не ЗначениеЗаполнено(СРегистра) Тогда
					ПоказатьПредупреждение(,"Не удалось получить токен по организации");
					Возврат;
				Конецесли;
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				 
				
				
				если 		Истина ИЛИ 			ЧислоПараллельныхПотоков=0 Тогда
				

					Для Каждого Стр_11 Из Массив Цикл
						
						Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба",Стр_11.Марка)).Количество()>0 Тогда
							Продолжить;
						КонецЕсли;
						
				Если Ложь Тогда
				Иначе
					
			ПолучитьИнформациюОКМ_ПоСтранично(Стр_11.Марка,Thumbprint_1,СРегистра,БылиУпаковки,УжеЗапрашивали);
			
			//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапишемТип_КМ_Из_Массива(МассивКМ);
			
		//				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
		//					Прокси=Новый ИнтернетПрокси;
		//					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
		//				
		//		HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		//				Иначе
		//		HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		//				КонецЕсли;
		//				
		//	что=Thumbprint_1.что;
		//	
		//	
		//	
		//	
		//	
		//	
		//	
		//	
		//		
		//	МассивКМ_1=Новый Массив;
		//	МассивКМ_1.Очистить();
		//	МассивКМ_1.Добавить(Стр_11.Марка);
		//			//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_11.Марка)+"&pg="+что);;
		//		Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьтелоПоcis(МассивКМ_1);
		//		HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/cis/cis_list?pg="+Что);
		//				
		//					
		//				//ИНН=ВернутьИНН(Обр.Организации[0].Организация );
		//		///HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_11.Марка));;
		//		//HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?gtin="+ДополнитьСтроку(Стр_11)+"&limit=100&offset=0");;
		//		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		//		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//	#Если ВебКлиент Тогда
		//		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		//	#Иначе
		//		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
		//	#КонецЕсли
		//		
		//		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		//		///Константин           
		//		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		//		Текст1=Ответ.ПолучитьТелоКакСтроку();
		//		
		//		числоЗагрузили=0;
		//		
		//		Тотал=0;
		////		БылиУпаковки=Ложь;
		//		Если Ответ.КодСостояния=200 Тогда
		//			
		//			МассивКМ=Новый Массив;
		//					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
		//					
		//					Если NNN[Стр_11.Марка]<>Неопределено тогда
		//						РекурсияПоПолучениюИнформации_1(NNN[Стр_11.Марка],УжеЗапрашивали,Стр_11.Марка,HTTPСервисЗапрос,Thumbprint_1,СРегистра,БылиУпаковки,Стр_11,МассивКМ);
		//					
		//						ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапишемТип_КМ_Из_Массива(МассивКМ);
		//					КонецЕсли;	
		//											
		//		ИначеЕсли Ответ.КодСостояния=401 
		//			ИЛИ Ответ.КодСостояния=502  
		//			Тогда
		//				//Если УжеОтправили=Истина Тогда
		//					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
		//				//Иначе
		//				//	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
		//					//Загрузить(Команда,Истина)			
		//			//КонецЕсли
		//		КонецЕсли;
			КонецЕсли;
			КонецЦикла;  

			
			

		Иначе
			                        

СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Возврат;
		КонецЕсли;
			
			ПолучаемИнформациюнаСервереПоКоробам(Thumbprint_1,СРегистра,Массив,БылиУпаковки);
			
		КонецЕсли;
		

		
	
	//Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
	//	Если СтрДлина(Стр_1.cis)=18 Тогда
	//		Если Не ЗначениеЗаполнено(Стр_1.GTIN) Тогда
	//			Стр_1.GTIN=НайтиГТИН(Стр_1.cis,БылиУпаковки)
	//		КонецЕсли;
	//		
	//	КонецЕслИ;
	//	
	//	
	//конеццикла;
	
		
		
		
		
		
	Массии=Новый Массив;
	Для Каждого Стр_1 Из Объект.Короба Цикл
		Если не ЗначениеЗаполнено(Стр_1.ШтрихКод) Тогда
			Массии.Добавить(СТр_1)
		КонецЕслИ;
	Конеццикла;
	Для Каждого Стр_1 Из Массии Цикл
		Объект.Короба.Удалить(СТр_1);
	Конеццикла;

	
	
Если БылиУпаковки=Истина Тогда
		
	Если ЗначениеЗаполнено(Объект.ТипЭДО) Тогда
		Если ПриЗагрузкеИнформацииПоЭДОПриемкаВКоличество=Истина Тогда
			Для Каждого Стр_1 Из Объект.Товары Цикл
				Стр_1.КоличествоНомеровКМ=0;
			Конеццикла;
			
		//			Объект.Товары.Очистить();
				Конецесли;;
	

				МассивДобавили.Очистить();
				
		
			Для КаждоГо Добав Из объект.СерийныеНомера Цикл
				
				Если МассивДобавили.Найти(Добав.cis)=Неопределено Тогда
					МассивДобавили.Добавить(Добав.cis);
				Иначе
					ПродолжитЬ;
				Конецесли;
				
				
				Нстроки=Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба",Добав.cis));
				ГТИН="00000000000000";
				Если НСтроки.Количество()=0 Тогда
					Если СтрДлина(Добав.cis)>18 Тогда
						ГТИН=ДополнитьСтроку(Сред(Добав.cis,3,14))
					КонецЕсли;
				Иначе
					Для Каждого Стр_11_Н Из НСтроки Цикл
						Если СтрДлина(Стр_11_Н.ШтрихКод)>18 Тогда
							ГТИН=ДополнитьСтроку(Сред(Стр_11_Н.ШтрихКод,3,14));
							Прервать;
						Иначе
							
							НстрокиИщемТут=Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба",Стр_11_Н.ШтрихКод));
								Если НстрокиИщемТут.Количество()=0 Тогда
								Иначе
									Для Каждого Стр_11_Н_2 Из НстрокиИщемТут Цикл
										Если СтрДлина(Стр_11_Н_2.ШтрихКод)>18 Тогда
											ГТИН=ДополнитьСтроку(Сред(Стр_11_Н_2.ШтрихКод,3,14));
											Прервать;
											
										КонецЕсли;
										
									КонецЦикла
									
									
									
								КонецЕсли;
							
								Если ГТИН<>"00000000000000" Тогда
									Прервать;
								КонецЕсли;
							
							
							
							
						КонецЕсли;
						
					КонецЦикла
					
					
					
				КонецЕсли;
				
				//Проудкция=Неопределено;
				Продукция=ПредопределенноеЗначение("Справочник.Продукция_ХамелеонЦРПТ.ПустаяСсылка");
				Если ГТИН<>"00000000000000" Тогда
					Продукция=СоздатьНайтиGTIN(ГТИН);
				КонецЕсли;
					КоличествоКМ=Макс(1,НСтроки.Количество()); 
					Если ЗначениеЗаполнено(Продукция) тогда
						НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Добав.НомерСтрокиСвязи));
							НСТР=НСТР[0];
							НСТР.GTIN=Продукция;
							//				КонецЕсли;
					
					
		//					Добав=Объект.СерийныеНомера.Добавить();
		Если ПриЗагрузкеИнформацииПоЭДОПриемкаВКоличество=Истина Тогда
			                    НСТР.КоличествоНомеровКМ=НСТР.КоличествоНомеровКМ+КоличествоКМ;
					КонецеслИ;
						
	//	Иначе
							Добав.КоличествоКМ=КоличествоКМ;
	//					КонецЕсли;
//							Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
							Добав.НаименованиеТовараСтрокой=НСТр.НаименованиеТовара;
																 
							Добав.НаименованиеТовара=Продукция;
							Если ЗначениеЗаполнено(Продукция)   Тогда
								Добав.GTIN=ГТИН;
							КонецЕсли;
					КонецЕсли;
							
		//				Исключение
		//				КонецПопытки;
					
		Конеццикла;

			
		Иначе
					Объект.Товары.Очистить();
	
	Для КаждоГо Добав Из объект.СерийныеНомера Цикл
		
		
		
		Нстроки=Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба",Добав.cis));
		ГТИН="00000000000000";
		Если НСтроки.Количество()=0 Тогда
			Если СтрДлина(Добав.cis)>18 Тогда
				ГТИН=ДополнитьСтроку(Сред(Добав.cis,3,14))
			КонецЕсли;
		Иначе
			Для Каждого Стр_11_Н Из НСтроки Цикл
				Если СтрДлина(Стр_11_Н.ШтрихКод)>18 Тогда
					ГТИН=ДополнитьСтроку(Сред(Стр_11_Н.ШтрихКод,3,14));
					Прервать;
						Иначе
							
							НстрокиИщемТут=Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба",Стр_11_Н.ШтрихКод));
								Если НстрокиИщемТут.Количество()=0 Тогда
								Иначе
									Для Каждого Стр_11_Н_2 Из НстрокиИщемТут Цикл
										Если СтрДлина(Стр_11_Н_2.ШтрихКод)>18 Тогда
											ГТИН=ДополнитьСтроку(Сред(Стр_11_Н_2.ШтрихКод,3,14));
											Прервать;
											
				КонецЕсли;
				
			КонецЦикла
			
		КонецЕсли;
		
								Если ГТИН<>"00000000000000" Тогда
									Прервать;
								КонецЕсли;
							
							
							
							
						КонецЕсли;
						
					КонецЦикла
					
					
					
				КонецЕсли;
		//Проудкция=Неопределено;
		Продукция=ПредопределенноеЗначение("Справочник.Продукция_ХамелеонЦРПТ.ПустаяСсылка");
		Если ГТИН<>"00000000000000" Тогда
			Продукция=СоздатьНайтиGTIN(ГТИН);
		КонецЕсли;
			КоличествоКМ=Макс(1,НСтроки.Количество()); 
			Если ЗначениеЗаполнено(Продукция) тогда
				НСтр=Объект.Товары.НайтиСтроки(Новый Структура("GTIN",Продукция));
				Если НСтр.Количество()=0 Тогда
				
					НСТр=Объект.Товары.Добавить();
					Попытка
						НСТр.НаименованиеТовара=Строка(Продукция);
					Исключение
					КонецПопытки;
					НСТр.GTIN=Продукция;
					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
				Иначе
					НСТР=НСТР[0];
//					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
				КонецЕсли;
			Иначе
					НСТр=Объект.Товары.Добавить();
					НСТр.НаименованиеТовара="";
					НСТр.GTIN="";
					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
			КонецЕсли;
			
			
//					Добав=Объект.СерийныеНомера.Добавить();
					Добав.КоличествоКМ=КоличествоКМ;
					НСТР.КоличествоКМ=НСТР.КоличествоКМ+1;
					

					НСТр.Сумма=НСтр.Сумма+Добав.Цена;
					НСтр.НДС=НСТР.НДС+Добав.НДС;
					НСТр.Цена=НСтр.Сумма/НСтр.КоличествоКМ;
					
					
					НСТР.КоличествоНомеровКМ=НСТР.КоличествоНомеровКМ+КоличествоКМ;
					Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
					Добав.НаименованиеТовараСтрокой=НСТр.НаименованиеТовара;
					Добав.НаименованиеТовара=Продукция;
					Если ЗначениеЗаполнено(Продукция)   Тогда
						Добав.GTIN=ГТИН;
					КонецЕсли;
					
//				Исключение
//				КонецПопытки;
		
	Конеццикла;
	КонецЕсли;
КонецЕсли;
//Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
//	
//	
//	Если СтрДлина(Стр_1.cis)=18 Тогда
//		Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба",Стр_1.cis)).Количество()=0 Тогда
//			
//			 РекурсияУпаковкиДляАнализа(Стр_1.cis,Thumbprint_1,СРегистра,ИННПоставщика);
//		 КонецЕсли;
//	 КонецЕсли;
//	 
// Конеццикла;

	Сообщить("Загружено "+Строка(1));		
		
	
	ЗагрузитьобновитьПроверкуПросту()
	
КонецПроцедуры



Процедура РекурсияУпаковкиДляАнализа(cis,Thumbprint_1,СРегистра,ИННПоставщика)
	
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
							Прокси=Новый ИнтернетПрокси;
							Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
						
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
						Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
						КонецЕсли;
						
			что=Thumbprint_1.что;
			
					МассивКМ_1=Новый Массив;
					МассивКМ_1.Очистить();
					МассивКМ_1.Добавить(cis);		 			
			
				Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьтелоПоcis(МассивКМ_1);
			
			
				HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/cis/cis_list?pg="+Что);
					//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_1.cis)+"&pg="+что);;
							
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				#Если ВебКлиент Тогда
					HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
				#Иначе
					HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
				#КонецЕсли
				Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
				Текст1=Ответ.ПолучитьТелоКакСтроку();
				
				числоЗагрузили=0;
				
				Тотал=0;
				БылиУпаковки=Ложь;
				Если Ответ.КодСостояния=200 Тогда
					//ЗагружаемШаблоныНасервере(Текст1,Обр.Пользователь);
					
					
						ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке_Соответвтвие(Текст1,ИННПоставщика,Тотал,числоЗагрузили,Thumbprint_1);
						
						//Попытка
						//	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						//	children="";
						//	еСЛИ                        NNN.Свойство("children",children) Тогда
						//		Для Каждого Стр_children Из children Цикл
						//			ШтрихКод="";
						//			Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
						//				Стр_children.Свойство("uit_code",ШтрихКод);
						//				Если Не ЗначениеЗаполнено(ШтрихКод) тогда
						//					Стр_children.Свойство("cis",ШтрихКод);
						//				КонецЕсли;
						//				
						//			КонецЕсли;
						//			Если Не ЗначениеЗаполнено(ШтрихКод) тогда
						//				Продолжить;
						//			КонецЕсли;
						//			uitu_code="";
						//			NNN.Свойство("uitu_code",uitu_code);
						//			Если Не ЗначениеЗАполнено(uitu_code) Тогда
						//				NNN.Свойство("cis",uitu_code);
						//			КонецЕсли;
						//			
						//			Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",uitu_code,ШтрихКод)).Количество()=0 Тогда
						//			
						//				ДобавК=Объект.Короба.Добавить();
						//				ДобавК.НомерКороба=uitu_code;
						//				ДобавК.ШтрихКод=ШтрихКод;
						//				БылиУпаковки=Истина;
						//			КонецЕсли;
						//			
						//		КонецЦикла;
						//	КонецЕсли;
						//Исключение
							NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
							children=NNN["children"];
							еСЛИ                        children<>Неопределено Тогда
								Для Каждого Стр_children Из children Цикл
									ШтрихКод=Стр_children;
									uitu_code=cis;	
									
									Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",uitu_code,ШтрихКод)).Количество()=0 Тогда
									
										ДобавК=Объект.Короба.Добавить();
										ДобавК.НомерКороба=uitu_code;
										ДобавК.ШтрихКод=ШтрихКод;
										БылиУпаковки=Истина;
										
										
									
									КонецЕсли;
									
									
									Если СтрДлина(ШтрихКод)=18 Тогда
										РекурсияУпаковкиДляАнализа(ШтрихКод,Thumbprint_1,СРегистра,ИННПоставщика);
									КонецЕсли;
									
								КонецЦикла;
							КонецЕсли;
							
						//КонецПопытки;
					КонецЕсли;
			//КонецЕсли;
КонецПроцедуры

&НаСервере
Функция
				НайтиГТИН(cis,БылиУпаковки)
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМаркиОприходовать.Марка
						|ИЗ
						|	Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Марки КАК СозданиеНовогоШкНаКороба_ХамелеонЦРПТМаркиОприходовать
						|ГДЕ
						|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМаркиОприходовать.Ссылка.НомерКороба = &НомерКороба";
					
					Запрос.УстановитьПараметр("НомерКороба", cis);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						Марка=ВыборкаДетальныеЗаписи.Марка;
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						//Если СтрДлина(Марка)>18 Тогда
						//	Возврат Сред(Марка,3,14)
						//КонецЕслИ;
						Если Объект.Короба.НайтиСтроки(Новый Структура("ШтрихКод",Марка)).Количество()=0 Тогда
							Добав=Объект.Короба.Добавить();
							БылиУпаковки=Истина;
							Добав.НомерКороба=cis;
							Добав.ШтрихКод=Марка;
						КонецЕсли;
						
						
					КонецЦикла;
					  Возврат Неопределено;
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

				
Конецфункции


Функция ДополнитьСтроку(СТТТ)
	Возврат Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(СТТТ),14,"0")
КонецФункции

Функция ВидСертификатов(V_WEB_90001683) Экспорт
	Если не ЗначениеЗаполнено(V_WEB_90001683) Тогда
		Возврат Справочники.ВидСертификатаПоGSI_ХамелеонЦРПТ.ПустаяСсылка();
	ИначеЕсли СокрЛП(V_WEB_90001683)="<>" Тогда
		Возврат Справочники.ВидСертификатаПоGSI_ХамелеонЦРПТ.ПустаяСсылка();
	КонецЕсли;
	
	Если Сред(V_WEB_90001683,1,1)="<" Тогда
	 КодВида_1=Сред(V_WEB_90001683,2);
	 КодВида=Сред(КодВида_1,1,Найти(КодВида_1,">")-1);
	 
	 Наименование=СокрЛП(Сред(КодВида_1,Найти(КодВида_1,">")+1));
	 СпрВидОбуви=Справочники.ВидСертификатаПоGSI_ХамелеонЦРПТ.НайтиПоКоду(КодВида);
	 Если СпрВидОбуви=Справочники.ВидСертификатаПоGSI_ХамелеонЦРПТ.ПустаяСсылка() Тогда
		 СпрВидОбуви=Справочники.ВидСертификатаПоGSI_ХамелеонЦРПТ.СоздатьЭлемент();
		 СпрВидОбуви.Код=КодВида;
		 СпрВидОбуви.Наименование=Наименование;
		 СпрВидОбуви.Записать();;
		 Возврат СпрВидОбуви.Ссылка
	 Иначе
		 Возврат СпрВидОбуви.Ссылка
	 КонецЕсли;
 Иначе
	 Возврат Справочники.ВидСертификатаПоGSI_ХамелеонЦРПТ.НайтиПоНаименованию(СокрЛП(V_WEB_90001683))
	 
	КонецЕсли;
КонецФункции



Процедура ЗагружаемГТИН(Текст,ИНН,Тотал,числоЗагрузили,Thumbprint_1)

	
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Текст);
			Попытка
				NNN=ПрочитатьJSON(ЧтениеJSON);
				Тотал=NNN.total;
				
				Для Каждого Стр Из NNN.results Цикл
					Если ИНН<>Стр.INN Тогда
						Продолжить;
					КонецЕсли;
					//Если     Массив.Найти(Число(Стр.gtin))=Неопределено Тогда
					//	Продолжить;
					//КонецЕсли;
					
					числоЗагрузили=числоЗагрузили+1;
					СпрД=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Стр.gtin));
					Если СпрД<>Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка() Тогда
						СпрД=СпрД.ПолучитьОбъект();
					Иначе
						СпрД=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
					КонецЕсли;
					Если Thumbprint_1.НаименованиеСтенда="Обувь" Тогда
						СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
					ИначеЕсли Thumbprint_1.НаименованиеСтенда="Табак" Тогда
						СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак;
					ИначеЕсли Thumbprint_1.НаименованиеСтенда="Альтернативный табак" Тогда
						СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак;
					КонецЕсли;
						
					СпрД.БрендТорговаяМарка=Стр.brand;
					country="";
					
					Стр.Свойство("country",country);
					Если ЗначениеЗАполнено(country) Тогда
						Если country="РОССИЙСКАЯ ФЕДЕРАЦИЯ" Тогда
							СпрД.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
						Иначе
							СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(country);
						КонецЕсли;	
				//		СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(Стр.country);
					//ИначеЕсли Не ЗначениеЗаполнено(	СпрД.СтранаПроизводства) Тогда
					//	СпрД.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
					КонецЕсли;
					СпрД.GTIN=Число(Стр.gtin);
					СпрД.id=Стр.id;
					СпрД.ИННПроизводителяИмпортёра=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",Стр.inn);
					Если Не ЗначениеЗАполнено(СпрД.ИННПроизводителяИмпортёра) Тогда
						Спр_К=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
						Спр_К.ИНН=Стр.inn;
						Спр_К.Наименование=Спр_К.ИНН;
						Спр_К.Записать();
						СпрД.ИННПроизводителяИмпортёра=Спр_К.Ссылка;
						
					Конецесли;
					Стр.Свойство("materialDown",СпрД.МатериалНиза);
					Стр.Свойство("materialLining",СпрД.МатериалПодкладки);
					Стр.Свойство("materialUpper",СпрД.МатериалВерха);
					Стр.Свойство("color",СпрД.Цвет);
					
					Стр.Свойство("model",СпрД.МодельПроизводителяАртикул);
					Стр.Свойство("tnVedCode",СпрД.КодТНВЭДКороткий);
					СпрД.Наименование=Стр.name;
					СпрД.НаименованиеТовара=Стр.name;
					
					productSize=Неопределено;
				    Стр.Свойство("productSize",productSize);
					Если ЗначениеЗаполнено(productSize) тогда
						productSize=СтрЗаменить(productSize,".",",");
						СпрД.Размер=Справочники.РазмерВШтихмассовойСистеме_ХамелеонЦРПТ.НайтиПоНаименованию(productSize,истина);
					КонецЕсли;
					
					
					
					КодПр="";
					Стр.Свойство("productType",КодПр);
					Если ЗначениеЗаполнено(КодПр) Тогда
					СпрД.ВидОбуви=Справочники.ВидОбуви_ХамелеонЦРПТ.НайтиПоКоду(Стр.productType);
					Если Не ЗначениеЗаполнено(СпрД.ВидОбуви) тогда
						СпрВ=Справочники.ВидОбуви_ХамелеонЦРПТ.СоздатьЭлемент();
						СпрВ.Код=Стр.productType;
						СпрВ.Наименование=Стр.productTypeDesc;
						СпрВ.Записать();
						СпрД.ВидОбуви=СпрВ.Ссылка;
					КонецЕсли;
				КонецЕсли;
				publicationDate=Неопределено;
				    Стр.Свойство("publicationDate",publicationDate);
					Если ЗначениеЗаполнено(publicationDate) тогда
						СпрД.ДатаПубликации=Дата(1970,1,1)+Стр.publicationDate/1000;					
					Конецесли;
					////То была обувь теперь сигареты
				packageType=Неопределено;
				    Стр.Свойство("packageType",packageType);
					Если ЗначениеЗАполнено(packageType) тогда
						СПрд.ТипУпаковкиСигарет=Перечисления.ТипУпаковкиСигареты_ХамелеонЦРПТ[packageType];
					КонецЕсли;
					КоличествоВГруппе=0;
					Если Стр.Свойство("innerUnitCount",КоличествоВГруппе) И
						ЗначениеЗаполненО(КоличествоВГруппе) Тогда
						СпрД.КоличествоВГруппе=КоличествоВГруппе;
					Конецесли;
				productGroup=Неопределено;
				    Стр.Свойство("productGroup",productGroup);
					Если ЗначениеЗаполнено(productGroup) тогда
						СпрГр=Справочники.ГруппаСигарет_ХамелеонЦРПТ.НайтиПоНаименованию(productGroup);
						Если Не ЗначениеЗаполнено(СпрГр) Тогда
							СпрГр=Справочники.ГруппаСигарет_ХамелеонЦРПТ.СоздатьЭлемент();
							СпрГр.Наименование=productGroup;
							СпрГр.Записать();
						КонецЕсли;
						СпрД.ГруппаСигарет=СпрГр.Ссылка;
						
					КонецЕсли;
					
					
					
					
					СпрД.Записать();
				Конеццикла;
				
			Исключение
				Возврат
			КонецПопытки;
	
	
		КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИз(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
		// Вставить содержимое обработчика.
		
	МассивКМ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ВернутьКМИзФайлов();
	
	
	Для Каждого ШтрихОбраб Из МассивКМ Цикл
			
		шТРИХкОД=ШтрихОбраб;
		СканироватьМарку=шТРИХкОД;
		СканироватьМарку=СтрЗаменить(СканироватьМарку,Символ(29),"<ГС1>");
		ДобавитьcisВдокумент(СканироватьМарку);
	КонецЦикла;
	
	
	ПодключитьОбработчикОЖидания("аа",0.1,Истина);
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастичныйОтказ(Команда) Экспорт
	// Вставить содержимое обработчика.
	Thumbprint_1 = ПолучитьИзПользователя();	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
		Возврат;
	КонецЕслИ;
	Если Объект.УПД Тогда
		Сообщить("По приемкам, загруженным по формату УПД нельзя оформлять частичный отказ");
		Возврат;
	КонецЕсли;
	ЭтаФорма.Записать();
	ЭтаФорма.Закрыть();
	ОткрытьФорму("Документ.Приемка_ХамелеонЦРПТ.Форма.ФормаЧастичныйОтказ",Новый Структура("СсылкаНаОъект,Текущийпользователь",Объект.Ссылка,Текущийпользователь));
КонецПроцедуры



&НаКлиенте
Процедура ОткрытьВнешниеОбработки(Команда)
	// Вставить содержимое обработчика.
	ОткрытьФорму("Справочник.ВнешниеОбработки_ХамелеонЦРПТ.Форма.ФормаСписка",
	Новый структура("Тип",
		ТипДокумента()));
КонецПроцедуры


Функция ТипДокумента()
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя()
КонецФункции

Процедура ОбновитьВнешниеКнопки()
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнешниеОбработки_ХамелеонЦРПТ.ИмяВнешнейОБработки,
		|	ВнешниеОбработки_ХамелеонЦРПТ.НаименованиеКнопки,
		|	ВнешниеОбработки_ХамелеонЦРПТ.Код
		|ИЗ
		|	Справочник.ВнешниеОбработки_ХамелеонЦРПТ КАК ВнешниеОбработки_ХамелеонЦРПТ
		|ГДЕ
		|	ВнешниеОбработки_ХамелеонЦРПТ.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ИмяКоманды="Команда"+ВыборкаДетальныеЗаписи.Код;
		Попытка
		КомандаФормы = Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуВнешняя";
		КомандаФормы.Заголовок = ВыборкаДетальныеЗаписи.ИмяВнешнейОБработки;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.Текст;
		
		//ОписаниеКомандыПечати.ИмяКомандыНаФорме = ИмяКоманды;
		
		НовыйЭлемент = Элементы.Добавить("ГруппаКнопокВнешняя" + ИмяКоманды, Тип("КнопкаФормы"), Элементы.ГруппаКнопокВнешняя);
		НовыйЭлемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		НовыйЭлемент.Заголовок=ВыборкаДетальныеЗаписи.НаименованиеКнопки;
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	Исключение
		КонецПопытки;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуВнешняя(Команда)
	
	// Вставить содержимое обработчика.	// Вставить содержимое обработчика.
	Попытка
		
		ВернДв=ВернутьИмяФайла(Команда.Имя);
		Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
			ДвоичныеДанные=ВернДв;
		Иначе
			ДвоичныеДанные=Новый ДвоичныеДанные(ВернДв);
		Конецесли;
		ОбработкаИмя=ПолучитьИмяВнешней(Двоичныеданные);
		ОткрытьФорму("ВнешняяОбработка."+ОбработкаИмя+".Форма",,ЭтаФорма);
	Исключение
			Попытка
#Если ТолстыйКлиентОбычноеПриложение  Тогда
		ВернДв=ВернутьИмяФайла(Команда.Имя);
		Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
			//ДвоичныеДанные=ВернДв;
			ДвоичныеДанные=ПолучитьИмяВременногоФайла();
			ВернДв.Записать(ДвоичныеДанные);
			
		Иначе
			ДвоичныеДанные=ВернДв;
		Конецесли;
				ВернутьВн(ДвоичныеДанные);
				Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
					УдалитьФайлы(ДвоичныеДанные);
				КонецЕсли;
#Иначе
				
			ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
#КонецЕсли
			Исключение
				ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
			КонецПопытки;
		//	
	//	
	КонецПопытки;

	//УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


#Если ТолстыйКлиентОбычноеПриложение  Тогда
&НаКлиенте
Процедура ВернутьВн(ДвоичныеДанные)
	//ИмяВременФ=ПолучитьИмяВременногоФайла();
	//ДвоичныеДанные.Записать(ИмяВременФ);
	ВнешняяОбработка=ВнешниеОбработки.Создать(ДвоичныеДанные);
	Фоорма=ВнешняяОбработка.ПолучитьФорму(,ЭтаФорма);
	Попытка
		Фоорма.УФ=ЭтаФорма;
	Исключение
	КонецПопытки;
	Фоорма.Открыть();
Конецпроцедуры      	
#КонецЕсли



Функция ВернутьИмяФайла(Команда)
//	Если РегистрыСведений.НастройкиПрограммыЦРПТ.Получить().ЗагружатьВнешниеОбработкиИзХранилища Тогда
		Возврат Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоКоду(Сред(Команда,8)).Хранилище.Получить();
//	Иначе
//		СпрВн=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоКоду(Сред(Команда,8));
//	Конецесли;
	
//	Возврат СпрВн.ИмяВнешнейОБработки
	//НаимСправочника=Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя();
	//Спр=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоНаименованию(НаимСправочника,Истина);
	//Если Спр<>Справочники.ВнешниеОбработки_ХамелеонЦРПТ.ПустаяСсылка() Тогда
	//	Возврат Спр.ИмяВнешнейОБработки;
	//Конецесли;
	
КонецФункции

Функция ПолучитьИмяВнешней(ИмяФайла)
    АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ИмяФайла);
    ИмяОбр = ВнешниеОбработки.Подключить(АдресВоВременномХранилище,,Ложь);
    Возврат ИмяОбр;
КонецФункции


&НаСервере
Процедура ПрочитатьАктНаСервере()
	// Вставить содержимое обработчика.
	Хр=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.Получить(Новый Структура("Документ,Вид",Объект.Ссылка,"Акт о решении")).Файл;
	Если Хр<>Неопределено тогда
		ПринятДокумент=Хр.Получить();
	Конецесли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПрочитатьАкт(Команда)
	ПрочитатьАктНаСервере();
КонецПроцедуры

Функция ПолуитьМассивКМ()
	МассивПродукций=Новый Массив;
	Массивcis=Новый Массив;
	Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		Если СтрДлина(Стр_1.cis)=18 ИЛИ Массивcis.Найти(Сред(Стр_1.cis,3,14))<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Сред(Стр_1.cis,1,2)="01" ТОгда
			gtin=Сред(Стр_1.cis,3,14);
		Иначе
			gtin=Сред(Стр_1.cis,1,14);
		КонецЕсли;
		Массивcis.Добавить(gtin);
		
		СпрПр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(gtin));
		Попытка
		Если ЗначениеЗаполнено(СпрПр) И Число(gtin)<>
			Число(Строка(СпрПр)) Тогда
			Продолжить;
		КонецЕсли;
	Исключение
		Продолжить;
	КонецПопытки;
		МассивПродукций.Добавить(
		Новый Структура("GTIN,Марка",
		ОБработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(gtin) ,14,"0"),Стр_1.cis))
		
		
	Конеццикла;
	
	
	Для Каждого Стр_1 Из Объект.Короба Цикл
		Если СтрДлина(Стр_1.ШтрихКод)=18 ИЛИ Массивcis.Найти(Сред(Стр_1.ШтрихКод,3,14))<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Сред(Стр_1.ШтрихКод,1,2)="01" ТОгда
			gtin=Сред(Стр_1.ШтрихКод,3,14);
		Иначе
			gtin=Сред(Стр_1.ШтрихКод,1,14);
		КонецЕсли;
		//gtin=Сред(Стр_1.ШтрихКод,3,14);
		Массивcis.Добавить(gtin);
		
		СпрПр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(gtin));
		Попытка
			Если ЗначениеЗаполнено(СпрПр) И Число(gtin)<>
				Число(Строка(СпрПр)) Тогда
				Продолжить;
			КонецЕсли;
		Исключение
			Продолжить;
		КонецПопытки;
		
		МассивПродукций.Добавить(
		Новый Структура("GTIN,Марка",
		ОБработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(gtin) ,14,"0"),Стр_1.ШтрихКод))
		
		
	Конеццикла;
	
	
	Возврат МассивПродукций;

Конецфункции

Процедура ЗагрузитьТабак(Стр)
	

					СпрД=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Стр.gtin));
					Если СпрД<>Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка() Тогда
						СпрД=СпрД.ПолучитьОбъект();
					Иначе
						СпрД=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
					КонецЕсли;
					//Если Thumbprint_1.НаименованиеСтенда="Обувь" Тогда
					//	СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
//					ИначеЕсли Thumbprint_1.НаименованиеСтенда="Табак" Тогда
//						СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак;
//					КонецЕсли;
						
					СпрД.БрендТорговаяМарка=Стр.brand;
					country="";
					
					Стр.Свойство("country",country);
					Если ЗначениеЗАполнено(country) Тогда
						Если country="РОССИЙСКАЯ ФЕДЕРАЦИЯ" Тогда
							СпрД.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
						Иначе
							СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(country);
						КонецЕсли;	
//						СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(country);
					//ИначеЕсли Не ЗначениеЗаполнено(	СпрД.СтранаПроизводства) Тогда
					//	СпрД.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
					КонецЕсли;
					СпрД.GTIN=Число(Стр.gtin);
					//СпрД.id=Стр.id;
					//СпрД.ИННПроизводителяИмпортёра=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",Стр.producerInn);
					//Если Не ЗначениеЗАполнено(СпрД.ИННПроизводителяИмпортёра) Тогда
					//	Спр_К=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
					//	Спр_К.ИНН=Стр.producerInn;
					//	Спр_К.Наименование=Стр.producerName;
					//	Спр_К.Записать();
					//	СпрД.ИННПроизводителяИмпортёра=Спр_К.Ссылка;
						
					//Конецесли;
					//Стр.shoesData.productProperty.Свойство("materialDown",СпрД.МатериалНиза);
					//Стр.shoesData.productProperty.Свойство("materialLining",СпрД.МатериалПодкладки);
					//Стр.shoesData.productProperty.Свойство("materialUpper",СпрД.МатериалВерха);
					//Стр.shoesData.productProperty.Свойство("color",СпрД.Цвет);
					
					Стр.Свойство("model",СпрД.МодельПроизводителяАртикул);
					//Стр.Свойство("tnVedCode",СпрД.КодТНВЭДКороткий);
					//Стр.productProperty.Свойство("color",СпрД.Цвет);
					
					
					
					tnvd="";
					Стр.Свойство("tnvd",tnvd);
					Если ЗначениеЗаполнено(tnvd) Тогда
						СпрД.КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(tnvd);
						
						Если Не ЗначениеЗаполнено(СпрД.КодТНВЭД) Тогда
							СпрК=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
							СпрК.Код=tnvd;
							СпрК.Наименование=tnvd;
							СпрК.Записать();
							СпрД.КодТНВЭД=СпрК.Ссылка;
						КонецЕсли;
						
						
					КонецЕсли;
					
					
					СпрД.Наименование=Стр.productName;
					СпрД.НаименованиеТовара=Стр.productName;
					
									КодПр="";
					Стр.Свойство("productTypeDesc",КодПр);
					Если ЗначениеЗаполнено(КодПр) Тогда
					СпрД.ВидОбуви=Справочники.ВидОбуви_ХамелеонЦРПТ.НайтиПоНаименованию(КодПр,Истина);
					Если Не ЗначениеЗаполнено(СпрД.ВидОбуви) тогда
						СпрВ=Справочники.ВидОбуви_ХамелеонЦРПТ.СоздатьЭлемент();
						//СпрВ.Код=Стр.productType;
						СпрВ.Наименование=КодПр;
						СпрВ.Записать();
						СпрД.ВидОбуви=СпрВ.Ссылка;
					КонецЕсли;
				КонецЕсли;
				publicationDate=Неопределено;
				    Стр.Свойство("publicationDate",publicationDate);
					Если ЗначениеЗаполнено(publicationDate) тогда
						СпрД.ДатаПубликации=Дата(1970,1,1)+Стр.publicationDate/1000;					
					Конецесли;
					////То была обувь теперь сигареты
				packageType=Неопределено;
				    Стр.Свойство("packageType",packageType);
					Если ЗначениеЗАполнено(packageType) тогда
						СПрд.ТипУпаковкиСигарет=Перечисления.ТипУпаковкиСигареты_ХамелеонЦРПТ[packageType];
					КонецЕсли;
					КоличествоВГруппе=0;
					Если Стр.Свойство("innerUnitCount",КоличествоВГруппе) И
						ЗначениеЗаполненО(КоличествоВГруппе) Тогда
						СпрД.КоличествоВГруппе=КоличествоВГруппе;
					Конецесли;
				productGroup=Неопределено;
				    Стр.Свойство("productGroup",productGroup);
					Если ЗначениеЗаполнено(productGroup) тогда
						СпрГр=Справочники.ГруппаСигарет_ХамелеонЦРПТ.НайтиПоНаименованию(productGroup);
						Если Не ЗначениеЗаполнено(СпрГр) Тогда
							СпрГр=Справочники.ГруппаСигарет_ХамелеонЦРПТ.СоздатьЭлемент();
							СпрГр.Наименование=productGroup;
							СпрГр.Записать();
						КонецЕсли;
						СпрД.ГруппаСигарет=СпрГр.Ссылка;
						
					КонецЕсли;
					
					
					
					
					СпрД.Записать();
					
					Сертификат=Неопределено;
					Если Стр.Свойство("certDoc",Сертификат) Тогда
						ДатаВыдачи=Сертификат.date;
						ДатаНачалаДействия=Дата(Сред(ДатаВыдачи,1,4),Сред(ДатаВыдачи,6,2),Сред(ДатаВыдачи,9,2));
						НаимСерт=Сертификат.number;
						Тип=Сертификат.type;
						Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.НайтиПоНаименованию(
						 НаимСерт);
						 Если НЕ ЗначениеЗаполнено(Сертификат) тогда
							 //Сертификат=Сертификат.ПолучитьОбъект();
							 Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.СоздатьЭлемент();
						Сертификат.Наименование=НаимСерт;
						Сертификат.ДатаНачалаДействия=ДатаНачалаДействия;
						 Сертификат.Записать();
					 КонецЕсли;
						РегСв=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
						РегСв.Отбор.Продукция.Установить(СпрД.Ссылка);
						РегСв.Отбор.Период.Установить(ДатаНачалаДействия);
						Добав=РегСв.Добавить();
						Добав.Период=ДатаНачалаДействия;
						Добав.Продукция=СпрД.Ссылка;
						Добав.Документ=Сертификат;
						Регсв.Записать(Истина);
						
					Конецесли;
					
	
КонецПроцедуры

Процедура ЗагрузитьПродукции_JSON(NNN)
				Стр=NNN;
	
	Если Стр.warning<>"ok" Тогда
		Возврат;
	КонецЕсли;
				//Тотал=NNN.total;
				
				//Для Каждого Стр Из NNN.results Цикл
				//	Если ИНН<>Стр.INN Тогда
				//		Продолжить;
				//	КонецЕсли;
					//Если     Массив.Найти(Число(Стр.gtin))=Неопределено Тогда
					//	Продолжить;
					//КонецЕсли;
					category="";
					Стр.Свойство("category",category);
					Если Значениезаполнено(category) тогда
						
						Если category="tobacco" тогда
							ЗагрузитьТабак(Стр);
							
							Возврат;
						КонецЕсли;
						
					КонецЕсли;
						
					
					СпрД=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Стр.shoesData.codeData.gtin));
					Если СпрД<>Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка() Тогда
						СпрД=СпрД.ПолучитьОбъект();
					Иначе
						СпрД=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
					КонецЕсли;
					//Если Thumbprint_1.НаименованиеСтенда="Обувь" Тогда
					//	СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
//					ИначеЕсли Thumbprint_1.НаименованиеСтенда="Табак" Тогда
//						СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак;
//					КонецЕсли;
						
					СпрД.БрендТорговаяМарка=Стр.shoesData.brand;
					country="";
					
					Стр.shoesData.Свойство("country",country);
					Если ЗначениеЗАполнено(country) Тогда
						Если country="РОССИЙСКАЯ ФЕДЕРАЦИЯ" Тогда
							СпрД.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
						Иначе
							СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(country);
						КонецЕсли;	
//						СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(country);
					//ИначеЕсли Не ЗначениеЗаполнено(	СпрД.СтранаПроизводства) Тогда
					//	СпрД.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
					КонецЕсли;
					СпрД.GTIN=Число(Стр.shoesData.codeData.gtin);
					//СпрД.id=Стр.id;
					//СпрД.ИННПроизводителяИмпортёра=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",Стр.producerInn);
					//Если Не ЗначениеЗАполнено(СпрД.ИННПроизводителяИмпортёра) Тогда
					//	Спр_К=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
					//	Спр_К.ИНН=Стр.producerInn;
					//	Спр_К.Наименование=Стр.producerName;
					//	Спр_К.Записать();
					//	СпрД.ИННПроизводителяИмпортёра=Спр_К.Ссылка;
						
					//Конецесли;
					Стр.shoesData.productProperty.Свойство("materialDown",СпрД.МатериалНиза);
					Стр.shoesData.productProperty.Свойство("materialLining",СпрД.МатериалПодкладки);
					Стр.shoesData.productProperty.Свойство("materialUpper",СпрД.МатериалВерха);
					Стр.shoesData.productProperty.Свойство("color",СпрД.Цвет);
					
					Стр.shoesData.Свойство("model",СпрД.МодельПроизводителяАртикул);
					//Стр.Свойство("tnVedCode",СпрД.КодТНВЭДКороткий);
					Стр.shoesData.productProperty.Свойство("color",СпрД.Цвет);
					
					
					
					tnvd="";
					Стр.shoesData.Свойство("tnvd",tnvd);
					Если ЗначениеЗаполнено(tnvd) Тогда
						СпрД.КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(tnvd);
						
						Если Не ЗначениеЗаполнено(СпрД.КодТНВЭД) Тогда
							СпрК=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
							СпрК.Код=tnvd;
							СпрК.Наименование=tnvd;
							СпрК.Записать();
							СпрД.КодТНВЭД=СпрК.Ссылка;
						КонецЕсли;
						
						
					КонецЕсли;
					
					
					СпрД.Наименование=Стр.shoesData.productName;
					СпрД.НаименованиеТовара=Стр.shoesData.productName;
					
					productSize=Неопределено;
				    Стр.shoesData.productProperty.Свойство("productSize",productSize);
					Если ЗначениеЗаполнено(productSize) тогда
						productSize=СтрЗаменить(productSize,".",",");
						СпрД.Размер=Справочники.РазмерВШтихмассовойСистеме_ХамелеонЦРПТ.НайтиПоНаименованию(productSize,истина);
					КонецЕсли;
					
										КодПр="";
					Стр.shoesData.Свойство("productTypeDesc",КодПр);
					Если ЗначениеЗаполнено(КодПр) Тогда
					СпрД.ВидОбуви=Справочники.ВидОбуви_ХамелеонЦРПТ.НайтиПоНаименованию(КодПр,Истина);
					Если Не ЗначениеЗаполнено(СпрД.ВидОбуви) тогда
						СпрВ=Справочники.ВидОбуви_ХамелеонЦРПТ.СоздатьЭлемент();
						//СпрВ.Код=Стр.productType;
						СпрВ.Наименование=КодПр;
						СпрВ.Записать();
						СпрД.ВидОбуви=СпрВ.Ссылка;
					КонецЕсли;
				КонецЕсли;
				publicationDate=Неопределено;
				    Стр.Свойство("publicationDate",publicationDate);
					Если ЗначениеЗаполнено(publicationDate) тогда
						СпрД.ДатаПубликации=Дата(1970,1,1)+Стр.publicationDate/1000;					
					Конецесли;
					////То была обувь теперь сигареты
				packageType=Неопределено;
				    Стр.Свойство("packageType",packageType);
					Если ЗначениеЗАполнено(packageType) тогда
						СПрд.ТипУпаковкиСигарет=Перечисления.ТипУпаковкиСигареты_ХамелеонЦРПТ[packageType];
					КонецЕсли;
					КоличествоВГруппе=0;
					Если Стр.Свойство("innerUnitCount",КоличествоВГруппе) И
						ЗначениеЗаполненО(КоличествоВГруппе) Тогда
						СпрД.КоличествоВГруппе=КоличествоВГруппе;
					Конецесли;
				productGroup=Неопределено;
				    Стр.Свойство("productGroup",productGroup);
					Если ЗначениеЗаполнено(productGroup) тогда
						СпрГр=Справочники.ГруппаСигарет_ХамелеонЦРПТ.НайтиПоНаименованию(productGroup);
						Если Не ЗначениеЗаполнено(СпрГр) Тогда
							СпрГр=Справочники.ГруппаСигарет_ХамелеонЦРПТ.СоздатьЭлемент();
							СпрГр.Наименование=productGroup;
							СпрГр.Записать();
						КонецЕсли;
						СпрД.ГруппаСигарет=СпрГр.Ссылка;
						
					КонецЕсли;
					
					
					
					
					СпрД.Записать();
					
					Сертификат=Неопределено;
					Если Стр.Свойство("certDoc",Сертификат) Тогда
						ДатаВыдачи=Сертификат.date;
						ДатаНачалаДействия=Дата(Сред(ДатаВыдачи,1,4),Сред(ДатаВыдачи,6,2),Сред(ДатаВыдачи,9,2));
						НаимСерт=Сертификат.number;
						Тип=Сертификат.type;
						Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.НайтиПоНаименованию(
						 НаимСерт);
						 Если НЕ ЗначениеЗаполнено(Сертификат) тогда
							 //Сертификат=Сертификат.ПолучитьОбъект();
							 Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.СоздатьЭлемент();
						Сертификат.Наименование=НаимСерт;
						Сертификат.ДатаНачалаДействия=ДатаНачалаДействия;
						 Сертификат.Записать();
					 КонецЕсли;
						РегСв=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
						РегСв.Отбор.Продукция.Установить(СпрД.Ссылка);
						РегСв.Отбор.Период.Установить(ДатаНачалаДействия);
						Добав=РегСв.Добавить();
						Добав.Период=ДатаНачалаДействия;
						Добав.Продукция=СпрД.Ссылка;
						Добав.Документ=Сертификат;
						Регсв.Записать(Истина);
						
					Конецесли;
					
					
			//	Конеццикла;
				
	
	Для Каждого СтР_1 Из Объект.ПроверкаПоНомерамКМ Цикл
		Стр_1.Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Стр_1.GTINНаименованиеТовара));
	Конеццикла;
		
	

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНазванияПоGTIN(Команда)
	// Вставить содержимое обработчика.
	//ЭтаФорма.Записать();
	
	Thumbprint_1 = ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
	ПолучитьНазванияНаСервере(Thumbprint_1 );
	
	Для Каждого Стр_1 Из объект.ПроверкаПоНомерамКМ Цикл
		ОповеститьОбИзменении(Стр_1.Продукция);
	КонецЦиклА;
	
	МассивСтруктур=Новый Массив;
	   МассивСтруктур.Очистить();
	
	
	
	

	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение("xn--80aqu.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение("xn--80aqu.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				
				
				
		
	Для Каждого СтР_1 Из Объект.ПроверкаПоНомерамКМ Цикл
		
//		Если 
Попытка
Если ЗначениеЗаполнено(Стр_1.Продукция) И Число(Стр_1.GTINНаименованиеТовара)<>
	Число(Строка(Стр_1.Продукция)) Тогда
	Продолжить;
КонецЕсли;
Исключение
Продолжить;
КонецПопытки;





		HTTPЗапрос=Новый HTTPЗапрос("v3/product?gtin="+ДополнитьСтроку(Формат(Стр_1.GTINНаименованиеТовара,"ЧГ="))+"&apikey=l10k3203w65mbngr");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded; charset=UTF-8");
		//HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//Тело="task=getItemByGTIN&lng=ru&keyValue="+ДополнитьСтроку(Формат(Стр_1.GTINНаименованиеТовара,"ЧГ="));
//		HTTPЗапрос.УстановитьТелоИзСтроки();
		//Тело);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
		Название=неопределено;
		Попытка
			Название=NNN.result[0].good_name; 
		Исключение
		КонецПопытки;
		Если Название=Неопределено Тогда
			
//			http://gepir.gs1ru.org/GEPIR40/index.jsp?p=gtin&lng=ru
		КонецЕсли;
		Если ЗначениеЗаполнено(Название) Тогда
			МассивСтруктур.Добавить(Новый Структура("gtin,Название",Стр_1.GTINНаименованиеТовара,Название));
			
		КонецЕсли;
	Конеццикла;
	
	Если МассивСтруктур.Количество()>0 тогда
		ЗагрузитьПродукции(МассивСтруктур);
		
	КонецЕсли;
	Для Каждого Стр_1 Из объект.ПроверкаПоНомерамКМ Цикл
		ОповеститьОбИзменении(Стр_1.Продукция);
	КонецЦиклА;
	
	
	 	
	
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение("gepir.gs1ru.org",,,,Прокси,Thumbprint_1.Таймаут);
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение("gepir.gs1ru.org",,,,,Thumbprint_1.Таймаут);
				КонецЕсли;
				
				
				
				МассивСтруктур=Новый Массив;
				
		
	Для Каждого СтР_1 Из Объект.ПроверкаПоНомерамКМ Цикл
		
//		Если 
Попытка
Если ЗначениеЗаполнено(Стр_1.Продукция) И Число(Стр_1.GTINНаименованиеТовара)<>
	Число(строка(Стр_1.Продукция)) Тогда
	Продолжить;
КонецЕсли;
Исключение
Продолжить;
КонецПопытки;





		HTTPЗапрос=Новый HTTPЗапрос("GEPIR40/getItem");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded; charset=UTF-8");
		//HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Тело="task=getItemByGTIN&lng=ru&keyValue="+ДополнитьСтроку(Формат(Стр_1.GTINНаименованиеТовара,"ЧГ="));
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
		Название=неопределено;
		Попытка
			Название=NNN.gepirItem.itemDataLine[0].itemName; 
		Исключение
		КонецПопытки;
		Если Название=Неопределено Тогда
			
//			http://gepir.gs1ru.org/GEPIR40/index.jsp?p=gtin&lng=ru
		КонецЕсли;
		Если ЗначениеЗаполнено(Название) Тогда
			МассивСтруктур.Добавить(Новый Структура("gtin,Название",Стр_1.GTINНаименованиеТовара,Название));
			
		КонецЕсли;
	Конеццикла;
	
	Если МассивСтруктур.Количество()>0 тогда
		ЗагрузитьПродукции(МассивСтруктур);
		
	КонецЕсли;
	Для Каждого Стр_1 Из объект.ПроверкаПоНомерамКМ Цикл
		ОповеститьОбИзменении(Стр_1.Продукция);
	КонецЦиклА;
	
	 	
	
Конецпроцедуры

Процедура ПолучитьНазванияНаСервере(Thumbprint_1 )
	
	ЧислоПараллельныхПотоков = РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КоличествоЯдерДляГенерацииDataMatrix;
	
	МассивЗаданий = Новый Массив;
	ЗаданияПоСтрокам = Новый Соответствие;
	
	МассивКМ_1=ПолуитьМассивКМ();

	Для Каждого Стр_1 Из МассивКМ_1 Цикл
		
		
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Стр_1.Марка);
		МассивПараметров.Добавить(Thumbprint_1);
		
		Если ЧислоПараллельныхПотоков=0 Тогда
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				Если Данные <> Неопределено  Тогда
					ЗагрузитьПродукции_JSON(Данные);
				КонецЕсли;
		Иначе
			Попытка
				Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара", МассивПараметров);
				//ЗаданияПоСтрокам.Вставить(Задание.УникальныйИдентификатор);
				МассивЗаданий.Добавить(Задание);
				
				Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
					ЗаполнитьСтатусыСерийныхНомеров(МассивЗаданий); 
				КонецЕсли;
			Исключение
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				Если Данные <> Неопределено Тогда
										ЗагрузитьПродукции_JSON(Данные);
;
				КонецЕсли;
					
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивЗаданий.Количество() >= 0 Тогда
		ЗаполнитьСтатусыСерийныхНомеров( МассивЗаданий); 
	КонецЕсли;
		
		
	
	//ПодключитьОбработчикОжидания("аа_ОО",1,Истина);
	//ЭтаФорма.Записать();
	//Этаформа.Прочитать();
КонецПроцедуры


Процедура ЗаполнитьСтатусыСерийныхНомеров(МассивЗаданий)
	
	Попытка
		ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
	Исключение
	КонецПопытки;
	Для каждого Задание Из МассивЗаданий Цикл
		Данные = Неопределено;
		Для каждого Сообщение Из Задание.ПолучитьСообщенияПользователю() Цикл
			Если ЗначениеЗаполнено(Сообщение.Текст) Тогда
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Сообщение.Текст);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Данные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗагрузитьПродукции_JSON(Данные);
		//ТекСтр = ЗаданияПоСтрокам.Получить(Задание.УникальныйИдентификатор);
		//ТекСтр.Статус = Данные.shoesData.status;
	КонецЦикла;
	МассивЗаданий.Очистить();
	
КонецПроцедуры


Процедура ЗагрузитьПродукции(МассивСтр)
	
	Для Каждого Стр_1 Из МассивСтр Цикл
		ГТИН=Число(Стр_1.gtin);
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Название=Стр_1.Название;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Продукция_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
		|ГДЕ
		|	Продукция_ХамелеонЦРПТ.GTIN = &GTIN";
	
	Запрос.УстановитьПараметр("GTIN", ГТИН);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество()=0 Тогда
		СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрПр.GTIN=Число(ГТИН);
		СпрПр.Наименование=Название;
		СпрПр.НаименованиеТовара=Название;
		СпрПр.Записать();
	Иначе
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
			СпрПр=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			СпрПр.Наименование=Название;
			СпрПр.НаименованиеТовара=Название;
			СпрПр.Записать();
			
			//НСтрок=Объект.ПроверкаПоНомерамКМ.НайтиСтроки(Новый Структура("Продукция",СпрПр.Ссылка));
			//Для Каждого Стр_1 Из Нстрок Цикл
			//	Стр_1.Продукция=Неопределено;
				//Стр_1.Продукция=СпрПр.Ссылка;
			//Конеццикла;
				
		КонецЦикла;
	КонецЕсли;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		
	Конеццикла;
	
	
	Для Каждого СтР_1 Из Объект.ПроверкаПоНомерамКМ Цикл
		Стр_1.Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Стр_1.GTINНаименованиеТовара));
	Конеццикла;
	//Элементы.ПроверкаПоНомерамКМ.Обновить();
	//ЭтаФорма.Прочитать();
КонецПроцедуры


Функция ПолуитьМассивКМ_Все()
	МассивПродукций=Новый Массив;
	Массивcis=Новый Массив;
	Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		Если СтрДлина(Стр_1.cis)=18 ИЛИ Массивcis.Найти(Сред(Стр_1.cis,3,14))<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		gtin=Сред(Стр_1.cis,3,14);
		Массивcis.Добавить(gtin);
		
		СпрПр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(gtin));
		
		МассивПродукций.Добавить(
		Новый Структура("GTIN,Марка",
		ОБработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(gtin) ,14,"0"),Стр_1.cis))
		
		
	Конеццикла;
	
	
	Для Каждого Стр_1 Из Объект.Короба Цикл
		Если СтрДлина(Стр_1.ШтрихКод)=18 ИЛИ Массивcis.Найти(Сред(Стр_1.ШтрихКод,3,14))<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		gtin=Сред(Стр_1.ШтрихКод,3,14);
		Массивcis.Добавить(gtin);
		
		СпрПр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(gtin));
		
		МассивПродукций.Добавить(
		Новый Структура("GTIN,Марка",
		ОБработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(gtin) ,14,"0"),Стр_1.ШтрихКод))
		
		
	Конеццикла;
	
	
	Возврат МассивПродукций;

Конецфункции


Процедура ПолучитьНазванияНаСервереВсе(Thumbprint_1 )
	
	ЧислоПараллельныхПотоков = РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КоличествоЯдерДляГенерацииDataMatrix;
	
	МассивЗаданий = Новый Массив;
	ЗаданияПоСтрокам = Новый Соответствие;
	
	МассивКМ_1=ПолуитьМассивКМ_Все();

	Для Каждого Стр_1 Из МассивКМ_1 Цикл
		
		
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Стр_1.Марка);
		МассивПараметров.Добавить(Thumbprint_1);
		
		Если ЧислоПараллельныхПотоков=0 Тогда
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				Если Данные <> Неопределено  Тогда
					ЗагрузитьПродукции_JSON(Данные);
				КонецЕсли;
		Иначе
			Попытка
				Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара", МассивПараметров);
				//ЗаданияПоСтрокам.Вставить(Задание.УникальныйИдентификатор);
				МассивЗаданий.Добавить(Задание);
				
				Если МассивЗаданий.Количество() > ЧислоПараллельныхПотоков Тогда
					ЗаполнитьСтатусыСерийныхНомеров(МассивЗаданий); 
				КонецЕсли;
			Исключение
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				Если Данные <> Неопределено Тогда
										ЗагрузитьПродукции_JSON(Данные);
;
				КонецЕсли;
					
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивЗаданий.Количество() > 0 Тогда
		ЗаполнитьСтатусыСерийныхНомеров( МассивЗаданий); 
	КонецЕсли;
		
		
	
	//ПодключитьОбработчикОжидания("аа_ОО",1,Истина);
	//ЭтаФорма.Записать();
	//Этаформа.Прочитать();
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьИнформациюПоВсем(Команда) Экспорт
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	//ЭтаФорма.Записать();
	Объект.ПроверкаПоНомерамКМ.Очистить();
	
	Thumbprint_1 = ПолучитьИзПользователя();;	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;

	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
		
	
	СРегистра="";
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
							
		
		ПолучитьВсюИнформациюПоФармацевтике(Thumbprint_1,СРегистра);
		ЗагрузитьобновитьПроверкуПросту();
		
		Возврат;
	КонецЕсли;
	
	ПолучитьНазванияНаСервереВсе(Thumbprint_1 );
		

	МассивСтруктур=Новый Массив;
	Для Каждого Стр_1 Из объект.ПроверкаПоНомерамКМ Цикл
		ОповеститьОбИзменении(Стр_1.Продукция);
	КонецЦиклА;
	
	    	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСерийныеНомера(Команда)
	// Вставить содержимое обработчика.
	
	Если Элементы.ПроверкаПоНомерамКМ.ТекущиеДанные<>Неопределено Тогда
		ААА=Новый ФиксированнаяСтруктура(Новый Структура("GTIN",Элементы.ПроверкаПоНомерамКМ.ТекущиеДанные.GTINНаименованиеТовара));
		Элементы.СерийныеНомера.ОтборСтрок=ААА;
		Элементы.Страницы.ТекущаяСтраница=Элементы.ГруппаСерийныеНомера
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьФильтр(Команда)
	// Вставить содержимое обработчика.
	Элементы.СерийныеНомера.ОтборСтрок=Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Вставить содержимое обработчика.
	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Если НЕ Форм.Открыта() Тогда
		Форм.Открыть();
		ЭтаФорма.Активизировать();
	КонецЕсли;
	Текущийпользователь=Форм.Пользователь;
	ЭтаФорма.Активизировать();
	НачатьПолучениеКаталогаВременныхФайлов(Новый ОписаниеОповещения("ПослеПолученияКаталога",ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияКаталога(РР,ДД) Экспорт
	ВремФайл=РР+ВремФайл+".xml";
КонецПроцедуры

&НаКлиенте
Процедура МаркиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	// Вставить содержимое обработчика.
ЗагрузитьобновитьПроверкуПросту()	
КонецПроцедуры

&НаКлиенте
Процедура МаркиПослеУдаления(Элемент)
	// Вставить содержимое обработчика.
	Объект.ПроверкаПоНомерамКМ.Очистить();
	ЗагрузитьобновитьПроверкуПросту()	
	
КонецПроцедуры

&НаСервере
Процедура ТекущийПользовательПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	Элементы.Лекарства.Видимость=Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Фармацевтика";
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПользовательПриИзменении(Элемент)
	ТекущийПользовательПриИзмененииНаСервере();
КонецПроцедуры
&НаКлиенте
Процедура ПолучитьСтатусыПоКМ(Команда,ТолькоА=Ложь)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	МассивКМ=Новый Массив;
	Для каждого Стр_1 Из Объект.СерийныеНомера Цикл
		
		Если ВРЕГ(Стр_1.статус)="INTRODUCED" ИЛИ (Врег(Стр_1.Статус)="APPLIED" И ТолькоА=Ложь) Тогда
			Продолжить;
		КонецЕсли;
		Стр_1.Статус="Не найдено в ЦРПТ";
		Стр_1.ВОбороте=Ложь;
		МассивКМ.Добавить(Стр_1.cis);
	Конеццикла;	
	ОбработатьстатусыКМ(МассивКМ);
	
	Возврат;
	
	
	Thumbprint_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	

СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Возврат;
		КонецЕсли;

	Для каждого Стр_1 Из Объект.СерийныеНомера Цикл
		
		Если ВРЕГ(Стр_1.статус)="INTRODUCED" ИЛИ (Врег(Стр_1.Статус)="APPLIED" И ТолькоА=Ложь) Тогда
			Продолжить;
		КонецЕсли;
		    Стр_1.Статус=Неопределено;
	   НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	
	   Если НаСервере Тогда
		 Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Стр_1.cis);  
		Иначе
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			Если Thumbprint_1.НаименованиеСтенда="Табак"
				ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
				Тогда
	
		NN=ВернутьТелоЗапросаПодключение(Стр_1.cis);
						
	
			HTTPЗапрос=Новый HTTPЗапрос("private-office-api/private/v2/cis/status");
			//private-office-api/private/v2/cis/"+КодМаркировки+"/mrp"
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин   
			HTTPЗапрос.УстановитьТелоИзСтроки(NN,КодировкаТекста.UTF8);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
Иначе
			
			Текст=Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(Стр_1.cis);
			Марк=Текст.Получитьтекст();
	
			что=Thumbprint_1.что;
	
	ММ= Стр_1.cis;
	
		HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"&pg="+что);
	//	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"&pg="+что);;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
КонецЕсли;
КонецЕсли;

		Если НаСервере Тогда
			Текст1=Ответ.ПолучитьТелоКакСтроку;
			
		Иначе
			Текст1=Ответ.ПолучитьТелоКакСтроку();
		КонецЕсли;	
		
		Если Thumbprint_1.НаименованиеСтенда="Табак"
			ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
			Тогда
		
			Попытка
		//ЧтениеJSON = Новый ЧтениеJSON;
		//	ЧтениеJSON.УстановитьСтроку(Текст1);
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Если NNN=Неопределено тогда
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Стр_1.Статус=NNN["status"];
					
			Иначе
				Стр_1.Статус=NNN.status;
			КонецЕсли;
				
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Сообщить(Текст1);
			КонецПопытки;
	
Иначе
//ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(Текст1);
Попытка
	Если Ответ.КодСостояния=200 Тогда
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Если NNN=Неопределено тогда
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Стр_1.Статус=NNN["status"];
					
			Иначе
				Стр_1.Статус=NNN.status;
			КонецЕсли;
				
		Иначе
		
		Стр_1.Статус=Ответ.КодСостояния;
		 Сообщить(Текст1);
	КонецЕсли;
	

	
Исключение
	Сообщить(ОписаниеОшибки());
	Сообщить(Текст1);
КонецПопытки;
КонецЕсли;



	Конеццикла;
КонецПроцедуры
&НаСервереБезКонтекста
Функция ВернутьТелоЗапросаПодключение(cis)
	МассивКодо=Новый Массив;
	          МассивКодо.Добавить(cis);
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("ids", МассивКодо);
			ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, "  ");
			
			ЗаписьJSON = Новый ЗаписьJSON();
			ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
			
			ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
			
			Возврат ЗаписьJSON.Закрыть();

КонецФункции


&НаКлиенте
Процедура ПолучитьСтатусыПоКМАльтернит(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	
	ПроверитьВсеСтатусыНаСервере();
	
	
КонецПроцедуры


Процедура ПроверитьВсеСтатусыНаСервере()
	ЧислоПараллельныхПотоков = РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КоличествоЯдерДляГенерацииDataMatrix;
	МассивЗаданий = Новый Массив;
	ЗаданияПоСтрокам = Новый Соответствие;
	Thumbprint = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);	
	Если Не ЗначениеЗаполнено(Thumbprint) Тогда
		Возврат;
	КонецЕслИ;
	
	Для каждого СерийныйНомер Из Объект.СерийныеНомера Цикл
		
		Если ВРЕГ(СерийныйНомер.статус)="INTRODUCED" ИЛИ (Врег(СерийныйНомер.Статус)="APPLIED") Тогда
			Продолжить;
		КонецЕсли;
		
		СерийныйНомер.Статус = Неопределено;
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(СерийныйНомер.cis);
		МассивПараметров.Добавить(Thumbprint);
		
		Если ЧислоПараллельныхПотоков=0 Тогда
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				shoesD="";
				Если Данные <> Неопределено И данные.Свойство("shoesData",shoesD) Тогда
					СерийныйНомер.Статус = shoesD.status;
				КонецЕсли;
		Иначе
			Попытка
				Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара", МассивПараметров);
				ЗаданияПоСтрокам.Вставить(Задание.УникальныйИдентификатор, СерийныйНомер);
				МассивЗаданий.Добавить(Задание);
				
				Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
					ЗаполнитьСтатусыСерийныхНомеров_ВТаблице(ЗаданияПоСтрокам, МассивЗаданий); 
				КонецЕсли;
			Исключение
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				shoesD="";
				Если Данные <> Неопределено И данные.Свойство("shoesData",shoesD) Тогда
					СерийныйНомер.Статус = shoesD.status;
				КонецЕсли;
					
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивЗаданий.Количество() >= 0 Тогда
		ЗаполнитьСтатусыСерийныхНомеров_ВТаблице(ЗаданияПоСтрокам, МассивЗаданий); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыСерийныхНомеров_ВТаблице(Знач ЗаданияПоСтрокам, МассивЗаданий)
	
	Попытка
		ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
	Исключение
	КонецПопытки;
	Для каждого Задание Из МассивЗаданий Цикл
		Данные = Неопределено;
		Для каждого Сообщение Из Задание.ПолучитьСообщенияПользователю() Цикл
			Если ЗначениеЗаполнено(Сообщение.Текст) Тогда
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Сообщение.Текст);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Данные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТекСтр = ЗаданияПоСтрокам.Получить(Задание.УникальныйИдентификатор);
		ТекСтр.Статус = Данные.shoesData.status;
	КонецЦикла;
	МассивЗаданий.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтатусыКМВсе(Команда)
	// Вставить содержимое обработчика.
	МассивКМ=Новый Массив;
	Для каждого Стр_1 Из Объект.СерийныеНомера Цикл
		Стр_1.Статус="Не найдено в ЦРПТ";
		Стр_1.ВОбороте=Ложь;
		
		МассивКМ.Добавить(Стр_1.cis);
	Конеццикла;	
	ОбработатьстатусыКМ(МассивКМ);
	
	Возврат;
	
	Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		Стр_1.Статус="";
	Конеццикла;
	ПолучитьСтатусыПоКМ(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтатусыAPPLIED(Команда)
	// Вставить содержимое обработчика.
	ПолучитьСтатусыПоКМ(Команда,истина)	
КонецПроцедуры
&НаКлиенте
Процедура ПроверитьСтатусыПоВыделенным(Команда)
	// Вставить содержимое обработчика.
	МассивКМ=Новый Массив;
	Для каждого Стр_2 Из Элементы.СерийныеНомера.ВыделенныеСтроки Цикл
		Стр_1=Объект.СерийныеНомера.НайтиПоИдентификатору(Стр_2);
		Стр_1.Статус="Не найдено в ЦРПТ";
		Стр_1.ВОбороте=Ложь;
		
		МассивКМ.Добавить(Стр_1.cis);
	Конеццикла;	
	ОбработатьстатусыКМ(МассивКМ);
	
	Возврат;
	
	Thumbprint_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	

СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Возврат;
		КонецЕсли;

	Для каждого Стр_2 Из Элементы.СерийныеНомера.ВыделенныеСтроки Цикл
		Стр_1=Объект.СерийныеНомера.НайтиПоИдентификатору(Стр_2);
		    Стр_1.Статус=Неопределено;
	   НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	
	   Если НаСервере Тогда
		 Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Стр_1.cis);  
		Иначе
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			Если Thumbprint_1.НаименованиеСтенда="Табак" 
				ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак" 
				Тогда
	
		NN=ВернутьТелоЗапросаПодключение(Стр_1.cis);
						
	
			HTTPЗапрос=Новый HTTPЗапрос("private-office-api/private/v2/cis/status");
			//private-office-api/private/v2/cis/"+КодМаркировки+"/mrp"
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин   
			HTTPЗапрос.УстановитьТелоИзСтроки(NN,КодировкаТекста.UTF8);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
Иначе
			
			Текст=Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(Стр_1.cis);
			Марк=Текст.Получитьтекст();
	
			что=Thumbprint_1.что;
	
	ММ= Стр_1.cis;
	
	HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"&pg="+что);
//		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"&pg="+что);;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
КонецЕсли;
КонецЕсли;

		Если НаСервере Тогда
			Текст1=Ответ.ПолучитьТелоКакСтроку;
			
		Иначе
			Текст1=Ответ.ПолучитьТелоКакСтроку();
		КонецЕсли;	
		
		Если Thumbprint_1.НаименованиеСтенда="Табак"
			ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
			Тогда
		
			Попытка
		//ЧтениеJSON = Новый ЧтениеJSON;
		//	ЧтениеJSON.УстановитьСтроку(Текст1);
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Если NNN=Неопределено тогда
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Стр_1.Статус=NNN["status"];
					
			Иначе
				Стр_1.Статус=NNN.status;
			КонецЕсли;
				
			
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Сообщить(Текст1);
			КонецПопытки;
	
Иначе
//ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(Текст1);
Попытка
	Если Ответ.КодСостояния=200 Тогда
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Если NNN=Неопределено тогда
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Стр_1.Статус=NNN["status"];
					
			Иначе
				Стр_1.Статус=NNN.status;
			КонецЕсли;
				
		Иначе
		
		Стр_1.Статус=Ответ.КодСостояния;
		 Сообщить(Текст1);
	КонецЕсли;
	

	
Исключение
	Сообщить(ОписаниеОшибки());
	Сообщить(Текст1);
КонецПопытки;
КонецЕсли;



	Конеццикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСтатусыПоВыделеннымАльтернатива(Команда)
	// Вставить содержимое обработчика.
	
	// Вставить содержимое обработчика.
	ПроверитьСтатусыПоВыделеннымАльтернативаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСтатусыПоВыделеннымАльтернативаНаСервере()
	
	ЧислоПараллельныхПотоков = РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КоличествоЯдерДляГенерацииDataMatrix;
	
	МассивЗаданий = Новый Массив;
	ЗаданияПоСтрокам = Новый Соответствие;
	Thumbprint = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);	
	Если Не ЗначениеЗаполнено(Thumbprint) Тогда
		Возврат;
	КонецЕслИ;
	
	Для каждого Стр Из Элементы.СерийныеНомера.ВыделенныеСтроки Цикл
		
		СерийныйНомер = Объект.СерийныеНомера.НайтиПоИдентификатору(Стр);
		СерийныйНомер.Статус = Неопределено;
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(СерийныйНомер.cis);
		МассивПараметров.Добавить(Thumbprint);
		
		Если ЧислоПараллельныхПотоков=0 Тогда
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				shoesD="";
				Если Данные <> Неопределено И данные.Свойство("shoesData",shoesD) Тогда
					СерийныйНомер.Статус = shoesD.status;
				КонецЕсли;
		Иначе
			Попытка
				Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара", МассивПараметров);
				ЗаданияПоСтрокам.Вставить(Задание.УникальныйИдентификатор, СерийныйНомер);
				МассивЗаданий.Добавить(Задание);
				
				Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
					ЗаполнитьСтатусыСерийныхНомеров_ВТаблице(ЗаданияПоСтрокам, МассивЗаданий); 
				КонецЕсли;
			Исключение
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				shoesD="";
				Если Данные <> Неопределено И данные.Свойство("shoesData",shoesD) Тогда
					СерийныйНомер.Статус = shoesD.status;
				КонецЕсли;
					
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивЗаданий.Количество() >= 0 Тогда
		ЗаполнитьСтатусыСерийныхНомеров_ВТаблице(ЗаданияПоСтрокам, МассивЗаданий); 
	КонецЕсли;
	
	
КонецПроцедуры


Процедура ЗагрузитьНаСервере(МассивФайлов)
	
	МассивУппешно=Новый Массив;
	ОшибкаЗагрузки=Ложь;
	Для Каждого Стр_1 Из МассивФайлов Цикл
		Попытка
			СообщениеОбОшибке="";
			РеквизитыЭлектр=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.РеквизитыЭлектронногоДокумента(Стр_1.Дв,СообщениеОбОшибке);
										Если РеквизитыЭлектр.Загружать=Ложь Тогда
								Продолжить;
							КонецЕсли;

			Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
				Сообщить("Не удалось загрузить файл "+Стр_1.Имя+" Ошибка: "+СообщениеОбОшибке);
				ОшибкаЗагрузки=Истина;
				Продолжить;
			КонецЕсли;
			МассивУп=Новый Массив;
			АдресРеквизитов=Новый Структура;
			//РеквизитыЭлектронногоДокумента.Вставить("ИдентификаторДокументооборота", ДанныеДокументооборота.ИдентификаторДокументооборота);
			АдресРеквизитов.Вставить("Статус","");
			МассивУппешно.Добавить(ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ЗагрузкаПриемкиИзXML(РеквизитыЭлектр,МассивУп,ЗаписыватьДанныеПриОтправкеЗаказа,Объект.ТекущийПользователь,АдресРеквизитов,Справочники.ЭДО_ХамелеонЦРПТ.ЭДОФайл,ОшибкаЗагрузки,Истина))
		Исключение
			
			Сообщить("Не удалось загрузить файл "+Стр_1.Имя+" Ошибка:");
			
		   	Инфо = ИнформацияОбОшибке();
		    Сообщить("Описание='" + Инфо.Описание + "'");
		    Сообщить("ИмяМодуля='" + Инфо.ИмяМодуля + "'");
		    Сообщить("НомерСтроки=" + Инфо.НомерСтроки);
		    Сообщить("ИсходнаяСтрока='" + Инфо.ИсходнаяСтрока + "'");
			ОшибкаЗагрузки=Истина;
			
		КонецПопытки;
	Конеццикла;
	
	Если ОшибкаЗагрузки<>Истина Тогда
		Для Каждого Стр_1 Из МассивУппешно Цикл
			
			Если ЗначениеЗаполнено(Стр_1) Тогда
				Сообщить("Создан документ "+Строка(Стр_1));
			КонецЕсли;
			
		Конеццикла;
	КонецЕсли;
	
КонецПроцедуры


Процедура ПеречитатьЕслиЕстьФайл()
	
	Хр=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.Получить(Новый Структура("Документ,Вид",Объект.Ссылка,"Загрузка приемки")).Файл;
	Если Хр<>Неопределено тогда
		ПринятДокумент=Хр.Получить();
		МассивФайлов = Новый Массив;
		
		ДД = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ПринятДокумент,КодировкаТекста.ANSI);
		МассивФайлов.Добавить(Новый Структура("Имя,Дв",Объект.ИмяФайлаЭД,ПоместитьВоВременноеХранилище(ДД)));
		ЗагрузитьНаСервере(МассивФайлов);
		
	Конецесли;

КонецПроцедуры
&НаКлиенте
Процедура ОбновитьПриемку(Команда)
	// Вставить содержимое обработчика.
	Если Объект.ТипЭДО=ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОФайл") Тогда
		ПеречитатьЕслиЕстьФайл();
		ЭтаФорма.Прочитать();
		Возврат;
	КОнецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТипЭДО) И Объект.ТипЭДО<>ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОЛайт") Тогда
		Сообщить("Документ получен по "+Строка(Объект.ТипЭДО));
		ВОзврат;
	КонецЕсли;
	
	
	Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Пользователь=Форм.Пользователь;
	Вернутьпольз=вернутьпольз(Пользователь)
	                                         ;
	Если  Вернутьпольз<>Пользователь Тогда
		Форм.Пользователь	 =Вернутьпольз
	КонецЕсли;
	
МассивОбновляем=Новый Массив;
		МассивОбновляем.Добавить(Форм.ВернутьНомерДокумента(Объект.Ссылка));
	  ФОрм.ОбновитьПриход(МассивОбновляем)  ;
	 ЭтаФорма.Прочитать();
	 
	 ЭтаФОрма.Активизировать();
КонецПроцедуры


Функция вернутьпольз(Польз)
	
	если  польз.организация<>объект.ТекущийПользователь.Организация
		или объект.ТекущийПользователь.СайтыВходаВСистему<>Польз.СайтыВходаВСистему Тогда
		
		Если объект.ТекущийПользователь.ПометкаУдаления Тогда
			
			
			
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Пользователи_ХамелеонЦРПТ КАК Пользователи_ХамелеонЦРПТ
		|ГДЕ
		|	Пользователи_ХамелеонЦРПТ.Организация.ИНН = &Организация
		|	И Пользователи_ХамелеонЦРПТ.СайтыВходаВСистему = &СайтыВходаВСистему
		|	И НЕ Пользователи_ХамелеонЦРПТ.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация.ИНН);
	Запрос.УстановитьПараметр("СайтыВходаВСистему", Объект.ТекущийПользователь.СайтыВходаВСистему);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НайтиПольз=Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		                      Возврат ВыборкаДетальныеЗаписи.Ссылка
	КонецЦикла;
	
			
		Иначе
			Возврат объект.ТекущийПользователь
			КонецЕсли
	Иначе
		Возврат Польз
		
		
	Конецесли     ;
	Возврат Польз
конецфункции

&НаКлиенте
Процедура ПечатьПростаяБелая(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Счетч=1;
		Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводПервогоЧисла_ЦРПТ_ПростаяБелая",ЭтаФорма));
	Форм.Число=Счетч;
	Форм.Заголовок="Начать печать с № КМ";
	//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводПервогоЧисла_ЦРПТ_ПростаяБелая",ЭтаФорма),Счетч,"Начать печать с № КМ");
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводПервогоЧисла_ЦРПТ_ПростаяБелая(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
				Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводВторогоЧисла_ЦРПТ_ПростаяБелая",ЭтаФорма,РР));
	Форм.Число=30;
	Форм.Заголовок="Допечатать указанное количество № КМ";

		//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводВторогоЧисла_ЦРПТ_ПростаяБелая",ЭтаФорма,РР),30,"Допечатать указанное количество № КМ");
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводВторогоЧисла_ЦРПТ_ПростаяБелая(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
		Если ЗначениеЗаполненО(ЧислоПараллельныхПотоков) тогда
			Таб = ПечатьЭти_1_ЦРПТ_Функция_ПростаяБелая(ДД,РР);
			Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
			
			Таб.Показать();
			
		Иначе
		
			Таб=Новый ТабличныйДокумент;
			ПечатьЭти_1_ЦРПТ_ПростаяБелая(Таб,ДД,РР);
			Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
			
			Таб.Показать();
		Конецесли;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПечатьЭти_1_ЦРПТ_Функция_ПростаяБелая(Смещение,Количество,НомерТТН="") Экспорт
	
	//Обр=РеквизитФормыВЗначение("Объект_1");
	Ссылка=Объект.Ссылка;
	НомерТТН=Объект.Номер;
	Таб = Новый ТабличныйДокумент;
	
	Мак=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("ПростаяБелая");
	ОблМ=Мак.ПолучитьОбласть("Строка");
		//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВерсияПравильная Тогда
		ГенераторМатрицы=Обработки.ГенерацияDataMatrix_ХамелеонЦРПТ.Создать();
		ГенераторМатрицы.Инициализировать();
	КонецЕсли;
	
	МассивЗаданий = Новый Массив;
	ЧислоПараллельныхПотоков = РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КоличествоЯдерДляГенерацииDataMatrix; 
	//ВремПапка = КаталогВременныхФайлов() + Формат(ТекущаяДата(), "ДФ=yyyyMMddHHmmss") + "\";
	
		ВремПапка=ПолучитьИмяВременногоФайла()+"\";	

	СчРисунков = 0;
	
		Если Смещение>Объект.Марки.Количество() Тогда
			Возврат ПоместитьВоВременноеХранилище(Таб);
		КонецЕсли;
		МинимумМ=Мин(Объект.Марки.Количество()+1,СМещение+Количество)-1;
		Для СЧ=Смещение По МинимумМ
			//+1 
			Цикл
			Стр=Ссылка.Марки[СЧ-1];
			Если НЕ ЗначениеЗаполнено(Стр.ДлиннаяМарка) тогда
				Продолжить;
			Конецесли;
			ОблМ=Мак.ПолучитьОбласть("Строка");
			
			
			ООО=РаскодироватьСтроку(Стр.ДлиннаяМарка,СпособКодированияСтроки.КодировкаURL);
			//ООО=РаскодироватьСтроку(Стр.ДлиннаяМарка,СпособКодированияСтроки.КодировкаURL);
			CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
			CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
			ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
				
				ГТИН=Сред(ГТИН,14+3);
				
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
			ГТИН=Сред(ГТИН,6);
			
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			//Попытка
			//	Если ВерсияПравильная Тогда
			//		Картинка = ГенераторМатрицы.Сгенерировать(ООО);
			//	Иначе
			//		ГенераторМатрицы=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();
			//		
			//		Картинка = ГенераторМатрицы.Сгенерировать(ООО);
			//	КонецЕсли;
			//	ОблМ.Рисунки.ДатаМ.Картинка=Новый Картинка(Картинка);
			//	
			//Исключение
			//	Сообщить("Для печати Data Matrix необходим релиз 8.3.9 или выше");
			//	//Возврат;
			//КонецПопытки;
			
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(ООО);
			МассивПараметров.Добавить(ВремПапка + СчРисунков + ".bmp");
			МассивПараметров.Добавить(ГенераторМатрицы.ПобитИсклИли);
			
			Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СгенерироватьDataMatrix", МассивПараметров);
			МассивЗаданий.Добавить(Задание);
			
			Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
				Попытка
					ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
				Исключение
				КонецПопытки;
				МассивЗаданий.Очистить();
			КонецЕсли;
			
			ОблМ.Рисунки.ДатаМ.Имя = "Рис" + СчРисунков;
			СчРисунков = СчРисунков + 1;
			
			Таб.Вывести(ОблМ);
			Таб.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЦикла;
	
	Если МассивЗаданий.Количество() > 0 Тогда
		Попытка
			ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
		Исключение
		КонецПопытки;
		МассивЗаданий.Очистить();
	КонецЕсли;
	
	Для Сч = 0 По СчРисунков - 1 Цикл
		ИсходнаяКартинка = Новый Картинка(ВремПапка + Сч + ".bmp");
		Таб.Рисунки["Рис"+Сч].Картинка = ИсходнаяКартинка.Преобразовать(ФорматКартинки.PNG);
	КонецЦикла;
	
	УдалитьФайлы(ВремПапка);
	Возврат Таб;
	
КонецФункции



Процедура ПечатьЭти_1_ЦРПТ_ПростаяБелая(Таб,Смещение,Количество,НомерТТН="") Экспорт
	//Обр=РеквизитФормыВЗначение("Объект_1");
	//Ссылка=Объект.Ссылка;
	НомерТТН=Объект.Номер;
	//Если ВерсияПравильная Тогда
	//	ГенераторМатрицы=Обработки.ГенерацияDataMatrix_ХамелеонЦРПТ.Создать();
	//	ГенераторМатрицы.Инициализировать();
	//КонецЕсли;
	
	Мак=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("ПростаяБелая");
	ОблМ=Мак.ПолучитьОбласть("Строка");

	Если ВерсияПравильная Тогда
	ГенераторМатрицы=Обработки.ГенерацияDataMatrix_ХамелеонЦРПТ.Создать();
	ГенераторМатрицы.Инициализировать();
	                           КонецЕсли;
		Если Смещение>Объект.Марки.Количество() Тогда
			Возврат;
		КонецЕсли;
		МинимумМ=Мин(Объект.Марки.Количество()+1,СМещение+Количество)-1;
		Для СЧ=Смещение По МинимумМ
			//+1 
			Цикл
			Стр=Объект.Марки[СЧ-1];
			Если Не значениеЗАполнено(Стр.ДлиннаяМарка) тогда
				Продолжить;
			КонецЕсли;
			ОблМ=Мак.ПолучитьОбласть("Строка");
			
			
			//НСтр=Объект.Товары.НайтиСтроки(Новый Структура("ID",Стр.Order_Id_Line));
			//Если НСтр.Количество()=0  Тогда
			//	Продолжить;
			//Иначе
			//	НСтр=НСтр[0];
			//КонецЕсли;
			
			ГТИН=Сред(Стр.ДлиннаяМарка,3);
			ГТИН=Сред(ГТИН,1,15-1);
			GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
			
			//ОблМ.Параметры.Модель=GTIN.МодельПроизводителяАртикул;
			//Если ЗначениеЗаполнено(GTIN.Размер) Тогда
			//	ОблМ.Параметры.Размер=GTIN.Размер;
			//Иначе
			//	ОблМ.Параметры.Размер="--";
			//Конецесли;
			//ОблМ.Параметры.Цвет=GTIN.Цвет;
			//
			ООО=РаскодироватьСтроку(Стр.ДлиннаяМарка,СпособКодированияСтроки.КодировкаURL);
			//ООО=РаскодироватьСтроку(Стр.ДлиннаяМарка,СпособКодированияСтроки.КодировкаURL);
			CIS="("+Сред(ООО,1,2)+")";
			
			ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
			ГТИН=Сред(ГТИН,15+2);
			ТутУправляющийСимвол=ГТИН;
	CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
		ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
			
			
			
			Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
				CIS=CIS+Символы.ПС+"(240)";
		
				ГТИН=Сред(ГТИН,14+3);
			
				ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
				ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
				ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
				CIS=CIS+ТутУправляющийСимвол;
			КонецЕсли;
			//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
			//CIS=СтрЗаменить(CIS,"%1D","");
			
			//Если           Найти(ГТИН,"91")>0 Тогда
				ГТИН=Сред(ГТИН,6);
			
			ОблМ.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			
			
			Попытка
				Если ВерсияПравильная Тогда
			Картинка = ГенераторМатрицы.Сгенерировать(ООО); Иначе					ГенераторМатрицы=Обработки.ГенерацияDataMatrix_8_3_6_ХамелеонЦРПТ.Создать();

					Картинка = ГенераторМатрицы.Сгенерировать(ООО);
КонецЕсли;
			ОблМ.Рисунки.ДатаМ.Картинка=Новый Картинка(Картинка);
						
			Исключение
				Сообщить("Для печати Data Matrix необходим релиз 8.3.9 или выше");
				//Возврат;
			КонецПопытки;
		
							
					Таб.Вывести(ОблМ);
					Таб.ВывестиГоризонтальныйРазделительСтраниц();
			
			КонецЦикла;
		
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьИнформациюОКМ(Команда)
	// Вставить содержимое обработчика.
	
	//Дерево.ПолучитьЭлементы().Очистить();
	//Добав=Дерево.ПолучитьЭлементы().Добавить();
	Thumbprint_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(ТекущийПользователь);	
	
	СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
		Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Возврат;
		КонецЕсли;
	
	МассивМарокДляОпределнияПродукции=Новый Массив;
	МассивМарокДляОпределнияПродукции.Очистить();
	Для Каждого Стр_1 Из Объект.Марки Цикл
		//Если Не ЗначениеЗАполнено(Стр_1.Продукция) Тогда
			
			
			
			Если СтрДлина(Стр_1.Марка)=18 
				ИЛИ СтрДлина(Стр_1.Марка)=20 
				Тогда
				Марка=Стр_1.Марка;
				Если СтрДлина(Марка)=20  Тогда
					Стр_1.Марка=Сред(Марка,3);
					Марка=Сред(Марка,3)
					
				КонецЕсли;
				Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба",Марка)).Количество()=0 Тогда
					МассивМарокДляОпределнияПродукции.Добавить(Марка);
				КонецЕсли;
			КонецЕсли;
			//	Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба",Марка)).Количество()=0 Тогда
			//		РекурсияУпаковки_Лекарства(СРегистра,Thumbprint_1,Стр_1.Марка,Вернутьsub());
			//	КонецЕсли;
			//КонецЕсли;
		//Иначе
			
		//КонецЕсли;
	Конеццикла;
		subjectIdФармацевтика=ВернутьSUB_Договор();
	
		МассивЗапросов.Очистить();//=Новый Массив;
		//МассивЗапросов.Колонки.Добавить("ИдЗапроса");
		//МассивЗапросов.Колонки.Добавить("Обработан");
	
	Для каждого Стр_1 Из МассивМарокДляОпределнияПродукции Цикл
			
			
			
			
			
			
			Страница=0;
			
			Чтение=Новый ЗаписьXML;
			Чтение.УстановитьСтроку("UTF-8");
			Чтение.ЗаписатьОбъявлениеXML();
			Чтение.ЗаписатьНачалоЭлемента("documents");
			Чтение.ЗаписатьАтрибут("version","1.35");
		 	
			Чтение.ЗаписатьНачалоЭлемента("query_hierarchy_info");
			Чтение.ЗаписатьАтрибут("action_id","220");
			
			Чтение.ЗаписатьНачалоЭлемента("subject_id");
			Чтение.ЗаписатьТекст(subjectIdФармацевтика);
			Чтение.ЗаписатьКонецЭлемента();
			
			Чтение.ЗаписатьНачалоЭлемента("sscc");
			Чтение.ЗаписатьТекст(Стр_1);
			Чтение.ЗаписатьКонецЭлемента();
			
			Чтение.ЗаписатьКонецЭлемента();
			Чтение.ЗаписатьКонецЭлемента();
			СформироватьФайлДляОтправки=Чтение.Закрыть();
			
			
			
			
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

				
				Подписанный="";
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1,Подписанный,Истина);
		
			Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
		Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("document");
	Чтен.ЗаписатьЗначение(Добав);
	Чтен.ЗаписатьИмяСвойства("sign");
	Чтен.ЗаписатьЗначение(Подписанный);
	Чтен.ЗаписатьИмяСвойства("request_id");
	Чтен.ЗаписатьЗначение(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВернутьУНИКУМ());
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();
	
				 
				 
		//Тело="{
		//|""doc_type"":""311"",
		//|""document"":"""+Добав+""",
		//|""sign"":"""+Подписанный+""",
		//|""request_id"":"""+ВернутьУНИКУМ()+"
		//|}";
			
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/send");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		
		Если Ответ.КодСостояния=200 Тогда
			
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Добав_Запрос=МассивЗапросов.Добавить();
			Добав_Запрос.ИдЗапроса=NNN.document_id;
			Добав_Запрос.Обработан=Ложь;
			Добав_Запрос.Марка=Стр_1;
			
			//МассивЗапросов.Добавить(Новый );
			
		КонецЕсли;
	Конеццикла;
	
	
		
	    ОбработаныВсе=Ложь;
	Пока ОбработаныВсе=Ложь Цикл
		ОбработаныВсе=Истина;
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
				
				Для Каждого Стр_1_З Из МассивЗапросов Цикл
					Если Стр_1_З.Обработан=Истина Тогда
						Продолжить;
					Конецесли;
					 ОбработаныВсе=Ложь;
				_Order_ID=	Стр_1_З.ИдЗапроса;
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+_Order_ID+"/ticket");
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("documents/"+_Order_ID+"/ticket");
					
				Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
					
					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
					
				КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	
		
	//	 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				 
				 
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					
					
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(NNN.link,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//
					Сайт_1=NNN.link;
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
					
					
					
					
					
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
	//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Текст1) 
		ИЛИ Найти(Текст1,"Ошибка при выполнении операции: запись не найдена")>1
		тогда
					//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
						 
						 Продолжить;
					 КонецЕсли;
					 
					 МассивУп=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.МассивКмОвДляОбработки_Упаковки(Текст1);
					 Если МассивУп.Количество()>0 Тогда
							НСтрП=Объект.Марки.НайтиСтроки(Новый Структура("Марка",Стр_1_З.Марка));
							Для Каждого Стр___ Из НСтрП Цикл
								Если Не ЗначениеЗаполнено(Стр___.СерийныйНомер) тогда
									Стр___.СерийныйНомер=МассивУп[0].series_number;
								КонецЕсли;
							Конеццикла;
					КонецЕсли;
						
					 Для Каждого Стр_222 Из МассивУп Цикл
						Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Стр_1_З.Марка,Стр_222.НомерКМ)).Количество()=0 Тогда
						 ДДД_Агр=Объект.Короба.Добавить();
						 ДДД_Агр.ШтрихКод=Стр_222.НомерКМ;
						 ДДД_Агр.НомерКороба=Стр_1_З.Марка;
						 
					 КонецЕсли;
					 
						//Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",cis_1,Стр_1.НомерКМ)).Количество()=0 Тогда
						
						//	ДобавК=Объект.Короба.Добавить();
						//	ДобавК.НомерКороба=cis_1;
						//	ДобавК.ШтрихКод=Стр_1.НомерКМ;
						//	БылиУпаковки=Истина;
						//КонецЕсли;
						
						//Строк_1.НомерКМ=ключ;    
						//Если Стр_1.Продолжить=Истина Тогда
						//	РекурсияУпаковки_Лекарства(Строк,Количество,Thumbprint_1,Срегистра,subjectIdФармацевтика)								
						//Иначе
						  //   Количество=Количество+1;
						
						//КонецЕсли;
						 
					Конеццикла;
					
					 Стр_1_З.Обработан=Истина;
					 
					 Продолжить;
					 
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					    	Возврат;					
				ИначеЕсли Ответ.КодСостояния=301 Тогда
					Возврат;
					
				Иначе
				//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
						Продолжить;
				КонецЕсли;
		
				//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
				
	              
		
		
				
				
			Конеццикла;	
			Если ОбработаныВсе=Истина Тогда
				Прервать;
			КонецЕсли;
		Конеццикла;
		

	
	
	
	
	
	МассивПродукций=Новый Массив;
	
	ЗакачиваемПродукцию(МассивПродукций);
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
					Для Каждого Стр_1 Из МассивПродукций Цикл
						
									Чтен=Новый  ЗаписьJSON;
										Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
										Чтен.ЗаписатьНачалоОбъекта();
										Чтен.ЗаписатьИмяСвойства("start_from");	
										Чтен.ЗаписатьЗначение(0);
										Чтен.ЗаписатьИмяСвойства("count");
										Чтен.ЗаписатьЗначение(10);
										Чтен.ЗаписатьИмяСвойства("filter");
										Чтен.ЗаписатьНачалоОбъекта();
										
										Чтен.ЗаписатьИмяСвойства("gtin");
										Чтен.ЗаписатьЗначение(Стр_1);
										
										
													       Чтен.ЗаписатьКонецОбъекта();
										
										//Чтен.ЗаписатьЗначение("{}");
													       Чтен.ЗаписатьКонецОбъекта();
													
													Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
										Тело=СтрЗаменить(Тело,Символы.ПС,"");
										Тело=СтрЗаменить(Тело,Символы.ВК,"");
										
						
						
								HTTPЗапрос=Новый HTTPЗапрос("api/v1/reestr/med_products/public/filter");
								          HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
								
												//	Иначе
												//	HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.document_id+"");
											/////			
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
												//	КонецЕсли;
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
											HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
											Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
											МассивДляОбновления=Новый Массив;
											ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьПродукцию(Текст1,МассивДляОбновления);
											Для Каждого Стр_34234242 Из МассивДляОбновления Цикл
												ОповеститьОбИзменении(Стр_34234242);
											Конеццикла;
											
											
											
												ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(10);
												
												
												
																						
						
					Конеццикла;
					
					
	
	

	//Добав.НомерКороба=Штрих;
	//Добав.cis=Штрих;
		
	
КонецПроцедуры

Процедура ЗакачиваемПродукцию(МассивПроудцкий)
	Объект.Товары.Очистить();
	Для Каждого Стр Из ОБъект.Марки Цикл
		Упаковка=ложь;            
		Если СтрДлина(Стр.Марка)= 18 Тогда
			Упаковка=Истина;
		КонецЕсли;
		
		Если ЗначениеЗАполнено(Стр.Продукция) тогда
			НаименованиеТовара=Стр.Продукция;
			Нстр=Объект.Товары.НайтиСтроки(Новый Структура("GTIN,Цена,Упаковка",НаименованиеТовара,0,Упаковка));
			Если НСтр.Количество()=0 Тогда
				НСтр=Объект.Товары.Добавить();
				НСтр.Упаковка=Упаковка;
				НСтр.GTIN=НаименованиеТовара;
				Попытка
					Если Число(НСтр.GTIN.GTIN)=Число(НСтр.GTIN.Наименование) тогда
						Если МассивПроудцкий.Найти(НСтр.GTIN)=Неопределено тогда	
							МассивПроудцкий.Добавить(xmlString(НСтр.GTIN.GTIN));
						КонецЕсли;
						
					КонецЕсли;
				Исключение
				КонецПопытки;
				НСтр.НомерСтрокиСвязи=НСтр.ПолучитьИдентификатор();
			Иначе
				НСтр=НСтр[0]
			КонецЕсли;
			
			НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
			Ид=НСтр.НомерСтрокиСвязи;
		
				
			Стр.НомерСтрокиСвязи=Ид;
						

			
			Продолжить;
		КонецЕсли;
		Марка=Стр.Марка;
		Если СтрДлина(Марка)=20 Тогда
			Марка=Сред(Марка,3);
			
		КонецЕсли;
		
		Если СтрДлина(Марка)=18 Тогда
			
			НайтиВдругомМесте=Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба",Марка));
			Если        НайтиВдругомМесте.Количество()=0 Тогда    
				 	Идент="";
					//	НайтиПоМраке(Марка,МассивПроудцкий,Идент);
					
					  	НСтр=Объект.Товары.Добавить();
//				НСтр.GTIN=;
				НСтр.НомерСтрокиСвязи=НСтр.ПолучитьИдентификатор();
			
						НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
						Идент=НСтр.НомерСтрокиСвязи;

					
						Стр.НомерСтрокиСвязи=Идент;
						
						НСтр.НомерКороба=Марка;
						Элементы.ТоварыНомерКороба.Видимость=Истина;
				
					Иначе
						Была=Ложь;
				Для Каждого Стр_1 Из НайтиВдругомМесте Цикл
					//Если СтрДлина(Стр_1.ШтрихКод)=18 Тогда
					
					Если ЗначениеЗаполнено(Стр_1.ШтрихКод) Тогда
						Была=Истина;						
					//Иначе
					
					Идент="";
					Продукция="";
						НайтиПоМраке(Стр_1.ШтрихКод,МассивПроудцкий,Идент,Продукция,Упаковка);
						
						Стр.Продукция=Продукция;
						Стр.НомерСтрокиСвязи=Идент;
						Прервать;
					КонецЕсли;
				Конеццикла;
			 	Если Была=Ложь Тогда
									 	Идент="";
					//	НайтиПоМраке(Марка,МассивПроудцкий,Идент);
					
					  	НСтр=Объект.Товары.Добавить();
//				НСтр.GTIN=;
				НСтр.НомерСтрокиСвязи=НСтр.ПолучитьИдентификатор();
			
						НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
						Идент=НСтр.НомерСтрокиСвязи;

					
						Стр.НомерСтрокиСвязи=Идент;
				    	НСтр.НомерКороба=Марка;
					

					
					
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Идент="";
			
			НайтиПоМраке(Марка,МассивПроудцкий,Идент,Продукция,Упаковка);
					Стр.НомерСтрокиСвязи=Идент;
					Стр.Продукция=Продукция;
			
		КонецЕсли;
		
	Конеццикла;
	
	
КонецПроцедуры


Процедура НайтиПоМраке(Марка,МассивПроудцкий,Ид,Продукция,Упаковка)
	Попытка
				GTIN=Сред(Марка,1,14);
				НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(GTIN));
			Исключение
				
				ВызватьИсключение "Не правильная марка "+Марка;
				
				
				
		КонецПопытки;
			Если не ЗначениеЗаполнено(НаименованиеТовара) Тогда
				СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
				СпрПр.GTIN=число(Сред(Марка,1,14));
				СпрПр.Наименование=xmlString(СпрПр.GTIN);
				СпрПр.НаименованиеТовара=xmlString(СпрПр.GTIN);
				СпрПр.Записать();
				НаименованиеТовара=СпрПр.Ссылка;
			КонецЕсли;
			Продукция=НаименованиеТовара;
			//Нстр=ДокументПриемки.Товары.Найти(Добав.НаименованиеТовара,"GTIN");
			Нстр=Объект.Товары.НайтиСтроки(Новый Структура("GTIN,Цена,Упаковка",НаименованиеТовара,0,Упаковка));
			Если НСтр.Количество()=0 Тогда
				НСтр=Объект.Товары.Добавить();
				НСтр.GTIN=НаименованиеТовара;
				Нстр.Упаковка=Упаковка;
				Попытка
					Если Число(НСтр.GTIN.GTIN)=Число(НСтр.GTIN.Наименование) тогда
						Если МассивПроудцкий.Найти(GTIN)=Неопределено тогда	
							МассивПроудцкий.Добавить(GTIN);
						КонецЕсли;
						
					КонецЕсли;
				Исключение
				КонецПопытки;
				НСтр.НомерСтрокиСвязи=НСтр.ПолучитьИдентификатор();
			Иначе
				НСтр=НСтр[0]
			КонецЕсли;
			
			НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
			Ид=НСтр.НомерСтрокиСвязи;
		КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВБраузере(Команда)
	// Вставить содержимое обработчика.
	ПрочитатьОтвет(Команда);
	Если Значениезаполнено(ПринятДокумент) Тогда
		//ВремФайл=КаталогВременногоФайла+Строка(УникальныйИдентификатор());
		Текст=Новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку(ПринятДокумент);
		Текст.НачатьЗапись(Новый ОписаниеОповещения("ПослеЗаписиФайла",ЭтаФорма,ВремФайл),ВремФайл,КодировкаТекста.ANSI);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиФайла(РР,ДД) Экспорт
	
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ПослеЗапуска",ЭтаФорма,ДД),ДД);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапуска(РР,ДД) Экспорт
	//УдалитьФайлы(ДД);
КонецПроцедуры

&НаСервере
Процедура ПрочитатьОшибкуПоЛекарствамНаСервере()
	// Вставить содержимое обработчика.
	Хр=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.Получить(Новый Структура("Документ,Вид",Объект.Ссылка,"Ошибка по лекарствам")).Файл;
	Если Хр<>Неопределено тогда
		ПринятДокумент=Хр.Получить();
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьОшибкуПоЛекарствам(Команда)
	ПрочитатьОшибкуПоЛекарствамНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИДобавитьТовары(Команда)
	// Вставить содержимое обработчика.
	Если Объект.Товары.Количество()>0  Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопроса",ЭтаФорма),"Табличная часть будет очищена вместе с ценами. Продолжить?",
		РежимДиалогаВопрос.ДаНет)
	;
Иначе
	ПослеВопроса(КодВозвратаДиалога.Да,"");
КонецЕсли;


КонецПроцедуры

&НаКлиенте
Процедура ПослеВопроса(РР,ДД)  Экспорт
	Если РР=КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
		Если Объект.Товары.Количество()=0 Тогда
			ПолучитьИнформациюОКМ("");
			ПоказатьПредупреждение(,"Не заполнены цены!!! Заполните их после чего примите документ заново");
			Возврат;
		КонецЕсли;;
		
	КонецЕслИ;
КонецПроцедуры

&НаКлиенте
Процедура СканироватьМаркуОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	а=1;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКМПостранично(Команда)
	// Вставить содержимое обработчика.
	СерийныеНомера.Очистить();
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСтатусыПоМаркам(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	МассивКМ=Новый Массив;
	Для каждого Стр_1 Из Объект.Марки Цикл
		Если Не ЗначениеЗаполнено(Стр_1.Статус) ИЛИ 
			Стр_1.Статус="Не найдено в ЦРПТ" Тогда
		//	Стр_1.Статус="Не найдено в ЦРПТ";
		//	Стр_1.ВОбороте=Ложь;
			
			МассивКМ.Добавить(Стр_1.Марка);
		КонецЕсли;
	Конеццикла;	
	
	ОбработатьстатусыКМЛекарства(МассивКМ);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьстатусыКМЛекарства(МассивКМ)
	
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
	
	//Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
		
		ОпределитьСтатусПоФармацевтикеСканированные(Thumbprint_1,МассивКМ);
		
	//	Возврат;
		
	//Иначе
	//	ОбработатьстатусыКМ_Марки(МассивКМ);

				 
	//КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьСтатусПоФармацевтикеСканированные(Thumbprint_1,МассивКМ)
	
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
					Иначе
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		
		
		

				СРегистра="";///Thumbprint_1.Thumbprint_1;
				Если Не ЗначениеЗаполнено(СРегистра) тогда
					Попытка
						СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
					исключение
						СРегистра=Неопределено;
					КонецПопытки;
				КонецЕсли;
				
		Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Возврат;
		КонецЕсли;
				
				
		Пока МассивКМ.Количество()>0 Цикл
		 	МассивОпределям=Новый Массив;
			МассивОпределям.Очистить();
			КоличествоПр=Мин(1,МассивКМ.Количество());
			Для Сч=1 По КоличествоПр Цикл
				МассивОпределям.Добавить(МассивКМ[0]);
				МассивКМ.Удалить(0);
			Конеццикла;
		 	ВернутьСтатусы=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьСтатусыПоМассивуКМ_Лекарства(Thumbprint_1,Срегистра,МассивОпределям);
			
			Для Каждого Стр_1 Из ВернутьСтатусы Цикл
				Нстрок=Объект.Марки.НайтиСтроки(Новый Структура("Марка",Стр_1.cis));
				Нстрок[0].Статус=Стр_1.Статус;
			Конеццикла;
			
			
		Конеццикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ПроверитьСтатусМаркиПоВыделенным(Команда)
	// Вставить содержимое обработчика.
	МассивКМ=Новый Массив;
	Для Каждого Стр Из Элементы.Марки.ВыделенныеСтроки Цикл
		Стр_1=Объект.Марки.НайтиПоИдентификатору(Стр);
		Если ЗначениеЗаполненО(Стр_1.марка) Тогда
			Стр_1.Статус="Не найдено в ЦРПТ";
			//Стр_1.ВОбороте=Ложь;
			
			МассивКМ.Добавить(Стр_1.марка);
		КонецЕсли;
		
	Конеццикла;
	
	ОбработатьстатусыКМЛекарства(МассивКМ);
	
	
КонецПроцедуры


&НаКлиенте
Процедура ОрганизацияОтправитьль_Лекарства_АкцептПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если Объект.ОбратныйАкцепт=Истина Тогда
			Элементы._702Схема.Видимость=Объект.ОбратныйАкцепт;
	Конецесли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОпределитьНомерПартии(Команда)
		// Вставить содержимое обработчика.
	
	
	Thumbprint_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(ТекущийПользователь);	
	
	СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
	
	Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Возврат;
		КонецЕсли;

	МассивМарокДляОпределнияПродукции=Новый Массив;
	МассивМарокДляОпределнияПродукции.Очистить();
	Для Каждого Стр_1 Из Объект.Марки Цикл
		Если Не ЗначениеЗАполнено(Стр_1.СерийныйНомер) Тогда
			
			
			
			Если СтрДлина(Стр_1.Марка)=18 
				ИЛИ СтрДлина(Стр_1.Марка)=20 
				Тогда
				Марка=Стр_1.Марка;
				Если СтрДлина(Марка)=20  Тогда
					Стр_1.Марка=Сред(Марка,3);
					Марка=Сред(Марка,3)
					
				КонецЕсли;
					МассивМарокДляОпределнияПродукции.Добавить(Марка);
			КонецЕсли;
			//	Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба",Марка)).Количество()=0 Тогда
			//		РекурсияУпаковки_Лекарства(СРегистра,Thumbprint_1,Стр_1.Марка,Вернутьsub());
			//	КонецЕсли;
			//КонецЕсли;
		//Иначе
			
		КонецЕсли;
	Конеццикла;
		subjectIdФармацевтика=ВернутьSUB_Договор();
	
		МассивЗапросов.Очистить();//=Новый Массив;
		//МассивЗапросов.Колонки.Добавить("ИдЗапроса");
		//МассивЗапросов.Колонки.Добавить("Обработан");
	
	Для каждого Стр_1 Из МассивМарокДляОпределнияПродукции Цикл
			
			
			
			
			
			
			Страница=0;
			
			Чтение=Новый ЗаписьXML;
			Чтение.УстановитьСтроку("UTF-8");
			Чтение.ЗаписатьОбъявлениеXML();
			Чтение.ЗаписатьНачалоЭлемента("documents");
			Чтение.ЗаписатьАтрибут("version","1.35");
		 	
			Чтение.ЗаписатьНачалоЭлемента("query_hierarchy_info");
			Чтение.ЗаписатьАтрибут("action_id","220");
			
			Чтение.ЗаписатьНачалоЭлемента("subject_id");
			Чтение.ЗаписатьТекст(subjectIdФармацевтика);
			Чтение.ЗаписатьКонецЭлемента();
			
			Чтение.ЗаписатьНачалоЭлемента("sscc");
			Чтение.ЗаписатьТекст(Стр_1);
			Чтение.ЗаписатьКонецЭлемента();
			
			Чтение.ЗаписатьКонецЭлемента();
			Чтение.ЗаписатьКонецЭлемента();
			СформироватьФайлДляОтправки=Чтение.Закрыть();
			
			
			
			
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

				
				Подписанный="";
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1,Подписанный,Истина);
		
			Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
		Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("document");
	Чтен.ЗаписатьЗначение(Добав);
	Чтен.ЗаписатьИмяСвойства("sign");
	Чтен.ЗаписатьЗначение(Подписанный);
	Чтен.ЗаписатьИмяСвойства("request_id");
	Чтен.ЗаписатьЗначение(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВернутьУНИКУМ());
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();
	
				 
				 
		//Тело="{
		//|""doc_type"":""311"",
		//|""document"":"""+Добав+""",
		//|""sign"":"""+Подписанный+""",
		//|""request_id"":"""+ВернутьУНИКУМ()+"
		//|}";
			
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/send");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		
		Если Ответ.КодСостояния=200 Тогда
			
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Добав_Запрос=МассивЗапросов.Добавить();
			Добав_Запрос.ИдЗапроса=NNN.document_id;
			Добав_Запрос.Обработан=Ложь;
			Добав_Запрос.Марка=Стр_1;
			
			//МассивЗапросов.Добавить(Новый );
			
		КонецЕсли;
	Конеццикла;
	
	
		
	    ОбработаныВсе=Ложь;
	Пока ОбработаныВсе=Ложь Цикл
		ОбработаныВсе=Истина;
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
				
				Для Каждого Стр_1_З Из МассивЗапросов Цикл
					Если Стр_1_З.Обработан=Истина Тогда
						Продолжить;
					Конецесли;
					 ОбработаныВсе=Ложь;
				_Order_ID=	Стр_1_З.ИдЗапроса;
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+_Order_ID+"/ticket");
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("documents/"+_Order_ID+"/ticket");
					
				Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
					
					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
					
				КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	
		
	//	 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				 
				 
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					
					
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(NNN.link,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//
					Сайт_1=NNN.link;
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
					
					
					
					
					
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
	//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Текст1) 
		ИЛИ Найти(Текст1,"Ошибка при выполнении операции: запись не найдена")>1
		тогда
					//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
						 
						 Продолжить;
					 КонецЕсли;
					 
					 МассивУп=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.МассивКмОвДляОбработки_Упаковки(Текст1);
					 Если МассивУп.Количество()>0 Тогда
							НСтрП=Объект.Марки.НайтиСтроки(Новый Структура("Марка",Стр_1_З.Марка));
							Для Каждого Стр___ Из НСтрП Цикл
								Если Не ЗначениеЗаполнено(Стр___.СерийныйНомер) тогда
									Стр___.СерийныйНомер=МассивУп[0].series_number;
								КонецЕсли;
							Конеццикла;
					КонецЕсли;
						
					 Для Каждого Стр_222 Из МассивУп Цикл
						Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Стр_1_З.Марка,Стр_222.НомерКМ)).Количество()=0 Тогда
						 ДДД_Агр=Объект.Короба.Добавить();
						 ДДД_Агр.ШтрихКод=Стр_222.НомерКМ;
						 ДДД_Агр.НомерКороба=Стр_1_З.Марка;
						 
					 КонецЕсли;
											 
					Конеццикла;
					
					 Стр_1_З.Обработан=Истина;
					 
					 Продолжить;
					 
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					    	Возврат;					
				ИначеЕсли Ответ.КодСостояния=301 Тогда
					Возврат;
					
				Иначе
				//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
						Продолжить;
				КонецЕсли;
		
				//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
				
	              
		
		
				
				
			Конеццикла;	
			Если ОбработаныВсе=Истина Тогда
				Прервать;
			КонецЕсли;
		Конеццикла;
		

	     		
					Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
					Иначе
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		
		
		

				
									Чтен=Новый  ЗаписьJSON;
										Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
										Чтен.ЗаписатьНачалоОбъекта();
										
										Чтен.ЗаписатьИмяСвойства("filter");
										
										Чтен.ЗаписатьНачалоОбъекта();
										
										Чтен.ЗаписатьИмяСвойства("sgtins");
										Чтен.ЗаписатьНачалоМассива();

	 	
	Для Каждого СтР_1 Из Объект.Марки Цикл
		Если Не ЗначениеЗаполнено(Стр_1.СерийныйНомер) тогда
			Если СтрДлина(Стр_1.Марка)<>18 Тогда
				
				
												Чтен.ЗаписатьЗначение(Стр_1.Марка);
											КонецЕсли;
										Конецесли;
						Конеццикла;
										Чтен.ЗаписатьКонецМассива();
										
													       Чтен.ЗаписатьКонецОбъекта();
										
										//Чтен.ЗаписатьЗначение("{}");
													       Чтен.ЗаписатьКонецОбъекта();
													
													Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
										Тело=СтрЗаменить(Тело,Символы.ПС,"");
										Тело=СтрЗаменить(Тело,Символы.ВК,"");
										
						
						
								HTTPЗапрос=Новый HTTPЗапрос("api/v1/reestr/sgtin/public/sgtins-by-list");
								          HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
										  
										 //КонецЕсли;
												//	Иначе
												//	HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.document_id+"");
											/////			
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
												//	КонецЕсли;
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
											HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
											
											Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
				                  		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(5);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
							NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);
				entries=NNN["entries"];			
		Если   entries<>неопределено Тогда
			
			Для Каждого Стр_22 Из entries Цикл
				
				
				sgtin=Стр_22["sgtin"];
				
				СтрокаМарки=Объект.Марки.НайтиСтроки(Новый Структура("Марка",sgtin));
				Для Каждого Стр_20 Из Строкамарки Цикл
					Стр_20.СерийныйНомер=Стр_22["batch"]
					
					
				Конеццикла;
				
								//Стр_1.СерийныйНомер=entries[0]["batch"]
			КонецЦикла;
		КонецЕсли;
												
		
	
КонецПроцедуры


&НаКлиенте
Процедура ОпределитьНомераПартииСерийники(Команда)
		// Вставить содержимое обработчика.
	
	
	Thumbprint_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(ТекущийПользователь);	
	
	СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
	Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Возврат;
		КонецЕсли;
	
	МассивМарокДляОпределнияПродукции=Новый Массив;
	МассивМарокДляОпределнияПродукции.Очистить();
	Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		//Если Не ЗначениеЗАполнено(Стр_1.Продукция) Тогда
		Если Не ЗначениеЗаполнено(Стр_1.СерийныйНомер) тогда		
			
			
			Если СтрДлина(Стр_1.cis)=18 
				ИЛИ СтрДлина(Стр_1.cis)=20 
				Тогда
				Марка=Стр_1.cis;
				Если СтрДлина(Марка)=20  Тогда
					Стр_1.cis=Сред(Марка,3);
					Марка=Сред(Марка,3)
					
				КонецЕсли;
					МассивМарокДляОпределнияПродукции.Добавить(Марка);
			КонецЕсли;
			//	Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба",Марка)).Количество()=0 Тогда
			//		РекурсияУпаковки_Лекарства(СРегистра,Thumbprint_1,Стр_1.Марка,Вернутьsub());
			//	КонецЕсли;
			//КонецЕсли;
		//Иначе
			
		КонецЕсли;
	Конеццикла;
		subjectIdФармацевтика=ВернутьSUB();
	
		МассивЗапросов.Очистить();//=Новый Массив;
		//МассивЗапросов.Колонки.Добавить("ИдЗапроса");
		//МассивЗапросов.Колонки.Добавить("Обработан");
	
	Для каждого Стр_1 Из МассивМарокДляОпределнияПродукции Цикл
			
			
			
			
			
			
			Страница=0;
			
			Чтение=Новый ЗаписьXML;
			Чтение.УстановитьСтроку("UTF-8");
			Чтение.ЗаписатьОбъявлениеXML();
			Чтение.ЗаписатьНачалоЭлемента("documents");
			Чтение.ЗаписатьАтрибут("version","1.35");
		 	
			Чтение.ЗаписатьНачалоЭлемента("query_hierarchy_info");
			Чтение.ЗаписатьАтрибут("action_id","220");
			
			Чтение.ЗаписатьНачалоЭлемента("subject_id");
			Чтение.ЗаписатьТекст(subjectIdФармацевтика);
			Чтение.ЗаписатьКонецЭлемента();
			
			Чтение.ЗаписатьНачалоЭлемента("sscc");
			Чтение.ЗаписатьТекст(Стр_1);
			Чтение.ЗаписатьКонецЭлемента();
			
			Чтение.ЗаписатьКонецЭлемента();
			Чтение.ЗаписатьКонецЭлемента();
			СформироватьФайлДляОтправки=Чтение.Закрыть();
			
			
			
			
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

				
				Подписанный="";
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1,Подписанный,Истина);
		
			Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
		Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("document");
	Чтен.ЗаписатьЗначение(Добав);
	Чтен.ЗаписатьИмяСвойства("sign");
	Чтен.ЗаписатьЗначение(Подписанный);
	Чтен.ЗаписатьИмяСвойства("request_id");
	Чтен.ЗаписатьЗначение(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВернутьУНИКУМ());
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();
	
				 
				 
		//Тело="{
		//|""doc_type"":""311"",
		//|""document"":"""+Добав+""",
		//|""sign"":"""+Подписанный+""",
		//|""request_id"":"""+ВернутьУНИКУМ()+"
		//|}";
			
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/send");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		
		Если Ответ.КодСостояния=200 Тогда
			
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Добав_Запрос=МассивЗапросов.Добавить();
			Добав_Запрос.ИдЗапроса=NNN.document_id;
			Добав_Запрос.Обработан=Ложь;
			Добав_Запрос.Марка=Стр_1;
			
			//МассивЗапросов.Добавить(Новый );
			
		КонецЕсли;
	Конеццикла;
	
	
		
	    ОбработаныВсе=Ложь;
	Пока ОбработаныВсе=Ложь Цикл
		ОбработаныВсе=Истина;
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
				
				Для Каждого Стр_1_З Из МассивЗапросов Цикл
					Если Стр_1_З.Обработан=Истина Тогда
						Продолжить;
					Конецесли;
					 ОбработаныВсе=Ложь;
				_Order_ID=	Стр_1_З.ИдЗапроса;
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+_Order_ID+"/ticket");
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("documents/"+_Order_ID+"/ticket");
					
				Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
					
					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
					
				КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	
		
	//	 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				 
				 
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					
					
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(NNN.link,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//
					Сайт_1=NNN.link;
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
					
					
					
					
					
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
	//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Текст1) 
		ИЛИ Найти(Текст1,"Ошибка при выполнении операции: запись не найдена")>1
		тогда
					//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
						 
						 Продолжить;
					 КонецЕсли;
					 
					 МассивУп=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.МассивКмОвДляОбработки_Упаковки(Текст1);
					 Если МассивУп.Количество()>0 Тогда
							НСтрП=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1_З.Марка));
							Для Каждого Стр___ Из НСтрП Цикл
								Если Не ЗначениеЗаполнено(Стр___.СерийныйНомер) тогда
									Стр___.СерийныйНомер=МассивУп[0].series_number;
								КонецЕсли;
							Конеццикла;
					КонецЕсли;
						
					 Для Каждого Стр_222 Из МассивУп Цикл
						Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Стр_1_З.Марка,Стр_222.НомерКМ)).Количество()=0 Тогда
						 ДДД_Агр=Объект.Короба.Добавить();
						 ДДД_Агр.ШтрихКод=Стр_222.НомерКМ;
						 ДДД_Агр.НомерКороба=Стр_1_З.Марка;
						 
					 КонецЕсли;
											 
					Конеццикла;
					
					 Стр_1_З.Обработан=Истина;
					 
					 Продолжить;
					 
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					    	Возврат;					
				ИначеЕсли Ответ.КодСостояния=301 Тогда
					Возврат;
					
				Иначе
				//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
						Продолжить;
				КонецЕсли;
		
				//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
				
	              
		
		
				
				
			Конеццикла;	
			Если ОбработаныВсе=Истина Тогда
				Прервать;
			КонецЕсли;
		Конеццикла;
		

	
	 	
					Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
					Иначе
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
									Чтен=Новый  ЗаписьJSON;
										Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
										Чтен.ЗаписатьНачалоОбъекта();
										
										Чтен.ЗаписатьИмяСвойства("filter");
										
										Чтен.ЗаписатьНачалоОбъекта();
										
										Чтен.ЗаписатьИмяСвойства("sgtins");
										Чтен.ЗаписатьНачалоМассива();
					БылаКМ=Ложь;
	Для Каждого СтР_1 Из Объект.СерийныеНомера Цикл
		Если Не ЗначениеЗаполнено(Стр_1.СерийныйНомер) тогда
			Если СтрДлина(Стр_1.cis)<>18 Тогда
	
				
				БылКМ=Истина;

		
		
		
										Чтен.ЗаписатьЗначение(Стр_1.cis);
									КонецЕсли;
								КонецЕсли;
				Конеццикла;
										Чтен.ЗаписатьКонецМассива();
										
													       Чтен.ЗаписатьКонецОбъекта();
										
										//Чтен.ЗаписатьЗначение("{}");
													       Чтен.ЗаписатьКонецОбъекта();
													
													Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
										Тело=СтрЗаменить(Тело,Символы.ПС,"");
										Тело=СтрЗаменить(Тело,Символы.ВК,"");
										
						
						
								HTTPЗапрос=Новый HTTPЗапрос("api/v1/reestr/sgtin/public/sgtins-by-list");
								          HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
										  
										 //КонецЕсли;
												//	Иначе
												//	HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.document_id+"");
											/////			
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
												//	КонецЕсли;
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
											HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
											
											Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
				                  		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(5);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
							NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);
							
		entries=NNN["entries"];
		Если   entries<>неопределено Тогда
			
			Для Каждого Стр_22 Из entries Цикл
				
				
				sgtin=Стр_22["sgtin"];
				
				СтрокаМарки=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",sgtin));
				Для Каждого Стр_20 Из Строкамарки Цикл
					Стр_20.СерийныйНомер=Стр_22["batch"]
					
					
				Конеццикла;
				
								//Стр_1.СерийныйНомер=entries[0]["batch"]
			КонецЦикла;
		КонецЕсли;
												
											
						//ЗагружаемШаблоныНасервере(Текст1,Форм.Пользователь);
			//КонецЕсли;
				
				
				
		//	КонецЕсли;
			
			
		//КонецЕсли;
//	Конеццикла;
	
	

КонецПроцедуры


&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
		БылаБлокировка=Ложь;

КонецПроцедуры


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ЗначениеЗаполнено(Объект.Ссылка) тогда
		РазблокироватьДанныеДляРедактирования(Объект.Ссылка,ЭтаФорма.УникальныйИдентификатор);
		ЭтаФорма.Модифицированность=Ложь;
	КонецЕсли;	

КонецПроцедуры


&НаКлиенте
Процедура ЗакачатьДетальнуюИфнормациюБыстро(Команда)
	// Вставить содержимое обработчика.
	ЗакачатьДетальнуюИнформациюНаКлиенте_Быстро();
	
	Для Каждого Стр Из Объект.Товары Цикл
		Стр.ИтогоВложенийПоСтроке=0;
		Нстр=ОБъект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Для Каждого Стр_М Из НСТр Цикл
			Счетчик=0;
			РекурсияУпаковки_ИтогоВложений(Стр_М.cis,Стр.ИтогоВложенийПоСтроке,Счетчик);
		КонецциклА;
	КонецЦикла;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакачатьДетальнуюИнформациюНаКлиенте_Быстро()
	
	
	Объект.ПроверкаПоНомерамКМ.Очистить();
	
	ИННПоставщика="";
	
	Thumbprint_1=ПолучитьИзПользователя(ИННПоставщика);
				
				
	ОПределитьУпаковки(Thumbprint_1);
				
				Если        Thumbprint_1=Неопределено тогда
					Возврат;
				КонецЕсли;
	Если Thumbprint_1.НаименованиеСтенда="Табак"
		ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
		Тогда
		ОпределимКоробаПоТабаку();
			Возврат;
	КонецЕсли;
	
	
	
	МассивДобавили=Новый Массив;
	
	Массив=Новый Массив;
	МассивГТИН(Массив,МассивДобавили);	
	
	Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		Если Стр_1.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка")
			ИЛИ Не ЗначениеЗаполнено(Стр_1.ТипУпаковки) Тогда
			//Если Массив.Найти(Стр_1.cis)=Неопределено Тогда
			Если МассивДобавили.Найти(Стр_1.cis)=неопределено тогда
				БылиУпаковки=Истина;
				Массив.Добавить(Новый Структура("GTIN,Марка",Стр_1.GTIN,Стр_1.cis));
				МассивДобавили.Добавить(Стр_1.cis);
			КонецЕсли;
		КонецЕсли;
	Конеццикла;
	
	УжеЗапрашивали=Новый Массив;
				Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
					Возврат;
				КонецЕслИ;
				
				
				
				Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
					
						Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
							Прокси=Новый ИнтернетПрокси;
							Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
						
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
						Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
						КонецЕсли;
					
						
	СРегистра="";
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
						
						
					ПолучитьВсюИнформациюПоФармацевтике(Thumbprint_1,СРегистра);
					ЗагрузитьобновитьПроверкуПросту();
					
					МассивПроудкций=Новый Массив;
					Для Каждого Стр_1 Из Объект.ПроверкаПоНомерамКМ Цикл
						Если не ЗначениеЗАполнено(Стр_1.Продукция) 
							И Стр_1.GTINНаименованиеТовара<>"НЕ ПОЛУЧАЛИ" Тогда
							МассивПроудкций.Добавить(Стр_1.GTINНаименованиеТовара);
						ИНАЧЕ
							Попытка
								Если ЗначениеЗаполнено(Стр_1.Продукция)
									И Число(Стр_1.GTINНаименованиеТовара)=Число(Строка(Стр_1.Продукция)) Тогда
									Если МассивПроудкций.Найти(Стр_1.GTINНаименованиеТовара)=Неопределено тогда
									 	МассивПроудкций.Добавить(Стр_1.GTINНаименованиеТовара);
									КонецеслИ;
								Конецесли;
							Исключение
							КонецПопытки;
							
							
						КонецЕсли;
						
					Конеццикла;
						
					Для Каждого Стр_1 Из МассивПроудкций Цикл
						
									Чтен=Новый  ЗаписьJSON;
										Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
										Чтен.ЗаписатьНачалоОбъекта();
										Чтен.ЗаписатьИмяСвойства("start_from");	
										Чтен.ЗаписатьЗначение(0);
										Чтен.ЗаписатьИмяСвойства("count");
										Чтен.ЗаписатьЗначение(10);
										Чтен.ЗаписатьИмяСвойства("filter");
										Чтен.ЗаписатьНачалоОбъекта();
										
										Чтен.ЗаписатьИмяСвойства("gtin");
										Чтен.ЗаписатьЗначение(Стр_1);
										
										
													       Чтен.ЗаписатьКонецОбъекта();
										
										//Чтен.ЗаписатьЗначение("{}");
													       Чтен.ЗаписатьКонецОбъекта();
													
													Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
										Тело=СтрЗаменить(Тело,Символы.ПС,"");
										Тело=СтрЗаменить(Тело,Символы.ВК,"");
										
						
						
								HTTPЗапрос=Новый HTTPЗапрос("api/v1/reestr/med_products/public/filter");
								          HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
								
												//	Иначе
												//	HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.document_id+"");
											/////			
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
												//	КонецЕсли;
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
											HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
											Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
											ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьПродукцию(Текст1);
											
											
												ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
											
												//Стр_1.Обновить();										
						
											Конеццикла;		
											НаСервереПроудкцию();
											
																			
								Если Объект.Короба.Количество()>0 Тогда
									Объект.Товары.Очистить();
									
									Для КаждоГо Добав Из объект.СерийныеНомера Цикл
										
										
										
										Нстроки=Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба",Добав.cis));
										ГТИН="00000000000000";
										Если НСтроки.Количество()=0 Тогда
											Если СтрДлина(Добав.cis)>18 Тогда
												ГТИН=ДополнитьСтроку(Сред(Добав.cis,1,14))
											КонецЕсли;
										Иначе
											Для Каждого Стр_11_Н Из НСтроки Цикл
												Если СтрДлина(Стр_11_Н.ШтрихКод)>18 Тогда
													ГТИН=ДополнитьСтроку(Сред(Стр_11_Н.ШтрихКод,1,14));
													Прервать;
												КонецЕсли;
												
											КонецЦикла
											
										КонецЕсли;
										
										//Проудкция=Неопределено;
										Продукция=ПредопределенноеЗначение("Справочник.Продукция_ХамелеонЦРПТ.ПустаяСсылка");
										Если ГТИН<>"00000000000000" Тогда
											Продукция=СоздатьНайтиGTIN(ГТИН);
										КонецЕсли;
											КоличествоКМ=Макс(1,НСтроки.Количество()); 
											Если ЗначениеЗаполнено(Продукция) тогда
												НСтр=Объект.Товары.НайтиСтроки(Новый Структура("GTIN",Продукция));
												Если НСтр.Количество()=0 Тогда
												
													НСТр=Объект.Товары.Добавить();
													Попытка
														НСТр.НаименованиеТовара=Продукция.Наименование;
													Исключение
													КонецПопытки;
													НСТр.GTIN=Продукция;
													НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
												Иначе
													НСТР=НСТР[0];
								//					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
												КонецЕсли;
											Иначе
													НСТр=Объект.Товары.Добавить();
													НСТр.НаименованиеТовара="";
													НСТр.GTIN="";
													НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
											КонецЕсли;
											
											
								//					Добав=Объект.СерийныеНомера.Добавить();
													Добав.КоличествоКМ=КоличествоКМ;
													НСТР.КоличествоКМ=НСТР.КоличествоКМ+1;
													НСТР.КоличествоНомеровКМ=НСТР.КоличествоНомеровКМ+КоличествоКМ;
													
													НСТр.Сумма=НСтр.Сумма+Добав.Цена;
													НСтр.НДС=НСТР.НДС+Добав.НДС;
													НСТр.Цена=НСтр.Сумма/НСтр.КоличествоКМ;
													
													
													Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
													Добав.НаименованиеТовараСтрокой=НСТр.НаименованиеТовара;
													Добав.НаименованиеТовара=Продукция;
													Если ЗначениеЗаполнено(Продукция)   Тогда
														Добав.GTIN=ГТИН;
													КонецЕсли;
													
								//				Исключение
								//				КонецПопытки;
										
									Конеццикла;
								КонецЕсли;
											
								Попытка
							этаФорма.Записать();
												
					этаФорма.Прочитать();
				Исключение
					КонецПопытки;
					
					Возврат;
				КонецЕсли;
				

				
				       Объект.Короба.Очистить();
				
				//НЕ ЛЕКАРСТВА!!!!!!
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
				Если Не ЗначениеЗаполнено(СРегистра) Тогда
					ПоказатьПредупреждение(,"Не удалось получить токен по организации");
					Возврат;
				Конецесли;
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				 
				
				
				если 		Истина ИЛИ 			ЧислоПараллельныхПотоков=0 Тогда
				

					Для Каждого Стр_11 Из Массив Цикл
						
						Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба",Стр_11.Марка)).Количество()>0 Тогда
							Продолжить;
						КонецЕсли;
						
				Если Ложь Тогда
				Иначе
					
			
					Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
							Прокси=Новый ИнтернетПрокси;
							Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
						
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
						Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
						КонецЕсли;
		//				
			что=Thumbprint_1.что;
		//	
		//	
		//	
		//	
		//	
		//	
		//	
		//	
		//		
			МассивКМ_1=Новый Массив;
			МассивКМ_1.Очистить();
			МассивКМ_1.Добавить(Стр_11.Марка);
					//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_11.Марка)+"&pg="+что);;
				Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьтелоПоcis(МассивКМ_1);
				HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/cis/cis_list?pg="+Что);
						
							
						//ИНН=ВернутьИНН(Обр.Организации[0].Организация );
				///HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_11.Марка));;
				//HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?gtin="+ДополнитьСтроку(Стр_11)+"&limit=100&offset=0");;
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			#Если ВебКлиент Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
			#Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
				
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
				Текст1=Ответ.ПолучитьТелоКакСтроку();
				
				числоЗагрузили=0;
				
				Тотал=0;
		//		БылиУпаковки=Ложь;
				Если Ответ.КодСостояния=200 Тогда
					
					МассивКМ=Новый Массив;
							NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
							
							Если NNN[Стр_11.Марка]<>Неопределено тогда
								РекурсияПоПолучениюИнформации_2(NNN[Стр_11.Марка],УжеЗапрашивали,Стр_11.Марка,HTTPСервисЗапрос,Thumbprint_1,СРегистра,БылиУпаковки,МассивКМ);
							
								ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапишемТип_КМ_Из_Массива(МассивКМ);
							КонецЕсли;	
													
				ИначеЕсли Ответ.КодСостояния=401 
					ИЛИ Ответ.КодСостояния=502  
					Тогда
							ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
				КонецЕсли;
			КонецЕсли;
			КонецЦикла;  

			
			

		Иначе
			                        

СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Возврат;
		КонецЕсли;
			
			ПолучаемИнформациюнаСервереПоКоробам(Thumbprint_1,СРегистра,Массив,БылиУпаковки);
			
		КонецЕсли;
		

		
	
	//Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
	//	Если СтрДлина(Стр_1.cis)=18 Тогда
	//		Если Не ЗначениеЗаполнено(Стр_1.GTIN) Тогда
	//			Стр_1.GTIN=НайтиГТИН(Стр_1.cis,БылиУпаковки)
	//		КонецЕсли;
	//		
	//	КонецЕслИ;
	//	
	//	
	//конеццикла;
	
		
		
		
		
		
	Массии=Новый Массив;
	Для Каждого Стр_1 Из Объект.Короба Цикл
		Если не ЗначениеЗаполнено(Стр_1.ШтрихКод) Тогда
			Массии.Добавить(СТр_1)
		КонецЕслИ;
	Конеццикла;
	Для Каждого Стр_1 Из Массии Цикл
		Объект.Короба.Удалить(СТр_1);
	Конеццикла;

	
	
Если БылиУпаковки=Истина Тогда
		
	Если ЗначениеЗаполнено(Объект.ТипЭДО) Тогда
		Если ПриЗагрузкеИнформацииПоЭДОПриемкаВКоличество=Истина Тогда
			Для Каждого Стр_1 Из Объект.Товары Цикл
				Стр_1.КоличествоНомеровКМ=0;
			Конеццикла;
			
		//			Объект.Товары.Очистить();
				Конецесли;;
	

				МассивДобавили.Очистить();
				
		
			Для КаждоГо Добав Из объект.СерийныеНомера Цикл
				
				Если МассивДобавили.Найти(Добав.cis)=Неопределено Тогда
					МассивДобавили.Добавить(Добав.cis);
				Иначе
					ПродолжитЬ;
				Конецесли;
				
				
				Нстроки=Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба",Добав.cis));
				ГТИН="00000000000000";
				Если НСтроки.Количество()=0 Тогда
					Если СтрДлина(Добав.cis)>18 Тогда
						ГТИН=ДополнитьСтроку(Сред(Добав.cis,3,14))
					КонецЕсли;
				Иначе
					Для Каждого Стр_11_Н Из НСтроки Цикл
						Если СтрДлина(Стр_11_Н.ШтрихКод)>18 Тогда
							ГТИН=ДополнитьСтроку(Сред(Стр_11_Н.ШтрихКод,3,14));
							Прервать;
						Иначе
							
							НстрокиИщемТут=Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба",Стр_11_Н.ШтрихКод));
								Если НстрокиИщемТут.Количество()=0 Тогда
								Иначе
									Для Каждого Стр_11_Н_2 Из НстрокиИщемТут Цикл
										Если СтрДлина(Стр_11_Н_2.ШтрихКод)>18 Тогда
											ГТИН=ДополнитьСтроку(Сред(Стр_11_Н_2.ШтрихКод,3,14));
											Прервать;
											
										КонецЕсли;
										
									КонецЦикла
									
									
									
								КонецЕсли;
							
								Если ГТИН<>"00000000000000" Тогда
									Прервать;
								КонецЕсли;
							
							
							
							
						КонецЕсли;
						
					КонецЦикла
					
					
					
				КонецЕсли;
				
				//Проудкция=Неопределено;
				Продукция=ПредопределенноеЗначение("Справочник.Продукция_ХамелеонЦРПТ.ПустаяСсылка");
				Если ГТИН<>"00000000000000" Тогда
					Продукция=СоздатьНайтиGTIN(ГТИН);
				КонецЕсли;
					КоличествоКМ=Макс(1,НСтроки.Количество()); 
					Если ЗначениеЗаполнено(Продукция) тогда
						НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Добав.НомерСтрокиСвязи));
							НСТР=НСТР[0];
							НСТР.GTIN=Продукция;
							//				КонецЕсли;
					
					
		//					Добав=Объект.СерийныеНомера.Добавить();
		Если ПриЗагрузкеИнформацииПоЭДОПриемкаВКоличество=Истина Тогда
			                    НСТР.КоличествоНомеровКМ=НСТР.КоличествоНомеровКМ+КоличествоКМ;
					КонецеслИ;
						
	//	Иначе
							Добав.КоличествоКМ=КоличествоКМ;
	//					КонецЕсли;
//							Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
							Добав.НаименованиеТовараСтрокой=НСТр.НаименованиеТовара;
																 
							Добав.НаименованиеТовара=Продукция;
							Если ЗначениеЗаполнено(Продукция)   Тогда
								Добав.GTIN=ГТИН;
							КонецЕсли;
					КонецЕсли;
							
		//				Исключение
		//				КонецПопытки;
					
		Конеццикла;

			
		Иначе
					Объект.Товары.Очистить();
	
	Для КаждоГо Добав Из объект.СерийныеНомера Цикл
		
		
		
		Нстроки=Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба",Добав.cis));
		ГТИН="00000000000000";
		Если НСтроки.Количество()=0 Тогда
			Если СтрДлина(Добав.cis)>18 Тогда
				ГТИН=ДополнитьСтроку(Сред(Добав.cis,3,14))
			КонецЕсли;
		Иначе
			Для Каждого Стр_11_Н Из НСтроки Цикл
				Если СтрДлина(Стр_11_Н.ШтрихКод)>18 Тогда
					ГТИН=ДополнитьСтроку(Сред(Стр_11_Н.ШтрихКод,3,14));
					Прервать;
						Иначе
							
							НстрокиИщемТут=Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба",Стр_11_Н.ШтрихКод));
								Если НстрокиИщемТут.Количество()=0 Тогда
								Иначе
									Для Каждого Стр_11_Н_2 Из НстрокиИщемТут Цикл
										Если СтрДлина(Стр_11_Н_2.ШтрихКод)>18 Тогда
											ГТИН=ДополнитьСтроку(Сред(Стр_11_Н_2.ШтрихКод,3,14));
											Прервать;
											
				КонецЕсли;
				
			КонецЦикла
			
		КонецЕсли;
		
								Если ГТИН<>"00000000000000" Тогда
									Прервать;
								КонецЕсли;
							
							
							
							
						КонецЕсли;
						
					КонецЦикла
					
					
					
				КонецЕсли;
		//Проудкция=Неопределено;
		Продукция=ПредопределенноеЗначение("Справочник.Продукция_ХамелеонЦРПТ.ПустаяСсылка");
		Если ГТИН<>"00000000000000" Тогда
			Продукция=СоздатьНайтиGTIN(ГТИН);
		КонецЕсли;
			КоличествоКМ=Макс(1,НСтроки.Количество()); 
			Если ЗначениеЗаполнено(Продукция) тогда
				НСтр=Объект.Товары.НайтиСтроки(Новый Структура("GTIN",Продукция));
				Если НСтр.Количество()=0 Тогда
				
					НСТр=Объект.Товары.Добавить();
					Попытка
						НСТр.НаименованиеТовара=Строка(Продукция);
					Исключение
					КонецПопытки;
					НСТр.GTIN=Продукция;
					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
				Иначе
					НСТР=НСТР[0];
//					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
				КонецЕсли;
			Иначе
					НСТр=Объект.Товары.Добавить();
					НСТр.НаименованиеТовара="";
					НСТр.GTIN="";
					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
			КонецЕсли;
			
			
//					Добав=Объект.СерийныеНомера.Добавить();
					Добав.КоличествоКМ=КоличествоКМ;
					НСТР.КоличествоКМ=НСТР.КоличествоКМ+1;
					

					НСТр.Сумма=НСтр.Сумма+Добав.Цена;
					НСтр.НДС=НСТР.НДС+Добав.НДС;
					НСТр.Цена=НСтр.Сумма/НСтр.КоличествоКМ;
					
					
					НСТР.КоличествоНомеровКМ=НСТР.КоличествоНомеровКМ+КоличествоКМ;
					Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
					Добав.НаименованиеТовараСтрокой=НСТр.НаименованиеТовара;
					Добав.НаименованиеТовара=Продукция;
					Если ЗначениеЗаполнено(Продукция)   Тогда
						Добав.GTIN=ГТИН;
					КонецЕсли;
					
//				Исключение
//				КонецПопытки;
		
	Конеццикла;
	КонецЕсли;
КонецЕсли;
//Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
//	
//	
//	Если СтрДлина(Стр_1.cis)=18 Тогда
//		Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба",Стр_1.cis)).Количество()=0 Тогда
//			
//			 РекурсияУпаковкиДляАнализа(Стр_1.cis,Thumbprint_1,СРегистра,ИННПоставщика);
//		 КонецЕсли;
//	 КонецЕсли;
//	 
// Конеццикла;

	Сообщить("Загружено "+Строка(1));		
		
	
	ЗагрузитьобновитьПроверкуПросту()
	
КонецПроцедуры

&НаКлиенте
Процедура РекурсияПоПолучениюИнформации_2(Карта,УжеЗапрашивали,Марка,HTTPСервисЗапрос,Thumbprint_1,СРегистра,БылиУпаковки,МассивКМ)
	
	что=Thumbprint_1.Что;
	Если Карта<>Неопределено И Карта["children"]<>Неопределено Тогда
		
		ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка");
			
		МассивКМ.Добавить(Новый Структура("КМ,Тип",Марка,ТипУпаковки));
		
		Для Каждого Стр_К Из Карта["children"] Цикл
		
			ШтрихКод=Стр_к["cis"];
			ДобавК=Объект.Короба.Добавить();
			ДобавК.НомерКороба=Марка;
			ДобавК.ШтрихКод=ШтрихКод;
			
			РекурсияПоПолучениюИнформации_2(Стр_к["children"],УжеЗапрашивали,ШтрихКод,HTTPСервисЗапрос,Thumbprint_1,СРегистра,БылиУпаковки,МассивКМ)
			//Если ЗначениеЗАполнено(Стр_к["countChildren"]) 
			//	И число(Стр_к["countChildren"])>0
			//	Тогда

			//	ПолучитьИнформациюОКМ_ПоСтранично(ШтрихКод,Thumbprint_1,СРегистра,БылиУпаковки,УжеЗапрашивали);
			
			//Конецесли;
		Конеццикла;
	ИначеЕсли Карта<>Неопределено Тогда
			ШтрихКод=Карта["cis"];
			Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба",ШтрихКод)).Количество()=0 
				И Объект.Короба.НайтиСтроки(Новый Структура("ШтрихКод",ШтрихКод)).Количество()=0 Тогда
				ДобавК=Объект.Короба.Добавить();
				ДобавК.НомерКороба=Марка+" UNIT";
				ДобавК.ШтрихКод=Марка;
			Конецесли;
					
			
			//
			Если Карта["packType"]="UNIT" Тогда
				
						
			ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Штука");
			
		//Конецесли;
		МассивКМ.Добавить(Новый Структура("КМ,Тип",Марка,ТипУпаковки));
		
		ГТИН_1=Сред(ШтрихКод,3,14);
		Если УжеЗапрашивали.Найти(ГТИН_1)=Неопределено Тогда
		
					
			HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ШтрихКод)+"&pg="+что);;
			//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ШтрихКод)+"&pg="+что);;

			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);

			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			Если Ответ.КодСостояния=200 ИЛИ Ответ.КодСостояния=202 Тогда
				Текст1=Ответ.ПолучитьТелоКакСтроку();
				ГТИН="";                                                               Тотал=0;числоЗагрузили=0;
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке(Текст1,"",Тотал,числоЗагрузили,Thumbprint_1,ГТИН);
			Иначе
						
						ГТИН="";
						ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке_Соответвтвие(Карта,"",Тотал,числоЗагрузили,Thumbprint_1,ГТИН);
								
			//	Вызватьисключение ГТИН;
			КонецЕсли;				
				УжеЗапрашивали.Добавить(ГТИН_1);
		КонецЕсли ;
		Иначе
						ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка");
							МассивКМ.Добавить(Новый Структура("КМ,Тип",Марка,ТипУпаковки));
		
		
		Конецесли;
//		Если Не ЗначениеЗаполнено(Стр_11.НаименованиеТовара) тогда
//			Стр_11.НаименованиеТовара=СоздатьНайтиGTIN(ГТИН);
//		КонецЕсли;
	
	
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьИнформацию1(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	//Обр=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	//Если Обр.Организации.Количество()=0 Тогда
	//	Обр.ПодключитьсяКЦРПТ(Команда,Ложь);
	//КонецЕсли;
	//Если Обр.Организации.Количество()=0 Тогда
	//	Возврат;
	//КонецЕсли;
	//		
	Если Элементы.СерийныеНомера1.ТекущиеДанные<>Неопределено Тогда
	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюПоКМ(ДеревоКМ,Элементы.СерийныеНомера1.ТекущиеДанные.cis,Объект.ТекущийПользователь,Субъект(Объект.ОрганизацияПолучатель_Лекарства));
	Элементы.Страницы.ТекущаяСтраница=Элементы.ИнформацияОКМ;
	ПодсчетКоличестваВДереве();
	КонецЕсли;
	

КонецПроцедуры


&НаКлиенте
Процедура ВывестиОтчет1(Команда)
		// Вставить содержимое обработчика.
	МассивКМ=Новый СписокЗначений;
	Для Каждого Стр Из Элементы.СерийныеНомера1.ВыделенныеСтроки Цикл
		Стр_1=Объект.СерийныеНомера.НайтиПоИдентификатору(Стр);
		Если ЗначениеЗаполненО(Стр_1.cis) Тогда
			МассивКМ.Добавить(Стр_1.cis);
		КонецЕсли;
		
	Конеццикла;
	
	Форм=ОткрытьФорму("Отчет.ОтчетПоКМ_ХамелеонЦРПТ.Форма.ФормаОтчета");
	Форм.ПрименитьОтбор(МассивКМ);
	

КонецПроцедуры


&НаКлиенте
Процедура ПолучитьСтатусыПоКМ1(Команда,ТолькоА=Ложь)
		// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	МассивКМ=Новый Массив;
	Для каждого Стр_1 Из Объект.СерийныеНомера1 Цикл
		
		Если ВРЕГ(Стр_1.статус)="INTRODUCED" ИЛИ (Врег(Стр_1.Статус)="APPLIED" И ТолькоА=Ложь) Тогда
			Продолжить;
		КонецЕсли;
		Стр_1.Статус="Не найдено в ЦРПТ";
		Стр_1.ВОбороте=Ложь;
		МассивКМ.Добавить(Стр_1.cis);
	Конеццикла;	
	ОбработатьстатусыКМ1(МассивКМ);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьстатусыКМ1(МассивКМ)
	
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
	
	
	СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
	СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
	Если Не ЗначениеЗаполнено(СРегистра)  Тогда
		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
	Иначе
		   	
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
			Прокси=Новый ИнтернетПрокси;
			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		Иначе
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
				
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
		Если Ответ.КодСостояния<>200 Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Сообщить("Не удалось подключиться к ЦРПТ");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Срегистра) Тогда
		Возврат;
	КонецЕсли;

		
		
	
	
   НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();

   Если НаСервере Тогда
	// Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Стр_1.Марка);  
	Иначе
		Пока МассивКМ.Количество()>0 Цикл
		 	МассивОпределям=Новый Массив;
			МассивОпределям.Очистить();
			КоличествоПр=Мин(50,МассивКМ.Количество());
			Для Сч=1 По КоличествоПр Цикл
				Если Thumbprint_1.НаименованиеСтенда="Табак"
					ИЛИ 
					Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
					Тогда
					НомерКМ=        МассивКМ[0];
					Если Сред(НомеркМ,1,3)="010" Тогда
						НомерКМ="("+Сред(НомерКМ,1,2)+")"+Сред(НомерКМ,3,14)+"("+Сред(НомерКМ,17,2)+")"+Сред(НомерКМ,19);
						
					КонецЕсли;
					
					МассивОпределям.Добавить(НомерКМ);
					
				Иначе
				
					МассивОпределям.Добавить(МассивКМ[0]);
				КонецЕсли;
				МассивКМ.Удалить(0);
			Конеццикла;
		 	ВернутьСтатусы=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьСтатусыПоМассивуКМ(Thumbprint_1,Срегистра,МассивОпределям);
			
			Для Каждого Стр_1 Из ВернутьСтатусы Цикл
				Нстрок=Объект.СерийныеНомера1.НайтиСтроки(Новый Структура("cis",Стр_1.cis));
				Нстрок[0].Статус=Стр_1.Статус;
				Нстрок[0].ВОбороте=Стр_1.ВОбороте;
			Конеццикла;
			
			
		Конеццикла;
		
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьСтатусыПоКМАльтернит1(Команда)
		// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	
	ПроверитьВсеСтатусыНаСервере1();
	

КонецПроцедуры

Процедура ПроверитьВсеСтатусыНаСервере1()
	ЧислоПараллельныхПотоков = РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КоличествоЯдерДляГенерацииDataMatrix;
	МассивЗаданий = Новый Массив;
	ЗаданияПоСтрокам = Новый Соответствие;
	Thumbprint = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);	
	Если Не ЗначениеЗаполнено(Thumbprint) Тогда
		Возврат;
	КонецЕслИ;
	
	Для каждого СерийныйНомер Из Объект.СерийныеНомера1 Цикл
		
		Если ВРЕГ(СерийныйНомер.статус)="INTRODUCED" ИЛИ (Врег(СерийныйНомер.Статус)="APPLIED") Тогда
			Продолжить;
		КонецЕсли;
		
		СерийныйНомер.Статус = Неопределено;
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(СерийныйНомер.cis);
		МассивПараметров.Добавить(Thumbprint);
		
		Если ЧислоПараллельныхПотоков=0 Тогда
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				shoesD="";
				Если Данные <> Неопределено И данные.Свойство("shoesData",shoesD) Тогда
					СерийныйНомер.Статус = shoesD.status;
				КонецЕсли;
		Иначе
			Попытка
				Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара", МассивПараметров);
				ЗаданияПоСтрокам.Вставить(Задание.УникальныйИдентификатор, СерийныйНомер);
				МассивЗаданий.Добавить(Задание);
				
				Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
					ЗаполнитьСтатусыСерийныхНомеров_ВТаблице(ЗаданияПоСтрокам, МассивЗаданий); 
				КонецЕсли;
			Исключение
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				shoesD="";
				Если Данные <> Неопределено И данные.Свойство("shoesData",shoesD) Тогда
					СерийныйНомер.Статус = shoesD.status;
				КонецЕсли;
					
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивЗаданий.Количество() >= 0 Тогда
		ЗаполнитьСтатусыСерийныхНомеров_ВТаблице(ЗаданияПоСтрокам, МассивЗаданий); 
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьСтатусыКМВсе1(Команда)
		// Вставить содержимое обработчика.
	МассивКМ=Новый Массив;
	Для каждого Стр_1 Из Объект.СерийныеНомера1 Цикл
		Стр_1.Статус="Не найдено в ЦРПТ";
		Стр_1.ВОбороте=Ложь;
		
		МассивКМ.Добавить(Стр_1.cis);
	Конеццикла;	
	ОбработатьстатусыКМ1(МассивКМ);

КонецПроцедуры


&НаКлиенте
Процедура ПолучитьСтатусыAPPLIED1(Команда)
		ПолучитьСтатусыПоКМ1(Команда,истина)	

КонецПроцедуры


&НаКлиенте
Процедура ПроверитьСтатусыПоВыделенным1(Команда)
		// Вставить содержимое обработчика.
	МассивКМ=Новый Массив;
	Для каждого Стр_2 Из Элементы.СерийныеНомера1.ВыделенныеСтроки Цикл
		Стр_1=Объект.СерийныеНомера1.НайтиПоИдентификатору(Стр_2);
		Стр_1.Статус="Не найдено в ЦРПТ";
		Стр_1.ВОбороте=Ложь;
		
		МассивКМ.Добавить(Стр_1.cis);
	Конеццикла;	
	ОбработатьстатусыКМ1(МассивКМ);
	

КонецПроцедуры


&НаКлиенте
Процедура ПроверитьСтатусыПоВыделеннымАльтернатива1(Команда)
		// Вставить содержимое обработчика.
	ПроверитьСтатусыПоВыделеннымАльтернативаНаСервере1();

КонецПроцедуры

&НаСервере
Процедура ПроверитьСтатусыПоВыделеннымАльтернативаНаСервере1()
	
	ЧислоПараллельныхПотоков = РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КоличествоЯдерДляГенерацииDataMatrix;
	
	МассивЗаданий = Новый Массив;
	ЗаданияПоСтрокам = Новый Соответствие;
	Thumbprint = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);	
	Если Не ЗначениеЗаполнено(Thumbprint) Тогда
		Возврат;
	КонецЕслИ;
	
	Для каждого Стр Из Элементы.СерийныеНомера1.ВыделенныеСтроки Цикл
		
		СерийныйНомер = Объект.СерийныеНомера1.НайтиПоИдентификатору(Стр);
		СерийныйНомер.Статус = Неопределено;
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(СерийныйНомер.cis);
		МассивПараметров.Добавить(Thumbprint);
		
		Если ЧислоПараллельныхПотоков=0 Тогда
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				shoesD="";
				Если Данные <> Неопределено И данные.Свойство("shoesData",shoesD) Тогда
					СерийныйНомер.Статус = shoesD.status;
				КонецЕсли;
		Иначе
			Попытка
				Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара", МассивПараметров);
				ЗаданияПоСтрокам.Вставить(Задание.УникальныйИдентификатор, СерийныйНомер);
				МассивЗаданий.Добавить(Задание);
				
				Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
					ЗаполнитьСтатусыСерийныхНомеров_ВТаблице(ЗаданияПоСтрокам, МассивЗаданий); 
				КонецЕсли;
			Исключение
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				shoesD="";
				Если Данные <> Неопределено И данные.Свойство("shoesData",shoesD) Тогда
					СерийныйНомер.Статус = shoesD.status;
				КонецЕсли;
					
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивЗаданий.Количество() >= 0 Тогда
		ЗаполнитьСтатусыСерийныхНомеров_ВТаблице(ЗаданияПоСтрокам, МассивЗаданий); 
	КонецЕсли;
	
	
КонецПроцедуры



