&НаКлиенте
Перем БылаБлокировка;

&НаКлиенте
Перем ДанныеИзПользователя;
&НаСервереБезКонтекста
Функция ПолучитьТокенСрегистра(Thumbprint_1)
	Возврат Регистрысведений.ТокенПоСертификату_ХамелеонЦРПТ.Получить(Новый Структура("Отпечаток",Thumbprint_1)).Токен;
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьОтветвЗаказ(Ссылка,Ответ_1)
	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Ссылка);
	РегДв.Отбор.Вид.Установить("Получили ответ");
	Добав=РегДв.Добавить();
	Добав.Документ=Ссылка;
	Добав.Вид="Получили ответ";
	Добав.Файл=Новый ХранилищеЗначения(Ответ_1,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
	
КонецПроцедуры

Процедура ПоменятьНаНеУчастнику(Стр_1)
	Стр=Стр_1.ПолучитьОбъект();
	Стр.ОшибкаОтправки="";
	Стр.ОтгрузкаНеУчастника=Истина;
	Стр.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьСтатусПоФармацевтике(Thumbprint_1,МассивКМ)
	
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
					Иначе
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		
		
		

				СРегистра="";///Thumbprint_1.Thumbprint_1;
				Если Не ЗначениеЗаполнено(СРегистра) тогда
					Попытка
						СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
					исключение
						СРегистра=Неопределено;
					КонецПопытки;
				КонецЕсли;
				
				
				
		Пока МассивКМ.Количество()>0 Цикл
		 	МассивОпределям=Новый Массив;
			МассивОпределям.Очистить();
			КоличествоПр=Мин(50,МассивКМ.Количество());
			Для Сч=1 По КоличествоПр Цикл
				МассивОпределям.Добавить(МассивКМ[0]);
				МассивКМ.Удалить(0);
			Конеццикла;
		 	ВернутьСтатусы=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьСтатусыПоМассивуКМ_Лекарства(Thumbprint_1,Срегистра,МассивОпределям);
			
			Для Каждого Стр_1 Из ВернутьСтатусы Цикл
				Нстрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1.cis));
				Нстрок[0].Статус=Стр_1.Статус;
				Попытка
					Нстрок[0].НомерКороба=Стр_1.pack3_id;
				Исключение
				КонецПопытки;
				
			Конеццикла;
			
			
		Конеццикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьстатусыКМ(МассивКМ)
	
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
		
		ОпределитьСтатусПоФармацевтике(Thumbprint_1,МассивКМ);
		
		Возврат;
				 
				 
	КонецЕсли;	
	
	
	СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
	СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
	Если Не ЗначениеЗаполнено(СРегистра)  Тогда
		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
	Иначе
		   	
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
			Прокси=Новый ИнтернетПрокси;
			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		Иначе
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
				
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
		Если Ответ.КодСостояния<>200 Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Сообщить("Не удалось подключиться к ЦРПТ");
			Возврат;
		КонецЕсли;
	КонецЕсли;

		
		
	Если ЧислоПараллельныхПотоков>0 Тогда
		
		
	КонецЕсли;
	
	
   НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();

   Если НаСервере Тогда
	// Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Стр_1.Марка);  
	Иначе
		Пока МассивКМ.Количество()>0 Цикл
		 	МассивОпределям=Новый Массив;
			МассивОпределям.Очистить();
			КоличествоПр=Мин(50,МассивКМ.Количество());
			Для Сч=1 По КоличествоПр Цикл
				Если Thumbprint_1.НаименованиеСтенда="Табак"
					ИЛИ 
					Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
					Тогда
					НомерКМ=        МассивКМ[0];
					Если Сред(НомеркМ,1,3)="010" Тогда
						НомерКМ="("+Сред(НомерКМ,1,2)+")"+Сред(НомерКМ,3,14)+"("+Сред(НомерКМ,17,2)+")"+Сред(НомерКМ,19);
						
					КонецЕсли;
					Если Сред(НомерКМ,1,2)<>"01"
						И Сред(НомерКМ,1,4)<>"(01)"
						Тогда
						НомерКМ=Сред(НомерКМ,1,21);
					Иначе
						НомерКМ=Сред(НомерКМ,1,29);
						
					КонецЕсли;
					
					МассивОпределям.Добавить(НомерКМ);
					
				Иначе
				
					МассивОпределям.Добавить(МассивКМ[0]);
				КонецЕсли;
				МассивКМ.Удалить(0);
			Конеццикла;
		 	ВернутьСтатусы=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьСтатусыПоМассивуКМ(Thumbprint_1,Срегистра,МассивОпределям);
			
			Для Каждого Стр_1 Из ВернутьСтатусы Цикл
				Нстрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1.cis));
				Если НСтрок.Количество()=0 Тогда
					
					Для каждого Стр___20 Из Объект.СерийныеНомера Цикл
						Если найти(Стр___20.cis,Стр_1.cis)=1 Тогда
							Стр___20.Статус=Стр_1.Статус;
							Стр___20.ВОбороте=Стр_1.ВОбороте
						КонецЕсли;
					Конеццикла;
					
				Иначе
					Нстрок[0].Статус=Стр_1.Статус;
					Нстрок[0].ВОбороте=Стр_1.ВОбороте;
					Если ЗначениеЗаполнено(Стр_1.ТипУпаковки) Тогда
						Если Стр_1.ТипУпаковки="UNIT" Тогда
							Нстрок[0].ТипУпаковки=Предопределенноезначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Штука")
						Иначе
							Нстрок[0].ТипУпаковки=Предопределенноезначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка")
						КонецЕслИ;
					КонецЕсли;
				КонецЕсли;
				
				
			Конеццикла;
			
			
		Конеццикла;
		
		
	КонецЕсли;
	
	ИзменитьВидимость();
КонецПроцедуры

Функция ПолучитьИзПользователя()
	    Струк=Неопределено;
	Если Объект.Организация.ИНН=ТекущийПользователь.Организация.ИНН 
		И Объект.ТекущийПользователь.СайтыВходаВСистему=ТекущийПользователь.СайтыВходаВСистему Тогда
		Струк=Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(ТекущийПользователь);
	ИначеЕсли Объект.ТекущийПользователь.ПометкаУдаления=Ложь Тогда
		Струк=Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);
		
		
	Иначе
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Пользователи_ХамелеонЦРПТ КАК Пользователи_ХамелеонЦРПТ
		|ГДЕ
		|	Пользователи_ХамелеонЦРПТ.Организация.ИНН = &Организация
		|	И Пользователи_ХамелеонЦРПТ.СайтыВходаВСистему = &СайтыВходаВСистему
		|	И НЕ Пользователи_ХамелеонЦРПТ.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация.ИНН);
	Запрос.УстановитьПараметр("СайтыВходаВСистему", Объект.ТекущийПользователь.СайтыВходаВСистему);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НайтиПольз=Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		                      НайтиПольз=ВыборкаДетальныеЗаписи.Ссылка
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		
		//НайтиПольз=Справочники.Пользователи_ХамелеонЦРПТ.НайтиПоРеквизиту("Организация",Объект.Организация);
		Если ЗначениеЗаполнено(НайтиПольз) Тогда
			Струк=Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(НайтиПольз);
		КонецЕсли;
		
	КонецЕслИ;
	
	
	Если ЗначениеЗаполнено(Струк) тогда
	
		Струк.Вставить("РасчетОстатков",РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().РасчетОстатков);
	
		Возврат Струк;
	Иначе
		Возврат Неопределено
	КонецЕсли;
КонецФункции

Процедура ЗапишемВРегистр_Ответ(ТекстДокумент)
	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Объект.Ссылка);
	РегДв.Отбор.Вид.Установить("Получили ответ");
	Добав=РегДв.Добавить();
	Добав.Документ=ОБъект.Ссылка;
	Добав.Вид="Получили ответ";
	Добав.Файл=Новый ХранилищеЗначения(ТекстДокумент,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ОчиститьТокенСрегистра(ТТ)
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(ТТ,"")
КонецПроцедуры

Функция ЗагрузканаСервереОтправитьЦРПТ(Thumbprint_1,СРегистра,УжеОтправили,Тело)
	     
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
	
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/shipment/create");
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Текст1);
	КонецЕсли;
		
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
		ИЛИ Ответ.КодСостояния=201 
		Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			Объект._Order_ID=Текст1;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Запись));
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
			Возврат Истина;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				Возврат ложь
			КонецЕсли
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	Возврат Истина
КонецФункции

Функция ВернутьУНИКУМ()
	Возврат xmlString(Новый УникальныйИдентификатор())
КонецФункции

функция СформироватьXmlФайлИмпортCSV()
	
	
	
	Текст=Новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку("ИНН отправителя,ИНН получателя,ИНН собственника,Дата отгрузки товара,Номер первичного документа,Дата первичного документа,Вид оборота товаров,Причина вывода из оборота, Дата вывода из оборота,Идентификатор гос.контракта,Отгрузка неучастнику,Версия");
	
	Продажа="Продажа";
	Если Объект.ВидТоварооборота=Перечисления.ВидТоварооборота_ХамелеонЦРПТ.AGENT Тогда
		Продажа="Агент";
	ИначеЕсли Объект.ВидТоварооборота=Перечисления.ВидТоварооборота_ХамелеонЦРПТ.COMMISSION ТОгда
		Продажа="Комиссия";
		
	Конецесли;
	
	ТекстС=Объект.Организация.Инн+","+Объект.Контрагент.ИНН+","+Объект.Организация.ИНН+","+формат(объект.ДатаПередачиТовара,"ДЛФ=Д")+","+объект.НомерПервичногоДокумента+","+
	формат(объект.Дата,"ДЛФ=Д")+","+Продажа+",,,,";
	если объект.ОтгрузкаНеУчастника тогда
		ТекстС=ТекстС+"да"
	иначе
		ТекстС=ТекстС+"нет"
	конецесли;
	ТекстС=ТекстС+",4";
	Текст.ДобавитьСтроку(ТекстС);
	
	Текст.ДобавитьСтроку("Параметры товаров");
	Текст.ДобавитьСтроку("КИ,КИТУ,Цена за единицу,Сумма НДС");
	
	
	НетВКоробе=Ложь;
	
	Коэффициент=1;
	Если ПриОтправкеВCSVУмножатьСуммыНа100=Истина тогда
		Коэффициент=100;
	Конецесли;
	
	Если Объект.ОтправлятьКМВместоАгрегаций Тогда
		
		Объект.СтарыеКоробки.Очистить();
		//УдаляемКоробки=Новый Массив;
			Для Каждого Стр Из Объект.СерийныеНомера Цикл
				
				НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
				НСтр=НСтр[0];
				
				
				строказ="";
				если стр.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка тогда 
					СписокКМ=Новый Массив;
					СписокКМ.Очистить();
					//Былcis=Ложь;
					Для Каждого Стр_Агр Из ДеревоКМ.ПолучитьЭлементы() Цикл
						Если  Стр_Агр.cis=стр.cis Тогда
							Былcis=Истина;
							
								Для Каждого Стр_Агр_1 Из Стр_Агр.ПолучитьЭлементы() Цикл
									Если Стр_Агр_1.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
										Возврат Неопределено;
									Иначе
										СписокКМ.Добавить(Стр_Агр_1.НомерКМ);
										
										Добав_Ст=Объект.СтарыеКоробки.Добавить()
										
										
									КонецЕсли;
								Конеццикла;
							КонецЕсли;	
												Конеццикла;
					Если СписокКМ.Количество()=0 Тогда
						Возврат Неопределено;
					КонецЕсли;
					//КонецЕсли;
					Для Каждого Стр_111 Из СписокКМ Цикл
						
						строказ="";
						если найти(Стр_111,"""")>0 или
							найти(Стр_111,",")>0  тогда
							строказ=строказ+""""+стрзаменить(Стр_111,"""","""""")+""",,"
						иначе
							строказ=строказ+Стр_111+",,"
							
						конецесли;
						
						
						
						строказ=строказ+""""+стрзаменить(xmlstring(Окр(НСтр.цена/СписокКМ.Количество(),2)*Коэффициент),".",",")+""","""+
						стрзаменить(xmlstring(окр(НСтр.Ндс*Коэффициент/(НСтр.количествокм*СписокКМ.Количество()),2)),".",",")+"""";
						Текст.ДобавитьСтроку(строказ);
						
					Конеццикла;
					
					//строказ=строказ+","+стр.cis+","
				иначе
					если найти(стр.cis,"""")>0 или
						найти(стр.cis,",")>0  тогда
						строказ=строказ+""""+стрзаменить(стр.cis,"""","""""")+""",,"
					иначе
						строказ=строказ+стр.cis+",,"
						
					конецесли;
					
				
					строказ=строказ+""""+стрзаменить(xmlstring(НСтр.цена*Коэффициент),".",",")+""","""+
					стрзаменить(xmlstring(окр(НСтр.Ндс*Коэффициент/НСтр.количествокм,2)),".",",")+"""";
					Текст.ДобавитьСтроку(строказ);
					
				конецесли;
				
				
				
		конеццикла;
	Иначе
	//Чтение.ЗаписатьНачалоЭлемента("signs");
			Для Каждого Стр Из Объект.СерийныеНомера Цикл
				
				НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
				НСтр=НСтр[0];
				
				
				строказ="";
				если стр.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка тогда 
					строказ=строказ+","+стр.cis+","
				иначе
					если найти(стр.cis,"""")>0 или
						найти(стр.cis,",")>0  тогда
						строказ=строказ+""""+стрзаменить(стр.cis,"""","""""")+""",,"
					иначе
						строказ=строказ+стр.cis+",,"
						
					конецесли;
					
					
				конецесли;
				
				
					строказ=строказ+""""+стрзаменить(xmlstring(НСтр.цена*Коэффициент),".",",")+""","""+
					стрзаменить(xmlstring(окр(НСтр.Ндс*Коэффициент/НСтр.количествокм,2)),".",",")+"""";
			Текст.ДобавитьСтроку(строказ);
				
				
		конеццикла;
	КонецЕсли;
	 	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст.ПолучитьТекст());
	КонецЕсли;
//Конеццикла;

возврат  Текст.ПолучитьТекст()
	
	
КонецФункции


Функция СформироватьXmlФайлИмпортXML()
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("shipment");
	Чтение.ЗаписатьАтрибут("action_id","10");
	Чтение.ЗаписатьАтрибут("version","3");
	
	Чтение.ЗаписатьНачалоЭлемента("trade_participant_inn_sender");
	Чтение.ЗаписатьТекст(Объект.Организация.ИНН);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("trade_participant_inn_receiver");
	Чтение.ЗаписатьТекст(Объект.Контрагент.ИНН);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("trade_participant_inn_owner");
	Чтение.ЗаписатьТекст(Объект.Организация.ИНН);
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Чтение.ЗаписатьНачалоЭлемента("transfer_date");
	Чтение.ЗаписатьТекст(Формат(Объект.ДатаПередачиТовара,"ДФ=""дд.ММ.гггг"""));
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("move_document_number");
	Чтение.ЗаписатьТекст(Объект.НомерПервичногоДокумента);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("move_document_date");
	Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""дд.ММ.гггг"""));
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("turnover_type");
	Если ЗначениеЗаполнено(Объект.ВидТоварооборота) Тогда
		Чтение.ЗаписатьТекст(xmlString(Объект.ВидТоварооборота));
		
	Иначе
		//Чтен.ЗаписатьЗначение("SALE");
		Чтение.ЗаписатьТекст("SELLING");
	КонецЕсли;
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("to_not_participant");
	Если Объект.ОтгрузкаНеУчастника Тогда 
		Чтение.ЗаписатьТекст("true");
	Иначе
		Чтение.ЗаписатьТекст("false");
	КонецЕсли;
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("products_list");
	
Для Каждого Стр_1 Из Объект.Товары Цикл
	
	//Чтение.ЗаписатьНачалоЭлемента("signs");
	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
	Если Объект.ОтправлятьКМВместоАгрегаций Тогда
		
		Для Каждого Стр_c Из НСтрок Цикл
			Чтение.ЗаписатьНачалоЭлемента("product");
			
			
			
			если Стр_c.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка тогда 
					СписокКМ=Новый Массив;
					СписокКМ.Очистить();
					//Былcis=Ложь;
					Для Каждого Стр_Агр Из ДеревоКМ.ПолучитьЭлементы() Цикл
						Если  Стр_Агр.cis=Стр_c.cis Тогда
							Былcis=Истина;
							Если Стр_Агр.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
								Для Каждого Стр_Агр_1 Из Стр_Агр.ПолучитьЭлементы() Цикл
									Если Стр_Агр_1.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
										Возврат Неопределено;
									Иначе
										СписокКМ.Добавить(Стр_Агр_1.НомерКМ);
										
									КонецЕсли;
								Конеццикла;
								
							Иначе
								СписокКМ.Добавить(Стр_Агр.НомерКМ);
									////если найти(Стр_Агр.НомерКМ,"""")>0 или
										//найти(Стр_Агр.НомерКМ,",")>0  тогда
										//строказ=строказ+""""+стрзаменить(Стр_Агр.НомерКМ,"""","""""")+""",,"
									//иначе
									//	строказ=строказ+Стр_Агр.НомерКМ+",,"
										
									//конецесли;
							
								КонецЕсли;
							КонецЕсли;
						
					Конеццикла;
					Если СписокКМ.Количество()=0 Тогда
						Возврат Неопределено;
					КонецЕсли;
					//КонецЕсли;
					Для Каждого Стр_111 Из СписокКМ Цикл
Чтение.ЗаписатьНачалоЭлемента("kit");
				
				Штрих=Стр_111;
							
							Чтение.ЗаписатьТекст(Штрих);
							Чтение.ЗаписатьКонецЭлемента();
							
							Если ЗначениеЗаполнено(Стр_1.Цена) тогда
								Чтение.ЗаписатьНачалоЭлемента("cost");
								
								Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.Цена/СписокКм.Количество(),2)*100));
								Чтение.ЗаписатьКонецЭлемента();
								
								Если ЗначениеЗАполнено(Стр_1.НДС) И ЗначениеЗАполнено(Стр_1.КоличествоКМ) ТОгда
									
									Чтение.ЗаписатьНачалоЭлемента("vat_value");				
									Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.НДС*100/(Стр_1.КоличествоКМ*СписокКм.Количество()),2)));
									Чтение.ЗаписатьКонецЭлемента();
									
								Иначе
									Чтение.ЗаписатьНачалоЭлемента("vat_value");				
									Чтение.ЗаписатьТекст(xmlString(0));
									Чтение.ЗаписатьКонецЭлемента();
									
								КонецЕсли;
							КонецЕсли;
							Чтение.ЗаписатьКонецЭлемента();
							
						
												
					Конеццикла;
					
					//строказ=строказ+","+стр.cis+","
			Иначе
				Чтение.ЗаписатьНачалоЭлемента("kit");
				
				Штрих=Стр_c.cis;
							
							Чтение.ЗаписатьТекст(Штрих);
							Чтение.ЗаписатьКонецЭлемента();
							
							Если ЗначениеЗаполнено(Стр_1.Цена) тогда
								Чтение.ЗаписатьНачалоЭлемента("cost");
								
								Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.Цена,2)*100));
								Чтение.ЗаписатьКонецЭлемента();
								
								Если ЗначениеЗАполнено(Стр_1.НДС) И ЗначениеЗАполнено(Стр_1.КоличествоКМ) ТОгда
									
									Чтение.ЗаписатьНачалоЭлемента("vat_value");				
									Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.НДС*100/Стр_1.КоличествоКМ,2)));
									Чтение.ЗаписатьКонецЭлемента();
									
								Иначе
									Чтение.ЗаписатьНачалоЭлемента("vat_value");				
									Чтение.ЗаписатьТекст(xmlString(0));
									Чтение.ЗаписатьКонецЭлемента();
									
									
								КонецЕсли;
							КонецЕсли;
							Чтение.ЗаписатьКонецЭлемента();
							
				
				
			КонецЕсли;
			
					 	//Чтение.ЗаписатьКонецЭлемента();
			
		Конеццикла;		
	Иначе
		Для Каждого Стр_c Из НСтрок Цикл
			Чтение.ЗаписатьНачалоЭлемента("product");
			
			
			
			Если Стр_c.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда	
				Чтение.ЗаписатьНачалоЭлемента("kitu");
			Иначе
				Чтение.ЗаписатьНачалоЭлемента("kit");
			КонецЕсли;
			
			Штрих=Стр_c.cis;
			
			Чтение.ЗаписатьТекст(Штрих);
			Чтение.ЗаписатьКонецЭлемента();
			
			Если ЗначениеЗаполнено(Стр_1.Цена) тогда
				Чтение.ЗаписатьНачалоЭлемента("cost");
				
				Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.Цена,2)*100));
				Чтение.ЗаписатьКонецЭлемента();
				
				Если ЗначениеЗАполнено(Стр_1.НДС) И ЗначениеЗАполнено(Стр_1.КоличествоКМ) ТОгда
					
					Чтение.ЗаписатьНачалоЭлемента("vat_value");				
					Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.НДС*100/Стр_1.КоличествоКМ,2)));
					Чтение.ЗаписатьКонецЭлемента();
								Иначе
									Чтение.ЗаписатьНачалоЭлемента("vat_value");				
									Чтение.ЗаписатьТекст(xmlString(0));
									Чтение.ЗаписатьКонецЭлемента();
					
					
				КонецЕсли;
			КонецЕсли;
			Чтение.ЗаписатьКонецЭлемента();
			
		 	//Чтение.ЗаписатьКонецЭлемента();
			
		Конеццикла;
	Конецесли;
Конеццикла;
	Чтение.ЗаписатьКонецЭлемента();
//	Чтение.ЗаписатьКонецЭлемента();
		
	Чтение.ЗаписатьКонецЭлемента();
	
	Текст=Чтение.Закрыть();
	
	 	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
	//МассивТекстов.Добавить(Текст);
	 //Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		//ЗапишемВРегистр(Текст);
	//КонецЕсли;
//Конеццикла;
	Возврат Текст	
КонецФункции

&НаКлиенте
Процедура ОбновитьСначала(Thumbprint_1,УжеОтправили=Ложь)
		
		
	МассивВ=Новый Массив;
	МассивВ.Добавить(Объект.Ссылка);
		
	ВернутьДокументы_Отгрузка=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусыДокументовНаСервереОтгрузка(МассивВ,Объект.ТекущийПользователь,Истина);
	ОбработаноМассив=Новый Массив;
	  СерийныйНомер=Неопределено;
	СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			Попытка
				СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
			исключение
				СРегистра=Неопределено;
			КонецПопытки;
			
		КонецЕсли;
		
СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаемРегистрациюУчастникавИСМП"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"));
	
	

			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
	Для Каждого Стр Из ВернутьДокументы_Отгрузка Цикл
		
		
							Если ЗначениеЗаполнено(Стр.ТипУточненияУПД) Тогда
								Если ЗначениеЗаполнено(Стр.Order_ID_КорректировачнаяУПД) Тогда

СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
							СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
									СерийныйНомер=СтруктураНастроек.СерийныйНомер;
							
								Если Не ЗначениеЗаполнено(СРегистра)  Тогда
									СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
								Иначе
								   
										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
											Прокси=Новый ИнтернетПрокси;
											Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										Иначе
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										КонецЕсли;
										
										HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
										HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
										HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
										//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
										///Константин           
										Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
										//Текст1=Ответ.ПолучитьТелоКакСтроку();
										Если Ответ.КодСостояния<>200 Тогда
											СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
										КонецЕсли;
											
								КонецЕсли;
									
									
									ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюОбУПДОтгрузка(Стр.Order_ID_КорректировачнаяУПД,Объект.ТекущийПользователь,HTTPСервисЗапрос,СерийныйНомер,Срегистра,Thumbprint_1,Стр.Ссылка);
									
								КонецЕсли;
								
							Иначе
		
							Если ЗначениеЗаполнено(Стр.Order_ID_УПД) Тогда

СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
							СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
									СерийныйНомер=СтруктураНастроек.СерийныйНомер;
							
								Если Не ЗначениеЗаполнено(СРегистра)  Тогда
									СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
								Иначе
								   
										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
											Прокси=Новый ИнтернетПрокси;
											Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										Иначе
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										КонецЕсли;
										
										HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
										HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
										HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
										//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
										///Константин           
										Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
										//Текст1=Ответ.ПолучитьТелоКакСтроку();
										Если Ответ.КодСостояния<>200 Тогда
											СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
										КонецЕсли;
											
								КонецЕсли;
								
								
								ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюОбУПДОтгрузка(Стр.Order_ID_УПД,Объект.ТекущийПользователь,HTTPСервисЗапрос,СерийныйНомер,Срегистра,Thumbprint_1,Стр.Ссылка);
								
							КонецЕсли;
							КонецЕслИ;
		
		
		
		

		
							//Если СписокСтатусов.НайтиПоЗначению(Стр.Статус)=Неопределено тогда
								
							//	Если Стр.НадоПринять<>Ложь Тогда
							//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИПринятьПриход(Стр.Ссылка,Стр);
//						КонецЕсли;
						
//								
//			Продолжить;
//		КонецЕсли;
		
		
		
		
 			что=Thumbprint_1.что;
	
								
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body?pg="+Что);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
			
			
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.status="CHECKED_NOT_OK" ИЛИ NNN.status="PARSE_ERROR"  Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
							
						
						
					ИначеЕсли 	NNN.status="WAIT_ACCEPTANCE" Тогда
						НадоПринять=Ложь;
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"",);
						
						Если НадоПринять<>Ложь Тогда
							ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИПринятьПриход(Стр.Ссылка,НадоПринять);
						КонецЕсли;
						
					ИначеЕсли 	NNN.status="CANCELLED" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
						
					ИначеЕсли NNN.Status="WAIT_PARTICIPANT_REGISTRATION" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаемРегистрациюУчастникавИСМП"),"");
						
					ИначеЕсли NNN.Status="ACCEPTED" 
						ИЛИ NNN.Status="CHECKED_OK"
						Тогда
																		Если Стр.ОтгрузкаНеУчастника И Стр.ВыводИзОборота Тогда
								ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),NNN);
Иначе
						НадоЗагружатьОтвет=Истина;
	КонецЕсли;				///	ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),NNN);
						
					КонецЕсли;
				
				ОбработаноМассив.Добавить(Стр);
				a=1
		ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
				Если УжеОтправили=Истина Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
				Иначе
					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
					
					ОбновитьСначала(Thumbprint_1,Истина);			
					Возврат;
				КонецЕсли
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				    ОшибкаОтправки="";
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Попытка
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
				КонецПопытки;
		//	ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
		

		КонецЕсли;
		
		
	Конеццикла;
	
	

КонецПроцедуры

Функция ВернутьНовыйСтатус()
	Возврат Объект.Ссылка.Статус
Конецфункции


Функция ПроверкаПоКоробам(МассивДокументовДляОтправки,ЗаменитьКМ,МассиивОбновитьД)
	МассивКоробовНеправильных=Новый Массив;
	Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		Если Стр_1.Статус="DISAGGREGATION" Тогда
			МассивКоробовНеправильных.Добавить(Стр_1.cis);
		КонецЕсли;
	Конеццикла;
	
	МассивДокументовДляОтправки=Новый Массив;
	ЗаменитьКМ=Новый Массив;
	Для Каждого Стр_1 Из МассивКоробовНеправильных Цикл
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		// Данный фрагмент построен конструктором.
		// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВспомогательныйДляОшибочноРазагрегированныхКоробов_ХамелеонЦРПТ.АгрегацияСтарая,
			|	ВспомогательныйДляОшибочноРазагрегированныхКоробов_ХамелеонЦРПТ.АгрегацияНовая
			|ИЗ
			|	РегистрСведений.ВспомогательныйДляОшибочноРазагрегированныхКоробов_ХамелеонЦРПТ КАК ВспомогательныйДляОшибочноРазагрегированныхКоробов_ХамелеонЦРПТ
			|ГДЕ
			|	ВспомогательныйДляОшибочноРазагрегированныхКоробов_ХамелеонЦРПТ.Отгрузка = &Отгрузка
			|	И ВспомогательныйДляОшибочноРазагрегированныхКоробов_ХамелеонЦРПТ.КМ = &КМ";
		
		Запрос.УстановитьПараметр("КМ", Стр_1);
		Запрос.УстановитьПараметр("Отгрузка", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Обработано=Ложь;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
			Если ВыборкаДетальныеЗаписи.АгрегацияНовая.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан тогда
				ЗаменитьКМ.Добавить(Новый Структура("СтарыйКМ,НовыйКМ",Стр_1,ВыборкаДетальныеЗаписи.АгрегацияНовая.НомерКороба));
				Обработано=Истина;
				Сообщить("Создан и отправлен документ "+Строка(ВыборкаДетальныеЗаписи.АгрегацияНовая));
				Прервать;
			ИначеЕсли ВыборкаДетальныеЗаписи.АгрегацияНовая.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПодготовленКОтправке
				ИЛИ Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.АгрегацияНовая.Статус) Тогда
				Обработано=Истина;
				//МассивДокументовДляОтправки.Добавить(ВыборкаДетальныеЗаписи.АгрегацияНовая);
				МассивДокументовДляОтправки.Добавить(ВыборкаДетальныеЗаписи.АгрегацияНовая);
			ИначеЕсли ВыборкаДетальныеЗаписи.АгрегацияНовая.Статус<>Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ Тогда
				Обработано=Истина;
				МассиивОбновитьД.Добавить(ВыборкаДетальныеЗаписи.АгрегацияНовая);
				
			КонецЕсли;
		КонецЦикла;
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		Если Обработано=Ложь Тогда
			///Создаем новую агрегацию, если конечно другую найдем
				//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			// Данный фрагмент построен конструктором.
			// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Ссылка
				|ИЗ
				|	Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ КАК СозданиеНовогоШкНаКороба_ХамелеонЦРПТ
				|ГДЕ
				|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Организация = &Организация
				|	И СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.НомерКороба = &НомерКороба
				|	И СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Статус = &Статус";
			
			Запрос.УстановитьПараметр("НомерКороба", Стр_1);
			Запрос.УстановитьПараметр("Организация", Объект.Организация);
			Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				// Вставить обработку выборки ВыборкаДетальныеЗаписи
				Старая=ВыборкаДетальныеЗаписи.Ссылка;
				СозданиеАгрегации=Документы.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(СозданиеАгрегации,Старая,,"Номер,Статус,_Order_ID,НомерКороба");
				СозданиеАгрегации.Дата=ТекущаяДата();
				Для КаждогО Стр_11 Из Старая.Марки Цикл
					Добав=СозданиеАгрегации.Марки.Добавить();
					ЗаполнитьЗначенияСвойств(Добав,Стр_11);
				Конеццикла;
				
				Обработки._Запуск_ХамелеонЦРПТ.СформироватьСлучайныйКоробСервер(СозданиеАгрегации,"");
				СозданиеАгрегации.Записать();
				РегДвиж=РегистрыСведений.ВспомогательныйДляОшибочноРазагрегированныхКоробов_ХамелеонЦРПТ.СоздатьНаборЗаписей();
				РегДвиж.Отбор.Отгрузка.Установить(Объект.Ссылка);
				РегДвиж.Отбор.КМ.Установить(Стр_1);
				ДобавРег=РегДвиж.Добавить();
				ДобавРег.КМ=Стр_1;
				ДобавРег.Отгрузка=Объект.Ссылка;
				ДобавРег.АгрегацияСтарая=Старая;
				ДобавРег.АгрегацияНовая=СозданиеАгрегации.Ссылка;
				РегДвиж.Записать(истина);
				МассивДокументовДляОтправки.Добавить(СозданиеАгрегации.Ссылка);
				
				
			КонецЕсли;
			
			//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		КонецЕсли;
		

		
	Конеццикла;
	возврат МассивКоробовНеправильных.Количество()>0
КонецФункции

&НаСервереБезКонтекста
Функция Табак(ТекущийПользователь,Фарма)
	Фарма=ТекущийПользователь.СайтыВходаВСистему.Наименование="Фармацевтика";
	Возврат   ТекущийПользователь.СайтыВходаВСистему.Наименование<>"Табак"
КонецФункции
&НаКлиенте
Функция ПроверитьПоКМ() Экспорт
	Если ПриОтправкеВЦРТИЭДОПроверятьСтатусКМ Тогда
		
		Фарма=Ложь;
		Табак=Табак(Объект.ТекущийПользователь,Фарма);
		Если Фарма=Истина тогда
			Возврат Истина;
		Конецесли;
		
		МассивКМ=Новый Массив;
		Для каждого Стр_2 Из Объект.СерийныеНомера Цикл
			Если Не ЗначениеЗАполнено(Стр_2.Статус) ИЛИ 
				Стр_2.Статус="Не найдено в ЦРПТ" Тогда
				Стр_2.Статус="Не найдено в ЦРПТ";
				Стр_2.ВОбороте=Ложь;
				МассивКМ.Добавить(Стр_2.cis);
			КонецеслИ;
		Конеццикла;	
		ОбработатьстатусыКМ(МассивКМ);
		Для Каждого Стр_22 Из Объект.СерийныеНомера Цикл
			Если Табак=Истина Тогда
				Если Стр_22.Статус="Не найдено в ЦРПТ" ИЛИ Сред(СТр_22.Статус,1,2)="КМ" Тогда
					Возврат Ложь;
				Конецесли;
					
				
			Иначе
				Если Стр_22.Статус<>"INTRODUCED" Тогда
					Возврат ЛожЬ;
				Конецесли;
			КонецЕсли;
			
		Конеццикла;
	Конецесли;
	Возврат Истина;
КонецФункции
&НаКлиенте
Процедура ОтправитьВЦРПТ(Команда,УжеОтправили=Ложь) Экспорт
	// Вставить содержимое обработчика.
	
	Если ПроверитьПоКМ()=Ложь Тогда
		Сообщить("Одна из КМ не принадлежит Вам или не введена в оборот!! Документ "+Строка(Объект.Ссылка)+" не отправлен");
		Возврат;
	Конецесли;
	
	
	
	Если Не ЗначениеЗаполнено(Объект.Статус)
		ИЛИ ОБъект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ") ИЛИ Объект.Статус=
		ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ПодготовленКОтправке") Тогда
		
	Иначе
		Возврат;
	КонецЕсли;
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
	
	ОПределитьУпаковки(Thumbprint_1);	
	Попытка
		Форм=Получитьформу("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
		Форм.ЛицензияОпределить_Просто(Thumbprint_1);
	Исключение
	КонецПопытки;
	
	
	
	
	Если ЗначениеЗаполнено(Объект._Order_ID) Тогда
		ОбновитьСначала(Thumbprint_1);
		ЭтаФорма.Прочитать();
		Статус=ВернутьНовыйСтатус();
		
		Если Не ЗначениеЗаполнено(Объект.Статус)
			ИЛИ Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ") ИЛИ Статус=
			ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ПодготовленКОтправке") Тогда
			
		Иначе
			Возврат;
		КонецЕсли;
		Если Объект.ПометкаУдаления Тогда
			объект.ПометкаУдаления=Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	
	еСЛИ Объект.ОтправлятьКМВместоАгрегаций Тогда 
		ПоказатьИнформацию(Команда)
	КонецЕсли;
//	Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
//		Если Не ЗначениеЗаполнено(Стр_1.ТипУпаковки) тогда
			

			
//		Конецесли;
		
//	Конеццикла;
	
	
	Если        Thumbprint_1.РасчетОстатков Тогда
		Подсчитать(Команда);
	КонецЕсли;
	
	ЭтаФорма.Записать();
	
Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
			
		СформироватьФайлДляОтправки=СформироватьXmlФайлИмпорт(Thumbprint_1);
			
			
		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
		
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
		
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

				
				Подписанный="";
		//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
	//	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл_ЛДМП(СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Ложь);
		//	Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл_ЛДМП(СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Ложь);
				
				
		//	КонецЕсли;
		
		//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//Подписанный,КодировкаТекста.UTF8,Ложь));
		
					Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
				Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
				 Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("document");
	Чтен.ЗаписатьЗначение(Добав);
	Чтен.ЗаписатьИмяСвойства("sign");
	Чтен.ЗаписатьЗначение(Подписанный);
	Чтен.ЗаписатьИмяСвойства("request_id");
	Чтен.ЗаписатьЗначение(ВернутьУНИКУМ());
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();
	
				 
				 
		//Тело="{
		//|""doc_type"":""311"",
		//|""document"":"""+Добав+""",
		//|""sign"":"""+Подписанный+""",
		//|""request_id"":"""+ВернутьУНИКУМ()+"
		//|}";
			
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/send");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		
		//Возврат;
		
		
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		
	Если Ответ.КодСостояния=200 ИЛИ Ответ.КодСостояния=200  Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Объект._Order_ID=NNN.document_id;
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
				//НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
//				Объект._Order_ID=NNN.orderId;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;

		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Ответ(Текст1);
		КонецЕсли;
		ЭтаФорма.Записать();
		Возврат;
	КонецЕсли;		
	
	
	
	
	
	
	если ВыгружатьCSV=1 
		И (Объект.ОтгрузкаНеУчастника=Ложь И Объект.ВыводИзОборота=Ложь)
		тогда
			СформироватьФайлДляОтправки=СформироватьXmlФайлИмпортCSV();
	                  	
	
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
		
	Подписанный="";
	//СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
	//СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
	Подписанный="";
	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
				Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	
	
	Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
				Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
			Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
			Добав=СтрЗаменить(Добав,"\r\n","");

	Тело="{
	|""product_document"":"""+Добав+""",
	|""document_format"": ""CSV"",
	|""signature"":"""+Подписанный+"""}";
	
	 	Если ОбработкаWEBНаСервере Тогда
		Если НЕ ЗагрузканаСервереОтправитьЦРПТ(Thumbprint_1,СРегистра,УжеОтправили,Тело) Тогда
				Если УжеОтправили=Истина Тогда
				//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОтправитьВЦРПТ(Команда,Истина)			
		КонецЕсли
		
		КонецЕсли;
		
	иначе	
	
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
	
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/shipment/create");
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Текст1);
	КонецЕсли;
		
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
		ИЛИ Ответ.КодСостояния=201 
		Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			Объект._Order_ID=Текст1;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Запись));
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
			Возврат;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОтправитьВЦРПТ(Команда,Истина)			
			КонецЕсли
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
КонецЕсли;
		
		
		возврат
	конецесли;
	
	
	если ВыгружатьCSV=2 
		И (Объект.ОтгрузкаНеУчастника=Ложь И Объект.ВыводИзОборота=Ложь)
		тогда
		/////XML!!!
		
			СформироватьФайлДляОтправки=СформироватьXmlФайлИмпортXML();
	                  	
		Попытка
			Если НеПрошлаПроверкаИмпорт(СформироватьФайлДляОтправки) Тогда
				Объект.ОшибкаОтправки="Проверка документа не прошла по схеме xsd";
			//ПоказатьПредупреждение("");
				Возврат;
				
			КонецЕсли;
			
			
		Исключение
		КонецПопытки;
	
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
		
	Подписанный="";
	//СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
	//СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
	Подписанный="";
	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
				Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	
	
	Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
				Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
			Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
			Добав=СтрЗаменить(Добав,"\r\n","");

	Тело="{
	|""product_document"":"""+Добав+""",
	|""document_format"": ""XML"",
	|""signature"":"""+Подписанный+"""}";
	
	 	Если ОбработкаWEBНаСервере Тогда
		Если НЕ ЗагрузканаСервереОтправитьЦРПТ(Thumbprint_1,СРегистра,УжеОтправили,Тело) Тогда
				Если УжеОтправили=Истина Тогда
				//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОтправитьВЦРПТ(Команда,Истина)			
		КонецЕсли
		
		КонецЕсли;
		
	иначе	
	
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
	
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/shipment/create");
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Текст1);
	КонецЕсли;
		
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
		ИЛИ Ответ.КодСостояния=201 
		Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			Объект._Order_ID=Текст1;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Запись));
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
			Возврат;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОтправитьВЦРПТ(Команда,Истина)			
			КонецЕсли
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
КонецЕсли;
		
		
		возврат
	конецесли;
	
	
	
	
	
	
	/////
			СформироватьФайлДляОтправки=СформироватьXmlФайлИмпорт(Thumbprint_1);
		Попытка
		//	Если НеПрошлаПроверкаИмпорт(СформироватьФайлДляОтправки) Тогда
		//		Объект.ОшибкаОтправки="Проверка документа не прошла по схеме xsd";
				//ПоказатьПредупреждение("");
		//		Возврат;
				
		//	КонецЕсли;
			
			
		Исключение
		КонецПопытки;
		
		
	
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
		
	Подписанный="";
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
	Подписанный="";
	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
				Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	
	
	Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
				Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
			Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
			Добав=СтрЗаменить(Добав,"\r\n","");

	Тело="{
	|""product_document"":"""+Добав+""",
	|""document_format"": ""MANUAL"",";
	
		
	Если Объект.ВыводИзОборота Тогда
		Тело=Тело+"
		|""type"":""LP_SHIP_RECEIPT"",";
	Иначе
		Тело=Тело+"
		|""type"":""LP_SHIP_GOODS"",";
		
	КонецЕсли;
	
	Тело=Тело+"
	|""signature"":"""+Подписанный+"""}";
	
	 	Если ОбработкаWEBНаСервере Тогда
		Если НЕ ЗагрузканаСервереОтправитьЦРПТ(Thumbprint_1,СРегистра,УжеОтправили,Тело) Тогда
				Если УжеОтправили=Истина Тогда
				//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОтправитьВЦРПТ(Команда,Истина)			
		КонецЕсли
		
		КонецЕсли;
		
		
	Иначе

			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
		//	Если Объект.ВыводИзОборота Тогда
		//		HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/receipt/send");
		//	Иначе
		
			
 			что=Thumbprint_1.что;

		
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg="+что);
		//	КонецЕсли;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Текст1);
	КонецЕсли;
		
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
		ИЛИ Ответ.КодСостояния=201 
		Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			Объект._Order_ID=Текст1;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Запись));
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
			Возврат;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОтправитьВЦРПТ(Команда,Истина)			
			КонецЕсли
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
КонецЕсли;
	ЭтаФорма.Записать();
КонецПроцедуры

Функция НеПрошлаПроверкаИмпорт(Файл_1) Экспорт
	//	Возврат Ложь;
	КаталогВременногоФайла=КаталогВременныхФайлов()+"new_maket_V21\";
	СоздатьКаталог(КаталогВременногоФайла);
		
	//Файл=ПолучитьИмяВременногоФайла("xml");
	Файл=ПолучитьИмяВременногоФайла("xml");
	Файл=СтрЗаменить(Файл,КаталогВременныхФайлов(),КаталогВременногоФайла);
	
	
	Файл_2=Новый ТекстовыйДокумент;
	Файл_2.ДобавитьСтроку(Файл_1);
	Файл_2.Записать(Файл,КодировкаТекста.UTF8);
	
	//ИмяВремен=ПолучитьИмяВременногоФайла("xsd");
	//МакетXDTO.Записать(ИмяВремен,КодировкаТекста.ANSI);
	//dictionary_v20=ПолучитьИмяВременногоФайла("xsd");
	//dictionary_v20=КаталогВременногоФайла+"dictionary_v21.xsd";
	
	dictionary_v20=ПолучитьИмяВременногоФайла("xsd");
	dictionary_v20=СтрЗаменить(dictionary_v20,КаталогВременныхФайлов(),КаталогВременногоФайла);
	
	
	Текст=Документы.Отгрузка_ХамелеонЦРПТ.ПолучитьМакет("Отгрузка");
	Текст.Записать(dictionary_v20,КодировкаТекста.UTF8);
	
	
	
	XMLDoc = New COMObject("Msxml2.DOMDocument.6.0");
    XMLDoc.Async = false;
    XMLDoc.ValidateOnParse = true;
    SchemaCache = New COMObject("Msxml2.XMLSchemaCache.6.0");
	SchemaCache.Add("",dictionary_v20);
	
	XMLDoc.Schemas = SchemaCache;
    XMLDoc.SetProperty("MultipleErrorMessages", true);
    XMLDoc.Load(Файл);
    ErrObj = XMLDoc.ParseError;
	Ошибка="";
    If ErrObj.ErrorCode <> 0 Then
        For Each ErrItem In ErrObj.AllErrors Do 
            //Message("Ошибка : " + ErrItem.Reason + " " + ErrItem.SrcText);
			Ошибка=Ошибка+"В строке № "+Erritem.line+" в колонке № "++Erritem.linepos+" ошибка: "+ErrItem.Reason+" "+ErrItem.SrcText+Символы.ПС+Символы.ПС;
		EndDo;
//		УдалитьФайлы(ИмяВремен);
		Сообщить(Ошибка);
		Возврат Истина;
    EndIf;
	УдалитьФайлы(Файл);
	УдалитьФайлы(dictionary_v20);
	
	Возврат Ложь;
КонецФункции



Функция СформироватьЭкспорт(ХэшСумма)
		Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("documents");
	Чтение.ЗаписатьАтрибут("version","1.35");
	
	Чтение.ЗаписатьНачалоЭлемента("fts_data");
	Чтение.ЗаписатьАтрибут("action_id","335");
	Чтение.ЗаписатьНачалоЭлемента("subject_id");
	Чтение.ЗаписатьТекст(Объект.Организация.subjectIdФармацевтика);
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Чтение.ЗаписатьНачалоЭлемента("operation_date");
	
	Прибавка="Z";
		Если ЗначениеЗаполнено(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств) тогда
			Прибавка=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств,2,"0");
			Если Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств>0 Тогда
				     Прибавка="+"+Прибавка+":00";
			Иначе
				     Прибавка="-"+Прибавка+":00";
			Конецесли;
		Конецесли;
		
	Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+Прибавка);
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Чтение.ЗаписатьНачалоЭлемента("fts_info");
	
	Чтение.ЗаписатьНачалоАтрибута("customs_code");
	Чтение.ЗаписатьТекст(Сред(Объект.НомерГТД,1,Найти(Объект.НомерГТД,"/")-1));
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоАтрибута("registration_date");
	
	ДатаРегистрации=Сред(Объект.НомерГТД,Найти(ОБъект.НомерГТД,"/")+1,6);
	Чтение.ЗаписатьТекст(Сред(ДатаРегистрации,1,2)+"."+Сред(ДатаРегистрации,3,2)+"."+"20"+Сред(ДатаРегистрации,5,2));
	Чтение.ЗаписатьКонецЭлемента();
	
	НомерГТД=Сред(Объект.НомерГТД,Найти(Объект.НомерГТД,"/")+1);
	НомерГТД=Сред(НомерГТД,Найти(НомерГТД,"/")+1);
	
	
	Чтение.ЗаписатьНачалоАтрибута("gtd_number");
	Чтение.ЗаписатьТекст(НомерГТД);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Чтение.ЗаписатьНачалоЭлемента("custom_procedure_code");
	Чтение.ЗаписатьТекст("10");
	Чтение.ЗаписатьКонецЭлемента();
	
	
	
	Чтение.ЗаписатьНачалоЭлемента("order_details");
	Для Каждого Стр_1 Из Объект.Товары Цикл
	
	//Чтение.ЗаписатьНачалоЭлемента("signs");
	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
	Для Каждого Стр_c Из НСтрок Цикл
		Штрих=Стр_c.cis;
		Если СтрДлина(Штрих)=18 Тогда
			Чтение.ЗаписатьНачалоЭлемента("union");
			Чтение.ЗаписатьНачалоЭлемента("sscc_detail");
			Чтение.ЗаписатьНачалоЭлемента("sscc");
			
			Чтение.ЗаписатьТекст(Штрих);
			
			Чтение.ЗаписатьКонецЭлемента();
			
			Чтение.ЗаписатьНачалоЭлемента("detail");
			Чтение.ЗаписатьНачалоЭлемента("gtin");
			Если ЗначениеЗаполнено(Стр_c.Gtin) Тогда
				Чтение.ЗаписатьТекст(ДополнитьСтроку(xmlString(Стр_c.gtin)));
			Иначе
				Чтение.ЗаписатьТекст(ДополнитьСтроку(xmlString(Стр_1.gtin.gtin)));
			КонецЕсли;
			Чтение.ЗаписатьКонецЭлемента();
			
		//	Чтение.ЗаписатьНачалоЭлемента("series_number");
		Чтение.ЗаписатьНачалоЭлемента("series_number");
			Если ЗначениеЗаполнено(Стр_c.СерийныйНомер) тогда
				Чтение.ЗаписатьТекст(xmlString(Стр_c.СерийныйНомер));
			ИначеЕсли ЗначениеЗаполнено(Стр_1.СерийныйНомер) тогда
				Чтение.ЗаписатьТекст(xmlString(Стр_1.СерийныйНомер));
				
			Иначе
				Чтение.ЗаписатьТекст(xmlString(Стр_c.ПолучитьИдентификатор()+1));
			КонецЕсли;
			
;
			
			Чтение.ЗаписатьКонецЭлемента();
			
			
			Чтение.ЗаписатьНачалоЭлемента("cost");
			
	//		Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
	//			Цена=Окр((Стр_1.Цена*Стр_1.КоличествоКМ)/Стр_1.КоличествоНомеровКМ,2);
	//		Иначе
				Цена=Стр_1.Цена;
				
	//		КонецЕсли;
			
			Если ЗначениеЗаполнено(Цена) тогда
				Чтение.ЗаписатьТекст(xmlString(окр(Цена,2)));
			Иначе
				Если Стр_1.КоличествоКМ<>0 Тогда
					Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.Сумма/Стр_1.КоличествоКМ,2)));
				КонецЕсли;
			КонецЕсли;
			Чтение.ЗаписатьКонецЭлемента();
			
			Если ЗначениеЗАполнено(Стр_1.НДС) ТОгда
				
				Чтение.ЗаписатьНачалоЭлемента("vat_value");
				
				Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
					КоличествоКМ=Стр_1.КоличествоНомеровКМ;
				Иначе
					КоличествоКМ=Стр_1.КоличествоКМ;
					
				КонецЕслИ;
				
				Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.НДС/КоличествоКМ,2)));
				Чтение.ЗаписатьКонецЭлемента();
								Иначе
									Чтение.ЗаписатьНачалоЭлемента("vat_value");				
									Чтение.ЗаписатьТекст(xmlString(0));
									Чтение.ЗаписатьКонецЭлемента();
				
				
			КонецЕсли;
			Чтение.ЗаписатьКонецЭлемента();
			Чтение.ЗаписатьКонецЭлемента();
			
			

		////s	Чтение.ЗаписатьКонецЭлемента();
			
			Чтение.ЗаписатьНачалоЭлемента("cost");
			
	//		Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
	//			Цена=Окр((Стр_1.Цена*Стр_1.КоличествоКМ)/Стр_1.КоличествоНомеровКМ,2);
	//		Иначе
				Цена=Стр_1.Цена;
				
	//		КонецЕсли;
			
			Если ЗначениеЗаполнено(Цена) тогда
				Чтение.ЗаписатьТекст(xmlString(окр(Цена,2)));
			Иначе
				Если Стр_1.КоличествоКМ<>0 Тогда
					Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.Сумма/Стр_1.КоличествоКМ,2)));
				КонецЕсли;
			КонецЕсли;
			Чтение.ЗаписатьКонецЭлемента();
			
			Если ЗначениеЗАполнено(Стр_1.НДС) ТОгда
				
				Чтение.ЗаписатьНачалоЭлемента("vat_value");
				
				Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
					КоличествоКМ=Стр_1.КоличествоНомеровКМ;
				Иначе
					КоличествоКМ=Стр_1.КоличествоКМ;
					
				КонецЕслИ;
				
				Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.НДС/КоличествоКМ,2)));
				Чтение.ЗаписатьКонецЭлемента();
				
								Иначе
									Чтение.ЗаписатьНачалоЭлемента("vat_value");				
									Чтение.ЗаписатьТекст(xmlString(0));
									Чтение.ЗаписатьКонецЭлемента();
				
			КонецЕсли;
			
				
		Иначе
			Чтение.ЗаписатьНачалоЭлемента("union");
			Штрих=Стр_c.cis;
			Чтение.ЗаписатьНачалоЭлемента("sgtin");
			
			Если Сред(Штрих,1,2)="01" ТОгда
				Штрих=Сред(Штрих,3,14)+Сред(Штрих,19);
			КонецЕсли;
			
			Чтение.ЗаписатьТекст(Штрих);
			
			Чтение.ЗаписатьКонецЭлемента();
		////s	Чтение.ЗаписатьКонецЭлемента();
			
			Чтение.ЗаписатьНачалоЭлемента("cost");
			
	//		Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
	//			Цена=Окр((Стр_1.Цена*Стр_1.КоличествоКМ)/Стр_1.КоличествоНомеровКМ,2);
	//		Иначе
				Цена=Стр_1.Цена;
				
	//		КонецЕсли;
			
			Если ЗначениеЗаполнено(Цена) тогда
				Чтение.ЗаписатьТекст(xmlString(окр(Цена,2)));
			Иначе
				Если Стр_1.КоличествоКМ<>0 Тогда
					Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.Сумма/Стр_1.КоличествоКМ,2)));
				КонецЕсли;
			КонецЕсли;
			Чтение.ЗаписатьКонецЭлемента();
			
			Если ЗначениеЗАполнено(Стр_1.НДС) ТОгда
				
				Чтение.ЗаписатьНачалоЭлемента("vat_value");
				
				Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
					КоличествоКМ=Стр_1.КоличествоНомеровКМ;
				Иначе
					КоличествоКМ=Стр_1.КоличествоКМ;
					
				КонецЕслИ;
				
				Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.НДС/КоличествоКМ,2)));
				Чтение.ЗаписатьКонецЭлемента();
								Иначе
									Чтение.ЗаписатьНачалоЭлемента("vat_value");				
									Чтение.ЗаписатьТекст(xmlString(0));
									Чтение.ЗаписатьКонецЭлемента();
				
				
			КонецЕсли;
 		 КонецЕсли;
 	Чтение.ЗаписатьКонецЭлемента();
		
	Конеццикла;
Конеццикла;
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
		
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Текст=Чтение.Закрыть();
	//МассивТекстов.Добавить(Текст);
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
//Конеццикла;
	
	Если ХэшСумма<>Ложь Тогда
		
		ХэшированиеДанных=Новый ХешированиеДанных(ХешФункция.SHA256);
		ХэшированиеДанных.Добавить(Текст);
		
		ХэшСумма=ХэшированиеДанных.ХешСумма;
	КонецеслИ;
	


	Возврат Текст

Конецфункции


Функция СформироватьXmlФайлИмпорт(Thumbprint_1,ХэшСумма=Ложь)
	Если
Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда

Если Объект.Организация.ИНН=Объект.Контрагент.ИНН Тогда
	 ///ПЕРЕМЕЩЕНИЕ!!!
	 
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("documents");
	Чтение.ЗаписатьАтрибут("version","1.35");
 	
	Чтение.ЗаписатьНачалоЭлемента("move_place");
	Чтение.ЗаписатьАтрибут("action_id","431");
	
	Чтение.ЗаписатьНачалоЭлемента("subject_id");
	Чтение.ЗаписатьТекст(Объект.ДоговорОрганизации.РегистрационныйНомер);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("receiver_id");
	Чтение.ЗаписатьТекст(Объект.Договор.РегистрационныйНомер);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("operation_date");
	//Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
		
		//Время=ПолучитьЧасовойПоясИнформационнойБазы();
	Прибавка="Z";
		Если ЗначениеЗаполнено(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств) тогда
			Прибавка=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств,2,"0");
			Если Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств>0 Тогда
				     Прибавка="+"+Прибавка+":00";
			Иначе
				     Прибавка="-"+Прибавка+":00";
			Конецесли;
		Конецесли;
		
		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+Прибавка);
//	Иначе
//		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"Z");
	
//	конецесли;
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("doc_num");
	Чтение.ЗаписатьТекст(Объект.НомерПервичногоДокумента);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("doc_date");
	Если ЗначениеЗаполнено(Объект.ДатаПередачиТовара) Тогда
		Чтение.ЗаписатьТекст(Формат(Объект.ДатаПередачиТовара,"ДФ=дд.ММ.гггг"));
	Иначе
		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=дд.ММ.гггг"));
	КонецЕсли;
	Чтение.ЗаписатьКонецЭлемента();
		
//	Чтение.ЗаписатьНачалоЭлемента("order_details");
	//Чтение.ЗаписатьТекст(ДополнитьСтроку(xmlString(Стр_1.gtin.gtin)));
	//Чтение.ЗаписатьКонецЭлемента();
		Чтение.ЗаписатьНачалоЭлемента("order_details");
Для Каждого Стр_1 Из Объект.Товары Цикл
	
	//Чтение.ЗаписатьНачалоЭлемента("signs");
	//НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));
	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
	Для Каждого Стр_c Из НСтрок Цикл
		Штрих=Стр_c.cis;
		Если СтрДлина(Штрих)=18 Тогда
			Чтение.ЗаписатьНачалоЭлемента("sscc");
			
			Чтение.ЗаписатьТекст(Штрих);
			
			Чтение.ЗаписатьКонецЭлемента();
			
						
				
		Иначе
			Штрих=Стр_c.cis;
			Чтение.ЗаписатьНачалоЭлемента("sgtin");
			
			Если Сред(Штрих,1,2)="01" ТОгда
				Штрих=Сред(Штрих,3,14)+Сред(Штрих,19);
			КонецЕсли;
			
			Чтение.ЗаписатьТекст(Штрих);
			
			Чтение.ЗаписатьКонецЭлемента();
 	КонецЕсли;
 		
	Конеццикла;
Конеццикла;
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	 
ИначеЕсли НЕ Объект.ОтгрузкаНеУчастника Тогда
	//МассивТекстов=Новый Массив;
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("documents");
	Чтение.ЗаписатьАтрибут("version","1.35");
 	
	Чтение.ЗаписатьНачалоЭлемента("move_order");
	Чтение.ЗаписатьАтрибут("action_id","415");
	
	Чтение.ЗаписатьНачалоЭлемента("subject_id");
	Чтение.ЗаписатьТекст(Объект.ДоговорОрганизации.РегистрационныйНомер);
	Чтение.ЗаписатьКонецЭлемента();
	
	Если ЗначениеЗаполнено(Объект.Договор.РегистрационныйНомер) Тогда
		Чтение.ЗаписатьНачалоЭлемента("receiver_id");
		Чтение.ЗаписатьТекст(Объект.Договор.РегистрационныйНомер);
		Чтение.ЗаписатьКонецЭлемента();
	Конецесли;
	
	Чтение.ЗаписатьНачалоЭлемента("operation_date");
//	Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
		
		//Время=ПолучитьЧасовойПоясИнформационнойБазы();
		
		Прибавка="Z";
		Если ЗначениеЗаполнено(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств) тогда
			Прибавка=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств,2,"0");
			Если Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств>0 Тогда
				     Прибавка="+"+Прибавка+":00";
			Иначе
				     Прибавка="-"+Прибавка+":00";
			Конецесли;
		Конецесли;
		
		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+Прибавка);
//	Иначе
//		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"Z");
	
//	конецесли;
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("doc_num");
	Чтение.ЗаписатьТекст(Объект.НомерПервичногоДокумента);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("doc_date");
	Если ЗначениеЗаполнено(Объект.ДатаПередачиТовара) Тогда
		Чтение.ЗаписатьТекст(Формат(Объект.ДатаПередачиТовара,"ДФ=дд.ММ.гггг"));
	Иначе
		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=дд.ММ.гггг"));
	КонецЕсли;
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("turnover_type");
	Если Объект.ТипОтгрузкиФармацевтика=Перечисления.ТипыОперацииОтгрузкиСоСкладаФармацевтика_ХамелеонЦРПТ.Возврат Тогда
		Чтение.ЗаписатьТекст("2");
	Иначе
		Чтение.ЗаписатьТекст("1");
	КонецЕсли;
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Чтение.ЗаписатьНачалоЭлемента("source");
	Чтение.ЗаписатьТекст(xmlString(Перечисления.ВидИсточниковФинансирования_ХамелеонЦРПТ.Индекс(Объект.Договор.ВидИсточниковФинансирования)+1));
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("contract_type");
	Чтение.ЗаписатьТекст(xmlString(Перечисления.ТипДоговораПриРеализации_ХамелеонЦРПТ.Индекс(Объект.Договор.ТипДоговора)+1));
	 Чтение.ЗаписатьКонецЭлемента();
	 
	 Если ЗначениеЗАполнено(Объект.Договор.РеестровыйНомерКонтрактаВЕИССЗ) тогда
		 
	Чтение.ЗаписатьНачалоЭлемента("contract_num");
	Чтение.ЗаписатьТекст(Объект.Договор.РеестровыйНомерКонтрактаВЕИССЗ);
	 Чтение.ЗаписатьКонецЭлемента();
	 
		 
		 
		КонецЕсли;
	
//	Чтение.ЗаписатьНачалоЭлемента("order_details");
	//Чтение.ЗаписатьТекст(ДополнитьСтроку(xmlString(Стр_1.gtin.gtin)));
	//Чтение.ЗаписатьКонецЭлемента();
		Чтение.ЗаписатьНачалоЭлемента("order_details");
Для Каждого Стр_1 Из Объект.Товары Цикл
	
	//Чтение.ЗаписатьНачалоЭлемента("signs");
	//НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));
	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
	Для Каждого Стр_c Из НСтрок Цикл
		Штрих=Стр_c.cis;
		Если СтрДлина(Штрих)=18 Тогда
			Чтение.ЗаписатьНачалоЭлемента("union");
			Чтение.ЗаписатьНачалоЭлемента("sscc_detail");
			Чтение.ЗаписатьНачалоЭлемента("sscc");
			
			Чтение.ЗаписатьТекст(Штрих);
			
			Чтение.ЗаписатьКонецЭлемента();
			
			Чтение.ЗаписатьНачалоЭлемента("detail");
			Чтение.ЗаписатьНачалоЭлемента("gtin");
			Если ЗначениеЗаполнено(Стр_c.gtin) Тогда
				Чтение.ЗаписатьТекст(ДополнитьСтроку(xmlString(Стр_c.gtin)));
			Иначе
				Чтение.ЗаписатьТекст(ДополнитьСтроку(xmlString(Стр_1.gtin.gtin)));
			КонецЕсли;
			Чтение.ЗаписатьКонецЭлемента();
			
		Чтение.ЗаписатьНачалоЭлемента("series_number");
			Если ЗначениеЗаполнено(Стр_c.СерийныйНомер) тогда
				Чтение.ЗаписатьТекст(xmlString(Стр_c.СерийныйНомер));
			ИначеЕсли ЗначениеЗаполнено(Стр_1.СерийныйНомер) тогда
				Чтение.ЗаписатьТекст(xmlString(Стр_1.СерийныйНомер));
				
			Иначе
				Чтение.ЗаписатьТекст(xmlString(Стр_c.ПолучитьИдентификатор()+1));
			КонецЕсли;
			
	
			Чтение.ЗаписатьКонецЭлемента();
			
			Чтение.ЗаписатьНачалоЭлемента("cost");
			
	//		Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
	//			Цена=Окр((Стр_1.Цена*Стр_1.КоличествоКМ)/Стр_1.КоличествоНомеровКМ,2);
	//		Иначе
				Цена=Стр_1.Цена;
				
	//		КонецЕсли;
			
			Если ЗначениеЗаполнено(Цена) тогда
				Чтение.ЗаписатьТекст(xmlString(Окр(Цена,2)));
			Иначе
				Если Стр_1.КоличествоКМ<>0 Тогда
					Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.Сумма/Стр_1.КоличествоКМ,2)));
				КонецЕсли;
			КонецЕсли;
			Чтение.ЗаписатьКонецЭлемента();
			
			Если ЗначениеЗАполнено(Стр_1.НДС) ТОгда
				
				Чтение.ЗаписатьНачалоЭлемента("vat_value");
				
				Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
					КоличествоКМ=Стр_1.КоличествоНомеровКМ;
				Иначе
					КоличествоКМ=Стр_1.КоличествоКМ;
					
				КонецЕслИ;
				
				Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.НДС/КоличествоКМ,2)));
				Чтение.ЗаписатьКонецЭлемента();
												Иначе
									Чтение.ЗаписатьНачалоЭлемента("vat_value");				
									Чтение.ЗаписатьТекст(xmlString(0));
									Чтение.ЗаписатьКонецЭлемента();

				
			КонецЕсли;
			Чтение.ЗаписатьКонецЭлемента();
			Чтение.ЗаписатьКонецЭлемента();
			
			

		////s	Чтение.ЗаписатьКонецЭлемента();
			
			Чтение.ЗаписатьНачалоЭлемента("cost");
			
	//		Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
	//			Цена=Окр((Стр_1.Цена*Стр_1.КоличествоКМ)/Стр_1.КоличествоНомеровКМ,2);
	//		Иначе
				Цена=Стр_1.Цена;
				
	//		КонецЕсли;
			
			Если ЗначениеЗаполнено(Цена) тогда
				Чтение.ЗаписатьТекст(xmlString(Окр(Цена,2)));
			Иначе
				Если Стр_1.КоличествоКМ<>0 Тогда
					Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.Сумма/Стр_1.КоличествоКМ,2)));
				КонецЕсли;
			КонецЕсли;
			Чтение.ЗаписатьКонецЭлемента();
			
			Если ЗначениеЗАполнено(Стр_1.НДС) ТОгда
				
				Чтение.ЗаписатьНачалоЭлемента("vat_value");
				
				Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
					КоличествоКМ=Стр_1.КоличествоНомеровКМ;
				Иначе
					КоличествоКМ=Стр_1.КоличествоКМ;
					
				КонецЕслИ;
				
				Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.НДС/КоличествоКМ,2)));
				Чтение.ЗаписатьКонецЭлемента();
												Иначе
									Чтение.ЗаписатьНачалоЭлемента("vat_value");				
									Чтение.ЗаписатьТекст(xmlString(0));
									Чтение.ЗаписатьКонецЭлемента();

				
			КонецЕсли;
			
			
				
		Иначе
			Чтение.ЗаписатьНачалоЭлемента("union");
			Штрих=Стр_c.cis;
			Чтение.ЗаписатьНачалоЭлемента("sgtin");
			
			Если Сред(Штрих,1,2)="01" ТОгда
				Штрих=Сред(Штрих,3,14)+Сред(Штрих,19);
			КонецЕсли;
			
			Чтение.ЗаписатьТекст(Штрих);
			
			Чтение.ЗаписатьКонецЭлемента();
		////s	Чтение.ЗаписатьКонецЭлемента();
			
			Чтение.ЗаписатьНачалоЭлемента("cost");
			
	//		Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
	//			Цена=Окр((Стр_1.Цена*Стр_1.КоличествоКМ)/Стр_1.КоличествоНомеровКМ,2);
	//		Иначе
				Цена=Стр_1.Цена;
				
	//		КонецЕсли;
			
			Если ЗначениеЗаполнено(Цена) тогда
				Чтение.ЗаписатьТекст(xmlString(Окр(Цена,2)));
			Иначе
				Если Стр_1.КоличествоКМ<>0 Тогда
					Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.Сумма/Стр_1.КоличествоКМ,2)));
				КонецЕсли;
			КонецЕсли;
			Чтение.ЗаписатьКонецЭлемента();
			
			Если ЗначениеЗАполнено(Стр_1.НДС) ТОгда
				
				Чтение.ЗаписатьНачалоЭлемента("vat_value");
				
				Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
					КоличествоКМ=Стр_1.КоличествоНомеровКМ;
				Иначе
					КоличествоКМ=Стр_1.КоличествоКМ;
					
				КонецЕслИ;
				
				Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.НДС/КоличествоКМ,2)));
				Чтение.ЗаписатьКонецЭлемента();
				
												Иначе
									Чтение.ЗаписатьНачалоЭлемента("vat_value");				
									Чтение.ЗаписатьТекст(xmlString(0));
									Чтение.ЗаписатьКонецЭлемента();

			КонецЕсли;
 		 КонецЕсли;
 	Чтение.ЗаписатьКонецЭлемента();
		
	Конеццикла;
Конеццикла;
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
ИначеЕсли Не ЗначениеЗаполнено(Объект.Контрагент.ИНН) И ЗначениеЗаполнено(Объект.Контрагент.СтранаПроисхождения) ТОгда
	Возврат СформироватьЭкспорт(ХэшСумма)
Иначе
	
//МассивТекстов=Новый Массив;
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("documents");
	Чтение.ЗаписатьАтрибут("version","1.35");
	
	Чтение.ЗаписатьНачалоЭлемента("move_unregistered_order");
	Чтение.ЗаписатьАтрибут("action_id","441");
	Чтение.ЗаписатьНачалоЭлемента("subject_id");
	Чтение.ЗаписатьТекст(Объект.ДоговорОрганизации.РегистрационныйНомер);
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Чтение.ЗаписатьНачалоЭлемента("operation_date");
	
	Прибавка="Z";
		Если ЗначениеЗаполнено(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств) тогда
			Прибавка=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств,2,"0");
			Если Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств>0 Тогда
				     Прибавка="+"+Прибавка+":00";
			Иначе
				     Прибавка="-"+Прибавка+":00";
			Конецесли;
		Конецесли;
	
	Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+Прибавка);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("receiver_info");
	
	Чтение.ЗаписатьНачалоЭлемента("receiver_inn");
	
	Если ЗначениеЗаполненО(Объект.Контрагент.subjectId_sys_Фармацевтика) Тогда
		Чтение.ЗаписатьНачалоЭлемента("receiver_id");
		Чтение.ЗаписатьТекст(Объект.Контрагент.subjectId_sys_Фармацевтика);
		Чтение.ЗаписатьКонецЭлемента();
		
		
	Иначе
		Если ЗначениеЗАполнено(Объект.Контрагент.КПП) Тогда
			
			
			Чтение.ЗаписатьНачалоЭлемента("ul");
			
			Чтение.ЗаписатьНачалоЭлемента("inn");
			Чтение.ЗаписатьТекст(Объект.Контрагент.ИНН);
			Чтение.ЗаписатьКонецЭлемента();
			
			Чтение.ЗаписатьНачалоЭлемента("kpp");
			Чтение.ЗаписатьТекст(Объект.Контрагент.КПП);
			Чтение.ЗаписатьКонецЭлемента();
			
	//		Чтение.ЗаписатьАтрибут("inn",Объект.Контрагент.ИНН);
			
	//		Чтение.ЗаписатьАтрибут("kpp",Объект.Контрагент.КПП);
			
		Иначе
			Чтение.ЗаписатьНачалоЭлемента("fl");
			Чтение.ЗаписатьНачалоЭлемента("inn");
			Чтение.ЗаписатьТекст(Объект.Контрагент.ИНН);
			Чтение.ЗаписатьКонецЭлемента();
			
	 		
			
			
		КонецЕсли;
	Конецесли;
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьКонецЭлемента();
	
	//Чтение.ЗаписатьТекст(Объект.Контрагент.subjectIdФармацевтика);
	Чтение.ЗаписатьКонецЭлемента();
	
	
	
	Чтение.ЗаписатьНачалоЭлемента("contract_type");
	Чтение.ЗаписатьТекст("1");
	 Чтение.ЗаписатьКонецЭлемента();
	
	
	
	Чтение.ЗаписатьНачалоЭлемента("doc_num");
	Чтение.ЗаписатьТекст(Объект.НомерПервичногоДокумента);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("doc_date");
	Если ЗначениеЗаполнено(Объект.ДатаПередачиТовара) Тогда
		Чтение.ЗаписатьТекст(Формат(Объект.ДатаПередачиТовара,"ДФ=дд.ММ.гггг"));
	Иначе
		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=дд.ММ.гггг"));
	КонецЕсли;
	Чтение.ЗаписатьКонецЭлемента();
	
//	Чтение.ЗаписатьНачалоЭлемента("turnover_type");
//	Если Объект.ТипОтгрузкиФармацевтика=Перечисления.ТипыОперацииОтгрузкиСоСкладаФармацевтика_ХамелеонЦРПТ.Возврат Тогда
//		Чтение.ЗаписатьТекст("2");
//	Иначе
//		Чтение.ЗаписатьТекст("1");
//	КонецЕсли;
//	Чтение.ЗаписатьКонецЭлемента();
	
	
//	Чтение.ЗаписатьНачалоЭлемента("source");
//	Чтение.ЗаписатьТекст("1");
//	Чтение.ЗаписатьКонецЭлемента();
	
//	Чтение.ЗаписатьНачалоЭлемента("contract_type");
//	Чтение.ЗаписатьТекст("1");
// 	Чтение.ЗаписатьКонецЭлемента();
	
//	Чтение.ЗаписатьНачалоЭлемента("order_details");
	//Чтение.ЗаписатьТекст(ДополнитьСтроку(xmlString(Стр_1.gtin.gtin)));
	//Чтение.ЗаписатьКонецЭлемента();
		Чтение.ЗаписатьНачалоЭлемента("order_details");
Для Каждого Стр_1 Из Объект.Товары Цикл
	
	//Чтение.ЗаписатьНачалоЭлемента("signs");
	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
	Для Каждого Стр_c Из НСтрок Цикл
		Штрих=Стр_c.cis;
		Если СтрДлина(Штрих)=18 Тогда
			Чтение.ЗаписатьНачалоЭлемента("union");
			Чтение.ЗаписатьНачалоЭлемента("sscc_detail");
			Чтение.ЗаписатьНачалоЭлемента("sscc");
			
			Чтение.ЗаписатьТекст(Штрих);
			
			Чтение.ЗаписатьКонецЭлемента();
			
			Чтение.ЗаписатьНачалоЭлемента("detail");
			Чтение.ЗаписатьНачалоЭлемента("gtin");
			Если ЗначениеЗаполнено(Стр_c.gtin) Тогда
				Чтение.ЗаписатьТекст(ДополнитьСтроку(xmlString(Стр_c.gtin)));
			Иначе
				Чтение.ЗаписатьТекст(ДополнитьСтроку(xmlString(Стр_1.gtin.gtin)));
			КонецЕсли;
			Чтение.ЗаписатьКонецЭлемента();
			
			Чтение.ЗаписатьНачалоЭлемента("series_number");
			Если ЗначениеЗаполнено(Стр_c.СерийныйНомер) тогда
				Чтение.ЗаписатьТекст(xmlString(Стр_c.СерийныйНомер));
			ИначеЕсли ЗначениеЗаполнено(Стр_1.СерийныйНомер) тогда
				Чтение.ЗаписатьТекст(xmlString(Стр_1.СерийныйНомер));
				
			Иначе
				Чтение.ЗаписатьТекст(xmlString(Стр_c.ПолучитьИдентификатор()+1));
			КонецЕсли;
			
			Чтение.ЗаписатьКонецЭлемента();
			
			
			Чтение.ЗаписатьНачалоЭлемента("cost");
			
	//		Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
	//			Цена=Окр((Стр_1.Цена*Стр_1.КоличествоКМ)/Стр_1.КоличествоНомеровКМ,2);
	//		Иначе
				Цена=Стр_1.Цена;
				
	//		КонецЕсли;
			
			Если ЗначениеЗаполнено(Цена) тогда
				Чтение.ЗаписатьТекст(xmlString(окр(Цена,2)));
			Иначе
				Если Стр_1.КоличествоКМ<>0 Тогда
					Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.Сумма/Стр_1.КоличествоКМ,2)));
				КонецЕсли;
			КонецЕсли;
			Чтение.ЗаписатьКонецЭлемента();
			
			Если ЗначениеЗАполнено(Стр_1.НДС) ТОгда
				
				Чтение.ЗаписатьНачалоЭлемента("vat_value");
				
				Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
					КоличествоКМ=Стр_1.КоличествоНомеровКМ;
				Иначе
					КоличествоКМ=Стр_1.КоличествоКМ;
					
				КонецЕслИ;
				
				Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.НДС/КоличествоКМ,2)));
				Чтение.ЗаписатьКонецЭлемента();
				
												Иначе
									Чтение.ЗаписатьНачалоЭлемента("vat_value");				
									Чтение.ЗаписатьТекст(xmlString(0));
									Чтение.ЗаписатьКонецЭлемента();

			КонецЕсли;
			Чтение.ЗаписатьКонецЭлемента();
			Чтение.ЗаписатьКонецЭлемента();
			
			

		////s	Чтение.ЗаписатьКонецЭлемента();
			
			Чтение.ЗаписатьНачалоЭлемента("cost");
			
	//		Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
	//			Цена=Окр((Стр_1.Цена*Стр_1.КоличествоКМ)/Стр_1.КоличествоНомеровКМ,2);
	//		Иначе
				Цена=Стр_1.Цена;
				
	//		КонецЕсли;
			
			Если ЗначениеЗаполнено(Цена) тогда
				Чтение.ЗаписатьТекст(xmlString(окр(Цена,2)));
			Иначе
				Если Стр_1.КоличествоКМ<>0 Тогда
					Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.Сумма/Стр_1.КоличествоКМ,2)));
				КонецЕсли;
			КонецЕсли;
			Чтение.ЗаписатьКонецЭлемента();
			
			Если ЗначениеЗАполнено(Стр_1.НДС) ТОгда
				
				Чтение.ЗаписатьНачалоЭлемента("vat_value");
				
				Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
					КоличествоКМ=Стр_1.КоличествоНомеровКМ;
				Иначе
					КоличествоКМ=Стр_1.КоличествоКМ;
					
				КонецЕслИ;
				
				Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.НДС/КоличествоКМ,2)));
				Чтение.ЗаписатьКонецЭлемента();
				
												Иначе
									Чтение.ЗаписатьНачалоЭлемента("vat_value");				
									Чтение.ЗаписатьТекст(xmlString(0));
									Чтение.ЗаписатьКонецЭлемента();

			КонецЕсли;
			
				
		Иначе
			Чтение.ЗаписатьНачалоЭлемента("union");
			Штрих=Стр_c.cis;
			Чтение.ЗаписатьНачалоЭлемента("sgtin");
			
			Если Сред(Штрих,1,2)="01" ТОгда
				Штрих=Сред(Штрих,3,14)+Сред(Штрих,19);
			КонецЕсли;
			
			Чтение.ЗаписатьТекст(Штрих);
			
			Чтение.ЗаписатьКонецЭлемента();
		////s	Чтение.ЗаписатьКонецЭлемента();
			
			Чтение.ЗаписатьНачалоЭлемента("cost");
			
	//		Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
	//			Цена=Окр((Стр_1.Цена*Стр_1.КоличествоКМ)/Стр_1.КоличествоНомеровКМ,2);
	//		Иначе
				Цена=Стр_1.Цена;
				
	//		КонецЕсли;
			
			Если ЗначениеЗаполнено(Цена) тогда
				Чтение.ЗаписатьТекст(xmlString(окр(Цена,2)));
			Иначе
				Если Стр_1.КоличествоКМ<>0 Тогда
					Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.Сумма/Стр_1.КоличествоКМ,2)));
				КонецЕсли;
			КонецЕсли;
			Чтение.ЗаписатьКонецЭлемента();
			
			Если ЗначениеЗАполнено(Стр_1.НДС) ТОгда
				
				Чтение.ЗаписатьНачалоЭлемента("vat_value");
				
				Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
					КоличествоКМ=Стр_1.КоличествоНомеровКМ;
				Иначе
					КоличествоКМ=Стр_1.КоличествоКМ;
					
				КонецЕслИ;
				
				Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.НДС/КоличествоКМ,2)));
				Чтение.ЗаписатьКонецЭлемента();
				
												Иначе
									Чтение.ЗаписатьНачалоЭлемента("vat_value");				
									Чтение.ЗаписатьТекст(xmlString(0));
									Чтение.ЗаписатьКонецЭлемента();

			КонецЕсли;
 		 КонецЕсли;
 	Чтение.ЗаписатьКонецЭлемента();
		
	Конеццикла;
Конеццикла;
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
		
	Чтение.ЗаписатьКонецЭлемента();
	
КонецЕсли;
	
	Текст=Чтение.Закрыть();
	//МассивТекстов.Добавить(Текст);
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
	
	
	Если ХэшСумма<>Ложь Тогда
		
		ХэшированиеДанных=Новый ХешированиеДанных(ХешФункция.SHA256);
		ХэшированиеДанных.Добавить(Текст);
		
		ХэшСумма=ХэшированиеДанных.ХешСумма;
	КонецеслИ;
	
	
	

	
//Конеццикла;
	Возврат Текст
	
Иначе
	
	
	
	
	
	
	//МассивCis=ПолучитьСерийникиДЛяВывода(Объект.Ссылка);
	//ДеревоКМ.ПолучитьЭлементы().Очистить();
	//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюПоКМ_Массив(ДеревоКМ,МассивCis,Пользователь);
	//СохранитьИнформациюНаСервере(Отгрузка_1);
	
	
	
	
	
	
	
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("document_num");
	Чтен.ЗаписатьЗначение(Объект.НомерПервичногоДокумента);
	Чтен.ЗаписатьИмяСвойства("document_date");
	Чтен.ЗаписатьЗначение(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
	
	Если Объект.ОтгрузкаНеУчастника Тогда 
		Чтен.ЗаписатьИмяСвойства("to_not_participant");
		Чтен.ЗаписатьЗначение(Истина);
		
	Иначе
		Чтен.ЗаписатьИмяСвойства("to_not_participant");
		Чтен.ЗаписатьЗначение(Ложь);
		
	КонецЕсли;
	Чтен.ЗаписатьИмяСвойства("receiver_inn");
	Чтен.ЗаписатьЗначение(Объект.Контрагент.ИНН);
	Чтен.ЗаписатьИмяСвойства("receiver");
	Чтен.ЗаписатьЗначение(Объект.Контрагент.Наименование);
	Чтен.ЗаписатьИмяСвойства("sender_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	Чтен.ЗаписатьИмяСвойства("sender");
	Чтен.ЗаписатьЗначение(Объект.Организация.Наименование);
	Чтен.ЗаписатьИмяСвойства("owner_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	Чтен.ЗаписатьИмяСвойства("owner");
	Чтен.ЗаписатьЗначение(Объект.Организация.Наименование);
	
	Если Объект.ВыводИзОборота  Тогда
//		Чтен.ЗаписатьЗначение("LP_SHIP_RECEIPT");
	Иначе
		Чтен.ЗаписатьИмяСвойства("request_type");
		Чтен.ЗаписатьЗначение("SHIPMENT");
	КонецЕсли;
	Чтен.ЗаписатьИмяСвойства("turnover_type");
	Если ЗначениеЗаполнено(Объект.ВидТоварооборота) Тогда
		Чтен.ЗаписатьЗначение(xmlString(Объект.ВидТоварооборота));
		
	Иначе
		//Чтен.ЗаписатьЗначение("SALE");
		Чтен.ЗаписатьЗначение("SELLING");
	КонецЕсли;
	Чтен.ЗаписатьИмяСвойства("transfer_date");
	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПередачиТовара,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
	
	
	Если Объект.ВыводИзОборота Тогда
		Чтен.ЗаписатьИмяСвойства("withdrawal_from_turnover");
		Чтен.ЗаписатьЗначение("true");
		
		Чтен.ЗаписатьИмяСвойства("withdrawal_type");
		Чтен.ЗаписатьЗначение(xmlString(Объект.ВидОперации));
		
		
		Чтен.ЗаписатьИмяСвойства("withdrawal_date");
		
		
		Чтен.ЗаписатьЗначение(Формат(Объект.ДатаВыводаИзОборота,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"Z");
		
		Если ЗначениеЗаполнено(ОБъект.ИдентификаторГосКонтракта) тогда
			Чтен.ЗаписатьИмяСвойства("st_contract_id");
			Чтен.ЗаписатьЗначение(Объект.ИдентификаторГосКонтракта);
		
		
			
		КонецЕсли;
		
	Конецесли;
	
	
	Чтен.ЗаписатьИмяСвойства("products");
	Чтен.ЗаписатьНачалоМассива();
	

	
	Если Объект.ОтправлятьКМВместоАгрегаций Тогда
		
		Объект.СтарыеКоробки.Очистить();
		Для Каждого Стр Из Объект.СерийныеНомера Цикл
			
			НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
			НСтр=НСтр[0];
			
			Если Стр.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
				
				
				СписокКМ=Новый Массив;
					СписокКМ.Очистить();
					//Былcis=Ложь;
					Для Каждого Стр_Агр Из ДеревоКМ.ПолучитьЭлементы() Цикл
						Если  Стр_Агр.cis=стр.cis Тогда
							Былcis=Истина;
								Для Каждого Стр_Агр_1 Из Стр_Агр.ПолучитьЭлементы() Цикл
									Если Стр_Агр_1.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
										//Возврат Неопределено;
										Для Каждого Стр_Агр_2 Из Стр_Агр_1.ПолучитьЭлементы() Цикл
											Если Стр_Агр_1.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
												Возврат Неопределено;
												
												
												
											Иначе
												
												Добав=Объект.СтарыеКоробки.Добавить();
												ЗаполнитьЗначенияСвойств(Добав,Стр);
												Добав.НомерКОроба=Стр.cis;
												Добав.НомерКМ=Стр_Агр_1.НомерКМ;
												
												
												СписокКМ.Добавить(Стр_Агр_1.НомерКМ);
												
											КонецЕсли;
										Конеццикла;
										
										
										
										

									Иначе
										
										Добав=Объект.СтарыеКоробки.Добавить();
										ЗаполнитьЗначенияСвойств(Добав,Стр);
										Добав.НомерКОроба=Стр.cis;
										Добав.НомерКМ=Стр_Агр_1.НомерКМ;
										
										
										
										СписокКМ.Добавить(Стр_Агр_1.НомерКМ);
										
									КонецЕсли;
								Конеццикла;
								
							//Иначе
							//	СписокКМ.Добавить(Стр_Агр.НомерКМ);
									////если найти(Стр_Агр.НомерКМ,"""")>0 или
										//найти(Стр_Агр.НомерКМ,",")>0  тогда
										//строказ=строказ+""""+стрзаменить(Стр_Агр.НомерКМ,"""","""""")+""",,"
									//иначе
									//	строказ=строказ+Стр_Агр.НомерКМ+",,"
										
									//конецесли;
							
							//	КонецЕсли;
						КонецЕсли;
						
					Конеццикла;
					Если СписокКМ.Количество()=0 Тогда
						Возврат Неопределено;
					КонецЕсли;
					//КонецЕсли;
					Для Каждого Стр_111 Из СписокКМ Цикл
								
							Чтен.ЗаписатьНачалоОбъекта();
							//Чтен.ЗаписатьИмяСвойства("uitu_code");
							//Чтен.ЗаписатьЗначение("");
							Чтен.ЗаписатьИмяСвойства("uit_code");
							Чтен.ЗаписатьЗначение(Стр_111);
							
							Чтен.ЗаписатьИмяСвойства("product_description");
							Чтен.ЗаписатьЗначение(строка(НСтр.gtin));
							Чтен.ЗаписатьИмяСвойства("product_cost");
							Чтен.ЗаписатьЗначение(Окр(НСтр.Цена/СписокКМ.Количество(),2)*100);
							Чтен.ЗаписатьИмяСвойства("product_tax");
							Чтен.ЗаписатьЗначение(Окр(НСтр.НДС/(НСтр.КоличествоКМ*СписокКМ.Количество()),2)*100);
							Чтен.ЗаписатьКонецОбъекта();
						
					Конеццикла;
					
				
				

				
				
				
			Иначе
					Чтен.ЗаписатьНачалоОбъекта();
				//			Чтен.ЗаписатьИмяСвойства("uitu_code");
				//Чтен.ЗаписатьЗначение("");
				Чтен.ЗаписатьИмяСвойства("uit_code");
				Чтен.ЗаписатьЗначение(Стр.cis);
				
				Чтен.ЗаписатьИмяСвойства("product_description");
				Чтен.ЗаписатьЗначение(строка(НСтр.gtin));
				Чтен.ЗаписатьИмяСвойства("product_cost");
				Чтен.ЗаписатьЗначение(Окр(НСтр.Цена,2)*100);
				Чтен.ЗаписатьИмяСвойства("product_tax");
				Чтен.ЗаписатьЗначение(Окр(НСтр.НДС/НСтр.КоличествоКМ,2)*100);
				Чтен.ЗаписатьКонецОбъекта();
			
				
			КонецЕсли;
			
			
			КонецЦикла;
		
		
	Иначе
		Для Каждого Стр Из Объект.СерийныеНомера Цикл
			
			НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
			НСтр=НСтр[0];
			
			Цена=НСтр.Цена;
			НДС=НСтр.НДС/НСтр.КоличествоКМ;
			Чтен.ЗаписатьНачалоОбъекта();
			
			ЕстьЦена=ЛОжь;
			
			Если Стр.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
				
				//////ТУТ ЕСЛИ ЦЕНЫ ЕСТЬ ПО КМ ТО НАДО
				Чтен.ЗаписатьИмяСвойства("uitu_code");
				Чтен.ЗаписатьЗначение(Стр.cis);
				//Чтен.ЗаписатьИмяСвойства("uit_code");
				//Чтен.ЗаписатьЗначение("");
				
				
				Для Каждого Стр_1 Из ДеревоКМ.ПолучитьЭлементы() Цикл
					Если Стр_1.НомерКороба=Стр.cis Тогда
						
						Если ЗначениеЗАполнено(Стр_1.Цена)
							ИЛИ ЗначениеЗаполнено(Стр_1.НДс) Тогда
							ЕстьЦена=Истина;
							Чтен.ЗаписатьИмяСвойства("product_description");
							Чтен.ЗаписатьЗначение(строка("-"));
							Чтен.ЗаписатьИмяСвойства("product_cost");
							Чтен.ЗаписатьЗначение(Окр(Стр_1.Цена,2)*100);
							Чтен.ЗаписатьИмяСвойства("product_tax");
							Чтен.ЗаписатьЗначение(Окр(Стр_1.НДС,2)*100);
							
						КонецЕсли;
						
						ЦенаЕстьНеобходимоОтправитьПоКК=Ложь;
						РекурсияПоКоробу(Стр_1,ЦенаЕстьНеобходимоОтправитьПоКК);
						
						Если ЦенаЕстьНеобходимоОтправитьПоКК=истина Тогда
							
							РекурсияПоКМ(Чтен,Стр_1);
							
							ЕстьЦена=Истина
						КонецЕсли;
						
						Прервать;
						
					КонецЕсли;
					
					
				Конеццикла;
				
				
				
				
				//Цена_1=РегистрыСведений.ИсторияПоCIS_ХамелеонЦРПТ.Получить(
			   	
				
				
			Иначе
				//Чтен.ЗаписатьИмяСвойства("uitu_code");
				//Чтен.ЗаписатьЗначение("");
				Чтен.ЗаписатьИмяСвойства("uit_code");
				Чтен.ЗаписатьЗначение(Стр.cis);
			КонецЕсли;
			Если ЕстьЦена=Ложь Тогда
				Чтен.ЗаписатьИмяСвойства("product_description");
				Чтен.ЗаписатьЗначение(строка(НСтр.gtin));
				Чтен.ЗаписатьИмяСвойства("product_cost");
				Чтен.ЗаписатьЗначение(Окр(НСтр.Цена,2)*100);
				Чтен.ЗаписатьИмяСвойства("product_tax");
				Чтен.ЗаписатьЗначение(Окр(НСтр.НДС/НСтр.КоличествоКМ,2)*100);
			КонецЕсли;
			Чтен.ЗаписатьКонецОбъекта();
			
			
			КонецЦикла;
	КонецЕсли;;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();

	
	Текст=Чтен.Закрыть();
		ЗапишемВРегистр(Текст);
	
	
	Возврат Текст;
КонецЕсли;

КонецФункции


Процедура РекурсияПоКМ(Чтен,Стр_1)
	Если Стр_1.ПолучитьЭлементы().Количество()>0  Тогда
		Чтен.ЗаписатьИмяСвойства("count_children");
		Чтен.ЗаписатьЗначение(xmlString(Стр_1.ПолучитьЭлементы().Количество()));
		Чтен.ЗаписатьИмяСвойства("children");
		Чтен.ЗаписатьНачалоМассива();
		
		Для Каждого Стр_2 Из Стр_1.ПолучитьЭлементы() Цикл
			Чтен.ЗаписатьНачалоОбъекта();
			
			
			Если Стр_2.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
				Чтен.ЗаписатьИмяСвойства("uitu_code");
				Чтен.ЗаписатьЗначение(Стр_2.НомерКМ);
			//Иначе
			//	Чтен.ЗаписатьЗначение("");
				
			КонецЕсли;
			Если Стр_2.ТипУпаковки<>Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
				//Чтен.ЗаписатьЗначение("");
			//Иначе
				Чтен.ЗаписатьИмяСвойства("uit_code");
				Чтен.ЗаписатьЗначение(Стр_2.НомерКМ);
				
			КонецЕсли;
			
						Чтен.ЗаписатьИмяСвойства("product_description");
						Если ЗначениеЗаполнено(Стр_2.Продукция) тогда
							Чтен.ЗаписатьЗначение(строка(Стр_2.Продукция));
								
						Иначе
							
							Чтен.ЗаписатьЗначение(строка("-"));
						КонецЕсли;
							Чтен.ЗаписатьИмяСвойства("product_cost");
							Чтен.ЗаписатьЗначение(Окр(Стр_2.Цена,2)*100);
							Чтен.ЗаписатьИмяСвойства("product_tax");
							Чтен.ЗаписатьЗначение(Окр(Стр_2.НДС,2)*100);
										
			РекурсияПоКМ(Чтен,Стр_2);
			
			
			Чтен.ЗаписатьКонецОбъекта();
			
			
			
			
		Конеццикла;
		Чтен.ЗаписатьКонецМассива();
	  КонецЕсли;
КонецПроцедуры

Процедура РекурсияПоКоробу(Стр_1,ЦенаЕстьНеобходимоОтправитьПоКК)
	Для Каждого Стр_2 Из Стр_1.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(Стр_2.Цена) ИЛИ ЗначениеЗаполнено(Стр_2.НДс) Тогда
			ЦенаЕстьНеобходимоОтправитьПоКК=Истина;
			Возврат;
		КонецЕсли;
		
		РекурсияПоКоробу(Стр_2,ЦенаЕстьНеобходимоОтправитьПоКК);
		Если ЦенаЕстьНеобходимоОтправитьПоКК=истина Тогда
			Возврат;
		КонецЕсли;
	Конеццикла;
	
КонецПроцедуры
Процедура ЗапишемВРегистр(ТекстДокумент)
	
	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Объект.Ссылка);
	РегДв.Отбор.Вид.Установить("Отправлен заказ");
	Добав=РегДв.Добавить();
	Добав.Документ=ОБъект.Ссылка;
	Добав.Вид="Отправлен заказ";
	Добав.Файл=Новый ХранилищеЗначения(ТекстДокумент,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
КонецПроцедуры



&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	
		Настройки=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить();
	
		
	ПриОтправкеВЦРТИЭДОПроверятьСтатусКМ=Настройки.ПриОтправкеВЦРТИЭДОПроверятьСтатусКМ;
	УбиратьСкобкиПриСканировании=Настройки.УбиратьСкобкиПриСканировании;
	ПроверятьНаДубльПозицийВОтгрузке=Настройки.ПроверятьНаДубльПозицийВОтгрузке;
	ОтправлятьВЭДООткрепленнуюПодпись=Настройки.ОтправлятьВЭДООткрепленнуюПодпись;
	ВыгружатьЭДОЛайтЧерезXML=Настройки.ВыгружатьЭДОЛайтЧерезXML;
	ПриПроверкеСхемыПриОтгрузкеЕслиОшибкаНеФормироватьФайл=Настройки.ПриПроверкеСхемыПриОтгрузкеЕслиОшибкаНеФормироватьФайл;
	ЧислоПараллельныхПотоков = Настройки.КоличествоЯдерДляГенерацииDataMatrix;
	ИздаватьЗвукПрИНеправильнойКМ = Настройки.ИздаватьЗвукПрИНеправильнойКМ;
	
	ПриОтправкеВCSVУмножатьСуммыНа100=Настройки.ПриОтправкеВCSVУмножатьСуммыНа100;
	Элементы.Исправление.Видимость=ЗначениеЗаполнено(Объект.ТипУточненияУПД);
	
	
	
	ОпределятьНазваниеНеИзЦРПТПриОтгрузке=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ОпределятьНазваниеНеИзЦРПТПриОтгрузке;
	ВыгружатьCSV=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ВыгружатьОтгрузкуВФормате;
									   ОбработкаWEBНаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	Орг=Неопределено;
	Параметры.Свойство("Организация",Орг);
	Если ЗначениеЗаполнено(Орг) Тогда
		Объект.Организация=Орг;
	КонецЕсли;
	Поль=Неопределено;
	Параметры.Свойство("Пользовтаель",Поль);
	Если ЗначениеЗаполнено(Поль) Тогда
		Объект.ТекущийПользователь=Поль;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(объект.Организация) тогда
		Объект.Организация=Объект.ТекущийПользователь.Организация;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) тогда
		
		Стр_Н=1;
		//ЗаписалиСер=Новый Массив;
		УжеПеренесли=Новый массив;
		Для Каждого Стр_1 Из Объект.Товары Цикл
			Нстр=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
			
			Для Каждого Стр_2 Из НСтр Цикл
				//Если ЗаписалиСер.Найти(Стр_2.cis)=Неопределено Тогда
				Если УжеПеренесли.Найти(Стр_2)=Неопределено Тогда
					Стр_2.НомерСтрокиСвязи=Стр_1.ПолучитьИдентификатор();
					УжеПеренесли.Добавить(Стр_2);
				Конецесли;
				//	ЗаписалиСер.Добавить(Стр_2.cis);
				//КонецЕсли;
			Конеццикла;
			Стр_1.НомерСтрокиСвязи=Стр_1.ПолучитьИдентификатор(); 
			
			
			
			Стр_Н=Стр_Н+1;
		Конеццикла;
		
	КонецЕслИ;
	ОбновитьВнешниеКнопки();
	Если Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Фармацевтика" Тогда
		
		Элементы.НомерГТД.Видимость=Истина;
		Элементы.ТипОтгрузкиФармацевтика.Видимость=Истина;
		Элементы.ВидТоварооборота.Видимость=Ложь;
	Иначе
		Элементы.НомерГТД.Видимость=Ложь;
		Элементы.ТипОтгрузкиФармацевтика.Видимость=Ложь;
		Элементы.ВидТоварооборота.Видимость=Истина;
	КонецЕсли;
	Элементы.Договор.Видимость=Элементы.ТипОтгрузкиФармацевтика.Видимость;
	Элементы.ДоговорОрганизации.Видимость=Элементы.ТипОтгрузкиФармацевтика.Видимость;
	
	  	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторияПоCIS_ХамелеонЦРПТ.НомерКороба КАК cis,
		|	ИсторияПоCIS_ХамелеонЦРПТ.cis КАК НомерКороба,
		|	ИсторияПоCIS_ХамелеонЦРПТ.Цена,
		|	ИсторияПоCIS_ХамелеонЦРПТ.НДС,
		|	ИсторияПоCIS_ХамелеонЦРПТ.Статус
		|ИЗ
		|	РегистрСведений.ИсторияПоCIS_ХамелеонЦРПТ КАК ИсторияПоCIS_ХамелеонЦРПТ
		|ГДЕ
		|	ИсторияПоCIS_ХамелеонЦРПТ.Документ = &Документ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерКороба,
		|	cis";
	
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	//Выборкаcis = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Выборкаcis = РезультатЗапроса.Выбрать();
	
	ДеревоКМ.ПолучитьЭлементы().Очистить();
	//Объект.ТоварыКМ.Очистить();
	
	МассивКоробов=Новый ТаблицаЗначений;
	МассивКоробов.Колонки.Добавить("НомерВерх");
	МассивКоробов.Колонки.Добавить("НомерНиз");
	
	МассивКоробЕсть=Новый ТаблицаЗначений;
	МассивКоробЕсть.Колонки.Добавить("НомерКороба");
	МассивКоробЕсть.Колонки.Добавить("СтрокаДерева");
	МассивКоробЕсть.Индексы.Добавить("НомерКороба");
	
	Пока Выборкаcis.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборкаcis.НомерКороба) 
			И ЗначениеЗаполнено(Выборкаcis.cis)
			Тогда
			Стр_Д=ДеревоКМ.ПолучитьЭлементы().Добавить();
			Стр_Д.НомерКороба=Выборкаcis.cis;
			Стр_Д.cis=Выборкаcis.cis;
			Стр_Д.Статус=Выборкаcis.Статус;
			Стр_Д.Цена=Выборкаcis.Цена;
			Стр_Д.НДС=Выборкаcis.НДС;
			
			Добав=МассивКоробЕсть.Добавить();
			Добав.НомерКороба=Выборкаcis.cis;
			Добав.СтрокаДерева=Стр_Д;
		КонецЕсли;
	
	Конеццикла;
	
	Если ДеревоКМ.ПолучитьЭлементы().Количество()>0 Тогда
		былоП=Истина;
		ЕстьРаспределение=истина;
		Пока ЕстьРаспределение=истина Цикл
			Если былоП=Ложь Тогда
				Прервать;
			КонецеслИ;
			ЕстьРаспределение=Ложь;
			Выборкаcis.Сбросить();
			
			былоП=Ложь;
			Пока Выборкаcis.Следующий() Цикл
				Если Не ЗначениеЗаполнено(Выборкаcis.cis) 
					ИЛИ Выборкаcis.cis=Выборкаcis.НомерКороба
					тогда
					Продолжить
				КонецЕсли;
				
				Если МассивКоробЕсть.Найти(Выборкаcis.cis,"НомерКороба")<>Неопределено Тогда
					Продолжить
				КонецЕсли;
				
				
				НстрКор=МассивКоробЕсть.Найти(Выборкаcis.НомерКороба,"НомерКороба");
				
				Если НСтрКор=Неопределено Тогда
					ЕстьРаспределение=Истина;
					Продолжить;
				КонецЕсли;     былоп=Истина;
				Стр_Д=НСтрКор.СтрокаДерева.ПолучитьЭлементы().Добавить();
				Стр_Д.НомерКМ=Выборкаcis.cis;
				Стр_Д.Статус=Выборкаcis.Статус;
				Стр_Д.Цена=Выборкаcis.Цена;
				Стр_Д.НДС=Выборкаcis.НДС;
				
				Добав=МассивКоробЕсть.Добавить();
				Добав.НомерКороба=Выборкаcis.cis;
				Добав.СтрокаДерева=Стр_Д;
				
				
				
				//Если Не ЗначениеЗаполнено(Выборкаcis.НомерКороба) 
				//	И ЗначениеЗаполнено(Выборкаcis.cis)
				//	Тогда
				//КонецЕсли;
			
			Конеццикла;

		Конеццикла;
	КонецЕсли;
	
	НасервереПодсчет();

	ИзменитьВидимость();
	ТекущийПользователь=Объект.ТекущийПользователь;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Если Объект.ОбратныйАкцепт Тогда
		Этаформа.ТолькоПросмотр=Истина;
		Элементы.ФормаОтправкаВЦРПТ.Видимость=Ложь;
		Элементы.ОтменаОтгрузки.Видимость=ложЬ;
		Элементы.ФормаПодтвердитьОбртаныйАкцепт.Видимость=Истина;
	Иначе
		Элементы.ФормаПодтвердитьОбртаныйАкцепт.Видимость=Ложь;
		
	КонецЕсли;
	
	
	МаксимальныйНомерСтрокиСвязиЧисло=0;
	Для Каждого Стр_1 Из Объект.Товары Цикл
		Если Стр_1.НомерСтрокиСвязи> МаксимальныйНомерСтрокиСвязиЧисло Тогда
			МаксимальныйНомерСтрокиСвязиЧисло=Стр_1.НомерСтрокиСвязи
		КонецЕсли;
		
		
	Конеццикла;
		МаксимальныйНомерСтрокиСвязиЧисло=МаксимальныйНомерСтрокиСвязиЧисло+1;
КонецПроцедуры


Процедура ОбновитьВнешниеКнопки()
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнешниеОбработки_ХамелеонЦРПТ.ИмяВнешнейОБработки,
		|	ВнешниеОбработки_ХамелеонЦРПТ.НаименованиеКнопки,
		|	ВнешниеОбработки_ХамелеонЦРПТ.Код
		|ИЗ
		|	Справочник.ВнешниеОбработки_ХамелеонЦРПТ КАК ВнешниеОбработки_ХамелеонЦРПТ
		|ГДЕ
		|	ВнешниеОбработки_ХамелеонЦРПТ.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ИмяКоманды="Команда"+ВыборкаДетальныеЗаписи.Код;
		Попытка
		КомандаФормы = Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуВнешняя";
		КомандаФормы.Заголовок = ВыборкаДетальныеЗаписи.ИмяВнешнейОБработки;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.Текст;
		
		//ОписаниеКомандыПечати.ИмяКомандыНаФорме = ИмяКоманды;
		
		НовыйЭлемент = Элементы.Добавить("ГруппаКнопокВнешняя" + ИмяКоманды, Тип("КнопкаФормы"), Элементы.ГруппаКнопокВнешняя);
		НовыйЭлемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		НовыйЭлемент.Заголовок=ВыборкаДетальныеЗаписи.НаименованиеКнопки;
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	Исключение
		КонецПопытки;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
КонецПроцедуры


Функция ПолучитьИмяВнешней(ИмяФайла)
    АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ИмяФайла);
    ИмяОбр = ВнешниеОбработки.Подключить(АдресВоВременномХранилище,,Ложь);
    Возврат ИмяОбр;
КонецФункции


&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуВнешняя(Команда)
	
	// Вставить содержимое обработчика.	// Вставить содержимое обработчика.
	Попытка
			ВернДв=ВернутьИмяФайла(Команда.Имя);
			Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
				ДвоичныеДанные=ВернДв;
			Иначе
				ДвоичныеДанные=Новый ДвоичныеДанные(ВернДв);
			Конецесли;
		ОбработкаИмя=ПолучитьИмяВнешней(Двоичныеданные);
		ОткрытьФорму("ВнешняяОбработка."+ОбработкаИмя+".Форма",,ЭтаФорма);
	Исключение
			Попытка
#Если ТолстыйКлиентОбычноеПриложение  Тогда
				//ВернутьВн(ВернутьИмяФайла(Команда.Имя));
		ВернДв=ВернутьИмяФайла(Команда.Имя);
		Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
			//ДвоичныеДанные=ВернДв;
			ДвоичныеДанные=ПолучитьИмяВременногоФайла();
			ВернДв.Записать(ДвоичныеДанные);
			
		Иначе
			ДвоичныеДанные=ВернДв;
		Конецесли;
				ВернутьВн(ДвоичныеДанные);
				Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
					УдалитьФайлы(ДвоичныеДанные);
				КонецЕсли;
#Иначе
				
			ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
#КонецЕсли
			Исключение
				ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
			КонецПопытки;
		//	
	//	
	КонецПопытки;

	//УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


#Если ТолстыйКлиентОбычноеПриложение  Тогда
&НаКлиенте
Процедура ВернутьВн(ДвоичныеДанные)
	//ИмяВременФ=ПолучитьИмяВременногоФайла();
	//ДвоичныеДанные.Записать(ИмяВременФ);
	ВнешняяОбработка=ВнешниеОбработки.Создать(ДвоичныеДанные);
	Фоорма=ВнешняяОбработка.ПолучитьФорму(,ЭтаФорма);
	Попытка
		Фоорма.УФ=ЭтаФорма;
	Исключение
	КонецПопытки;
	Фоорма.Открыть();
Конецпроцедуры      	
#КонецЕсли


Процедура ЗаписатьИмяФайлаВнешняяобработка(ИмяФайла)
	
	НаимСправочника=Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя();
	Спр=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоНаименованию(НаимСправочника,Истина);
	Если Спр<>Справочники.ВнешниеОбработки_ХамелеонЦРПТ.ПустаяСсылка() Тогда
		Спр=Спр.ПолучитьОбъект();
	Иначе
		
		Спр=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.СоздатьЭлемент();
		
	Конецесли;
	Спр.Наименование=НаимСправочника;
	Спр.ИмяВнешнейОБработки=ИмяФайла;
	Спр.Записать();;
КонецПроцедуры


Функция ВернутьИмяФайла(Команда)
	СпрВн=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоКоду(Сред(Команда,8));
	
		Возврат Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоКоду(Сред(Команда,8)).Хранилище.Получить();
	//Возврат СпрВн.ИмяВнешнейОБработки
	//НаимСправочника=Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя();
	//Спр=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоНаименованию(НаимСправочника,Истина);
	//Если Спр<>Справочники.ВнешниеОбработки_ХамелеонЦРПТ.ПустаяСсылка() Тогда
	//	Возврат Спр.ИмяВнешнейОБработки;
	//Конецесли;
	
КонецФункции


Процедура ЗаполнитьИнфуПоШтриху(ТипУпаковки,Сигналить)
	Если УбиратьСкобкиПриСканировании И Сред(ШтрихКод,1,4)="(01)" И 
			Сред(ШтрихКод,19,4)="(21)" ТОгда
		ШтрихКод=Сред(ШтрихКод,2,2)+Сред(ШтрихКод,5,14)+Сред(ШтрихКод,20,2)+Сред(ШтрихКод,23);	
		
	КонецЕсли;
		
	
	Сигналить=Ложь;
	 	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	////НЕОБХОДИМО БУДЕТ ПОМЕНЯТЬ
//	Если СтрДлина(Штрихкод)=20 И Сред(ШтрихКод,1,2)="00" Тогда
//		Штрихкод=Сред(Штрихкод,3);
//	КонецЕсли;
	КоличествоСтрокБыло=Объект.СерийныеНомера.Количество();
	
	Если 	Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Фармацевтика" Тогда
		Если сред(ШтрихКод,1,1)="/" тогда
			ШтрихКод=Сред(ШтрихКод,2);
		Конецесли;
		
		Если СтрДлина(Штрихкод)>20 Тогда
			
				Если Сред(ШтрихКод,1,2)="01" Тогда
					ШтрихКод=Сред(ШтрихКод,3,14)+Сред(ШтрихКод,19);
				КонецЕсли;
				ШтрихКод=Сред(ШтрихКод,1,27); 
								
			
			Если ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПроверитьСтроку(ШтрихКод,"[0-9]{14}[&#x21;-&#x22;&#x25;-&#x2F;&#x30;-&#x39;&#x41;-&#x5A;&#x5F;&#x61;-&#x7A;]{13}")=Ложь Тогда
				 Сообщить("Штрихкод "+ШтрихКод+" не соответствует шаблону ");
				 Если ИздаватьЗвукПрИНеправильнойКМ Тогда
					 Сигналить=истина;
				Конецесли;
				Возврат;
			Конецесли;
		Иначе
			
			Если ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПроверитьСтроку(ШтрихКод,"[0-9]{18}")=Ложь Тогда
				 Сообщить("Штрихкод "+ШтрихКод+" не соответствует шаблону ");
				 Если ИздаватьЗвукПрИНеправильнойКМ Тогда
					 Сигналить=истина;
				Конецесли;
				Возврат;
			Конецесли;
			
		
		
		Конецесли;
		
		
		
	Конецесли;

	
	Если ТипУпаковки=Истина 
		И
		Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование<>"Табак"
		И Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование<>"Альтернативный табак"
		И Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование<>"Фармацевтика"
		Тогда
		
	
		Если Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",ШтрихКод)).Количество()>0 Тогда
			Сообщить("Данный CIS "+Штрихкод+" уже присутствует в документе");
			Возврат;
		КонецЕсли;
		
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция КАК Продукция,
			|	СУММА(ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток-ЕСТЬNULL(Резервы_ХамелеонЦРПТОстатки.КоличествоОстаток, 0)) КАК Остаток
			|ИЗ
			|	РегистрНакопления.ОстаткиКМ_в_Обороте_ХамелеонЦРПТ.Остатки(
			|			,
			|			Организация = &Организация
			|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Резервы_ХамелеонЦРПТ.Остатки(
			|				,
			|				Организация = &Организация
			|					И СерийныйНомер = &СерийныйНомер) КАК Резервы_ХамелеонЦРПТОстатки
			|		ПО ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер = Резервы_ХамелеонЦРПТОстатки.СерийныйНомер
			|			И ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Организация = Резервы_ХамелеонЦРПТОстатки.Организация
			|
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция
			|ИТОГИ
			|	СУММА(Остаток)
			|ПО
			|	Продукция";
		
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("СерийныйНомер", ШтрихКод);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
			Если 		                   ВыборкаДетальныеЗаписи.Остаток<=0 Тогда
				Продолжить;
			КонецЕсли;
			Продукция=ВыборкаДетальныеЗаписи.Продукция;
			Добав=Объект.СерийныеНомера.Добавить();
			Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
			Добав.НаименованиеТовара=Продукция;
			Добав.cis=ШтрихКод;
			Добав.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка;
			
			ППП=Объект.Товары.НайтиСтроки(Новый структура("gtin,Упаковка",Продукция,Истина));
			Если ППП.Количество()=0 Тогда
				Добав_1=Объект.Товары.Добавить();
				Добав_1.GTIN=Продукция;
				Добав_1.упаковка=Истина;
				Добав_1.КодТНВЭД=Продукция.КодТНВЭД;
				
				Если ЗначениеЗаполнено(Добав_1.GTIN.ЕдиницаИзмерения_УПД) Тогда
					Добав_1.ЕдиницаИзмерения=Добав_1.GTIN.ЕдиницаИзмерения_УПД;
				Иначе
					
					Добав_1.ЕдиницаИзмерения=Объект.ТекущийПользователь.ОсновнаяЕдиницаИзмерения;
				Конецесли;	
				//			Добав_1.СпособВыпускаТоваров="";
				Добав_1.НомерСтрокиСвязи=МаксимальныйНомерСтрокиСвязиЧисло;
				МаксимальныйНомерСтрокиСвязиЧисло=МаксимальныйНомерСтрокиСвязиЧисло+1;
			Иначе
				Добав_1=ППП[0];
			КонецЕсли;
			Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
			Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
			
		КонецЦикла;
		
		Если КоличествоСтрокБыло=Объект.СерийныеНомера.Количество() Тогда
			Если РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ПриЗаполненииОтгрузкиНеУчитыватьОстаток Тогда
				Продукция=Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка();
				Добав=Объект.СерийныеНомера.Добавить();
				Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
				//Добав.НаименованиеТовара=Продукция;
				Добав.cis=ШтрихКод;
				Добав.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка;
				
				
					Добав_1=Объект.Товары.Добавить();
//					Если ЗначениеЗаполнено(Добав_1.GTIN.ЕдиницаИзмерения_УПД) Тогда
//						Добав_1.ЕдиницаИзмерения=Добав_1.GTIN.ЕдиницаИзмерения_УПД;
//					Иначе
						Добав_1.ЕдиницаИзмерения=Объект.ТекущийПользователь.ОсновнаяЕдиницаИзмерения;
//					 Конецесли;
					Добав_1.Упаковка=Истина;
		//			Добав_1.СпособВыпускаТоваров="";
					Добав_1.НомерСтрокиСвязи=МаксимальныйНомерСтрокиСвязиЧисло;
					МаксимальныйНомерСтрокиСвязиЧисло=МаксимальныйНомерСтрокиСвязиЧисло+1;
				Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
				Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
				
			
				

			Иначе
				//Если ИздаватьЗвукПрИНеправильнойКМ Тогда
				//	Сигнал();
					
				//КонецЕсли;
				Сигналить=Истина;
				Сообщить("КМ "+Строка(Штрихкод)+" не добавлена");
			КонецЕсли
		Конецесли;
		Возврат;
	КонецЕсли;
	
	
	Если Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Фото" Тогда
	ШтрихКод_1=(ШтрихКод);
	ШтрихКод=Сред(ШтрихКод,1,38);
		
ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование<>"Табак"
		И Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование<>"Альтернативный табак" ТОгда 
	ШтрихКод_1=(ШтрихКод);
	
	//ШтрихКод_1=КодироватьСтроку(ШтрихКод,СпособКодированияСтроки.КодировкаURL);
	//штрихКод=СтрЗаменить(ШтрихКод_1,"%1D","");
	ШтрихКод=Сред(ШтрихКод,1,38);
	//штрихКод_1=РаскодироватьСтроку(ШтрихКод,СпособКодированияСтроки.КодировкаURL);
		Если Сред(штрихКод_1,32,3)<>"240" Тогда
								ШтрихКод=Сред(ШтрихКод,1,31);
								//ШтрихКод=Сред(штрихКод_1,1,Найти(штрихКод_1,"%1D")-1);
								//ШтрихКод=РаскодироватьСтроку(ШтрихКод,СпособКодированияСтроки.КодировкаURL);
							Иначе
								
								           ШтрихКод=штрихКод_1;
							
							КонецЕсли;
							
							
							Если Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Фармацевтика" Тогда
		Если Сред(ШтрихКод,1,2)="01" Тогда
			ШтрихКод=Сред(ШтрихКод,3,14)+Сред(ШтрихКод,19);
		КонецЕсли;
								
							КОнецЕсли;
				КонецЕсли;
							
	Если СтрДлина(ШтрихКод)>50 Тогда
		ШтрихКод=Сред(ШтрихКод,1,35);
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак" Тогда
		Если СтрДлина(ШтрихКод)<>18 И Сред(ШтрихКод,1,2)="01" Тогда
			
ШтрихКод=Сред(ШтрихКод,1,25);
Иначе
ШтрихКод=Сред(ШтрихКод,1,21);

		КонецЕслИ;
		
//	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак" 
//		Тогда
//		Если СтрДлина(ШтрихКод)<>18 И Сред(ШтрихКод,1,2)="01" Тогда
//			
//ШтрихКод=Сред(ШтрихКод,1,25);			
//Иначе
//ШтрихКод=Сред(ШтрихКод,1,21);
//		КонецЕслИ;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак" 
		Тогда
		Если СтрДлина(ШтрихКод)<>18 И Сред(ШтрихКод,1,2)<>"01" Тогда
			
				ШтрихКод=Сред(ШтрихКод,1,25);			
		КонецЕслИ;
	КонецЕсли;
	
	//ШтрихКод=КодироватьСтроку(ШтрихКод,СпособКодированияСтроки.КодировкаURL);
			
							
	Если Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",ШтрихКод)).Количество()>0 Тогда
		Сообщить("Данный CIS "+Штрихкод+" уже присутствует в документе");
		Возврат;
	КонецЕсли;
	
	Если РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ПриЗаполненииОтгрузкиНеУчитыватьОстаток Тогда
		
		Попытка
			ШтрихКодИщем=Штрихкод;
			Если Сред(ШтрихКодИщем,1,2)="01" Тогда
				ШтрихКодИщем=Сред(ШтрихКодИщем,3);
			КонецЕсли;
			
			Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",
			Число(Сред(ШтрихКодИщем,1,14)));
			
			Если Продукция.GTIN<>Число(Сред(ШтрихКодИщем,1,14)) Тогда
				Пр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
				Пр.GTIN=Число(Сред(ШтрихКодИщем,1,14));
				Пр.Наименование=Сред(ШтрихКодИщем,1,14);
				Пр.НаименованиеТовара=Сред(ШтрихКодИщем,1,14);
				Пр.Записать();
				Продукция=Пр.Ссылка;
				
			КонецЕсли;
			
		Исключение
			
		Если КоличествоСтрокБыло=Объект.СерийныеНомера.Количество() Тогда
				Сигналить=Истина;
			Сообщить("КМ "+Строка(Штрихкод)+" не добавлена");
		Конецесли;
			
			Возврат;
		КонецПопытки;
			Добав=Объект.СерийныеНомера.Добавить();
			Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
			Добав.НаименованиеТовара=Продукция;
			Добав.cis=ШтрихКод;
			//Добав.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука;
			
			ППП=Объект.Товары.НайтиСтроки(Новый структура("gtin,Упаковка",Продукция,Ложь));
			Если ППП.Количество()=0 Тогда
				Добав_1=Объект.Товары.Добавить();
				Добав_1.GTIN=Продукция;
				Добав_1.упаковка=ложь;
				Добав_1.КодТНВЭД=Продукция.КодТНВЭД;
				Если ЗначениеЗаполнено(Добав_1.GTIN.ЕдиницаИзмерения_УПД) Тогда
					Добав_1.ЕдиницаИзмерения=Добав_1.GTIN.ЕдиницаИзмерения_УПД;
				Иначе
				
					Добав_1.ЕдиницаИзмерения=Объект.ТекущийПользователь.ОсновнаяЕдиницаИзмерения;
					
				Конецесли;
	//			Добав_1.СпособВыпускаТоваров="";
				Добав_1.НомерСтрокиСвязи=МаксимальныйНомерСтрокиСвязиЧисло;
				МаксимальныйНомерСтрокиСвязиЧисло=МаксимальныйНомерСтрокиСвязиЧисло+1;
			Иначе
				Добав_1=ППП[0];
			КонецЕсли;
			Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
			Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
			
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция КАК Продукция,
			|	СУММА(ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток-ЕСТЬNULL(Резервы_ХамелеонЦРПТОстатки.КоличествоОстаток, 0)) КАК Остаток
			|ИЗ
			|	РегистрНакопления.ОстаткиКМ_в_Обороте_ХамелеонЦРПТ.Остатки(
			|			,
			|			Организация = &Организация
			|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Резервы_ХамелеонЦРПТ.Остатки(
			|				,
			|				Организация = &Организация
			|					И СерийныйНомер = &СерийныйНомер) КАК Резервы_ХамелеонЦРПТОстатки
			|		ПО ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер = Резервы_ХамелеонЦРПТОстатки.СерийныйНомер
			|			И ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Организация = Резервы_ХамелеонЦРПТОстатки.Организация
			|
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция
			|ИТОГИ
			|	СУММА(Остаток)
			|ПО
			|	Продукция";
		
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("СерийныйНомер", ШтрихКод);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
			Если 		                   ВыборкаДетальныеЗаписи.Остаток<=0 Тогда
				Продолжить;
			КонецЕсли;
			Продукция=ВыборкаДетальныеЗаписи.Продукция;
			Добав=Объект.СерийныеНомера.Добавить();
			Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
			Добав.НаименованиеТовара=Продукция;
			Добав.cis=ШтрихКод;
			//Добав.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука;
			
			ППП=Объект.Товары.НайтиСтроки(Новый структура("gtin,Упаковка",Продукция,Ложь));
			Если ППП.Количество()=0 Тогда
				Добав_1=Объект.Товары.Добавить();
				Добав_1.GTIN=Продукция;
				Добав_1.Упаковка=ложь;
				Добав_1.КодТНВЭД=Продукция.КодТНВЭД;
				Если ЗначениеЗаполнено(Добав_1.GTIN.ЕдиницаИзмерения_УПД) Тогда
					Добав_1.ЕдиницаИзмерения=Добав_1.GTIN.ЕдиницаИзмерения_УПД;
				Иначе
					Добав_1.ЕдиницаИзмерения=Объект.ТекущийПользователь.ОсновнаяЕдиницаИзмерения;
				Конецесли;
	//			Добав_1.СпособВыпускаТоваров="";
				Добав_1.НомерСтрокиСвязи=МаксимальныйНомерСтрокиСвязиЧисло;
				МаксимальныйНомерСтрокиСвязиЧисло=МаксимальныйНомерСтрокиСвязиЧисло+1;
			Иначе
				Добав_1=ППП[0];
			КонецЕсли;
			Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
			Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
			
		КонецЦикла;
		
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	КонецЕсли;
	
		Если КоличествоСтрокБыло=Объект.СерийныеНомера.Количество() Тогда
				Сигналить=Истина;
			Сообщить("КМ "+Строка(Штрихкод)+" не добавлена");
		Конецесли;
		
		
		
		 		
		
КонецПроцедуры
									
									
									&НаСервереБезКонтекста
									Функция ЗагрузитьПродукции_JSON(NNN)
//	МассивТ=Новый Массив;
				Стр=NNN;
	
	Если Стр.warning<>"ok" Тогда
		Возврат Неопределено;
	КонецЕсли;
				//Тотал=NNN.total;
				
				//Для Каждого Стр Из NNN.results Цикл
				//	Если ИНН<>Стр.INN Тогда
				//		Продолжить;
				//	КонецЕсли;
					//Если     Массив.Найти(Число(Стр.gtin))=Неопределено Тогда
					//	Продолжить;
					//КонецЕсли;
					
					СпрД=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Стр.shoesData.codeData.gtin));
					Если СпрД<>Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка() Тогда
						СпрД=СпрД.ПолучитьОбъект();
					Иначе
						СпрД=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
					КонецЕсли;
						
					СпрД.БрендТорговаяМарка=Стр.shoesData.brand;
					country="";
					
					Стр.shoesData.Свойство("country",country);
					Если ЗначениеЗАполнено(country) Тогда
						СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(country);
					//ИначеЕсли Не ЗначениеЗаполнено(	СпрД.СтранаПроизводства) Тогда
					//	СпрД.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
					КонецЕсли;
					СпрД.GTIN=Число(Стр.shoesData.codeData.gtin);
					//СпрД.id=Стр.id;
					//СпрД.ИННПроизводителяИмпортёра=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",Стр.producerInn);
					//Если Не ЗначениеЗАполнено(СпрД.ИННПроизводителяИмпортёра) Тогда
					//	Спр_К=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
					//	Спр_К.ИНН=Стр.producerInn;
					//	Спр_К.Наименование=Стр.producerName;
					//	Спр_К.Записать();
					//	СпрД.ИННПроизводителяИмпортёра=Спр_К.Ссылка;
						
					//Конецесли;
					Стр.shoesData.productProperty.Свойство("materialDown",СпрД.МатериалНиза);
					Стр.shoesData.productProperty.Свойство("materialLining",СпрД.МатериалПодкладки);
					Стр.shoesData.productProperty.Свойство("materialUpper",СпрД.МатериалВерха);
					Стр.shoesData.productProperty.Свойство("color",СпрД.Цвет);
					
					Стр.shoesData.Свойство("model",СпрД.МодельПроизводителяАртикул);
					//Стр.Свойство("tnVedCode",СпрД.КодТНВЭДКороткий);
					Стр.shoesData.productProperty.Свойство("color",СпрД.Цвет);
					
					
					
					tnvd="";
					Стр.shoesData.Свойство("tnvd",tnvd);
					Если ЗначениеЗаполнено(tnvd) Тогда
						СпрД.КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(tnvd);
						
						Если Не ЗначениеЗаполнено(СпрД.КодТНВЭД) Тогда
							СпрК=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
							СпрК.Код=tnvd;
							СпрК.Наименование=tnvd;
							СпрК.Записать();
							СпрД.КодТНВЭД=СпрК.Ссылка;
						КонецЕсли;
						
						
					КонецЕсли;
					
					
					СпрД.Наименование=Стр.shoesData.productName;
					СпрД.НаименованиеТовара=Стр.shoesData.productName;
					
					productSize=Неопределено;
				    Стр.shoesData.productProperty.Свойство("productSize",productSize);
					Если ЗначениеЗаполнено(productSize) тогда
						productSize=СтрЗаменить(productSize,".",",");
						
						СпрД.Размер=Справочники.РазмерВШтихмассовойСистеме_ХамелеонЦРПТ.НайтиПоНаименованию(productSize,истина);
					КонецЕсли;
					
										КодПр="";
					Стр.shoesData.Свойство("productTypeDesc",КодПр);
					Если ЗначениеЗаполнено(КодПр) Тогда
					СпрД.ВидОбуви=Справочники.ВидОбуви_ХамелеонЦРПТ.НайтиПоНаименованию(КодПр,Истина);
					Если Не ЗначениеЗаполнено(СпрД.ВидОбуви) тогда
						СпрВ=Справочники.ВидОбуви_ХамелеонЦРПТ.СоздатьЭлемент();
						//СпрВ.Код=Стр.productType;
						СпрВ.Наименование=КодПр;
						СпрВ.Записать();
						СпрД.ВидОбуви=СпрВ.Ссылка;
					КонецЕсли;
				КонецЕсли;
				publicationDate=Неопределено;
				    Стр.Свойство("publicationDate",publicationDate);
					Если ЗначениеЗаполнено(publicationDate) тогда
						СпрД.ДатаПубликации=Дата(1970,1,1)+Стр.publicationDate/1000;					
					Конецесли;
					////То была обувь теперь сигареты
				packageType=Неопределено;
				    Стр.Свойство("packageType",packageType);
					Если ЗначениеЗАполнено(packageType) тогда
						СПрд.ТипУпаковкиСигарет=Перечисления.ТипУпаковкиСигареты_ХамелеонЦРПТ[packageType];
					КонецЕсли;
					КоличествоВГруппе=0;
					Если Стр.Свойство("innerUnitCount",КоличествоВГруппе) И
						ЗначениеЗаполненО(КоличествоВГруппе) Тогда
						СпрД.КоличествоВГруппе=КоличествоВГруппе;
					Конецесли;
				productGroup=Неопределено;
				    Стр.Свойство("productGroup",productGroup);
					Если ЗначениеЗаполнено(productGroup) тогда
						СпрГр=Справочники.ГруппаСигарет_ХамелеонЦРПТ.НайтиПоНаименованию(productGroup);
						Если Не ЗначениеЗаполнено(СпрГр) Тогда
							СпрГр=Справочники.ГруппаСигарет_ХамелеонЦРПТ.СоздатьЭлемент();
							СпрГр.Наименование=productGroup;
							СпрГр.Записать();
						КонецЕсли;
						СпрД.ГруппаСигарет=СпрГр.Ссылка;
						
					КонецЕсли;
					
					
					
					
					СпрД.Записать();
					
					//МассивТ.Добавить(СПрД);
					Сертификат=Неопределено;
					Если Стр.Свойство("certDoc",Сертификат) Тогда
						ДатаВыдачи=Сертификат.date;
						ДатаНачалаДействия=Дата(Сред(ДатаВыдачи,1,4),Сред(ДатаВыдачи,6,2),Сред(ДатаВыдачи,9,2));
						НаимСерт=Сертификат.number;
						Тип=Сертификат.type;
						Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.НайтиПоНаименованию(
						 НаимСерт);
						 Если НЕ ЗначениеЗаполнено(Сертификат) тогда
							 //Сертификат=Сертификат.ПолучитьОбъект();
							 Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.СоздатьЭлемент();
						Сертификат.Наименование=НаимСерт;
						Сертификат.ДатаНачалаДействия=ДатаНачалаДействия;
						 Сертификат.Записать();
					 КонецЕсли;
						РегСв=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
						РегСв.Отбор.Продукция.Установить(СпрД.Ссылка);
						РегСв.Отбор.Период.Установить(ДатаНачалаДействия);
						Добав=РегСв.Добавить();
						Добав.Период=ДатаНачалаДействия;
						Добав.Продукция=СпрД.Ссылка;
						Добав.Документ=Сертификат;
						Регсв.Записать(Истина);
						
					Конецесли;
					 Возврат СпрД.Ссылка
			//	Конеццикла;
				
	

Конецфункции


Функция ЗагрузитьПродукции(МассивСтр)
	МассивТ=Новый  Массив;
	Для Каждого Стр_1 Из МассивСтр Цикл
		ГТИН=Число(Стр_1.gtin);
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Название=Стр_1.Название;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Продукция_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
		|ГДЕ
		|	Продукция_ХамелеонЦРПТ.GTIN = &GTIN";
	
	Запрос.УстановитьПараметр("GTIN", ГТИН);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество()=0 Тогда
		СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрПр.GTIN=Число(ГТИН);
		СпрПр.Наименование=Название;
		СпрПр.НаименованиеТовара=Название;
		СпрПр.Записать();
			     МассивТ.Добавить(СпрПр.Ссылка);
	Иначе
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
			СпрПр=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			СпрПр.Наименование=Название;
			СпрПр.НаименованиеТовара=Название;
			СпрПр.Записать();
			     МассивТ.Добавить(СпрПр.Ссылка);
			//НСтрок=Объект.ПроверкаПоНомерамКМ.НайтиСтроки(Новый Структура("Продукция",СпрПр.Ссылка));
			//Для Каждого Стр_1 Из Нстрок Цикл
			//	Стр_1.Продукция=Неопределено;
				//Стр_1.Продукция=СпрПр.Ссылка;
			//Конеццикла;
				
		КонецЦикла;
	КонецЕсли;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		
	Конеццикла;
	        Возврат МассивТ

	//Элементы.ПроверкаПоНомерамКМ.Обновить();
	//ЭтаФорма.Прочитать();
Конецфункции



&НаСервереБезКонтекста
Функция ПолучитьСледющийМассив(ШтрихКод)
	
	ГТИН=Сред(Штрихкод,3,14);
	попытка
		СпрПр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(ГТИН))
	исключение
		Возврат Новый Массив;
	КонецПопытки;
	Попытка
	Если ЗначениеЗаполнено(СпрПР) И Число(СпрПр.Наименование)=Число(ГТИН) Тогда
		МассивТ=Новый Массив;
		МассивТ.Добавить(Новый Структура("Марка",ШтрихКод));
		Возврат МассивТ
	КонецЕсли;
Исключение

	КонецПопытки;
	    Возврат Новый Массив;
	
КонецФункции

Функция ЗаписатьСтрокуВОЫЩТ(Стр)
										Запись = Новый ЗаписьJSON;	
									Запись.УстановитьСтроку();
									ЗаписатьJSON(Запись, Новый Структура("code",Стр));
Возврат Запись.Закрыть()
Конецфункции


&НаСервереБезКонтекста
Функция дополнитьСтроку(Ср)
	ВОзврат Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Ср,14,"0");
	
Конецфункции


Процедура НаСервереБлокировка()
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка,,ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
КонецПроцедуры


&НаКлиенте
Функция ЕстьКириллица(ИсходнаяСтрока) Экспорт
	ЕстьКириллица=ложь;
	ИсходнаяСтрока=СокрЛП(ИсходнаяСтрока);
	Если СтрДлина(ИсходнаяСтрока)>0 Тогда
		Для Сч=1 по СтрДлина(ИсходнаяСтрока) Цикл
			Символ = НРег(Сред(ИсходнаяСтрока, Сч, 1));
			Если Найти("абвгдеёжзийклмнопрстуфхцчшщъыьэюя", Символ) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ШтрихПриИзменении(Элемент) Экспорт
	// Вставить содержимое обработчика.
	Если БылаБлокировка<>Истина Тогда
		НаСервереБлокировка();
		//ЗаблокироватьДанныеФормыДляРедактирования();
		БылаБлокировка=Истина;
		ЭтаФорма.Модифицированность=Истина;
	Конецесли;
	штрихКод=СтрЗаменить(ШтрихКод,Символ(29),"");
	
	Если ЕстьКириллица(ШтрихКод) тогда
		Сообщить("В строке присутствует символ кириллицы!!");
				
			#Если ВебКлиент Тогда
							#Иначе
		Сигнал();
						#КонецЕсли
		ПодключитьОбработчикОЖидания("аа",0.1,Истина);

		Возврат;
	Конецесли;
	
	
	////НЕОБХОДИМО БУДЕТ ПОМЕНЯТЬ
	Если СтрДлина(Штрихкод)=20 И Сред(ШтрихКод,1,2)="00" Тогда
		Штрихкод=Сред(Штрихкод,3);
	КонецЕсли;
	

	Сигналить=Ложь;
	ЗаполнитьИнфуПоШтриху(ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ВернутьИнформациюОКМ(ШтрихКод,ДанныеИзПользователя),Сигналить);
	Если Сигналить=Истина И ИздаватьЗвукПрИНеправильнойКМ=Истина Тогда
		
			#Если ВебКлиент Тогда
							#Иначе
		Сигнал();
						#КонецЕсли
		
	Конецесли;
	ПроверкаНужна();
	ПодключитьОбработчикОЖидания("аа",0.1,Истина);
	ПересчетСуммыДокмента();
КонецПроцедуры


&НаКлиенте
Процедура   ПроверкаНужна(УжеОтправили=Ложь)
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
	Если Не ОпределятьНазваниеНеИзЦРПТПриОтгрузке Тогда
		//////СТАНДАТРТНО
		МассивСтруктур=Новый Массив;
		СписокОбнТовара=Новый Массив;
		МассивКМ=ПолучитьСледющийМассив(Штрихкод);
		СписокОбнТовара.Очистить();
		Если МассивКМ.Количество()=0 Тогда
			Возврат;
		КонецЕсли ;
	Для Каждого Стр_11 Из МассивКМ Цикл	
		
			СРегистра=Thumbprint_1.ТокенПоОтпечатку;
			Если Не ЗначениеЗаполнено(СРегистра) тогда
				Попытка
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
				исключение
					СРегистра=Неопределено;
				КонецПопытки;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СРегистра) Тогда
				Сообщить("Не удалось получить токен по организации");
				Возврат;
			Конецесли;
			
			//Стр_11=ШтрихКод;
			НомерКМ=Стр_11;
			//Для Каждого Стр_11 Из Массив Цикл
				Если  Ложь Тогда
					//ОбработкаWEBНаСервере Тогда
				//Если НЕ ЗагрузитьНаСервере(Thumbprint_1,Обр.Организации[0].Организация,УжеОтправили,СРегистра) Тогда
				//	Если УжеОтправили=Истина Тогда
				//	Иначе
				//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
						//Загрузить(Команда,Истина)
				//	КонецЕсли;
			
				//КонецЕсли;
			Иначе
				
				
					Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
					Иначе
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		
 			что=Thumbprint_1.что;
					
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(НомерКМ)+"&pg="+что);;
			//HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?gtin="+ДополнитьСтроку(Стр_11)+"&limit=100&offset=0");;
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин           
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			
			числоЗагрузили=0;
			
			Тотал=0;
			Если Ответ.КодСостояния=200 Тогда
				//гружаемШаблоныНасервере(Текст1,Форм.Пользователь);
					
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке(Текст1,"",0,0,Thumbprint_1);
					
			ИначеЕсли Ответ.КодСостояния=401 
				ИЛИ Ответ.КодСостояния=502  
				Тогда
				Если УжеОтправили=Истина Тогда
						ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
					Иначе
						ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
						ПроверкаНужна(Истина)					
						//Загрузить(Команда,Истина)			
					КонецЕсли
				Иначе
					
				КонецЕсли;
			КонецЕсли;
	Конеццикла;	
		Возврат;
	КонецЕсли;
	
	
	
	
	ОбновитьинформациюНаСервере(Thumbprint_1,ШтрихКод,СписокОбнТовара);
									Для Каждого Стр_1 Из СписокОбнТовара Цикл
										ОповеститьОбИзменении(Стр_1);
									КонецЦиклА;
	
									МассивКМ=ПолучитьСледющийМассив(ШтрихКод);
									СписокОбнТовара.Очистить();

										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
														Прокси_20=Новый ИнтернетПрокси;
														Прокси_20.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
													
														HTTPСервисЗапрос_20=Новый HTTPСоединение("xn--80aqu.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,Прокси_20,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
													Иначе
														HTTPСервисЗапрос_20=Новый HTTPСоединение("xn--80aqu.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
													КонецЕсли;
													
												МассивСтруктур=Новый Массив;	
										Для Каждого Стр_1 из МассивКМ Цикл

											GTINНаименованиеТовара=Сред(Стр_1.Марка,3,14);
											HTTPЗапрос_20=Новый HTTPЗапрос("v3/product?gtin="+ДополнитьСтроку(Формат(GTINНаименованиеТовара,"ЧГ="))+"&apikey=l10k3203w65mbngr");
											HTTPЗапрос_20.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded; charset=UTF-8");
											//HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//Тело="task=getItemByGTIN&lng=ru&keyValue="+ДополнитьСтроку(Формат(Стр_1.GTINНаименованиеТовара,"ЧГ="));
									//		HTTPЗапрос.УстановитьТелоИзСтроки();
											//Тело);
											Ответ_20=HTTPСервисЗапрос_20.ОтправитьДляОбработки(HTTPЗапрос_20);
												Если Ответ_20.КодСостояния=200 Тогда
									Текст1_20=Ответ_20.ПолучитьТелоКакСтроку();
												NNN_20=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1_20);//ПрочитатьJSON(ЧтениеJSON);
											Название=неопределено;
											Попытка
												Название=NNN_20.result[0].good_name; 
											Исключение
											КонецПопытки;
											Если Название=Неопределено Тогда
												
									//			http://gepir.gs1ru.org/GEPIR40/index.jsp?p=gtin&lng=ru
											КонецЕсли;
											Если ЗначениеЗаполнено(Название) Тогда
												МассивСтруктур.Добавить(Новый Структура("gtin,Название",GTINНаименованиеТовара,Название));
												
											КонецЕсли;
											КонецЕсли;
										Конеццикла;
										
										МММ=Новый Массив;
										Если МассивСтруктур.Количество()>0 тогда
											МММ=ЗагрузитьПродукции(МассивСтруктур);
											
										КонецЕсли;
										Для Каждого Стр_1 Из МММ Цикл
											ОповеститьОбИзменении(Стр_1);
										КонецЦиклА;
										
										МассивКМ=ПолучитьСледющийМассив(ШтрихКод);
										СписокОбнТовара.Очистить();
										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
												Прокси_20=Новый ИнтернетПрокси;
															Прокси_20.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
														
															HTTPСервисЗапрос_20=Новый HTTPСоединение("gepir.gs1ru.org",,,,Прокси_20,Thumbprint_1.Таймаут);
														Иначе
															HTTPСервисЗапрос_20=Новый HTTPСоединение("gepir.gs1ru.org",,,,,Thumbprint_1.Таймаут);
														КонецЕсли;
														
														
														
													МассивСтруктур.Очистить();	
												
											Для Каждого СтР_1 Из МассивКМ Цикл
												
										

GTINНаименованиеТовара=Сред(Стр_1.Марка,3,14);

												HTTPЗапрос=Новый HTTPЗапрос("GEPIR40/getItem");
												HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded; charset=UTF-8");
												//HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
												//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
												///Константин           
												Тело="task=getItemByGTIN&lng=ru&keyValue="+ДополнитьСтроку(Формат(GTINНаименованиеТовара,"ЧГ="));
												HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
												Ответ=HTTPСервисЗапрос_20.ОтправитьДляОбработки(HTTPЗапрос);
													Если Ответ.КодСостояния=200 Тогда
									
												Текст1=Ответ.ПолучитьТелоКакСтроку();
												NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
												Название=неопределено;
												Попытка
													Название=NNN.gepirItem.itemDataLine[0].itemName; 
												Исключение
												КонецПопытки;
												Если Название=Неопределено Тогда
													
										//			http://gepir.gs1ru.org/GEPIR40/index.jsp?p=gtin&lng=ru
												КонецЕсли;
												Если ЗначениеЗаполнено(Название) Тогда
													МассивСтруктур.Добавить(Новый Структура("gtin,Название",Стр_1.GTINНаименованиеТовара,Название));
													
												КонецЕсли;
												КонецЕсли;
											Конеццикла;
											
										МММ=Новый Массив;
										Если МассивСтруктур.Количество()>0 тогда
											МММ=ЗагрузитьПродукции(МассивСтруктур);
											
										КонецЕсли;
										Для Каждого Стр_1 Из МММ Цикл
											ОповеститьОбИзменении(Стр_1);
										КонецЦиклА;

									

КонецПроцедуры

&НаСервереБезКонтекста
Процедура  ОбновитьинформациюНаСервере(Thumbprint_1,Штрихкод,СписокОбнТовара)
		
			                      		МассивСтруктур=Новый Массив;

								СписокОбнТовара=Новый Массив;
								МассивКМ=ПолучитьСледющийМассив(Штрихкод);
								СписокОбнТовара.Очистить();

								Для Каждого Стр_1 Из МассивКМ Цикл	
																
									МассивПараметров = Новый Массив;
									МассивПараметров.Добавить(Стр_1.Марка);
									МассивПараметров.Добавить(Thumbprint_1);
									
											Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
											Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
											Если Данные <> Неопределено  Тогда
												Товар=ЗагрузитьПродукции_JSON(Данные);
												Если ЗначениеЗАполнено(Товар) Тогда
													Если СписокОбнТовара.Найти(Товар)=Неопределено Тогда
														СписокОбнТовара.Добавить(Товар);
													КонецЕсли;
												КонецЕсли;
											КонецЕсли;
																		Конеццикла;
									
КонецПроцедуры
									

&НаКлиенте
Процедура аа() Экспорт
	ШтрихКод="";
	ЭтаФорма.ТекущийЭлемент=Элементы.ШтрихКод;
КонецПроцедуры


&НаКлиенте
Процедура ШтрихКодАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если БылаБлокировка<>Истина Тогда
		НаСервереБлокировка();
		//ЗаблокироватьДанныеФормыДляРедактирования();
		БылаБлокировка=Истина;
		//ЗаблокироватьДанныеФормыДляРедактирования();
		ЭтаФорма.Модифицированность=Истина;
	Конецесли;
	Если СтрДлина(Текст)>=18 Тогда
		СтандартнаяОбработка=Ложь;
		Текст=СтрЗаменить(Текст,Символ(29),"");
		
		
		Если СтрДлина(Текст)<24 Тогда
			Текст=СтрЗаменить(Текст,Символ(29),"");
			Текст=СтрЗаменить(Текст,"|","");
			Текст=Сред(Текст,1,20);
			Если СтрДлина(Текст)=19 Тогда
				Текст=Сред(Текст,1,18);
			КонецЕсли;
			
			
		КонецЕсли;
		
		Текст=СтрЗаменить(Текст,Символ(29),"");
	      ШтрихКод=Текст;
		  
		
	////НЕОБХОДИМО БУДЕТ ПОМЕНЯТЬ
	Если СтрДлина(Штрихкод)=20 И Сред(ШтрихКод,1,2)="00" Тогда
		Штрихкод=Сред(Штрихкод,3);
	КонецЕсли;
		ШтрихПриИзменении(Элемент);	
		//	  ЗаполнитьИнфуПоШтриху(ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ВернутьИнформациюОКМ(ШтрихКод,ДанныеИзПользователя));
		//  ПроверкаНужна();
		//ПодключитьОбработчикОжидания("аа",0.1,Истина);
		//	ПересчетСуммыДокмента()
	Иначе
		ШтрихКод="";
		
		ПодключитьОбработчикОжидания("аа",0.1,Истина);
	КонецЕслИ;
	
КонецПроцедуры

&НаСервере
Процедура СчитатьОтветНаСервере()
	// Вставить содержимое обработчика.
	Хр=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.Получить(Новый Структура("Документ,Вид",Объект.Ссылка,"Получили ответ")).Файл;
	Если Хр<>Неопределено тогда
		ОтветОтЦРПТ=Хр.Получить();
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура СчитатьОтвет(Команда)
	СчитатьОтветНаСервере();
КонецПроцедуры

&НаСервере
Процедура 	СчитатьОтправкуНаСервере()
	// Вставить содержимое обработчика.
	Хр=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.Получить(Новый Структура("Документ,Вид",Объект.Ссылка,"Отправлен заказ")).Файл;
	Если Хр<>Неопределено тогда
		Отправка=Хр.Получить();
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура СчитатьОтправку(Команда)
	СчитатьОтправкуНаСервере();
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ОбновитьСтатусДокумента_Отгрузка(Ссылка,Статус,Ошибка,Заказ=неопределено)
	
	Если Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ Тогда
		Если Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета
			ИЛИ Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус
			ИЛИ Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы
			ИЛИ Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован Тогда
			Возврат;
		КонецЕсли;
			
		
	КонецЕсли;
	
	Добб=Ссылка.ПолучитьОбъект();
	Добб.ОшибкаОтправки=Ошибка;
	Добб.Статус=Статус;
	
	
	Если ЗначениеЗаполнено(Заказ) Тогда
		
		
		
		Возврат;
	КонецЕсли;
	
	
	Добб.Записать();
	Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета  
		ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
		Тогда
		Попытка
			Добб.Записать(РежимЗаписиДокумента.Проведение) 
		Исключение
		КонецПопытки;
	ИначеЕсли Добб.статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ Тогда
		Добб.ПометкаУдаления=Истина;
		Если Добб.Проведен Тогда
			Добб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Добб.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ЗагрузканаСервереОтмена(Thumbprint_1,СРегистра,УжеОтправили)
	
Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
		Прокси=Новый ИнтернетПрокси;
		Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
	
		HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	Иначе
		HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	КонецЕсли;

 			что=Thumbprint_1.что;
	
	
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Объект._Order_ID+"/body?pg="+Что+"&limit=2147483647");
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
		Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.status="CHECKED_NOT_OK" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Объект.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"");
					ИначеЕсли 	NNN.status="WAIT_ACCEPTANCE" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Объект.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"");
					ИначеЕсли 	NNN.status="CANCELLED" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Объект.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"");
					КонецЕсли;
				
				
		ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
				Если УжеОтправили=Истина Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
				Иначе
					Возврат Ложь;
				КонецЕсли
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				    ОшибкаОтправки="";
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Попытка
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
				КонецПопытки;
			ОбновитьСтатусДокумента_Отгрузка(Объект.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
		

		КонецЕсли;
		
		ЭтаФорма.Прочитать();
		Если Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента") Тогда

			
			СформироватьФайлДляОтправки=ОтказТекст();
			

	//	Попытка
	//		Если НеПрошлаПроверкаИмпорт(СформироватьФайлДляОтправки) Тогда
	//			Объект.ОшибкаОтправки="Проверка документа не прошла по схеме xsd";
	//			//ПоказатьПредупреждение("");
	////			Возврат;
	//			
	//		КонецЕсли;
	//		
	//		
	//	Исключение
	//	КонецПопытки;
		
		
		
	Подписанный="";
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
	Подписанный="";
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПодписатьФайлСервер(СформироватьФайлДляОтправки,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
				Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	
	
	Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
				Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
			Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
			Добав=СтрЗаменить(Добав,"\r\n","");

	Тело="{
	|""product_document"":"""+Добав+""",
	|""document_format"": ""XML"",
	|""signature"":"""+Подписанный+"""}";
	
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
	
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/shipment/cancel");
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
 			что=Thumbprint_1.что;
	
	
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Объект._Order_ID+"/body?pg="+Что+"&limit=2147483647");
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
		Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.status="CHECKED_NOT_OK" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Объект.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"");
					ИначеЕсли 	NNN.status="WAIT_ACCEPTANCE" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Объект.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"");
					ИначеЕсли 	NNN.status="CANCELLED" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Объект.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"");
					КонецЕсли;
				
				
		ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
				Если УжеОтправили=Истина Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
				Иначе
					Возврат ложь
				КонецЕсли
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				    ОшибкаОтправки="";
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Попытка
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
				КонецПопытки;
			ОбновитьСтатусДокумента_Отгрузка(Объект.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
		

		КонецЕсли;
		КонецЕсли;	
КонецФункции

Функция СоздатьДокументОтказаЛекарства()
	
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрацияСеденийОбОтзывеОтгрузок_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Документ.РегистрацияСеденийОбОтзывеОтгрузок_ХамелеонЦРПТ КАК РегистрацияСеденийОбОтзывеОтгрузок_ХамелеонЦРПТ
		|ГДЕ
		|	РегистрацияСеденийОбОтзывеОтгрузок_ХамелеонЦРПТ.ДокументОснование = &ДокументОснование
		|	И НЕ РегистрацияСеденийОбОтзывеОтгрузок_ХамелеонЦРПТ.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Докум=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
Иначе
	Докум=Документы.РегистрацияСеденийОбОтзывеОтгрузок_ХамелеонЦРПТ.СоздатьДокумент();
КонецЕсли;
	Докум.ДокументОснование=Объект.Ссылка;
	дОКУМ.Дата=ТекущаяДата();
	Докум.ТекущийПользователь=Объект.ТекущийПользователь;
	Докум.Записать();
	Возврат Докум.Ссылка
КонецФункции

&НаКлиенте
Процедура ОтменаОтгрузки(Команда,УжеОтправили=Ложь)  ЭКспорт
	// Вставить содержимое обработчика.
	
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;

	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
		
		ИщемСоздаемДокументОтказа=СоздатьДокументОтказаЛекарства();
		ОткрытьФорму("Документ.РегистрацияСеденийОбОтзывеОтгрузок_ХамелеонЦРПТ.Форма.ФормаДокумента",
		Новый Структура("Ключ",ИщемСоздаемДокументОтказа));
		Возврат;
	КонецЕсли;
	
Если ОБъект.Статус<>ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента")
		и ОБъект.Статус<>ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаемРегистрациюУчастникавИСМП")

		тогда
			Сообщить("Можно отказать только отправленные клиенту и не обработанные им");
		Возврат;
	КонецЕсли;
	
		ЭтаФорма.Записать();
		
		
		
		
		
	
	
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
	// Вставить содержимое обработчика.
	Если ОбработкаWEBНаСервере Тогда
		Если НЕ ЗагрузканаСервереОтмена(Thumbprint_1,СРегистра,УжеОтправили) Тогда
				Если УжеОтправили=Истина Тогда
				//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОтменаОтгрузки(Команда,Истина)			
		КонецЕсли
		
		КонецЕсли;
		
		
	Иначе
	
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
		Прокси=Новый ИнтернетПрокси;
		Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
	
		HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	Иначе
		HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	КонецЕсли;

 			что=Thumbprint_1.что;
	
	 Попытка
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Объект._Order_ID+"/body?pg="+Что+"&limit=2147483647");
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
		Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.status="CHECKED_NOT_OK" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Объект.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"");
					ИначеЕсли 	NNN.status="WAIT_ACCEPTANCE" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Объект.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"");
					ИначеЕсли 	NNN.status="CANCELLED" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Объект.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"");
					КонецЕсли;
				
				
		ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
				Если УжеОтправили=Истина Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
				Иначе
					ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
					ОтменаОтгрузки(Команда,Истина)			
				КонецЕсли
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				    ОшибкаОтправки="";
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Попытка
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
				КонецПопытки;
			ОбновитьСтатусДокумента_Отгрузка(Объект.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
		

		КонецЕсли;
	Исключение
		КонецПопытки;
		
		ЭтаФорма.Прочитать();
		Если Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента") 
			ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаемРегистрациюУчастникавИСМП") 
			Тогда

			
			СформироватьФайлДляОтправки=ОтказТекст();
			

	//	Попытка
	//		Если НеПрошлаПроверкаИмпорт(СформироватьФайлДляОтправки) Тогда
	//			Объект.ОшибкаОтправки="Проверка документа не прошла по схеме xsd";
	//			//ПоказатьПредупреждение("");
	////			Возврат;
	//			
	//		КонецЕсли;
	//		
	//		
	//	Исключение
	//	КонецПопытки;
		
		
		
	Подписанный="";
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
	Подписанный="";
	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
				Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	
	
	Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
				Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
			Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
			Добав=СтрЗаменить(Добав,"\r\n","");

	Тело="{
	|""product_document"":"""+Добав+""",
	|""document_format"": ""MANUAL"",
	|""type"": ""LP_CANCEL_SHIPMENT"",
	|""signature"":"""+Подписанный+"""}";
	
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			
 			что=Thumbprint_1.что;

			
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg="+Что);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
			
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Объект._Order_ID+"/body?pg="+Что+"&limit=2147483647");
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
		Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.status="CHECKED_NOT_OK" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Объект.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"");
					ИначеЕсли 	NNN.status="WAIT_ACCEPTANCE" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Объект.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"");
					ИначеЕсли 	NNN.status="CANCELLED" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Объект.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"");
					КонецЕсли;
				
				
		ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
				Если УжеОтправили=Истина Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
				Иначе
					ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
					ОтменаОтгрузки(Команда,Истина)			
				КонецЕсли
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				    ОшибкаОтправки="";
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Попытка
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
				КонецПопытки;
			ОбновитьСтатусДокумента_Отгрузка(Объект.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
		

		КонецЕсли;
		КонецЕсли;
		
		ЭтаФорма.Прочитать();
	    КонецЕсли;
КонецПроцедуры

Функция ОтказТекст()
	
	НовыйДЖсон=Новый ЗаписьJSON;
	НовыйДЖсон.УстановитьСтроку();
	НовыйДЖсон.ЗаписатьНачалоОбъекта();
	НовыйДЖсон.ЗаписатьИмяСвойства("cancel_shipment_date");
	НовыйДЖсон.ЗаписатьЗначение(Формат(Объект.ДатаПередачиТовара,"ДФ=""гггг-ММ-дд"""));
	НовыйДЖсон.ЗаписатьИмяСвойства("shipment_number");
	НовыйДЖсон.ЗаписатьЗначение(Объект._Order_ID);
	НовыйДЖсон.ЗаписатьИмяСвойства("participant_inn");
	НовыйДЖсон.ЗаписатьЗначение(Объект.Организация.ИНН);
	НовыйДЖсон.ЗаписатьКонецОбъекта();
	Возврат НовыйДЖсон.Закрыть();
	
	
		Возврат "<cancel_shipment_signs action_id=""12"">
	|<shipment_number>"+Объект._Order_ID+"</shipment_number>  
	|<participant_inn>"+Объект.Организация.ИНН+"</participant_inn>  
		|</cancel_shipment_signs >
		|";
	
	КонецФункции

&НаСервере
Функция ТоварыGTINПриИзмененииНаСервере(Товар)
	// Вставить содержимое обработчика.
	ЕдИзм=Товар.ЕдиницаИзмерения_УПД;
	Если не ЗначениеЗаполнено(ЕдИзм) тогда
		ЕдИзм=Объект.ТекущийПользователь.ОсновнаяЕдиницаИзмерения;
	Конецесли;
	Возврат Новый Структура("КодТНВЭД,ЕдиницаИзмерения",Товар.КодТНВЭД,ЕдИзм);
Конецфункции

&НаКлиенте
Процедура ТоварыGTINПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ТекД=Элементы.Товары.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекД,ТоварыGTINПриИзмененииНаСервере(ТекД.GTIN));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
	Если Копирование=Ложь тОгда
		Отказ=Истина;
		Если Элемент.ТекущиеДанные<>Неопределено Тогда
			РРР=Элемент.ТекущиеДанные.GTIN;
		Иначе
			РРР=Неопределено;
		КонецЕсли;
		ОткрытьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаВыбораКМ",
		Новый структура("Организация,ТекущаяСтрока",Объект.Организация,РРР),,,,,
		Новый ОписаниеОповещения("ПослеВыбораПродукции",ЭтаФорма,Элемент));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПродукции(РР,ДД) Экспорт
	Если РР<>Неопределено Тогда
		Для Каждого Стр Из РР ЦИкл
			ШтрихКод=Стр;
	штрихКод=СтрЗаменить(ШтрихКод,Символ(29),"");
	////НЕОБХОДИМО БУДЕТ ПОМЕНЯТЬ
	Если СтрДлина(Штрихкод)=20 И Сред(ШтрихКод,1,2)="00" Тогда
		Штрихкод=Сред(Штрихкод,3);
	КонецЕсли;
	Сигналить=Ложь;
			ЗаполнитьИнфуПоШтриху(ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ВернутьИнформациюОКМ(ШтрихКод,),Сигналить);
			Если Сигналить=Истина И ИздаватьЗвукПрИНеправильнойКМ=Истина Тогда
			#Если ВебКлиент Тогда
							#Иначе
		Сигнал();
						#КонецЕсли
			Конецесли;
			ПроверкаНужна();
			ПересчетСуммыДокмента();
		Конеццикла;
		ШтрихКод="";
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СерийныеНомераПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
		Отказ=Истина;
		Если Элемент.ТекущиеДанные<>Неопределено Тогда
			РРР=Элемент.ТекущиеДанные.GTIN;
		Иначе
			РРР=Неопределено;
		КонецЕсли;
		ОткрытьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаВыбораКМ",
		Новый структура("Организация,ТекущаяСтрока",Объект.Организация,РРР),,,,,
		Новый ОписаниеОповещения("ПослеВыбораПродукции",ЭтаФорма,Элемент));

КонецПроцедуры

&НаКлиенте
Процедура СерийныеНомераПередУдалением(Элемент, Отказ)
		// Вставить содержимое обработчика.
	

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
		ТекД=Элементы.Товары.ТекущиеДанные;
	НН=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",ТекД.НомерстрокиСвязи));
	Для Каждого Стр_1 Из НН Цикл
		Объект.СерийныеНомера.Удалить(Стр_1);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	// Вставить содержимое обработчика.
	ПересчетСуммыДокмента();
КонецПроцедуры

&НаКлиенте
Процедура ПересчетСуммыДокмента()
	Объект.СуммаДокумента=0;
	Для Каждого Стр Из Объект.Товары Цикл
		Объект.СуммаДокумента=ОБъект.СуммаДокумента+Стр.Цена*Стр.КоличествоКМ;
	КонецциклА;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Вставить содержимое обработчика.
	Если Не ЗначениеЗаполнено(ТекущийПользователь) тогда
		Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
		Если НЕ Форм.Открыта() Тогда
			Форм.Открыть();
			ЭтаФорма.Активизировать();
		Конецесли;
		ТекущийПользователь=Форм.Пользователь;
	КонецЕсли;
	
	
	НачатьПолучениеКаталогаВременныхФайлов(Новый ОписаниеОповещения("ПослеПолученияКаталог",ЭтаФорма));

	ДанныеИзПользователя=ПолучитьИзПользователя();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияКаталог(РР,ДД) Экспорт
	КаталогВременныхФ=РР;
КонецПроцедуры


Процедура НаСервереОпределяем_Подсчет(МассивЦИС,ПоВыделенным=Ложь)
	
	Если ПоВыделенным=Истина Тогда
		
		Для Каждого Стр_3423 Из Элементы.Товары.ВыделенныеСтроки Цикл
			Стр=Объект.Товары.НайтиПоИдентификатору(Стр_3423);
			Стр.КоличествоНомеровКМ=0;
			Нстр=ОБъект.СерийныеНомера.НайтиСтроки(Новый Структура("НаименованиеТовара",Стр.GTIN));
			
			Для Каждого Стр_1 Из НСТр Цикл
		//Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
			
				//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		// Данный фрагмент построен конструктором.
		// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Марка,
			|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.ТипУпаковки
			|ИЗ
			|	Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Марки КАК СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки
			|ГДЕ
			|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.НомерКороба = &НомерКороба
			|	И СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.Проведен
			|	И СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан)";
		
		Запрос.УстановитьПараметр("НомерКороба", Стр_1.cis);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда
			МассивЦИС.Добавить(Стр_1.cis);
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					НомерКМ=ВыборкаДетальныеЗаписи.Марка;
					ТипУпаковки=ВыборкаДетальныеЗаписи.ТипУпаковки;
					
					Если (Не ЗначениеЗаполнено(ТипУпаковки) И
						СтрДлина(НомерКМ)=18)
						ИЛИ (ЗначениеЗаполнено(ТипУпаковки) 
						И ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка)
						Тогда
						
						
						
							Запрос = Новый Запрос;
							Запрос.Текст = 
								"ВЫБРАТЬ
								|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Марка
								|ИЗ
								|	Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Марки КАК СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки
								|ГДЕ
								|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.НомерКороба = &НомерКороба
								|	И СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.Проведен
								|	И СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан)";
							
							Запрос.УстановитьПараметр("НомерКороба", НомерКМ);
							
							РезультатЗапроса = Запрос.Выполнить();
							
							ВыборкаДетальныеЗаписи_2931ш31 = РезультатЗапроса.Выбрать();
							Пока ВыборкаДетальныеЗаписи_2931ш31.Следующий() Цикл
								
								//Добав_1=Строк_3.ПолучитьЭлементы().Добавить();
								//Добав_1.НомерКМ=ВыборкаДетальныеЗаписи_2931ш31.Марка;
								
								Стр.КоличествоНомеровКМ=Стр.КоличествоНомеровКМ+1;
						
						КонецЦикла;
						
					Иначе
						Стр.КоличествоНомеровКМ=Стр.КоличествоНомеровКМ+1;
						
						
					КонецЕсли;
					
					
			КонецЦикла;
		КонецЕсли;
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

			
		Конеццикла;
		Конеццикла;
		
		
	Иначе
		
		Для Каждого Стр Из Объект.Товары Цикл
			Стр.КоличествоНомеровКМ=0;
			Нстр=ОБъект.СерийныеНомера.НайтиСтроки(Новый Структура("НаименованиеТовара",Стр.GTIN));
			
			Для Каждого Стр_1 Из НСТр Цикл
		//Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
			
				//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		// Данный фрагмент построен конструктором.
		// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Марка,
			|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.ТипУпаковки
			|ИЗ
			|	Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Марки КАК СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки
			|ГДЕ
			|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.НомерКороба = &НомерКороба
			|	И СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.Проведен
			|	И СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан)";
		
		Запрос.УстановитьПараметр("НомерКороба", Стр_1.cis);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда
			МассивЦИС.Добавить(Стр_1.cis);
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					НомерКМ=ВыборкаДетальныеЗаписи.Марка;
					
					ТипУпаковки=ВыборкаДетальныеЗаписи.ТипУпаковки;
					
					Если (Не ЗначениеЗаполнено(ТипУпаковки) И
						СтрДлина(НомерКМ)=18)
						ИЛИ (ЗначениеЗаполнено(ТипУпаковки) 
						И ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка)
						Тогда
						
						
						
						
							Запрос = Новый Запрос;
							Запрос.Текст = 
								"ВЫБРАТЬ
								|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Марка
								|ИЗ
								|	Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Марки КАК СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки
								|ГДЕ
								|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.НомерКороба = &НомерКороба
								|	И СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.Проведен
								|	И СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан)";
							
							Запрос.УстановитьПараметр("НомерКороба", НомерКМ);
							
							РезультатЗапроса = Запрос.Выполнить();
							
							ВыборкаДетальныеЗаписи_2931ш31 = РезультатЗапроса.Выбрать();
							Пока ВыборкаДетальныеЗаписи_2931ш31.Следующий() Цикл
								
								//Добав_1=Строк_3.ПолучитьЭлементы().Добавить();
								//Добав_1.НомерКМ=ВыборкаДетальныеЗаписи_2931ш31.Марка;
								
								Стр.КоличествоНомеровКМ=Стр.КоличествоНомеровКМ+1;
						
						КонецЦикла;
						
					Иначе
						Стр.КоличествоНомеровКМ=Стр.КоличествоНомеровКМ+1;
						
						
					КонецЕсли;
					
					
			КонецЦикла;
		КонецЕсли;
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

			
		Конеццикла;
		Конеццикла;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура РекурсияУпаковки_Лекарства(Строк,Количество,Thumbprint_1,СРегистра,subjectIdФармацевтика)
	
			Попытка
	ММ= Строк.cis;
Исключение
	
	ММ= Строк;
	КонецПопытки;
	
	Если СтрДлина(ММ)=20 Тогда
		ММ=Сред(ММ,3);
	КонецЕслИ;
		Если СтрДлина(ММ)<>18 Тогда
			Возврат;
		КонецЕсли;
	
	     cis_1=ММ;
		
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("documents");
	Чтение.ЗаписатьАтрибут("version","1.35");
 	
	Чтение.ЗаписатьНачалоЭлемента("query_kiz_info");
	Чтение.ЗаписатьАтрибут("action_id","210");
	
	Чтение.ЗаписатьНачалоЭлемента("subject_id");
	Чтение.ЗаписатьТекст(subjectIdФармацевтика);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("sscc_down");
	Чтение.ЗаписатьТекст(cis_1);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	СформироватьФайлДляОтправки=Чтение.Закрыть();
			
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

				
				Подписанный="";
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,ЛОжь);
		
			Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
		Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("document");
	Чтен.ЗаписатьЗначение(Добав);
	Чтен.ЗаписатьИмяСвойства("sign");
	Чтен.ЗаписатьЗначение(Подписанный);
	Чтен.ЗаписатьИмяСвойства("request_id");
	Чтен.ЗаписатьЗначение(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВернутьУНИКУМ());
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();
	
				 
				 
		//Тело="{
		//|""doc_type"":""311"",
		//|""document"":"""+Добав+""",
		//|""sign"":"""+Подписанный+""",
		//|""request_id"":"""+ВернутьУНИКУМ()+"
		//|}";
			
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/send");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		
		Если Ответ.КодСостояния=200 Тогда
			
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			_Order_ID=NNN.document_id;
			
			
			Пока Истина Цикл
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
				
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+_Order_ID+"/ticket");
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("documents/"+_Order_ID+"/ticket");
					
				Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
					
					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
					
				КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	
		
	//	 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				 
				 
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					
					
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(NNN.link,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//
					Сайт_1=NNN.link;
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
					
					
					
					
					
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Текст1) 
		ИЛИ Найти(Текст1,"Ошибка при выполнении операции: запись не найдена"" }")>1
		тогда
						ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
						 
						 Продолжить;
					 КонецЕсли;
					 
					 МассивУп=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.МассивКмОвДляОбработки_Упаковки(Текст1);
					 Для Каждого Стр_1 Из МассивУп Цикл
						//Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",cis_1,Стр_1.НомерКМ)).Количество()=0 Тогда
						
						//	ДобавК=Объект.Короба.Добавить();
						//	ДобавК.НомерКороба=cis_1;
						//	ДобавК.ШтрихКод=Стр_1.НомерКМ;
						//	БылиУпаковки=Истина;
						//КонецЕсли;
						
						//Строк_1.НомерКМ=ключ;    
						Если Стр_1.Продолжить=Истина Тогда
							РекурсияУпаковки_Лекарства(Строк,Количество,Thumbprint_1,Срегистра,subjectIdФармацевтика)								
						Иначе
						     Количество=Количество+1;
						
						КонецЕсли;
						 
					Конеццикла;
					 
					 Прервать;
					 
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					    	Возврат;					
				ИначеЕсли Ответ.КодСостояния=301 Тогда
					Возврат;
					
				Иначе
					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
						Продолжить;
				КонецЕсли;
		
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
				
	              Прервать;
		
		
				
				
			Конеццикла;
						
		//Сообщить(Ответ.ПолучитьТелоКакСтроку());	
	КонецЕсли;
		
		
КонецПроцедуры

Функция Вернутьsub()
//	Возврат Объект.ДоговорОрганизации.РегистрационныйНомер
	РегК=Объект.ДоговорОрганизации.РегистрационныйНомер;
	Если ЗначениеЗаполнено(РегК) тогда
		Возврат РегК
	КонецЕсли;
		Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Договора_ХамелеонЦРПТ.РегистрационныйНомер КАК ссылка
		|ИЗ
		|	Справочник.Договора_ХамелеонЦРПТ КАК Договора_ХамелеонЦРПТ
		|ГДЕ
		|	Договора_ХамелеонЦРПТ.Владелец = &Владелец
		|	И Договора_ХамелеонЦРПТ.РегистрационныйНомер <> """"";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Возврат ВыборкаДетальныеЗаписи.Ссылка
	КонецЦикла;
Конецфункции




&НаКлиенте
Процедура ЗакачатьДетальнуюИнформацию(Массив)
				//ИННПоставщика="";
				Thumbprint_1=ПолучитьИзПользователя();	
				Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
					Возврат;
				КонецЕслИ;
				
				
				
					
						Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
							Прокси=Новый ИнтернетПрокси;
							Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
						
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
						Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
						КонецЕсли;
					
						
	СРегистра="";
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
	Для Каждого Стр Из Объект.Товары Цикл
		//Стр.КоличествоНомеровКМ=0;
		Нстр=ОБъект.СерийныеНомера.НайтиСтроки(Новый Структура("НаименованиеТовара",Стр.GTIN));
		
		Для Каждого Стр_М Из НСТр Цикл
			                               
			Если Массив.Найти(Стр_М.cis)=Неопределено Тогда
				
				Если СтрДлина(Стр_М.cis)=18 Тогда
					
					РекурсияУпаковки_Лекарства(Стр_М,Стр.КоличествоНомеровКМ,Thumbprint_1,СРегистра,Вернутьsub());
					
					
				Иначе
					Стр.КоличествоНомеровКМ=Стр.КоличествоНомеровКМ+1;
				КонецЕсли;
			КонецЕсли;
			
		КонецциклА;
		
		
		
	КонецЦикла;
	
КонецПроцедуры



&НаКлиенте
Процедура Подсчитать(Команда)    Экспорт
	// Вставить содержимое обработчика.
	
		ЗакачатьДетальнуюИнформацию_Карточки("");
		
		Возврат;
	
	
	
	МассивЦИС=Новый массив;
	НаСервереОпределяем_Подсчет(МассивЦИС);	
	
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
		ЗакачатьДетальнуюИнформацию(МассивЦИС);
		Возврат;
	КонецЕсли;
	
	
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра)  Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	
	Для Каждого Стр Из Объект.Товары Цикл
		//Стр.КоличествоНомеровКМ=0;
		Нстр=ОБъект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		
		Для Каждого Стр_М Из НСТр Цикл
			                               
			Если МассивЦИС.Найти(Стр_М.cis)=Неопределено Тогда
				
				Если Стр_М.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка") Тогда
					              
					РекурсияУпаковки(Стр_М,Стр.КоличествоНомеровКМ,Thumbprint_1,СРегистра);
					
					
				Иначе
					Стр.КоличествоНомеровКМ=Стр.КоличествоНомеровКМ+1;
				КонецЕсли;
			КонецЕсли;
			
		КонецциклА;
		
		
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РекурсияУпаковки(Строк,Количество,Thumbprint_1,СРегистра)
	
	
	
	
	
	
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		Сообщить("Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;

			Попытка
	ММ= Строк.cis;
Исключение
	
	ММ= Строк;
	КонецПопытки;
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ));
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния=200 или Ответ.КодСостояния=202 Тогда
	//ЧтениеJSON = Новый ЧтениеJSON;
	//ЧтениеJSON.УстановитьСтроку(Текст1);
	
	Текст12=Текст1;
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст12);//ПрочитатьJSON(ЧтениеJSON);
	
	Если NNN=Неопределено Тогда
		Текст12=Текст1;
		NNN_22=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст12);//ПрочитатьJSON(ЧтениеJSON);
		Попытка
		Для Каждого Стр_1 Из NNN_22["children"] Цикл
			Если СтрДлина(Стр_1["cis"])=18 Тогда
				РекурсияУпаковки(Стр_1["cis"],Количество,Thumbprint_1,СРегистра)
			Иначе
				Количество=Количество+1;
			КонецеслИ;
		КонецЦиклА;
	Исключение
		Возврат;
		КонецПопытки;
	Иначе
		Для Каждого Стр_1 Из NNN.children Цикл
			Если СтрДлина(Стр_1.cis)=18 Тогда
				РекурсияУпаковки(Стр_1 ,Количество,Thumbprint_1,СРегистра)
			Иначе
				Количество=Количество+1;
			КонецеслИ;
		КонецЦиклА;
	КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры



Процедура РекурсияУпаковкиСервер(Строк,Количество,Thumbprint_1,СРегистра)
	
	
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		Сообщить("Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
	ММ= Строк.cis;
			
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ));
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	//ЧтениеJSON = Новый ЧтениеJSON;
	//ЧтениеJSON.УстановитьСтроку(Текст1);
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);
	
	Для Каждого Стр_1 Из NNN.children Цикл
		Если СтрДлина(Стр_1.cis)=18 Тогда
			РекурсияУпаковкиСервер(Стр_1 ,Количество,Thumbprint_1,СРегистра)
		Иначе
			Количество=Количество+1;
		КонецеслИ;
	КонецЦиклА;
	
КонецПроцедуры

Процедура   НаСервереВыд(СРегистра,Thumbprint_1)
Для Каждого Стр_1 Из Элементы.Товары.ВыделенныеСтроки Цикл
			Стр=Объект.Товары.НайтиПоИдентификатору(Стр_1);
			Стр.КоличествоНомеровКМ=0;
			Нстр=ОБъект.СерийныеНомера.НайтиСтроки(Новый Структура("НаименованиеТовара",Стр.GTIN));
			
			Для Каждого Стр_М Из НСТр Цикл
				Если СтрДлина(Стр_М.cis)=18 Тогда
					
					РекурсияУпаковкиСервер(Стр_М,Стр.КоличествоНомеровКМ,Thumbprint_1,СРегистра);
					
					
				Иначе
					Стр.КоличествоНомеровКМ=Стр.КоличествоНомеровКМ+1;
				КонецЕсли;
				
			КонецциклА;
			
			
			
		КонецЦикла;	
	КонецПроцедуры

&НаКлиенте
Процедура ВУпаковке(Команда)
	// Вставить содержимое обработчика.
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
	
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	
	
	            	Если ОбработкаWEBНаСервере Тогда
		НаСервереВыд(СРегистра,Thumbprint_1);
			
		
	Иначе

	Для Каждого Стр_1 Из Элементы.Товары.ВыделенныеСтроки Цикл
		Стр=Объект.Товары.НайтиПоИдентификатору(Стр_1);
		Стр.КоличествоНомеровКМ=0;
		Нстр=ОБъект.СерийныеНомера.НайтиСтроки(Новый Структура("НаименованиеТовара",Стр.GTIN));
		
		Для Каждого Стр_М Из НСТр Цикл
			Если СтрДлина(Стр_М.cis)=18 Тогда
				
				РекурсияУпаковки(Стр_М,Стр.КоличествоНомеровКМ,Thumbprint_1,СРегистра);
				
				
			Иначе
				Стр.КоличествоНомеровКМ=Стр.КоличествоНомеровКМ+1;
			КонецЕсли;
			
		КонецциклА;
		
		
		
	КонецЦикла;
КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьТелоЗапросаПодключение(cis)
	МассивКодо=Новый Массив;
	          МассивКодо.Добавить(cis);
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("ids", МассивКодо);
			ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, "  ");
			
			ЗаписьJSON = Новый ЗаписьJSON();
			ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
			
			ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
			
			Возврат ЗаписьJSON.Закрыть();

КонецФункции

&НаКлиенте
Процедура ПолучитьСтатусыПоКМ(Команда,ТолькоА=Ложь)
	// Вставить содержимое обработчика.
	
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	МассивКМ=Новый Массив;
	Для каждого Стр_1 Из Объект.СерийныеНомера Цикл
		
		Если ВРЕГ(Стр_1.статус)="INTRODUCED" ИЛИ (Врег(Стр_1.Статус)="APPLIED" И ТолькоА=Ложь) Тогда
			Продолжить;
		КонецЕсли;
		Стр_1.Статус="Не найдено в ЦРПТ";
		Стр_1.ВОбороте=Ложь;
		
		МассивКМ.Добавить(Стр_1.cis);
	Конеццикла;	
	ОбработатьстатусыКМ(МассивКМ);
	
	Возврат;
	
	Thumbprint_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
	
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	
	

	Для каждого Стр_1 Из Объект.СерийныеНомера Цикл
		
		Если ВРЕГ(Стр_1.статус)="INTRODUCED" ИЛИ (Врег(Стр_1.Статус)="APPLIED" И ТолькоА=Ложь) Тогда
			Продолжить;
		КонецЕсли;
		    Стр_1.Статус=Неопределено;
	   НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	
	   Если НаСервере Тогда
		 Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Стр_1.cis);  
		Иначе
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			Если Thumbprint_1.НаименованиеСтенда="Табак" 
			ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
				
				Тогда
	
		NN=ВернутьТелоЗапросаПодключение(Стр_1.cis);
						
	
			HTTPЗапрос=Новый HTTPЗапрос("private-office-api/private/v2/cis/status");
			//private-office-api/private/v2/cis/"+КодМаркировки+"/mrp"
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин   
			HTTPЗапрос.УстановитьТелоИзСтроки(NN,КодировкаТекста.UTF8);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
Иначе
			
			Текст=Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(Стр_1.cis);
			Марк=Текст.Получитьтекст();
	
 			что=Thumbprint_1.что;
	
	ММ= Стр_1.cis;
	
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"&pg="+что);
//		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"&pg="+что);;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
КонецЕсли;
КонецЕсли;

		Если НаСервере Тогда
			Текст1=Ответ.ПолучитьТелоКакСтроку;
			
		Иначе
			Текст1=Ответ.ПолучитьТелоКакСтроку();
		КонецЕсли;	
		
		Если Thumbprint_1.НаименованиеСтенда="Табак"
			ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
			Тогда
		
			Попытка
		//ЧтениеJSON = Новый ЧтениеJSON;
		//	ЧтениеJSON.УстановитьСтроку(Текст1);
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Если NNN=Неопределено тогда
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Стр_1.Статус=NNN["status"];
					
			Иначе
				Стр_1.Статус=NNN.status;
			КонецЕсли;
				
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Сообщить(Текст1);
			КонецПопытки;
	
Иначе
//ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(Текст1);
Попытка
	Если Ответ.КодСостояния=200 Тогда
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Если NNN=Неопределено тогда
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Стр_1.Статус=NNN["status"];
					
			Иначе
				Стр_1.Статус=NNN.status;
			КонецЕсли;
				
		Иначе
		
		Стр_1.Статус=Ответ.КодСостояния;
		 Сообщить(Текст1);
	КонецЕсли;
	

	
Исключение
	Сообщить(ОписаниеОшибки());
	Сообщить(Текст1);
КонецПопытки;
КонецЕсли;



	Конеццикла;
ИзменитьВидимость()	
КонецПроцедуры
&НаКлиенте
Процедура ОткрытьВнешниеОбработки(Команда)
	// Вставить содержимое обработчика.
	ОткрытьФорму("Справочник.ВнешниеОбработки_ХамелеонЦРПТ.Форма.ФормаСписка",
	Новый структура("Тип",
		ТипДокумента()));
КонецПроцедуры


Функция ТипДокумента()
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя()
КонецФункции

Процедура НаСервереОпределяем(МассивЦИС,Всю,МассивКМ_1)
	
	Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		Если МассивКМ_1.Найти(Стр_1.cis)<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Марка,
		|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.ТипДокумента КАК ТипДокумента,
		|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.ТипУпаковки
		|ИЗ
		|	Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Марки КАК СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки
		|ГДЕ
		|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.НомерКороба = &НомерКороба
		|	И СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.Проведен
		|	И СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан)";
	
	Запрос.УстановитьПараметр("НомерКороба", Стр_1.cis);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда
		
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если ВыборкаДетальныеЗаписи.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.ИзъятиеИзУпаковки 
				ИЛИ ВыборкаДетальныеЗаписи.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.Расформирование
				Тогда
				///Есть изъятие пропускаем будет смотреть в ЦРПТ
				Возврат;
			КонецЕсли;
		Конеццикла;
		
		ВыборкаДетальныеЗаписи.Сбросить();
		
		Добав=ДеревоКМ.ПолучитьЭлементы().Добавить();
		

		
			Добав.Продукция="";

			Добав.НомерКороба=Стр_1.cis;
			Добав.cis=Стр_1.cis;
			Добав.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка;
			//Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка;
			УдаляемИзДерева=Новый Массив;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
			
			
				Строк_3=Добав.ПолучитьЭлементы().Добавить();
				
				Строк_3.НомерКМ=ВыборкаДетальныеЗаписи.Марка;
				Строк_3.ТипУпаковки=ВыборкаДетальныеЗаписи.ТипУпаковки;
				УдаляемИзДерева.Добавить(Строк_3);
				
				//Если СтрДлина(Строк_3.НомерКМ)=18 Тогда
					
					
					
						Запрос = Новый Запрос;
						Запрос.Текст = 
							"ВЫБРАТЬ
							|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Марка,
							|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.ТипДокумента КАК ТипДокумента,
							|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.ТипУпаковки  КАК ТипУпаковки
							|ИЗ
							|	Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Марки КАК СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки
							|ГДЕ
							|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.НомерКороба = &НомерКороба
							|	И СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.Проведен
							|	И СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан)";
						
						Запрос.УстановитьПараметр("НомерКороба", Строк_3.НомерКМ);
						
						РезультатЗапроса = Запрос.Выполнить();
						
						
						
						ВыборкаДетальныеЗаписи_2931ш31 = РезультатЗапроса.Выбрать();
						
						
						Пока ВыборкаДетальныеЗаписи_2931ш31.Следующий() Цикл
							
							
									Если ВыборкаДетальныеЗаписи.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.ИзъятиеИзУпаковки 
										ИЛИ ВыборкаДетальныеЗаписи.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.Расформирование
										Тогда
										///Есть изъятие пропускаем будет смотреть в ЦРПТ
										
										//Для Каждого Стр_Уд Из УдаляемИзДерева Цикл
										//	
										//	 Добав.ПолучитьЭлементы().Удалить(Стр_Уд);
										//	
										// Конеццикла;
										 ДеревоКМ.ПолучитьЭлементы().Удалить(Добав);
										
										Возврат;
									КонецЕсли;
								Конеццикла;
								
								ВыборкаДетальныеЗаписи_2931ш31.Сбросить();
						Если ВыборкаДетальныеЗаписи_2931ш31.Количество()>0 Тогда
							Пока ВыборкаДетальныеЗаписи_2931ш31.Следующий() Цикл
								
								Добав_1=Строк_3.ПолучитьЭлементы().Добавить();
								Добав_1.НомерКМ=ВыборкаДетальныеЗаписи_2931ш31.Марка;
								Добав_1.ТипУпаковки=ВыборкаДетальныеЗаписи_2931ш31.ТипУпаковки;
						
								КонецЦикла;
						КонецЕслИ;
					
					
					
				//КонецЕсли;
				
				
			КонецЦикла;
			
		       МассивЦИС.Добавить(Добав.cis);
			
	КонецЕсли;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		
Конеццикла;



КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюПоТабаку(Thumbprint_1,Всю)
МассивКМ_1=Новый Массив;
		МассивКМ_1.Очистить();
	Если Всю=Истина Тогда
		УдалитьМ=Новый Массив;
		ДЛя Каждого Стр_222 Из ДеревоКМ.ПолучитьЭлементы() Цикл
			Если Стр_222.ПолучитьЭлементы().Количество()=0 Тогда
				УдалитьМ.Добавить(Стр_222);
			Иначе
				МассивКМ_1.Добавить(Стр_222.cis);
			КонецЕсли;
		Конеццикла;
		Для Каждого Стр_ММ Из УдалитьМ Цикл
			ДеревоКМ.ПолучитьЭлементы().Удалить(Стр_ММ);
		Конеццикла;
	Иначе
		ДеревоКМ.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	МассивЦИС=Новый Массив;
	МассивЦИС.Очистить();
	НаСервереОпределяем(МассивЦИС,Всю,МассивКМ_1);
	МассивCis=Новый Массив;
	
	Для Каждого Стр_ иЗ ОБъект.СерийныеНомера Цикл
		Если МассивЦИС.Найти(Стр_.cis)=неопределено Тогда
			
			МассивCis.Добавить(Стр_.cis);
		КонецЕсли;
	Конеццикла;
	
	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюПоКМ_Массив_Табак(ДеревоКМ,МассивCis,Объект.ТекущийПользователь);
	
	
	ИтогоКМ=0;
	ИтогУпаковок=0;
	Объект.ТоварыКМ.Очистить();
	
	НасервереПодсчет();
	
	Для Каждого Стр_11 Из Объект.Товары Цикл
		Стр_11.КоличествоНомеровКМ=0;
	Конеццикла;
	
	
	НаСервереОпределяемСтрочки();
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнформацию(Команда,Всю=Ложь)  Экспорт
				Thumbprint_1=ПолучитьИзПользователя();	
				Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
					Возврат;
				КонецЕслИ;
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
		ОбновитьИнформациюПоФармац(Thumbprint_1);		
		
			ИтогоКМ=0;
	ИтогУпаковок=0;
	Объект.ТоварыКМ.Очистить();
	
	НасервереПодсчет();
	
	Для Каждого Стр_11 Из Объект.Товары Цикл
		Стр_11.КоличествоНомеровКМ=0;
	Конеццикла;
	
	
	НаСервереОпределяемСтрочки();
	
	
		Возврат;
	КонецЕсли;				
	
	Если Thumbprint_1.НаименованиеСтенда="Табак"
					ИЛИ 
					Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
					Тогда
		ОбновитьИнформациюПоТабаку(Thumbprint_1,Всю);			
		
			ИтогоКМ=0;
	ИтогУпаковок=0;
	Объект.ТоварыКМ.Очистить();
	
	НасервереПодсчет();
	
	Для Каждого Стр_11 Из Объект.Товары Цикл
		Стр_11.КоличествоНомеровКМ=0;
	Конеццикла;
	
	
	НаСервереОпределяемСтрочки();
	
		
	
		Возврат;
	КонецЕсли;				
		
	
МассивКМ_1=Новый Массив;
		МассивКМ_1.Очистить();
	Если Всю=Истина Тогда
		УдалитьМ=Новый Массив;
		ДЛя Каждого Стр_222 Из ДеревоКМ.ПолучитьЭлементы() Цикл
			Если Стр_222.ПолучитьЭлементы().Количество()=0 Тогда
				УдалитьМ.Добавить(Стр_222);
			Иначе
				МассивКМ_1.Добавить(Стр_222.cis);
			КонецЕсли;
		Конеццикла;
		Для Каждого Стр_ММ Из УдалитьМ Цикл
			ДеревоКМ.ПолучитьЭлементы().Удалить(Стр_ММ);
		Конеццикла;
	Иначе
		ДеревоКМ.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	МассивЦИС=Новый Массив;
	МассивЦИС.Очистить();
	НаСервереОпределяем(МассивЦИС,Всю,МассивКМ_1);
	МассивCis=Новый Массив;
	
	Для Каждого Стр_ иЗ ОБъект.СерийныеНомера Цикл
		Если МассивЦИС.Найти(Стр_.cis)=неопределено Тогда
			
			МассивCis.Добавить(Стр_.cis);
		КонецЕсли;
	Конеццикла;
	
	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюПоКМ_Массив(ДеревоКМ,МассивCis,Объект.ТекущийПользователь);
	
	
	ИтогоКМ=0;
	ИтогУпаковок=0;
	Объект.ТоварыКМ.Очистить();
	
	НасервереПодсчет();
	
	Для Каждого Стр_11 Из Объект.Товары Цикл
		Стр_11.КоличествоНомеровКМ=0;
	Конеццикла;
	
	
	НаСервереОпределяемСтрочки();
//	Для Каждого Стр_22 Из Объект.УстановкаЦенДляКаждойПродукции Цикл
//		Стр_22.Количество=0;
//	Конеццикла;
	
//	Для Каждого Стр_1 Из Объект.ТоварыКМ Цикл
//		Нстр=Объект.УстановкаЦенДляКаждойПродукции.НайтиСтроки(Новый Структура("GTIN",Стр_1.Продукция));
//		Если НСтр.Количество()=0 Тогда
//			Добав=Объект.УстановкаЦенДляКаждойПродукции.Добавить();
//			Добав.GTIN=Стр_1.Продукция;
//		Иначе
//			Добав=НСтр[0];
//		КонецЕсли;
//		Добав.Количество=Добав.Количество+1;
		
		
//	Конеццикла;
	
	//Элементы.Страницы.ТекущаяСтраница=Элементы.ИнформацияОКМ;
	//КонецЕсли;
	
	
КонецПроцедуры

Процедура НаСервереОпределяемСтрочки()
	СерНомера=Объект.СерийныеНомера.Выгрузить();
	СерНомера.Индексы.Добавить("cis");
	
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторияПоCIS_ХамелеонЦРПТ.НомерКороба,
		|	ИсторияПоCIS_ХамелеонЦРПТ.Цена,
		|	ИсторияПоCIS_ХамелеонЦРПТ.НДС
		|ИЗ
		|	РегистрСведений.ИсторияПоCIS_ХамелеонЦРПТ КАК ИсторияПоCIS_ХамелеонЦРПТ
		|ГДЕ
		|	ИсторияПоCIS_ХамелеонЦРПТ.Документ = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
	
	Для Каждого Стр_1 Из ДеревоКМ.ПолучитьЭлементы() Цикл
		
		РРР=РезультатЗапроса.Найти(Стр_1.НомерКороба,"НомерКороба");
		Если РРР<>Неопределено тогда
			Стр_1.цена=РРР.Цена;
			Стр_1.НДС=РРР.НДС
			
		Конецесли;
		
		РекурсияПодсчета_Суммы(Стр_1,Стр_1.Количество,РезультатЗапроса);
		
		
		
		ПолучК=СерНомера.НайтиСтроки(Новый Структура("cis",Стр_1.cis));
		Если  ПолучК.Количество()>0 тогда
			ТоварСтроки=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",ПолучК[0].НомерСтрокиСвязи));
			Если ТоварСтроки.Количество()>0 Тогда
				ТоварСтроки[0].КоличествоНомеровКМ=ТоварСтроки[0].КоличествоНомеровКМ+Стр_1.Количество;
			КонецЕсли;
		КонецЕсли;
		
		
	Конеццикла;
КонецПроцедуры

Процедура НасервереПодсчет()
//	Объект.ТоварыКМ.Очистить();
	ИтогоКороб=0;
	Объект.ТоварыКМ.Очистить();
	
	Для Каждого Стр_1 Из ДеревоКМ.ПолучитьЭлементы() Цикл
		Стр_1.Количество=0;
		РекурсияПодсчета(Стр_1);
	Конеццикла;
		
КонецПроцедуры

Процедура РекурсияПодсчета(Стр_2)
	
	Если Стр_2.ПолучитьЭлементы().Количество()=0 Тогда
		//ИтогУпаковок=ИтогУпаковок+1;
		Если Не ЗначениеЗаполнено(Стр_2.cis) И Не ЗначениеЗАполнено(Стр_2.НомерКМ) Тогда
			Возврат;
		КонецЕсли;
		
		
		
		Стр_2.Количество=0;
		ИтогоКМ=ИтогоКМ+1;
		
		Попытка
			Если ЗначениеЗаполнено(Стр_2.cis) Тогда
				ГТИН=Число(Сред(Стр_2.cis,3,14));
			Иначе
				ГТИН=Число(Сред(Стр_2.НомерКМ,3,14));
				
			КонецЕсли;
		Исключение
			
			Возврат;
			
		КонецПопытки;
		 	Добав=Объект.ТоварыКМ.Добавить();
			Если ЗначениеЗаполнено(Стр_2.cis)  Тогда
				Добав.cis=Стр_2.cis;
			иначе
				Добав.cis=Стр_2.НомерКМ;
				
			КонецЕсли;
			
			Попытка
				Добав.НомерКороба=Стр_2.ПолучитьРодителя().cis;
			исключение
				Добав.НомерКороба="";
			КонецПопытки;
			
			ШтрихКод_ДляПр=Добав.cis;

			Если Сред(ШтрихКод_ДляПр,1,2)="01" Тогда
				ШтрихКод_ДляПр=Сред(ШтрихКод_ДляПр,3,14);
			Иначе
				ШтрихКод_ДляПр=Сред(ШтрихКод_ДляПр,1,14);
				
			КонецЕсли;
			
			Добав.Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",
			Число(ШтрихКод_ДляПр));
			Если не ЗначениеЗаполнено(Добав.Продукция) Тогда
				
				НСтр=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Добав.cis));
				Если НСтр.Количество()>0 Тогда
					Добав.Продукция=НСтр[0].НаименованиеТовара
				КонецЕсли;
				
			КонецЕсли;
			Стр_2.Продукция=Добав.Продукция;
			
			Попытка
				Стр_2.Владелец.Продукция=Стр_2.Продукция;
			Исключение
			КонецПопытки;
		Иначе
	//	ИтогУпаковок=ИтогУпаковок+1;
	Попытка
		Если Стр_2.ПолучитьЭлементы()[0].ПолучитьЭлементы().Количество()>0 Тогда
			ИтогоКороб=ИтогоКороб+1;
		Иначе
			ИтогУпаковок=ИтогУпаковок+1;
		КонецЕсли;
	Исключение
		ИтогУпаковок=ИтогУпаковок+1;
	КонецПопытки;
		Для Каждого Стр_3 Из Стр_2.ПолучитьЭлементы() Цикл
			Стр_3.Количество=0;
			РекурсияПодсчета(Стр_3)
		Конеццикла;
	КонецЕсли;
	
КонецПроцедуры

//Процедура РекурсияПодсчета(Стр_2)
//	
//	Если Стр_2.ПолучитьЭлементы().Количество()=0 Тогда
//		//ИтогУпаковок=ИтогУпаковок+1;
//		Если Не ЗначениеЗаполнено(Стр_2.cis) И Не ЗначениеЗАполнено(Стр_2.НомерКМ) Тогда
//			Возврат;
//		КонецЕсли;
//		
//		
//		
//		Стр_2.Количество=0;
//		ИтогоКМ=ИтогоКМ+1;
//		
//		Попытка
//			Если ЗначениеЗаполнено(Стр_2.cis) Тогда
//				ГТИН=Число(Сред(Стр_2.cis,3,14));
//			Иначе
//				ГТИН=Число(Сред(Стр_2.НомерКМ,3,14));
//				
//			КонецЕсли;
//		Исключение
//			
//			Возврат;
//			
//		КонецПопытки;
//		 				Если ЗначениеЗаполнено(Стр_2.cis)  Тогда
//				cis=Стр_2.cis;
//			иначе
//				cis=Стр_2.НомерКМ;
//				
//			КонецЕсли;
//			
//			
//			
//			ШтрихКод_ДляПр=cis;
//			Если Сред(ШтрихКод_ДляПр,1,2)="01" Тогда
//				ШтрихКод_ДляПр=Сред(ШтрихКод_ДляПр,3,14);
//			Иначе
//				ШтрихКод_ДляПр=Сред(ШтрихКод_ДляПр,1,14);
//				
//			КонецЕсли;
//			
//			Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",
//			Число(ШтрихКод_ДляПр));
//			Стр_2.Продукция=Продукция;
//			
//			Попытка
//				Стр_2.Владелец.Продукция=Стр_2.Продукция;
//			Исключение
//			КонецПопытки;
//		Иначе
//	//	ИтогУпаковок=ИтогУпаковок+1;
//	Попытка
//		Если Стр_2.ПолучитьЭлементы()[0].ПолучитьЭементы().Количество()>0 Тогда
//			ИтогоКороб=ИтогоКороб+1;
//		Иначе
//			ИтогУпаковок=ИтогУпаковок+1;
//		КонецЕсли;
//	Исключение
//		ИтогУпаковок=ИтогУпаковок+1;
//	КонецПопытки;
//		Для Каждого Стр_3 Из Стр_2.ПолучитьЭлементы() Цикл
//			Стр_3.Количество=0;
//			РекурсияПодсчета(Стр_3)
//		Конеццикла;
//	КонецЕсли;
//	
//КонецПроцедуры



&НаСервере
Процедура РекурсияПодсчета_Суммы(Стр_2,КоличествоКМ,РезультатЗапроса)
	
	Если Стр_2.ПолучитьЭлементы().Количество()=0 Тогда
		КоличествоКМ=КоличествоКМ+1;
		Стр_2.Количество=1;
	Иначе
		Для Каждого Стр_3 Из Стр_2.ПолучитьЭлементы() Цикл
			
					РРР=РезультатЗапроса.Найти(Стр_3.НомерКМ,"НомерКороба");
		Если РРР<>Неопределено тогда
			Стр_3.цена=РРР.Цена;
			Стр_3.НДС=РРР.НДС
			
		Конецесли;

			
			РекурсияПодсчета_Суммы(Стр_3,Стр_3.Количество,РезультатЗапроса);
			КоличествоКМ=КоличествоКМ+Стр_3.Количество;
		Конеццикла;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// Вставить содержимое обработчика.
	
	
	РегДв=РегистрыСведений.ИсторияПоCIS_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.ДОкумент.Установить(ТекущийОбъект.Ссылка);
	регДв.Записать(Истина);
	Для Каждого Стр_1 Из ДеревоКМ.ПолучитьЭлементы() Цикл
		РегДв=РегистрыСведений.ИсторияПоCIS_ХамелеонЦРПТ.СоздатьНаборЗаписей();
		РегДв.Отбор.ДОкумент.Установить(ТекущийОбъект.Ссылка);
		РегДв.Отбор.НомерКороба.Установить(Стр_1.cis);
		Добав=РегДв.Добавить();
		Добав.НомерКороба=Стр_1.cis;
		Добав.Документ=ТекущийОбъект.Ссылка;
		Добав.cis="";
		Добав.Статус=Стр_1.Статус;
		Добав.Цена=стр_1.Цена;
		Добав.НДС=стр_1.НДС;
		
		РегДв.Записать(Истина);
		
		
		РекурсияСохранить(Стр_1,ТекущийОбъект);
	Конеццикла;
	
КонецПроцедуры

Процедура  РекурсияСохранить(Стр_1,ТекущийОбъект)
	
	Для Каждого Стр_2 Из Стр_1.ПолучитьЭлементы() Цикл
		РегДв=РегистрыСведений.ИсторияПоCIS_ХамелеонЦРПТ.СоздатьНаборЗаписей();
		РегДв.Отбор.ДОкумент.Установить(ТекущийОбъект.Ссылка);
		РегДв.Отбор.НомерКороба.Установить(Стр_2.НомерКМ);
		Добав=РегДв.Добавить();
		Если ЗначениеЗаполнено(Стр_2.НомерКМ) Тогда
			Добав.НомерКороба=Стр_2.НомерКМ;
		Иначе
			Добав.НомерКороба=Стр_2.cis;
		КонецЕсли;
		Добав.Документ=ТекущийОбъект.Ссылка;
		Если ЗначениеЗаполнено(Стр_1.НомерКМ) Тогда
			Добав.cis=Стр_1.НомерКМ;
		Иначе
			Добав.cis=Стр_1.cis;
			
		КонецЕсли;
		Добав.Статус=Стр_2.Статус;
		Добав.Цена=Стр_2.Цена;
		Добав.НДС=Стр_2.НДС;
		
		РегДв.Записать(Истина);
		
		РекурсияСохранить(Стр_2,ТекущийОбъект)
	Конеццикла;
	
КонецПроцедуры

Процедура ЗагрузитьФайл_НаСервере(Адр,Расширение,МассивКМ)
	
	
	Имяекселя_1=ПолучитьИмяВременногоФайла(Расширение);
	
	Дан=ПолучитьИзВременногоХранилища(Адр);
	Дан.Записать(Имяекселя_1);
	ОбластьФайла = Новый ТабличныйДокумент;
	Попытка
		// Выполняется долго на больших файлах.
		ОбластьФайла.Прочитать(Имяекселя_1, СпособЧтенияЗначенийТабличногоДокумента.Значение);
		УдалитьФайлы(Имяекселя_1);
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
		УдалитьФайлы(Имяекселя_1);
		Возврат;
	КонецПопытки;
	
	
	
	КолСтр = ОбластьФайла.ВысотаТаблицы;
	КолКолонок = ОбластьФайла.ШиринаТаблицы;
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	ТаблицаРезультат.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"), "№", 4);
	ТаблицаРезультат.Колонки.Добавить("Сопоставлено", Новый ОписаниеТипов("Булево"), "Сопоставлено", 1);
	
	Для Сч = 1 ПО КолКолонок Цикл
		нКолонка = СтрЗаменить(Сч, Символы.НПП, "");
		ИмяКолонки = "N" + нКолонка;
		ТаблицаРезультат.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	// 1-я строка. Заголовки.
	НоваяСтрокаТФ = ТаблицаРезультат.Добавить();
	НоваяСтрокаТФ.НомерСтроки = 1;
	Для Сч=1 ПО КолКолонок Цикл
		нКолонка = СтрЗаменить(Сч, Символы.НПП, "");
		ИмяКолонки = "N" + нКолонка;
		НоваяСтрокаТФ[ИмяКолонки] = ОбластьФайла.ПолучитьОбласть("R1" + "C"+нКолонка).ТекущаяОбласть.Текст;
		
		// Используется при формировании таблицы на форме обработки.
		ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
		ДлинаСтроки    = СтрДлина(СокрЛП(НоваяСтрокаТФ[ИмяКолонки]));
		ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
	КонецЦикла;
	
	НачСтрока = ?(Не ЗначениеЗаполнено(НачСтрока), 2, НачСтрока);
	КонСтрока = ?(Не ЗначениеЗаполнено(КонСтрока), КолСтр, КонСтрока);
	
	Для нСтрокаТФ = НачСтрока ПО КонСтрока Цикл
		НоваяСтрокаТФ = ТаблицаРезультат.Добавить();
		НоваяСтрокаТФ[0] = нСтрокаТФ;
		нСтрока = СтрЗаменить(нСтрокаТФ, Символы.НПП, "");
		Для Колонка = 1 ПО КолКолонок Цикл
			нКолонка = СтрЗаменить(Колонка, Символы.НПП, "");
			Область = ОбластьФайла.ПолучитьОбласть("R"+нСтрока+"C"+нКолонка);
			ТекущаяОбласть = Область.ТекущаяОбласть;
			Если Колонка=2 Или Колонка=5 Тогда
				ЗначениеЯчейки = xmlstring(сокрЛП(ТекущаяОбласть.Текст));    // Строка, Булево. (Булево как строка "ИСТИНА"/"ЛОЖЬ")
				Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
					ЗначениеЯчейки = СокрЛП(ЗначениеЯчейки);
				Иначе
					ЗначениеЯчейки = Неопределено;
				КонецЕсли;
			Иначе
				Попытка
					ЗначениеЯчейки = xmlString(ТекущаяОбласть.Значение);        // Число, Дата.
				Исключение
					ЗначениеЯчейки = xmlstring(сокрЛП(ТекущаяОбласть.Текст));    // Строка, Булево. (Булево как строка "ИСТИНА"/"ЛОЖЬ")
					Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
						ЗначениеЯчейки = СокрЛП(ЗначениеЯчейки);
					Иначе
						ЗначениеЯчейки = Неопределено;
					КонецЕсли;
				КонецПопытки;
			КонецЕсли;
			ИмяКолонки = "N" + нКолонка;
			НоваяСтрокаТФ[ИмяКолонки] = ЗначениеЯчейки;
			
			// Используется при формировании таблицы на форме обработки.
			ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
			ДлинаСтроки    = СтрДлина(СокрЛП(НоваяСтрокаТФ[ИмяКолонки]));
			ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
		КонецЦикла;
	КонецЦикла;
	МассивКМ.Очистить();
	
	Для Каждого Стр Из ТаблицаРезультат Цикл
		
		
		ШтрихОбраб=Стр.N1;
		шТРИХкОД=ШтрихОбраб;
	штрихКод=СтрЗаменить(ШтрихКод,Символ(29),"");
	МассивКМ.Добавить(штрихКод);
		//ЗаполнитьИнфуПоШтриху();

	Конеццикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИз(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
		// Вставить содержимое обработчика.
	МассивКМ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ВернутьКМИзФайлов();
		
	Для Каждого ШтрихОбраб Из МассивКМ Цикл
				//ШтрихОбраб=ТекстовыйД.ПолучитьСтроку(Сч);
			
					ШтрихКод68=ШтрихОбраб;
					
					шТРИХкОД=ШтрихКод68;
					штрихКод=СтрЗаменить(ШтрихКод,Символ(29),"");
	
	                
	////НЕОБХОДИМО БУДЕТ ПОМЕНЯТЬ
	Если СтрДлина(Штрихкод)=20 И Сред(ШтрихКод,1,2)="00" Тогда
		Штрихкод=Сред(Штрихкод,3);
	КонецЕсли;
	
	
	
					ЗаполнитьИнфуПоШтриху(ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ВернутьИнформациюОКМ(ШтрихКод,ДанныеИзПользователя),Ложь);
					ПроверкаНужна();
				
	КонецЦикла;
		
	
	//	ПроверкаНужна();	
	ПодключитьОбработчикОЖидания("аа",0.1,Истина);
	
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьДокумент(Команда)
	// Вставить содержимое обработчика.
	Записать();
	
		Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПолсеВыбора",ЭтаФорма));
	Форм.Число=10;
	Форм.Заголовок="Укажите количество серийный номеров на которое необходимо разбить документ";
		//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПолсеВыбора",ЭтаФорма),50,"Укажите количество серийный номеров на которое необходимо разбить документ",10,0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолсеВыбора(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
		РазбитьДокументНаНесколько(РР);
		
		ЭтаФорма.Закрыть();
		
	КонецЕсли;
	
	
Конецпроцедуры


Процедура РазбитьДокументНаНесколько(РР)
	Если Объект.Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
		ИЛИ Объект.Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ЧастичноПринят
		Или Объект.Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента
		ИЛИ Объект.Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик
		Тогда
		Возврат;
	КонецЕсли;
	УдалитьНадо=Объект.Ссылка.ПолучитьОбъект();
	
	былПроведен=ложь;
	Если УдалитьНадо.Проведен Тогда
		УдалитьНадо.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		БылПроведен=Истина;
	КонецЕслИ;
	
	НовыйДокумент=Документы.Отгрузка_ХамелеонЦРПТ.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(НовыйДокумент,УдалитьНадо,,"Номер,_Order_ID,Статус,ОшибкаОтправки");
	НовыйДокумент.Дата=ТекущаяДата();
	
	
	МассивДокументовПервый=Новый Массив;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Справочник_Документ
		|ИЗ
		|	РегистрСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ КАК СопоставлениеСправочниковДокументов_ХамелеонЦРПТ
		|ГДЕ
		|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СправочникДокумент_Меркурия = &СправочникДокумент_Меркурия";
	
	Запрос.УстановитьПараметр("СправочникДокумент_Меркурия", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		МассивДокументовПервый.Добавить(ВыборкаДетальныеЗаписи.Справочник_Документ);
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	   КонецЕсли;
	Смещение=0;
	Для Каждого Стр Из УдалитьНадо.СерийныеНомера Цикл
		Если СМещение>=РР Тогда
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			Если БылПроведен Тогда
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
			Для Каждого Стр_1 Из МассивДокументовПервый Цикл
				
				РегДв=РегистрыСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СоздатьНаборЗаписей();
				РегДв.Отбор.Справочник_Документ.Установить(Стр_1);
				Добав=РегДв.Добавить();
				Добав.Справочник_Документ=Стр_1;
				Добав.СправочникДокумент_Меркурия=НовыйДокумент.Ссылка;
				РегДв.Записать(Истина);
				
			Конеццикла;
			
			МассивДокументовПервый.Очистить();
			МассивДокументовПервый.Добавить(НовыйДокумент.Ссылка);
			
			
			
			НовыйДокумент=Документы.Отгрузка_ХамелеонЦРПТ.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(НовыйДокумент,УдалитьНадо,,"Номер,_Order_ID,Статус,ОшибкаОтправки");
				НовыйДокумент.Дата=Текущаядата();
				СМещение=0;
		КонецЕсли;
		Добав=НовыйДокумент.СерийныеНомера.Добавить();
		ЗаполнитьЗначенияСвойств(Добав ,Стр);
		
		
		Нстр=НовыйДокумент.Товары.Найти(Добав.НомерСтрокиСвязи,"НомерСтрокиСвязи");
		Если НСтр=Неопределено тогда
			НСтр=НовыйДокумент.Товары.Добавить();
			Нстр_1=Удалитьнадо.Товары.Найти(Добав.НомерСтрокиСвязи,"НомерСтрокиСвязи");
			Если НСТР_1<>Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Нстр,НСтр_1);
				НСтр.КоличествоКМ=0;
				НСтр.КоличествоНомеровКМ=0;
			Иначе
				НСтр.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
			КонецЕсли;
			Если ЗначениеЗаполнено(НСтр.GTIN.ЕдиницаИзмерения_УПД) Тогда
				НСтр.ЕдиницаИзмерения=НСтр.GTIN.ЕдиницаИзмерения_УПД;
			Иначе
				НСтр.ЕдиницаИзмерения=Объект.ТекущийПользователь.ОсновнаяЕдиницаИзмерения;
			Конецесли;
		
		КонецЕсли;
		НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
		
		
		
		СМещение=СМещение+1;
	Конеццикла;
	Если УдалитьНадо.Товары.Количество()>0 Тогда
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		Если БылПроведен Тогда
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Для Каждого Стр_1 Из МассивДокументовПервый Цикл
				
				РегДв=РегистрыСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СоздатьНаборЗаписей();
				РегДв.Отбор.Справочник_Документ.Установить(Стр_1);
				Добав=РегДв.Добавить();
				Добав.Справочник_Документ=Стр_1;
				Добав.СправочникДокумент_Меркурия=НовыйДокумент.Ссылка;
				РегДв.Записать(Истина);
				
			Конеццикла;
		
		
	КонецЕсли;
	УдалитьНадо.ПометкаУдаления=Истина;
	УдалитьНадо.Записать(РежимЗаписиДокумента.Запись);
		
	
	
Конецпроцедуры

&НаКлиенте
Процедура СформироватьФайлXMLЭДО(Команда)
	// Вставить содержимое обработчика.
	Thumbprint_1=ПолучитьИзПользователя();	
	Форм=Получитьформу("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Попытка
		Форм.ЛицензияОпределить_Просто(Thumbprint_1);
	Исключение
	КонецПопытки;
	
	ЭтаФорма.Записать();
	
//	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
//	Форм.СохранитьXMLЭДО(Объект.Ссылка)
	
	ДиалогФыбораФайла								=	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогФыбораФайла.Фильтр="Файл xml (*.xml)|*.xml";
	ДиалогФыбораФайла.Заголовок						=	"Выберите каталог для сохранения";
	ДиалогФыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогФыбораФайла.Расширение					=	"xml";
	ДиалогФыбораФайла.ИндексФильтра					=	0;
	ДиалогФыбораФайла.ПолноеИмяФайла				=	"";
	ДиалогФыбораФайла.ПроверятьСуществованиеФайла	=	Истина;
	
	Подразделение=НеопределенО;
	ДиалогФыбораФайла.Показать(Новый ОписаниеОповещения("ВыборКаталогаДляСохранения",ЭтаФорма));
КонецПроцедуры


&НаКлиенте
Процедура ВыборКаталогаДляСохранения(ВыборЗагрExcel,ДД) Экспорт
	Если ЗначениеЗАполнено(ВыборЗагрExcel)
		И ВыборЗагрExcel.Количество()>0  тогда
		
		Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
		Форм.СохранитьXMLЭДО(Объект.Ссылка,ВыборЗагрExcel)
		
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПечатьУПД(Команда)
	// Вставить содержимое обработчика.
	ЭтаФорма.Записать();
	
	
	Печать=Новый ТабличныйДокумент;
	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Форм.ПечатьУПДНаСервере(печать,Объект.Ссылка);
	Печать.АвтоМасштаб=Истина;
	Печать.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	
	Печать.ИмяПараметровПечати="Печать_УПД";
	Печать.Показать();
	
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ИзменитьВидимость();
КонецПроцедуры

Процедура ИзменитьВидимость() Экспорт
	Элементы.Отправляем.Видимость=Объект.Контрагент.ГрузополучательОтличается ИЛИ Объект.Организация.ГрузополучательОтличается;
//	Элементы.ВыводИзОборота.Видимость=Объект.ОтгрузкаНеУчастника;
	Элементы.ВидОперации.Видимость=Объект.ВыводИзОборота;
	Элементы.ДатаВыводаИзОборота.Видимость=Объект.ВыводИзОборота;
	
	Элементы.ИдентификаторГосКонтракта.Видимость=Элементы.ВидОперации.Видимость И Объект.ВидОперации=Перечисления.ВидОперацииВывдИзОборотаОтгрузка_ХамелеонЦРПТ.STATE_ENTERPRISE;
	ИтогЭмитирован=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("Статус","APPLIED")).Количество();
	ИтогВОбороте=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("Статус","INTRODUCED")).Количество();
	ИтогRet=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("Статус","RETIRED")).Количество();
	ИтогоОшибки=Объект.СерийныеНомера.Количество()-ИтогВОбороте-ИтогЭмитирован-ИтогRet;
	Элементы.ГруппаОбстоятельстваЗакупокДляГосИМуницНужд.Видимость=Объект.ОбстоятельстваЗакупокДляГосИМуницНужд;
	Элементы.ГруппаОснованиеУступкиДенежногоТребования.Видимость=Объект.ОснованиеУступкиДенежногоТребования;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьXMLФайлПодтверждения(Команда)
	// Вставить содержимое обработчика.
	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Форм.СохранитьФайлXMLОтгрузка(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ВводВоборотНаСервере()
	// Вставить содержимое обработчика.
	ДокумС=ВводВОборотНасервере_Документ();
	Если ЗначениеЗаполнено(ДокумС) Тогда
		ОткрытьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаДокумента",
		Новый Структура("Ключ",ДокумС));
	КонецЕсли;
КонецПроцедуры

Функция ВводВОборотНасервере_Документ()
	МассивВвести=Новый Массив;
	Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		Если Стр_1.Статус="APPLIED" Тогда
			  МассивВвести.Добавить(Стр_1.cis);
		Конецесли;
	Конеццикла;
	
	Если МассивВвести.Количество()=0 Тогда
		Возврат Неопределено;
	Конецесли;
	ДокумС=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ДокумС,Объект,,"Номер,Статус,ОшибкаОтправки,_Order_ID,дата");
	ДокумС.Дата=ТекущаяДата();
	
	Нстр=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("Статус","INTRODUCED"));
	СписокНайтиВводостатков=Новый СписокЗначений;
	Для Каждого Стр_2 Из НСтр Цикл
		СписокНайтиВводостатков.Добавить(Стр_2.СерийныйНомер);
	Конеццикла;
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.Ссылка
		|ИЗ
		|	Документ.ВводВОборот_ХамелеонЦРПТ.СерийныеНомера КАК ВводВОборот_ХамелеонЦРПТСерийныеНомера
		|ГДЕ
		|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.cis в (&СерийныйНомер)";
	
	Запрос.УстановитьПараметр("СерийныйНомер", СписокНайтиВводостатков);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ДокумВ=Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ДокумВ=ВыборкаДетальныеЗаписи.Ссылка
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Если ЗначениеЗаполнено(докумВ) тогда
		ЗаполнитьЗначенияСвойств(ДокумС,докумВ,,"Номер,Статус,ОшибкаОтправки,_Order_ID,дата");
	Конецесли;
	ДокумС.Организация=Объект.Организация;
	ДокумС.ТекущийПользователь=Объект.ТекущийПользователь;
	
	
	Для Каждого Стр_1 Из МассивВвести Цикл
		Попытка
        	Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",
			Число(Сред(Стр_1,3,14)));
		Исключение
			Проудкция=Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка();
		КонецПопытки;

		ДД=ДокумС.СерийныеНомера.Добавить();
		ДД.НаименованиеТовара=Продукция;
		ДД.cis=Стр_1;
		
		Добав=ДокумС.Товары.Найти(ДД.НаименованиеТовара,"GTIN");
		Если Добав=Неопределено Тогда
			Добав=ДокумС.Товары.Добавить();
			Добав.GTIN=ДД.НаименованиеТовара;
			Добав.ДекларацияИлиСертификатСоответствия=РЕгистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(
					ТекущаяДата(),Новый Структура("Продукция",Добав.GTIN)).Документ;
			Добав.НомерСтрокиСвязи=Добав.НомерСтроки;
			Добав.КодТНВЭД=Добав.GTIN.КодТНВЭД;
		КонецЕсли;
		ДД.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
		Добав.КоличествоКМ=Добав.КоличествоКМ+1;
		Добав.СпособВыпускаТоваров="";

	КонецЦикла;	
	ДокумС.Записать();
	Возврат ДокумС.Ссылка
Конецфункции

&НаКлиенте
Процедура ВводВоборот(Команда)
	ВводВоборотНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкаНеУчастникаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ИзменитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ВыводИзОборотаПолеПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ИзменитьВидимость()	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьПродукциюПоКМ(Стр_11,Thumbprint_1,УжеОтправили=Ложь,Продукция) Экспорт
	// Вставить содержимое обработчика.
	//ПолучитьВсеКМПоПродукции=ПолучитьВсеКМПоПродукции();
	
	Обр=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	
	
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
	
	//Для Каждого Стр_11 Из    ПолучитьВсеКМПоПродукции Цикл
		
		
	Если Ложь Тогда
			//ОбработкаWEBНаСервере Тогда
		//Если НЕ ЗагрузитьНаСервере(Thumbprint_1,Обр.Организации[0].Организация,УжеОтправили,СРегистра) Тогда
		//	Если УжеОтправили=Истина Тогда
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				//Загрузить(Команда,Истина)
		//	КонецЕсли;
	
		//КонецЕсли;
	Иначе
		
		
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
	HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
	HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
 			что=Thumbprint_1.что;
				
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_11)+"&pg="+что);;
				
			
			
			//ИНН=ВернутьИНН(Обр.Организации[0].Организация );
//	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_11));;
	//HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?gtin="+ДополнитьСтроку(Стр_11)+"&limit=100&offset=0");;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	числоЗагрузили=0;
	
	Тотал=0;
	Если Ответ.КодСостояния=200 Тогда
		//ЗагружаемШаблоныНасервере(Текст1,Обр.Пользователь);
		
		
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке(Текст1,"",Тотал,числоЗагрузили,Thumbprint_1,Продукция);
			
			
			//Прервать;
	ИначеЕсли Ответ.КодСостояния=401 
		ИЛИ Ответ.КодСостояния=502  
		Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОбновитьПродукциюПоКМ(Стр_11,Thumbprint_1,Истина,Продукция)			
			КонецЕсли
	Иначе
			
		Форм=ПолучитьФорму("Справочник.Продукция_ХамелеонЦРПТ.Форма.ФормаЭлемента", Новый Структура("Ключ",Продукция));
		Форм.ОбновитьПродукцияюПоGTIN("")
			
			
	КонецЕсли;
КонецЕсли;
//КонецЦикла;                       
//	Сообщить("Загружено "+Строка(1));		
		
		
//Конеццикла;
//ЭтаФорма.Прочитать();
	
КонецПроцедуры


Процедура ОбновитьПоАгрегации(ОбнвоитьтабличнуюЧасть)
	
	БылиУпаковки=Ложь;
	Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		Если  Стр_1.GTIN="00000000000000"    тогда
			Если СтрДлина(Стр_1.cis)<>18  Тогда
				Если Сред(Стр_1.cis,1,2)="01" Тогда
					ГТИН=Сред(Стр_1.cis,3,14) 
				Иначе
					ГТИН=Сред(Стр_1.cis,1,14) 
					
				Конецесли;
				
				Попытка
					ГТИН=Число(ГТИН);
					
					Стр_1.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",
					ГТИН);
					Если Не ЗначениеЗаполнено(Стр_1.НаименованиеТовара) Тогда
						СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
						СпрПр.GTIN=ГТИН;
						СпрПр.Наименование=xmlString(ГТИН);
						СпрПр.НаименованиеТовара=xmlString(ГТИН);
						СпрПр.Записать();
						Стр_1.НаименованиеТовара=СпрПр.Ссылка;
					КонецЕсли;
					ОбнвоитьтабличнуюЧасть=Истина;
				Исключение
				КонецПопытки;
				            
			КонецЕсли;
			
			
		КонецЕсли;
		
	
		Попытка
			Если Не ЗначениеЗаполнено(Стр_1.НаименованиеТовара) ИЛИ Число(Стр_1.GTIN)=Число(Строка(Стр_1.НаименованиеТовара))
			 тогда
			 
			 Если ЗначениеЗаполнено(Стр_1.СерийныйНомер) тогда
				Стр_1.НаименованиеТовара=НайтиГТИН(Стр_1.СерийныйНомер,БылиУпаковки) 
				 
			//	ОбновитьПродукциюПоКМ(Стр_1.СерийныйНомер,Thumbprint_1,,Стр_1.НаименованиеТовара);
			Иначе
			//	ОбновитьПродукциюПоКМ(Стр_1.cis,Thumbprint_1,,Стр_1.НаименованиеТовара);
				Стр_1.НаименованиеТовара=НайтиГТИН(Стр_1.cis,БылиУпаковки) 
				
			КонецЕсли;
			ОбнвоитьтабличнуюЧасть=Истина;
				
			КонецЕсли;
		Исключение
		КонецПопытки;		
				
		
	Конеццикла;
	
	
КонецПроцедуры	


&НаКлиенте
Процедура ОббновитьИнформациюПоКМ(Команда)
	// Вставить содержимое обработчика.
//		ЗакачатьДетальнуюИнформацию_Карточки("");
		
//		Возврат;
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
			ОбновитьИнформациюПоФармац(Thumbprint_1);			
	
		Возврат;
	КонецЕсли;
	
	
	ОбнвоитьтабличнуюЧасть=Ложь;
	
	
	ОбновитьПоАгрегации(ОбнвоитьтабличнуюЧасть);
	
	
	Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
				
		Попытка
			Если Не ЗначениеЗаполнено(Стр_1.НаименованиеТовара) ИЛИ Число(Стр_1.GTIN)=Число(Строка(Стр_1.НаименованиеТовара))
			 тогда
			 
			 Если ЗначениеЗаполнено(Стр_1.СерийныйНомер) тогда
				ОбновитьПродукциюПоКМ(Стр_1.СерийныйНомер,Thumbprint_1,,Стр_1.НаименованиеТовара);
			Иначе
				ОбновитьПродукциюПоКМ(Стр_1.cis,Thumbprint_1,,Стр_1.НаименованиеТовара);
				
			КонецЕсли;
			ОбнвоитьтабличнуюЧасть=Истина;
				ОповеститьОбИзменении(Стр_1.Продукция);
				
			КонецЕсли;
		Исключение
		КонецПопытки;		
				
		
	Конеццикла;
	Если ОбнвоитьтабличнуюЧасть=Истина тогда
		//Объект.Товары.Очистить();
			едтзм=едизм();
	Для Каждого Добав ИЗ Объект.СерийныеНомера Цикл
			
			Продукция=Добав.НаименованиеТовара;
			
			ППП=Объект.Товары.НайтиСтроки(Новый структура("НомерСтрокиСвязи",Добав.НомерСтрокиСвязи));
			Если ППП.Количество()=0 Тогда
				Если Добав.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка") Тогда
					Упаковка=Истина;
				Иначе
					Упаковка=Ложь;
					
				КонецЕсли;
				
				
				ППП=Объект.Товары.НайтиСтроки(Новый структура("gtin,Упаковка",Продукция,Упаковка));
				Если ППП.Количество()=0 Тогда
					
					Добав_1=Объект.Товары.Добавить();
					Добав_1.GTIN=Продукция;
					Добав_1.Упаковка=Упаковка;
					единицаИз=едтзм;
					Добав_1.КодТНВЭД=КодТНВЭД(Продукция,единицаИз);
					Добав_1.ЕдиницаИзмерения=единицаИз;
					Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
									Добав_1.ЕдиницаИзмерения=едтзм;//Объект.ТекущийПользователь.ОсновнаяЕдиницаИзмерения;

					
		//			Добав_1.СпособВыпускаТоваров="";
					Добав_1.НомерСтрокиСвязи=МаксимальныйНомерСтрокиСвязиЧисло;
					МаксимальныйНомерСтрокиСвязиЧисло=МаксимальныйНомерСтрокиСвязиЧисло+1;
					Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
					Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
				Иначе
					Добав_1=ППП[0];
				КонецЕсли;
				Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
			Иначе
				//Добав_1.GTIN=Продукция;
					ППП[0].GTIN=Продукция;
					ППП[0].КодТНВЭД=КодТНВЭД(Продукция);
				
			КонецЕсли;

			//Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
			//Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
		Конеццикла;
		
	КонецЕсли;
	
	
	
КонецПроцедуры

функция едизм()
	
	возврат объект.ТекущийПользователь.ОсновнаяЕдиницаИзмерения
	конецфункции

&НаСервереБезКонтекста
Функция КодТНВЭД(Н,единицаИз=Неопределено)
	Если ЗначениеЗаполнено(Н.ЕдиницаИзмерения_УПД) Тогда
		единицаИз=Н.ЕдиницаИзмерения_УПД
	Конецесли;
	Возврат Н.КодТНВЭД
КонецФункции
&НаКлиенте
Процедура ПолучитьСтатусыКМВсе(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	МассивКМ=Новый Массив;
	Для каждого Стр_1 Из Объект.СерийныеНомера Цикл
		Стр_1.Статус="Не найдено в ЦРПТ";
		Стр_1.ВОбороте=Ложь;
		МассивКМ.Добавить(Стр_1.cis);
	Конеццикла;	
	ОбработатьстатусыКМ(МассивКМ);
	
	Возврат;
	// Вставить содержимое обработчика.
	Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		Стр_1.Статус="";
	Конеццикла;
	ПолучитьСтатусыПоКМ(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтатусыAPPLIED(Команда)
	// Вставить содержимое обработчика.
	ПолучитьСтатусыПоКМ(Команда,истина)	
КонецПроцедуры

Процедура НаСервереПокажем()
	
	Таблица=Объект.ТоварыКМ.Выгрузить();
	Таблица.Колонки.Добавить("Количество");
	Таблица.ЗаполнитьЗначения(1,"Количество");
	Таблица.Свернуть("Продукция","Количество");
	Объект.ПроверкаПоНомерамКМ.Загрузить(Таблица);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	// Вставить содержимое обработчика.
	Если ТекущаяСтраница=Элементы.ГруппаПроверкаПоНомерамКМ Тогда
		
		Если Объект.ПроверкаПоНомерамКМ.Количество()>0 Тогда
			Возврат;
		КонецЕсли;
		Если Объект.ТоварыКМ.Количество()=0 Тогда	
			ПоказатьИнформацию(Элемент)
		КонецЕсли;
		
		НаСервереПокажем();
		
		
	ИначеЕсли ТекущаяСтраница=Элементы.ТоварыКМ ИЛИ
		ТекущаяСтраница=Элементы.ИнформацияОКМ Тогда
		Если (ДеревоКМ.ПолучитьЭлементы().Количество()=0
			ИЛИ Объект.ТоварыКМ.Количество()=0)
			И Объект.СерийныеНомера.Количество()<=500			
			Тогда
			
			ПоказатьИнформацию(Элемент)
		КонецЕсли;
		
	КонецЕслИ;
КонецПроцедуры


Процедура ПроверитьВсеСтатусыНаСервере()
	ЧислоПараллельныхПотоков = РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КоличествоЯдерДляГенерацииDataMatrix;
	МассивЗаданий = Новый Массив;
	ЗаданияПоСтрокам = Новый Соответствие;
	Thumbprint = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);	
	Если Не ЗначениеЗаполнено(Thumbprint) Тогда
		Возврат;
	КонецЕслИ;
	
	Для каждого СерийныйНомер Из Объект.СерийныеНомера Цикл
		
		Если ВРЕГ(СерийныйНомер.статус)="INTRODUCED" ИЛИ (Врег(СерийныйНомер.Статус)="APPLIED") Тогда
			Продолжить;
		КонецЕсли;
		
		СерийныйНомер.Статус = Неопределено;
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(СерийныйНомер.cis);
		МассивПараметров.Добавить(Thumbprint);
		
		Если ЧислоПараллельныхПотоков=0 Тогда
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				shoesD="";
				Если Данные <> Неопределено И данные.Свойство("shoesData",shoesD) Тогда
					СерийныйНомер.Статус = shoesD.status;
				КонецЕсли;
		Иначе
			Попытка
				Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара", МассивПараметров);
				ЗаданияПоСтрокам.Вставить(Задание.УникальныйИдентификатор, СерийныйНомер);
				МассивЗаданий.Добавить(Задание);
				
				Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
					ЗаполнитьСтатусыСерийныхНомеров(ЗаданияПоСтрокам, МассивЗаданий); 
				КонецЕсли;
			Исключение
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				shoesD="";
				Если Данные <> Неопределено И данные.Свойство("shoesData",shoesD) Тогда
					СерийныйНомер.Статус = shoesD.status;
				КонецЕсли;
					
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивЗаданий.Количество() >= 0 Тогда
		ЗаполнитьСтатусыСерийныхНомеров(ЗаданияПоСтрокам, МассивЗаданий); 
	КонецЕсли;
	
	ИзменитьВидимость()
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтатусыПоКМАльтернит(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	
	ПроверитьВсеСтатусыНаСервере();
	
	ИзменитьВидимость()	
	
КонецПроцедуры


&НаКлиенте
Процедура ПроверитьСтатусыПоВыделенным(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	МассивКМ=Новый Массив;
	Для каждого Стр_2 Из Элементы.СерийныеНомера.ВыделенныеСтроки Цикл
		Стр_1=Объект.СерийныеНомера.НайтиПоИдентификатору(Стр_2);
		Стр_1.Статус="Не найдено в ЦРПТ";
		Стр_1.ВОбороте=Ложь;
		
		МассивКМ.Добавить(Стр_1.cis);
	Конеццикла;	
	ОбработатьстатусыКМ(МассивКМ);
	
	
	Возврат;
	
	Thumbprint_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
	
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	
	

	Для каждого Стр_2 Из Элементы.СерийныеНомера.ВыделенныеСтроки Цикл
		Стр_1=Объект.СерийныеНомера.НайтиПоИдентификатору(Стр_2);
		    Стр_1.Статус=Неопределено;
	   НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	
	   Если НаСервере Тогда
		 Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Стр_1.cis);  
		Иначе
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			Если Thumbprint_1.НаименованиеСтенда="Табак"
			ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
				Тогда
	
		NN=ВернутьТелоЗапросаПодключение(Стр_1.cis);
						
	
			HTTPЗапрос=Новый HTTPЗапрос("private-office-api/private/v2/cis/status");
			//private-office-api/private/v2/cis/"+КодМаркировки+"/mrp"
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин   
			HTTPЗапрос.УстановитьТелоИзСтроки(NN,КодировкаТекста.UTF8);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
Иначе
			
			Текст=Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(Стр_1.cis);
			Марк=Текст.Получитьтекст();
	
 			что=Thumbprint_1.что;
	
	ММ= Стр_1.cis;
	
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"&pg="+что);
//		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"&pg="+что);;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
КонецЕсли;
КонецЕсли;

		Если НаСервере Тогда
			Текст1=Ответ.ПолучитьТелоКакСтроку;
			
		Иначе
			Текст1=Ответ.ПолучитьТелоКакСтроку();
		КонецЕсли;	
		
		Если Thumbprint_1.НаименованиеСтенда="Табак"
			ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
			Тогда
		
			Попытка
		//ЧтениеJSON = Новый ЧтениеJSON;
		//	ЧтениеJSON.УстановитьСтроку(Текст1);
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Если NNN=Неопределено тогда
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Стр_1.Статус=NNN["status"];
					
			Иначе
				Стр_1.Статус=NNN.status;
			КонецЕсли;
				
			
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Сообщить(Текст1);
			КонецПопытки;
	
Иначе
//ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(Текст1);
Попытка
	Если Ответ.КодСостояния=200 Тогда
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Если NNN=Неопределено тогда
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Стр_1.Статус=NNN["status"];
					
			Иначе
				Стр_1.Статус=NNN.status;
			КонецЕсли;
				
		Иначе
		
		Стр_1.Статус=Ответ.КодСостояния;
		 Сообщить(Текст1);
	КонецЕсли;
	

	
Исключение
	Сообщить(ОписаниеОшибки());
	Сообщить(Текст1);
КонецПопытки;
КонецЕсли;



	Конеццикла;
ИзменитьВидимость()	
	
КонецПроцедуры


&НаКлиенте
Процедура ПроверитьСтатусыПоВыделеннымАльтернатива(Команда)
	// Вставить содержимое обработчика.
	
	// Вставить содержимое обработчика.
	ПроверитьСтатусыПоВыделеннымАльтернативаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСтатусыПоВыделеннымАльтернативаНаСервере()
	
	ЧислоПараллельныхПотоков = РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КоличествоЯдерДляГенерацииDataMatrix;
	
	МассивЗаданий = Новый Массив;
	ЗаданияПоСтрокам = Новый Соответствие;
	Thumbprint = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);	
	Если Не ЗначениеЗаполнено(Thumbprint) Тогда
		Возврат;
	КонецЕслИ;
	
	Для каждого Стр Из Элементы.СерийныеНомера.ВыделенныеСтроки Цикл
		
		СерийныйНомер = Объект.СерийныеНомера.НайтиПоИдентификатору(Стр);
		СерийныйНомер.Статус = Неопределено;
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(СерийныйНомер.cis);
		МассивПараметров.Добавить(Thumbprint);
		
		Если ЧислоПараллельныхПотоков=0 Тогда
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				shoesD="";
				Если Данные <> Неопределено И данные.Свойство("shoesData",shoesD) Тогда
					СерийныйНомер.Статус = shoesD.status;
				КонецЕсли;
		Иначе
			Попытка
				Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара", МассивПараметров);
				ЗаданияПоСтрокам.Вставить(Задание.УникальныйИдентификатор, СерийныйНомер);
				МассивЗаданий.Добавить(Задание);
				
				Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
					ЗаполнитьСтатусыСерийныхНомеров(ЗаданияПоСтрокам, МассивЗаданий); 
				КонецЕсли;
			Исключение
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				shoesD="";
				Если Данные <> Неопределено И данные.Свойство("shoesData",shoesD) Тогда
					СерийныйНомер.Статус = shoesD.status;
				КонецЕсли;
					
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивЗаданий.Количество() >= 0 Тогда
		ЗаполнитьСтатусыСерийныхНомеров(ЗаданияПоСтрокам, МассивЗаданий); 
	КонецЕсли;
	
	ИзменитьВидимость()
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыСерийныхНомеров(Знач ЗаданияПоСтрокам, МассивЗаданий)
	
	Попытка
		ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
	Исключение
	КонецПопытки;
	Для каждого Задание Из МассивЗаданий Цикл
		Данные = Неопределено;
		Для каждого Сообщение Из Задание.ПолучитьСообщенияПользователю() Цикл
			Если ЗначениеЗаполнено(Сообщение.Текст) Тогда
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Сообщение.Текст);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Данные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТекСтр = ЗаданияПоСтрокам.Получить(Задание.УникальныйИдентификатор);
		ТекСтр.Статус = Данные.shoesData.status;
	КонецЦикла;
	МассивЗаданий.Очистить();
	
КонецПроцедуры


&НаКлиенте
Процедура ВводВОборотRetired(Команда)
	// Вставить содержимое обработчика.
	ДокумС=ВводВОборотНасервере_ДокументRETIRED();
	Если ЗначениеЗаполнено(ДокумС) Тогда
		ОткрытьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаДокумента",
		Новый Структура("Ключ",ДокумС));
	КонецЕсли;
	
КонецПроцедуры

Функция ВводВОборотНасервере_ДокументRETIRED()
	МассивВвести=Новый Массив;
	Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		Если Стр_1.Статус="RETIRED" Тогда
			  МассивВвести.Добавить(Стр_1.cis);
		Конецесли;
	Конеццикла;
	
	Если МассивВвести.Количество()=0 Тогда
		Возврат Неопределено;
	Конецесли;
	ДокумС=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ДокумС,Объект,,"Номер,Статус,ОшибкаОтправки,_Order_ID,дата");
	ДокумС.Дата=ТекущаяДата();
	
	Нстр=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("Статус","INTRODUCED"));
	СписокНайтиВводостатков=Новый СписокЗначений;
	Для Каждого Стр_2 Из НСтр Цикл
		СписокНайтиВводостатков.Добавить(Стр_2.СерийныйНомер);
	Конеццикла;
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.Ссылка
		|ИЗ
		|	Документ.ВводВОборот_ХамелеонЦРПТ.СерийныеНомера КАК ВводВОборот_ХамелеонЦРПТСерийныеНомера
		|ГДЕ
		|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.cis в (&СерийныйНомер)";
	
	Запрос.УстановитьПараметр("СерийныйНомер", СписокНайтиВводостатков);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ДокумВ=Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ДокумВ=ВыборкаДетальныеЗаписи.Ссылка
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Если ЗначениеЗаполнено(докумВ) тогда
		ЗаполнитьЗначенияСвойств(ДокумС,докумВ,,"Номер,Статус,ОшибкаОтправки,_Order_ID,дата");
	Конецесли;
	ДокумС.Организация=Объект.Организация;
	ДокумС.ТекущийПользователь=Объект.ТекущийПользователь;
	
	ДокумС.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотВозвратВРозницу;
	
	Для Каждого Стр_1 Из МассивВвести Цикл
		Попытка
        	Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",
			Число(Сред(Стр_1,3,14)));
		Исключение
			Проудкция=Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка();
		КонецПопытки;

		ДД=ДокумС.СерийныеНомера.Добавить();
		ДД.НаименованиеТовара=Продукция;
		ДД.cis=Стр_1;
		
		Добав=ДокумС.Товары.Найти(ДД.НаименованиеТовара,"GTIN");
		Если Добав=Неопределено Тогда
			Добав=ДокумС.Товары.Добавить();
			Добав.GTIN=ДД.НаименованиеТовара;
			Добав.ДекларацияИлиСертификатСоответствия=РЕгистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(
					ТекущаяДата(),Новый Структура("Продукция",Добав.GTIN)).Документ;
			Добав.НомерСтрокиСвязи=Добав.НомерСтроки;
			Добав.КодТНВЭД=Добав.GTIN.КодТНВЭД;
		КонецЕсли;
		ДД.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
		Добав.КоличествоКМ=Добав.КоличествоКМ+1;
		Добав.СпособВыпускаТоваров="";

	КонецЦикла;	
	ДокумС.Записать();
	Возврат ДокумС.Ссылка
Конецфункции

Функция СформирвоатьУКИ()
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("content");
	
	Чтен.ЗаписатьНачалоОбъекта();
	
		TimeStamp =  (Объект.Дата- Date(1970,1,1));
	
	Чтен.ЗаписатьИмяСвойства("date");
	Чтен.ЗаписатьЗначение(TimeStamp);
	
	
	Чтен.ЗаписатьИмяСвойства("original");
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("details");
	Чтен.ЗаписатьЗначение("УПД № "+Объект.ПервичныйДокумент.НомерПервичногоДокумента+" от "+Формат(Объект.ПервичныйДокумент.ДатаПервичногоДокумента,"ДЛФ=Д"));
	
	Чтен.ЗаписатьИмяСвойства("content_op");
	Если ЗначениеЗаполнено(Объект.ПричинаКоректировки) тогда
		Чтен.ЗаписатьЗначение(Объект.ПричинаКоректировки)
	Иначе
		чтен.ЗаписатьЗначение("Изменение стоимости товаров");
	КонецЕсли;
	
	
	
	Чтен.ЗаписатьКонецОбъекта();
	
	
	Чтен.ЗаписатьИмяСвойства("author");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("name");
	Чтен.ЗаписатьЗначение(Объект.Организация.Наименование+", ИНН: "+Объект.Организация.ИНН);
	Чтен.ЗаписатьКонецОбъекта();
	
	
	
	Чтен.ЗаписатьИмяСвойства("cod_okv");
	Чтен.ЗаписатьЗначение("643");
	
	Чтен.ЗаписатьИмяСвойства("additional");
	
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("currency_name");
	Чтен.ЗаписатьЗначение("Российский рубль");
	Чтен.ЗаписатьКонецОбъекта();
	
	
	
	
	Чтен.ЗаписатьИмяСвойства("inv_docs");
	Чтен.ЗаписатьНачалоМассива();
	
	Чтен.ЗаписатьНачалоОбъекта();
	
	TimeStamp_1 =  (Объект.ПервичныйДокумент.ДатаПервичногоДокумента- Date(1970,1,1) );
	
	Чтен.ЗаписатьИмяСвойства("number");
	Чтен.ЗаписатьЗначение(xmlString(Объект.ПервичныйДокумент.НомерПервичногоДокумента));
	

	
	Чтен.ЗаписатьИмяСвойства("date");
	Чтен.ЗаписатьЗначение(TimeStamp_1);
	
	
	Чтен.ЗаписатьКонецОбъекта();
	
	Чтен.ЗаписатьКонецМассива();
	
	
	
	Чтен.ЗаписатьИмяСвойства("number");
	Чтен.ЗаписатьЗначение(xmlString(Объект.НомерИсправления));
	
	
	
	
	//Если ЗначениеЗаполнено(Объект.ИдентификаторГосКонтракта) Тогда
	//	Чтен.ЗаписатьИмяСвойства("gov_contract_id");
	//	Чтен.ЗаписатьЗначение(Объект.ИдентификаторГосКонтракта);
	//	
	//	Если ЗначениеЗАполнено(Объект.ОснованиеПоКотЭконСубъектЯвлДок) тогда
	//		
	//		Чтен.ЗаписатьИмяСвойства("grounds");
	//		Чтен.ЗаписатьЗначение(Объект.ОснованиеПоКотЭконСубъектЯвлДок);
	//		
	//	КонецЕсли;
	//	
	// КонецЕсли;
	//
	//
	
	
	
	Чтен.ЗаписатьИмяСвойства("buyer");
	
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("id");
	
	Попытка
		ИД=Число(Объект.Контрагент.Ид_ЭДО_ЦРПТ);
	Исключение
		ИД=Объект.Контрагент.Ид_ЭДО_ЦРПТ;
	КонецПопытки;
	Чтен.ЗаписатьЗначение(ИД);
	
	Чтен.ЗаписатьИмяСвойства("inn");
	Чтен.ЗаписатьЗначение(Объект.Контрагент.ИНН);
	
	Если СтрДлина(Объект.Контрагент.ИНН)=12 Тогда
		Наименование=Объект.Контрагент.Наименование;
		
		Если Найти(Наименование,"ИП")>0 Тогда
			Наименование=СокрЛП(Сред(Наименование,3));
		КонецЕслИ;
		Наименование_1=Сред(Наименование,1,Найти(Наименование," "));
		Чтен.ЗаписатьИмяСвойства("surname");
		Чтен.ЗаписатьЗначение(Наименование_1);
		
		Наименование=Сред(Наименование,Найти(Наименование," ")+1);
		
		Наименование_1=Сред(Наименование,1,Найти(Наименование," "));
		Чтен.ЗаписатьИмяСвойства("name");
		Чтен.ЗаписатьЗначение(Наименование_1);
		
		Наименование=Сред(Наименование,Найти(Наименование," ")+1);
		Если ЗначениеЗаполнено(Наименование) тогда 
			Чтен.ЗаписатьИмяСвойства("patronymic");
			Чтен.ЗаписатьЗначение(Наименование);
		КонецЕсли;
		
		
	Иначе		
		Чтен.ЗаписатьИмяСвойства("kpp");
		Чтен.ЗаписатьЗначение(Объект.Контрагент.КПП);
		
		Чтен.ЗаписатьИмяСвойства("name");
		Чтен.ЗаписатьЗначение(Объект.Контрагент.Наименование);
	КонецЕсли;
	Чтен.ЗаписатьИмяСвойства("address");
	
	Чтен.ЗаписатьНачалоОбъекта();
	Адресс=РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("Объект,Тип",Объект.Контрагент,Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический));
	Если ЗначениеЗаполнено(Адресс.Город) тогда
		Чтен.ЗаписатьИмяСвойства("city");
		Чтен.ЗаписатьЗначение(Адресс.Город);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Дом) тогда
		Чтен.ЗаписатьИмяСвойства("plot");
		Чтен.ЗаписатьЗначение(Адресс.Дом);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Улица) тогда
		Чтен.ЗаписатьИмяСвойства("street");
		Чтен.ЗаписатьЗначение(Адресс.Улица);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Квартира) тогда
		Чтен.ЗаписатьИмяСвойства("office");
		Чтен.ЗаписатьЗначение(Адресс.Квартира);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Район) тогда
		Чтен.ЗаписатьИмяСвойства("district");
		Чтен.ЗаписатьЗначение(Адресс.Район);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.НаселенныйПункт) тогда
		Чтен.ЗаписатьИмяСвойства("locality");
		Чтен.ЗаписатьЗначение(Адресс.НаселенныйПункт);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Корпус) тогда
		Чтен.ЗаписатьИмяСвойства("building");
		Чтен.ЗаписатьЗначение(Адресс.Корпус);
		
	КонецЕсли;
		
	Чтен.ЗаписатьИмяСвойства("region");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("id");
	Чтен.ЗаписатьЗначение(Адресс.КодРегиона);
	Чтен.ЗаписатьКонецОбъекта();
	Если ЗначениеЗаполнено(Адресс.Индекс) тогда
		Чтен.ЗаписатьИмяСвойства("postal_code");
		Чтен.ЗаписатьЗначение(Адресс.Индекс);
	КонецЕсли;
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецОбъекта();
	
	
	 	
	
	Чтен.ЗаписатьИмяСвойства("seller");
	
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("id");
	
	
	Попытка
		ИД=Число(Объект.Организация.Ид_ЭДО_ЦРПТ);
	Исключение
		ИД=Объект.Организация.Ид_ЭДО_ЦРПТ;
	КонецПопытки;
	Чтен.ЗаписатьЗначение(ИД);
	
	
	Чтен.ЗаписатьИмяСвойства("inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
//	Чтен.ЗаписатьИмяСвойства("name");
//	Чтен.ЗаписатьЗначение(Объект.Организация.Наименование);
	Если СтрДлина(Объект.Организация.ИНН)=12 Тогда
		Наименование=Объект.Организация.Наименование;
		
		Если Найти(Наименование,"ИП")>0 Тогда
			Наименование=СокрЛП(Сред(Наименование,3));
		КонецЕслИ;
		Наименование_1=Сред(Наименование,1,Найти(Наименование," "));
		Чтен.ЗаписатьИмяСвойства("surname");
		Чтен.ЗаписатьЗначение(Наименование_1);
		
		Наименование=Сред(Наименование,Найти(Наименование," ")+1);
		
		Наименование_1=Сред(Наименование,1,Найти(Наименование," "));
		Чтен.ЗаписатьИмяСвойства("name");
		Чтен.ЗаписатьЗначение(Наименование_1);
		
		Наименование=Сред(Наименование,Найти(Наименование," ")+1);
		Если ЗначениеЗаполнено(Наименование) тогда 
			Чтен.ЗаписатьИмяСвойства("patronymic");
			Чтен.ЗаписатьЗначение(Наименование);
		КонецЕсли;
		
		
	Иначе		
		Чтен.ЗаписатьИмяСвойства("kpp");
		Чтен.ЗаписатьЗначение(Объект.Организация.КПП);
		
		Чтен.ЗаписатьИмяСвойства("name");
		Чтен.ЗаписатьЗначение(Объект.Организация.Наименование);
	КонецЕсли;
	Чтен.ЗаписатьИмяСвойства("address");
	
	Чтен.ЗаписатьНачалоОбъекта();
	Адресс=РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("Объект,Тип",Объект.Организация,Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический));
	Если ЗначениеЗаполнено(Адресс.Город) тогда
		Чтен.ЗаписатьИмяСвойства("city");
		Чтен.ЗаписатьЗначение(Адресс.Город);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Дом) тогда
		Чтен.ЗаписатьИмяСвойства("plot");
		Чтен.ЗаписатьЗначение(Адресс.Дом);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Улица) тогда
		Чтен.ЗаписатьИмяСвойства("street");
		Чтен.ЗаписатьЗначение(Адресс.Улица);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Квартира) тогда
		Чтен.ЗаписатьИмяСвойства("office");
		Чтен.ЗаписатьЗначение(Адресс.Квартира);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Район) тогда
		Чтен.ЗаписатьИмяСвойства("district");
		Чтен.ЗаписатьЗначение(Адресс.Район);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.НаселенныйПункт) тогда
		Чтен.ЗаписатьИмяСвойства("locality");
		Чтен.ЗаписатьЗначение(Адресс.НаселенныйПункт);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Корпус) тогда
		Чтен.ЗаписатьИмяСвойства("building");
		Чтен.ЗаписатьЗначение(Адресс.Корпус);
		
	КонецЕсли;
		
	Чтен.ЗаписатьИмяСвойства("region");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("id");
	Чтен.ЗаписатьЗначение(Адресс.КодРегиона);
	Чтен.ЗаписатьКонецОбъекта();
	
	Если ЗначениеЗаполнено(Адресс.Индекс) тогда
		Чтен.ЗаписатьИмяСвойства("postal_code");
		Чтен.ЗаписатьЗначение(Адресс.Индекс);
	КонецЕсли;
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецОбъекта();
	
	
	
	
	
	
	
	
	
	
	Чтен.ЗаписатьИмяСвойства("signer");
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("status");
	Чтен.ЗаписатьЗначение(1);
	
	Чтен.ЗаписатьИмяСвойства("grounds");
	Чтен.ЗаписатьЗначение("Должностные обязанности");
	Чтен.ЗаписатьИмяСвойства("authority");
	Чтен.ЗаписатьЗначение(0);
	Чтен.ЗаписатьКонецОбъекта();
	
//	Чтен.ЗаписатьИмяСвойства("total_vat_amount");
//	Чтен.ЗаписатьЗначение(Формат(Объект.Товары.Итог("НДС"),"ЧЦ=15; ЧДЦ=2; ЧРД='.'; ЧГ=; ЧН="));
	
	
	ТаблицаИсправлений=Новый ТаблицаЗначений;
	ТаблицаИсправлений.Колонки.Добавить("ГТИН");
	ТаблицаИсправлений.Колонки.Добавить("НаименованиеУПД");
	ТаблицаИсправлений.Колонки.Добавить("КоличествоБыло");
	ТаблицаИсправлений.Колонки.Добавить("КоличествоСтало");
	ТаблицаИсправлений.Колонки.Добавить("СуммаНДСБыло");
	ТаблицаИсправлений.Колонки.Добавить("СуммаНДССтало");
	ТаблицаИсправлений.Колонки.Добавить("СуммаБыло");
	ТаблицаИсправлений.Колонки.Добавить("СуммаСтало");
	ТаблицаИсправлений.Колонки.Добавить("СуммаАкцизБыло");
	ТаблицаИсправлений.Колонки.Добавить("СуммаАкцизСтало");
	ТаблицаИсправлений.Колонки.Добавить("ЕдИзмБыло");
	ТаблицаИсправлений.Колонки.Добавить("ЕдИзмСтало");
	//ТаблицаИсправлений.Колонки.Добавить("ЦенаБыло");
	//ТаблицаИсправлений.Колонки.Добавить("ЦенаСтало");
	ТаблицаИсправлений.Колонки.Добавить("СтавкаНДСБыло");
	ТаблицаИсправлений.Колонки.Добавить("СтавкаНДССтало");
	//ТаблицаИсправлений.Колонки.Добавить("СтоимостьБезНДСБыло");
	//ТаблицаИсправлений.Колонки.Добавить("СтоимостьБезНДССтало");
	
	ТаблицаИсправлений.Колонки.Добавить("МаркировкаБыло");
	ТаблицаИсправлений.Колонки.Добавить("МаркировкаСтало");
	ТаблицаИсправлений.Колонки.Добавить("ЕстьУжеИсправление");
	
	
	
	
	Для Каждого Стр_1 Из Объект.ПервичныйДокумент.Товары Цикл
		
		
		
		Добав=ТаблицаИсправлений.Добавить();
		Добав.НаименованиеУПД=Стр_1.НаименованиеВУПД;
		Добав.ГТИН=Стр_1.GTIN;
		Добав.КоличествоБыло=Стр_1.КоличествоКМ;
		Добав.КоличествоСтало=0;
		
		СуммаПоСтроке=Стр_1.Цена*Стр_1.КоличествоКМ;
		
		Добав.СуммаБыло=СуммаПоСтроке;
		Добав.СуммаСтало=0;
		
		Добав.СуммаАкцизБыло=Стр_1.СуммаАкциза;
		Добав.СуммаАкцизСтало=0;
		
		Добав.ЕдИзмБыло=Стр_1.ЕдиницаИзмерения;
		Добав.ЕдИзмСтало="";
		
		Добав.СтавкаНДСБыло=Стр_1.СтавкаНДС;
		Добав.СтавкаНДССтало="";
		
		Добав.СуммаНДСБыло=Стр_1.НДС;
		Добав.СуммаНДССтало=0;
		Добав.ЕстьУжеИсправление=Ложь;
		НСтрок=Объект.ПервичныйДокумент.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
		
		СписокБылоМаркировка=Новый СписокЗначений;
		СписокБылоМаркировка.Очистить();
		Если  НСтрок.Количество()>0 Тогда
			
			
			Для Каждого Стр_ММ Из НСТрок Цикл
				
				СписокБылоМаркировка.Добавить(Стр_ММ.cis);
				
			Конеццикла;
		Конецесли;
		Добав.МаркировкаБыло=СписокБылоМаркировка;
		//Добав.МаркировкаСтало=Новый СписокЗначений;
	Конеццикла;
	
	
	
	Для Каждого Стр_1 Из Объект.Товары Цикл
		НСтрокиИсправлений=ТаблицаИсправлений.НайтиСтроки(
		Новый Структура("ГТИН,ЕстьУжеИсправление",Стр_1.GTIN,Ложь));
		Если НСтрокиИсправлений.Количество()=0 Тогда
			Добав=ТаблицаИсправлений.Добавить();
			Добав.НаименованиеУПД=Стр_1.НаименованиеВУПД;
			Добав.ГТИН=Стр_1.GTIN;
			Добав.КоличествоБыло=0;
			Добав.КоличествоСтало=0;
			
			Добав.СуммаБыло=0;
			Добав.СуммаСтало=0;
			
			
			Добав.СуммаАкцизБыло=0;
			Добав.СуммаАкцизСтало=0;

			
			Добав.СуммаНДСБыло=0;
			Добав.СуммаНДССтало=0;
			Добав.ГТИН=Стр_1.GTIN;
			

		Иначе
			Добав=НСтрокиИсправлений[0];
		КонецЕслИ;
		
		
		Добав.КоличествоСтало=Стр_1.КоличествоКМ;
		
		СуммаПоСтроке=Стр_1.Цена*Стр_1.КоличествоКМ;
		
		//Добав.СуммаБыло=СуммаПоСтроке;
		Добав.СуммаСтало=СуммаПоСтроке;
		
		Добав.СуммаАкцизСтало=Стр_1.СуммаАкциза;
		
		//Добав.ЕдИзмБыло=Стр_1.ЕдиницаИзмерения;
		Добав.ЕдИзмСтало=Стр_1.ЕдиницаИзмерения;
		
		//Добав.СтавкаНДСБыло=;
		Добав.СтавкаНДССтало=Стр_1.СтавкаНДС;
		
		Добав.СуммаНДССтало=Стр_1.НДС;
		НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
		
		СписокБылоМаркировка=Новый СписокЗначений;
		СписокБылоМаркировка.Очистить();
		Если  НСтрок.Количество()>0 Тогда
			
			
			Для Каждого Стр_ММ Из НСТрок Цикл
				
				СписокБылоМаркировка.Добавить(Стр_ММ.cis);
				
			Конеццикла;
		Конецесли;
		Добав.МаркировкаСтало=СписокБылоМаркировка;
		
		Добав.ЕстьУжеИсправление=истина;
	Конеццикла;
	
	
	
	
	
	Чтен.ЗаписатьИмяСвойства("products");
	Чтен.ЗаписатьНачалоМассива();
	
	НомерСтроки=0;
	Для Каждого Стр_1 Из ТаблицаИсправлений Цикл
		
		
		Чтен.ЗаписатьНачалоОбъекта();
		
		
		НомерСтроки=НомерСтроки+1;
		
		Чтен.ЗаписатьИмяСвойства("number");
		Чтен.ЗаписатьЗначение(xmlString(НомерСтроки));
		
		Чтен.ЗаписатьИмяСвойства("name");
		Если ЗначениеЗаполнено(Стр_1.НаименованиеУПД) Тогда
			Чтен.ЗаписатьЗначение(Стр_1.НаименованиеУПД);
		ИначеЕсли ЗначениеЗаполнено(Стр_1.ГТИН.Наименование) ТОгда
			Чтен.ЗаписатьЗначение(Стр_1.ГТИН.Наименование);
		КонецЕсли;

		//Чтен.ЗаписатьЗначение(Стр_1.ГТИН.Наименование);
		
		//Если ЗначениеЗаполнено(Стр_1.GTIN.Код) Тогда
		//	Чтен.ЗаписатьИмяСвойства("code");
		//	Чтен.ЗаписатьЗначение(Стр_1.GTIN.Код);
		//КонецЕсли;
		//
		//Если ЗначениеЗаполнено(Стр_1.НаименованиеВУПД) Тогда
		//	Чтен.ЗаписатьИмяСвойства("name");
		//	Чтен.ЗаписатьЗначение(Стр_1.НаименованиеВУПД);
		//
		//ИначеЕсли ЗначениеЗаполнено(Стр_1.GTIN.Наименование) ТОгда
		//	Чтен.ЗаписатьИмяСвойства("name");
		//	Чтен.ЗаписатьЗначение(Стр_1.GTIN.Наименование);
		//КонецЕсли;
		//СуммаПоСтроке=Стр_1.Цена*Стр_1.КоличествоКМ;
		
		
		Чтен.ЗаписатьИмяСвойства("price");
		Чтен.ЗаписатьНачалоОбъекта();
		
		Чтен.ЗаписатьИмяСвойства("previous");
		Чтен.ЗаписатьЗначение(xmlString(Стр_1.СуммаБыло));
		
		
		Чтен.ЗаписатьИмяСвойства("current");
		Чтен.ЗаписатьЗначение(xmlstring(Стр_1.СуммаСтало));
		
		Разница=Стр_1.СуммаСтало-Стр_1.СуммаБыло;
		
		Чтен.ЗаписатьИмяСвойства("difference_plus");
		
		Если Разница>=0 Тогда
			Чтен.ЗаписатьЗначение(xmlString(Разница));
		Иначе
			Чтен.ЗаписатьЗначение("0");
		КонецЕсли;
		
		
		
		Чтен.ЗаписатьИмяСвойства("difference_minus");
		
		Если Разница<=0 Тогда
			Чтен.ЗаписатьЗначение(xmlString(-Разница));
		Иначе
			Чтен.ЗаписатьЗначение("0");
		КонецЕсли;
		
		
		
		Чтен.ЗаписатьКонецОбъекта();
		
		
		Чтен.ЗаписатьИмяСвойства("okei");
		Чтен.ЗаписатьНачалоОбъекта();
		
		Если ЗначениеЗаполнено(Стр_1.ЕдИзмБыло) тогда
			Чтен.ЗаписатьИмяСвойства("previous");
			Чтен.ЗаписатьЗначение(Стр_1.ЕдИзмБыло.Код);
		КонецЕсли;
		
		
		Чтен.ЗаписатьИмяСвойства("current");
		Если ЗначениеЗаполнено(Стр_1.ЕдИзмСтало) тогда
			Чтен.ЗаписатьЗначение(Стр_1.ЕдИзмСтало.Код);
		Иначе
			Чтен.ЗаписатьЗначение(Стр_1.ЕдИзмБыло.Код);
		Конецесли;
		
		Чтен.ЗаписатьКонецОбъекта();
		
		
		
		Чтен.ЗаписатьИмяСвойства("excise_amount");
		Чтен.ЗаписатьНачалоОбъекта();
		
		Чтен.ЗаписатьИмяСвойства("previous");
		Чтен.ЗаписатьЗначение(xmlString(Стр_1.СуммаАкцизБыло));
		
		
		Чтен.ЗаписатьИмяСвойства("current");
		Чтен.ЗаписатьЗначение(xmlString(Стр_1.СуммаАкцизСтало));
		
		Разница=Стр_1.СуммаАкцизСтало-Стр_1.СуммаАкцизБыло;
		
		Чтен.ЗаписатьИмяСвойства("difference_plus");
		
		Если Разница>=0 Тогда
			Чтен.ЗаписатьЗначение(xmlString(Разница));
		Иначе
			Чтен.ЗаписатьЗначение("0");
		КонецЕсли;
		
		
		
		Чтен.ЗаписатьИмяСвойства("difference_minus");
		
		Если Разница<=0 Тогда
			Чтен.ЗаписатьЗначение(xmlString(-Разница));
		Иначе
			Чтен.ЗаписатьЗначение("0");
		КонецЕсли;
		
		
		
		Чтен.ЗаписатьКонецОбъекта();
		
		
		
		
		Чтен.ЗаписатьИмяСвойства("price_per_unit");
		Чтен.ЗаписатьНачалоОбъекта();
		
		Если Стр_1.КоличествоБыло>0 Тогда
			ЦенаезНДС=Окр(Стр_1.СуммаБыло-Стр_1.СуммаНДСБыло/Стр_1.КоличествоБыло,2);
		Иначе
			ЦенаезНДС=Стр_1.СуммаБыло;
		КонецЕслИ;

		Чтен.ЗаписатьИмяСвойства("previous");
		Чтен.ЗаписатьЗначение(xmlString(ЦенаезНДС));
		
		
		Если Стр_1.КоличествоСтало>0 Тогда
			ЦенаезНДС=Окр(Стр_1.СуммаСтало-Стр_1.СуммаНДССтало/Стр_1.КоличествоСтало,2);
		Иначе
			ЦенаезНДС=Стр_1.СуммаСтало;
		КонецЕслИ;
		
		Чтен.ЗаписатьИмяСвойства("current");
		Чтен.ЗаписатьЗначение(xmlString(ЦенаезНДС));
		
		
		Чтен.ЗаписатьКонецОбъекта();
		
		
		
		СуммаБезНДСБыло=Стр_1.СуммаБыло-Стр_1.СуммаНДСБыло;
		СуммаБезНДССтало=Стр_1.СуммаСтало-Стр_1.СуммаНДССтало;
		
		
		
		Чтен.ЗаписатьИмяСвойства("price_without_vat");
		Чтен.ЗаписатьНачалоОбъекта();
		
		Чтен.ЗаписатьИмяСвойства("previous");
		Чтен.ЗаписатьЗначение(xmlString(СуммаБезНДСБыло));
		
		
		Чтен.ЗаписатьИмяСвойства("current");
		Чтен.ЗаписатьЗначение(xmlString(СуммаБезНДССтало));
		
		Разница=СуммаБезНДССтало-СуммаБезНДСБыло;
		
		Чтен.ЗаписатьИмяСвойства("difference_plus");
		
		Если Разница>=0 Тогда
			Чтен.ЗаписатьЗначение(xmlString(Разница));
		Иначе
			Чтен.ЗаписатьЗначение("0");
		КонецЕсли;
		
		
		
		Чтен.ЗаписатьИмяСвойства("difference_minus");
		
		Если Разница<=0 Тогда
			Чтен.ЗаписатьЗначение(xmlString(-Разница));
		Иначе
			Чтен.ЗаписатьЗначение("0");
		КонецЕсли;
		
		
		
		Чтен.ЗаписатьКонецОбъекта();
		
		
		
		Чтен.ЗаписатьИмяСвойства("vat_amount");
		Чтен.ЗаписатьНачалоОбъекта();
		
		Чтен.ЗаписатьИмяСвойства("previous");
		Чтен.ЗаписатьЗначение(xmlString(Стр_1.СуммаНДСБыло));
		
		
		Чтен.ЗаписатьИмяСвойства("current");
		Чтен.ЗаписатьЗначение(xmlString(Стр_1.СуммаНДССтало));
		
		Разница=Стр_1.СуммаНДССтало-Стр_1.СуммаНДСБыло;
		
		Чтен.ЗаписатьИмяСвойства("difference_plus");
		
		Если Разница>=0 Тогда
			Чтен.ЗаписатьЗначение(xmlString(Разница));
		Иначе
			Чтен.ЗаписатьЗначение("0");
		КонецЕсли;
		
	//	Чтен.ЗаписатьКонецОбъекта();
		
		
		
		
		Чтен.ЗаписатьИмяСвойства("difference_minus");
		
		Если Разница<=0 Тогда
			Чтен.ЗаписатьЗначение(xmlString(-Разница));
		Иначе
			Чтен.ЗаписатьЗначение("0");
		КонецЕсли;
		
		
		
		//Чтен.ЗаписатьКонецОбъекта();
		
		
		
		
		
		Чтен.ЗаписатьКонецОбъекта();
		
		
		
		Чтен.ЗаписатьИмяСвойства("quantity");
		Чтен.ЗаписатьНачалоОбъекта();
		
		Чтен.ЗаписатьИмяСвойства("previous");
		Чтен.ЗаписатьЗначение(xmlString(Стр_1.Количествобыло));
		
		
		Чтен.ЗаписатьИмяСвойства("current");
		Чтен.ЗаписатьЗначение(xmlString(Стр_1.КоличествоСтало));
		
		Чтен.ЗаписатьКонецОбъекта();
		
		
		
		Чтен.ЗаписатьИмяСвойства("vat_rate");
		Чтен.ЗаписатьНачалоОбъекта();
		
		СтавкаНДС_1="без НДС";
		Если Стр_1.СуммаНДСБыло<>0 Тогда
			Если Стр_1.СуммаБыло-Стр_1.СуммаНДСБыло<>0 Тогда
				СтавкаНДС=Стр_1.СуммаНДСБыло*100/(Стр_1.СуммаБыло-Стр_1.СуммаНДСБыло);
				Если СтавкаНДС<5 Тогда
					СтавкаНДС_1="без НДС";
				ИначеЕсли СтавкаНДС<17 Тогда
					СтавкаНДС_1="10%"
				Иначе
					СтавкаНДС_1="20%"
					
				КонецЕслИ;
			КонецЕсли;
		КонецЕсли;

		Если Стр_1.КоличествоБыло=0 Тогда
			Чтен.ЗаписатьИмяСвойства("previous");
			Чтен.ЗаписатьЗначение("");
		Иначе
			Чтен.ЗаписатьИмяСвойства("previous");
			Чтен.ЗаписатьЗначение(СтавкаНДС_1);
		КонецЕсли;
		
		
		СтавкаНДС_1="без НДС";
		Если Стр_1.СуммаНДССтало<>0 Тогда
			Если Стр_1.СуммаСтало-Стр_1.СуммаНДССтало<>0 Тогда
				СтавкаНДС=Стр_1.СуммаНДССТало*100/(Стр_1.СуммаСтало-Стр_1.СуммаНДССтало);
				Если СтавкаНДС<5 Тогда
					СтавкаНДС_1="без НДС";
				ИначеЕсли СтавкаНДС<17 Тогда
					СтавкаНДС_1="10%"
				Иначе
					СтавкаНДС_1="20%"
					
				КонецЕслИ;
			КонецЕсли;
		КонецЕсли;

		

		
		Чтен.ЗаписатьИмяСвойства("current");
		Чтен.ЗаписатьЗначение(СтавкаНДС_1);
		
		Чтен.ЗаписатьКонецОбъекта();
		
		
		
		БылиКМ=Стр_1.МаркировкаБыло;
		ЕстьКМ=Ложь;
		ЕстьУпаковки=Ложь;
		Если ЗначениеЗаполнено(БылиКМ) Тогда
			Для Каждого СТр_11 Из БылиКМ Цикл
				Если СтрДлина(Стр_11.Значение)=18 Тогда
					ЕстьУпаковки=Истина;
				Иначе
					ЕстьКМ=Истина;
					
				КонецЕсли;
				Если ЕстьКМ=Истина И ЕстьУпаковки=Истина Тогда
					Прервать;
				КонецЕсли;
				
			Конеццикла;
		КонецЕсли;
		
		СталоКМ=Стр_1.МаркировкаСтало;
		//ЕстьКМ=Ложь;
		//ЕстьУпаковки=Ложь;
		Если ЗначениеЗаполнено(СталоКМ) Тогда
			Для Каждого СТр_11 Из СталоКМ Цикл
				Если СтрДлина(Стр_11.Значение)=18 Тогда
					ЕстьУпаковки=Истина;
				Иначе
					ЕстьКМ=Истина;
				КонецЕсли;
				Если ЕстьКМ=Истина И ЕстьУпаковки=Истина Тогда
					Прервать;
				КонецЕсли;
				
			Конеццикла;
		КонецЕсли;
		
		Если ЕстьУпаковки=Истина ИЛИ ЕстьКМ=Истина Тогда
			
			Чтен.ЗаписатьИмяСвойства("good_identification_numbers");
			Чтен.ЗаписатьНачалоОбъекта();
			
			
			Чтен.ЗаписатьИмяСвойства("previous");
			
			Чтен.ЗаписатьНачалоОбъекта();
			
			
			Если ЕстьКМ=Истина Тогда
				Чтен.ЗаписатьИмяСвойства("cis");
				Чтен.ЗаписатьНачалоМассива();
				
				МаркаПопалась=Ложь;
				Если ЗначениеЗаполнено(БылиКМ) Тогда
					Для Каждого Стр_ Из  БылиКМ Цикл
						Если СтрДлина(Стр_.Значение)<>18 Тогда
							Чтен.ЗаписатьЗначение(Стр_.Значение);
							МаркаПопалась=Истина;
						КонецЕсли;
					Конеццикла;
				КонецЕсли;
				
				Если МаркаПопалась=Ложь Тогда
					Чтен.ЗаписатьЗначение("-");
				КонецЕсли;
				
				Чтен.ЗаписатьКонецМассива();
				
			Конецесли;
			
			
			Если ЕстьУпаковки=Истина Тогда
				Чтен.ЗаписатьИмяСвойства("sscc");
				Чтен.ЗаписатьНачалоМассива();
				
				МаркаПопалась=Ложь;
				Если ЗначениеЗаполнено(БылиКМ) Тогда
					Для Каждого Стр_ Из  БылиКМ Цикл
						Если СтрДлина(Стр_.Значение)=18 Тогда
							Чтен.ЗаписатьЗначение(Стр_.Значение);
							МаркаПопалась=Истина;
						КонецЕсли;
					Конеццикла;
				КонецЕсли;
				
				Если МаркаПопалась=Ложь Тогда
					Чтен.ЗаписатьЗначение("-");
				КонецЕсли;
				
				Чтен.ЗаписатьКонецМассива();
				
			Конецесли;
			

			
			Чтен.ЗаписатьКонецОбъекта();
			
		КонецЕсли;		
		Чтен.ЗаписатьИмяСвойства("current");
		
		Чтен.ЗаписатьНачалоОбъекта();
		
		
		Если ЕстьКМ=Истина Тогда
			Чтен.ЗаписатьИмяСвойства("cis");
			Чтен.ЗаписатьНачалоМассива();
			
			МаркаПопалась=Ложь;
			
			Если ЗначениеЗаполнено(СталоКМ) Тогда
				Для Каждого Стр_ Из  СталоКМ Цикл
					Если СтрДлина(Стр_.Значение)<>18 Тогда
						Чтен.ЗаписатьЗначение(Стр_.Значение);
						МаркаПопалась=Истина;
					КонецЕсли;
				Конеццикла;
			КонецЕсли;
			
			Если МаркаПопалась=Ложь Тогда
				Чтен.ЗаписатьЗначение("-");
			КонецЕсли;
			
			Чтен.ЗаписатьКонецМассива();
			
		Конецесли;
		
		
		Если ЕстьУпаковки=Истина Тогда
			Чтен.ЗаписатьИмяСвойства("sscc");
			Чтен.ЗаписатьНачалоМассива();
			
			МаркаПопалась=Ложь;
			Если ЗначениеЗаполнено(СталоКМ) Тогда
				Для Каждого Стр_ Из  СталоКМ Цикл
					Если СтрДлина(Стр_.Значение)=18 Тогда
						Чтен.ЗаписатьЗначение(Стр_.Значение);
						МаркаПопалась=Истина;
					КонецЕсли;
				Конеццикла;
			КонецЕсли;
			Если МаркаПопалась=Ложь Тогда
				Чтен.ЗаписатьЗначение("-");
			КонецЕсли;
			
			Чтен.ЗаписатьКонецМассива();
			
		Конецесли;
		
		Чтен.ЗаписатьКонецОбъекта();

		
		Чтен.ЗаписатьКонецОбъекта();
		
		
		
	
		
		
		
		Чтен.ЗаписатьКонецОбъекта();
		
		
		
	//	Чтен.ЗаписатьКонецОбъекта();
		
		
		
		
	//	БылиУпаковки=
		
		
		
	Конеццикла;
	
	Чтен.ЗаписатьКонецМассива();	
	
	
	//Чтен.ЗаписатьКонецОбъекта();
	
	
	
	Разница=Объект.ПервичныйДокумент.СуммаДокумента-Объект.СуммаДокумента;
	
	
	Чтен.ЗаписатьИмяСвойства("total_price");
	
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("difference_plus");
	
	Если Разница>=0 Тогда
		Чтен.ЗаписатьЗначение(xmlString(Разница));
	Иначе
		Чтен.ЗаписатьЗначение("0");
	КонецЕсли;
	
	
	
	Чтен.ЗаписатьИмяСвойства("difference_minus");
	
	Если Разница<=0 Тогда
		Чтен.ЗаписатьЗначение(xmlString(-Разница));
	Иначе
		Чтен.ЗаписатьЗначение("0");
	КонецЕсли;
		
	
	
	Чтен.ЗаписатьКонецОбъекта();
	
	СуммаСталоБезНДС=Объект.СуммаДокумента-Объект.Товары.Итог("НДС");
	
	СуммаБылоыБезНДС=Объект.ПервичныйДокумент.СуммаДокумента-Объект.ПервичныйДокумент.Товары.Итог("НДС");
	
	
	
	Разница=СуммаСталоБезНДС-СуммаБылоыБезНДС;
	
	Чтен.ЗаписатьИмяСвойства("total_price_without_vat");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("difference_plus");
	
	Если Разница>=0 Тогда
		Чтен.ЗаписатьЗначение(xmlString(Разница));
	Иначе
		Чтен.ЗаписатьЗначение("0");
	КонецЕсли;
	
	
	
	Чтен.ЗаписатьИмяСвойства("difference_minus");
	
	Если Разница<=0 Тогда
		Чтен.ЗаписатьЗначение(xmlString(-Разница));
	Иначе
		Чтен.ЗаписатьЗначение("0");
	КонецЕсли;
	
	Чтен.ЗаписатьКонецОбъекта();
	
	Разница=Объект.ПервичныйДокумент.Товары.Итог("НДС")-Объект.Товары.Итог("НДС");
	
	
	Чтен.ЗаписатьИмяСвойства("total_vat_amount");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("difference_plus");
	
	Если Разница>=0 Тогда
		Чтен.ЗаписатьЗначение(xmlString(Разница));
	Иначе
		Чтен.ЗаписатьЗначение("0");
	КонецЕсли;
	
	
	
	Чтен.ЗаписатьИмяСвойства("difference_minus");
	
	Если Разница<=0 Тогда
		Чтен.ЗаписатьЗначение(xmlString(-Разница));
	Иначе
		Чтен.ЗаписатьЗначение("0");
	КонецЕсли;
	
	Чтен.ЗаписатьКонецОбъекта();
	
	Чтен.ЗаписатьКонецОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("parent_id");
	Чтен.ЗаписатьЗначение(Объект.Order_ID_УПД);
		
	Чтен.ЗаписатьИмяСвойства("type");
	Чтен.ЗаписатьЗначение(204);
	
		
	Чтен.ЗаписатьИмяСвойства("requires_recipient_signature");
	Чтен.ЗаписатьЗначение(true);
	
	Чтен.ЗаписатьКонецОбъекта();
	
	Тело=Чтен.Закрыть();
	 	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Тело);
	КонецЕсли;
	
	Возврат Тело;
КонецФункции

Функция СформироватьУПД()
	
	Если Объект.ТипУточненияУПД=Перечисления.ТипУточненияУПД_ХамелеонЦРПТ.Корректировочная Тогда
		Возврат СформирвоатьУКИ()
	КонецЕсли;
	
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("content");
	
	Чтен.ЗаписатьНачалоОбъекта();
	
	Если Объект.ТипУточненияУПД=Перечисления.ТипУточненияУПД_ХамелеонЦРПТ.Исправление Тогда
		TimeStamp =  (Объект.ПервичныйДокумент.Дата- Date(1970,1,1) - 3 * 3600);
	Иначе
		TimeStamp =  (Объект.Дата- Date(1970,1,1) - 3 * 3600);
		
	КонецЕсли;
	
	Чтен.ЗаписатьИмяСвойства("number");
	Чтен.ЗаписатьЗначение(Объект.НомерПервичногоДокумента);
	
	Чтен.ЗаписатьИмяСвойства("date");
	//Чтен.ЗаписатьЗначение(Формат(Объект.Дата,"ДФ=""дд.ММ.гг"""));
	//Чтен.ЗаписатьЗначение(Формат(Объект.Дата,"ДФ=""гггг-ММ-дд"""));
	Чтен.ЗаписатьЗначение(TimeStamp);
	
	
	Если ЗначениеЗаполнено(Объект.ИдентификаторГосКонтракта) Тогда
		Чтен.ЗаписатьИмяСвойства("gov_contract_id");
		Чтен.ЗаписатьЗначение(Объект.ИдентификаторГосКонтракта);
		
		Если ЗначениеЗАполнено(Объект.ОснованиеПоКотЭконСубъектЯвлДок) тогда
			
			Чтен.ЗаписатьИмяСвойства("grounds");
			Чтен.ЗаписатьЗначение(Объект.ОснованиеПоКотЭконСубъектЯвлДок);
			
		КонецЕсли;
		
	 КонецЕсли;
	
	
	Чтен.ЗаписатьИмяСвойства("buyer");
	
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("id");
	
	Попытка
		ИД=Число(Объект.Контрагент.Ид_ЭДО_ЦРПТ);
	Исключение
		ИД=Объект.Контрагент.Ид_ЭДО_ЦРПТ;
	КонецПопытки;
	Чтен.ЗаписатьЗначение(ИД);
	
	Чтен.ЗаписатьИмяСвойства("inn");
	Чтен.ЗаписатьЗначение(Объект.Контрагент.ИНН);
	
	Если СтрДлина(Объект.Контрагент.ИНН)=12 Тогда
		Наименование=Объект.Контрагент.Наименование;
		
		Если Найти(Наименование,"ИП")>0 Тогда
			Наименование=СокрЛП(Сред(Наименование,3));
		КонецЕслИ;
		Наименование_1=Сред(Наименование,1,Найти(Наименование," "));
		Чтен.ЗаписатьИмяСвойства("surname");
		Чтен.ЗаписатьЗначение(Наименование_1);
		
		Наименование=Сред(Наименование,Найти(Наименование," ")+1);
		
		Наименование_1=Сред(Наименование,1,Найти(Наименование," "));
		Чтен.ЗаписатьИмяСвойства("name");
		Чтен.ЗаписатьЗначение(Наименование_1);
		
		Наименование=Сред(Наименование,Найти(Наименование," ")+1);
		Если ЗначениеЗаполнено(Наименование) тогда 
			Чтен.ЗаписатьИмяСвойства("patronymic");
			Чтен.ЗаписатьЗначение(Наименование);
		КонецЕсли;
		
		
	Иначе		
		Чтен.ЗаписатьИмяСвойства("kpp");
		Чтен.ЗаписатьЗначение(Объект.Контрагент.КПП);
		
		Чтен.ЗаписатьИмяСвойства("name");
		Чтен.ЗаписатьЗначение(Объект.Контрагент.Наименование);
	КонецЕсли;
	Чтен.ЗаписатьИмяСвойства("address");
	
	Чтен.ЗаписатьНачалоОбъекта();
	Адресс=РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("Объект,Тип",Объект.Контрагент,Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический));
	Если ЗначениеЗаполнено(Адресс.Город) тогда
		Чтен.ЗаписатьИмяСвойства("city");
		Чтен.ЗаписатьЗначение(Адресс.Город);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Дом) тогда
		Чтен.ЗаписатьИмяСвойства("plot");
		Чтен.ЗаписатьЗначение(Адресс.Дом);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Улица) тогда
		Чтен.ЗаписатьИмяСвойства("street");
		Чтен.ЗаписатьЗначение(Адресс.Улица);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Квартира) тогда
		Чтен.ЗаписатьИмяСвойства("office");
		Чтен.ЗаписатьЗначение(Адресс.Квартира);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Район) тогда
		Чтен.ЗаписатьИмяСвойства("district");
		Чтен.ЗаписатьЗначение(Адресс.Район);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.НаселенныйПункт) тогда
		Чтен.ЗаписатьИмяСвойства("locality");
		Чтен.ЗаписатьЗначение(Адресс.НаселенныйПункт);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Корпус) тогда
		Чтен.ЗаписатьИмяСвойства("building");
		Чтен.ЗаписатьЗначение(Адресс.Корпус);
		
	КонецЕсли;
		
	Чтен.ЗаписатьИмяСвойства("region");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("id");
	Чтен.ЗаписатьЗначение(Адресс.КодРегиона);
	Чтен.ЗаписатьКонецОбъекта();
	Если ЗначениеЗаполнено(Адресс.Индекс) тогда
		Чтен.ЗаписатьИмяСвойства("postal_code");
		Чтен.ЗаписатьЗначение(Адресс.Индекс);
	КонецЕсли;
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецОбъекта();
	
	
	
	Если ЗначениеЗаполнено(объект.Грузополучатель) Тогда
		Грузополучатель=объект.Грузополучатель;
	Иначе
		Грузополучатель=объект.Контрагент;
	КонецЕсли;
	
	
	Чтен.ЗаписатьИмяСвойства("consignee");
	
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("id");
	
	Попытка
		ИД=Число(Грузополучатель.Ид_ЭДО_ЦРПТ);
	Исключение
		ИД=Грузополучатель.Ид_ЭДО_ЦРПТ;
	КонецПопытки;
	Чтен.ЗаписатьЗначение(ИД);
	
	Чтен.ЗаписатьИмяСвойства("inn");
	Чтен.ЗаписатьЗначение(Грузополучатель.ИНН);
	
	Если СтрДлина(Грузополучатель.ИНН)=12 Тогда
		Наименование=Грузополучатель.Наименование;
		
		Если Найти(Наименование,"ИП")>0 Тогда
			Наименование=СокрЛП(Сред(Наименование,3));
		КонецЕслИ;
		Наименование_1=Сред(Наименование,1,Найти(Наименование," "));
		Чтен.ЗаписатьИмяСвойства("surname");
		Чтен.ЗаписатьЗначение(Наименование_1);
		
		Наименование=Сред(Наименование,Найти(Наименование," ")+1);
		
		Наименование_1=Сред(Наименование,1,Найти(Наименование," "));
		Чтен.ЗаписатьИмяСвойства("name");
		Чтен.ЗаписатьЗначение(Наименование_1);
		
		Наименование=Сред(Наименование,Найти(Наименование," ")+1);
		Если ЗначениеЗаполнено(Наименование) тогда 
			Чтен.ЗаписатьИмяСвойства("patronymic");
			Чтен.ЗаписатьЗначение(Наименование);
		КонецЕсли;
		
		
	Иначе		
		Чтен.ЗаписатьИмяСвойства("kpp");
		Чтен.ЗаписатьЗначение(Грузополучатель.КПП);
		
		Чтен.ЗаписатьИмяСвойства("name");
		Чтен.ЗаписатьЗначение(Грузополучатель.Наименование);
	КонецЕсли;
	Чтен.ЗаписатьИмяСвойства("address");
	
	Чтен.ЗаписатьНачалоОбъекта();
	Адресс=РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("Объект,Тип",Грузополучатель,Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический));
	Если ЗначениеЗаполнено(Адресс.Город) тогда
		Чтен.ЗаписатьИмяСвойства("city");
		Чтен.ЗаписатьЗначение(Адресс.Город);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Дом) тогда
		Чтен.ЗаписатьИмяСвойства("plot");
		Чтен.ЗаписатьЗначение(Адресс.Дом);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Улица) тогда
		Чтен.ЗаписатьИмяСвойства("street");
		Чтен.ЗаписатьЗначение(Адресс.Улица);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Квартира) тогда
		Чтен.ЗаписатьИмяСвойства("office");
		Чтен.ЗаписатьЗначение(Адресс.Квартира);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Район) тогда
		Чтен.ЗаписатьИмяСвойства("district");
		Чтен.ЗаписатьЗначение(Адресс.Район);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.НаселенныйПункт) тогда
		Чтен.ЗаписатьИмяСвойства("locality");
		Чтен.ЗаписатьЗначение(Адресс.НаселенныйПункт);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Корпус) тогда
		Чтен.ЗаписатьИмяСвойства("building");
		Чтен.ЗаписатьЗначение(Адресс.Корпус);
		
	КонецЕсли;
		
	Чтен.ЗаписатьИмяСвойства("region");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("id");
	Чтен.ЗаписатьЗначение(Адресс.КодРегиона);
	Чтен.ЗаписатьКонецОбъекта();
	Если ЗначениеЗаполнено(Адресс.Индекс) тогда
		Чтен.ЗаписатьИмяСвойства("postal_code");
		Чтен.ЗаписатьЗначение(Адресс.Индекс);
	КонецЕсли;
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецОбъекта();

	
	
	Если ЗначениеЗаполнено(Объект.Грузоотправитель) тогда
		Грузоотправитель=Объект.Грузоотправитель;
	Иначе
		Грузоотправитель=Объект.Организация;
		
	КонецЕсли;
	
	
	
	Чтен.ЗаписатьИмяСвойства("consignor");
	
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("id");
	
	
	
	Попытка
		ИД=Число(Грузоотправитель.Ид_ЭДО_ЦРПТ);
	Исключение
		ИД=Грузоотправитель.Ид_ЭДО_ЦРПТ;
	КонецПопытки;
	Чтен.ЗаписатьЗначение(ИД);
	
	Чтен.ЗаписатьИмяСвойства("inn");
	Чтен.ЗаписатьЗначение(Грузоотправитель.ИНН);
//	Чтен.ЗаписатьИмяСвойства("name");
//	Чтен.ЗаписатьЗначение(Грузоотправитель.Наименование);
	Если СтрДлина(Грузоотправитель.ИНН)=12 Тогда
		Наименование=Грузоотправитель.Наименование;
		
		Если Найти(Наименование,"ИП")>0 Тогда
			Наименование=СокрЛП(Сред(Наименование,3));
		КонецЕслИ;
		Наименование_1=Сред(Наименование,1,Найти(Наименование," "));
		Чтен.ЗаписатьИмяСвойства("surname");
		Чтен.ЗаписатьЗначение(Наименование_1);
		
		Наименование=Сред(Наименование,Найти(Наименование," ")+1);
		
		Наименование_1=Сред(Наименование,1,Найти(Наименование," "));
		Чтен.ЗаписатьИмяСвойства("name");
		Чтен.ЗаписатьЗначение(Наименование_1);
		
		Наименование=Сред(Наименование,Найти(Наименование," ")+1);
		Если ЗначениеЗаполнено(Наименование) тогда 
			Чтен.ЗаписатьИмяСвойства("patronymic");
			Чтен.ЗаписатьЗначение(Наименование);
		КонецЕсли;
		
		
	Иначе		
		Чтен.ЗаписатьИмяСвойства("kpp");
		Чтен.ЗаписатьЗначение(Грузоотправитель.КПП);
		
		Чтен.ЗаписатьИмяСвойства("name");
		Чтен.ЗаписатьЗначение(Грузоотправитель.Наименование);
	КонецЕсли;
	Чтен.ЗаписатьИмяСвойства("address");
	
	Чтен.ЗаписатьНачалоОбъекта();
	Адресс=РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("Объект,Тип",Грузоотправитель,Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический));
	Если ЗначениеЗаполнено(Адресс.Город) тогда
		Чтен.ЗаписатьИмяСвойства("city");
		Чтен.ЗаписатьЗначение(Адресс.Город);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Дом) тогда
		Чтен.ЗаписатьИмяСвойства("plot");
		Чтен.ЗаписатьЗначение(Адресс.Дом);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Улица) тогда
		Чтен.ЗаписатьИмяСвойства("street");
		Чтен.ЗаписатьЗначение(Адресс.Улица);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Квартира) тогда
		Чтен.ЗаписатьИмяСвойства("office");
		Чтен.ЗаписатьЗначение(Адресс.Квартира);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Район) тогда
		Чтен.ЗаписатьИмяСвойства("district");
		Чтен.ЗаписатьЗначение(Адресс.Район);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.НаселенныйПункт) тогда
		Чтен.ЗаписатьИмяСвойства("locality");
		Чтен.ЗаписатьЗначение(Адресс.НаселенныйПункт);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Корпус) тогда
		Чтен.ЗаписатьИмяСвойства("building");
		Чтен.ЗаписатьЗначение(Адресс.Корпус);
		
	КонецЕсли;
		
	Чтен.ЗаписатьИмяСвойства("region");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("id");
	Чтен.ЗаписатьЗначение(Адресс.КодРегиона);
	Чтен.ЗаписатьКонецОбъекта();
	
	Если ЗначениеЗаполнено(Адресс.Индекс) тогда
		Чтен.ЗаписатьИмяСвойства("postal_code");
		Чтен.ЗаписатьЗначение(Адресс.Индекс);
	КонецЕсли;
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецОбъекта();

	
	
	
	
	
	Чтен.ЗаписатьИмяСвойства("seller");
	
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("id");
	
	
	Попытка
		ИД=Число(Объект.Организация.Ид_ЭДО_ЦРПТ);
	Исключение
		ИД=Объект.Организация.Ид_ЭДО_ЦРПТ;
	КонецПопытки;
	Чтен.ЗаписатьЗначение(ИД);
	
	
	Чтен.ЗаписатьИмяСвойства("inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
//	Чтен.ЗаписатьИмяСвойства("name");
//	Чтен.ЗаписатьЗначение(Объект.Организация.Наименование);
	Если СтрДлина(Объект.Организация.ИНН)=12 Тогда
		Наименование=Объект.Организация.Наименование;
		
		Если Найти(Наименование,"ИП")>0 Тогда
			Наименование=СокрЛП(Сред(Наименование,3));
		КонецЕслИ;
		Наименование_1=Сред(Наименование,1,Найти(Наименование," "));
		Чтен.ЗаписатьИмяСвойства("surname");
		Чтен.ЗаписатьЗначение(Наименование_1);
		
		Наименование=Сред(Наименование,Найти(Наименование," ")+1);
		
		Наименование_1=Сред(Наименование,1,Найти(Наименование," "));
		Чтен.ЗаписатьИмяСвойства("name");
		Чтен.ЗаписатьЗначение(Наименование_1);
		
		Наименование=Сред(Наименование,Найти(Наименование," ")+1);
		Если ЗначениеЗаполнено(Наименование) тогда 
			Чтен.ЗаписатьИмяСвойства("patronymic");
			Чтен.ЗаписатьЗначение(Наименование);
		КонецЕсли;
		
		
	Иначе		
		Чтен.ЗаписатьИмяСвойства("kpp");
		Чтен.ЗаписатьЗначение(Объект.Организация.КПП);
		
		Чтен.ЗаписатьИмяСвойства("name");
		Чтен.ЗаписатьЗначение(Объект.Организация.Наименование);
	КонецЕсли;
	Чтен.ЗаписатьИмяСвойства("address");
	
	Чтен.ЗаписатьНачалоОбъекта();
	Адресс=РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("Объект,Тип",Объект.Организация,Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический));
	Если ЗначениеЗаполнено(Адресс.Город) тогда
		Чтен.ЗаписатьИмяСвойства("city");
		Чтен.ЗаписатьЗначение(Адресс.Город);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Дом) тогда
		Чтен.ЗаписатьИмяСвойства("plot");
		Чтен.ЗаписатьЗначение(Адресс.Дом);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Улица) тогда
		Чтен.ЗаписатьИмяСвойства("street");
		Чтен.ЗаписатьЗначение(Адресс.Улица);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Квартира) тогда
		Чтен.ЗаписатьИмяСвойства("office");
		Чтен.ЗаписатьЗначение(Адресс.Квартира);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Район) тогда
		Чтен.ЗаписатьИмяСвойства("district");
		Чтен.ЗаписатьЗначение(Адресс.Район);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.НаселенныйПункт) тогда
		Чтен.ЗаписатьИмяСвойства("locality");
		Чтен.ЗаписатьЗначение(Адресс.НаселенныйПункт);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Адресс.Корпус) тогда
		Чтен.ЗаписатьИмяСвойства("building");
		Чтен.ЗаписатьЗначение(Адресс.Корпус);
		
	КонецЕсли;
		
	Чтен.ЗаписатьИмяСвойства("region");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("id");
	Чтен.ЗаписатьЗначение(Адресс.КодРегиона);
	Чтен.ЗаписатьКонецОбъекта();
	
	Если ЗначениеЗаполнено(Адресс.Индекс) тогда
		Чтен.ЗаписатьИмяСвойства("postal_code");
		Чтен.ЗаписатьЗначение(Адресс.Индекс);
	КонецЕсли;
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецОбъекта();
	
		
		
	если ЗначениеЗаполнено(объект.ФакторинговаяКомпания) Тогда	
		
		Грузополучатель=объект.ФакторинговаяКомпания;
		
		Чтен.ЗаписатьИмяСвойства("sv_factor");
		
		Чтен.ЗаписатьНачалоОбъекта();
		
		Чтен.ЗаписатьИмяСвойства("id");
		
		Попытка
			ИД=Число(Грузополучатель.Ид_ЭДО_ЦРПТ);
		Исключение
			ИД=Грузополучатель.Ид_ЭДО_ЦРПТ;
		КонецПопытки;
		Чтен.ЗаписатьЗначение(ИД);
		
		Чтен.ЗаписатьИмяСвойства("inn");
		Чтен.ЗаписатьЗначение(Грузополучатель.ИНН);
		
		Если СтрДлина(Грузополучатель.ИНН)=12 Тогда
			Наименование=Грузополучатель.Наименование;
			
			Если Найти(Наименование,"ИП")>0 Тогда
				Наименование=СокрЛП(Сред(Наименование,3));
			КонецЕслИ;
			Наименование_1=Сред(Наименование,1,Найти(Наименование," "));
			Чтен.ЗаписатьИмяСвойства("surname");
			Чтен.ЗаписатьЗначение(Наименование_1);
			
			Наименование=Сред(Наименование,Найти(Наименование," ")+1);
			
			Наименование_1=Сред(Наименование,1,Найти(Наименование," "));
			Чтен.ЗаписатьИмяСвойства("name");
			Чтен.ЗаписатьЗначение(Наименование_1);
			
			Наименование=Сред(Наименование,Найти(Наименование," ")+1);
			Если ЗначениеЗаполнено(Наименование) тогда 
				Чтен.ЗаписатьИмяСвойства("patronymic");
				Чтен.ЗаписатьЗначение(Наименование);
			КонецЕсли;
			
			
		Иначе		
			Чтен.ЗаписатьИмяСвойства("kpp");
			Чтен.ЗаписатьЗначение(Грузополучатель.КПП);
			
			Чтен.ЗаписатьИмяСвойства("name");
			Чтен.ЗаписатьЗначение(Грузополучатель.Наименование);
		КонецЕсли;
		Чтен.ЗаписатьИмяСвойства("address");
		
		Чтен.ЗаписатьНачалоОбъекта();
		Адресс=РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("Объект,Тип",Грузополучатель,Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический));
		Если ЗначениеЗаполнено(Адресс.Город) тогда
			Чтен.ЗаписатьИмяСвойства("city");
			Чтен.ЗаписатьЗначение(Адресс.Город);
			
		КонецЕсли;
		Если ЗначениеЗаполнено(Адресс.Дом) тогда
			Чтен.ЗаписатьИмяСвойства("plot");
			Чтен.ЗаписатьЗначение(Адресс.Дом);
			
		КонецЕсли;
		Если ЗначениеЗаполнено(Адресс.Улица) тогда
			Чтен.ЗаписатьИмяСвойства("street");
			Чтен.ЗаписатьЗначение(Адресс.Улица);
			
		КонецЕсли;
		Если ЗначениеЗаполнено(Адресс.Квартира) тогда
			Чтен.ЗаписатьИмяСвойства("office");
			Чтен.ЗаписатьЗначение(Адресс.Квартира);
			
		КонецЕсли;
		Если ЗначениеЗаполнено(Адресс.Район) тогда
			Чтен.ЗаписатьИмяСвойства("district");
			Чтен.ЗаписатьЗначение(Адресс.Район);
			
		КонецЕсли;
		Если ЗначениеЗаполнено(Адресс.НаселенныйПункт) тогда
			Чтен.ЗаписатьИмяСвойства("locality");
			Чтен.ЗаписатьЗначение(Адресс.НаселенныйПункт);
			
		КонецЕсли;
		Если ЗначениеЗаполнено(Адресс.Корпус) тогда
			Чтен.ЗаписатьИмяСвойства("building");
			Чтен.ЗаписатьЗначение(Адресс.Корпус);
			
		КонецЕсли;
			
		Чтен.ЗаписатьИмяСвойства("region");
		Чтен.ЗаписатьНачалоОбъекта();
		Чтен.ЗаписатьИмяСвойства("id");
		Чтен.ЗаписатьЗначение(Адресс.КодРегиона);
		Чтен.ЗаписатьКонецОбъекта();
		Если ЗначениеЗаполнено(Адресс.Индекс) тогда
			Чтен.ЗаписатьИмяСвойства("postal_code");
			Чтен.ЗаписатьЗначение(Адресс.Индекс);
		КонецЕсли;
		Чтен.ЗаписатьКонецОбъекта();
		Чтен.ЗаписатьКонецОбъекта();
	КонецЕсли;
	
	Если объект.ОбстоятельстваЗакупокДляГосИМуницНужд Тогда
		
		Чтен.ЗаписатьИмяСвойства("gos_zak");
		Чтен.ЗаписатьНачалоОбъекта();
		
		TimeStamp =  (Объект.ДатаГосКонтракта- Date(1970,1,1) - 3 * 3600);
		
		Чтен.ЗаписатьИмяСвойства("date");
		Чтен.ЗаписатьЗначение(TimeStamp);
		

		Если ЗначениеЗаполнено(объект.НомерГосКонтракта) Тогда	
			Чтен.ЗаписатьИмяСвойства("number");
			Чтен.ЗаписатьЗначение(Объект.НомерГосКонтракта);
		КонецЕсли;
		
		Если ЗначениеЗАполнено(Объект.НомерЛицевогоСчетаПродавца) тогда
			Чтен.ЗаписатьИмяСвойства("seller_account");
			Чтен.ЗаписатьЗначение(Объект.НомерЛицевогоСчетаПродавца);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.КодПоБюджетнойКлассификации) Тогда
			Чтен.ЗаписатьИмяСвойства("seller_code");
			Чтен.ЗаписатьЗначение(Объект.КодПоБюджетнойКлассификации);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.КодЦели) тогда
			Чтен.ЗаписатьИмяСвойства("seller_target_code");
			Чтен.ЗаписатьЗначение(Объект.КодЦели);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.КодТерриториальныйОрганФедерКазначейства) тогда
			Чтен.ЗаписатьИмяСвойства("seller_federal_code");
			Чтен.ЗаписатьЗначение(Объект.КодТерриториальныйОрганФедерКазначейства);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.НаименованиеТерриториальныйОрганФедерКазначейства) тогда
			Чтен.ЗаписатьИмяСвойства("seller_federal_name");
			Чтен.ЗаписатьЗначение(Объект.НаименованиеТерриториальныйОрганФедерКазначейства);
		КонецЕсли;
		
		Чтен.ЗаписатьКонецОбъекта();
	КонецЕсли;
	
	Если Объект.ОснованиеУступкиДенежногоТребования Тогда
		Чтен.ЗаписатьИмяСвойства("money_grounds");
		Чтен.ЗаписатьНачалоОбъекта();
		
		Чтен.ЗаписатьИмяСвойства("title");
		Чтен.ЗаписатьЗначение(Объект.НаименованиеДокумента);
		
		Если ЗначениеЗаполнено(Объект.НомерДокумента) тогда
			Чтен.ЗаписатьИмяСвойства("number");
			Чтен.ЗаписатьЗначение(Объект.НомерДокумента);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ДатаДокумента) тогда
			
			TimeStamp =  (Объект.ДатаДокумента- Date(1970,1,1) - 3 * 3600);
			
			Чтен.ЗаписатьИмяСвойства("date");
			Чтен.ЗаписатьЗначение(TimeStamp);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ДополнительныеСведения) тогда
			Чтен.ЗаписатьИмяСвойства("details");
			Чтен.ЗаписатьЗначение(Объект.ДополнительныеСведения);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ИдентификаторДокумента) тогда
			Чтен.ЗаписатьИмяСвойства("id");
			Чтен.ЗаписатьЗначение(Объект.ИдентификаторДокумента);
		КонецЕсли;
		
		Чтен.ЗаписатьКонецОбъекта();
		
		
	КонецЕслИ;
	
	Если Объект.КПлатежныйДокументам.Количество()>0 Тогда
		Чтен.ЗаписатьИмяСвойства("payment_documents");
		Чтен.ЗаписатьНачалоМассива();
		
		Для Каждого Стр_1 Из Объект.КПлатежныйДокументам Цикл
			Чтен.ЗаписатьНачалоОбъекта();;
			
			Чтен.ЗаписатьИмяСвойства("number");
			Чтен.ЗаписатьЗначение(Стр_1.НомерДокумента);
			
			TimeStamp =  (Стр_1.ДатаДокумента- Date(1970,1,1) - 3 * 3600);
			
			Чтен.ЗаписатьИмяСвойства("date");
			Чтен.ЗаписатьЗначение(TimeStamp);
			
			Если ЗначениеЗаполнено(Стр_1.Сумма) тогда
				Чтен.ЗаписатьИмяСвойства("summ");
				Чтен.ЗаписатьЗначение(Стр_1.Сумма);
				
			КонецЕслИ;
			
			Чтен.ЗаписатьКонецОбъекта();
			
			
		Конеццикла;
		
		Чтен.ЗаписатьКонецМассива();;	
		
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(Объект.ДатаОтгрузкиТовара) 
		ИЛИ ЗначениеЗаполнено(Объект.СведенияОТранспортировкеИГрузе)
		ИЛИ ЗначениеЗАполнено(Объект.СведенияОЛицеПередавшемТовар) 
		ИЛИ ЗначениеЗаполнено(объект.Перевозчик)
		ИЛИ Объект.ОснованиеОтгрузкиТоваров.Количество()>0 
		ИЛИ Объект.ТранспортныеНакладные.Количество()>0 
		Тогда
		Чтен.ЗаписатьИмяСвойства("shipment");
		чтен.ЗаписатьНачалоОбъекта();
		
		
		
	Если Объект.ОснованиеОтгрузкиТоваров.Количество()>0 Тогда
		Чтен.ЗаписатьИмяСвойства("grounds_documents");
		чтен.ЗаписатьНачалоМассива();
		
		
		Для Каждого Стр_1 Из Объект.ОснованиеОтгрузкиТоваров Цикл
			Чтен.ЗаписатьНачалоОбъекта();
			
			Чтен.ЗаписатьИмяСвойства("title");
			Чтен.ЗаписатьЗначение(Стр_1.НаименованиеДокумента);
			
			
			Если ЗначениеЗаполнено(Стр_1.НомерДокумента) Тогда
				Чтен.ЗаписатьИмяСвойства("number");
				Чтен.ЗаписатьЗначение(Стр_1.НомерДокумента);
			КонецЕсли;	
			
			
			Если ЗначениеЗаполнено(Стр_1.ДатаОтгрузки) Тогда
				
				TimeStamp =  (Стр_1.ДатаОтгрузки- Date(1970,1,1) - 3 * 3600);
				
				Чтен.ЗаписатьИмяСвойства("date");
				Чтен.ЗаписатьЗначение(TimeStamp);

			КонецЕсли;
			
			Если ЗначениеЗаполнено(Стр_1.ДополнительыеСведения) Тогда
				Чтен.ЗаписатьИмяСвойства("details");
				Чтен.ЗаписатьЗначение(Стр_1.ДополнительыеСведения);
			КонецЕсли;	
			Если ЗначениеЗаполнено(Стр_1.ИдентификаторДокумента) Тогда
				Чтен.ЗаписатьИмяСвойства("id");
				Чтен.ЗаписатьЗначение(Стр_1.ИдентификаторДокумента);
			КонецЕсли;	
			
			Чтен.ЗаписатьКонецОбъекта();
		Конеццикла;
		
		Чтен.ЗаписатьКонецМассива();
	
		
	КонецЕсли;
	
	
	
		
	
	Если Объект.ТранспортныеНакладные.Количество()>0 Тогда
		Чтен.ЗаписатьИмяСвойства("waybills");
		чтен.ЗаписатьНачалоМассива();
		
		
		Для Каждого Стр_1 Из Объект.ТранспортныеНакладные Цикл
			Чтен.ЗаписатьНачалоОбъекта();
			
			Чтен.ЗаписатьИмяСвойства("number");
			Чтен.ЗаписатьЗначение(Стр_1.НомерДокумента);
			
			TimeStamp =  (Стр_1.ДатаТрансопртнойНакладной- Date(1970,1,1) - 3 * 3600);
			
			Чтен.ЗаписатьИмяСвойства("date");
			Чтен.ЗаписатьЗначение(TimeStamp);

			
			Чтен.ЗаписатьКонецОбъекта();
		Конеццикла;
		
		Чтен.ЗаписатьКонецМассива();
	
		
	КонецЕсли;
	
		
		
			если ЗначениеЗаполнено(объект.Перевозчик) Тогда	
					
					Грузополучатель=объект.Перевозчик;
					
					Чтен.ЗаписатьИмяСвойства("carrier");
					
					Чтен.ЗаписатьНачалоОбъекта();
					
					Чтен.ЗаписатьИмяСвойства("id");
					
					Попытка
						ИД=Число(Грузополучатель.Ид_ЭДО_ЦРПТ);
					Исключение
						ИД=Грузополучатель.Ид_ЭДО_ЦРПТ;
					КонецПопытки;
					Чтен.ЗаписатьЗначение(ИД);
					
					Чтен.ЗаписатьИмяСвойства("inn");
					Чтен.ЗаписатьЗначение(Грузополучатель.ИНН);
					
					Если СтрДлина(Грузополучатель.ИНН)=12 Тогда
						Наименование=Грузополучатель.Наименование;
						
						Если Найти(Наименование,"ИП")>0 Тогда
							Наименование=СокрЛП(Сред(Наименование,3));
						КонецЕслИ;
						Наименование_1=Сред(Наименование,1,Найти(Наименование," "));
						Чтен.ЗаписатьИмяСвойства("surname");
						Чтен.ЗаписатьЗначение(Наименование_1);
						
						Наименование=Сред(Наименование,Найти(Наименование," ")+1);
						
						Наименование_1=Сред(Наименование,1,Найти(Наименование," "));
						Чтен.ЗаписатьИмяСвойства("name");
						Чтен.ЗаписатьЗначение(Наименование_1);
						
						Наименование=Сред(Наименование,Найти(Наименование," ")+1);
						Если ЗначениеЗаполнено(Наименование) тогда 
							Чтен.ЗаписатьИмяСвойства("patronymic");
							Чтен.ЗаписатьЗначение(Наименование);
						КонецЕсли;
						
						
					Иначе		
						Чтен.ЗаписатьИмяСвойства("kpp");
						Чтен.ЗаписатьЗначение(Грузополучатель.КПП);
						
						Чтен.ЗаписатьИмяСвойства("name");
						Чтен.ЗаписатьЗначение(Грузополучатель.Наименование);
					КонецЕсли;
					Чтен.ЗаписатьИмяСвойства("address");
					
					Чтен.ЗаписатьНачалоОбъекта();
					Адресс=РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("Объект,Тип",Грузополучатель,Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический));
					Если ЗначениеЗаполнено(Адресс.Город) тогда
						Чтен.ЗаписатьИмяСвойства("city");
						Чтен.ЗаписатьЗначение(Адресс.Город);
						
					КонецЕсли;
					Если ЗначениеЗаполнено(Адресс.Дом) тогда
						Чтен.ЗаписатьИмяСвойства("plot");
						Чтен.ЗаписатьЗначение(Адресс.Дом);
						
					КонецЕсли;
					Если ЗначениеЗаполнено(Адресс.Улица) тогда
						Чтен.ЗаписатьИмяСвойства("street");
						Чтен.ЗаписатьЗначение(Адресс.Улица);
						
					КонецЕсли;
					Если ЗначениеЗаполнено(Адресс.Квартира) тогда
						Чтен.ЗаписатьИмяСвойства("office");
						Чтен.ЗаписатьЗначение(Адресс.Квартира);
						
					КонецЕсли;
					Если ЗначениеЗаполнено(Адресс.Район) тогда
						Чтен.ЗаписатьИмяСвойства("district");
						Чтен.ЗаписатьЗначение(Адресс.Район);
						
					КонецЕсли;
					Если ЗначениеЗаполнено(Адресс.НаселенныйПункт) тогда
						Чтен.ЗаписатьИмяСвойства("locality");
						Чтен.ЗаписатьЗначение(Адресс.НаселенныйПункт);
						
					КонецЕсли;
					Если ЗначениеЗаполнено(Адресс.Корпус) тогда
						Чтен.ЗаписатьИмяСвойства("building");
						Чтен.ЗаписатьЗначение(Адресс.Корпус);
						
					КонецЕсли;
						
					Чтен.ЗаписатьИмяСвойства("region");
					Чтен.ЗаписатьНачалоОбъекта();
					Чтен.ЗаписатьИмяСвойства("id");
					Чтен.ЗаписатьЗначение(Адресс.КодРегиона);
					Чтен.ЗаписатьКонецОбъекта();
					Если ЗначениеЗаполнено(Адресс.Индекс) тогда
						Чтен.ЗаписатьИмяСвойства("postal_code");
						Чтен.ЗаписатьЗначение(Адресс.Индекс);
					КонецЕсли;
					Чтен.ЗаписатьКонецОбъекта();
					Чтен.ЗаписатьКонецОбъекта();
				КонецЕсли;
				
		
		Если ЗначениеЗаполнено(Объект.ДатаОтгрузкиТовара) тогда
			
			TimeStamp =  (Объект.ДатаОтгрузкиТовара- Date(1970,1,1) - 3 * 3600);
			
			Чтен.ЗаписатьИмяСвойства("date");
			Чтен.ЗаписатьЗначение(TimeStamp);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.СведенияОТранспортировкеИГрузе) тогда
			
			Чтен.ЗаписатьИмяСвойства("carriage_info");
			Чтен.ЗаписатьЗначение(Объект.СведенияОТранспортировкеИГрузе);
			
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.СведенияОЛицеПередавшемТовар) тогда
			Чтен.ЗаписатьИмяСвойства("employee");
			чтен.ЗаписатьНачалоОбъекта();
			
			
			
			
			Фамилия=Сред(Объект.СведенияОЛицеПередавшемТовар,1,Найти(Объект.СведенияОЛицеПередавшемТовар," ")-1);
			Дальше=Сред(Объект.СведенияОЛицеПередавшемТовар,Найти(Объект.СведенияОЛицеПередавшемТовар," ")+1);
			
			Если Найти(Дальше," ")>0 Тогда
				Имя=Сред(Дальше,1,Найти(Дальше," ")-1);
				Отчетство=Сред(Дальше,Найти(Дальше," ")+1);
			Иначе
				Имя=Дальше;
				Отчетство="";
			КонецЕсли;
			
			
			
			Чтен.ЗаписатьИмяСвойства("name");
			Чтен.ЗаписатьЗначение(Имя);
			
			Чтен.ЗаписатьИмяСвойства("surname");
			Чтен.ЗаписатьЗначение(Фамилия);
			
			
			Если ЗначениеЗаполнено(Отчетство) Тогда
				
				Чтен.ЗаписатьИмяСвойства("patronymic");
				Чтен.ЗаписатьЗначение(Отчетство);
				
			КонецЕсли;
			
			Чтен.ЗаписатьИмяСвойства("position");
			Чтен.ЗаписатьЗначение(Объект.ДолжностьПередавшегоТовар);
			
			
			
			Чтен.ЗаписатьКонецОбъекта();
			
			
		КонецЕсли;
		
		
		чтен.ЗаписатьКонецОбъекта();
	КонецЕслИ;
	
	
	Если Объект.ДокументыПодтверждающиеОтгрузку.Количество()>0  Тогда
		Чтен.ЗаписатьИмяСвойства("shipment_confirmation");
		Чтен.ЗаписатьНачалоМассива();
		
		

		Для Каждого Стр_1 Из Объект.ДокументыПодтверждающиеОтгрузку Цикл
			Чтен.ЗаписатьНачалоОбъекта();
			
			Чтен.ЗаписатьИмяСвойства("doc_name");
			Чтен.ЗаписатьЗначение(Стр_1.Наименование);
			
			Чтен.ЗаписатьИмяСвойства("doc_number");
			Чтен.ЗаписатьЗначение(Стр_1.Номер);
			
			TimeStamp =  (Стр_1.Дата- Date(1970,1,1) - 3 * 3600);
			
			Чтен.ЗаписатьИмяСвойства("doc_date");
			Чтен.ЗаписатьЗначение(TimeStamp);

			
			Чтен.ЗаписатьКонецОбъекта();
		Конеццикла;
		
		Чтен.ЗаписатьКонецМассива();
		
	КонецЕсли;
	
	
	Чтен.ЗаписатьИмяСвойства("currency");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("id");
	Чтен.ЗаписатьЗначение("643");
	Чтен.ЗаписатьКонецОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("total_price");
	Чтен.ЗаписатьЗначение(Формат(Объект.СуммаДокумента,"ЧЦ=15; ЧДЦ=2; ЧРД='.'; ЧГ=; ЧН="));
	//Чтен.ЗаписатьЗначение(Формат(Объект.Товары.Итог("НДС"),"ЧЦ=15; ЧДЦ=2; ЧРД='.'; ЧГ=; ЧН="));
	
	Чтен.ЗаписатьИмяСвойства("author");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("name");
	Чтен.ЗаписатьЗначение(Объект.Организация.Наименование+", ИНН: "+Объект.Организация.ИНН);
	Чтен.ЗаписатьКонецОбъекта();
	
	
	
	Если Объект.ТипУточненияУПД=Перечисления.ТипУточненияУПД_ХамелеонЦРПТ.Исправление Тогда
		Чтен.ЗаписатьИмяСвойства("revision");
		Чтен.ЗаписатьНачалоОбъекта();
		
		TimeStamp =  (Объект.Дата- Date(1970,1,1) - 3 * 3600);
		
		Чтен.ЗаписатьИмяСвойства("date");
		Чтен.ЗаписатьЗначение(xmlString(TimeStamp));
		
		Чтен.ЗаписатьИмяСвойства("number");
		Чтен.ЗаписатьЗначение(Объект.НомерИсправления);
		Чтен.ЗаписатьКонецОбъекта();
	КонецЕсли;
	
	
	
	
	
	
	
	
	
	
	
	Чтен.ЗаписатьИмяСвойства("signer");
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("status");
	Чтен.ЗаписатьЗначение(1);
	
	Чтен.ЗаписатьИмяСвойства("grounds");
	Чтен.ЗаписатьЗначение("Должностные обязанности");
	Чтен.ЗаписатьИмяСвойства("authority");
	Чтен.ЗаписатьЗначение(0);
	Чтен.ЗаписатьКонецОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("total_vat_amount");
	Чтен.ЗаписатьЗначение(Формат(Объект.Товары.Итог("НДС"),"ЧЦ=15; ЧДЦ=2; ЧРД='.'; ЧГ=; ЧН="));
	
	Чтен.ЗаписатьИмяСвойства("products");
	Чтен.ЗаписатьНачалоМассива();
	
	Для Каждого Стр_1 Из ОБъект.Товары Цикл
		Чтен.ЗаписатьНачалоОбъекта();
		
		Если ЗначениеЗаполнено(Стр_1.GTIN.Код) Тогда
			Чтен.ЗаписатьИмяСвойства("code");
			Чтен.ЗаписатьЗначение(Стр_1.GTIN.Код);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Стр_1.НаименованиеВУПД) Тогда
			Чтен.ЗаписатьИмяСвойства("name");
			Чтен.ЗаписатьЗначение(Стр_1.НаименованиеВУПД);
		
		ИначеЕсли ЗначениеЗаполнено(Стр_1.GTIN.Наименование) ТОгда
			Чтен.ЗаписатьИмяСвойства("name");
			Чтен.ЗаписатьЗначение(Стр_1.GTIN.Наименование);
		КонецЕсли;
		СуммаПоСтроке=Стр_1.Цена*Стр_1.КоличествоКМ;
		
		Чтен.ЗаписатьИмяСвойства("price");
		Чтен.ЗаписатьЗначение(Формат(СуммаПоСтроке,"ЧЦ=15; ЧДЦ=2; ЧРД='.'; ЧГ=; ЧН="));
		//Чтен.ЗаписатьЗначение(Формат(Объект.Товары.Итог("НДС"),"ЧЦ=15; ЧДЦ=2; ЧРД='.'; ЧГ=; ЧН="));
		
		
		
		Чтен.ЗаписатьИмяСвойства("unit");
		Чтен.ЗаписатьНачалоОбъекта();
		
		Чтен.ЗаписатьИмяСвойства("id");
		Чтен.ЗаписатьЗначение(xmlString(СокрЛП(Стр_1.ЕдиницаИзмерения.Код)));
		
		Чтен.ЗаписатьИмяСвойства("name");
		Чтен.ЗаписатьЗначение(xmlString(Стр_1.ЕдиницаИзмерения.Наименование));
		Чтен.ЗаписатьКонецОбъекта();
		
		Чтен.ЗаписатьИмяСвойства("quantity");
		Чтен.ЗаписатьЗначение(xmlString(Стр_1.КоличествоКМ));
		
		
		СтавкаНДС_1="без НДС";
		Если Стр_1.НДС<>0 Тогда
			Если СуммаПоСтроке-Стр_1.НДС<>0 Тогда
				СтавкаНДС=Стр_1.НДС*100/(СуммаПоСтроке-Стр_1.НДС);
				Если СтавкаНДС<5 Тогда
					СтавкаНДС_1="без НДС";
				ИначеЕсли СтавкаНДС<17 Тогда
					СтавкаНДС_1="10%"
				Иначе
					СтавкаНДС_1="20%"
					
				КонецЕслИ;
			КонецЕсли;
		КонецЕсли;
		
		Чтен.ЗаписатьИмяСвойства("vat_rate");
		Чтен.ЗаписатьЗначение(СтавкаНДС_1);
		
		Чтен.ЗаписатьИмяСвойства("vat_amount");
		Чтен.ЗаписатьЗначение(Формат(Стр_1.НДС,"ЧЦ=15; ЧДЦ=2; ЧРД='.'; ЧГ=; ЧН="));
		
		Чтен.ЗаписатьИмяСвойства("price_per_unit");
		Если Стр_1.КоличествоКМ>0 Тогда
			ЦенаезНДС=Окр(Стр_1.Цена-Стр_1.НДС/Стр_1.КоличествоКМ,2);
			
		Иначе
			ЦенаезНДС=Стр_1.Цена;
		КонецЕслИ;
		Чтен.ЗаписатьЗначение(Формат(ЦенаезНДС,"ЧЦ=15; ЧДЦ=2; ЧРД='.'; ЧГ=; ЧН="));
		
		Чтен.ЗаписатьИмяСвойства("price_without_vat");
		Чтен.ЗаписатьЗначение(Формат(СуммаПоСтроке-Стр_1.НДС,"ЧЦ=15; ЧДЦ=2; ЧРД='.'; ЧГ=; ЧН="));
		
		
		
		
		
		Если ЗначениеЗаполнено(Стр_1.НомерГТД) Тогда
			
				Если Стр_1.НомерГТД.НомераГТДНесколько.Количество()>0 Тогда
					
					Для Каждого СТр_2 ИЗ Стр_1.НомерГТД.НомераГТДНесколько Цикл
						
						КодСтраны=Стр_2.КодСтраны;
						НомерГТД=СокрЛП(Стр_2.НомерГТД);
						
						Чтен.ЗаписатьИмяСвойства("customs_declaration");
						Чтен.ЗаписатьНачалоОбъекта();
						Чтен.ЗаписатьИмяСвойства("country");
						Чтен.ЗаписатьНачалоОбъекта();
						Чтен.ЗаписатьИмяСвойства("id");
						Чтен.ЗаписатьЗначение(xmlString(КодСтраны));
						Чтен.ЗаписатьКонецОбъекта();
						Если ЗначениеЗАполнено(НомерГТД) Тогда
							Чтен.ЗаписатьИмяСвойства("number");
							Чтен.ЗаписатьЗначение(НомерГТД);
						КонецЕсли;
					
						Чтен.ЗаписатьКонецОбъекта();
						
						
					Конеццикла;
				Иначе
						КодСтраны=Стр_1.НомерГТД.наименование;
						НомерГТД=СокрЛП(Стр_1.НомерГТД.Код);
						Если ЗначениеЗаполнено(КодСтраны) ИЛИ ЗначениеЗАполнено(НомерГТД) Тогда
							Чтен.ЗаписатьИмяСвойства("customs_declaration");
							Чтен.ЗаписатьНачалоОбъекта();
							Чтен.ЗаписатьИмяСвойства("country");
							Чтен.ЗаписатьНачалоОбъекта();
							Чтен.ЗаписатьИмяСвойства("id");
							Чтен.ЗаписатьЗначение(xmlString(КодСтраны));
							Чтен.ЗаписатьКонецОбъекта();
							Если ЗначениеЗАполнено(НомерГТД) Тогда
								Чтен.ЗаписатьИмяСвойства("number");
								Чтен.ЗаписатьЗначение(НомерГТД);
							КонецЕсли;
							Чтен.ЗаписатьКонецОбъекта();;
						
							

						КонецЕсли;
	             КонецЕсли;
			
			
		Иначе
					
					
					КодСтраны=Стр_1.GTIN.СтранаПроизводства.Код;
					
					
					
					Если ЗначениеЗаполнено(КодСтраны)
						И КодСтраны<>"643" Тогда
					
						
						
						//Если ЗначениеЗаполнено(КодСтраны) И 
						//	КодСтраны<>"643" Тогда
						Если КодСтраны="112" ИЛИ КодСтраны="051"	
							ИЛИ КодСтраны="398"	Тогда
							
							Чтен.ЗаписатьИмяСвойства("customs_declaration");
							Чтен.ЗаписатьНачалоОбъекта();
							Чтен.ЗаписатьИмяСвойства("country");
							Чтен.ЗаписатьНачалоОбъекта();
							Чтен.ЗаписатьИмяСвойства("id");
							Чтен.ЗаписатьЗначение(xmlString(КодСтраны));
							Чтен.ЗаписатьКонецОбъекта();
							
							Чтен.ЗаписатьКонецОбъекта();;
							
						Иначе
							СтрокиКММ=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
							МассивКМ=Новый СписокЗначений;
							МассивКМ.Очистить();
							Для Каждого Стр_2 Из СтрокиКММ Цикл
								Если МассивКМ.НайтиПоЗначению(Стр_2.СерийныйНомер)=Неопределено Тогда
									МассивКМ.Добавить(Стр_2.СерийныйНомер);
									Нстрок=Объект.ТоварыКМ.НайтИСтроки(Новый Структура("НомерКороба",Стр_2.СерийныйНомер));
									Для Каждого Стр_КМ из Нстрок Цикл
										Если МассивКМ.НайтиПоЗначению(Стр_КМ.cis)=Неопределено Тогда
											МассивКМ.Добавить(Стр_КМ.cis);
											
										КонецЕсли;
										
									Конеццикла;
									
								КонецЕсли;
							Конеццикла;
							
								НомерГТД="";
								Если МассивКМ.Количество()>0 Тогда
										//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
									// Данный фрагмент построен конструктором.
									// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
									
									Запрос = Новый Запрос;
									Запрос.Текст = 
										"ВЫБРАТЬ
										|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.Ссылка,
										|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.Ссылка.НомерДекларацииТовара   КАК НомерДекларацииТовара
										|ИЗ
										|	Документ.ВводВОборот_ХамелеонЦРПТ.СерийныеНомера КАК ВводВОборот_ХамелеонЦРПТСерийныеНомера
										|ГДЕ
										|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.cis В (&СерийныйНомер)
										|
										|УПОРЯДОЧИТЬ ПО
										|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.Ссылка.Дата УБЫВ";
									
									Запрос.УстановитьПараметр("СерийныйНомер",МассивКМ);
									РезультатЗапроса = Запрос.Выполнить();
									
									ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
									
									Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
										// Вставить обработку выборки ВыборкаДетальныеЗаписи
										Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НомерДекларацииТовара) Тогда
											
												НомерГТД=СокрЛП(ВыборкаДетальныеЗаписи.НомерДекларацииТовара);
											Прервать;
											
										КонецЕсли;
									КонецЦикла;
									
									//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

												КонецЕсли;
												
												Если ЗначениеЗАполнено(НомерГТД) Тогда
													
														
													Чтен.ЗаписатьИмяСвойства("customs_declaration");
													Чтен.ЗаписатьНачалоОбъекта();
													Чтен.ЗаписатьИмяСвойства("country");
													Чтен.ЗаписатьНачалоОбъекта();
													Чтен.ЗаписатьИмяСвойства("id");
													Чтен.ЗаписатьЗначение(xmlString(КодСтраны));
													Чтен.ЗаписатьКонецОбъекта();
													
													Чтен.ЗаписатьИмяСвойства("number");
													Чтен.ЗаписатьЗначение(НомерГТД);
													
													Чтен.ЗаписатьКонецОбъекта();;

												Иначе
													//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
													// Данный фрагмент построен конструктором.
													// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
													
													Запрос = Новый Запрос;
													Запрос.Текст = 
														"ВЫБРАТЬ
														|	Приемка_ХамелеонЦРПТТовары.НомерГТД
														|ИЗ
														|	Документ.Приемка_ХамелеонЦРПТ.Товары КАК Приемка_ХамелеонЦРПТТовары
														|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Приемка_ХамелеонЦРПТ.СерийныеНомера КАК Приемка_ХамелеонЦРПТСерийныеНомера
														|		ПО Приемка_ХамелеонЦРПТТовары.НомерСтрокиСвязи = Приемка_ХамелеонЦРПТСерийныеНомера.НомерСтрокиСвязи
														|			И (Приемка_ХамелеонЦРПТСерийныеНомера.cis В (&МассивКМ))
														|
														|ОБЪЕДИНИТЬ ВСЕ
														|
														|ВЫБРАТЬ
														|	Приемка_ХамелеонЦРПТТовары.НомерГТД
														|ИЗ
														|	Документ.Приемка_ХамелеонЦРПТ.Товары КАК Приемка_ХамелеонЦРПТТовары
														|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Приемка_ХамелеонЦРПТ.СерийныеНомера КАК Приемка_ХамелеонЦРПТСерийныеНомера
														|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Приемка_ХамелеонЦРПТ.Короба КАК Приемка_ХамелеонЦРПТКороба
														|			ПО Приемка_ХамелеонЦРПТСерийныеНомера.cis = Приемка_ХамелеонЦРПТКороба.НомерКороба
														|				И (Приемка_ХамелеонЦРПТКороба.ШтрихКод В (&МассивКМ))
														|		ПО Приемка_ХамелеонЦРПТТовары.НомерСтрокиСвязи = Приемка_ХамелеонЦРПТСерийныеНомера.НомерСтрокиСвязи";
													
													Запрос.УстановитьПараметр("МассивКМ", МассивКМ);
													
													РезультатЗапроса = Запрос.Выполнить();
													
													ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
													НашлиНомерГТД=ложь;
											
													Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
														// Вставить обработку выборки ВыборкаДетальныеЗаписи
														НомерГТД=ВыборкаДетальныеЗаписи.НомерГТД;
														Если ЗначениеЗаполнено(НомерГТД) Тогда
															Если НомерГТД.НомераГТДНесколько.Количество()>=1 Тогда
																Для Каждого Стр_НГТД Из НомерГТД.НомераГТДНесколько Цикл
																	Если Не ЗначениеЗаполнено(Стр_НГТД.НомерГТД) И Не Значениезаполнено(Стр_НГТД.КодСтраны) Тогда
																		Продолжить;
																	КонецЕсли;
																	
																	НашлиНомерГТД=Истина;
																	КодСтраны=Стр_НГТД.КодСтраны;
																	НомерГТД=СокрЛП(Стр_НГТД.НомерГТД);
																															
																	Чтен.ЗаписатьИмяСвойства("customs_declaration");
																	Чтен.ЗаписатьНачалоОбъекта();
																	Чтен.ЗаписатьИмяСвойства("country");
																	Чтен.ЗаписатьНачалоОбъекта();
																	Чтен.ЗаписатьИмяСвойства("id");
																	Чтен.ЗаписатьЗначение(xmlString(КодСтраны));
																	Чтен.ЗаписатьКонецОбъекта();
																	
																	Чтен.ЗаписатьИмяСвойства("number");
																	Чтен.ЗаписатьЗначение(НомерГТД);

																												Чтен.ЗаписатьКонецОбъекта();;

																Конеццикла;
															Иначе
																
																НашлиНомерГТД=Истина;
																	КодСтраны=НомерГТД.Наименование;
																	НомерГТД=СокрЛП(НомерГТД.Код);
																															
																	Чтен.ЗаписатьИмяСвойства("customs_declaration");
																	Чтен.ЗаписатьНачалоОбъекта();
																	Чтен.ЗаписатьИмяСвойства("country");
																	Чтен.ЗаписатьНачалоОбъекта();
																	Чтен.ЗаписатьИмяСвойства("id");
																	Чтен.ЗаписатьЗначение(xmlString(КодСтраны));
																	Чтен.ЗаписатьКонецОбъекта();
																	
																	Чтен.ЗаписатьИмяСвойства("number");
																	Чтен.ЗаписатьЗначение(НомерГТД);

																   											Чтен.ЗаписатьКонецОбъекта();;

															КонецЕсли;
															
																												
															
														КонецЕсли;
													КонецЦикла;
													
													//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
													Если Не НашлиНомерГТД Тогда
																												
														Чтен.ЗаписатьИмяСвойства("customs_declaration");
														Чтен.ЗаписатьНачалоОбъекта();
														Чтен.ЗаписатьИмяСвойства("country");
														Чтен.ЗаписатьНачалоОбъекта();
														Чтен.ЗаписатьИмяСвойства("id");
														Чтен.ЗаписатьЗначение(xmlString(КодСтраны));
														Чтен.ЗаписатьКонецОбъекта();
														
																							Чтен.ЗаписатьКонецОбъекта();;

														//Чтен.ЗаписатьИмяСвойства("number");
														//Чтен.ЗаписатьЗначение(НомерГТД);
											

													КонецЕсли;
												
													
													
													
													
												КонецЕсли;
												
										//	КонецЕсли;
								КонецЕсли;			
					КонецЕсли;						
		КонецЕсли;		
								
							Если ЗначениеЗаполнено(Стр_1.GTIN.КодТНВЭД) Тогда
								Чтен.ЗаписатьИмяСвойства("view_code");
								Чтен.ЗаписатьЗначение(Стр_1.GTIN.КодТНВЭД.Код);
							
							КонецЕслИ;		
		
		
		НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
		
		Если  НСтрок.Количество()>0 Тогда
			Чтен.ЗаписатьИмяСвойства("good_identification_numbers");
			Чтен.ЗаписатьНачалоМассива();
			
			Для Каждого Стр_ММ Из НСТрок Цикл
				
				Если СтрДлина(Стр_ММ.cis)=18 Тогда
					Чтен.ЗаписатьНачалоОбъекта();
					
					Чтен.ЗаписатьИмяСвойства("id");
					Чтен.ЗаписатьЗначение(Стр_ММ.cis);
					
					Чтен.ЗаписатьИмяСвойства("pack_num");
					Чтен.ЗаписатьНачалоМассива();
					
					
					//НстрокиКороба=
					
					Чтен.ЗаписатьКонецМассива();	
					Чтен.ЗаписатьКонецОбъекта();
					
				Иначе
					
					Чтен.ЗаписатьНачалоОбъекта();
					Чтен.ЗаписатьИмяСвойства("cis");
					Чтен.ЗаписатьНачалоМассива();
					
					Чтен.ЗаписатьЗначение(Стр_ММ.cis);
					Чтен.ЗаписатьКонецМассива();	
					Чтен.ЗаписатьКонецОбъекта();
					
					
				КонецЕсли;
				
			Конеццикла;
			Чтен.ЗаписатьКонецМассива();	
						
			
			
		Конецесли;
		
		Чтен.ЗаписатьКонецОбъекта();
		
	Конеццикла;
	
	Чтен.ЗаписатьКонецМассива();	
	
	Чтен.ЗаписатьИмяСвойства("total_price_without_vat");
	Чтен.ЗаписатьЗначение(Формат(Объект.СуммаДокумента-Объект.Товары.Итог("НДС"),"ЧЦ=15; ЧДЦ=2; ЧРД='.'; ЧГ=; ЧН=; ЧГ="));
	
	
	Чтен.ЗаписатьИмяСвойства("type");
	если объект.ТипУточненияУПД=Перечисления.ТипУточненияУПД_ХамелеонЦРПТ.Исправление Тогда
		Чтен.ЗаписатьЗначение(804);
	Иначе
		Чтен.ЗаписатьЗначение(504);
	КонецЕсли;

	
	Чтен.ЗаписатьКонецОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("requires_recipient_signature");
	Чтен.ЗаписатьЗначение(Истина);
	
	Чтен.ЗаписатьИмяСвойства("type");
	если объект.ТипУточненияУПД=Перечисления.ТипУточненияУПД_ХамелеонЦРПТ.Исправление Тогда
		Чтен.ЗаписатьЗначение(804);
		Чтен.ЗаписатьИмяСвойства("parent_id");
		Чтен.ЗаписатьЗначение(Объект.Order_ID_УПД);
		
	Иначе
		Чтен.ЗаписатьЗначение(504);
	КонецЕсли;
	
	
	
	
	
	
	
	Чтен.ЗаписатьКонецОбъекта();
	
	Тело=Чтен.Закрыть();
	 	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Тело);
	КонецЕсли;
	
	Возврат Тело;
	
КонецФункции

&НаСервереБезКонтекста
Функция НеобходимоПолучитьИд(Организация,ИНН="",ТестовыйРежим=Ложь)
	ИНН=Организация.ИНН;
	ТестовыйРежим=Константы.РежимРаботыХамелеонЦРПТ.Получить();
	Возврат не ЗначениеЗаполнено(Организация.Ид_ЭДО_ЦРПТ) 
	
КонецФункции

&НаСервереБезКонтекста 
Процедура ЗаписатьИДВКонтрагенты(NNN_1)
	Для Каждого NNN Из NNN_1.items Цикл
			ИНН=NNN.inn;
		Если ЗначениеЗаполнено(ИНН) тогда
				//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		// Данный фрагмент построен конструктором.
		// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Организации_ХамелеонЦРПТ.Ссылка
			|ИЗ
			|	Справочник.Организации_ХамелеонЦРПТ КАК Организации_ХамелеонЦРПТ
			|ГДЕ
			|	Организации_ХамелеонЦРПТ.ИНН = &ИНН
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.Ссылка
			|ИЗ
			|	Справочник.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ КАК ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ
			|ГДЕ
			|	ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.ИНН = &ИНН";
		
		Запрос.УстановитьПараметр("ИНН", ИНН);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
			GGG=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			Попытка
				GGG.Ид_ЭДО_ЦРПТ=xmlString(NNN.id);
			Исключение
			Попытка
				GGG.Ид_ЭДО_ЦРПТ=xmlString(NNN.participant.id);
				
			Исключение
			КонецПопытки;
			КонецПопытки;
			GGG.Записать();
		КонецЦикла;
		
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

			
		КонецЕсли;
		
		
		
	Конеццикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтрпавитьУПД(Команда,УжеОтправили=Ложь) Экспорт
	// Вставить содержимое обработчика.
	
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Если ПроверитьПоКМ()=Ложь Тогда
		Сообщить("Одна из КМ не принадлежит Вам или не введена в оборот!! Документ "+Строка(Объект.Ссылка)+" не отправлен");
		Возврат;
	Конецесли;
	
	Если ЗначениеЗаполнено(объект.Order_ID_УПД) тогда
		Если ЗначениеЗаполнено(Объект.ТипЭДООтправки) И Объект.ТипЭДООтправки<>ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОЛайт") Тогда
			Сообщить("Накладная "+СТрока(Объект.Ссылка)+" отправлена по другой системе: "+Строка(Объект.ТипЭДООтправки));
			Возврат;
		КонецЕсли;
		
		//Если Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Отправлен")
		//	ИЛИ Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Подписан")
		//	ИЛИ ОБъект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Уточнён")
		//	ИЛИ ОБъект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.ЗапросНаУточнениеПросмотренОжидаетсяУточнение")
		//	Тогда
		//Возврат;
		//КонецЕсли;
	КонецЕсли;
	
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
//	Если 
	//	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан") Тогда
//	Иначе
//		Возврат;
//	КонецЕсли;
		// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Thumbprint_1=ПолучитьИзПользователя();	
	Попытка
		Форм=Получитьформу("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
		Форм.ЛицензияОпределить_Просто(Thumbprint_1);
	Исключение
	КонецПопытки;
//		Если ЗначениеЗаполнено(Объект.Order_ID_УПД) тогда
//			
////		СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
////		СРегистра=Неопределено;
////		Если Не ЗначениеЗаполнено(СРегистра) тогда
//	СерийныйНомер="";
//	Попытка
//				СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
//			исключение
//				СРегистра=Неопределено;
//			КонецПопытки;
//		Иначе
СерийныйНомер=Неопределено;
			СРегистра=Неопределено;
			ОтправитьВУПДЧерновик(Команда,СРегистра,СерийныйНомер);
		//КонецЕсли;
//		КонецЕсли;
	
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра) ИЛИ Не ЗначениеЗаполнено(СерийныйНомер) Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	
	
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			ПоказатьПредупреждение(,"Не удалось получить токен по организации");
			Возврат;
		Конецесли;
		
 	Если ОбработкаWEBНаСервере Тогда
		//Если НЕ ЗагрузканаСерверИзЦРПТ(Thumbprint_1,СРегистра,УжеОтправили) Тогда
		//		Если УжеОтправили=Истина Тогда
		//		//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
		//		ЗагрузитьИзЦРПТ(Команда,Истина)			
		//КонецЕсли
		//
		//КонецЕсли;
		//
		
	Иначе
Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;  
		
			
			Если ЗначениеЗаполнено(Объект.ТипУточненияУПД) Тогда
			HTTPЗапрос=Новый HTTPЗапрос("edo-api/outgoing-documents/"+Объект.Order_ID_КорректировачнаяУПД+"/content");
			Иначе
			HTTPЗапрос=Новый HTTPЗапрос("edo-api/outgoing-documents/"+Объект.Order_ID_УПД+"/content");
		КонецЕсли;
		
		
		
		//HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
		
			

		
		HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
		HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
		HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
		HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
		//HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ +"/documents/incoming/list");
		
		
		
		HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");
		
		//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
		HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
		HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
		
		
		
	//	Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
		Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
		"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


		HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
		
		//Тело="documentType=LP_ACCEPT_GOODS_XML";
	//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		//Текст1=Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.ANSI);
		Текст1 = Base64Строка(Ответ.ПолучитьТелоКакДвоичныеДанные());
		
		Подписанный="";
		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,Текст1,Thumbprint_1.Thumbprint_1,Подписанный,ОтправлятьВЭДООткрепленнуюПодпись,Истина);
		
		//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//Подписанный,КодировкаТекста.UTF8,Ложь));
		
					Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
				Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
				Подписанный=СтрЗаменить(Подписанный,"\r\n","");
		
		
	//	Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//	Текст1,КодировкаТекста.UTF8,Ложь));
	//				Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
	//			Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
		//		Добав=СтрЗаменить(Добав,"\r\n","");

		//Тело=Добав;
		
		
		Если ЗначениеЗаполнено(объект.ТипУточненияУПД) Тогда
			HTTPЗапрос=Новый HTTPЗапрос("edo-api/outgoing-documents/"+Объект.Order_ID_КорректировачнаяУПД+"/signature");
		Иначе
			HTTPЗапрос=Новый HTTPЗапрос("edo-api/outgoing-documents/"+Объект.Order_ID_УПД+"/signature");
			
		КонецЕсли;
		
		
		HTTPЗапрос.УстановитьТелоИзСтроки(Подписанный,Кодировкатекста.ANSI);
		
		HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");
//		HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
		
			

		
		HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
		HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
		HTTPЗапрос.Заголовки.Вставить("Content-Encoding","base64");
		HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(стрДлина(Подписанный),"ЧГ="));
		HTTPЗапрос.Заголовки.Вставить("Content-Type","text/plain");
		Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
		"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


		HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
		HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
		HTTPЗапрос.Заголовки.Вставить("Origin","https://"+Thumbprint_1.АдресКАПИ);
		HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ+"/documents/outgoing/list");
		
		
		
		
		
	
		HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
		HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
		HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
		
		
		
		
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку("windows-1251");
		
		
		//Сч=0;
		//Пока Сч<50 Цикл
		//	Сч=сч+1;
		//	HTTPЗапрос=Новый HTTPЗапрос("edo-api/outgoing-documents/unsigned-events");
		//	
		//	
		//	
		//	HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");

		//	
		//	HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
		//	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//	HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
		//	HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
		//	HTTPЗапрос.Заголовки.Вставить("Content-Encoding","base64");
		//	HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(стрДлина(Подписанный),"ЧГ="));
		//	//HTTPЗапрос.Заголовки.Вставить("Content-Type","text/plain");
		//	Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
		//	"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


		//	HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
		//	HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
		//	HTTPЗапрос.Заголовки.Вставить("Origin","https://"+Thumbprint_1.АдресКАПИ);
		//	//HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ+"/documents/outgoing/list");
		//	
		//	
		//	
		//	
		//	
		//
		//	HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
		//	HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
		//	HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
		//	
		//	
		//	
		//	Попытка
		//	
		//		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		//	Исключение
		//	КонецПопытки;
		//	Текст1=Ответ.ПолучитьТелоКакСтроку("windows-1251");
		//	
		//	
		//	
		//	
		//Конеццикла;
		
		Если ЗначениеЗаполнено(Объект.ТипУточненияУПД) Тогда
			HTTPЗапрос=Новый HTTPЗапрос("edo-api/outgoing-documents/"+Объект.Order_ID_КорректировачнаяУПД);
			
		иначе
			HTTPЗапрос=Новый HTTPЗапрос("edo-api/outgoing-documents/"+Объект.Order_ID_УПД);
		КонецЕсли;
	
	
	
	
	
	//HTTPЗапрос.УстановитьТелоИзСтроки(СформироВатьУПД);
//	HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
	HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
	HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
	HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
	HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
	//HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ +"/documents/incoming/list");
	
	
	
	HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");
	
	//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
	HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
	HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
	
	
	
//	Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
	Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
	"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


	HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	
	//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	Если Ответ.КодСостояния=200 Тогда
		Поменятьстатус(Текст1);
	КонецЕсли;
		
		
	//Иначе
	//	Сообщить("Код состояния "+Ответ.КодСостояния);
	//	объект.ОшибкаОтправки=Текст1;
	//	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
	//	Сообщить(Текст1);
	//    КонецЕсли;
	КонецЕслИ;
	Этаформа.Записать();
КонецПроцедуры

Процедура ПоменятьСтатус(Текст1);
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
	
	Объект.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ[NNN.status]
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИДЭДОВЦРПТ(ИНН,СРегистра,Thumbprint_1,HTTPСервисЗапрос,СерийныйНомер)
	HTTPЗапрос=Новый HTTPЗапрос("edo-api/participants/suggestions?query="+ИНН+"&limit=10");
		
		
	//	HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
		HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
		HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
		HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
	//	HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
	//	HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ +"/documents/incoming/list");
		
		
		
		HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");
		
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//	HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
		HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
		HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
		
		
		
	//	Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
		Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
		"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


		HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
		
		//Тело="documentType=LP_ACCEPT_GOODS_XML";
	//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		Попытка
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			ЗаписатьИДВКонтрагенты(NNN);
		Исключение
		КонецПопытки;
		
КонецПроцедуры

Функция ЧерезФайлДелаем(СформироВатьУПД,Boundary,ИмяВр_1,РазмерФайла)
	
		
			ВремФ=ПолучитьИмяВременногоФайла("xml");
				//ФайлЗапроса = Новый Файл(ВремФ);
				
				//Каталог = КаталогВременныхФайлов();
				ИмяВр = ВремФ;
		

				текст=Новый ТекстовыйДокумент;
				текст.ДобавитьСтроку(СформироВатьУПД);
				текст.Записать(ИмяВр,КодировкаТекста.ANSI);
				

	
				ИмяФайлаОтправкиНачало = ПолучитьИмяВременногоФайла("txt");
				
				
			    ФайлОтправкиНачало = Новый ЗаписьТекста(ИмяФайлаОтправкиНачало, КодировкаТекста.ANSI, Символы.ПС, Ложь);

		        Если ЗначениеЗаполнено(объект.Order_ID_УПД) Тогда
					ФайлОтправкиНачало.ЗаписатьСтроку("--" + Boundary); 
					ФайлОтправкиНачало.ЗаписатьСтроку("Content-Disposition: form-data; name=""parent_id"""); 				
					//ФайлОтправкиКонец.ЗаписатьСтроку("Content-Disposition: form-data; name=""parent_id""; filename=""" +"no.txt"+ """"); 				
					////ФайлОтправкиКонец.ЗаписатьСтроку("Content-Type: text/plain"); 				
				    ФайлОтправкиНачало.ЗаписатьСтроку("");
					//ФайлОтправкиНачало.ЗаписатьСтроку(СтрЗаменить(объект.Order_ID_УПД,"-","\u002D"));
					ФайлОтправкиНачало.ЗаписатьСтроку(объект.Order_ID_УПД);
					
					//ФайлОтправкиКонец.ЗаписатьСтроку("--" + Boundary); 
					//ФайлОтправкиКонец.ЗаписатьСтроку("Content-Disposition: form-data; name=""parent_id"""); 				
					//ФайлОтправкиКонец.ЗаписатьСтроку("Content-Disposition: form-data; name=""parent_id""; filename=""" +"no.txt"+ """"); 				
					////ФайлОтправкиКонец.ЗаписатьСтроку("Content-Type: text/plain"); 				
				    //ФайлОтправкиКонец.ЗаписатьСтроку("");
					//ФайлОтправкиКонец.ЗаписатьСтроку(СтрЗаменить(объект.Order_ID_УПД,"-","\u002D"));
				КонецЕсли;
				
				ФайлОтправкиНачало.ЗаписатьСтроку("--" + Boundary); 
				ФайлОтправкиНачало.ЗаписатьСтроку("Content-Disposition: form-data; name=""content""; filename=""" +ИмяВр_1+ """"); 				
				ФайлОтправкиНачало.ЗаписатьСтроку("Content-Type: text/xml"); 				
			    ФайлОтправкиНачало.ЗаписатьСтроку("");
			  	ФайлОтправкиНачало.Закрыть();
				МассивФайловДляОбъединения = Новый Массив;
			    МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиНачало);

			    МассивФайловДляОбъединения.Добавить(ИмяВр);
				
				//Каталог = КаталогВременныхФайлов();
				///ИмяФайла = Строка(Новый УникальныйИдентификатор) + "2.txt";
				//ИмяФайлаОтправкиКонец = Каталог + ИмяФайла;

			    ИмяФайлаОтправкиКонец = ПолучитьИмяВременногоФайла("txt");
			    ФайлОтправкиКонец = Новый ЗаписьТекста(ИмяФайлаОтправкиКонец, КодировкаТекста.ANSI, Символы.ПС, Ложь);
				

			    //Завершение раздела двоичных данных
			    //Завершение сообщения для сервера
				//ФайлОтправкиКонец.ЗаписатьСтроку("");
			    
				//ФайлОтправкиКонец.ЗаписатьСтроку("");
			    ФайлОтправкиКонец.ЗаписатьСтроку("--" + Boundary + "--");
			    ФайлОтправкиКонец.Закрыть();
			    МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиКонец); // !!! 3 добавление в массив
				
				
				ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("tmp");//КаталогВременныхФайлов() + "post.txt";
				
				
			    ОбъединитьФайлы(МассивФайловДляОбъединения, ИмяФайлаОтправки);
				
				ДвоичнД=Новый ДвоичныеДанные(ИмяФайлаОтправки);
				РазмерФайла=ДвоичнД.Размер();
				Возврат ДвоичнД
				
КонецФункции

&НаКлиенте
Процедура ОтправитьВУПДЧерновик(Команда,СРегистра=Неопределено,СерийныйНомер=Неопределено) Экспорт
	// Вставить содержимое обработчика.
	
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	Если ПроверитьПоКМ()=Ложь Тогда
		Сообщить("Одна из КМ не принадлежит Вам или не введена в оборот!! Документ "+Строка(Объект.Ссылка)+" не отправлен");
		Возврат;
	Конецесли;
	
	Этаформа.Записать();
	Если ЗначениеЗаполнено(объект.Order_ID_УПД) тогда
		Если ЗначениеЗаполнено(Объект.ТипЭДООтправки) И Объект.ТипЭДООтправки<>ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОЛайт") Тогда
			Сообщить("Накладная "+СТрока(Объект.Ссылка)+" отправлена по другой системе: "+Строка(Объект.ТипЭДООтправки));
			Возврат;
		КонецЕсли;
		
		//Если Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Отправлен")
		//	ИЛИ Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Подписан")
		///	ИЛИ ОБъект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Уточнён")
			///ИЛИ ОБъект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.ЗапросНаУточнениеПросмотренОжидаетсяУточнение")
		//	Тогда
		//Возврат;
		//КонецЕсли;
	КонецЕсли;
		// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Thumbprint_1=ПолучитьИзПользователя();	
	ОПределитьУпаковки(Thumbprint_1);		
		Попытка
//			ЛицензияОпределить_Просто(Thumbprint_1);
		Исключение
		КонецПопытки;
		
//		СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
//		СРегистра=Неопределено;
//		Если Не ЗначениеЗаполнено(СРегистра) тогда
	СтруктураНастроек=Неопределено;                                                    
	СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра) ИЛИ Не ЗначениеЗаполнено(СерийныйНомер) Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	

//		КонецЕсли;
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			ПоказатьПредупреждение(,"Не удалось получить токен по организации");
			Возврат;
		Конецесли;
		
 	Если ОбработкаWEBНаСервере Тогда
		//Если НЕ ЗагрузканаСерверИзЦРПТ(Thumbprint_1,СРегистра,УжеОтправили) Тогда
		//		Если УжеОтправили=Истина Тогда
		//		//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
		//		ЗагрузитьИзЦРПТ(Команда,Истина)			
		//КонецЕсли
		//
		//КонецЕсли;
		//
		
	Иначе
		
			                                                     
			
//	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/listV2?inputFormat=true&documentType=UNIVERSAL_TRANSFER_DOCUMENT&limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=docDate&pageDir=NEXT");

	ТестовыйРежим=Ложь;
	ПолучитьИд=НеобходимоПолучитьИд(Объект.Организация,,ТестовыйРежим);
	СайтМаркирвки=Thumbprint_1.АдресДляПолученияТокена;
	Если ПолучитьИд Тогда
		
		  ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ЗаписатьИДЭДОВОрганизацию(Thumbprint_1,СайтМаркирвки,Срегистра,СерийныйНомер);
		
	КонецЕслИ;
	
	
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;  

	
	ИНН="";
	ПолучитьИд=НеобходимоПолучитьИд(Объект.Контрагент,ИНН);
	Если ПолучитьИд И ЗначениеЗАполнено(ИНН) Тогда
		ЗаписатьИДЭДОВЦРПТ(ИНН,СРегистра,Thumbprint_1,HTTPСервисЗапрос,СерийныйНомер);
		//ЗаписатьИДВОрганизации(NNN);
	КонецЕслИ;
	
	Если ЗначениеЗаполнено(Объект.Грузоотправитель) Тогда
		ИНН="";
		ПолучитьИд=НеобходимоПолучитьИд(Объект.Грузоотправитель,ИНН);
		Если ПолучитьИд И ЗначениеЗАполнено(ИНН) Тогда
			ЗаписатьИДЭДОВЦРПТ(ИНН,СРегистра,Thumbprint_1,HTTPСервисЗапрос,СерийныйНомер);
			//ЗаписатьИДВОрганизации(NNN);
		КонецЕслИ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Грузополучатель) Тогда
		ИНН="";
		ПолучитьИд=НеобходимоПолучитьИд(Объект.Грузополучатель,ИНН);
		Если ПолучитьИд И ЗначениеЗАполнено(ИНН) Тогда
			ЗаписатьИДЭДОВЦРПТ(ИНН,СРегистра,Thumbprint_1,HTTPСервисЗапрос,СерийныйНомер);
			//ЗаписатьИДВОрганизации(NNN);
		КонецЕслИ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФакторинговаяКомпания) Тогда
		ИНН="";
		ПолучитьИд=НеобходимоПолучитьИд(Объект.ФакторинговаяКомпания,ИНН);
		Если ПолучитьИд И ЗначениеЗАполнено(ИНН) Тогда
			ЗаписатьИДЭДОВЦРПТ(ИНН,СРегистра,Thumbprint_1,HTTPСервисЗапрос,СерийныйНомер);
			//ЗаписатьИДВОрганизации(NNN);
		КонецЕслИ;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Перевозчик) Тогда
		ИНН="";
		ПолучитьИд=НеобходимоПолучитьИд(Объект.Перевозчик,ИНН);
		Если ПолучитьИд И ЗначениеЗАполнено(ИНН) Тогда
			ЗаписатьИДЭДОВЦРПТ(ИНН,СРегистра,Thumbprint_1,HTTPСервисЗапрос,СерийныйНомер);
			//ЗаписатьИДВОрганизации(NNN);
		КонецЕслИ;
	КонецЕсли;
	
	
	
	Если ВыгружатьЭДОЛайтЧерезXML Тогда
		ЭтаФорма.Записать();	
		
		
		ОткрытьФорму_1=Ложь;
		Сообщения=Неопределено;
		
		//СформироВатьУПД=СформироватьУПД();
		СтрокаXML=
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВывестиТабличнД(Объект.Ссылка,ОткрытьФорму_1,Сообщения,ПриПроверкеСхемыПриОтгрузкеЕслиОшибкаНеФормироватьФайл,ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОЛайт"));	
		
		Если ЗначениеЗаполнено(СтрокаXML) Тогда
			//ДанныеФайла = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(СтрокаXML.Текстовыйдо.Получитьтекст(),КодировкаТекста.ANSI);//ДвоичныеДанныеИзСтрокиXML(СтрокаXML.Текстовыйдо.Получитьтекст());
			СформироВатьУПД=СтрокаXML.Текстовыйдо.Получитьтекст();
			//РеквизитыДокумента_1.Вставить("ИмяФайлаЭД",СтрокаXML.ИмяФайла);
			//РеквизитыДокумента_1.Вставить("ИдентификаторЭД",СтрокаXML.ИдР);
		
		Иначе
			
 			Если ОткрытьФорму_1=Истина Тогда
				ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ФормаСообщенийПользователю", Новый Структура("Сообщения", Сообщения));
			КонецЕсли;
			
			
			Сообщить("В документе "+Строка(Объект.Ссылка)+" есть ошибки при формировании");
			Возврат;
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(Объект.ТипУточненияУПД) тогда
			Если Объект.ТипУточненияУПД=ПредопределенноеЗначение("Перечисление.ТипУточненияУПД_ХамелеонЦРПТ.Исправление") Тогда
				Добавка="xml/updi"
			Иначе
				Добавка="xml/ukd"
			КонецЕсли;
			
			
			
				Если ЗначениеЗаполнено(Объект.Order_ID_КорректировачнаяУПД) Тогда
					HTTPЗапрос=Новый HTTPЗапрос("edo-api/outgoing-documents/"+Добавка+"/"+Объект.Order_ID_КорректировачнаяУПД);
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("edo-api/outgoing-documents/"+Добавка);
				КонецЕсли;
		Иначе
				Если ЗначениеЗаполнено(Объект.Order_ID_УПД) Тогда
					HTTPЗапрос=Новый HTTPЗапрос("edo-api/outgoing-documents/"+Объект.Order_ID_УПД);
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("edo-api/outgoing-documents");
				КонецЕсли;
			КонецЕсли;
			    Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
				
				РазмерФайла=0;
				
				
			//КаталогВременныхФ+	
			
			
			
			   ЧереФайл=ЧерезФайлДелаем(СформироВатьУПД,Boundary,СтрокаXML.ИмяФайла,РазмерФайла);
			
				//Тело="--" + Boundary+"
				//|Content-Disposition: form-data; name=""content""; filename="""+СтрокаXML.ИмяФайла+"""
				//|Content-Type: text/xml
				//|
				//|"+СформироВатьУПД+"
				//|--" + Boundary+"--
				//|";
			
			
			
					//#Если ВебКлиент Тогда
			
						HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ЧереФайл);
					//		#Иначе
					//	HTTPЗапрос.УстановитьТелоИзСтроки(,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
					//	#КонецЕсли
						
						//	HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
			HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
			HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
			HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
			//HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ +"/documents/incoming/list");
			
			HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(РазмерФайла,"ЧГ="));
			
			
			//HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");
			
			HTTPЗапрос.Заголовки.Вставить("Content-Type","multipart/form-data; boundary="+Boundary);
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
			HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
			HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
			
			
			
		//	Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
			Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
			"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


			HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
		
		//Тело="documentType=LP_ACCEPT_GOODS_XML";
	//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Если ЗначениеЗаполненО(объект.ТипУточненияУПД) Тогда
			Если ЗначениеЗаполнено(Объект.Order_ID_КорректировачнаяУПД) Тогда
					Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("PUT",HTTPЗапрос);
			Иначе
					Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Объект.Order_ID_УПД) Тогда
					Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("PUT",HTTPЗапрос);
			Иначе
					Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
			КонецЕсли;
		КонецЕсли;
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		Если Ответ.КодСостояния=200 ИЛИ Ответ.КодСостояния=201 Тогда
			
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				
				Если ЗначениеЗаполнено(Объект.ТипУточненияУПД) Тогда
					Объект.Order_ID_КорректировачнаяУПД=NNN.id;
				Иначе	
					Объект.Order_ID_УПД=NNN.id;
				КонецЕсли;
			Объект.УПД=Истина;
			Объект.ТипЭДООтправки=Предопределенноезначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОЛайт");
			ЭтаФорма.Записать();
			
			ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюОбУПДОтгрузка(NNN.id,ТекущийПользователь,HTTPСервисЗапрос,СерийныйНомер,СРегистра,Thumbprint_1,Объект.Ссылка);
			
			
			ЭтаФорма.Прочитать();
			
			
			//Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			//Объект.ОшибкаОтправки="";
			
		Иначе
			Сообщить("Код состояния "+Ответ.КодСостояния);
			объект.ОшибкаОтправки=Текст1;
			Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.ОшибкаДоставки");
			Сообщить(Текст1);
		Этаформа.Записать();	
		    КонецЕсли;
		//КонецЕслИ;
		
		
		
	Иначе
		
		
		СформироВатьУПД=СформироватьУПД();
		
		
		Если ЗначениеЗаполнено(Объект.Order_ID_УПД) И Не ЗначениеЗаполнено(Объект.ТипУточненияУПД) Тогда
			
			HTTPЗапрос=Новый HTTPЗапрос("edo-api/outgoing-documents/"+Объект.Order_ID_УПД);
			
			#Если ВебКлиент Тогда
			
				HTTPЗапрос.УстановитьТелоИзСтроки(СформироВатьУПД,КодировкаТекста.UTF8);
							#Иначе
						HTTPЗапрос.УстановитьТелоИзСтроки(СформироВатьУПД,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
						#КонецЕсли
				//	HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
			HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
			HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
			HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
			//HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ +"/documents/incoming/list");
			                
			
			
			HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");
			
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
			HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
			HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
			
			
			
		//	Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
			Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
			"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


			HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
		
		//Тело="documentType=LP_ACCEPT_GOODS_XML";
	//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
			Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("PUT",HTTPЗапрос);
			
		
		ИначеЕсли ЗначениеЗаполнено(Объект.Order_ID_КорректировачнаяУПД) И ЗначениеЗаполнено(Объект.ТипУточненияУПД) Тогда
			
			HTTPЗапрос=Новый HTTPЗапрос("edo-api/outgoing-documents/"+Объект.Order_ID_КорректировачнаяУПД);
			
			#Если ВебКлиент Тогда
			
				HTTPЗапрос.УстановитьТелоИзСтроки(СформироВатьУПД,КодировкаТекста.UTF8);
							#Иначе
						HTTPЗапрос.УстановитьТелоИзСтроки(СформироВатьУПД,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
						#КонецЕсли
				//	HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
			HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
			HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
			HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
			//HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ +"/documents/incoming/list");
			
			
			
			HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");
			
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
			HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
			HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
			
			
			
		//	Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
			Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
			"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


			HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
		
		//Тело="documentType=LP_ACCEPT_GOODS_XML";
	//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
			Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("PUT",HTTPЗапрос);
			
		
		
		ИначеЕсли 
			///(ЗначениеЗАполнено(Объект.Order_ID_УПД) И Объект.Исправление<>Истина)  ИЛИ (Объект.Исправление=Истина И ЗначениеЗаполнено(Объект.Order_ID_КорректировачнаяУПД)) тогда
			
			Объект.ТипУточненияУПД=ПредопределенноеЗначение("Перечисление.ТипУточненияУПД_ХамелеонЦРПТ.Корректировочная") Тогда
			//Если Объект.Исправление=Истина Тогда
				HTTPЗапрос=Новый HTTPЗапрос("edo-api/outgoing-documents/json/ukd");
				
				//HTTPЗапрос=Новый HTTPЗапрос("edo-api/outgoing-documents/"+Объект.Order_ID_КорректировачнаяУПД);
			//Иначе
			//	HTTPЗапрос=Новый HTTPЗапрос("edo-api/outgoing-documents/"+Объект.Order_ID_УПД);
			//КонецЕсли;
			
			
			
			
			#Если ВебКлиент Тогда
			
						HTTPЗапрос.УстановитьТелоИзСтроки(СформироВатьУПД,КодировкаТекста.UTF8);
							#Иначе
						HTTPЗапрос.УстановитьТелоИзСтроки(СформироВатьУПД,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
						#КонецЕсли
				//	HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
			HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
			HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
			HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
			//HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ +"/documents/incoming/list");
			
			
			
			HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");
			
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
			HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
			HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
			
			
			
		//	Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
			Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
			"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


			HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
		
		//Тело="documentType=LP_ACCEPT_GOODS_XML";
	//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
			Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("POST",HTTPЗапрос);

				Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния=200 ИЛИ Ответ.КодСостояния=201 Тогда
					
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						
					Объект.Order_ID_КорректировачнаяУПД=NNN.id;
					Объект.УПД=Истина;
					Объект.ТипЭДООтправки=Предопределенноезначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОЛайт");
					ЭтаФорма.Записать();
					
					ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюОбУПДОтгрузка(NNN.id,ТекущийПользователь,HTTPСервисЗапрос,СерийныйНомер,СРегистра,Thumbprint_1,Объект.Ссылка);
					
					
					ЭтаФорма.Прочитать();
					
					//Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
					//Объект.ОшибкаОтправки="";
					
				Иначе
					Сообщить("Код состояния "+Ответ.КодСостояния);
					объект.ОшибкаОтправки=Текст1;
					Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.ОшибкаДоставки");
					Сообщить(Текст1);
				Этаформа.Записать();	
			КонецЕсли;
		ИначеЕсли 
			///(ЗначениеЗАполнено(Объект.Order_ID_УПД) И Объект.Исправление<>Истина)  ИЛИ (Объект.Исправление=Истина И ЗначениеЗаполнено(Объект.Order_ID_КорректировачнаяУПД)) тогда
			
			Объект.ТипУточненияУПД=ПредопределенноеЗначение("Перечисление.ТипУточненияУПД_ХамелеонЦРПТ.Исправление") Тогда
			//Если Объект.Исправление=Истина Тогда
				HTTPЗапрос=Новый HTTPЗапрос("edo-api/outgoing-documents/json/updi");
				
				//HTTPЗапрос=Новый HTTPЗапрос("edo-api/outgoing-documents/"+Объект.Order_ID_КорректировачнаяУПД);
			//Иначе
			//	HTTPЗапрос=Новый HTTPЗапрос("edo-api/outgoing-documents/"+Объект.Order_ID_УПД);
			//КонецЕсли;
			
			
			
			
			#Если ВебКлиент Тогда
			
						HTTPЗапрос.УстановитьТелоИзСтроки(СформироВатьУПД,КодировкаТекста.UTF8);
							#Иначе
						HTTPЗапрос.УстановитьТелоИзСтроки(СформироВатьУПД,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
						#КонецЕсли
				//	HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
			HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
			HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
			HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
			//HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ +"/documents/incoming/list");
			
			
			
			HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");
			
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
			HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
			HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
			
			
			
		//	Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
			Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
			"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


			HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
		
		//Тело="documentType=LP_ACCEPT_GOODS_XML";
	//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
			Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("POST",HTTPЗапрос);

				Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния=200 ИЛИ Ответ.КодСостояния=201 Тогда
					
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						
					Объект.Order_ID_КорректировачнаяУПД=NNN.id;
					Объект.УПД=Истина;
					Объект.ТипЭДООтправки=Предопределенноезначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОЛайт");
					ЭтаФорма.Записать();
					
					ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюОбУПДОтгрузка(NNN.id,ТекущийПользователь,HTTPСервисЗапрос,СерийныйНомер,СРегистра,Thumbprint_1,Объект.Ссылка);
					
					
					ЭтаФорма.Прочитать();
					
					//Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
					//Объект.ОшибкаОтправки="";
					
				Иначе
					Сообщить("Код состояния "+Ответ.КодСостояния);
					объект.ОшибкаОтправки=Текст1;
					Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.ОшибкаДоставки");
					Сообщить(Текст1);
				Этаформа.Записать();	
				    КонецЕсли;
		
		Иначе
			HTTPЗапрос=Новый HTTPЗапрос("edo-api/outgoing-documents/json/upd");
			
			
			
			
			
					#Если ВебКлиент Тогда
			
						HTTPЗапрос.УстановитьТелоИзСтроки(СформироВатьУПД,КодировкаТекста.UTF8);
							#Иначе
						HTTPЗапрос.УстановитьТелоИзСтроки(СформироВатьУПД,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
						#КонецЕсли
						
						//	HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
			HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
			HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
			HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
			//HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ +"/documents/incoming/list");
			
			
			
			HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");
			
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
			HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
			HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
			
			
			
		//	Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
			Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
			"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


			HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
		
		//Тело="documentType=LP_ACCEPT_GOODS_XML";
	//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		Если Ответ.КодСостояния=200 ИЛИ Ответ.КодСостояния=201 Тогда
			
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				
				Если ЗначениеЗаполнено(Объект.ТипУточненияУПД) Тогда
					Объект.Order_ID_КорректировачнаяУПД=NNN.id;
				Иначе	
					Объект.Order_ID_УПД=NNN.id;
				КонецЕсли;
			Объект.УПД=Истина;
			Объект.ТипЭДООтправки=Предопределенноезначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОЛайт");
			ЭтаФорма.Записать();
			
			ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюОбУПДОтгрузка(NNN.id,ТекущийПользователь,HTTPСервисЗапрос,СерийныйНомер,СРегистра,Thumbprint_1,Объект.Ссылка);
			
			
			ЭтаФорма.Прочитать();
			
			
			//Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			//Объект.ОшибкаОтправки="";
			
		Иначе
			Сообщить("Код состояния "+Ответ.КодСостояния);
			объект.ОшибкаОтправки=Текст1;
			Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.ОшибкаДоставки");
			Сообщить(Текст1);
		Этаформа.Записать();	
		    КонецЕсли;
		КонецЕслИ;
			КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ИзменитьВидимость();
КонецПроцедуры


&НаСервере
	Функция СоздатьИсправлениеНаСервере()
	// Вставить содержимое обработчика.
	
	Если ЗначениеЗаполнено(Объект.Order_ID_УПД) тогда
		
		Докум=Документы.Отгрузка_ХамелеонЦРПТ.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(Докум,Объект,,"Дата,Номер,СтатусУПД,Статус,ОшибкаОтправки");
		Докум.Дата=Текущаядата();
		Докум.ДатаПервичногоДокумента=Объект.Дата;
		Докум.ПервичныйДокумент=Объект.Ссылка;
		Для Каждого Стр_1 Из Объект.Товары Цикл
			Дбав=Докум.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(Дбав,Стр_1);
		Конеццикла;
		Для Каждого Стр_2 Из Объект.СерийныеНомера цикл
			Добав=Докум.СерийныеНомера.Добавить();
			ЗаполнитьЗначенияСвойств(Добав,Стр_2);
		Конеццикла;
		Докум.НомерИсправления=1;
		
		Докум.ТипУточненияУПД=Перечисления.ТипУточненияУПД_ХамелеонЦРПТ.Корректировочная;
		
		Докум.Записать();
		Возврат докум.Ссылка;
		
	КонецЕсли;
	 Возврат Неопределено;
Конецфункции


&НаКлиенте
Процедура СоздатьИсправление(Команда) Экспорт
	Если ЗначениеЗаполнено(Объект.ТипУточненияУПД) Тогда
		ПоказатьПредупреждение(,"Корректировку создать только по первичному документу");
		Возврат;
	КонецЕсли;

	ОткрытьДокумент=СоздатьИсправлениеНаСервере();
	Если ЗначениеЗаполнено(ОткрытьДокумент) тогда
		ОткрытьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаДокумента"
		,новый Структура("Ключ",ОткрытьДокумент));
		
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьСПринятием(Команда) Экспорт
	// Вставить содержимое обработчика.
	ОтправитьВЦРПТ(Команда);
	Если ЗначениеЗаполнено(Объект._Order_ID) Тогда
		Объект.НадоПрнинять=Истина;
		ЭтаФорма.Записать();
	Конецесли;
КонецПроцедуры


&НаКлиенте
Процедура ВывестиОтчет(Команда)
	// Вставить содержимое обработчика.
	МассивКМ=Новый СписокЗначений;
	Для Каждого Стр Из Элементы.СерийныеНомера.ВыделенныеСтроки Цикл
		Стр_1=Объект.СерийныеНомера.НайтиПоИдентификатору(Стр);
		Если ЗначениеЗаполненО(Стр_1.cis) Тогда
			МассивКМ.Добавить(Стр_1.cis);
		КонецЕсли;
		
	Конеццикла;
	
	Форм=ОткрытьФорму("Отчет.ОтчетПоКМ_ХамелеонЦРПТ.Форма.ФормаОтчета");
	Форм.ПрименитьОтбор(МассивКМ);
	
КонецПроцедуры


&НаКлиенте
Процедура ПодсчитатьПоВыделенным(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	МассивЦИС=Новый массив;
	НаСервереОпределяем_Подсчет(МассивЦИС,Истина);	
	
	
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	
	
	Для Каждого Стр_ц34 Из Элементы.Товары.ВыделенныеСтроки Цикл
		Стр=Объект.Товары.НайтиПоИдентификатору(Стр_ц34);
		//Стр.КоличествоНомеровКМ=0;
		Нстр=ОБъект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		
		Для Каждого Стр_М Из НСТр Цикл
			                               
			Если МассивЦИС.Найти(Стр_М.cis)=Неопределено Тогда
				
				Если Стр_М.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка") Тогда
					
					РекурсияУпаковки(Стр_М,Стр.КоличествоНомеровКМ,Thumbprint_1,СРегистра);
					
					
				Иначе
					Стр.КоличествоНомеровКМ=Стр.КоличествоНомеровКМ+1;
				КонецЕсли;
			КонецЕсли;
			
		КонецциклА;
		
		
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбстоятельстваЗакупокДляГосИМуницНуждПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ИзменитьВидимость()
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеУступкиДенежногоТребованияПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ИзменитьВидимость();
КонецПроцедуры

Процедура МассивГТИН(Массив)
	Массив.Очистить();
	Для Каждого Стр_1 Из Объект.Товары Цикл
		
		Нстр=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
		
		Если Нстр.Количество()>0 Тогда
			Массив.Добавить(
			Новый Структура("GTIN,Марка",
			ОБработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(Стр_1.GTIN.GTIN) ,14,"0"),Нстр[0].cis))
		КонецЕслИ;
		
	Конеццикла;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВсюИнформациюПоФармацевтике(Thumbprint_1,СРегистра,МассивПроудкций)
	subjectIdФармацевтика=вернутьSUB();
	МассивУжеБылоНеИскать=Новый Массив;
	
	
	МассивДляЗапроса=Новый Массив;
	МассивЗапросов.Очистить();
	Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		Если СтрДлина(Стр_1.cis)=18 
			Тогда
	
	//Если МассивДляЗапроса.Количество()>0 Тогда
		
		

			
			
			Страница=0;
			
			Чтение=Новый ЗаписьXML;
			Чтение.УстановитьСтроку("UTF-8");
			Чтение.ЗаписатьОбъявлениеXML();
			Чтение.ЗаписатьНачалоЭлемента("documents");
			Чтение.ЗаписатьАтрибут("version","1.35");
		 	
			Чтение.ЗаписатьНачалоЭлемента("query_hierarchy_info");
			Чтение.ЗаписатьАтрибут("action_id","220");
			
			Чтение.ЗаписатьНачалоЭлемента("subject_id");
			Чтение.ЗаписатьТекст(subjectIdФармацевтика);
			Чтение.ЗаписатьКонецЭлемента();
			
			Чтение.ЗаписатьНачалоЭлемента("sscc");
			Чтение.ЗаписатьТекст(Стр_1.cis);
			Чтение.ЗаписатьКонецЭлемента();
			
			Чтение.ЗаписатьКонецЭлемента();
			Чтение.ЗаписатьКонецЭлемента();
			СформироватьФайлДляОтправки=Чтение.Закрыть();
			
			
			
			
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

				
				Подписанный="";
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
		
			Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
		Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("document");
	Чтен.ЗаписатьЗначение(Добав);
	Чтен.ЗаписатьИмяСвойства("sign");
	Чтен.ЗаписатьЗначение(Подписанный);
	Чтен.ЗаписатьИмяСвойства("request_id");
	Чтен.ЗаписатьЗначение(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВернутьУНИКУМ());
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();
	
				 
				 
		//Тело="{
		//|""doc_type"":""311"",
		//|""document"":"""+Добав+""",
		//|""sign"":"""+Подписанный+""",
		//|""request_id"":"""+ВернутьУНИКУМ()+"
		//|}";
			
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/send");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		
		Если Ответ.КодСостояния=200 Тогда
			
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Добав_Запрос=МассивЗапросов.Добавить();
			Добав_Запрос.ИдЗапроса=NNN.document_id;
			Добав_Запрос.Обработан=Ложь;
			Добав_Запрос.Марка=Стр_1.cis;
			
			//МассивЗапросов.Добавить(Новый );
			
		КонецЕсли;
		
		
	КонецЕсли;
	

	Конеццикла;
	
	Если МассивЗапросов.Количество()>0 Тогда
		
		
		
	
						
					    ОбработаныВсе=Ложь;
					Пока ОбработаныВсе=Ложь Цикл
						ОбработаныВсе=Истина;
								ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
								
								Для Каждого Стр_1_З Из МассивЗапросов Цикл
									Если Стр_1_З.Обработан=Истина Тогда
										Продолжить;
									Конецесли;
									 ОбработаныВсе=Ложь;
								_Order_ID=	Стр_1_З.ИдЗапроса;
								Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
									Прокси=Новый ИнтернетПрокси;
									Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
								
									HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
								Иначе
									HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
								КонецЕсли;
								Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
									HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+_Order_ID+"/ticket");
								Иначе
									HTTPЗапрос=Новый HTTPЗапрос("documents/"+_Order_ID+"/ticket");
									
								Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
									
									HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
									
								КонецЕсли;
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
						//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
						///Константин           
						//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						Текст1=Ответ.ПолучитьТелоКакСтроку();
						//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
					
						
					//	 Попытка				
							 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
								 
								 
								 
								 
								Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
								 
								 
									//ЧтениеJSON = Новый ЧтениеJSON;
									//ЧтениеJSON.УстановитьСтроку(Текст1);
									NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
									
									
									//Сайт="http://"+Thumbprint_1.АдресКАПИ;
									//Сайт_1=СтрЗаменить(NNN.link,Сайт,"");
									//Сайт="https://"+Thumbprint_1.АдресКАПИ;
									//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
									//
									Сайт_1=NNN.link;
									Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
									Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
									
									
									
									
									
												HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
						//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
						///Константин           
						//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						Текст1=Ответ.ПолучитьТелоКакСтроку();
					//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
						
					КонецЕсли;
					Если Не ЗначениеЗаполнено(Текст1) 
						ИЛИ Найти(Текст1,"Ошибка при выполнении операции: запись не найдена")>1
						тогда
									//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
										 
										 Продолжить;
									 КонецЕсли;
									 
									 МассивУп=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.МассивКмОвДляОбработки_Упаковки(Текст1);
									 Если МассивУп.Количество()>0 Тогда
											НСтрП=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1_З.Марка));
											Для Каждого Стр___ Из НСтрП Цикл
												Если Не ЗначениеЗаполнено(Стр___.СерийныйНомер) тогда
													Стр___.СерийныйНомер=МассивУп[0].series_number;
												КонецЕсли;
											Конеццикла;
									КонецЕсли;
										
									 Для Каждого Стр_222 Из МассивУп Цикл
										Если Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Стр_1_З.Марка,Стр_222.НомерКМ)).Количество()=0 Тогда
										 ДДД_Агр=Короба.Добавить();
										 ДДД_Агр.ШтрихКод=Стр_222.НомерКМ;
										 ДДД_Агр.НомерКороба=Стр_1_З.Марка;
										 
										 Ключ=Стр_222.НомерКМ;
										 
										 			Если СтрДлина(Ключ)<>18 Тогда
								
															Если МассивУжеБылоНеИскать.Найти(сред(Ключ,1,14))=Неопределено Тогда
																
																Если МассивПроудкций.Найти(Сред(ключ,1,14))=Неопределено Тогда
																	
																	Продукиця=НеопределенО;
																	Попытка
																		Продукция=ВернутьПродукцию(Сред(ключ,1,14));
																	Исключение
																	КонецПопытки;
																	Если Не ЗначениеЗаполнено(Продукция) Тогда
																		МассивПроудкций.Добавить(Сред(ключ,1,14));
																	КонецЕсли;
																Конецесли;
																МассивУжеБылоНеИскать.Добавить(Сред(Ключ,1,14));
																
															Конецесли;
														Конецесли;

										 
									 КонецЕсли;
									 
										//Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",cis_1,Стр_1.НомерКМ)).Количество()=0 Тогда
										
										//	ДобавК=Объект.Короба.Добавить();
										//	ДобавК.НомерКороба=cis_1;
										//	ДобавК.ШтрихКод=Стр_1.НомерКМ;
										//	БылиУпаковки=Истина;
										//КонецЕсли;
										
										//Строк_1.НомерКМ=ключ;    
										//Если Стр_1.Продолжить=Истина Тогда
										//	РекурсияУпаковки_Лекарства(Строк,Количество,Thumbprint_1,Срегистра,subjectIdФармацевтика)								
										//Иначе
										  //   Количество=Количество+1;
										
										//КонецЕсли;
										 
									Конеццикла;
									
									 Стр_1_З.Обработан=Истина;
									 
									 Продолжить;
									 
								ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
									    	Возврат;					
								ИначеЕсли Ответ.КодСостояния=301 Тогда
									Возврат;
									
								Иначе
								//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
										Продолжить;
								КонецЕсли;
						
								//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
								
					              
						
						
								
								
							Конеццикла;	
							Если ОбработаныВсе=Истина Тогда
								Прервать;
							КонецЕсли;
						Конеццикла;
						

					
					
					
															
		
		
	конецЕсли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ВернутьПродукцию(ГТНИ)
	Попытка
		Возврат Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(ГТНИ));
	Исключение
	КонецПопытки;
	Возврат неопределено
Конецфункции

&НаКлиенте
Процедура РекурсияУпаковки_Лекарства_КМ(СРегистра,Thumbprint_1,cis_1,subjectIdФармацевтика,МассивПроудкций) Экспорт
	
	Если Короба.НайтиСтроки(Новый Структура("НомерКороба",cis_1)).Количество()>0 Тогда
		Возврат;
	КонецЕсли;
					
	
	МассивУжеБылоНеИскать=Новый Массив;
	 НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	 
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
	 
	   
	Если СтрДлина(cis_1)=20 Тогда
		cis_1=Сред(cis_1,3);
	КонецЕслИ;
		Если СтрДлина(cis_1)<>18 Тогда
			Возврат;
		КонецЕсли;
	   Если НаСервере Тогда
		// Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Строк.cis);  
	Иначе
		
		             НомерКМ=cis_1;
		
		               				HTTPЗапрос=Новый HTTPЗапрос("api/v1/reestr/sscc/"+cis_1+"/full-hierarchy");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(31);
													
		    Если Ответ.КодСостояния=200 Тогда
					//	ЗагружаемШаблоныНасервере(Текст1,Форм.Пользователь);
					
					             NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);
								 
			down=Неопределено;
			childs=Неопределено;
			Если NNN.Свойство("down",down) И
				down.Свойство("childs",childs) Тогда
				Для Каждого Стр_childs Из childs Цикл
					ключ=Неопределено;
					Если 
						Стр_childs.Свойство("sgtin",ключ) И ЗначениеЗАполнено(Ключ) Тогда
								//Строк_1.НомерКМ=ключ;                         	
											 
											 
						Если Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",cis_1,Ключ)).Количество()=0 Тогда
						
							ДобавК=Короба.Добавить();
							ДобавК.НомерКороба=cis_1;
							ДобавК.ШтрихКод=Ключ;
							
							Если СтрДлина(Ключ)<>18 Тогда
								
								Если МассивУжеБылоНеИскать.Найти(сред(Ключ,1,14))=Неопределено Тогда
									
									Если МассивПроудкций.Найти(Сред(ключ,1,14))=Неопределено Тогда
										
										Продукиця=НеопределенО;
										Попытка
											Продукция=ВернутьПродукцию(Сред(ключ,1,14));
										Исключение
										КонецПопытки;
										Если Не ЗначениеЗаполнено(Продукция) Тогда
											МассивПроудкций.Добавить(Сред(ключ,1,14));
										КонецЕсли;
									Конецесли;
									МассивУжеБылоНеИскать.Добавить(Сред(Ключ,1,14));
									
								Конецесли;
							Конецесли;
							
							БылиУпаковки=Истина;
						КонецЕсли;
						
						//Строк_1.НомерКМ=ключ;    
						Если СтрДлина(Ключ)=18 Тогда
							РекурсияУпаковки_Лекарства_КМ(СРегистра,Thumbprint_1,Ключ,subjectIdФармацевтика,МассивПроудкций)							
						КонецЕсли;
						 

											
											////Если Стр_С_С["ownerInn"]<>Thumbprint_1.ИНН Тогда
											////	МассивСтруктур.Добавить(Новый Структура("cis,статус",НомерКМ,"КМ принадлежит "+Стр_С_С["ownerInn"]+", "+
											////	Стр_С_С["ownerName"]));
											//Если Стр_С.status="in_realization" Тогда
											//	МассивСтруктур.Добавить(Новый Структура("cis,статус",БылНомерКМ,"Ожидает ответа от клиента по документу "));
											//	//Стр_С_С["lastDocId"]));
											////ИначеЕсли ЗначениеЗаполнено(Стр_С_С["agentInn"]) И Стр_С_С["agentInn"]<>Thumbprint_1.ИНН Тогда
											//	
											////	МассивСтруктур.Добавить(Новый Структура("cis,статус",НомерКМ,"КМ передан на комиссию "+Стр_С_С["agentInn"]+", "+
											////	Стр_С_С["agentName"]));
											//Иначе
											//	МассивСтруктур.Добавить(Новый Структура("cis,статус",БылНомерКМ,Стр_С.status));
											//КонецЕсли;
											//
											//МассивСтруктур.Добавить(Новый Структура("cis,статус",Стр_С.cisInfo.requestedCis,Стр_С.cisInfo.status
											
										КонецЕсли;	
										Конеццикла;

									 
				                 КонецЕсли;
		
		
		
		 	//		Исключение
	//	
				
				
			//Конеццикла;
			
		Иначе
			а=1;
		//Сообщить(Ответ.ПолучитьТелоКакСтроку());	
		КонецЕсли;
	КонецЕсли;
//КонецЕсли;
КонецПроцедуры


Процедура НаСервереПроудкцию()

	Для Каждого Стр_1 Из Объект.ПроверкаПоНомерамКМ Цикл
		Если не ЗначениеЗаполнено(Стр_1.Продукция) Тогда
			Попытка
				Стр_1.Проудкция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Стр_1.GTINНаименованиеТовара));
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	Конеццикла;
	
КонецПроцедуры
Функция СоздатьНайтиGTIN(ГТИН)
	
	Попытка
		Спр_1=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(ГТИН));
	Исключение
		Спр_1=Неопределено
		
	КонецПопытки;
	Если Не ЗначениеЗаполнено(Спр_1) Тогда
		Спр_1=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
			Спр_1.GTIN=ГТИН;
			Спр_1.Наименование=ГТИН;
			Спр_1.НаименованиеТовара=ГТИН;
			Спр_1.Записать();;
		КонецЕсли;
		
	Возврат Спр_1.Ссылка
КонецФункции


&НаСервереБезКонтекста
Процедура ЗаписатьПродукцию(Текст1) Экспорт
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);
	Для Каждого Стр Из NNN.entries Цикл
		СпрПр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(Стр.gtin));
		Если ЗначениеЗАполнено(СпрПр) тогда
			
			Возвращаем=Ложь;
			
			Попытка
				Если Число(СпрПр.GTIN)<>Число(СпрПр.Наименование) тогда
					Возвращаем=Истина;
				Конецесли;
			Исключение
					Возвращаем=Истина;
			КонецПопытки;
			Если 					Возвращаем=Истина Тогда
				
				Возврат
				
			КонецЕсли;

			
			СпрПр=СпрПр.ПолучитьОбъект();
			
			
			
		Иначе
			СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
		КонецЕсли;
		СпрПр.GTIN=Число(Стр.gtin);
		СпрПр.Наименование=Стр.prod_sell_name;
		СпрПр.НаименованиеТовара=Стр.prod_form_name;
		Стр.Свойство("prod_desc",СпрПр.Комментарий);
		Стр.Свойство("reg_number",СпрПр.МодельПроизводителяАртикул);
		стр.Свойство("prod_pack_1_name",СпрПр.БрендТорговаяМарка);
		СпрПр.Изготовитель=Справочники.Изготовители_ХамелеонЦРПТ.НайтиПоНаименованию(Стр.glf_name);
		Если Не ЗначениеЗаполнено(СпрПр.Изготовитель) Тогда
			СпрИзг=Справочники.Изготовители_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрИзг.Наименование=Стр.glf_name;
			СпрИзг.Записать();
			СпрПр.Изготовитель=СпрИзг.Ссылка;
		Конецесли;
		glf_country=Неопределено;
		Если Стр.Свойство("glf_country",glf_country) Тогда
						Если glf_country="РОССИЙСКАЯ ФЕДЕРАЦИЯ" Тогда
							СпрПр.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
						Иначе
							СпрПр.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(glf_country);
						КонецЕсли;	
			//СпрПр.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(glf_country);
		КонецЕсли;
		СпрПр.Записать();
	Конеццикла;
Конецпроцедуры


&НаКлиенте
Процедура ОбновитьИнформациюПоФармац(Thumbprint_1)
	
						
						Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
							Прокси=Новый ИнтернетПрокси;
							Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
						
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
						Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
						КонецЕсли;
					
						
	СРегистра="";
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
	МассивПроудкций=Новый Массив;
						
					ПолучитьВсюИнформациюПоФармацевтике(Thumbprint_1,СРегистра,МассивПроудкций);
					//ЗагрузитьобновитьПроверкуПросту();
					
					//МассивПроудкций=Новый Массив;
					//Для Каждого Стр_1 Из Объект.ПроверкаПоНомерамКМ Цикл
					//	Если не ЗначениеЗАполнено(Стр_1.Продукция) 
					//		И Стр_1.GTINНаименованиеТовара<>"НЕ ПОЛУЧАЛИ" Тогда
					//		МассивПроудкций.Добавить(Стр_1.GTINНаименованиеТовара);
					//	КонецЕсли;
						
					//Конеццикла;
						
					Для Каждого Стр_1 Из МассивПроудкций Цикл
						
						
									Чтен=Новый  ЗаписьJSON;
										Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
										Чтен.ЗаписатьНачалоОбъекта();
										Чтен.ЗаписатьИмяСвойства("start_from");	
										Чтен.ЗаписатьЗначение(0);
										Чтен.ЗаписатьИмяСвойства("count");
										Чтен.ЗаписатьЗначение(10);
										Чтен.ЗаписатьИмяСвойства("filter");
										Чтен.ЗаписатьНачалоОбъекта();
										
										Чтен.ЗаписатьИмяСвойства("gtin");
										Чтен.ЗаписатьЗначение(Стр_1);
										
										
													       Чтен.ЗаписатьКонецОбъекта();
										
										//Чтен.ЗаписатьЗначение("{}");
													       Чтен.ЗаписатьКонецОбъекта();
													
													Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
										Тело=СтрЗаменить(Тело,Символы.ПС,"");
										Тело=СтрЗаменить(Тело,Символы.ВК,"");
										
						
						
								HTTPЗапрос=Новый HTTPЗапрос("api/v1/reestr/med_products/public/filter");
								          HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
								
												//	Иначе
												//	HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.document_id+"");
											/////			
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
												//	КонецЕсли;
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
											HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
											Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
											ЗаписатьПродукцию(Текст1);
											
											
												ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
											
																						
						
											Конеццикла;		
										//	НаСервереПроудкцию();
											
																			
								Если Короба.Количество()>0 Тогда
								//Объект.Товары.Очистить();
									       УДАЛЯЕМСТРОЧКИ=НОВЫЙ МАССИВ;
										   
										   
										   Максимум=0;
										   Для Каждого Стр_Т Из Объект.Товары Цикл
											   
											   Если Максимум<Стр_Т.НомерСтрокиСвязи Тогда
												   Максимум=Стр_Т.НомерСтрокиСвязи;
												  КонецЕсли;
											   
											 Конеццикла;
										   
									Для КаждоГо Добав Из объект.СерийныеНомера Цикл
										
										
										
										Нстроки=Короба.НайтиСтроки(Новый Структура("НомерКороба",Добав.cis));
										ГТИН="00000000000000";
										Если НСтроки.Количество()=0 Тогда
											Если СтрДлина(Добав.cis)>18 Тогда
												ГТИН=ДополнитьСтроку(Сред(Добав.cis,1,14))
											КонецЕсли;
										Иначе
											Для Каждого Стр_11_Н Из НСтроки Цикл
												Если СтрДлина(Стр_11_Н.ШтрихКод)>18 Тогда
													ГТИН=ДополнитьСтроку(Сред(Стр_11_Н.ШтрихКод,1,14));
													Прервать;
												КонецЕсли;
												
											КонецЦикла
											
										КонецЕсли;
										
										//Проудкция=Неопределено;
										Продукция=ПредопределенноеЗначение("Справочник.Продукция_ХамелеонЦРПТ.ПустаяСсылка");
										Если ГТИН<>"00000000000000" Тогда
											Продукция=СоздатьНайтиGTIN(ГТИН);
										КонецЕсли;
											КоличествоКМ=Макс(1,НСтроки.Количество()); 
											Если ЗначениеЗаполнено(Продукция) тогда
												
												
												Если стрДлина(Добав.cis)=18 Тогда
													Упаковка=Истина;
												Иначе
													Упаковка=Ложь;
													
												КонецЕсли;
												
												Добав.Наименованиетовара=Продукция;
												Добав.GTIN=ГТИН;
												

												СтрокаВТоваре=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Добав.НомерСтрокиСвязи))[0];		
												Если ЗначениеЗаполнено(СтрокаВТоваре.GTIN) И СтрокаВТоваре.GTIN<>ПРОДУКЦИЯ ТОГДА
													Нстр=Объект.Товары.НайтиСтроки(Новый Структура("GTIN,УПАКОВКА",Продукция,Истина));
													Если НСтр.Количество()=0 Тогда
														НСтр=Объект.Товары.Вставить(Объект.Товары.Индекс(СтрокаВТоваре));
														НСтр.GTIN=Продукция;
														НСтр.Упаковка=Истина;
														максимум=максимум+1;
														НСтр.НомерСтрокиСвязи=Максимум;
														Добав.НомерСтрокиСвязи=Максимум;
													Иначе
														НСтр=НСтр[0];
													КонецЕсли;
													Если СтрокаВТоваре.КоличествоКМ<=1 Тогда
														Сумма=СтрокаВТоваре.Сумма;
														НДС=СтрокаВТоваре.НДС;
														СтрокаВТоваре.КоличествоКМ=0;
														СтрокаВТоваре.КоличествоНомеровКМ=0;
														НСтр.Сумма=0;
														НСтр.НДС=0;
														УДАЛЯЕМСТРОЧКИ.Добавить(СтрокаВТоваре);
														
													Иначе
														
														
														
														Сумма=Окр(СтрокаВТоваре.Сумма/СтрокаВТоваре.КоличествоКМ,2);
														НДС=Окр(СтрокаВТоваре.НДС/СтрокаВТоваре.КоличествоКМ,2);
														
														СтрокаВТоваре.КоличествоКМ=СтрокаВТоваре.КоличествоКМ-1;
														СтрокаВТоваре.КоличествоНомеровКМ=0;
														СтрокаВТоваре.Сумма=СтрокаВТоваре.Сумма-Сумма;
														СтрокаВтоваре.НДС=СтрокаВТоваре.НДС-НДС;
														
													КонецЕсли;
													НСТр.Сумма=НСтр.Сумма+Сумма;
													НСТР.НДС=НСТр.НДС+ндс;
													
													НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
													НСтр.КоличествоНомеровКМ=0;
													НСтр.Цена=НСтр.Сумма/НСтр.КоличествоКМ;
													Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
													
												ИначеЕсли Не ЗначениеЗаполнено(	СтрокаВТоваре.GTIN) 	 Тогда
													СтрокаВтоваре.GTIN=Продукция
													
												КОНЕЦЕСЛИ;
										КонецЕсли;		
								//				НСтр=Объект.Товары.НайтиСтроки(Новый Структура("GTIN,Упаковка",Продукция,Упаковка));
								//				Если НСтр.Количество()=0 Тогда
								//				
								//					НСТр=Объект.Товары.Добавить();
								//					//Попытка
								//					//	НСТр.НаименованиеТовара=Продукция.Наименование;
								//					//Исключение
								//					//КонецПопытки;
								//					НСтр.Упаковка=Упаковка;
								//					НСТр.GTIN=Продукция;
								//					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
								//				Иначе
								//					НСТР=НСТР[0];
								////					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
								//				КонецЕсли;
								//			//Иначе
								//			//		НСТр=Объект.Товары.Добавить();
								//			//		//НСТр.НаименованиеТовара="";
								//			//		НСТр.GTIN="";
								//			//		НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
								//			КонецЕсли;
								//			
								//			
								////					Добав=Объект.СерийныеНомера.Добавить();
								//					//Добав.КоличествоКМ=КоличествоКМ;
								//					НСТР.КоличествоКМ=НСТР.КоличествоКМ+1;
								//					НСТР.КоличествоНомеровКМ=НСТР.КоличествоНомеровКМ+КоличествоКМ;
								//					
								//					//НСТр.Сумма=НСтр.Сумма+Добав.Цена;
								//					//НСтр.НДС=НСТР.НДС+Добав.НДС;
								//					//НСТр.Цена=НСтр.Сумма/НСтр.КоличествоКМ;
								//					
								//					
								//					Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
								//					//Добав.НаименованиеТовараСтрокой=НСТр.НаименованиеТовара;
								//					Добав.НаименованиеТовара=Продукция;
								//					Если ЗначениеЗаполнено(Продукция)   Тогда
								//						Добав.GTIN=ГТИН;
								//					КонецЕсли;
								//					
								//				Исключение
								//				КонецПопытки;
										
							Конеццикла;
							
							Для Каждого Стр_1 Из  УДАЛЯЕМСТРОЧКИ Цикл
								Объект.Товары.Удалить(Стр_1);
							Конеццикла;
							
								КонецЕсли;
											
					

	
КонецПроцедуры




&НаКлиенте
Процедура ЗакачатьДетальнуюИнформацию_Карточки(Команда)
	// Вставить содержимое обработчика.
	ПоказатьИнформацию(Команда);
	Возврат;
	Массив=Новый Массив;
	МассивГТИН(Массив);	
			Thumbprint_1=ПолучитьИзПользователя();	
					//ИННПоставщика="";
								
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра)  Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	
				Если Не ЗначениеЗаполнено(СРегистра) Тогда
					ПоказатьПредупреждение(,"Не удалось получить токен по организации");
					Возврат;
				Конецесли;
					
	если ИСТИНА ИЛИ ЧислоПараллельныхПотоков=0 Тогда
				

				Для Каждого Стр_11 Из Массив Цикл
				Если Ложь Тогда
					//Если НЕ ЗагрузитьНаСервере(Thumbprint_1,Обр.Организации[0].Организация,УжеОтправили,СРегистра) Тогда
					//	Если УжеОтправили=Истина Тогда
					//	Иначе
					//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
							//Загрузить(Команда,Истина)
					//	КонецЕсли;
				
					//КонецЕсли;
				Иначе
					
					
						Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
							Прокси=Новый ИнтернетПрокси;
							Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
						
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
						Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
						КонецЕсли;
						
			что=Thumbprint_1.что;
							
					HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_11.Марка)+"&pg="+что);;
							
						//ИНН=ВернутьИНН(Обр.Организации[0].Организация );
				///HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_11.Марка));;
				//HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?gtin="+ДополнитьСтроку(Стр_11)+"&limit=100&offset=0");;
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
				Текст1=Ответ.ПолучитьТелоКакСтроку();
				
				числоЗагрузили=0;
				
				Тотал=0;
				БылиУпаковки=Ложь;
				Если Ответ.КодСостояния=200 Тогда
					//ЗагружаемШаблоныНасервере(Текст1,Обр.Пользователь);
					
					
						ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке(Текст1,"",Тотал,числоЗагрузили,Thumbprint_1);
						//НеобходимоА=Ложь;
						//Попытка
						//	Если Число(Стр_11.GTIN)=0  Тогда
						//		НеобходимоА=Истина;
						//	КонецЕсли;
						//	
						//Исключение
						//		НеобходимоА=Истина;
						//КонецПопытки;
						
						//Если НеобходимоА=Истина Тогда
							
							NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
							children="";
							еСЛИ                        NNN.Свойство("children",children) Тогда
								Для Каждого Стр_children Из children Цикл
									ШтрихКод="";
									Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
										Стр_children.Свойство("uit_code",ШтрихКод);
										Если Не ЗначениеЗаполнено(ШтрихКод) тогда
											Стр_children.Свойство("cis",ШтрихКод);
										КонецЕсли;
										
									КонецЕсли;
									Если Не ЗначениеЗаполнено(ШтрихКод) тогда
										Продолжить;
									КонецЕсли;
									uitu_code="";
									NNN.Свойство("uitu_code",uitu_code);
									Если Не ЗначениеЗАполнено(uitu_code) Тогда
										NNN.Свойство("cis",uitu_code);
									КонецЕсли;
									
									
								КонецЦикла;
							//Иначе
							//	КоличествоКМ=КоличествоКМ+1;
							//	НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
							//КонецЕсли;

							
							
						КонецЕсли;
						
				ИначеЕсли Ответ.КодСостояния=401 
					ИЛИ Ответ.КодСостояния=502  
					Тогда
						//Если УжеОтправили=Истина Тогда
							ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
						//Иначе
						//	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
							//Загрузить(Команда,Истина)			
					//КонецЕсли
				КонецЕсли;
			КонецЕсли;
			КонецЦикла;  

			
			


		Иначе
			
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
			СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
		Если Не ЗначениеЗаполнено(СРегистра)  Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
			
			ПолучаемИнформациюнаСервереПоКоробам(Thumbprint_1,СРегистра,Массив,БылиУпаковки);
			
		КонецЕсли;
		

		
	
	Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		Если Стр_1.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка") Тогда
			Если Не ЗначениеЗаполнено(Стр_1.GTIN) Тогда
				Стр_1.GTIN=НайтиГТИН(Стр_1.cis,БылиУпаковки)
			КонецЕсли;
			
		КонецЕслИ;
		
		
	конеццикла;
	
	
	Для Каждого Стр_11 Из Объект.Товары Цикл
		ОповеститьОбИзменении(Стр_11.GTIN);
	Конеццикла;
		
		
		
		
КонецПроцедуры


Функция
				НайтиГТИН(cis,БылиУпаковки)
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМаркиОприходовать.Марка
						|ИЗ
						|	Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Марки КАК СозданиеНовогоШкНаКороба_ХамелеонЦРПТМаркиОприходовать
						|ГДЕ
						|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМаркиОприходовать.Ссылка.НомерКороба = &НомерКороба";
					
					Запрос.УстановитьПараметр("НомерКороба", cis);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						Марка=ВыборкаДетальныеЗаписи.Марка;
						Продукция=НеопределенО;
						Если Стрдлина(Марка)<>18 Тогда
							Попытка
								Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
								Число(Сред(Марка,3,14))); 
							исключение
							Конецпопытки;
							Если ЗначениеЗаполнено(Продукция) тогда
								Возврат Продукция
							КонецЕсли;
						КонецЕсли;
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						//Если СтрДлина(Марка)>18 Тогда
						//	Возврат Сред(Марка,3,14)
						//КонецЕслИ;
											
					КонецЦикла;
					  Возврат Неопределено;
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

				
Конецфункции


Процедура ПолучаемИнформациюнаСервереПоКоробам(Thumbprint_1,Срегистра,Массив,БылиУпаковки)
	
	МассивЗаданий=Новый Массив;
	ИННПоставщика="";
			Для Каждого Стр_11 Из Массив Цикл
				Если Ложь Тогда
					//Если НЕ ЗагрузитьНаСервере(Thumbprint_1,Обр.Организации[0].Организация,УжеОтправили,СРегистра) Тогда
					//	Если УжеОтправили=Истина Тогда
					//	Иначе
					//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
							//Загрузить(Команда,Истина)
					//	КонецЕсли;
				
					//КонецЕсли;
				Иначе
					МассивПараметров = Новый Массив;
					МассивПараметров.Добавить(Стр_11.Марка);
					МассивПараметров.Добавить(Thumbprint_1);
					МассивПараметров.Добавить(СрегиСтра);
					числоЗагрузили=0;
					
					Тотал=0;
					//БылиУпаковки=Ложь;
						
					Попытка
						Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИнформациюСMarked_Products", МассивПараметров);
						//ЗаданияПоСтрокам.Вставить(Задание.УникальныйИдентификатор, СерийныйНомер);
						МассивЗаданий.Добавить(Задание);
						
						Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
							ЗаполнитьИнформациюОПродукцииИУпаковках(МассивЗаданий,Thumbprint_1,БылиУпаковки); 
							МассивЗаданий.Очистить();
						КонецЕсли;
					Исключение
						Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИнформациюСMarked_Products(МассивПараметров[0],МассивПараметров[1],МассивПараметров[2]);
						//Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
						Если ЗначениеЗаполнено(текст) Тогда
							АлгоритмСохраненияКоробовНаСервере(текст,ИННПоставщика,Тотал,числоЗагрузили,Thumbprint_1,БылиУпаковки);
						Конецесли;
							
					КонецПопытки;
					
					
				
				КонецЕсли;
			КонецЦикла;  
			
			Если МассивЗаданий.Количество() >0 Тогда
				ЗаполнитьИнформациюОПродукцииИУпаковках(МассивЗаданий,Thumbprint_1,БылиУпаковки); 
				МассивЗаданий.Очистить();
			КонецЕсли;
			

			
			
	
			
КонецПроцедуры
Процедура АлгоритмСохраненияКоробовНаСервере(Текст1,ИННПоставщика,Тотал,числоЗагрузили,Thumbprint_1,БылиУпаковки)
						//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке(Текст1,ИННПоставщика,Тотал,числоЗагрузили,Thumbprint_1);
					//	НеобходимоА=Ложь;
						//Попытка
						//	Если Число(Стр_11.GTIN)=0  Тогда
						//		НеобходимоА=Истина;
						//	КонецЕсли;
							
						//Исключение
						//		НеобходимоА=Истина;
						//КонецПопытки;
						
						//Если НеобходимоА=Истина Тогда
							
							NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
							children="";
							еСЛИ                        NNN.Свойство("children",children) Тогда
								Для Каждого Стр_children Из children Цикл
									ШтрихКод="";
									Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
										Стр_children.Свойство("uit_code",ШтрихКод);
										Если Не ЗначениеЗаполнено(ШтрихКод) тогда
											Стр_children.Свойство("cis",ШтрихКод);
										КонецЕсли;
										
									КонецЕсли;
									Если Не ЗначениеЗаполнено(ШтрихКод) тогда
										Продолжить;
									КонецЕсли;
									uitu_code="";
									NNN.Свойство("uitu_code",uitu_code);
									Если Не ЗначениеЗАполнено(uitu_code) Тогда
										NNN.Свойство("cis",uitu_code);
									КонецЕсли;
									
									
								КонецЦикла;
							//Иначе
							//	КоличествоКМ=КоличествоКМ+1;
							//	НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
							//КонецЕсли;

						
						
//						shoesD="";
//						Если Данные <> Неопределено И данные.Свойство("shoesData",shoesD) Тогда
//							СерийныйНомер.Статус = shoesD.status;
//						КонецЕсли;
	                 КонецЕсли;
конецПроцедуры


Процедура ЗаполнитьИнформациюОПродукцииИУпаковках(МассивЗаданий,Thumbprint_1,БылиУпаковки)
	Попытка
		ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
	Исключение
	КонецПопытки;
	Для каждого Задание Из МассивЗаданий Цикл
		NNN = Неопределено;
		Для каждого Сообщение Из Задание.ПолучитьСообщенияПользователю() Цикл
			Текст=Сообщение.Текст;
			Если ЗначениеЗаполнено(Текст) Тогда
				NNN= ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если NNN = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		//ТекСтр = ЗаданияПоСтрокам.Получить(Задание.УникальныйИдентификатор);
		//ТекСтр.Статус = Данные.shoesData.status;
	
							children="";
							еСЛИ                        NNN.Свойство("children",children) Тогда
								Для Каждого Стр_children Из children Цикл
									ШтрихКод="";
									Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
										Стр_children.Свойство("uit_code",ШтрихКод);
										Если Не ЗначениеЗаполнено(ШтрихКод) тогда
											Стр_children.Свойство("cis",ШтрихКод);
										КонецЕсли;
										
									КонецЕсли;
									Если Не ЗначениеЗаполнено(ШтрихКод) тогда
										Продолжить;
									КонецЕсли;
									uitu_code="";
									NNN.Свойство("uitu_code",uitu_code);
									Если Не ЗначениеЗАполнено(uitu_code) Тогда
										NNN.Свойство("cis",uitu_code);
									КонецЕсли;
									
									
								КонецЦикла;
							КонецЕсли;
	КонецЦикла;
	МассивЗаданий.Очистить();
								
								
КонецПроцедуры

Функция ПолуитьМассивКМ_Все()
	МассивПродукций=Новый Массив;
	Массивcis=Новый Массив;
	Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		Если СтрДлина(Стр_1.cis)=18 ИЛИ Массивcis.Найти(Сред(Стр_1.cis,3,14))<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		gtin=Сред(Стр_1.cis,3,14);
		Массивcis.Добавить(gtin);
		
		СпрПр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(gtin));
		
		МассивПродукций.Добавить(
		Новый Структура("GTIN,Марка",
		ОБработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(gtin) ,14,"0"),Стр_1.cis))
		
		
	Конеццикла;
	
	
		
	Возврат МассивПродукций;

Конецфункции


Процедура ПолучитьНазванияНаСервереВсе(Thumbprint_1 )
	
	ЧислоПараллельныхПотоков = РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КоличествоЯдерДляГенерацииDataMatrix;
	
	МассивЗаданий = Новый Массив;
	ЗаданияПоСтрокам = Новый Соответствие;
	
	МассивКМ=ПолуитьМассивКМ_Все();

	Для Каждого Стр_1 Из МассивКМ Цикл
		
		
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Стр_1.Марка);
		МассивПараметров.Добавить(Thumbprint_1);
		
		Если ЧислоПараллельныхПотоков=0 Тогда
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				Если Данные <> Неопределено  Тогда
					ЗагрузитьПродукции_JSON(Данные);
				КонецЕсли;
		Иначе
			Попытка
				Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара", МассивПараметров);
				//ЗаданияПоСтрокам.Вставить(Задание.УникальныйИдентификатор);
				МассивЗаданий.Добавить(Задание);
				
				Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
					ЗаполнитьСтатусыСерийныхНомеров_1(МассивЗаданий); 
				КонецЕсли;
			Исключение
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				Если Данные <> Неопределено Тогда
										ЗагрузитьПродукции_JSON(Данные);
;
				КонецЕсли;
					
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если ЧислоПараллельныхПотоков>0 Тогда
		Если МассивЗаданий.Количество() >= 0 Тогда
			ЗаполнитьСтатусыСерийныхНомеров_1( МассивЗаданий); 
		КонецЕсли;
	КонецЕсли;
		
		
	
	//ПодключитьОбработчикОжидания("аа_ОО",1,Истина);
	//ЭтаФорма.Записать();
	//Этаформа.Прочитать();
КонецПроцедуры


Процедура ЗаполнитьСтатусыСерийныхНомеров_1(МассивЗаданий)
	
	Попытка
		ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
	Исключение
	КонецПопытки;
	Для каждого Задание Из МассивЗаданий Цикл
		Данные = Неопределено;
		Для каждого Сообщение Из Задание.ПолучитьСообщенияПользователю() Цикл
			Если ЗначениеЗаполнено(Сообщение.Текст) Тогда
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Сообщение.Текст);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Данные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗагрузитьПродукции_JSON(Данные);
		//ТекСтр = ЗаданияПоСтрокам.Получить(Задание.УникальныйИдентификатор);
		//ТекСтр.Статус = Данные.shoesData.status;
	КонецЦикла;
	МассивЗаданий.Очистить();
	
КонецПроцедуры



&НаКлиенте
Процедура ОбновитьИнформациюПоВсем(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	//ЭтаФорма.Записать();
	
	
	Thumbprint_1 = ПолучитьИзПользователя();;	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;

	
	ПолучитьНазванияНаСервереВсе(Thumbprint_1 );
		

	МассивСтруктур=Новый Массив;
	Для Каждого Стр_1 Из объект.Товары Цикл
		ОповеститьОбИзменении(Стр_1.GTIN);
	КонецЦиклА;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьТаблицаСоответствияКоробовИКМ(Команда)
	// Вставить содержимое обработчика. \
	
	Печать=Новый ТабличныйДокумент;
	
	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
			
		Форм.ПечатьТаблицу(печать,Объект.Ссылка);
	
	Печать.АвтоМасштаб=Истина;
	Печать.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	
	Печать.ИмяПараметровПечати="Печать_Таблица";
	Печать.Показать();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьТаблицаСоответствияПаллетКоробовИКМ(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	Печать=Новый ТабличныйДокумент;
	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
			
			
			
		Форм.ПечатьТаблицу_паллыеты(печать,Объект.Ссылка);
	Печать.АвтоМасштаб=Истина;
	Печать.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	
	Печать.ИмяПараметровПечати="Печать_Таблица";
	Печать.Показать();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВЭДОТХЦ(Команда)
	
	
	Если ЗначениеЗаполнено(объект.Order_ID_УПД) тогда
		Если ЗначениеЗаполнено(Объект.ТипЭДООтправки) И Объект.ТипЭДООтправки<>ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОТакском") Тогда
			Сообщить("Накладная "+СТрока(Объект.Ссылка)+" отправлена по другой системе: "+Строка(Объект.ТипЭДООтправки));
			Возврат;
		КонецЕсли;
		
		//Если 
			
		//	Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Отправлен")
		//	ИЛИ Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Отправлен")
		//	ИЛИ Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Подписан")
		//	ИЛИ ОБъект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Уточнён")
		//	ИЛИ ОБъект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.ЗапросНаУточнениеПросмотренОжидаетсяУточнение")
		//	Тогда
		//Возврат;
		//КонецЕсли;
	КонецЕсли;
	
	Объект.ОшибкаОтправки="";	
	ЭтаФорма.Записать();
		МассивНакладных=Новый Массив;
		МассивНакладных.Добавить(Объект.Ссылка);
	
		ОтправитьВЭДОТХЦ_Массив(МассивНакладных);
		ЭтаФорма.Прочитать();
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьИдентификатор(орг)
	Возврат орг.Организация.Ид_ЭДО
Конецфункции



&НаКлиенте
Процедура ОтправитьВЭДОТХЦ_Массив(МассивНакладных) Экспорт
	
	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Если НЕ Форм.Открыта() Тогда
		Форм.Открыть();
	КонецЕсли;
	
	Thumbprint_1=ПолучитьИзПользователя();	
	
	СайтДляПодключенияПоТакскму=Thumbprint_1.ТХЦ;
	
	
	Результат="";
	Организация=Неопределено;
	Попытка
		Компонента = Новый COMОбъект("CryptoAX.Encryptor");
	Исключение
		
		ОткрытьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаГиперссылка");
		Возврат;
		//Сообщить("Необходимо проверить доступ к ЛК ");
		
	КонецПопытки;
	Для Каждого Стр_1 Из МассивНакладных Цикл
		//		ТипЭДООтправки=ТипЭДООтправки(Стр_1);

		
		Форма1=ПолучитЬФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаДокумента",
		Новый Структура("Ключ",Стр_1));
		
		Если ЗначениеЗаполнено(Форма1.Объект.ТипЭДООтправки) И Форма1.Объект.ТипЭДООтправки<>ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОТакском") Тогда
			Сообщить("Накладная "+СТрока(Стр_1.Ссылка)+" отправлена по другой системе: "+Строка(Форма1.Объект.ТипЭДООтправки));
			Возврат;
		КонецЕсли;
		
		Если Форма1.ПроверитьПоКМ()=Ложь Тогда
			Сообщить("Одна из КМ не принадлежит Вам или не введена в оборот!! Документ "+Строка(Форма1.Объект.Ссылка)+" не отправлен");
			Продолжить;
		Конецесли;
		Форма1.ОПределитьУпаковки(Thumbprint_1);
		
		
		
		Форма1.Записать();
		
		
		
		
		РеквизитыДокумента_1=Новый Структура;
		ОткрытьФорму_1=Ложь;
		Сообщения=Неопределено;
		
		
		СтрокаXML =
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВывестиТабличнД(Стр_1,ОткрытьФорму_1,Сообщения,ПриПроверкеСхемыПриОтгрузкеЕслиОшибкаНеФормироватьФайл,ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОТакском"));	
		
		Если ЗначениеЗаполнено(СтрокаXML) Тогда
			ДанныеФайла = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(СтрокаXML.Текстовыйдо.Получитьтекст(),КодировкаТекста.ANSI);//ДвоичныеДанныеИзСтрокиXML(СтрокаXML.Текстовыйдо.Получитьтекст());
			
			РеквизитыДокумента_1.Вставить("ИмяФайлаЭД",СтрокаXML.ИмяФайла);
			РеквизитыДокумента_1.Вставить("ИдентификаторЭД",СтрокаXML.ИдР);
		
		Иначе
			Сообщить("В документе "+Строка(Стр_1)+" есть ошибки при формировании");
			Продолжить
		КонецЕсли;
		
		Отказ=Ложь;
		

	
	Подписанный=Компонента.MrSign(base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(СтрокаXML.Текстовыйдо.Получитьтекст(),КодировкаТекста.ANSI,Ложь)),
	Thumbprint_1.Thumbprint_1);
		ИдентификаторЭД=РеквизитыДокумента_1.ИдентификаторЭД;
		
		ПакетЭДО=СформироватьПервичныйПакетЭДО(РеквизитыДокумента_1,Отказ,ДанныеФайла,Стр_1,Подписанный,ИдентификаторЭД);
	//	ПакетЭДО=СформироватьПервичныйПакетЭДО(РеквизитыДокумента_1,Отказ,ДанныеФайла,Стр_1,ДанныеПодписи ,ИдентификаторЭД);
	
		     Идентификатор=ПолучитьИдентификатор(Стр_1);
		//Если Организация<>Идентификатор Тогда
		
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
						
				HTTPСервисЗапрос=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
						
				HTTPСервисЗапрос=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;

			Результат=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОТХЦ(Thumbprint_1,Идентификатор,HTTPСервисЗапрос);
			Если Не ЗначениеЗаполнено(Результат) Тогда
				Продолжить;
			КонецЕсли;
			Организация=Идентификатор;
		//КонецЕсли;
	
	
		Если  ПакетЭДО<>Неопределено Тогда
			
			ТранзакцияДоклайнз="Invoice";

			ИмяПакета = ТранзакцияДоклайнз
											+ "_" + ИдентификаторЭД;
		
			АдресРесурса = "API/SendMessage/" + ИмяПакета;
			
			Запрос = Новый HTTPЗапрос;
			Запрос.АдресРесурса = АдресРесурса;
				Запрос.Заголовки.Вставить("Integrator-Id", "Kartoteka_9AFE5408-C930-47FA-9CE4-FAE615EED09E");
				Запрос.Заголовки.Вставить("Assistant-Key", Результат);
			 
				Запрос.УстановитьТелоИзДвоичныхДанных(ПакетЭДО);
			Попытка 
				Ответ = HTTPСервисЗапрос.ОтправитьДляОбработки(Запрос);
			Исключение
		//		ПараметрыСоединения.СоединениеУстановлено = Ложь;
				Инфо = ИнформацияОбОшибке();
			   Сообщить("Описание='" + Инфо.Описание + "'");
			    Сообщить("ИмяМодуля='" + Инфо.ИмяМодуля + "'");
			    Сообщить("НомерСтроки=" + Инфо.НомерСтроки);
			    Сообщить("ИсходнаяСтрока='" + Инфо.ИсходнаяСтрока + "'");
				
				Возврат
			КонецПопытки;		
		//	
			Если Ответ.КодСостояния <> 200 Тогда
		//		ПараметрыСоединения.СоединениеУстановлено = Ложь;
				Если Ответ.КодСостояния > 500 Тогда
		//			ПараметрыСоединения.ОбновлятьАвтоматически = Ложь;
	КонецЕсли;
	ОтветПол=Ответ.ПолучитьТелоКакСтроку("UTF-8");
	Если Найти(ОтветПол,"Абоненту запрещен доступ к Web API")>0 Тогда
		Сообщить("Обратитесь в ТХЦ(privl@taxcom.ru) с просьбой предоставить(включить) доступ к АПИ для ИНН(указать)");
	КонецЕсли;
				Сообщить(ОтветПол);
				Возврат;
			КонецЕсли;
			
			
			ЗаписатьСтатусЧерновикВНакладную(Стр_1,ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Черновик"),ИдентификаторЭД,РеквизитыДокумента_1.ИмяФайлаЭД);
			
			
		//	
		//	
		//	
		КонецЕсли;
		
	Конеццикла;
	
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ЗаписатьСтатусЧерновикВНакладную(Стр_1,Статус,ИдентификаторЭД,ИмяФайлаЭД)
	
	ПолучОб=Стр_1.ПолучитьОбъект();
	ПолучОб.СтатусУПД=Статус;
	ПолучОб.Order_ID_УПД=ИдентификаторЭД;
	ПолучОб.ТипЭДООтправки=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОТакском;
	ПолучОб.ИмяФайлаЭД=ИмяФайлаЭД;
	ПолучОб.Записать();
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция СформироватьПервичныйПакетЭДО(РеквизитыДокумента_1, Отказ,ДвоичныеДанныеДокумента,Стр_1,Подписанный,ИдентификаторЭД) Экспорт
	
	//РеквизитыДокумента = Структура.ИнформацияОДокументе;
	//ДвоичныеДанныеДокумента = Структура.ДвоичныеДанныеДокумента;
	
	ДвоичныеДанныеАрхива=Неопределено;
	//НачатьТранзакцию();
	
	//Если ЗначениеЗаполнено(Стр_1.Order_ID_УПД) Тогда	
//		ИдентификаторЭД=xmlString(Новый УникальныйИдентификатоР());
	//Иначе
	//	ИдентификаторЭД=xmlString(Стр_1.Ссылка.УникальныйИдентификатор());
		
	//КонецЕсли;
	КаталогКонтейнера = КаталогВременныхФайлов()+xmlString(ИдентификаторЭД)+"\";
	
	Попытка
		ПакетЭДО = Новый Структура("ИдентификаторОтправителя, ИдентификаторПолучателя, ИдентификаторДокументооборота");
		
		//ПакетЭДО.ИдентификаторОтправителя = ВРЕГ(РеквизитыДокумента.Организация.ИД_ЭДО);
		//ПакетЭДО.ИдентификаторПолучателя = РеквизитыДокумента.Контрагент.ИД_ЭДО;
		//ПакетЭДО.ИдентификаторДокументооборота = РеквизитыДокумента.ИдентификаторЭД;
		
		ТипДокумента = "ExpInvoiceAndPrimaryAccountingDocumentVendor";
				
		ПроверитьСоздатьКаталог(КаталогКонтейнера);
		//
		СформироватьФайлCard(
			КаталогКонтейнера,Стр_1,ИдентификаторЭД
			//РеквизитыДокумента,
			//ТипДокумента,
			//ТребуетсяПодписьПолучателя,
			//Истина
			);
		//	
		СформироватьФайлMeta(
			КаталогКонтейнера,Стр_1,ИдентификаторЭД,РеквизитыДокумента_1
		//	РегламентДоклайнз,
		//	ТранзакцияДоклайнз,
		//	ПакетЭДО.ИдентификаторДокументооборота,
		//	РеквизитыФайла
		);
		//	
		ДвоичныеДанныеДокумента.Записать(КаталогКонтейнера + РеквизитыДокумента_1.ИмяФайлаЭД);
		
		//ДвоичныеДанныеДокумента=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Подписанный);
		ДвоичныеДанныеДокумента=base64Значение(Подписанный);
		ДвоичныеДанныеДокумента.Записать(КаталогКонтейнера + Сред(РеквизитыДокумента_1.ИмяФайлаЭД,1,СтрДлина(РеквизитыДокумента_1.ИмяФайлаЭД)-4)+"-1.p7s");
		//Подписанный.Записать(КаталогКонтейнера + Сред(РеквизитыДокумента_1.ИмяФайлаЭД,1,СтрДлина(РеквизитыДокумента_1.ИмяФайлаЭД)-4)+"-1.p7s");
		
		//ПорядковыйНомер = 1;
		//Для Каждого ДанныеПодписи Из РеквизитыФайла.ЭлектронныеПодписи Цикл
		//	ДанныеПодписи.Записать(
		//		КаталогКонтейнера + РеквизитыФайла.ПолноеНаименование + "-" + ПорядковыйНомер + ".p7s");
		//	ПорядковыйНомер = ПорядковыйНомер + 1;
		//КонецЦикла;
		//
		ТранзакцияДоклайнз="Invoice";
		ИмяФайлаАрхива = ТранзакцияДоклайнз + "_" + ИдентификаторЭД+ ".zip";
		ЗаписьZip = Новый ЗаписьZipФайла(КаталогКонтейнера + ИмяФайлаАрхива);
		ЗаписьZip.Добавить(КаталогКонтейнера, РежимСохраненияПутейZIP.НеСохранятьПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
		ЗаписьZip.Записать();
		//
		ДвоичныеДанныеАрхива = Новый ДвоичныеДанные(КаталогКонтейнера + ИмяФайлаАрхива);
		УдалитьФайлы(КаталогКонтейнера);
		
		
		
		
	Исключение
		УдалитьФайлы(КаталогКонтейнера);
		Отказ=Истина;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат  ДвоичныеДанныеАрхива;
	
КонецФункции


&НаСервереБезконтекста
Процедура СформироватьФайлCard(
	КаталогКонтейнера,Стр_1,Ид
	//РеквизитыДокумента, 
	//ТипДокумента = Неопределено, 
	//ТребуетсяОтветнаяПодпись = Неопределено, 
	//ЭтоПервичныйДокумент = Ложь, 
	//ЭтоИзвещениеДляОператораЭДО = Ложь
	)
	
	
	//XML_DOM=Новый ЗаписьXML;
	
	//XML_DOM.УстановитьСтроку("windows-1251");
	Чтение=Новый ЗаписьXML;
	Чтение.ОткрытьФайл(КаталогКонтейнера + "card.xml","windows-1251");
	//Чтение.УстановитьСтроку("windows-1251");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("Card");
	Чтение.ЗаписатьАтрибут("xmlns","http://api-invoice.taxcom.ru/card");
	Чтение.ЗаписатьАтрибут("xmlns:xs","http://www.w3.org/2001/XMLSchema");
	Чтение.ЗаписатьАтрибут("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
	
	Чтение.ЗаписатьНачалоЭлемента("Identifiers");
	Чтение.ЗаписатьАтрибут("ExternalIdentifier",Ид);
	Чтение.ЗаписатьКонецЭлемента();
	
	
	
	Чтение.ЗаписатьНачалоЭлемента("Type");
	Чтение.ЗаписатьАтрибут("Name","ExpInvoiceAndPrimaryAccountingDocumentVendor");
	Чтение.ЗаписатьАтрибут("ResignRequired","true");
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("Description");
	Чтение.ЗаписатьАтрибут("Title","Отгрузка Хамелеон ЦРПТ");
	Чтение.ЗаписатьАтрибут("Date",Формат(Стр_1.Дата,"ДФ=""гггг-ММ-дд ЧЧ:мм:сс"""));
	
	Чтение.ЗаписатьНачалоЭлемента("AdditionalData");
	
	Чтение.ЗаписатьНачалоЭлемента("AdditionalParameter");
	Чтение.ЗаписатьАтрибут("Name","Номер");
	Чтение.ЗаписатьАтрибут("Value",Стр_1.Номер);
	Чтение.ЗаписатьКонецЭлемента();
	
	
	
	Чтение.ЗаписатьНачалоЭлемента("AdditionalParameter");
	Чтение.ЗаписатьАтрибут("Name","DocumentType");
	Чтение.ЗаписатьАтрибут("Value","ExpInvoiceAndPrimaryAccountingDocumentVendor");
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Чтение.ЗаписатьНачалоЭлемента("AdditionalParameter");
	Чтение.ЗаписатьАтрибут("Name","Сумма");
	Чтение.ЗаписатьАтрибут("Value",xmlString(Стр_1.СуммаДокумента));
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Чтение.ЗаписатьКонецЭлемента();

	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("Sender");
	Чтение.ЗаписатьНачалоЭлемента("Abonent");
	Чтение.ЗаписатьАтрибут("Id",Стр_1.Организация.ИД_ЭДО);
	Чтение.ЗаписатьАтрибут("Name",Стр_1.Организация.Наименование);
	Чтение.ЗаписатьАтрибут("Inn",Стр_1.Организация.ИНН);
	Если ЗначениеЗаполнено(Стр_1.Организация.КПП) Тогда
		Чтение.ЗаписатьАтрибут("Kpp",Стр_1.Организация.КПП);
	КонецЕсли;
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	
	
	
	Чтение.ЗаписатьНачалоЭлемента("Receiver");
	Чтение.ЗаписатьНачалоЭлемента("Abonent");
	Чтение.ЗаписатьАтрибут("Id",Стр_1.Контрагент.ИД_ЭДО);
	Чтение.ЗаписатьАтрибут("Name",Стр_1.Контрагент.Наименование);
	Чтение.ЗаписатьАтрибут("Inn",Стр_1.Контрагент.ИНН);
	Если ЗначениеЗаполнено(Стр_1.Контрагент.КПП) Тогда
		Чтение.ЗаписатьАтрибут("Kpp",Стр_1.Контрагент.КПП);
	КонецЕсли;
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.Закрыть();
	
	
КонецПроцедуры

&НаСервереБезконтекста
Процедура СформироватьФайлMeta(
	КаталогКонтейнера,Стр_1,Ид,РеквизитыДокумента_1
	//, Регламент, Транзакция, ИдентификаторДокументооборота, РеквизитыФайла
	)
	
	Чтение=Новый ЗаписьXML;
	Чтение.ОткрытьФайл(КаталогКонтейнера + "meta.xml","windows-1251");
	//Чтение.УстановитьСтроку("windows-1251");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("ContainerDescription");
	Чтение.ЗаписатьАтрибут("xmlns","http://api-invoice.taxcom.ru/meta");
	Чтение.ЗаписатьАтрибут("xmlns:xs","http://www.w3.org/2001/XMLSchema");
	Чтение.ЗаписатьАтрибут("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
	
	Чтение.ЗаписатьНачалоЭлемента("DocFlow");
	Чтение.ЗаписатьАтрибут("Id",Ид);
	
	Чтение.ЗаписатьНачалоЭлемента("Documents");
	
	
	
	Чтение.ЗаписатьНачалоЭлемента("Document");
	Чтение.ЗаписатьАтрибут("ReglamentCode","Invoice");
	Чтение.ЗаписатьАтрибут("TransactionCode","Invoice");
	
	
	Чтение.ЗаписатьНачалоЭлемента("Files");
	
	Чтение.ЗаписатьНачалоЭлемента("MainImage");
	Чтение.ЗаписатьАтрибут("Path",РеквизитыДокумента_1.ИмяФайлаЭД);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("MainImageSignature");
	Чтение.ЗаписатьАтрибут("Path",Сред(РеквизитыДокумента_1.ИмяФайлаЭД,1,СтрДлина(РеквизитыДокумента_1.ИмяФайлаЭД)-4)+"-1.p7s");
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("ExternalCard");
	Чтение.ЗаписатьАтрибут("Path","card.xml");
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.Закрыть();
	
	
КонецПроцедуры


&НаСервере
Функция ДвоичныеДанныеИзСтрокиXML(СтрокаXML)
    
    Поток = Новый ПотокВПамяти;
    ЗаписьXML = Новый ЗаписьXML;
    ЗаписьXML.ОткрытьПоток(Поток, "windows-1251");
    ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьБезОбработки(Символы.ПС);
    ЗаписьXML.ЗаписатьБезОбработки(СтрокаXML);
    ЗаписьXML.Закрыть();
    
    Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
    
КонецФункции

&НаСервереБезКонтекста
Процедура ПроверитьСоздатьКаталог(Путь) Экспорт
	
	КаталогНаДиске = Новый Файл(Путь);
	Если Не КаталогНаДиске.Существует() Тогда
		Попытка
			СоздатьКаталог(КаталогНаДиске.ПолноеИмя);	
		Исключение
			Ошибка = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ВызватьИсключение 
				НСтр("ru='Не удалось создать каталог """+КаталогНаДиске.ПолноеИмя+""" по причине: "+Ошибка+"'", "ru");
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПеречитатьДанныеСЦРПТ(Команда)
	// Вставить содержимое обработчика.
	//Если Элементы.СерийныеНомера.ТекущиеДанные<>Неопределено Тогда
	
	ДеревоКМ.ПолучитьЭлементы().Очистить();
	МассивЦИС=Новый Массив;
	МассивЦИС.Очистить();
	МассивCis=Новый Массив;
	
	Для Каждого Стр_ иЗ ОБъект.СерийныеНомера Цикл
	//	Если МассивЦИС.Найти(Стр_.cis)=неопределено Тогда
			
			МассивCis.Добавить(Стр_.cis);
	//	КонецЕсли;
	Конеццикла;
	
	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюПоКМ_Массив(ДеревоКМ,МассивCis,Объект.ТекущийПользователь);
	
	
	ИтогоКМ=0;
	ИтогУпаковок=0;
	Объект.ТоварыКМ.Очистить();
	
	НасервереПодсчет();
	
	Для Каждого Стр_11 Из Объект.Товары Цикл
		Стр_11.КоличествоНомеровКМ=0;
	Конеццикла;
	
	//Для Каждого Стр_1 Из ДеревоКМ.ПолучитьЭлементы() Цикл
		
	//	РекурсияПодсчета_Суммы(Стр_1,Стр_1.Количество);
		
	//	
	//	ПолучК=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1.cis));
	//	Если  ПолучК.Количество()>0 тогда
	//		ТоварСтроки=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",ПолучК[0].НомерСтрокиСвязи));
	//		Если ТоварСтроки.Количество()>0 Тогда
	//			ТоварСтроки[0].КоличествоНомеровКМ=ТоварСтроки[0].КоличествоНомеровКМ+Стр_1.Количество;
	//		КонецЕсли;
	//	КонецЕсли;
		
		
	//Конеццикла;
	НаСервереОпределяемСтрочки();
	
	
	Элементы.Страницы.ТекущаяСтраница=Элементы.ИнформацияОКМ;
	//КонецЕсли;
	
	
	
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьВЭДОСБ(Команда)
	// Вставить содержимое обработчика.
	
	
	
	Если ЗначениеЗаполнено(объект.Order_ID_УПД) тогда
		Если ЗначениеЗаполнено(Объект.ТипЭДООтправки) И Объект.ТипЭДООтправки<>ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОТензор") Тогда
			Сообщить("Накладная "+СТрока(Объект.Ссылка)+" отправлена по другой системе: "+Строка(Объект.ТипЭДООтправки));
			Возврат;
		КонецЕсли;
		
		//Если 
			
		//	Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Отправлен")
		//	ИЛИ Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Отправлен")
		//	ИЛИ Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Подписан")
		//	ИЛИ ОБъект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Уточнён")
		//	ИЛИ ОБъект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.ЗапросНаУточнениеПросмотренОжидаетсяУточнение")
		//	Тогда
		//Возврат;
		//КонецЕсли;
	КонецЕсли;
	
	Объект.ОшибкаОтправки="";	
	ЭтаФорма.Записать();
		МассивНакладных=Новый Массив;
		МассивНакладных.Добавить(Объект.Ссылка);
	
		ОтправитьВЭДОСБ_Массив(МассивНакладных);
		ЭтаФорма.Прочитать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИдЭд(Пользователь)
	Возврат Пользователь.Организация.ИД_ЭДО
КонецФункции

Функция СертификатЗапросаВСБИС(Отмечаток)
	
	
	
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,ЭкранированиеСимволовJSON.СимволыВнеASCII));
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("jsonrpc");
	Чтен.ЗаписатьЗначение("2.0");
	Чтен.ЗаписатьИмяСвойства("method");
	Чтен.ЗаписатьЗначение("СБИС.АктивироватьСертификат");
	Чтен.ЗаписатьИмяСвойства("params");
	
	Чтен.ЗаписатьНачалоОбъекта();
	
	
	Чтен.ЗаписатьИмяСвойства("Сертификат");
	
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("Отпечаток");
	Чтен.ЗаписатьЗначение(Отмечаток);
	
	
	Чтен.ЗаписатьКонецОбъекта();
	
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьИмяСвойства("id");
	Чтен.ЗаписатьЗначение(0);
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();
	
	Возврат Тело;
	
	
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,ЭкранированиеСимволовJSON.СимволыВнеASCII));
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("jsonrpc");
	Чтен.ЗаписатьЗначение("2.0");
	Чтен.ЗаписатьИмяСвойства("method");
	Чтен.ЗаписатьЗначение("СБИС.СписокСертификатов");
	Чтен.ЗаписатьИмяСвойства("params");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Фильтр");
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьКонецОбъекта();
	
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьИмяСвойства("id");
	Чтен.ЗаписатьЗначение(0);
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();
	
	Возврат Тело;
	
Конецфункции


&НаКлиенте
функция ПрочитатьДокумент(ИдДок,ДопПараметры=Неопределено,Отказ=Ложь,Docflow) экспорт
	document = Docflow.CreateSimpleObject(); 
	document.Write( "Идентификатор", ИдДок ); 
	
	//Если Не	ДопПараметры = Неопределено
	//	И	ДопПараметры.Свойство("Этап") Тогда
	//	document.WriteObject("Этап", СериализоватьСтруктуруВObject(ДопПараметры.Этап, Кэш));
	//КонецЕсли;
	
	РезультатЧтения = docflow.ReadDocument(document);
	Если РезультатЧтения = Неопределено Тогда//Метод не отработал, смотрим ошибку
		Отказ = Истина;
		Если ДопПараметры = Неопределено Тогда//Старый вызов, не ожидаем возврат ошибки
			//сбисСообщитьОбОшибке();
			Возврат Ложь;
		Иначе
			checkparam = Неопределено;
			//Ошибка = сбисПолучитьСтруктуруОшибки(Кэш);
			
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	Возврат РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.СериализоватьObjectВСтруктуру(РезультатЧтения);
КонецФункции


&НаКлиенте
Функция СформироватьТитулы(СоставПакета, Действие, ДополнительныеПараметры, Отказ) Экспорт
	ДополнительныеПараметры.Вставить("Шифрование", Ложь);
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		Зашифрован		= Вложение.Свойство("Зашифрован") И Вложение.Зашифрован = "Да";
		СбисТип			= Неопределено;
		СбисПодтип		= Неопределено;
		СбисВерсияФормат= Неопределено;
		Если Не	(	Вложение.Свойство("Тип", сбисТип)
				И	Вложение.Свойство("ВерсияФормата", СбисВерсияФормат)
				И	ЗначениеЗаполнено(СбисВерсияФормат)) Тогда
				//В случае неформализованных вложений будет пустая версия формата
			Продолжить;
		КонецЕсли;
		сбисДействие	= СтрЗаменить(Действие.Название, " ", "");
		сбисТип			= СтрЗаменить(сбисТип, " ", "");
		сбисВерсияФормат= СтрЗаменить(СтрЗаменить(сбисВерсияФормат, ".", "_"), " ", "");
		Если Вложение.Свойство("ПодТип", сбисПодтип) Тогда
			сбисПодтип = СтрЗаменить(сбисПодтип, " ", "");
		Иначе
			сбисПодтип = "";
		КонецЕсли;
		
		ИмяФункции = сбисДействие + "_" + сбисТип + "_" + сбисПодтип + "_" + сбисВерсияФормат;
		//Если Зашифрован Тогда
		//	ИмяОсновнойФормы = Кэш.ИнтеграцияИмя;
		//	ИмяВспомогательнойФормы = "";
		//	ДополнительныеПараметры.Шифрование = Истина;
		//Иначе
			ИмяОсновнойФормы = "Файл_Шаблон";
			ИмяВспомогательнойФормы = "Файл_" + сбисТип + "_" + сбисВерсияФормат;
		//КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ОбработатьСлужебныеДокументыПоПакетуSDK(Кэш, СоставПакета) Экспорт
	// Обрабатывает служебные по одному пакету
	МестныйКэш = Кэш;
	param   = МестныйКэш.CreateSimpleObject();
	param.Write("ИдентификаторДокумента",СоставПакета.Идентификатор);
	ИнформацияПоНеобработанным = МестныйКэш.ReadServiceStagesInfo(param);
	Если ИнформацияПоНеобработанным = Неопределено Тогда //почему неопределено
//		сбисСообщитьОбОшибке();
	КонецЕсли;
	ИнформацияПоНеобработанным = СериализоватьObjectВСтруктуру(ИнформацияПоНеобработанным);
	Всего = Число(ИнформацияПоНеобработанным.ЧислоНеобработанныхЭтапов);
	
	Если Всего>0 Тогда
		Результат = МестныйКэш.ProcessServiceStagesEx(param);
		Если Результат = Неопределено Тогда //почему неопределено
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
КонецФункции


&НаКлиенте
Функция сбВыполнитьДействиеSDK(СоставПакета, Этап, Действие, Комментарий, ПредставлениеПакета,ДанныеИнтеграции,ОбъектПлагин) Экспорт
	// Выполняет указанное действие по документу СБИС
	Если (НЕ Действие.Свойство("Сертификат") или  Действие.Сертификат.Количество()=0) и (Действие.ТребуетПодписания = "Да") Тогда
		Сообщить("Отсутствует сертификат ЭЦП для утверждения/отклонения пакета документов "+ПредставлениеПакета);
		Возврат Ложь;
	КонецЕсли;
	ОбработатьСлужебныеДокументыПоПакетуSDK(ОбъектПлагин, СоставПакета);
	
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		Если Вложение.Свойство("Зашифрован") и Вложение.Зашифрован = "Да" Тогда
			Сообщить("Для корректной обработки зашифрованных документов выберите способ обмена ""extSDK"" на вкладке Настройки.");
			Возврат Ложь;
		КонецЕсли;
		Прервать;
	КонецЦикла;
	
	// Назначение действие на этап
	action = ОбъектПлагин.CreateSimpleObject();
	action.Write("Название", Действие.Название);
	Если Действие.Свойство("Сертификат") и Действие.Сертификат.Количество()>0 Тогда
		certificate = СериализоватьСтруктуруВObject(Действие.Сертификат[0],ОбъектПлагин);
		action.WriteObject("Сертификат", certificate);
	КонецЕсли;
	Если Комментарий<>"" Тогда
		action.Write("Комментарий", Комментарий);
	КонецЕсли;	
	
	
	// Назначение этапа
	stage = ОбъектПлагин.CreateSimpleObject();
	stage.Write("Название", Этап.Название);
	stage.Write("Идентификатор",Этап.Идентификатор); 
	stage.WriteObject("Действие", action);
	
	
	document_in = ОбъектПлагин.CreateSimpleObject();
	document_in.WriteObject( "Этап", stage );
	document_in.Write( "Идентификатор", СоставПакета.Идентификатор );	
	
	// Подготовка этапа
	prepared_document = ОбъектПлагин.PrepareAction(document_in);
	Если prepared_document  = Неопределено Тогда
		Возврат Ложь
	КонецЕсли;
	
	attachmentListPrepared = prepared_document.ReadObjectList("Этап").at(0).ReadObjectList("Вложение");     // вложения из ПодготовитьДействие
	Если attachmentListPrepared = Неопределено Тогда
		attachmentListPrepared = ОбъектПлагин.CreateSimpleObjectList();
	КонецЕсли;
	
	//UAA формирование титулов
	//Пока тут заглушка на проброску результата подготовки, так как COM. При необходимости, доработать.
	//сбисПараметрыТитулов = Новый Структура("РезультатПодготовки", prepared_document);
	сбисПараметрыТитулов = Новый Структура;
	ОшибкаФормирования = Ложь;
	РезультатФормирования = //СформироватьТитулы(Кэш, СоставПакета, Действие, сбисПараметрыТитулов, ОшибкаФормирования);
	СформироватьТитулы(СоставПакета, Действие, сбисПараметрыТитулов, ОшибкаФормирования);
	Если ОшибкаФормирования Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Размер = attachmentListPrepared.count;
	attachmentList = ОбъектПлагин.CreateSimpleObjectList();  // вложения, которые будем передавать в ВыполнитьДействие
	Если Действие.Свойство("Сертификат") и Действие.Сертификат.Количество()>0 и Действие.Сертификат[0].Ключ.Тип = "Клиентский" и Действие.ТребуетПодписания = "Да" Тогда  // если ключ клиентский, то надо передать все вложения в ExecuteAction для подписания
		Для сч=0 По Размер-1 Цикл
			Запись = attachmentListPrepared.at(сч);
			attachment = ОбъектПлагин.CreateSimpleObject();
			attachment.Write( "Идентификатор",  Запись.Read("Идентификатор"));
			file = ОбъектПлагин.CreateSimpleObject();
			file.Write( "Имя", Запись.ReadObject("Файл").Read("Имя") );
			file.Write( "Хеш", Запись.ReadObject("Файл").Read("Хеш") ); 
			attachment.WriteObject( "Файл", file );
			attachmentList.Add( attachment );
		КонецЦикла;	
	КонецЕсли;
	
	// ищем подтверждение заказа, чтобы проставить подтверждению, сформированному в 1С, тот же идентификатор
	
	ИдПодтвЗаказа = "";
	НомПодтвЗаказа = 0;
	Для сч=0 По Размер-1 Цикл
		Запись = attachmentListPrepared.at(сч);
		Если Запись.Read("Тип") = "ПодтверждениеЗаказа" Тогда
			ИдПодтвЗаказа = Запись.Read("Идентификатор");
			НомПодтвЗаказа = сч;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	StreamHelper = Новый COMОбъект("SBIS.StreamHelper");
	
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		Если Не Вложение.Свойство("Идентификатор") Тогда
			attachment = ОбъектПлагин.CreateSimpleObject();
			file = ОбъектПлагин.CreateSimpleObject();
			ИмяФайла = Вложение.СтруктураФайла.Файл.Имя+"__"+Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+"_"+строка(Новый УникальныйИдентификатор())+".xml";
			file.Write( "Имя", ИмяФайла ); 
			file.Write( "ДвоичныеДанные", StreamHelper.StringToBase64(Вложение.XMLДокумента) ); 
			attachment.WriteObject( "Файл", file );
			Если (Вложение.Название="Подтверждение заказа" и ЗначениеЗаполнено(ИдПодтвЗаказа) ) Тогда 
				ИдВложения = ИдПодтвЗаказа; 
				Если Действие.Свойство("Сертификат") и Действие.Сертификат.Количество()>0 и Действие.Сертификат[0].Ключ.Тип = "Клиентский" и Действие.ТребуетПодписания = "Да" Тогда  // если ключ клиентский, значит подтверждение, сформированное онлайном, нужно удалить из списка вложений и добавить наше подтверждение
					attachmentList.Delete(НомПодтвЗаказа);
				КонецЕсли;
			Иначе 
				ИдВложения = строка(Новый УникальныйИдентификатор());
			КонецЕсли;
			attachment.Write( "Идентификатор",  ИдВложения);
			attachmentList.Add( attachment );
		КонецЕсли;
	КонецЦикла;
	
	
	prepared_stage = prepared_document.ReadObjectList("Этап").at(0);
	prepared_action = prepared_document.ReadObjectList("Этап").at(0).ReadObjectList("Действие").at(0);
	prepared_certificates = prepared_action.ReadObjectList("Сертификат");
	certificates = ОбъектПлагин.CreateSimpleObjectList();
	Если prepared_certificates<>Неопределено Тогда
		КолСерт = prepared_certificates.count;
		Для сч=0 По КолСерт-1 Цикл
			certificate = ОбъектПлагин.CreateSimpleObject();
			certificate.Write( "Отпечаток", prepared_certificates.at(сч).Read("Отпечаток") );
			certificatekey = ОбъектПлагин.CreateSimpleObject();
			certificatekey.Write( "Тип", prepared_certificates.at(сч).ReadObject("Ключ").Read("Тип") );
			certificate.WriteObject( "Ключ", certificatekey );
			certificates.Add( certificate );
		КонецЦикла;
	КонецЕсли;
	action = ОбъектПлагин.CreateSimpleObject();
	action.Write("Комментарий", prepared_action.Read("Комментарий"));
	action.Write("Название", prepared_action.Read("Название"));
	action.Write("Идентификатор", prepared_action.Read("Идентификатор"));
	action.WriteObjectList("Сертификат", certificates);
	action.Write("ТребуетПодписания", prepared_action.Read("ТребуетПодписания"));
	stage = ОбъектПлагин.CreateSimpleObject();
	stage.WriteObject("Действие", action);
	stage.WriteObjectList("Вложение", attachmentList);
	stage.Write("Идентификатор", prepared_stage.Read("Идентификатор"));
	stage.Write("Название", prepared_stage.Read("Название"));
	Если Этап.Свойство("Исполнитель") Тогда//Добавлено, так как у документов может быть этап, связанный с исполнителем не только при работе через extSDK
		Исполнитель = ОбъектПлагин.CreateSimpleObject();
		Для Каждого КлючИЗначение Из Этап.Исполнитель Цикл
			Исполнитель.Write(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		stage.WriteObject("Исполнитель", Исполнитель);
	КонецЕсли;
	document_in = ОбъектПлагин.CreateSimpleObject();
	document_in.Write( "Идентификатор", prepared_document.Read("Идентификатор") );
	prepared_redact = prepared_document.ReadObjectList("Редакция");
	redactions = ОбъектПлагин.CreateSimpleObjectList();
	КолРедакций = prepared_redact.count;
	Для сч=0 По КолРедакций-1 Цикл
		redaction = ОбъектПлагин.CreateSimpleObject();
		redaction.Write( "Идентификатор", prepared_redact.at(сч).Read("Идентификатор") );
		redactions.Add( redaction );
	КонецЦикла;
	document_in.WriteObjectList( "Редакция", redactions );
	document_in.WriteObject( "Этап", stage );
	
	// Завершение этапа
	completed_document = ОбъектПлагин.ExecuteAction(document_in);
	Если completed_document  = Неопределено Тогда 
		Ошибка=ПолучитьСообщениеОбОшибкеSDK(ОбъектПлагин);
		Сообщить("Не удалось принять дкоумент "+Строка(Объект.Ссылка)+
		" "+Ошибка.ТекстОшибки+"; "+Ошибка.ИнформацияОбОшибке);
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;

КонецФункции

&НаКлиенте
Функция ПолучитьСообщениеОбОшибкеSDK(ОбъектПлагин) Экспорт
	// Получает последнюю ошибку SDK	
	Ошибка = Новый Структура();
	Error = ОбъектПлагин.ReadLastErrorEx();
	Попытка
		Ошибка.Вставить("ТекстОшибки", строка(Error.Read("Описание")));
		Ошибка.Вставить("ИнформацияОбОшибке", строка(Error.Read("ОписаниеРасширенное")));
	Исключение
		Ошибка.Вставить("ТекстОшибки", "");
		Ошибка.Вставить("ИнформацияОбОшибке", "");
	КонецПопытки;
	Ошибка.Вставить("ПолныйТекст",Ошибка.ТекстОшибки+?(Ошибка.ТекстОшибки<>Ошибка.ИнформацияОбОшибке," ("+Ошибка.ИнформацияОбОшибке+")","" ));
	Возврат Ошибка;
КонецФункции


&НаКлиенте
Функция ВыполнитьКомандуПослеВвводаКомментарияSDK(Комментарий, ДополнительныеПараметры,ДанныеИнтеграции,ОбъектПлагин) Экспорт
	// Выполняет указанную команду по документу СБИС (утверждение/отклонение)	
	//Кэш = ДополнительныеПараметры.Кэш;
	СоставПакета = ДополнительныеПараметры.СоставПакета;
	ПредставлениеПакета = ДополнительныеПараметры.ПредставлениеПакета;
	ИмяКоманды = ДополнительныеПараметры.ИмяКоманды;
	
	Если ИмяКоманды = "Отклонить" и НЕ ЗначениеЗаполнено(Комментарий) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Ищем действие соответсвующее команде
	Для Каждого Действие из СоставПакета.Этап[0].Действие Цикл
		Если Действие.Название = ИмяКоманды Тогда
			результат = сбВыполнитьДействиеSDK(СоставПакета, СоставПакета.Этап[0], Действие, Комментарий, ПредставлениеПакета,ДанныеИнтеграции,ОбъектПлагин);
			//Если	Кэш.ПараметрыСистемы.Клиент.УправляемоеПРиложение
			//	И	ИмяКоманды = "Отклонить" Тогда
			//	Кэш.ГлавноеОкно.ОбновитьКонтент();
			//КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция СериализоватьСтруктуруВObject(Структура,Кэш) Экспорт
	// сериализует  com-объект в структуру	
	Object = Кэш.CreateSimpleObject();
	Для Каждого Элемент Из Структура Цикл	
		Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			ObjectList = Кэш.CreateSimpleObjectList(); 
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				ObjectList.add(СериализоватьСтруктуруВObject(ЭлементМассива,Кэш));	
			КонецЦикла;
			Object.WriteObjectList(Элемент.Ключ, ObjectList);	
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			Object.WriteObject(Элемент.Ключ, СериализоватьСтруктуруВObject(Элемент.Значение,Кэш));
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			Object.Write(Элемент.Ключ,формат(Элемент.Значение, "ДФ='дд.ММ.гггг ЧЧ.мм.сс'"));
		Иначе
			Object.Write(Элемент.Ключ,Элемент.Значение);
		КонецЕсли;
	КонецЦикла;	
	Возврат Object;
КонецФункции



&НаКлиенте
функция ПрочитатьДокументSDK(ИдДок,ДопПараметры=Неопределено,Отказ=Ложь,ДанныеИнтеграции,ОбъектПлагин) экспорт
	// Получает структуру документа СБИС	
	document = ОбъектПлагин.CreateSimpleObject(); 
	document.Write( "Идентификатор", ИдДок ); 
	
	Если Не	ДопПараметры = Неопределено
		И	ДопПараметры.Свойство("Этап") Тогда
		document.WriteObject("Этап", СериализоватьСтруктуруВObject(ДопПараметры.Этап,ОбъектПлагин));
	КонецЕсли;
	
	РезультатЧтения = ОбъектПлагин.ReadDocument(document);
	Если РезультатЧтения = Неопределено Тогда//Метод не отработал, смотрим ошибку
		Отказ = Истина;
		Если ДопПараметры = Неопределено Тогда//Старый вызов, не ожидаем возврат ошибки
			//сбисСообщитьОбОшибке();
			Возврат Ложь;
		Иначе
			checkparam = Неопределено;
			//Ошибка = сбисПолучитьСтруктуруОшибки(Кэш);
			//Если Не ДопПараметры.Свойство("СообщатьПриОшибке", checkparam)
			//	Или	checkparam Тогда
			//	Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Ошибка);
			//КонецЕсли;
			Если 	ДопПараметры.Свойство("ВернутьОшибку", checkparam)
				И	checkparam Тогда
				Возврат Неопределено; 
			КонецЕсли;
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	Возврат СериализоватьObjectВСтруктуру(РезультатЧтения);
КонецФункции

&НаКлиенте
Функция СериализоватьObjectВСтруктуру(Object) Экспорт
	Попытка
		ComКлючиОбъекта	= Object.keys;
	Исключение
		Сообщить("Ошибка при работе с SimpleObject. У объекта отсутствует описание ключей. Детально: " + ИнформацияОбОшибке().Причина);
		Возврат Неопределено;
	КонецПопытки;
	сбисСтруктура	= Новый Структура();
	Для Каждого ИмяОбъекта Из ComКлючиОбъекта Цикл
		Тип = Object.TypeOf(ИмяОбъекта);	
		Если Тип = "строка" Тогда
			Строка = Object.Read(ИмяОбъекта);
			Если Сред(Строка,3,1)="." и Сред(Строка,6,1)="." и (СтрДлина(Строка)=10 или СтрДлина(Строка)=19) Тогда //видимо это дата
				Попытка
					Если СтрДлина(Строка)=10 Тогда
						Строка = Дата(Сред(Строка,7,4), Сред(Строка,4,2), Лев(Строка, 2));
					Иначе
						Строка = Дата(Сред(Строка,7,4), Сред(Строка,4,2), Лев(Строка, 2), Сред(Строка,12, 2), Сред(Строка,15, 2), Сред(Строка,18, 2))
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
			сбисСтруктура.Вставить(ИмяОбъекта,Строка);
		ИначеЕсли Тип = "объект" Тогда
			сбисСтруктура.Вставить(ИмяОбъекта,СериализоватьObjectВСтруктуру(Object.ReadObject(ИмяОбъекта)));
		ИначеЕсли Тип = "массив объектов" Тогда
			сбисСтруктура.Вставить(ИмяОбъекта,Новый Массив());
			ObjectList = Object.ReadObjectList(ИмяОбъекта);
			ObjectListCount = ObjectList.count;
			Для сч = 0 По ObjectListCount - 1 Цикл
				сбисСтруктура[ИмяОбъекта].Добавить(СериализоватьObjectВСтруктуру(ObjectList.at(сч)));
			КонецЦикла;	
		Иначе
			Сообщить("Обратитесь в техподдержку. Появился новый тип Object "+Тип);
		КонецЕсли;		
	КонецЦикла;
	Возврат сбисСтруктура;		
КонецФункции
	


&НаКлиенте
Функция СБВыполнитьКомандуSDK(Идентификатор,ИмяКоманды,ДанныеИнтеграции,ОбъектПлагин,Комментарий) Экспорт
	// Выполняет указанную команду по документу СБИС (утверждение/отклонение)	
	//МестныйКэш = Кэш;	
	//ГлавноеОкно = Кэш.ГлавноеОкно;
	
	document_out = ОбъектПлагин.CreateSimpleObject();
	document_out.Write( "Идентификатор", Идентификатор );

	// Прочитаем пакет   
	СоставПакета = ПрочитатьДокументSDK(Идентификатор,,,ДанныеИнтеграции,ОбъектПлагин);
	Если СоставПакета=Ложь Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если СоставПакета.Свойство("Этап") и (СоставПакета.Этап[0].Название  = "Отправить" или СоставПакета.Этап[0].Название  = "Отправка") Тогда
		action = Неопределено;
		//Комментарий = "";
		ПараметрыОтклонения = Новый Структура("Кэш,СоставПакета,ИмяКоманды,ПредставлениеПакета",Неопределено, СоставПакета, ИмяКоманды, "");
		//Если ИмяКоманды = "Отклонить" Тогда
		//	СтрокаПодсказка = "Причина отклонения"; 
		//	Возврат ВыполнитьКомандуПослеВвводаКомментария(Комментарий,  ПараметрыОтклонения,ДанныеИнтеграции,ОбъектПлагин);
		//	
		//	#Если ТолстыйКлиентОбычноеПриложение Тогда
		//		Если Не ВвестиСтроку(Комментарий,СтрокаПодсказка,,Истина) Тогда
		//			Комментарий = "";
		//		КонецЕсли;
		//	#Иначе
		//		ПоказатьВводСтроки(Новый ОписаниеОповещения("сбисВыполнитьКомандуПослеВвводаКомментария",ЭтаФорма, ПараметрыОтклонения),Комментарий,СтрокаПодсказка,,Истина);
		//		Возврат Ложь;
		//	#КонецЕсли
		//КонецЕсли;	
		Возврат ВыполнитьКомандуПослеВвводаКомментарияSDK(Комментарий,  ПараметрыОтклонения,ДанныеИнтеграции,ОбъектПлагин);
	КонецЕсли;	
	Возврат Ложь;
КонецФункции


Процедура ОбновитьСтатусДокументаСБ(Стр,ТТТ_Ответ)
	СтатусДокумента=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ВернутьСтатусДокументаСБ(ТТТ_Ответ.Состояние.Код);
	Если Стр.Ссылка.статусУПД<>СтатусДокумента Тогда
		
		Полоб=Стр.Ссылка.ПолучитьОбъект();
				Полоб.СтатусУПД=СтатусДокумента;
									Если ЗначениеЗаполнено(ТТТ_Ответ.Состояние.Примечание) Тогда
						ПолОб.ОшибкаОтправки=
ТТТ_Ответ.Состояние.Примечание;					
Иначе
						ПолОб.ОшибкаОтправки=
ТТТ_Ответ.Состояние.Название;					

					КонецЕсли;

				Если ПолОб.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан
					ИЛИ ПолОб.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Уточнён Тогда
					Полоб.Записать(РежимЗаписиДокумента.Проведение);
				ИначеЕсли ПолОб.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отклонен
					ИЛИ ПолОб.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отозван
					Тогда
					Если Полоб.Проведен Тогда
						Полоб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Иначе
						Полоб.Записать();
					КонецЕсли;	
				Иначе
					Полоб.Записать();
				КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьВСБИСПоНовому(МассивНакладных,Thumbprint_1)
	

	СайтДляПодключенияПоТакскму=Thumbprint_1.СБ;

	
	Если Thumbprint_1.ТипПодключения=ПредопределенноеЗначение("Перечисление.ТипыПодключенияКЭДОСБ_ХамелеонЦРПТ.SDK") Тогда
		Результат="";
		Организация=Неопределено;
		ДанныеИнтеграции="";ОбъектПлагин=Неопределено;
		Для Каждого Стр_1 Из МассивНакладных Цикл
			
					ТипЭДООтправки=ТипЭДООтправки(Стр_1);

			Если ЗначениеЗаполнено(ТипЭДООтправки) И ТипЭДООтправки<>ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОТензор") Тогда
				Сообщить("Накладная "+СТрока(Стр_1.Ссылка)+" отправлена по другой системе: "+Строка(ТипЭДООтправки));
				Возврат;
			КонецЕсли;
			
			
			Идентификатор=ПолучитьИдентификатор(Стр_1);
			Если Организация<>Идентификатор Тогда
			
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
							
					HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
							
					HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				СерийныйНомер="";
				ДанныеИнтеграции=Неопределено;
				ОбъектПлагин=Неопределено;
				///ПО СДК НАДОЕ ДЕЛАТЬ
			//	Если Thumbprint_1.ТипПодключения=ПредопределенноеЗначение("Перечисление.ТипыПодключенияКЭДОСБ_ХамелеонЦРПТ.SDK") Тогда
				//Маркер=РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОСб_SDK(Thumbprint_1,ПолучитьИдЭд(Пользователь),HTTPСервисЗапрос_ТХЦ,СерийныйНомер,ДанныеАгрегации,ОбъектПлагин);
				Результат=РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОСб_SDK(Thumbprint_1,"",HTTPСервисЗапрос_ТХЦ,СерийныйНомер,ДанныеИнтеграции,ОбъектПлагин,СайтДляПодключенияПоТакскму);
					
			//	Иначе
			//	Конецесли;
				
				Если Не ЗначениеЗаполнено(Результат) Тогда
					Продолжить;
				КонецЕсли;
				Организация=Идентификатор;
			КонецЕсли;
			
			МассивДляОтправкиЧерновика=Новый Массив;
			МассивДляОтправкиЧерновика.Добавить(Стр_1);
			ИдентификаторДляОтправки=Неопределено;
			//ОтправитьВЭДОСБ_Массив_Черновик(МассивДляОтправкиЧерновика,ИдентификаторДляОтправки);
			
					
				РеквизитыДокумента_1=Новый Структура;
				ОткрытьФорму_1=Ложь;
				Сообщения=Неопределено;
				
				
				СтрокаXML =
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВывестиТабличнД(Стр_1,ОткрытьФорму_1,Сообщения,ПриПроверкеСхемыПриОтгрузкеЕслиОшибкаНеФормироватьФайл,ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОТензор"));	
				
				Если ЗначениеЗаполнено(СтрокаXML) Тогда
					ДанныеФайла = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(СтрокаXML.Текстовыйдо.Получитьтекст(),КодировкаТекста.ANSI);//ДвоичныеДанныеИзСтрокиXML(СтрокаXML.Текстовыйдо.Получитьтекст());
					
					РеквизитыДокумента_1.Вставить("ИмяФайлаЭД",СтрокаXML.ИмяФайла);
					РеквизитыДокумента_1.Вставить("ИдентификаторЭД",СтрокаXML.ИдР);
				
				Иначе
					Сообщить("В документе "+Строка(Стр_1)+" есть ошибки при формировании");
					Продолжить
				КонецЕсли;
				
				Отказ=Ложь;
				
				ТелоJSON=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ЗаписьДокумента(Стр_1,РеквизитыДокумента_1,ДанныеФайла);
				HTTPЗапрос=Новый HTTPЗапрос("service/?srv=1");
				
				HTTPЗапрос.Заголовки.Вставить("X-SBISSessionID",	Результат);
				HTTPЗапрос.Заголовки.Вставить("Content-Type",	"application/json; charset=utf-8");
			//	HTTPЗапрос.Заголовки.Вставить("User-Agent",	"1C8.3.10.2772_VO2.0.35.1");
			//	HTTPЗапрос.Заголовки.Вставить("X-API-Version",	"2.3.1");
				
				
				#Если ВебКлиент Тогда
						HTTPЗапрос.УстановитьТелоИзСтроки(ТелоJSON,"UTF-8");
						#Иначе
						HTTPЗапрос.УстановитьТелоИзСтроки(ТелоJSON,"UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
					#КонецЕсли
					
				
				Ответ=HTTPСервисЗапрос_ТХЦ.ОтправитьДляОбработки(HTTPЗапрос);
				ТТТ_Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());	
				
				Если Ответ.КодСостояния=200 Тогда	
						
					
					
					
					
					Ид=ТТТ_Ответ.result.Идентификатор;
					ЗаписатьСБ(Стр_1,Ид,СтрокаXML.ИмяФайла);
					ИдентификаторДляОтправки=Ид;
					//Этаформа.Прочитать();
					//Продолжить;   
					
					
			КонецЕсли;			
			
			Если ЗначениеЗаполнено(ИдентификаторДляОтправки) Тогда
				Отказ=Ложь;
				
				//ЗаписатьСБ(СоставПакета.Вложение[0].Документы1С[0].Значение,ИдентификаторДляОтправки,ИмяФайла);

				
				СоставПакета=ПрочитатьДокументSDK(ИдентификаторДляОтправки,Неопределено,Отказ,ДанныеИнтеграции,ОбъектПлагин);
				
				
				Если Отказ=Истина Тогда
					Сообщить("Не удалось отправить документ "+Строка(Стр_1));
					Продолжить;
				Конецесли;
				
				ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();


				СБВыполнитьКомандуSDK(ИдентификаторДляОтправки,"Отправить",ДанныеИнтеграции,ОбъектПлагин,"");	
				
				СоставПакета=ПрочитатьДокументSDK(ИдентификаторДляОтправки,Неопределено,Отказ,ДанныеИнтеграции,ОбъектПлагин);
				
				
				
			КонецЕсли;

			//
			//
			//ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();

			//РезультатОтправки = Новый Структура("ТипыОшибок,Отправлено,НеОтправлено,НеСформировано,Ошибок,ДетализацияОшибок,ВсегоПакетов,ОшибкиДоОтправки,ДанныеПоСтатусам,ПорНомер,КоличествоСвободныхПотоков,ОтправленоСообщений,ПолученоОтветов,ВремяНачала,ВремяФормирования,ВремяОтправки,ДетализацияОтправки,ВремяЗаписиСтатусов,ВремяПолученияДанных,ВремяОжиданияОтвета, СформированныеПакеты", Новый СписокЗначений,0,0,0,0, Новый Соответствие,0,0,Новый Массив,0,10,0,0,ВремяНачала,0,0, Новый Соответствие,0,0,0, Новый Соответствие);
			//МассивСтрок=Новый СписокЗначений;
			//МассивСтрок.Добавить(Стр_1);
			//МассивПакетов = Новый Массив;  // Массив пакетов для одной отправки (если в настройках указано отправлять пакеты по n штук)
			//
			//РезультатОтправки = ОтправитьДокументыПоМассивуСтрок(МассивСтрок,МассивПакетов,ДанныеИнтеграции,ОбъектПлагин);
			//Если ТипЗнч(РезультатОтправки) = Тип("Структура") Тогда  // если необходимо активировать сертификаты перед отправкой
			//	СчетчикВведенныхПинкодов = 0;
			//	счСертификатов = 0;
			//	Для Каждого Элемент Из РезультатОтправки.СписокСертификатов Цикл
			//		Сертификат = Элемент.Значение;
			//		Если Сертификат.Ключ.СпособАктивации<>"СтатическийКод" Тогда
			//			Кэш.Интеграция.ПолучитьКодАктивацииСертификата(Кэш, Сертификат);				
			//		КонецЕсли;
			//		СертификатИмя = "Введите код активации сертификата "+Кэш.ОбщиеФункции.СокращенноеФИО(Кэш,Сертификат.ФИО)+?(Сертификат.Свойство("Должность"),"("+Сертификат.Должность+")", "")+", "+Сертификат.Название+?(Сертификат.Свойство("ИНН"),"(ИНН "+Сертификат.ИНН+")","");
			//		ОткрытьФорму("ВнешняяОбработка.СБИС.Форма.ФормаВводаПинкода",Новый Структура("СертификатИмя,счСертификатов",СертификатИмя,счСертификатов),ЭтаФорма,счСертификатов,,,Новый ОписаниеОповещения("АктивироватьСертификатыЗавершение",ЭтаФорма,Новый Структура("Кэш,РезультатОтправки",Кэш,РезультатОтправки)));	
			//		счСертификатов = счСертификатов+1;
			//	КонецЦикла;
			//КонецЕсли;
			
			
		Конеццикла;
	//КонецЕсли;
	
		
			
		
	Иначе
		
		Результат="";
		Организация=Неопределено;
		ДанныеИнтеграции="";ОбъектПлагин=Неопределено;
		Для Каждого Стр_1 Из МассивНакладных Цикл
			
			
			Идентификатор=ПолучитьИдентификатор(Стр_1);
			Если Организация<>Идентификатор Тогда
			
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
							
					HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
							
					HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				СерийныйНомер="";
				///ПО СДК НАДОЕ ДЕЛАТЬ
			//	Если Thumbprint_1.ТипПодключения=ПредопределенноеЗначение("Перечисление.ТипыПодключенияКЭДОСБ_ХамелеонЦРПТ.SDK") Тогда
				//Маркер=РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОСб_SDK(Thumbprint_1,ПолучитьИдЭд(Пользователь),HTTPСервисЗапрос_ТХЦ,СерийныйНомер,ДанныеАгрегации,ОбъектПлагин);
			//		Результат=РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОСб_SDK(Thumbprint_1,"",HTTPСервисЗапрос_ТХЦ,СерийныйНомер,ДанныеИнтеграции,ОбъектПлагин,СайтДляПодключенияПоТакскму);
					
			//	Иначе
					Результат=РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОСб_Новый(Thumbprint_1,"",HTTPСервисЗапрос_ТХЦ,СерийныйНомер,ДанныеИнтеграции,ОбъектПлагин);
			//	Конецесли;
				
				Если Не ЗначениеЗаполнено(Результат) Тогда
					Продолжить;
				КонецЕсли;
				Организация=Идентификатор;
			КонецЕсли;
			
			ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();

			РезультатОтправки = Новый Структура("ТипыОшибок,Отправлено,НеОтправлено,НеСформировано,Ошибок,ДетализацияОшибок,ВсегоПакетов,ОшибкиДоОтправки,ДанныеПоСтатусам,ПорНомер,КоличествоСвободныхПотоков,ОтправленоСообщений,ПолученоОтветов,ВремяНачала,ВремяФормирования,ВремяОтправки,ДетализацияОтправки,ВремяЗаписиСтатусов,ВремяПолученияДанных,ВремяОжиданияОтвета, СформированныеПакеты", Новый СписокЗначений,0,0,0,0, Новый Соответствие,0,0,Новый Массив,0,10,0,0,ВремяНачала,0,0, Новый Соответствие,0,0,0, Новый Соответствие);
			МассивСтрок=Новый СписокЗначений;
			МассивСтрок.Добавить(Стр_1);
			МассивПакетов = Новый Массив;  // Массив пакетов для одной отправки (если в настройках указано отправлять пакеты по n штук)
			
			РезультатОтправки = ОтправитьДокументыПоМассивуСтрок(МассивСтрок,МассивПакетов,ДанныеИнтеграции,ОбъектПлагин,Результат,HTTPСервисЗапрос_ТХЦ);
			//Если ТипЗнч(РезультатОтправки) = Тип("Структура") Тогда  // если необходимо активировать сертификаты перед отправкой
			//	СчетчикВведенныхПинкодов = 0;
			//	счСертификатов = 0;
			//	Для Каждого Элемент Из РезультатОтправки.СписокСертификатов Цикл
			//		Сертификат = Элемент.Значение;
			//		Если Сертификат.Ключ.СпособАктивации<>"СтатическийКод" Тогда
			//			Кэш.Интеграция.ПолучитьКодАктивацииСертификата(Кэш, Сертификат);				
			//		КонецЕсли;
			//		СертификатИмя = "Введите код активации сертификата "+Кэш.ОбщиеФункции.СокращенноеФИО(Кэш,Сертификат.ФИО)+?(Сертификат.Свойство("Должность"),"("+Сертификат.Должность+")", "")+", "+Сертификат.Название+?(Сертификат.Свойство("ИНН"),"(ИНН "+Сертификат.ИНН+")","");
			//		ОткрытьФорму("ВнешняяОбработка.СБИС.Форма.ФормаВводаПинкода",Новый Структура("СертификатИмя,счСертификатов",СертификатИмя,счСертификатов),ЭтаФорма,счСертификатов,,,Новый ОписаниеОповещения("АктивироватьСертификатыЗавершение",ЭтаФорма,Новый Структура("Кэш,РезультатОтправки",Кэш,РезультатОтправки)));	
			//		счСертификатов = счСертификатов+1;
			//	КонецЦикла;
			//КонецЕсли;
			
			
		Конеццикла;
	КонецЕсли;
	
	
	
	Возврат;
	
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоРеалиацииДанныеДляЭДО(ДокумР)
	
	МассивН=Новый Массив;
	Вложение=Новый Массив;
	СтруктураПоДокументу=Новый Структура;
	СтруктураПоДокументу.Вставить("ВерсияФормата",	"5.01");
	СтруктураПоДокументу.Вставить("Дата",	Формат(ДокумР.Дата,"ДФ=""дд.ММ.гггг"""));
	СтруктураПоДокументу.Вставить("Документ1С",ДокумР);
	СтруктураПоДокументу.Вставить("ИдДокумента",ДокумР.УникальныйИдентификатор());
	СтруктураПоДокументу.Вставить("Название",Строка(ДокумР));
	СтруктураПоДокументу.Вставить("Номер",ДокумР.НомерПервичногоДокумента);
	СтруктураПоДокументу.Вставить("Ответственный",Новый Структура);
	
	//Отправитель	Структура	Структура
	Отправитель=Новый Структура;
	Отправитель.Вставить("GLN");
	Отправитель.Вставить("Адрес",Новый Массив);
	Отправитель.Вставить("БанкРекв",Новый Структура);
	Отправитель.Вставить("Идентификатор","");
	Отправитель.Вставить("Контакт",Новый Структура);
	Отправитель.Вставить("Название",ДокумР.Организация.Наименование);
	Отправитель.Вставить("Представители",Новый Структура);
	
	Если СтрДлина(СокрЛП(ДокумР.Организация.ИНН))=12 Тогда
		СвФЛ=Новый Структура;
		СвФЛ.Вставить("ИНН",ДокумР.Организация.ИНН);
		Отправитель.Вставить("СвФЛ",СвФЛ);
	Иначе
		СвЮЛ=Новый Структура;
		СвЮЛ.Вставить("ИНН",ДокумР.Организация.ИНН);
		СвЮЛ.Вставить("КПП",ДокумР.Организация.КПП);
		Отправитель.Вставить("СвЮЛ",СвЮЛ);
КонецЕсли;
	
	СтруктураПоДокументу.Вставить("Отправитель",Отправитель);
	
	
	СтруктураПоДокументу.Вставить("ПодВерсияФормата","");
	СтруктураПоДокументу.Вставить("ПодТип",	"1175010");
	СтруктураПоДокументу.Вставить("Подразделение",	Новый Структура);
	
	//Получатель	Структура	Структура
	
	Отправитель=Новый Структура;
	Отправитель.Вставить("GLN");
	Отправитель.Вставить("Адрес",Новый Массив);
	Отправитель.Вставить("БанкРекв",Новый Структура);
	Отправитель.Вставить("Идентификатор","");
	Отправитель.Вставить("Контакт",Новый Структура);
	Отправитель.Вставить("Название",ДокумР.Контрагент.Наименование);
	Отправитель.Вставить("Представители",Новый Структура);
	
	Если СтрДлина(СокрЛП(ДокумР.Контрагент.ИНН))=12 Тогда
		СвФЛ=Новый Структура;
		СвФЛ.Вставить("ИНН",ДокумР.Контрагент.ИНН);
		Отправитель.Вставить("СвФЛ",СвФЛ);
	Иначе
		СвЮЛ=Новый Структура;
		СвЮЛ.Вставить("ИНН",ДокумР.Контрагент.ИНН);
		СвЮЛ.Вставить("КПП",ДокумР.Контрагент.КПП);
		Отправитель.Вставить("СвЮЛ",СвЮЛ);
КонецЕсли;
	
	
	СтруктураПоДокументу.Вставить("Получатель",Отправитель);
	
	//Регламент	Структура	Структура
	СтруктураПоДокументу.Вставить("Регламент",	Новый Структура("Название","Реализация"));
	
	
	//
	//Сертификат	Структура	Структура
	Сертификат=Новый Структура;
	Сертификат.Вставить("Должность");
	Сертификат.Вставить("ИНН");
	Сертификат.Вставить("ФИО");
	СтруктураПоДокументу.Вставить("Сертификат",	Сертификат);
	
	//СтруктураДокумента	Структура	Структура
	СтруктураПоДокументу.Вставить("Сумма",	XmlString(ДокумР.СуммаДокумента));
	СтруктураПоДокументу.Вставить("Тип","ЭДОНакл");
	Вложение.Добавить(СтруктураПоДокументу);
	МассивН.Добавить(Новый Структура("Вложение",Вложение));
	Возврат МассивН
	
Конецфункции
&НаКлиенте
Функция ПодготовитьСтруктуруДокумента1С(СтрокаСпискаДокументов,СтрокаXML,ТТТ_Ответ) Экспорт
	// Функция готовит структуру пакета электронных документов по комплекту документов 1С для просмотра и отправки контрагентам.
	// Т.к. по одной строке документов 1С может быть сформировано несколько комплектов (оказание услуги), то структуры пакетов добавляются в массив.
	//МестныйКэш = Кэш;
	//ВремКаталог = КаталогВременныхФайлов();
	
	
	МассивПакетов = Новый Массив;
	
	
		МассивПакетов.Добавить(ТТТ_Ответ);

	  Возврат МассивПакетов;
	
	
	Контекст = Новый Структура;
	Контекст.Вставить("МассивПакетов",Новый Массив);
//	Кэш.КэшЗначенийИни.ТекущийПакет.Очистить();
//	ИниТекущегоРеестра = Кэш.Текущий.ТипДок;	
	ТипПакета = "ДокОтгрИсх";
	ВнешниеФайлы = Новый Массив;
	НеЗапускатьВДокументооборот = Ложь;
	МассивСтатусРегламент = Новый Массив;
	
	// получаем на сервере все данные по документам пакета по файлам настроек
	//Если Кэш.Свойство("РезультатОтправки") Тогда
		ДатаНач = ТекущаяУниверсальнаяДатаВМиллисекундах();	
	//КонецЕсли;
	
	Контекст.МассивПакетов=ПоРеалиацииДанныеДляЭДО(СтрокаСпискаДокументов);
	
	// добавляем в первый пакет внешние файлы
	Если Контекст.МассивПакетов.Количество()>0 Тогда
		//Для Каждого ВнешнийФайлПуть из ВнешниеФайлы Цикл
		//	ВнешнийФайл = Новый Файл(ВнешнийФайлПуть);
		//	Если ВнешнийФайл.Существует() Тогда
		//		Вложение = Новый Структура("ПолноеИмяФайла,ИмяФайла,Название",ВнешнийФайлПуть,ВнешнийФайл.Имя,ВнешнийФайл.Имя);
		//		Контекст.МассивПакетов[0].Вложение.Добавить(Вложение);
		//	КонецЕсли;
		//КонецЦикла;
	КонецЕсли;
	
	счПакетов = 0;
	Для Каждого Пакет Из Контекст.МассивПакетов Цикл
		ПолныйСоставПакета = Новый Структура;
		Если Пакет.Свойство("Конверт") Тогда
			ПолныйСоставПакета = Пакет.Конверт;	
		КонецЕсли;
		Если Пакет.Свойство("Ошибка") Тогда
			ПолныйСоставПакета.Вставить("Ошибка",Пакет.Ошибка);	
		КонецЕсли;
		МассивВложений = Новый Массив;
		Для Каждого Вложение Из Пакет.Вложение Цикл
			СтруктураВложения = Новый Структура;
			СтруктураВложения.Вставить("Отправитель", ?(Вложение.Свойство("Отправитель"),Вложение.Отправитель, "Отправитель"));
			СтруктураВложения.Вставить("Получатель", ?(Вложение.Свойство("Получатель"),Вложение.Получатель, "Получатель"));
			СтруктураВложения.Вставить("Ответственный", ?(Вложение.Свойство("Ответственный"),Вложение.Ответственный, Новый Структура));
			СтруктураВложения.Вставить("Подразделение", ?(Вложение.Свойство("Подразделение"),Вложение.Подразделение, Новый Структура));
			СтруктураВложения.Вставить("Регламент", ?(Вложение.Свойство("Регламент"),Вложение.Регламент, Новый Структура));
			СтруктураВложения.Вставить("ДокументОснование", ?(Вложение.Свойство("ДокументОснование"),Вложение.ДокументОснование, Новый Массив));
			СтруктураВложения.Вставить("Название", ?(Вложение.Свойство("Название"),Вложение.Название, ""));
			СтруктураВложения.Вставить("Тип", ?(Вложение.Свойство("Тип"),Вложение.Тип, ""));
			СтруктураВложения.Вставить("ПодТип", ?(Вложение.Свойство("ПодТип"),Вложение.ПодТип, ""));
			СтруктураВложения.Вставить("ВерсияФормата", ?(Вложение.Свойство("ВерсияФормата"),Вложение.ВерсияФормата, ""));
			СтруктураВложения.Вставить("ПодВерсияФормата", ?(Вложение.Свойство("ПодВерсияФормата"),Вложение.ПодВерсияФормата, ""));
			СтруктураВложения.Вставить("Дата", ?(Вложение.Свойство("Дата"),Вложение.Дата, ""));
			СтруктураВложения.Вставить("Номер", ?(Вложение.Свойство("Номер"),Вложение.Номер, ""));
			СтруктураВложения.Вставить("Сумма", ?(Вложение.Свойство("Сумма"),Вложение.Сумма, ""));
			СтруктураВложения.Вставить("Примечание", ?(Вложение.Свойство("Примечание"),Вложение.Примечание, ""));
			СтруктураВложения.Вставить("Сертификат", ?(Вложение.Свойство("Сертификат"),Вложение.Сертификат, Новый Структура));
			Если Вложение.Свойство("НоменклатураКодКонтрагента") Тогда
				СтруктураВложения.Вставить("НоменклатураКодКонтрагента", Вложение.НоменклатураКодКонтрагента);
			КонецЕсли;
			Документы1С = Новый СписокЗначений;
			Документы1С.Добавить(?(Вложение.Свойство("Документ1С"),Вложение.Документ1С, СтрокаСпискаДокументов.СоставПакета[0].Значение));
			СтруктураВложения.Вставить("Документы1С", Документы1С); 
			//Если Вложение.Свойство("ИмяФайла") Тогда   // если добавляли в пакет внешний файл. Это вложение не может быть первым, т.к. с первого берутся сведения об отправителе, получателе
			//	СтруктураВложения.Вставить("ПолноеИмяФайла", Вложение.ПолноеИмяФайла);
			//	СтруктураВложения.Вставить("ИмяФайла", Вложение.ИмяФайла);
			//	СтруктураВложения.Вставить("XMLДокумента", ?(Вложение.Свойство("XMLДокумента"),Вложение.XMLДокумента,""));
			//	СтруктураВложения.Вставить("СтруктураФайла", ?(Вложение.Свойство("СтруктураДокумента"),Вложение.СтруктураДокумента, Новый Структура));
			//Иначе // формируем xml документов
			
			СтруктураДокумента=Новый Структура;
			Файл=Новый Структура;
			Файл.Вставить("ВерсияФормата",	"5.01");
			Файл.Вставить("Имя",СтрокаXML.ИмяФайла);
			Файл.Вставить("Формат",	"ЭДОНакл");
			СтруктураДокумента.Вставить("Файл",Файл);
			
			СтруктураФайла = СтруктураДокумента;
				СтруктураВложения.Вставить("СтруктураФайла", СтруктураФайла);
				//ШаблонXML = ПолучитьXMLФайлаИзСтруктуры(Кэш, СтруктураВложения);
				СтруктураВложения.Вставить("XMLДокумента", СтрокаXML.ТекстовыйДо.ПолучитьТекст());
			//КонецЕсли;
			МассивВложений.Добавить(СтруктураВложения);
		КонецЦикла;
		счПакетов = счПакетов+1;
		Если МассивВложений.Количество()>0 Тогда
			ПолныйСоставПакета.Вставить("Вложение", МассивВложений);
			Если НЕ Пакет.Свойство("Конверт") Тогда  // если нет структуры конверта, то берем все с первого вложения
				Если ТипЗнч(МассивВложений[0].Отправитель) = Тип("Структура") Тогда
					ПолныйСоставПакета.Вставить("НашаОрганизация", МассивВложений[0].Отправитель);
				Иначе
					ПолныйСоставПакета.Вставить("НашаОрганизация", МассивВложений[0].СтруктураФайла.Файл.Документ[МассивВложений[0].Отправитель]);
				КонецЕсли;
				Если ТипЗнч(МассивВложений[0].Получатель) = Тип("Структура") Тогда
					СтрПолучатель = МассивВложений[0].Получатель;
				Иначе
					СтрПолучатель = МассивВложений[0].СтруктураФайла.Файл.Документ[МассивВложений[0].Получатель];	
				КонецЕсли;
				// Если грузополучатель является филиалом получателя, то получаетелем пакета ставим грузополучателя
				// Удалить, когда на онлайне появится данный функционал
				//Если МассивВложений[0].Свойство("СтруктураФайла") и МассивВложений[0].СтруктураФайла.Файл.Документ.Свойство("Грузополучатель") Тогда 
				//	СтрГрузополучатель = МассивВложений[0].СтруктураФайла.Файл.Документ.Грузополучатель;
				//	Если СтрГрузополучатель.Свойство("СвЮЛ") и СтрГрузополучатель.СвЮЛ.Свойство("ИНН") и СтрПолучатель.Свойство("СвЮЛ") и СтрГрузополучатель.СвЮЛ.ИНН = СтрПолучатель.СвЮЛ.ИНН и СтрГрузополучатель.СвЮЛ.КПП <> СтрПолучатель.СвЮЛ.КПП Тогда
				//		//Попытка
				//		//	оГрузополучатель = Кэш.Интеграция.ПолучитьИнформациюОКонтрагенте(Кэш, СтрГрузополучатель);
				//		//	оПолучатель = Кэш.Интеграция.ПолучитьИнформациюОКонтрагенте(Кэш, СтрПолучатель);
				//		//	Если оПолучатель.Идентификатор = оГрузополучатель.Идентификатор Тогда
				//		СтрПолучатель = СтрГрузополучатель;
				//		//	КонецЕсли;
				//		//Исключение
				//		//КонецПопытки;
				//	КонецЕсли;
				//КонецЕсли;
				ПолныйСоставПакета.Вставить("Контрагент", СтрПолучатель);
				ПолныйСоставПакета.Вставить("Ответственный", МассивВложений[0].Ответственный);
				ПолныйСоставПакета.Вставить("Подразделение", МассивВложений[0].Подразделение);	
				ПолныйСоставПакета.Вставить("Регламент", МассивВложений[0].Регламент);
				ПолныйСоставПакета.Вставить("Тип", ТипПакета);
				ПолныйСоставПакета.Вставить("НеЗапускатьВДокументооборот", НеЗапускатьВДокументооборот);
				ПолныйСоставПакета.Вставить("ДокументОснование", МассивВложений[0].ДокументОснование);
				ПолныйСоставПакета.Вставить("Примечание", МассивВложений[0].Примечание);
				ПолныйСоставПакета.Вставить("Сертификат", МассивВложений[0].Сертификат);
				//ОсновнойДокумент = СтрокаСпискаДокументов.СоставПакета[0].Значение;
				ИмяДокумента = "ОтгрузкаТоваров_ХамелеонЦРПТ";
				
				//KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ) --> 2 +
				Если Пакет.Свойство("ПользовательскийИдентификатор") Тогда 
					ПолныйСоставПакета.Вставить("ПользовательскийИдентификатор",Пакет.ПользовательскийИдентификатор);
				Иначе
					//Если НЕ ПолныйСоставПакета.Свойство("ПользовательскийИдентификатор") Тогда
						ПолныйСоставПакета.Вставить("ПользовательскийИдентификатор",ИмяДокумента+":"+строка(Пакет.Вложение[0].ИдДокумента));
					//КонецЕсли;
					
				КонецЕсли;
				//<--KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ)
				
			КонецЕсли;
		Иначе
			// Сюда попадаем, если ПолучитьДанныеИзДокумента1С, а соответственно и ПрочитатьДокумент возвращает Истину при пустых табличных частях
			//Если Кэш.Свойство("РезультатОтправки") Тогда
				//Кэш.РезультатОтправки.НеСформировано = Кэш.РезультатОтправки.НеСформировано+1;
				//Кэш.РезультатОтправки.ОшибкиДоОтправки = Кэш.РезультатОтправки.ОшибкиДоОтправки + 1;
				//ДобавитьОшибкуВРезультатОтправки(Кэш, "Документ не сформирован", "В документе "+строка(СтрокаСпискаДокументов.СоставПакета[0].Значение)+" не заполнены табличные части. Электронный документ не сформирован.", СтрокаСпискаДокументов.СоставПакета[0].Значение, 726)
			//Иначе
			//	Сообщить("В документе "+строка(СтрокаСпискаДокументов.СоставПакета[0].Значение)+" не заполнены табличные части. Электронный документ не сформирован.");
			//КонецЕсли;
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПакетов;
	
КонецФункции

&НаКлиенте
Функция ОтправитьДокументыПоМассивуСтрок(МассивСтрок,МассивПакетов,ДанныеИнтеграции,ОбъектПлагин,Результат,HTTPСервисЗапрос_ТХЦ) Экспорт
	// Функция формирует и отправляет пакеты документов по отмеченным строкам в реестре, начиная с счСтрок	
	
	//ПолныйМассивПакетов = Новый Массив;  // Полный массив пакетов для отправки
	Всего = МассивСтрок.Количество();
	ПоследняяПартия = Ложь;
	счСтрок=0;
	//ПодключитьОбработчикОжидания("ПрерываниеПользователемФормированияДокументов",0.1,Истина);
	Пока счСтрок<Всего Цикл //Отправляемые пакеты
		Строка = МассивСтрок[счСтрок];
	//	Если Кэш.Свойство("ПрерватьОтправку") и Кэш.ПрерватьОтправку = Истина Тогда
	//		Прервать;
	//	КонецЕсли;
		счСтрок = счСтрок+1;
		Если счСтрок = Всего Тогда
			ПоследняяПартия = Истина;
		КонецЕсли;
		Состояние("Формирование электронных документов",Мин(100,Окр(счСтрок*100/Всего)));
		ДатаНач = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		РеквизитыДокумента_1=Новый Структура;
		ОткрытьФорму_1=Ложь;
		Сообщения=Неопределено;
		
		СтрокаXML =
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВывестиТабличнД(Строка.Значение,ОткрытьФорму_1,Сообщения,ПриПроверкеСхемыПриОтгрузкеЕслиОшибкаНеФормироватьФайл,ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОТензор"));	
		
		Если ЗначениеЗаполнено(СтрокаXML) Тогда
			ДанныеФайла = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(СтрокаXML.Текстовыйдо.Получитьтекст(),КодировкаТекста.ANSI);//ДвоичныеДанныеИзСтрокиXML(СтрокаXML.Текстовыйдо.Получитьтекст());
			
			РеквизитыДокумента_1.Вставить("ИмяФайлаЭД",СтрокаXML.ИмяФайла);
			РеквизитыДокумента_1.Вставить("ИдентификаторЭД",СтрокаXML.ИдР);
		
		Иначе
			Сообщить("В документе "+Строка(Строка.Значение)+" есть ошибки при формировании");
			Продолжить
		КонецЕсли;
		

		Отказ=Ложь;
		
		ТелоJSON=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ЗаписьДокумента(Строка.Значение,РеквизитыДокумента_1,ДанныеФайла);
		HTTPЗапрос=Новый HTTPЗапрос("service/?srv=1");
		
		HTTPЗапрос.Заголовки.Вставить("X-SBISSessionID",	Результат);
		HTTPЗапрос.Заголовки.Вставить("Content-Type",	"application/json; charset=utf-8");
	//	HTTPЗапрос.Заголовки.Вставить("User-Agent",	"1C8.3.10.2772_VO2.0.35.1");
	//	HTTPЗапрос.Заголовки.Вставить("X-API-Version",	"2.3.1");
		
		
		#Если ВебКлиент Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(ТелоJSON,"UTF-8");
				#Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(ТелоJSON,"UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
			
		
		Ответ=HTTPСервисЗапрос_ТХЦ.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ТТТ_Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);	
		
		Если Ответ.КодСостояния=200 Тогда	
			
			Ид=ТТТ_Ответ.result.Идентификатор;
			ЗаписатьСБ(Строка.Значение,Ид,СтрокаXML.ИмяФайла);
			ИдентификаторДляОтправки=Ид;
			Этаформа.Прочитать();
			//Продолжить;   
			
			 		
		
		МассивПодготовленныхПакетов = ПодготовитьСтруктуруДокумента1С(Строка.Значение,СтрокаXML,ТТТ_Ответ.result);
		ДатаКнц = ТекущаяУниверсальнаяДатаВМиллисекундах();
//		Кэш.РезультатОтправки.ВремяФормирования = Кэш.РезультатОтправки.ВремяФормирования+(ДатаКнц-ДатаНач)/1000;
		РезультатОтправки = ОтправитьПодготовленныеДокументы(МассивПодготовленныхПакетов,0,МассивСтрок,счСтрок,ДанныеИнтеграции,ОбъектПлагин,СтрокаXML.ИмяФайла,Строка.Значение);
		//Если РезультатОтправки = Ложь Тогда
		//	Возврат Ложь;
		//КонецЕсли;
		//Если ТипЗнч(РезультатОтправки) = Тип("Структура") Тогда
		//	Возврат РезультатОтправки;
	Иначе
		Сообщить("Ошибка отправки "+Текст1);
		КонецЕсли;
		
	КонецЦикла;
КонецФункции

&НаКлиенте
Функция ОтправитьПакетыДокументов(МассивПакетов, РезультатОтправки=Неопределено,ДанныеИнтеграции,ОбъектПлагин,ИмяФайла,Докум) Экспорт
	// Отправляет сформированные пакеты документов	
	
	КоличествоПакетов = МассивПакетов.Количество();
	Если КоличествоПакетов = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СоставПакета = МассивПакетов[0];
	
	ОтправитьДокументВСвободныйПоток(СоставПакета, Ложь,ДанныеИнтеграции,ОбъектПлагин,ИмяФайла,Докум);
КонецФункции



&НаКлиенте
Функция ОбработатьСлужебныеДокументыПоПакету(СоставПакета,ДанныеИнтеграции,ОбъектПлагин) Экспорт
	Отказ				= Ложь;
	//МестныйКэш			= Кэш;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	
	Парам   = Новый Структура;
	Парам.Вставить("ИдентификаторДокумента",СоставПакета.Идентификатор);
	
	ИнформацияПоНеобработанным = РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ОтправитьИОбработатьКоманду("ReadServiceStagesInfo", Парам, ДопПараметрыЗапроса, Отказ,ДанныеИнтеграции,ОбъектПлагин);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Всего = Число(ИнформацияПоНеобработанным.ЧислоНеобработанныхЭтапов);
	
	Если Всего>0 Тогда
		ДопПараметрыЗапроса = Новый Структура;
		РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ОтправитьИОбработатьКоманду( "ProcessServiceStagesEx", Парам, ДопПараметрыЗапроса, Отказ,ДанныеИнтеграции,ОбъектПлагин);
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьСписокСертификатов(filter=Неопределено,ДанныеИнтеграции,ОбъектПлагин) Экспорт
	//МестныйКэш			= Кэш;
	Отказ				= Ложь;
	СписокСертификатов	= Новый СписокЗначений();
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	
	Если filter=Неопределено Тогда
		filter = Новый Структура;
	КонецЕсли;
	
	РезультатЗапроса = РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ОтправитьИОбработатьКоманду("ReadCertificates", filter, ДопПараметрыЗапроса,Отказ,ДанныеИнтеграции,ОбъектПлагин);
	Если Отказ Тогда
		Возврат СписокСертификатов;
	КонецЕсли;
	
	ObjectList = РезультатЗапроса.Сертификат;
	Если ObjectList<>Неопределено Тогда
		Размер = ObjectList.Количество();
		Для сч=0 По Размер-1 Цикл
			Сертификат = ObjectList[сч];
			Если ТипЗнч(Сертификат.ДействителенПо)=Тип("Дата") Тогда
				ДействителенПо = Дата(Год(Сертификат.ДействителенПо), Месяц(Сертификат.ДействителенПо), День(Сертификат.ДействителенПо));
			Иначе
				ДействителенПо = Дата(Сред(Сертификат.ДействителенПо,7,4), Сред(Сертификат.ДействителенПо,4,2), Лев(Сертификат.ДействителенПо, 2));
			КонецЕсли;
			Если ДействителенПо>=ТекущаяДата() Тогда
				СписокСертификатов.Добавить(Сертификат);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокСертификатов;
КонецФункции


&НаКлиенте
Функция сбВыполнитьДействие(СоставПакета, Этап, Действие, Комментарий, ПредставлениеПакета,ДанныеИнтеграции,ОбъектПлагин) Экспорт
	Отказ				= Ложь;
	//МестныйКэш			= Кэш;
	//ГлавноеОкно			= Кэш.ГлавноеОкно;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	     
	Если СоставПакета.Свойство("НашаОрганизация") Тогда
		ИННОрг = ?(СоставПакета.НашаОрганизация.Свойство("СвЮЛ"), СоставПакета.НашаОрганизация.СвЮЛ.ИНН, СоставПакета.НашаОрганизация.СвФЛ.ИНН);
	Иначе
		ИННОрг = "";
	КонецЕсли;
	//Если Кэш.КэшСертификатов.Свойство("с"+ИННОрг) и Кэш.КэшСертификатов["с"+ИННОрг]<>Неопределено и ТекущаяДата()-Кэш.КэшСертификатов.ДатаОбновления<=60 Тогда
	//	Сертификат = Кэш.КэшСертификатов["с"+ИННОрг];
	//Иначе
		СписокСертификатов = ПолучитьСписокСертификатов( Новый Структура("ИНН",ИННОрг),ДанныеИнтеграции,ОбъектПлагин);
		Если СписокСертификатов.Количество()>0 Тогда
			Сертификат = СписокСертификатов[0].Значение;	
		Иначе
			Сертификат = Неопределено;
		КонецЕсли;
		//Кэш.КэшСертификатов.Вставить("с"+ИННОрг,Сертификат);
		//Кэш.КэшСертификатов.Вставить("ДатаОбновления", ТекущаяДата());
	//КонецЕсли;
	Если (Сертификат = Неопределено) и (Действие.ТребуетПодписания = "Да") Тогда
		Сообщить("Отсутствует сертификат ЭЦП для утверждения/отклонения пакета документов "+ПредставлениеПакета);
		Возврат Ложь;
	КонецЕсли;
	ОбработатьСлужебныеДокументыПоПакету(СоставПакета,ДанныеИнтеграции,ОбъектПлагин);
	
	// Назначение действие на этап
	action = Новый Структура;
	action.Вставить("Название", Действие.Название);
	Если Сертификат <> Неопределено Тогда
		certificate = Сертификат;
		action.Вставить("Сертификат", certificate);
		Действие.Вставить("Сертификат", certificate);
	КонецЕсли;
	Если Комментарий<>"" Тогда
		action.Вставить("Комментарий", Комментарий);
	КонецЕсли;	
	
	
	// Назначение этапа
	stage = Новый Структура;
	stage.Вставить("Название", Этап.Название);
	stage.Вставить("Идентификатор",Этап.Идентификатор); 
	stage.Вставить("Действие", action);
	
	
	document_in = Новый Структура;
	document_in.Вставить( "Этап", stage );
	document_in.Вставить( "Идентификатор", СоставПакета.Идентификатор );	
	
	// Подготовка этапа
	prepared_document = РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ОтправитьИОбработатьКоманду("PrepareAction", document_in, ДопПараметрыЗапроса, Отказ,ДанныеИнтеграции,ОбъектПлагин);
	Если Отказ Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	attachmentListPrepared = ?(prepared_document.Этап[0].Свойство("Вложение"),prepared_document.Этап[0].Вложение,Новый Массив);
	Размер = attachmentListPrepared.Количество();
	attachmentList = Новый Массив;  // вложения, которые будем передавать в ВыполнитьДействие
	
	//UAA формирование титулов
	сбисПараметрыТитулов = Новый Структура("РезультатПодготовки", prepared_document);
	ОшибкаФормирования = Ложь;
	РезультатФормирования = СформироватьТитулы(СоставПакета, Действие, сбисПараметрыТитулов, ОшибкаФормирования);
	Если ОшибкаФормирования Тогда
		//Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Кэш.ОбщиеФункции.сбисИсключение(РезультатФормирования, "ExtSDK.сбисВыполнитьДействие"));
		Возврат Ложь;
	КонецЕсли;
	// формирование титулов для зашифрованных вложений
	Шифрование = сбисПараметрыТитулов.Шифрование;
	
	Если Сертификат <> Неопределено и Сертификат.Ключ.Тип = "Клиентский" и Действие.ТребуетПодписания = "Да" Тогда  // если ключ клиентский, то надо передать все вложения в ExecuteAction для подписания
		Для сч=0 По Размер-1 Цикл
			Запись = attachmentListPrepared[сч];
			attachment = Новый Структура;
			attachment.Вставить( "Идентификатор",  Запись.Идентификатор);
			file = Новый Структура;
			file.Вставить( "Имя", Запись.Файл.Имя );
			file.Вставить( "Хеш", Запись.Файл.Хеш ); 
			Если Запись.Свойство("Зашифрован") и Запись.Зашифрован = "Да" Тогда   // для зашифрованных вложений передаем ссылку, чтобы в ExecuteAction получить данные, расшифровать и подписать
				attachment.Вставить( "Зашифрован",  "Да");	
				file.Вставить( "Ссылка", Запись.Файл.Ссылка );
			КонецЕсли;
			attachment.Вставить( "Файл", file );
			attachmentList.Добавить( attachment );
		КонецЦикла;	
	КонецЕсли;
	
	Если СоставПакета.Свойство("Вложение") Тогда
		// ищем подтверждение заказа, чтобы проставить подтверждению, сформированному в 1С, тот же идентификатор
		ИдПодтвЗаказа = "";
		НомПодтвЗаказа = 0;
		Для сч=0 По Размер-1 Цикл
			Запись = attachmentListPrepared[сч];
			Если Запись.Свойство("Тип") и Запись.Тип = "ПодтверждениеЗаказа" Тогда
				ИдПодтвЗаказа = Запись.Идентификатор;
				НомПодтвЗаказа = сч;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Вложение Из СоставПакета.Вложение Цикл
			Если Не Вложение.Свойство("Идентификатор") Тогда
				attachment = Новый Структура;
				file = Новый Структура;
				ИмяФайла = ?(Вложение.Свойство("ИмяФайла"),Вложение.ИмяФайла,Вложение.СтруктураФайла.Файл.Имя+"__"+Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+"_"+строка(Новый УникальныйИдентификатор())+".xml");
				file.Вставить( "Имя", ИмяФайла ); 
				file.Вставить( "ДвоичныеДанные", ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.сбСтрокаВBASE64(Вложение.XMLДокумента) ); 
				attachment.Вставить( "Файл", file );
				Если (Вложение.Название="Подтверждение заказа" и ЗначениеЗаполнено(ИдПодтвЗаказа) ) Тогда 
					ИдВложения = ИдПодтвЗаказа; 
					Если Сертификат <> Неопределено и Сертификат.Ключ.Тип = "Клиентский" и Действие.ТребуетПодписания = "Да" Тогда  // если ключ клиентский, значит подтверждение, сформированное онлайном, нужно удалить из списка вложений и добавить наше подтверждение
						attachmentList.Удалить(НомПодтвЗаказа);
					КонецЕсли;
				Иначе 
					ИдВложения = строка(Новый УникальныйИдентификатор());
				КонецЕсли;
				attachment.Вставить( "Идентификатор",  ИдВложения);
				Если Шифрование Тогда      // если входящие документы зашифрованы, то и ответ шифруем
					attachment.Вставить( "ТребуетШифрования",  "Да");
					Если Вложение.Свойство("Тип") и ЗначениеЗаполнено(Вложение.Тип) и ЗначениеЗаполнено(Вложение.ВерсияФормата) Тогда
						attachment.Вставить( "Тип",  Вложение.Тип);
						attachment.Вставить( "Подтип",  Вложение.ПодТип);
						attachment.Вставить( "ВерсияФормата",  Вложение.ВерсияФормата);
					КонецЕсли;
					Если Вложение.Свойство("Дата") и ЗначениеЗаполнено(Вложение.Дата) Тогда
						attachment.Вставить( "Дата",  Вложение.Дата);
					КонецЕсли;
					Если Вложение.Свойство("Название") и ЗначениеЗаполнено(Вложение.Название) Тогда
						attachment.Вставить( "Название",  Вложение.Название);
					КонецЕсли;
				КонецЕсли;
				
				attachment.Вставить( "Служебный",  ?(Вложение.Свойство("Служебный"),Вложение.Служебный,"Нет"));
				attachmentList.Добавить( attachment );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	prepared_stage = prepared_document.Этап[0];
	prepared_action = prepared_document.Этап[0].Действие[0];
	prepared_certificates = ?(prepared_action.Свойство("Сертификат"),prepared_action.Сертификат,Неопределено);
	certificates = Новый Массив;
	Если prepared_certificates<>Неопределено Тогда
		КолСерт = prepared_certificates.Количество();
		Для сч=0 По КолСерт-1 Цикл
			certificate = Новый Структура;
			certificate.Вставить( "Отпечаток", prepared_certificates[сч].Отпечаток );
			certificates.Добавить( certificate );
		КонецЦикла;
	КонецЕсли;
	action = Новый Структура;
	action.Вставить("Комментарий", prepared_action.Комментарий);
	action.Вставить("Название", prepared_action.Название);
	action.Вставить("Идентификатор", ?(prepared_action.Свойство("Идентификатор"),prepared_action.Идентификатор,""));
	action.Вставить("Сертификат", certificates);
	action.Вставить("ТребуетПодписания", prepared_action.ТребуетПодписания);
	stage = Новый Структура;
	stage.Вставить("Действие", action);
	stage.Вставить("Вложение", attachmentList);
	stage.Вставить("Идентификатор", prepared_stage.Идентификатор);
	stage.Вставить("Название", prepared_stage.Название);
	Если Этап.Свойство("Исполнитель") Тогда
		stage.Вставить("Исполнитель", Этап.Исполнитель);
	КонецЕсли;
	document_in = Новый Структура;
	document_in.Вставить( "Идентификатор", prepared_document.Идентификатор );
	prepared_redact = prepared_document.Редакция;
	redactions = Новый Массив;
	КолРедакций = prepared_redact.Количество();
	Для сч=0 По КолРедакций-1 Цикл
		redaction = Новый Структура;
		redaction.Вставить( "Идентификатор", prepared_redact[сч].Идентификатор );
		redactions.Добавить( redaction );
	КонецЦикла;
	document_in.Вставить( "Редакция", redactions );
	document_in.Вставить( "Этап", stage );
	// добавляем на случай шифрования
	Если СоставПакета.Свойство("НашаОрганизация") Тогда
		document_in.Вставить( "НашаОрганизация", СоставПакета.НашаОрганизация );
	КонецЕсли;
	Если СоставПакета.Свойство("Контрагент") Тогда
		document_in.Вставить( "Контрагент", СоставПакета.Контрагент );
	КонецЕсли;
	
	// Завершение этапа
	ДопПараметрыЗапроса	= Новый Структура;
	Парам = Новый Структура("document_in", document_in);
	РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ОтправитьИОбработатьКоманду( "ExecuteAction2", Парам, ДопПараметрыЗапроса, Отказ,ДанныеИнтеграции,ОбъектПлагин);
	
	Возврат Не Отказ;
КонецФункции


&НаКлиенте
Процедура ОтправитьДокументВСвободныйПоток(СоставПакета, ДокументИзКэша,ДанныеИнтеграции,ОбъектПлагин,ИмяФайла,Докум)
	// отправляет пакет в свободный поток или добавляет в очередь, обрабатывает статусы
	   Попытка
	Действие=Новый Структура;
	Идентифкатор="";
	СоставПакета.Свойство("Идентификатор",Идентифкатор);
	Действие.Вставить("Идентификатор",Идентифкатор);
	Действие.Вставить("Комментарий","");
	Действие.Вставить("Название","Отправить");
	Действие.Вставить("ТипПодписи","Отсоединенная");
	Действие.Вставить("ТребуетИсполнителя","Нет");
	Действие.ВставитЬ("ТребуетКомментария","Нет");
	Действие.Вставить("ТребуетПодписания","Да");
	Действие.ВставитЬ("ТребуетРасшифровки","Нет");
	

	Комментарий="";
	ПараметрыДействия=СоставПакета.Этап[0];
	
	результат = сбВыполнитьДействие(СоставПакета,ПараметрыДействия , Действие, Комментарий, "",ДанныеИнтеграции,ОбъектПлагин);
	//Если НЕ Отказ Тогда
ОбновитьСтатусДокументаСБ(Докум,СоставПакета)	
	                     //		ЗаписатьСБ(СоставПакета.Вложение[0].Документы1С[0].Значение,ПараметрыДействия.document_in.Идентификатор,ИмяФайла);
		
	//	Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Результат);
	//	//Пока оставляем без изменений. Если упал метод, то продолжаем. ВОзможно, имеет смысл прервать выполнение
	//КонецЕсли;
	
	
	         
	 Исключение
	
	
	
	
		Плагин_WriteDocumentEx(СоставПакета,ДанныеИнтеграции,ОбъектПлагин,ИмяФайла);	
	КонецПопытки;;	 
КонецПроцедуры

&НаКлиенте
Функция Плагин_WriteDocumentEx(СоставПакета,ДанныеИнтеграции,ОбъектПлагин,ИмяФайла)
	Отказ = Ложь;
	ПараметрыВыполнить = Новый Структура("СоставПакета, ДокументОтправить", СоставПакета);
	ПараметрыВыполнить.ДокументОтправить = ПодготовитьСтруктуруПакетаДляОтправки(СоставПакета, Отказ);
	Если Отказ Тогда
		//Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, ПараметрыВыполнить.ДокументОтправить);
		Возврат Неопределено;
	КонецЕсли;
	Плагин_WriteDocumentEx_Выполнить( ПараметрыВыполнить,ДанныеИнтеграции,ОбъектПлагин,ИмяФайла);
КонецФункции


&НаКлиенте
Функция Плагин_WriteDocumentEx_Выполнить(ПараметрыВыполнить,ДанныеИнтеграции,ОбъектПлагин,ИмяФайла) Экспорт 
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ПолучитьОтвет", Ложь, Истина, Ложь);
	ОсновнойДокумент1С	= Неопределено;
	СоставПакета		= ПараметрыВыполнить.СоставПакета;

	МассивСтатусРегламент = Новый Массив;
	
	ИдентификаторОтправки = Формат("0", "ЧГ=0") + "_" + Формат(ТекущаяДата(), "ДФ=""дд.ММ.гггг ЧЧ:мм:сс""");
	ДопПараметрыЗапроса.Вставить("Идентификатор", ИдентификаторОтправки);
	//Кэш.РезультатОтправки.ДетализацияОтправки.Вставить(ИдентификаторОтправки, Новый Структура("ДатНач, ВремяВыполнения",ТекущаяУниверсальнаяДатаВМиллисекундах()));
	//
	//Если	СоставПакета.Свойство("НеЗапускатьВДокументооборот")
	//	И	СоставПакета.НеЗапускатьВДокументооборот = Истина Тогда
	//	ПараметрыВыполнить.ДокументОтправить.Вставить("НеЗапускатьВДокументооборот", "Да");
	//КонецЕсли;
	//Если	СоставПакета.Вложение.Количество()
	//	И	СоставПакета.Вложение[0].Свойство("Документы1С") Тогда
	//	ОсновнойДокумент1С = СоставПакета.Вложение[0].Документы1С[0].Значение;
	//КонецЕсли;
	//
	ПараметрыЗаписи = Новый Структура("document_in, prepare", ПараметрыВыполнить.ДокументОтправить, Истина);
	Результат = РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ОтправитьИОбработатьКоманду("WriteDocumentEx2", ПараметрыЗаписи, ДопПараметрыЗапроса, Отказ,ДанныеИнтеграции,ОбъектПлагин);
	Если НЕ Отказ Тогда
		ЗаписатьСБ(СоставПакета.Вложение[0].Документы1С[0].Значение,ПараметрыЗаписи.document_in.Идентификатор,ИмяФайла);
		
	//	Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Результат);
	//	//Пока оставляем без изменений. Если упал метод, то продолжаем. ВОзможно, имеет смысл прервать выполнение
	КонецЕсли;
	//
	//Статусы = Новый Массив;
	////KES 050751151 ver 2 Статусы в разрезе регламентов ExtSDK-->
	//СтатусРегламент = "";
	//Если СоставПакета.Свойство("Регламент") 
	//	И СоставПакета.Регламент.Свойство("Название") 
	//	И НЕ МассивСтатусРегламент.Найти(СоставПакета.Регламент.Название)=Неопределено Тогда
	//	СтатусРегламент = СоставПакета.Регламент.Название; 
	//КонецЕсли;
	////<-- KES 050751151 ver 2 Статусы в разрезе регламентов ExtSDK

	//Для Каждого Вложение Из СоставПакета.Вложение Цикл
	//	Если Не Вложение.Свойство("Документы1С") Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	Для Каждого Документ1С Из Вложение.Документы1С Цикл
	//		СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус", СоставПакета.Идентификатор,Вложение.Идентификатор,);
	//		//KES 050751151 ver 2 Статусы в разрезе регламентов ExtSDK-->
	//		Статусы.Добавить(Новый Структура("СтруктураСвойств, Документ1С, Регламент", СтруктураСвойств, Документ1С.Значение, СтатусРегламент));
	//		//<-- KES 050751151 ver 2 Статусы в разрезе регламентов ExtSDK
	//	КонецЦикла;
	//КонецЦикла;
	//Кэш.РезультатОтправки.ДанныеПоСтатусам.Добавить(Новый Структура("Идентификатор, ОсновнойДокумент1С, Статусы",ИдентификаторОтправки, ОсновнойДокумент1С, Статусы));
	//Кэш.РезультатОтправки.СформированныеПакеты.Вставить(ИдентификаторОтправки, СоставПакета); // складываем сюда пакеты, чтобы можно было переотправить. После получения ответов - чистим, чтобы не переполнилась память
	//Кэш.РезультатОтправки.КоличествоСвободныхПотоков = Кэш.РезультатОтправки.КоличествоСвободныхПотоков-1;
КонецФункции



&НаКлиенте
Функция ПодготовитьСтруктуруПакетаДляОтправки(СоставПакета, Отказ=Ложь) Экспорт
	document = Новый Структура;
	Если СоставПакета.Свойство("Дата") и ЗначениеЗаполнено(СоставПакета.Дата) Тогда
		document.Вставить( "Дата",СоставПакета.Дата);	
	КонецЕсли;
	Если СоставПакета.Свойство("Номер") и ЗначениеЗаполнено(СоставПакета.Номер) Тогда
		document.Вставить( "Номер",СоставПакета.Номер);	
	КонецЕсли;
	Если СоставПакета.Свойство("Сумма") и ЗначениеЗаполнено(СоставПакета.Сумма) Тогда
		document.Вставить( "Сумма",СоставПакета.Сумма);	
	КонецЕсли;
	attachmentList = Новый Массив;
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		attachment = Новый Структура;
		Если Вложение.Свойство("Зашифрован") Тогда   // может быть в случае пересылки зашифрованных пакетов
			attachment.Вставить( "Зашифрован", Вложение.Зашифрован);
		КонецЕсли;
		file = Новый Структура;
//		Если Вложение.Свойство("ПолноеИмяФайла") Тогда // внешний файл добавлен в пакет
//			file.Вставить( "Имя", Вложение.ИмяФайла ); 
//			ФайлТест = Новый Файл(Вложение.ПолноеИмяФайла);
//			//Если ФайлТест.Размер() > 73400320 Тогда
//			//	РезультатОтправки = сбисОтправитьБольшойФайл(МестныйКэш, Вложение, , Отказ);
//			//	Если Отказ Тогда
//			//		Возврат РезультатОтправки;
//			//	КонецЕсли;
//			//	file.Вставить("Ссылка", РезультатОтправки);
////			Иначе
//				file.Вставить( "ДвоичныеДанные", сбисФайлСКлиентаВBASE64(Вложение.ПолноеИмяФайла));
////			КонецЕсли;
//		Иначе  // сформирован xml
			ИмяФайла = Вложение.СтруктураФайла.Файл.Имя;
			file.Вставить( "Имя", ИмяФайла ); 
			file.Вставить( "ДвоичныеДанные", ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.сбСтрокаВBASE64(Вложение.XMLДокумента) ); 
		//КонецЕсли;
		
		//Если Вложение.Свойство("Подпись") Тогда //d.ch
		//	ЭЦП = Новый Массив;
		//	Для Каждого Запись из Вложение.Подпись Цикл
		//		ЗаписьЭЦП = Новый Структура;
		//		Если Запись.Свойство("Направление") Тогда
		//			ЗаписьЭЦП.Вставить("Направление",Запись.Направление);
		//		КонецЕсли;
		//		ФайлЭЦП = Новый Структура;
		//		ФайлЭЦП.Вставить( "Имя", Запись.Файл.Имя ); 
		//		ФайлЭЦП.Вставить( "ДвоичныеДанные",сбисФайлСКлиентаВBASE64(Запись.Файл.ПолноеИмяФайла)); 
		//		ЗаписьЭЦП.Вставить("Файл",ФайлЭЦП);
		//		ЭЦП.Добавить(ЗаписьЭЦП);
		//	КонецЦикла;
		//	attachment.Вставить( "Подпись", ЭЦП );
		//КонецЕсли;
		
		attachment.Вставить( "Файл", file );
		ИдВложения = строка(Новый УникальныйИдентификатор());
		Вложение.Вставить("Идентификатор", ИдВложения);
		attachment.Вставить( "Идентификатор",  ИдВложения);
		// Пока не указываем, т.к. онлайн в этом случае не формирует красивые названия вложений
		//Если Вложение.Свойство("Тип") и ЗначениеЗаполнено(Вложение.Тип) и Вложение.Свойство("ПодТип") и ЗначениеЗаполнено(Вложение.ПодТип) и Вложение.Свойство("ВерсияФормата") и ЗначениеЗаполнено(Вложение.ВерсияФормата) Тогда
		//	attachment.Вставить( "Тип",  Вложение.Тип);
		//	attachment.Вставить( "Подтип",  Вложение.ПодТип);
		//	attachment.Вставить( "ВерсияФормата",  Вложение.ВерсияФормата);
		//	Если Вложение.Свойство("ПодВерсияФормата") и ЗначениеЗаполнено(Вложение.ПодВерсияФормата) Тогда
		//		attachment.Вставить( "ПодверсияФормата",  Вложение.ПодВерсияФормата);
		//	КонецЕсли;
		//КонецЕсли;
		attachmentList.Добавить( attachment );
	КонецЦикла;
	document.Вставить( "Тип",СоставПакета.Тип);	
	Если СоставПакета.Свойство("ПользовательскийИдентификатор") Тогда
		ИдПакета = Сред(СоставПакета.ПользовательскийИдентификатор,Найти(СоставПакета.ПользовательскийИдентификатор,":")+1);
	Иначе
		ИдПакета = строка(Новый УникальныйИдентификатор());
	КонецЕсли;
	
	СоставПакета.Вставить("Идентификатор", ИдПакета);
	document.Вставить( "Идентификатор", ИдПакета ); 
	Если СоставПакета.Свойство("ПользовательскийИдентификатор") Тогда
		redaction = Новый Структура;
		redaction.Вставить("ИдентификаторИС", СоставПакета.ПользовательскийИдентификатор);
		document.Вставить( "Редакция", redaction);
	КонецЕсли;
	Если СоставПакета.Свойство("Примечание") и ЗначениеЗаполнено(СоставПакета.Примечание) Тогда
		document.Вставить( "Примечание", СоставПакета.Примечание);
	КонецЕсли;
	document.Вставить( "Вложение", attachmentList );
	
	org = Новый Структура; 
	Если СоставПакета.НашаОрганизация.Свойство("СвФЛ") Тогда
		СвФЛ = Новый Структура;
		СвФЛ.Вставить( "ИНН", СоставПакета.НашаОрганизация.СвФЛ.ИНН); 
		org.Вставить( "СвФЛ", СвФЛ );	
	Иначе
		СвЮЛ = Новый Структура;
		СвЮЛ.Вставить( "ИНН", СоставПакета.НашаОрганизация.СвЮЛ.ИНН ); 
		СвЮЛ.Вставить( "КПП", СоставПакета.НашаОрганизация.СвЮЛ.КПП );
		Если СоставПакета.НашаОрганизация.СвЮЛ.Свойство("КодФилиала") Тогда
			СвЮЛ.Вставить( "КодФилиала", СоставПакета.НашаОрганизация.СвЮЛ.КодФилиала );	
		КонецЕсли;
		org.Вставить( "СвЮЛ", СвЮЛ );
	КонецЕсли;
	document.Вставить( "НашаОрганизация", org );
	
	Если СоставПакета.Свойство("Контрагент") Тогда
		kontr = Новый Структура; 
		Если СоставПакета.Контрагент.Свойство("СвФЛ") Тогда
			СвФЛ = Новый Структура;
			Если СоставПакета.Контрагент.Свойство("Параметр") Тогда
				Для Каждого Параметр из СоставПакета.Контрагент.Параметр Цикл
					Если Параметр.Имя = "ЧастноеЛицо" Тогда
						СвФЛ.Вставить("ЧастноеЛицо", Параметр.Значение);
					КонецЕсли;
					Если Параметр.Имя = "СНИЛС" Тогда
						СвФЛ.Вставить("СНИЛС", Параметр.Значение);						
					КонецЕсли;     					
				КонецЦикла;
			КонецЕсли;  
			Если СоставПакета.Контрагент.СвФЛ.Свойство("ИНН") Тогда  
				СвФЛ.Вставить( "ИНН", СоставПакета.Контрагент.СвФЛ.ИНН );
			КонецЕсли;
			Если СоставПакета.Контрагент.СвФЛ.Свойство("Фамилия") Тогда
				СвФЛ.Вставить( "Фамилия", СоставПакета.Контрагент.СвФЛ.Фамилия );	
			КонецЕсли;
			Если СоставПакета.Контрагент.СвФЛ.Свойство("Имя") Тогда
				СвФЛ.Вставить( "Имя", СоставПакета.Контрагент.СвФЛ.Имя );	
			КонецЕсли;
			Если СоставПакета.Контрагент.СвФЛ.Свойство("Отчество") Тогда
				СвФЛ.Вставить( "Отчество", СоставПакета.Контрагент.СвФЛ.Отчество );	
			КонецЕсли;
			kontr.Вставить( "СвФЛ", СвФЛ );	
		Иначе
			СвЮЛ = Новый Структура;
			СвЮЛ.Вставить( "ИНН", СоставПакета.Контрагент.СвЮЛ.ИНН ); 
			Если СоставПакета.Контрагент.СвЮЛ.Свойство("КПП") Тогда	// << bav
				СвЮЛ.Вставить( "КПП", СоставПакета.Контрагент.СвЮЛ.КПП );
			КонецЕсли;
			Если СоставПакета.Контрагент.СвЮЛ.Свойство("КодСтраны") Тогда
				СвЮЛ.Вставить( "КодСтраны", СоставПакета.Контрагент.СвЮЛ.КодСтраны );	
			КонецЕсли; // bav >>
			Если СоставПакета.Контрагент.СвЮЛ.Свойство("КодФилиала") Тогда
				СвЮЛ.Вставить( "КодФилиала", СоставПакета.Контрагент.СвЮЛ.КодФилиала );	
			КонецЕсли;
			Если СоставПакета.Контрагент.СвЮЛ.Свойство("Название") Тогда
				СвЮЛ.Вставить( "Название", СоставПакета.Контрагент.СвЮЛ.Название );	
			КонецЕсли;
			kontr.Вставить( "СвЮЛ", СвЮЛ );
		КонецЕсли;
		Если СоставПакета.Контрагент.Свойство("Подразделение") и СоставПакета.Контрагент.Подразделение.Свойство("Идентификатор") Тогда
			Подразделение = Новый Структура;
			Подразделение.Вставить( "Идентификатор", СоставПакета.Контрагент.Подразделение.Идентификатор); 
			kontr.Вставить( "Подразделение", Подразделение );
		КонецЕсли;	
		Если СоставПакета.Контрагент.Свойство("Контакт")  Тогда
			Если СоставПакета.Контрагент.Контакт.Свойство("Телефон")  Тогда
				kontr.Вставить( "Телефон", СоставПакета.Контрагент.Контакт.Телефон );
			КонецЕсли;
			Если СоставПакета.Контрагент.Контакт.Свойство("EMAIL")  Тогда
				kontr.Вставить( "Email", СоставПакета.Контрагент.Контакт.EMAIL );
			КонецЕсли;
		КонецЕсли;
		document.Вставить( "Контрагент", kontr );
	КонецЕсли;
	
	Если СоставПакета.Свойство("Ответственный") и СоставПакета.Ответственный.Количество()>0 Тогда
		otv = Новый Структура;
		Для Каждого Элемент Из СоставПакета.Ответственный Цикл
			otv.Вставить( Элемент.Ключ, Элемент.Значение );	
		КонецЦикла;
		document.Вставить( "Ответственный", otv ); 	
	КонецЕсли;
	Если СоставПакета.Свойство("Подразделение") и СоставПакета.Подразделение.Количество()>0 Тогда
		podrazdel = Новый Структура;
		Для Каждого Элемент Из СоставПакета.Подразделение Цикл
			podrazdel.Вставить( Элемент.Ключ, Элемент.Значение );	
		КонецЦикла;
		document.Вставить( "Подразделение", podrazdel ); 	
	КонецЕсли;
	Если СоставПакета.Свойство("Регламент") и СоставПакета.Регламент.Количество()>0 Тогда
		regl = Новый Структура;
		Для Каждого Элемент Из СоставПакета.Регламент Цикл
			regl.Вставить( Элемент.Ключ, Элемент.Значение );	
		КонецЦикла;
		document.Вставить( "Регламент", regl ); 	
	КонецЕсли;
	Если СоставПакета.Свойство("ДокументОснование") и СоставПакета.ДокументОснование.Количество()>0 Тогда
		osnovania = Новый Массив;
		Для Каждого ДокОсн Из СоставПакета.ДокументОснование Цикл 
			osn = Новый Структура;
			Если ДокОсн.Свойство("ВидСвязи") Тогда
				osn.Вставить( "ВидСвязи", ДокОсн.ВидСвязи );	
			КонецЕсли;
			doc = Новый Структура;
			Для Каждого Элемент Из ДокОсн Цикл
				Если Элемент.Ключ<>"ВидСвязи" Тогда
					doc.Вставить( Элемент.Ключ, Элемент.Значение );	
				КонецЕсли;
			КонецЦикла;
			osn.Вставить( "Документ", doc );
			osnovania.Добавить(osn);
		КонецЦикла;
		document.Вставить( "ДокументОснование", osnovania ); 				
	КонецЕсли;
	Возврат document;
КонецФункции


&НаКлиенте
Функция ОтправитьПартиюПакетов( МассивПакетов,ДанныеИнтеграции,ОбъектПлагин,ИмяФайла,ДОкум) Экспорт
	// Функция выполняет отправку партии подготовленных пакетов документов через форму интеграции. Так же отправляет каталог номенклатуры.
	ОтправитьПакетыДокументов(МассивПакетов,,ДанныеИнтеграции,ОбъектПлагин,ИмяФайла,ДОкум);
	//Если Кэш.РезультатОтправки.Свойство("ПереотправитьПартию") Тогда
	//	МассивНеотправленныхПакетов = Новый Массив;
	//	Для Каждого Пакет Из МассивПакетов Цикл
	//		Если НЕ Пакет.Свойство("Отправлен") Тогда
	//			МассивНеотправленныхПакетов.Добавить(Пакет);
	//		КонецЕсли;
	//	КонецЦикла;
	//	Кэш.ФормаОтправки.ОтправитьПакетыДокументов(Кэш, МассивНеотправленныхПакетов);
	//	Кэш.РезультатОтправки.Удалить("ПереотправитьПартию");
	//КонецЕсли;
	//Кэш.РезультатОтправки.ВсегоПакетов = Кэш.РезультатОтправки.ВсегоПакетов+МассивПакетов.Количество();
	//МассивПакетов.Очистить();
	//СтруктураИниФайла = Кэш.Ини;
	//Если	Кэш.Парам.ОтправлятьНоменклатуруСДокументами = Истина
	//	И	СтруктураИниФайла.Свойство("Номенклатура",СтруктураИниФайла)
	//	И	СтруктураИниФайла.Свойство("мФайл",СтруктураИниФайла)
	//	И	СтруктураИниФайла.Свойство("Номенклатура",СтруктураИниФайла) Тогда
	//	ИниНоменклатура = Новый Структура;
	//	Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(ИниНоменклатура, СтруктураИниФайла);
	//	КаталогОтправлен = Кэш.ОбщиеФункции.сбисСформироватьОтправитьКаталогТоваров(Кэш, Новый Структура("СписокНоменклатуры, Организация",Кэш.СписокНоменклатуры),ИниНоменклатура,Новый Структура("РеквизитСопоставленияНоменклатуры", Кэш.КэшЗначенийИни.РеквизитСопоставленияНоменклатуры));
	//	Кэш.СписокНоменклатуры.Очистить();
	//КонецЕсли;

КонецФункции

&НаКлиенте
Функция ОтправитьПодготовленныеДокументы(МассивПодготовленныхПакетов,счПодготовленныхПакетов,МассивСтрок,счСтрок,ДанныеИнтеграции,ОбъектПлагин,ИмяФайла,Докум) Экспорт
	// Функция отправляет подготовленный пакеты. 	
	          МассивПакетов=Новый Массив;
			  МассивПакетов.Очистить();
	КолПакетов = МассивПодготовленныхПакетов.Количество();
	Пока счПодготовленныхПакетов<КолПакетов Цикл
		Пакет = МассивПодготовленныхПакетов[счПодготовленныхПакетов];
					
		счПодготовленныхПакетов = счПодготовленныхПакетов+1;
		ПолныйСоставПакета = Пакет;
		
		
		Если ПолныйСоставПакета.Свойство("Ошибка") Тогда
			//Кэш.РезультатОтправки.ОшибкиДоОтправки = Кэш.РезультатОтправки.ОшибкиДоОтправки + 1;
			//Если ПолныйСоставПакета.Свойство("Вложение") и ПолныйСоставПакета.Вложение.Количество()>0 и ПолныйСоставПакета.Вложение[0].Свойство("Документы1С") Тогда
			//	ОсновнойДокумент1С = ПолныйСоставПакета.Вложение[0].Документы1С[0].Значение;
			//Иначе
			//	ОсновнойДокумент1С = Неопределено;
			//КонецЕсли;
			//Кэш.ОбщиеФункции.ДобавитьОшибкуВРезультатОтправки(Кэш, ПолныйСоставПакета.Ошибка, ПолныйСоставПакета.Ошибка, ОсновнойДокумент1С);
		Иначе
			ИННОтправителя = ?(ПолныйСоставПакета.НашаОрганизация.Свойство("СвФЛ"),ПолныйСоставПакета.НашаОрганизация.СвФЛ.ИНН,ПолныйСоставПакета.НашаОрганизация.СвЮЛ.ИНН);
			//Если ИННОтправителей.НайтиПоЗначению(ИННОтправителя)=Неопределено и УжеАктивированы.НайтиПоЗначению(ИННОтправителя)=Неопределено Тогда 
			//	ИННОтправителей.Добавить(ИННОтправителя);
			//КонецЕсли;
			Если ПолныйСоставПакета.Свойство("Вложение") Тогда
				
				МассивПакетов.Добавить(ПолныйСоставПакета);
				
				//Если МассивПакетов.Количество() = Кэш.КоличествоВОтправке Тогда
					// если надо активировать сертификаты
				//	Если ИННОтправителей.Количество()>0 Тогда
						//СписокСертификатов = Кэш.Интеграция.ПолучитьСертификатыДляАктивации(Кэш, ИННОтправителей);
						//Если СписокСертификатов.Количество()>0 Тогда
						//	Возврат Новый Структура("МассивПакетов, СписокСертификатов, МассивПодготовленныхПакетов, счПодготовленныхПакетов,МассивСтрок,счСтрок, ИННОтправителей, УжеАктивированы, ПоследняяПартия", МассивПакетов, СписокСертификатов, МассивПодготовленныхПакетов, счПодготовленныхПакетов,МассивСтрок,счСтрок, ИННОтправителей, УжеАктивированы, ПоследняяПартия);
						//КонецЕсли;
				//		Для Каждого Элемент Из ИННОтправителей Цикл
							//УжеАктивированы.Добавить(Элемент.Значение);
				//		КонецЦикла;
				//		ИННОтправителей.Очистить();
				//	КонецЕсли;
					// если ничего не надо активировать, то отправляем партию пакетов
					ОтправитьПартиюПакетов( МассивПакетов,ДанныеИнтеграции,ОбъектПлагин,ИмяФайла,Докум);
			//	КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//Если ПоследняяПартия Тогда
	//	
	//	Если ИННОтправителей.Количество()>0 Тогда
	//		СписокСертификатов = Кэш.Интеграция.ПолучитьСертификатыДляАктивации(Кэш, ИННОтправителей);
	//		Если СписокСертификатов.Количество()>0 Тогда
	//			Возврат Новый Структура("МассивПакетов, СписокСертификатов, МассивПодготовленныхПакетов, счПодготовленныхПакетов,МассивСтрок,счСтрок, ИННОтправителей, УжеАктивированы, ПоследняяПартия", МассивПакетов, СписокСертификатов, МассивПодготовленныхПакетов, счПодготовленныхПакетов,МассивСтрок,счСтрок, ИННОтправителей, УжеАктивированы, ПоследняяПартия);
	//		КонецЕсли;
	//		Для Каждого Элемент Из ИННОтправителей Цикл
	//			УжеАктивированы.Добавить(Элемент.Значение);
	//		КонецЦикла;
	//		ИННОтправителей.Очистить();
	//	КонецЕсли;
	//	
	//	ОтправитьПартиюПакетов(Кэш, МассивПакетов);
	//	
	//	Кэш.ФормаОтправки.сбисПолучитьОтветыПоОтправке(Кэш);
	//	Кэш.РезультатОтправки.НеОтправлено = Кэш.РезультатОтправки.ВсегоПакетов-Кэш.РезультатОтправки.Отправлено+Кэш.РезультатОтправки.ОшибкиДоОтправки;
	//	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисПослеОтправкиПакетов","РаботаСДокументами1С","", Кэш);
	//	Если фрм<>Ложь Тогда
	//		фрм.сбисПослеОтправкиПакетов(Кэш);	
	//	КонецЕсли;
	//	Если Не Кэш.ТихийРежим Тогда
	//		Если Кэш.РезультатОтправки.Свойство("ФормаОтправки") Тогда
	//			сбисПолучитьФорму(Кэш.РезультатОтправки.ФормаОтправки).ПослеОтправки(Кэш);
	//		Иначе
	//			фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПоказатьРезультатОтправки","ФормаРезультатОтправки","", Кэш);
	//			фрм.ПоказатьРезультатОтправки(Кэш);
	//			Если Кэш.РезультатОтправки.Свойство("ОтправкаИзПересылки") Тогда
	//				сбисПолучитьФорму("ФормаПересылкаПакетов").ПослеОтправки(Кэш);
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ОтправитьВЭДОСБ_Массив(МассивНакладных) Экспорт
	

	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Если НЕ Форм.Открыта() Тогда
		Форм.Открыть();
	КонецЕсли;
	
	Thumbprint_1=ПолучитьИзПользователя();	
	
	
	 Сч=0;
	 Пока Сч<МассивНакладных.Количество() Цикл
	//Для Каждого Стр_1 Из МассивНакладных Цикл
	    Стр_1=МассивНакладных[Сч];
		Форма1=ПолучитЬФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаДокумента",
		Новый Структура("Ключ",Стр_1));
		Если Форма1.ПроверитьПоКМ()=Ложь Тогда
			Сообщить("Одна из КМ не принадлежит Вам или не введена в оборот!! Документ "+Строка(Форма1.Объект.Ссылка)+" не отправлен");
			МассивНакладных.Удалить(Сч);
			Продолжить;
		Конецесли;

		Форма1.ОПределитьУпаковки(Thumbprint_1);
		Форма1.Записать();
		Сч=Сч+1;
	Конеццикла;
	
	
	ОтправитьВСБИСПоНовому(МассивНакладных,Thumbprint_1);
	
	Если МассивНакладных.Количество()>0 Тогда
//		ОбновитьСтатусыДокументов(кОМАНДА,,,МассивВ);
		//Thumbprint_1=ПолучитьИзПользователя();	
		СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		СерийныйНомер="";
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			Попытка
				СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
			исключение
				СРегистра=Неопределено;
			КонецПопытки;
			
		КонецЕсли;
		ОбработаноМассив=Новый Массив;
		ВернутьДокументы_Отгрузка=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусыДокументовНаСервереОтгрузка(МассивНакладных,Форм.Пользователь);
		Форм.ОбновитьОтгрузкуПоМассивуНакладных(Thumbprint_1,СРегистра,ВернутьДокументы_Отгрузка,ОбработаноМассив);
	КонецЕсли;
	
	ЭтаФорма.Прочитать();
	
КонецПроцедуры


//&НаКлиенте
//Функция СБВыполнитьКомандуSDK(Идентификатор,ИмяКоманды,ДанныеИнтеграции,ОбъектПлагин,Комментарий) Экспорт
//	// Выполняет указанную команду по документу СБИС (утверждение/отклонение)	
//	//МестныйКэш = Кэш;	
//	//ГлавноеОкно = Кэш.ГлавноеОкно;
//	
//	document_out = ОбъектПлагин.CreateSimpleObject();
//	document_out.Write( "Идентификатор", Идентификатор );

//	// Прочитаем пакет   
//	СоставПакета = ПрочитатьДокументSDK(Идентификатор,,,ДанныеИнтеграции,ОбъектПлагин);
//	Если СоставПакета=Ложь Тогда
//		Возврат Ложь;
//	КонецЕсли;	
//	
//	Если СоставПакета.Свойство("Этап") и (СоставПакета.Этап[0].Название  = "Утверждение" или СоставПакета.Этап[0].Название  = "Утвердить") Тогда
//		action = Неопределено;
//		//Комментарий = "";
//		ПараметрыОтклонения = Новый Структура("Кэш,СоставПакета,ИмяКоманды,ПредставлениеПакета",Неопределено, СоставПакета, ИмяКоманды, "");
//		//Если ИмяКоманды = "Отклонить" Тогда
//		//	СтрокаПодсказка = "Причина отклонения"; 
//		//	Возврат ВыполнитьКомандуПослеВвводаКомментария(Комментарий,  ПараметрыОтклонения,ДанныеИнтеграции,ОбъектПлагин);
//		//	
//		//	#Если ТолстыйКлиентОбычноеПриложение Тогда
//		//		Если Не ВвестиСтроку(Комментарий,СтрокаПодсказка,,Истина) Тогда
//		//			Комментарий = "";
//		//		КонецЕсли;
//		//	#Иначе
//		//		ПоказатьВводСтроки(Новый ОписаниеОповещения("сбисВыполнитьКомандуПослеВвводаКомментария",ЭтаФорма, ПараметрыОтклонения),Комментарий,СтрокаПодсказка,,Истина);
//		//		Возврат Ложь;
//		//	#КонецЕсли
//		//КонецЕсли;	
//		Возврат ВыполнитьКомандуПослеВвводаКомментарияSDK(Комментарий,  ПараметрыОтклонения,ДанныеИнтеграции,ОбъектПлагин);
//	КонецЕсли;	
//	Возврат Ложь;
//КонецФункции

&НаСервереБезКонтекста
Функция ТипЭДООтправки(С)
	Возврат С.ТипЭДООтправки
	
КонецФункции

&НаКлиенте
Процедура ОтправитьВЭДОСБ_Массив_Черновик(МассивНакладных,ИдентификаторДляОтправки=Неопределено) Экспорт
	
	
	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Если НЕ Форм.Открыта() Тогда
		Форм.Открыть();
	КонецЕсли;
	
	Thumbprint_1=ПолучитьИзПользователя();	
	
	СайтДляПодключенияПоТакскму=Thumbprint_1.СБ;

	
	Результат="";
	Организация=Неопределено;
	ДанныеИнтеграции="";ОбъектПлагин=Неопределено;
	
	Для Каждого Стр_1 Из МассивНакладных Цикл
		
		Форма1=ПолучитЬФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаДокумента",
		Новый Структура("Ключ",Стр_1));
		
		Если ЗначениеЗаполнено(Форма1.Объект.ТипЭДООтправки) И Форма1.Объект.ТипЭДООтправки<>ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОТензор") Тогда
			Сообщить("Накладная "+СТрока(Стр_1.Ссылка)+" отправлена по другой системе: "+Строка(Форма1.Объект.ТипЭДООтправки));
			Продолжить;
		КонецЕсли;
		
		Если Форма1.ПроверитьПоКМ()=Ложь Тогда
			Сообщить("Одна из КМ не принадлежит Вам или не введена в оборот!! Документ "+Строка(Форма1.Объект.Ссылка)+" не отправлен");
			Продолжить;
		Конецесли;
		
		Форма1.ОПределитьУпаковки(Thumbprint_1);
		Форма1.Записать();
		
		
	
		
		Идентификатор=ПолучитьИдентификатор(Стр_1);
		Если Организация<>Идентификатор Тогда
		
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
						
				HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
						
				HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			СерийныйНомер="";
			Если Thumbprint_1.ТипПодключения=ПредопределенноеЗначение("Перечисление.ТипыПодключенияКЭДОСБ_ХамелеонЦРПТ.SDK") Тогда
			//Маркер=РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОСб_SDK(Thumbprint_1,ПолучитьИдЭд(Пользователь),HTTPСервисЗапрос_ТХЦ,СерийныйНомер,ДанныеАгрегации,ОбъектПлагин);
				Результат=РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОСб_SDK(Thumbprint_1,"",HTTPСервисЗапрос_ТХЦ,СерийныйНомер,ДанныеИнтеграции,ОбъектПлагин,СайтДляПодключенияПоТакскму);
				
			Иначе
				Результат=РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОСб_Новый(Thumbprint_1,"",HTTPСервисЗапрос_ТХЦ,СерийныйНомер,ДанныеИнтеграции,ОбъектПлагин);
			Конецесли;

			Если Не ЗначениеЗаполнено(Результат) Тогда
				Продолжить;
			КонецЕсли;
			Организация=Идентификатор;
		КонецЕсли;

		//Если Стр_1.
		
		РеквизитыДокумента_1=Новый Структура;
		ОткрытьФорму_1=Ложь;
		Сообщения=Неопределено;
		
		
		СтрокаXML =
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВывестиТабличнД(Стр_1,ОткрытьФорму_1,Сообщения,ПриПроверкеСхемыПриОтгрузкеЕслиОшибкаНеФормироватьФайл,ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОТензор"));	
		
		Если ЗначениеЗаполнено(СтрокаXML) Тогда
			ДанныеФайла = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(СтрокаXML.Текстовыйдо.Получитьтекст(),КодировкаТекста.ANSI);//ДвоичныеДанныеИзСтрокиXML(СтрокаXML.Текстовыйдо.Получитьтекст());
			
			РеквизитыДокумента_1.Вставить("ИмяФайлаЭД",СтрокаXML.ИмяФайла);
			РеквизитыДокумента_1.Вставить("ИдентификаторЭД",СтрокаXML.ИдР);
		
		Иначе
			Сообщить("В документе "+Строка(Стр_1)+" есть ошибки при формировании");
			Продолжить
		КонецЕсли;
		
		Отказ=Ложь;
		
		ТелоJSON=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ЗаписьДокумента(Стр_1,РеквизитыДокумента_1,ДанныеФайла);
		HTTPЗапрос=Новый HTTPЗапрос("service/?srv=1");
		
		HTTPЗапрос.Заголовки.Вставить("X-SBISSessionID",	Результат);
		HTTPЗапрос.Заголовки.Вставить("Content-Type",	"application/json; charset=utf-8");
	//	HTTPЗапрос.Заголовки.Вставить("User-Agent",	"1C8.3.10.2772_VO2.0.35.1");
	//	HTTPЗапрос.Заголовки.Вставить("X-API-Version",	"2.3.1");
		
		
		#Если ВебКлиент Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(ТелоJSON,"UTF-8");
				#Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(ТелоJSON,"UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
			
		
		Ответ=HTTPСервисЗапрос_ТХЦ.ОтправитьДляОбработки(HTTPЗапрос);
		ТТТ_Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());	
		
		Если Ответ.КодСостояния=200 Тогда	
				
			
			
			
			
			Ид=ТТТ_Ответ.result.Идентификатор;
			ЗаписатьСБ(Стр_1,Ид,СтрокаXML.ИмяФайла);
			ИдентификаторДляОтправки=Ид;
			Этаформа.Прочитать();
			//Продолжить;   
			
			
					
			
			
			
		//	ТелоСерт=СертификатЗапросаВСБИС(Thumbprint_1.Thumbprint_1);
		//	
		//	HTTPЗапрос=Новый HTTPЗапрос("service/?srv=1");
		//	
		//	HTTPЗапрос.Заголовки.Вставить("X-SBISSessionID",	Результат);
		//	HTTPЗапрос.Заголовки.Вставить("Content-Type",	"application/json; charset=utf-8");
		////	HTTPЗапрос.Заголовки.Вставить("User-Agent",	"1C8.3.10.2772_VO2.0.35.1");
		////	HTTPЗапрос.Заголовки.Вставить("X-API-Version",	"2.3.1");
		//	
		//	
		//	#Если ВебКлиент Тогда
		//			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоСерт,"UTF-8");
		//			#Иначе
		//			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоСерт,"UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
		//		#КонецЕсли
		//		
		//	
		//	Ответ=HTTPСервисЗапрос_ТХЦ.ОтправитьДляОбработки(HTTPЗапрос);
		//	ТТТ_Ответ_Сертификат=РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ЗарегистрироватьСертификатПоПользователю(Thumbprint_1);
			//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());	
			
			
			Возврат;
			Подписанный="";
			ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,ТТТ_Ответ.result.Этап[0].Вложение[0].Файл.Хеш ,Thumbprint_1.Thumbprint_1,Подписанный,ОтправлятьВЭДООткрепленнуюПодпись,Истина);
		
			Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
			
			ТелоОтправить=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ТелоОтправитьПодпись(Ид,Thumbprint_1.Thumbprint_1,Подписанный,СтрокаXML.ИмяФайла,ТТТ_Ответ);
			
			HTTPЗапрос=Новый HTTPЗапрос("service/?srv=1");
			
			HTTPЗапрос.Заголовки.Вставить("X-SBISSessionID",	Результат);
			HTTPЗапрос.Заголовки.Вставить("Content-Type",	"application/json; charset=utf-8");
		//	HTTPЗапрос.Заголовки.Вставить("User-Agent",	"1C8.3.10.2772_VO2.0.35.1");
		//	HTTPЗапрос.Заголовки.Вставить("X-API-Version",	"2.3.1");
			
			
			#Если ВебКлиент Тогда
					HTTPЗапрос.УстановитьТелоИзСтроки(ТелоОтправить,"UTF-8");
					#Иначе
					HTTPЗапрос.УстановитьТелоИзСтроки(ТелоОтправить,"UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
				#КонецЕсли
				
			
			Ответ=HTTPСервисЗапрос_ТХЦ.ОтправитьДляОбработки(HTTPЗапрос);
			ТТТ_Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());	
			
			Если Ответ.КодСостояния<>200 Тогда
				Попытка
					Сообщить("Черновик сформирован. Но не удалось отправить клиенту. Ошибка "+ТТТ_Ответ.error.details);
				Исключение
					Сообщить("Черновик сформирован. Но не удалось отправить клиенту. Ошибка "+Ответ.ПолучитьТелоКакСтроку());
					
				КонецПопытки;
				
			КонецЕсли;
		//		
		//	Подписанный="";
		//	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,ДанныеФайла ,Thumbprint_1.Thumbprint_1,Подписанный,ЛОжь);
		//
		//	Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
		//	Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
		//	Подписанный=СтрЗаменить(Подписанный,"\r\n","");

		//	
		//	ТелоОтправитьПодпись=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ТелоОтправитьПодпись(Ид,Thumbprint_1.Thumbprint_1,Подписанный,СтрокаXML.ИмяФайла,ТТТ_Ответ);
		//	
		//
		//	HTTPЗапрос=Новый HTTPЗапрос("service/?srv=1");
		//	
		//	HTTPЗапрос.Заголовки.Вставить("X-SBISSessionID",	Результат);
		//	HTTPЗапрос.Заголовки.Вставить("Content-Type",	"application/json; charset=utf-8");
		////	HTTPЗапрос.Заголовки.Вставить("User-Agent",	"1C8.3.10.2772_VO2.0.35.1");
		////	HTTPЗапрос.Заголовки.Вставить("X-API-Version",	"2.3.1");
		//	
		//	
		//	#Если ВебКлиент Тогда
		//			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоОтправить,"UTF-8");
		//			#Иначе
		//			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоОтправить,"UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
		//		#КонецЕсли
		//		
		//	
		//	Ответ=HTTPСервисЗапрос_ТХЦ.ОтправитьДляОбработки(HTTPЗапрос);
		//	ТТТ_Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());	
		//	
		//		
		//	
			
			
			
		Иначе
			Попытка
				Сообщить(ТТТ_Ответ.error.details);
			Исключение
				Попытка
					Сообщить(ТТТ_Ответ.error);
				Исключение
				КонецПопытки;
			КонецПопытки;
			ПоказатьПредупреждение(,"Не удалось отправить в ЭДО");
		КонецЕсли;
		
		
		
	Конеццикла;
	
	
КонецПроцедуры


Функция ЗаписатьСБ(Докум,Идентифи,ИмяФайла)
	ПолОб=Докум.ПолучитЬОБъект();
	ПолОб.Order_ID_УПД=Идентифи;
	ПолОб.ТипЭДООтправки=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОТензор;
	ПолОб.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Черновик;
	ПолОб.ИмяФайлаЭД=ИмяФайла;
	ПолОб.Записать();
Конецфункции

&НаСервере
Процедура ПодтянутьНаСервере()
	// Вставить содержимое обработчика.
	Для Каждого Стр_1 Из Объект.Товары Цикл
		ТаблицаПродукций=Новый ТаблицаЗначений;
		ТаблицаПродукций.Колонки.Добавить("Номенклатура");
		ТаблицаПродукций.Колонки.Добавить("Количество");
		ТаблицаПродукций.Колонки.Добавить("КоличествоВУпаковке");
		ТаблицаПродукций.Колонки.Добавить("НомерКороба");
		ТаблицаПродукций.Колонки.Добавить("cis");
		ТаблицаПродукций.Очистить();
		
		НСТР=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
		
		
		МассивКМ=Новый СписокЗначений;
		МассивКМ.Очистить();
		Для Каждого Стр_М Из НСТР Цикл
			
			МаркаКМ=Стр_М.cis;
					Если МассивКМ.НайтиПоЗначению(МаркаКМ)=Неопределено Тогда
						МассивКМ.Добавить(МаркаКМ);
						//Нстрок=Объект.ТоварыКМ.НайтИСтроки(Новый Структура("НомерКороба",Стр_2.СерийныйНомер));
						//Для Каждого Стр_КМ из Нстрок Цикл
						//	Если МассивКМ.НайтиПоЗначению(Стр_КМ.cis)=Неопределено Тогда
						//		МассивКМ.Добавить(Стр_КМ.cis);
						//		
						//	КонецЕсли;
							
						//Конеццикла;
						
					КонецЕсли;
				//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ИсторияПоCIS_ХамелеонЦРПТ.НомерКороба КАК НомерКороба,
					|	ИсторияПоCIS_ХамелеонЦРПТ.cis КАК cis,
					|	ИсторияПоCIS_ХамелеонЦРПТ.Цена,
					|	ИсторияПоCIS_ХамелеонЦРПТ.НДС
					|ИЗ
					|	РегистрСведений.ИсторияПоCIS_ХамелеонЦРПТ КАК ИсторияПоCIS_ХамелеонЦРПТ
					|ГДЕ
					|	ИсторияПоCIS_ХамелеонЦРПТ.Документ = &Документ
					|	И ИсторияПоCIS_ХамелеонЦРПТ.cis = &cis
					|ИТОГИ ПО
					|	cis,
					|	НомерКороба";
				
				Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
				Запрос.УстановитьПараметр("cis", МаркаКМ);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Выборкаcis = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Если СтрДлина(МаркаКМ)=18 И Выборкаcis.Количество()=0 Тогда
					
					
					Сообщить("Для короба "+Строка(МаркаКМ)+" продукции "+Строка(Стр_1.GTIN.Наименование)+" не удалось получить информацию о КМ, входящих в короб");
					
				КонецЕсли;	
				
				Пока Выборкаcis.Следующий() Цикл
					// Вставить обработку выборки Выборкаcis
				
					ВыборкаНомерКороба = Выборкаcis.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
					Пока ВыборкаНомерКороба.Следующий() Цикл
						// Вставить обработку выборки ВыборкаНомерКороба
						Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Сред(ВыборкаНомерКороба.НомерКороба,3,14)));
						Добав=ТаблицаПродукций.Добавить();
						Добав.Номенклатура=Продукция;
						Добав.Количество=1;
						Добав.КоличествоВУпаковке=ВыборкаНомерКороба.Количество();
						Добав.НомерКороба=МаркаКМ;
						Добав.cis=ВыборкаНомерКороба.НомерКороба;
						//Добав.Цена=РегистрыСведений.ИсторияПоCIS_ХамелеонЦРПТ.;//ВыборкаНомерКороба.Цена;
						//Добав.НДС=;//ВыборкаНомерКороба.НДС;
						
						
					Если МассивКМ.НайтиПоЗначению(Добав.cis)=Неопределено Тогда
						МассивКМ.Добавить(Добав.cis);
						//Нстрок=Объект.ТоварыКМ.НайтИСтроки(Новый Структура("НомерКороба",Стр_2.СерийныйНомер));
						//Для Каждого Стр_КМ из Нстрок Цикл
						//	Если МассивКМ.НайтиПоЗначению(Стр_КМ.cis)=Неопределено Тогда
						//		МассивКМ.Добавить(Стр_КМ.cis);
						//		
						//	КонецЕсли;
							
						//Конеццикла;
						
					КонецЕсли;
						
						
					КонецЦикла;
				КонецЦикла;
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

			
			
			
		Конеццикла;
		ТаблицаПродукций.Свернуть("НомерКороба,cis");
		
		

		
		
		//НомСтр=НомСтр+1;
		КоличествоКМ=0;
		НСТР=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
		Если НСтр.Количество()>0 Тогда
			Для Каждого Стр_2 Из НСТР ЦИкл
				
				
				НСтрокиТ=ТаблицаПродукций.НайтиСтроки(Новый Структура("НомерКороба",Стр_2.cis));
				
				Если НСтрокиТ.Количество()>0 Тогда
					КоличествоКМ=КоличествоКМ+НСтрокиТ.Количество();
				Иначе
					КоличествоКМ=КоличествоКМ+1;
				КонецЕсли;
				
			Конеццикла;
		Иначе
			КоличествоКМ=Стр_1.КоличествоКМ;
		КонецЕсли;
		
				
		Если НЕ ЗначениеЗаполнено(Стр_1.НомерГТД) Тогда
			
				   
						КодСтраны=СокрЛП(Стр_1.GTIN.СтранаПроизводства.Код);
							Если ЗначениеЗАполнено(КодСтраны)
										И КодСтраны<>"643" 
И КодСтраны<>"051" 
			И КодСтраны<>"398"
			И КодСтраны<>"112" 										
										Тогда
								НомерГТД="";
								Если МассивКМ.Количество()>0 Тогда
										//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
									// Данный фрагмент построен конструктором.
									// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
									
									Запрос = Новый Запрос;
									Запрос.Текст = 
										"ВЫБРАТЬ
										|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.Ссылка,
										|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.Ссылка.НомерДекларацииТовара   КАК НомерДекларацииТовара
										|ИЗ
										|	Документ.ВводВОборот_ХамелеонЦРПТ.СерийныеНомера КАК ВводВОборот_ХамелеонЦРПТСерийныеНомера
										|ГДЕ
										|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.cis В (&СерийныйНомер)
										|
										|УПОРЯДОЧИТЬ ПО
										|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.Ссылка.Дата УБЫВ";
									
									Запрос.УстановитьПараметр("СерийныйНомер",МассивКМ);
									РезультатЗапроса = Запрос.Выполнить();
									
									ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
									
									Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
										// Вставить обработку выборки ВыборкаДетальныеЗаписи
										Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НомерДекларацииТовара) Тогда
											НомерГГ=ВыборкаДетальныеЗаписи.НомерДекларацииТовара;
											СпрГТД=Справочники.НомераГТД_ХамелеонЦРПТ.НайтиПоКоду(НомерГГ);
											Если Не ЗначениеЗаполнено(СпрГТД) Тогда
												СпрГТД=Справочники.НомераГТД_ХамелеонЦРПТ.СоздатьЭлемент();
												СпрГТД.Код=НомерГГ;
												СпрГТД.Наименование=КодСтраны;
												СпрГТД.Записать();
											КонецЕсли;
												НомерГТД=СпрГТД.Ссылка;
											Прервать;
											
										КонецЕсли;
									КонецЦикла;
									
									//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

										//		КонецЕсли;
												
												
									КонецЕсли;
									Если ЗначениеЗаполнено(НомерГТД) Тогда
										Стр_1.НомерГТД=НомерГТД;
																		Иначе
									
										//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
										// Данный фрагмент построен конструктором.
										// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
										
										Запрос = Новый Запрос;
										Запрос.Текст = 
											"ВЫБРАТЬ
											|	Приемка_ХамелеонЦРПТТовары.НомерГТД
											|ИЗ
											|	Документ.Приемка_ХамелеонЦРПТ.Товары КАК Приемка_ХамелеонЦРПТТовары
											|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Приемка_ХамелеонЦРПТ.СерийныеНомера КАК Приемка_ХамелеонЦРПТСерийныеНомера
											|		ПО Приемка_ХамелеонЦРПТТовары.НомерСтрокиСвязи = Приемка_ХамелеонЦРПТСерийныеНомера.НомерСтрокиСвязи
											|			И (Приемка_ХамелеонЦРПТСерийныеНомера.cis В (&МассивКМ))
											|
											|ОБЪЕДИНИТЬ ВСЕ
											|
											|ВЫБРАТЬ
											|	Приемка_ХамелеонЦРПТТовары.НомерГТД
											|ИЗ
											|	Документ.Приемка_ХамелеонЦРПТ.Товары КАК Приемка_ХамелеонЦРПТТовары
											|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Приемка_ХамелеонЦРПТ.СерийныеНомера КАК Приемка_ХамелеонЦРПТСерийныеНомера
											|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Приемка_ХамелеонЦРПТ.Короба КАК Приемка_ХамелеонЦРПТКороба
											|			ПО Приемка_ХамелеонЦРПТСерийныеНомера.cis = Приемка_ХамелеонЦРПТКороба.НомерКороба
											|				И (Приемка_ХамелеонЦРПТКороба.ШтрихКод В (&МассивКМ))
											|		ПО Приемка_ХамелеонЦРПТТовары.НомерСтрокиСвязи = Приемка_ХамелеонЦРПТСерийныеНомера.НомерСтрокиСвязи";
										
										Запрос.УстановитьПараметр("МассивКМ", МассивКМ);
										
										РезультатЗапроса = Запрос.Выполнить();
										
										ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
										НашлиНомерГТД=ложь;
								
										Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
											// Вставить обработку выборки ВыборкаДетальныеЗаписи
											НомерГТД=ВыборкаДетальныеЗаписи.НомерГТД;
											Если ЗначениеЗаполнено(НомерГТД) Тогда
																							
												Стр_1.НомерГТД=НомерГТД;												
												
											КонецЕсли;
										КонецЦикла;
										
										//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
									КонецЕсли;
										
										
					КонецЕсли;							
		 КонецЕсли;
		
	Конеццикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подтянуть(Команда)
	ПодтянутьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВСБЧерновик(Команда)       Экспорт
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	
	
	Если ЗначениеЗаполнено(объект.Order_ID_УПД) тогда
		Если ЗначениеЗаполнено(Объект.ТипЭДООтправки) И Объект.ТипЭДООтправки<>ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОТензор") Тогда
			Сообщить("Накладная "+СТрока(Объект.Ссылка)+" отправлена по другой системе: "+Строка(Объект.ТипЭДООтправки));
			Возврат;
		КонецЕсли;
		
		//Если 
			
		//	Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Отправлен")
		//	ИЛИ Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Отправлен")
		//	ИЛИ Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Подписан")
		//	ИЛИ ОБъект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Уточнён")
		//	ИЛИ ОБъект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.ЗапросНаУточнениеПросмотренОжидаетсяУточнение")
		//	Тогда
		//Возврат;
		//КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ТекущийПользователь) Тогда
		Сообщить("Не заполнен текущий пользователь!!");
		Возврат;
	КонецЕсли;
	
	Объект.ОшибкаОтправки="";	
	ЭтаФорма.Записать();
		МассивНакладных=Новый Массив;
		МассивНакладных.Добавить(Объект.Ссылка);
	
		ОтправитьВЭДОСБ_Массив_Черновик(МассивНакладных);
		ЭтаФорма.Прочитать();
	
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьВЭДОКонтур(Команда)
	// Вставить содержимое обработчика.
	
	
	
	Если ЗначениеЗаполнено(объект.Order_ID_УПД) тогда
		Если ЗначениеЗаполнено(Объект.ТипЭДООтправки) И Объект.ТипЭДООтправки<>ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОКонтур") Тогда
			Сообщить("Накладная "+СТрока(Объект.Ссылка)+" отправлена по другой системе: "+Строка(Объект.ТипЭДООтправки));
			Возврат;
		КонецЕсли;
		
		//Если 
			
		//	Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Отправлен")
		//	ИЛИ Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Отправлен")
		//	ИЛИ Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Подписан")
		//	ИЛИ ОБъект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Уточнён")
		//	ИЛИ ОБъект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.ЗапросНаУточнениеПросмотренОжидаетсяУточнение")
		//	Тогда
		//Возврат;
		//КонецЕсли;
	КонецЕсли;
	
	Объект.ОшибкаОтправки="";	
	ЭтаФорма.Записать();
		МассивНакладных=Новый Массив;
		МассивНакладных.Добавить(Объект.Ссылка);
	
		ОтправитьВЭДОДиадок_Массив_Черновик(МассивНакладных);
		ЭтаФорма.Прочитать();
КонецПроцедуры

&AtClient
Function ValueFromHeaders(ValueName,Request)
	
	Result = "";	
	ResponseHeaders = Request.GetAllResponseHeaders();
	For Line = 1 To StrLineCount(ResponseHeaders) Do
		CurLine = StrGetLine(ResponseHeaders, Line);
		If Find(CurLine, ValueName) > 0 Then
			BeginPos = Find(CurLine, "=") + 1;
			EndPos = Find(CurLine, ";");
			Result = Mid(CurLine, BeginPos, EndPos - BeginPos);
			Break;
		EndIf;
	EndDo;
	Return Result;

EndFunction

&НаСервереБезКонтекста
Function JSONString(Val Object)
	
	Writer = New JSONWriter;
	//  Writer.SetString(New JSONWriterSettings(JSONLineBreak.None,,,ЭкранированиеСимволовJSON.СимволыВнеASCII ));
	Writer.SetString(New JSONWriterSettings(JSONLineBreak.None ));
	WriteJSON(Writer, Object);
	Body = Writer.Close();
	Return Body;

EndFunction


&НаСервереБезКонтекста
Function JSONValue(Val String)
	
	Reader = New JSONReader;
	Reader.SetString(String);
	Result = ReadJSON(Reader);
	Reader.Close();
	Return Result;

EndFunction

Функция СтатусУПД(Стр_1,Order_ID_УПД,LetterID)
	Order_ID_УПД=Стр_1.Order_ID_УПД;
	LetterID=Стр_1.LetterIDДиадок;
	Возврат Стр_1.СтатусУПД
КонецФункции

&AtServerNoContext
Function TimeStamp()
	
	Return xmlString(CurrentUniversalDate() - Date(1970, 1, 1));
	
EndFunction


Процедура ЗаписатьСтатусДокумента(Докум,Статус)
	ПолОб=Докум.ПолучитьОбъект();
	ПолОб.СтатусУПД=Статус;
	ПолОб.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВЭДОДиадок_Массив_Черновик(МассивНакладных) Экспорт	
	
	
	#Если ВебКлиент Тогда
	#Иначе
	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Если НЕ Форм.Открыта() Тогда
		Форм.Открыть();
	КонецЕсли;
	
	Thumbprint_1=ПолучитьИзПользователя();	
	
	Request=Неопределено;
	
	boxId="";
	
	BoxUrl="";
	PortalUserId="";
	VerificationToken="";
	Если НЕ РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ПодключениеПоКонтурДиадок(Request,Thumbprint_1,boxId,BoxUrl,PortalUserId,VerificationToken) Тогда
		Сообщить("Не удалось подключиться к Диадок");
		возврат;
	КонецЕсли;
	
	
	
	Request.Open("GET", "https://diadoc.kontur.ru/api/boxes/" + BoxId + "/employees/certificates?_=" + TimeStamp());
	Request.Send();
	Request.WaitForResponse();
	ThumbPrint = JSONValue(Request.ResponseText).certificates[0].thumbprint;
	
	
	
	
	
	Request.Open("GET", BoxUrl + "/Draft/Drafts", 0);
	Request.Send();
	Request.WaitForResponse();
	
	Reader = New HTMLReader;
	Reader.SetString(Request.ResponseText);
	
	Builder = Новый DOMBuilder;
    DocHTML = Builder.Read(Reader);
	
	//Inbox.Clear();
	For each Anchor In DocHTML.Anchors Do
		If Anchor.Title = "" Then
			Continue;
		EndIf;
		
			Doc = New Structure;
			For each Attr In Anchor.Attributes Do
				If Find(Attr.ИмяУзла, "-") = 0 Then
					Doc.Insert(Attr.ИмяУзла, Attr.Value);
				EndIf;
			EndDo;
			
			
			
			Request.Open("GET", BoxUrl+"/Send/GetDraft2SendJson?draftId="+Сред(Doc.id,1,36));
			Request.SetRequestHeader("Content-Type", "application/json;charset=UTF-8");
			Request.Send();
			Request.WaitForResponse();
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Request.ResponseText);
			Если NNN.Attachments.Количество()>0 Тогда
				    ИмяФайла=NNN.Attachments[0].AttachmentInfo.FileName;
					Добав=Черновики.Добавить();
					Добав.ИмяФайла=ИмяФайла;
					Добав.Ид=Сред(Doc.id,1,36);
				
			КонецЕсли;
	EndDo;
	
	
	
	Результат="";
	Организация=Неопределено;
	Для Каждого Стр_1 Из МассивНакладных Цикл
		Форма1=ПолучитЬФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаДокумента",
		Новый Структура("Ключ",Стр_1));
		Если ЗначениеЗаполнено(Форма1.Объект.ТипЭДООтправки) И Форма1.Объект.ТипЭДООтправки<>ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОКонтур") Тогда
			Сообщить("Накладная "+СТрока(Стр_1.Ссылка)+" отправлена по другой системе: "+Строка(Форма1.Объект.ТипЭДООтправки));
			Продолжить;
		КонецЕсли;
		Если Форма1.ПроверитьПоКМ()=Ложь Тогда
			Сообщить("Одна из КМ не принадлежит Вам или не введена в оборот!! Документ "+Строка(Форма1.Объект.Ссылка)+" не отправлен");
			Продолжить;
		Конецесли;
		Форма1.ОПределитьУпаковки(Thumbprint_1);

		Форма1.Записать();
		
		
		
		Order_ID_УПД="";
		LetterID="";
		СтатусУПД=СтатусУПД(Стр_1,Order_ID_УПД,LetterID);
		
		Если ЗначениеЗАполненО(Order_ID_УПД) И ЗначениеЗАполненО(LetterID) Тогда
			////СЧИТЫВАЕМ СТАТУС
			Request.Open("GET", "https://diadoc.kontur.ru/api/Documents.v1/boxes/"+boxid+"/letters/"+LetterID+"/documents/"+Order_ID_УПД, 0);
			Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
			Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
			Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");
			Request.Send();
			Request.WaitForResponse();
			СтатусДокумента=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ВернутьСтатусДокументаКонтВЕБ(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Request.ResponseText).documentStatus.text);
			Если СтатусУПД<>СтатусДокумента Тогда
				ЗаписатьСтатусДокумента(Стр_1,СтатусДокумента);
				СтатусУПД=СтатусДокумента;
			КонецЕсли;
		//	Возврат;
		Конецесли;
		
		Если ЗначениеЗАполнено(СтатусУПД) И СтатусУПД<>ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Черновик") Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗАполненО(Order_ID_УПД) И ЗначениеЗАполненО(LetterID) Тогда
			
			///УДАЛЯЕМ
			
			Params = New Structure;
			Params.Insert("letterId", LetterID);
			Params.Insert("entityId", Order_ID_УПД);
			МассивН=Новый Массив;
			МассивН.Добавить(Params);
			НовСтр=Новый Структура;
			НовСтр.Вставить("documentIds",МассивН);
			Body = JSONString(НовСтр);
			                                 
			Request.Open("POST", "https://diadoc.kontur.ru/api/boxes/" +boxid+ "/documents/delete", 0);
			Request.SetRequestHeader("Content-Length", Формат(StrLen(Body),"ЧГ="));
			Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
			Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
			Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");
			Request.Send(Body);
			Request.WaitForResponse();
			
			
		КонецЕсли;
		

		
		
		РеквизитыДокумента_1=Новый Структура;
		ОткрытьФорму_1=Ложь;
		Сообщения=Неопределено;
		
		
		СтрокаXML =
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВывестиТабличнД(Стр_1,ОткрытьФорму_1,Сообщения,ПриПроверкеСхемыПриОтгрузкеЕслиОшибкаНеФормироватьФайл,ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОКонтур"));	
		
		Если ЗначениеЗаполнено(СтрокаXML) Тогда
			ДанныеФайла = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(СтрокаXML.Текстовыйдо.Получитьтекст(),КодировкаТекста.ANSI);//ДвоичныеДанныеИзСтрокиXML(СтрокаXML.Текстовыйдо.Получитьтекст());
			
			РеквизитыДокумента_1.Вставить("ИмяФайлаЭД",СтрокаXML.ИмяФайла);
			РеквизитыДокумента_1.Вставить("ИдентификаторЭД",СтрокаXML.ИдР);
		
		Иначе
			Сообщить("В документе "+Строка(Стр_1)+" есть ошибки при формировании");
			Продолжить
		КонецЕсли;
		
		
		Нстроки=Черновики.НайтиСтроки(Новый Структура("ИмяФайла",СтрокаXML.ИмяФайла));
		Для Каждого Стр_Уд Из НСтроки Цикл
			
			
			Params = New Structure;
			Params.Insert("letterId", Стр_Уд.ИД);
			Params.Insert("isSendable", "true");
			Params.Insert("containsFnsDocs", true);
			Params.Insert("containsUcdDocs", False);
			Params.Insert("containsUtdDocs", True);   
			МассивН=Новый Массив;
			МассивН.Добавить(Params);
					Body = JSONString(МассивН);
			                                 
			Request.Open("POST", BoxUrl + "/Send/DeleteDrafts", 0);
			Request.SetRequestHeader("Content-Length", Формат(StrLen(Body),"ЧГ="));
			Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
			Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
			Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");
			Request.Send(Body);
			Request.WaitForResponse();
			
			
			
		Конеццикла;
		
		
		
		FullName=КаталогВременныхФ+ РеквизитыДокумента_1.ИмяФайлаЭД;
		ДанныеФайла.Записать(FullName);
	Stream = New COMObject("ADODB.Stream");
    Stream.Type = 1;
    Stream.Open();
    Stream.LoadFromFile(FullName);
		
	
	//
	//
	//
	//
	FileUUID = РеквизитыДокумента_1.ИдентификаторЭД;
	Request.Open("POST", "https://diadoc.kontur.ru/ShelfUpload?nameOnShelf=/__userId__/" + FileUUID + "&partIndex=0&isLastPart=1", 0);
	Request.SetRequestHeader("Content-Length", Формат(СтрокаXML.Текстовыйдо,"ЧГ="));
	Request.SetRequestHeader("Content-Type", "application/octet-stream");
	Request.Send(Stream);//СтрокаXML.Текстовыйдо.Получитьтекст());
	Request.WaitForResponse();
	//
	ShelfPath = "user_private_files/" + PortalUserId + "/" + FileUUID;	
	Params = New Structure;
	Params.Insert("fileName", РеквизитыДокумента_1.ИмяФайлаЭД);
	Params.Insert("serverSideLocation", New Structure("nameOnShelf,shelfPath", FileUUID, ShelfPath));
	Body = JSONString(Params);
	
	Request.Open("POST", BoxUrl + "/Send/DetectAttachmentType", 0);
	Request.SetRequestHeader("Content-Length", Формат(StrLen(Body),"ЧГ="));
	Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
	Request.Send(Body);
	Request.WaitForResponse();
	
	Attach = JSONValue(Request.ResponseText);
	Attach.Insert("allowEditDocumentTagsInWeb", False);
	
	Params = New Structure;
	Params.Insert("allowEditDocumentTagsInWeb", False);
	Params.Insert("Attachments", New Array);
	Params.Insert("hasProxy", False);
	Params.Insert("hasUcd", False);
	Params.Insert("hasUtd", True);
	Params.Insert("isCertDisabled", False);
	Params.Insert("letterType", Attach.AttachmentInfo.recipientType);
	Params.Insert("myOrgIsLiquidated", False);
	Params.Insert("recipient", Attach.recipientOrg);
	Params.Insert("singleLetter", True);
	Params.Insert("type", "UniversalTransferDocument");
	//Params.Insert("thumbprint", "8D6442D4ACDB1CE4DF5F96E3F7EF8D389E6219AF");
	Params.Attachments.Add(Attach);
	Body = JSONString(Params);
	                                 
	Request.Open("POST", BoxUrl + "/Send/PostDraft", 0);
	Request.SetRequestHeader("Content-Length", Формат(StrLen(Body),"ЧГ="));
	Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
	Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
	Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");
	Request.Send(Body);
	Request.WaitForResponse();
	
	
	

	Request.Open("GET", BoxUrl + "/Draft/Drafts", 0);
	Request.Send();
	Request.WaitForResponse();
	
	Reader = New HTMLReader;
	Reader.SetString(Request.ResponseText);
	
	Builder = Новый DOMBuilder;
    DocHTML = Builder.Read(Reader);
	
	//Inbox.Clear();
	For each Anchor In DocHTML.Anchors Do
		If Anchor.Title = "" Then
			Continue;
		EndIf;
		
			Doc = New Structure;
			For each Attr In Anchor.Attributes Do
				If Find(Attr.ИмяУзла, "-") = 0 Then
					Doc.Insert(Attr.ИмяУзла, Attr.Value);
				EndIf;
			EndDo;
			
			
			
			Request.Open("GET", BoxUrl+"/Send/GetDraft2SendJson?draftId="+Сред(Doc.id,1,36));
			Request.SetRequestHeader("Content-Type", "application/json;charset=UTF-8");
			Request.Send();
			Request.WaitForResponse();
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Request.ResponseText);
			Если NNN.Attachments.Количество()>0 Тогда
				    ИмяФайла=NNN.Attachments[0].AttachmentInfo.FileName;
					
					Если ИмяФайла=СтрокаXML.ИмяФайла Тогда
						
						DraftId = StrReplace(Doc.id, "-link", "");
						Request.Open("GET", BoxUrl + "/Send/GetDraft2SendJson?draftId=" + DraftId, 0);
						Request.Send();
						Request.WaitForResponse();
						
						DraftJson = JSONValue(Request.ResponseText);
						DraftJson.Insert("thumbprint", ThumbPrint);
						
						
						DraftJson.Attachments[0].AttachmentInfo.Type="UniversalTransferDocument";
						Body = JSONString(DraftJson);
						
						Request.Open("POST", BoxUrl + "/Send/Post", 0);
						Request.SetRequestHeader("Content-Length", XMLString(StrLen(Body)));
						Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
						Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
						Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");
						Request.Send(Body);
						Request.WaitForResponse();
						
						
						Body = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Request.ResponseText);
	Попытка
							ЗаписатьДанныеВДокумент(Стр_1,ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Черновик"),Body[0].documentId,Body[0].letterId,ИмяФайла);

						Исключение
							
							Если Body<>Неопределено Тогда
								                          Попытка
								Сообщить(Body.ErrorMessage);
							Исключение
								Сообщить("Не удалось отправить в Диадок!!!");
								КонецПопытки;
							КонецЕсли;
							
						КонецПопытки;

									
									
									
									
									//ЗаписатьДанныеВДокумент(Стр_1,ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Черновик"),Сред(Doc.id,1,36),ИмяФайла);
									Прервать;
								Конецесли;
												
						КонецЕсли;
						
		
	//	NewRow = Inbox.Add();
	//	FillPropertyValues(NewRow, Anchor, , "Attributes");
	//	For each Attr In Anchor.Attributes Do
	//		If Attr.Name = "needsfnsregmessage" Then
	//			AttrValue = Attr.Value;
	//		ElsIf Attr.Value = "true" Then
	//			AttrValue = True;
	//		ElsIf Attr.Value = "false" Then
	//			AttrValue = False;
	//		Else
	//			AttrValue = Attr.Value;
	//		EndIf;
	//		NewRow.Attributes.Add(AttrValue, Attr.Name);
	//	EndDo;
	EndDo;
	
	
	
	
Конеццикла;	
						                Попытка
										ЭтаФорма.Прочитать();
									Исключение
										КонецПопытки;

#КонецЕсли
КонецПроцедуры


Процедура ЗаписатьДанныеВДокумент(Стр_1,СтатусУПД,ИД,ЛеттерИД,ИмяФайла)
	    ПолОб=Стр_1.ПолучитьОбъект();
		ПолОб.СтатусУПД=СтатусУПД;
		  ПолОб.Order_ID_УПД=Ид;
		  ПолОб.LetterIDДиадок=ЛеттерИД;
		  ПолОб.ИмяФайлаЭД=ИмяФайла;
		  ПолОб.ТипЭДООтправки=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОКонтур;
		  ПолОб.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ПечатьУПДСКМ(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	ЭтаФорма.Записать();
	
	
	Печать=Новый ТабличныйДокумент;
	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Форм.ПечатьУПДНаСервере(печать,Объект.Ссылка,Истина);
	Печать.АвтоМасштаб=Истина;
	Печать.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	
	Печать.ИмяПараметровПечати="Печать_УПД";
	Печать.Показать();
	
КонецПроцедуры


&НаКлиенте
Процедура ПодписатьИОтправитьВДИадок(Команда)
	// Вставить содержимое обработчика.
	
	Если ЗначениеЗаполнено(объект.Order_ID_УПД) тогда
		Если ЗначениеЗаполнено(Объект.ТипЭДООтправки) И Объект.ТипЭДООтправки<>ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОКонтур") Тогда
			Сообщить("Накладная "+СТрока(Объект.Ссылка)+" отправлена по другой системе: "+Строка(Объект.ТипЭДООтправки));
			Возврат;
		КонецЕсли;
		
		//Если 
			
		//	Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Отправлен")
		//	ИЛИ Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Отправлен")
		//	ИЛИ Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Подписан")
		//	ИЛИ ОБъект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Уточнён")
		//	ИЛИ ОБъект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.ЗапросНаУточнениеПросмотренОжидаетсяУточнение")
		//	Тогда
		//Возврат;
		//КонецЕсли;
	КонецЕсли;
	
	Объект.ОшибкаОтправки="";	
	ЭтаФорма.Записать();
		МассивНакладных=Новый Массив;
		МассивНакладных.Добавить(Объект.Ссылка);
	
		ОтправитьВЭДОДиадок_Массив_Подписать(МассивНакладных);
		ЭтаФорма.Прочитать();
КонецПроцедуры

Функция ПолучитьСтркутуру(ДожностныеОбязаости,ФИО)
	ПервыйСтр=JSONValue(ДожностныеОбязаости);
	
	СтруктураВернем=Новый Структура("Credentials",ПервыйСтр);
	
	ФИО_С=JSONValue(ФИО);
	
	СтруктураОрганизации=Новый Структура;
	СтруктураОрганизации.Вставить("Inn",ФИО_С.inn);
	СтруктураОрганизации.Вставить("OrgName",ФИО_С.subjectOrgName);
	СтруктураОрганизации.Вставить("SubjectFio",ФИО_С.subjectFio);
	СтруктураВернем.Вставить("Signer",СтруктураОрганизации);
	
	Возврат СтруктураВернем
	
КонецФункции
&НаКлиенте
Процедура ОтправитьВЭДОДиадок_Массив_Подписать(МассивНакладных) Экспорт	
	
	
	#Если ВебКлиент Тогда
	#Иначе
	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Если НЕ Форм.Открыта() Тогда
		Форм.Открыть();
	КонецЕсли;
	ТекущийПользователь=Форм.Пользователь;
	
	Thumbprint_1=ПолучитьИзПользователя();	
	
	
	
	Request=Неопределено;
	
	boxId="";
	
	BoxUrl="";
	PortalUserId="";
	VerificationToken="";
	Если НЕ РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ПодключениеПоКонтурДиадок(Request,Thumbprint_1,boxId,BoxUrl,PortalUserId,VerificationToken) Тогда
		Сообщить("Не удалось подключиться к Диадок");
		возврат;
	КонецЕсли;
	
	
	//Request.Open("GET", "https://diadoc.kontur.ru/api/boxes/" + BoxId + "/employees/certificates?_=" + TimeStamp());
	//Request.Send();
	//Request.WaitForResponse();
	//ThumbPrint = JSONValue(Request.ResponseText).certificates[0].thumbprint;
	
	

	Request.Open("GET", BoxUrl + "/Utd/FindEmployeeCredentials?thumbprint="+Thumbprint_1.Thumbprint_1+"&documentTitleType=0&_="+TimeStamp(), 0);
	Request.Send();
	Request.WaitForResponse();
	ДожностныеОбязаости=Request.ResponseText;

	Request.Open("GET",  "https://diadoc.kontur.ru/api/certificates/"+Thumbprint_1.Thumbprint_1+"/details?_="+TimeStamp(), 0);
	Request.Send();
	Request.WaitForResponse();
	ФИО=Request.ResponseText;
	
	Попытка
	
		ПолучитьСтруктуру=ПолучитьСтркутуру(ДожностныеОбязаости,ФИО);
	Исключение
		Сообщить("Не зарегистрирован сертификат в ДИАДОКЕ!!");
		Возврат;
	КонецПопытки;
	ПолучитьСтруктуру.Вставить("Thumbprint",Thumbprint_1.Thumbprint_1);
	ПолучитьСтруктуру.Вставить("Type","UniversalTransferDocument");
	
	
	
	Request.Open("GET", BoxUrl + "/Draft/Drafts", 0);
	Request.Send();
	Request.WaitForResponse();
	
	Reader = New HTMLReader;
	Reader.SetString(Request.ResponseText);
	
	Builder = Новый DOMBuilder;
    DocHTML = Builder.Read(Reader);
	
	//Inbox.Clear();
	For each Anchor In DocHTML.Anchors Do
		If Anchor.Title = "" Then
			Continue;
		EndIf;
		
			Doc = New Structure;
			For each Attr In Anchor.Attributes Do
				If Find(Attr.ИмяУзла, "-") = 0 Then
					Doc.Insert(Attr.ИмяУзла, Attr.Value);
				EndIf;
			EndDo;
			
			
			
			Request.Open("GET", BoxUrl+"/Send/GetDraft2SendJson?draftId="+Сред(Doc.id,1,36));
			Request.SetRequestHeader("Content-Type", "application/json;charset=UTF-8");
			Request.Send();
			Request.WaitForResponse();
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Request.ResponseText);
			Если NNN.Attachments.Количество()>0 Тогда
				    ИмяФайла=NNN.Attachments[0].AttachmentInfo.FileName;
					Добав=Черновики.Добавить();
					Добав.ИмяФайла=ИмяФайла;
					Добав.Ид=Сред(Doc.id,1,36);
				
			КонецЕсли;
	EndDo;
	
	
	
	Результат="";
	Организация=Неопределено;
	Для Каждого Стр_1 Из МассивНакладных Цикл
		
		Форма1=ПолучитЬФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаДокумента",
		Новый Структура("Ключ",Стр_1));
		Если ЗначениеЗаполнено(Форма1.Объект.ТипЭДООтправки) И Форма1.Объект.ТипЭДООтправки<>ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОКонтур") Тогда
			Сообщить("Накладная "+СТрока(Стр_1.Ссылка)+" отправлена по другой системе: "+Строка(Форма1.Объект.ТипЭДООтправки));
			Возврат;
		КонецЕсли;
		Если Форма1.ПроверитьПоКМ()=Ложь Тогда
			Сообщить("Одна из КМ не принадлежит Вам или не введена в оборот!! Документ "+Строка(Форма1.Объект.Ссылка)+" не отправлен");
			Продолжить;
		Конецесли;
		
		Форма1.ОПределитьУпаковки(Thumbprint_1);
		Форма1.Записать();
		
		
		Order_ID_УПД="";
		LetterID="";
		СтатусУПД=СтатусУПД(Стр_1,Order_ID_УПД,LetterID);
		
		Если ЗначениеЗАполненО(Order_ID_УПД) И ЗначениеЗАполненО(LetterID) Тогда
			////СЧИТЫВАЕМ СТАТУС
			Request.Open("GET", "https://diadoc.kontur.ru/api/Documents.v1/boxes/"+boxid+"/letters/"+LetterID+"/documents/"+Order_ID_УПД, 0);
			Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
			Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
			Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");
			Request.Send();
			Request.WaitForResponse();
			СтатусДокумента=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ВернутьСтатусДокументаКонтВЕБ(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Request.ResponseText).documentStatus.text);
			Если СтатусУПД<>СтатусДокумента Тогда
				ЗаписатьСтатусДокумента(Стр_1,СтатусДокумента);
				СтатусУПД=СтатусДокумента;
			КонецЕсли;
		//	Возврат;
		Конецесли;
		
		Если ЗначениеЗАполнено(СтатусУПД) И СтатусУПД<>ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Черновик") Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗАполненО(Order_ID_УПД) И ЗначениеЗАполненО(LetterID) Тогда
			
			///УДАЛЯЕМ
			
			Params = New Structure;
			Params.Insert("letterId", LetterID);
			Params.Insert("entityId", Order_ID_УПД);
			МассивН=Новый Массив;
			МассивН.Добавить(Params);
			НовСтр=Новый Структура;
			НовСтр.Вставить("documentIds",МассивН);
			Body = JSONString(НовСтр);
			                                 
			Request.Open("POST", "https://diadoc.kontur.ru/api/boxes/" +boxid+ "/documents/delete", 0);
			Request.SetRequestHeader("Content-Length", Формат(StrLen(Body),"ЧГ="));
			Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
			Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
			Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");
			Request.Send(Body);
			Request.WaitForResponse();
			
			
		КонецЕсли;
		

		
		
		РеквизитыДокумента_1=Новый Структура;
		ОткрытьФорму_1=Ложь;
		Сообщения=Неопределено;
		
		
		СтрокаXML =
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВывестиТабличнД(Стр_1,ОткрытьФорму_1,Сообщения,ПриПроверкеСхемыПриОтгрузкеЕслиОшибкаНеФормироватьФайл,ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОКонтур"));	
		
		Если ЗначениеЗаполнено(СтрокаXML) Тогда
			ДанныеФайла = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(СтрокаXML.Текстовыйдо.Получитьтекст(),КодировкаТекста.ANSI);//ДвоичныеДанныеИзСтрокиXML(СтрокаXML.Текстовыйдо.Получитьтекст());
			
			РеквизитыДокумента_1.Вставить("ИмяФайлаЭД",СтрокаXML.ИмяФайла);
			РеквизитыДокумента_1.Вставить("ИдентификаторЭД",СтрокаXML.ИдР);
		
		Иначе
			Сообщить("В документе "+Строка(Стр_1)+" есть ошибки при формировании");
			Продолжить
		КонецЕсли;
		
		
		Нстроки=Черновики.НайтиСтроки(Новый Структура("ИмяФайла",СтрокаXML.ИмяФайла));
		Для Каждого Стр_Уд Из НСтроки Цикл
			
			
			Params = New Structure;
			Params.Insert("letterId", Стр_Уд.ИД);
			Params.Insert("isSendable", "true");
			Params.Insert("containsFnsDocs", true);
			Params.Insert("containsUcdDocs", False);
			Params.Insert("containsUtdDocs", True);   
			МассивН=Новый Массив;
			МассивН.Добавить(Params);
					Body = JSONString(МассивН);
			                                 
			Request.Open("POST", BoxUrl + "/Send/DeleteDrafts", 0);
			Request.SetRequestHeader("Content-Length", Формат(StrLen(Body),"ЧГ="));
			Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
			Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
			Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");
			Request.Send(Body);
			Request.WaitForResponse();
			
			
			
		Конеццикла;
		
		
		
		FullName=КаталогВременныхФ+ РеквизитыДокумента_1.ИмяФайлаЭД;
		ДанныеФайла.Записать(FullName);
	Stream = New COMObject("ADODB.Stream");
    Stream.Type = 1;
    Stream.Open();
    Stream.LoadFromFile(FullName);
		
	
	//
	//
	//
	//
	FileUUID = РеквизитыДокумента_1.ИдентификаторЭД;
	Request.Open("POST", "https://diadoc.kontur.ru/ShelfUpload?nameOnShelf=/__userId__/" + FileUUID + "&partIndex=0&isLastPart=1", 0);
	Request.SetRequestHeader("Content-Length", Формат(СтрокаXML.Текстовыйдо,"ЧГ="));
	Request.SetRequestHeader("Content-Type", "application/octet-stream");
	Request.Send(Stream);//СтрокаXML.Текстовыйдо.Получитьтекст());
	Request.WaitForResponse();
	//
	ShelfPath = "user_private_files/" + PortalUserId + "/" + FileUUID;	
	Params = New Structure;
	Params.Insert("fileName", РеквизитыДокумента_1.ИмяФайлаЭД);
	Params.Insert("serverSideLocation", New Structure("nameOnShelf,shelfPath", FileUUID, ShelfPath));
	Body = JSONString(Params);
	
	Request.Open("POST", BoxUrl + "/Send/DetectAttachmentType", 0);
	Request.SetRequestHeader("Content-Length", Формат(StrLen(Body),"ЧГ="));
	Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
	Request.Send(Body);
	Request.WaitForResponse();
	
	Attach = JSONValue(Request.ResponseText);
	Attach.Insert("allowEditDocumentTagsInWeb", False);
	Attach.AttachmentInfo.Type="UniversalTransferDocument";
	
	Params = New Structure;
	Params.Insert("allowEditDocumentTagsInWeb", False);
	Params.Insert("Attachments", New Array);
	Params.Insert("hasProxy", False);
	Params.Insert("hasUcd", False);
	Params.Insert("hasUtd", True);
	Params.Insert("isCertDisabled", False);
	Params.Insert("letterType", Attach.AttachmentInfo.recipientType);
	Params.Insert("myOrgIsLiquidated", False);
	Params.Insert("recipient", Attach.recipientOrg);
	Params.Insert("singleLetter", True);
	//Params.Insert("thumbprint", "8D6442D4ACDB1CE4DF5F96E3F7EF8D389E6219AF");
	Params.Attachments.Add(Attach);
	Body = JSONString(Params);
	                                 
	Request.Open("POST", BoxUrl + "/Send/PostDraft", 0);
	Request.SetRequestHeader("Content-Length", Формат(StrLen(Body),"ЧГ="));
	Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
	Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
	Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");
	Request.Send(Body);
	Request.WaitForResponse();
	
	
	

	Request.Open("GET", BoxUrl + "/Draft/Drafts", 0);
	Request.Send();
	Request.WaitForResponse();
	
	Reader = New HTMLReader;
	Reader.SetString(Request.ResponseText);
	
	Builder = Новый DOMBuilder;
    DocHTML = Builder.Read(Reader);
	
	//Inbox.Clear();
	For each Anchor In DocHTML.Anchors Do
		If Anchor.Title = "" Then
			Continue;
		EndIf;
		
			Doc = New Structure;
			For each Attr In Anchor.Attributes Do
				If Find(Attr.ИмяУзла, "-") = 0 Then
					Doc.Insert(Attr.ИмяУзла, Attr.Value);
				EndIf;
			EndDo;
			
			
			
			Request.Open("GET", BoxUrl+"/Send/GetDraft2SendJson?draftId="+Сред(Doc.id,1,36));
			Request.SetRequestHeader("Content-Type", "application/json;charset=UTF-8");
			Request.Send();
			Request.WaitForResponse();
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Request.ResponseText);
			Если NNN.Attachments.Количество()>0 Тогда
				    ИмяФайла=NNN.Attachments[0].AttachmentInfo.FileName;
					
					Если ИмяФайла=СтрокаXML.ИмяФайла Тогда
						
						DraftId = StrReplace(Doc.id, "-link", "");
						Request.Open("GET", BoxUrl + "/Send/GetDraft2SendJson?draftId=" + DraftId, 0);
						Request.Send();
						Request.WaitForResponse();
						
						DraftJson = JSONValue(Request.ResponseText);
						DraftJson.Insert("thumbprint", Thumbprint_1.Thumbprint_1);
						БезПодписи = JSONValue(Request.ResponseText);
						БезПодписи.Insert("thumbprint", Thumbprint_1.Thumbprint_1);
						
						
						entityContent=DraftJson.Attachments[0].ServerSideLocation.entityContent;
						
						boxId_1="";
						Если DraftJson.recipient<>Неопределено  И DraftJson.recipient.Свойство("boxId",boxId_1) Тогда
						
							ПолучитьСтруктуру.Вставить("RecipientBoxId",boxId_1);
							
						Иначе
							
							Сообщить("Покупателю не выслали приграшение, либо он его не принял!!");
							Возврат;
							
						КонецЕсли;
						СтруктураДокумента=Новый Структура();
						СтруктураДокумента.Вставить("boxId",boxid);
						СтруктураДокумента.Вставить("entityId",entityContent.entityId);
						СтруктураДокумента.Вставить("letterId",entityContent.letterId );
						
						КонтектЕнтити=Новый Структура;
						КонтектЕнтити.Вставить("entityContent",СтруктураДокумента);
						
						ПолучитьСтруктуру.Вставить("XmlToPatch",КонтектЕнтити);
						Body = JSONString(ПолучитьСтруктуру);
						
						
						
						Request.Open("POST", BoxUrl + "/PrepareXml/PrepareAjax", 0);
						Request.SetRequestHeader("Content-Length", XMLString(StrLen(Body)));
						Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
						Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
						Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");
						Request.Send(Body);
						Request.WaitForResponse();
						
						
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Request.ResponseText);
						
						
						Request.Open("GET", "https://diadoc.kontur.ru/ShelfDownload?nameOnShelf="+NNN.PatchedXmlLocation.shelfPath+"&originalFileName=internal &makeBase64=true&_="+TimeStamp());
						Request.SetRequestHeader("Content-Type", "application/json;charset=UTF-8");
						Request.Send();
						Request.WaitForResponse();
						
						ИмяВр_1="";
						SignatureBase64="";
						ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,Request.ResponseText ,
						Thumbprint_1.Thumbprint_1,SignatureBase64,ОтправлятьВЭДООткрепленнуюПодпись, Истина);
						//SignatureBase64=base64Строка(ДанныеФайла);
SignatureBase64=СтрЗаменить(SignatureBase64,Символы.ПС,"");

SignatureBase64=СтрЗаменить(SignatureBase64,Символы.ВК,"");
						DraftJson.Attachments[0].Signature = New Structure("contentBase64", SignatureBase64);

						DraftJson.Attachments[0].ServerSideLocation.shelfPath= NNN.PatchedXmlLocation.shelfPath;
						//	возврат; 
						Body = JSONString(DraftJson);
						
						Request.Open("POST", BoxUrl + "/Send/Post", 0);
						Request.SetRequestHeader("Content-Length", XMLString(StrLen(Body)));
						Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
						Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
						Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");
						Попытка
							Request.Send(Body);
							Request.WaitForResponse();
						
						   Если Request.Status=200 Тогда
							Body = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Request.ResponseText);
							ЗаписатьДанныеВДокумент(Стр_1,ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Черновик"),Body[0].documentId,Body[0].letterId,ИмяФайла);
							Order_ID_УПД=Body[0].documentId;
							LetterID=Body[0].letterId;
						Иначе
							ВызватьИсключение "Не получилось отправить в Диадок";
							КонецЕсли;
						Исключение
							
							///НЕ ПОЛУИЧЛОСЬ ОТПРАВИМ БЕЗ ПОДПИСИ
							Body = JSONString(БезПодписи);
						
							Request.Open("POST", BoxUrl + "/Send/Post", 0);
							Request.SetRequestHeader("Content-Length", XMLString(StrLen(Body)));
							Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
							Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
							Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");

							Request.Send(Body);
							Request.WaitForResponse();
						
							Body = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Request.ResponseText);
							ЗаписатьДанныеВДокумент(Стр_1,ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Черновик"),Body[0].documentId,Body[0].letterId,ИмяФайла);
							Order_ID_УПД=Body[0].documentId;
							LetterID=Body[0].letterId;
							
						КонецПопытки;
									Если ЗначениеЗАполненО(Order_ID_УПД) И ЗначениеЗАполненО(LetterID) Тогда
										////СЧИТЫВАЕМ СТАТУС
										Request.Open("GET", "https://diadoc.kontur.ru/api/Documents.v1/boxes/"+boxid+"/letters/"+LetterID+"/documents/"+Order_ID_УПД, 0);
										Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
										Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
										Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");
										Request.Send();
										Request.WaitForResponse();
										СтатусДокумента=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ВернутьСтатусДокументаКонтВЕБ(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Request.ResponseText).documentStatus.text);
										//Если ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Черновик")<>СтатусДокумента Тогда
											ЗаписатьСтатусДокумента(Стр_1,СтатусДокумента);
											СтатусУПД=СтатусДокумента;
										//КонецЕсли;
									//	Возврат;
									Конецесли;
		
									
									
									//ЗаписатьДанныеВДокумент(Стр_1,ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Черновик"),Сред(Doc.id,1,36),ИмяФайла);
									Прервать;
								Конецесли;
												
						КонецЕсли;
						
		
	//	NewRow = Inbox.Add();
	//	FillPropertyValues(NewRow, Anchor, , "Attributes");
	//	For each Attr In Anchor.Attributes Do
	//		If Attr.Name = "needsfnsregmessage" Then
	//			AttrValue = Attr.Value;
	//		ElsIf Attr.Value = "true" Then
	//			AttrValue = True;
	//		ElsIf Attr.Value = "false" Then
	//			AttrValue = False;
	//		Else
	//			AttrValue = Attr.Value;
	//		EndIf;
	//		NewRow.Attributes.Add(AttrValue, Attr.Name);
	//	EndDo;
	EndDo;
	
	
	
	
Конеццикла;	
						                Попытка
										ЭтаФорма.Прочитать();
									Исключение
										КонецПопытки;

#КонецЕсли
КонецПроцедуры


&НаКлиенте
Процедура ВвестиЦенуИНДС(Команда)
	// Вставить содержимое обработчика.
	МассивВыделенных=Новый Массив;
	
	Для Каждого Стр из Элементы.ДеревоКМ.ВыделенныеСтроки Цикл
		МассивВыделенных.Добавить(Стр);
	КонецЦикла;
	ОткрытьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаВвестиЦенуИНДС",,,,,,Новый ОписаниеОповещения("ПослеВыбораЦен",ЭтаФорма,МассивВыделенных));
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЦен(РР,ДД)   Экспорт
	Если ЗначениеЗаполненО(РР) ТОгда
		Для Каждого Стр_1 Из ДД Цикл
			 ИД=ДеревоКМ.НайтиПоИдентификатору(Стр_1);
			ИД.Цена=РР.Цена;
			ИД.НДС=РР.НДС
		Конеццикла;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РешитьПроблемуСРазагрегацией(Команда)
	// Вставить содержимое обработчика.
	ЭтаФорма.Записать();
	
	МассивОтправкиДокументов=Новый Массив;
	МассивОтправкиДокументов.Очистить();
	ЗаменитьКМ=Новый Массив;
	ЗаменитьКМ.Очистить();
	МассиивОбновитьД=Новый Массив;
	МассиивОбновитьД.Очистить();
	Если ПроверкаПоКоробам(МассивОтправкиДокументов,ЗаменитьКМ,МассиивОбновитьД)=Истина Тогда
		Для Каждого Стр_2 Из ЗаменитьКМ Цикл
			НСтр=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_2.СтарыйКМ));
			Для Каждого Стр_222_М Из НСтр Цикл
				Стр_222_М.cis=Стр_2.НовыйКМ;
				Стр_222_М.Статус="";
				Сообщить("Изменен короб с "+Стр_2.СтарыйКМ+" на новый короб "+Стр_2.НовыйКМ);
			Конеццикла;
		Конеццикла;
		
		Обр=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
		Если Не Обр.Открыта() Тогда
			Обр.Открыть();
			ЭтаФорма.Активизировать();
		Конецесли;
		
		
		Для Каждого Стр_11 Из МассивОтправкиДокументов Цикл
			Форм=ПолучитьФорму("Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
			"Ключ",Стр_11));
			Форм.ОтправитьВЦРПТ(Команда);
		Конеццикла;
	
		Для Каждого Стр_11 Из МассиивОбновитьД Цикл
			Обр.ОбновитьСтатусыДокументов(Команда,,,Стр_11);
		Конеццикла;
		Если МассиивОбновитьД.Количество()>0 ИЛИ ЗаменитьКМ.Количество()>0 Тогда
			МассивОтправкиДокументов.Очистить();;
			ЗаменитьКМ.Очистить();
			МассиивОбновитьД.Очистить();
			Если ПроверкаПоКоробам(МассивОтправкиДокументов,ЗаменитьКМ,МассиивОбновитьД)=Истина Тогда
				Для Каждого Стр_2 Из ЗаменитьКМ Цикл
					НСтр=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_2.СтарыйКМ));
					Для Каждого Стр_222_М Из НСтр Цикл
						Стр_222_М.cis=Стр_2.НовыйКМ;
						Стр_222_М.Статус="";
					Конеццикла;
				Конеццикла;
				Если ЗаменитьКМ.Количество()=0 тогда
						Сообщить("В документе пристутсвуют разагрегированные короба. Отправка отменена");
						
						Возврат;
				Иначе
					МассивОтправкиДокументов.Очистить();;
					ЗаменитьКМ.Очистить();
					МассиивОбновитьД.Очистить();
					Если ПроверкаПоКоробам(МассивОтправкиДокументов,ЗаменитьКМ,МассиивОбновитьД)=Истина Тогда
						
						Сообщить("В документе пристутсвуют разагрегированные короба. Отправка отменена");
						
						Возврат;
					Иначе
						
						Сообщить("Новые агрегации оформлены");
					КонецЕсли;
				КонецЕсли;
				
				
			КонецЕсли;
		Иначе
			 Сообщить("В документе пристутсвуют разагрегированные короба. Отправка отменена");
			
			Возврат;
		КонецЕсли;
	Иначе
		Сообщить("Новые агрегации оформлены");
	КонецЕсли;
	
	
КонецПроцедуры



Функция Расч()
	
	Масс=Новый Массив;
	Для Каждого Стр_2 Из Объект.Товары Цикл
		Если Не ЗначениеЗАполнено(Стр_2.СтавкаНДС) Тогда
			Стр_2.СтавкаНДС=Стр_2.GTIN.СтавкаНДС;
		КонецЕсли;
		Если Не ЗначениеЗАполнено(Стр_2.СтавкаНДС) Тогда
			Стр_2.СтавкаНДС=Перечисления.СтавкаНДС_ХамелеонЦРПТ.НДС20;
		КонецЕсли;
		
		КоличествоКМ=Стр_2.КоличествоНомеровКМ;
		Если Не ЗначениеЗаполнено(КоличествоКМ) Тогда
			КоличествоКМ=Стр_2.КоличествоКМ;
		КонецЕсли;
		Масс.Добавить(Новый Структура("GTIN,КоличествоКМ,НомерСтроки,Сумма,Цена,НДС,СтавкаНДС",
		Стр_2.GTIN,КоличествоКМ,Стр_2.ПолучитьИдентификатор(),Стр_2.Сумма,Стр_2.Цена,Стр_2.НДС,Стр_2.СтавкаНДС));
	Конеццикла;
	    Возврат Масс;
КонецФункции
&НаКлиенте
Процедура РасчетСуммПоЦенамНаСервере()
	// Вставить содержимое обработчика.
	Масс=Расч();

	
	
	ОткрытьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаРасчетСумм",Новый Структура("ТаблицаЗнач",Масс),,,,,
	Новый ОписаниеОповещения("ПослеРедактированияСумм",ЭтаФорма));
	
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеРедактированияСумм(РР,ДД
	)                        Экспорт
	Если РР<>Неопределено Тогда
		
		Для Каждого Стр_2 Из РР Цикл
			
			Стр_3=Объект.Товары.НайтиПоИдентификатору(Стр_2.НомерСтроки);
			Стр_3.Сумма=Стр_2.Сумма;
			Стр_3.НДС=Стр_2.НДС;
			Стр_3.СтавкаНДС=Стр_2.СтавкаНДС;
			Стр_3.Цена=Стр_2.Цена;
			
		Конеццикла;
		
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура РасчетСуммПоЦенам(Команда)
	РасчетСуммПоЦенамНаСервере();
КонецПроцедуры

Процедура РекурсияПоКоробу_Цена(Стр_1,ЦенаЕстьНеобходимоОтправитьПоКК,СуммаПоКМ,НДС)
	Для Каждого Стр_2 Из Стр_1.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(Стр_2.Цена) ИЛИ ЗначениеЗаполнено(Стр_2.НДс) Тогда
			
			КоличествоУмножить=Стр_2.ПолучитьЭлементы().Количество();
			Если Не ЗначениеЗаполнено(КоличествоУмножить) Тогда 
				КоличествоУмножить=1
			КонецЕсли;
			СуммаПоКМ=СуммаПоКМ+Стр_2.Цена*КоличествоУмножить;
			НДС=НДС+Стр_2.НДс;
						
			
			ЦенаЕстьНеобходимоОтправитьПоКК=Истина;
		//	Возврат;
		КонецЕсли;
		
		РекурсияПоКоробу_Цена(Стр_2,ЦенаЕстьНеобходимоОтправитьПоКК,СуммаПоКМ,НДС);
		Если ЦенаЕстьНеобходимоОтправитьПоКК=истина Тогда
		//	Возврат;
		КонецЕсли;
	Конеццикла;
	
КонецПроцедуры


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ЗначениеЗаполнено(Объект.Ссылка) тогда
		РазблокироватьДанныеДляРедактирования(Объект.Ссылка,ЭтаФорма.УникальныйИдентификатор);
		ЭтаФорма.Модифицированность=Ложь;
	КонецЕсли;	
	ЗаполнитьЦеныИзДерева(ТекущийОбъект);
	
	
	Если ОтветилиУтвердительно=Ложь 
	И ПроверятьНаДубльПозицийВОтгрузке=Истина Тогда
	
		Таблиц=Объект.Товары.Выгрузить();
		Таблиц.Свернуть("gtin");
		Если Таблиц.Количество()<>Объект.Товары.Количество() Тогда
			
			
			МассивУжеБыли=Новый Массив;
			
			Позиции="";
			Для Каждого Стр_1 Из Объект.Товары Цикл
				
				Если МассивУжеБыли.Найти(Стр_1.gtin)=Неопределено Тогда
					МассивУжеБыли.Добавить(Стр_1.gtin);
				Иначе
					
					Если ЗначениеЗаполнено(Позиции) тогда
						Позиции=Позиции+", ";
					КонецЕсли;
					Позиции=Позиции+Строка(Стр_1.GTIN);
					
				КонецЕсли;
				
			Конеццикла;
			
			Сообщить("В документе обнаружены одинаковые строки по позициям: "+Позиции);
			
			
			
			
		КонецЕсли;
		
		
	КонецЕсли;
	

КонецПроцедуры

Процедура ЗаполнитьЦеныИзДерева(ТекущийОбъект)
	// Вставить содержимое обработчика.
	МассивСтрок=Новый ТаблицаЗначений;
	МассивСтрок.Колонки.Добавить("Строка");
	МассивСтрок.Колонки.Добавить("Сумма");
	МассивСтрок.Колонки.Добавить("НДС");
	МассивСтрок.Очистить();
	Если РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().АвтоматическоийПодсчетСуммыПоКМИзКороба Тогда
		Для Каждого Стр Из ТекущийОбъект.СерийныеНомера Цикл
			
			НСтр=ТекущийОбъект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
			НСтр=НСтр[0];
			
			ЕстьЦена=ЛОжь;
			
			СуммаПОКМ=0;
			НДС=0;
			Если Стр.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
				
				//////ТУТ ЕСЛИ ЦЕНЫ ЕСТЬ ПО КМ ТО НАДО
				
				
				Для Каждого Стр_1 Из ДеревоКМ.ПолучитьЭлементы() Цикл
					Если Стр_1.НомерКороба=Стр.cis Тогда
						
						Если ЗначениеЗАполнено(Стр_1.Цена)
							ИЛИ ЗначениеЗаполнено(Стр_1.НДс) Тогда
							ЕстьЦена=Истина;
							
							КоличествоУмножить=Стр_1.ПолучитьЭлементы().Количество();
							Если Не ЗначениеЗаполнено(КоличествоУмножить) Тогда 
								КоличествоУмножить=1
							КонецЕсли;
								СуммаПоКМ=СуммаПоКМ+Стр_1.Цена*КоличествоУмножить;
								НДС=НДС+Стр_1.НДс;
							
						КонецЕсли;
						
						ЦенаЕстьНеобходимоОтправитьПоКК=Ложь;
						РекурсияПоКоробу_Цена(Стр_1,ЦенаЕстьНеобходимоОтправитьПоКК,СуммаПоКМ,НДС);
						
												
						Прервать;
						
					КонецЕсли;
					
					
				Конеццикла;
				
				
				
				
				//Цена_1=РегистрыСведений.ИсторияПоCIS_ХамелеонЦРПТ.Получить(
			   	
				
				
			КонецЕсли;
			Если ЕстьЦена=Истина Тогда
				
				ДоабвСтр=МассивСтрок.Добавить();
				ДоабвСтр.Строка=НСтр;
				ДоабвСтр.Сумма=СуммаПоКМ;
				ДоабвСтр.НДС=НДС;
				//Чтен.ЗаписатьИмяСвойства("product_description");
				//Чтен.ЗаписатьЗначение(строка(НСтр.gtin));
				//Чтен.ЗаписатьИмяСвойства("product_cost");
				//Чтен.ЗаписатьЗначение(Окр(НСтр.Цена,2)*100);
				//Чтен.ЗаписатьИмяСвойства("product_tax");
				//Чтен.ЗаписатьЗначение(Окр(НСтр.НДС/НСтр.КоличествоКМ,2)*100);
			КонецЕсли;
			//Чтен.ЗаписатьКонецОбъекта();
			
			
			КонецЦикла;
			Для Каждого Стр_111 Из МассивСтрок Цикл
				
				Стр_111.Строка.Цена=0;
				Стр_111.Строка.Сумма=0;
				Стр_111.Строка.НДС=0;
				
				
			Конеццикла;
			Для Каждого Стр_111 Из МассивСтрок Цикл
				
				//Стр_111.Строка.Цена=0;
				Стр_111.Строка.Сумма=Стр_111.Строка.Сумма+Стр_111.Сумма;
				Стр_111.Строка.НДС=Стр_111.Строка.НДС+Стр_111.НДС;
				Если Стр_111.Строка.КоличествоКМ<>0 Тогда
					Стр_111.Строка.Цена=Стр_111.Строка.Сумма/Стр_111.Строка.КоличествоКМ
				Иначе
					Стр_111.Строка.Цена=Стр_111.Строка.Сумма
				КонецЕсли;
				
				
			Конеццикла;
			
	КонецЕслИ;
КонецПроцедуры

Процедура ЗаполнитьЦеныИзДереваCCthdth()
	ЗаполнитьЦеныИзДерева(Объект)
КонецПроцедуры

&НаКлиенте
Процедура СуммаИзДерева(Команда)
	// Вставить содержимое обработчика.
	ЗаполнитьЦеныИзДереваCCthdth()
КонецПроцедуры

&НаСервере
Функция СоздатьИсправлениеДляОтгрузкиНаСервере()
	// Вставить содержимое обработчика.
	
	Если ЗначениеЗаполнено(Объект.Order_ID_УПД) тогда
		
		Докум=Документы.Отгрузка_ХамелеонЦРПТ.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(Докум,Объект,,"Дата,Номер,СтатусУПД,Статус,ОшибкаОтправки");
		Докум.Дата=Текущаядата();
		Докум.ДатаПервичногоДокумента=Объект.Дата;
		Докум.ПервичныйДокумент=Объект.Ссылка;
		Для Каждого Стр_1 Из Объект.Товары Цикл
			Дбав=Докум.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(Дбав,Стр_1);
		Конеццикла;
		Для Каждого Стр_2 Из Объект.СерийныеНомера цикл
			Добав=Докум.СерийныеНомера.Добавить();
			ЗаполнитьЗначенияСвойств(Добав,Стр_2);
		Конеццикла;
		Докум.НомерИсправления=1;
		
		Докум.ТипУточненияУПД=Перечисления.ТипУточненияУПД_ХамелеонЦРПТ.Исправление;
		
		Докум.Записать();
		Возврат докум.Ссылка;
		
	КонецЕсли;
	 Возврат Неопределено;
Конецфункции


&НаКлиенте
Процедура СоздатьИсправлениеДляОтгрузки(Команда) Экспорт
	Если ЗначениеЗаполнено(Объект.ТипУточненияУПД)
		Тогда
		ПоказатьПредупреждение(,"Исправление возможно только по первичному документу");
		Возврат;
	КонецЕсли;

	ОткрытьДокумент=СоздатьИсправлениеДляОтгрузкиНаСервере();
	Если ЗначениеЗаполнено(ОткрытьДокумент) тогда
		ОткрытьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаДокумента"
		,новый Структура("Ключ",ОткрытьДокумент));
		
	КонецЕсли;
КонецПроцедуры


Функция ФормируемXMLФармацевтика(Thumbprint_1,СРегистра)
	//МассивТекстов=Новый Массив;

		//Текст = Сформировать311_XSD(session_ui,НСтрок);
		
		Чтение=Новый ЗаписьXML;
		Чтение.УстановитьСтроку("UTF-8");
		Чтение.ЗаписатьОбъявлениеXML();
		Чтение.ЗаписатьНачалоЭлемента("documents");
		Чтение.ЗаписатьАтрибут("version","1.35");
		
		Чтение.ЗаписатьНачалоЭлемента("accept");
		Чтение.ЗаписатьАтрибут("action_id","701");
		Чтение.ЗаписатьНачалоЭлемента("subject_id");
		Чтение.ЗаписатьТекст(Объект.ДоговорОрганизации.РегистрационныйНомер);
		Чтение.ЗаписатьКонецЭлемента();
		
		Чтение.ЗаписатьНачалоЭлемента("counterparty_id");
		Чтение.ЗаписатьТекст(Объект.Договор.РегистрационныйНомер);
		Чтение.ЗаписатьКонецЭлемента();
		
		Чтение.ЗаписатьНачалоЭлемента("operation_date");
		//Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
			
			//Время=ПолучитьЧасовойПоясИнформационнойБазы();
			
	
	Прибавка="Z";
		Если ЗначениеЗаполнено(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств) тогда
			Прибавка=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств,2,"0");
			Если Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств>0 Тогда
				     Прибавка="+"+Прибавка+":00";
			Иначе
				     Прибавка="-"+Прибавка+":00";
			Конецесли;
		Конецесли;
			
			Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+Прибавка);
	//	Иначе
	//		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"Z");
		
	//	конецесли;
		
		Чтение.ЗаписатьКонецЭлемента();
		
			
		
		Чтение.ЗаписатьНачалоЭлемента("order_details");
		
		
	//	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));

	Для Каждого Стр_c Из Объект.СерийныеНомера Цикл
			Штрих=Стр_c.cis;
			Если СтрДлина(Штрих)=18 Тогда
				Чтение.ЗаписатьНачалоЭлемента("sscc");
			Иначе
				Чтение.ЗаписатьНачалоЭлемента("sgtin");
			КонецЕсли;
			
			Чтение.ЗаписатьТекст(Штрих);
			Чтение.ЗаписатьКонецЭлемента();
			
			  
			
		Конеццикла;
		Чтение.ЗаписатьКонецЭлемента();
		Чтение.ЗаписатьКонецЭлемента();
		Чтение.ЗаписатьКонецЭлемента();
		
	//КонецЕсли;
	
	Текст=Чтение.Закрыть();
	 Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			//ЗапишемВРегистр_Акт(Текст);
	КонецЕсли;
	
	Возврат Текст;
	
Конецфункции
	
	

&НаКлиенте
Процедура ПодтвердитьОбртаныйАкцепт(Команда)
	// Вставить содержимое обработчика.
	
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
	
	Если Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ЧастичноПринят")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ЧерновикОбработан")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан")
		тогда
		Возврат;
	КонецЕсли;
	
	//Если Объект.ОбратныйАкцепт=Истина Тогда
	//	Если Объект.Товары.Количество()=0 Тогда
	//		ПолучитьИнформациюОКМ("");
	//		ПоказатьПредупреждение(,"Не заполнены цены!!! Заполните их после чего примите документ заново");
	//		Возврат;
	//	КонецЕсли;;
		
	//КонецЕслИ;
	
	СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
	СформироватьФайлДляОтправки_1=ФормируемXMLФармацевтика(Thumbprint_1,СРегистра);
		
		//Сч=0;
		//Для Каждого Стр_1 Из Объект.Товары Цикл
			
		СформироватьФайлДляОтправки=СформироватьФайлДляОтправки_1;
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
		
		
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
		//Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

				
				Подписанный="";
		//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
		//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл_ЛДМП(СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Ложь);
			//Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
			//Иначе
			//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл_ЛДМП(СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Ложь);
				
				
			//КонецЕсли;
		
		//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//Подписанный,КодировкаТекста.UTF8,Ложь));
		
					Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
				Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
				 Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("document");
	Чтен.ЗаписатьЗначение(Добав);
	Чтен.ЗаписатьИмяСвойства("sign");
	Чтен.ЗаписатьЗначение(Подписанный);
	Чтен.ЗаписатьИмяСвойства("request_id");
	Чтен.ЗаписатьЗначение(ВернутьУНИКУМ());
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();
	
				 
				 
		//Тело="{
		//|""doc_type"":""311"",
		//|""document"":"""+Добав+""",
		//|""sign"":"""+Подписанный+""",
		//|""request_id"":"""+ВернутьУНИКУМ()+"
		//|}";
			
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/send");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		
	Если Ответ.КодСостояния=200 ИЛИ Ответ.КодСостояния=200  Тогда
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Объект.LetterIDДиадок=NNN.document_id;
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
				//НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
//				Объект._Order_ID=NNN.orderId;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
	Иначе
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Объект.ОшибкаОтправки=Текст1;
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
	КонецЕсли;

		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Ответ(Текст1);
		КонецЕсли;
			
		
		
		
			
			
		///Конеццикла;
		
		 ЭтаФорма.Записать();
		 //УправлениеВидимостью();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСерийныеНомерДляЛекарствНаСервере()
	// Вставить содержимое обработчика.
	МММ=Объект.СерийныеНомера.Выгрузить();
	МассивКМ=МММ.ВыгрузитьКолонку("cis");
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СерийныеНомераДляКМ_ХамелеонЦРПТ.КМ,
		|	СерийныеНомераДляКМ_ХамелеонЦРПТ.СерийныйНомер
		|ИЗ
		|	РегистрСведений.СерийныеНомераДляКМ_ХамелеонЦРПТ КАК СерийныеНомераДляКМ_ХамелеонЦРПТ
		|ГДЕ
		|	СерийныеНомераДляКМ_ХамелеонЦРПТ.КМ В(&КМ)";
	
	Запрос.УстановитьПараметр("КМ", МассивКМ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Если ЗначениеЗАполнено(ВыборкаДетальныеЗаписи.КМ) И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СерийныйНомер) Тогда
			Нстроку=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",ВыборкаДетальныеЗаписи.КМ));
			Для Каждого Стр_1 ИЗ Нстроку Цикл
				Стр_1.СерийныйНомер=ВыборкаДетальныеЗаписи.СерийныйНомер
			Конеццикла;
		КонецЕсли;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСерийныеНомерДляЛекарств(Команда)
	ЗаполнитьСерийныеНомерДляЛекарствНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПечатьУКД(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	ЭтаФорма.Записать();
	
	
	Печать=Новый ТабличныйДокумент;
	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Форм.ПечатьУКДНаСервере(печать,Объект.Ссылка);
	Печать.АвтоМасштаб=Истина;
	Печать.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	
	Печать.ИмяПараметровПечати="Печать_УПД";
	Печать.Показать();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	// Вставить содержимое обработчика.
	
	Thumbprint_1=ПолучитьИзПользователя();
	
	ОПределитьУпаковки(Thumbprint_1);
КонецПроцедуры

&НаКлиенте
Процедура ОПределитьУпаковки(Thumbprint_1) Экспорт
		Для Каждого Стр_2 Из Объект.СерийныеНомера Цикл
			Если Не ЗначениеЗАполненО(Стр_2.ТипУпаковки) Тогда
				ТипУпаковки=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ВернутьИнформациюОКМ(Стр_2.cis,Thumbprint_1);
				Если ТипУпаковки=Истина Тогда
					Стр_2.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка");
				ИначеЕсли ТипУпаковки=Ложь Тогда
					Стр_2.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Штука");
					
					
				КонецЕсли;
			КонецЕсли;
			
		Конеццикла;
	
	КонецПроцедуры

&НаКлиенте
Процедура ТекущийПользовательПриИзменении(Элемент)
		// Вставить содержимое обработчика.
	ДанныеИзПользователя=ПолучитьИзПользователя();
		
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьНаСервере()
	// Вставить содержимое обработчика.
	
		
	
КонецПроцедуры

&НаКлиенте
Процедура Перезаполнить(Команда)
			ПоказатьИнформацию("");
		НаСервереПокажем();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	БылаБлокировка=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьТипУпаковкиДля01(Команда)
	// Вставить содержимое обработчика.
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
	МассивКМ=Новый Массив;
	
	Если Thumbprint_1.НаименованиеСтенда="Табак"
		
		ИЛИ 
		Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
		Тогда
		
		Для Каждого Стр Из Объект.СерийныеНомера Цикл
			
			Если Сред(Стр.cis,1,2)="01" Тогда
				//Стр.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Штука");
				cisДляОпределения=Сред(Стр.cis,1,25);
				
				МассивКМ.Добавить(cisДляОпределения);
				
				
			КонецЕсли;
			
		Конеццикла;
		
				 
	КонецЕсли;	
	//Для каждого Стр_1 Из Объект.СерийныеНомера Цикл
		
	//	Если ВРЕГ(Стр_1.статус)="INTRODUCED" ИЛИ (Врег(Стр_1.Статус)="APPLIED" И ТолькоА=Ложь) Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	Стр_1.Статус="Не найдено в ЦРПТ";
	//Конеццикла;	
	ОбработатьстатусыКМ(МассивКМ);
	

	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетСтрокиСвязиС1(Команда)
	// Вставить содержимое обработчика.
	
	МаксималныйНомерСтрокиСвяи=0;
	
	Для Каждого Стр_1 Из Объект.Товары Цикл
		Если стр_1.НомерСтрокисвязи>МаксималныйНомерСтрокиСвяи Тогда
			МаксималныйНомерСтрокиСвяи=стр_1.НомерСтрокисвязи;
		КонецЕсли;
	Конеццикла;
	
	МаксималныйНомерСтрокиСвяи=МаксималныйНомерСтрокиСвяи+1;
	
	
	Для Каждого Стр Из Объект.Товары Цикл
		НСтр=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Для Каждого Стр_1 Из НСТр Цикл
			Стр_1.НомерСтрокиСвязи=МаксималныйНомерСтрокиСвяи;
		Конеццикла;
		Стр.НомерСтрокиСвязи=МаксималныйНомерСтрокиСвяи;
		МаксималныйНомерСтрокиСвяи=МаксималныйНомерСтрокиСвяи+1
	КонецЦикла;
	
	Сч=1;
	Для Каждого Стр Из Объект.Товары Цикл
		НСтр=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Для Каждого Стр_1 Из НСТр Цикл
			Стр_1.НомерСтрокиСвязи=Сч;
		Конеццикла;
		Стр.НомерСтрокиСвязи=Сч;
		Сч=СЧ+1;
		//МаксималныйНомерСтрокиСвяи=МаксималныйНомерСтрокиСвяи+1
		
		
	Конеццикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеПредложенияАннулирования(Команда)
	// Вставить содержимое обработчика.
	
	Если ЗначениеЗаполнено(объект.Order_ID_УПД) тогда
		Если ЗначениеЗаполнено(Объект.ТипЭДООтправки) И Объект.ТипЭДООтправки<>ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОТакском") Тогда
			Сообщить("Накладная "+СТрока(Объект.Ссылка)+" отправлена по другой системе: "+Строка(Объект.ТипЭДООтправки));
			Возврат;
		КонецЕсли;
		
		//Если 
			
		//	Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Отправлен")
		//	ИЛИ Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Отправлен")
		//	ИЛИ Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Подписан")
		//	ИЛИ ОБъект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Уточнён")
		//	ИЛИ ОБъект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.ЗапросНаУточнениеПросмотренОжидаетсяУточнение")
		//	Тогда
		//Возврат;
		//КонецЕсли;
	КонецЕсли;
	
	//Объект.ОшибкаОтправки="";	
	ЭтаФорма.Записать();
		МассивНакладных=Новый Массив;
		МассивНакладных.Добавить(Объект.Ссылка);
	
		ПодтверждениеПредложенияАннулирования_Массив(МассивНакладных);
		ЭтаФорма.Прочитать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Аннулирование(Докум,Идентификатор)
	
	Идентификатор=Докум.Order_ID_УПД;
	Возврат "<?xml version=""1.0"" encoding=""utf-8""?>
|
|<DocumentActions>
|
|<Document InternalId="""+Докум.Order_ID_УПД+""" Action=""AcceptCancellationOffer"">
|
|</Document>
|
|</DocumentActions>";
	
Конецфункции


&НаКлиенте
Процедура ПодтверждениеПредложенияАннулирования_Массив(МассивНакладных) Экспорт
	
	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Если НЕ Форм.Открыта() Тогда
		Форм.Открыть();
	КонецЕсли;
	
	Thumbprint_1=ПолучитьИзПользователя();	
	
	СайтДляПодключенияПоТакскму=Thumbprint_1.ТХЦ;
	
	
	Результат="";
	Организация=Неопределено;
	Попытка
		Компонента = Новый COMОбъект("CryptoAX.Encryptor");
	Исключение
		
		ОткрытьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаГиперссылка");
		Возврат;
		//Сообщить("Необходимо проверить доступ к ЛК ");
		
	КонецПопытки;
	Для Каждого Стр_1 Из МассивНакладных Цикл
		
		
		ТипЭДООтправки=ТипЭДООтправки(Стр_1);

		Если ЗначениеЗаполнено(ТипЭДООтправки) И ТипЭДООтправки<>ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОТакском") Тогда
			Сообщить("Накладная "+СТрока(Стр_1.Ссылка)+" отправлена по другой системе: "+Строка(ТипЭДООтправки)+". Аннулирования данного документа невозможно");
			Продолжить;
		КонецЕсли;
		
		
		
		Идентификатор=ПолучитьИдентификатор(Стр_1);
		Если Организация<>Идентификатор Тогда
		
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
						
				HTTPСервисЗапрос=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
						
				HTTPСервисЗапрос=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;

			Результат=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОТХЦ(Thumbprint_1,Идентификатор,HTTPСервисЗапрос);
			Если Не ЗначениеЗаполнено(Результат) Тогда
				Продолжить;
			КонецЕсли;
			Организация=Идентификатор;
		КонецЕсли;

		РеквизитыДокумента_1=Новый Структура;
		ОткрытьФорму_1=Ложь;
		Сообщения=Неопределено;
		
		
		Идентификатор="";
		СтрокаXML =
		Аннулирование(Стр_1,Идентификатор);	
		
		Если ЗначениеЗаполнено(СтрокаXML) Тогда
			ДанныеФайла = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(СтрокаXML,КодировкаТекста.ANSI);//ДвоичныеДанныеИзСтрокиXML(СтрокаXML.Текстовыйдо.Получитьтекст());
			
			РеквизитыДокумента_1.Вставить("ИмяФайлаЭД","ANNULIR.xml");
			РеквизитыДокумента_1.Вставить("ИдентификаторЭД",Идентификатор);
		
		Иначе
			Сообщить("В документе "+Строка(Стр_1)+" есть ошибки при формировании");
			Продолжить
		КонецЕсли;
		
		Отказ=Ложь;
		
		
	
	Подписанный=Компонента.MrSign(base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(СтрокаXML,КодировкаТекста.ANSI,Ложь)),
	Thumbprint_1.Thumbprint_1);
		ИдентификаторЭД=Идентификатор;
		
		ПакетЭДО=СформироватьПервичныйПакетЭДО_аннулированиеПодтверждение(РеквизитыДокумента_1,Отказ,ДанныеФайла,Стр_1,Подписанный,ИдентификаторЭД);
	//	ПакетЭДО=СформироватьПервичныйПакетЭДО(РеквизитыДокумента_1,Отказ,ДанныеФайла,Стр_1,ДанныеПодписи ,ИдентификаторЭД);
		
		Если  ПакетЭДО<>Неопределено Тогда
			
			ТранзакцияДоклайнз="ReceiveNotification";

			ИмяПакета = ТранзакцияДоклайнз
											+ "_" + ИдентификаторЭД;
		
			АдресРесурса = "API/SendMessage/" + ИмяПакета;
			
			Запрос = Новый HTTPЗапрос;
			Запрос.АдресРесурса = АдресРесурса;
				Запрос.Заголовки.Вставить("Integrator-Id", "Kartoteka_9AFE5408-C930-47FA-9CE4-FAE615EED09E");
				Запрос.Заголовки.Вставить("Assistant-Key", Результат);
			 
				Запрос.УстановитьТелоИзДвоичныхДанных(ПакетЭДО);
			Попытка 
				Ответ = HTTPСервисЗапрос.ОтправитьДляОбработки(Запрос);
			Исключение
		//		ПараметрыСоединения.СоединениеУстановлено = Ложь;
				Инфо = ИнформацияОбОшибке();
			   Сообщить("Описание='" + Инфо.Описание + "'");
			    Сообщить("ИмяМодуля='" + Инфо.ИмяМодуля + "'");
			    Сообщить("НомерСтроки=" + Инфо.НомерСтроки);
			    Сообщить("ИсходнаяСтрока='" + Инфо.ИсходнаяСтрока + "'");
				
				Возврат
			КонецПопытки;		
		//	
			Если Ответ.КодСостояния <> 200 Тогда
		//		ПараметрыСоединения.СоединениеУстановлено = Ложь;
				Если Ответ.КодСостояния > 500 Тогда
		//			ПараметрыСоединения.ОбновлятьАвтоматически = Ложь;
	КонецЕсли;
	ОтветПол=Ответ.ПолучитьТелоКакСтроку("UTF-8");
	Если Найти(ОтветПол,"Абоненту запрещен доступ к Web API")>0 Тогда
		Сообщить("Обратитесь в ТХЦ(privl@taxcom.ru) с просьбой предоставить(включить) доступ к АПИ для ИНН(указать)");
	КонецЕсли;
				Сообщить(ОтветПол);
				Возврат;
			КонецЕсли;
			
			
			//ЗаписатьСтатусЧерновикВНакладную(Стр_1,ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Черновик"),ИдентификаторЭД,РеквизитыДокумента_1.ИмяФайлаЭД);
			
			
		//	
		//	
		//	
		КонецЕсли;

		
	Конеццикла;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьПервичныйПакетЭДО_аннулированиеПодтверждение(РеквизитыДокумента_1, Отказ,ДвоичныеДанныеДокумента,Стр_1,Подписанный,ИдентификаторЭД) Экспорт
	
	//РеквизитыДокумента = Структура.ИнформацияОДокументе;
	//ДвоичныеДанныеДокумента = Структура.ДвоичныеДанныеДокумента;
	
	ДвоичныеДанныеАрхива=Неопределено;
	//НачатьТранзакцию();
	
	//Если ЗначениеЗаполнено(Стр_1.Order_ID_УПД) Тогда	
//		ИдентификаторЭД=xmlString(Новый УникальныйИдентификатоР());
	//Иначе
	//	ИдентификаторЭД=xmlString(Стр_1.Ссылка.УникальныйИдентификатор());
		
	//КонецЕсли;
		ИдДляОтправки=ИдентификаторЭД;
		//xmlString(Новый УникальныйИдентификатор());
	КаталогКонтейнера = КаталогВременныхФайлов()+xmlString(ИдДляОтправки)+"\";
	
	//Попытка
		ПакетЭДО = Новый Структура("ИдентификаторОтправителя, ИдентификаторПолучателя, ИдентификаторДокументооборота");
		
		//ПакетЭДО.ИдентификаторОтправителя = ВРЕГ(РеквизитыДокумента.Организация.ИД_ЭДО);
		//ПакетЭДО.ИдентификаторПолучателя = РеквизитыДокумента.Контрагент.ИД_ЭДО;
		//ПакетЭДО.ИдентификаторДокументооборота = РеквизитыДокумента.ИдентификаторЭД;
		
		ТипДокумента = "CancellationOfferResign";
		
		ПроверитьСоздатьКаталог(КаталогКонтейнера);
		//
		СформироватьФайлCard_ПодвержденияАннулирования(
			КаталогКонтейнера,Стр_1,ИдДляОтправки
			//РеквизитыДокумента,
			//ТипДокумента,
			//ТребуетсяПодписьПолучателя,
			//Истина
			);
		//	
		СформироватьФайлMeta_ПодтвержденияАннулирования(
			КаталогКонтейнера,Стр_1,ИдДляОтправки,РеквизитыДокумента_1
		//	РегламентДоклайнз,
		//	ТранзакцияДоклайнз,
		//	ПакетЭДО.ИдентификаторДокументооборота,
		//	РеквизитыФайла
		);
		//	
		ДвоичныеДанныеДокумента.Записать(КаталогКонтейнера + РеквизитыДокумента_1.ИмяФайлаЭД);
		
		//ДвоичныеДанныеДокумента=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Подписанный);
		ДвоичныеДанныеДокумента=base64Значение(Подписанный);
		ДвоичныеДанныеДокумента.Записать(КаталогКонтейнера + Сред(РеквизитыДокумента_1.ИмяФайлаЭД,1,СтрДлина(РеквизитыДокумента_1.ИмяФайлаЭД)-4)+"-1.p7s");
		//Подписанный.Записать(КаталогКонтейнера + Сред(РеквизитыДокумента_1.ИмяФайлаЭД,1,СтрДлина(РеквизитыДокумента_1.ИмяФайлаЭД)-4)+"-1.p7s");
		
		//ПорядковыйНомер = 1;
		//Для Каждого ДанныеПодписи Из РеквизитыФайла.ЭлектронныеПодписи Цикл
		//	ДанныеПодписи.Записать(
		//		КаталогКонтейнера + РеквизитыФайла.ПолноеНаименование + "-" + ПорядковыйНомер + ".p7s");
		//	ПорядковыйНомер = ПорядковыйНомер + 1;
		//КонецЦикла;
		//
		ТранзакцияДоклайнз="CancellationOfferResign";
		ИмяФайлаАрхива = ТранзакцияДоклайнз + "_" + ИдДляОтправки+ ".zip";
		ЗаписьZip = Новый ЗаписьZipФайла(КаталогКонтейнера + ИмяФайлаАрхива);
		ЗаписьZip.Добавить(КаталогКонтейнера, РежимСохраненияПутейZIP.НеСохранятьПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
		ЗаписьZip.Записать();
		//
		ДвоичныеДанныеАрхива = Новый ДвоичныеДанные(КаталогКонтейнера + ИмяФайлаАрхива);
		УдалитьФайлы(КаталогКонтейнера);
		
		
		
		
	//Исключение
	//	УдалитьФайлы(КаталогКонтейнера);
	//	Отказ=Истина;
	//	Сообщить(ОписаниеОшибки());
	//КонецПопытки;
	
	Возврат  ДвоичныеДанныеАрхива;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СформироватьФайлMeta_ПодтвержденияАннулирования(
	КаталогКонтейнера,Стр_1,Ид,РеквизитыДокумента_1
	//, Регламент, Транзакция, ИдентификаторДокументооборота, РеквизитыФайла
	)
	
	Чтение=Новый ЗаписьXML;
	Чтение.ОткрытьФайл(КаталогКонтейнера + "meta.xml","windows-1251");
	//Чтение.УстановитьСтроку("windows-1251");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("ContainerDescription");
	Чтение.ЗаписатьАтрибут("xmlns","http://api-invoice.taxcom.ru/meta");
	Чтение.ЗаписатьАтрибут("xmlns:xs","http://www.w3.org/2001/XMLSchema");
	Чтение.ЗаписатьАтрибут("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
	
	Чтение.ЗаписатьНачалоЭлемента("DocFlow");
	Чтение.ЗаписатьАтрибут("Id",Ид);
	
	Чтение.ЗаписатьНачалоЭлемента("Documents");
	
	
	
	Чтение.ЗаписатьНачалоЭлемента("Document");
	Чтение.ЗаписатьАтрибут("ReglamentCode","Invoice");
	Чтение.ЗаписатьАтрибут("TransactionCode","CancellationOfferResign");
	
	
	Чтение.ЗаписатьНачалоЭлемента("Files");
	
	Чтение.ЗаписатьНачалоЭлемента("MainImage");
	Чтение.ЗаписатьАтрибут("Path",РеквизитыДокумента_1.ИмяФайлаЭД);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("MainImageSignature");
	Чтение.ЗаписатьАтрибут("Path",Сред(РеквизитыДокумента_1.ИмяФайлаЭД,1,СтрДлина(РеквизитыДокумента_1.ИмяФайлаЭД)-4)+"-1.p7s");
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("ExternalCard");
	Чтение.ЗаписатьАтрибут("Path","card.xml");
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.Закрыть();
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьФайлCard_ПодвержденияАннулирования(
	КаталогКонтейнера,Стр_1,Ид
	//РеквизитыДокумента, 
	//ТипДокумента = Неопределено, 
	//ТребуетсяОтветнаяПодпись = Неопределено, 
	//ЭтоПервичныйДокумент = Ложь, 
	//ЭтоИзвещениеДляОператораЭДО = Ложь
	)
	
	
	//XML_DOM=Новый ЗаписьXML;
	
	//XML_DOM.УстановитьСтроку("windows-1251");
	Чтение=Новый ЗаписьXML;
	Чтение.ОткрытьФайл(КаталогКонтейнера+"card.xml","windows-1251");
	//Чтение.УстановитьСтроку("windows-1251");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("Card");
	Чтение.ЗаписатьАтрибут("xmlns","http://api-invoice.taxcom.ru/card");
	Чтение.ЗаписатьАтрибут("xmlns:xs","http://www.w3.org/2001/XMLSchema");
	Чтение.ЗаписатьАтрибут("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
	
	Чтение.ЗаписатьНачалоЭлемента("Identifiers");
	Чтение.ЗаписатьАтрибут("ExternalIdentifier",Ид);
	Чтение.ЗаписатьКонецЭлемента();
	
	
	
	Чтение.ЗаписатьНачалоЭлемента("Type");
	Чтение.ЗаписатьАтрибут("Name","ReceiveNotification");
	Чтение.ЗаписатьАтрибут("ResignRequired","true");
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("Description");
	Чтение.ЗаписатьАтрибут("Title","Аннулировать отгрузку");
	Чтение.ЗаписатьАтрибут("Date",Формат(Текущаядата(),"ДФ=""гггг-ММ-дд ЧЧ:мм:сс"""));
	
	Чтение.ЗаписатьНачалоЭлемента("AdditionalData");
	
	Чтение.ЗаписатьНачалоЭлемента("AdditionalParameter");
	Чтение.ЗаписатьАтрибут("Name","Номер");
	Чтение.ЗаписатьАтрибут("Value",Стр_1.Номер);
	Чтение.ЗаписатьКонецЭлемента();
	
	
	
	Чтение.ЗаписатьНачалоЭлемента("AdditionalParameter");
	Чтение.ЗаписатьАтрибут("Name","DocumentType");
	Чтение.ЗаписатьАтрибут("Value","CancellationOfferResign");
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Чтение.ЗаписатьНачалоЭлемента("AdditionalParameter");
	Чтение.ЗаписатьАтрибут("Name","Сумма");
	Чтение.ЗаписатьАтрибут("Value",xmlString(Стр_1.СуммаДокумента));
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Чтение.ЗаписатьКонецЭлемента();

	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("Sender");
	Чтение.ЗаписатьНачалоЭлемента("Abonent");
	Чтение.ЗаписатьАтрибут("Id",Стр_1.Организация.ИД_ЭДО);
	Чтение.ЗаписатьАтрибут("Name",Стр_1.Организация.Наименование);
	Чтение.ЗаписатьАтрибут("Inn",Стр_1.Организация.ИНН);
	Если ЗначениеЗаполнено(Стр_1.Организация.КПП) Тогда
		Чтение.ЗаписатьАтрибут("Kpp",Стр_1.Организация.КПП);
	КонецЕсли;
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	
	
	
	Чтение.ЗаписатьНачалоЭлемента("Receiver");
	Чтение.ЗаписатьНачалоЭлемента("Abonent");
	Чтение.ЗаписатьАтрибут("Id",Стр_1.Контрагент.ИД_ЭДО);
	Чтение.ЗаписатьАтрибут("Name",Стр_1.Контрагент.Наименование);
	Чтение.ЗаписатьАтрибут("Inn",Стр_1.Контрагент.ИНН);
	Если ЗначениеЗаполнено(Стр_1.Контрагент.КПП) Тогда
		Чтение.ЗаписатьАтрибут("Kpp",Стр_1.Контрагент.КПП);
	КонецЕсли;
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.Закрыть();
	
	
КонецПроцедуры


&НаКлиенте
Процедура ПредложениеОбАннулированииТАКСКОМ(Команда)
	// Вставить содержимое обработчика.
	Если ЗначениеЗаполнено(объект.Order_ID_УПД) тогда
		Если ЗначениеЗаполнено(Объект.ТипЭДООтправки) И Объект.ТипЭДООтправки<>ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОТакском") Тогда
			Сообщить("Накладная "+СТрока(Объект.Ссылка)+" отправлена по другой системе: "+Строка(Объект.ТипЭДООтправки));
			Возврат;
		КонецЕсли;
		
		//Если 
			
		//	Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Отправлен")
		//	ИЛИ Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Отправлен")
		//	ИЛИ Объект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Подписан")
		//	ИЛИ ОБъект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Уточнён")
		//	ИЛИ ОБъект.СтатусУПД=ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.ЗапросНаУточнениеПросмотренОжидаетсяУточнение")
		//	Тогда
		//Возврат;
		//КонецЕсли;
	КонецЕсли;
	
	//Объект.ОшибкаОтправки="";	
	ЭтаФорма.Записать();
		МассивНакладных=Новый Массив;
		МассивНакладных.Добавить(Объект.Ссылка);
	
		ПредложенияАннулирования_Массив(МассивНакладных);
		ЭтаФорма.Прочитать();
	
	
КонецПроцедуры



&НаКлиенте
Процедура ПредложенияАннулирования_Массив(МассивНакладных) Экспорт

	СчетчикУникальности=1;
	Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонМеркурий.Форма.ВводСтроки",,,СчетчикУникальности,,,Новый ОПисаниеОповещения("ПричинаАннулирования",ЭтаФорма,МассивНакладных),РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Форм.Заголовок="Аннулирование документов";
	//Форм.Заголовок="Аннулирование транзакций";
	Форм.Строка="";
	Форм.Элементы.МеждуСвоимиОрганизациями.Заголовок="Причина аннулирования";
	Форм.Элементы.ФормаОтправитьВЦРПФармаБольшойРазмер.Заголовок="Отправить предложение об аннулирование";
	Форм.Элементы.ФормаКнопка2.Заголовок="Отмена аннулирования";
	
КонецПроцедуры


&НаКлиенте
Процедура ПричинаАннулирования(ПричинаАннулирования,МассивНакладных)	
	Если не ЗначениеЗаполнено(ПричинаАннулирования) Тогда
		Возврат;
	Конецесли;
	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Если НЕ Форм.Открыта() Тогда
		Форм.Открыть();
	КонецЕсли;
	
	Thumbprint_1=ПолучитьИзПользователя();	
	
	СайтДляПодключенияПоТакскму=Thumbprint_1.ТХЦ;
	
	
	Результат="";
	Организация=Неопределено;
	Попытка
		Компонента = Новый COMОбъект("CryptoAX.Encryptor");
	Исключение
		
		ОткрытьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаГиперссылка");
		Возврат;
		//Сообщить("Необходимо проверить доступ к ЛК ");
		
	КонецПопытки;
	Для Каждого Стр_1 Из МассивНакладных Цикл
		
		
		ТипЭДООтправки=ТипЭДООтправки(Стр_1);

		Если ЗначениеЗаполнено(ТипЭДООтправки) И ТипЭДООтправки<>ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОТакском") Тогда
			Сообщить("Накладная "+СТрока(Стр_1.Ссылка)+" отправлена по другой системе: "+Строка(ТипЭДООтправки)+". Аннулирования данного документа невозможно");
			Продолжить;
		КонецЕсли;
		
		
		
		Идентификатор=ПолучитьИдентификатор(Стр_1);
		Если Организация<>Идентификатор Тогда
		
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
						
				HTTPСервисЗапрос=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
						
				HTTPСервисЗапрос=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;

			Результат=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОТХЦ(Thumbprint_1,Идентификатор,HTTPСервисЗапрос);
			Если Не ЗначениеЗаполнено(Результат) Тогда
				Продолжить;
			КонецЕсли;
			Организация=Идентификатор;
		КонецЕсли;

		РеквизитыДокумента_1=Новый Структура;
		ОткрытьФорму_1=Ложь;
		Сообщения=Неопределено;
		
		
		Идентификатор="";
		ИмяФайла="";
		СтрокаXML =
		АннулированиеПредложение(Стр_1,Идентификатор,ПричинаАннулирования,ИмяФайла);	
		
		Если ЗначениеЗаполнено(СтрокаXML) Тогда
			ДанныеФайла = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(СтрокаXML,КодировкаТекста.ANSI);//ДвоичныеДанныеИзСтрокиXML(СтрокаXML.Текстовыйдо.Получитьтекст());
			
			РеквизитыДокумента_1.Вставить("ИмяФайлаЭД",ИмяФайла);
			РеквизитыДокумента_1.Вставить("ИдентификаторЭД",Идентификатор);
		
		Иначе
			Сообщить("В документе "+Строка(Стр_1)+" есть ошибки при формировании");
			Продолжить
		КонецЕсли;
		
		Отказ=Ложь;
		
		
	
	Подписанный=Компонента.MrSign(base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(СтрокаXML,КодировкаТекста.ANSI,Ложь)),
	Thumbprint_1.Thumbprint_1);
		ИдентификаторЭД=Идентификатор;
		
		ПакетЭДО=СформироватьПервичныйПакетЭДО_аннулированиеПредлложение(РеквизитыДокумента_1,Отказ,ДанныеФайла,Стр_1,Подписанный,ИдентификаторЭД);
	//	ПакетЭДО=СформироватьПервичныйПакетЭДО(РеквизитыДокумента_1,Отказ,ДанныеФайла,Стр_1,ДанныеПодписи ,ИдентификаторЭД);
		
		Если  ПакетЭДО<>Неопределено Тогда
			
			ТранзакцияДоклайнз="ReceiveNotification";

			ИмяПакета = ТранзакцияДоклайнз
											+ "_" + ИдентификаторЭД;
		
			АдресРесурса = "API/SendMessage/" + ИмяПакета;
			
			Запрос = Новый HTTPЗапрос;
			Запрос.АдресРесурса = АдресРесурса;
				Запрос.Заголовки.Вставить("Integrator-Id", "Kartoteka_9AFE5408-C930-47FA-9CE4-FAE615EED09E");
				Запрос.Заголовки.Вставить("Assistant-Key", Результат);
			 
				Запрос.УстановитьТелоИзДвоичныхДанных(ПакетЭДО);
			Попытка 
				Ответ = HTTPСервисЗапрос.ОтправитьДляОбработки(Запрос);
			Исключение
		//		ПараметрыСоединения.СоединениеУстановлено = Ложь;
				Инфо = ИнформацияОбОшибке();
			   Сообщить("Описание='" + Инфо.Описание + "'");
			    Сообщить("ИмяМодуля='" + Инфо.ИмяМодуля + "'");
			    Сообщить("НомерСтроки=" + Инфо.НомерСтроки);
			    Сообщить("ИсходнаяСтрока='" + Инфо.ИсходнаяСтрока + "'");
				
				Возврат
			КонецПопытки;		
		//	
			Если Ответ.КодСостояния <> 200 Тогда
		//		ПараметрыСоединения.СоединениеУстановлено = Ложь;
				Если Ответ.КодСостояния > 500 Тогда
		//			ПараметрыСоединения.ОбновлятьАвтоматически = Ложь;
	КонецЕсли;
	ОтветПол=Ответ.ПолучитьТелоКакСтроку("UTF-8");
	Если Найти(ОтветПол,"Абоненту запрещен доступ к Web API")>0 Тогда
		Сообщить("Обратитесь в ТХЦ(privl@taxcom.ru) с просьбой предоставить(включить) доступ к АПИ для ИНН(указать)");
	КонецЕсли;
				Сообщить(ОтветПол);
				Возврат;
			КонецЕсли;
			
			
			//ЗаписатьСтатусЧерновикВНакладную(Стр_1,ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.Черновик"),ИдентификаторЭД,РеквизитыДокумента_1.ИмяФайлаЭД);
			
			
		//	
		//	
		//	
		КонецЕсли;

		
	Конеццикла;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АннулированиеПредложение(Докум,Идентификатор,ПричинаАннулирования,ИмяФайла)
	
	Идентификатор=Докум.Order_ID_УПД;
	
	ИдР=xmlString(Докум.УникальныйИдентификатор());
	Организация=Докум.Органзация;
	Контрагент=Докум.Контрагент;
	ТипЭдо=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОТакском;
	Если ТипЭДО=Неопределено Тогда
		ИД_ЭДО=Организация.ИД_ЭДО;
	Иначе
		Если ТипЭДО=справочники.ЭДО_ХамелеонЦРПТ.ЭДОЛайт Тогда
			ИД_ЭДО="2LT-"+xmlString(Организация.Ид_ЭДО_ЦРПТ)
		ИначеЕсли Организация.ОсновнойТипЭДО=ТипЭДО Тогда
			ИД_ЭДО=Организация.ИД_ЭДО;
		Иначе
			
			Для Каждого Стр_1 Из Организация.ЭДОВспомогательные Цикл
				Если Стр_1.ТипЭДО=ТипЭДО Тогда
					Ид_ЭДО=Стр_1.ИД_ЭДО;
					Если ЗначениеЗАполнено(Ид_ЭДО) Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			Конеццикла;
			                                      
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗАполненО(ИД_ЭДО) Тогда
		Если Не ЗначениеЗАполнено(Организация.ОсновнойТипЭДО) И ЗначениеЗаполнено(Организация.ИД_ЭДО) Тогда
			Ид_ЭДО=Организация.ИД_ЭДО;
		Иначе
			Сообщить("Не нашли Идентификатор организации в ЭДО");
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЭДО=справочники.ЭДО_ХамелеонЦРПТ.ЭДОЛайт Тогда
		КонтрагентИД_ЭДО="2LT-"+xmlString(Контрагент.Ид_ЭДО_ЦРПТ)
	Иначе
		КонтрагентИД_ЭДО=Контрагент.ИД_ЭДО;
	КонецЕсли;
	
	
	
	ИмяФайла = "DP_PRANNUL_" +
		КонтрагентИД_ЭДО+ "_" + 
				ИД_ЭДО+ "_" +
				Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + "_" +
				xmlString(ИдР);

	XML_DOM=Новый ЗаписьXML;
	
		
	XML_DOM.УстановитьСтроку("windows-1251");
	XML_DOM.ЗаписатьОБъявлениеXML();
	XML_DOM.ЗаписатьНачалоЭлемента("DocumentActions");
	//XML_DOM.ЗаписатьАтрибут("Action", "OfferCancellation");
	//ИмяСчтетфакт="ON_NSCHFDOPPR_"+Формат(ТекущаяДата(),"ДФ=""ггггММдд""")+"_"+Строка(Новый УникальныйИдентификатор());
	//XML_DOM.ЗаписатьАтрибут("Action", "OfferCancellation");
	ИмяФайла=ИмяФайла+".xml";
	
	XML_DOM.ЗаписатьНачалоЭлемента("Document");
	XML_DOM.ЗаписатьАтрибут("InternalId", Идентификатор);
	XML_DOM.ЗаписатьАтрибут("Action", "OfferCancellation");
	XML_DOM.ЗаписатьНачалоЭлемента("Comment");
	XML_DOM.ЗаписатьТекст(ПричинаАннулирования);
	XML_DOM.ЗаписатьКонецЭлемента();
	
	XML_DOM.ЗаписатьКонецЭлемента();
	XML_DOM.ЗаписатьКонецЭлемента() ;
	
	Возврат XML_DOM.Закрыть()
	
	
Конецфункции

&НаСервереБезКонтекста
Функция СформироватьПервичныйПакетЭДО_аннулированиеПредлложение(РеквизитыДокумента_1, Отказ,ДвоичныеДанныеДокумента,Стр_1,Подписанный,ИдентификаторЭД) Экспорт
	
	//РеквизитыДокумента = Структура.ИнформацияОДокументе;
	//ДвоичныеДанныеДокумента = Структура.ДвоичныеДанныеДокумента;
	
	ДвоичныеДанныеАрхива=Неопределено;
	//НачатьТранзакцию();
	
	//Если ЗначениеЗаполнено(Стр_1.Order_ID_УПД) Тогда	
//		ИдентификаторЭД=xmlString(Новый УникальныйИдентификатоР());
	//Иначе
	//	ИдентификаторЭД=xmlString(Стр_1.Ссылка.УникальныйИдентификатор());
		
	//КонецЕсли;
		ИдДляОтправки=ИдентификаторЭД;
		//xmlString(Новый УникальныйИдентификатор());
	КаталогКонтейнера = КаталогВременныхФайлов()+xmlString(ИдДляОтправки)+"\";
	
	//Попытка
		ПакетЭДО = Новый Структура("ИдентификаторОтправителя, ИдентификаторПолучателя, ИдентификаторДокументооборота");
		
		//ПакетЭДО.ИдентификаторОтправителя = ВРЕГ(РеквизитыДокумента.Организация.ИД_ЭДО);
		//ПакетЭДО.ИдентификаторПолучателя = РеквизитыДокумента.Контрагент.ИД_ЭДО;
		//ПакетЭДО.ИдентификаторДокументооборота = РеквизитыДокумента.ИдентификаторЭД;
		
		ТипДокумента = "CancellationOffer";
		
		ПроверитьСоздатьКаталог(КаталогКонтейнера);
		//
		СформироватьФайлCard_ПредложениеАннулирования(
			КаталогКонтейнера,Стр_1,ИдДляОтправки
			//РеквизитыДокумента,
			//ТипДокумента,
			//ТребуетсяПодписьПолучателя,
			//Истина
			);
		//	
		СформироватьФайлMeta_ПредложениеАннулирования(
			КаталогКонтейнера,Стр_1,ИдДляОтправки,РеквизитыДокумента_1
		//	РегламентДоклайнз,
		//	ТранзакцияДоклайнз,
		//	ПакетЭДО.ИдентификаторДокументооборота,
		//	РеквизитыФайла
		);
		//	
		ДвоичныеДанныеДокумента.Записать(КаталогКонтейнера + РеквизитыДокумента_1.ИмяФайлаЭД);
		
		//ДвоичныеДанныеДокумента=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Подписанный);
		ДвоичныеДанныеДокумента=base64Значение(Подписанный);
		ДвоичныеДанныеДокумента.Записать(КаталогКонтейнера + Сред(РеквизитыДокумента_1.ИмяФайлаЭД,1,СтрДлина(РеквизитыДокумента_1.ИмяФайлаЭД)-4)+"-1.p7s");
		//Подписанный.Записать(КаталогКонтейнера + Сред(РеквизитыДокумента_1.ИмяФайлаЭД,1,СтрДлина(РеквизитыДокумента_1.ИмяФайлаЭД)-4)+"-1.p7s");
		
		//ПорядковыйНомер = 1;
		//Для Каждого ДанныеПодписи Из РеквизитыФайла.ЭлектронныеПодписи Цикл
		//	ДанныеПодписи.Записать(
		//		КаталогКонтейнера + РеквизитыФайла.ПолноеНаименование + "-" + ПорядковыйНомер + ".p7s");
		//	ПорядковыйНомер = ПорядковыйНомер + 1;
		//КонецЦикла;
		//
		ТранзакцияДоклайнз="CancellationOfferResign";
		ИмяФайлаАрхива = ТранзакцияДоклайнз + "_" + ИдДляОтправки+ ".zip";
		ЗаписьZip = Новый ЗаписьZipФайла(КаталогКонтейнера + ИмяФайлаАрхива);
		ЗаписьZip.Добавить(КаталогКонтейнера, РежимСохраненияПутейZIP.НеСохранятьПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
		ЗаписьZip.Записать();
		//
		ДвоичныеДанныеАрхива = Новый ДвоичныеДанные(КаталогКонтейнера + ИмяФайлаАрхива);
		УдалитьФайлы(КаталогКонтейнера);
		
		
		
		
	//Исключение
	//	УдалитьФайлы(КаталогКонтейнера);
	//	Отказ=Истина;
	//	Сообщить(ОписаниеОшибки());
	//КонецПопытки;
	
	Возврат  ДвоичныеДанныеАрхива;
	
КонецФункции


&НаСервереБезКонтекста
Процедура СформироватьФайлMeta_ПредложениеАннулирования(
	КаталогКонтейнера,Стр_1,Ид,РеквизитыДокумента_1
	//, Регламент, Транзакция, ИдентификаторДокументооборота, РеквизитыФайла
	)
	
	Чтение=Новый ЗаписьXML;
	Чтение.ОткрытьФайл(КаталогКонтейнера + "meta.xml","windows-1251");
	//Чтение.УстановитьСтроку("windows-1251");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("ContainerDescription");
	Чтение.ЗаписатьАтрибут("xmlns","http://api-invoice.taxcom.ru/meta");
	Чтение.ЗаписатьАтрибут("xmlns:xs","http://www.w3.org/2001/XMLSchema");
	Чтение.ЗаписатьАтрибут("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
	
	Чтение.ЗаписатьНачалоЭлемента("DocFlow");
	Чтение.ЗаписатьАтрибут("Id",Ид);
	
	Чтение.ЗаписатьНачалоЭлемента("Documents");
	
	
	
	Чтение.ЗаписатьНачалоЭлемента("Document");
	Чтение.ЗаписатьАтрибут("ReglamentCode","Invoice");
	Чтение.ЗаписатьАтрибут("TransactionCode","CancellationOffer");
	
	
	Чтение.ЗаписатьНачалоЭлемента("Files");
	
	Чтение.ЗаписатьНачалоЭлемента("MainImage");
	Чтение.ЗаписатьАтрибут("Path",РеквизитыДокумента_1.ИмяФайлаЭД);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("MainImageSignature");
	Чтение.ЗаписатьАтрибут("Path",Сред(РеквизитыДокумента_1.ИмяФайлаЭД,1,СтрДлина(РеквизитыДокумента_1.ИмяФайлаЭД)-4)+"-1.p7s");
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("ExternalCard");
	Чтение.ЗаписатьАтрибут("Path","card.xml");
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.Закрыть();
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьФайлCard_ПредложениеАннулирования(
	КаталогКонтейнера,Стр_1,Ид
	//РеквизитыДокумента, 
	//ТипДокумента = Неопределено, 
	//ТребуетсяОтветнаяПодпись = Неопределено, 
	//ЭтоПервичныйДокумент = Ложь, 
	//ЭтоИзвещениеДляОператораЭДО = Ложь
	)
	
	
	//XML_DOM=Новый ЗаписьXML;
	
	//XML_DOM.УстановитьСтроку("windows-1251");
	Чтение=Новый ЗаписьXML;
	Чтение.ОткрытьФайл(КаталогКонтейнера+"card.xml","windows-1251");
	//Чтение.УстановитьСтроку("windows-1251");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("Card");
	Чтение.ЗаписатьАтрибут("xmlns","http://api-invoice.taxcom.ru/card");
	Чтение.ЗаписатьАтрибут("xmlns:xs","http://www.w3.org/2001/XMLSchema");
	Чтение.ЗаписатьАтрибут("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
	
	Чтение.ЗаписатьНачалоЭлемента("Identifiers");
	Чтение.ЗаписатьАтрибут("ExternalIdentifier",Ид);
	Чтение.ЗаписатьКонецЭлемента();
	
	
	
	Чтение.ЗаписатьНачалоЭлемента("Type");
	Чтение.ЗаписатьАтрибут("Name","ReceiveNotification");
	Чтение.ЗаписатьАтрибут("ResignRequired","true");
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("Description");
	Чтение.ЗаписатьАтрибут("Title","Аннулировать отгрузку");
	Чтение.ЗаписатьАтрибут("Date",Формат(Текущаядата(),"ДФ=""гггг-ММ-дд ЧЧ:мм:сс"""));
	
	Чтение.ЗаписатьНачалоЭлемента("AdditionalData");
	
	Чтение.ЗаписатьНачалоЭлемента("AdditionalParameter");
	Чтение.ЗаписатьАтрибут("Name","Номер");
	Чтение.ЗаписатьАтрибут("Value",Стр_1.Номер);
	Чтение.ЗаписатьКонецЭлемента();
	
	
	
	Чтение.ЗаписатьНачалоЭлемента("AdditionalParameter");
	Чтение.ЗаписатьАтрибут("Name","DocumentType");
	Чтение.ЗаписатьАтрибут("Value","CancellationOffer");
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Чтение.ЗаписатьНачалоЭлемента("AdditionalParameter");
	Чтение.ЗаписатьАтрибут("Name","Сумма");
	Чтение.ЗаписатьАтрибут("Value",xmlString(Стр_1.СуммаДокумента));
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Чтение.ЗаписатьКонецЭлемента();

	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("Sender");
	Чтение.ЗаписатьНачалоЭлемента("Abonent");
	Чтение.ЗаписатьАтрибут("Id",Стр_1.Организация.ИД_ЭДО);
	Чтение.ЗаписатьАтрибут("Name",Стр_1.Организация.Наименование);
	Чтение.ЗаписатьАтрибут("Inn",Стр_1.Организация.ИНН);
	Если ЗначениеЗаполнено(Стр_1.Организация.КПП) Тогда
		Чтение.ЗаписатьАтрибут("Kpp",Стр_1.Организация.КПП);
	КонецЕсли;
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	
	
	
	Чтение.ЗаписатьНачалоЭлемента("Receiver");
	Чтение.ЗаписатьНачалоЭлемента("Abonent");
	Чтение.ЗаписатьАтрибут("Id",Стр_1.Контрагент.ИД_ЭДО);
	Чтение.ЗаписатьАтрибут("Name",Стр_1.Контрагент.Наименование);
	Чтение.ЗаписатьАтрибут("Inn",Стр_1.Контрагент.ИНН);
	Если ЗначениеЗаполнено(Стр_1.Контрагент.КПП) Тогда
		Чтение.ЗаписатьАтрибут("Kpp",Стр_1.Контрагент.КПП);
	КонецЕсли;
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.Закрыть();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВЦРПФармаБольшойРазмер(Команда,УжеОтправили=Ложь)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	
	Если Не ЗначениеЗаполнено(Объект.Статус)
		ИЛИ ОБъект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ") ИЛИ Объект.Статус=
		ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ПодготовленКОтправке") Тогда
		
	Иначе
		Возврат;
	КонецЕсли;
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
	
	ОПределитьУпаковки(Thumbprint_1);	
	Попытка
		Форм=Получитьформу("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
		Форм.ЛицензияОпределить_Просто(Thumbprint_1);
	Исключение
	КонецПопытки;
	
	
	
	
	Если ЗначениеЗаполнено(Объект._Order_ID) Тогда
		ОбновитьСначала(Thumbprint_1);
		ЭтаФорма.Прочитать();
		Статус=ВернутьНовыйСтатус();
		
		Если Не ЗначениеЗаполнено(Объект.Статус)
			ИЛИ Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ") ИЛИ Статус=
			ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ПодготовленКОтправке") Тогда
			
		Иначе
			Возврат;
		КонецЕсли;
		Если Объект.ПометкаУдаления Тогда
			объект.ПометкаУдаления=Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	
	еСЛИ Объект.ОтправлятьКМВместоАгрегаций Тогда 
		ПоказатьИнформацию(Команда)
	КонецЕсли;
//	Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
//		Если Не ЗначениеЗаполнено(Стр_1.ТипУпаковки) тогда
			

			
//		Конецесли;
		
//	Конеццикла;
	
	
	Если        Thumbprint_1.РасчетОстатков Тогда
		Подсчитать(Команда);
	КонецЕсли;
	
	ЭтаФорма.Записать();
	
Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
	
		ХэшСумма="";
		СформироватьФайлДляОтправки=СформироватьXmlФайлИмпорт(Thumbprint_1,ХэшСумма);
			
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
			
		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
		
		
		
		
	//	Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//	СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
	//				Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
	//			Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
	//			Добав=СтрЗаменить(Добав,"\r\n","");

				
				Подписанный="";
		//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
	//	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл_ЛДМП(СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Ложь);
		//	Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл_ЛДМП(СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Ложь);
				
				
		//	КонецЕсли;
		
		//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//Подписанный,КодировкаТекста.UTF8,Ложь));
		
					Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
				Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
				 Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				
		Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();
		Чтен.ЗаписатьИмяСвойства("sign");
		Чтен.ЗаписатьЗначение(Подписанный);
		Чтен.ЗаписатьИмяСвойства("hash_sum");
		Чтен.ЗаписатьЗначение(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(ХэшСумма));
		Чтен.ЗаписатьИмяСвойства("request_id");
		Чтен.ЗаписатьЗначение(ВернутьУНИКУМ());
		Чтен.ЗаписатьКонецОбъекта();
		Тело=Чтен.Закрыть();
		
		
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
			Прокси=Новый ИнтернетПрокси;
			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		Иначе
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		
		HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/send_large");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		
		//Возврат;
		
		
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Если Ответ.КодСостояния=200 Тогда
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			
			
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);

			Объект._Order_ID=NNN.document_id;
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
			
			
			HTTPЗапрос=Новый HTTPЗапрос("api/v1/webdav/upload/"+NNN.document_id+"/"+NNN.document_id);
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин           
			HTTPЗапрос.УстановитьТелоИзСтроки(СформироватьФайлДляОтправки,КодировкаТекста.UTF8);
			
			Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("PUT",HTTPЗапрос);
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			
			
		Конецесли;
		
		
//	
				 
//	Чтен=Новый  ЗаписьJSON;
//	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
//	Чтен.ЗаписатьНачалоОбъекта();
//	Чтен.ЗаписатьИмяСвойства("document");
//	Чтен.ЗаписатьЗначение(Добав);
//	Чтен.ЗаписатьИмяСвойства("sign");
//	Чтен.ЗаписатьЗначение(Подписанный);
//	Чтен.ЗаписатьИмяСвойства("request_id");
//	Чтен.ЗаписатьЗначение(ВернутьУНИКУМ());
//	Чтен.ЗаписатьКонецОбъекта();
//	Тело=Чтен.Закрыть();
//	
//				 
//				 
//		//Тело="{
//		//|""doc_type"":""311"",
//		//|""document"":"""+Добав+""",
//		//|""sign"":"""+Подписанный+""",
//		//|""request_id"":"""+ВернутьУНИКУМ()+"
//		//|}";
//			
//				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
//					Прокси=Новый ИнтернетПрокси;
//					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
//				
//					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
//				Иначе
//					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
//				КонецЕсли;
//		
//			HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/send");
//		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
//		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
//		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
//		///Константин           
//		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
//		
//		//Возврат;
//		
//		
//		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
//		Текст1=Ответ.ПолучитьТелоКакСтроку();
//		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
//		
//		
//	Если Ответ.КодСостояния=200 ИЛИ Ответ.КодСостояния=200  Тогда
//			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
//				//ЧтениеJSON = Новый ЧтениеJSON;
//				//ЧтениеJSON.УстановитьСтроку(Текст1);
//				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
//			Объект._Order_ID=NNN.document_id;
//			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
//				//НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
////				Объект._Order_ID=NNN.orderId;
//			
//	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
//	Иначе
//		//	Если УжеОтправили=Истина Тогда
//				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
//					Попытка
//						//ЧтениеJSON = Новый ЧтениеJSON;
//						//ЧтениеJSON.УстановитьСтроку(Текст1);
//						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
//						попытка
//							
//							Объект.ОшибкаОтправки=NNN.error_message;
//						Исключение
//							Попытка
//								Объект.ОшибкаОтправки=NNN.error_description;
//								Если NNN.error="access_denied" Тогда
//									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
//								КонецЕсли;
//							Исключение
//								Сообщить(Текст1);
//							КонецПопытки;
//							
//						КонецПопытки;
//						
//					Исключение
//					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	//КонецЕсли;

		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		//	ЗапишемВРегистр_Ответ(Текст1);
		КонецЕсли;
		ЭтаФорма.Записать();
		Возврат;
	КонецЕсли;		
	
	
	
	
	
	
	если ВыгружатьCSV=1 
		И (Объект.ОтгрузкаНеУчастника=Ложь И Объект.ВыводИзОборота=Ложь)
		тогда
			СформироватьФайлДляОтправки=СформироватьXmlФайлИмпортCSV();
	                  	
	
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
		
	Подписанный="";
	//СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
	//СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
	Подписанный="";
	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
				Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	
	
	Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
				Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
			Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
			Добав=СтрЗаменить(Добав,"\r\n","");

	Тело="{
	|""product_document"":"""+Добав+""",
	|""document_format"": ""CSV"",
	|""signature"":"""+Подписанный+"""}";
	
	 	Если ОбработкаWEBНаСервере Тогда
		Если НЕ ЗагрузканаСервереОтправитьЦРПТ(Thumbprint_1,СРегистра,УжеОтправили,Тело) Тогда
				Если УжеОтправили=Истина Тогда
				//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОтправитьВЦРПТ(Команда,Истина)			
		КонецЕсли
		
		КонецЕсли;
		
	иначе	
	
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
	
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/shipment/create");
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Текст1);
	КонецЕсли;
		
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
		ИЛИ Ответ.КодСостояния=201 
		Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			Объект._Order_ID=Текст1;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Запись));
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
			Возврат;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОтправитьВЦРПТ(Команда,Истина)			
			КонецЕсли
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
КонецЕсли;
		
		
		возврат
	конецесли;
	
	
	если ВыгружатьCSV=2 
		И (Объект.ОтгрузкаНеУчастника=Ложь И Объект.ВыводИзОборота=Ложь)
		тогда
		/////XML!!!
		
			СформироватьФайлДляОтправки=СформироватьXmlФайлИмпортXML();
	                  	
		Попытка
			Если НеПрошлаПроверкаИмпорт(СформироватьФайлДляОтправки) Тогда
				Объект.ОшибкаОтправки="Проверка документа не прошла по схеме xsd";
			//ПоказатьПредупреждение("");
				Возврат;
				
			КонецЕсли;
			
			
		Исключение
		КонецПопытки;
	
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
		
	Подписанный="";
	//СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
	//СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
	Подписанный="";
	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
				Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	
	
	Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
				Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
			Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
			Добав=СтрЗаменить(Добав,"\r\n","");

	Тело="{
	|""product_document"":"""+Добав+""",
	|""document_format"": ""XML"",
	|""signature"":"""+Подписанный+"""}";
	
	 	Если ОбработкаWEBНаСервере Тогда
		Если НЕ ЗагрузканаСервереОтправитьЦРПТ(Thumbprint_1,СРегистра,УжеОтправили,Тело) Тогда
				Если УжеОтправили=Истина Тогда
				//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОтправитьВЦРПТ(Команда,Истина)			
		КонецЕсли
		
		КонецЕсли;
		
	иначе	
	
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
	
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/shipment/create");
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Текст1);
	КонецЕсли;
		
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
		ИЛИ Ответ.КодСостояния=201 
		Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			Объект._Order_ID=Текст1;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Запись));
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
			Возврат;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОтправитьВЦРПТ(Команда,Истина)			
			КонецЕсли
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
КонецЕсли;
		
		
		возврат
	конецесли;
	
	
	
	
	
	
	/////
			СформироватьФайлДляОтправки=СформироватьXmlФайлИмпорт(Thumbprint_1);
		Попытка
		//	Если НеПрошлаПроверкаИмпорт(СформироватьФайлДляОтправки) Тогда
		//		Объект.ОшибкаОтправки="Проверка документа не прошла по схеме xsd";
				//ПоказатьПредупреждение("");
		//		Возврат;
				
		//	КонецЕсли;
			
			
		Исключение
		КонецПопытки;
		
		
	
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
		
	Подписанный="";
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
	Подписанный="";
	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
				Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	
	
	Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
				Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
			Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
			Добав=СтрЗаменить(Добав,"\r\n","");

	Тело="{
	|""product_document"":"""+Добав+""",
	|""document_format"": ""MANUAL"",";
	
		
	Если Объект.ВыводИзОборота Тогда
		Тело=Тело+"
		|""type"":""LP_SHIP_RECEIPT"",";
	Иначе
		Тело=Тело+"
		|""type"":""LP_SHIP_GOODS"",";
		
	КонецЕсли;
	
	Тело=Тело+"
	|""signature"":"""+Подписанный+"""}";
	
	 	Если ОбработкаWEBНаСервере Тогда
		Если НЕ ЗагрузканаСервереОтправитьЦРПТ(Thumbprint_1,СРегистра,УжеОтправили,Тело) Тогда
				Если УжеОтправили=Истина Тогда
				//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОтправитьВЦРПТ(Команда,Истина)			
		КонецЕсли
		
		КонецЕсли;
		
		
	Иначе

			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
		//	Если Объект.ВыводИзОборота Тогда
		//		HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/receipt/send");
		//	Иначе
		
			
 			что=Thumbprint_1.что;

		
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg="+что);
		//	КонецЕсли;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Текст1);
	КонецЕсли;
		
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
		ИЛИ Ответ.КодСостояния=201 
		Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			Объект._Order_ID=Текст1;
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Запись));
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
			Возврат;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОтправитьВЦРПТ(Команда,Истина)			
			КонецЕсли
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
КонецЕсли;
	ЭтаФорма.Записать();	
КонецПроцедуры

Функция МассивУп_в(Упаков)
	Массвозвр=Новый Массив;
	Масс=Объект.ДопИнформацияПоСтрокеЭДО.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Упаков));
	Для Каждого Стр Из Масс Цикл
		Массвозвр.Добавить(Новый СТруктура("ИмяПараметра,ЗначениеПараметра",Стр.ИмяПараметра,Стр.ЗначениеПараметра));
	Конеццикла;
	Возврат Массвозвр
КонецФункции


&НаКлиенте
Процедура ДобавитьДополнительнуюИнформациюДляТекущейСтроки(Команда)
	// Вставить содержимое обработчика.
	Если Элементы.Товары.ТекущиеДанные<>Неопределено Тогда
		
		МассивУпаковокДляСтроки=Новый Массив;
		//Если ЗначениеЗаполнено(Элементы.ВырабатываемаяПродукция.ТекущиеДанные.СвязьСУпаковкой) Тогда
		МассивУпаковокДляСтроки=МассивУп_В(Элементы.Товары.ТекущиеДанные.НомерСтроки);
		//КонецЕсли;
		
		Пар=Новый Структура("МассивУпаковок",МассивУпаковокДляСтроки);
		Пар.Вставить("ЕдиницаИзмерения",Элементы.Товары.ТекущиеДанные.ЕдиницаИзмерения);
//		Пар.Вставить("ОсновнаяУпаковка",Элементы.ВырабатываемаяПродукция.ТекущиеДанные.Упаковка);
		Пар.Вставить("Продукция",Элементы.Товары.ТекущиеДанные.GTIN);
		//Пар.Вставить("Объем",Элементы.ВырабатываемаяПродукция.ТекущиеДанные.Объем);
		Пар.Вставить("КолВУп",Элементы.Товары.ТекущиеДанные.КоличествоКМ);

		ОткрытьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаДобавлениеДопЗначений",Пар,,,,,Новый ОписаниеОповещения("ПослеВыбораУпаковок_В",ЭтаФорма,Элементы.Товары.ТекущиеДанные));
		
		
		
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораУпаковок_В(РР,ДД) Экспорт
	Если РР<>Неопределено Тогда
		//Если ДД.СвязьСУпаковкой=0 Тогда
			//Объект.СвязьСУпаковкой=Объект.СвязьСУпаковкой+1;
		//	Записать();
			//ДД.СвязьСУпаковкой=Объект.СвязьСУпаковкой;
//		Иначе
			ДДДДР=Объект.ДопИнформацияПоСтрокеЭДО.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",ДД.НомерСтрокиСвязи));
			Для Каждого Стр_1 Из ДДДДР Цикл
				Объект.ДопИнформацияПоСтрокеЭДО.Удалить(Стр_1);
			Конеццикла;
//		КонецЕсли;
		
		Для Каждого Стр Из РР Цикл
			ДДД=Объект.ДопИнформацияПоСтрокеЭДО.Добавить();
			ЗаполнитьЗначенияСвойств(ДДД,Стр);
			//ДДД.СвязьСУпаковкой=ДД.НомерСтроки;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьСтатусыДокумента(Команда)
	// Вставить содержимое обработчика.
	МассивНакладных=Новый Массив;
	МассивНакладных.Добавить(Объект.Ссылка);
	
	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Если НЕ Форм.Открыта() Тогда
		Форм.Открыть();
	КонецЕсли;
	
	Thumbprint_1=ПолучитьИзПользователя();	
	//Для Каждого Стр_1 Из МассивНакладных Цикл
	//	Форма1=ПолучитЬФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаДокумента",
	//	Новый Структура("Ключ",Стр_1));
	ОПределитьУпаковки(Thumbprint_1);
	//	Форма1.Записать();
	//Конеццикла;
	
	
	Если МассивНакладных.Количество()>0 Тогда
//		ОбновитьСтатусыДокументов(кОМАНДА,,,МассивВ);
		//Thumbprint_1=ПолучитьИзПользователя();	
		СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		СерийныйНомер="";
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			Попытка
				СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
			исключение
				СРегистра=Неопределено;
			КонецПопытки;
			
		КонецЕсли;
		ОбработаноМассив=Новый Массив;
		ВернутьДокументы_Отгрузка=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусыДокументовНаСервереОтгрузка(МассивНакладных,Форм.Пользователь);
		Форм.ОбновитьОтгрузкуПоМассивуНакладных(Thumbprint_1,СРегистра,ВернутьДокументы_Отгрузка,ОбработаноМассив);
	КонецЕсли;
	
	ЭтаФорма.Прочитать();
	
КонецПроцедуры

