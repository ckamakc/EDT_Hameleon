&НаКлиенте
Процедура ВывестиОтчет(Команда)
	// Вставить содержимое обработчика.
	МассивКМ=Новый СписокЗначений;
	Для Каждого Стр Из Элементы.СерийныеНомераТаблица.ВыделенныеСтроки Цикл
		Стр_1=Объект.СерийныеНомера.НайтиПоИдентификатору(Стр);
		Если ЗначениеЗаполненО(Стр_1.cis) Тогда
			МассивКМ.Добавить(Стр_1.cis);
		КонецЕсли;
		
	Конеццикла;
	
	Форм=ОткрытьФорму("Отчет.ОтчетПоКМ_ХамелеонЦРПТ.Форма.ФормаОтчета");
	Форм.ПрименитьОтбор(МассивКМ);
	
КонецПроцедуры


&НаКлиенте
Процедура ОпределитьСтатусПоФармацевтике(Thumbprint_1,МассивКМ)
	
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
					Иначе
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		
		
		

				СРегистра="";///Thumbprint_1.Thumbprint_1;
				Если Не ЗначениеЗаполнено(СРегистра) тогда
					Попытка
						СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
					исключение
						СРегистра=Неопределено;
					КонецПопытки;
				КонецЕсли;
				
				Если не ЗначениеЗаполнено(Срегистра)		 Тогда
					Возврат;
				Конецесли;
				
		Пока МассивКМ.Количество()>0 Цикл
		 	МассивОпределям=Новый Массив;
			МассивОпределям.Очистить();
			КоличествоПр=Мин(1,МассивКМ.Количество());
			Для Сч=1 По КоличествоПр Цикл
				МассивОпределям.Добавить(МассивКМ[0]);
				МассивКМ.Удалить(0);
			Конеццикла;
		 	ВернутьСтатусы=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьСтатусыПоМассивуКМ_Лекарства(Thumbprint_1,Срегистра,МассивОпределям);
			
			Для Каждого Стр_1 Из ВернутьСтатусы Цикл
				Нстрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1.cis));
				Нстрок[0].Статус=Стр_1.Статус;
			Конеццикла;
			
			
		Конеццикла;
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция РасКодСтр(Строка) Экспорт
	cis=РаскодироватьСтроку(Строка,СпособКодированияСтроки.КодировкаURL);
	cis=Сред(cis,1,Найти(cis,Символ(29))-1);
	Возврат cis
	
КонецФункции

&НаКлиенте
Процедура ОбработатьстатусыКМ(МассивКМ)
	
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
		
		ОпределитьСтатусПоФармацевтике(Thumbprint_1,МассивКМ);
		
		Возврат;
				 
				 
	КонецЕсли;	
	
	
	СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
	СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	
	Если Не ЗначениеЗаполнено(СРегистра)  Тогда
		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
	Иначе
		   	
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
			Прокси=Новый ИнтернетПрокси;
			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		Иначе
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
				
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
		Если Ответ.КодСостояния<>200 Тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Срегистра) Тогда
			Сообщить("Не удалось подключиться к ЦРПТ");
			Возврат;
		КонецЕсли;
	КонецЕсли;

		
	Если не ЗначениеЗаполнено(Срегистра) тогда
		Возврат
	Конецесли;
	
	
   НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();

   Если НаСервере Тогда
	// Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Стр_1.Марка);  
	Иначе
	
		
		Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании") Тогда
			
			Пока МассивКМ.Количество()>0 Цикл
				КоличествоПр=Мин(50,МассивКМ.Количество());
				
				Для Сч=1 По КоличествоПр Цикл
				 	МассивОпределям=Новый Массив;
					МассивОпределям.Очистить();
					КМ_1=МассивКМ[0];
					//КМ=РаскодироватьСтроку(КМ,СпособКодированияСтроки.КодировкаURL);
					Если Найти(КМ_1,"%1D")>=25 Тогда
						КМ=Сред(КМ_1,1,Найти(КМ_1,"%1D")-1);
						КМ=РасКодСтр(КМ);
					Иначе
						КМ=КМ_1;
						Если Thumbprint_1.НаименованиеСтенда="Молоко"
							Тогда
							Если СтрДлина(КМ_1)<=30 тогда
								КМ=Сред(КМ_1,1,24);
							Иначе
								КМ=Сред(КМ_1,1,31);
							Конецесли;
						Иначе
							КМ=Сред(КМ_1,1,31);
							
							
						Конецесли;
						
						
					Конецесли;
					
					
					
					МассивОпределям.Добавить(КМ);
					МассивКМ.Удалить(0);
				 	ВернутьСтатусы=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьСтатусыПоМассивуКМ(Thumbprint_1,Срегистра,МассивОпределям);
					
					Для Каждого Стр_1 Из ВернутьСтатусы Цикл
						Нстрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",КМ_1));
						Нстрок[0].Статус=Стр_1.Статус;
						Стр_1.Свойство("ТипЭмиссии",Нстрок[0].ТипЭмиссии);
					Конеццикла;
				Конеццикла;
				
				
				
				
			Конеццикла;
			
		Иначе
			
			Пока МассивКМ.Количество()>0 Цикл
			 	МассивОпределям=Новый Массив;
				МассивОпределям.Очистить();
				КоличествоПр=Мин(50,МассивКМ.Количество());
				Для Сч=1 По КоличествоПр Цикл
					МассивОпределям.Добавить(МассивКМ[0]);
					МассивКМ.Удалить(0);
				Конеццикла;
			 	ВернутьСтатусы=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьСтатусыПоМассивуКМ(Thumbprint_1,Срегистра,МассивОпределям);
				
				Для Каждого Стр_1 Из ВернутьСтатусы Цикл
					Нстрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1.cis));
					Нстрок[0].Статус=Стр_1.Статус;
					Стр_1.Свойство("ТипЭмиссии",Нстрок[0].ТипЭмиссии);
					Если ЗначениеЗАполненО(СтР_1.ТипУпаковки) тогда
						Если Стр_1.ТипУпаковки="UNIT" Тогда
							Нстрок[0].ТипУпаковки=Предопределенноезначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Штука")
						ИначеЕсли Стр_1.ТипУпаковки="ATK" Тогда
							Нстрок[0].ТипУпаковки=Предопределенноезначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.АТК")
						Иначе
							Нстрок[0].ТипУпаковки=Предопределенноезначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка")
						КонецЕслИ;
					Конецесли;
					
				Конеццикла;
				
				
			Конеццикла;
		Конецесли;
		
	КонецЕсли;
	ИзменитьВидимость()	
КонецПроцедуры



&НаКлиенте
Процедура ОткрытьВнешниеОбработки(Команда)
	// Вставить содержимое обработчика.
	ОткрытьФорму("Справочник.ВнешниеОбработки_ХамелеонЦРПТ.Форма.ФормаСписка",
	Новый структура("Тип",
		ТипДокумента()));
КонецПроцедуры


Функция ТипДокумента()
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя()
КонецФункции


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	Если Метаданные.Документы.Найти("Транзакции_ХамелеонМеркурий")=Неопределено Тогда
		Массив = Новый Массив(); 
Массив.Добавить(Тип("Строка")); 
НашеОписание = Новый ОписаниеТипов(Массив);

Элементы.Транзакция.ОграничениеТипа = НашеОписание; 
Элементы.Транзакция.ВыбиратьТип=Ложь;
//ПолеВвода1 = НашеОписание.ПривестиЗначение(Объект.НомераВСД.ПродукцияЦРПТ); 
Элементы.НомерТранзакции.КнопкаВыбора=Ложь;
Иначе
		Массив = Новый Массив(); 
Массив.Добавить(Тип("Строка")); 
Массив.Добавить(Тип("ДокументСсылка.Транзакции_ХамелеонМеркурий")); 
НашеОписание = Новый ОписаниеТипов(Массив);

Элементы.Транзакция.ОграничениеТипа = НашеОписание; 
//Элементы.Транзакция.ВыбиратьТип=Ложь;
Объект.Транзакция = НашеОписание.ПривестиЗначение(Объект.Транзакция); 
	Конецесли;
	
	НеОпределятьДатуПроизводстваИГоденДоПоНомеруВСД=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().НеОпределятьДатуПроизводстваИГоденДоПоНомеруВСД;
	ПолучатьКМВФоне=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ПолучатьКМВФоне;
	Элементы.ФармацевтикаВывод.Видимость=НЕ Объект.РозничнаяПродажаФармацевтика;
	Элементы.ЧекДокументФармацевтика.Видимость=Объект.РозничнаяПродажаФармацевтика;

	Элементы.СтранаТС.СписокВыбора.Очистить();
	Добав=Элементы.СтранаТС.СписокВыбора.Добавить(Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("112"),"112-Беларусь");
	Добав=Элементы.СтранаТС.СписокВыбора.Добавить(Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("417"),"417-Киргизия");
	Добав=Элементы.СтранаТС.СписокВыбора.Добавить(Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("487"),"487-Казахстан");
	Добав=Элементы.СтранаТС.СписокВыбора.Добавить(Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("051"),"051-Армения");
	
	Элементы.СтранаТС1.СписокВыбора.Очистить();
	Добав=Элементы.СтранаТС1.СписокВыбора.Добавить(Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("112"),"112-Беларусь");
	Добав=Элементы.СтранаТС1.СписокВыбора.Добавить(Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("417"),"417-Киргизия");
	Добав=Элементы.СтранаТС1.СписокВыбора.Добавить(Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("487"),"487-Казахстан");
	Добав=Элементы.СтранаТС1.СписокВыбора.Добавить(Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("051"),"051-Армения");
	
	
	// Вставить содержимое обработчика.
	//РаботатьНаV1=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().РаботатьНаV1;
									   ОбработкаWEBНаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	
	ПослеОтправкиОтчетовВСУЗПодписать=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ПослеОтправкиОтчетовВСУЗПодписать;
	
	Орг=Неопределено;
	Параметры.Свойство("Организация",Орг);
	Если ЗначениеЗаполнено(Орг) Тогда
		Объект.Организация=Орг;
	КонецЕсли;
	Поль=Неопределено;
	Параметры.Свойство("Пользовтаель",Поль);
	Если ЗначениеЗаполнено(Поль) Тогда
		Объект.ТекущийПользователь=Поль;
	КонецЕсли;
	ОбновитьВнешниеКнопки();
	Если Объект.Собственник.ИНН=Объект.Организация.ИНН Тогда
		Собственник=0;
	Иначе
		Собственник=1;
	Конецесли;
	Если Не ЗначениеЗаполнено(Объект.ТипДокумента) Тогда
		Объект.ТипДокумента=Объект.ТекущийПользователь.ТипВводаВОборот;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ТипДокумента) Тогда
		Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотИмпорт;
	КонецЕсли;
	УправлениеВидимостью();
 	ППП=РегистрыСведений.СохранитьДеревоИнформациюОНомерахКМВводВОборот_ХамелеонЦРПТ.Получить(Новый Структура("ВводВОборот",Объект.Ссылка)).Хранилище.Получить();
	Если ППП<>Неопределено Тогда
		Для Каждого Стр_1 Из ППП.Строки Цикл
			
			Добав=ДеревоКМ.ПолучитьЭлементы().Добавить();
			РекурсияДеревоКМ(Добав,СТр_1);
			
		Конеццикла;
		
		//ДеервоКМ=ППП;
	КонецЕслИ;
	ТекущийПользователь=Объект.ТекущийПользователь;
	
	МодульПриСозданииДокументов_ХамелеонЦРПТ.ВводВОборот_ХамелеонЦРПТ_ПриСозданииНаСервере(ЭтаФорма,Отказ,СтандартнаяОбработка);
	
	
КонецПроцедуры

Процедура РекурсияДеревоКМ(Добав,Стр_1)
	ЗаполнитьЗначенияСвойств(Добав,Стр_1);
	Для Каждого Стр_22 Из Стр_1.Строки Цикл
		Добав_1=Добав.ПолучитьЭлементы().Добавить();
		РекурсияДеревоКМ(Добав_1,Стр_22);
		
		
	Конеццикла;
	
КонецПроцедуры

Функция СоздатьНайтиСобственникаПоОрг()
	СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",Объект.Организация.ИНН);
	Если ЗначениеЗаполнено(СпрК) тогда
		СпрК=СпрК.ПолучитьОбъект();
	Иначе
		спрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
	КонецЕсли;
	СпрК.ИНН=Объект.Организация.ИНН;
	СпрК.Наименование=ОБъект.Организация.Наименование;
	СпрК.Записать();
	Возврат СпрК.Ссылка;
Конецфункции
Процедура УправлениеВидимостью(ПоменятьПро=Ложь)
	
	
	
	Если Не ЗначениеЗаполнено(Объект.КодТаможенногоОргана) Тогда
		ОБъект.КодТаможенногоОргана=ОБъект.ТекущийПользователь.КодТаможенногоОргана;
	Конецесли;
	Если Не ЗначениеЗАполнено(Объект.КодПринятогоРешения) тогда
		Объект.КодПринятогоРешения=Объект.ТекущийПользователь.КодПринятогоРешения;
	Конецесли;
	
	
	Элементы.ВводВОборот.Видимость=Ложь;
	Элементы.ВводВОборотИмпорт.Видимость=Ложь;
	Элементы.ВводВОборотКонтракт.Видимость=Ложь;
	Элементы.ВводВОборотФизЛицо.Видимость=Ложь;
	Элементы.ВыводИзОборота.Видимость=Ложь;
	
	Элементы.ВыводИзОборотаДляСобственныхНужд.Видимость=Ложь;
	Элементы.ВводВОборотТрансграничнаяТорговля.Видимость=Ложь;
	Элементы.ВводВОборотНаТерриторииЕАЭСКонтракт.Видимость=Ложь;
	Элементы.ВводВОборотВозвратИзРозницы.Видимость=Ложь;
	Элементы.ВводВОборотВозвратИзРозницы1.Видимость=Ложь;
	Элементы.ВыводИзОборотаФармацевтика.Видимость=ЛожЬ;
	Если Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Фармацевтика" Тогда
		Если Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота Тогда
			Элементы.ВыводИзОборотаФармацевтика.Видимость=Истина;
		КонецЕсли;
		
	Иначе
		Если Объект.ТипДокумента=перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборот Тогда
			Элементы.ВводВОборот.Видимость=Истина;
			Объект.СпособПроизводства=Перечисления.СпособПроизводства_ХамелеонЦРПТ.СобственноеПроизводство;
		ИначеЕсли Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотИмпорт 
			ИЛИ Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ИмпортСФТС
			Тогда
			Элементы.ВводВОборотИмпорт.Видимость=Истина;
		ИначеЕсли Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотКонтракт Тогда
			Элементы.ВводВОборотКонтракт.Видимость=Истина;
			Объект.СпособПроизводства=Перечисления.СпособПроизводства_ХамелеонЦРПТ.ПроизводствоТовараПоДоговору;
			Если Собственник=0 Тогда
				Если ПоменятьПро=Истина ИЛИ Не ЗначениеЗаполнено(
					Объект.Собственник) Тогда
					Объект.Собственник=СоздатьНайтиСобственникаПоОрг();
					Объект.Производитель=Неопределено;
				КонецЕсли;;
			Иначе
				Если ПоменятьПро=Истина ИЛИ Не ЗначениеЗаполнено(
					Объект.Производитель) Тогда
					Объект.Производитель=СоздатьНайтиСобственникаПоОрг();
					Объект.Собственник=Неопределено;
				КонецЕсли;;
				
			КонецЕсли;
		ИначеЕсли Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотФизЛицо Тогда
			Элементы.ВводВОборотФизЛицо.Видимость=Истина;
			Объект.СпособПроизводства=Перечисления.СпособПроизводства_ХамелеонЦРПТ.ПолученоОтФизическогоЛицаКомиссионнаяТорговля;
		ИначеЕсли ОБъект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота Тогда
			Элементы.ВыводИзОборота.Видимость=Истина;
			Элементы.РегистрационныйНомерККТ.Видимость=Объект.ПричинаВыводаИзОборота=Перечисления.ПричинаВыводаИзОборота_ХамлеонЦРПТ.RETAIL;
			          
			Элементы.ВидПервичногоДокумента4.Видимость=Объект.ПричинаВыводаИзОборота=Перечисления.ПричинаВыводаИзОборота_ХамлеонЦРПТ.REMOTE_SALE;
			Элементы.ВидПервичногоДокумента.Видимость=Объект.ПричинаВыводаИзОборота=Перечисления.ПричинаВыводаИзОборота_ХамлеонЦРПТ.RETAIL;
			Элементы.ВидПервичногоДокумента1.Видимость=Объект.ПричинаВыводаИзОборота=Перечисления.ПричинаВыводаИзОборота_ХамлеонЦРПТ.DAMAGE_LOSS ИЛИ
			Объект.ПричинаВыводаИзОборота=Перечисления.ПричинаВыводаИзОборота_ХамлеонЦРПТ.DESTRUCTION ИЛИ
			Объект.ПричинаВыводаИзОборота=Перечисления.ПричинаВыводаИзОборота_ХамлеонЦРПТ.ENTERPRISE_USE
			;
			Элементы.ВидПервичногоДокумента2.Видимость=Объект.ПричинаВыводаИзОборота=Перечисления.ПричинаВыводаИзОборота_ХамлеонЦРПТ.BEYOND_EEC_EXPORT;
			Элементы.ВидПервичногоДокумента3.Видимость=Объект.ПричинаВыводаИзОборота=Перечисления.ПричинаВыводаИзОборота_ХамлеонЦРПТ.EEC_EXPORT;
			
			Элементы.НаименованиеПервичногоДокумента.Видимость=Объект.ВидПервичногоДокумента=Перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ.OTHER;
		
			//Объект.ВидПервичногоДокумента=Перечисления.ВидПервичногоДокумента_ХамелеонЦРПТ.ФискальныйДокумент;
			//ОБъект.ПричинаВыводаИзОборота=Перечисления.ПричинаВыводаИзОборота_ХамлеонЦРПТ.РозничнаяРеализация;
	//	ИначеЕсли Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНужд 
			//ИЛИ Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНуждПокупателем
	//		Тогда
			
	//		Элементы.ВыводИзОборотаДляСобственныхНужд.Видимость=Истина;
		ИначеЕсли Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВоборотТрансграничнаяТорговля
			Тогда
			
			Элементы.ВводВОборотТрансграничнаяТорговля.Видимость=Истина;
		ИначеЕсли Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.НаТерриторииСтранЕАЭСКонтрактноеПроизводство
			Тогда
			
			Элементы.ВводВОборотНаТерриторииЕАЭСКонтракт.Видимость=Истина;
		ИначеЕсли Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотВозвратВРозницу
			Тогда
			
			Элементы.ВводВОборотВозвратИзРозницы.Видимость=Истина;
			Элементы.НаименованиеПервичногоДокументаИзРозницы.Видимость=Объект.ВидПервичногоДокумента=Перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ.OTHER;
		ИначеЕсли Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНужд ///ДИСТИЦИОНКА
			Тогда
			
			Элементы.ВводВОборотВозвратИзРозницы1.Видимость=Истина;
			Элементы.НаименованиеПервичногоДокумента1.Видимость=Объект.ВидПервичногоДокумента=Перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ.OTHER;
			Элементы.ГруппаДокументов.Видимость= Истина;
				
		КонецЕсли;
	КонецЕсли;

	Элементы.НомерПартии.Видимость=Ложь;
	Если Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак"
		ИЛИ Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак"
		ИЛИ (Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Фармацевтика"   И Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании)
		Тогда
		Элементы.НомерПартии.Видимость=Истина;
	Конецесли;
	Элементы.Договор.Видимость=ложь;
	Элементы.ФармацевтикаПровестиКакВводВборот.Видимость=ложь;
	Если Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Молоко" 
		Тогда
		Элементы.ТоварыНомерВСД.Видимость=Истина;
		Элементы.ТоварыГодендо.Видимость=Истина;
	ИначеЕсли 		Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Фармацевтика"         Тогда
		Элементы.Договор.Видимость=Истина;
		Элементы.ТоварыНомерВСД.Видимость=Ложь;
		Элементы.ТоварыГодендо.Видимость=Истина;
		Элементы.ФармацевтикаПровестиКакВводВборот.Видимость=Истина;
	Иначе
		Элементы.ТоварыНомерВСД.Видимость=Ложь;
		Элементы.ТоварыГодендо.Видимость=Ложь;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте         	
Процедура ИзменитьВидимость() Экспорт
	ИтогЭмитирован=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("Статус","APPLIED")).Количество();
	ИтогВОбороте=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("Статус","INTRODUCED")).Количество();
	ИтогRet=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("Статус","RETIRED")).Количество();
	ИтогоОшибки=Объект.СерийныеНомера.Количество()-ИтогВОбороте-ИтогЭмитирован-ИтогRet;
КонецПроцедуры



Процедура ОбновитьВнешниеКнопки()
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнешниеОбработки_ХамелеонЦРПТ.ИмяВнешнейОБработки,
		|	ВнешниеОбработки_ХамелеонЦРПТ.НаименованиеКнопки,
		|	ВнешниеОбработки_ХамелеонЦРПТ.Код
		|ИЗ
		|	Справочник.ВнешниеОбработки_ХамелеонЦРПТ КАК ВнешниеОбработки_ХамелеонЦРПТ
		|ГДЕ
		|	ВнешниеОбработки_ХамелеонЦРПТ.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ИмяКоманды="Команда"+ВыборкаДетальныеЗаписи.Код;
		Попытка
		КомандаФормы = Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуВнешняя";
		КомандаФормы.Заголовок = ВыборкаДетальныеЗаписи.ИмяВнешнейОБработки;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.Текст;
		
		//ОписаниеКомандыПечати.ИмяКомандыНаФорме = ИмяКоманды;
		
		НовыйЭлемент = Элементы.Добавить("ГруппаКнопокВнешняя" + ИмяКоманды, Тип("КнопкаФормы"), Элементы.ГруппаКнопокВнешняя);
		НовыйЭлемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		НовыйЭлемент.Заголовок=ВыборкаДетальныеЗаписи.НаименованиеКнопки;
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	Исключение
		КонецПопытки;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуВнешняя(Команда)
	
	// Вставить содержимое обработчика.	// Вставить содержимое обработчика.
	Попытка
		
		ВернДв=ВернутьИмяФайла(Команда.Имя);
		Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
			ДвоичныеДанные=ВернДв;
		Иначе
			ДвоичныеДанные=Новый ДвоичныеДанные(ВернДв);
		Конецесли;
		ОбработкаИмя=ПолучитьИмяВнешней(Двоичныеданные);
		ОткрытьФорму("ВнешняяОбработка."+ОбработкаИмя+".Форма",,ЭтаФорма);
	Исключение
			Попытка
#Если ТолстыйКлиентОбычноеПриложение  Тогда
		ВернДв=ВернутьИмяФайла(Команда.Имя);
		Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
			//ДвоичныеДанные=ВернДв;
			ДвоичныеДанные=ПолучитьИмяВременногоФайла();
			ВернДв.Записать(ДвоичныеДанные);
			
		Иначе
			ДвоичныеДанные=ВернДв;
		Конецесли;
				ВернутьВн(ДвоичныеДанные);
				Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
					УдалитьФайлы(ДвоичныеДанные);
				КонецЕсли;
#Иначе
				
			ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
#КонецЕсли
			Исключение
				ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
			КонецПопытки;
		//	
	//	
	КонецПопытки;

	//УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


#Если ТолстыйКлиентОбычноеПриложение  Тогда
&НаКлиенте
Процедура ВернутьВн(ДвоичныеДанные)
	//ИмяВременФ=ПолучитьИмяВременногоФайла();
	//ДвоичныеДанные.Записать(ИмяВременФ);
	ВнешняяОбработка=ВнешниеОбработки.Создать(ДвоичныеДанные);
	Фоорма=ВнешняяОбработка.ПолучитьФорму(,ЭтаФорма);
	Попытка
		Фоорма.УФ=ЭтаФорма;
	Исключение
	КонецПопытки;
	Фоорма.Открыть();
Конецпроцедуры      	
#КонецЕсли



Функция ВернутьИмяФайла(Команда)
//	Если РегистрыСведений.НастройкиПрограммыЦРПТ.Получить().ЗагружатьВнешниеОбработкиИзХранилища Тогда
		Возврат Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоКоду(Сред(Команда,8)).Хранилище.Получить();
//	Иначе
//		СпрВн=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоКоду(Сред(Команда,8));
//	Конецесли;
	
//	Возврат СпрВн.ИмяВнешнейОБработки
	//НаимСправочника=Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя();
	//Спр=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоНаименованию(НаимСправочника,Истина);
	//Если Спр<>Справочники.ВнешниеОбработки_ХамелеонЦРПТ.ПустаяСсылка() Тогда
	//	Возврат Спр.ИмяВнешнейОБработки;
	//Конецесли;
	
КонецФункции

Функция ПолучитьИмяВнешней(ИмяФайла)
    АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ИмяФайла);
    ИмяОбр = ВнешниеОбработки.Подключить(АдресВоВременномХранилище,,Ложь);
    Возврат ИмяОбр;
КонецФункции

&НаКлиенте
Процедура ТекущийПользовательПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	УправлениеВидимостью();
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьПараметрыПоПользователю(Польз)
	
	Возврат Новый Структура("СпособФормированияСН,ВидМаркировки,ВидСИ",Польз.СпособФормированияСН,Польз.ВидМаркировки,Польз.ВидСИ);
	
КонецФункции

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	// Вставить содержимое обработчика.
	//Если НоваяСтрока Тогда
	//	ПолучитьПараметрыПоПльзователию=ПолучитьПараметрыПоПользователю(Объект.ТекущийПользователь);
	//	ТекД=Элементы.Товары.ТекущиеДанные;
	//	ЗаполнитьЗначенияСвойств(ТекД,ПолучитьПараметрыПоПльзователию);
	//	ТекД.Обрабатывать=Истина;
	//	ТекД.КоличествоКМ=1;
	//	ТекД.Документ=ВернутьДокументСД(ТекД.Продукция,Объект.Дата);
	//КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Функция ВернутьДокументСД(Пр,Дата1)  
	Возврат Регистрысведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(
	Дата1,Новый Структура("Продукция",Пр)).Документ
КонецФункции
  

&НаСервере
Функция ТоварыGTINПриИзмененииНаСервере(Товар)
	// Вставить содержимое обработчика.    
	Если Товар.СтранаПроизводства.Альфа2="RU" Тогда
		СтрП="Производство в РФ";
	Иначе
		СтрП="Ввезен в РФ";
		
	КонецЕсли;
	Возврат Новый Структура("КодТНВЭД,СпособВыпускаТоваров",Товар.КодТНВЭД,СтрП);
Конецфункции

&НаКлиенте
Процедура ТоварыGTINПриИзменении(Элемент)
	ТекД=Элементы.Товары.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекД,ТоварыGTINПриИзмененииНаСервере(ТекД.GTIN));
КонецПроцедуры


&НаКлиенте
Процедура ТоварыСерийныйНомерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка,Переходить=Истина)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка=Ложь;
	Если Переходить<>Ложь Тогда
		Элементы.СтраницыТЧ.ТекущаяСтраница=Элементы.СерийныеНомера;
	КонецЕсли; 
	
	ТекД=Элементы.Товары.ТекущиеДанные;
	ТекД.НомерСтрокиСвязи=ТекД.ПолучитьИдентификатор();
	НН=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",ТекД.ПолучитьИдентификатор()));
	Для Каждого Стр_1 Из НН Цикл
		Объект.СерийныеНомера.Удалить(Стр_1);
	КонецЦикла;
	//АвтоСерийные=Автосерийные(Объект.ТекущийПользователь);
	Для Сч=1 По ТекД.КоличествоКМ цикл
		Добав=Объект.СерийныеНомера.Добавить();
		Добав.НомерСтрокиСвязи=ТекД.ПолучитьИдентификатор();
		Добав.GTIN=ВернутьГТИН(ТекД.GTIN);
		Добав.НаименованиеТовара=ТекД.GTIN;
	КонецЦикла;
	
	Объект.СерийныеНомера.Сортировать("НомерСтрокиСвязи");
	р=оБЪЕКТ.СерийныеНомера.НайтиСтроки(нОВЫЙ СТРУКТУРА("НомерСтрокиСвязи",Текд.НомерСтрокиСвязи));
	Если Р.Количество()>0 Тогда
		Элементы.СерийныеНомераТаблица.ТекущаяСтрока=Р[0].Получитьидентификатор();
	КонецЕсли;
	Если АвтоСерийные Тогда
		СгенерироватьНаСервере()
	КонецЕсли;
КонецПроцедуры

Функция ВернутьГТИН(Н)	
	Возврат xmlString(Н.GTIN)
КонецФункции

&НаСервере
Процедура СгенерироватьНаСервере()
	// Вставить содержимое обработчика.
	Для Каждого Стр Из ОБъект.СерийныеНомера Цикл
		Если Не Значениезаполнено(Стр.СерийныйНомер) Тогда
			
			СерийныйНомер=xmlString(Новый УникальныйИдентификатор());
			СерийныйНомер=СтрЗаменить(СерийныйНомер,"-","");
			Стр.СерийныйНомер=Сред(СерийныйНомер,1,13);
			
		КонецЕсли;
	Конеццикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Сгенерировать(Команда)
	СгенерироватьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭтикеток(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры
Процедура ПечатьЭти(Таб)
КонецПроцедуры

Функция EncodeURL(URL)
    Результат1 = "";
    Для Сч = 1 По СтрДлина(URL) Цикл
        ch = Сред(URL,Сч,1);
        vch = КодСимвола(ch);

		Если ("A" <= ch ) И ( ch <= "Z") Тогда      
			Результат1 = Результат1 + ch;
		ИначеЕсли ("a" <= ch ) И ( ch <= "z") Тогда 
			Результат1 = Результат1 + ch;
        ИначеЕсли ("0" <= ch ) И ( ch <= "9") Тогда 
            Результат1 = Результат1 + ch;
        ИначеЕсли (ch = " ") ИЛИ ( ch = "+") Тогда          
            Результат1 = Результат1 + "+";
		ИначеЕсли (ch = "-" ) ИЛИ ( ch = "_")       
			ИЛИ (ch = ".") ИЛИ (ch = "!")
            ИЛИ (ch = "~") ИЛИ (ch = "*")
            ИЛИ (ch = "") ИЛИ (ch = "(")
            ИЛИ (ch = ")") Тогда
            Результат1 = Результат1 + ch;
        ИначеЕсли (vch <= 127) Тогда        
            Результат1 = Результат1 + hex(vch);
        ИначеЕсли (vch <= 2047) Тогда       
            Результат1 = Результат1 + hex(192 + Цел(vch / 64));
            Результат1 = Результат1 + hex(128 + (vch % 64));
		Иначе                  
			Результат1 = Результат1 + hex(224 + Цел(vch / 4096));
            Результат1 = Результат1 + hex(128 + (Цел(vch / 64) % 64));
            Результат1 = Результат1 + hex(128 + (vch % 64));
        КонецЕсли;
    КонецЦикла;

    Возврат Результат1;
КонецФункции // ()


Функция hex(Знач Значение__)
    Значение__=Число(Значение__);
    Если Значение__<=0 Тогда
        Результат1="0";
    Иначе
        Значение__=Цел(Значение__);
        Результат1="";
        Пока Значение__>0 Цикл
            Результат1=Сред("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",Значение__%16 + 1,1)+Результат1;
            Значение__=Цел(Значение__/16) ;
        КонецЦикла;
    КонецЕсли;
    Если СтрДлина(Результат1) < 2 Тогда

        Результат1 = "0" + Результат1;

    КонецЕсли;
    Возврат "%" + Результат1;
КонецФункции


Функция ПолучитьИзПользователя()
	//Возврат Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);
	    Струк=Неопределено;
	Если Объект.Организация.ИНН=ТекущийПользователь.Организация.ИНН 
		И Объект.ТекущийПользователь.СайтыВходаВСистему=ТекущийПользователь.СайтыВходаВСистему Тогда
		Струк=Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(ТекущийПользователь);
	ИначеЕсли Объект.ТекущийПользователь.ПометкаУдаления=Ложь Тогда
		
					Струк=Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);

	Иначе
	//	
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Пользователи_ХамелеонЦРПТ КАК Пользователи_ХамелеонЦРПТ
		|ГДЕ
		|	Пользователи_ХамелеонЦРПТ.Организация.ИНН = &Организация
		|	И Пользователи_ХамелеонЦРПТ.СайтыВходаВСистему = &СайтыВходаВСистему
		|	И НЕ Пользователи_ХамелеонЦРПТ.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация.ИНН);
	Запрос.УстановитьПараметр("СайтыВходаВСистему", Объект.ТекущийПользователь.СайтыВходаВСистему);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НайтиПольз=Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		                      НайтиПольз=ВыборкаДетальныеЗаписи.Ссылка
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		
		//НайтиПольз=Справочники.Пользователи_ХамелеонЦРПТ.НайтиПоРеквизиту("Организация",Объект.Организация);
		Если ЗначениеЗаполнено(НайтиПольз) Тогда
			Струк=Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(НайтиПольз);
		КонецЕсли;
		
	КонецЕслИ;
	
	
	Если ЗначениеЗаполнено(Струк) тогда
	
		Струк.Вставить("РасчетОстатков",РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().РасчетОстатков);
	
		Возврат Струк;
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьВЦРПТ(Команда,УжеОтправили=Ложь) Экспорт
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьТокенСрегистра(ТТ)
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(ТТ,"")
КонецПроцедуры

Функция НеПрошлаПроверка21(Файл_1) Экспорт
	//	Возврат Ложь;
	КаталогВременногоФайла=КаталогВременныхФайлов()+"new_maket_V21\";
	СоздатьКаталог(КаталогВременногоФайла);
		
	//Файл=ПолучитьИмяВременногоФайла("xml");
	Файл=ПолучитьИмяВременногоФайла("xml");
	Файл=СтрЗаменить(Файл,КаталогВременныхФайлов(),КаталогВременногоФайла);
	
	
	Файл_2=Новый ТекстовыйДокумент;
	Файл_2.ДобавитьСтроку(Файл_1);
	Файл_2.Записать(Файл,КодировкаТекста.UTF8);
	
	//ИмяВремен=ПолучитьИмяВременногоФайла("xsd");
	//МакетXDTO.Записать(ИмяВремен,КодировкаТекста.ANSI);
	//dictionary_v20=ПолучитьИмяВременногоФайла("xsd");
	//dictionary_v20=КаталогВременногоФайла+"dictionary_v21.xsd";
	
	dictionary_v20=ПолучитьИмяВременногоФайла("xsd");
	dictionary_v20=СтрЗаменить(dictionary_v20,КаталогВременныхФайлов(),КаталогВременногоФайла);
	
	LP_base_types=ПолучитьИмяВременногоФайла("xsd");
	LP_base_types=СтрЗаменить(LP_base_types,КаталогВременныхФайлов(),КаталогВременногоФайла);

	Текст=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("dictionary_v21");
	Текст.Записать(dictionary_v20,КодировкаТекста.UTF8);
	
	
	Текст=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("LP_base_types");
	Текст.Записать(dictionary_v20,КодировкаТекста.UTF8);
	
	XMLDoc = New COMObject("Msxml2.DOMDocument.6.0");
    XMLDoc.Async = false;
    XMLDoc.ValidateOnParse = true;
    SchemaCache = New COMObject("Msxml2.XMLSchemaCache.6.0");
	SchemaCache.Add("LP_base_types.xsd",LP_base_types);
	SchemaCache.Add("",dictionary_v20);
	
	XMLDoc.Schemas = SchemaCache;
    XMLDoc.SetProperty("MultipleErrorMessages", true);
    XMLDoc.Load(Файл);
    ErrObj = XMLDoc.ParseError;
	Ошибка="";
    If ErrObj.ErrorCode <> 0 Then
        For Each ErrItem In ErrObj.AllErrors Do 
            //Message("Ошибка : " + ErrItem.Reason + " " + ErrItem.SrcText);
			Ошибка=Ошибка+"В строке № "+Erritem.line+" в колонке № "++Erritem.linepos+" ошибка: "+ErrItem.Reason+" "+ErrItem.SrcText+Символы.ПС+Символы.ПС;
		EndDo;
//		УдалитьФайлы(ИмяВремен);
		Сообщить(Ошибка);
		Возврат Истина;
    EndIf;
	УдалитьФайлы(Файл);
	УдалитьФайлы(dictionary_v20);
	
	Возврат Ложь;
КонецФункции

&НаСервереБезКонтекста
Функция дополнитьСтроку(Ср)
	ВОзврат Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Ср,14,"0");
	
Конецфункции

Процедура ЗапишемВРегистр_Ответ(ТекстДокумент)
	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Объект.Ссылка);
	РегДв.Отбор.Вид.Установить("Получили ответ");
	Добав=РегДв.Добавить();
	Добав.Документ=ОБъект.Ссылка;
	Добав.Вид="Получили ответ";
	Добав.Файл=Новый ХранилищеЗначения(ТекстДокумент,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
КонецПроцедуры


Процедура ЗапишемВРегистр(ТекстДокумент)
	
	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Объект.Ссылка);
	РегДв.Отбор.Вид.Установить("Отправлен заказ");
	Добав=РегДв.Добавить();
	Добав.Документ=ОБъект.Ссылка;
	Добав.Вид="Отправлен заказ";
	Добав.Файл=Новый ХранилищеЗначения(ТекстДокумент,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТокенСрегистра(Thumbprint_1)
	Возврат Регистрысведений.ТокенПоСертификату_ХамелеонЦРПТ.Получить(Новый Структура("Отпечаток",Thumbprint_1)).Токен;
КонецФункции

&НаКлиенте
Процедура ПослеПолученияСертификатов(Хранилище,ДД) Экспорт
	Хранилище.НачатьПолучениеВсех(Новый ОписаниеОповещения("ПослеПолученияВсех",ЭтаФорма,ДД));
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияВсех(СертификатыХранилища,ДД) Экспорт
	ТекущаяДата = ТекущаяДата();
	Для Каждого Сертификат Из СертификатыХранилища Цикл
	    Если Сертификат.ДатаОкончания < ТекущаяДата Тогда 
	        // Пропускаем истекшие сертификаты, если нужно
	        Продолжить;
		КонецЕсли;
		Если СтрЗаменить(Строка(Сертификат.Отпечаток)," ","")=ДД.ТекущийПользователь.Thumbprint_1 Тогда
			ДД.МенеджерКриптографии.НачатьПодписывание(Новый Описаниеоповещения("ПослеПодписиФайла",ЭтаФорма,ДД),
			
			
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ДД.ИмяВр,КодировкаТекста.ANSI,Ложь)),КодировкаТекста.ANSI,Ложь),Сертификат);
			//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ДД.ИмяВр,КодировкаТекста.ANSI,Ложь)),КодировкаТекста.ANSI,Ложь),Сертификат);
			Возврат;
			
		КонецЕсли;
		//ПолучитьСтрокуИзДвоичныхДанных(Сертификат.Отпечаток);
		//СтрСер=РаскодироватьнаСервере(Base64Строка(Сертификат.СерийныйНомер));
		                  		
	    //СписокСертификатов.Добавить(Сертификат);
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Функция КодСтрСервер(Добав)
	Возврат КодироватьСтроку(Добав,СпособКодированияСтроки.КодировкаURL);
Конецфункции

&НаКлиенте
Процедура ПослеПодписиФайлаТокен(РР,ДД) Экспорт
	//Тело = "{
	//|""uuid"": """+ОтветСтруктура.uuid+""",
	//|""data"": """+Добав+"""
	//|}";
	//HTTPЗапрос=Новый HTTPЗапрос("/api/v3/auth/cert/");
	//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	////HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	//
	//HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВнешняяВ(ТекущийПользователь)
	Возврат ТекущийПользователь.ИспользоватьВнешнийСертификат
КонецФункции
&НаКлиенте
Процедура ПослеЗаписиФайлаТокен(РР,ДД) Экспорт
	Сертификат=ДД.Сертификат;
	HTTPСервисЗапрос=ДД.HTTPСервисЗапрос;
	ФайлВременный=ДД.ФайлВременный;
	ИмяВр=ДД.ИмяВр;
	ОтветСтруктура=ДД.ОтветСтруктура;
	ВыбСертификатЭЦП=ДД.ВыбСертификатЭЦП;
	
	
	Данные=Новый ДвоичныеДанные(ИмяВр);
    Строка64=Base64Строка(Данные);
    Строка64=Лев(Строка64,СтрДлина(Строка64)-4);
    ДанныеНаЗапись=Base64Значение(Строка64);
   // ДанныеНаЗапись.Записать(ИмяВр);
	
	
	Каталог = КаталогВременныхФайловНаКлиенте;
	ИмяФайла = Строка(Новый УникальныйИдентификатор) + "2.xml";
	ИмяВр_1= Каталог+ИмяФайла;
	
	//ИмяВр_1=ПолучитьИмяВременногоФайла();
	Текущийпользователь=ВыбСертификатЭЦП.Thumbprint;
	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(ВнешняяВ(Объект.ТекущийПользователь),ДанныеНаЗапись,ИмяВр_1,Текущийпользователь,
	"ПослеПодписиФайлаТокен",ЭтаФорма);	
	
	Возврат;
	
	
	
  	Текст=Новый ТекстовыйДокумент;
	Текст.Прочитать(ИмяВр_1);

 	Добав=Текст.ПолучитьТекст();
	Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
	Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
	Добав=Сред(Добав,1,стрДлина(Добав)-4);
	Добав=СтрЗаменить(Добав,"\r\n","");
	УдалитьФайлы(ИмяВр);
	УдалитьФайлы(ИмяВр_1);
	
	Тело = "{
	|""uuid"": """+ОтветСтруктура.uuid+""",
	|""data"": """+Добав+"""
	|}";
	HTTPЗапрос=Новый HTTPЗапрос("/api/v3/auth/cert/");
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	
	
	Парамукк="";
	ОтветСтруктура_1 =ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
	Если HTTPСервисЗапрос.Status=200 Тогда
		ТОКЕН=ОтветСтруктура_1.token;                                 
	ИначеЕсли ОтветСтруктура_1.Свойство("error",Парамукк) Тогда
		
		ТекстОшибки="";
		Если ТипЗнч(Парамукк)=Тип("Массив") тогда
			Для Каждого Стр Из Парамукк Цикл
				ТекстОшибки=ТекстОшибки+стр;
			Конеццикла;
		Иначе
			ТекстОшибки=Парамукк;
		КонецЕсли;
		Сообщить(ТекстОшибки);
		Возврат       
	Конецесли;

	
КонецПроцедуры

Функция ПроверкаЗаполнения_1()
	Если ЗначениеЗАполнено(ОБъект.Ссылка) Тогда	
		Возврат Объект.Ссылка.ПолучитьОбъект().ПроверитьЗаполнение()
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ЗагрузканаСервереОтправитьЗаявку(Thumbprint_1,СРегистра,УжеОтправили,Тело)
					Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
		Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотИмпорт") Тогда
					что=Thumbprint_1.что;
HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/import/send?pg="+Что);
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборот") Тогда
					что=Thumbprint_1.что;
//HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/import/send?pg="+Что);
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/send?pg="+Что);
		КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		
		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Ответ(Текст1);
		КонецЕсли;
			
		
	
	
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
		ИЛИ Ответ.КодСостояния=201 
		Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			Объект._Order_ID=Текст1;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				Возврат Ложь
			КонецЕсли
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
	КонецЕсли      ;
	Возврат Истина;
КонецФункции

Функция НаСервереФормируемОтчетОбИспользовании(Thumbprint_1,session_ui,ВводВОборот=Ложь)
	
	
	Если Объект.СерийныеНомера.Количество()=0 Тогда
		Возврат "";
	КонецЕсли;
	//МассивФайлов=Новый Массив;
//Для Каждого Стр Из Объект.Товары Цикл
	
Если ВводВОборот И Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
	
	//МассивТекстов=Новый Массив;

		//Текст = Сформировать311_XSD(session_ui,НСтрок);
		
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("documents");
	Чтение.ЗаписатьАтрибут("version","1.35");
	
	Чтение.ЗаписатьНачалоЭлемента("register_product_emission");
	Чтение.ЗаписатьАтрибут("action_id","313");
	Чтение.ЗаписатьНачалоЭлемента("subject_id");
	Чтение.ЗаписатьТекст(Объект.Договор.РегистрационныйНомер);
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьНачалоЭлемента("operation_date");
	//Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
		
		//Время=ПолучитьЧасовойПоясИнформационнойБазы();
		
		Прибавка="Z";
		Если ЗначениеЗаполнено(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств) тогда
			Прибавка=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств,2,"0");
			Если Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств>0 Тогда
				     Прибавка="+"+Прибавка+":00";
			Иначе
				     Прибавка="-"+Прибавка+":00";
			Конецесли;
		Конецесли;
		
		
		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+Прибавка);
	//Иначе
	//	Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"Z");
	
	//конецесли;
	
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("release_info");
	
	Чтение.ЗаписатьНачалоЭлемента("doc_date");
	Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=дд.ММ.гггг"));
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("doc_num");
	Чтение.ЗаписатьТекст(Объект.Номер);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("confirmation_num");
	Чтение.ЗаписатьТекст(Объект.Номер);
	Чтение.ЗаписатьКонецЭлемента();

	
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Чтение.ЗаписатьНачалоЭлемента("signs");
//	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));

Для Каждого Стр_c Из Объект.СерийныеНомера Цикл
	Если СтрДлина(Стр_c.cis)=18 Тогда
		Чтение.ЗаписатьНачалоЭлемента("sscc");
		
		Штрих=Стр_c.cis;
		
		Чтение.ЗаписатьТекст(Штрих);
		Чтение.ЗаписатьКонецЭлемента();
	Иначе
		Чтение.ЗаписатьНачалоЭлемента("sgtin");
		
		Штрих=Стр_c.cis;
		Штрих=Сред(Штрих,3,14)+Сред(Штрих,19);
		
		Чтение.ЗаписатьТекст(Штрих);
		Чтение.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
		  
		
	Конеццикла;
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Текст=Чтение.Закрыть();
//	МассивТекстов.Добавить(Текст);
	 	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
	Возврат Текст;
		
	
	
	
	
	Для Каждого Стр_1 Из Объект.Товары Цикл
		
		НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));

		//Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));

		//Текст = Сформировать311_XSD(session_ui,НСтрок);
		
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("documents");
	Чтение.ЗаписатьАтрибут("version","1.35");
	
	Чтение.ЗаписатьНачалоЭлемента("register_end_packing");
	Чтение.ЗаписатьАтрибут("action_id","313");
	Чтение.ЗаписатьНачалоЭлемента("subject_id");
	Чтение.ЗаписатьТекст(Объект.Организация.subjectIdФармацевтика);
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьНачалоЭлемента("operation_date");
	Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"00:00");
	Чтение.ЗаписатьКонецЭлемента();
	
	
	
	
	
	Чтение.ЗаписатьНачалоЭлемента("signs");
//	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));

	Для Каждого Стр_c Из НСтрок Цикл
		Чтение.ЗаписатьНачалоЭлемента("sgtin");
		
		Штрих=Стр_c.cis;
		Штрих=Сред(Штрих,3,14)+Сред(Штрих,19);
		
		Чтение.ЗаписатьТекст(Штрих);
		Чтение.ЗаписатьКонецЭлемента();
		
		  
		
	Конеццикла;
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Текст=Чтение.Закрыть();
	//МассивТекстов.Добавить(Текст);
	 	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
		
		
		
		Продолжить;
		
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("documents");
	Чтение.ЗаписатьАтрибут("version","1.35");
	
	Чтение.ЗаписатьНачалоЭлемента("register_end_packing");
	Чтение.ЗаписатьАтрибут("action_id","311");
	Чтение.ЗаписатьНачалоЭлемента("subject_id");
	Чтение.ЗаписатьТекст(Объект.Организация.subjectIdФармацевтика);
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьНачалоЭлемента("operation_date");
	Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"00:00");
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьНачалоЭлемента("order_type");
	Чтение.ЗаписатьТекст("1");
	Чтение.ЗаписатьКонецЭлемента();
	//
	Чтение.ЗаписатьНачалоЭлемента("series_number");
	Чтение.ЗаписатьТекст("1");
	Чтение.ЗаписатьКонецЭлемента();
	//
	Чтение.ЗаписатьНачалоЭлемента("expiration_date");
	Чтение.ЗаписатьТекст(Формат(Стр_1.Годендо,"ДФ=""дд.ММ.гггг"""));
	Чтение.ЗаписатьКонецЭлемента();
	//
	Чтение.ЗаписатьНачалоЭлемента("gtin");
	Чтение.ЗаписатьТекст(ДополнитьСтроку(xmlString(Стр_1.gtin.gtin)));
	Чтение.ЗаписатьКонецЭлемента();
	//
	Чтение.ЗаписатьНачалоЭлемента("signs");
//	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));

	Для Каждого Стр_c Из НСтрок Цикл
		Чтение.ЗаписатьНачалоЭлемента("sgtin");
		
		Штрих=Стр_c.cis;
		Штрих=Сред(Штрих,3,14)+Сред(Штрих,19);
		
		Чтение.ЗаписатьТекст(Штрих);
		Чтение.ЗаписатьКонецЭлемента();
		
		  
		
	Конеццикла;
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Текст=Чтение.Закрыть();
	//МассивТекстов.Добавить(Текст);
	 	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
Конеццикла;
	//Возврат МассивТекстов
ИначеЕсли Thumbprint_1.НаименованиеСтенда="Табак"
	ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
	Тогда
	Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();
				Чтен.ЗаписатьИмяСвойства("sntins");
		
              		Чтен.ЗаписатьНачалоМассива();
					cisRjhjn="";
		Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		
			Если ЗначениеЗаполнено(Стр_1.cis) Тогда
					cisRjhjn=Стр_1.cis;
				//	Сообщить(cisRjhjn);	
				Если Сред(Стр_1.cis,1,2)="01" Тогда /////ВВОД В ОБОРОТ!!!!
												//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
							// Данный фрагмент построен конструктором.
							// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
							
							Запрос = Новый Запрос;
							Запрос.Текст = 
								"ВЫБРАТЬ
								|	ЗаказМарок_ХамелеонЦРПТКМИзAPI.НомерКМ,
								|	ЗаказМарок_ХамелеонЦРПТКМИзAPI.НомерКМ_Короткий
								|ИЗ
								|	Документ.ЗаказМарок_ХамелеонЦРПТ.КМИзAPI КАК ЗаказМарок_ХамелеонЦРПТКМИзAPI
								|ГДЕ
								|	ЗаказМарок_ХамелеонЦРПТКМИзAPI.НомерКМ_Короткий = &НомерКМ_Короткий";
							
							Запрос.УстановитьПараметр("НомерКМ_Короткий", Сред(Стр_1.cis,1,25));
							
							РезультатЗапроса = Запрос.Выполнить();
							
							ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
							сшы=РаскодироватьСтроку(Стр_1.cis,СпособКодированияСтроки.КодировкаURL);
							Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
								Если ВыборкаДетальныеЗаписи.НомерКМ_Короткий=Сред(Стр_1.cis,1,25) Тогда
									сшы=РаскодироватьСтроку(ВыборкаДетальныеЗаписи.НомерКМ,СпособКодированияСтроки.КодировкаURL);
									Прервать;
								КонецЕсли;
							конеццикла;
							//Если ВыборкаДетальныеЗаписи.Следующий() И ЗначениеЗАполнено(ВыборкаДетальныеЗаписи.НомерКМ) Тогда
								// Вставить обработку выборки ВыборкаДетальныеЗаписи
							//	чтен.ЗаписатьЗначение(РаскодироватьСтроку(ВыборкаДетальныеЗаписи.НомерКМ,СпособКодированияСтроки.КодировкаURL))
								
							//Иначе
								чтен.ЗаписатьЗначение(сшы)
								
							//КонецЕсли;;
							
							//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

					
				Иначе
					чтен.ЗаписатьЗначение(РаскодироватьСтроку(Стр_1.cis,СпособКодированияСтроки.КодировкаURL))
				КонецЕсли;
					
				КонецЕсли;
		//	Конеццикла;
			
	         Конеццикла;
			    чтен.ЗаписатьКонецМассива();
				
				Чтен.ЗаписатьИмяСвойства("usageType");
				
				Чтен.ЗаписатьЗначение("VERIFIED");
				
				//Если ЗначениеЗаполнено(Стр_1.Годендо) тогда
//					Чтен.ЗаписатьИмяСвойства("expirationDate");
//					Чтен.ЗаписатьЗначение(Формат(Стр_1.Годендо,"ДФ=""дд.ММ.гггг"""));
					
					
				//Иначе
					//Чтен.ЗаписатьИмяСвойства("expirationDate");
					//Чтен.ЗаписатьЗначение("010101");
						
					
				//КонецЕсли;
				
//					Чтен.ЗаписатьИмяСвойства("orderType");
//					Чтен.ЗаписатьЗначение(Объект.OrderType);
					
					
					//Чтен.ЗаписатьИмяСвойства("ownerId");
					//Чтен.ЗаписатьЗначение(Объект.ТекущийПользователь.ИдентификаторСУЗ);
					Чтен.ЗаписатьИмяСвойства("productionLineId");
					Если ЗначениеЗаполнено(Объект.НомерПартии) Тогда
						Чтен.ЗаписатьЗначение(Объект.НомерПартии);
					Иначе
						Чтен.ЗаписатьЗначение("1");
					КонецЕсли;
					
					  Если ЗначениеЗаполнено(cisRjhjn) Тогда
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа._Order_ID КАК _Order_ID
						|ИЗ
						|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
						|ГДЕ
						|	(НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий = &НомерКМ_Короткий
						|			)
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ
						|	ЗаказМарок_ХамелеонЦРПТКМИзAPI.Ссылка._Order_ID
						|ИЗ
						|	Документ.ЗаказМарок_ХамелеонЦРПТ.КМИзAPI КАК ЗаказМарок_ХамелеонЦРПТКМИзAPI
						|ГДЕ
						|	(ЗаказМарок_ХамелеонЦРПТКМИзAPI.НомерКМ_Короткий = &НомерКМ_Короткий
						|			)";
					
					Запрос.УстановитьПараметр("НомерКМ_Короткий", cisRjhjn);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						НомерЗ=ВыборкаДетальныеЗаписи._Order_ID
						
						
					КонецЦикла;
					
					Если Не ЗначениеЗаполнено(НомерЗ) тогда
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
						НомерЗ=xmlString(Объект.Ссылка.УникальныйИдентификатор());
					КонецЕсли;
	
				Иначе
					
					НомерЗ=xmlString(Объект.Ссылка.УникальныйИдентификатор());
				КонецЕсли;
					
					
					Чтен.ЗаписатьИмяСвойства("productionOrderId");
					Чтен.ЗаписатьЗначение(НомерЗ);
					
	
			Чтен.ЗаписатьКонецОбъекта();
					
		
		
		Текст=Чтен.Закрыть();
//	     МассивФайлов.Добавить(Новый Структура("Текст,Идентификатор",Текст,Стр.ПолучитьИдентификатор()));
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
	
Иначе


		Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();
				Чтен.ЗаписатьИмяСвойства("sntins");
		
              		Чтен.ЗаписатьНачалоМассива();
		Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		
			Если ЗначениеЗаполнено(Стр_1.cis) Тогда
				
				
				Если Thumbprint_1.НаименованиеСтенда="Обувь"
					ИЛИ Thumbprint_1.НаименованиеСтенда="Фармацевтика"
					Тогда
					
								
				НомерКМ="";		
				
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	НомераКМ_ХамелеонЦРПТ.НомерКМ
					|ИЗ
					|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
					|ГДЕ
					|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий = &НомерКМ_Короткий";
				
				Запрос.УстановитьПараметр("НомерКМ_Короткий", Стр_1.cis);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					НомерКМ=ВыборкаДетальныеЗаписи.НомерКМ;
					НомерКМ=РаскодироватьСтроку(НомерКМ,СпособКодированияСтроки.КодировкаURL);
			
					
				КонецЦикла;
				Если Не ЗначениеЗАполнено(НомерКМ) Тогда
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
						
						
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты.Регистратор
					|ИЗ
					|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Обороты(, , Регистратор, СерийныйНомер = &cis) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты
					|ГДЕ
					|	ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты.Регистратор ССЫЛКА Документ.ЗаказМарок_ХамелеонЦРПТ";
				
				Запрос.УстановитьПараметр("cis", Стр_1.cis);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				РРР=КодироватьСтроку(Стр_1.cis,СпособКодированияСТроки.КодировкаURL);
				НомерКМ=Стр_1.cis;
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				

				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					Для Каждого Стр_111 Из  ВыборкаДетальныеЗаписи.Регистратор.КМИзAPI Цикл
						Если Найти(Стр_111.НомерКМ,РРР)=1 Тогда
							НомерКМ=Стр_111.НомерКМ;
							НомерКМ=РаскодироватьСтроку(НомерКМ,СпособКодированияСтроки.КодировкаURL);
			
							
							Прервать;
						КонецЕсли;
						
					Конеццикла;
					
					
				КонецЕсли;
				КонецЕсли ;
				
					
					
					cis=НомерКМ;
					
					
				Иначе
					cis=РаскодироватьСтроку(Стр_1.cis,СпособКодированияСтроки.КодировкаURL);
				КонецЕсли;
				
					чтен.ЗаписатьЗначение(cis)
					
				КонецЕсли;
		//	Конеццикла;
			
	         Конеццикла;
			    чтен.ЗаписатьКонецМассива();
				
				Чтен.ЗаписатьИмяСвойства("usageType");
				
				Чтен.ЗаписатьЗначение("VERIFIED");
				
				Если ЗначениеЗаполнено(Стр_1.Годендо) тогда
					Чтен.ЗаписатьИмяСвойства("expirationDate");
					Чтен.ЗаписатьЗначение(Формат(Стр_1.Годендо,"ДФ=""дд.ММ.гггг"""));
					
				КонецЕсли;	
				//Иначе
					//Чтен.ЗаписатьИмяСвойства("expirationDate");
					//Чтен.ЗаписатьЗначение("010101");
						
					
				//КонецЕсли;
				
					Чтен.ЗаписатьИмяСвойства("orderType");
					Чтен.ЗаписатьЗначение("2");
					
					
					Чтен.ЗаписатьИмяСвойства("ownerId");
					Чтен.ЗаписатьЗначение(Объект.ТекущийПользователь.ИдентификаторСУЗ);
					Чтен.ЗаписатьИмяСвойства("seriesNumber");
					Чтен.ЗаписатьЗначение("1");
					Чтен.ЗаписатьИмяСвойства("subjectId");
					Чтен.ЗаписатьЗначение(Объект.ТекущийПользователь.ИдентификаторСУЗ);
					
	
			Чтен.ЗаписатьКонецОбъекта();
					
		
		
		Текст=Чтен.Закрыть();
//	     МассивФайлов.Добавить(Новый Структура("Текст,Идентификатор",Текст,Стр.ПолучитьИдентификатор()));
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
//		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
	// Конеццикла;
	 КонецЕсли;
	
	Возврат Текст;
	
	
КонецФункции

Функция ВернутьУНИКУМ()
	Возврат xmlString(Новый УникальныйИдентификатор())
КонецФункции

Функция СформироватьОтчетОбИспользованииМассив(Thumbprint_1)
	
	МассивТекстов=Новый Массив;
	
	Для Каждого Стр_1 Из Объект.Товары Цикл
		Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();
		
		НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));

	
	Чтен.ЗаписатьИмяСвойства("sntins");
	Чтен.ЗаписатьНачалоМассива();
//	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));

	Для Каждого Стр_c Из НСтрок Цикл
		
		   	cis=Стр_c.cis;

		
		НомерКМ="";	
	
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	НомераКМ_ХамелеонЦРПТ.НомерКМ,
					|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий
					|ИЗ
					|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
					|ГДЕ
					|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий = &НомерКМ_Короткий";
				
				Запрос.УстановитьПараметр("НомерКМ_Короткий", cis);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					Если ВыборкаДетальныеЗаписи.НомерКМ_Короткий=cis Тогда
						НомерКМ=ВыборкаДетальныеЗаписи.НомерКМ
					Конецесли;
						
				КонецЦикла;
				Если Не ЗначениеЗАполнено(НомерКМ) Тогда
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
						
						
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОбороты.Регистратор
					|ИЗ
					|	РегистрНакопления.ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТ.Обороты(, , Регистратор, СерийныйНомер = &cis) КАК ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОбороты
					|ГДЕ
					|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОбороты.Регистратор ССЫЛКА Документ.ЗаказМарок_ХамелеонЦРПТ";
				
				Запрос.УстановитьПараметр("cis", cis);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				РРР=КодироватьСтроку(cis,СпособКодированияСТроки.КодировкаURL);
				НомерКМ="";
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				
				//Сообщить(Стр.cis);

				//Сообщить(РРР);
				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					Для Каждого Стр_111 Из  ВыборкаДетальныеЗаписи.Регистратор.КМИзAPI Цикл
						Если Стр_111.НомерКМ_Короткий=cis Тогда
							
							НомерКМ=Стр_111.НомерКМ;
							
						КонецЕсли;
						
					Конеццикла;
					
					
				КонецЕсли;
				КонецЕсли ;
				

				Если ЗначениеЗаполнено(НомерКМ) тогда
					cis=РаскодироватьСтроку(НомерКМ,СпособКодированияСтроки.КодировкаURL);
				ИначеЕсли (Thumbprint_1.НаименованиеСтенда="Молоко" И Найти(Стр_c.cis,"%1D")>=25)
					ИЛИ (Thumbprint_1.НаименованиеСтенда<>"Молоко" И Найти(Стр_c.cis,"%1D")>=32)
					тогда
					cis=РаскодироватьСтроку(Стр_c.cis,СпособКодированияСтроки.КодировкаURL);
				КонецЕсли;
					
				Если Найти(cis,Символ(29))=0 тогда
					
					Если ЗначениеЗаполнено(НомерКМ) тогда
						cis=НомерКМ;
					Иначе
						cis=Стр_c.cis;
					КонецЕсли;
					
					Если Thumbprint_1.НаименованиеСтенда="Молоко" Тогда
						Если СтрДлина(cis)<=30 Тогда
							cis=Сред(cis,1,24)+Символ(29)+Сред(cis,25);
						Иначе
							cis=Сред(cis,1,31)+Символ(29)+Сред(cis,32);
						Конецесли;
						
					Иначе
						cis=Сред(cis,1,31)+Символ(29)+Сред(cis,32);
					Конецесли;
				Конецесли;
	
		
		
		Чтен.ЗаписатьЗначение(cis);
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	
		//Чтен.ЗаписатьЗначение("VERIFIED");
		
		
		
		
		Если 				Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
	Чтен.ЗаписатьИмяСвойства("usageType");
		Чтен.ЗаписатьЗначение("VERIFIED");
	
			Чтен.ЗаписатьИмяСвойства("expirationDate");
					Чтен.ЗаписатьЗначение(Формат(Стр_1.Годендо,"ДФ=""дд.ММ.гггг"""));
					
				//Иначе
					//Чтен.ЗаписатьИмяСвойства("expirationDate");
					//Чтен.ЗаписатьЗначение("010101");
						
					
				//КонецЕсли;
				
					Чтен.ЗаписатьИмяСвойства("orderType");
					Чтен.ЗаписатьЗначение(1);
					
					
					//Чтен.ЗаписатьИмяСвойства("ownerId");
					//Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
					Чтен.ЗаписатьИмяСвойства("seriesNumber");
					Чтен.ЗаписатьЗначение(Объект.НомерПартии);
					Чтен.ЗаписатьИмяСвойства("subjectId");
					Чтен.ЗаписатьЗначение(Объект.Договор.РегистрационныйНомер);
					//Чтен.ЗаписатьЗначение(Объект.ТекущийПользователь.ТокенКСУЗ);
			Иначе
		
		    	Чтен.ЗаписатьИмяСвойства("usageType");
		Чтен.ЗаписатьЗначение("VERIFIED");
	
		Если ЗначениеЗаполнено(Стр_1.ГоденДо) Тогда
			Если Стр_1.ЧасыДо Тогда
				
				Чтен.ЗаписатьИмяСвойства("expDate72");
				Чтен.ЗаписатьЗначение(Формат(Стр_1.ГоденДо,"ДФ=""ггММддЧЧмм"""));
				
			Иначе
				Чтен.ЗаписатьИмяСвойства("expDate");
				Чтен.ЗаписатьЗначение(Формат(Стр_1.ГоденДо,"ДФ=""ггММдд"""));
			КонецЕсли;
		КонецЕсли;
	//	Чтен.ЗаписатьИмяСвойства("expDate72");
	//	Чтен.ЗаписатьЗначение(Формат(Стр_1.ГоденДо,"ДФ=""ггММдд"""));
	Если ЗначениеЗАполнено(Стр_1.НомерВСД) Тогда
		Чтен.ЗаписатьИмяСвойства("accompanyingDocument");
		ГУИД=Стр_1.НомерВСД;
		Если СтрДлина(ГУИД)>36 тогда
	//		
			УИД=Сред(ГУИД,1,4)+Сред(ГУИД,6,4)+"-"+Сред(ГУИД,11,4)+"-"+Сред(ГУИД,16,4)+"-"+
											Сред(ГУИД,21,4)+"-"+Сред(ГУИД,26,4)+Сред(ГУИД,31,4)+Сред(ГУИД,36,4);
											ГУИД=НРег(УИД);

		Конецесли;
		Чтен.ЗаписатьЗначение(ГУИД);
	Конецесли;
	
		Чтен.ЗаписатьИмяСвойства("cisType");
		Чтен.ЗаписатьЗначение("UNIT");
	
		Чтен.ЗаписатьИмяСвойства("usedInProduction");
		Чтен.ЗаписатьЗначение(0);
		           Конецесли;
	
	Чтен.ЗаписатьКонецОбъекта();
	
	
	Текст=Чтен.Закрыть();
	МассивТекстов.Добавить(Новый Структура("Текст,Идентификатор",Текст,Стр_1.ПолучитьИдентификатор()));
	 	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр(Текст);
		КонецЕсли;
		
	Конеццикла;	
	
	Возврат МассивТекстов

Конецфункции

&НаСервереБезКонтекста
Процедура НасервереПолучаемВФоне(ТокенСУЗ,Пользователь,Ссылка)
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ссылка);
	МассивПараметров.Добавить(Пользователь);
	МассивПараметров.Добавить(ТокенСУЗ);
	
	Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОтправитьОтчетОбИспользовании", МассивПараметров);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьДинамическийТокен(Пользователь,ТТ)
	ОчиститьТокенСрегистра(ТТ);
	
	РегДв=РегистрыСведений.ТокенДинамичкийДляСУЗ_По_Идентификатору_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Пользователь.Установить(Пользователь.ИдентификаторСоединения);
	РегДв.Записать(Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьОтчетОбИспользовании(Thumbprint_1,УжеОтправили=Ложь)
	
	Если ПолучатьКМВФоне=Истина Тогда
		ТокенСУЗ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);
		НасервереПолучаемВФоне(ТокенСУЗ,Thumbprint_1,Объект.Ссылка);
		Возврат;
	Конецесли;

	
	
	Если Thumbprint_1.НаименованиеСтенда="Молоко"
		ИЛИ Thumbprint_1.НаименованиеСтенда="Фармацевтика"
		ИЛИ Thumbprint_1.НаименованиеСтенда="Питьевая вода"
		//ИЛИ Thumbprint_1.НаименованиеСтенда="Табак"
		//ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
		
		Тогда
		Объект.Статус=Неопределено;
		МассивФайлов=СформироватьОтчетОбИспользованииМассив(Thumbprint_1);
		Сч=0;
		
		АдресРаздробить=Thumbprint_1.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
		
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
			
			
		
		
	Для Каждого СформироватьФайлДляОтправки_3 ИЗ МассивФайлов Цикл
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки_3.Текст,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
	
		Тело=СформироватьФайлДляОтправки;
			
			
			
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			ПоказатьПредупреждение(,"В пользователе не заполнен адрес СУЗ");
			Возврат;
			
		КонецЕсли;
	
	Если ОбработкаWEBНаСервере Тогда
		//ЗагрузканаСервереОтправитьЗаявка_Шины(Thumbprint_1,Тело,Адрес,Порт,Защищ,СформироватьФайлДляОтправки_3.Идентификатор);
		
		
	Иначе
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;
			
	Подписанный="";
	Попытка
	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1,Подписанный,Истина);
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
			Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	Исключение
КонецПопытки;
	
			
			
//			Если РаботатьНаV1 Тогда
//		HTTPЗапрос=Новый HTTPЗапрос("api/utilisation");
//			Иначе
	ТокенСУЗ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);
		HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/utilisation?omsId="+Thumbprint_1.ИдентификаторСУЗ);
//		КонецЕсли;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
	
	Если ЗначениеЗаполнено(Подписанный) тогда
		HTTPЗапрос.Заголовки.Вставить("X-Signature",Подписанный);
	КонецЕсли;
	
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
					Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Текст1);
	КонецЕсли;
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
			НСтр.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
				НСтр.order_ID=NNN.reportId;
				
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			
			ЭтаФорма.Записать();
			Если ПослеОтправкиОтчетовВСУЗПодписать Тогда
				
				
					Срегистра="";
					СерийныйНомер="";
					Куки=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитькукиВСУЗ(Thumbprint_1,
					,Срегистра,СерийныйНомер);
					Если Не ЗначениеЗАполнено(Куки) ИЛИ Не ЗначениеЗаполнено(Срегистра)
						ИЛИ Не ЗначениеЗаполнено(СерийныйНомер) Тогда
						ВОзврат;
					КонецЕсли;
					
					HTTPЗапрос=Новый HTTPЗапрос("webapi/v1/reports/signed");
					HTTPЗапрос.Заголовки.Вставить("Cookie",куки);
					
					HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
													ТокенСУЗ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);

					HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
					HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
					Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
					Текст1=Ответ.ПолучитьТелоКакСтроку();
					
					NNN_2=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					
				
				
			КонецЕсли;
			
			
			//Объект._Order_ID=NNN.order_id;
	
//	ИначеЕсли Ответ.КодСостояния=200 Тогда
//				НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
//			НСтр.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
//						Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");

//				//ЧтениеJSON = Новый ЧтениеJSON;
//				//ЧтениеJSON.УстановитьСтроку(Текст1);
//				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
////				Если РаботатьнаV1 Тогда
////			Объект._Order_ID=NNN;
////				Иначе
//			//Объект._Order_ID=NNN.reportId;
////			Конецесли;
//				НСтр.order_ID=NNN.reportId;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
	Иначе
			Если УжеОтправили=Истина Тогда
						НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
					НСтр.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							НСтр.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								НСтр.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
			Иначе
				//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
				
				ОчиститьДинамическийТокен(Thumbprint_1.ТекущийПользователь,Thumbprint_1.Thumbprint_1);
			
				ОтправитьОтчетОбИспользовании(Thumbprint_1,Истина)			
			КонецЕсли
	КонецЕсли;
	//Если Ответ.КодСостояния<>200 Тогда
	//	
	//	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
	//	  Текст1=Ответ.ПолучитьТелоКакСтроку();
	//		Попытка
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//			Объект.ОшибкаОтправки=NNN.error_message;
	//			
	//		Исключение
	//		КонецПопытки;
	//	Иначе
	//		Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета");
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//		Объект._Order_ID=NNN.order_id;
	//КонецЕсли;
	КонецеслИ;
Конеццикла;
	ЭтаФорма.Записать();
Возврат;
КонецЕсли;	


	СформироватьФайлДляОтправки_1=НаСервереФормируемОтчетОбИспользовании(Thumbprint_1,"");
	
	
	
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
	//ТипЗнч(СформироватьФайлДляОтправки_1)=Тип("Массив") тогда
		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
		
		Если не ЗначениеЗаполнено(Срегистра) тогда
			Возврат
		Конецесли;

		
	СформироватьФайлДляОтправки_1=НаСервереФормируемОтчетОбИспользовании(Thumbprint_1,СРегистра);
		
		//Сч=0;
		//Для Каждого Стр_1 Из Объект.Товары Цикл
			
			СформироватьФайлДляОтправки=СформироватьФайлДляОтправки_1;
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
		
		
		//Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

				
				Подписанный="";
		//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
		//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл_ЛДМП(СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Ложь);
			Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1,Подписанный,Истина);
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл_ЛДМП(СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Ложь);
				
				
			КонецЕсли;
		
		//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//Подписанный,КодировкаТекста.UTF8,Ложь));
		
					Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
				Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
				 Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("document");
	Чтен.ЗаписатьЗначение(Добав);
	Чтен.ЗаписатьИмяСвойства("sign");
	Чтен.ЗаписатьЗначение(Подписанный);
	Чтен.ЗаписатьИмяСвойства("request_id");
	Чтен.ЗаписатьЗначение(ВернутьУНИКУМ());
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();
	
				 
				 
		//Тело="{
		//|""doc_type"":""311"",
		//|""document"":"""+Добав+""",
		//|""sign"":"""+Подписанный+""",
		//|""request_id"":"""+ВернутьУНИКУМ()+"
		//|}";
			
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
		HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/send");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		
	Если Ответ.КодСостояния=200 ИЛИ Ответ.КодСостояния=200  Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Объект._Order_ID=NNN.document_id;
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
				//НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
//				Объект._Order_ID=NNN.orderId;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Объект.ОшибкаОтправки=Текст1;
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
	КонецЕсли;

		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Ответ(Текст1);
		КонецЕсли;
			
		
		
		
			
			
		///Конеццикла;
		
		 ЭтаФорма.Записать();
		 УправлениеВидимостью();
		
		Возврат;
	КонецЕсли;
	
	
	СформироватьФайлДляОтправки_3=СформироватьФайлДляОтправки_1;
//	НеПрошлаПроверка21(СформироватьФайлДляОтправки);
//Для Каждого СформироватьФайлДляОтправки_3 ИЗ СформироватьФайлДляОтправки_1 Цикл
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки_3,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
	
	//Подписанный="";
	//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
	//			Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
	//		Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
	//		Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	
	
	//Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
	//			Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
	//		Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
	//		Добав=СтрЗаменить(Добав,"\r\n","");

	Тело=СформироватьФайлДляОтправки;
		АдресРаздробить=Thumbprint_1.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
		
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
			
			
			
			
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			ПоказатьПредупреждение(,"В пользователе не заполнен адрес СУЗ");
			Возврат;
			
		КонецЕсли;
	
	Если ОбработкаWEBНаСервере Тогда
		//ЗагрузканаСервереОтправитьЗаявка_Шины(Thumbprint_1,Тело,Адрес,Порт,Защищ,СформироватьФайлДляОтправки_3.Идентификатор);
		
		
	Иначе
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;
			
			
//			Если РаботатьНаV1 Тогда
//		HTTPЗапрос=Новый HTTPЗапрос("api/utilisation");
//			Иначе
		HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/utilisation?omsId="+Thumbprint_1.ИдентификаторСУЗ);
//		КонецЕсли;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
														ТокенСУЗ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);

	HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
					Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Текст1);
	КонецЕсли;
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
//				НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
//				Если РаботатьнаV1 Тогда
//			Объект._Order_ID=NNN;
//				Иначе
			Объект._Order_ID=NNN.reportId;
//			Конецесли;
				
					Если ПослеОтправкиОтчетовВСУЗПодписать Тогда
				
				
					Срегистра="";
					СерийныйНомер="";
					Куки=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитькукиВСУЗ(Thumbprint_1,
					,Срегистра,СерийныйНомер);
					Если Не ЗначениеЗАполнено(Куки) ИЛИ Не ЗначениеЗаполнено(Срегистра)
						ИЛИ Не ЗначениеЗаполнено(СерийныйНомер) Тогда
						ВОзврат;
					КонецЕсли;
					
					HTTPЗапрос=Новый HTTPЗапрос("webapi/v1/reports/signed");
					HTTPЗапрос.Заголовки.Вставить("Cookie",куки);
					
					Тело_1="["""+Объект._Order_ID+"""]";
					HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
																		ТокенСУЗ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);

					HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
					HTTPЗапрос.УстановитьТелоИзСтроки(Тело_1);
					Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
					Текст1=Ответ.ПолучитьТелоКакСтроку();
					
					NNN_2=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				
					
							Подписанный="";
						ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,NNN_2[0].content ,Thumbprint_1,Подписанный,Истина);
						
						//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
						//Подписанный,КодировкаТекста.UTF8,Ложь));
						
									Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
								Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
								 Подписанный=СтрЗаменить(Подписанный,"\r\n","");
								Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ДляОтправкиОтчетаОбИспользовании(Подписанный,NNN_2[0]);
								
					HTTPЗапрос=Новый HTTPЗапрос("webapi/v1/reports/sign");
					HTTPЗапрос.Заголовки.Вставить("Cookie",куки);
					
					HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
																		ТокенСУЗ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);

					HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
					HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
					Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("PUT",HTTPЗапрос);
					Текст1=Ответ.ПолучитьТелоКакСтроку();
					
								
								
						//Тело="{
						//|""product_document"":"""+Добав+""",
						//|""document_format"": ""MANUAL"",";

				
				
			КонецЕсли;
			
			


			//Объект._Order_ID=NNN.order_id;
	
//	ИначеЕсли Ответ.КодСостояния=200 Тогда
//			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
//				//ЧтениеJSON = Новый ЧтениеJSON;
//				//ЧтениеJSON.УстановитьСтроку(Текст1);
//				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
////				Если РаботатьнаV1 Тогда
////			Объект._Order_ID=NNN;
////				Иначе
//			Объект._Order_ID=NNN.reportId;
////			Конецесли;
//				//НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
////				Объект._Order_ID=NNN.orderId;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
	КонецЕсли;
	//Если Ответ.КодСостояния<>200 Тогда
	//	
	//	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
	//	  Текст1=Ответ.ПолучитьТелоКакСтроку();
	//		Попытка
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//			Объект.ОшибкаОтправки=NNN.error_message;
	//			
	//		Исключение
	//		КонецПопытки;
	//	Иначе
	//		Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета");
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//		Объект._Order_ID=NNN.order_id;
	//КонецЕсли;
КонецЕсли;
	ЭтаФорма.Записать();
	УправлениеВидимостью();
	
	
КонецПроцедуры


Функция НаСервереФормируемвыводизОборот(Thumbprint_1,session_ui)
	
	
	Если Объект.СерийныеНомера.Количество()=0 Тогда
		Возврат "";
	КонецЕсли;
	//МассивФайлов=Новый Массив;
//Для Каждого Стр Из Объект.Товары Цикл
	

		Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();
		
		Чтен.ЗаписатьИмяСвойства("inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		
		
		Чтен.ЗаписатьИмяСвойства("participantInn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		
		
		Чтен.ЗаписатьИмяСвойства("participant_inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		
		Чтен.ЗаписатьИмяСвойства("trade_participant_inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
			
		Чтен.ЗаписатьИмяСвойства("action_date");
		Чтен.ЗаписатьЗначение(Формат(Объект.Дата,"ДФ=""гггг-ММ-дд"""));
		
		Чтен.ЗаписатьИмяСвойства("action");
	//	Если Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота Тогда
	//		Чтен.ЗаписатьЗначение("RETAIL");
	//	ИначеЕсли Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНужд Тогда
	//		Чтен.ЗаписатьЗначение("ENTERPRISE_USE");
	//	Иначе
	//		Чтен.ЗаписатьЗначение("NO_RETAIL_USE");
			Чтен.ЗаписатьЗначение(xmlString(Объект.ПричинаВыводаИзОборота));
			
	//	КонецЕсли;
		
		
		Чтен.ЗаписатьИмяСвойства("document_type");
		Чтен.ЗаписатьЗначение(xmlString(Объект.ВидПервичногоДокумента));
		
		Чтен.ЗаписатьИмяСвойства("document_number");
		Чтен.ЗаписатьЗначение(Формат(Объект.НомерПервичногоДокумента,"ДФ=""гггг-ММ-дд"""));
		
		Чтен.ЗаписатьИмяСвойства("document_date");
		Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПервичногоДокумента,"ДФ=""гггг-ММ-дд"""));
		
		Если ЗначениеЗаполнено(Объект.НаименованиеПервичногоДокумента) тогда
			Чтен.ЗаписатьИмяСвойства("primary_document_custom_name");
			Чтен.ЗаписатьЗначение(Объект.НаименованиеПервичногоДокумента);
		КонецЕсли;
		
		
		
		Чтен.ЗаписатьИмяСвойства("products");
	
              		Чтен.ЗаписатьНачалоМассива();

		Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		
			Если ЗначениеЗаполнено(Стр_1.cis) Тогда
				Если Стр_1.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
					ЕстьУпаковка=Ложь;
					Для Каждого Стр_ДД Из ДеревоКМ.ПолучитьЭлементы() Цикл
						Если СТр_ДД.cis=Стр_1.cis Тогда
							
							КолКМ=Стр_ДД.ПолучитьЭлементы().Количество();
							Для Каждого Стр_22 Из Стр_ДД.ПолучитьЭлементы() Цикл
								
								Чтен.ЗаписатьНачалоОбъекта();
							//	Чтен.ЗаписатьИмяСвойства("uitu");
							///	чтен.ЗаписатьЗначение(Стр_1.cis);
							
								Чтен.ЗаписатьИмяСвойства("cis");
								чтен.ЗаписатьЗначение(Стр_22.НомерКМ);
								НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
								
								Если ЗначениеЗАполнено(НСтр[0].ВидПервичногоДокумента) Тогда
									
																Чтен.ЗаписатьИмяСвойства("document_type");
																Чтен.ЗаписатьЗначение(xmlString(НСтр[0].ВидПервичногоДокумента));
														 		Чтен.ЗаписатьИмяСвойства("document_date");
																Чтен.ЗаписатьЗначение(Формат(НСтр[0].ДатаПервичногоДокумента,"ДФ=""гггг-ММ-дд"""));
																Чтен.ЗаписатьИмяСвойства("document_number");
																Чтен.ЗаписатьЗначение(Формат(НСтр[0].НомерПервичногоДокумента,"ДФ=""гггг-ММ-дд"""));
																
																
																	Если ЗначениеЗаполнено(НСтр[0].НаименованиеПервичногоДокумента) тогда
											Чтен.ЗаписатьИмяСвойства("primary_document_custom_name");
											Чтен.ЗаписатьЗначение(НСтр[0].НаименованиеПервичногоДокумента);
										КонецЕсли;
									
									
								Иначе
																
																Чтен.ЗаписатьИмяСвойства("document_type");
																Чтен.ЗаписатьЗначение(xmlString(Объект.ВидПервичногоДокумента));
														 		Чтен.ЗаписатьИмяСвойства("document_date");
																Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПервичногоДокумента,"ДФ=""гггг-ММ-дд"""));
																Чтен.ЗаписатьИмяСвойства("document_number");
																Чтен.ЗаписатьЗначение(Формат(Объект.НомерПервичногоДокумента,"ДФ=""гггг-ММ-дд"""));
																
																
																	Если ЗначениеЗаполнено(Объект.НаименованиеПервичногоДокумента) тогда
											Чтен.ЗаписатьИмяСвойства("primary_document_custom_name");
											Чтен.ЗаписатьЗначение(Объект.НаименованиеПервичногоДокумента);
										КонецЕсли;
	                            Конецесли;
								
								Если ЗначениеЗаполнено(НСтр[0].Цена/КолКМ) Тогда
											Чтен.ЗаписатьИмяСвойства("product_cost");
											Цена=Окр(НСтр[0].Цена/КолКМ*100,2);
											//Если Цел(Цена)=Цена Тогда
												чтен.ЗаписатьЗначение(Цена*100);
											//Иначе
											//	чтен.ЗаписатьЗначение(Цена);
											//КонецЕсли;
											
										КонецЕсли;
								
								Чтен.ЗаписатьКонецОбъекта();

								
								
							Конеццикла;;
							ЕстьУпаковка=Истина;
							Прервать;
						КонецЕсли;
						
						
						
					Конеццикла;
					
					//Если ЕстьУпаковка=Ложь тогда
					//	Сообщить("Для упаковки "+Стр_1.cis+" нет КМ ");
					//	Возврат Неопределено;
					//КонецЕсли;
					
				Иначе
					Чтен.ЗаписатьНачалоОбъекта();
				//	Чтен.ЗаписатьИмяСвойства("uitu");
				///	чтен.ЗаписатьЗначение(Стр_1.cis);
				
					Чтен.ЗаписатьИмяСвойства("cis");
					чтен.ЗаписатьЗначение(Стр_1.cis);
	
											НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
		Если ЗначениеЗАполнено(НСтр[0].ВидПервичногоДокумента) Тогда
									
																Чтен.ЗаписатьИмяСвойства("document_type");
																Чтен.ЗаписатьЗначение(xmlString(НСтр[0].ВидПервичногоДокумента));
														 		Чтен.ЗаписатьИмяСвойства("document_date");
																Чтен.ЗаписатьЗначение(Формат(НСтр[0].ДатаПервичногоДокумента,"ДФ=""гггг-ММ-дд"""));
																Чтен.ЗаписатьИмяСвойства("document_number");
																Чтен.ЗаписатьЗначение(Формат(НСтр[0].НомерПервичногоДокумента,"ДФ=""гггг-ММ-дд"""));
																
																
																	Если ЗначениеЗаполнено(НСтр[0].НаименованиеПервичногоДокумента) тогда
											Чтен.ЗаписатьИмяСвойства("primary_document_custom_name");
											Чтен.ЗаписатьЗначение(НСтр[0].НаименованиеПервичногоДокумента);
										КонецЕсли;
									
									
								Иначе
					
														Чтен.ЗаписатьИмяСвойства("document_type");
														Чтен.ЗаписатьЗначение(xmlString(Объект.ВидПервичногоДокумента));
												 		Чтен.ЗаписатьИмяСвойства("document_date");
														Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПервичногоДокумента,"ДФ=""гггг-ММ-дд"""));
														Чтен.ЗаписатьИмяСвойства("document_number");
														Чтен.ЗаписатьЗначение(Формат(Объект.НомерПервичногоДокумента,"ДФ=""гггг-ММ-дд"""));
														
														
																				Если ЗначениеЗаполнено(Объект.НаименованиеПервичногоДокумента) тогда
												Чтен.ЗаписатьИмяСвойства("primary_document_custom_name");
												Чтен.ЗаписатьЗначение(Объект.НаименованиеПервичногоДокумента);
											КонецЕсли;
								Конецесли;		

					
					Если ЗначениеЗАполненО(НСтр[0].Цена) Тогда
								Чтен.ЗаписатьИмяСвойства("product_cost");
								Цена=НСтр[0].Цена;
								//Если Цена=Цел(Цена) Тогда
									чтен.ЗаписатьЗначение(Цена*100);
								//Иначе
								//	чтен.ЗаписатьЗначение(Цена);
									
								//КонецЕсли;
								
							КонецЕсли;
					
					Чтен.ЗаписатьКонецОбъекта();
					КонецЕсли;
			КонецЕсли;
		//	Конеццикла;
			
	      Конеццикла;
		
			    чтен.ЗаписатьКонецМассива();
		Чтен.ЗаписатьКонецОбъекта();
				
			Текст=Чтен.Закрыть();
//	     МассивФайлов.Добавить(Новый Структура("Текст,Идентификатор",Текст,Стр.ПолучитьИдентификатор()));
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
	// Конеццикла;
	 //КонецЕсли;
	
	Возврат Текст;
	
	
КонецФункции


&НаКлиенте
Процедура ОтправитьВыводИзОборота(УжеОтправили=Ложь,Thumbprint_1)
	

		
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	
	Если не ЗначениеЗаполнено(Срегистра) тогда
			Возврат
		Конецесли;

	СформироватьФайлДляОтправки_1=НаСервереФормируемвыводизОборот(Thumbprint_1,"");
	
	Если Не ЗначениеЗаполненО(СформироватьФайлДляОтправки_1) Тогда
		 Возврат;
	КонецЕсли;
	
	СформироватьФайлДляОтправки_3=СформироватьФайлДляОтправки_1;
//	НеПрошлаПроверка21(СформироватьФайлДляОтправки);
//Для Каждого СформироватьФайлДляОтправки_3 ИЗ СформироватьФайлДляОтправки_1 Цикл
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки_3,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
	
	//Подписанный="";
	//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
	//			Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
	//		Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
	//		Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	
	
	//Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
	//			Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
	//		Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
	//		Добав=СтрЗаменить(Добав,"\r\n","");

	Тело=СформироватьФайлДляОтправки;
		АдресРаздробить=Thumbprint_1.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
		
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
			
			
			
			Подписанный="";
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
		
		
		//Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

				
		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1,Подписанный,Истина);
		
		//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//Подписанный,КодировкаТекста.UTF8,Ложь));
		
					Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
				Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
				 Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				
		Тело="{
		|""product_document"":"""+Добав+""",
		|""document_format"": ""MANUAL"",";
		
		//Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота") Тогда	
			Тело=Тело+"
			|""type"":""LK_RECEIPT"",";
	//		Тело=Тело+"
	//		|""ProductGroup"":""shoes"",";
			
			//|}";
			
		//КонецЕсли;
		Тело=Тело+"
		|""signature"":"""+Подписанный+"""}";
		
		      //ЗапишемВРегистр(Тело);
		
	Если ОбработкаWEBНаСервере Тогда
		Если НЕ ЗагрузканаСервереОтправитьЗаявку(Thumbprint_1,СРегистра,УжеОтправили,Тело) Тогда
				Если УжеОтправили=Истина Тогда
				//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОтправитьВыводИзОборота(Истина,Thumbprint_1)			
		КонецЕсли
		
		КонецЕсли;
		
		
	Иначе
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
		Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотИмпорт") Тогда
			что=Thumbprint_1.что;
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/import/send?pg="+Что);
			//HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/import/send");
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборот") Тогда
			что=Thumbprint_1.что;
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/send?pg="+Что);
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота") 
			ИЛИ Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНужд") 
		//	ИЛИ Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНуждПокупателем")
			Тогда
			что=Thumbprint_1.что;
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/receipt/send?pg="+Что);
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.МаркировкаОстатков") Тогда
			
			
			что=Thumbprint_1.что;

			
			//Если	 Thumbprint_1.НаименованиеСтенда="Обувь" Тогда
			//	HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg=shoes");
			//Иначе
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg="+Что);
				
			//КонецЕсли;
		
		КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		
		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Ответ(Текст1);
		КонецЕсли;
			
		
	
	
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
		ИЛИ Ответ.КодСостояния=201 
		Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			Объект._Order_ID=Текст1;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОтправитьВыводИзОборота(Истина,Thumbprint_1)			
			КонецЕсли
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	   КонецЕсли;
	ЭтаФорма.Записать();

	
КонецПроцедуры

Функция СформироватьВозвратИзРозницы()
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("documentType");
	Чтен.ЗаписатьЗначение("RETAIL_RETURN");
	Чтен.ЗаписатьИмяСвойства("return_type");
	Чтен.ЗаписатьЗначение("RETAIL_RETURN");
	Чтен.ЗаписатьИмяСвойства("trade_participant_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	
	
	
	Если ЗначениеЗаполнено(Объект.ДокументПодтверждения) Тогда
		Чтен.ЗаписатьИмяСвойства("certificate_date");
		Чтен.ЗаписатьЗначение(Формат(Объект.ДокументПодтверждения.ДатаНачалаДействия,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
		
		Чтен.ЗаписатьИмяСвойства("certificate_number");
		Чтен.ЗаписатьЗначение(Объект.ДокументПодтверждения.Наименование);
		
		Чтен.ЗаписатьИмяСвойства("certificate_type");
		Если Объект.ДокументПодтверждения.ЭтоСертификат Тогда
			Чтен.ЗаписатьЗначение("CONFORMITY_CERTIFICATE");
		Иначе
			Чтен.ЗаписатьЗначение("CONFORMITY_DECLARATION");
			
		КонецЕсли;
	КонецЕсли;
	
	Чтен.ЗаписатьИмяСвойства("primary_document_date");
	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПервичногоДокумента,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
	
	
	Чтен.ЗаписатьИмяСвойства("primary_document_number");
	Чтен.ЗаписатьЗначение(Объект.НомерПервичногоДокумента);
	
	Чтен.ЗаписатьИмяСвойства("primary_document_type");
	Чтен.ЗаписатьЗначение(xmlString(Объект.ВидПервичногоДокумента));
	
	Если Объект.ВидПервичногоДокумента=Перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ.OTHER Тогда
			Чтен.ЗаписатьИмяСвойства("primary_document_custom_name");
			Чтен.ЗаписатьЗначение(Объект.НаименованиеПервичногоДокумента);

		
	Конецесли;
	
		
	Чтен.ЗаписатьИмяСвойства("products_list");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		Чтен.ЗаписатьИмяСвойства("tnved_code");
		Чтен.ЗаписатьЗначение(НСТР.КодТНВЭД.Код);
		
		Если ЗначениеЗаполнено(НСтр.ДекларацияИлиСертификатСоответствия) тогда
			Чтен.ЗаписатьИмяСвойства("certificate_type");
			
			Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
				Чтен.ЗаписатьЗначение("CONFORMITY_CERTIFICATE");
			Иначе
				Чтен.ЗаписатьЗначение("CONFORMITY_DECLARATION");
			КонецЕсли;
			Чтен.ЗаписатьИмяСвойства("certificate_number");
			Чтен.ЗаписатьЗначение(НСтр.ДекларацияИлиСертификатСоответствия.Наименование);
			Чтен.ЗаписатьИмяСвойства("certificate_date");
			Чтен.ЗаписатьЗначение(Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
			//Чтен.ЗаписатьКонецОбъекта();;

			//Чтен.ЗаписатьИмяСвойства("primary_document_custom_name");
			
			//Чтен.ЗаписатьЗначение("Кассовый чек");
			
	Чтен.ЗаписатьИмяСвойства("primary_document_type");
		Чтен.ЗаписатьЗначение(xmlString(Объект.ВидПервичногоДокумента));
			
			Чтен.ЗаписатьИмяСвойства("primary_document_number");
			Чтен.ЗаписатьЗначение(Объект.НомерПервичногоДокумента);
			Чтен.ЗаписатьИмяСвойства("primary_document_date");
			Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПервичногоДокумента,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
			
		Если Объект.ВидПервичногоДокумента=Перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ.OTHER Тогда
			Чтен.ЗаписатьИмяСвойства("primary_document_custom_name");
			Чтен.ЗаписатьЗначение(Объект.НаименованиеПервичногоДокумента);

		
	Конецесли;
	
			
			
		КонецЕсли;
		//Чтен.ЗаписатьИмяСвойства("cost");
		//чтен.ЗаписатьЗначение(НСтр.Цена);
		//Чтен.ЗаписатьИмяСвойства("vat_value");
		//чтен.ЗаписатьЗначение(НСтр.суммаНДС);
		
		Если СтрДлина(Стр.cis)<19 Тогда
			Чтен.ЗаписатьИмяСвойства("kitu");
		Иначе
			Чтен.ЗаписатьИмяСвойства("ki");
		КонецЕсли;
		Чтен.ЗаписатьЗначение(Стр.cis);
		Чтен.ЗаписатьКонецОбъекта();;
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	Возврат Текст;
	
КонецФункции


Функция СформироватьВозвратИзРозницы_Дистиционка()
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("documentType");
	Чтен.ЗаписатьЗначение("REMOTE_SALE_RETURN");
	Чтен.ЗаписатьИмяСвойства("return_type");
	Чтен.ЗаписатьЗначение("REMOTE_SALE_RETURN");
	Чтен.ЗаписатьИмяСвойства("trade_participant_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	
	
	//Если Объект.Тип
	Чтен.ЗаписатьИмяСвойства("paid");
	Чтен.ЗаписатьЗначение(Объект.ОплаченПокупателем);
	
	Если Объект.ОплаченПокупателем Тогда
		Чтен.ЗаписатьИмяСвойства("primary_document_date");
		Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПервичногоДокумента,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
		
		Если Объект.ВидПервичногоДокумента=Перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ.OTHER Тогда
			Чтен.ЗаписатьИмяСвойства("primary_document_custom_name");
			Чтен.ЗаписатьЗначение(Объект.НаименованиеПервичногоДокумента);
		КонецЕсли;
		
			Чтен.ЗаписатьИмяСвойства("primary_document_number");
			Чтен.ЗаписатьЗначение(Объект.НомерПервичногоДокумента);
		
		Чтен.ЗаписатьИмяСвойства("primary_document_type");
			Чтен.ЗаписатьЗначение(xmlString(Объект.ВидПервичногоДокумента));
	КонецЕсли;
		
	Чтен.ЗаписатьИмяСвойства("products_list");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		Чтен.ЗаписатьИмяСвойства("tnved_code");
		Чтен.ЗаписатьЗначение(НСТР.КодТНВЭД.Код);
		
		Если ЗначениеЗаполнено(НСтр.ДекларацияИлиСертификатСоответствия) тогда
			Чтен.ЗаписатьИмяСвойства("certificate_type");
			
			Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
				Чтен.ЗаписатьЗначение("CONFORMITY_CERTIFICATE");
			Иначе
				Чтен.ЗаписатьЗначение("CONFORMITY_DECLARATION");
			КонецЕсли;
			Чтен.ЗаписатьИмяСвойства("certificate_number");
			Чтен.ЗаписатьЗначение(НСтр.ДекларацияИлиСертификатСоответствия.Наименование);
			Чтен.ЗаписатьИмяСвойства("certificate_date");
			Чтен.ЗаписатьЗначение(Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
			//Чтен.ЗаписатьКонецОбъекта();;

			//Чтен.ЗаписатьИмяСвойства("primary_document_custom_name");
			
			//Чтен.ЗаписатьЗначение("Кассовый чек");
			
		Чтен.ЗаписатьИмяСвойства("primary_document_type");
		Чтен.ЗаписатьЗначение(xmlString(Объект.ВидПервичногоДокумента));
		
		Если Объект.ВидПервичногоДокумента=Перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ.OTHER Тогда
			Чтен.ЗаписатьИмяСвойства("primary_document_custom_name");
			Чтен.ЗаписатьЗначение(Объект.НаименованиеПервичногоДокумента);
		КонецЕсли;
		
		
			Чтен.ЗаписатьИмяСвойства("primary_document_number");
			Чтен.ЗаписатьЗначение(Объект.НомерПервичногоДокумента);
			Чтен.ЗаписатьИмяСвойства("primary_document_date");
			Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПервичногоДокумента,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
			
			
		КонецЕсли;
		//Чтен.ЗаписатьИмяСвойства("cost");
		//чтен.ЗаписатьЗначение(НСтр.Цена);
		//Чтен.ЗаписатьИмяСвойства("vat_value");
		//чтен.ЗаписатьЗначение(НСтр.суммаНДС);
		
		Если СтрДлина(Стр.cis)<19 Тогда
			Чтен.ЗаписатьИмяСвойства("kitu");
		Иначе
			Чтен.ЗаписатьИмяСвойства("ki");
		КонецЕсли;
		Чтен.ЗаписатьЗначение(Стр.cis);
		Чтен.ЗаписатьКонецОбъекта();;
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	Возврат Текст;
	
КонецФункции


Функция СформироватьXmlФайлВводКонтракт()
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	
	Если Собственник=0 Тогда
		Чтен.ЗаписатьИмяСвойства("producer_inn");
		Чтен.ЗаписатьЗначение(Объект.Производитель.ИНН);
		Чтен.ЗаписатьИмяСвойства("owner");
		Чтен.ЗаписатьЗначение(Ложь);
		Чтен.ЗаписатьИмяСвойства("producer");
		Чтен.ЗаписатьЗначение(Истина);
	Иначе
		Чтен.ЗаписатьИмяСвойства("producer_inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		Чтен.ЗаписатьИмяСвойства("owner");
		Чтен.ЗаписатьЗначение(Истина);
		Чтен.ЗаписатьИмяСвойства("producer");
		Чтен.ЗаписатьЗначение(Ложь);
		
	КонецЕсли;
		Чтен.ЗаписатьИмяСвойства("owner_inn");
		Чтен.ЗаписатьЗначение(Объект.Собственник.ИНН);
		
	Если ЗначениеЗаполнено(Объект.ДатаПроизводства) Тогда
		Чтен.ЗаписатьИмяСвойства("production_date");
		Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд"""));
	КонецЕсли;
	
	Чтен.ЗаписатьИмяСвойства("production_order");
	Чтен.ЗаписатьЗначение("CONTRACT_PRODUCTION");
	
	
	Чтен.ЗаписатьИмяСвойства("products_list");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		Если ЗначениеЗаполнено(Нстр.ДатаПроизводства) Тогда
			Чтен.ЗаписатьИмяСвойства("production_date");
			Чтен.ЗаписатьЗначение(Формат(НСтр.ДатаПроизводства,"ДФ=""гггг-ММ-дд"""));
		ИначеЕсли ЗначениеЗаполнено(Объект.ДатаПроизводства) Тогда
			Чтен.ЗаписатьИмяСвойства("production_date");
			Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд"""));

		КонецЕсли;
		
		
		
		Если Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Молоко" Тогда
			Если Стр.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
				Чтен.ЗаписатьИмяСвойства("uitu_code");
				Чтен.ЗаписатьЗначение(Стр.cis);
				
				Для Каждого стр_1 Из ДеревоКМ.ПолучитьЭлементы() Цикл
					
					если Стр.cis=Стр_1.cis Тогда
						
						Чтен.ЗаписатьИмяСвойства("children");
						Чтен.ЗаписатьНачалоМассива();
						
						
						РекурсияУпаковок_Молоко(Стр_1,Чтен,Нстр);
						
						Чтен.ЗаписатьКонецМассива();
			
						
					Конецесли;
					
					
				конеццикла;
				
				
			Иначе
				Чтен.ЗаписатьИмяСвойства("uit_code");
				Чтен.ЗаписатьЗначение(Стр.cis);
			КонецЕсли;
			
		Иначе
			Если Стр.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
				Чтен.ЗаписатьИмяСвойства("uitu_code");
			Иначе
				Чтен.ЗаписатьИмяСвойства("uit_code");
			КонецЕсли;
			Чтен.ЗаписатьЗначение(Стр.cis);
		Конецесли;
		
		
		//Если Стр.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
		//	Чтен.ЗаписатьИмяСвойства("uitu");
		//Иначе
		//	Чтен.ЗаписатьИмяСвойства("uit");
		//КонецЕсли;
		//Чтен.ЗаписатьЗначение(Стр.cis);
		Чтен.ЗаписатьИмяСвойства("tnved_code");
		Чтен.ЗаписатьЗначение(НСТР.КодТНВЭД.Код);
		Чтен.ЗаписатьИмяСвойства("producer_inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		
//		Если ЗначениеЗаполнено(Объект.ДатаПроизводства) Тогда

//			Чтен.ЗаписатьИмяСвойства("production_date");
//			Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд"""));
//		КонецЕсли;
			
	//	Чтен.ЗаписатьИмяСвойства("owner_inn");
	//	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		Чтен.ЗаписатьИмяСвойства("certificate_doc_type");
		
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Чтен.ЗаписатьЗначение("CONFORMITY_CERT");
		Иначе
			Чтен.ЗаписатьЗначение("CONFORMITY_DECLAR");
		КонецЕсли;
		Чтен.ЗаписатьИмяСвойства("certificate_doc_number");
		Чтен.ЗаписатьЗначение(НСтр.ДекларацияИлиСертификатСоответствия.Наименование);
		Чтен.ЗаписатьИмяСвойства("certificate_doc_date");
		Чтен.ЗаписатьЗначение(Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
		Если ЗначениеЗаполнено(НСтр.НомерВСД) Тогда
			Чтен.ЗаписатьИмяСвойства("vsd_number");
		
			Чтен.ЗаписатьЗначение(НСтр.НомерВСД);
		Конецесли;
		
		Чтен.ЗаписатьКонецОбъекта();;
		

		
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	Возврат Текст;
	

Конецфункции

&НаКлиенте
Процедура ОтправитьВводВОборотФармацевтика(Thumbprint_1)
	
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
	//ТипЗнч(СформироватьФайлДляОтправки_1)=Тип("Массив") тогда
		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
		
		
		Если не ЗначениеЗаполнено(Срегистра) тогда
			Возврат
		Конецесли;

	СформироватьФайлДляОтправки_1=НаСервереФормируемОтчетОбИспользовании(Thumbprint_1,СРегистра,Истина);
		
		//Сч=0;
		//Для Каждого Стр_1 Из Объект.Товары Цикл
			
			СформироватьФайлДляОтправки=СформироватьФайлДляОтправки_1;
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
		
		
		//Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

				
				Подписанный="";
		//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
		//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл_ЛДМП(СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Ложь);
			Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1,Подписанный,Истина);
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл_ЛДМП(СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Ложь);
				
				
			КонецЕсли;
		
		//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//Подписанный,КодировкаТекста.UTF8,Ложь));
		
					Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
				Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
				 Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("document");
	Чтен.ЗаписатьЗначение(Добав);
	Чтен.ЗаписатьИмяСвойства("sign");
	Чтен.ЗаписатьЗначение(Подписанный);
	Чтен.ЗаписатьИмяСвойства("request_id");
	Чтен.ЗаписатьЗначение(ВернутьУНИКУМ());
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();
	
				 
				 
		//Тело="{
		//|""doc_type"":""311"",
		//|""document"":"""+Добав+""",
		//|""sign"":"""+Подписанный+""",
		//|""request_id"":"""+ВернутьУНИКУМ()+"
		//|}";
			
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/send");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		
	Если Ответ.КодСостояния=200 ИЛИ Ответ.КодСостояния=200  Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Объект._Order_ID=NNN.document_id;
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
				//НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
//				Объект._Order_ID=NNN.orderId;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Объект.ОшибкаОтправки=Текст1;
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;

		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Ответ(Текст1);
		КонецЕсли;
			
		
		
		
			
			
		///Конеццикла;
		
		 ЭтаФорма.Записать();
		 УправлениеВидимостью();
		
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.Записать();
	УправлениеВидимостью();
	
	
КонецПроцедуры
Функция ФормируетВыводИзОБорота(Thumbprint_1,session_ui,ВводВОборот=Ложь)
	
	
	Если Объект.СерийныеНомера.Количество()=0 Тогда
		Возврат "";
	КонецЕсли;
	//МассивФайлов=Новый Массив;
//Для Каждого Стр Из Объект.Товары Цикл
	
	
	//МассивТекстов=Новый Массив;

		//Текст = Сформировать311_XSD(session_ui,НСтрок);
		
		
		
	Если Объект.РозничнаяПродажаФармацевтика Тогда
		Чтение=Новый ЗаписьXML;
		Чтение.УстановитьСтроку("UTF-8");
		Чтение.ЗаписатьОбъявлениеXML();
		Чтение.ЗаписатьНачалоЭлемента("documents");
		Чтение.ЗаписатьАтрибут("version","1.36");
		
		Чтение.ЗаписатьНачалоЭлемента("retail_sale");
		Чтение.ЗаписатьАтрибут("action_id","511");
		Чтение.ЗаписатьНачалоЭлемента("subject_id");
		Чтение.ЗаписатьТекст(Объект.Договор.РегистрационныйНомер);
		Чтение.ЗаписатьКонецЭлемента();
		Чтение.ЗаписатьНачалоЭлемента("operation_date");
		//Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
			
			//Время=ПолучитьЧасовойПоясИнформационнойБазы();
			
			Прибавка="Z";
			Если ЗначениеЗаполнено(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств) тогда
				Прибавка=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств,2,"0");
				Если Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств>0 Тогда
					     Прибавка="+"+Прибавка+":00";
				Иначе
					     Прибавка="-"+Прибавка+":00";
				Конецесли;
			Конецесли;
			
			Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+Прибавка);
	//Иначе
	//		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"Z");
		
	//	конецесли;
		
		Чтение.ЗаписатьКонецЭлемента();
		
		
		Чтение.ЗаписатьНачалоЭлемента("sales");
		
		Чтение.ЗаписатьНачалоЭлемента("union");
		
				
	//	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));

		Для Каждого Стр_c Из Объект.СерийныеНомера Цикл
			Чтение.ЗаписатьНачалоЭлемента("detail");
			Штрих=Стр_c.cis;
			
			Чтение.ЗаписатьНачалоЭлемента("sgtin");
			
			Если Сред(Штрих,1,2)="01" Тогда
				Штрих=Сред(Штрих,3,14)+Сред(Штрих,19);
			КонецЕслИ;
			
			Чтение.ЗаписатьТекст(Штрих);
			Чтение.ЗаписатьКонецЭлемента();
			
			НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_c.НомерСтрокиСвязи));
			Если НСтр.Количество()=0 Тогда
				Чтение.ЗаписатьНачалоЭлемента("cost");
				Чтение.ЗаписатьТекст("0");
				Чтение.ЗаписатьКонецЭлемента();
				
				Чтение.ЗаписатьНачалоЭлемента("vat_value");
				Чтение.ЗаписатьТекст(xmlString(0));
				Чтение.ЗаписатьКонецЭлемента();
				
				Чтение.ЗаписатьКонецЭлемента();
				Продолжить;
			Конецесли;		

			НСтр=НСтр[0];
			
			Чтение.ЗаписатьНачалоЭлемента("cost");
			Чтение.ЗаписатьТекст(xmlString(НСтр.Цена));
			Чтение.ЗаписатьКонецЭлемента();
			
			//Если ЗначениеЗаполнено(НСтр.суммаНДС) Тогда
				Чтение.ЗаписатьНачалоЭлемента("vat_value");
				Чтение.ЗаписатьТекст(xmlString(НСтр.суммаНДС));
				Чтение.ЗаписатьКонецЭлемента();
			//Конецесли;
			
			
			
			
			Чтение.ЗаписатьКонецЭлемента();
			
		Конеццикла;
		
		Чтение.ЗаписатьНачалоЭлемента("sale_docs");
		
			Чтение.ЗаписатьНачалоЭлемента("doc_type");
			Чтение.ЗаписатьТекст(Сред(xmlString(Объект.ВидДокументаЧекФармацевтика),2));
			Чтение.ЗаписатьКонецЭлемента();
			
			Если ЗначениеЗаполнено(Объект.НаименованиеПервичногоДокумента) тогда
				Чтение.ЗаписатьНачалоЭлемента("doc_name");
				Чтение.ЗаписатьТекст(Объект.НаименованиеПервичногоДокумента);
				Чтение.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
			Чтение.ЗаписатьНачалоЭлемента("doc_number");
			Чтение.ЗаписатьТекст(Объект.НомерПервичногоДокумента);
			Чтение.ЗаписатьКонецЭлемента();
			
			
			Чтение.ЗаписатьНачалоЭлемента("doc_date");
			Чтение.ЗаписатьТекст(Формат(Объект.ДатаПервичногоДокумента,"ДФ=дд.ММ.гггг"));
			Чтение.ЗаписатьКонецЭлемента();
			
		Чтение.ЗаписатьКонецЭлемента();
		
		
		
		
		
		Чтение.ЗаписатьКонецЭлемента();
		Чтение.ЗаписатьКонецЭлемента();
		Чтение.ЗаписатьКонецЭлемента();
		Чтение.ЗаписатьКонецЭлемента();
		
		
		Текст=Чтение.Закрыть();
	//	МассивТекстов.Добавить(Текст);
		 	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр(Текст);
		КонецЕсли;
		
		Возврат Текст;
		
		
	Иначе	
		Чтение=Новый ЗаписьXML;
		Чтение.УстановитьСтроку("UTF-8");
		Чтение.ЗаписатьОбъявлениеXML();
		Чтение.ЗаписатьНачалоЭлемента("documents");
		Чтение.ЗаписатьАтрибут("version","1.35");
		
		Чтение.ЗаписатьНачалоЭлемента("withdrawal");
		Чтение.ЗаписатьАтрибут("action_id","552");
		Чтение.ЗаписатьНачалоЭлемента("subject_id");
		Чтение.ЗаписатьТекст(Объект.Договор.РегистрационныйНомер);
		Чтение.ЗаписатьКонецЭлемента();
		Чтение.ЗаписатьНачалоЭлемента("operation_date");
//		Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
			
			//Время=ПолучитьЧасовойПоясИнформационнойБазы();
			Прибавка="Z";
			Если ЗначениеЗаполнено(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств) тогда
				Прибавка=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств,2,"0");
				Если Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств>0 Тогда
					     Прибавка="+"+Прибавка+":00";
				Иначе
					     Прибавка="-"+Прибавка+":00";
				Конецесли;
			Конецесли;
			
			
			Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+Прибавка);
//		Иначе
//			Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"Z");
		
//		конецесли;
		
		Чтение.ЗаписатьКонецЭлемента();
		
		//Чтение.ЗаписатьНачалоЭлемента("release_info");
		Если ЗначениеЗаполнено(Объект.НомерПервичногоДокумента) тогда
			Чтение.ЗаписатьНачалоЭлемента("doc_num");
			Чтение.ЗаписатьТекст(Объект.НомерПервичногоДокумента);
			Чтение.ЗаписатьКонецЭлемента();
		Конецесли;
		Если ЗначениеЗАполнено(Объект.ДатаПервичногоДокумента) тогда
			Чтение.ЗаписатьНачалоЭлемента("doc_date");
			Чтение.ЗаписатьТекст(Формат(Объект.ДатаПервичногоДокумента,"ДФ=дд.ММ.гггг"));
			Чтение.ЗаписатьКонецЭлемента();
		Конецесли;
		
		Чтение.ЗаписатьНачалоЭлемента("withdrawal_type");
		Чтение.ЗаписатьТекст(Сред(xmlString(Объект.ТипВыводаИзОборотаФармацевтика),2));
		Чтение.ЗаписатьКонецЭлемента();
		
		
		Чтение.ЗаписатьНачалоЭлемента("order_details");
		
	//	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));

		Для Каждого Стр_c Из Объект.СерийныеНомера Цикл
			Штрих=Стр_c.cis;
			Если СтрДлина(Штрих)=18 Тогда
				Чтение.ЗаписатьНачалоЭлемента("sscc");
			Иначе
				Чтение.ЗаписатьНачалоЭлемента("sgtin");
			КонецЕсли;
			
			Если Сред(Штрих,1,2)="01" Тогда
				Штрих=Сред(Штрих,3,14)+Сред(Штрих,19);
			КонецЕслИ;
			
			Чтение.ЗаписатьТекст(Штрих);
			Чтение.ЗаписатьКонецЭлемента();
			
			  
			
		Конеццикла;
		Чтение.ЗаписатьКонецЭлемента();
		Чтение.ЗаписатьКонецЭлемента();
		Чтение.ЗаписатьКонецЭлемента();
		
		
		Текст=Чтение.Закрыть();
	//	МассивТекстов.Добавить(Текст);
		 	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр(Текст);
		КонецЕсли;
		
		Возврат Текст;
		
		
	КонецЕсли;
	
	
	
	Для Каждого Стр_1 Из Объект.Товары Цикл
		
		НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));

		//Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));

		//Текст = Сформировать311_XSD(session_ui,НСтрок);
		
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("documents");
	Чтение.ЗаписатьАтрибут("version","1.35");
	
	Чтение.ЗаписатьНачалоЭлемента("register_end_packing");
	Чтение.ЗаписатьАтрибут("action_id","313");
	Чтение.ЗаписатьНачалоЭлемента("subject_id");
	Чтение.ЗаписатьТекст(Объект.Организация.subjectIdФармацевтика);
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьНачалоЭлемента("operation_date");
	Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"00:00");
	Чтение.ЗаписатьКонецЭлемента();
	
	
	
	
	
	Чтение.ЗаписатьНачалоЭлемента("signs");
//	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));

	Для Каждого Стр_c Из НСтрок Цикл
		Чтение.ЗаписатьНачалоЭлемента("sgtin");
		
		Штрих=Стр_c.cis;
		Штрих=Сред(Штрих,3,14)+Сред(Штрих,19);
		
		Чтение.ЗаписатьТекст(Штрих);
		Чтение.ЗаписатьКонецЭлемента();
		
		  
		
	Конеццикла;
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Текст=Чтение.Закрыть();
	//МассивТекстов.Добавить(Текст);
	 	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
		
		
		
		Продолжить;
		
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("documents");
	Чтение.ЗаписатьАтрибут("version","1.35");
	
	Чтение.ЗаписатьНачалоЭлемента("register_end_packing");
	Чтение.ЗаписатьАтрибут("action_id","311");
	Чтение.ЗаписатьНачалоЭлемента("subject_id");
	Чтение.ЗаписатьТекст(Объект.Организация.subjectIdФармацевтика);
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьНачалоЭлемента("operation_date");
	Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"00:00");
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьНачалоЭлемента("order_type");
	Чтение.ЗаписатьТекст("1");
	Чтение.ЗаписатьКонецЭлемента();
	//
	Чтение.ЗаписатьНачалоЭлемента("series_number");
	Чтение.ЗаписатьТекст("1");
	Чтение.ЗаписатьКонецЭлемента();
	//
	Чтение.ЗаписатьНачалоЭлемента("expiration_date");
	Чтение.ЗаписатьТекст(Формат(Стр_1.Годендо,"ДФ=""дд.ММ.гггг"""));
	Чтение.ЗаписатьКонецЭлемента();
	//
	Чтение.ЗаписатьНачалоЭлемента("gtin");
	Чтение.ЗаписатьТекст(ДополнитьСтроку(xmlString(Стр_1.gtin.gtin)));
	Чтение.ЗаписатьКонецЭлемента();
	//
	Чтение.ЗаписатьНачалоЭлемента("signs");
//	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));

	Для Каждого Стр_c Из НСтрок Цикл
		Чтение.ЗаписатьНачалоЭлемента("sgtin");
		
		Штрих=Стр_c.cis;
		Штрих=Сред(Штрих,3,14)+Сред(Штрих,19);
		
		Чтение.ЗаписатьТекст(Штрих);
		Чтение.ЗаписатьКонецЭлемента();
		
		  
		
	Конеццикла;
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Текст=Чтение.Закрыть();
	//МассивТекстов.Добавить(Текст);
	 	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
Конеццикла;
	//Возврат МассивТекстов
	
	Возврат Текст;
	
	
КонецФункции



&НаКлиенте
Процедура ОтправитьВыводИзОборотаФармацевтика(Thumbprint_1)
	
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
	//ТипЗнч(СформироватьФайлДляОтправки_1)=Тип("Массив") тогда
		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
		
		Если не ЗначениеЗаполнено(Срегистра) тогда
			Возврат
		Конецесли;

		СформироватьФайлДляОтправки_1=ФормируетВыводИзОБорота(Thumbprint_1,СРегистра,Истина);
		
		//Сч=0;
		//Для Каждого Стр_1 Из Объект.Товары Цикл
			
			СформироватьФайлДляОтправки=СформироватьФайлДляОтправки_1;
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
		
		
		//Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

				
				Подписанный="";
		//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
		//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл_ЛДМП(СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Ложь);
			Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1,Подписанный,Истина);
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл_ЛДМП(СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Ложь);
				
				
			КонецЕсли;
		
		//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//Подписанный,КодировкаТекста.UTF8,Ложь));
		
					Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
				Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
				 Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("document");
	Чтен.ЗаписатьЗначение(Добав);
	Чтен.ЗаписатьИмяСвойства("sign");
	Чтен.ЗаписатьЗначение(Подписанный);
	Чтен.ЗаписатьИмяСвойства("request_id");
	Чтен.ЗаписатьЗначение(ВернутьУНИКУМ());
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();
	
				 
				 
		//Тело="{
		//|""doc_type"":""311"",
		//|""document"":"""+Добав+""",
		//|""sign"":"""+Подписанный+""",
		//|""request_id"":"""+ВернутьУНИКУМ()+"
		//|}";
			
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/send");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		
	Если Ответ.КодСостояния=200 ИЛИ Ответ.КодСостояния=200  Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Объект._Order_ID=NNN.document_id;
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
				//НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
//				Объект._Order_ID=NNN.orderId;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Объект.ОшибкаОтправки=Текст1;
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
	КонецЕсли;

		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Ответ(Текст1);
		КонецЕсли;
			
		
		
		
			
			
		///Конеццикла;
		
		 ЭтаФорма.Записать();
		 УправлениеВидимостью();
		
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.Записать();
	УправлениеВидимостью();
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьИНН(Организация)
	Возврат Организация.ИНН
Конецфункции

&НаКлиенте
Процедура ОтправитьЗаявку_1(Команда)
	Если Объект.Проведен=ЛОжь Тогда
		Попытка
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		Исключение
		КонецПопытки;
	Конецесли;
	
	ПеренестиНомераВСД(Команда);
	ОтправитьЗаявку(Команда)
КонецПроцедуры

Функция СформироватьxmlТабак()

	Если Объект.СерийныеНомера.Количество()=0 Тогда
		Возврат "";
	КонецЕсли;
	//МассивФайлов=Новый Массив;
//Для Каждого Стр Из Объект.Товары Цикл
	
	
	//МассивТекстов=Новый Массив;

		//Текст = Сформировать311_XSD(session_ui,НСтрок);
		
		
		
	Если Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотИмпорт
			ИЛИ Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ИмпортСФТС
			Тогда
		Чтение=Новый ЗаписьXML;
		Чтение.УстановитьСтроку("UTF-8");
		Чтение.ЗаписатьОбъявлениеXML();
		Чтение.ЗаписатьНачалоЭлемента("Файл");
		Чтение.ЗаписатьАтрибут("ИмяФайла","import.xml");
		Чтение.ЗаписатьАтрибут("ВерсияФормата","1");
		Чтение.ЗаписатьАтрибут("ВерсияПрограммы","Хамелеон ЦРПТ");
		Чтение.ЗаписатьАтрибут("ТипДокумента","ДекларацияТоваров");
		
		Чтение.ЗаписатьНачалоЭлемента("ДекларацияТоваров");
		
		//Чтение.ЗаписатьНачалоЭлемента("ДатаРегистрации");
		Чтение.ЗаписатьАтрибут("ДатаРегистрации",Формат(Объект.ДатаДекларацииТовара,"ДФ=""гггг-ММ-дд"""));
		//Чтение.ЗаписатьКонецЭлемента();
		
		//Чтение.ЗаписатьНачалоЭлемента("РегистрационныйНомер");
		Чтение.ЗаписатьАтрибут("РегистрационныйНомер",Объект.НомерДекларацииТовара);
		//Чтение.ЗаписатьКонецЭлемента();
		
		//Чтение.ЗаписатьНачалоЭлемента("ДатаРешения");
		Чтение.ЗаписатьАтрибут("ДатаРешения",Формат(Объект.ДатаДекларацииТовара,"ДФ=""гггг-ММ-дд"""));
		//Чтение.ЗаписатьКонецЭлемента();
		
		//Чтение.ЗаписатьНачалоЭлемента("КодРешения");
		Чтение.ЗаписатьАтрибут("КодРешения",Объект.КодПринятогоРешения.Код);
		//Чтение.ЗаписатьКонецЭлемента();
		
		
		Чтение.ЗаписатьНачалоЭлемента("НаименованиеОрганизации");
		Чтение.ЗаписатьТекст(Объект.Организация.Наименование);
		Чтение.ЗаписатьКонецЭлемента();
		
		Чтение.ЗаписатьНачалоЭлемента("ИНН");
		Чтение.ЗаписатьТекст(Объект.Организация.ИНН);
		Чтение.ЗаписатьКонецЭлемента();
		
		
		
		Чтение.ЗаписатьНачалоЭлемента("КодТаможнОрг");
		Чтение.ЗаписатьТекст(Объект.КодТаможенногоОргана);
		Чтение.ЗаписатьКонецЭлемента();
		
		Для Каждого Стр_1 Из Объект.Товары Цикл
			НСтр=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи)) ;
			Для Каждого Стр_22 Из НСтр Цикл
			Чтение.ЗаписатьНачалоЭлемента("Товар");
			//Чтение.ЗаписатьТекст(Объект.КодТаможенногоОргана);
		    Чтение.ЗаписатьАтрибут("КодТНВЭД",Стр_1.GTIN.КодТНВЭД.Код);
		    Чтение.ЗаписатьАтрибут("СтранаПроизводства",Стр_1.GTIN.СтранаПроизводства.Альфа2);
		    Чтение.ЗаписатьАтрибут("НомерТовараВДт",xmlString(Стр_1.GTIN.GTIN));
		    //Чтение.ЗаписатьАтрибут("ТаможСтоимостьРублях",Формат(Стр_1.Цена*Стр_1.КоличествоКМ,"ЧЦ=10; ЧДЦ=2; ЧРД="".""; ЧГ="));
		    Чтение.ЗаписатьАтрибут("ТаможСтоимостьРублях",Формат(Стр_1.Цена,"ЧЦ=10; ЧДЦ=2; ЧРД="".""; ЧГ="));
		    Чтение.ЗаписатьАтрибут("ЦенаЕдиницыТовара",Формат(Стр_1.Цена,"ЧЦ=10; ЧДЦ=2; ЧРД="".""; ЧГ="));
		    Чтение.ЗаписатьАтрибут("Валюта",xmlString("RUB"));
		    Чтение.ЗаписатьАтрибут("КурсВалюты",xmlString("1"));
		    Чтение.ЗаписатьАтрибут("АкцизТабак",Формат(Стр_1.Акциз,"ЧЦ=10; ЧДЦ=2; ЧРД="".""; ЧГ="));
		    //Чтение.ЗаписатьАтрибут("НДС",Формат(Стр_1.СуммаНДС*Стр_1.КоличествоКМ,"ЧЦ=10; ЧДЦ=2; ЧРД="".""; ЧГ="));
		    Чтение.ЗаписатьАтрибут("НДС",Формат(Стр_1.СуммаНДС,"ЧЦ=10; ЧДЦ=2; ЧРД="".""; ЧГ="));
			
			Если ЗначениеЗаполнено(Стр_1.ДекларацияИлиСертификатСоответствия) Тогда
		//    	Чтение.ЗаписатьАтрибут("НомерРазрешительногоДокумента",Стр_1.ДекларацияИлиСертификатСоответствия.Наименование);
		  //  	Чтение.ЗаписатьАтрибут("ДатаРазрешительногоДокумента",Формат(Стр_1.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд"""));
			Конецесли;
			
			 	
			   Чтение.ЗаписатьНачалоЭлемента("Коды");
				//Чтение.ЗаписатьНачалоЭлемента("Код");
				cis=Стр_22.cis;
				Если Сред(cis,1,2)<>"01" 
									//ИЛИ 
									//Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак" 
									Тогда
										cis=Сред(cis,1,21);
										
									
					Иначе
									
										Если Сред(cis,17,2)="21" 
											И Сред(cis,1,3 )="010"
											Тогда
											cis=Сред(cis,1,25);
										КонецЕсли;
										Конецесли;
									
				
				Чтение.ЗаписатьТекст(cis);
				
				//Чтение.ЗаписатьТекст(Стр_22.cis);
				//Чтение.ЗаписатьКонецЭлемента();
			    Чтение.ЗаписатьКонецЭлемента();
				
				
			
			Чтение.ЗаписатьКонецЭлемента();
			Конеццикла;
			
		Конеццикла;
		
		Чтение.ЗаписатьКонецЭлемента();
		Чтение.ЗаписатьКонецЭлемента();
		
		Текст=Чтение.Закрыть();
	//МассивТекстов.Добавить(Текст);
	 Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	Конецесли;
	Возврат Текст;
	
	
Конецфункции

Функция НеобходимоПолучитьИд(Организация,ИНН="",ТестовыйРежим=Ложь)
	ИНН=Организация.ИНН;
	ТестовыйРежим=Константы.РежимРаботыХамелеонЦРПТ.Получить();
	Возврат не ЗначениеЗаполнено(Организация.Ид_ЭДО_ЦРПТ) 
	
КонецФункции


Функция ЧерезФайлДелаем(СформироВатьУПД,Boundary,ИмяВр_1,РазмерФайла)
	
		
			ВремФ=ПолучитьИмяВременногоФайла("xml");
				//ФайлЗапроса = Новый Файл(ВремФ);
				
				//Каталог = КаталогВременныхФайлов();
				ИмяВр = ВремФ;
		

				текст=Новый ТекстовыйДокумент;
				текст.ДобавитьСтроку(СформироВатьУПД);
				текст.Записать(ИмяВр,КодировкаТекста.UTF8);
				

	
				ИмяФайлаОтправкиНачало = ПолучитьИмяВременногоФайла("txt");
				
				
			    ФайлОтправкиНачало = Новый ЗаписьТекста(ИмяФайлаОтправкиНачало, КодировкаТекста.ANSI, Символы.ПС, Ложь);

	        	ФайлОтправкиНачало.ЗаписатьСтроку("--" + Boundary); 
				ФайлОтправкиНачало.ЗаписатьСтроку("Content-Disposition: form-data; name=""properties""; filename=""blob"""); 				
				ФайлОтправкиНачало.ЗаписатьСтроку("Content-Type: application/json"); 				
				ФайлОтправкиНачало.ЗаписатьСтроку("");
				//ФайлОтправкиНачало.ЗаписатьСтроку(СтрЗаменить(объект.Order_ID_УПД,"-","\u002D"));
				ФайлОтправкиНачало.ЗаписатьСтроку("{""document_type"":""IMPORT_NOTIFICATION"",""user_id"":"+Объект.Организация.Ид_ЭДО_ЦРПТ+",""organisation_inn"":"""+Объект.Организация.ИНН+"""}");
					
				ФайлОтправкиНачало.ЗаписатьСтроку("--" + Boundary); 
				ФайлОтправкиНачало.ЗаписатьСтроку("Content-Disposition: form-data; name=""file""; filename=""" +ИмяВр_1+ """"); 				
				ФайлОтправкиНачало.ЗаписатьСтроку("Content-Type: text/xml"); 				
			    ФайлОтправкиНачало.ЗаписатьСтроку("");
			  	ФайлОтправкиНачало.Закрыть();
				МассивФайловДляОбъединения = Новый Массив;
			    МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиНачало);

			    МассивФайловДляОбъединения.Добавить(ИмяВр);
				
				//Каталог = КаталогВременныхФайлов();
				///ИмяФайла = Строка(Новый УникальныйИдентификатор) + "2.txt";
				//ИмяФайлаОтправкиКонец = Каталог + ИмяФайла;

			    ИмяФайлаОтправкиКонец = ПолучитьИмяВременногоФайла("txt");
			    ФайлОтправкиКонец = Новый ЗаписьТекста(ИмяФайлаОтправкиКонец, КодировкаТекста.ANSI, Символы.ПС, Ложь);
				

			    //Завершение раздела двоичных данных
			    //Завершение сообщения для сервера
				//ФайлОтправкиКонец.ЗаписатьСтроку("");
			    
				//ФайлОтправкиКонец.ЗаписатьСтроку("");
			    ФайлОтправкиКонец.ЗаписатьСтроку("--" + Boundary + "--");
			    ФайлОтправкиКонец.Закрыть();
			    МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиКонец); // !!! 3 добавление в массив
				
				
				ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("tmp");//КаталогВременныхФайлов() + "post.txt";
				
				
			    ОбъединитьФайлы(МассивФайловДляОбъединения, ИмяФайлаОтправки);
				
				ДвоичнД=Новый ДвоичныеДанные(ИмяФайлаОтправки);
				РазмерФайла=ДвоичнД.Размер();
				Возврат ДвоичнД
				
КонецФункции


&НаКлиенте
Процедура ОтправитьДанныеПоТабаку(Thumbprint_1,УжеОтправили=Ложь)
	
	

	Если ЗначениеЗаполнено(Объект._Order_ID) Тогда
		Сообщить("Данный документ отправлен в ЦРПТ");
		Возврат; 
	Конецесли;
		
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	
		Если не ЗначениеЗаполнено(Срегистра) тогда
			Возврат
		Конецесли;
		
	СформироватьФайлДляОтправки_1=СформироватьxmlТабак();
	
	Если Не ЗначениеЗаполненО(СформироватьФайлДляОтправки_1) Тогда
		 Возврат;
	КонецЕсли;
	
			
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;  
		
		
		ТестовыйРежим=Ложь;
		ПолучитьИд=НеобходимоПолучитьИд(Объект.Организация,,ТестовыйРежим);
		СайтМаркирвки=Thumbprint_1.АдресДляПолученияТокена;
		Если ПолучитьИд Тогда
			
			  ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ЗаписатьИДЭДОВОрганизацию(Thumbprint_1,СайтМаркирвки,Срегистра,СерийныйНомер);
			
		КонецЕслИ;
		
		
	Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");

	РазмерФайла=0;
	ЧереФайл=ЧерезФайлДелаем(СформироватьФайлДляОтправки_1,Boundary,"import.xml",РазмерФайла);
	
	HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/doc/upload");
	
	HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ЧереФайл);
	
			HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
			HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
			HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
			HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
			//HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ +"/documents/incoming/list");
			
			HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(РазмерФайла,"ЧГ="));
			
			
			//HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");
			
			HTTPЗапрос.Заголовки.Вставить("Content-Type","multipart/form-data; boundary="+Boundary);
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
			HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
			HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
			
			
			
		//	Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
			Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
			"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


			HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
		
		//Тело="documentType=LP_ACCEPT_GOODS_XML";
	//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		 Текст1=Ответ.ПолучитьТелоКакСтроку();
		 
	Если Ответ.КодСостояния=200 ИЛИ Ответ.КодСостояния=201  Тогда
		 ПолучитьИнфу=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);
		 
		
		 Попытка
			 ПолучитьИнфу.Свойство("result",
			 Объект._Order_ID);
			 Если ЗначениеЗаполнено(Объект._Order_ID) Тогда
				 Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				Конецесли;
		 Исключение
			 
			 КонецПопытки;
			 Попытка
				 Если ПолучитьИнфу.errors.Количество()>0 Тогда
					 Сообщить("Не удалось отправить в ЦРПТ документ импорта");
				 	Для каждого стр_1 Из ПолучитьИнфу.errors Цикл
			 			Сообщить(стр_1);;
					Конеццикла;
				Конецесли;
		 Исключение
			 
		 КонецПопытки;
	 Иначе
		 СообщитЬ("Не удалось отпавить в ЦРПТ документ импорта ");
		Конецесли;
		
	ЭтаФорма.Записать();

КонецПроцедуры
&НаКлиенте
Процедура ОтправитьЗаявку(Команда,УжеОтправили=Ложь,Черновик=Ложь) Экспорт
	ЭтаФорма.Записать();
	
//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Обновитьста(Объект.Ссылка,Объект.ТекущийПользователь);
//Сери="";
//	Thumbprint_1=ПолучитьИзпользователя();	

//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусыДокументовСервер(Thumbprint_1,Объект.ТекущийПользователь,Сери);
//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОтправкаОтчетаОНанесении_ХамелеонЦРПТ(Объект.ТекущийПользователь,Объект.Ссылка);
	
//	Возврат;
	
	Если Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован") 
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан") Тогда
		
		Возврат
	КонецЕсли;
	
	
	
	
	Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота")
		ИЛИ Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНужд")
		Тогда
		ЕстьНомерКороба=Ложь;
		Для Каждого Стр Из Объект.СерийныеНомера Цикл
			Если Стр.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка") Тогда
				 ЕстьНомерКороба=Истина;
			КонецЕсли;
			
		Конеццикла;
		Если ЕстьНомерКороба=Истина Тогда
			Если ДеревоКМ.ПолучитьЭлементы().Количество()=0 Тогда
				ПоказатьИнформацию("");
			КонецЕсли;
		КонецЕслИ;
	КонецЕсли;
	

	ЭтаФорма.Записать();
	
	Если НЕ ПроверкаЗаполнения_1() Тогда
		Возврат;
	КонецЕсли;
	
	//Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.МаркировкаОстатков") ТОгда
	//	ОтправитьМаркировкуОстатков();
	//	Возврат;
	//Конецесли;

	
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	Этаформа.Записать();
	
	Если        Thumbprint_1.РасчетОстатков Тогда
		Подсчитать(Команда);
	КонецЕсли;
	
	Если Объект.ОтправлятьКМВместоАгрегаций Тогда
			Если ДеревоКМ.ПолучитьЭлементы().Количество()=0 Тогда
				ПоказатьИнформацию("");
			КонецЕсли;
	КонецЕсли;
	
	Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота")
		//ИЛИ Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНуждПокупателем")  \
		
		
		ТОгда
		Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
			ОтправитьВыводИзОборотаФармацевтика(Thumbprint_1);
			Возврат;
		КонецЕсли;
		
		
		ОтправитьВыводИзОборота(,Thumbprint_1);
		Возврат;
	Конецесли;
	
	Если 	Thumbprint_1.НаименованиеСтенда="Табак"
			ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
			Тогда
		ОтправитьДанныеПоТабаку(Thumbprint_1);
		Возврат;
	КонецЕсли;
	
	
	
	Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании") ТОгда
		ОтправитьОтчетОбИспользовании(Thumbprint_1);
		Возврат;
	Конецесли;
	
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
	Если Thumbprint_1.НаименованиеСтенда="Молоко" Тогда
		ПоказатьИнформацию(Команда,Истина);
	Конецесли;

	Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотИмпорт") Тогда
		СформироватьФайлДляОтправки=СформироватьXmlФайлИмпорт();
	Попытка
				//Если НеПрошлаПроверкаИмпорт(СформироватьФайлДляОтправки) Тогда
				//	Объект.Статус="Отказ";
				//	Объект.ОшибкаОтправки="Проверка документа не прошла по схеме xsd";
				//	ЭтаФорма.Записать();
					//ПоказатьПредупреждение("");
				//	Возврат;
					
				//КонецЕсли;
				
				
			Исключение
			КонецПопытки;                                                                 
	ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборот") Тогда
		Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
			ОтправитьВводВОборотФармацевтика(Thumbprint_1);
			Возврат;
		КонецЕсли;
		
			
		СформироватьФайлДляОтправки=СформироватьXmlФайлВвод();
	ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотКонтракт") Тогда
		СформироватьФайлДляОтправки=СформироватьXmlФайлВводКонтракт();
	ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.МаркировкаОстатков") Тогда	
		СформироватьФайлДляОтправки=СформироватьXmlФайлОстатков();
	ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВоборотТрансграничнаяТорговля") Тогда	
		СформироватьФайлДляОтправки=СформироватьТС();
	ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.НаТерриторииСтранЕАЭСКонтрактноеПроизводство") Тогда	
		СформироватьФайлДляОтправки=СформироватьТС_Контракт();
	ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотВозвратВРозницу") Тогда	
		СформироватьФайлДляОтправки=СформироватьВозвратИзРозницы();
	ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНужд") Тогда	
		СформироватьФайлДляОтправки=СформироватьВозвратИзРозницы_Дистиционка();
	ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ИмпортСФТС") Тогда
		СформироватьФайлДляОтправки=СформироватьXmlФайлИмпортФТС();
	
	//Попытка
	//			Если НеПрошлаПроверкаВвод(СформироватьФайлДляОтправки) Тогда
	//				Объект.Статус="Отказ";
	//				Объект.ОшибкаОтправки="Проверка документа не прошла по схеме xsd";
	//				ЭтаФорма.Записать();
	//				//ПоказатьПредупреждение("");
	//				Возврат;
	//				
	//			КонецЕсли;
				
				
	//		Исключение
	//		КонецПопытки;
	КонецЕсли;			
		Подписанный="";
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
		
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

				
		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1,Подписанный,Истина);
		
		//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//Подписанный,КодировкаТекста.UTF8,Ложь));
		
					Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
				Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
				 Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				 
	Если Черновик=Ложь И ЗначениеЗаполнено(Подписанный) тогда
		Тело="{
		|""product_document"":"""+Добав+""",
		|""document_format"": ""MANUAL"",";
		
		Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборот") Тогда	
			Тело=Тело+"
			|""type"":""LP_INTRODUCE_GOODS"",";
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.МаркировкаОстатков") Тогда	
			Тело=Тело+"
			|""type"":""LP_INTRODUCE_OST"",";
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВоборотТрансграничнаяТорговля") Тогда	
			Тело=Тело+"
			|""type"":""CROSSBORDER"",";
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.НаТерриторииСтранЕАЭСКонтрактноеПроизводство") Тогда	
			Тело=Тело+"
			|""type"":""LP_INTRODUCE_GOODS_CROSSBORDER_CSD"",";
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотВозвратВРозницу") 
			ИЛИ Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНужд") 
			Тогда	
			Тело=Тело+"
			|""type"":""LP_RETURN"",";
			
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотКонтракт") Тогда	

			Тело=Тело+"
			|""type"":""LK_CONTRACT_COMMISSIONING"",";
			
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ИмпортСФТС") Тогда	

			Тело=Тело+"
			|""type"":""LP_FTS_INTRODUCE"",";
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотИмпорт") Тогда	

			Тело=Тело+"
			|""type"":""LP_GOODS_IMPORT"",";
			
		КонецЕсли;
			Тело=Тело+"
			|""signature"":"""+Подписанный+"""}";
		Иначе
			
			
			
			
			
			
							
				Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотИмпорт") Тогда
						СформироватьФайлДляОтправки=СформироватьXmlФайлИмпорт_Черновик();
					Попытка
								//Если НеПрошлаПроверкаИмпорт(СформироватьФайлДляОтправки) Тогда
								//	Объект.Статус="Отказ";
								//	Объект.ОшибкаОтправки="Проверка документа не прошла по схеме xsd";
								//	ЭтаФорма.Записать();
									//ПоказатьПредупреждение("");
								//	Возврат;
									
								//КонецЕсли;
								
								
							Исключение
							КонецПопытки;                                                                 
					ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборот") Тогда
						Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
						//	ОтправитьВводВОборотФармацевтика(Thumbprint_1);
							Возврат;
						КонецЕсли;
							
							
						СформироватьФайлДляОтправки=СформироватьXmlФайлВвод_Черновик();
					ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотКонтракт") Тогда
						СформироватьФайлДляОтправки=СформироватьXmlФайлВводКонтракт();
					ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.МаркировкаОстатков") Тогда	
						СформироватьФайлДляОтправки=СформироватьXmlФайлОстатков();
					ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВоборотТрансграничнаяТорговля") Тогда	
						СформироватьФайлДляОтправки=СформироватьТС();
					ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.НаТерриторииСтранЕАЭСКонтрактноеПроизводство") Тогда	
						СформироватьФайлДляОтправки=СформироватьТС_Контракт();
					ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотВозвратВРозницу") Тогда	
						СформироватьФайлДляОтправки=СформироватьВозвратИзРозницы();
					ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНужд") Тогда	
						СформироватьФайлДляОтправки=СформироватьВозвратИзРозницы_Дистиционка();
					ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ИмпортСФТС") Тогда
						СформироватьФайлДляОтправки=СформироватьXmlФайлИмпортФТС_Черновик();
					
					//Попытка
					//			Если НеПрошлаПроверкаВвод(СформироватьФайлДляОтправки) Тогда
					//				Объект.Статус="Отказ";
					//				Объект.ОшибкаОтправки="Проверка документа не прошла по схеме xsd";
					//				ЭтаФорма.Записать();
					//				//ПоказатьПредупреждение("");
					//				Возврат;
					//				
					//			КонецЕсли;
								
								
					//		Исключение
					//		КонецПопытки;
					КонецЕсли;			
						Подписанный="";
						СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
						СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
						
						
			
			
			
			
			
			//СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,"\","\\");
			
			
			//СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,"""","\""");
			
			Чтен=Новый  ЗаписьJSON;
			Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
			Чтен.ЗаписатьНачалоОбъекта();
			Чтен.ЗаписатьИмяСвойства("document_body");
			Чтен.ЗаписатьЗначение(СформироватьФайлДляОтправки);
			
			
			Тело="{
		|""document_body"":"""+СформироватьФайлДляОтправки+""",";
		
		Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборот") Тогда	
			Чтен.ЗаписатьИмяСвойства("document_type");
			Чтен.ЗаписатьЗначение("LP_INTRODUCE_GOODS");
			
			Тело=Тело+"
			|""document_type"":""LP_INTRODUCE_GOODS"",";
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.МаркировкаОстатков") Тогда	
			Чтен.ЗаписатьИмяСвойства("document_type");
			Чтен.ЗаписатьЗначение("LP_INTRODUCE_OST");
			Тело=Тело+"
			|""document_type"":""LP_INTRODUCE_OST"",";
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВоборотТрансграничнаяТорговля") Тогда	
			Чтен.ЗаписатьИмяСвойства("document_type");
			Чтен.ЗаписатьЗначение("CROSSBORDER");
			Тело=Тело+"
			|""document_type"":""CROSSBORDER"",";
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.НаТерриторииСтранЕАЭСКонтрактноеПроизводство") Тогда	
			Чтен.ЗаписатьИмяСвойства("document_type");
			Чтен.ЗаписатьЗначение("LP_INTRODUCE_GOODS_CROSSBORDER_CSD");
			
			Тело=Тело+"
			|""document_type"":""LP_INTRODUCE_GOODS_CROSSBORDER_CSD"",";
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотВозвратВРозницу") 
			ИЛИ Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНужд") 
			Тогда	
			Чтен.ЗаписатьИмяСвойства("document_type");
			Чтен.ЗаписатьЗначение("LP_RETURN");
			Тело=Тело+"
			|""document_type"":""LP_RETURN"",";
			
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотКонтракт") Тогда	
			Чтен.ЗаписатьИмяСвойства("document_type");
			Чтен.ЗаписатьЗначение("LK_CONTRACT_COMMISSIONING");

			Тело=Тело+"
			|""document_type"":""LK_CONTRACT_COMMISSIONING"",";
			
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ИмпортСФТС") Тогда	
			Чтен.ЗаписатьИмяСвойства("document_type");
			Чтен.ЗаписатьЗначение("LP_FTS_INTRODUCE");

			Тело=Тело+"
			|""document_type"":""LP_FTS_INTRODUCE"",";
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотИмпорт") Тогда
			Чтен.ЗаписатьИмяСвойства("document_type");
			Чтен.ЗаписатьЗначение("LP_GOODS_IMPORT");
			Тело=Тело+"
			|""document_type"":""LP_GOODS_IMPORT"",";
			
			
		КонецЕсли;
			Чтен.ЗаписатьИмяСвойства("date_saved");
			Чтен.ЗаписатьЗначение(Формат(ТекущаяДата(),"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
			Чтен.ЗаписатьИмяСвойства("registration_date");
			Чтен.ЗаписатьЗначение(Формат(ТекущаяДата(),"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
			Чтен.ЗаписатьИмяСвойства("organisation_inn");
			Чтен.ЗаписатьЗначение(ВернутьИНН(Объект.Организация));
			//Тело=Сред(Тело,1,СтрДлина(Тело)-1)+"}";
			Тело=Тело+"""date_saved"":"""+Формат(ТекущаяДата(),"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z"",""registration_date"":"""+
			Формат(ТекущаяДата(),"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z"",""organisation_inn"":"""+ВернутьИНН(Объект.Организация)+"""}";
			
			 Чтен.ЗаписатьКонецОбъекта();
			Тело=Чтен.Закрыть();
		Конецесли;
		
		      //ЗапишемВРегистр(Тело);
		
	Если ОбработкаWEBНаСервере Тогда
		Если НЕ ЗагрузканаСервереОтправитьЗаявку(Thumbprint_1,СРегистра,УжеОтправили,Тело) Тогда
				Если УжеОтправили=Истина Тогда
				//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОтправитьЗаявку(Команда,Истина,Черновик)			
		КонецЕсли
		
		КонецЕсли;
		
		
	Иначе
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
			что=Thumbprint_1.что;
			
		Если Не ЗначениеЗаполнено(Подписанный) Тогда
			
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/draft/?pg="+Что);
			
		ИначеЕсли 	Thumbprint_1.НаименованиеСтенда="Табак"
			ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
			Тогда
			что=Thumbprint_1.что;

			
			//Если	 Thumbprint_1.НаименованиеСтенда="Обувь" Тогда
			//	HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg=shoes");
			//Иначе
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/true-api/lk/documents/create?pg="+Что);
				

		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотИмпорт") 
		
			Тогда
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/import/send?pg="+Что);
	ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборот") 
		Тогда
			
			что=Thumbprint_1.что;

			
			//Если	 Thumbprint_1.НаименованиеСтенда="Обувь" Тогда
			//	HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg=shoes");
			//Иначе
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg="+Что);
				

			
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВоборотТрансграничнаяТорговля") 
			ИЛИ Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотВозвратВРозницу") 
			ИЛИ
			Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНужд") 
			ИЛИ Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.НаТерриторииСтранЕАЭСКонтрактноеПроизводство") 
			
			Тогда
			что=Thumbprint_1.что;

			
			//Если	 Thumbprint_1.НаименованиеСтенда="Обувь" Тогда
			//	HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg=shoes");
			//Иначе
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg="+Что);
				
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.МаркировкаОстатков") Тогда
			
			
			что=Thumbprint_1.что;

			
			//Если	 Thumbprint_1.НаименованиеСтенда="Обувь" Тогда
			//	HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg=shoes");
			//Иначе
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg="+Что);
			Иначе
			что=Thumbprint_1.что;

			
			//Если	 Thumbprint_1.НаименованиеСтенда="Обувь" Тогда
			//	HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg=shoes");
			//Иначе
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg="+Что);
				
				
			//КонецЕсли;
		
		КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Если ЗначениеЗаполнено(Подписанный) Тогда
			HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
		Иначе
			#Если ВебКлиент Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
			#Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
		КонецеслИ;
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		
		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Ответ(Текст1);
		КонецЕсли;
			
		
	
	
	    
		
		
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
		ИЛИ Ответ.КодСостояния=201 
		Тогда
		Если ЗначениеЗаполнено(Подписанный) тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			Объект._Order_ID=Текст1;
		Иначе
			Сообщить("Черновки успешно отправлен");
		Конецесли;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОтправитьЗаявку(Команда,Истина,Черновик)			
			КонецЕсли
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	   КонецЕсли;
	ЭтаФорма.Записать();
	
КонецПроцедуры

Функция СформироватьXmlФайлИмпортФТС()
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	//Чтен.ЗаписатьИмяСвойства("doc_type");
	//Чтен.ЗаписатьЗначение("GOODSIMPORT");
	
	
	//Чтен.ЗаписатьИмяСвойства("document_description");
	//Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("trade_participant_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	Чтен.ЗаписатьИмяСвойства("declaration_date");
	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаДекларацииТовара,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
	Чтен.ЗаписатьИмяСвойства("declaration_number");
	Чтен.ЗаписатьЗначение(СокрЛП(Объект.НомерДекларацииТовара));
	//Чтен.ЗаписатьИмяСвойства("customs_code");
	//Чтен.ЗаписатьЗначение(Объект.КодТаможенногоОргана);
	//Чтен.ЗаписатьИмяСвойства("decision_code");
	//Чтен.ЗаписатьЗначение(Число(Объект.КодПринятогоРешения.Код));
	//Чтен.ЗаписатьКонецОбъекта();

	Чтен.ЗаписатьИмяСвойства("products_list");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;		
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		Если Стр.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
			Чтен.ЗаписатьИмяСвойства("cis");
			Чтен.ЗаписатьЗначение(Стр.cis);
			Чтен.ЗаписатьИмяСвойства("kitu");
			Чтен.ЗаписатьЗначение(Стр.cis);
			Чтен.ЗаписатьИмяСвойства("packType");
			Чтен.ЗаписатьЗначение("LEVEL1");
		ИначеЕсли Стр.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.АТК Тогда
			Чтен.ЗаписатьИмяСвойства("cis");
			Чтен.ЗаписатьЗначение(Стр.cis);
			Чтен.ЗаписатьИмяСвойства("packType");
			Чтен.ЗаписатьЗначение("ATK");
			
			
		Иначе
			Чтен.ЗаписатьИмяСвойства("cis");
			Чтен.ЗаписатьЗначение(Стр.cis);
			Чтен.ЗаписатьИмяСвойства("packType");
			Чтен.ЗаписатьЗначение("UNIT");
		КонецЕсли;
		
		
		
		Если ЗначениеЗаполнено(НСтр.GTIN.Цвет) Тогда
			
			Чтен.ЗаписатьИмяСвойства("color");
			Чтен.ЗаписатьЗначение(НСтр.GTIN.Цвет);
			
		КонецЕсли;
		Если ЗначениеЗаполнено(НСтр.GTIN.Размер) Тогда
			
			Чтен.ЗаписатьИмяСвойства("productSize");
			Чтен.ЗаписатьЗначение(xmlString(НСтр.GTIN.Размер.Наименование));
			
		КонецЕсли;
		
		
		
		
		Если ЗначениеЗаполнено(НСтр.НомерВСД) Тогда
			Чтен.ЗаписатьИмяСвойства("vsd_number");
		
			Чтен.ЗаписатьЗначение(НСтр.НомерВСД);
		Конецесли;

		//Чтен.ЗаписатьИмяСвойства("tnved_code");
		//Чтен.ЗаписатьЗначение(НСТР.КодТНВЭД.Код);
		//Чтен.ЗаписатьИмяСвойства("certificate_document");
		//Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
		//	Чтен.ЗаписатьЗначение("CONFORMITY_CERT");
		//Иначе
		//	Чтен.ЗаписатьЗначение("CONFORMITY_DECLAR");
		//КонецЕсли;
		//Чтен.ЗаписатьИмяСвойства("certificate_document_number");
		//Чтен.ЗаписатьЗначение(НСтр.ДекларацияИлиСертификатСоответствия.Наименование);
		//Чтен.ЗаписатьИмяСвойства("certificate_document_date");
		//Чтен.ЗаписатьЗначение(Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд"""));
		Чтен.ЗаписатьКонецОбъекта();;
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;

	Возврат Текст;
//		Текст="<Vvod action_id=""05"">
//	|<DocType>Promotion_Inform_Selfmade</DocType>  
//	|<Participant_INN>"+Объект.Организация.ИНН+"</Participant_INN>  
//	|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//	|<Producer_INN>"+Объект.Организация.ИНН+"</Producer_INN>  
//	|<INNOwner>"+Объект.Организация.ИНН+"</INNOwner>  
//	|<Production_Order>2</Production_Order>  
//	|<Marking_Type>1</Marking_Type>  
////	|<Declaration_Date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</Declaration_Date>  
////	|<Declaration_Number>"+Объект.НомерДекларацииТовара+"</Declaration_Number>  
////	|<Customs_Code>"+Объект.КодТаможенногоОргана+"</Customs_Code>  
////	|<Decision_Code>"+Объект.КодПринятогоРешения.Код+"</Decision_Code>  
//	|<Products_List>";
//	Для Каждого Стр Из Объект.СерийныеНомера Цикл
//		
//		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
//		НСтр=НСтр[0];
//		
//	    Текст=Текст+"
//		|<PRODUCT>  
//		|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//		|<UIT>"+Стр.cis+"</UIT>
//		|<CodeTNVED>"+НСТР.КодТНВЭД.Код+"</CodeTNVED>
//		|<MarkingType>"+"3"+"</MarkingType>";
//		
//		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
//			Текст=Текст+"
//			|<Certificate_Doc>1</Certificate_Doc>";
//		Иначе
//			Текст=Текст+"
//			|<Certificate_Doc>2</Certificate_Doc>"
//		КонецЕсли;
//		
//		Текст=Текст+"
//		|<Certificate_Doc_Number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</Certificate_Doc_Number>
//		|<Certificate_Doc_Date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</Certificate_Doc_Date>
//		|</PRODUCT> ";
//		
//		
//		
//	КонецЦикла;
//	    Текст=Текст+"
//		|</Products_List>
//		|</Vvod>
//		|";
		

	
	Текст="<vvod_import action_id=""5.1"" version=""3"">
	//|<DocType>GOODSIMPORT</DocType>  
	|<trade_participant_inn>"+Объект.Организация.ИНН+"</trade_participant_inn>  
	//|<Marking_Type>2</Marking_Type>  
	|<declaration_date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</declaration_date>  
	|<declaration_number>"+СокрЛП(Объект.НомерДекларацииТовара)+"</declaration_number>  
	|<customs_code>"+Объект.КодТаможенногоОргана+"</customs_code>  
	|<decision_code>"+Объект.КодПринятогоРешения.Код+"</decision_code>  
	|<products_list>";
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		
	    Текст=Текст+"
		|<product>  
		|<kit>"+Стр.cis+"</kit>";
//		Если ЗначениеЗАполнено(Стр.НомерКороба) Тогда
//		    Текст=Текст+"
//			|<UITU>"+Стр.НомерКороба+"</UITU>";
//		КонецЕсли;
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERTIFICATE</certificate_type>";
		Иначе
			Текст=Текст+"
			|<Certificate_Doc>CONFORMITY_CERTIFICATE</Certificate_Doc>"
		КонецЕсли;
		
		Текст=Текст+"
		|<certificate_number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</certificate_number>
		|<certificate_date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""дд.ММ.гггг""")+"</certificate_date>
		|<tnved_code>"+НСТР.КодТНВЭД.Код+"</tnved_code>";
		
		
		Текст=Текст+"
		|</product> ";
		
		
		
	КонецЦикла;
	    Текст=Текст+"
		|</products_list>
		|</vvod_import>
		|";
//		
				
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
Возврат Текст 	
КонецФункции


Функция НеПрошлаПроверкаВвод(Файл_1) Экспорт
	//	Возврат Ложь;
	КаталогВременногоФайла=КаталогВременныхФайлов()+"new_maket_V21\";
	СоздатьКаталог(КаталогВременногоФайла);
		
	//Файл=ПолучитьИмяВременногоФайла("xml");
	Файл=ПолучитьИмяВременногоФайла("xml");
	Файл=СтрЗаменить(Файл,КаталогВременныхФайлов(),КаталогВременногоФайла);
	
	
	Файл_2=Новый ТекстовыйДокумент;
	Файл_2.ДобавитьСтроку(Файл_1);
	Файл_2.Записать(Файл,КодировкаТекста.UTF8);
	
	//ИмяВремен=ПолучитьИмяВременногоФайла("xsd");
	//МакетXDTO.Записать(ИмяВремен,КодировкаТекста.ANSI);
	//dictionary_v20=ПолучитьИмяВременногоФайла("xsd");
	//dictionary_v20=КаталогВременногоФайла+"dictionary_v21.xsd";
	
	dictionary_v20=ПолучитьИмяВременногоФайла("xsd");
	dictionary_v20=СтрЗаменить(dictionary_v20,КаталогВременныхФайлов(),КаталогВременногоФайла);
	
	
	Текст=Документы.ВводВОборот_ХамелеонЦРПТ.ПолучитьМакет("ВводВОборот");
	Текст.Записать(dictionary_v20,КодировкаТекста.UTF8);
	
	
	
	XMLDoc = New COMObject("Msxml2.DOMDocument.6.0");
    XMLDoc.Async = false;
    XMLDoc.ValidateOnParse = true;
    SchemaCache = New COMObject("Msxml2.XMLSchemaCache.6.0");
	SchemaCache.Add("",dictionary_v20);
	
	XMLDoc.Schemas = SchemaCache;
    XMLDoc.SetProperty("MultipleErrorMessages", true);
    XMLDoc.Load(Файл);
    ErrObj = XMLDoc.ParseError;
	Ошибка="";
    If ErrObj.ErrorCode <> 0 Then
        For Each ErrItem In ErrObj.AllErrors Do 
            //Message("Ошибка : " + ErrItem.Reason + " " + ErrItem.SrcText);
			Ошибка=Ошибка+"В строке № "+Erritem.line+" в колонке № "++Erritem.linepos+" ошибка: "+ErrItem.Reason+" "+ErrItem.SrcText+Символы.ПС+Символы.ПС;
		EndDo;
//		УдалитьФайлы(ИмяВремен);
		Сообщить(Ошибка);
		Возврат Истина;
    EndIf;
	УдалитьФайлы(Файл);
	УдалитьФайлы(dictionary_v20);
	
	Возврат Ложь;
КонецФункции

Функция НеПрошлаПроверкаИмпорт(Файл_1) Экспорт
	//	Возврат Ложь;
	КаталогВременногоФайла=КаталогВременныхФайлов()+"new_maket_V21\";
	СоздатьКаталог(КаталогВременногоФайла);
		
	//Файл=ПолучитьИмяВременногоФайла("xml");
	Файл=ПолучитьИмяВременногоФайла("xml");
	Файл=СтрЗаменить(Файл,КаталогВременныхФайлов(),КаталогВременногоФайла);
	
	
	Файл_2=Новый ТекстовыйДокумент;
	Файл_2.ДобавитьСтроку(Файл_1);
	Файл_2.Записать(Файл,КодировкаТекста.UTF8);
	
	//ИмяВремен=ПолучитьИмяВременногоФайла("xsd");
	//МакетXDTO.Записать(ИмяВремен,КодировкаТекста.ANSI);
	//dictionary_v20=ПолучитьИмяВременногоФайла("xsd");
	//dictionary_v20=КаталогВременногоФайла+"dictionary_v21.xsd";
	
	dictionary_v20=ПолучитьИмяВременногоФайла("xsd");
	dictionary_v20=СтрЗаменить(dictionary_v20,КаталогВременныхФайлов(),КаталогВременногоФайла);
	
	
	Текст=Документы.ВводВОборот_ХамелеонЦРПТ.ПолучитьМакет("Импорт");
	Текст.Записать(dictionary_v20,КодировкаТекста.UTF8);
	
	
	
	XMLDoc = New COMObject("Msxml2.DOMDocument.6.0");
    XMLDoc.Async = false;
    XMLDoc.ValidateOnParse = true;
    SchemaCache = New COMObject("Msxml2.XMLSchemaCache.6.0");
	SchemaCache.Add("",dictionary_v20);
	
	XMLDoc.Schemas = SchemaCache;
    XMLDoc.SetProperty("MultipleErrorMessages", true);
    XMLDoc.Load(Файл);
    ErrObj = XMLDoc.ParseError;
	Ошибка="";
    If ErrObj.ErrorCode <> 0 Then
        For Each ErrItem In ErrObj.AllErrors Do 
            //Message("Ошибка : " + ErrItem.Reason + " " + ErrItem.SrcText);
			Ошибка=Ошибка+"В строке № "+Erritem.line+" в колонке № "++Erritem.linepos+" ошибка: "+ErrItem.Reason+" "+ErrItem.SrcText+Символы.ПС+Символы.ПС;
		EndDo;
//		УдалитьФайлы(ИмяВремен);
		Сообщить(Ошибка);
		Возврат Истина;
    EndIf;
	УдалитьФайлы(Файл);
	УдалитьФайлы(dictionary_v20);
	
	Возврат Ложь;
КонецФункции

Функция СформироватьXmlФайлИмпорт()
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("doc_type");
	Чтен.ЗаписатьЗначение("GOODSIMPORT");
	
	
	//Чтен.ЗаписатьИмяСвойства("document_description");
	//Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("participant_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	Чтен.ЗаписатьИмяСвойства("declaration_date");
	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаДекларацииТовара,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
	Чтен.ЗаписатьИмяСвойства("declaration_number");
	Чтен.ЗаписатьЗначение(СокрЛП(Объект.НомерДекларацииТовара));
	Чтен.ЗаписатьИмяСвойства("customs_code");
	Чтен.ЗаписатьЗначение(Объект.КодТаможенногоОргана);
	Чтен.ЗаписатьИмяСвойства("decision_code");
	Чтен.ЗаписатьЗначение(Число(Объект.КодПринятогоРешения.Код));
	//Чтен.ЗаписатьКонецОбъекта();

	Чтен.ЗаписатьИмяСвойства("products");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;		
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		Если Стр.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
			Чтен.ЗаписатьИмяСвойства("uitu_code");
		Иначе
			Чтен.ЗаписатьИмяСвойства("uit_code");
		КонецЕсли;
		Чтен.ЗаписатьЗначение(Стр.cis);
		Чтен.ЗаписатьИмяСвойства("tnved_code");
		Чтен.ЗаписатьЗначение(НСТР.КодТНВЭД.Код);
		Чтен.ЗаписатьИмяСвойства("certificate_document");
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Чтен.ЗаписатьЗначение("CONFORMITY_CERT");
		Иначе
			Чтен.ЗаписатьЗначение("CONFORMITY_DECLAR");
		КонецЕсли;
		Чтен.ЗаписатьИмяСвойства("certificate_document_number");
		Чтен.ЗаписатьЗначение(НСтр.ДекларацияИлиСертификатСоответствия.Наименование);
		Чтен.ЗаписатьИмяСвойства("certificate_document_date");
		Чтен.ЗаписатьЗначение(Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд"""));
		Чтен.ЗаписатьКонецОбъекта();;
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;

	Возврат Текст;
//		Текст="<Vvod action_id=""05"">
//	|<DocType>Promotion_Inform_Selfmade</DocType>  
//	|<Participant_INN>"+Объект.Организация.ИНН+"</Participant_INN>  
//	|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//	|<Producer_INN>"+Объект.Организация.ИНН+"</Producer_INN>  
//	|<INNOwner>"+Объект.Организация.ИНН+"</INNOwner>  
//	|<Production_Order>2</Production_Order>  
//	|<Marking_Type>1</Marking_Type>  
////	|<Declaration_Date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</Declaration_Date>  
////	|<Declaration_Number>"+Объект.НомерДекларацииТовара+"</Declaration_Number>  
////	|<Customs_Code>"+Объект.КодТаможенногоОргана+"</Customs_Code>  
////	|<Decision_Code>"+Объект.КодПринятогоРешения.Код+"</Decision_Code>  
//	|<Products_List>";
//	Для Каждого Стр Из Объект.СерийныеНомера Цикл
//		
//		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
//		НСтр=НСтр[0];
//		
//	    Текст=Текст+"
//		|<PRODUCT>  
//		|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//		|<UIT>"+Стр.cis+"</UIT>
//		|<CodeTNVED>"+НСТР.КодТНВЭД.Код+"</CodeTNVED>
//		|<MarkingType>"+"3"+"</MarkingType>";
//		
//		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
//			Текст=Текст+"
//			|<Certificate_Doc>1</Certificate_Doc>";
//		Иначе
//			Текст=Текст+"
//			|<Certificate_Doc>2</Certificate_Doc>"
//		КонецЕсли;
//		
//		Текст=Текст+"
//		|<Certificate_Doc_Number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</Certificate_Doc_Number>
//		|<Certificate_Doc_Date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</Certificate_Doc_Date>
//		|</PRODUCT> ";
//		
//		
//		
//	КонецЦикла;
//	    Текст=Текст+"
//		|</Products_List>
//		|</Vvod>
//		|";
		

	
	Текст="<vvod_import action_id=""5.1"" version=""3"">
	//|<DocType>GOODSIMPORT</DocType>  
	|<trade_participant_inn>"+Объект.Организация.ИНН+"</trade_participant_inn>  
	//|<Marking_Type>2</Marking_Type>  
	|<declaration_date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</declaration_date>  
	|<declaration_number>"+СокрЛП(Объект.НомерДекларацииТовара)+"</declaration_number>  
	|<customs_code>"+Объект.КодТаможенногоОргана+"</customs_code>  
	|<decision_code>"+Объект.КодПринятогоРешения.Код+"</decision_code>  
	|<products_list>";
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		
	    Текст=Текст+"
		|<product>  
		|<kit>"+Стр.cis+"</kit>";
//		Если ЗначениеЗАполнено(Стр.НомерКороба) Тогда
//		    Текст=Текст+"
//			|<UITU>"+Стр.НомерКороба+"</UITU>";
//		КонецЕсли;
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERTIFICATE</certificate_type>";
		Иначе
			Текст=Текст+"
			|<Certificate_Doc>CONFORMITY_CERTIFICATE</Certificate_Doc>"
		КонецЕсли;
		
		Текст=Текст+"
		|<certificate_number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</certificate_number>
		|<certificate_date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""дд.ММ.гггг""")+"</certificate_date>
		|<tnved_code>"+НСТР.КодТНВЭД.Код+"</tnved_code>";
		
		
		Текст=Текст+"
		|</product> ";
		
		
		
	КонецЦикла;
	    Текст=Текст+"
		|</products_list>
		|</vvod_import>
		|";
//		
				
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
Возврат Текст 	
КонецФункции


Функция СформироватьXmlФайлИмпортФТС_Черновик()
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	//Чтен.ЗаписатьИмяСвойства("doc_type");
	//Чтен.ЗаписатьЗначение("GOODSIMPORT");
	Чтен.ЗаписатьИмяСвойства("products");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;		
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		Если Стр.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
			Чтен.ЗаписатьИмяСвойства("kitu");
			
			Чтен.ЗаписатьЗначение(Стр.cis);
			
			
			Чтен.ЗаписатьИмяСвойства("cis");
		Иначе
			Чтен.ЗаписатьИмяСвойства("ki");
			
			Чтен.ЗаписатьЗначение(Стр.cis);
			Чтен.ЗаписатьИмяСвойства("cis");
		КонецЕсли;
		Чтен.ЗаписатьЗначение(Стр.cis);
		
		Если ЗначениеЗаполнено(НСтр.GTIN.Цвет) Тогда
			
			Чтен.ЗаписатьИмяСвойства("color");
			Чтен.ЗаписатьЗначение(НСтр.GTIN.Цвет);
			
		КонецЕсли;
		Если ЗначениеЗаполнено(НСтр.GTIN.Размер) Тогда
			
			Чтен.ЗаписатьИмяСвойства("productSize");
			Чтен.ЗаписатьЗначение(xmlString(НСтр.GTIN.Размер.Наименование));
			
		КонецЕсли;
		
		Чтен.ЗаписатьКонецОбъекта();;
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьИмяСвойства("meta");
	
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("userInn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	
	Чтен.ЗаписатьИмяСвойства("step");
	Чтен.ЗаписатьЗначение(1);
	
	Чтен.ЗаписатьИмяСвойства("documentType");
	Чтен.ЗаписатьЗначение("LP_FTS_INTRODUCE");
	
	
	
	Чтен.ЗаписатьКонецОбъекта();
	
	//Чтен.ЗаписатьИмяСвойства("document_description");
	//Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("declarationNumberFts");
	Чтен.ЗаписатьЗначение(СокрЛП(Объект.НомерДекларацииТовара));
	Чтен.ЗаписатьИмяСвойства("declarationDateFts");
	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаДекларацииТовара,"ДФ=""гггг-ММ-дд"""));

	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;

	Возврат Текст;
КонецФункции



Функция СформироватьXmlФайлИмпорт_Черновик()
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	
	///{"products":[],"meta":{"userInn":"","step":0,"documentType":"LP_GOODS_IMPORT"},"participantInnImport":"","decisionCodeImport":"10"}
Чтен.ЗаписатьИмяСвойства("products");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;		
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		Если Стр.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
			Чтен.ЗаписатьИмяСвойства("kitu");
			
			Чтен.ЗаписатьЗначение(Стр.cis);
			
			
			Чтен.ЗаписатьИмяСвойства("cis");
		Иначе
			Чтен.ЗаписатьИмяСвойства("ki");
			
			Чтен.ЗаписатьЗначение(Стр.cis);
			Чтен.ЗаписатьИмяСвойства("cis");
		КонецЕсли;
		Чтен.ЗаписатьЗначение(Стр.cis);
		Чтен.ЗаписатьИмяСвойства("tnVedEaesCode");
		Чтен.ЗаписатьЗначение(НСТР.КодТНВЭД.Код);
		Чтен.ЗаписатьИмяСвойства("certificateType");
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Чтен.ЗаписатьЗначение("CONFORMITY_CERT");
		Иначе
			Чтен.ЗаписатьЗначение("CONFORMITY_DECLAR");
		КонецЕсли;
		Чтен.ЗаписатьИмяСвойства("certificateNumber");
		Чтен.ЗаписатьЗначение(НСтр.ДекларацияИлиСертификатСоответствия.Наименование);
		Если ЗначениеЗаполнено(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия) тогда
			Чтен.ЗаписатьИмяСвойства("certificateDate");
			Чтен.ЗаписатьЗначение(Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд"""));
		Конецесли;
		Чтен.ЗаписатьКонецОбъекта();;
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	
	Чтен.ЗаписатьИмяСвойства("meta");
	
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("userInn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	
	Чтен.ЗаписатьИмяСвойства("step");
	Чтен.ЗаписатьЗначение(1);
	
	Чтен.ЗаписатьИмяСвойства("documentType");
	Чтен.ЗаписатьЗначение("LP_GOODS_IMPORT");
	
	
	
	Чтен.ЗаписатьКонецОбъекта();
	
	//Чтен.ЗаписатьИмяСвойства("document_description");
	//Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("participantInnImport");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	Чтен.ЗаписатьИмяСвойства("declarationDateImport");
	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаДекларацииТовара,"ДФ=""гггг-ММ-дд"""));
	Чтен.ЗаписатьИмяСвойства("declarationNumberImport");
	Чтен.ЗаписатьЗначение(СокрЛП(Объект.НомерДекларацииТовара));
	Чтен.ЗаписатьИмяСвойства("customsCodeImport");
	Чтен.ЗаписатьЗначение(Объект.КодТаможенногоОргана);
	Чтен.ЗаписатьИмяСвойства("decisionCodeImport");
	Чтен.ЗаписатьЗначение(Число(Объект.КодПринятогоРешения.Код));

		Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;

	Возврат Текст;
//		Текст="<Vvod action_id=""05"">
//	|<DocType>Promotion_Inform_Selfmade</DocType>  
//	|<Participant_INN>"+Объект.Организация.ИНН+"</Participant_INN>  
//	|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//	|<Producer_INN>"+Объект.Организация.ИНН+"</Producer_INN>  
//	|<INNOwner>"+Объект.Организация.ИНН+"</INNOwner>  
//	|<Production_Order>2</Production_Order>  
//	|<Marking_Type>1</Marking_Type>  
////	|<Declaration_Date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</Declaration_Date>  
////	|<Declaration_Number>"+Объект.НомерДекларацииТовара+"</Declaration_Number>  
////	|<Customs_Code>"+Объект.КодТаможенногоОргана+"</Customs_Code>  
////	|<Decision_Code>"+Объект.КодПринятогоРешения.Код+"</Decision_Code>  
//	|<Products_List>";
//	Для Каждого Стр Из Объект.СерийныеНомера Цикл
//		
//		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
//		НСтр=НСтр[0];
//		
//	    Текст=Текст+"
//		|<PRODUCT>  
//		|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//		|<UIT>"+Стр.cis+"</UIT>
//		|<CodeTNVED>"+НСТР.КодТНВЭД.Код+"</CodeTNVED>
//		|<MarkingType>"+"3"+"</MarkingType>";
//		
//		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
//			Текст=Текст+"
//			|<Certificate_Doc>1</Certificate_Doc>";
//		Иначе
//			Текст=Текст+"
//			|<Certificate_Doc>2</Certificate_Doc>"
//		КонецЕсли;
//		
//		Текст=Текст+"
//		|<Certificate_Doc_Number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</Certificate_Doc_Number>
//		|<Certificate_Doc_Date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</Certificate_Doc_Date>
//		|</PRODUCT> ";
//		
//		
//		
//	КонецЦикла;
//	    Текст=Текст+"
//		|</Products_List>
//		|</Vvod>
//		|";
		

	
	Текст="<vvod_import action_id=""5.1"" version=""3"">
	//|<DocType>GOODSIMPORT</DocType>  
	|<trade_participant_inn>"+Объект.Организация.ИНН+"</trade_participant_inn>  
	//|<Marking_Type>2</Marking_Type>  
	|<declaration_date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</declaration_date>  
	|<declaration_number>"+СокрЛП(Объект.НомерДекларацииТовара)+"</declaration_number>  
	|<customs_code>"+Объект.КодТаможенногоОргана+"</customs_code>  
	|<decision_code>"+Объект.КодПринятогоРешения.Код+"</decision_code>  
	|<products_list>";
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		
	    Текст=Текст+"
		|<product>  
		|<kit>"+Стр.cis+"</kit>";
//		Если ЗначениеЗАполнено(Стр.НомерКороба) Тогда
//		    Текст=Текст+"
//			|<UITU>"+Стр.НомерКороба+"</UITU>";
//		КонецЕсли;
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERTIFICATE</certificate_type>";
		Иначе
			Текст=Текст+"
			|<Certificate_Doc>CONFORMITY_CERTIFICATE</Certificate_Doc>"
		КонецЕсли;
		
		Текст=Текст+"
		|<certificate_number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</certificate_number>
		|<certificate_date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""дд.ММ.гггг""")+"</certificate_date>
		|<tnved_code>"+НСТР.КодТНВЭД.Код+"</tnved_code>";
		
		
		Текст=Текст+"
		|</product> ";
		
		
		
	КонецЦикла;
	    Текст=Текст+"
		|</products_list>
		|</vvod_import>
		|";
//		
				
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
Возврат Текст 	
КонецФункции


Функция СформироватьXmlФайлостатков()
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
//	Чтен.ЗаписатьИмяСвойства("document_description");
//	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("trade_participant_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	
	Чтен.ЗаписатьИмяСвойства("products_list");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		
		Если ЗначениеЗаполнено(НСтр.ДекларацияИлиСертификатСоответствия) тогда
			Чтен.ЗаписатьИмяСвойства("certificate_type");
			
			Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
				Чтен.ЗаписатьЗначение("CONFORMITY_CERTIFICATE");
			Иначе
				Чтен.ЗаписатьЗначение("CONFORMITY_DECLARATION");
			КонецЕсли;
			Чтен.ЗаписатьИмяСвойства("certificate_number");
			Чтен.ЗаписатьЗначение(НСтр.ДекларацияИлиСертификатСоответствия.Наименование);
			Чтен.ЗаписатьИмяСвойства("certificate_date");
			Чтен.ЗаписатьЗначение(Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
			//Чтен.ЗаписатьКонецОбъекта();;

		КонецЕсли;
		
		Если СтрДлина(Стр.cis)<19 Тогда
			Чтен.ЗаписатьИмяСвойства("kitu");
		Иначе
			Чтен.ЗаписатьИмяСвойства("ki");
		КонецЕсли;
		Чтен.ЗаписатьЗначение(Стр.cis);
		Чтен.ЗаписатьКонецОбъекта();;
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	Возврат Текст;
	
	
//		Текст="<Vvod action_id=""05"">
//	|<DocType>Promotion_Inform_Selfmade</DocType>  
//	|<Participant_INN>"+Объект.Организация.ИНН+"</Participant_INN>  
//	|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//	|<Producer_INN>"+Объект.Организация.ИНН+"</Producer_INN>  
//	|<INNOwner>"+Объект.Организация.ИНН+"</INNOwner>  
//	|<Production_Order>2</Production_Order>  
//	|<Marking_Type>1</Marking_Type>  
////	|<Declaration_Date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</Declaration_Date>  
////	|<Declaration_Number>"+Объект.НомерДекларацииТовара+"</Declaration_Number>  
////	|<Customs_Code>"+Объект.КодТаможенногоОргана+"</Customs_Code>  
////	|<Decision_Code>"+Объект.КодПринятогоРешения.Код+"</Decision_Code>  
//	|<Products_List>";
//	Для Каждого Стр Из Объект.СерийныеНомера Цикл
//		
//		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
//		НСтр=НСтр[0];
//		
//	    Текст=Текст+"
//		|<PRODUCT>  
//		|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//		|<UIT>"+Стр.cis+"</UIT>
//		|<CodeTNVED>"+НСТР.КодТНВЭД.Код+"</CodeTNVED>
//		|<MarkingType>"+"3"+"</MarkingType>";
//		
//		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
//			Текст=Текст+"
//			|<Certificate_Doc>1</Certificate_Doc>";
//		Иначе
//			Текст=Текст+"
//			|<Certificate_Doc>2</Certificate_Doc>"
//		КонецЕсли;
//		
//		Текст=Текст+"
//		|<Certificate_Doc_Number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</Certificate_Doc_Number>
//		|<Certificate_Doc_Date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</Certificate_Doc_Date>
//		|</PRODUCT> ";
//		
//		
//		
//	КонецЦикла;
//	    Текст=Текст+"
//		|</Products_List>
//		|</Vvod>
//		|";
		

	
	Текст="<vvod action_id=""05""  version=""5"">
	|<trade_participant_inn>"+Объект.Организация.ИНН+"</trade_participant_inn>  
	|<producer_inn>"+Объект.Организация.ИНН+"</producer_inn>  
	|<owner_inn>"+Объект.Организация.ИНН+"</owner_inn>  
	|<product_date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_date>  
	|<production_order>"+"OWN_PRODUCTION"+"</production_order> ";
	
//	    Текст=Текст+"
//		|<MarkingType>"+"1 "+"</MarkingType>  ";
	    Текст=Текст+"
	|<products_list>";
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		
	    Текст=Текст+"
		|<product>  
		|<kit>"+Стр.cis+"</kit>
		|<product_Date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_Date>";
//		Если ЗначениеЗАполнено(Стр.НомерКороба) Тогда
//		    Текст=Текст+"
//			|<UITU>"+Стр.НомерКороба+"</UITU>";
//		КонецЕсли;
		   Текст=Текст+"
		|<tnved_code>"+НСТР.КодТНВЭД.Код+"</tnved_code>";
		
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>";
		Иначе
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>"
		КонецЕсли;
		
		Текст=Текст+"
		|<certificate_number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</certificate_number>
		|<certificate_date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</certificate_date>";
		
		
		Текст=Текст+"
		|</product> ";
		
		
		
	КонецЦикла;
	    Текст=Текст+"
		|</products_list>
		|</vvod>
		|";
//		
				
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
Возврат Текст 	
КонецФункции

Функция СформироватьТС()
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("documentType");
	Чтен.ЗаписатьЗначение("CROSSBORDER");
	Чтен.ЗаписатьИмяСвойства("trade_participant_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	
	
	
	Чтен.ЗаписатьИмяСвойства("exporter_name");
	Чтен.ЗаписатьЗначение(Объект.НаименованиеЭкспортера);
	
	Чтен.ЗаписатьИмяСвойства("country_oksm");
	Чтен.ЗаписатьЗначение(Объект.СтранаТС.Код);
	Чтен.ЗаписатьИмяСвойства("primary_document_number");
	Чтен.ЗаписатьЗначение(Объект.НомерПервичногоДокумента);
	
	Чтен.ЗаписатьИмяСвойства("sender_tax_number");
	Чтен.ЗаписатьЗначение(Объект.НомерНалогоплательщикаОтправителя);
	Чтен.ЗаписатьИмяСвойства("import_date");
	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаИмпорта,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
	Чтен.ЗаписатьИмяСвойства("primary_document_date");
	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПервичногоДокумента,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
	
	Чтен.ЗаписатьИмяСвойства("products_list");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		Чтен.ЗаписатьИмяСвойства("tnved_code");
		Чтен.ЗаписатьЗначение(НСТР.КодТНВЭД.Код);
		
		Если ЗначениеЗаполнено(НСтр.ДекларацияИлиСертификатСоответствия) тогда
			Чтен.ЗаписатьИмяСвойства("certificate_type");
			
			Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
				Чтен.ЗаписатьЗначение("CONFORMITY_CERTIFICATE");
			Иначе
				Чтен.ЗаписатьЗначение("CONFORMITY_DECLARATION");
			КонецЕсли;
			Чтен.ЗаписатьИмяСвойства("certificate_number");
			Чтен.ЗаписатьЗначение(НСтр.ДекларацияИлиСертификатСоответствия.Наименование);
			Чтен.ЗаписатьИмяСвойства("certificate_date");
			Чтен.ЗаписатьЗначение(Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
			//Чтен.ЗаписатьКонецОбъекта();;

		КонецЕсли;
		Чтен.ЗаписатьИмяСвойства("cost");
		чтен.ЗаписатьЗначение(НСтр.Цена);
		Чтен.ЗаписатьИмяСвойства("vat_value");
		чтен.ЗаписатьЗначение(НСтр.суммаНДС);
		
		
		//Если Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Молоко" Тогда
		//	Если Стр.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
		//		Чтен.ЗаписатьИмяСвойства("uitu_code");
		//		Чтен.ЗаписатьЗначение(Стр.cis);
		//		
		//		Для Каждого стр_1 Из ДеревоКМ.ПолучитьЭлементы() Цикл
		//			
		//			если Стр.cis=Стр_1.cis Тогда
		//				
		//				Чтен.ЗаписатьИмяСвойства("children");
		//				Чтен.ЗаписатьНачалоМассива();
		//				
		//				
		//				РекурсияУпаковок_Молоко(Стр_1,Чтен,Нстр);
		//				
		//				Чтен.ЗаписатьКонецМассива();
		//	
		//				
		//			Конецесли;
		//			
		//			
		//		конеццикла;
		//		
		//		
		//	Иначе
		//		Чтен.ЗаписатьИмяСвойства("uit_code");
		//		Чтен.ЗаписатьЗначение(Стр.cis);
		//	КонецЕсли;
		//	
		//Иначе
		//	Если Стр.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
		//		Чтен.ЗаписатьИмяСвойства("kitu");
		//	Иначе
		//		Чтен.ЗаписатьИмяСвойства("ki");
		//	КонецЕсли;
		//	Чтен.ЗаписатьЗначение(Стр.cis);
		//Конецесли;
		
		
		Если Стр.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
			Чтен.ЗаписатьИмяСвойства("kitu");
		Иначе
			Чтен.ЗаписатьИмяСвойства("ki");
		КонецЕсли;
		Чтен.ЗаписатьЗначение(Стр.cis);
		Если ЗначениеЗаполнено(НСтр.НомерВСД) Тогда
			Чтен.ЗаписатьИмяСвойства("vsd_number");
		
			Чтен.ЗаписатьЗначение(НСтр.НомерВСД);
		Конецесли;

		Чтен.ЗаписатьКонецОбъекта();;
		
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	Возврат Текст;
	
	
//		Текст="<Vvod action_id=""05"">
//	|<DocType>Promotion_Inform_Selfmade</DocType>  
//	|<Participant_INN>"+Объект.Организация.ИНН+"</Participant_INN>  
//	|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//	|<Producer_INN>"+Объект.Организация.ИНН+"</Producer_INN>  
//	|<INNOwner>"+Объект.Организация.ИНН+"</INNOwner>  
//	|<Production_Order>2</Production_Order>  
//	|<Marking_Type>1</Marking_Type>  
////	|<Declaration_Date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</Declaration_Date>  
////	|<Declaration_Number>"+Объект.НомерДекларацииТовара+"</Declaration_Number>  
////	|<Customs_Code>"+Объект.КодТаможенногоОргана+"</Customs_Code>  
////	|<Decision_Code>"+Объект.КодПринятогоРешения.Код+"</Decision_Code>  
//	|<Products_List>";
//	Для Каждого Стр Из Объект.СерийныеНомера Цикл
//		
//		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
//		НСтр=НСтр[0];
//		
//	    Текст=Текст+"
//		|<PRODUCT>  
//		|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//		|<UIT>"+Стр.cis+"</UIT>
//		|<CodeTNVED>"+НСТР.КодТНВЭД.Код+"</CodeTNVED>
//		|<MarkingType>"+"3"+"</MarkingType>";
//		
//		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
//			Текст=Текст+"
//			|<Certificate_Doc>1</Certificate_Doc>";
//		Иначе
//			Текст=Текст+"
//			|<Certificate_Doc>2</Certificate_Doc>"
//		КонецЕсли;
//		
//		Текст=Текст+"
//		|<Certificate_Doc_Number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</Certificate_Doc_Number>
//		|<Certificate_Doc_Date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</Certificate_Doc_Date>
//		|</PRODUCT> ";
//		
//		
//		
//	КонецЦикла;
//	    Текст=Текст+"
//		|</Products_List>
//		|</Vvod>
//		|";
		

	
	Текст="<vvod action_id=""05""  version=""5"">
	|<trade_participant_inn>"+Объект.Организация.ИНН+"</trade_participant_inn>  
	|<producer_inn>"+Объект.Организация.ИНН+"</producer_inn>  
	|<owner_inn>"+Объект.Организация.ИНН+"</owner_inn>  
	|<product_date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_date>  
	|<production_order>"+"OWN_PRODUCTION"+"</production_order> ";
	
//	    Текст=Текст+"
//		|<MarkingType>"+"1 "+"</MarkingType>  ";
	    Текст=Текст+"
	|<products_list>";
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		
	    Текст=Текст+"
		|<product>  
		|<kit>"+Стр.cis+"</kit>
		|<product_Date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_Date>";
//		Если ЗначениеЗАполнено(Стр.НомерКороба) Тогда
//		    Текст=Текст+"
//			|<UITU>"+Стр.НомерКороба+"</UITU>";
//		КонецЕсли;
		   Текст=Текст+"
		|<tnved_code>"+НСТР.КодТНВЭД.Код+"</tnved_code>";
		
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>";
		Иначе
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>"
		КонецЕсли;
		
		Текст=Текст+"
		|<certificate_number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</certificate_number>
		|<certificate_date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</certificate_date>";
		
		
		Текст=Текст+"
		|</product> ";
		
		
		
	КонецЦикла;
	    Текст=Текст+"
		|</products_list>
		|</vvod>
		|";
//		
				
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
Возврат Текст 	
КонецФункции


Функция СформироватьТС_Контракт()
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("trade_participant_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	Чтен.ЗаписатьИмяСвойства("country_oksm");
	Чтен.ЗаписатьЗначение(Объект.СтранаТС.Код);
	Чтен.ЗаписатьИмяСвойства("exporter_name");
	Чтен.ЗаписатьЗначение(Объект.НаименованиеЭкспортера);
	
	
	Чтен.ЗаписатьИмяСвойства("import_date");
	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаИмпорта,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
	
	Чтен.ЗаписатьИмяСвойства("primary_document_date");
	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПервичногоДокумента,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
	
	
	Чтен.ЗаписатьИмяСвойства("primary_document_number");
	Чтен.ЗаписатьЗначение(Объект.НомерПервичногоДокумента);
	
	Если ЗначениеЗаполнено(Объект.НомерВСД) тогда
		Чтен.ЗаписатьИмяСвойства("vsd_number");
		Чтен.ЗаписатьЗначение(Объект.НомерВСД);
	Конецесли;
	
	Чтен.ЗаписатьИмяСвойства("sender_tax_number");
	Чтен.ЗаписатьЗначение(Объект.НомерНалогоплательщикаОтправителя);
	
	Чтен.ЗаписатьИмяСвойства("products_list");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		Чтен.ЗаписатьИмяСвойства("tnved_code");
		Чтен.ЗаписатьЗначение(НСТР.КодТНВЭД.Код);
		
		Если ЗначениеЗаполнено(НСтр.ДекларацияИлиСертификатСоответствия) тогда
			Чтен.ЗаписатьИмяСвойства("certificate_type");
			
			Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
				Чтен.ЗаписатьЗначение("CONFORMITY_CERTIFICATE");
			Иначе
				Чтен.ЗаписатьЗначение("CONFORMITY_DECLARATION");
			КонецЕсли;
			Чтен.ЗаписатьИмяСвойства("certificate_number");
			Чтен.ЗаписатьЗначение(НСтр.ДекларацияИлиСертификатСоответствия.Наименование);
			Чтен.ЗаписатьИмяСвойства("certificate_date");
			Чтен.ЗаписатьЗначение(Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
			//Чтен.ЗаписатьКонецОбъекта();;

		КонецЕсли;
		Если ЗначениеЗАполнено(НСтр.Цена) тогда
			Чтен.ЗаписатьИмяСвойства("cost");
			чтен.ЗаписатьЗначение(НСтр.Цена);
		КонецЕсли;
		Если ЗначениеЗаполнено(НСтр.суммаНДС) Тогда
			Чтен.ЗаписатьИмяСвойства("vat_value");
			чтен.ЗаписатьЗначение(НСтр.суммаНДС);
		КонецЕсли;	
		
		Если Стр.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
			Чтен.ЗаписатьИмяСвойства("kitu");
		Иначе
			Чтен.ЗаписатьИмяСвойства("ki");
		КонецЕсли;
		Чтен.ЗаписатьЗначение(Стр.cis);
		Если ЗначениеЗаполнено(НСтр.НомерВСД) Тогда
			Чтен.ЗаписатьИмяСвойства("vsd_number");
		
			Чтен.ЗаписатьЗначение(НСтр.НомерВСД);
		Конецесли;
		Чтен.ЗаписатьКонецОбъекта();;
		
		
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	Возврат Текст;
	
	
//		Текст="<Vvod action_id=""05"">
//	|<DocType>Promotion_Inform_Selfmade</DocType>  
//	|<Participant_INN>"+Объект.Организация.ИНН+"</Participant_INN>  
//	|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//	|<Producer_INN>"+Объект.Организация.ИНН+"</Producer_INN>  
//	|<INNOwner>"+Объект.Организация.ИНН+"</INNOwner>  
//	|<Production_Order>2</Production_Order>  
//	|<Marking_Type>1</Marking_Type>  
////	|<Declaration_Date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</Declaration_Date>  
////	|<Declaration_Number>"+Объект.НомерДекларацииТовара+"</Declaration_Number>  
////	|<Customs_Code>"+Объект.КодТаможенногоОргана+"</Customs_Code>  
////	|<Decision_Code>"+Объект.КодПринятогоРешения.Код+"</Decision_Code>  
//	|<Products_List>";
//	Для Каждого Стр Из Объект.СерийныеНомера Цикл
//		
//		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
//		НСтр=НСтр[0];
//		
//	    Текст=Текст+"
//		|<PRODUCT>  
//		|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//		|<UIT>"+Стр.cis+"</UIT>
//		|<CodeTNVED>"+НСТР.КодТНВЭД.Код+"</CodeTNVED>
//		|<MarkingType>"+"3"+"</MarkingType>";
//		
//		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
//			Текст=Текст+"
//			|<Certificate_Doc>1</Certificate_Doc>";
//		Иначе
//			Текст=Текст+"
//			|<Certificate_Doc>2</Certificate_Doc>"
//		КонецЕсли;
//		
//		Текст=Текст+"
//		|<Certificate_Doc_Number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</Certificate_Doc_Number>
//		|<Certificate_Doc_Date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</Certificate_Doc_Date>
//		|</PRODUCT> ";
//		
//		
//		
//	КонецЦикла;
//	    Текст=Текст+"
//		|</Products_List>
//		|</Vvod>
//		|";
		

	
	Текст="<vvod action_id=""05""  version=""5"">
	|<trade_participant_inn>"+Объект.Организация.ИНН+"</trade_participant_inn>  
	|<producer_inn>"+Объект.Организация.ИНН+"</producer_inn>  
	|<owner_inn>"+Объект.Организация.ИНН+"</owner_inn>  
	|<product_date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_date>  
	|<production_order>"+"OWN_PRODUCTION"+"</production_order> ";
	
//	    Текст=Текст+"
//		|<MarkingType>"+"1 "+"</MarkingType>  ";
	    Текст=Текст+"
	|<products_list>";
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		
	    Текст=Текст+"
		|<product>  
		|<kit>"+Стр.cis+"</kit>
		|<product_Date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_Date>";
//		Если ЗначениеЗАполнено(Стр.НомерКороба) Тогда
//		    Текст=Текст+"
//			|<UITU>"+Стр.НомерКороба+"</UITU>";
//		КонецЕсли;
		   Текст=Текст+"
		|<tnved_code>"+НСТР.КодТНВЭД.Код+"</tnved_code>";
		
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>";
		Иначе
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>"
		КонецЕсли;
		
		Текст=Текст+"
		|<certificate_number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</certificate_number>
		|<certificate_date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</certificate_date>";
		
		
		Текст=Текст+"
		|</product> ";
		
		
		
	КонецЦикла;
	    Текст=Текст+"
		|</products_list>
		|</vvod>
		|";
//		
				
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
Возврат Текст 	
КонецФункции


Функция СформироватьXmlФайлВвод_Черновик()
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
//	Чтен.ЗаписатьИмяСвойства("document_description");
//	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("products");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		Если ЗначениеЗаполнено(Объект.ДатаПроизводства) Тогда
		
			Чтен.ЗаписатьИмяСвойства("productionDate");
			Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"T00:00:00.000Z");
		КонецЕсли;
		
		Если Стр.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
			Чтен.ЗаписатьИмяСвойства("kitu");
			
			Чтен.ЗаписатьЗначение(Стр.cis);
			Чтен.ЗаписатьИмяСвойства("cis");
			
			
		Иначе
			Чтен.ЗаписатьИмяСвойства("ki");
			
			Чтен.ЗаписатьЗначение(Стр.cis);
			Чтен.ЗаписатьИмяСвойства("cis");
		КонецЕсли;
		Чтен.ЗаписатьЗначение(Стр.cis);
		Чтен.ЗаписатьИмяСвойства("tnVedEaesCode");
		Чтен.ЗаписатьЗначение(Сред(НСТР.КодТНВЭД.Код,1,4));
		Чтен.ЗаписатьИмяСвойства("tnvedCode");
		Чтен.ЗаписатьЗначение(НСТР.КодТНВЭД.Код);
		Чтен.ЗаписатьИмяСвойства("producerInn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		
		
		//Если ЗначениеЗаполнено(Объект.ДатаПроизводства) Тогда
		//	Чтен.ЗаписатьИмяСвойства("production_date");
		//	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд"""));
		//КонецЕсли;
		
		Чтен.ЗаписатьИмяСвойства("ownerName");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		Чтен.ЗаписатьИмяСвойства("certificateType");
		
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Чтен.ЗаписатьЗначение("CONFORMITY_CERT");
		Иначе
			Чтен.ЗаписатьЗначение("CONFORMITY_DECLAR");
		КонецЕсли;
		Чтен.ЗаписатьИмяСвойства("certificateNumber");
		Чтен.ЗаписатьЗначение(НСтр.ДекларацияИлиСертификатСоответствия.Наименование);
		Если ЗначениеЗаполнено(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия) Тогда
			Чтен.ЗаписатьИмяСвойства("certificateDate");
			Чтен.ЗаписатьЗначение(Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"T00:00:00.000Z");
		Конецесли;
			Если ЗначениеЗаполнено(НСтр.НомерВСД) ТОгда
		Чтен.ЗаписатьИмяСвойства("vsd_number");
		Чтен.ЗаписатьЗначение(НСтр.НомерВСД);
	Конецесли;
		Чтен.ЗаписатьКонецОбъекта();;
		
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	
	Чтен.ЗаписатьИмяСвойства("meta");
	
	Чтен.ЗаписатьНачалоОбъекта();;
	
	Чтен.ЗаписатьИмяСвойства("userInn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	
	Чтен.ЗаписатьИмяСвойства("step");
	Чтен.ЗаписатьЗначение(1);
	
	Чтен.ЗаписатьИмяСвойства("documentType");
	Чтен.ЗаписатьЗначение("LP_INTRODUCE_GOODS");
	
	Чтен.ЗаписатьКонецОбъекта();;
	
	Чтен.ЗаписатьИмяСвойства("ownerInnIntro");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	
	Чтен.ЗаписатьИмяСвойства("producerInnIntro");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	
	
	Если ЗначениеЗаполнено(Объект.ДатаПроизводства) Тогда
		Чтен.ЗаписатьИмяСвойства("productionDateIntro");
		
		Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"T00:00:00.000Z");
	КонецЕсли;
	
	Чтен.ЗаписатьИмяСвойства("productionTypeIntro");
	Чтен.ЗаписатьЗначение("OWN_PRODUCTION");
	
	
	
	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	Возврат Текст;
	
	
//		Текст="<Vvod action_id=""05"">
//	|<DocType>Promotion_Inform_Selfmade</DocType>  
//	|<Participant_INN>"+Объект.Организация.ИНН+"</Participant_INN>  
//	|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//	|<Producer_INN>"+Объект.Организация.ИНН+"</Producer_INN>  
//	|<INNOwner>"+Объект.Организация.ИНН+"</INNOwner>  
//	|<Production_Order>2</Production_Order>  
//	|<Marking_Type>1</Marking_Type>  
////	|<Declaration_Date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</Declaration_Date>  
////	|<Declaration_Number>"+Объект.НомерДекларацииТовара+"</Declaration_Number>  
////	|<Customs_Code>"+Объект.КодТаможенногоОргана+"</Customs_Code>  
////	|<Decision_Code>"+Объект.КодПринятогоРешения.Код+"</Decision_Code>  
//	|<Products_List>";
//	Для Каждого Стр Из Объект.СерийныеНомера Цикл
//		
//		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
//		НСтр=НСтр[0];
//		
//	    Текст=Текст+"
//		|<PRODUCT>  
//		|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//		|<UIT>"+Стр.cis+"</UIT>
//		|<CodeTNVED>"+НСТР.КодТНВЭД.Код+"</CodeTNVED>
//		|<MarkingType>"+"3"+"</MarkingType>";
//		
//		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
//			Текст=Текст+"
//			|<Certificate_Doc>1</Certificate_Doc>";
//		Иначе
//			Текст=Текст+"
//			|<Certificate_Doc>2</Certificate_Doc>"
//		КонецЕсли;
//		
//		Текст=Текст+"
//		|<Certificate_Doc_Number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</Certificate_Doc_Number>
//		|<Certificate_Doc_Date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</Certificate_Doc_Date>
//		|</PRODUCT> ";
//		
//		
//		
//	КонецЦикла;
//	    Текст=Текст+"
//		|</Products_List>
//		|</Vvod>
//		|";
		

	
	Текст="<vvod action_id=""05""  version=""5"">
	|<trade_participant_inn>"+Объект.Организация.ИНН+"</trade_participant_inn>  
	|<producer_inn>"+Объект.Организация.ИНН+"</producer_inn>  
	|<owner_inn>"+Объект.Организация.ИНН+"</owner_inn>  
	|<product_date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_date>  
	|<production_order>"+"OWN_PRODUCTION"+"</production_order> ";
	
//	    Текст=Текст+"
//		|<MarkingType>"+"1 "+"</MarkingType>  ";
	    Текст=Текст+"
	|<products_list>";
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		
	    Текст=Текст+"
		|<product>  
		|<kit>"+Стр.cis+"</kit>
		|<product_Date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_Date>";
//		Если ЗначениеЗАполнено(Стр.НомерКороба) Тогда
//		    Текст=Текст+"
//			|<UITU>"+Стр.НомерКороба+"</UITU>";
//		КонецЕсли;
		   Текст=Текст+"
		|<tnved_code>"+НСТР.КодТНВЭД.Код+"</tnved_code>";
		
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>";
		Иначе
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>"
		КонецЕсли;
		
		Текст=Текст+"
		|<certificate_number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</certificate_number>
		|<certificate_date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</certificate_date>";
		
		
		Текст=Текст+"
		|</product> ";
		
		
		
	КонецЦикла;
	    Текст=Текст+"
		|</products_list>
		|</vvod>
		|";
//		
				
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
Возврат Текст 	
КонецФункции

Процедура РекурсияУпаковок_Молоко(Стр_1,Чтен,НСтр)
	
	Для Каждого Стр_2 Из Стр_1.ПолучитьЭлементы() Цикл
		Чтен.ЗаписатьНачалоОбъекта();
		
		
		
		Если Стр_2.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
			Чтен.ЗаписатьИмяСвойства("uitu_code");
			Чтен.ЗаписатьЗначение(Стр_2.НомерКМ);
			
			//Для Каждого стр_5 Из Стр_2.ПолучитьЭлементы() Цикл
			Чтен.ЗаписатьИмяСвойства("children");
			Чтен.ЗаписатьНачалоМассива();
			РекурсияУпаковок_Молоко(стр_2,Чтен,Нстр);
			Чтен.ЗаписатьКонецМассива();
			//конеццикла;
			
			
			
		Иначе
			Чтен.ЗаписатьИмяСвойства("uit_code");
			Чтен.ЗаписатьЗначение(Стр_2.НомерКМ);
		КонецеслИ;
		
		Чтен.ЗаписатьИмяСвойства("parent");
		Чтен.ЗаписатьЗначение(Стр_1.НомерКМ);
		Чтен.ЗаписатьИмяСвойства("tnved_code");
		Чтен.ЗаписатьЗначение(НСТР.КодТНВЭД.Код);
		Чтен.ЗаписатьИмяСвойства("producer_inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		
		
		//Если ЗначениеЗаполнено(Объект.ДатаПроизводства) Тогда
		//	Чтен.ЗаписатьИмяСвойства("production_date");
		//	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд"""));
		//КонецЕсли;
		
		Чтен.ЗаписатьИмяСвойства("owner_inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		Если ЗначениеЗАполнено(НСтр.ДекларацияИлиСертификатСоответствия) Тогда
			Чтен.ЗаписатьИмяСвойства("certificate_document");
		
			Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
				Чтен.ЗаписатьЗначение("CONFORMITY_CERT");
			Иначе
				Чтен.ЗаписатьЗначение("CONFORMITY_DECLAR");
			КонецЕсли;
			Чтен.ЗаписатьИмяСвойства("certificate_document_number");
			Чтен.ЗаписатьЗначение(НСтр.ДекларацияИлиСертификатСоответствия.Наименование);
			Чтен.ЗаписатьИмяСвойства("certificate_document_date");
			Чтен.ЗаписатьЗначение(Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд"""));
		Конецесли;
		
		Если ЗначениеЗаполнено(НСтр.НомерВСД) Тогда
			Чтен.ЗаписатьИмяСвойства("vsd_number");
		
			Чтен.ЗаписатьЗначение(НСтр.НомерВСД);
		Конецесли;
		
		Чтен.ЗаписатьКонецОбъекта();
	Конеццикла;
	
КонецПроцедуры

Функция СформироватьXmlФайлВвод()
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
//	Чтен.ЗаписатьИмяСвойства("document_description");
//	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("participant_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	Если ЗначениеЗаполнено(Объект.ДатаПроизводства) Тогда
		Чтен.ЗаписатьИмяСвойства("production_date");
		Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд"""));
	КонецЕсли;
	Чтен.ЗаписатьИмяСвойства("producer_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	Чтен.ЗаписатьИмяСвойства("owner_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	
	Чтен.ЗаписатьИмяСвойства("production_type");
	Чтен.ЗаписатьЗначение("OWN_PRODUCTION");
	
//	Чтен.ЗаписатьКонецОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("doc_type");
	Чтен.ЗаписатьЗначение("Promotion_Inform_Selfmade");
	Чтен.ЗаписатьИмяСвойства("products");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		//Если ЗначениеЗаполнено(Нстр.ДатаПроизводства) Тогда
		//
		//	Чтен.ЗаписатьИмяСвойства("production_date");
		//	Чтен.ЗаписатьЗначение(Формат(Нстр.ДатаПроизводства,"ДФ=""гггг-ММ-дд"""));
		//КонецЕсли;
		Если ЗначениеЗаполнено(Нстр.ДатаПроизводства) Тогда
			Чтен.ЗаписатьИмяСвойства("production_date");
			Чтен.ЗаписатьЗначение(Формат(НСтр.ДатаПроизводства,"ДФ=""гггг-ММ-дд"""));
		ИначеЕсли ЗначениеЗаполнено(Объект.ДатаПроизводства) Тогда
			Чтен.ЗаписатьИмяСвойства("production_date ");
			Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд"""));

		КонецЕсли;
		
		Если Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Молоко" Тогда
			Если Стр.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
				Чтен.ЗаписатьИмяСвойства("uitu_code");
				Чтен.ЗаписатьЗначение(Стр.cis);
				
				Для Каждого стр_1 Из ДеревоКМ.ПолучитьЭлементы() Цикл
					
					если Стр.cis=Стр_1.cis Тогда
						
						Чтен.ЗаписатьИмяСвойства("children");
						Чтен.ЗаписатьНачалоМассива();
						
						
						РекурсияУпаковок_Молоко(Стр_1,Чтен,Нстр);
						
						Чтен.ЗаписатьКонецМассива();
			
						
					Конецесли;
					
					
				конеццикла;
				
				
			Иначе
				Чтен.ЗаписатьИмяСвойства("uit_code");
				Чтен.ЗаписатьЗначение(Стр.cis);
			КонецЕсли;
			
		Иначе
			Если Стр.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
				Чтен.ЗаписатьИмяСвойства("uitu_code");
			Иначе
				Чтен.ЗаписатьИмяСвойства("uit_code");
			КонецЕсли;
			Чтен.ЗаписатьЗначение(Стр.cis);
		Конецесли;
		Чтен.ЗаписатьИмяСвойства("tnved_code");
		Чтен.ЗаписатьЗначение(НСТР.КодТНВЭД.Код);
		Чтен.ЗаписатьИмяСвойства("producer_inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		
		
		//Если ЗначениеЗаполнено(Объект.ДатаПроизводства) Тогда
		//	Чтен.ЗаписатьИмяСвойства("production_date");
		//	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд"""));
		//КонецЕсли;
		
		Чтен.ЗаписатьИмяСвойства("owner_inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		Если ЗначениеЗАполнено(НСтр.ДекларацияИлиСертификатСоответствия) Тогда
			Чтен.ЗаписатьИмяСвойства("certificate_document");
		
			Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
				Чтен.ЗаписатьЗначение("CONFORMITY_CERT");
			Иначе
				Чтен.ЗаписатьЗначение("CONFORMITY_DECLAR");
			КонецЕсли;
			Чтен.ЗаписатьИмяСвойства("certificate_document_number");
			Чтен.ЗаписатьЗначение(НСтр.ДекларацияИлиСертификатСоответствия.Наименование);
			Чтен.ЗаписатьИмяСвойства("certificate_document_date");
			Чтен.ЗаписатьЗначение(Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд"""));
		Конецесли;
		
		Если ЗначениеЗаполнено(НСтр.НомерВСД) Тогда
			Чтен.ЗаписатьИмяСвойства("vsd_number");
		
			Чтен.ЗаписатьЗначение(НСтр.НомерВСД);
		Конецесли;
		Чтен.ЗаписатьКонецОбъекта();;
		
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	Возврат Текст;
	
	
//		Текст="<Vvod action_id=""05"">
//	|<DocType>Promotion_Inform_Selfmade</DocType>  
//	|<Participant_INN>"+Объект.Организация.ИНН+"</Participant_INN>  
//	|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//	|<Producer_INN>"+Объект.Организация.ИНН+"</Producer_INN>  
//	|<INNOwner>"+Объект.Организация.ИНН+"</INNOwner>  
//	|<Production_Order>2</Production_Order>  
//	|<Marking_Type>1</Marking_Type>  
////	|<Declaration_Date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</Declaration_Date>  
////	|<Declaration_Number>"+Объект.НомерДекларацииТовара+"</Declaration_Number>  
////	|<Customs_Code>"+Объект.КодТаможенногоОргана+"</Customs_Code>  
////	|<Decision_Code>"+Объект.КодПринятогоРешения.Код+"</Decision_Code>  
//	|<Products_List>";
//	Для Каждого Стр Из Объект.СерийныеНомера Цикл
//		
//		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
//		НСтр=НСтр[0];
//		
//	    Текст=Текст+"
//		|<PRODUCT>  
//		|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//		|<UIT>"+Стр.cis+"</UIT>
//		|<CodeTNVED>"+НСТР.КодТНВЭД.Код+"</CodeTNVED>
//		|<MarkingType>"+"3"+"</MarkingType>";
//		
//		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
//			Текст=Текст+"
//			|<Certificate_Doc>1</Certificate_Doc>";
//		Иначе
//			Текст=Текст+"
//			|<Certificate_Doc>2</Certificate_Doc>"
//		КонецЕсли;
//		
//		Текст=Текст+"
//		|<Certificate_Doc_Number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</Certificate_Doc_Number>
//		|<Certificate_Doc_Date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</Certificate_Doc_Date>
//		|</PRODUCT> ";
//		
//		
//		
//	КонецЦикла;
//	    Текст=Текст+"
//		|</Products_List>
//		|</Vvod>
//		|";
		

	
	Текст="<vvod action_id=""05""  version=""5"">
	|<trade_participant_inn>"+Объект.Организация.ИНН+"</trade_participant_inn>  
	|<producer_inn>"+Объект.Организация.ИНН+"</producer_inn>  
	|<owner_inn>"+Объект.Организация.ИНН+"</owner_inn>  
	|<product_date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_date>  
	|<production_order>"+"OWN_PRODUCTION"+"</production_order> ";
	
//	    Текст=Текст+"
//		|<MarkingType>"+"1 "+"</MarkingType>  ";
	    Текст=Текст+"
	|<products_list>";
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		
	    Текст=Текст+"
		|<product>  
		|<kit>"+Стр.cis+"</kit>
		|<product_Date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_Date>";
//		Если ЗначениеЗАполнено(Стр.НомерКороба) Тогда
//		    Текст=Текст+"
//			|<UITU>"+Стр.НомерКороба+"</UITU>";
//		КонецЕсли;
		   Текст=Текст+"
		|<tnved_code>"+НСТР.КодТНВЭД.Код+"</tnved_code>";
		
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>";
		Иначе
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>"
		КонецЕсли;
		
		Текст=Текст+"
		|<certificate_number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</certificate_number>
		|<certificate_date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</certificate_date>";
		
		
		Текст=Текст+"
		|</product> ";
		
		
		
	КонецЦикла;
	    Текст=Текст+"
		|</products_list>
		|</vvod>
		|";
//		
				
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Текст);
	КонецЕсли;
	
Возврат Текст 	
КонецФункции

&НаКлиенте
Процедура ТоварыКодТНВЭДПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ТекД=Элементы.Товары.ТекущиеДанные;
	ЗаписатьТНВЭД(ТекД.GTIN,ТекД.КодТНВЭД)
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьТНВЭД(GTIN,КодТНВЭД)
	ТекН=                   GTIN.ПолучитьОбъект();
	ТекН.КодТНВЭД=КодТНВЭД;
	ТекН.Записать()
Конецпроцедуры

&НаСервере
Процедура СчитатьОтправкуНаСервере()
	// Вставить содержимое обработчика.
	Хр=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.Получить(Новый Структура("Документ,Вид",Объект.Ссылка,"Отправлен заказ")).Файл;
	Если Хр<>Неопределено тогда
		Отправка=Хр.Получить();
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура СчитатьОтправку(Команда)
	СчитатьОтправкуНаСервере();
КонецПроцедуры

&НаСервере
Процедура СчитатьОтветНаСервере()
	// Вставить содержимое обработчика.
	Хр=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.Получить(Новый Структура("Документ,Вид",Объект.Ссылка,"Получили ответ")).Файл;
	Если Хр<>Неопределено тогда
		ОтветОтЦРПТ=Хр.Получить();
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура СчитатьОтвет(Команда)
	СчитатьОтветНаСервере();
КонецПроцедуры


Функция НайтиШаблон(Ш)
	К=Справочники.ШаблоныЭтикетокПриПечатиPDF_ХамелеонЦРПТ.НайтиПоНаименованию(Ш.Наименование);
	Если Не ЗначениеЗаполнено(К) Тогда
		К=1;
	Иначе
		К=К.Код;
	КонецЕсли;
	Возврат К
КонецФункции


Процедура ЗаписатьВрегистрPDF(PDF,Ссылка,orderID,НазваниеФайла)
	
	РегГ=РегистрыСведений.PDFФайлы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегГ.Отбор.Заказ.Установить(Ссылка);
	РегГ.Отбор.Код.Установить(orderID);
	Добав=РегГ.Добавить();
	Добав.Заказ=Ссылка;
	Добав.Код=orderID;
	Добав.НазваниеФайла=НазваниеФайла;
	Добав.ХранилищеФайла=Новый ХранилищеЗначения(PDF,Новый СжатиеДанных(9));
	РегГ.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	// Вставить содержимое обработчика.
	Если 	АвтоСерийные Тогда
		ТоварыСерийныйНомерНачалоВыбора(Элемент, "",Истина,ЛОжь)
		
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	// Вставить содержимое обработчика.
	
	ТекД=Элементы.Товары.ТекущиеДанные;
	НН=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",ТекД.НомерСтрокиСвязи));
	Для Каждого Стр_1 Из НН Цикл
		Объект.СерийныеНомера.Удалить(Стр_1);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЧерновик(Команда,УжеОтправили=Ложь )
	// Вставить содержимое обработчика.
	КонецПроцедуры

Функция ПолучитьФайлыПоДокументу()
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	PDFФайлы_ХамелеонЦРПТ.ХранилищеФайла
		|ИЗ
		|	РегистрСведений.PDFФайлы_ХамелеонЦРПТ КАК PDFФайлы_ХамелеонЦРПТ
		|ГДЕ
		|	PDFФайлы_ХамелеонЦРПТ.Заказ = &Заказ";
	
	Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивФайлов=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		МассивФайлов.Добавить(ВыборкаДетальныеЗаписи.ХранилищеФайла.Получить());
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Возврат 	МассивФайлов
КонецФункции

&НаКлиенте
Процедура ПечатьPDF(Команда)
	// Вставить содержимое обработчика.
	Yjv=0;
	ПолучилиФайл=ПолучитьФайлыПоДокументу();
	Для Каждого Стр Из ПолучилиФайл Цикл
		Если Стр=Неопределено Тогда
			Продолжить;
		КонецЕсли;
				ДвоичныеДанные=Стр;
				
					Каталог = КаталогВременныхФайлов();
	ИмяФайла = Строка(Новый УникальныйИдентификатор) + "2.xml";
	ВремФайл= Каталог+ИмяФайла;

			//	ВремФайл=ПолучитьИмяВременногоФайла(".pdf");
				ДвоичныеДанные.Записать(ВремФайл);
				//Если НаПринтер Тогда
				//	Shell = Новый COMОбъект("Shell.Application");
	    		//	Shell.ShellExecute(ВремФайл, "", "", "print", 0);				
					
					
//				Иначе
				
				Yjv=Yjv+1;
				ОткрытьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаСертификата",Новый Структура("Файл",ВремФайл),,Yjv);
//				КонецЕслИ;
			КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ТипДокументаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	УправлениеВидимостью(Истина );
КонецПроцедуры

&НаКлиенте
Процедура СобственникПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	УправлениеВидимостью(Истина)
КонецПроцедуры

&НаКлиенте
Процедура ШтрихКодПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ЗаполнитьИнфуПоШтриху();
	ПодключитьОбработчикОЖидания("аа",0.1,Истина);
КонецПроцедуры

&НаКлиенте
Процедура аа() Экспорт
	ШтрихКод="";
	ЭтаФорма.ТекущийЭлемент=Элементы.ШтрихКод;
КонецПроцедуры

Процедура ЗаполнитьИнфуПоШтриху(Стр_1=Неопределено)  Экспорт
	 	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Если Стр_1<>Неопределено И Стр_1<>ИСтина Тогда
		стр=Объект.СерийныеНомера.НайтиПоИдентификатору(Стр_1);
		ШтрихКод=Стр.cis;
	КонецЕсли;
	
Если Табак(Объект.ТекущийПользователь) тогда
		
	
	Если СтрДлина(ШтрихКод)=20 Тогда
		ШтрихКод=Сред(ШтрихКод,3);
	КонецЕсли;
	ШтрихКод_1=(ШтрихКод);
	
				Если Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",ШтрихКод)).Количество()>0 Тогда
			Сообщить("CiS "+ШтрихКод+" уже присутсвует в документе");
			Возврат;
		КонецЕсли;
	//КонецЕсли;	
	
	
	
	Если Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании Тогда
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.СерийныйНомер
		|ИЗ
		|	РегистрНакопления.ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки";
ИначеЕсли Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборот
	ИЛИ Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотИмпорт
	ИЛИ Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотКонтракт
	ИЛИ Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВоборотТрансграничнаяТорговля
	ИЛИ Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотФизЛицо
	ИЛИ Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ИмпортСФТС
	ИЛИ Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.МаркировкаОстатков
	ИЛИ Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.НаТерриторииСтранЕАЭСКонтрактноеПроизводство Тогда
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер
		|ИЗ
		|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки";
	
Иначе
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер
		|ИЗ
		|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.СерийныйНомер
		|ИЗ
		|	РегистрНакопления.ОстаткиКМ_в_Обороте_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.СерийныйНомер
		|ИЗ
		|	РегистрНакопления.ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки";
	
	
	Конецесли;
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СерийныйНомер", ШтрихКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество()=0 Тогда
				
		Если РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ПриЗаполненииОтгрузкиНеУчитыватьОстаток 
			ИЛИ Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотВозвратВРозницу
			ИЛИ Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНужд
			тогда
			
			
			попытка
				Если Сред(ШтрихКод,1,2)="01" Тогда
					Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
					Число(Сред(ШтрихКод,3,14)));;
				Иначе
					Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
					Число(Сред(ШтрихКод,1,14)));;
				КонецЕсли;
			Исключение
				Продукция=Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка();
			КонецПопытки;
			Если Стр=Неопределено тогда
				Добав=Объект.СерийныеНомера.Добавить();
			Иначе
					Добав=Стр;
				КонецЕсли;
				Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
				Добав.НаименованиеТовара=Продукция;
				Добав.cis=ШтрихКод;
				
				    ДатаГоденДо=Неопределено;
//				Если Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании Тогда
					//ДатаГоденДо=дата("20"+Сред(ШтрихКод,34,2),Сред(ШтрихКод,36,2),Сред(ШтрихКод,38,2));
////					ППП=Объект.Товары.НайтиСтроки(Новый структура("gtin,Годендо",Продукция,ДатаГоденДо));
	//			Иначе
				//Дата
					ППП=Объект.Товары.НайтиСтроки(Новый структура("gtin",Продукция));
	//			КонецЕсли;
				Если ППП.Количество()=0 Тогда
					Добав_1=Объект.Товары.Добавить();
					Добав_1.GTIN=Продукция;
					Добав_1.ГоденДо=ДатаГоденДо;
					Добав_1.КодТНВЭД=Продукция.КодТНВЭД;
			Если Продукция.СтранаПроизводства.Альфа2="RU" Тогда
				//СтрП="Производство в РФ";
					Добав_1.СпособВыпускаТоваров="Производство в РФ";
			Иначе
				//СтрП="Ввезен в РФ";
					Добав_1.СпособВыпускаТоваров="Ввезен в РФ";
				
			КонецЕсли;
					Добав_1.НомерСтрокиСвязи=Добав_1.ПолучитьИдентификатор();
					Добав_1.КоличествоКМ=1;
					Добав_1.ДекларацияИлиСертификатСоответствия=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(Объект.Дата,
					Новый Структура("Продукция",Продукция)).Документ;
				Иначе
					Добав_1=ППП[0];
					Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
					
				КонецЕсли;
				Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
				
			
		КонецЕслИ;
	Иначе
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
			Если ВыборкаДетальныеЗаписи.СерийныйНомер<>ШтрихКод Тогда
				Продолжить;
			КонецЕсли;
		
			
			Продукция=ВыборкаДетальныеЗаписи.Продукция;
			Если Стр=Неопределено тогда
				Добав=Объект.СерийныеНомера.Добавить();
			Иначе
				Добав=Стр;
			КонецЕсли;
			Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
			Добав.НаименованиеТовара=Продукция;
			Добав.cis=ШтрихКод;
			
			
			ППП=Объект.Товары.НайтиСтроки(Новый структура("gtin",Продукция));
			Если ППП.Количество()=0 Тогда
				Добав_1=Объект.Товары.Добавить();
				Добав_1.GTIN=Продукция;
				Добав_1.КодТНВЭД=Продукция.КодТНВЭД;
		Если Продукция.СтранаПроизводства.Альфа2="RU" Тогда
			//СтрП="Производство в РФ";
				Добав_1.СпособВыпускаТоваров="Производство в РФ";
		Иначе
			//СтрП="Ввезен в РФ";
				Добав_1.СпособВыпускаТоваров="Ввезен в РФ";
			
		КонецЕсли;
				Добав_1.НомерСтрокиСвязи=Добав_1.ПолучитьИдентификатор();
				Добав_1.КоличествоКМ=1;
				Добав_1.ДекларацияИлиСертификатСоответствия=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(Объект.Дата,
				Новый Структура("Продукция",Продукция)).Документ;
			Иначе
				Добав_1=ППП[0];
				Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
				
			КонецЕсли;
			Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
			
			Прервать;
		КонецЦикла;
		
	КонецЕсли;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		
		
		
		возврат;
	КонецЕсли;
	
	
	Если Молоко(Объект.ТекущийПользователь)
		тогда
		
	
	Если СтрДлина(ШтрихКод)=20 Тогда
		ШтрихКод=Сред(ШтрихКод,3);
	КонецЕсли;
	ШтрихКод_1=(ШтрихКод);
	
	Если Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании Тогда
		
		Если Сред(ШтрихКод,1,1)="(" Тогда
			
			ШтрихКод=Сред(ШтрихКод,2,2)+Сред(ШтрихКод,5,14)+
			Сред(ШтрихКод,20,2)+Сред(ШтрихКод,23,6)+Сред(ШТрихКод,30,2)+
			 Сред(ШтрихКод,33);
			
		Конецесли;
		
		
	Иначе
				
	
		//ШтрихКод=Сред(ШтрихКод,1,39);
						Если Сред(ШтрихКод,32,4)="7003" Тогда	
						 	ШтрихКод=Сред(ШтрихКод,1,45);
						ИначеЕсли Сред(ШтрихКод,32,2)="17" Тогда	
						 	ШтрихКод=Сред(ШтрихКод,1,39);
						ИначеЕсли ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак"
							ИЛИ ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак"
							Тогда
							Если Сред(ШтрихКод,1,2)="01" Тогда
						 		ШтрихКод=Сред(ШтрихКод,1,25);
							Иначе
						 		ШтрихКод=Сред(ШтрихКод,1,21);
								
							КонецЕсли;
						ИначеЕсли СтрДлина(ШтрихКод)<=30 Тогда
							ШтрихКод=Сред(ШтрихКод,1,24);
						Иначе
						 	ШтрихКод=Сред(ШтрихКод,1,31);
							
						КонецЕсли;
		Конецесли;
		Если Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",ШтрихКод)).Количество()>0 Тогда
			Сообщить("CiS "+ШтрихКод+" уже присутсвует в документе");
			Возврат;
		КонецЕсли;
	//КонецЕсли;	
	
	
	
	Если Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании Тогда
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.СерийныйНомер
		|ИЗ
		|	РегистрНакопления.ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки";
ИначеЕсли Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборот
	ИЛИ Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотИмпорт
	ИЛИ Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотКонтракт
	ИЛИ Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВоборотТрансграничнаяТорговля
	ИЛИ Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотФизЛицо
	ИЛИ Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ИмпортСФТС
	ИЛИ Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.МаркировкаОстатков
	ИЛИ Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.НаТерриторииСтранЕАЭСКонтрактноеПроизводство Тогда
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер
		|ИЗ
		|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки";
	
Иначе
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер
		|ИЗ
		|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.СерийныйНомер
		|ИЗ
		|	РегистрНакопления.ОстаткиКМ_в_Обороте_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.СерийныйНомер
		|ИЗ
		|	РегистрНакопления.ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки";
	

		
	Конецесли;
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СерийныйНомер", ШтрихКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество()=0 Тогда
				
		Если РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ПриЗаполненииОтгрузкиНеУчитыватьОстаток 
			ИЛИ Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотВозвратВРозницу
			ИЛИ ОБъект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНужд
			тогда
			
			
			попытка
				Если Сред(ШтрихКод,1,2)="01" Тогда
					Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
					Число(Сред(ШтрихКод,3,14)));;
				Иначе
					Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
					Число(Сред(ШтрихКод,1,14)));;
				КонецЕсли;
			Исключение
				Продукция=Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка();
			КонецПопытки;
			Если Стр=Неопределено тогда
				Добав=Объект.СерийныеНомера.Добавить();
			Иначе
					Добав=Стр;
				КонецЕсли;
				Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
				Добав.НаименованиеТовара=Продукция;
				Добав.cis=ШтрихКод;
				
				    ДатаГоденДо=Неопределено;
				//Если Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании Тогда
				//	ДатаГоденДо=дата("20"+Сред(ШтрихКод,34,2),Сред(ШтрихКод,36,2),Сред(ШтрихКод,38,2));
				//	ППП=Объект.Товары.НайтиСтроки(Новый структура("gtin,Годендо",Продукция,ДатаГоденДо));
				//Иначе
				//Дата
					ППП=Объект.Товары.НайтиСтроки(Новый структура("gtin",Продукция));
				//КонецЕсли;
				Если ППП.Количество()=0 Тогда
					Добав_1=Объект.Товары.Добавить();
					Добав_1.GTIN=Продукция;
					Добав_1.ГоденДо=ДатаГоденДо;
					Добав_1.КодТНВЭД=Продукция.КодТНВЭД;
			Если Продукция.СтранаПроизводства.Альфа2="RU" Тогда
				//СтрП="Производство в РФ";
					Добав_1.СпособВыпускаТоваров="Производство в РФ";
			Иначе
				//СтрП="Ввезен в РФ";
					Добав_1.СпособВыпускаТоваров="Ввезен в РФ";
				
			КонецЕсли;
					Добав_1.НомерСтрокиСвязи=Добав_1.ПолучитьИдентификатор();
					Добав_1.КоличествоКМ=1;
					Добав_1.ДекларацияИлиСертификатСоответствия=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(Объект.Дата,
					Новый Структура("Продукция",Продукция)).Документ;
				Иначе
					Добав_1=ППП[0];
					Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
					
				КонецЕсли;
				Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
				
					КонецЕслИ;
	Иначе
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
			Если ВыборкаДетальныеЗаписи.СерийныйНомер<>ШтрихКод Тогда
				Продолжить;
			КонецЕсли;
		
			
			Продукция=ВыборкаДетальныеЗаписи.Продукция;
			Если Стр=Неопределено тогда
				Добав=Объект.СерийныеНомера.Добавить();
			Иначе
				Добав=Стр;
			КонецЕсли;
			Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
			Добав.НаименованиеТовара=Продукция;
			Добав.cis=ШтрихКод;
			
			
			ППП=Объект.Товары.НайтиСтроки(Новый структура("gtin",Продукция));
			Если ППП.Количество()=0 Тогда
				Добав_1=Объект.Товары.Добавить();
				Добав_1.GTIN=Продукция;
				Добав_1.КодТНВЭД=Продукция.КодТНВЭД;
		Если Продукция.СтранаПроизводства.Альфа2="RU" Тогда
			//СтрП="Производство в РФ";
				Добав_1.СпособВыпускаТоваров="Производство в РФ";
		Иначе
			//СтрП="Ввезен в РФ";
				Добав_1.СпособВыпускаТоваров="Ввезен в РФ";
			
		КонецЕсли;
				Добав_1.НомерСтрокиСвязи=Добав_1.ПолучитьИдентификатор();
				Добав_1.КоличествоКМ=1;
				Добав_1.ДекларацияИлиСертификатСоответствия=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(Объект.Дата,
				Новый Структура("Продукция",Продукция)).Документ;
			Иначе
				Добав_1=ППП[0];
				Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
				
			КонецЕсли;
			Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
			
			Прервать;
		КонецЦикла;
		
	КонецЕсли;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		
		
		
		возврат;
	КонецЕсли;
	
	
//	Если Стр_1<>Неопределено И Стр_1<>ИСтина Тогда
//		стр=Объект.СерийныеНомера.НайтиПоИдентификатору(Стр_1);
//		ШтрихКод=Стр.cis;
//	КонецЕсли;
	Если СтрДлина(ШтрихКод)=20 Тогда
		ШтрихКод=Сред(ШтрихКод,3);
	КонецЕсли;
	ШтрихКод_1=(ШтрихКод);
	
	//ШтрихКод_1=КодироватьСтроку(ШтрихКод,СпособКодированияСтроки.КодировкаURL);
	//штрихКод=СтрЗаменить(ШтрихКод_1,"%1D","");
	
	Если Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Фото"  Тогда
		ШтрихКод=Сред(ШтрихКод,1,38);
	ИначеЕсли НЕ Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак" 
		И Не Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак"
		Тогда
		ШтрихКод=Сред(ШтрихКод,1,38);
	//штрихКод_1=РаскодироватьСтроку(ШтрихКод,СпособКодированияСтроки.КодировкаURL);
	
		Если Сред(штрихКод_1,32,3)<>"240" Тогда
								ШтрихКод=Сред(ШтрихКод,1,31);
								//ШтрихКод=Сред(штрихКод_1,1,Найти(штрихКод_1,"%1D")-1);
								//ШтрихКод=РаскодироватьСтроку(ШтрихКод,СпособКодированияСтроки.КодировкаURL);
							Иначе
								
								           ШтрихКод=штрихКод_1;
							
			
										   
									   КонецЕсли;
									   
									   
								   ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак" 
									   ИЛИ Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак" 
									   Тогда
									   Если Сред(ШтрихКод,1,2)="01" Тогда
						 				ШтрихКод=Сред(ШтрихКод,1,25);
									Иначе
						 				ШтрихКод=Сред(ШтрихКод,1,21);
									КонецЕсли;
									   
								   КонецЕсли;					
	//Если Стр_1=Неопределено Тогда
		Если Объект.СерийныеНомера.НайтиСтроки(Новый Структура("cis",ШтрихКод)).Количество()>0 Тогда
			Сообщить("CiS "+ШтрихКод+" уже присутствует в документе");
			Возврат;
		КонецЕсли;
	//КонецЕсли;	
	
	
	
	Если Стр_1=истина 
		ИЛИ ОБъект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота
		
		Тогда
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.СерийныйНомер
		|ИЗ
		|	РегистрНакопления.ОстаткиКМ_в_Обороте_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер
		|ИЗ
		|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.СерийныйНомер
		|ИЗ
		|	РегистрНакопления.ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки";
	Иначе
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер
		|ИЗ
		|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки";
	
КонецЕсли;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СерийныйНомер", ШтрихКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество()=0 Тогда
				
		Если РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ПриЗаполненииОтгрузкиНеУчитыватьОстаток 
			ИЛИ Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотВозвратВРозницу
			ИЛИ Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНужд
			
			тогда
			
			
			попытка
				Если Сред(ШтрихКод,1,2)="01" Тогда
					Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
					Число(Сред(ШтрихКод,3,14)));;
//						Сообщить(Число(Сред(ШтрихКод,3,14)));
//					Сообщить(Продукция);
				Иначе
					Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
					Число(Сред(ШтрихКод,1,14)));;
				КонецЕсли;
//				Число(Сред(ШтрихКод,3,14)));;
			Исключение
				Продукция=Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка();
			КонецПопытки;
			Если Стр=Неопределено тогда
				Добав=Объект.СерийныеНомера.Добавить();
			Иначе
					Добав=Стр;
				КонецЕсли;
				Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
				Добав.НаименованиеТовара=Продукция;
				Добав.cis=ШтрихКод;
				
				
				ППП=Объект.Товары.НайтиСтроки(Новый структура("gtin",Продукция));
				Если ППП.Количество()=0 Тогда
					Добав_1=Объект.Товары.Добавить();
					Добав_1.GTIN=Продукция;
					Добав_1.КодТНВЭД=Продукция.КодТНВЭД;
			Если Продукция.СтранаПроизводства.Альфа2="RU" Тогда
				//СтрП="Производство в РФ";
					Добав_1.СпособВыпускаТоваров="Производство в РФ";
			Иначе
				//СтрП="Ввезен в РФ";
					Добав_1.СпособВыпускаТоваров="Ввезен в РФ";
				
			КонецЕсли;
					Добав_1.НомерСтрокиСвязи=Добав_1.ПолучитьИдентификатор();
					Добав_1.КоличествоКМ=1;
					Добав_1.ДекларацияИлиСертификатСоответствия=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(Объект.Дата,
					Новый Структура("Продукция",Продукция)).Документ;
				Иначе
					Добав_1=ППП[0];
					Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
					
				КонецЕсли;
				Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
				
			
		КонецЕслИ;
	Иначе
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
			Если ВыборкаДетальныеЗаписи.СерийныйНомер<>ШтрихКод Тогда
				Продолжить;
			КонецЕсли;
		
			
			Продукция=ВыборкаДетальныеЗаписи.Продукция;
			Если не ЗначениеЗаполнено(Продукция) тогда
				попытка
					Если Сред(ШтрихКод,1,2)="01" Тогда
						Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
						Число(Сред(ШтрихКод,3,14)));;
	//						Сообщить(Число(Сред(ШтрихКод,3,14)));
	//					Сообщить(Продукция);
					Иначе
						Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
						Число(Сред(ШтрихКод,1,14)));;
					КонецЕсли;
	//				Число(Сред(ШтрихКод,3,14)));;
				Исключение
					Продукция=Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка();
				КонецПопытки;
			Конецесли;

			
			Если Стр=Неопределено тогда
				Добав=Объект.СерийныеНомера.Добавить();
			Иначе
				Добав=Стр;
			КонецЕсли;
			
			
			
			Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
			Добав.НаименованиеТовара=Продукция;
			Добав.cis=ШтрихКод;
			
			
			ППП=Объект.Товары.НайтиСтроки(Новый структура("gtin",Продукция));
			Если ППП.Количество()=0 Тогда
				Добав_1=Объект.Товары.Добавить();
				Добав_1.GTIN=Продукция;
				Добав_1.КодТНВЭД=Продукция.КодТНВЭД;
		Если Продукция.СтранаПроизводства.Альфа2="RU" Тогда
			//СтрП="Производство в РФ";
				Добав_1.СпособВыпускаТоваров="Производство в РФ";
		Иначе
			//СтрП="Ввезен в РФ";
				Добав_1.СпособВыпускаТоваров="Ввезен в РФ";
			
		КонецЕсли;
				Добав_1.НомерСтрокиСвязи=Добав_1.ПолучитьИдентификатор();
				Добав_1.КоличествоКМ=1;
				Добав_1.ДекларацияИлиСертификатСоответствия=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(Объект.Дата,
				Новый Структура("Продукция",Продукция)).Документ;
			Иначе
				Добав_1=ППП[0];
				Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
				
			КонецЕсли;
			Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
			
			Прервать;
		КонецЦикла;
		
	КонецЕсли;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры

&НаКлиенте
Процедура ШтрихКодАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если СтрДлина(Текст)>=18
		Тогда
		       СтандартнаяОбработка=Ложь;
			   ШтрихКод=Текст;
			  ЗаполнитьИнфуПоШтриху(); 
	ПодключитьОбработчикОЖидания("аа",0.1,Истина);
			  КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СерийныеНомераТаблицаСерийныйНомерПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ЗаполнитьИнфуПоШтриху(Элементы.СерийныеНомераТаблица.ТекущиеДанные.ПолучитьИдентификатор());
	ПодключитьОбработчикОЖидания("аа",0.1,Истина);
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ДекларацияИлиСертификатСоответствияПриИзмененииНаСервере(ДатаТ,Продукция,Декларация)
	// Вставить содержимое обработчика.
	
	Если ЗначениеЗаполнено(Декларация.ДатаНачалаДействия)
		И РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(ДатаТ,
		Новый Структура("Продукция",Продукция)).Документ<>Декларация Тогда
		
		РегСв=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
		РегСв.Отбор.Продукция.Установить(Продукция);
		РегСв.Отбор.Период.Установить(Декларация.ДатаНачалаДействия);
		Добав=РегСв.Добавить();
		Добав.Период=Декларация.ДатаНачалаДействия;
		Добав.Продукция=Продукция;
		Добав.Документ=Декларация;
		Регсв.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДекларацияИлиСертификатСоответствияПриИзменении(Элемент)
	ТекД=Элементы.Товары.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекД.GTIN)
		И ЗначениеЗаполнено(ТекД.ДекларацияИлиСертификатСоответствия) Тогда
		ДекларацияИлиСертификатСоответствияПриИзмененииНаСервере(Объект.Дата,ТекД.GTIN,ТекД.ДекларацияИлиСертификатСоответствия);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция Молоко(ТекущПользователь)
	Возврат ТекущПользователь.СайтыВходаВСистему.Наименование="Молоко"
Конецфункции

&НаСервереБезКонтекста
Функция Табак(ТекущПользователь)
	Возврат ТекущПользователь.СайтыВходаВСистему.Наименование="Табак"
	ИЛИ ТекущПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак"
Конецфункции

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
		Если Копирование=Ложь тОгда
		Отказ=Истина;
		Если Элемент.ТекущиеДанные<>Неопределено Тогда
			РРР=Элемент.ТекущиеДанные.GTIN;
		Иначе
			РРР=Неопределено;
		КонецЕсли;
		
		Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании")  
			И (Молоко(Объект.ТекущийПользователь) 
			   ИЛИ Табак(Объект.ТекущийПользователь)
			   
			   )
			
			Тогда
			
			ОткрытьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаВыбораКМ_Отчет",
			Новый структура("Организация,ТекущаяСтрока",Объект.Организация,РРР),,,,,
			Новый ОписаниеОповещения("ПослеВыбораПродукции",ЭтаФорма,Элемент));
			
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота") 
	//		ИЛИ Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНужд")
//			ИЛИ Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНуждПокупателем")
			
		Тогда
			ОткрытьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаВыбораКМ",
			Новый структура("Организация,ТекущаяСтрока",Объект.Организация,РРР),,,,,
			Новый ОписаниеОповещения("ПослеВыбораПродукции",ЭтаФорма,Истина));
		Иначе
		ОткрытьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаВыбораКМ",
		Новый структура("Организация,ТекущаяСтрока",Объект.Организация,РРР),,,,,
		Новый ОписаниеОповещения("ПослеВыбораПродукции",ЭтаФорма,Элемент));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПослеВыбораПродукции(РР,ДД) Экспорт
	Если РР<>Неопределено Тогда
		Для Каждого Стр Из РР ЦИкл
			ШтрихКод=Стр;
			Если ДД=Истина Тогда
				ЗаполнитьИнфуПоШтриху(ДД);
			Иначе
				ЗаполнитьИнфуПоШтриху();
			КонецЕслИ;
		Конеццикла;
		ШтрихКод="";
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СерийныеНомераТаблицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
		Отказ=Истина;
		Если Элемент.ТекущиеДанные<>Неопределено Тогда
			РРР=Элемент.ТекущиеДанные.GTIN;
		Иначе
			РРР=Неопределено;
		КонецЕсли;
		ОткрытьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаВыбораКМ",
		Новый структура("Организация,ТекущаяСтрока",Объект.Организация,РРР),,,,,
		Новый ОписаниеОповещения("ПослеВыбораПродукции",ЭтаФорма,Элемент));
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьНомерКоробаДляВыделенных(Команда)
	УстановитьНомерКоробаДляВыделенныхСервер(Элементы.СерийныеНомераТаблица.ВыделенныеСтроки);
	
КонецПроцедуры
Процедура УстановитьНомерКоробаДляВыделенныхСервер(Знач Выд)
	НоваяУпаковка=xmlString(Новый УникальныйИдентификатор());
	НоваяУпаковка=СтрЗаменить(НоваяУпаковка,"-","");
	НоваяУпаковка=Сред(НоваяУпаковка,1,18);
	Для Каждого Стр_2 Из Выд Цикл
		Стр_1=Объект.СерийныеНомера.НайтиПоИдентификатору(Стр_2);
		Стр_1.НомерКороба=НоваяУпаковка
		
	Конеццикла;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если Поле.Имя="ТоварыGTIN" Тогда
		ОткрытьФорму("Справочник.Продукция_ХамелеонЦРПТ.ФормаОбъекта",Новый Структура("КЛюч",Элементы.Товары.ТекущиеДанные.GTIN));
	КонецЕслИ;
КонецПроцедуры
&НаКлиенте
Процедура Подсчитать(Команда)
	// Вставить содержимое обработчика.
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
		
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	
		Если не ЗначениеЗаполнено(Срегистра) тогда
			Возврат
		Конецесли;
	
	Для Каждого Стр Из Объект.Товары Цикл
		Стр.КоличествоНомеровКМ=0;
		Нстр=ОБъект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		
		Для Каждого Стр_М Из НСТр Цикл
			Если Стр_М.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка") Тогда
				
				РекурсияУпаковки(Стр_М,Стр.КоличествоНомеровКМ,Thumbprint_1,СРегистра);
				
				
			Иначе
				Стр.КоличествоНомеровКМ=Стр.КоличествоНомеровКМ+1;
			КонецЕсли;
			
		КонецциклА;
		
		
		
	КонецЦикла;
КонецПроцедуры



&НаКлиенте
Процедура РекурсияУпаковки(Строк,Количество,Thumbprint_1,СРегистра)
	
	
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		Сообщить("Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
	ММ= Строк.cis;
			
	HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ));
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	//ЧтениеJSON = Новый ЧтениеJSON;
	//ЧтениеJSON.УстановитьСтроку(Текст1);
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);
	
	Попытка
	Для Каждого Стр_1 Из NNN.children Цикл
		Если Стр_1.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка") Тогда
			РекурсияУпаковки(Стр_1 ,Количество,Thumbprint_1,СРегистра)
		КонецеслИ;
	КонецЦиклА;
	Исключение
			Количество=Количество+1;
	КонецПопытки; 
	
КонецПроцедуры


Процедура РекурсияУпаковкиСервер(Строк,Количество,Thumbprint_1,СРегистра)
	
	
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		Сообщить("Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
	ММ= Строк.cis;
			
	HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ));
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	//ЧтениеJSON = Новый ЧтениеJSON;
	//ЧтениеJSON.УстановитьСтроку(Текст1);
	попытка
		NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
		
		Для Каждого Стр_1 Из NNN.children Цикл
		//	Если СтрДлина(Стр_1.cis)=18 Тогда
				РекурсияУпаковкиСервер(Стр_1 ,Количество,Thumbprint_1,СРегистра)
		//	Иначе
		//		Количество=Количество+1;
		//	КонецеслИ;
		КонецЦиклА;
	Исключение
			Количество=Количество+1;
	КонецПопытки	
	
КонецПроцедуры

Процедура   НаСервереВыд(СРегистра,Thumbprint_1)
Для Каждого Стр_1 Из Элементы.Товары.ВыделенныеСтроки Цикл
			Стр=Объект.Товары.НайтиПоИдентификатору(Стр_1);
			Стр.КоличествоНомеровКМ=0;
			Нстр=ОБъект.СерийныеНомера.НайтиСтроки(Новый Структура("НаименованиеТовара",Стр.GTIN));
			
			Для Каждого Стр_М Из НСТр Цикл
				Если Стр_М.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
					
					РекурсияУпаковкиСервер(Стр_М,Стр.КоличествоНомеровКМ,Thumbprint_1,СРегистра);
					
					
				Иначе
					Стр.КоличествоНомеровКМ=Стр.КоличествоНомеровКМ+1;
				КонецЕсли;
				
			КонецциклА;
			
			
			
		КонецЦикла;	
	КонецПроцедуры
&НаКлиенте
Процедура ВУпаковке(Команда)
	// Вставить содержимое обработчика.
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
		
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	
		
		Если не ЗначениеЗаполнено(Срегистра) тогда
			Возврат
		Конецесли;

	
	Если ОбработкаWEBНаСервере Тогда
		НаСервереВыд(СРегистра,Thumbprint_1);
			
		
	Иначе

		Для Каждого Стр_1 Из Элементы.Товары.ВыделенныеСтроки Цикл
			Стр=Объект.Товары.НайтиПоИдентификатору(Стр_1);
			Стр.КоличествоНомеровКМ=0;
			Нстр=ОБъект.СерийныеНомера.НайтиСтроки(Новый Структура("НаименованиеТовара",Стр.GTIN));
			
			Для Каждого Стр_М Из НСТр Цикл
				Если Стр_М.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка") Тогда
					
					РекурсияУпаковки(Стр_М,Стр.КоличествоНомеровКМ,Thumbprint_1,СРегистра);
					
					
				Иначе
					Стр.КоличествоНомеровКМ=Стр.КоличествоНомеровКМ+1;
				КонецЕсли;
				
			КонецциклА;
			
			
			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Вставить содержимое обработчика.
	НачатьПолучениеКаталогаВременныхФайлов(Новый ОписаниеОповещения("ПослеПолученияКаталога",Этаформа));
	ПодсчетИтоговПоКМ()                  ;
	Если Не ЗначениеЗаполнено(ТекущийПользователь) тогда
		Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
		ТекущийПользователь=Форм.Пользователь;
	//Иначе
	//	ТекущийПользователь=Объект.ТекущийПользователь;
	КонецЕсли;
	ЭтаФорма.Активизировать();
	ИзменитьВидимость()
 	
КонецПроцедуры


&НаКлиенте
Процедура ПослеПолученияКаталога(Кат,ДД) Экспорт
	КаталогВременныхФайловНаКлиенте=Кат;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтатусыПоКМ(Команда,ТолькоА=Ложь)
	// Вставить содержимое обработчика.
	
	МассивКМ=Новый Массив;
	Для каждого Стр_1 Из Объект.СерийныеНомера Цикл
		
		Если ВРЕГ(Стр_1.статус)="INTRODUCED" ИЛИ (Врег(Стр_1.Статус)="APPLIED" И ТолькоА=Ложь) Тогда
			Продолжить;
		КонецЕсли;
		Стр_1.Статус="Не найдено в ЦРПТ";
		
		
		МассивКМ.Добавить(Стр_1.cis);
	Конеццикла;	
	ОбработатьстатусыКМ(МассивКМ);
	
	Возврат;
	
	
	
	Thumbprint_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
		
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	
		Если не ЗначениеЗаполнено(Срегистра) тогда
			Возврат
		Конецесли;

	Для каждого Стр_1 Из Объект.СерийныеНомера Цикл
		
		Если ВРЕГ(Стр_1.статус)="INTRODUCED" ИЛИ (Врег(Стр_1.Статус)="APPLIED" И ТолькоА=Ложь) Тогда
			Продолжить;
		КонецЕсли;
		    Стр_1.Статус=Неопределено;
	   НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	
	   Если НаСервере Тогда
		 Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Стр_1.cis);  
		Иначе
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			Если Thumbprint_1.НаименованиеСтенда="Табак"
				ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
				Тогда
	
		NN=ВернутьТелоЗапросаПодключение(Стр_1.cis);
						
	
			HTTPЗапрос=Новый HTTPЗапрос("private-office-api/private/v2/cis/status");
			//private-office-api/private/v2/cis/"+КодМаркировки+"/mrp"
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин   
			HTTPЗапрос.УстановитьТелоИзСтроки(NN,КодировкаТекста.UTF8);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
Иначе
			
			Текст=Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(Стр_1.cis);
			Марк=Текст.Получитьтекст();
	
			что=Thumbprint_1.что;
	
	ММ= Стр_1.cis;
	
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"&pg="+что);
//		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"&pg="+что);;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
КонецЕсли;
КонецЕсли;

		Если НаСервере Тогда
			Текст1=Ответ.ПолучитьТелоКакСтроку;
			
		Иначе
			Текст1=Ответ.ПолучитьТелоКакСтроку();
		КонецЕсли;	
		
		Если Thumbprint_1.НаименованиеСтенда="Табак"
			ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
			Тогда
		
			Попытка
		//ЧтениеJSON = Новый ЧтениеJSON;
		//	ЧтениеJSON.УстановитьСтроку(Текст1);
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Если NNN=Неопределено тогда
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Стр_1.Статус=NNN["status"];
					
			Иначе
				Стр_1.Статус=NNN.status;
			КонецЕсли;
			
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Сообщить(Текст1);
			КонецПопытки;
	
Иначе
//ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(Текст1);
Попытка
	Если Ответ.КодСостояния=200 Тогда
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Если NNN=Неопределено тогда
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Стр_1.Статус=NNN["status"];
					
			Иначе
				Стр_1.Статус=NNN.status;
			КонецЕсли;
		Иначе
		
		Стр_1.Статус=Ответ.КодСостояния;
		 Сообщить(Текст1);
	КонецЕсли;
	

	
Исключение
	Сообщить(ОписаниеОшибки());
	Сообщить(Текст1);
КонецПопытки;
КонецЕсли;



	Конеццикла;

	ИзменитьВидимость()
	
КонецПроцедуры
&НаСервереБезКонтекста
Функция ВернутьТелоЗапросаПодключение(cis)
	МассивКодо=Новый Массив;
	          МассивКодо.Добавить(cis);
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("ids", МассивКодо);
			ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, "  ");
			
			ЗаписьJSON = Новый ЗаписьJSON();
			ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
			
			ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
			
			Возврат ЗаписьJSON.Закрыть();

КонецФункции

&НаКлиенте
Процедура ПодсчетИтоговПоКМ()
	ИтогоКМ=0;
	ИтогУпаковок=0;
	КоличествоКрасныхтрочек=0;
	Для Каждого Стр_1 Из ДеревоКМ.ПолучитьЭлементы() Цикл
		Стр_1.Количество=0;
		Если Стр_1.ПолучитьЭлементы().Количество()=0 Тогда
			Стр_1.Красный=Истина;
			КоличествоКрасныхтрочек=КоличествоКрасныхтрочек+1;
		КонецЕсли;
		РекурсияПодсчета(Стр_1);
	Конеццикла;
	
	Для Каждого Стр_1 Из ДеревоКМ.ПолучитьЭлементы() Цикл
		
		РекурсияПодсчета_Суммы(Стр_1,Стр_1.Количество);
		
		
	Конеццикла;
КонецПроцедуры
&НаКлиенте
Процедура ПоказатьИнформацию(Команда,ФормиуремТекстФормироваания=Ложь)
	ЭтаФорма.Записать();
	МассивCis=Новый Массив;
	ДеревоКМ.ПолучитьЭлементы().Очистить();
	Для Каждого Стр_ иЗ ОБъект.СерийныеНомера Цикл
		
		Если ФормиуремТекстФормироваания=Истина И  СтрДлина(Стр_.cis)=24 Тогда
			ПродолжитЬ;
		Конецесли;
			МассивCis.Добавить(Стр_.cis);
		//Конецесли;
	Конеццикла;
	
	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюПоКМ_Массив(ДеревоКМ,МассивCis,Объект.ТекущийПользователь);
	
	
	ПодсчетИтоговПоКМ();
	
	Элементы.СтраницыТЧ.ТекущаяСтраница=Элементы.ИнформацияОКМ;
	
	
	СохранитьДеревоНаСервере();
	
КонецПроцедуры

Процедура СохранитьДеревоНаСервере()
	РегДв=РегистрыСведений.СохранитьДеревоИнформациюОНомерахКМВводВОборот_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.ВводВОборот.Установить(Объект.Ссылка);
	Добав=РегДв.Добавить();
	Добав.ВводВОборот=Объект.Ссылка;
	
	ТаблицаВыгрузки=Новый ДеревоЗначений;
	ТаблицаВыгрузки.Колонки.Добавить("Уровень");
	ТаблицаВыгрузки.Колонки.Добавить("НомерКороба");
	ТаблицаВыгрузки.Колонки.Добавить("НомерКМ");
	ТаблицаВыгрузки.Колонки.Добавить("Продукция");
	ТаблицаВыгрузки.Колонки.Добавить("Количество");
	ТаблицаВыгрузки.Колонки.Добавить("cis");
	ТаблицаВыгрузки.Колонки.Добавить("Статус");
	ТаблицаВыгрузки.Колонки.Добавить("Вспомогательный");
	
	Сч=0;
	Для Каждого Стр_1 Из ДеревоКМ.ПолучитьЭлементы() Цикл
		Добав_Т=ТаблицаВыгрузки.Строки.Добавить();
		РекурсияПоДереву(Добав_Т,Сч,Стр_1);
	Конеццикла;
	
	
	Добав.Хранилище=Новый ХранилищеЗначения(ТаблицаВыгрузки);
	РегДв.Записать(Истина);
КонецПроцедуры

Процедура РекурсияПоДереву(Добав,Знач Сч,Стр_1)
	//Добав=ТаблицаВыгрузки.Добавить();
	ЗаполнитьЗначенияСвойств(Добав,Стр_1);
	Добав.Уровень=Сч;
	Сч=Сч+1;
	Для Каждого Стр_2 Из Стр_1.ПолучитьЭлементы() Цикл
		Добав_22=Добав.Строки.Добавить();
		РекурсияПоДереву(Добав_22,Сч,Стр_2);
	Конеццикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РекурсияПодсчета(Стр_2)
	
	Если Стр_2.ПолучитьЭлементы().Количество()=0 Тогда
		Стр_2.Количество=0;
		ИтогоКМ=ИтогоКМ+1;
	Иначе
		ИтогУпаковок=ИтогУпаковок+1;
		Для Каждого Стр_3 Из Стр_2.ПолучитьЭлементы() Цикл
			Стр_3.Количество=0;
			РекурсияПодсчета(Стр_3)
		Конеццикла;
	КонецЕсли;
	
КонецПроцедуры



&НаКлиенте
Процедура РекурсияПодсчета_Суммы(Стр_2,КоличествоКМ)
	
	Если Стр_2.ПолучитьЭлементы().Количество()=0 Тогда
		КоличествоКМ=КоличествоКМ+1;
		Стр_2.Количество=1;
	Иначе
		Для Каждого Стр_3 Из Стр_2.ПолучитьЭлементы() Цикл
			РекурсияПодсчета_Суммы(Стр_3,Стр_3.Количество);
			КоличествоКМ=КоличествоКМ+Стр_3.Количество;
		Конеццикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИз(Команда)
	// Вставить содержимое обработчика.
		// Вставить содержимое обработчика.
		
	МассивКМ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ВернутьКМИзФайлов();
	НаСервереДобавляем(МассивКМ);
	ПодключитьОбработчикОЖидания("аа",0.1,Истина);
КонецПроцедуры

Процедура НаСервереДобавляем(МассивКМ)
	Для Каждого ШтрихОбраб Из МассивКМ Цикл
		ШтрихКод68=ШтрихОбраб;
		
		шТРИХкОД=ШтрихКод68;
		шТРИХкОД=СтрЗаменить(шТРИХкОД,Символ(29),"");
		ЗаполнитьИнфуПоШтриху();

	КонецЦикла;
	
	
КонецПроцедуры


&НаКлиенте
Процедура ПроверкаКМВДереве(Команда)
	// Вставить содержимое обработчика.
	
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
		
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		Сообщить("Не удалось получить токен по организации");
		Возврат;
	Конецесли;

	Для Каждого стр_1 Из ДеревоКМ.ПолучитьЭлементы() Цикл
		
		
		Рекурсия_статуссов(Стр_1,Thumbprint_1,СРегистра)
		
	Конеццикла;
КонецПроцедуры

&НаКлиенте
Процедура Рекурсия_статуссов(Стр_1,Thumbprint_1,СРегистра)	
	
	Если Не ЗначениеЗаполнено(Стр_1.cis) Тогда
	                 Стр_1.cis=Стр_1.НомерКМ;
					КонецЕсли;
		  Стр_1.Статус=Неопределено;
	   НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	
	   Если НаСервере Тогда
		 Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Стр_1.cis);  
		Иначе
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			Если Thumbprint_1.НаименованиеСтенда="Табак" 
				ИЛИ
				Thumbprint_1.НаименованиеСтенда="Альтернативный табак" 
				
				Тогда
	
		NN=ВернутьТелоЗапросаПодключение(Стр_1.cis);
						
	
			HTTPЗапрос=Новый HTTPЗапрос("private-office-api/private/v2/cis/status");
			//private-office-api/private/v2/cis/"+КодМаркировки+"/mrp"
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин   
			HTTPЗапрос.УстановитьТелоИзСтроки(NN,КодировкаТекста.UTF8);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
Иначе
	
	ММ= Стр_1.cis;
	
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ));
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Попытка
		Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
	исключение
		Возврат;
	Конецпопытки;
КонецЕсли;
КонецЕсли;

		Если НаСервере Тогда
			Текст1=Ответ.ПолучитьТелоКакСтроку;
			
		Иначе
			Текст1=Ответ.ПолучитьТелоКакСтроку();
		КонецЕсли;	
		
		Если Thumbprint_1.НаименованиеСтенда="Табак" 
			ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак" 
			Тогда
		
			Попытка
		//ЧтениеJSON = Новый ЧтениеJSON;
		//	ЧтениеJSON.УстановитьСтроку(Текст1);
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Стр_1.Статус=NNN[0].status;
			
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Сообщить(Текст1);
			КонецПопытки;
	
Иначе
//ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(Текст1);
Попытка
	
	Если Ответ.КодСостояния=200 Тогда
		NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
		Стр_1.Статус=NNN.status;
	Иначе
		
					Стр_1.Статус=Ответ.КодСостояния;
					Если   Ответ.КодСостояния=404 Тогда
						Стр_1.Статус=Стр_1.Статус+" не найдено в базе"
				КонецЕсли;
		 Сообщить(Текст1);
	КонецЕсли;
	
	
Исключение
	Сообщить(ОписаниеОшибки());
	Сообщить(Текст1);
КонецПопытки;
КонецЕсли;


	
Для Каждого Стр_2 Из Стр_1.ПолучитьЭлементы() Цикл
	Рекурсия_статуссов(Стр_2,Thumbprint_1,СРегистра)	
	Конеццикла;
	
Конецпроцедуры


&НаКлиенте
Процедура ПолучитьДлинныеКМ(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Стр_2 Из ДеревоКМ.ПолучитьЭлементы() Цикл
		Рек(Стр_2);
		
	Конеццикла;
	
	СохранитьДеревоНаСервере()
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиПо(cis)
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказМарок_ХамелеонЦРПТКМИзAPI.НомерКМ,
		|	ЗаказМарок_ХамелеонЦРПТКМИзAPI.НомерКМ_Короткий
		|ИЗ
		|	Документ.ЗаказМарок_ХамелеонЦРПТ.КМИзAPI КАК ЗаказМарок_ХамелеонЦРПТКМИзAPI
		|ГДЕ
		|	ЗаказМарок_ХамелеонЦРПТКМИзAPI.НомерКМ_Короткий = &НомерКМ_Короткий";
	
	Запрос.УстановитьПараметр("НомерКМ_Короткий", cis);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.НомерКМ_Короткий=cis Тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
			Возврат ВыборкаДетальныеЗаписи.НомерКМ
		Конецесли;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты.Регистратор
		|ИЗ
		|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Обороты(, , Регистратор, СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты
		|ГДЕ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты.Регистратор ССЫЛКА Документ.ЗаказМарок_ХамелеонЦРПТ";
	
	Запрос.УстановитьПараметр("СерийныйНомер", cis);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		КодИр=КодироватьСтроку(cis,СпособКодированияСтроки.КодировкаURL);
		Для Каждого Стр_1 Из    ВыборкаДетальныеЗаписи.Регистратор.КМИзAPI Цикл
			
			Если Найти(Стр_1.НомерКМ,КодИр)=1 Тогда
				Возврат             Стр_1.НомерКМ
			Конецесли;
		Конеццикла;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
КонецФункции

&НаКлиенте
Процедура Рек (Стр_3)
	
	Если Стр_3.ПолучитьЭлементы().Количество()=0 ТОгда
	Если Не ЗначениеЗаполнено(Стр_3.cis) Тогда
	                 Стр_3.cis=Стр_3.НомерКМ;
					КонецЕсли;
		Стр_3.Вспомогательный=НайтиПо(Стр_3.cis);
	Иначе
		ДЛя Каждого Стр_2 Из Стр_3.ПолучитьЭлементы() Цикл
			Рек(Стр_2);
		Конеццикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВTXT(Команда)
	// Вставить содержимое обработчика.
	ДилогВыбора=Новый ДиалогВыбораФайла(РежимдиалогаВыбораФайла.ВыборКаталога);
	ДилогВыбора.Заголовок="Выберите каталог для сохранения файлов с номерами КМ";
	Если ДилогВыбора.Выбрать() Тогда
		Каталог=ДилогВыбора.Каталог;
	//	Форм=ЭтаФорма.ВладелецФормы.Элементы.ЗаказыТаблица.ВыделенныеСтроки;
	//	Для Каждого Стр_1 Из Форм Цикл
			
			Номер="";
			ДвоичнД=СохранитьФайлНаДИске(Объект.Ссылка,Номер);
			
			ИмяФ=Каталог+"\"+Номер+".txt";
			ДвоичнД.Записать(ИмяФ);
	//	Конеццикла;
		
		
	КонецЕсли;
	
	
	
КонецПроцедуры

Процедура Рек_Запис(ТексТД,ДД)
	
	
	Если ЗначениеЗаполнено(ДД.Вспомогательный) Тогда
		сшш=РаскодироватьСтроку(ДД.Вспомогательный,способКодированияСтроки.КодировкаURL);
		ТексТД.ДобавитьСтроку(сшш);
		
	КонецЕсли;
	Для Каждого Стр_2 Из ДД.ПолучитьЭлементы() Цикл
		Рек_Запис(ТексТД,Стр_2)
		
	Конеццикла;
	
КонецПроцедуры

Функция СохранитьФайлНаДИске(Ссылка,Номер)
	
	ТекстД=Новый ТекстовыйДокумент;
	Номер=Объект.Номер;
	//ТекстД.ДобавитьСтроку(Ссылка.Номер);
	
	ТаблицаТоваров=Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	//ТаблицаТоваров.Колонки.Добавить("Продукция");
	ТаблицаТоваров.Колонки.Добавить("НомерКороба");
	
	Для Каждого Стр_1 ИЗ Объект.Товары Цикл
		
		НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",
		Стр_1.НомерСтрокиСвязи));
		Для Каждого Стр_2 Из НСтрок Цикл
			
			Добав=ТаблицаТоваров.Добавить();
			Добав.Артикул=Стр_1.gtin.МодельПроизводителяАртикул;
			//Добав.Продукция=Стр_1.gtin;
			Добав.НомерКороба=Стр_2.cis;
			
		Конеццикла;
		
		
	Конеццикла;
	таблицаТоваров.Свернуть("Артикул,НомерКороба");
	таблицаТоваров.Сортировать("Артикул,НомерКороба");
	
	Артикул="ываывавыаываываыв";
	
	Для Каждого Стр_1 Из таблицаТоваров Цикл
		Если Артикул<>Стр_1.Артикул Тогда
				ТекстД.ДобавитьСтроку(Стр_1.Артикул);
			КонецЕсли;
		ТекстД.ДобавитьСтроку(Стр_1.НомерКороба);
		Для Каждого ДД ИЗ ДеревоКМ.ПолучитьЭлементы() Цикл
			Если ДД.НомерКороба=Стр_1.НомерКороба Тогда
				
				Рек_Запис(ТексТД,ДД);
			
//				РР=РаскодироватьСтроку(ДД.НомерКМ,СпособКодированияСтроки.КодировкаURL);
//				ТекстД.ДобавитьСтроку(РР);
			КонецЕсли;
		Конеццикла;
		
		Артикул=Стр_1.Артикул;
		
		
	Конеццикла;
	
	
	//ТаблицаТоваров.Колонки.Добавить("Артикул");
	
	
	
	

	
//	Для Каждого ДД ИЗ ДеревоКМ.ПолучитьЭлементы() Цикл
//		Рек_Запис(ТексТД,ДД);
		
//		РР=РаскодироватьСтроку(ДД.НомерКМ,СпособКодированияСтроки.КодировкаURL);
//		ТекстД.ДобавитьСтроку(РР);
//	Конеццикла;
	
	//ИмяТекст=ПолучитьИмяВременногоФайла();
	//ТекстД.Записать(ИмяТекст);
	ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстД.ПолучитьТекст());//Новый ДвоичныеДанные(ИмяТекст);
	//УдалитьФайлы(ИмяТекст);
	Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстД.ПолучитьТекст());
	
КонецФункции

&НаСервере
Функция СохранитьФайлНаДИске_БезКоробов(Ссылка,Номер)
	// Вставить содержимое обработчика.
	
	ТекстД=Новый ТекстовыйДокумент;
	Номер=Объект.Номер;
	//ТекстД.ДобавитьСтроку(Ссылка.Номер);
	
	ТаблицаТоваров=Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	//ТаблицаТоваров.Колонки.Добавить("Продукция");
	ТаблицаТоваров.Колонки.Добавить("НомерКороба");
	
	Для Каждого Стр_1 ИЗ Объект.Товары Цикл
		
		НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",
		Стр_1.НомерСтрокиСвязи));
		Для Каждого Стр_2 Из НСтрок Цикл
			
			Добав=ТаблицаТоваров.Добавить();
			Добав.Артикул=Стр_1.gtin.МодельПроизводителяАртикул;
			//Добав.Продукция=Стр_1.gtin;
			Добав.НомерКороба=Стр_2.cis;
			
		Конеццикла;
		
		
	Конеццикла;
	таблицаТоваров.Свернуть("Артикул,НомерКороба");
	таблицаТоваров.Сортировать("Артикул,НомерКороба");
	
	Артикул="ываывавыаываываыв";
	
	Для Каждого Стр_1 Из таблицаТоваров Цикл
		Если Артикул<>Стр_1.Артикул Тогда
				ТекстД.ДобавитьСтроку(Стр_1.Артикул);
			КонецЕсли;
	//	ТекстД.ДобавитьСтроку(Стр_1.НомерКороба);
		Для Каждого ДД ИЗ ДеревоКМ.ПолучитьЭлементы() Цикл
			Если ДД.НомерКороба=Стр_1.НомерКороба Тогда
				
				Рек_Запис(ТексТД,ДД);
			
//				РР=РаскодироватьСтроку(ДД.НомерКМ,СпособКодированияСтроки.КодировкаURL);
//				ТекстД.ДобавитьСтроку(РР);
			КонецЕсли;
		Конеццикла;
		
		Артикул=Стр_1.Артикул;
		
		
	Конеццикла;
	
	
	//ТаблицаТоваров.Колонки.Добавить("Артикул");
	
	
	
	

	
//	Для Каждого ДД ИЗ ДеревоКМ.ПолучитьЭлементы() Цикл
//		Рек_Запис(ТексТД,ДД);
		
//		РР=РаскодироватьСтроку(ДД.НомерКМ,СпособКодированияСтроки.КодировкаURL);
//		ТекстД.ДобавитьСтроку(РР);
//	Конеццикла;
	
	//ИмяТекст=ПолучитьИмяВременногоФайла();
	//ТекстД.Записать(ИмяТекст);
	ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстД.ПолучитьТекст());//Новый ДвоичныеДанные(ИмяТекст);
	//УдалитьФайлы(ИмяТекст);
	Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстД.ПолучитьТекст());
	
КонецФункции

&НаКлиенте
Процедура СохранитьВtXTБезКоробов(Команда)
	// Вставить содержимое обработчика.
	ДилогВыбора=Новый ДиалогВыбораФайла(РежимдиалогаВыбораФайла.ВыборКаталога);
	ДилогВыбора.Заголовок="Выберите каталог для сохранения файлов с номерами КМ";
	Если ДилогВыбора.Выбрать() Тогда
		Каталог=ДилогВыбора.Каталог;
	//	Форм=ЭтаФорма.ВладелецФормы.Элементы.ЗаказыТаблица.ВыделенныеСтроки;
	//	Для Каждого Стр_1 Из Форм Цикл
			
			Номер="";
			ДвоичнД=СохранитьФайлНаДИске_БезКоробов(Объект.Ссылка,Номер);
			
			ИмяФ=Каталог+"\"+Номер+".txt";
			ДвоичнД.Записать(ИмяФ);
	//	Конеццикла;
		
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКороткиеНомераКМБезКоробов(Команда)
	// Вставить содержимое обработчика.
	ДилогВыбора=Новый ДиалогВыбораФайла(РежимдиалогаВыбораФайла.ВыборКаталога);
	ДилогВыбора.Заголовок="Выберите каталог для сохранения файлов с номерами КМ";
	Если ДилогВыбора.Выбрать() Тогда
		Каталог=ДилогВыбора.Каталог;
	//	Форм=ЭтаФорма.ВладелецФормы.Элементы.ЗаказыТаблица.ВыделенныеСтроки;
	//	Для Каждого Стр_1 Из Форм Цикл
			
			Номер="";
			ДвоичнД=СохранитьФайлНаДИске_БезКоробовКороткие(Объект.Ссылка,Номер);
			
			ИмяФ=Каталог+"\"+Номер+".txt";
			ДвоичнД.Записать(ИмяФ);
	//	Конеццикла;
		
		
	КонецЕсли;	
	
	
	
КонецПроцедуры

&НаСервере
Функция СохранитьФайлНаДИске_БезКоробовКороткие(Ссылка,Номер)
	// Вставить содержимое обработчика.
	
	//Объект=УФ.Объект;
	ТекстД=Новый ТекстовыйДокумент;
	Номер=Объект.Номер;
	//ТекстД.ДобавитьСтроку(Ссылка.Номер);
	
	ТаблицаТоваров=Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	//ТаблицаТоваров.Колонки.Добавить("Продукция");
	ТаблицаТоваров.Колонки.Добавить("НомерКороба");
	
	Для Каждого Стр_1 ИЗ Объект.Товары Цикл
		
		НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",
		Стр_1.НомерСтрокиСвязи));
		Для Каждого Стр_2 Из НСтрок Цикл
			
			Добав=ТаблицаТоваров.Добавить();
			Добав.Артикул=Стр_1.gtin.МодельПроизводителяАртикул;
			//Добав.Продукция=Стр_1.gtin;
			Добав.НомерКороба=Стр_2.cis;
			
		Конеццикла;
		
		
	Конеццикла;
	таблицаТоваров.Свернуть("Артикул,НомерКороба");
	таблицаТоваров.Сортировать("Артикул,НомерКороба");
	
	Артикул="ываывавыаываываыв";
	
	Для Каждого Стр_1 Из таблицаТоваров Цикл
		Если Артикул<>Стр_1.Артикул Тогда
				ТекстД.ДобавитьСтроку(Стр_1.Артикул);
			КонецЕсли;
	//	ТекстД.ДобавитьСтроку(Стр_1.НомерКороба);
		Для Каждого ДД ИЗ ДеревоКМ.ПолучитьЭлементы() Цикл
			Если ДД.НомерКороба=Стр_1.НомерКороба Тогда
				
				Рек_Запис_Короткие(ТексТД,ДД);
			
//				РР=РаскодироватьСтроку(ДД.НомерКМ,СпособКодированияСтроки.КодировкаURL);
//				ТекстД.ДобавитьСтроку(РР);
			КонецЕсли;
		Конеццикла;
		
		Артикул=Стр_1.Артикул;
		
		
	Конеццикла;
	
	
	//ТаблицаТоваров.Колонки.Добавить("Артикул");
	
	
	
	

	
//	Для Каждого ДД ИЗ ДеревоКМ.ПолучитьЭлементы() Цикл
//		Рек_Запис(ТексТД,ДД);
		
//		РР=РаскодироватьСтроку(ДД.НомерКМ,СпособКодированияСтроки.КодировкаURL);
//		ТекстД.ДобавитьСтроку(РР);
//	Конеццикла;
	
	//ИмяТекст=ПолучитьИмяВременногоФайла();
	//ТекстД.Записать(ИмяТекст);
	ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстД.ПолучитьТекст());//Новый ДвоичныеДанные(ИмяТекст);
	//УдалитьФайлы(ИмяТекст);
	Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстД.ПолучитьТекст());
	
КонецФункции

Процедура Рек_Запис_Короткие(ТексТД,ДД)
	
	
	Если ЗначениеЗаполнено(ДД.Вспомогательный) Тогда
	//	сшш=РаскодироватьСтроку(ДД.Вспомогательный,способКодированияСтроки.КодировкаURL);
		ТексТД.ДобавитьСтроку(ДД.cis);
		
	КонецЕсли;
	Для Каждого Стр_2 Из ДД.ПолучитьЭлементы() Цикл
		Рек_Запис_Короткие(ТексТД,Стр_2)
		
	Конеццикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ДополучитьИнформациюОКМ(Команда)
	// Вставить содержимое обработчика.
	
	Thumbprint_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
		
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
		
		Если не ЗначениеЗаполнено(Срегистра) тогда
			Возврат
		Конецесли;
		
		Что=Thumbprint_1.что;
	Для Каждого Добав Из ДеревоКМ.ПолучитьЭлементы() Цикл
		
		//Добав=Дерево.ПолучитьЭлементы().Добавить();
		 Если Добав.ПолучитьЭлементы().Количество()=0 Тогда
		
			//Добав.Продукция=НайтиПроудкцияюПоcis(Thumbprint_1,Срегистра,Стр_1);

			//Добав.НомерКороба=Стр_1;
			//Добав.cis=Стр_1;
			
			ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюПоКМ(Добав,Добав.cis,ТекущийПользователь,"",Ложь)

			
	//
	//		МассивКМ=Новый Массив;
	//		МассивКМ.Очистить();
	//		МассивКМ.Добавить(Добав.cis);
	//				//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Добав.cis)+"&pg="+что);;
	//			Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьтелоПоcis(МассивКМ);
	//			HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/cis/cis_list?pg="+Что);
	//					
	//						
	//			///HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Добав.cis));;
	//			//HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?gtin="+ДополнитьСтроку(Стр_11)+"&limit=100&offset=0");;
	//			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	//			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//		#Если ВебКлиент Тогда
	//			HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
	//		#Иначе
	//			HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
	//		#КонецЕсли
	//			
	//			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	//			///Константин           
	//			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	//			Текст1=Ответ.ПолучитьТелоКакСтроку();
	//			
	//			числоЗагрузили=0;
	//			
	//			Тотал=0;
	//			Если Ответ.КодСостояния=200 Тогда
	//						
	//				//NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
	//				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюПоКМ(Добав,Добав.cis,ТекущийПользователь,"",Ложь)
	//				//Реку(NNN[Добав.cis],УжеЗапрашивали,Добав.cis,HTTPСервисЗапрос,Thumbprint_1,СРегистра);
	//			КонецЕсли;			
			
			//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.РекурсияУпаковки(Добав,Thumbprint_1,СРегистра,Добав.cis);
		КонецЕсли;
	Конеццикла;

КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьДекларацииПоВыделенным(Команда)
	// Вставить содержимое обработчика.
	ОткрытьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаУФ",,ЭтаФорма);
КонецПроцедуры


&НаСервере
Процедура УдалитьСтрочкиНаСервере()
	// Вставить содержимое обработчика.
	МассивД=Новый Массив;
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		Если Стр.Статус<>"APPLIED" Тогда
			МассивД.Добавить(Стр);
		КонецЕсли;
	Конеццикла;
	
	МассивУд=Новый Массив;
	Для Каждого Стр Из МассивД Цикл
		
		
		НСтрок=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		НСтрок[0].КоличествоКМ=НСтрок[0].КоличествоКМ-1;
		Если 
		НСтрок[0].КоличествоКМ=0 Тогда
		МассивУд.Добавить(НСтрок[0]);
		КонецЕсли;
		Объект.СерийныеНомера.Удалить(Стр);
			
	Конеццикла;
	
	Для Каждого Стр_1 Из МассивУд Цикл
		ОБъект.Товары.Удалить(Стр_1);
	Конеццикла;
	//Нстр=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("Статус","APPLIED"));
КонецПроцедуры


&НаКлиенте
Процедура УдалитьСтрочки(Команда)
	УдалитьСтрочкиНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура СтранаТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка=Ложь;
КонецПроцедуры


&НаКлиенте
Процедура СтранаТСПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если Элементы.СтранаТС.СписокВыбора.НайтиПоЗначению(Объект.СтранаТС)=Неопределено Тогда
		Объект.СтранаТС=НЕопределено;
	КонецЕсли;
КонецПроцедуры


Процедура ПроверитьВсеСтатусыНаСервере()
	ЧислоПараллельныхПотоков = РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КоличествоЯдерДляГенерацииDataMatrix;
	МассивЗаданий = Новый Массив;
	ЗаданияПоСтрокам = Новый Соответствие;
	Thumbprint = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);	
	Если Не ЗначениеЗаполнено(Thumbprint) Тогда
		Возврат;
	КонецЕслИ;
	
	Для каждого СерийныйНомер Из Объект.СерийныеНомера Цикл
		
		Если ВРЕГ(СерийныйНомер.статус)="INTRODUCED" ИЛИ (Врег(СерийныйНомер.Статус)="APPLIED") Тогда
			Продолжить;
		КонецЕсли;
		
		СерийныйНомер.Статус = Неопределено;
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(СерийныйНомер.cis);
		МассивПараметров.Добавить(Thumbprint);
		
		Если ЧислоПараллельныхПотоков=0 Тогда
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				shoesD="";
				Если Данные <> Неопределено И данные.Свойство("shoesData",shoesD) Тогда
					СерийныйНомер.Статус = shoesD.status;
				КонецЕсли;
		Иначе
			Попытка
				Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара", МассивПараметров);
				ЗаданияПоСтрокам.Вставить(Задание.УникальныйИдентификатор, СерийныйНомер);
				МассивЗаданий.Добавить(Задание);
				
				Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
					ЗаполнитьСтатусыСерийныхНомеров(ЗаданияПоСтрокам, МассивЗаданий); 
				КонецЕсли;
			Исключение
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				shoesD="";
				Если Данные <> Неопределено И данные.Свойство("shoesData",shoesD) Тогда
					СерийныйНомер.Статус = shoesD.status;
				КонецЕсли;
					
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивЗаданий.Количество() >= 0 Тогда
		ЗаполнитьСтатусыСерийныхНомеров(ЗаданияПоСтрокам, МассивЗаданий); 
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыСерийныхНомеров(Знач ЗаданияПоСтрокам, МассивЗаданий)
	
	Попытка
		ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
	Исключение
	КонецПопытки;
	Для каждого Задание Из МассивЗаданий Цикл
		Данные = Неопределено;
		Для каждого Сообщение Из Задание.ПолучитьСообщенияПользователю() Цикл
			Если ЗначениеЗаполнено(Сообщение.Текст) Тогда
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Сообщение.Текст);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Данные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТекСтр = ЗаданияПоСтрокам.Получить(Задание.УникальныйИдентификатор);
		ТекСтр.Статус = Данные.shoesData.status;
	КонецЦикла;
	МассивЗаданий.Очистить();
	
КонецПроцедуры



&НаКлиенте
Процедура ПолучитьСтатусыПоКМАльтернит(Команда)
	// Вставить содержимое обработчика.
	ПроверитьВсеСтатусыНаСервере();
	ИзменитьВидимость()
	
	
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьСтатусыКМВсе(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	МассивКМ=Новый Массив;
	Для каждого Стр_1 Из Объект.СерийныеНомера Цикл
		Стр_1.Статус="Не найдено в ЦРПТ";
		МассивКМ.Добавить(Стр_1.cis);
	Конеццикла;	
	ОбработатьстатусыКМ(МассивКМ);
	
	Возврат;
	Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		Стр_1.Статус="";
	Конеццикла;
	ПолучитьСтатусыПоКМ(Команда);
	
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьСтатусыAPPLIED(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	ПолучитьСтатусыПоКМ(Команда,истина)	
	
КонецПроцедуры


&НаКлиенте
Процедура ПроверитьСтатусыПоВыделенным(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	МассивКМ=Новый Массив;

	Для каждого Стр_2 Из Элементы.СерийныеНомераТаблица.ВыделенныеСтроки Цикл
		Стр_1=Объект.СерийныеНомера.НайтиПоИдентификатору(Стр_2);
		Стр_1.Статус="Не найдено в ЦРПТ";
		МассивКМ.Добавить(Стр_1.cis);
	Конеццикла;	
	ОбработатьстатусыКМ(МассивКМ);
	
	Возврат;
	
	
	Thumbprint_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
		
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	
		Если не ЗначениеЗаполнено(Срегистра) тогда
			Возврат
		Конецесли;

	Для каждого Стр_2 Из Элементы.СерийныеНомераТаблица.ВыделенныеСтроки Цикл
		Стр_1=Объект.СерийныеНомера.НайтиПоИдентификатору(Стр_2);
		    Стр_1.Статус=Неопределено;
	   НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	
	   Если НаСервере Тогда
		 Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Стр_1.cis);  
		Иначе
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			Если Thumbprint_1.НаименованиеСтенда="Табак"
				ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
				Тогда
	
		NN=ВернутьТелоЗапросаПодключение(Стр_1.cis);
						
	
			HTTPЗапрос=Новый HTTPЗапрос("private-office-api/private/v2/cis/status");
			//private-office-api/private/v2/cis/"+КодМаркировки+"/mrp"
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин   
			HTTPЗапрос.УстановитьТелоИзСтроки(NN,КодировкаТекста.UTF8);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
Иначе
			
			Текст=Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(Стр_1.cis);
			Марк=Текст.Получитьтекст();
	
			что=Thumbprint_1.что;
	
	ММ= Стр_1.cis;
	
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"&pg="+что);
//		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"&pg="+что);;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
КонецЕсли;
КонецЕсли;

		Если НаСервере Тогда
			Текст1=Ответ.ПолучитьТелоКакСтроку;
			
		Иначе
			Текст1=Ответ.ПолучитьТелоКакСтроку();
		КонецЕсли;	
		
		Если Thumbprint_1.НаименованиеСтенда="Табак"
			ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
			Тогда
		
			Попытка
		//ЧтениеJSON = Новый ЧтениеJSON;
		//	ЧтениеJSON.УстановитьСтроку(Текст1);
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Если NNN=Неопределено тогда
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Стр_1.Статус=NNN["status"];
					
			Иначе
				Стр_1.Статус=NNN.status;
			КонецЕсли;
			
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Сообщить(Текст1);
			КонецПопытки;
	
Иначе
//ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(Текст1);
Попытка
	Если Ответ.КодСостояния=200 Тогда
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Если NNN=Неопределено тогда
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Стр_1.Статус=NNN["status"];
					
			Иначе
				Стр_1.Статус=NNN.status;
			КонецЕсли;
		Иначе
		
		Стр_1.Статус=Ответ.КодСостояния;
		 Сообщить(Текст1);
	КонецЕсли;
	

	
Исключение
	Сообщить(ОписаниеОшибки());
	Сообщить(Текст1);
КонецПопытки;
КонецЕсли;



	Конеццикла;
	ИзменитьВидимость()
	
КонецПроцедуры


&НаКлиенте
Процедура ПроверитьСтатусыПоВыделеннымАльтернатива(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	// Вставить содержимое обработчика.
	ПроверитьСтатусыПоВыделеннымАльтернативаНаСервере();
		ИзменитьВидимость()

КонецПроцедуры

&НаСервере
Процедура ПроверитьСтатусыПоВыделеннымАльтернативаНаСервере()
	
	ЧислоПараллельныхПотоков = РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КоличествоЯдерДляГенерацииDataMatrix;
	
	МассивЗаданий = Новый Массив;
	ЗаданияПоСтрокам = Новый Соответствие;
	Thumbprint = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(Объект.ТекущийПользователь);	
	
	Если Не ЗначениеЗаполнено(Thumbprint) Тогда
		Возврат;
	КонецЕслИ;
	
	Для каждого Стр Из Элементы.СерийныеНомераТаблица.ВыделенныеСтроки Цикл
		
		СерийныйНомер = Объект.СерийныеНомера.НайтиПоИдентификатору(Стр);
		СерийныйНомер.Статус = Неопределено;
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(СерийныйНомер.cis);
		МассивПараметров.Добавить(Thumbprint);
		
		Если ЧислоПараллельныхПотоков=0 Тогда
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				shoesD="";
				Если Данные <> Неопределено И данные.Свойство("shoesData",shoesD) Тогда
					СерийныйНомер.Статус = shoesD.status;
				КонецЕсли;
		Иначе
			Попытка
				Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара", МассивПараметров);
				ЗаданияПоСтрокам.Вставить(Задание.УникальныйИдентификатор, СерийныйНомер);
				МассивЗаданий.Добавить(Задание);
				
				Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
					ЗаполнитьСтатусыСерийныхНомеров(ЗаданияПоСтрокам, МассивЗаданий); 
				КонецЕсли;
			Исключение
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				shoesD="";
				Если Данные <> Неопределено И данные.Свойство("shoesData",shoesD) Тогда
					СерийныйНомер.Статус = shoesD.status;
				КонецЕсли;
					
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивЗаданий.Количество() >= 0 Тогда
		ЗаполнитьСтатусыСерийныхНомеров(ЗаданияПоСтрокам, МассивЗаданий); 
	КонецЕсли;
	
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ЗаполнитьПоВсемОстаткамНаСервере(Объект_1)
	// Вставить содержимое обработчика.
	Объект=Объект_1.ПолучитьОбъект();
			
	
	
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер КАК СерийныйНомер,
				|	СУММА(ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток) КАК КоличествоОстаток
				|ИЗ
				|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Остатки(, Организация = &Организация) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
				|
				|СГРУППИРОВАТЬ ПО
				|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер";
			
			Запрос.УстановитьПараметр("Организация", Объект.Организация);
			
			
			
			 РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗАпроса.Прямой);
			
				КоличествоНеобходмо=РезультатЗапроса.Количество();
				Смещение=0;
				Пока КоличествоНеобходмо>0 Цикл
					Если КоличествоНеобходмо<=99999 Тогда
						Для Сч=Смещение По  Смещение+КоличествоНеобходмо-1 Цикл
							
							GGG=РезультатЗапроса[Сч].СерийныйНомер;
							cis=GGG;
							
								Продукция=Неопределено;
							
							ДД=Объект.СерийныеНомера.Добавить();
							Если ЗначениеЗаполнено(Продукция) Тогда
								ДД.НаименованиеТовара=Продукция
							Иначе
								Если Сред(cis,1,2)="01" тогда
								
									ДД.GTIN=Сред(cis,3,14);
								Иначе
									ДД.GTIN=Сред(cis,1,14);
									
								КонецЕсли;
								ДД.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(ДД.GTIN));
							КонецЕсли;
							ДД.cis=cis;
							
							Добав=Объект.Товары.Найти(ДД.НаименованиеТовара,"GTIN");
							Если Добав=Неопределено Тогда
								Добав=Объект.Товары.Добавить();
								Добав.GTIN=ДД.НаименованиеТовара;
								Добав.ДекларацияИлиСертификатСоответствия=РЕгистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(
										ТекущаяДата(),Новый Структура("Продукция",Добав.GTIN)).Документ;
								Добав.НомерСтрокиСвязи=Добав.НомерСтроки;
								Добав.КодТНВЭД=Добав.GTIN.КодТНВЭД;
							КонецЕсли;
							ДД.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
							Добав.КоличествоКМ=Добав.КоличествоКМ+1;
							Добав.СпособВыпускаТоваров="";
							
						КонецЦикла;;
						
						КоличествоНеобходмо=0;               
					Иначе
						НадоСпсать=Мин(КоличествоНеобходмо,99999);
						ДокумС=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
						ЗаполнитьЗначенияСвойств(ДокумС,Объект,,"Номер");
						ДокумС.Дата=ТекущаяДата();
						Для Сч=Смещение По Смещение+НадоСпсать-1 Цикл
						GGG=РезультатЗапроса[Сч].СерийныйНомер;
							cis=GGG;
							
								Продукция=Неопределено;
							
							
							ДД=ДокумС.СерийныеНомера.Добавить();
							Если ЗначениеЗаполнено(Продукция) Тогда
								ДД.НаименованиеТовара=Продукция
							Иначе
								Если Сред(cis,1,2)="01" тогда
								
									ДД.GTIN=Сред(cis,3,14);
								Иначе
									ДД.GTIN=Сред(cis,1,14);
									
								КонецЕсли;
								ДД.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(ДД.GTIN));;
							КонецЕсли;
							ДД.cis=cis;
							
							Добав=ДокумС.Товары.Найти(ДД.НаименованиеТовара,"GTIN");
							Если Добав=Неопределено Тогда
								Добав=ДокумС.Товары.Добавить();
								Добав.GTIN=ДД.НаименованиеТовара;
								Добав.ДекларацияИлиСертификатСоответствия=РЕгистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(
										ТекущаяДата(),Новый Структура("Продукция",Добав.GTIN)).Документ;
								Добав.НомерСтрокиСвязи=Добав.НомерСтроки;
								Добав.КодТНВЭД=Добав.GTIN.КодТНВЭД;
							КонецЕсли;
							ДД.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
							Добав.КоличествоКМ=Добав.КоличествоКМ+1;
							Добав.СпособВыпускаТоваров="";

						КонецЦикла;
						Смещение=Смещение+НадоСпсать;
						КоличествоНеобходмо=КоличествоНеобходмо-НадоСпсать;
						ДокумС.Записать();
						Сообщить("Создан документ "+Строка(ДокумС.Ссылка));
					КонецЕсли;
					
				КонецЦикла;
		       
			//ЭтотОбъект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотИмпорт;
			 
	
	Объект.Записать();	
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПоВсемОстаткам(Команда)
	ЭтаФорма.Записать();
	ЗаполнитьПоВсемОстаткамНаСервере(Объект.Ссылка);
	ЭтаФорма.Прочитать();
КонецПроцедуры


&НаКлиенте
Процедура ПричинаВыводаИзОборотаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	УправлениеВидимостью()
КонецПроцедуры


&НаКлиенте
Процедура ВидПервичногоДокументаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	УправлениеВидимостью()
КонецПроцедуры


&НаКлиенте
Процедура ВидПервичногоДокумента1ПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	УправлениеВидимостью();
КонецПроцедуры


&НаКлиенте
Процедура РазбитьДокумент(Команда)
	Попытка
	Записать();
Исключение
	КонецПопытки;
	
	ПоказатьВводЧисла(Новый ОписаниеОповещения("ПолсеВыбора",ЭтаФорма),10,"Укажите количество серийный номеров на которое необходимо разбить документ",10,0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолсеВыбора(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
		РазбитьДокументНаНесколько(РР);
		
		ЭтаФорма.Закрыть();
		
	КонецЕсли;
	
	
Конецпроцедуры


Процедура РазбитьДокументНаНесколько(РР)
	Если Объект.Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
		ИЛИ Объект.Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ЧастичноПринят
		Или Объект.Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента
		ИЛИ Объект.Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик
		Тогда
		Возврат;
	КонецЕсли;
	УдалитьНадо=Объект.Ссылка.ПолучитьОбъект();
	
	былПроведен=ложь;
	Если УдалитьНадо.Проведен Тогда
		УдалитьНадо.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		БылПроведен=Истина;
	КонецЕслИ;
	
	НовыйДокумент=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(НовыйДокумент,Объект,,"Номер,_Order_ID,Статус,ОшибкаОтправки");
	НовыйДокумент.Дата=ТекущаяДата();
	
	
	МассивДокументовПервый=Новый Массив;
		Смещение=0;
		
		Для Каждого СТр Из Объект.СерийныеНомера Цикл
				Если СМещение>=РР Тогда
					НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
					Если БылПроведен Тогда
						НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
					КонецЕсли;
				
					
					
					НовыйДокумент=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
					ЗаполнитьЗначенияСвойств(НовыйДокумент,Объект,,"Номер,_Order_ID,Статус,ОшибкаОтправки");
					НовыйДокумент.Дата=Текущаядата();
					СМещение=0;
				КонецЕсли;
				
			Добав=НовыйДокумент.СерийныеНомера.Добавить();
			ЗаполнитьЗначенияСвойств(Добав,Стр);
			
			Строку=НовыйДокумент.Товары.Найти(Добав.НомерСтрокиСвязи,"НомерСтрокиСвязи");
			НСтрок=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Добав.НомерСтрокиСвязи));
			Если Строку=Неопределено Тогда
				Строку=НовыйДокумент.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(Строку,НСтрок[0]);
				Строку.КоличествоКМ=0;
				Строку.КоличествоНомеровКМ=0;
			КонецеслИ;
			Строку.КоличествоКМ=Строку.КоличествоКМ+1;
			//Строку.КоличествоНомеровКМ=Строку.КоличествоНомеровКМ+1;
			Строку.СуммаНДС=Строку.СуммаНДС+Нстрок[0].СуммаНДС/НСтрок[0].КоличествоКМ;
			
			
				
				
			//Добав=НовыйДокумент.Товары.Добавить();
			//ЗаполнитьЗначенияСвойств(Добав ,Стр);
			//
			//Нстрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
			//Для Каждого Стр_С Из НСтрок Цикл
			//	ДобавС=НовыйДокумент.СерийныеНомера.Добавить();
			//	 ЗаполнитьЗначенияСвойств(ДобавС,Стр_С)
			//Конеццикла;
			
			
			СМещение=СМещение+1;
	Конеццикла;
	Если Объект.Товары.Количество()>0 Тогда
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		Если БылПроведен Тогда
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
			
	КонецЕсли;
	Попытка
	УдалитьНадо.ПометкаУдаления=Истина;
	УдалитьНадо.Записать(РежимЗаписиДокумента.Запись);
Исключение
	КонецПопытки;

		
		
		
		
		
		
		
		
		Возврат;
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		Если СМещение>=РР Тогда
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			Если БылПроведен Тогда
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
			Для Каждого Стр_1 Из МассивДокументовПервый Цикл
				
				РегДв=РегистрыСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СоздатьНаборЗаписей();
				РегДв.Отбор.Справочник_Документ.Установить(Стр_1);
				Добав=РегДв.Добавить();
				Добав.Справочник_Документ=Стр_1;
				Добав.СправочникДокумент_Меркурия=НовыйДокумент.Ссылка;
				РегДв.Записать(Истина);
				
			Конеццикла;
			
			МассивДокументовПервый.Очистить();
			МассивДокументовПервый.Добавить(НовыйДокумент.Ссылка);
			
			
			
			НовыйДокумент=Документы.Отгрузка_ХамелеонЦРПТ.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(НовыйДокумент,УдалитьНадо,,"Номер,_Order_ID,Статус,ОшибкаОтправки");
				НовыйДокумент.Дата=Текущаядата();
				СМещение=0;
		КонецЕсли;
		Добав=НовыйДокумент.СерийныеНомера.Добавить();
		ЗаполнитьЗначенияСвойств(Добав ,Стр);
		
		
		Нстр=НовыйДокумент.Товары.Найти(Добав.НомерСтрокиСвязи,"НомерСтрокиСвязи");
		Если НСтр=Неопределено тогда
			НСтр=НовыйДокумент.Товары.Добавить();
			Нстр_1=Удалитьнадо.Товары.Найти(Добав.НомерСтрокиСвязи,"НомерСтрокиСвязи");
			Если НСТР_1<>Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Нстр,НСтр_1);
				НСтр.КоличествоКМ=0;
				НСтр.КоличествоНомеровКМ=0;
			Иначе
				НСтр.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
			КонецЕсли;
			НСтр.ЕдиницаИзмерения=Объект.ТекущийПользователь.ОсновнаяЕдиницаИзмерения;
		
		КонецЕсли;
		НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
		
		
		
		СМещение=СМещение+1;
	Конеццикла;
	Если УдалитьНадо.Товары.Количество()>0 Тогда
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		Если БылПроведен Тогда
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Для Каждого Стр_1 Из МассивДокументовПервый Цикл
				
				РегДв=РегистрыСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СоздатьНаборЗаписей();
				РегДв.Отбор.Справочник_Документ.Установить(Стр_1);
				Добав=РегДв.Добавить();
				Добав.Справочник_Документ=Стр_1;
				Добав.СправочникДокумент_Меркурия=НовыйДокумент.Ссылка;
				РегДв.Записать(Истина);
				
			Конеццикла;
		
		
	КонецЕсли;
	УдалитьНадо.ПометкаУдаления=Истина;
	УдалитьНадо.Записать(РежимЗаписиДокумента.Запись);
		
	
	
Конецпроцедуры


&НаКлиенте
Процедура СтранаТС1ПриИзменении(Элемент)
	Если Элементы.СтранаТС1.СписокВыбора.НайтиПоЗначению(Объект.СтранаТС)=Неопределено Тогда
		Объект.СтранаТС=НЕопределено;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ОплаченПокупателемПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	//Элементы.ГруппаДокументов.Видимость=Объект.ОплаченПокупателем
КонецПроцедуры


&НаКлиенте
Процедура ТипДокументаВозвратиИзРозницы1ПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Элементы.НаименованиеПервичногоДокумента1.Видимость=Объект.ВидПервичногоДокумента=ПредопределенноеЗначение("Перечисление.ТипПервичногоДокумента_ХамелеонЦРПТ.OTHER");
	
КонецПроцедуры


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	// Вставить содержимое обработчика.
	Thumbprint_1=ПолучитьИзПользователя();
	ОПределитьУпаковки(Thumbprint_1)
КонецПроцедуры


Процедура ЗаполнимсначалаНасервере()
	
	КМЫ=Объект.СерийныеНомера.Выгрузить(,"cis");
	КМЫ=КМЫ.ВыгрузитьКолонку("cis");
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТипКМ_ХамелеонЦРПТ.Тип,
		|	ТипКМ_ХамелеонЦРПТ.cis
		|ИЗ
		|	РегистрСведений.ТипКМ_ХамелеонЦРПТ КАК ТипКМ_ХамелеонЦРПТ
		|ГДЕ
		|	ТипКМ_ХамелеонЦРПТ.cis В(&cis)";
	
	Запрос.УстановитьПараметр("cis", КМЫ);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	РезультатЗапроса.Индексы.Добавить("cis");
	
	Если РезультатЗапроса.Количество()>0 Тогда
		Для Каждого Стр Из Объект.СерийныеНомера Цикл
			Если Не значениеЗаполнено(Стр.ТипУпаковки) тогда
				НСтр=РезультатЗапроса.Найти(Стр.cis,"cis");
				Если НСтр<>Неопределено Тогда
					
					Стр.ТипУпаковки=НСтр.Тип;
					
				Конецесли;
			КонецЕсли;
			
			
		Конеццикла;
		
	КонецЕсли;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
КонецПроцедуры


&НаКлиенте
Процедура ОПределитьУпаковки(Thumbprint_1)
	
	Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании") тогда
		
		Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
			Если Не Значениезаполнено(Стр_1.ТипУпаковки) Тогда
				Стр_1.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Штука");
			Конецесли;
		Конеццикла;
		
		Возврат;
	Конецесли;
	ЗаполнимсначалаНасервере();
	
	
	 ИНН=ВернутьИНН(Объект.Организация);
	КоличествоБольше400=Объект.СерийныеНомера.Количество()>400;
	
		Для Каждого Стр_2 Из Объект.СерийныеНомера Цикл
			Если Не ЗначениеЗАполненО(Стр_2.ТипУпаковки) Тогда
				////ВРЕМЕННАЯ ЗАГЛУШКА
				Если КоличествоБольше400 Тогда
					
					Если СтрДлина(Стр_2.cis)>30 
						Тогда
						ТипУпаковки=Ложь;
					Иначе
						Если Найти(Стр_2.cis,ИНН)=0 Тогда
							ТипУпаковки=Истина;
						Иначе
							ТипУпаковки=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ВернутьИнформациюОКМ(Стр_2.cis,Thumbprint_1);
						Конецесли;
					КонецЕсли;
				Иначе
					ТипУпаковки=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ВернутьИнформациюОКМ(Стр_2.cis,Thumbprint_1);
				КонецЕсли;
				
				Если ТипУпаковки=Истина Тогда
					Стр_2.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка");
				ИначеЕсли ТипУпаковки=2 Тогда
					Стр_2.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.АТК");
				ИначеЕсли ТипУпаковки=Ложь Тогда
					Стр_2.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Штука");
					
					
				КонецЕсли;
			КонецЕсли;
			
		Конеццикла;
	
	КонецПроцедуры

&НаСервере
	Процедура ТипДокументаВозвратиИзРозницыПриИзмененииНаСервере()
		// Вставить содержимое обработчика.
			Элементы.НаименованиеПервичногоДокументаИзРозницы.Видимость=Объект.ВидПервичногоДокумента=Перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ.OTHER;
	КонецПроцедуры

&НаКлиенте
	Процедура ТипДокументаВозвратиИзРозницыПриИзменении(Элемент)
		ТипДокументаВозвратиИзРозницыПриИзмененииНаСервере();
	КонецПроцедуры

&НаКлиенте
Процедура РозничнаяПродажаФармацевтикаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Элементы.ФармацевтикаВывод.Видимость=НЕ Объект.РозничнаяПродажаФармацевтика;
	Элементы.ЧекДокументФармацевтика.Видимость=Объект.РозничнаяПродажаФармацевтика;
	
КонецПроцедуры


Функция СоздатьДокументОтказаЛекарства()
	
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрацияСведенийОбОтменеОперации_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Документ.РегистрацияСведенийОбОтменеОперации_ХамелеонЦРПТ КАК РегистрацияСведенийОбОтменеОперации_ХамелеонЦРПТ
		|ГДЕ
		|	РегистрацияСведенийОбОтменеОперации_ХамелеонЦРПТ.ДокументОснование = &ДокументОснование
		|	И НЕ РегистрацияСведенийОбОтменеОперации_ХамелеонЦРПТ.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Докум=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
Иначе
	Докум=Документы.РегистрацияСведенийОбОтменеОперации_ХамелеонЦРПТ.СоздатьДокумент();
КонецЕсли;
	Докум.ДокументОснование=Объект.Ссылка;
	дОКУМ.Дата=ТекущаяДата();
	Докум.ТекущийПользователь=Объект.ТекущийПользователь;
	Докум.Записать();
	Возврат Докум.Ссылка
КонецФункции


&НаКлиенте
Процедура Отмена(Команда)   Экспорт
	// Вставить содержимое обработчика.
	Thumbprint_1=ПолучитьИзПользователя();	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
		
		ИщемСоздаемДокументОтказа=СоздатьДокументОтказаЛекарства();
		ОткрытьФорму("Документ.РегистрацияСеденийОбОтзывеОтгрузок_ХамелеонЦРПТ.Форма.ФормаДокумента",
		Новый Структура("Ключ",ИщемСоздаемДокументОтказа));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКодТНВЭДПоВыделенным(Команда)
	// Вставить содержимое обработчика.
	ОткрытьФорму("Справочник.КодТНВЭД_ХамелеонЦРПТ.ФормаВыбора",,,,,,Новый ОписаниеОповещения("ПослеВыборкааКодТВЭД",ЭтаФорма,Элементы.Товары.ВыделенныеСтроки));
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыборкааКодТВЭД(РР,ДД) Экспорт
	Если РР<>Неопределено Тогда
		Для Каждого Стр_1 Из ДД Цикл
			Стр=Объект.Товары.НайтиПоИдентификатору(Стр_1);
			Стр.КодТНВЭД=РР;
			
			ЗаписатьТНВЭД(Стр.GTIN,Стр.КодТНВЭД)
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ВернутьМассивТоваров()
	МассивДляВозврата=Новый Массив;
	Для Каждого Стр_1 Из ОБъект.Товары Цикл
		Если МассивДляВозврата.Найти(Стр_1.GTIN)=Неопределено тогда
			МассивДляВозврата.Добавить(Стр_1.GTIN);
		Конецесли;
		
	Конеццикла;
	Для Каждого Стр_1 Из ОБъект.GTINДляПубликации Цикл
		Если МассивДляВозврата.Найти(Стр_1.GTIN)=Неопределено тогда
			МассивДляВозврата.Добавить(Стр_1.GTIN);
		Конецесли;
		
	Конеццикла;
	Возврат МассивДляВозврата
Конецфункции



&НаКлиенте
Процедура ОбновитьИзНК(Команда) Экспорт
 	// Вставить содержимое обработчика.
	
	Если Объект.GTINДляПубликации.Количество()=0 Тогда
		ЗаполнимGTINДляПубликации();
	Конецесли;
	
	МассивТоваров=ВернутьМассивТоваров();
	Для Каждого Стр_1 Из МассивТоваров Цикл
		Форм=ПолучитьФорму("Справочник.Продукция_ХамелеонЦРПТ.Форма.ФормаЭлемента",
		Новый Структура("Ключ",Стр_1));
		Форм.ОбновитьКарточкуИзНК(Команда);
		Форм.Записать();
		
	Конеццикла;
	
	ЭтаФорма.Прочитать();
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьНаМодерацию(Команда) Экспорт
	// Вставить содержимое обработчика.
	Если Объект.GTINДляПубликации.Количество()=0 Тогда
		ЗаполнимGTINДляПубликации();
	Конецесли;

	МассивТоваров=ВернутьМассивТоваров();
	Для Каждого Стр_1 Из МассивТоваров Цикл
		Форм=ПолучитьФорму("Справочник.Продукция_ХамелеонЦРПТ.Форма.ФормаЭлемента",
		Новый Структура("Ключ",Стр_1));
		Форм.ОтправитьНаМодерацию(Команда);
		
	Конеццикла;
	ЭтаФорма.Прочитать();
	
КонецПроцедуры


&НаКлиенте
Процедура ПодписатьИОпубликовать(Команда)  Экспорт
	// Вставить содержимое обработчика.
	Если Объект.GTINДляПубликации.Количество()=0 Тогда
		ЗаполнимGTINДляПубликации();
	Конецесли;

	МассивТоваров=ВернутьМассивТоваров();
	Для Каждого Стр_1 Из МассивТоваров Цикл
		Форм=ПолучитьФорму("Справочник.Продукция_ХамелеонЦРПТ.Форма.ФормаЭлемента",
		Новый Структура("Ключ",Стр_1));
		Форм.ПодписатьИОпубликовать(Команда);
	
	Конеццикла;
	ЭтаФорма.Прочитать();
	
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьДаныеВНК(Команда) Экспорт
	// Вставить содержимое обработчика.
	Если Объект.GTINДляПубликации.Количество()=0 Тогда
		ЗаполнимGTINДляПубликации();
	Конецесли;
	
	МассивТоваров=ВернутьМассивТоваров();
	Для Каждого Стр_1 Из МассивТоваров Цикл
		Форм=ПолучитьФорму("Справочник.Продукция_ХамелеонЦРПТ.Форма.ФормаЭлемента",
		Новый Структура("Ключ",Стр_1));
		Форм.ЗарегистрироватьВКаталогеТоваров(Команда);
	
	Конеццикла;
	ЭтаФорма.Прочитать();
	
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьЧерновик(Команда)
	// Вставить содержимое обработчика.
	ОтправитьЗаявку(Команда,Ложь,Истина)	
КонецПроцедуры

//Функция ПолучитьСтруктуруПВСД(UUID_ТВСД) Экспорт
	
//КонецФункции


&НаКлиенте
Процедура ТоварыНомерВСДПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	 Текд=Элементы.Товары.ТекущиеДанные;
	 
	 Если ЗначениеЗАполнено(текД.ДатаПроизводства)
		 ИЛИ ЗначениеЗаполнено(ТекД.ГоденДо) 
		 ИЛИ НеОпределятьДатуПроизводстваИГоденДоПоНомеруВСД
		 Тогда
		 Возврат;
		Конецесли;
	 
	 Попытка
	НомерВСД=Текд.НомерВСД;
	Если СтрДлина(НомерВСД)>36 Тогда
			
		УИД=Сред(НомерВСД,1,4)+Сред(НомерВСД,6,4)+"-"+Сред(НомерВСД,11,4)+"-"+Сред(НомерВСД,16,4)+"-"+
											Сред(НомерВСД,21,4)+"-"+Сред(НомерВСД,26,4)+Сред(НомерВСД,31,4)+Сред(НомерВСД,36,4);
		УИД=НРег(НомерВСД);
		НомерВСД=УИД								
	Конецесли;
	
	
	Текд.ДатаПроизводства=Неопределено;
			
	Текд.ГоденДО=Неопределено;
		
	СтруктураВСД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтруктуруПВСД(НомерВСД);
	Наименование_и_форма_ВСД="";
	Если СтруктураВСД.Свойство("Наименование_и_форма_ВСД",Наименование_и_форма_ВСД)
		И Найти(Наименование_и_форма_ВСД,"Производственный сертификат. Форма № 1")=1 Тогда
		Если СтруктураВСД.Свойство("Уникальный_идентификатор_ВСД",НомерВСД)
		И ЗначениеЗаполнено(НомерВСД) Тогда
		
			ДатаВыработки=Дата(1,1,1);
			Если СтруктураВСД.Свойство("Дата_выработки_продукции",ДатаВыработки) И ЗначениеЗАполнено(ДатаВыработки) Тогда
				
				Текд.ДатаПроизводства=Дата(Число(Сред(ДатаВыработки,7,4)),
				Число(Сред(ДатаВыработки,4,2)),
				Число(Сред(ДатаВыработки,1,2))
				);
				
				
				
				ДатаВыработки=Дата(1,1,1);
				Если СтруктураВСД.Свойство("Годен_до",ДатаВыработки) И ЗначениеЗАполнено(ДатаВыработки) Тогда
					
					Текд.ГоденДо=Дата(Число(Сред(ДатаВыработки,7,4)),
					Число(Сред(ДатаВыработки,4,2)),
					Число(Сред(ДатаВыработки,1,2))
					);
					
					
					Возврат;
				Конецесли;
				
			Конецесли;
		
		Конецесли;
		
	Конецесли;
Исключение
	КонецПопытки;
	Возврат;
//	ГУИД=Элементы.Товары.ТекущиеДанные.НомерВСД;
//	Если СтрДлина(ГУИД)>36 тогда
//		
//		УИД=Сред(ГУИД,1,4)+Сред(ГУИД,6,4)+"-"+Сред(ГУИД,11,4)+"-"+Сред(ГУИД,16,4)+"-"+
//										Сред(ГУИД,21,4)+"-"+Сред(ГУИД,26,4)+Сред(ГУИД,31,4)+Сред(ГУИД,36,4);
//										УИД=НРег(УИД);

//Элементы.Товары.ТекущиеДанные.НомерВСД=УИД								
//	Конецесли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьGTINДляОтправкиВНК(Команда)
	// Вставить содержимое обработчика.
	ЗаполнимGTINДляПубликации()
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнимGTINДляПубликации()
	ПоказатьИнформацию("");
	
	Элементы.СтраницыТЧ.ТекущаяСтраница=Элементы.GTINДляПбуликации;
	НаСервере_ГТИНПолучения();
	ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Запись));
КонецПроцедуры

Процедура НаСервере_ГТИНПолучения()
	Для Каждого Стр_1 Из ДеревоКМ.ПолучитьЭлементы() Цикл
		РекурсияПолучения_ГТИН(Стр_1);
	Конеццикла;
Конецпроцедуры
Процедура РекурсияПолучения_ГТИН(Стр_1)
	Если Стр_1.ПолучитьЭлементы().Количество()=0 Тогда
		cis=Стр_1.cis;
		Если Не ЗначениеЗаполнено(cis) Тогда
			cis=Стр_1.НомерКМ;
		Конецесли;
		ГТИН=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьGTINСМарки(cis);
		Продукция=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СоздатьНайтиGTIN_Cnhjrf(ГТИН);
		Если Объект.GTINДляПубликации.НайтиСтроки(Новый Структура("GTIN",Продукция)).Количество()=0 тогда
			Добав=Объект.GTINДляПубликации.Добавить();
			Добав.GTIN=Продукция
		Конецесли;
	Иначе
		Для Каждого Стр_2 Из Стр_1.ПолучитьЭлементы() Цикл
			РекурсияПолучения_ГТИН(Стр_2)
		Конеццикла;
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиВСД(Команда)
	// Вставить содержимое обработчика.
	
	ТекПользователь=Объект.ТекущийПользователь;
	
	Форм=ОткрытьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаПоискТранзакции");
	Форм.НомерТТН=Объект.НомерДокумента;
	Форм.ДатаТТН=Объект.ДатаДокумента;
	Форм.ТекущийПользователь=Объект.ТекущийПользователь;
	
КонецПроцедуры

&НаСервере
Процедура НайтиПроизводственнуюТраназкциюНаСервере()
	// Вставить содержимое обработчика.
	
	Если Не ЗначениеЗаполнено(Объект.Транзакция) Тогда
		Возврат;
	Конецесли;
	
	
	Если ТипЗнч(Объект.Транзакция)<>Тип("Строка") 
		
		тогда
		
		Объект.НомераВСД.Очистить();
		Если ОБъект.Транзакция.ТипТранзакции=Перечисления.ТипыТразанкций_ХамелеонМеркурий.ПереработкаПроизводство Тогда
			Для Каждого Стр_11 Из Объект.Транзакция.ВырабатываемаяПродукцияВМеркурии Цикл
				
				ВСД=Стр_11.ЗаписьЖурнала.ВСД;
				Если Не ЗначениеЗАполнено(ВСД) тогда
					ТекущийПользователь_1=ХранилищеСистемныхНастроек.Загрузить("ТекущийПользователь","ТекущийПользователь");
					Выполнить("ВСД=ВАШИ_Данные_ВыполнитьНаСервереОтправкуТранзакции_ХамелеонМеркурий.НайтиВСД(Стр_11.ЗаписьЖурнала,ТекущийПользователь_1)");
				Конецесли;
				Стр_22=Объект.НомераВСД.Добавить();
				Если ЗначениеЗАполнено(ВСД) тогда
					Стр_22.НомерВСД=ВСД.ГУИД;
				Конецесли;
				Стр_22.ГоденДо=Стр_11.ЗаписьЖурнала.ГоденДоНач;
				Стр_22.ДатаПроизводства=Стр_11.ЗаписьЖурнала.ДатавыработкиНач;
				Стр_22.НаименованиеПродукции=Стр_11.ЗаписьЖурнала.Продукция.Наименование;
				Стр_22.GUIDПродукции=Стр_11.ЗаписьЖурнала.Продукция.GUID;
				Стр_22.GTINПродукци=Стр_11.ЗаписьЖурнала.Продукция.GTIN;
				  Стр_22.Объем=Стр_11.Объем;
				
			КонецЦикла;
			
		Иначе
			
			
			Для Каждого Стр_11 Из Объект.Транзакция.ВетеринарныеСвидетельства Цикл
				
				НомерВСД=Стр_11.ВетСвидетельство.ГУИД;
					
				СтруктураВСД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтруктуруПВСД(НомерВСД);
				Наименование_и_форма_ВСД="";
				Если СтруктураВСД.Свойство("Наименование_и_форма_ВСД",Наименование_и_форма_ВСД)
					И Найти(Наименование_и_форма_ВСД,"Производственный сертификат. Форма № 1")=1 Тогда
					Если СтруктураВСД.Свойство("Уникальный_идентификатор_ВСД",НомерВСД)
					И ЗначениеЗаполнено(НомерВСД) Тогда
					
					    Стр_22=Объект.НомераВСД.Добавить();
						
						
						СтруктураВСД.Свойство("Название_продукции",Стр_22.НаименованиеПродукции);
						СтруктураВСД.Свойство("Объём",Стр_22.Объем);
						СтруктураВСД.Свойство("Глобальный_идентификатор_номенклатуры_GUID",Стр_22.GUIDПродукции);
						//Глобальный_идентификатор_номенклатуры_GUID
						
						ДатаВыработки=Дата(1,1,1);
						Если СтруктураВСД.Свойство("Дата_выработки_продукции",ДатаВыработки) И ЗначениеЗАполнено(ДатаВыработки) Тогда
							
							Стр_22.ДатаПроизводства=Дата(Число(Сред(ДатаВыработки,7,4)),
							Число(Сред(ДатаВыработки,4,2)),
							Число(Сред(ДатаВыработки,1,2))
							);
							
						
							ДатаВыработки=Дата(1,1,1);
							Если СтруктураВСД.Свойство("Годен_до",ДатаВыработки) И ЗначениеЗАполнено(ДатаВыработки) Тогда
								
								Стр_22.ГоденДо=Дата(Число(Сред(ДатаВыработки,7,4)),
								Число(Сред(ДатаВыработки,4,2)),
								Число(Сред(ДатаВыработки,1,2))
								);
								
								
								Возврат;
							Конецесли;
							
						Конецесли;
					
					Конецесли;
					
				Конецесли;

				
				
			КонецЦикла;

			
		Конецесли;
		
		
		ДобавитьПродукцию_ХамелеонЦРПТ();
		
		
		
		Возврат;
	Конецесли;
	
	
	ТекущийПользователь=Объект.ТекущийПользователь;
	HTTPСервисЗапрос=New COMObject("WinHttp.WinHttpRequest.5.1");
	Если НЕ ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПодключитьсяКМеркурию_ПОСТОЯННО(HTTPСервисЗапрос,ТекущийПользователь.Инициатор,ТекущийПользователь.ПарольМеркурий,ТекущийПользователь) Тогда
		Возврат;
	Конецесли;
	
		

	Сайт=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСайт();
	Если Сайт="" Тогда
		Сообщить("Не определен режим работы программы!! Зайдите в пользователя и выберите режим работы (тестовый или рабочий)");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Транзакция) тогда
		НомерДокумента=Объект.Транзакция;
	Иначе
		
		НомерДокумента=Объект.НомерДокумента;
	
	Конецесли;
	
		TimeStamp = 1000 * (CurrentDate() - Date(1970,1,1) - 3 * 3600);
		HTTPСервисЗапрос.Open("GET", Сайт+"/operatorui?_action=showTransactionForm&transactionPk="+НомерДокумента+"&pageList=1&input=false&cancelAction=listTransaction&anchor="+НомерДокумента, 0);
//					Обработки._Запуск_ХамелеонМеркурий.УстановитьПрокси(HTTPСервисЗапрос);
					HTTPСервисЗапрос.Send();
					HTTPСервисЗапрос.WaitForResponse();
					
					
					ПолучСтр=HTTPСервисЗапрос.ResponseText;
	Чтение = Новый ЧтениеHTML;
	Чтение.УстановитьСтроку(ПолучСтр);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(Чтение);
	
	Объект.НомераВСД.Очистить();
	
	
	Параметр="";
	Производство=ЛОжь;
	
									Для Каждого Стр_ТАБЛИЦЫ Из ДокументHTML.ПолучитьЭлементыПоИмени("td") Цикл
 										Если НРег(Стр_Таблицы.ИмяКласса)="label" Тогда
											Параметр=СокрЛП(Стр_Таблицы.ТекстовоеСодержимое);
										ИначеЕсли ЗначениеЗаполнено(Параметр) Тогда
											Если Параметр="Тип транзакции:" Тогда
												Если СокрЛП(Стр_Таблицы.ТекстовоеСодержимое)="переработка/производство" Тогда
													Проиводство=Истина;
												Конецесли;
											КонецЕсли;	
											Параметр="";
										КонецЕсли;
									КонецЦикла;	
								

									
									Если Проиводство=Истина Тогда
	
	
	Для Каждого Стр_Гипер Из   ДокументHTML.ПолучитьЭлементыПоИмени("a") Цикл
				Если Найти(Стр_Гипер.ГиперСсылка,"trafficPk")>0 Тогда
						ГиперВет=Стр_Гипер.ГиперСсылка;
						НомерВет=Сред(ГиперВет,Найти(ГиперВет,"trafficPk=")+10);
						НомерВет_1=Сред(НомерВет,1,Найти(НомерВет,"&")-1);
						
						
						//Добавим=Истина;
						//Для Каждого Стр Из Документ.Сырье Цикл
						//	Если Стр.ЗаписьЖурнала.НомерЗаписи=НомерВет_1 Тогда
						//		Добавим=Ложь;
						//		Прервать;
						//	КонецЕсли;
						//Конеццикла;
						
						
						
						Если НомерВет_1<>"" Тогда
							
							Если Найти(ГиперВет,"listProduced")>0 Тогда
								
								
								//ДобавимСтр=Документ.ВырабатываемаяПродукцияВМеркурии.Добавить();
								////ДобавимСтр.ЗаписьЖурнала=//ЗаписатьЖурнал(HTTPСервисЗапрос,"",Тип,ЖурналИд,ПаджеЛист,ХС);
								////ЗаписатьЖурнал(HTTPСервисЗапрос,"",Перечисления.ВидЖурнала_ХамелеонМеркурий.ВырабатываемаяПродукция,НомерВет_1,"1",ХС);
								//Об=СокрЛП(Стр_Гипер.РодительскийУзел.ТекстовоеСодержимое);
								//Пока ЗначениеЗаполнено(Об) И Сред(Об,СтрДлина(Об),СтрДлина(Об))<>" " Цикл
								//	Об=Сред(Об,1,СтрДлина(Об)-1);
								//КонецЦикла;
								//Об=Сред(Об,1,СтрДлина(Об)-1);
								//Об1=Об;
								//Пока Сред(Об1,СтрДлина(Об1),СтрДлина(Об1))<>" " Цикл
								//	Об1=Сред(Об1,1,СтрДлина(Об1)-1);
								//КонецЦикла;
								////Об1=Сред(Об1,1,СтрДлина(Об1)+1);
								//Об=Сред(Об,СтрДлина(оБ1)+1);
								//
								//
								//
								
								HTTPСервисЗапрос.Open("GET", Сайт+"/"+ГиперВет, 0);
							//					Обработки._Запуск_ХамелеонМеркурий.УстановитьПрокси(HTTPСервисЗапрос);
												HTTPСервисЗапрос.Send();
												HTTPСервисЗапрос.WaitForResponse();
												
												
												ПолучСтр=HTTPСервисЗапрос.ResponseText;
								Чтение = Новый ЧтениеHTML;
								Чтение.УстановитьСтроку(ПолучСтр);
								ПостроительDOM = Новый ПостроительDOM;
								ДокументHTML_1 = ПостроительDOM.Прочитать(Чтение);
								
								КолСтрок=ДокументHTML_1.ПолучитьЭлементыПоИмени("a").Количество();
								
 								Пока    КолСтрок>0 Цикл
									Ссылка_1=
ДокументHTML_1.ПолучитьЭлементыПоИмени("a")[КолСтрок-1]									;

Если Сред(СокрЛП(Ссылка_1.ТекстовоеСодержимое),1,1)=	"№" Тогда
	
	
			HTTPСервисЗапрос.Open("GET", Сайт+"/"+Ссылка_1.Гиперссылка, 0);
							//					Обработки._Запуск_ХамелеонМеркурий.УстановитьПрокси(HTTPСервисЗапрос);
												HTTPСервисЗапрос.Send();
												HTTPСервисЗапрос.WaitForResponse();
												
												
												ПолучСтр=HTTPСервисЗапрос.ResponseText;
								Чтение = Новый ЧтениеHTML;
								Чтение.УстановитьСтроку(ПолучСтр);
								ПостроительDOM = Новый ПостроительDOM;
								ДокументHTML_2 = ПостроительDOM.Прочитать(Чтение);
								
								Добав=Объект.НомераВСД.Добавить();
								
								
								Параметр="";
									Для Каждого Стр_ТАБЛИЦЫ Из ДокументHTML_2.ПолучитьЭлементыПоИмени("td") Цикл
 										Если НРег(Стр_Таблицы.ИмяКласса)="label" Тогда
											Параметр=СокрЛП(Стр_Таблицы.ТекстовоеСодержимое);
										ИначеЕсли ЗначениеЗаполнено(Параметр) Тогда
											Если Параметр="Уникальный идентификатор ВСД:" Тогда
												Добав.НомерВСД=СокрЛП(Стр_Таблицы.ТекстовоеСодержимое);
											ИначеЕсли Параметр="Название продукции:" Тогда
												Добав.НаименованиеПродукции=СокрЛП(Стр_Таблицы.ТекстовоеСодержимое);
											ИначеЕсли Параметр="Годен до:" Тогда
												ГоденДо=СокрЛП(Стр_Таблицы.ТекстовоеСодержимое);
												Добав.Годендо=Дата(Число(Сред(ГоденДо,7,4)),
												Число(Сред(ГоденДо,4,2)),Число(Сред(ГоденДо,1,2)));
											ИначеЕсли Параметр="Дата выработки продукции:" Тогда
												ГоденДо=СокрЛП(Стр_Таблицы.ТекстовоеСодержимое);
												Добав.ДатаПроизводства=Дата(Число(Сред(ГоденДо,7,4)),
												Число(Сред(ГоденДо,4,2)),Число(Сред(ГоденДо,1,2)));
											ИначеЕсли Параметр="Глобальный идентификатор номенклатуры (GUID):" Тогда
												Добав.GUIDПродукции=СокрЛП(Стр_Таблицы.ТекстовоеСодержимое);
												
											ИначеЕсли Параметр="Объем:" Тогда
												Добав.Объем=СокрЛП(Стр_Таблицы.ТекстовоеСодержимое);
											ИначеЕсли Параметр="Глобальный идентификатор номенклатуры (GUID):" Тогда
												Добав.GUIDПродукции=СокрЛП(Стр_Таблицы.ТекстовоеСодержимое);
											КонецЕсли;	
											Параметр="";
										КонецЕсли;
									КонецЦикла;	
								
							Добав.ПродукцияЦРПТ=РегистрыСведений.УниверсальноеСопоставлениеДляСтроковыхЗначений_ХамелеонЦРПТ.Получить(
							Новый Структура("СтроковоеВыражение",Добав.GUIDПродукции)).СправочникДокумент;
	
	Возврат;
Конецесли;
									КолСтрок=КолСтрок-1;
								Конеццикла;
								//Для Каждого Стр_Гипер Из   ДокументHTML.ПолучитьЭлементыПоИмени("a") Цикл
	
								
								
								
								
							КонецЕсли;
						КонецЕсли;
					Конецесли;	
				
				
				Конеццикла;
				
				
			Иначе
				ЗагрузитьПоПродажнойТранзакции(ДокументHTML,HTTPСервисЗапрос,Сайт);
				
		КонецЕсли;			
						
			ДобавитьПродукцию_ХамелеонЦРПТ();

	
КонецПроцедуры
	
Процедура ЗагрузитьПоПродажнойТранзакции(ДокументHTML,HTTPСервисЗапрос,Сайт)
	
	
	Для Каждого Стр_Гипер Из   ДокументHTML.ПолучитьЭлементыПоИмени("a") Цикл
		Если СокрЛП(Стр_Гипер.Заголовок)="просмотр сведений"  Тогда
			
			Гиперссылка=Сред(Стр_Гипер.Гиперссылка,1 );
			
			
			ГиперВет=Сред(Гиперссылка,Найти(Гиперссылка,"'")+1);
			ГиперВет=Сред(ГиперВет,1,Найти(ГиперВет,"'")-1);
								
								HTTPСервисЗапрос.Open("GET", Сайт+"/"+ГиперВет, 0);
							//					Обработки._Запуск_ХамелеонМеркурий.УстановитьПрокси(HTTPСервисЗапрос);
												HTTPСервисЗапрос.Send();
												HTTPСервисЗапрос.WaitForResponse();
												
												
												ПолучСтр=HTTPСервисЗапрос.ResponseText;
								Чтение = Новый ЧтениеHTML;
								Чтение.УстановитьСтроку(ПолучСтр);
								ПостроительDOM = Новый ПостроительDOM;
								ДокументHTML_1 = ПостроительDOM.Прочитать(Чтение);
								
								КолСтрок=ДокументHTML_1.ПолучитьЭлементыПоИмени("a").Количество();
								
 								Пока    КолСтрок>0 Цикл
									Ссылка_1=
ДокументHTML_1.ПолучитьЭлементыПоИмени("a")[КолСтрок-1]									;

Если Сред(СокрЛП(Ссылка_1.ТекстовоеСодержимое),1,1)=	"№" Тогда
	
	
			HTTPСервисЗапрос.Open("GET", Сайт+"/"+Ссылка_1.Гиперссылка, 0);
							//					Обработки._Запуск_ХамелеонМеркурий.УстановитьПрокси(HTTPСервисЗапрос);
												HTTPСервисЗапрос.Send();
												HTTPСервисЗапрос.WaitForResponse();
												
												
												ПолучСтр=HTTPСервисЗапрос.ResponseText;
								Чтение = Новый ЧтениеHTML;
								Чтение.УстановитьСтроку(ПолучСтр);
								ПостроительDOM = Новый ПостроительDOM;
								ДокументHTML_3 = ПостроительDOM.Прочитать(Чтение);
								
								
								КолСтрок_1=ДокументHTML_3.ПолучитьЭлементыПоИмени("a").Количество();
								
 								Пока    КолСтрок_1>0 Цикл
									Ссылка_2=
ДокументHTML_3.ПолучитьЭлементыПоИмени("a")[КолСтрок_1-1]									;

Если Сред(СокрЛП(Ссылка_2.ТекстовоеСодержимое),1,1)=	"№" Тогда
	
	
	HTTPСервисЗапрос.Open("GET", Сайт+"/"+Ссылка_2.Гиперссылка, 0);
							//					Обработки._Запуск_ХамелеонМеркурий.УстановитьПрокси(HTTPСервисЗапрос);
												HTTPСервисЗапрос.Send();
												HTTPСервисЗапрос.WaitForResponse();
												
												
												ПолучСтр=HTTPСервисЗапрос.ResponseText;
								Чтение = Новый ЧтениеHTML;
								Чтение.УстановитьСтроку(ПолучСтр);
								ПостроительDOM = Новый ПостроительDOM;
								ДокументHTML_2 = ПостроительDOM.Прочитать(Чтение);
		
								
								
								Добав=Объект.НомераВСД.Добавить();
								
								
								Параметр="";
									Для Каждого Стр_ТАБЛИЦЫ Из ДокументHTML_2.ПолучитьЭлементыПоИмени("td") Цикл
 										Если НРег(Стр_Таблицы.ИмяКласса)="label" Тогда
											Параметр=СокрЛП(Стр_Таблицы.ТекстовоеСодержимое);
										ИначеЕсли ЗначениеЗаполнено(Параметр) Тогда
											Если Параметр="Уникальный идентификатор ВСД:" Тогда
												Добав.НомерВСД=СокрЛП(Стр_Таблицы.ТекстовоеСодержимое);
											ИначеЕсли Параметр="Название продукции:" Тогда
												Добав.НаименованиеПродукции=СокрЛП(Стр_Таблицы.ТекстовоеСодержимое);
											ИначеЕсли Параметр="Годен до:" Тогда
												ГоденДо=СокрЛП(Стр_Таблицы.ТекстовоеСодержимое);
												Добав.Годендо=Дата(Число(Сред(ГоденДо,7,4)),
												Число(Сред(ГоденДо,4,2)),Число(Сред(ГоденДо,1,2)));
											ИначеЕсли Параметр="Дата выработки продукции:" Тогда
												ГоденДо=СокрЛП(Стр_Таблицы.ТекстовоеСодержимое);
												Добав.ДатаПроизводства=Дата(Число(Сред(ГоденДо,7,4)),
												Число(Сред(ГоденДо,4,2)),Число(Сред(ГоденДо,1,2)));
											ИначеЕсли Параметр="Глобальный идентификатор номенклатуры (GUID):" Тогда
												Добав.GUIDПродукции=СокрЛП(Стр_Таблицы.ТекстовоеСодержимое);
												
											ИначеЕсли Параметр="Объём:" Тогда
												Добав.Объем=СокрЛП(Стр_Таблицы.ТекстовоеСодержимое);
											ИначеЕсли Параметр="Глобальный идентификатор номенклатуры (GUID):" Тогда
												Добав.GUIDПродукции=СокрЛП(Стр_Таблицы.ТекстовоеСодержимое);
											КонецЕсли;	
											Параметр="";
										КонецЕсли;
									КонецЦикла;	
								
							Добав.ПродукцияЦРПТ=РегистрыСведений.УниверсальноеСопоставлениеДляСтроковыхЗначений_ХамелеонЦРПТ.Получить(
							Новый Структура("СтроковоеВыражение",Добав.GUIDПродукции)).СправочникДокумент;
	
	Возврат;
Конецесли;
	КолСтрок_1=КолСтрок_1-1;
								
Конеццикла;
								Конецесли;

									КолСтрок=КолСтрок-1;
								Конеццикла;
								//Для Каждого Стр_Гипер Из   ДокументHTML.ПолучитьЭлементыПоИмени("a") Цикл
	
								
								
								
								
						//	КонецЕсли;
						//КонецЕсли;
					//Конецесли;	
				
				Конецесли;
				Конеццикла;
	
	     		ДобавитьПродукцию_ХамелеонЦРПТ();

	
КонецПроцедуры
			
&НаКлиенте
Процедура ПсолеВыборТранзакции(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
		Объект.Транзакция=РР;
		НайтиПроизводственнуюТраназкциюНаСервере()
		
	Конецесли;
КонецПроцедуры
			
			
&НаКлиенте
Процедура НайтиПроизводственнуюТраназкцию(Команда,Накладная=Ложь)
	Если ЗначениеЗаполнено(Объект.Транзакция) И Накладная<>Истина тогда
		НайтиПроизводственнуюТраназкциюНаСервере();
	Иначе
		ТекПользователь=Объект.ТекущийПользователь;
		
		Форм=ОткрытьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаПоискТранзакции",,,,,,Новый ОписаниеОповещения("ПсолеВыборТранзакции",ЭтаФорма));
		Форм.НомерТТН=Объект.НомерДокумента;
		Форм.ДатаТТН=Объект.ДатаДокумента;
		Форм.ТекущийПользователь=Объект.ТекущийПользователь;
		
	//	ОткрытьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаПоискТранзакции",);
		
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДетальнуюИнформацию(Команда)
	// Вставить содержимое обработчика.
	Если Элементы.НомераВСД.ТекущиеДанные<>Неопределено Тогда
		
			Try
		MSScriptControl = Новый COMObject("MSScriptControl.ScriptControl");
		MSScriptControl.Language = "javascript";
		TimeStamp = MSScriptControl.Eval("(new Date()).valueOf()");
	Except
		TimeStamp = 1000 * (CurrentDate() - Date(1970,1,1) - 3 * 3600);
	EndTry;
	
	Сайт="https://mercury.vetrf.ru";

	//HTTPСервисЗапрос.Open("POST", Сайт+"/operatorui?printType="+Обработки._Запуск_ХамелеонМеркурий.xml_ЗаписатьАтрибут(Тип)+"&preview=false&_action=printVetDocumentList&_language=ru&printPk="+Обработки._Запуск_ХамелеонМеркурий.xml_ЗаписатьАтрибут(Ид)+"&displayPreview=false&timestamp="+TimeStamp+"&displayRecipient=false&transactionPk=&vetDocument=&batchNumber=", 0);
	//HTTPСервисЗапрос.Open("POST", Сайт+"/pub/operatorui?_action=printVetDocumentByUuid&printType=3&uuid="+Обработки._Запуск_ХамелеонМеркурий.xml_ЗаписатьАтрибут(УИД)+"&timestamp="+TimeStamp, 0);
	
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ПослеР",ЭтаФорма),Сайт+"/pub/operatorui?_action=findVetDocumentFormByUuid&uuid="+Элементы.НомераВСД.ТекущиеДанные.НомерВСД);
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеР(РР,ДД) Экспорт
	

КонецПРоцедуры

&НаКлиенте
Процедура НомераВСДПроудкцияЦРПТПриИзменении(Элемент)
 	// Вставить содержимое обработчика.
ДД=Элементы.НомераВСД.ТекущиеДанные;
ЗаполнитьСвязь(ДД.GUIDПродукции,ДД.ПродукцияЦРПТ);
		ДобавитьПродукцию_ХамелеонЦРПТ();
	
КонецПроцедуры

&НаКлиенте
Процедура НомераВСДПроудкцияЦРПТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СписокПродукций=Новый СписокЗначений;
	
	Для Каждого Стр Из Объект.Товары Цикл
		
		СписокПродукций.Добавить(Стр.GTIN);
		
	Конеццикла;
	Если СписокПродукций.Количество()>0 Тогда
		СтандартнаяОбработка=Ложь;
		
		Форм=Открытьформу("Справочник.Продукция_ХамелеонЦРПТ.Форма.ФормаВыбора",,,,,,Новый ОписаниеОповещения("ПослевыбораПРодукции_1",ЭтаФорма,
		Элементы.НомераВСД.ТекущиеДанные));
		
		Стр=Форм.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Стр.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке;
		Стр.Использование=Истина;
		Стр.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Ссылка");
		Стр.ПравоеЗначение=СписокПродукций; 
		Стр.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		
		
	Конецесли;
	
	
КонецПроцедуры


Процедура ЗаполнитьСвязь(GUIDПродукции,ПродукцияЦРПТ)
	
	РегД=регистрысведений.УниверсальноеСопоставлениеДляСтроковыхЗначений_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегД.Отбор.СтроковоеВыражение.Установить(GUIDПродукции);
	
	Добав=РегД.Добавить();
	Добав.СтроковоеВыражение=GUIDПродукции;
	Добав.СправочникДокумент=ПродукцияЦРПТ;
	
	РегД.Записать(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослевыбораПРодукции_1(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
		ДД.ПродукцияЦРПТ=РР;
		ЗаполнитьСвязь(ДД.GUIDПродукции,ДД.ПродукцияЦРПТ);
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНомераВСД(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Стр_1 Из Объект.НомераВСД Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("GTIN",Стр_1.ПродукцияЦРПТ));
		Для Каждого Стр_222 Из НСтр Цикл
			
			Если Не ЗначениезАполнено(Стр_222.НомерВСД) тогда
				Стр_222.НомерВСД=Стр_1.НомерВСД;
			Конецесли;
			Если Не ЗначениезАполнено(Стр_222.Годендо) тогда
				Стр_222.Годендо=Стр_1.Годендо;
			Конецесли;
			Если Не ЗначениезАполнено(Стр_222.ДатаПроизводства) тогда
				Стр_222.ДатаПроизводства=Стр_1.ДатаПроизводства;
			Конецесли;
			
		Конеццикла;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ТранзакцияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТранзакцияПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	
КонецПроцедуры

Процедура 	ДобавитьПродукцию_ХамелеонЦРПТ()
	МассивПродукций=Новый СписокЗначений;
	
	
	УдалимНеНужные=Новый Массив;
	Для Каждого Стр Из Объект.НомераВСД Цикл
		
		Если Не ЗначениеЗАполнено(Стр.НомерВСД) тогда
			УдалимНеНужные.Добавить(Стр);
			
		Конецесли;
	Конеццикла;
	Для Каждого Стр Из УдалимНеНужные Цикл
		Объект.НомераВСД.Удалить(Стр);
	Конеццикла;
	
	Для Каждого Стр Из Объект.Товары Цикл
		Если   ЗначениеЗаполнено(Стр.GTIN) И МассивПродукций.НайтиПоЗначению(Стр.GTIN)=Неопределено тогда
			МассивПродукций.Добавить(Стр.GTIN);
		Конецесли;
	Конеццикла;
	
	Для Каждого Стр_1 Из ОБъект.НомераВСД Цикл
		
		
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			// Данный фрагмент построен конструктором.
			// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ДополнительныеРеквизиты_Молоко_ХамелеонЦРПТИдентификаторыТовараВФГИСМеркурий.Ссылка  КАК Ссылка
				|ИЗ
				|	Справочник.ДополнительныеРеквизиты_Молоко_ХамелеонЦРПТ.ИдентификаторыТовараВФГИСМеркурий КАК ДополнительныеРеквизиты_Молоко_ХамелеонЦРПТИдентификаторыТовараВФГИСМеркурий
				|ГДЕ
				|	ДополнительныеРеквизиты_Молоко_ХамелеонЦРПТИдентификаторыТовараВФГИСМеркурий.ИдентификаторТовараВФГИСМеркурий ПОДОБНО &ИдентификаторТовараВФГИСМеркурий";
			
			Запрос.УстановитьПараметр("ИдентификаторТовараВФГИСМеркурий", Стр_1.GUIDПродукции);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				// Вставить обработку выборки ВыборкаДетальныеЗаписи
				Если МассивПродукций.Найти(ВыборкаДетальныеЗаписи.Ссылка)<>Неопределено Тогда
					стр_1.ПродукцияЦРПТ=ВыборкаДетальныеЗаписи.Ссылка;
					Прервать;
				Конецесли;
				
			КонецЦикла;
			
			//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			Если Не ЗначениеЗаполнено(Стр_1.ПродукцияЦРПТ)  Тогда
				
				Если ЗначениеЗАполнено(Стр_1.GTINПродукци) тогда
					Попытка
					Стр_1.ПродукцияЦРПТ=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(Стр_1.GTINПродукци));
					
				Исключение
					КонецПопытки;
					
				Конецесли;
				
			Конецесли;
			
			Если Не ЗначениеЗаполнено(Стр_1.ПродукцияЦРПТ)  Тогда
		
				Стр_1.ПродукцияЦРПТ=РегистрыСведений.УниверсальноеСопоставлениеДляСтроковыхЗначений_ХамелеонЦРПТ.Получить(
				Новый Структура("СтроковоеВыражение",Стр_1.GUIDПродукции)).СправочникДокумент;
			Конецесли;
		
			Если ЗначениеЗаполнено(Стр_1.ПродукцияЦРПТ) тогда
				
				НСтр=МассивПродукций.НайтиПоЗначению(Стр_1.ПродукцияЦРПТ);
				Если НСтр<>Неопределено тогда
					МассивПродукций.Удалить(НСтр);
				Конецесли;
				
			Конецесли;
	Конеццикла;
	
	Для Каждого Стр Из МассивПродукций Цикл
		Добав=Объект.НомераВСД.Добавить();
		Добав.ПродукцияЦРПТ=Стр.Значение;
		
	Конеццикла;
	
КонецПроцедуры 

&НаКлиенте
Процедура НомераВСДПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка=Ложь;
	Если Строка<>ПараметрыПеретаскивания.Значение[0] Тогда
		Строк=Объект.НомераВСД.НайтиПоИдентификатору(Строка);
		Строк_1=Объект.НомераВСД.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]);
		
		Если не ЗначениеЗаполнено(Строк.ПродукцияЦРПТ) Тогда
			ЗаполнитьСвязь(Строк.GUIDПродукции,Строк_1.ПродукцияЦРПТ);
			
		Конецесли;
		//Если ЗначениеЗаполнено(Строк.
		//	СопоставитьЭлемент(Строк.Справочник1С,Строк_1.СправочникМеркурия,Строк_1.Наименование4);
		//ОбновитьСвязи()
		
		ДобавитьПродукцию_ХамелеонЦРПТ();
	Конецесли;
	

КонецПроцедуры

&НаКлиенте
Процедура НомерТранзакцииПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Объект.Транзакция=НомерТранзакции;
	НайтиПроизводственнуюТраназкцию("");
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТранзакцииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Попытка
		ОткрытьФорму("Документ.Транзакции_ХамелеонМеркурий.Форма.ФормаВыбора",Новый Структура("ТекущаяСтрока",Объект.Транзакция),,,,,
		Новый ОписаниеОповещения("ПослеВыбораТраназкции",ЭтаФорма));
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораТраназкции(РР,ДД) Экспорт
	
	Если ЗначениеЗАполнено(РР) Тогда
		Объект.Транзакция=РР;
		НомерТранзакции=Строка(РР);
		НайтиПроизводственнуюТраназкцию("");
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура НомерМеркурийПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если ЗначениеЗаполнено(ОБъект.НомерДокумента)
		 И ЗначениеЗаполнено(Объект.ДатаДокумента) Тогда
		 
		 НайтиПроизводственнуюТраназкцию("",Истина);

	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаМеркурийПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ОБъект.НомерДокумента)
		 И ЗначениеЗаполнено(Объект.ДатаДокумента) Тогда
		 
		 НайтиПроизводственнуюТраназкцию("",Истина);

	Конецесли;

КонецПроцедуры
