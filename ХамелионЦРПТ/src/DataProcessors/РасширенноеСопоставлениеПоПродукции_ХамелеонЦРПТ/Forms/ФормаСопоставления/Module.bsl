&НаКлиенте
Процедура ЦРПТПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	
	Для Каждого Стр Из ТаблицаСопоставлений Цикл
		Стр.СправочникМеркурия=Неопределено;
	КонецЦикла;
	
	Если Элементы.ЦРПТ.СписокВыбора.НайтиПоЗначению(ВидСопоставленияМеркурия)=Неопределено Тогда
		СписокПодбора=Новый СписокЗначений;
		Для Каждого Стр Из Элементы.ЦРПТ.СписокВыбора Цикл
			Знач_1=СтрЗаменить(Стр.Значение,"СправочникСсылка.","");
			
			Знач_1=СтрЗаменить(Знач_1,"ДокументСсылка.","");
			Если Найти(ВреГ(Стр.Значение),ВреГ(ВидСопоставленияМеркурия))>0 Тогда
				СписокПодбора.Добавить(Стр.Значение);
			КонецЕсли;
		КонецЦикла;
		ВидСопоставленияМеркурия="";		
		СправочникДокументы_Мерурия_Сопотавления=Неопределено;
		Если 	СписокПодбора.Количество()>0	Тогда
			СписокПодбора.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ПослеВыбораСпискаНЕ",ЭтаФорма));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если ВидСопоставленияМеркурия<>"" Тогда
		УкажемТипМеркурия();
	Иначе
	УстанвитьВидимостьКнопок()	
		
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПослеВыбораСпискаНЕ(РР,ДД)  Экспорт
	Если РР<>Неопределено Тогда
		ВидСопоставленияМеркурия=РР.Значение;
		УкажемТипМеркурия();

	КонецЕсли;
КонецПроцедуры

Процедура УкажемТипМеркурия() Экспорт
//	Массив=Новый Массив;
//	Массив.Добавить(Тип(ВидСопоставленияМеркурия));
//	Элементы.Поле10.ДоступныеТипы.Типы().Очистить();
//	Элементы.Поле10.ДоступныеТипы.Типы().Добавить(Тип(ВидСопоставленияМеркурия));
//	Элементы.Поле10.ВыбиратьТип=Ложь;

	//ОписаниеТипов=Новый ОписаниеТипов(ВидСопоставленияМеркурия);
	
	ОбновитьРеквизитТаблицыСопоставления(Ложь)	;
//	Элементы.Таблица9СправочникМеркурия.ОграничениеТипа=ОписаниеТипов;
	
	
	УстанвитьВидимостьКнопок()	
	
	//СправочникДокументы_Мерурия_Сопотавления=ОписаниеТипов.ПривестиЗначение(СправочникДокументы_Мерурия_Сопотавления);
КонецПроцедуры


Процедура ЗаполнитьСписокМетаданных()
	
	//  	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	//// Данный фрагмент построен конструктором.
	//// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ПартииТоваров_ХамелеонЦРПТОстатки.Номенклатура КАК Номенклатура,
	//	|	СУММА(ПартииТоваров_ХамелеонЦРПТОстатки.КоличествоОстаток) КАК КоличествоОстаток
	//	|ИЗ
	//	|	РегистрНакопления.ПартииТоваров_ХамелеонЦРПТ.Остатки КАК ПартииТоваров_ХамелеонЦРПТОстатки
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ПартииТоваров_ХамелеонЦРПТОстатки.Номенклатура
	//	|ИТОГИ
	//	|	СУММА(КоличествоОстаток)
	//	|ПО
	//	|	Номенклатура";
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//
	//Пока ВыборкаНоменклатура.Следующий() Цикл
	//	// Вставить обработку выборки ВыборкаНоменклатура
	//КонецЦикла;
	//
	////}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Элементы.ЦРПТ.СписокВыбора.Очистить();
	Элементы.НеЦРПТ.СписокВыбора.Очистить();
	Элементы.НеЦРПТ1.СписокВыбора.Очистить();
	
	Для Каждого Стр Из Метаданные.РегистрыНакопления Цикл
		
		//Если Прав(Стр.Имя,17)="_ХамелеонЦРПТ"  Тогда
		//Иначе
				Элементы.НеЦРПТ1.СписокВыбора.Добавить("РегистрНакопления."+Стр.Имя);
		//КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Стр Из Метаданные.РегистрыБухгалтерии Цикл
		
		//Если Прав(Стр.Имя,17)="_ХамелеонЦРПТ"  Тогда
		//Иначе
				Элементы.НеЦРПТ1.СписокВыбора.Добавить("РегистрБухгалтерии."+Стр.Имя);
		//КонецЕсли;
		
	КонецЦикла;
	
	
	Для Каждого Стр Из Метаданные.Справочники Цикл
		
		Если Прав(Стр.Имя,12)="ХамелеонЦРПТ"  Тогда
			Если ВОбратнуюСторону Тогда
				Элементы.НеЦРПТ.СписокВыбора.Добавить("СправочникСсылка."+Стр.Имя);
			Иначе
			
				Элементы.ЦРПТ.СписокВыбора.Добавить("СправочникСсылка."+Стр.Имя);
			КонецЕсли;
		Иначе
			
			Если ВОбратнуюСторону Тогда
				Элементы.ЦРПТ.СписокВыбора.Добавить("СправочникСсылка."+Стр.Имя);
			Иначе
				Элементы.НеЦРПТ.СписокВыбора.Добавить("СправочникСсылка."+Стр.Имя);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	

	Для Каждого Стр Из Метаданные.Документы Цикл
		Если Прав(Стр.Имя,12)="ХамелеонЦРПТ" Тогда
			Если ВОбратнуюСторону Тогда
				Элементы.НеЦРПТ.СписокВыбора.Добавить("ДокументСсылка."+Стр.Имя);
				
			Иначе
				Элементы.ЦРПТ.СписокВыбора.Добавить("ДокументСсылка."+Стр.Имя);
			КонецЕсли;
			
		Иначе
			Если ВОбратнуюСторону Тогда
				Элементы.ЦРПТ.СписокВыбора.Добавить("ДокументСсылка."+Стр.Имя);
			Иначе
				Элементы.НеЦРПТ.СписокВыбора.Добавить("ДокументСсылка."+Стр.Имя);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура НеЦРПТПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	
	// Вставить содержимое обработчика.
	//ТаблицаСопоставлений.Очистить();	
	Если Элементы.НеЦРПТ.СписокВыбора.НайтиПоЗначению(ВидСопоставленияНеЦРПТ)=Неопределено Тогда
		СписокПодбора=Новый СписокЗначений;
		Для Каждого Стр Из Элементы.НеЦРПТ.СписокВыбора Цикл
			Знач_1=СтрЗаменить(Стр.Значение,"СправочникСсылка.","");
			
			Знач_1=СтрЗаменить(Знач_1,"ДокументСсылка.","");
			Если Найти(ВреГ(Стр.Значение),ВреГ(ВидСопоставленияНеЦРПТ))>0 Тогда
				СписокПодбора.Добавить(Стр.Значение);
			КонецЕсли;
		КонецЦикла;
		ВидСопоставленияНеЦРПТ="";		
		СправочникДокументыНЕМеркурия=Неопределено;
		Если 	СписокПодбора.Количество()>0	Тогда
			СписокПодбора.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ПослеВыбораСписка",ЭтаФорма));Возврат;
			
		КонецЕсли;
	КонецЕсли;
	Если ВидСопоставленияНеЦРПТ<>"" Тогда
		УкажемТипМеркурияНЕ();
	Иначе
		УстанвитьВидимостьКнопок()	
	КонецЕсли;
	ОбновитьСписок()	
 	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСписка(РР,ДД)  Экспорт
	Если РР<>Неопределено Тогда
		ВидСопоставленияНеЦРПТ=РР.Значение;
		УкажемТипМеркурияНЕ();
	ОбновитьСписок()	
 
	КонецЕсли;
	
КонецПроцедуры
Процедура УкажемТипМеркурияНЕ() Экспорт
//	Массив=Новый Массив;
//	Массив.Добавить(Тип(ВидСопоставленияМеркурия));
//	Элементы.Поле10.ДоступныеТипы.Типы().Очистить();
//	Элементы.Поле10.ДоступныеТипы.Типы().Добавить(Тип(ВидСопоставленияМеркурия));
//	Элементы.Поле10.ВыбиратьТип=Ложь;
	//Если Элементы.Найти("Таблица9Справочник1С")<>Неопределено Тогда
	//	Элементы.Удалить(Элементы["Таблица9Справочник1С"]);
	//	МассиУд=Новый Массив;
	//	МассиУд.Добавить("ТаблицаСопоставлений.Справочник1С");
	//	ИзменитьРеквизиты(,МассиУд);
	//КонецЕсли;
	ТаблицаСохранить=ТаблицаСопоставлений.Выгрузить();
	ТаблицаСопоставлений.Очистить();
	ОбновитьРеквизитТаблицыСопоставления();
	
	УстанвитьВидимостьКнопок()	;
	
	Для Каждого Стр Из ТаблицаСохранить Цикл
		Если ЗначениеЗАполнено(Стр.СправочникМеркурия) Тогда
			ДД=ТаблицаСопоставлений.Добавить();
			ДД.СправочникМеркурия=Стр.СправочникМеркурия;
		Конецесли;
	КонецЦикла;
	
//	Элементы.Таблица9Справочник1С.Знач
//	СправочникДокументыНЕМеркурия=ОписаниеТипов.ПривестиЗначение(СправочникДокументыНЕМеркурия);
КонецПроцедуры


&НаСервере
Процедура СопоставитьНаСервере()
	// Вставить содержимое обработчика.
	Для Каждого Стр Из ТаблицаСопоставлений Цикл
		Если ЗначениеЗаполнено(Стр.Справочник1С)
		//	И ЗначениеЗАполнено(Стр.СправочникМеркурия) 
		Тогда
			Если ЗначениеЗАполнено(Стр.СправочникМеркурия) Тогда
				регДв=РегистрыСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СоздатьНаборЗаписей();
				РегДв.Отбор.Справочник_Документ.Установить(Стр.Справочник1С);
				
				ДД=РегДв.Добавить();
				ДД.Справочник_Документ=Стр.Справочник1С;
				ДД.СправочникДокумент_Меркурия=Стр.СправочникМеркурия;
				РегДв.Записать(Истина);
				
				Если Не ЗначениеЗаполнено(Стр.СправочникМеркурия.РеквизитДляСопоставления) Тогда
					
					СпрП=Стр.СправочникМеркурия.ПолучитьОбъект();
					СпрП.РеквизитДляСопоставления=Стр.Справочник1С.Код;
					СпрП.Записать();
					
				КонецЕсли;
				
				
			Иначе
				
				//ЗаписьПолуч=РегистрыСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СоздатьКлючЗаписи(Новый Структура("Справочник1С", Стр.Справочник1С));
				регДв=РегистрыСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СоздатьНаборЗаписей();
				РегДв.Отбор.Справочник_Документ.Установить(Стр.Справочник1С);
				РегДв.Прочитать();
				//Пока РегДв.
				Для Каждого Рег_1 Из регДв Цикл
					РегДв.Удалить(Рег_1);
				Конеццикла;	
				РегДв.Записать(Истина);
				//				РегДв.Отбор.Справочник_Документ.Установить(Стр.Справочник1С);
				
//				ДД=РегДв.Добавить();
//				ДД.Справочник_Документ=Стр.Справочник1С;
//				ДД.СправочникДокумент_Меркурия=Стр.СправочникМеркурия;
//				РегДв.Записать(Истина);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура Сопоставить(Команда)
	//Если Не ЗначениеЗаполнено(СправочникДокументыНЕМеркурия)
	//	ИЛИ Не ЗначениеЗаполнено(СправочникДокументы_Мерурия_Сопотавления) Тогда
	//	ПоказатьПредупреждение(,"Необходимо выбрать элементы!!!");
	//	Возврат;
	//КонецЕсли;
	//Если ЕстьУжеСвязь Тогда
	//	ПоказатьВопрос(Новый ОписаниеОповещения("ПослеОтветаНаВопрос",ЭтаФорма),"Связь уже существует. Переписать?",РежимДиалогаВопрос.ДаНет);
	//Иначе
	//	ПослеОтветаНаВопрос(КодВозвратаДиалога.Да,"")		
	//КонецЕсли;
	СопоставитьНаСервере();
	//ЭтаФорма.Закрыть();
	
	Если Элементы.Таблица9.ВыделенныеСтроки.Количество()>1 ТОгда
		МассивВыд=Новый Массив;
		Для Каждого Стр_1 Из Элементы.Таблица9.ВыделенныеСтроки Цикл
			Стр=ТаблицаСопоставлений.НайтиПоИдентификатору(Стр_1);
			
			МассивВыд.Добавить(Стр.СправочникМеркурия);
			
		Конеццикла;
		
		//ОткрытьФорму("Справочник."+Сред(ВидСопоставленияНеЦРПТ,Найти(ВидСопоставленияНеЦРПТ,".")+1)+".ФормаВыбора",,,,,,Новый ОписаниеОповещения("Послевыбораэлемента",ЭтаФорма,МассивВыд));
		ОткрытьФорму("Обработка.УниверсальныйЖурнал_ХамелеонЦРПТ.Форма.Форма",Новый Структура("Тип,ТипДальше","Справочник",Сред(ВидСопоставленияНеЦРПТ,Найти(ВидСопоставленияНеЦРПТ,".")+1)),,,,,Новый ОписаниеОповещения("Послевыбораэлемента",ЭтаФорма,МассивВыд))		
	Иначе
		ОбновитьСписок()		
	КонецЕсли;
	
		Элементы.Группа1.Видимость=Ложь;
	
	ПодключитьОбработчикОжидания("ААА",0.1,Истина);

	
КонецПроцедуры


Процедура СохранитьРегистрСведений(Справочник1С,СправочникМеркурия)
				регДв=РегистрыСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СоздатьНаборЗаписей();
				РегДв.Отбор.Справочник_Документ.Установить(Справочник1С);
				
				ДД=РегДв.Добавить();
				ДД.Справочник_Документ=Справочник1С;
				ДД.СправочникДокумент_Меркурия=СправочникМеркурия;
				РегДв.Записать(Истина);
				
				Если Не ЗначениеЗаполнено(СправочникМеркурия.РеквизитДляСопоставления) Тогда
					
					СпрП=СправочникМеркурия.ПолучитьОбъект();
					СпрП.РеквизитДляСопоставления=Справочник1С.Код;
					СпрП.Записать();
					
				КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Послевыбораэлемента(РР,ДД) Экспорт
	Если Значениезаполнено(РР) Тогда
		
		Для Каждого Стр Из ДД Цикл
			Если ЗначениеЗаполнено(Стр) Тогда
				Если ПроверкаСвязи(Стр,РР[0]) Тогда
					СтруктураСохр=Новый Структура("Спр1С,СпрМерк",РР[0],Стр);
					СохранитьСвязьДвойную(СтруктураСохр);
				Иначе
					
					СохранитьРегистрСведений(РР[0],Стр)
					
				КонецЕсли;
			КонецЕсли;
		Конеццикла;
	КонецЕсли;
	ОбновитьСписок();		
		Элементы.Группа1.Видимость=Ложь;
	
	ПодключитьОбработчикОжидания("ААА",0.1,Истина);

	
КонецПроцедуры


&НаСервере
Процедура Поле13ПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	ЗначениеМеркурия=РегистрыСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Получить(Новый Структура("Справочник_Документ",СправочникДокументыНЕМеркурия)).СправочникДокумент_Меркурия;
	Если ЗначениеЗаполнено(ЗначениеМеркурия) Тогда
		Элементы.Декорация3.Заголовок="Справочнику "+Строка(СправочникДокументыНЕМеркурия)+" соответствует справочник Хамелеон ЦРПТ"+Строка(ЗначениеМеркурия);
		ЕстьУжеСвязь=Истина;
	Иначе

		Элементы.Декорация3.Заголовок="НЕТ СОПОСТАВЛЕНИЯ";
		ЕстьУжеСвязь=Ложь;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура Поле13ПриИзменении(Элемент)
	Поле13ПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Вставить содержимое обработчика.
	Параметры.Свойство("ИнформационнаяСтрока",ИнформационнаяСтрока) ;
	
	ЗаполнитьСписокМетаданных();	
	Параметры.Свойство("ТекущийПользователь",ТекущийПользователь);
	
	
	Тип1="";
	Если Параметры.Свойство("Тип1",Тип1) Тогда
		Если Тип1<>ТипЗнч(Неопределено) Тогда
			ВидСопоставленияНеЦРПТ=Параметры.Вид1+"."+Метаданные.НайтиПоТипу(Тип1).Имя;
		Конецесли;
		Если Параметры.Тип2<>ТипЗнч(Неопределено) Тогда
			ВидСопоставленияМеркурия=Параметры.Вид2+"."+Метаданные.НайтиПоТипу(Параметры.Тип2).Имя;
		КонецЕсли;

	КонецЕсли;
	

	
	ТаблицаС="";
	Если Параметры.Свойство("ТаблицаСопоставления",ТаблицаС) Тогда
		ОбновитьРеквизитТаблицыСопоставления();	
		НеОчищать=Истина;
		Если Тип("ТаблицаЗначений")=ТипЗнч(ТаблицаС) Тогда
			ТаблицаСопоставлений.Загрузить(ТаблицаС);
		Иначе
			ТаблицаСопоставлений.Очистить();
			Для Каждого Стр Из ТаблицаС Цикл
				ДД=ТаблицаСопоставлений.Добавить();
				ЗаполнитьЗначенияСвойств(ДД,Стр);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Доп=4;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнешниеОбработки_ХамелеонЦРПТ.ИмяВнешнейОБработки,
		|	ВнешниеОбработки_ХамелеонЦРПТ.НаименованиеКнопки,
		|	ВнешниеОбработки_ХамелеонЦРПТ.Код
		|ИЗ
		|	Справочник.ВнешниеОбработки_ХамелеонЦРПТ КАК ВнешниеОбработки_ХамелеонЦРПТ
		|ГДЕ
		|	ВнешниеОбработки_ХамелеонЦРПТ.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", "ФОРМАСОПОСТАВЛЕНИЕ"); //"Документ.ВетеринарныеСправки_ХамелеонЦРПТ");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ИмяКоманды="Команда"+ВыборкаДетальныеЗаписи.Код;
		Попытка
		КомандаФормы = Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуВнешняя";
		КомандаФормы.Заголовок = ВыборкаДетальныеЗаписи.ИмяВнешнейОБработки;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.Текст;
		
		//ОписаниеКомандыПечати.ИмяКомандыНаФорме = ИмяКоманды;
		
		НовыйЭлемент = Элементы.Добавить("ГруппаКнопокВнешняя"+Доп+ ИмяКоманды, Тип("КнопкаФормы"),Элементы.ГруппаКнопокВнешняя4 );
		НовыйЭлемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		НовыйЭлемент.Заголовок=ВыборкаДетальныеЗаписи.НаименованиеКнопки;
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	Исключение
		КонецПопытки;
	КонецЦикла;
	
		    //Элемент.РастягиватьПоГоризонтали = Истина;
		    //Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
			
			
		//	ИмяРеквизитаНаФорме=СтрЗаменить(Стр,".","_ТОЧКА_");
		//	ИмяРеквизитаНаФорме=ИмяРеквизитаНаФорме+"_по_умолчанию";
			
			
			
//			МассивТипов = Новый Массив;
//МассивТипов.Добавить(Тип("Число"));

//ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов);
//		    Реквизит = Новый РеквизитФормы(ИмяРеквизитаНаФорме, ДопустимыеТипы); 
//			МассивДРекв.Очистить();
//			МассивДРекв.Добавить(Реквизит);

//	ИзменитьРеквизиты(МассивДРекв);
			
			//ИмяКолонки="ТаблицаСопоставленийСправочникЦРПТ"+xmlstring(СтрЗаменить(Стр,".","_"))+"ПОЛЕ_ДОП";
//		    Элемент = ЭтаФорма.Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"),Элементы.ДопРеквизиты); 
//		    Элемент.Вид = ВидПоляФормы.ПолеВвода; 
//		    Элемент.ПутьКДанным = ИмяКолонки;//"Поле"+xmlstring(Сч); 
			
		//	ЗначМ=МассивПредыдущихЗначений.Найти(ИмяРеквизитаНаФорме,"Имя");
		//	Если ЗначМ<>Неопределено Тогда
		//		ЭтаФорма[ИмяРеквизитаНаФорме]=ЗначМ.Значение;
		//	КонецЕсли;
			
			
		    //Элемент.РастягиватьПоГоризонтали = Истина;
		    //Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		//Доб=ТаблицаКолонокМерк.Добавить();
		//	Доб=ТаблицаКолонокМерк.Добавить();
		//	Доб.ИмяРеквизита=ИмяКолонки;
		//	Доб.ИмяРеквизтаНаФорме=ИмяКолонки;

			
	
	
	
КонецПроцедуры


Процедура ОбновитьРеквизитТаблицыСопоставления(НеОБнолять1С=Истина)
	ТаблицаСопоставл=Неопределено;
	
	УдалитьРекв=Новый Массив;
	Для Каждого Стр Из ТаблицаКолонокМерк Цикл
		
		Если ЗначениеЗаполнено(Стр.ИмяРеквизтаНаФорме) Тогда
			УдалитьРекв.Добавить(Стр.ИмяРеквизтаНаФорме);
		КонецЕсли;
			
		
		Элементы.Удалить(Элементы[Стр.ИмяРеквизита]);
		Если Элементы.Найти(Стр.ИмяРеквизтаНаФорме)<>Неопределено Тогда
			Элементы.Удалить(Элементы[Стр.ИмяРеквизтаНаФорме]);
		КонецЕсли;
	

	КонецЦИкла;
	Если Элементы.Найти("ТаблицаСопоставленийСправочникЦРПТОстаток1с")<>Неопределено Тогда
		Элементы.Удалить(Элементы["ТаблицаСопоставленийСправочникЦРПТОстаток1с"]);
	Конецесли;	
	Если Элементы.Найти("ТаблицаСопоставленийСправочникЦРПТОстаток")<>Неопределено Тогда
		Элементы.Удалить(Элементы["ТаблицаСопоставленийСправочникЦРПТОстаток"]);
	Конецесли;	
	
	Если Элементы.Найти("ТаблицаСопоставленийСправочникЦРПТНесколько")<>Неопределено Тогда
		Элементы.Удалить(Элементы["ТаблицаСопоставленийСправочникЦРПТНесколько"]);
	Конецесли;	
	
	ИзменитьРеквизиты(,УдалитьРекв);
	

	ТаблицаКолонокМерк.Очистить();;
	
	Если Элементы.Найти("Таблица9СправочникМеркурия")<>Неопределено Тогда
		Элементы.Удалить(Элементы["Таблица9СправочникМеркурия"]);
		МассиУд=Новый Массив;
		МассиУд.Добавить("ТаблицаСопоставлений.СправочникМеркурия");
		ИзменитьРеквизиты(,МассиУд);
	КонецЕсли;
	
	Если НеОБнолять1С Тогда
		
		Для Каждого Стр Из ТаблицаКолонок1С Цикл
			Элементы.Удалить(Элементы[Стр.ИмяРеквизита]);
		КонецЦИкла;
		ТаблицаКолонок1с.Очистить();;
		
		Если Элементы.Найти("Таблица9Справочник1С")<>Неопределено Тогда
			Элементы.Удалить(Элементы["Таблица9Справочник1С"]);
			МассиУд=Новый Массив;
			МассиУд.Добавить("ТаблицаСопоставлений.Справочник1С");
			ИзменитьРеквизиты(,МассиУд);
		КонецЕсли;
		
		ОписаниеТипов=Новый ОписаниеТипов(ВидСопоставленияНеЦРПТ);
		МассивДобРекв=Новый Массив;
		ИмяРеквизита = "Справочник1С";
		РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТипов,"ТаблицаСопоставлений");
		МассивДобРекв.Добавить(РеквизитФормы);
		ИзменитьРеквизиты(МассивДобРекв);
		
		НовыйЭлемент = Элементы.Добавить("Таблица9Справочник1С", Тип("ПолеФормы"), Элементы.Таблица9);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ТаблицаСопоставлений.Справочник1С";
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
		НовыйЭлемент.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;  
		НовыйЭлемент.УстановитьДействие("ПриИзменении","Таблица9Справочник1СПриИзменении");
		
		
		
	КонецЕсли;
	
		    Стр="Остаток1С";
			ИмяКолонки="ТаблицаСопоставленийСправочникЦРПТОстаток1С";
		    Элемент = ЭтаФорма.Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"),Элементы.Таблица9); 
		    Элемент.Вид = ВидПоляФормы.ПолеВвода; 
		    Элемент.ПутьКДанным = "ТаблицаСопоставлений."+Стр;//"Поле"+xmlstring(Сч); 
			Элемент.ТолькоПросмотр=Истина;
			ИтогОстаток1с=ТаблицаСопоставлений.Итог("Остаток1С");
			Элемент.ПутьКДаннымПодвала="ИтогОстаток1с";
	
	
	ОписаниеТипов=Новый ОписаниеТипов(ВидСопоставленияМеркурия);
	МассивДобРекв=Новый Массив;
	ИмяРеквизита = "СправочникМеркурия";
	РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТипов,"ТаблицаСопоставлений","Справочник Хамелеон ЦРПТ");
	МассивДобРекв.Добавить(РеквизитФормы);
	ИзменитьРеквизиты(МассивДобРекв);
	
	НовыйЭлемент = Элементы.Добавить("Таблица9СправочникМеркурия", Тип("ПолеФормы"), Элементы.Таблица9);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТаблицаСопоставлений.СправочникМеркурия";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	НовыйЭлемент.КнопкаОчистки=Истина;
	НовыйЭлемент.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;  
	НовыйЭлемент.УстановитьДействие("ПриИзменении","Таблица9СправочникМеркурияПриИзменении");

	МассивДРекв=Новый Массив;
	
	Если ТаблицаСопоставл<>Неопределено Тогда
		НайтиСтроки=ТаблицаСопоставл.НайтиСтроки(Новый Структура("ТипПереданного",ВидСопоставленияМеркурия));
		Для Каждого Стр Из НайтиСтроки Цикл
			Если Стр.Отметка Тогда
				Попытка
					ИмяКолонки="ТаблицаСопоставленийСправочникЦРПТ"+xmlstring(СтрЗаменить(Стр.ИмяКолонки,".","_"));
				    Элемент = ЭтаФорма.Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"),Элементы.Таблица9); 
				    Элемент.Вид = ВидПоляФормы.ПолеВвода; 
				    Элемент.ПутьКДанным = "ТаблицаСопоставлений.СправочникМеркурия."+Стр.ИмяКолонки;//"Поле"+xmlstring(Сч); 
				    //Элемент.РастягиватьПоГоризонтали = Истина;
				    //Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
					Доб=ТаблицаКолонокМерк.Добавить();
					Доб.ИмяРеквизита=ИмяКолонки;
					
					
					ИмяРеквизитаНаФорме=СтрЗаменить(Стр.ИмяКолонки,".","_ТОЧКА_");
					ИмяРеквизитаНаФорме=ИмяРеквизитаНаФорме+"_по_умолчанию";
					Доб.ИмяРеквизтаНаФорме=ИмяРеквизитаНаФорме;
					
					М=Метаданные.НайтиПоТипу(Тип(ВидСопоставленияМеркурия));
					О=м.Реквизиты.Найти(Стр.ИмяКолонки);
					Если О=Неопределено Тогда
						о=м.стандартныеРеквизиты[Стр.ИмяКолонки];
						
					КонецЕсли;
					
				    Реквизит = Новый РеквизитФормы(ИмяРеквизитаНаФорме, Новый ОписаниеТипов(о.Тип)); 
					МассивДРекв.Очистить();
					МассивДРекв.Добавить(Реквизит);

					ИзменитьРеквизиты(МассивДРекв);
					
					//ИмяКолонки="ТаблицаСопоставленийСправочникЦРПТ"+xmlstring(СтрЗаменить(Стр,".","_"))+"ПОЛЕ_ДОП";
				    Элемент = ЭтаФорма.Элементы.Добавить(ИмяРеквизитаНаФорме, Тип("ПолеФормы"),Элементы.ДопРеквизиты); 
				    Элемент.Вид = ВидПоляФормы.ПолеВвода; 
				    Элемент.ПутьКДанным = ИмяРеквизитаНаФорме;//"Поле"+xmlstring(Сч); 
				    //Элемент.РастягиватьПоГоризонтали = Истина;
				    //Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
				//Доб=ТаблицаКолонокМерк.Добавить();
					
				Исключение
				КонецПопытки;
				
			КонецЕсли;
		КонецЦикла;
		
		Если НеОБнолять1С Тогда
			НайтиСтроки=ТаблицаСопоставл.НайтиСтроки(Новый Структура("ТипПереданного",ВидСопоставленияНеЦРПТ));
			Для Каждого Стр Из НайтиСтроки Цикл
				Если Стр.Отметка Тогда
					Попытка
						ИмяКолонки="ТаблицаСопоставленийСправочник1с"+xmlstring(СтрЗаменить(Стр.ИмяКолонки,".","_"));
					    Элемент = ЭтаФорма.Элементы.Вставить(ИмяКолонки, Тип("ПолеФормы"), Элементы.Таблица9,Элементы.Таблица9СправочникМеркурия); 
					    Элемент.Вид = ВидПоляФормы.ПолеВвода; 
					    Элемент.ПутьКДанным = "ТаблицаСопоставлений.Справочник1С."+Стр.ИмяКолонки;//"Поле"+xmlstring(Сч); 
					    //Элемент.РастягиватьПоГоризонтали = Истина;
					    //Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
						Доб=ТаблицаКолонок1с.Добавить();
						Доб.ИмяРеквизита=ИмяКолонки;
					Исключение
					КонецПопытки;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
		    Стр="НесколькоЭлементов";
			ИмяКолонки="ТаблицаСопоставленийСправочникЦРПТНесколько";
		    Элемент = ЭтаФорма.Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"),Элементы.Таблица9); 
		    Элемент.Вид = ВидПоляФормы.ПолеВвода; 
		    Элемент.ПутьКДанным = "ТаблицаСопоставлений."+Стр;//"Поле"+xmlstring(Сч); 
			Элемент.ТолькоПросмотр=Истина;
			Элемент.Вид=ВидПоляФормы.ПолеФлажка;
	
	
		    Стр="Остаток";
			ИмяКолонки="ТаблицаСопоставленийСправочникЦРПТОстаток";
		    Элемент = ЭтаФорма.Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"),Элементы.Таблица9); 
		    Элемент.Вид = ВидПоляФормы.ПолеВвода; 
		    Элемент.ПутьКДанным = "ТаблицаСопоставлений."+Стр;//"Поле"+xmlstring(Сч); 
			Элемент.ТолькоПросмотр=Истина;
			ИтогОстаток=ТаблицаСопоставлений.Итог("Остаток");
			
			Элемент.ПутьКДаннымПодвала="ИтогОстаток";
			
	
РАсчетОстатков1С()	
			
			//Элемент.ТолькоПросмотр=Истина;
			//Элемент.УстановитьДействие("ПриИзменении","Таблица9СправочникМеркурияПриИзменении");

			
//		    Реквизит = Новый РеквизитФормы("ТаблицаСопоставленийСправочникЦРПТОстаток_РЕКВИЗИТ", Новый ОписаниеТипов(о.Тип)); 
//			МассивДРекв.Очистить();
//			МассивДРекв.Добавить(Реквизит);

//			ИзменитьРеквизиты(МассивДРекв);
			
КонецПРоцедуры


Функция ПолучитьПараметр(Настройки, Параметр) Экспорт
	
	ЗначениеПараметра = Неопределено;
	ПолеПараметр = ?(ТипЗнч(Параметр) = Тип("Строка"), Новый ПараметрКомпоновкиДанных(Параметр), Параметр);
	
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из Настройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Настройки) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из Настройки.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = Настройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Настройки) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.Найти(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("ОформлениеКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.НайтиЗначениеПараметра(ПолеПараметр);
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Функция устанавливает значение параметра компоновки данных
//
// Параметры:
//		Настройки     - Пользовательские настройки СКД, Настройки СКД, Компоновщик настроек
//		Параметр      - имя параметра СКД для которого нужно вернуть значение параметра
//      Значение      - значение параметра
//		Использование - Признак использования параметра. По умолчанию всегда принимается равным истине.
//
Функция УстановитьПараметр(Настройки, Параметр, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметра = ПолучитьПараметр(Настройки, Параметр);
	
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Использование = Использование;
		ЗначениеПараметра.Значение      = Значение;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции


Процедура  РАсчетОстатков1С(Вся=Ложь) Экспорт
	Если Элементы.Кнопка6.Заголовок="Вся продукция" Тогда
		Вся=Ложь;
	Иначе
		Вся=Истина;
	КонецЕсли;
//	СписокТовара1С=Новый СписокЗначений;
//	Для Каждого Стр Из ТаблицаСопоставлений Цикл
//		Если ЗначениеЗаполнено(Стр.Справочник1С) Тогда
//			
//			СписокТовара1С.Добавить(Стр.Справочник1С);
//			
//		КонецЕсли;
		
		
//	Конеццикла;

//Попытка
Если ЗначениеЗаполнено(ВидРегистраНакопления1С) Тогда
	
	Если Не ЗначениеЗаполнено(АдресСхемыКомпоновкиДанных) Тогда
		Возврат;
	КонецЕсли;
	Попытка
КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

СхемуПолуч=ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
		УстановитьПараметр(ОтборПоРегистру, "Счет", Счет);

 Если                    ОтборПоРегистру.Настройки.Структура.Количество()=0 Тогда
//ОтборПоРегистру.Настройки.Структура.Очистить();
			Структура = ОтборПоРегистру.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
//	
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
//			
//			//ПолеГруппировки = Структура.Структура.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Номенклатура");
//			                                                             Номенклатура
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			ПолеГруппировки.ТипДополнения=ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			
//			

//ОтборПоРегистру.Настройки.Выбор.Элементы.Очистить();;
			ПолеГруппировки_1  = ОтборПоРегистру.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
//	
			ПолеГруппировки_1.Поле           = Новый ПолеКомпоновкиДанных("Остаток");
		КонецЕсли;	



//МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемуПолуч,ОтборПоРегистру.Настройки);		
 МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемуПолуч, ОтборПоРегистру.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКД.Инициализировать(МакетКомпоновки);

	ДеревоСкладТовар=Новый ДеревоЗначений;
	ПроцессорВывода	= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(ДеревоСкладТовар);
//Исключение
//	Сообщить(ОписаниеОшибки());
//	Возврат;
//	КонецПопытки;
	    ПроцессорВывода.Вывести(ПроцессорКД);
		
		Для Каждого Стр Из ТаблицаСопоставлений Цикл
			Стр.Остаток1с=0;
		КонецЦикла;
		
		Для Каждого СТр_1 Из ДеревоСкладТовар.Строки 
			
			Цикл
			
			Если ЗначениеЗаполнено(СТр_1.Номенклатура) Тогда
				
				Добав=ТаблицаСопоставлений.НайтиСтроки(Новый Структура("Справочник1С",СТр_1.Номенклатура));
				Если Добав.Количество()=0 Тогда
						Если Вся Тогда
	

								РегД=ТаблицаСопоставлений.Добавить();
								РегД.Справочник1С=СТр_1.Номенклатура;
								РегД.СправочникМеркурия=Таблица9Справочник1СПриИзмененииНаСервере(СТр_1.Номенклатура);
								РегД.Остаток1с=СТр_1.Остаток;
						КонецЕсли;
					
				Иначе
					Для Каждого Стр Из Добав Цикл
						
						Стр.Остаток1С=СТр_1.Остаток;
						
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		Конеццикла;
	Исключение
	КонецПопытки;
иНАЧЕ
	//Если ЗначениеЗаполнено(ВидСопоставленияНеЦРПТ) Тогда
	ТаблицаСопоставлений.Очистить();
//Попытка	
	Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Продукция_ХамелеонЦРПТ.Ссылка КАК Номенклатура,
				|	0 КАК КоличествоОстаток
				|ИЗ
				|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
				|
				|СГРУППИРОВАТЬ ПО
				|	Продукция_ХамелеонЦРПТ.Ссылка
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.Продукция,
				|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.КоличествоОстаток
				|ИЗ
				|	РегистрНакопления.ОстаткиКМ_в_Обороте_ХамелеонЦРПТ.Остатки КАК ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция,
				|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток
				|ИЗ
				|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Остатки(, ) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
				|ИТОГИ
				|	СУММА(КоличествоОстаток)
				|ПО
				|	Номенклатура";
			
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПродукция = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	
	Пока ВыборкаПродукция.Следующий() Цикл
		// Вставить обработку выборки ВыборкаПродукция
		Прод=ВыборкаПродукция.Номенклатура;
	
		ВыборкаСправочник_Документ = ВыборкаПродукция.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	//	Пока ВыборкаСправочник_Документ.Следующий() Цикл
			// Вставить обработку выборки ВыборкаСправочник_Документ
	//		
	//		СпрПр1С=ВыборкаСправочник_Документ.Номенклатура1С;
					 
			
	//		Если ЗначениеЗаполнено(СпрПр1С) Тогда
	//			Прервать;
	//		КонецЕсли;
		//ТаблицаСопоставл.Добавить(Новый Структура("СправочникМеркурия,Остатки,Спр1С",Прод,ВыборкаСправочник_Документ.КоличествоОстаток,
		
		//СпрПр1С));
			
	//КонецЦикла;
	СпрПр1С=НеопределенО;
	//СПрПр1С=РегистрыСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Получить();
	Если ЗначениеЗаполнено(Прод.РеквизитДляСопоставления) тогда
				
				     	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Справочник_Документ КАК Справочник_Документ
						|ИЗ
						|	РегистрСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ КАК СопоставлениеСправочниковДокументов_ХамелеонЦРПТ
						|ГДЕ
						|	ВЫРАЗИТЬ(СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СправочникДокумент_Меркурия КАК Справочник.Продукция_ХамелеонЦРПТ).РеквизитДляСопоставления = &РеквизитДляСопоставления";
					
					Запрос.УстановитьПараметр("РеквизитДляСопоставления", Прод.РеквизитДляСопоставления);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Справочник_Документ) Тогда
							СпрПр1С=ВыборкаДетальныеЗаписи.Справочник_Документ;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

				Иначе

					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Справочник_Документ КАК Справочник_Документ
						|ИЗ
						|	РегистрСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ КАК СопоставлениеСправочниковДокументов_ХамелеонЦРПТ
						|ГДЕ
						|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СправочникДокумент_Меркурия= &РеквизитДляСопоставления";
					
					Запрос.УстановитьПараметр("РеквизитДляСопоставления", Прод);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Справочник_Документ) Тогда
							СпрПр1С=ВыборкаДетальныеЗаписи.Справочник_Документ;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					
			КонецЕсли;

	
								РегД=ТаблицаСопоставлений.Добавить();
								РегД.СправочникМеркурия=ВыборкаПродукция.Номенклатура;
								РегД.Справочник1С=СпрПр1С;
								РегД.Остаток=ВыборкаПродукция.КоличествоОстаток;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
//Исключение
//	КонецПопытки;
//	
//	     Возврат;
	
	КонецЕсли;	
	
	Если НеСопоставленная Тогда
		
		УдалитьС=Новый Массив;
		Для каждого Стр Из ТаблицаСопоставлений Цикл
			Если Стр.Остаток=0 ИЛИ ЗначениеЗаполнено(Стр.Справочник1С) Тогда
				УдалитьС.Добавить(Стр);
			КонецЕсли;
		Конеццикла;
		Для Каждого Стр Из УдалитьС Цикл
			ТаблицаСопоставлений.Удалить(Стр);
		Конеццикла;
	
	ИначеЕсли Не Вся Тогда
		УдалитьС=Новый Массив;
		Для каждого Стр Из ТаблицаСопоставлений Цикл
			Если Стр.Остаток=0 Тогда
				УдалитьС.Добавить(Стр);
			КонецЕсли;
		Конеццикла;
		Для Каждого Стр Из УдалитьС Цикл
			ТаблицаСопоставлений.Удалить(Стр);
		Конеццикла;
	Иначе
		УдалитьС=Новый Массив;
		Для каждого Стр Из ТаблицаСопоставлений Цикл
			Если Стр.Остаток1С=0 И Не ЗначениеЗаполнено(Стр.СправочникМеркурия) Тогда
				УдалитьС.Добавить(Стр);
			КонецЕсли;
		Конеццикла;
		Для Каждого Стр Из УдалитьС Цикл
			ТаблицаСопоставлений.Удалить(Стр);
		Конеццикла;
		
	КонецЕсли;
	
	
	
	
//Исключение
//	КонецПопытки;
	ИтогОстаток=ТаблицаСопоставлений.Итог("Остаток");
	ИтогОстаток1с=ТаблицаСопоставлений.Итог("Остаток1с");
			
КонецПроцедуры

&НаКлиенте
Процедура Таблица9ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
	
КонецПроцедуры


//&НаСервере
Функция Таблица9Справочник1СПриИзмененииНаСервере(Справочник1С)
	Возврат РегистрыСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Получить(Новый Структура("Справочник_Документ",Справочник1С)).СправочникДокумент_Меркурия;
	// Вставить содержимое обработчика.
КонецФункции

Функция ПроверкаСвязи(СпрМ,Спр1С)
	СпрМСтарый=Таблица9Справочник1СПриИзмененииНаСервере(Спр1С);
	Возврат ЗначениеЗаполнено(СпрМСтарый) И СпрМСтарый<>СпрМ
КонецФункции

&НаКлиенте
Процедура Таблица9Справочник1СПриИзменении(Элемент)
	Если ЗначениеЗАполнено(Элементы.Таблица9.ТекущиеДанные.СправочникМеркурия) 
		И ЗначениеЗаполнено(Элементы.Таблица9.ТекущиеДанные.Справочник1С)
		Тогда
		Если ПроверкаСвязи(Элементы.Таблица9.ТекущиеДанные.СправочникМеркурия,Элементы.Таблица9.ТекущиеДанные.Справочник1С) Тогда
			
			СтруктураСохр=Новый Структура("Спр1С,СпрМерк",Элементы.Таблица9.ТекущиеДанные.Справочник1С,Элементы.Таблица9.ТекущиеДанные.СправочникМеркурия);
			ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопросаПоОдСв",ЭтаФорма,СтруктураСохр),"У элемента справочника 1С "+Строка(Элементы.Таблица9.ТекущиеДанные.Справочник1С)+" уже есть связь!!! Добавить?",РежимДиалогаВопрос.ДаНет );
			
			
		//	Элементы.Таблица9.ТекущиеДанные.Справочник1С=Неопределено;
			Возврат;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Элементы.Таблица9.ТекущиеДанные.Справочник1С) Тогда
		Элементы.Таблица9.ТекущиеДанные.СправочникМеркурия=Таблица9Справочник1СПриИзмененииНаСервере(Элементы.Таблица9.ТекущиеДанные.Справочник1С);
	КонецЕсли;
КонецПроцедуры

Функция СохранитьСвязьДвойную(СохрСв)
	
	Мерк=Таблица9Справочник1СПриИзмененииНаСервере(СохрСв.Спр1С);
	
	БылаПр=Таблица9Справочник1СПриИзмененииНаСервере(СохрСв.Спр1С);
	
	ПолМерк=СохрСв.СпрМерк.ПолучитьОбъект();
	ПолМерк.РеквизитДляСопоставления=СохрСв.Спр1С.Код;
	ПолМерк.Записать();
	Если БылаПр<>СохрСв.СпрМерк Тогда
		Если ЗначениеЗаполнено(БылаПр.РеквизитДляСопоставления) Тогда
			
				//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			// Данный фрагмент построен конструктором.
			// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Продукция_ХамелеонЦРПТ.Ссылка
				|ИЗ
				|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
				|ГДЕ
				|	ПОДСТРОКА(Продукция_ХамелеонЦРПТ.РеквизитДляСопоставления, 1, 1000) = &РеквизитДляСопоставления";
			
			Запрос.УстановитьПараметр("РеквизитДляСопоставления", БылаПр.РеквизитДляСопоставления);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				// Вставить обработку выборки ВыборкаДетальныеЗаписи
				
				Пол_1=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				Пол_1.РеквизитДляСопоставления=ПолМерк.РеквизитДляСопоставления;
				Пол_1.Записать();
				
			КонецЦикла;
			
			//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

			
		Конецесли;
		
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ПослеВопросаПоОдСв(РР,ДД) Экспорт
	Если РР=КодВозвратаДиалога.Да Тогда
		СохранитьСвязьДвойную(ДД)
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Таблица9СправочникМеркурияПриИзменении(Элемент)
	// Вставить содержимое обработчика.
//	СопоставитьЭлемент(Элементы.Таблица9.ТекущиеДанные.Справочник1С,Элементы.Таблица9.ТекущиеДанные.СправочникМеркурия);
КонецПроцедуры


//Функция СопоставитьЭлемент(Спр1С,СпрМ)
//	
//	Если ЗначениеЗАполнено(Спр1С) Тогда
//		регДв=РегистрыСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СоздатьНаборЗаписей();
//		РегДв.Отбор.Справочник_Документ.Установить(Спр1С);
//		
//		ДД=РегДв.Добавить();
//		ДД.Справочник_Документ=Спр1С;
//		ДД.СправочникДокумент_Меркурия=СпрМ;
//		РегДв.Записать(Истина);
//	КонецЕсли;
//КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Вставить содержимое обработчика.
	УстанвитьВидимостьКнопок();
	Если НЕ НеОчищать Тогда
		ОбновитьРеквизитТаблицыСопоставления();
	КонецЕсли;
	ОбновитьСхемук();
	Элементы.Группа1.Видимость=Ложь;
	
	ПодключитьОбработчикОжидания("ААА",0.1,Истина);
	Если Сред(ВидРегистраНакопления1С,1,17)="РегистрНакопления" Тогда
		Элементы.Группа10.Видимость=Истина;
		Элементы.Группа12.Видимость=Ложь;
	Иначе
		Элементы.Группа10.Видимость=Ложь;
		Элементы.Группа12.Видимость=Истина;
		
	КонецЕсли;
				
	//НаСервереДобавимРеквизиты();
	//НаСервереДобавимРеквизиты()	
	//Поле2ПриИзмененииНаСервере();
//	ОбновитьСписок();
КонецПроцедуры

&НаКлиенте
Процедура ААА() Экспорт
	Элементы.Группа1.Видимость=Истина;
	
КонецПроцедуры	


Функция НаСервереЗаполнитьТаблицуСопоставления_Остатки()
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	//Возврат Новый Массив;
	ТаблицаСопоставл=Новый Массив;
	
	Если Элементы.Кнопка6.Заголовок="Вся продукция" Тогда
		Вся=Ложь;
	Иначе
		Вся=Истина;
	КонецЕсли;

	Если Вся Тогда
		

			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			// Данный фрагмент построен конструктором.
			// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Продукция_ХамелеонЦРПТ.Ссылка КАК Номенклатура,
				|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Справочник_Документ КАК Номенклатура1С,
				|	СУММА(ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток) + СУММА(ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.КоличествоОстаток) КАК КоличествоОстаток
				|ИЗ
				|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ КАК СопоставлениеСправочниковДокументов_ХамелеонЦРПТ
				|		ПО Продукция_ХамелеонЦРПТ.Ссылка = СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СправочникДокумент_Меркурия
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Остатки КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
				|		ПО Продукция_ХамелеонЦРПТ.Ссылка = ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиКМ_в_Обороте_ХамелеонЦРПТ.Остатки КАК ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки
				|		ПО Продукция_ХамелеонЦРПТ.Ссылка = ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция
				|
				|СГРУППИРОВАТЬ ПО
				|	Продукция_ХамелеонЦРПТ.Ссылка,
				|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Справочник_Документ
				|ИТОГИ
				|	СУММА(КоличествоОстаток)
				|ПО
				|	Номенклатура,
				|	Номенклатура1С";
			
			//РезультатЗапроса = Запрос.Выполнить();
			
			//ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
		
		
	Иначе
		
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		// Данный фрагмент построен конструктором.
		// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция КАК Номенклатура,
			|	СУММА(ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток) КАК КоличествоОстаток,
			|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Справочник_Документ КАК Номенклатура1С
			|ИЗ
			|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Остатки КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ КАК СопоставлениеСправочниковДокументов_ХамелеонЦРПТ
			|		ПО ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция = СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СправочникДокумент_Меркурия
			|
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция,
			|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Справочник_Документ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.Продукция,
			|	СУММА(ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.КоличествоОстаток),
			|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Справочник_Документ
			|ИЗ
			|	РегистрНакопления.ОстаткиКМ_в_Обороте_ХамелеонЦРПТ.Остатки(, ) КАК ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ КАК СопоставлениеСправочниковДокументов_ХамелеонЦРПТ
			|		ПО ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.Продукция = СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СправочникДокумент_Меркурия
			|
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиКМ_в_Обороте_ХамелеонЦРПТОстатки.Продукция,
			|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Справочник_Документ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.Продукция,
			|	СУММА(ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.КоличествоОстаток),
			|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Справочник_Документ
			|ИЗ
			|	РегистрНакопления.ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТ.Остатки(, ) КАК ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ КАК СопоставлениеСправочниковДокументов_ХамелеонЦРПТ
			|		ПО ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.Продукция = СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СправочникДокумент_Меркурия
			|
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.Продукция,
			|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Справочник_Документ
			|ИТОГИ
			|	СУММА(КоличествоОстаток)
			|ПО
			|	Номенклатура,
			|	Номенклатура1С";
	КонецЕсли;
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПродукция = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	
	Пока ВыборкаПродукция.Следующий() Цикл
		// Вставить обработку выборки ВыборкаПродукция
	
		ВыборкаСправочник_Документ = ВыборкаПродукция.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ВыборкаСправочник_Документ.Следующий() Цикл
			// Вставить обработку выборки ВыборкаСправочник_Документ
			
			СпрПр1С=ВыборкаСправочник_Документ.Номенклатура1С;
			Прод=ВыборкаСправочник_Документ.Номенклатура;
			Если Не Значениезаполнено(СПрПр1С) И ЗначениеЗаполнено(Прод.РеквизитДляСопоставления) тогда
				
				     	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Справочник_Документ КАК Справочник_Документ
						|ИЗ
						|	РегистрСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ КАК СопоставлениеСправочниковДокументов_ХамелеонЦРПТ
						|ГДЕ
						|	ВЫРАЗИТЬ(СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СправочникДокумент_Меркурия КАК Справочник.Продукция_ХамелеонЦРПТ).РеквизитДляСопоставления = &РеквизитДляСопоставления";
					
					Запрос.УстановитьПараметр("РеквизитДляСопоставления", Прод.РеквизитДляСопоставления);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Справочник_Документ) Тогда
							СпрПр1С=ВыборкаДетальныеЗаписи.Справочник_Документ;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

				
			КонецЕсли;
				
		ТаблицаСопоставл.Добавить(Новый Структура("СправочникМеркурия,Остатки,Спр1С",Прод,ВыборкаСправочник_Документ.КоличествоОстаток,
		
		СпрПр1С));
			
		КонецЦикла;
	КонецЦикла;
		
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		|	ПартииТоваров_ХамелеонЦРПТОстатки.НоменклатураЦРПТ КАК Номенклатура,
//		|	СУММА(ПартииТоваров_ХамелеонЦРПТОстатки.КоличествоОстаток) КАК КоличествоОстаток,
//		|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Справочник_Документ КАК спр1С
//		|ИЗ
//		|	РегистрНакопления.РегистрЦРПТ.Остатки(
//		|			,
//		|			ПодразделениеЦРПТ = &Предприятие
//		|				ИЛИ &Предприятие = ЗНАЧЕНИЕ(Справочник.ПодразделениеЦРПТ.ПустаяСсылка) И НоменклатураЦРПТ ССЫЛКА Справочник.НоменклатураЦРПТ) КАК ПартииТоваров_ХамелеонЦРПТОстатки
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ КАК СопоставлениеСправочниковДокументов_ХамелеонЦРПТ
//		|		ПО (ПартииТоваров_ХамелеонЦРПТОстатки.НоменклатураЦРПТ = СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СправочникДокумент_Меркурия
//		|				ИЛИ ПОДСТРОКА(ПартииТоваров_ХамелеонЦРПТОстатки.НоменклатураЦРПТ.РеквизитДляСопоставления, 1, 1) <> """"
//		|					И ПОДСТРОКА(ПартииТоваров_ХамелеонЦРПТОстатки.НоменклатураЦРПТ.РеквизитДляСопоставления, 1, 1000) = СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Справочник_Документ.Код)
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ПартииТоваров_ХамелеонЦРПТОстатки.НоменклатураЦРПТ,
//		|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Справочник_Документ
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	Регистр2ЦРПТОстатки.НоменклатураЦРПТ,
//		|	СУММА(Регистр2ЦРПТОстатки.КоличествоОстаток),
//		|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Справочник_Документ
//		|ИЗ
//		|	РегистрНакопления.Регистр2ЦРПТ.Остатки(
//		|			,
//		|			ПодразделениеЦРПТ = &Предприятие
//		|				ИЛИ &Предприятие = ЗНАЧЕНИЕ(Справочник.ПодразделениеЦРПТ.ПустаяСсылка)
//		|					И НоменклатураЦРПТ ССЫЛКА Справочник.НоменклатураЦРПТ) КАК Регистр2ЦРПТОстатки
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ КАК СопоставлениеСправочниковДокументов_ХамелеонЦРПТ
//		|		ПО (Регистр2ЦРПТОстатки.НоменклатураЦРПТ = СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СправочникДокумент_Меркурия
//		|				ИЛИ ПОДСТРОКА(Регистр2ЦРПТОстатки.НоменклатураЦРПТ.РеквизитДляСопоставления, 1, 1) <> """"
//		|					И ПОДСТРОКА(Регистр2ЦРПТОстатки.НоменклатураЦРПТ.РеквизитДляСопоставления, 1, 1000) = СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Справочник_Документ.Код)
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	Регистр2ЦРПТОстатки.НоменклатураЦРПТ,
//		|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Справочник_Документ
//		|ИТОГИ
//		|	СУММА(КоличествоОстаток)
//		|ПО
//		|	Номенклатура,
//		|	спр1С";
//	
//	Запрос.УстановитьПараметр("Предприятие",Предприятие);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	ВВ=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//	Пока ВВ.Следующий() Цикл
//	ВыборкаНоменклатура = ВВ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//	                      
//	Пока ВыборкаНоменклатура.Следующий() Цикл
//		// Вставить обработку выборки ВыборкаНоменклатура
////		Стр_д=ТаблицаСопоставлений.Добавить();
//		
//		
//		//Стр_д.СправочникМеркурия=ВыборкаНоменклатура.Номенклатура;
//		СпрП=ВыборкаНоменклатура.спр1С;
//		Попытка
//			Если (Не ЗначениеЗаполнено(СпрП) ИЛИ ТипЗнч(СпрП)<>Тип("Справочник.Номенклатура")) И ЗначениеЗаполнено(ВыборкаНоменклатура.Номенклатура.РеквизитДляСопоставления)
//				
//				Тогда
//				СпрП=Справочники.Номенклатура.НайтиПоКоду(ВыборкаНоменклатура.Номенклатура.РеквизитДляСопоставления);
//				
//			КонецЕсли;
//		Исключение
//		КонецПопытки;
//		ТаблицаСопоставл.Добавить(Новый Структура("СправочникМеркурия,Остатки,Спр1С",ВыборкаНоменклатура.Номенклатура,ВыборкаНоменклатура.КоличествоОстаток,СпрП));
//	КонецЦикла;
//	КонецЦИкла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Возврат ТаблицаСопоставл
	
КонецФункции

Функция Получитьтип(МММ)
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(МММ)).Имя
КонецФункции


Процедура ОбновитьСписок() Экспорт
	УФ=ЭтаФорма;
	//ТаблицаСопоставл=НаСервереЗаполнитьТаблицуСопоставления_Остатки();
	
	БылУжеТип=Ложь;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	
	
	Если Не ЗначениеЗаполнено(ВидРегистраНакопления1С) Тогда
	Попытка
	Если Сред(ВидРегистраНакопления1С,1,17)="РегистрНакопления" Тогда
		Сч=0;
		Для Каждого Стр Из Метаданные.РегистрыНакопления.Найти(Сред(ВидРегистраНакопления1С,Найти(ВидРегистраНакопления1С,".")+1)).Измерения Цикл
			Если ТаблицаРеквизитовОстатков[Сч].Отметка Тогда
				Если                               Стр.Тип.Типы().Количество()=1 Тогда
					ИмяТипа=Метаданные.НайтиПоТипу(Стр.Тип.Типы()[0]).Имя;
					УФ.ВидСопоставленияНеЦРПТ="СправочникСсылка."+ИмяТипа;
					УФ.УкажемТипМеркурияНЕ();
				КонецЕсли;
				Прервать;
			КонецЕсли;
			Сч=Сч+1;
		КонецЦикла;
	Иначе
		
		ПоСчетуПолучимДанные=ПолучитьСвойстваСчета(Счет);
		КоличествоСубконто=ПоСчетуПолучимДанные.КоличествоСубконто;
		Для Индекс = 1 По КоличествоСубконто Цикл
			Если ТаблицаРеквизитовОстатков[Индекс-1].Отметка Тогда
					ИмяТипа=Метаданные.НайтиПоТипу(Стр.Тип.Типы()[0]).Имя;
					УФ.ВидСопоставленияНеЦРПТ="СправочникСсылка."+ИмяТипа;
					УФ.УкажемТипМеркурияНЕ();
							Прервать;
			КОнецЕсли;
		КонецЦикла;	
		
		
	КонецЕсли;
Исключение
	КонецПопытки;
	
	
	
	
	  КонецЕсли;
	УФ.ТаблицаСопоставлений.Очистить();
	
	Если Не ЗначениеЗаполнено(УФ.ВидСопоставленияНеЦРПТ) Тогда
	
	
		//Для Каждого Стр Из ТаблицаСопоставл Цикл
		//	Если ЗначениеЗаполнено(Стр.СправочникМеркурия) Тогда
		//		Если   УФ.ТаблицаСопоставлений.НайтиСтроки(Новый Структура("СправочникМеркурия",Стр.СправочникМеркурия)).Количество()=0 Тогда
		//			Если ЗначениеЗаполнено(Стр.Спр1С) Тогда
		//				
		//				ИмяТипа=ПолучитьТип(Стр.Спр1С);
		//				УФ.ВидСопоставленияНеЦРПТ="СправочникСсылка."+ИмяТипа;
		//				УФ.УкажемТипМеркурияНЕ();
		//				
		//				Прервать;
		//			Конецесли;
		//			
		//		КонецЕсли;
		//	КонецЕсли;	
		//КонецЦикла;
	КонецЕсли;
	
	
	
	//Для Каждого Стр Из ТаблицаСопоставл Цикл
	//	Если ЗначениеЗаполнено(Стр.СправочникМеркурия) Тогда
	//		Если   УФ.ТаблицаСопоставлений.НайтиСтроки(Новый Структура("СправочникМеркурия",Стр.СправочникМеркурия)).Количество()=0 Тогда
	//			
	//			Строк1с=УФ.ТаблицаСопоставлений.НайтиСтроки(Новый Структура("Справочник1С",Стр.Спр1С));
	//			Если 
	//				ЗначениеЗаполнено(Стр.Спр1С) И 
	//				Строк1с.Количество()>0 Тогда
	//				
	//				Строк1с[0].НесколькоЭлементов=Истина;
	//				Стырок1с[0].Остаток=Строк1с[0].Остаток+Стр.Остатки
	//			Иначе
	//				
	//				СтрокД=УФ.ТаблицаСопоставлений.Добавить();
	//				СтрокД.Справочник1С=Стр.Спр1С;
	//				СтрокД.СправочникМеркурия=Стр.СправочникМеркурия;
	//				СтрокД.Остаток=Стр.Остатки
	//			Конецесли
	//		КонецЕсли;
	//	КонецЕсли;	
	//КонецЦикла;
	
	 УФ.РАсчетОстатков1С();
	УФ.ТаблицаСопоставлений.Сортировать("Справочник1С,СправочникМеркурия");
КонецПроцедуры

Процедура ОбновитьСхемук() 
	Если Не ЗначениеЗаполнено(ВидРегистраНакопления1С) Тогда
	Попытка
	Если Сред(ВидРегистраНакопления1С,1,17)="РегистрНакопления" Тогда
		Сч=0;
		Для Каждого Стр Из Метаданные.РегистрыНакопления.Найти(Сред(ВидРегистраНакопления1С,Найти(ВидРегистраНакопления1С,".")+1)).Измерения Цикл
			Если ТаблицаРеквизитовОстатков[Сч].Отметка Тогда
				Если                               Стр.Тип.Типы().Количество()=1 Тогда
					ИмяТипа=Метаданные.НайтиПоТипу(Стр.Тип.Типы()[0]).Имя;
					ВидСопоставленияНеЦРПТ="СправочникСсылка."+ИмяТипа;
					УкажемТипМеркурияНЕ();
				КонецЕсли;
				Прервать;
			КонецЕсли;
			Сч=Сч+1;
		КонецЦикла;
	Иначе
		
		ПоСчетуПолучимДанные=ПолучитьСвойстваСчета(Счет);
		КоличествоСубконто=ПоСчетуПолучимДанные.КоличествоСубконто;
		Для Индекс = 1 По КоличествоСубконто Цикл
			Если ТаблицаРеквизитовОстатков[Индекс-1].Отметка Тогда
					ИмяТипа=Метаданные.НайтиПоТипу(Стр.Тип.Типы()[0]).Имя;
					ВидСопоставленияНеЦРПТ="СправочникСсылка."+ИмяТипа;
					УкажемТипМеркурияНЕ();
							Прервать;
			КОнецЕсли;
		КонецЦикла;	
		
		
	КонецЕсли;
Исключение
	КонецПопытки;
	Конецесли;
	
	
	
	Если Сред(ВидРегистраНакопления1С,1,17)="РегистрНакопления" Тогда
				
				
				
				Попытка
					Запрос = Новый Запрос;
						Запрос.Текст = 
							"ВЫБРАТЬ";
						БылиРеквизиты=Ложь;
						НазваниеРеквизита="";
						
						Для Каждого Стр_р Из ТаблицаРеквизитовОстатков Цикл
							Если Стр_Р.Отметка Тогда
								Если БылиРеквизиты Тогда
									Запрос.Текст = Запрос.Текст +",";
								КонецЕсли;
								БылиРеквизиты=Истина;
								Запрос.Текст = Запрос.Текст +"
							|	ПартииТоваров_ХамелеонЦРПТОстатки."+Стр_р.ИмяРеквизита+" КАК НОМЕНКЛАТУРА";
								Прервать;
							Конецесли;
						КонецЦикла;
						
						Для Каждого Стр_р Из ТаблицаРесурсовостатков Цикл
							Если Стр_Р.Отметка Тогда
								Если БылиРеквизиты Тогда
									Запрос.Текст = Запрос.Текст +",";
								КонецЕсли;
								БылиРеквизиты=Истина;
								Запрос.Текст = Запрос.Текст +"
							|	Сумма(ПартииТоваров_ХамелеонЦРПТОстатки."+Стр_р.ИмяРеквизита+"Остаток) КАК ОСТАТОК";
								Прервать;
							Конецесли;
						КонецЦикла;
						
						Запрос.Текст = Запрос.Текст +"
							|ИЗ
							|	РегистрНакопления."+Сред(ВидРегистраНакопления1С,Найти(ВидРегистраНакопления1С,".")+1)+".ОстаткИ(";
						             БылиРеквизиты=Ложь;
						//Для Каждого Стр_р Из ТаблицаРеквизитовОстатков Цикл
						//	Если Стр_Р.Отметка Тогда
						//		Если БылиРеквизиты Тогда
						//			Запрос.Текст = Запрос.Текст +",";
						//		КонецЕсли;
						//		БылиРеквизиты=Истина;
						//		Запрос. Текст = Запрос.Текст +"
						//	|	"+Стр_р.ИмяРеквизита+" в (&"+Стр_р.ИмяРеквизита+")";
						//	Конецесли;
						//КонецЦикла;
						
						
						Запрос.Текст = Запрос.Текст +"
						|) КАК ПартииТоваров_ХамелеонЦРПТОстатки";
						
						Запрос.Текст = Запрос.Текст +"
							|СГРУППИРОВАТЬ ПО ";
						БылиРеквизиты=ЛожЬ;
								Для Каждого Стр_р Из ТаблицаРеквизитовОстатков Цикл
							Если Стр_Р.Отметка Тогда
								Если БылиРеквизиты Тогда
									Запрос.Текст = Запрос.Текст +",";
								КонецЕсли;
								БылиРеквизиты=Истина;
								Запрос.Текст = Запрос.Текст +"
							|	"+Стр_р.ИмяРеквизита;
							Конецесли;
						КонецЦикла;

						//Запрос.Текст = Запрос.Текст +"
						//	|ИТОГИ";
						
						//Для Каждого Стр_р Из ТаблицаРесурсовостатков Цикл
						//	Если Стр_Р.Отметка Тогда
						//		Если БылиРеквизиты Тогда
						//			Запрос.Текст = Запрос.Текст +",";
						//		КонецЕсли;
						//		БылиРеквизиты=Истина;
						//		Запрос.Текст = Запрос.Текст +"
						//	|	Сумма(ОСТАТОК)";
						//	Конецесли;
						//КонецЦикла;
						//		Запрос.Текст = Запрос.Текст +"
						//	|ПО
						//	| Номенклатура";
								
			//				|	ОБЩИЕ";
								
			//			Для Каждого Стр_р Из ТаблицаРеквизитовОстатков Цикл
			//				Если Стр_Р.Отметка Тогда
			//					Запрос.УстановитьПараметр(Стр_р.ИмяРеквизита,СписокТовара1С);
			//				Конецесли;
			//			КонецЦикла;
								
						

			СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;//оБРАБОТКИ.РасширенноеСопоставлениеПоПродукции_ХамелеонЦРПТ.ПолучитьМакет("СхемаКомпоновкиДанных");
			Добав=СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
			Добав.Имя="НаборДанных1";;

			ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
				ИсточникДанных.Имя = "ИсточникДанных1";
				ИсточникДанных.ТипИсточникаДанных = "Local";
				
				Добав.ИсточникДанных = ИсточникДанных.Имя;

				
			СхемаКомпоновкиДанных.НаборыДанных[0].Запрос=Запрос.Текст;
				//	СхемаКомпоновкиДанных.ПоляИтога.Очистить();
			//Добав=СхемаКомпоновкиДанных.Пол.Добавить();
			//Добав.ИмяГруппировки="НОМЕНКЛАТУРА";



						Для Каждого Стр_р Из ТаблицаРесурсовостатков Цикл
							Если Стр_Р.Отметка Тогда
						Добав=СхемаКомпоновкиДанных.ПоляИтога.Добавить();
			Добав.ПутьКДанным="ОСТАТОК";

			Добав.Выражение="Сумма(ОСТАТОК)";

				//	Запрос.Текст = Запрос.Текст +"
				//			|	Сумма(ПартииТоваров_ХамелеонЦРПТОстатки."+Стр_р.ИмяРеквизита+"Остаток) КАК ОСТАТОК";
								Прервать;
							Конецесли;
						КонецЦикла;


			//ПоляГруппировки=СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки.ПараметрыДанных.Элементы.Добавить();
			//ПоляГруппировки.Значение=Новый ПолеКомпоновкиДанных("Номенклатура") ;



			АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);

			ОтборПоРегистру.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
			ОтборПоРегистру.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);	 
			Исключение
			КонецПопытки;
		Иначе
			
	
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Если ЗначениеЗаполнено(Счет) Тогда

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ";
		ПоСчетуПолучимДанные=ПолучитьСвойстваСчета(Счет);
		КоличествоСубконто=ПоСчетуПолучимДанные.КоличествоСубконто;
		БылиРеквизиты=Ложь;
		Для Индекс = 1 По КоличествоСубконто Цикл
								Если БылиРеквизиты Тогда
									Запрос.Текст = Запрос.Текст +",";
								КонецЕсли;
БылиРеквизиты=Истина;			
Если ТаблицаРеквизитовОстатков[Индекс-1].Отметка Тогда
Запрос.Текст = Запрос.Текст +"
		|	ХозрасчетныйОстатки.Субконто"+Индекс+" как НОМЕНКЛАТУРА";
	
Иначе
Запрос.Текст = Запрос.Текст +"
		|	ХозрасчетныйОстатки.Субконто"+Индекс+" КАК "+Счет.ВидыСубконто[Индекс - 1].ВидСубконто.Наименование;
Конецесли;			
			КонецЦикла;	
								Если БылиРеквизиты Тогда
									Запрос.Текст = Запрос.Текст +",";
								КонецЕсли;
БылиРеквизиты=Истина;			
Запрос.Текст = Запрос.Текст +"
		|	СУММА(ХозрасчетныйОстатки.КоличествоОстаток) КАК Остаток
		|ИЗ
		|	РегистрБухгалтерии."+Метаданные.НайтиПоТипу(ТипЗнч(Счет)).Имя+".Остатки(, Счет = &Счет, , ) КАК ХозрасчетныйОстатки
		|
		|СГРУППИРОВАТЬ ПО";
БылиРеквизиты=Ложь;
		Для Индекс = 1 По КоличествоСубконто Цикл
								Если БылиРеквизиты Тогда
									Запрос.Текст = Запрос.Текст +",";
								КонецЕсли;
БылиРеквизиты=Истина;			
Запрос.Текст = Запрос.Текст +"
		|	ХозрасчетныйОстатки.Субконто"+Индекс;
		КонецЦикла;		
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;//оБРАБОТКИ.РасширенноеСопоставлениеПоПродукции_ХамелеонЦРПТ.ПолучитьМакет("СхемаКомпоновкиДанных");
			Добав=СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
			Добав.Имя="НаборДанных1";;

			ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
				ИсточникДанных.Имя = "ИсточникДанных1";
				ИсточникДанных.ТипИсточникаДанных = "Local";
				
				Добав.ИсточникДанных = ИсточникДанных.Имя;

				
			СхемаКомпоновкиДанных.НаборыДанных[0].Запрос=Запрос.Текст;
				//	СхемаКомпоновкиДанных.ПоляИтога.Очистить();
			//Добав=СхемаКомпоновкиДанных.Пол.Добавить();
			//Добав.ИмяГруппировки="НОМЕНКЛАТУРА";



						Добав=СхемаКомпоновкиДанных.ПоляИтога.Добавить();
			Добав.ПутьКДанным="Остаток";

			Добав.Выражение="Сумма(Остаток)";

				//	Запрос.Текст = Запрос.Текст +"
				//			|	Сумма(ПартииТоваров_ХамелеонЦРПТОстатки."+Стр_р.ИмяРеквизита+"Остаток) КАК ОСТАТОК";


			//ПоляГруппировки=СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки.ПараметрыДанных.Элементы.Добавить();
			//ПоляГруппировки.Значение=Новый ПолеКомпоновкиДанных("Номенклатура") ;



			АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);

			ОтборПоРегистру.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
			ОтборПоРегистру.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);	 
		
		КонецЕсли;	
			
	КонецЕсли;
КонецПроцедуры

Процедура УстанвитьВидимостьКнопок()
	Элементы.Группа6.Видимость=ВидСопоставленияНеЦРПТ<>"";
	Элементы.Группа7.Видимость=ВидСопоставленияМеркурия<>"";
	
КонецПроцедуры
Функция ВернутьТекКолонки1с()
	МасивК=Новый Массив;
	Для Каждого Стр Из ТаблицаКолонок1С Цикл
		ИмяРеквизитаУжеПропатчено=СтрЗаменить(Стр.ИмяРеквизита,"_ТОЧКА_",".");
		ИмяРеквизитаУжеПропатчено=сред(ИмяРеквизитаУжеПропатчено,33);

		МасивК.Добавить(ИмяРеквизитаУжеПропатчено);
	КонецЦикла;
	Возврат МасивК;
	
КонецФункции


&НаКлиенте
Процедура ДоабвитКолонки1с(Команда)
	// Вставить содержимое обработчика.
	КолонкиТекущие=ВернутьТекКолонки1с();
	ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ФормаДобавленияКолонокПоТипуДанных",Новый структура("Сохранять,Тип,Пользователь,Колонки",Истина,ВидСопоставленияНеЦРПТ,ТекущийПользователь,КолонкиТекущие),,,,,Новый ОписаниеОповещения("ВыборКолонокПоказать",ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура ВыборКолонокПоказать(РР,ДД) Экспорт
	Если РР<>Неопределено Тогда
		СоздаемНовыеКолонки1С(РР);
		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздаемНовыеКолонки1С(РР)
	Для Каждого Стр Из ТаблицаКолонок1С Цикл
		Элементы.Удалить(Элементы[Стр.ИмяРеквизита]);
	КонецЦИкла;
	ТаблицаКолонок1с.Очистить();;
	Для Каждого Стр Из РР Цикл
		Попытка
			ИмяКолонки="ТаблицаСопоставленийСправочник1С"+xmlstring(СтрЗаменить(Стр,".","_"));
		    Элемент = ЭтаФорма.Элементы.Вставить(ИмяКолонки, Тип("ПолеФормы"), Элементы.Таблица9,Элементы.Таблица9СправочникМеркурия); 
		    Элемент.Вид = ВидПоляФормы.ПолеВвода; 
		    Элемент.ПутьКДанным = "ТаблицаСопоставлений.Справочник1С."+Стр;//"Поле"+xmlstring(Сч); 
		    //Элемент.РастягиватьПоГоризонтали = Истина;
		    //Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
			Доб=ТаблицаКолонок1с.Добавить();
			
			
			Доб.ИмяРеквизита=ИмяКолонки;
			
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	
КонецПроцедуры

Функция ВернутьТекКолонкиЦРПТ()
	МасивК=Новый Массив;
	Для Каждого Стр Из ТаблицаКолонокМерк Цикл
		
		ИмяРеквизитаУжеПропатчено=СтрЗаменить(Стр.ИмяРеквизтаНаФорме,"_ТОЧКА_",".");
		ИмяРеквизитаУжеПропатчено=сред(ИмяРеквизитаУжеПропатчено,1,СтрДлина(ИмяРеквизитаУжеПропатчено)-13);

		МасивК.Добавить(ИмяРеквизитаУжеПропатчено);
	КонецЦикла;
	Возврат МасивК;
Конецфункции
&НаКлиенте
Процедура ДобавитьКолонкиЦРПТ(Команда)
	// Вставить содержимое обработчика.
	КолонкиТекущие=ВернутьТекКолонкиЦРПТ();
	
	ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ФормаДобавленияКолонокПоТипуДанных",Новый структура("Сохранять,Тип,Пользователь,Колонки",Истина,ВидСопоставленияМеркурия,ТекущийПользователь,КолонкиТекущие),,,,,Новый ОписаниеОповещения("ВыборКолонокПоказать_Мерк",ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура ВыборКолонокПоказать_Мерк(РР,ДД) Экспорт
	Если РР<>Неопределено Тогда
		СоздаемНовыеКолонкиМерк(РР);
		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздаемНовыеКолонкиМерк(РР)
	
	МассивПредыдущихЗначений=Новый ТаблицаЗначений;
	МассивПредыдущихЗначений.Колонки.Добавить("Имя");
	МассивПредыдущихЗначений.Колонки.Добавить("Значение");
	МассивПредыдущихЗначений.Очистить();
	УдалитьРекв=Новый массив;
	Для Каждого Стр Из  ТаблицаКолонокМерк  Цикл
		
		Если ЗначениеЗаполнено(Стр.ИмяРеквизтаНаФорме) Тогда
			СтрР=МассивПредыдущихЗначений.Добавить();
			СтрР.Имя=Стр.ИмяРеквизтаНаФорме;
			СтрР.Значение=ЭтаФорма[Стр.ИмяРеквизтаНаФорме];
			
			УдалитьРекв.Добавить(Стр.ИмяРеквизтаНаФорме);
		КонецЕсли;
			
			
		Элементы.Удалить(Элементы[Стр.ИмяРеквизита]);
		Если Элементы.Найти(Стр.ИмяРеквизтаНаФорме)<>Неопределено Тогда
			Элементы.Удалить(Элементы[Стр.ИмяРеквизтаНаФорме]);
		КонецЕсли;
		
	КонецЦИкла;
	Если УдалитьРекв.Количество()>0 Тогда
		ИзменитьРеквизиты(,УдалитьРекв);
	КонецЕсли;
	
	МассивДРекв=Новый Массив;
	ТаблицаКолонокМерк.Очистить();;
	Для Каждого Стр Из РР Цикл
		Попытка
			ИмяКолонки="ТаблицаСопоставленийСправочникЦРПТ"+xmlstring(СтрЗаменить(Стр,".","_"));
		    Элемент = ЭтаФорма.Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"),Элементы.Таблица9); 
		    Элемент.Вид = ВидПоляФормы.ПолеВвода; 
		    Элемент.ПутьКДанным = "ТаблицаСопоставлений.СправочникМеркурия."+Стр;//"Поле"+xmlstring(Сч); 
		    //Элемент.РастягиватьПоГоризонтали = Истина;
		    //Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
			
			
			ИмяРеквизитаНаФорме=СтрЗаменить(Стр,".","_ТОЧКА_");
			ИмяРеквизитаНаФорме=ИмяРеквизитаНаФорме+"_по_умолчанию";
			
			М=Метаданные.НайтиПоТипу(Тип(ВидСопоставленияМеркурия));
			О=м.Реквизиты.Найти(Стр);
			Если О=Неопределено Тогда
				о=м.стандартныеРеквизиты[Стр];
				
			КонецЕсли;
			
		    Реквизит = Новый РеквизитФормы(ИмяРеквизитаНаФорме, Новый ОписаниеТипов(о.Тип)); 
			МассивДРекв.Очистить();
			МассивДРекв.Добавить(Реквизит);

			ИзменитьРеквизиты(МассивДРекв);
			
			//ИмяКолонки="ТаблицаСопоставленийСправочникЦРПТ"+xmlstring(СтрЗаменить(Стр,".","_"))+"ПОЛЕ_ДОП";
		    Элемент = ЭтаФорма.Элементы.Добавить(ИмяРеквизитаНаФорме, Тип("ПолеФормы"),Элементы.ДопРеквизиты); 
		    Элемент.Вид = ВидПоляФормы.ПолеВвода; 
		    Элемент.ПутьКДанным = ИмяРеквизитаНаФорме;//"Поле"+xmlstring(Сч); 
			
			ЗначМ=МассивПредыдущихЗначений.Найти(ИмяРеквизитаНаФорме,"Имя");
			Если ЗначМ<>Неопределено Тогда
				ЭтаФорма[ИмяРеквизитаНаФорме]=ЗначМ.Значение;
			КонецЕсли;
			
			
		    //Элемент.РастягиватьПоГоризонтали = Истина;
		    //Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		//Доб=ТаблицаКолонокМерк.Добавить();
			Доб=ТаблицаКолонокМерк.Добавить();
			Доб.ИмяРеквизита=ИмяКолонки;
			Доб.ИмяРеквизтаНаФорме=ИмяРеквизитаНаФорме;

			
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	
КонецПроцедуры


&НаКлиенте
Процедура Таблица9ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	// Вставить содержимое обработчика.
	//Если Элементы.Таблица9.ТекущиеДанные<>Неопределено Тогда
	//	Если ЗначениеЗаполнено(Элементы.Таблица9.ТекущиеДанные.Справочник1С) Тогда
	//		Элементы.Таблица9.ТекущиеДанные.СправочникМеркурия=Таблица9Справочник1СПриИзмененииНаСервере(Элементы.Таблица9.ТекущиеДанные.Справочник1С);
	//	КонецЕсли;
	//		
	//КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура Команда1(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Стр Из Элементы.Таблица9.ВыделенныеСтроки Цикл
		Стр_1=ТаблицаСопоставлений.НайтиПоИдентификатору(Стр);
		Если Не ЗначениеЗаполнено(Стр_1.СправочникМеркурия) ТОгда
			Стр_1.СправочникМеркурия=Таблица9Справочник1СПриИзмененииНаСервере(Стр_1.Справочник1С);
			Если Не ЗначениеЗаполнено(Стр_1.СправочникМеркурия) ТОгда
				Стр_1.СправочникМеркурия=СоздаемЭлементМеркурия(Стр_1.Справочник1С);
			КонецЕсли;
		Конецесли;
	КонецЦИкла;
КонецПроцедуры

Функция СоздаемЭлементМеркурия(Справочник1С)
	мЕНЕДЖЕР="";
	Если Найти(ВидСопоставленияМеркурия,"СправочникСсылка")=1 Тогда
		Менеджер=Менеджер+"Справочники.";
		СпрП=Неопределено;
		Строк="СпрП="+Менеджер+Метаданные.НайтиПоТипу(Тип(ВидСопоставленияМеркурия)).Имя+".СоздатьЭлемент()";
		Выполнить(Строк);
	Иначе
		Менеджер=Менеджер+"Документ.";
		
	КонецЕсли;
	Для Каждого Стр Из ТаблицаКолонокМерк Цикл
		РеквизитЗнУмолч=Стр.ИмяРеквизтаНаФорме;
		Значение=ЭтаФорма[РеквизитЗнУмолч];
		Если ЗначениеЗаполнено(Значение) Тогда
//			Преобраз=СтрЗаменить(РеквизитЗнУмолч,"_ТОЧКА_",".");
//			Преобраз=Сред(Преобраз,1,Найти(Преобраз,"_по_умолчанию")-1);
			ИмяРеквизитаУжеПропатчено=СтрЗаменить(РеквизитЗнУмолч,"_ТОЧКА_",".");
			ИмяРеквизитаУжеПропатчено=сред(ИмяРеквизитаУжеПропатчено,1,СтрДлина(ИмяРеквизитаУжеПропатчено)-13);
			СпрП[ИмяРеквизитаУжеПропатчено]=Значение;
		КонецЕсли;
		
	Конеццикла;
	дЛЯ кАЖДОГО сТР иЗ ТаблицаРеквизитовМеркурия Цикл
		СпрП[Стр.ИмяРеквизита]=Стр.Значение;
	Конеццикла;
	
	
	Попытка
		СпрП.Наименование=Справочник1С.Наименование;
	Исключение
	КонецПопытки;
	Попытка
		Если СпрП.ПроверитьЗаполнение() Тогда
			СпрП.Записать();
			Если ЗначениеЗаполнено(Справочник1С)
				И ЗначениеЗАполнено(СпрП.Ссылка) Тогда
				регДв=РегистрыСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СоздатьНаборЗаписей();
				РегДв.Отбор.Справочник_Документ.Установить(Справочник1С);
				
				ДД=РегДв.Добавить();
				ДД.Справочник_Документ=Справочник1С;
				ДД.СправочникДокумент_Меркурия=СпрП.Ссылка;
				РегДв.Записать(Истина);
			КонецЕсли;
		Иначе
			Сообщить("Не удалось записать элемент справочника "+СпрП.Наименование);
		КонецЕсли;
		
		
		
		Возврат СпрП.Ссылка
	Исключение
		Сообщить("Не удалось записать элемент ЦРПТ для "+Строка(Справочник1С)+" "+ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура Таблица1ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
	Отказ=Истина;
	КолонкиТекущие=ВернутьТекКолонкиЦРПТ_ВТаблиц();
	
	ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ФормаДобавленияКолонокПоТипуДанных",Новый структура("Тип,Пользователь,Колонки",ВидСопоставленияМеркурия,ТекущийПользователь,КолонкиТекущие),,,,,Новый ОписаниеОповещения("ВыборКолонокПоказать_Мерк_ВТАБЛИЦУ",ЭтаФорма));	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКолонокПоказать_Мерк_ВТАБЛИЦУ(РР,ДД) Экспорт
	Если РР<>Неопределено Тогда
		ДобавитьКолонкиНаС(РР);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКолонкиНаС(РР)
	
//СоздаемНовыеКолонкиМерк(РР);
ТаблицаРеквизитовМеркурия.Очистить();
	Для Каждого Стр Из РР Цикл
		ДД=ТаблицаРеквизитовМеркурия.Добавить();
		ДД.ИмяРеквизита=Стр;
		мЕНЕДЖЕР="";
		Если Найти(ВидСопоставленияМеркурия,"СправочникСсылка")=1 Тогда
			Менеджер=Менеджер+"Справочники.";
			СпрП=Неопределено;
			Строк="СпрП="+Менеджер+Метаданные.НайтиПоТипу(Тип(ВидСопоставленияМеркурия)).Имя+".СоздатьЭлемент()";
			Выполнить(Строк);
			ДД.Значение=СпрП[Стр];
			
		Иначе
			Менеджер=Менеджер+"Документ.";
			
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры

Функция ВернутьТекКолонкиЦРПТ_ВТаблиц()
	МасивК=Новый Массив;
	Для Каждого Стр Из ТаблицаРеквизитовМеркурия Цикл
		
		//ИмяРеквизитаУжеПропатчено=СтрЗаменить(Стр.ИмяРеквизтаНаФорме,"_ТОЧКА_",".");
		//ИмяРеквизитаУжеПропатчено=сред(ИмяРеквизитаУжеПропатчено,1,СтрДлина(ИмяРеквизитаУжеПропатчено)-13);

		МасивК.Добавить(Стр.ИмяРеквизита);
	КонецЦикла;
	Возврат МасивК;
Конецфункции


Функция ОпределитьМ()
	Структура=Неопределено;
	Если Найти(ВидСопоставленияНеЦРПТ,"СправочникСсылка")=1 Тогда
		Менеджер="Справочник.";
		
		Структура=Новый Структура("тип,ТипДальше","Справочник",Метаданные.НайтиПоТипу(Тип(ВидСопоставленияНеЦРПТ)).Имя);
		
		//СпрП=Неопределено;
		//Возврат Менеджер+Метаданные.НайтиПоТипу(Тип(ВидСопоставленияНеЦРПТ)).Имя;
	Иначе
		//Структура=Новый Структура("тип,ТипДальше","Документ",Метаданные.НайтиПоТипу(Тип(ВидСопоставленияНеЦРПТ)).Имя);
		//Менеджер="Документ.";
		
	КонецЕсли;
	Возврат Структура;
КонецФункции

&НаКлиенте
Процедура Подбор(Команда)
	// Вставить содержимое обработчика.
	ДобавимПодбором=ОпределитьМ();
	Если ДобавимПодбором<>Неопределено Тогда
		ОткрытьФорму("Обработка.УниверсальныйЖурнал_ХамелеонЦРПТ.Форма.Форма",ДобавимПодбором,ЭтаФорма,,,,Новый ОписаниеОповещения("ПослеВыбораЭлементов",ЭтаФорма));
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПослеВыбораЭлементов(РР,ДД) Экспорт
	Если РР<>Неопределено Тогда
		ДобавимСтрочки(РР);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавимСтрочки(РР)
	Для Каждого Стр Из РР Цикл
		Если ТаблицаСопоставлений.НайтиСтроки(Новый Структура("Справочник1С",Стр)).Количество()=0 Тогда
			ДД=ТаблицаСопоставлений.Добавить();
			ДД.Справочник1С=Стр;
			ДД.СправочникМеркурия=Таблица9Справочник1СПриИзмененииНаСервере(Стр);
		КонецЕсли;
	КонецЦИкла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	// Вставить содержимое обработчика.
	а=1;
КонецПроцедуры

&НаСервере
Процедура СохранитьШаблонНаСервере(Эл)
	// Вставить содержимое обработчика.
	СтруктураШаблона=Новый Структура;
	СтруктураШаблона.Вставить("ВидСопоставленияНеЦРПТ",ВидСопоставленияНеЦРПТ);
	СтруктураШаблона.Вставить("ВидСопоставленияМеркурия",ВидСопоставленияМеркурия);
	СтруктураШаблона.Вставить("ТаблицаКолонок1С",ТаблицаКолонок1С.Выгрузить());
	СтруктураШаблона.Вставить("ТаблицаКолонокМерк",ТаблицаКолонокМерк.Выгрузить());
	Для Каждого Стр Из ТаблицаКолонокМерк Цикл
		РеквизитЗнУмолч=Стр.ИмяРеквизтаНаФорме;
		Значение=ЭтаФорма[РеквизитЗнУмолч];
		Если ЗначениеЗаполнено(Значение) Тогда
			СтруктураШаблона.Вставить(Стр.ИмяРеквизтаНаФорме,Значение);
		КонецЕсли;
		
	Конеццикла;
	Эл_1=Эл.ПолучитьОБъект();
	Эл_1.ХранилищеЗначений=Новый ХранилищеЗначения(СтруктураШаблона);
	Эл_1.Записать();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьШаблон(Команда)
	ОткрытьФорму("Справочник.ШаблоныДляНастроек_ХамелеонЦРПТ.ФормаВыбора",,Элементы.НеЦРПТ);
КонецПроцедуры


&НаКлиенте
Процедура НеЦРПТОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если ЗначениеЗаполнено(ВыбранноеЗначение) И ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.ШаблоныДляНастроек_ХамелеонЦРПТ") Тогда
		СохранитьШаблонНаСервере(ВыбранноеЗначение);
		СтандартнаяОбработка=Ложь;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьШаблон(Команда)
	
	ОткрытьФорму("Справочник.ШаблоныДляНастроек_ХамелеонЦРПТ.ФормаВыбора",,Элементы.ЦРПТ);
	
КонецПроцедуры


&НаКлиенте
Процедура ЦРПТОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если ЗначениеЗаполнено(ВыбранноеЗначение) И ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.ШаблоныДляНастроек_ХамелеонЦРПТ") Тогда
		ЗагрузитьШаблонСервер(ВыбранноеЗначение);
		УстанвитьВидимостьКнопок();
		СтандартнаяОбработка=Ложь;
	КонецЕсли;
	
КонецПроцедуры
Процедура ЗагрузитьШаблонСервер(Эл)
	Стру=Эл.ХранилищеЗначений.Получить();
	Если стру<>Неопределено Тогда
		ВидСопоставленияНеЦРПТ=Стру.ВидСопоставленияНеЦРПТ;
		ВидСопоставленияМеркурия=Стру.ВидСопоставленияМеркурия;
		УдалитьРекв=Новый Массив;
		Для Каждого Стр Из ТаблицаКолонокМерк Цикл
			
			Если ЗначениеЗаполнено(Стр.ИмяРеквизтаНаФорме) Тогда
				УдалитьРекв.Добавить(Стр.ИмяРеквизтаНаФорме);
			КонецЕсли;
				
			
			Элементы.Удалить(Элементы[Стр.ИмяРеквизита]);
			Если Элементы.Найти(Стр.ИмяРеквизтаНаФорме)<>Неопределено Тогда
				Элементы.Удалить(Элементы[Стр.ИмяРеквизтаНаФорме]);
			КонецЕсли;
		

		КонецЦИкла;
		ИзменитьРеквизиты(,УдалитьРекв);
		

		ТаблицаКолонокМерк.Очистить();;
		
		
		Для Каждого Стр Из ТаблицаКолонок1С Цикл
			Элементы.Удалить(Элементы[Стр.ИмяРеквизита]);
		КонецЦИкла;
		ТаблицаКолонок1с.Очистить();;
		
		Если Элементы.Найти("Таблица9Справочник1С")<>Неопределено Тогда
			Элементы.Удалить(Элементы["Таблица9Справочник1С"]);
			МассиУд=Новый Массив;
			МассиУд.Добавить("ТаблицаСопоставлений.Справочник1С");
			ИзменитьРеквизиты(,МассиУд);
		КонецЕсли;
	//	ТаблицаКолонок1С_1=Новый ТаблицаЗначений;
	//	ТаблицаКолонокМерк_1=Новый ТаблицаЗначений;
		
	//	ТаблицаКолонок1С_1.Загрузить(Стру.ТаблицаКолонок1С);
	//	ТаблицаКолонокМерк_1.Загрузить(Стру.ТаблицаКолонокМерк);
		
		
		ОписаниеТипов=Новый ОписаниеТипов(ВидСопоставленияНеЦРПТ);
		МассивДобРекв=Новый Массив;
		ИмяРеквизита = "Справочник1С";
		РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТипов,"ТаблицаСопоставлений");
		МассивДобРекв.Добавить(РеквизитФормы);
		ИзменитьРеквизиты(МассивДобРекв);
		
		НовыйЭлемент = Элементы.Добавить("Таблица9Справочник1С", Тип("ПолеФормы"), Элементы.Таблица9);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ТаблицаСопоставлений.Справочник1С";
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
		НовыйЭлемент.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;  
		НовыйЭлемент.УстановитьДействие("ПриИзменении","Таблица9Справочник1СПриИзменении");
		
		
		
		Если Элементы.Найти("Таблица9СправочникМеркурия")<>Неопределено Тогда
			Элементы.Удалить(Элементы["Таблица9СправочникМеркурия"]);
			МассиУд=Новый Массив;
			МассиУд.Добавить("ТаблицаСопоставлений.СправочникМеркурия");
			ИзменитьРеквизиты(,МассиУд);
		КонецЕсли;
		
		ОписаниеТипов=Новый ОписаниеТипов(ВидСопоставленияМеркурия);
		МассивДобРекв=Новый Массив;
		ИмяРеквизита = "СправочникМеркурия";
		РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТипов,"ТаблицаСопоставлений", "Справочник Хамелеон ЦРПТ");
		МассивДобРекв.Добавить(РеквизитФормы);
		ИзменитьРеквизиты(МассивДобРекв);
		
		НовыйЭлемент = Элементы.Добавить("Таблица9СправочникМеркурия", Тип("ПолеФормы"), Элементы.Таблица9);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ТаблицаСопоставлений.СправочникМеркурия";
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
		НовыйЭлемент.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;  
		НовыйЭлемент.УстановитьДействие("ПриИзменении","Таблица9СправочникМеркурияПриИзменении");

		МассивДРекв=Новый Массив;
		ТаблицаКолонокМерк.Очистить();
		
		Для Каждого Стр Из Стру.ТаблицаКолонокМерк Цикл
					Попытка
						ИмяКолонки=Стр.ИмяРеквизита;
					    Элемент = ЭтаФорма.Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"),Элементы.Таблица9); 
					    Элемент.Вид = ВидПоляФормы.ПолеВвода; 
						
						ИмяРеквизитаУжеПропатчено=СтрЗаменить(Стр.ИмяРеквизтаНаФорме,"_ТОЧКА_",".");
						ИмяРеквизитаУжеПропатчено=сред(ИмяРеквизитаУжеПропатчено,1,СтрДлина(ИмяРеквизитаУжеПропатчено)-13);
						
					    Элемент.ПутьКДанным = "ТаблицаСопоставлений.СправочникМеркурия."+ИмяРеквизитаУжеПропатчено;//"Поле"+xmlstring(Сч); 
					    //Элемент.РастягиватьПоГоризонтали = Истина;
					    //Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
						
						ИмяРеквизитаНаФорме=Стр.ИмяРеквизтаНаФорме;
						
						М=Метаданные.НайтиПоТипу(Тип(ВидСопоставленияМеркурия));
						О=м.Реквизиты.Найти(ИмяРеквизитаУжеПропатчено);
						Если О=Неопределено Тогда
							о=м.стандартныеРеквизиты[ИмяРеквизитаУжеПропатчено];
							
						КонецЕсли;
						
					    Реквизит = Новый РеквизитФормы(ИмяРеквизитаНаФорме, Новый ОписаниеТипов(о.Тип)); 
						МассивДРекв.Очистить();
						МассивДРекв.Добавить(Реквизит);

						ИзменитьРеквизиты(МассивДРекв);
						
						//ИмяКолонки="ТаблицаСопоставленийСправочникЦРПТ"+xmlstring(СтрЗаменить(Стр,".","_"))+"ПОЛЕ_ДОП";
					    Элемент = ЭтаФорма.Элементы.Добавить(ИмяРеквизитаНаФорме, Тип("ПолеФормы"),Элементы.ДопРеквизиты); 
					    Элемент.Вид = ВидПоляФормы.ПолеВвода; 
					    Элемент.ПутьКДанным = ИмяРеквизитаНаФорме;//"Поле"+xmlstring(Сч); 
					    //Элемент.РастягиватьПоГоризонтали = Истина;
					    //Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
					//Доб=ТаблицаКолонокМерк.Добавить();
						Доб=ТаблицаКолонокМерк.Добавить();
						Доб.ИмяРеквизита=ИмяКолонки;
						Доб.ИмяРеквизтаНаФорме=ИмяРеквизитаНаФорме;
						
					Исключение
					КонецПопытки;
					
			КонецЦикла;
			
				
				ТаблицаКолонок1С.Очистить();
			Для Каждого Стр Из Стру.ТаблицаКолонок1С Цикл
					Попытка
						ИмяКолонки="ТаблицаСопоставленийСправочник1с"+xmlstring(СтрЗаменить(Стр.ИмяРеквизита,".","_"));
					    Элемент = ЭтаФорма.Элементы.Вставить(ИмяКолонки, Тип("ПолеФормы"), Элементы.Таблица9,Элементы.Таблица9СправочникМеркурия); 
					    Элемент.Вид = ВидПоляФормы.ПолеВвода; 
					    Элемент.ПутьКДанным = "ТаблицаСопоставлений.Справочник1С."+Стр.ИмяКолонки;//"Поле"+xmlstring(Сч); 
					    //Элемент.РастягиватьПоГоризонтали = Истина;
					    //Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
						Доб=ТаблицаКолонок1с.Добавить();
						Доб.ИмяРеквизита=ИмяКолонки;
					Исключение
					КонецПопытки;
					
			КонецЦикла;
		
		
		//	ОбновитьРеквизитТаблицыСопоставления();
		
		Для Каждого Стр Из ТаблицаКолонокМерк Цикл
			РеквизитЗнУмолч=Стр.ИмяРеквизтаНаФорме;
			Значение=Неопределено;
			Стру.Свойство(РеквизитЗнУмолч,Значение);
			Если ЗначениеЗаполнено(Значение) Тогда
				ЭтаФорма[РеквизитЗнУмолч]=Значение;
				//СтруктураШаблона.Вставить(Стр.ИмяРеквизтаНаФорме,Значение);
			КонецЕсли;
			
		Конеццикла;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура Команда2НаСервере(Тек)
	// Вставить содержимое обработчика.
	Ма=Обработки.РасширенноеСопоставлениеПоПродукции_ХамелеонЦРПТ.ПолучитьМакет("HELP_сопоставления");
	Тек=Ма;
КонецПроцедуры


&НаКлиенте
Процедура Команда2(Команда)
	ТТ=Новый ТекстовыйДокумент;
	Команда2НаСервере(ТТ);
	ТТ.Показать();
КонецПроцедуры


&НаКлиенте
Процедура ВыборКолонокПоказать_1с_ВТАБЛИЦУ(РР,ДД) Экспорт
	Если РР<>Неопределено Тогда
		ДобавитьКолонкиНаС_1С(РР);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКолонкиНаС_1С(РР)
	
//СоздаемНовыеКолонкиМерк(РР);
ТаблицаБылаСоСв=ТаблицаСопоставлений1СИМеркКолонки.Выгрузить();
ТаблицаСопоставлений1СИМеркКолонки.Очистить();
	Для Каждого Стр Из РР Цикл
		ДД=ТаблицаСопоставлений1СИМеркКолонки.Добавить();
		ДД.Колонка1С=Стр;
		СтрОк=ТаблицаБылаСоСв.Найти(Стр,"Колонка1С");
		Если Строк<>Неопределено тогда
			Стр.КолонкаМеркурия=СтрОк.КолонкаМеркурия;
		КонецЕсли;
		//мЕНЕДЖЕР="";
		//Если Найти(ВидСопоставленияНеЦРПТ,"СправочникСсылка")=1 Тогда
		//	Менеджер=Менеджер+"Справочники.";
		//	СпрП=Неопределено;
		//	Строк="СпрП="+Менеджер+Метаданные.НайтиПоТипу(Тип(ВидСопоставленияНеЦРПТ)).Имя+".СоздатьЭлемент()";
		//	Выполнить(Строк);
		//	ДД.Значение=СпрП[Стр];
		//	
		//Иначе
		//	Менеджер=Менеджер+"Документ.";
		//	
		//КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры


&НаКлиенте
Процедура Таблица2ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
		// Вставить содержимое обработчика.
	Отказ=Истина;
	КолонкиТекущие=ВернутьТекКолонки1С_ВТаблиц();
	
	ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ФормаДобавленияКолонокПоТипуДанных",Новый структура("Тип,Пользователь,Колонки",ВидСопоставленияНеЦРПТ,ТекущийПользователь,КолонкиТекущие),,,,,Новый ОписаниеОповещения("ВыборКолонокПоказать_1с_ВТАБЛИЦУ",ЭтаФорма));	

КонецПроцедуры

Функция ВернутьТекКолонки1С_ВТаблиц()
	МасивК=Новый Массив;
	Для Каждого Стр Из ТаблицаСопоставлений1СИМеркКолонки Цикл
		//ИмяРеквизитаУжеПропатчено=СтрЗаменить(Стр.Колонка1С,"_ТОЧКА_",".");
		//ИмяРеквизитаУжеПропатчено=сред(ИмяРеквизитаУжеПропатчено,33);

		МасивК.Добавить(Стр.Колонка1С);
	КонецЦикла;
	Возврат МасивК;
	
КонецФункции

&НаКлиенте
Процедура Команда3(Команда)
	// Вставить содержимое обработчика.
	Если Элементы.Таблица2.ТекущиеДанные<>Неопределено Тогда
		ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ФормаДобавленияКолонокПоТипуДанныхОДИН",Новый структура("Тип,Пользователь",ВидСопоставленияМеркурия,ТекущийПользователь),,,,,Новый ОписаниеОповещения("ВыборВРеквизитЦРПТ",ЭтаФорма,Элементы.Таблица2.ТекущиеДанные));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборВРеквизитЦРПТ(РР,ДД)
	Если ЗначениеЗаполнено(РР) Тогда
		ДД.КолонкаМеркурия=РР;
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПодборЦРПТ(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	ДобавимПодбором=ОпределитьМерк();
	Если ДобавимПодбором<>Неопределено Тогда
		ОткрытьФорму("Обработка.УниверсальныйЖурнал_ХамелеонЦРПТ.Форма.Форма",ДобавимПодбором,ЭтаФорма,,,,Новый ОписаниеОповещения("ПослеВыбораЭлементов_ЦРПТ",ЭтаФорма));
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьМерк()
	Структура=Неопределено;
	Если Найти(ВидСопоставленияМеркурия,"СправочникСсылка")=1 Тогда
		Менеджер="Справочник.";
		
		Структура=Новый Структура("тип,ТипДальше","Справочник",Метаданные.НайтиПоТипу(Тип(ВидСопоставленияМеркурия)).Имя);
		
		//СпрП=Неопределено;
		//Возврат Менеджер+Метаданные.НайтиПоТипу(Тип(ВидСопоставленияНеЦРПТ)).Имя;
	Иначе
		//Структура=Новый Структура("тип,ТипДальше","Документ",Метаданные.НайтиПоТипу(Тип(ВидСопоставленияНеЦРПТ)).Имя);
		//Менеджер="Документ.";
		
	КонецЕсли;
	Возврат Структура;
КонецФункции




&НаКлиенте
Процедура ПослеВыбораЭлементов_ЦРПТ(РР,ДД) Экспорт
	Если РР<>Неопределено Тогда
		ДобавимСтрочки_ЦРПТ(РР);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавимСтрочки_ЦРПТ(РР)
	Для Каждого Стр Из РР Цикл
		Если ЗначениеЗАполнено(стр) Тогда
			ДД=ТаблицаСопоставлений.Добавить();
			//ДД.Справочник1С=Стр;
			ДД.СправочникМеркурия=Стр;
		КонецЕсли;
	КонецЦИкла;
КонецПроцедуры


&НаКлиенте
Процедура Команда4(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
		ОткрытьФорму("Справочник.ВнешниеОбработки_ХамелеонЦРПТ.Форма.ФормаСписка",
		Новый структура("Тип",
			"ФОРМАСОПОСТАВЛЕНИЕ"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуВнешняя(Команда)
	
	// Вставить содержимое обработчика.	// Вставить содержимое обработчика.
	
	// Вставить содержимое обработчика.	// Вставить содержимое обработчика.
	//Если Элементы.Таблица8.ТекущиеДанные<>Неопределено Тогда
		
		Попытка
			ДвоичныеДанные=Новый ДвоичныеДанные(ВернутьИмяФайла(Команда.Имя));
			ОбработкаИмя=ПолучитьИмяВнешней(Двоичныеданные);
			ОткрытьФорму("ВнешняяОбработка."+ОбработкаИмя+".Форма",,ЭтаФорма);
		Исключение
			Попытка
#Если ТолстыйКлиентОбычноеПриложение  Тогда
				ВернутьВн(ВернутьИмяФайла(Команда.Имя));
#Иначе
				
			ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
#КонецЕсли
			Исключение
				ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
			КонецПопытки;
		//	
		//	
		КонецПопытки;

		//УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	//КонецЕсли;
КонецПроцедуры

Функция ВернутьИмяФайла(Команда)
	СпрВн=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоКоду(Сред(Команда,8));
	
	Возврат СпрВн.ИмяВнешнейОБработки
КонецФункции

Функция ПолучитьИмяВнешней(ИмяФайла)
    АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ИмяФайла);
    ИмяОбр = ВнешниеОбработки.Подключить(АдресВоВременномХранилище,,Ложь);
    Возврат ИмяОбр;
КонецФункции

#Если ТолстыйКлиентОбычноеПриложение  Тогда
&НаКлиенте
Процедура ВернутьВн(ДвоичныеДанные)
	//ИмяВременФ=ПолучитьИмяВременногоФайла();
	//ДвоичныеДанные.Записать(ИмяВременФ);
	ВнешняяОбработка=ВнешниеОбработки.Создать(ДвоичныеДанные);
	Фоорма=ВнешняяОбработка.ПолучитьФорму(,ЭтаФорма);
	Попытка
		Фоорма.УФ=ЭтаФорма;
	Исключение
	КонецПопытки;
	Фоорма.Открыть();
Конецпроцедуры      	
#КонецЕсли

&НаКлиенте
Процедура Команда5(Команда)
	// Вставить содержимое обработчика.
	ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопросаРазорватьСвяззь",ЭтаФорма),"Вы уверены что хотите разорвать связь?",РежимДиалогаВопрос.ДаНет)
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаРазорватьСвяззь(РР,ДД) Экспорт
	Если РР=КодВозвратаДиалога.Да Тогда
		Для каждого Стр_1 Из Элементы.Таблица9.ВыделенныеСтроки Цикл
			Стр=ТаблицаСопоставлений.НайтиПоИдентификатору(Стр_1);
			РазорватьСвязь(Стр.Справочник1С);
			Стр.СправочникМеркурия=Неопределено;
			Стр.НесколькоЭлементов=Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


Функция РазорватьСвязь(Спр1С)
	Если ЗначениеЗаполнено(Спр1С) тогда
		ЗначениеМеркурия=РегистрыСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Получить(Новый Структура("Справочник_Документ",Спр1С)).СправочникДокумент_Меркурия;
		Если ЗначениеЗаполнено(ЗначениеМеркурия) Тогда
			Сообщить("Разорвана связь "+Строка(Спр1С)+"(Код:"+Спр1С.Код+") и "+Строка(ЗначениеМеркурия)+"(Код:"+ЗначениеМеркурия.Код+")");
			СпРП=ЗначениеМеркурия.ПолучитьОБъект();
			СпРП.РеквизитДляСопоставления="";
			СпрП.Записать();
		КонецЕсли;
		
		
		регДв=РегистрыСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СоздатьНаборЗаписей();
		РегДв.Отбор.Справочник_Документ.Установить(Спр1С);
		РегДв.Записать(Истина);
		
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Продукция_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
		|ГДЕ
		|	ПОДСТРОКА(Продукция_ХамелеонЦРПТ.РеквизитДляСопоставления, 1, 1000) = &РеквизитДляСопоставления";
	
	Запрос.УстановитьПараметр("РеквизитДляСопоставления", Спр1с.Код);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		
		СпрП=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОБъект();
		СпрП.РеквизитДляСопоставления="";
		СпрП.Записать();
//		Сообщить("Разорвана связь "+Строка(Спр1С)+" и "+Строка(СпрП.Ссылка));
		Сообщить("Разорвана связь "+Строка(Спр1С)+"(Код:"+Спр1С.Код+") и "+Строка(СпрП.Ссылка)+"(Код:"+СпрП.Ссылка.Код+")");
		                
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура Поле2ПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	ЗаполнитьСписокМетаданных();
	ТаблицаСопоставлений.Очистить();
	Если ВОбратнуюСторону Тогда
		Элементы.Группа19.Заголовок="СПРАВОЧНИК/ДОКУМЕНТ ИЗ МЕРКУРИЯ";
		Элементы.Группа17.Заголовок="СПРАВОЧНИК/ДОКУМЕНТ ИЗ 1С"
	Иначе
		Элементы.Группа19.Заголовок="СПРАВОЧНИК/ДОКУМЕНТ ИЗ 1С";
		Элементы.Группа17.Заголовок="СПРАВОЧНИК/ДОКУМЕНТ ИЗ МЕРКУРИЯ";
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Поле2ПриИзменении(Элемент)
	Поле2ПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Таблица9Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если Поле.Имя="ТаблицаСопоставленийСправочникЦРПТОстаток" Тогда
		Форм=ОткрытьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаВыбораКМ");
		Форм.Элементы.Продукция.ТекущаяСтрока=Элементы.Таблица9.ТекущиеДанные.СправочникМеркурия;
		Форм.Элементы.Страницы.ТекущаяСтраница=Форм.Элементы.ВыборПартии;
		
	//	Если Форм.Элементы.Продукция.ТекущиеДанные<>Неопределено Тогда
			МассивУдалимначалаВсе=Новый Массив;
			Для Каждого стр_1 Из Форм.список.Отбор.Элементы Цикл
				МассивУдалимначалаВсе.Добавить(Стр_1);
			Конеццикла;
			Для Каждого Стр Из МассивУдалимначалаВсе Цикл
				
				Форм.Список.Отбор.Элементы.Удалить(Стр);
			Конеццикла;
			
			Стр=Форм.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Стр.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
			Стр.Использование=Истина;
			Стр.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Продукция");
			Стр.ПравоеЗначение=Элементы.Таблица9.ТекущиеДанные.СправочникМеркурия; 
			Стр.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
			
	//	КонецЕслИ;
		
		
		
	//	МассивТоваров=Новый Массив;
		////Для Каждого Стр Из Элементы.Список.ВыделенныеСтроки Цикл
		//МассивТоваров=ПолучитьММ(Элементы.Таблица9.ТекущиеДанные.Справочник1С);
		//МассивТоваров.Добавить(Элементы.Таблица9.ТекущиеДанные.СправочникМеркурия);
		////КонецЦикла;
		//Табличн=Новый ТабличныйДокумент;
		//Расшифровкать(МассивТоваров,Табличн);
		//
		//Табличн.ТолькоПросмотр=Истина;
		//ФормОт=ОткрытьФорму("Справочник.НоменклатураЦРПТ.Форма.ФормаВыбораОстатки");
		//ФормОт.ТабличныйДокумент=Табличн;
		
		
		//Табличн.Показать();
	ИначеЕсли Поле.Имя="ТаблицаСопоставленийСправочникЦРПТНесколько" Тогда
		МассивСпрМеркурия=ПолучитьММ(Элементы.Таблица9.ТекущиеДанные.Справочник1С);
		ФормП=ОткрытьФорму("Справочник.Продукция_ХамелеонЦРПТ.Форма.ФормаВыбора");
		//ФормП.Список.Параметры.УстановитьЗначениеПараметра("ПодразделениеЦРПТ",Предприятие);
		ДД=ФормП.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ДД.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке;
		ДД.Использование=Истина;
		ДД.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Ссылка");
		ДД.ПравоеЗначение=МассивСпрМеркурия;
		
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьММ(Спр1с)
	  	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СправочникДокумент_Меркурия
		|ИЗ
		|	РегистрСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ КАК СопоставлениеСправочниковДокументов_ХамелеонЦРПТ
		|ГДЕ
		|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Справочник_Документ = &Справочник_Документ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Продукция_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
		|ГДЕ
		|	Продукция_ХамелеонЦРПТ.РеквизитДляСопоставления = &РеквизитДляСопоставления
		|	И ПОДСТРОКА(Продукция_ХамелеонЦРПТ.РеквизитДляСопоставления, 1, 1000) <> """"";
	Попытка
	Запрос.УстановитьПараметр("РеквизитДляСопоставления", Спр1с.Код);
Исключение
	Запрос.УстановитьПараметр("РеквизитДляСопоставления", "НЕТ КОДА");
КонецПопытки;
	Запрос.УстановитьПараметр("Справочник_Документ", Спр1с);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	    СписокТовара=Новый СписокЗначений;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокТовара.Добавить( ВыборкаДетальныеЗаписи.СправочникДокумент_Меркурия)
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
Возврат СписокТовара;
	
	
	
КонецФункции



Функция Получить1С(Спр1с)
	  	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Справочник_Документ КАК  СправочникДокумент_Меркурия
		|ИЗ
		|	РегистрСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ КАК СопоставлениеСправочниковДокументов_ХамелеонЦРПТ
		|ГДЕ
		|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СправочникДокумент_Меркурия = &Справочник_Документ
		|
		|";
	Запрос.УстановитьПараметр("Справочник_Документ", Спр1с);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	    СписокТовара=Новый СписокЗначений;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.СправочникДокумент_Меркурия
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
Возврат СписокТовара;
	
	
	
КонецФункции


Процедура Расшифровкать(СписокПроудкции,Табличн)
	Возврат;
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	Продукция_ХамелеонЦРПТ.Ссылка КАК Продукция,
	//	|	ПартииТоваров_ХамелеонЦРПТОстатки.ЗаписьЖурнала КАК Записьжурнала,
	//	|	ПартииТоваров_ХамелеонЦРПТОстатки.ХС КАК ХС,
	//	|	ПартииТоваров_ХамелеонЦРПТОстатки.Предприятие КАК Площадка,
	//	|	СУММА(ПартииТоваров_ХамелеонЦРПТОстатки.КоличествоОстаток) КАК Остаток
	//	|ИЗ
	//	|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваров_ХамелеонЦРПТ.Остатки КАК ПартииТоваров_ХамелеонЦРПТОстатки
	//	|		ПО Продукция_ХамелеонЦРПТ.Ссылка = ПартииТоваров_ХамелеонЦРПТОстатки.Номенклатура
	//	|ГДЕ
	//	|	Продукция_ХамелеонЦРПТ.Ссылка В(&Ссылка)
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	Продукция_ХамелеонЦРПТ.Ссылка,
	//	|	ПартииТоваров_ХамелеонЦРПТОстатки.ЗаписьЖурнала,
	//	|	ПартииТоваров_ХамелеонЦРПТОстатки.ХС,
	//	|	ПартииТоваров_ХамелеонЦРПТОстатки.Предприятие
	//	|ИТОГИ
	//	|	СУММА(Остаток)
	//	|ПО
	//	|	Продукция,
	//	|	ХС,
	//	|	Площадка,ЗаписьЖурнала";
	//
	//Запрос.УстановитьПараметр("Ссылка", СписокПроудкции);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//Обл=Справочники.НоменклатураЦРПТ.ПолучитьМакет("Макет");
	//ОблСтр=Обл.ПолучитьОбласть("Строка");
	//ОблШ=обл.ПолучитьОбласть("Шапка");
	//Табличн.Вывести(ОблШ);
	//Пока ВыборкаСсылка.Следующий() Цикл
	//	// Вставить обработку выборки ВыборкаСсылка
	//
	//	ВыборкаЗаписьЖурнала = ВыборкаСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//
	//	Пока ВыборкаЗаписьЖурнала.Следующий() Цикл
	//		// Вставить обработку выборки ВыборкаЗаписьЖурнала
	//
	//		ВыборкаХС = ВыборкаЗаписьЖурнала.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//
	//		Пока ВыборкаХС.Следующий() Цикл
	//			// Вставить обработку выборки ВыборкаХС
	//
	//			ВыборкаПредприятие = ВыборкаХС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//
	//			Пока ВыборкаПредприятие.Следующий() Цикл
	//				// Вставить обработку выборки ВыборкаПредприятие
	//				ОблСтр.Параметры.Заполнить(ВыборкаПредприятие);
	//				ОблСтр.Параметры.ПараметрЗаписьЖурнала=Новый Структура("ЗаписьЖурнала",ВыборкаПредприятие.ЗаписьЖурнала);
	//				Табличн.Вывести(ОблСтр);
	//			КонецЦикла;
	//		КонецЦикла;
	//	КонецЦикла;
	//КонецЦикла;
	//Табличн.ТолькоПросмотр=Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура НеЦРПТ1ПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Счет="";
	НаСервереДобавимРеквизиты();
	
КонецПроцедуры


Функция ПолучитьСвойстваСчета(Знач Счет) Экспорт

	ДанныеСчета = Новый Структура;
	ДанныеСчета.Вставить("Ссылка"                         , Неопределено);
	ДанныеСчета.Вставить("Наименование"                   , "");
	ДанныеСчета.Вставить("Код"                            , "");
	ДанныеСчета.Вставить("КодБыстрогоВыбора"              , "");
	ДанныеСчета.Вставить("Родитель"                       , Неопределено);
	ДанныеСчета.Вставить("Вид"                            , Неопределено);
	ДанныеСчета.Вставить("Забалансовый"                   , Ложь);
	ДанныеСчета.Вставить("ЗапретитьИспользоватьВПроводках", Ложь);
	ДанныеСчета.Вставить("Валютный"                       , Ложь);
	ДанныеСчета.Вставить("Количественный"                 , Ложь);
	ДанныеСчета.Вставить("УчетПоПодразделениям"           , Ложь);
	ДанныеСчета.Вставить("НалоговыйУчет"                  , Ложь);
	ДанныеСчета.Вставить("КоличествоСубконто"             , 0);
	
	МаксКоличествоСубконто	= 0;
	
	Для ИндексСубконто = 1 По МаксКоличествоСубконто Цикл
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто,                   Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Наименование",  Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТипЗначения",   Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Суммовой",      Ложь);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТолькоОбороты", Ложь);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат ДанныеСчета;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", Счет);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка,
	|	Хозрасчетный.Родитель,
	|	Хозрасчетный.Код,
	|	Хозрасчетный.Наименование
	|ИЗ
	|	ПланСчетов."+Метаданные.НайтиПоТипу(ТипЗнч(Счет)).Имя+" КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка = &Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	ХозрасчетныйВидыСубконто.ВидСубконто.Наименование КАК Наименование,
	|	ХозрасчетныйВидыСубконто.ВидСубконто.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	ПланСчетов."+Метаданные.НайтиПоТипу(ТипЗнч(Счет)).Имя+".ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка = &Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйВидыСубконто.НомерСтроки";
	
	МассивРезультатов	= Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеСчета, Выборка);
	КонецЕсли;
		
	ВыборкаВидыСубконто	= МассивРезультатов[1].Выбрать();
		
	ДанныеСчета.КоличествоСубконто	= ВыборкаВидыСубконто.Количество();
		
	ИндексСубконто	= 0;
		
	Пока ВыборкаВидыСубконто.Следующий() Цикл
		
		ИндексСубконто	= ИндексСубконто + 1;
		
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто,                   ВыборкаВидыСубконто.ВидСубконто);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Наименование",  ВыборкаВидыСубконто.Наименование);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТипЗначения",   ВыборкаВидыСубконто.ТипЗначения);
		
	КонецЦикла;
	
	Возврат ДанныеСчета;
	
КонецФункции



Процедура НаСервереДобавимРеквизиты()
	Если Сред(ВидРегистраНакопления1С,1,17)="РегистрНакопления" Тогда
		Элементы.Группа10.Видимость=Истина;
		Элементы.Группа12.Видимость=Ложь;
		Попытка
		ТаблицаРеквизитовОстатков.Очистить();
		ТаблицаРесурсовостатков.Очистить();
		
		Для Каждого Стр Из Метаданные.РегистрыНакопления.Найти(Сред(ВидРегистраНакопления1С,Найти(ВидРегистраНакопления1С,".")+1)).Измерения Цикл
			
			Добав=ТаблицаРеквизитовОстатков.Добавить();
			Добав.Отметка=Ложь;
			Добав.ИмяРеквизита=Стр.Имя;
			
		КонецЦикла;
			
		Для Каждого Стр Из Метаданные.РегистрыНакопления.Найти(Сред(ВидРегистраНакопления1С,Найти(ВидРегистраНакопления1С,".")+1)).Ресурсы Цикл
			
			Добав=ТаблицаРесурсовостатков.Добавить();
			Добав.Отметка=Ложь;
			Добав.ИмяРеквизита=Стр.Имя;
			
		КонецЦикла;
		Исключение
		КонецПопытки;
	Иначе
		Элементы.Группа10.Видимость=Ложь;
		Элементы.Группа12.Видимость=Истина;
		ТаблицаРеквизитовОстатков.Очистить();
		ТаблицаРесурсовостатков.Очистить();
		
		
		ПоСчетуПолучимДанные=ПолучитьСвойстваСчета(Счет);
		КоличествоСубконто=ПоСчетуПолучимДанные.КоличествоСубконто;
			Для Индекс = 1 По КоличествоСубконто Цикл
				НоваяСтрока = ТаблицаРеквизитовОстатков.Добавить();
				НоваяСтрока.Отметка           = Ложь;
				НоваяСтрока.ИмяРеквизита  = Счет.ВидыСубконто[Индекс - 1].ВидСубконто.Наименование;
			КонецЦикла;	
		
		
	КонецЕсли;
	
	
	
	
		//СхемаКомпоновки=ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);	
		//СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1;
	
	
ОбновитьСхемук() ;
	
КонецПроцедуры


&НаКлиенте
Процедура Таблица3ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
	Отказ=Истина;
КонецПроцедуры


&НаКлиенте
Процедура Таблица4ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
	Отказ=Истина;
КонецПроцедуры


&НаКлиенте
Процедура Команда6(Команда)
	// Вставить содержимое обработчика.
	РАсчетОстатков1С()

КонецПроцедуры


&НаКлиенте
Процедура Таблица3ПриИзменении(Элемент)
	// Вставить содержимое обработчика.
ОбновитьСхемук() ;
		
КонецПроцедуры


&НаКлиенте
Процедура Таблица4ПриИзменении(Элемент)
	// Вставить содержимое обработчика.
ОбновитьСхемук() ;
		
КонецПроцедуры


&НаКлиенте
Процедура Команда7(Команда) Экспорт
	Если Элементы.Кнопка6.Заголовок="Вся продукция" Тогда
		Элементы.Кнопка6.Заголовок="Продукция только по ЦРПТ";
	//	РАсчетОстатков1С(Истина)
	Иначе
		Элементы.Кнопка6.Заголовок="Вся продукция";
	КонецЕсли;
	
		РАсчетОстатков1С()
	//	
	//КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура Поле3ПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ОбновитьСписок();
	
	РАсчетОстатков1С()	
КонецПроцедуры


&НаКлиенте
Процедура Поле4ПриИзменении(Элемент)
	// Вставить содержимое обработчика.
НаСервереДобавимРеквизиты()	
КонецПроцедуры


&НаКлиенте
Процедура Таблица3ПередУдалением(Элемент, Отказ)
	// Вставить содержимое обработчика.
	Отказ=Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура Поле5ПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ОбновитьСписок();
	Элементы.Группа1.Видимость=Ложь;
	
	ПодключитьОбработчикОжидания("ААА",0.1,Истина);

КонецПроцедуры


&НаКлиенте
Процедура Поле6НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка=Ложь;
	
	
	ОткрытьФорму("Справочник.Организации_ХамелеонЦРПТ.ФормаВыбора",Новый Структура("ТекущаяСтрока",Предприятие),Элемент);
	
КонецПроцедуры


&НаСервере
Функция СоздатьИнвентаризациюНаСервере()
	
	ТаблицаСопоставлений_1=ТаблицаСопоставлений.Выгрузить();
	ТаблицаСопоставлений_1.Очистить();
	Для Каждого Стр Из Элементы.Таблица9.ВыделенныеСтроки Цикл
		Стр_1=ТаблицаСопоставлений.НайтиПоИдентификатору(Стр);
		
		ДД=ТаблицаСопоставлений_1.Добавить();
		ЗаполнитьЗначенияСвойств(ДД,Стр_1);
		
		
	Конеццикла;
	
	
	// Вставить содержимое обработчика.
	
	Докум=Документы.Инвентаризация_ХамелеонЦРПТ.СоздатьДокумент();
	Докум.Дата=Текущаядата();
	Докум.ХС=ХС;
	Докум.Предприятие=Предприятие;
	
	ТТ_П=Новый ТаблицаЗначений;
	
	
	ТаблицаОстатков=Новый ТаблицаЗначений;
	ТаблицаОстатков.Колонки.Добавить("Проудкция");
	ТаблицаОстатков.Колонки.Добавить("Номенклатура");
	ТаблицаОстатков.Колонки.Добавить("Количество1С");
	ТаблицаОстатков.Колонки.Добавить("КоличествоМ");
	
	
	ТаблицаЖурн=Новый ТаблицаЗначений;
	ТаблицаЖурн.Колонки.Добавить("ЗаписьЖурнала");
	ТаблицаЖурн.Колонки.Добавить("Продукция");
	ТаблицаЖурн.Колонки.Добавить("Количество");
	
	УжеБылиЗапись=Новый ТаблицаЗначений;
	УжеБылиЗапись.Колонки.Добавить("ЗаписьЖурнала");
	УжеБылиЗапись.Колонки.Добавить("Количество");
	
	
	Для Каждого Стр Из ТаблицаСопоставлений_1 Цикл
		Если ЗначениезАполнено(Стр.Справочник1С) И Стр.Остаток1С>0 Тогда
			Спис=Стр.Остаток1С;
			
			
			ЗначениеМеркурия=РегистрыСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Получить(Новый Структура("Справочник_Документ",Стр.Справочник1С)).СправочникДокумент_Меркурия;
			Если Не ЗначениезАполнено(ЗначениеМеркурия) Тогда
				Продолжить;
			КонецЕсли;
			МассивОстатков=Новый Массив;
			МассивОстатков.Добавить(ЗначениеМеркурия);
			
			Если ЗначениезАполнено(ЗначениеМеркурия.РеквизитДляСопоставления) Тогда
				//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	Продукция_ХамелеонЦРПТ.Ссылка
					|ИЗ
					|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
					|ГДЕ
					|	ПОДСТРОКА(Продукция_ХамелеонЦРПТ.РеквизитДляСопоставления, 1, 1000) = &РеквизитДляСопоставления";
				
				Запрос.УстановитьПараметр("РеквизитДляСопоставления", ЗначениеМеркурия.РеквизитДляСопоставления);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					МассивОстатков.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
				КонецЦикла;
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

				
				
				
			КОнецесли;
			
			
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			// Данный фрагмент построен конструктором.
			// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ПартииТоваров_ХамелеонЦРПТОстатки.Номенклатура КАК Номенклатура,
				|	ПартииТоваров_ХамелеонЦРПТОстатки.ЗаписьЖурнала КАК ЗаписьЖурнала,
				|	СУММА(ПартииТоваров_ХамелеонЦРПТОстатки.КоличествоОстаток) КАК КоличествоОстаток
				|ИЗ
				|	РегистрНакопления.ПартииТоваров_ХамелеонЦРПТ.Остатки(
				|			,
				|			ХС = &ХС
				|				И Предприятие = &Предприятие
				|				И Номенклатура В (&Номенклатура)) КАК ПартииТоваров_ХамелеонЦРПТОстатки
				|
				|СГРУППИРОВАТЬ ПО
				|	ПартииТоваров_ХамелеонЦРПТОстатки.Номенклатура,
				|	ПартииТоваров_ХамелеонЦРПТОстатки.ЗаписьЖурнала
				|
				|УПОРЯДОЧИТЬ ПО
				|	ПартииТоваров_ХамелеонЦРПТОстатки.ЗаписьЖурнала.НомерЗаписи УБЫВ
				|ИТОГИ
				|	СУММА(КоличествоОстаток)
				|ПО
				|	Номенклатура,
				|	ЗаписьЖурнала";
			
			Запрос.УстановитьПараметр("ХС",ХС);
			Запрос.УстановитьПараметр("Предприятие",Предприятие);
			Запрос.УстановитьПараметр("Номенклатура",МассивОстатков);
			
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ПерваяЗапись=Неопределено;
			Пока ВыборкаНоменклатура.Следующий() Цикл
				// Вставить обработку выборки ВыборкаНоменклатура
			
				ВыборкаЗаписьЖурнала = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
				Пока ВыборкаЗаписьЖурнала.Следующий() Цикл
					Если Не ЗначениезАполнено(ВыборкаЗаписьЖурнала.ЗаписьЖурнала) Тогда
						Продолжить;
					КонецЕсли;
					
					
					Если Не ЗначениезАполнено(ПерваяЗапись) ТОгда
						ПерваяЗапись=ВыборкаЗаписьЖурнала.ЗаписьЖурнала;
					КонецЕсли;
					
					// Вставить обработку выборки ВыборкаЗаписьЖурнала
					НайтиЗ=УжеБылиЗапись.НайтиСтроки(Новый Структура("ЗаписьЖурнала",ВыборкаЗаписьЖурнала.ЗаписьЖурнала));
					КолУп_1=0;
					Для Каждого Стр ИЗ НайтиЗ ЦИкл
						КолУп_1=КолУп_1+Стр.Количество;
					Конеццикла;
					КолУп=ВыборкаЗаписьЖурнала.КоличествоОстаток-КолУп_1;
					Если КолУп>0 ТОгда
						МожемСп=Мин(КолУП,Спис);
						Если МожемСп>0 Тогда
							Стр_Ж=ТаблицаЖурн.Добавить();				
			                Стр_Ж.ЗаписьЖурнала=ВыборкаЗаписьЖурнала.ЗаписьЖурнала;
	
							Стр_Ж.Продукция=ВыборкаЗаписьЖурнала.Номенклатура;
							Стр_Ж.Количество=МожемСп;
							
							
							Стр_М=УжеБылиЗапись.Добавить();
							Стр_М.ЗаписьЖурнала=ВыборкаЗаписьЖурнала.ЗаписьЖурнала;
							Стр_М.Количество=МожемСп;
							
							
							Спис=Спис-МожемСп;
							
							
						КонецЕсли;
						Если Спис<=0 Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
					
					
				КонецЦикла;
			КонецЦикла;
			
			//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			Если Спис>0 Тогда
				Если ЗначениезАполнено(ПерваяЗапись) Тогда
						Стр_Ж=ТаблицаЖурн.Добавить();				
			             Стр_Ж.ЗаписьЖурнала=ПерваяЗапись;
						Стр_Ж.Продукция=ПерваяЗапись.Продукция;
						Стр_Ж.Количество=Спис;
						
					Иначе
						
						
							//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
						// Данный фрагмент построен конструктором.
						// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
						
						Запрос = Новый Запрос;
						Запрос.Текст = 
							"ВЫБРАТЬ РАЗЛИЧНЫЕ
							|	ПартииТоваров_ХамелеонЦРПТ.Ссылка
							|ИЗ
							|	Справочник.ПартииТоваров_ХамелеонЦРПТ КАК ПартииТоваров_ХамелеонЦРПТ
							|ГДЕ
							|	ПартииТоваров_ХамелеонЦРПТ.Продукция В(&Продукция)
							|
							|УПОРЯДОЧИТЬ ПО
							|	ПартииТоваров_ХамелеонЦРПТ.НомерЗаписи УБЫВ";
						
						Запрос.УстановитьПараметр("Продукция", МассивОстатков);
						
						РезультатЗапроса = Запрос.Выполнить();
						
						ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
						
						Если ВыборкаДетальныеЗаписи.Следующий() Тогда
							// Вставить обработку выборки ВыборкаДетальныеЗаписи
							Стр_Ж=ТаблицаЖурн.Добавить();				
				             Стр_Ж.ЗаписьЖурнала=ВыборкаДетальныеЗаписи.ссылка;
							Стр_Ж.Продукция=ВыборкаДетальныеЗаписи.Ссылка.Продукция;
							Стр_Ж.Количество=Спис;
							
						КонецЕсли;;
						
						//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

				КонецЕсли;
			КонецЕсли;
				
			
		КонецЕсли;
		
	КонецциклА;
	
	
//	Для Каждого Стр Из ТаблицаСопоставлений Цикл
//		Если ЗначениеЗаполнено(Стр.СправочникМеркурия) И Стр.ОСтаток>0 Тогда
//			НайтиТеЧтоУжеБ=ТаблицаЖурн.НайтиСтроки(Новый Структура("Продукция",Стр.СправочникМеркурия));
//			КолСписали=0;
//			ДЛя Каждого СТр_1 Из НайтиТеЧтоУжеБ Цикл
//				КолСписали=КолСписали+СТр_1.Количество;
//				
//			Конеццикла;
//			Разница=Стр.Остаток-КолСписали;
//			Если Разница>0 Тогда
//				     Спис= Разница;
////{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
//			// Данный фрагмент построен конструктором.
//			// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
//			
//			Запрос = Новый Запрос;
//			Запрос.Текст = 
//				"ВЫБРАТЬ
//				|	ПартииТоваров_ХамелеонЦРПТОстатки.Номенклатура КАК Номенклатура,
//				|	ПартииТоваров_ХамелеонЦРПТОстатки.ЗаписьЖурнала КАК ЗаписьЖурнала,
//				|	СУММА(ПартииТоваров_ХамелеонЦРПТОстатки.КоличествоОстаток) КАК КоличествоОстаток
//				|ИЗ
//				|	РегистрНакопления.ПартииТоваров_ХамелеонЦРПТ.Остатки(
//				|			,
//				|			ХС = &ХС
//				|				И Предприятие = &Предприятие
//				|				И Номенклатура В (&Номенклатура)) КАК ПартииТоваров_ХамелеонЦРПТОстатки
//				|
//				|СГРУППИРОВАТЬ ПО
//				|	ПартииТоваров_ХамелеонЦРПТОстатки.Номенклатура,
//				|	ПартииТоваров_ХамелеонЦРПТОстатки.ЗаписьЖурнала
//				|
//				|УПОРЯДОЧИТЬ ПО
//				|	ПартииТоваров_ХамелеонЦРПТОстатки.ЗаписьЖурнала.НомерЗаписи УБЫВ
//				|ИТОГИ
//				|	СУММА(КоличествоОстаток)
//				|ПО
//				|	Номенклатура,
//				|	ЗаписьЖурнала";
//			
//			Запрос.УстановитьПараметр("ХС",ХС);
//			Запрос.УстановитьПараметр("Предприятие",Предприятие);
//			Запрос.УстановитьПараметр("Номенклатура",Стр.СправочникМеркурия);
//			
//			
//			РезультатЗапроса = Запрос.Выполнить();
//			
//			ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//			ПерваяЗапись=Неопределено;
//			Пока ВыборкаНоменклатура.Следующий() Цикл
//				// Вставить обработку выборки ВыборкаНоменклатура
//			
//				ВыборкаЗаписьЖурнала = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//			
//				Пока ВыборкаЗаписьЖурнала.Следующий() Цикл
//					Если Не ЗначениезАполнено(ВыборкаЗаписьЖурнала.ЗаписьЖурнала) Тогда
//						Продолжить;
//					КонецЕсли;
//					
//					
//					// Вставить обработку выборки ВыборкаЗаписьЖурнала
//					НайтиЗ=УжеБылиЗапись.НайтиСтроки(Новый Структура("ЗаписьЖурнала",ВыборкаЗаписьЖурнала.ЗаписьЖурнала));
//					КолУп_1=0;
//					Для Каждого Стр ИЗ НайтиЗ ЦИкл
//						КолУп_1=КолУп_1+Стр.Количество;
//					Конеццикла;
//					КолУп=ВыборкаЗаписьЖурнала.КоличествоОстаток-КолУп_1;
//					
//					Если КолУп>0 ТОгда
//						МожемСп=Мин(КолУП,Спис);
//						Если МожемСп>0 Тогда
//							Стр_Ж=ТаблицаЖурн.Добавить();				
//			                Стр_Ж.ЗаписьЖурнала=ВыборкаЗаписьЖурнала.ЗаписьЖурнала;
//							Стр_Ж.Продукция=ВыборкаЗаписьЖурнала.Номенклатура;
//							Стр_Ж.Количество=-МожемСп;
//							
//							
//							Стр_М=УжеБылиЗапись.Добавить();
//							Стр_М.ЗаписьЖурнала=ВыборкаЗаписьЖурнала.ЗаписьЖурнала;
//							Стр_М.Количество=МожемСп;
//							
//							
//							
//							
//						КонецЕсли;
//						Спис=Спис-МожемСп;
//						Если Спис>0 Тогда
//							Прервать;
//						КонецЕсли;
//					КонецЕсли;
//					
//					
//				КонецЦикла;
//			КонецЦикла;
//			
//			//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
//				
//				
//				
//			КонецЕсли;
//			
//			
//		КонецЕсли;
//		
//		
//	Конеццикла;
//	
	
	ТаблицаЖурн.Свернуть("ЗаписьЖурнала","Количество");
	
	Для Каждого Стр Из ТаблицаЖурн Цикл
		
		Остат=ВернутьОстаток(Стр.ЗаписьЖурнала);
		//Если Остат=Стр.Количество Тогда
		//	Продолжить;
		//КонецЕсли;
		Инв=Докум.Расхождения.Добавить();
		Инв.ЗаписьЖурнала=Стр.ЗаписьЖурнала;
		Инв.НомерПартии=Инв.ЗаписьЖурнала.НомерПроизводственнойПартии;
		Инв.Объем=Стр.Количество;
		ИНв.СтарыйОстаток=Остат;
		
		
		
		
	Конеццикла;
	
	
	Для Каждого Стр Из ТаблицаСопоставлений_1 Цикл
		Если НЕ ЗначениезАполнено(Стр.Справочник1С) И Стр.Остаток>0 И Значениезаполнено(Стр.СправочникМеркурия) Тогда
			
			МассивОстатков=Новый Массив;
			МассивОстатков.Добавить(Стр.СправочникМеркурия);
			
			
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			// Данный фрагмент построен конструктором.
			// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ПартииТоваров_ХамелеонЦРПТОстатки.Номенклатура КАК Номенклатура,
				|	ПартииТоваров_ХамелеонЦРПТОстатки.ЗаписьЖурнала КАК ЗаписьЖурнала,
				|	СУММА(ПартииТоваров_ХамелеонЦРПТОстатки.КоличествоОстаток) КАК КоличествоОстаток
				|ИЗ
				|	РегистрНакопления.ПартииТоваров_ХамелеонЦРПТ.Остатки(
				|			,
				|			ХС = &ХС
				|				И Предприятие = &Предприятие
				|				И Номенклатура В (&Номенклатура)) КАК ПартииТоваров_ХамелеонЦРПТОстатки
				|
				|СГРУППИРОВАТЬ ПО
				|	ПартииТоваров_ХамелеонЦРПТОстатки.Номенклатура,
				|	ПартииТоваров_ХамелеонЦРПТОстатки.ЗаписьЖурнала
				|
				|УПОРЯДОЧИТЬ ПО
				|	ПартииТоваров_ХамелеонЦРПТОстатки.ЗаписьЖурнала.НомерЗаписи УБЫВ
				|ИТОГИ
				|	СУММА(КоличествоОстаток)
				|ПО
				|	Номенклатура,
				|	ЗаписьЖурнала";
			
			Запрос.УстановитьПараметр("ХС",ХС);
			Запрос.УстановитьПараметр("Предприятие",Предприятие);
			Запрос.УстановитьПараметр("Номенклатура",МассивОстатков);
			
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ПерваяЗапись=Неопределено;
			Пока ВыборкаНоменклатура.Следующий() Цикл
				// Вставить обработку выборки ВыборкаНоменклатура
			
				ВыборкаЗаписьЖурнала = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
				Пока ВыборкаЗаписьЖурнала.Следующий() Цикл
					Если Не ЗначениезАполнено(ВыборкаЗаписьЖурнала.ЗаписьЖурнала) Тогда
						Продолжить;
					КонецЕсли;
					
					
					Остат=ВернутьОстаток(ВыборкаЗаписьЖурнала.ЗаписьЖурнала);
					Инв=Докум.Расхождения.Добавить();
					Инв.ЗаписьЖурнала=ВыборкаЗаписьЖурнала.ЗаписьЖурнала;
		Инв.НомерПартии=Инв.ЗаписьЖурнала.НомерПроизводственнойПартии;
					Инв.Объем=0;
					ИНв.СтарыйОстаток=Остат;
					
					
				КонецЦикла;
			КонецЦикла;
			
						
			
		КонецЕсли;
		
	КонецциклА;
	
	
	
	
	Докум.Записать();
	ВОзврат Докум.Ссылка
	
	
КонецФункции

Функция ВернутьОстаток(ЗаписьЖурнала)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ПартииТоваров_ХамелеонЦРПТОстатки.КоличествоОстаток ) КАК Поле1
	|ИЗ
	|	РегистрНакопления.ПартииТоваров_ХамелеонЦРПТ.Остатки(
	|			,
	|			ХС = &ХС
	|				И Предприятие = &Предприятие
	|				И ЗаписьЖурнала = &ЗаписьЖурнала) КАК ПартииТоваров_ХамелеонЦРПТОстатки
	|ИТОГИ
	|	СУММА(Поле1)
	|ПО
	|	ОБЩИЕ";
	
	Запрос.УстановитьПараметр("ЗаписьЖурнала", ЗаписьЖурнала);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("ХС", ХС);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаОбщийИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаОбщийИтог.Следующий();		// Общий итог
	
	Возврат ВыборкаОбщийИтог.Поле1
	
КонецФункции



&НаКлиенте
Процедура СоздатьИнвентаризацию(Команда)
	Если Значениезаполнено(ХС) И Значениезаполнено(Предприятие) Тогда
	
		Инв=СоздатьИнвентаризациюНаСервере();
		Если Значениезаполнено(Инв) Тогда
			ОткрытьФорму("Документ.Инвентаризация_ХамелеонЦРПТ.ФормаОбъекта",Новый Структура("Ключ,ХС",Инв,ХС));
			
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(,"Необходимо указать ХС и предприятие для формирования инвентаризации");
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура Команда8(Команда)
	// Вставить содержимое обработчика.
	
	//МассивВ_1=Новый списокЗначений;
	//Для Каждого Стр_1 Из Элементы.Таблица9.ВыделенныеСтроки Цикл
	//	Стр=ТаблицаСопоставлений.НайтиПоИдентификатору(Стр_1);
	//	МассивВ_1.Добавить(Стр.СправочникМеркурия);
	//КонецЦикла;
	//МассивВ=ВернутьСправкиПоОстаткам(МассивВ_1);
	//
	//Форм=
	//ОткрытьФорму("Справочник.СправкиЦРПТ.ФормаСписка");	
	//
	//Список=Форм.Список;
	//
	//
	//ДД=Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ДД.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке;
	//ДД.Использование=Истина;
	//ДД.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Ссылка");
	//ДД.ПравоеЗначение=МассивВ;
	
	
	
КонецПроцедуры

Функция ВернутьСправкиПоОстаткам(ММ)
	
	Возврат Новый СписокЗначений;
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	СУММА(ПартииТоваров_ХамелеонЦРПТОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	//	|	ПартииТоваров_ХамелеонЦРПТОстатки.СправкиАБ КАК СправкиАБ
	//	|ИЗ
	//	|	РегистрНакопления.РегистрЦРПТ.Остатки(
	//	|			,
	//	|			ПодразделениеЦРПТ = &Предприятие
	//	|				ИЛИ &Предприятие = ЗНАЧЕНИЕ(Справочник.ПодразделениеЦРПТ.ПустаяСсылка)
	//	|					И НоменклатураЦРПТ ССЫЛКА Справочник.НоменклатураЦРПТ
	//	|					И НоменклатураЦРПТ В (&ММ)) КАК ПартииТоваров_ХамелеонЦРПТОстатки
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ПартииТоваров_ХамелеонЦРПТОстатки.СправкиАБ
	//	|ИТОГИ
	//	|	СУММА(КоличествоОстаток)
	//	|ПО
	//	|	СправкиАБ";
	//
	//Запрос.УстановитьПараметр("Предприятие",Предприятие);
	//Запрос.УстановитьПараметр("ММ",ММ);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Массв_1=Новый СписокЗначений;
	//ВВ=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//Пока ВВ.Следующий() Цикл
	//	Массв_1.Добавить(ВВ.СПравкиАБ);
	//КонецЦИкла;
	//Возврат    Массв_1;
	
КонецФункции