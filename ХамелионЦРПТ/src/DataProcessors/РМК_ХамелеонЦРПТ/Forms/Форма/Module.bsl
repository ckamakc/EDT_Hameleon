
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Вставить содержимое обработчика.
	Форм=открытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	ТекущийПользователь=Форм.Пользователь;
	ЭтаФорма.Активизировать();
	
	ВидКМЗаполнить();
	
	УправлениеВидимостью();
	//Отказ=Не ЗначениеЗАполнено(ТекущийПользователь);
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостью()
	
	Элементы.ДляТабака.Видимость=Короба;
	Элементы.Обычная.Видимость=Не Короба;
	
КонецПроцедуры
	

Процедура ВидКМЗаполнить()
	видКМ=ТекущийПользователь.ВидКМ;
КонецПроцедуры


&НаКлиенте
Процедура ШтрихКодПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Если Элементы.Блоки.ТекущиеДанные=Неопределено Тогда
		Блок=Неопределено;
	Иначе
		Блок=Элементы.Блоки.ТекущиеДанные.Блок
	КонецЕсли;
	
	ДобавилиСтроку=Ложь;
	ЗаполнитьИнфуПоШтриху(Блок,ДобавилиСтроку);
	Если ДобавилиСтроку=Истина Тогда
		Элементы.Блоки.ТекущаяСтрока=Блоки[Блоки.Количество()-1].ПолучитьИдентификатор();
//		НаСервереМенемТекСтр();
	КонецЕсли;
	
	
	ПодключитьОбработчикОЖидания("аа",0.1,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура аа() Экспорт
	ШтрихКод="";
	ЭтаФорма.ТекущийЭлемент=Элементы.ШтрихКод;
КонецПроцедуры


Процедура ЗаполнитьИнфуПоШтриху(Знач Блок,ДобавилиСтроку)
	
	
	ШтрихКод_1=ШтрихКод;
	ШтрихКод=СтрЗаменить(ШтрихКод_1,Символ(29),"");
	
	//ШтрихКод=КодироватьСтроку(ШтрихКод,СпособКодированияСтроки.КодировкаURL);
	//штрихКод=СтрЗаменить(ШтрихКод,"%1D","");
	//ШтрихКод_1=РаскодироватьСтроку(ШтрихКод,СпособКодированияСтроки.КодировкаURL);
	ШтрихКод=Сред(ШтрихКод_1,1,38);
Если ТекущийПользователь.СайтыВходаВСистему.Наименование="Фото" Тогда
				ШтрихКод=Сред(ШтрихКод,1,38);
				ИначеЕсли Сред(ШтрихКод,32,3)<>"240" Тогда
		//Если Найти(штрихКод_1,Символ(29))=0 Тогда
				ШтрихКод=Сред(ШтрихКод,1,31);
		//Иначе
		//		ШтрихКод=Сред(штрихКод_1,1,Найти(штрихКод_1,"%1D")-1);
		//		ШтрихКод=РаскодироватьСтроку(ШтрихКод,СпособКодированияСтроки.КодировкаURL);
		//КонецЕсли;		
	КонецЕсли;
	
	Если Короба Тогда
		Если Сред(ШтрихКод,1,2)="04" Тогда
			ШтрихКод=Сред(ШтрихКод,1,21);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаКМ.НайтиСтроки(Новый Структура("Марка",ШтрихКод)).Количество()>0 
		ИЛИ Блоки.НайтиСтроки(Новый Структура("Блок",ШтрихКод)).Количество()>0 
		
		Тогда
		Сообщить("Данный CIS "+Штрихкод+" уже присутствует в документе");
		Возврат;
	КонецЕсли;
	
	Если Короба Тогда
		Если Сред(ШтрихКод,1,2)<>"00" Тогда
			ДобавБл=Блоки.Добавить();
			ДобавБл.Блок=ШтрихКод;
			ДобавилиСтроку=Истина;
		//	Элементы.Блоки.ТекущаяСтрока=ДобавБл;
			
		ИначеЕсли ЗначениеЗаполнено(Блок) Тогда
			Добав=ТаблицаКМ.Добавить();
			Добав.Марка=ШтрихКОд;
			Добав.Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту(
			"gtin",Число(Сред(ШтрихКод,1,14)));
			Добав.НомерБлока=Блок;
		Иначе
			Сообщить("Не выбран блок");
			
		КонецЕсли;
	ПодсчетИтогов();
		
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция КАК Продукция,
		|	СУММА(ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток - -ЕСТЬNULL(Резервы_ХамелеонЦРПТОстатки.КоличествоОстаток, 0)) КАК Остаток,
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер
		|ИЗ
		|	РегистрНакопления.ОстаткиКМ_в_Обороте_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Резервы_ХамелеонЦРПТ.Остатки(
		|				,
		|				Организация = &Организация
		|					И СерийныйНомер = &СерийныйНомер) КАК Резервы_ХамелеонЦРПТОстатки
		|		ПО ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер = Резервы_ХамелеонЦРПТОстатки.СерийныйНомер
		|			И ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Организация = Резервы_ХамелеонЦРПТОстатки.Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток,
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер
		|ИЗ
		|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток,
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.КоличествоОстаток,
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.СерийныйНомер
		|ИЗ
		|	РегистрНакопления.ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТ.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерийныйНомер = &СерийныйНомер) КАК ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.Продукция,
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.КоличествоОстаток,
		|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОстатки.СерийныйНомер
		|ИТОГИ
		|	СУММА(Остаток)
		|ПО
		|	Продукция";
	
	Запрос.УстановитьПараметр("Организация", ТекущийПользователь.Организация);
	Запрос.УстановитьПараметр("СерийныйНомер", ШтрихКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
	ДобавилиКМ=Ложь;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Если 		                   ВыборкаДетальныеЗаписи.Остаток<=0 Тогда
			Продолжить;
		КонецЕсли;
		Если ШтрихКод=ВыборкаДетальныеЗаписи.СерийныйНомер Тогда
			Добав=ТаблицаКМ.Добавить();
			Добав.Марка=ШтрихКод;
			Добав.Продукция=ВыборкаДетальныеЗаписи.Продукция;
			Добав.КМДлинный=КодироватьСтроку(ШтрихКод_1,СпособКодированияСтроки.КодировкаURL);
			ДобавилиКМ=Истина;
			
		Конецесли;
			
		
	КонецЦикла;
	
	Если ДобавилиКМ=Ложь И ПриЗаполненииОтгрузкиНеУчитыватьОстаток=Истина Тогда
			Добав=ТаблицаКМ.Добавить();
			Добав.Марка=ШтрихКод;
			Добав.КМДлинный=КодироватьСтроку(ШтрихКод_1,СпособКодированияСтроки.КодировкаURL);
			//Добав.Продукция=ВыборкаДетальныеЗаписи.Продукция;
			ДобавилиКМ=Истина;
		
		
		Конецесли;
		Если ДобавилиКМ=Ложь Тогда
			Сообщить("Не удалось добавить КМ "+ШтрихКод);
	Конецесли;	
	
	ПодсчетИтогов();
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры


&НаКлиенте
Процедура СоздатьИОТправитьВЦРПТ(Команда)
	// Вставить содержимое обработчика.
	СоздатьДокументШК=СоздатьДокументШКСервер();
	
	Если Короба Тогда
		Форм=ОткрытьФорму("Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Форма.ФормаДокумента"
		,Новый Структура("Ключ",СоздатьДокументШК));
	Иначе
	Форм=ПолучитЬФорму("Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Форма.ФормаДокумента"
	,Новый Структура("Ключ",СоздатьДокументШК));
	
		Форм.ОтправитьВЦРПТ(Команда);
		СформироватьСлучайныйКоробСервер();
	КонецЕсли;
	
	ТаблицаКМ.Очистить();
	ПодключитьОбработчикОЖидания("аа",0.1,Истина);
	
	
КонецПроцедуры

Процедура ПодсчетИтогов()
	ИтогВБЛоке=Блоки.Количество();
	ИтогВПачке=Таблицакм.Количество()
КонецПроцедуры

Функция СоздатьНомерКороба(Продукция,ДатаПр,Ссылка)
	Начнем="01";
	GTIN=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Продукция.GTINКороба,14,"0");
	Начнем=Начнем+GTIN+"11"+Формат(ДатаПр,"ДФ=""ггММдд""")+"21";
	
	НомерП=РегистрыСведений.СчетчикАгрегацииТабак_ХамелеонЦРПТ.Получить(Новый Структура("GTIN,ДатаФормирования,НомерЛинии",
	GTIN,НачалоДня(ДатаПр),Ссылка.ИдПроизводственногоЗаказа)).Счетчик;
	НомерП=НомерП+1;
	
	НомерЛинии=Сред(ОБработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Ссылка.ИдПроизводственногоЗаказа,1),"1" );
	
	РегДв=РегистрыСведений.СчетчикАгрегацииТабак_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	Регдв.Отбор.GTIN.Установить(GTIN);
	Регдв.Отбор.ДатаФормирования.Установить(НачалоДня(ДатаПр));
	
	Регдв.Отбор.НомерЛинии.Установить(НомерЛинии);
	Добав=РегДв.Добавить();
	Добав.GTIN=GTIN;
	Добав.ДатаФормирования=НачалоДня(ДатаПр);
	Добав.НомерЛинии=НомерЛинии;
	Добав.Счетчик=НомерП;
	Регдв.Записать(Истина);
	
	НачНем=Начнем+НомерЛинии+"RU"+Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(
	НомерП),4 ,"0");
	
	
//	Начнем=Начнем+Сред(СформироватьСлучайныйКоробСервер_1(),1,7);
	
	Возврат Начнем
	
КонецФункции


Функция СоздатьДокументШКСервер() Экспорт
	
	Если Короба Тогда

	Докум=Документы.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.СоздатьДокумент();
	Докум.Организация=ТекущийПользователь.Организация;
	Докум.ИдПроизводственногоЗаказа="1";
	Докум.ТекущийПользователь=ТекущийПользователь;
	Докум.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.Формирование;
	Докум.Дата=ТекущаяДата();
	Докум.ЧерезСУЗ=Истина;
	Докум.СтатусКМ=Перечисления.СтатусыКМДляАгрегации_ХамелеонЦРПТ.КМВОбороте;
	Докум.НомерКороба=СоздатьНомерКороба(ТаблицаКМ[0].Продукция,Докум.Дата,Докум);
	
	Для Каждого Стр_1 Из ТаблицаКМ Цикл
		Добав=Докум.Марки.Добавить();
		Добав.Марка=Стр_1.Марка;
		Добав.Продукция=Стр_1.Продукция;
		Добав.НомерБокса=Стр_1.НомерБлока;
		
		Если Докум.НомераБлоков.Найти(Стр_1.НомерБлока,"НомерБлока")=Неопределено
			Тогда
			Добав_1=Докум.НомераБлоков.Добавить();
			Добав_1.НомерБлока=Стр_1.НомерБлока;
		КонецЕсли;
		
	КонецЦикла;
	Докум.Записать();
		
	Иначе
	
	Докум=Документы.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.СоздатьДокумент();
	Докум.Организация=ТекущийПользователь.Организация;
	Докум.ТекущийПользователь=ТекущийПользователь;
	Докум.ЧерезСУЗ=Истина;
	Докум.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.Формирование;
	Докум.СтатусКМ=ВидКМ;
	Докум.Дата=ТекущаяДата();
	
	Для Каждого Стр_1 Из ТаблицаКМ Цикл
		Добав=Докум.Марки.Добавить();
		Добав.Марка=Стр_1.Марка;
		Добав.Продукция=Стр_1.Продукция;
	КонецЦикла;
	Докум.Записать();
	КонецЕсли;
	Возврат Докум.Ссылка;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СформироватьСлучайныйКоробСервер();
	ПриЗаполненииОтгрузкиНеУчитыватьОстаток=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ПриЗаполненииОтгрузкиНеУчитыватьОстаток;
	ОбновитьВнешниеКнопки();
	
КонецПроцедуры

Процедура ОбновитьВнешниеКнопки()
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнешниеОбработки_ХамелеонЦРПТ.ИмяВнешнейОБработки,
		|	ВнешниеОбработки_ХамелеонЦРПТ.НаименованиеКнопки,
		|	ВнешниеОбработки_ХамелеонЦРПТ.Код
		|ИЗ
		|	Справочник.ВнешниеОбработки_ХамелеонЦРПТ КАК ВнешниеОбработки_ХамелеонЦРПТ
		|ГДЕ
		|	ВнешниеОбработки_ХамелеонЦРПТ.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", "РМК агрегации");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ИмяКоманды="Команда"+ВыборкаДетальныеЗаписи.Код;
		Попытка
		КомандаФормы = Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуВнешняя";
		КомандаФормы.Заголовок = ВыборкаДетальныеЗаписи.ИмяВнешнейОБработки;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.Текст;
		
		//ОписаниеКомандыПечати.ИмяКомандыНаФорме = ИмяКоманды;
		
		НовыйЭлемент = Элементы.Добавить("ГруппаКнопокВнешняя" + ИмяКоманды, Тип("КнопкаФормы"), Элементы.ГруппаКнопокВнешняя);
		НовыйЭлемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		НовыйЭлемент.Заголовок=ВыборкаДетальныеЗаписи.НаименованиеКнопки;
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	Исключение
		КонецПопытки;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
КонецПроцедуры


Функция ПолучитьИмяВнешней(ИмяФайла)
    АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ИмяФайла);
    ИмяОбр = ВнешниеОбработки.Подключить(АдресВоВременномХранилище,,Ложь);
    Возврат ИмяОбр;
КонецФункции


&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуВнешняя(Команда)
	
	// Вставить содержимое обработчика.	// Вставить содержимое обработчика.
	Попытка
		ДвоичныеДанные=Новый ДвоичныеДанные(ВернутьИмяФайла(Команда.Имя));
		ОбработкаИмя=ПолучитьИмяВнешней(Двоичныеданные);
		ОткрытьФорму("ВнешняяОбработка."+ОбработкаИмя+".Форма",,ЭтаФорма);
	Исключение
			Попытка
#Если ТолстыйКлиентОбычноеПриложение  Тогда
				ВернутьВн(ВернутьИмяФайла(Команда.Имя));
#Иначе
				
			ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
#КонецЕсли
			Исключение
				ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
			КонецПопытки;
		//	
	//	
	КонецПопытки;

	//УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


#Если ТолстыйКлиентОбычноеПриложение  Тогда
&НаКлиенте
Процедура ВернутьВн(ДвоичныеДанные)
	//ИмяВременФ=ПолучитьИмяВременногоФайла();
	//ДвоичныеДанные.Записать(ИмяВременФ);
	ВнешняяОбработка=ВнешниеОбработки.Создать(ДвоичныеДанные);
	Фоорма=ВнешняяОбработка.ПолучитьФорму(,ЭтаФорма);
	Попытка
		Фоорма.УФ=ЭтаФорма;
	Исключение
	КонецПопытки;
	Фоорма.Открыть();
Конецпроцедуры      	
#КонецЕсли


Процедура ЗаписатьИмяФайлаВнешняяобработка(ИмяФайла)
	
	НаимСправочника=Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя();
	Спр=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоНаименованию(НаимСправочника,Истина);
	Если Спр<>Справочники.ВнешниеОбработки_ХамелеонЦРПТ.ПустаяСсылка() Тогда
		Спр=Спр.ПолучитьОбъект();
	Иначе
		
		Спр=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.СоздатьЭлемент();
		
	Конецесли;
	Спр.Наименование=НаимСправочника;
	Спр.ИмяВнешнейОБработки=ИмяФайла;
	Спр.Записать();;
КонецПроцедуры


Функция ВернутьИмяФайла(Команда)
	СпрВн=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоКоду(Сред(Команда,8));
	
	Возврат СпрВн.ИмяВнешнейОБработки
	//НаимСправочника=Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя();
	//Спр=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоНаименованию(НаимСправочника,Истина);
	//Если Спр<>Справочники.ВнешниеОбработки_ХамелеонЦРПТ.ПустаяСсылка() Тогда
	//	Возврат Спр.ИмяВнешнейОБработки;
	//Конецесли;
	
КонецФункции




Процедура СформироватьСлучайныйКоробСервер()
	УникУр=xmlString(Новый УникальныйИдентификатор());
	УникУр=СтрЗаменить(УникУр,"-","");
	НомерКороба="";
	Для Сч=1 По 36 Цикл
		Симв=Сред(УникУр,Сч,1);
		Если Не ЗначениеЗаполнено(Симв) Тогда
			Прервать;
		КонецЕсли;
		Если Найти("01234567890",Симв)>0 Тогда
			НомерКороба=НомерКороба+Симв;
			Если СтрДлина(НомерКороба)>=18 Тогда
				Прервать;
			Конецесли;
		КонецЕсли;
		
	Конеццикла;
	Если СтрДлина(НомерКороба)<18 Тогда
		Для Сч=1 По 36 Цикл
			
			Симв=Сред(УникУр,Сч,1);
			Если Симв="a" Тогда
				НомерКороба=НомерКороба+"1";
			ИначеЕсли Симв="b" Тогда
				НомерКороба=НомерКороба+"3";
			ИначеЕсли Симв="c" Тогда
				НомерКороба=НомерКороба+"5";
			ИначеЕсли Симв="d" Тогда
				НомерКороба=НомерКороба+"7";
			ИначеЕсли Симв="e" Тогда
				НомерКороба=НомерКороба+"9";
			ИначеЕсли Симв="f" Тогда
				НомерКороба=НомерКороба+"0";
			КонецЕсли;
			
			Если СтрДлина(НомерКороба)>=18 Тогда
				Прервать;
			КонецЕсли;
		Конеццикла;
		
		
	КонецЕсли;
	
	НомерКороба="00"+Сред(НомерКороба,3);
	
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьСтатусы(Команда)
	// Вставить содержимое обработчика.
	
	
	Thumbprint_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(ТекущийПользователь);	
	
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
							СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
									СерийныйНомер=СтруктураНастроек.СерийныйНомер;
							
								Если Не ЗначениеЗаполнено(СРегистра) Тогда
									СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
								Иначе
								   
										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
											Прокси=Новый ИнтернетПрокси;
											Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										Иначе
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										КонецЕсли;
										
										HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
										HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
										HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
										//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
										///Константин           
										Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
										//Текст1=Ответ.ПолучитьТелоКакСтроку();
										Если Ответ.КодСостояния<>200 Тогда
											СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
										КонецЕсли;
											
								КонецЕсли;
	ПроверятьВсе=Истина;
	Если ПроверятьВсе<>Ложь Тогда
	
	
	
	
	
	
		    СтатусКороба=Неопределено;
	   НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	
	   Если НаСервере Тогда
		 Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,НомерКороба);  
		Иначе
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			Если Thumbprint_1.НаименованиеСтенда="Табак"
				                                        ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
				Тогда
	
		NN=ВернутьТелоЗапросаПодключение(НомерКороба);
						
	
			HTTPЗапрос=Новый HTTPЗапрос("private-office-api/private/v2/cis/status");
			//private-office-api/private/v2/cis/"+КодМаркировки+"/mrp"
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин   
			HTTPЗапрос.УстановитьТелоИзСтроки(NN,КодировкаТекста.UTF8);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Иначе
	ММ= НомерКороба;
			
			
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ));
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
КонецЕсли;
КонецЕсли;

		Если НаСервере Тогда
			Текст1=Ответ.ПолучитьТелоКакСтроку;
			
		Иначе
			Текст1=Ответ.ПолучитьТелоКакСтроку();
		КонецЕсли;	
		
		Если Thumbprint_1.НаименованиеСтенда="Табак"
			ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
			Тогда
		
			Попытка
		//ЧтениеJSON = Новый ЧтениеJSON;
		//	ЧтениеJSON.УстановитьСтроку(Текст1);
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			СтатусКороба=NNN[0].status;
			
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Сообщить(Текст1);
			КонецПопытки;
	
Иначе
//ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(Текст1);
Попытка
	Если Ответ.КодСостояния=200 Тогда
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
	СтатусКороба=NNN.status;
		Иначе
		
		СтатусКороба=Ответ.КодСостояния;
		 Сообщить(Текст1);
	КонецЕсли;
	

	
Исключение
	Сообщить(ОписаниеОшибки());
	Сообщить(Текст1);
КонецПопытки;
КонецЕсли;

		КонецЕсли;
	
	
	Для каждого Стр_1 Из ТаблицаКМ Цикл
		    Стр_1.Статус=Неопределено;
	   НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	
	   Если НаСервере Тогда
		 Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Стр_1.Марка);  
		Иначе
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			Если Thumbprint_1.НаименованиеСтенда="Табак" 
				ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак" 
				Тогда
	
		NN=ВернутьТелоЗапросаПодключение(Стр_1.марка);
						
	
			HTTPЗапрос=Новый HTTPЗапрос("private-office-api/private/v2/cis/status");
			//private-office-api/private/v2/cis/"+КодМаркировки+"/mrp"
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин   
			HTTPЗапрос.УстановитьТелоИзСтроки(NN,КодировкаТекста.UTF8);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Иначе
			
			
			
	ММ= Стр_1.Марка;
			
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ));
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
КонецЕсли;
КонецЕсли;

		Если НаСервере Тогда
			Текст1=Ответ.ПолучитьТелоКакСтроку;
			
		Иначе
			Текст1=Ответ.ПолучитьТелоКакСтроку();
		КонецЕсли;	
		
		Если Thumbprint_1.НаименованиеСтенда="Табак"
			                                        ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
			Тогда
		
			Попытка
		//ЧтениеJSON = Новый ЧтениеJSON;
		//	ЧтениеJSON.УстановитьСтроку(Текст1);
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Стр_1.Статус=NNN[0].status;
			
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Сообщить(Текст1);
			КонецПопытки;
	
Иначе
//ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(Текст1);
Попытка
	Если Ответ.КодСостояния=200 Тогда
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
	Стр_1.Статус=NNN.status;
		Иначе
		
					Стр_1.Статус=Ответ.КодСостояния;
					Если   Ответ.КодСостояния=404 Тогда
						Стр_1.Статус=Стр_1.Статус+" не найдено в базе"
				КонецЕсли;
		 Сообщить(Текст1);
	КонецЕсли;
	

	
Исключение
	Сообщить(ОписаниеОшибки());
	Сообщить(Текст1);
КонецПопытки;
КонецЕсли;



	Конеццикла;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьТелоЗапросаПодключение(cis)
	МассивКодо=Новый Массив;
	          МассивКодо.Добавить(cis);
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("ids", МассивКодо);
			ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, "  ");
			
			ЗаписьJSON = Новый ЗаписьJSON();
			ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
			
			ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
			
			Возврат ЗаписьJSON.Закрыть();

КонецФункции


&НаКлиенте
Процедура ПоказатьИнформациюКМ(Команда)
	// Вставить содержимое обработчика.
	
	ЭтаФорма.Записать();
	МассивCis=Новый Массив;
	ДеревоКМ.ПолучитьЭлементы().Очистить();
	МассивCis.Добавить(НомерКороба);
	Для Каждого Стр_ иЗ ТаблицаКМ Цикл
		МассивCis.Добавить(Стр_.Марка);
	Конеццикла;
	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюПоКМ_Массив(ДеревоКМ,МассивCis,Объект.ТекущийПользователь);
	
	
	//ПодсчетИтоговПоКМ();
	
	Элементы.Страницы.ТекущаяСтраница=Элементы.ИнформацияОКМ;
	
	
	//СохранитьДеревоНаСервере();
	
КонецПроцедуры

Процедура СохранитьДеревоНаСервере()
	РегДв=РегистрыСведений.СохранитьДеревоИнформациюОНомерахКМВводВОборот_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.ВводВОборот.Установить(Объект.Ссылка);
	Добав=РегДв.Добавить();
	Добав.ВводВОборот=Объект.Ссылка;
	
	ТаблицаВыгрузки=Новый ДеревоЗначений;
	ТаблицаВыгрузки.Колонки.Добавить("Уровень");
	ТаблицаВыгрузки.Колонки.Добавить("НомерКороба");
	ТаблицаВыгрузки.Колонки.Добавить("НомерКМ");
	ТаблицаВыгрузки.Колонки.Добавить("Продукция");
	ТаблицаВыгрузки.Колонки.Добавить("Количество");
	ТаблицаВыгрузки.Колонки.Добавить("cis");
	ТаблицаВыгрузки.Колонки.Добавить("Статус");
	ТаблицаВыгрузки.Колонки.Добавить("Вспомогательный");
	
	Сч=0;
	Для Каждого Стр_1 Из ДеревоКМ.ПолучитьЭлементы() Цикл
		Добав_Т=ТаблицаВыгрузки.Строки.Добавить();
		РекурсияПоДереву(Добав_Т,Сч,Стр_1);
	Конеццикла;
	
	
	Добав.Хранилище=Новый ХранилищеЗначения(ТаблицаВыгрузки);
	РегДв.Записать(Истина);
КонецПроцедуры

Процедура РекурсияПоДереву(Добав,Знач Сч,Стр_1)
	//Добав=ТаблицаВыгрузки.Добавить();
	ЗаполнитьЗначенияСвойств(Добав,Стр_1);
	Добав.Уровень=Сч;
	Сч=Сч+1;
	Для Каждого Стр_2 Из Стр_1.ПолучитьЭлементы() Цикл
		Добав_22=Добав.Строки.Добавить();
		РекурсияПоДереву(Добав_22,Сч,Стр_2);
	Конеццикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Короба_ПолеПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	УправлениеВидимостью();	
КонецПроцедуры

&НаКлиенте
Процедура ШтрихКодАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если СТрДлина(Текст)>=18  Тогда
		       СтандартнаяОбработка=Ложь;
			   ШтрихКод=Текст;
	Если Элементы.Блоки.ТекущиеДанные=Неопределено Тогда
		Блок=Неопределено;
	Иначе
		Блок=Элементы.Блоки.ТекущиеДанные.Блок
	КонецЕсли;
	ДобавилиСтроку=Ложь;
	ЗаполнитьИнфуПоШтриху(Блок,ДобавилиСтроку);
	Если ДобавилиСтроку=Истина Тогда
		Элементы.Блоки.ТекущаяСтрока=Блоки[Блоки.Количество()-1].ПолучитьИдентификатор();
	КонецЕсли;
	ПодключитьОбработчикОЖидания("аа",0.1,Истина);
		
	КонецЕсли;
КонецПроцедуры

Процедура НаСервереМенемТекСтр()
		Элементы.Блоки.ТекущаяСтрока=Блоки[Блоки.Количество()-1];
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКМПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	// Вставить содержимое обработчика.
	ПодсчетИтогов()
КонецПроцедуры

&НаКлиенте
Процедура БлокиПриИзменении(Элемент)
	
ПодсчетИтогов()	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКМ_ТабакПриИзменении(Элемент)
	// Вставить содержимое обработчика.
ПодсчетИтогов()	
КонецПроцедуры


Процедура ДобавитьcisВдокумент(СканироватьМарку,Блок,ДобавилиСтроку)
	ШтрихКод=СканироватьМарку;
	//Если Элементы.Блоки.ТекущиеДанные=Неопределено Тогда
	//	Блок=Неопределено;
	//Иначе
	//	Блок=Элементы.Блоки.ТекущиеДанные.Блок
	//КонецЕсли;
	
	ДобавилиСтроку=Ложь;
	ЗаполнитьИнфуПоШтриху(Блок,ДобавилиСтроку);

КонецПроцедуры
&НаКлиенте
Процедура ЗагрузитьИз(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
		// Вставить содержимое обработчика.
		
	//	Перем Файл;
		
	Если Элементы.Блоки.ТекущиеДанные=Неопределено Тогда
		Блок=Неопределено;
	Иначе
		Блок=Элементы.Блоки.ТекущиеДанные.Блок
	КонецЕсли;
	
	МассивКМ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ВернутьКМИзФайлов();

		Для Каждого ШтрихОбраб Из МассивКМ Цикл
				//ШтрихОбраб=ТекстовыйД.ПолучитьСтроку(Сч);
			
					ШтрихКод68=ШтрихОбраб;
					
					шТРИХкОД=ШтрихКод68;
						СканироватьМарку=шТРИХкОД;
		СканироватьМарку=СтрЗаменить(СканироватьМарку,Символ(29),"");
						//ДобавитьcisВдокумент(СканироватьМарку);

		ДобавимСтроку=Ложь;
						ДобавитьcisВдокумент(СканироватьМарку,Блок,ДобавимСтроку);
							Если ДобавимСтроку=Истина Тогда
								Элементы.Блоки.ТекущаяСтрока=Блоки[Блоки.Количество()-1].ПолучитьИдентификатор();
						//		НаСервереМенемТекСтр();
							КонецЕсли;
				
		КонецЦикла;
		
	ПодключитьОбработчикОЖидания("аа",0.1,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьВнешнююОбработку(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	ОткрытьФорму("Справочник.ВнешниеОбработки_ХамелеонЦРПТ.Форма.ФормаСписка",
	Новый структура("Тип",
		"РМК агрегации"))
	
КонецПроцедуры
