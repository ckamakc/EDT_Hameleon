&AtClient                                 
Var Request;

&НаКлиенте
Перем HTTPСервисЗапрос Экспорт;
&НаКлиенте
Перем Кэш_Т;


Процедура ОбновитьСтатусДокументаСБ(Стр,ТТТ_Ответ)
	СтатусДокумента=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ВернутьСтатусДокументаСБ(ТТТ_Ответ.result.Состояние.Код);
	Если Стр.Ссылка.статусУПД<>СтатусДокумента Тогда
		
		Полоб=Стр.Ссылка.ПолучитьОбъект();
				Полоб.СтатусУПД=СтатусДокумента;
									Если ЗначениеЗаполнено(ТТТ_Ответ.result.Состояние.Примечание) Тогда
						ПолОб.ОшибкаОтправки=
ТТТ_Ответ.result.Состояние.Примечание;					
Иначе
						ПолОб.ОшибкаОтправки=
ТТТ_Ответ.result.Состояние.Название;					

					КонецЕсли;

				Если ПолОб.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан
					ИЛИ ПолОб.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Уточнён Тогда
					Полоб.Записать(РежимЗаписиДокумента.Проведение);
				ИначеЕсли ПолОб.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отклонен
					ИЛИ ПолОб.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отозван
					Тогда
					Если Полоб.Проведен Тогда
						Полоб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Иначе
						Полоб.Записать();
					КонецЕсли;	
				Иначе
					Полоб.Записать();
				КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры


Функция МассивПрод(Ссылка)
	
	МассивПр=Новый Массив;
	Если Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
		ИЛИ Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ЧастичноПринят тогда
		Для Каждого Стр Из Ссылка.Товары Цикл
			
			Попытка
				
				Если Число(Стр.GTIN.GTIN)=Число(Стр.GTIN.Наименование) Тогда
					
					МассивПр.Добавить(Стр.GTIN);
					
				КонецЕсли;
				
			Исключение
			КонецПопытки;
			
		Конеццикла;
		
		
	КонецЕслИ;
	
	Возврат МассивПр
КонецФункции

&НаКлиенте
Процедура ОбновитьИнформациюОПродукции(Ссылка)
	ВернутьМассивСтрок=МассивПрод(Ссылка);
	Для Каждого Стр Из ВернутьМассивСтрок Цикл
				Форм=ПолучитьФорму("Справочник.Продукция_ХамелеонЦРПТ.Форма.ФормаЭлемента", Новый Структура("Ключ",Стр));
		Форм.ОбновитьПродукциюПоКМ(Ссылка)
Конеццикла;
	
КонецПроцедуры


Процедура ПерезаписатьПользователей_Шаблон()
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Пользователи_ХамелеонЦРПТ КАК Пользователи_ХамелеонЦРПТ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Попытка
		Польз=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Если Не Значениезаполнено(Польз.ШаблонКМПоУмолчанию)
			ИЛИ Не Значениезаполнено(Польз.ШаблонКМТабакПоУмолчанию)
			Тогда
		Польз.Записать();
		КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
Конецпроцедуры

Процедура ОбновитьСправочникиШаблоновPDF()
	
	Текст=Справочники.ШаблоныЭтикетокПриПечатиPDF_ХамелеонЦРПТ.ПолучитьМакет("МакетПриВыбореПечатиPDF");
	Чтение=Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Текст.ПолучитьТекст());
	
	Пока Чтение.Прочитать() Цикл
		Если Чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента
			И Чтение.ЛокальноеИмя="option" Тогда
			Код=Чтение.ПолучитьАтрибут("value");
			Чтение.Прочитать();
			Наименование=Чтение.Значение;
			СпрШ=Справочники.ШаблоныЭтикетокПриПечатиPDF_ХамелеонЦРПТ.НайтиПоКоду(Код);
			Если спрШ=Справочники.ШаблоныЭтикетокПриПечатиPDF_ХамелеонЦРПТ.ПустаяСсылка() Тогда
				СпрП=Справочники.ШаблоныЭтикетокПриПечатиPDF_ХамелеонЦРПТ.СоздатьЭлемент();
				СпрП.Код=Код;
			Иначе
				СпрП=СпрШ.ПолучитьОбъект();
			КонецЕсли;
			СпрП.Наименование=Наименование;
			СпрП.Записать();
			
		КонецЕсли;
	Конеццикла;
	
КонецПроцедуры

Процедура ОбновлятьРегламенты()
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=0 Тогда
		
		Константы.Регламент_ХамелеонЦРПТ.Установить(1);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=1 Тогда
		
		Константы.Регламент_ХамелеонЦРПТ.Установить(2);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=2 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(3);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=3 Тогда
		ОбновитьСправочникиШаблоновPDF();
		Константы.Регламент_ХамелеонЦРПТ.Установить(4);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=4 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(5);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=5 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(6);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=6 Тогда
		ЗаполнитьСправочникаКодовРешения();
		Константы.Регламент_ХамелеонЦРПТ.Установить(7);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=7 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(8);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=8 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(9);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=9 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(10);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=10 Тогда
		ОбновитьРежимРаботыПользователя();
		Константы.Регламент_ХамелеонЦРПТ.Установить(11);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=11 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(12);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=12 Тогда
		ТаймаутОжиданияПослеПлученияКМ=5;
		ТаймаутОжиданияПослеПлученияКМПриИзмененииНаСервере(ТаймаутОжиданияПослеПлученияКМ);
		ТаймаутОжиданияОтСайта=60;
		ТаймаутОжиданияОтСайтаПриИзмененииНаСервере(ТаймаутОжиданияОтСайта);
		Константы.Регламент_ХамелеонЦРПТ.Установить(13);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=13 Тогда
		ПерезаписатьЗаявки();
		Константы.Регламент_ХамелеонЦРПТ.Установить(14);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=14 Тогда
		ПерезаписатьВводВВоборрот();
		Константы.Регламент_ХамелеонЦРПТ.Установить(15);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=15 Тогда
		ТаймаутОжиданияОтСайта=300;
		ТаймаутОжиданияОтСайтаПриИзмененииНаСервере(ТаймаутОжиданияОтСайта);
		Константы.Регламент_ХамелеонЦРПТ.Установить(16);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=16 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(17);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=17 Тогда
		ОБновитьШаблоныЭтикеток();
		Константы.Регламент_ХамелеонЦРПТ.Установить(18);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=18 Тогда
		ОБновитьШаблоныЭтикетокВПОльзователе();
		Константы.Регламент_ХамелеонЦРПТ.Установить(19);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()>=19
		И Константы.Регламент_ХамелеонЦРПТ.Получить()<=28 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(29);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=29 Тогда
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ДобавитьПрефиксДляGS1=Истина;
	РегДв.Записать(Истина);
	ДобавитьПрефиксДляGS1=Истина;
		Константы.Регламент_ХамелеонЦРПТ.Установить(30);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=30 Тогда
		ПерезаписатьПользователей();
		
		Константы.Регламент_ХамелеонЦРПТ.Установить(31);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=31 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(32);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=32 Тогда
		УбратьФлэшК();
		Константы.Регламент_ХамелеонЦРПТ.Установить(33);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=33 Тогда
		ЗаполнитьСправочникаПолов();
		Константы.Регламент_ХамелеонЦРПТ.Установить(34);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=34 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(35);
	КонецЕсли;
	
		
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=35 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(36);
	КонецЕсли;
	
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=36 Тогда
		
		ПерезаписатьПользователей_Шаблон();
		
		Константы.Регламент_ХамелеонЦРПТ.Установить(37);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=37 Тогда
		
		ЗаписыватьДанныеПриОтправкеЗаказа=Истина;
		ЗаписыватьОтправкуИОтветыПриИзмененииНаСервере(ЗаписыватьДанныеПриОтправкеЗаказа);
		Константы.Регламент_ХамелеонЦРПТ.Установить(38);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=38 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(39);
	КонецЕсли;
	
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=39 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(40);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=40 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(41);
	КонецЕсли;

	Если Константы.Регламент_ХамелеонЦРПТ.Получить ()=41 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(42);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить ()=42 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(43);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить ()=43 Тогда
		ПриПроверкеСхемыПриОтгрузкеЕслиОшибкаНеФормироватьФайл=Истина;
		ПриПроверкеСхемыПриОтгрузкеЕслиОшибкаНеФормироватьФайлПриИзмененииНаСервере();
		Константы.Регламент_ХамелеонЦРПТ.Установить(44);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить ()=44 Тогда
		ЗаполнитьВидКМ();
		Константы.Регламент_ХамелеонЦРПТ.Установить(45);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить ()=45 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(46);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить ()=46 Тогда
		ОбновитьСуммаПринятПриемка();
		Константы.Регламент_ХамелеонЦРПТ.Установить(47);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить ()=47 Тогда
		ОтправлятьОбувьЧерезAPI=Истина;
		ОтправлятьОбувьЧерезAPIПриИзмененииНаСервере();
		Константы.Регламент_ХамелеонЦРПТ.Установить(48);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить ()=48 Тогда
		//ОбновитьВыгрузкуДляОтгрузки();
		Константы.Регламент_ХамелеонЦРПТ.Установить(49);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить ()=49 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(50);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить ()=50 Тогда
		ОбновитьВыгрузкуДляОтгрузки();
		Константы.Регламент_ХамелеонЦРПТ.Установить(51);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить ()=51 Тогда
		ПодключатьсяАвтоматическиПоЦРПТ=Истина;
		ЗагрузатьНаименованиеПриПриемке=Истина;
		Поле1ПриИзмененииНаСервере();
		ЗагрузатьНаименованиеПриПриемкеПриИзмененииНаСервере();
		Константы.Регламент_ХамелеонЦРПТ.Установить(52);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=52 Тогда
		
		Константы.Регламент_ХамелеонЦРПТ.Установить(53);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=53 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(54);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=54 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(55);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=55 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(56);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=56 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(57);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=57 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(58);
	КонецЕсли;
		
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=58 Тогда
		ОбновитьСтрануВПользователе();
		Константы.Регламент_ХамелеонЦРПТ.Установить(59);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=59 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(60);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=60 Тогда
		ФормироватьАгрегациюПоGTIN=Истина;
		ФормироватьАгрегациюПоGTINПриИзмененииНаСервере();		
		Константы.Регламент_ХамелеонЦРПТ.Установить(61);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=61 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(62);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=62 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(63);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=63 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(64);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=64 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(65);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=65 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(66);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=66 Тогда
		Справочники.ОписаниеРегламентныхЗаданий_ХамелеонЦРПТ.ОбновитьПредопределенныеРегламент();
		Константы.Регламент_ХамелеонЦРПТ.Установить(67);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=67 Тогда
		НеЭмитировать=Истина;
		НеЭмитироватьПриИзмененииНаСервере();
		Константы.Регламент_ХамелеонЦРПТ.Установить(68);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=68 Тогда
		ОбновитьСправочники_Видсертификатов();
		Константы.Регламент_ХамелеонЦРПТ.Установить(69);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=69 Тогда
		ОбновитьОсновнуюЕдиницуИзмерения();
		Константы.Регламент_ХамелеонЦРПТ.Установить(70);
	КонецЕсли;

	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=70 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(71);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=71 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(72);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=72 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(73);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=73 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(74);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=74 Тогда
		ИспользоватьСайтGS1ПоМаркировке=Истина;
		ИспользоватьСайтGS1ПоМаркировкеПриИзмененииНаСервере();
		Константы.Регламент_ХамелеонЦРПТ.Установить(75);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=75 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(76);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=76 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(77);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=77 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(78);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=78 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(79);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=79 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(80);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=80 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(81);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=81 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(82);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=82 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(83);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=83 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(84);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=84 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(85);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=85 Тогда
		УдалитьСРегистраПриемка();
		Константы.Регламент_ХамелеонЦРПТ.Установить(86);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=86 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(87);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=87 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(88);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=88 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(89);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=89 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(90);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=90 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(91);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=91 Тогда
		ЗаполнитьИДЭДО();
		Константы.Регламент_ХамелеонЦРПТ.Установить(92);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=92 Тогда	
		Константы.Регламент_ХамелеонЦРПТ.Установить(93);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=93 Тогда	
		КоличествоКМВЗаказеОтображаемое=10000;
		КоличествоКМВЗаказеОтображаемоеПриИзмененииНаСервере();
		Константы.Регламент_ХамелеонЦРПТ.Установить(94);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=94 Тогда	
		ОбновитьПриходПоМаркам();
		Константы.Регламент_ХамелеонЦРПТ.Установить(95);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=95 Тогда
		Справочники.ОписаниеРегламентныхЗаданий_ХамелеонЦРПТ.ОбновлениеЗагрузкиЧековЗаВчера();
		Константы.Регламент_ХамелеонЦРПТ.Установить(96);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=96 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(97);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=97 Тогда
		ОбновитьСправочникиТНВЭД();
		Константы.Регламент_ХамелеонЦРПТ.Установить(98);
	КонецЕсли;

	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=98 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(99);
	КонецЕсли;
	
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=99 Тогда
		Справочники.ОписаниеРегламентныхЗаданий_ХамелеонЦРПТ.ОбновлениеСтатусовВсехПользователей();
		Константы.Регламент_ХамелеонЦРПТ.Установить(100);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=100 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(101);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=101 Тогда
		Справочники.ОписаниеРегламентныхЗаданий_ХамелеонЦРПТ.ПринятьВсеПриходы();
		Константы.Регламент_ХамелеонЦРПТ.Установить(102);
	КонецЕсли;
	
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=102 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(103);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=103 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(104);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=104 Тогда
		Справочники.ОписаниеРегламентныхЗаданий_ХамелеонЦРПТ.ОбновитьСтатусыВсехПоСервере();
		Константы.Регламент_ХамелеонЦРПТ.Установить(105);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=105 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(106);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=106 Тогда
		ПровестиВозвратДистационный();
		Константы.Регламент_ХамелеонЦРПТ.Установить(107);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=107 Тогда
		ИсправитьИсправлениеНаТип();
		Константы.Регламент_ХамелеонЦРПТ.Установить(108);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=108 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(109);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=109 Тогда
		Справочники.ОписаниеРегламентныхЗаданий_ХамелеонЦРПТ.СоздатьАгрегацииИОтправитьВЦРПТ();
		Константы.Регламент_ХамелеонЦРПТ.Установить(110);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=110 Тогда
		КачатьСЭДОЗаПоследниеДни=15;
		КачатьСЭДОЗаПоследниеДниПриИзмененииНаСервере();
		Константы.Регламент_ХамелеонЦРПТ.Установить(111);
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=111 Тогда
		// ++ Кириченко 28.09.2020
		Справочники.ОписаниеРегламентныхЗаданий_ХамелеонЦРПТ.МВ_АвтоматическаяОтправкаЦРПТ();
		// -- Кириченко		
		Константы.Регламент_ХамелеонЦРПТ.Установить(112); 
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=112 Тогда
		ОбновитьВсеРегламенты();
		Константы.Регламент_ХамелеонЦРПТ.Установить(113);
	Конецесли;	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=113 Тогда
		Константы.Регламент_ХамелеонЦРПТ.Установить(114);
	Конецесли;	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=114 Тогда
		Справочники.ОписаниеРегламентныхЗаданий_ХамелеонЦРПТ.ОтправитьАгрегацииИОбновитьСтатусы();
		Константы.Регламент_ХамелеонЦРПТ.Установить(115);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=115 Тогда
		Обновитьстраны();
		Константы.Регламент_ХамелеонЦРПТ.Установить(116);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=116 Тогда
		
		ОбновитьСправочники();
		Константы.Регламент_ХамелеонЦРПТ.Установить(117);
				
	КонецЕсли;

			
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=117 Тогда
			
				//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			// Данный фрагмент построен конструктором.
			// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Организации_ХамелеонЦРПТ.Ссылка
				|ИЗ
				|	Справочник.Организации_ХамелеонЦРПТ КАК Организации_ХамелеонЦРПТ
				|ГДЕ
				|	НЕ Организации_ХамелеонЦРПТ.СУЗПоНовомуДинамическийТокен";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				// Вставить обработку выборки ВыборкаДетальныеЗаписи
				ПолОб=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				ПолОб.СУЗПоНовомуДинамическийТокен=Истина;
				ПолОб.Записать();
			КонецЦикла;
			
			//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

			
			Константы.Регламент_ХамелеонЦРПТ.Установить(118);
	КонецЕсли;
	
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=118 Тогда
		
		ОбновитьСправочники();
		Константы.Регламент_ХамелеонЦРПТ.Установить(119);
				
	КонецЕсли;
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=119 Тогда
		
		Константы.Регламент_ХамелеонЦРПТ.Установить(120);
				
	КонецЕсли;

	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=120 Тогда
		
		ОбрезатьКМДляТабака=Истина;
		ОбрезатьКМДляТабакаПриИзмененииНаСервере();
		Константы.Регламент_ХамелеонЦРПТ.Установить(121);
				
	КонецЕсли;
	
			
	Если Константы.Регламент_ХамелеонЦРПТ.Получить()=121 Тогда
		
		ОбрезатьКМДляТабака=Истина;
		ЗаполнитьСправочникВходовВСисетму();
		Константы.Регламент_ХамелеонЦРПТ.Установить(122);
				
	КонецЕсли;
			
КонецПроцедуры

Процедура ОбновитьВсеРегламенты()
	Справочники.ОписаниеРегламентныхЗаданий_ХамелеонЦРПТ.ОбновлениеСтатусов();
	Справочники.ОписаниеРегламентныхЗаданий_ХамелеонЦРПТ.ОбновлениеЗагрузкиЧековЗаВчера();
	Справочники.ОписаниеРегламентныхЗаданий_ХамелеонЦРПТ.ОбновлениеПриемки();
	Справочники.ОписаниеРегламентныхЗаданий_ХамелеонЦРПТ.ОбновлениеСтатусовВсехПользователей();
	Справочники.ОписаниеРегламентныхЗаданий_ХамелеонЦРПТ.ПринятьВсеПриходы();
	Справочники.ОписаниеРегламентныхЗаданий_ХамелеонЦРПТ.ОбновитьСтатусыВсехПоСервере();
	Справочники.ОписаниеРегламентныхЗаданий_ХамелеонЦРПТ.СоздатьАгрегацииИОтправитьВЦРПТ();
	
КонецПроцедуры

Процедура ИсправитьИсправлениеНаТип()
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Отгрузка_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Документ.Отгрузка_ХамелеонЦРПТ КАК Отгрузка_ХамелеонЦРПТ
		|ГДЕ
		|	Отгрузка_ХамелеонЦРПТ.Исправление";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		
		ПолОб=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ПолОб.ТипУточненияУПД=Перечисления.ТипУточненияУПД_ХамелеонЦРПТ.Исправление;
		Попытка
			ПолОб.ЗаписатЬ();
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
КонецПроцедуры

Процедура ПровестиВозвратДистационный()
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводВОборот_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Документ.ВводВОборот_ХамелеонЦРПТ КАК ВводВОборот_ХамелеонЦРПТ
		|ГДЕ
		|	ВводВОборот_ХамелеонЦРПТ.Проведен
		|	И ВводВОборот_ХамелеонЦРПТ.ТипДокумента = &ТипДокумента
		|	И ВводВОборот_ХамелеонЦРПТ.Статус = &Статус";
	
	Запрос.УстановитьПараметр("ТипДокумента", Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНужд);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ПолОб=ВыборкаДетальныеЗаписи.Ссылка;
		Попытка
			ПолОб.Провести()
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьПриходПоМаркам()
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Приемка_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Документ.Приемка_ХамелеонЦРПТ КАК Приемка_ХамелеонЦРПТ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Докум=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Попытка
			Докум.Записать(РежимЗаписиДокумента.Запись);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
КонецПроцедуры

Процедура ЗаполнитьИДЭДО()
	Попытка
		Полоб=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОТензор.ПолучитьОбъект();
		ПолОб.ИдентификаторОператораЭДО="2BE";
		ПолОб.Записать();
		
		Полоб=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОТакском.ПолучитьОбъект();
		ПолОб.ИдентификаторОператораЭДО="2AL";
		ПолОб.Записать();
		
		Полоб=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОКонтур.ПолучитьОбъект();
		ПолОб.ИдентификаторОператораЭДО="2BM";
		ПолОб.Записать();
		
		Полоб=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОКалугаАстрал.ПолучитьОбъект();
		ПолОб.ИдентификаторОператораЭДО="2AE";
		ПолОб.Записать();
		
		Полоб=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОКорусКонсалтингСНГ.ПолучитьОбъект();
		ПолОб.ИдентификаторОператораЭДО="2BK";
		ПолОб.Записать();
		
		Полоб=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОЭКОМ.ПолучитьОбъект();
		ПолОб.ИдентификаторОператораЭДО="2LD";
		ПолОб.Записать();
		
		Полоб=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОЭвоторОФД.ПолучитьОбъект();
		ПолОб.ИдентификаторОператораЭДО="2VO";
		ПолОб.Записать();
		
		
		Полоб=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОЭдисофт.ПолучитьОбъект();
		ПолОб.ИдентификаторОператораЭДО="2IJ";
		ПолОб.Записать();
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьСправочникиТНВЭД()
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Пользователи_ХамелеонЦРПТ.СайтыВходаВСистему.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Пользователи_ХамелеонЦРПТ КАК Пользователи_ХамелеонЦРПТ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Обработки._Запуск_ХамелеонЦРПТ.ОбновитьСправочникиТНВЭД( ВыборкаДетальныеЗаписи.Наименование);
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
КонецПроцедуры

Процедура ОбновитьСтрануВПользователе()
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Пользователи_ХамелеонЦРПТ КАК Пользователи_ХамелеонЦРПТ
		|ГДЕ
		|	Пользователи_ХамелеонЦРПТ.СтранаПоУмолчанию = ЗНАЧЕНИЕ(Справочник.СтранаПроизводства_ХамелеонЦРПТ.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ДД=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Попытка
			ДД.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры

Процедура УдалитьСРегистраПриемка()
	Пег=РегистрыСведений.ПриемкаПоОрганизациям_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	Пег.Записать();
КонецПроцедуры

Процедура ОбновитьВыгрузкуДляОтгрузки()
	
	Если ВыгружатьОтгрузкуВФормате<>0 Тогда
		ВыгружатьОтгрузкуВФормате=0;
		ВыгружатьОтгрузкуВФорматеПриИзмененииНаСервере()
		
	Конецесли;
КонецПроцедуры
Процедура ОбновитьСуммаПринятПриемка()
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Приемка_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Документ.Приемка_ХамелеонЦРПТ КАК Приемка_ХамелеонЦРПТ
		|ГДЕ
		|	Приемка_ХамелеонЦРПТ.Статус В(&Статус)
		//|	И Приемка_ХамелеонЦРПТ.СуммаПринято = 0
		|";
	
	Статус=Новый списокЗначений;
	Статус.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан);
	Статус.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ЧастичноПринят);
	
	Запрос.УстановитьПараметр("Статус", Статус);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Пр=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОБъект();
		Попытка
			Пр.Записать(РежимЗаписиДокумента.Запись);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
Конецпроцедуры


Процедура ОбновитьОсновнуюЕдиницуИзмерения()
	
	СпрЕд=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоКоду("778");
	Если Не ЗначениеЗаполнено(СпрЕд) Тогда
		СпрДД=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрДД.Наименование="упаковка";
		СпрДД.код="778";
		СпрДД.НаименованиеПолное="упаковка";
		СпрДД.Записать();;
		СпрЕд=СпрДД.Ссылка;
		
		
	КонецЕсли;
	
	
		СпрЕд=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоКоду("715");
	Если Не ЗначениеЗаполнено(СпрЕд) Тогда
		СпрДД=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрДД.Наименование="пар";
		СпрДД.код="715";
		СпрДД.НаименованиеПолное="Пара (2 шт.)";
		СпрДД.Записать();;
		СпрЕд=СпрДД.Ссылка;
		
		
	КонецЕсли;

	СпрЕд=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоКоду("8751");
	Если Не ЗначениеЗаполнено(СпрЕд) Тогда
		СпрДД=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрДД.Наименование="кор";
		СпрДД.код="8751";
		СпрДД.НаименованиеПолное="Коробка";
		СпрДД.Записать();;
		СпрЕд=СпрДД.Ссылка;
		
		
	КонецЕсли;
	

	СпрЕд=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоКоду("796");
	Если Не ЗначениеЗаполнено(СпрЕд) Тогда
		СпрДД=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрДД.Наименование="шт";
		СпрДД.код="796";
		СпрДД.НаименованиеПолное="Штука";
		СпрДД.Записать();;
		СпрЕд=СпрДД.Ссылка;
		
		
	КонецЕсли;
	
	
	СпрЕд=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоКоду("839");
	Если Не ЗначениеЗаполнено(СпрЕд) Тогда
		СпрДД=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрДД.Наименование="компл";
		СпрДД.код="839";
		СпрДД.НаименованиеПолное="Комплект";
		СпрДД.Записать();;
		СпрЕд=СпрДД.Ссылка;
		
		
	КонецЕсли;
	
	
	
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Пользователи_ХамелеонЦРПТ КАК Пользователи_ХамелеонЦРПТ
		|ГДЕ
		|	Пользователи_ХамелеонЦРПТ.ОсновнаяЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения_ХамелеонЦРПТ.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ПрПр=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ПрПр.ОсновнаяЕдиницаИзмерения=СпрЕд.Ссылка;
		ПрПр.Записать();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
	
КонецПроцедуры


Процедура ЗаполнитьВидКМ()
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Пользователи_ХамелеонЦРПТ КАК Пользователи_ХамелеонЦРПТ
		|ГДЕ
		|	Пользователи_ХамелеонЦРПТ.ВидКМ = ЗНАЧЕНИЕ(Перечисление.СтатусыКМДляАгрегации_ХамелеонЦРПТ.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ПрПП=ВыборкаДетальныеЗаписи.Ссылка.Получитьобъект();
		ПрПП.ВидКМ=Перечисления.СтатусыКМДляАгрегации_ХамелеонЦРПТ.КМЭмитирован;
		ПрПП.Записать();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры

Процедура УбратьФлэшК()
	СпрОрг=Справочники.Организации_ХамелеонЦРПТ.Выбрать();
	Пока СПрОрг.Следующий() Цикл
		Если Сред(СпрОрг.ИНН,11,2)="/K" Тогда
			
			СпрОб=СпрОрг.ПолучитьОбъект();
			СпрОб.ИНН=Сред(СпрОрг.ИНН,1,10);
			СпрОб.Записать();
		КонецЕсли;
		
	Конеццикла;
	
КонецПроцедуры
Процедура ПерезаписатьПользователей()
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Пользователи_ХамелеонЦРПТ КАК Пользователи_ХамелеонЦРПТ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Попытка
		Польз=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Если Не Значениезаполнено(Польз.ТипОплаты) Тогда
		Польз.ТипОплаты=Перечисления.ТипОплаты_ХамелеонЦРПТ.ОплатаПоЭмиссии;
		Польз.Записать();
		КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
Конецпроцедуры
Процедура ОБновитьШаблоныЭтикетокВПОльзователе()
	СпрП=Справочники.Пользователи_ХамелеонЦРПТ.Выбрать();
	Пока СпрП.Следующий() Цикл
		Если СпрП.ЭтоГруппа Тогда
			Продолжить
			
		КонецЕсли;
		Если СпрП.ШаблонЭтикетки.Статус<>"ACTIVATED" Тогда
			СпрПОб=СпрП.ПолучитьОбъект();
			СпрПОб.ШаблонЭтикетки=Справочники.ШаблоныЭтикеток_ХамелеонЦРПТ.НайтиПоРеквизиту("Статус","ACTIVATED");
			СпрПОб.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОБновитьШаблоныЭтикеток()
	
	СпрШ=Справочники.ШаблоныЭтикеток_ХамелеонЦРПТ.Выбрать();
	Пока СпрШ.Следующий() Цикл
		Если СпрШ.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		СПрш_1=Спрш.ПолучитьОбъект();
		СпрШ_1.Статус="DELETED";
		СпрШ_1.Записать();
	КонецЦикла;
	
		Если Константы.РежимРаботыХамелеонЦРПТ.Получить()=2 Тогда
			Макет_1=Справочники.ШаблоныЭтикеток_ХамелеонЦРПТ.ПолучитьМакет("Тестовый");
		Иначе
			Макет_1=Справочники.ШаблоныЭтикеток_ХамелеонЦРПТ.ПолучитьМакет("Оригинальный");
			
		КонецЕсли;
			Таб=Новый ТабличныйДокумент;
			Таб.Вывести(Макет_1);
			
			Для Сч=2 По Таб.ВысотаТаблицы Цикл
				Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
					Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
					GUID=СокрЛП(Таб.Область(Сч,2).Текст);
					Статус=СокрЛП(Таб.Область(Сч,3).Текст);
					ДатаСоздания=СокрЛП(Таб.Область(Сч,4).Текст);
					Тип=СокрЛП(Таб.Область(Сч,5).Текст);
					СпрТТ=Справочники.ШаблоныЭтикеток_ХамелеонЦРПТ.НайтиПоРеквизиту("УникальныйИдентификатор",GUID);
					Если ЗначениеЗаполнено(СпрТТ) Тогда
						СпрТТ=СпрТТ.ПолучитьОбъект();
					Иначе
						СпрТТ=Справочники.ШаблоныЭтикеток_ХамелеонЦРПТ.СоздатьЭлемент();
					КонецЕсли;
					СпрТТ.Наименование=Наименование;
					СпрТТ.ДатаСоздания=Дата(Сред(ДатаСоздания,7,4),Сред(ДатаСоздания,4,2),Сред(ДатаСоздания,1,2));
					СпрТТ.Пользователь=Неопределено;
					СпрТТ.Статус=Статус;
					СпрТТ.Тип=Тип;
					СпрТТ.УникальныйИдентификатор=GUID;
					СпрТТ.Записать();
					
				КонецЕсли;
			КонецЦикла;

КонецПроцедуры

Процедура ОбновитьСправочники_Видсертификатов()
	Макет_1=Справочники.ВидСертификатаПоGSI_ХамелеонЦРПТ.ПолучитьМакет("ВидСертификатов");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ВидСертификатов  (Наименование);
			
		КонецЕсли;
	Конеццикла;
КонецПроцедуры




Процедура ПерезаписатьВводВВоборрот()
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказМарок_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Документ.ВводВОборот_ХамелеонЦРПТ КАК ЗаказМарок_ХамелеонЦРПТ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		СС=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Попытка 	
			СС.Записать(режимЗаписиДокумента.Запись);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры


Процедура ПерезаписатьЗаявки()
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказМарок_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Документ.ЗаказМарок_ХамелеонЦРПТ КАК ЗаказМарок_ХамелеонЦРПТ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		СС=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Попытка 	
			СС.Записать(режимЗаписиДокумента.Запись);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры

Процедура ОбновитьРежимРаботыПользователя()
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Пользователи_ХамелеонЦРПТ КАК Пользователи_ХамелеонЦРПТ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		
		Если ВыборкаДетальныеЗаписи.Ссылка.Демо Тогда
			Константы.РежимРаботыХамелеонЦРПТ.Установить(2);
		Иначе
			Константы.РежимРаботыХамелеонЦРПТ.Установить(1);
		КонецЕсли;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
КонецПроцедуры

Процедура ЗаполнитьСправочникаПолов()
	
	спрП=Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Унисекс",истина);
	Если НЕ Значениезаполнено(СПрП) Тогда
		СпрП=Справочники.ПолОбуви_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрП.Наименование="Унисекс";
		СпрП.Записать();;
	КонецЕсли;

	
	спрП=Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Женская",истина);
	Если НЕ Значениезаполнено(СПрП) Тогда
		СпрП=Справочники.ПолОбуви_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрП.Наименование="Женская";
		СпрП.Записать();;
	КонецЕсли;
	
	спрП=Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Мужская",истина);
	Если НЕ Значениезаполнено(СПрП) Тогда
		СпрП=Справочники.ПолОбуви_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрП.Наименование="Мужская";
		СпрП.Записать();;
	КонецЕсли;	
	
	спрП=Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Детская",истина);
	Если НЕ Значениезаполнено(СПрП) Тогда
		СпрП=Справочники.ПолОбуви_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрП.Наименование="Детская";
		СпрП.Записать();;
	КонецЕсли;
	
конецПроцедуры

Процедура ЗаполнитьСправочникаКодовРешения()
	      ЗаписатьКодПрРеш("10","Выпуск товаров разрешен");
	      ЗаписатьКодПрРеш("11","Выпуск товаров при условии обеспечения исполнения обязанности по уплате таможенных пошлин");
	      ЗаписатьКодПрРеш("12","Выпуск товаров с особенностями, предусмотренными статьей 121 ТК ЕЭС");
		  ЗаписатьКодПрРеш("13","Выпуск товаров с особенностями, предусмотренными статьей 122 ТК ЕЭС");
		  ЗаписатьКодПрРеш("14","Выпуск товаров с особенностями, предусмотренными статьей 123 ТК ЕЭС");
		  ЗаписатьКодПрРеш("20","Условный выпуск товаров");
		  
КонецПроцедуры

Процедура ЗаписатьКодПрРеш(Ко,Наименовавние)
	СпрК=Справочники.КодПринятогоРешения_ХамелеонЦРПТ.НайтиПоКоду(Ко);
	Если Не ЗначениеЗаполнено(СпрК) Тогда
		СпрК=Справочники.КодПринятогоРешения_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрК.Код=Ко;
		СПрК.Наименование=Наименовавние;
		СпрК.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьСправочникВходовВСисетму()
		СпрОб=Справочники.ВходВСистему_ХамелеонЦРПТ.НайтиПоНаименованию("Альтернативный табак",Истина);
	Если ЗначениеЗаполнено(СпрОб) Тогда
		СпрОб=СпрОб.ПолучитьОбъект();
	Иначе
		СпрОб=Справочники.ВходВСистему_ХамелеонЦРПТ.НайтиПоНаименованию("Алтернативный табак",Истина);
		Если ЗначениеЗаполнено(СпрОб) Тогда
			СпрОб=СпрОб.ПолучитьОбъект();
		Иначе
			Спроб=Справочники.ВходВСистему_ХамелеонЦРПТ.СоздатьЭлемент();
		КонецЕсли;
	КонецЕсли;
	СпрОб.Наименование="Альтернативный табак";
	СпрОб.ТестовыйСтенд="int01.gismt.crpt.tech";
	СпрОб.ОригинальныйСтенд="tobacco.crpt.ru";
	СпрОб.ДоступПоСУЗ="otp";
	Спроб.Комментарий="Альтернативная табачная продукция";
//	СпрОб.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
	СпрОб.Записать();
	
	
	
	
	
	СпрОб=Справочники.ВходВСистему_ХамелеонЦРПТ.НайтиПоНаименованию("Кресла-коляски",Истина);
	Если ЗначениеЗаполнено(СпрОб) Тогда
		СпрОб=СпрОб.ПолучитьОбъект();
	Иначе
		Спроб=Справочники.ВходВСистему_ХамелеонЦРПТ.СоздатьЭлемент();
	КонецЕсли;
	СпрОб.Наименование="Кресла-коляски";
	СпрОб.ТестовыйСтенд="wheelchairs.demo.crpt.tech";
	СпрОб.ОригинальныйСтенд="wheelchairs.crpt.ru";
	СпрОб.ДоступПоСУЗ="wheelchairs";
//	СпрОб.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
	Спроб.Комментарий="Кресла-коляски";
	СпрОб.Записать();
	
	

	
	СпрОб=Справочники.ВходВСистему_ХамелеонЦРПТ.НайтиПоНаименованию("Питьевая вода",Истина);
	Если ЗначениеЗаполнено(СпрОб) Тогда
		СпрОб=СпрОб.ПолучитьОбъект();
	Иначе
		Спроб=Справочники.ВходВСистему_ХамелеонЦРПТ.СоздатьЭлемент();
	КонецЕсли;
	СпрОб.Наименование="Питьевая вода";
	СпрОб.ТестовыйСтенд="water.demo.crpt.tech";
	СпрОб.ОригинальныйСтенд="water.crpt.ru";
	СпрОб.ДоступПоСУЗ="water";
//	СпрОб.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
	Спроб.Комментарий="Упакованная вода";
	СпрОб.Записать();
	
	
	
	
	
	СпрОб=Справочники.ВходВСистему_ХамелеонЦРПТ.НайтиПоНаименованию("Велосипеды",Истина);
	Если ЗначениеЗаполнено(СпрОб) Тогда
		СпрОб=СпрОб.ПолучитьОбъект();
	Иначе
		Спроб=Справочники.ВходВСистему_ХамелеонЦРПТ.СоздатьЭлемент();
	КонецЕсли;
	СпрОб.Наименование="Велосипеды";
	СпрОб.ТестовыйСтенд="bicycle.demo.crpt.tech";
	СпрОб.ОригинальныйСтенд="bicycle.crpt.ru";
	СпрОб.ДоступПоСУЗ="bicycle";
	Спроб.Комментарий="Велосипеды и велосипедные рамы";
//	СпрОб.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
	СпрОб.Записать();
	
	
	
	
	
	СпрОб=Справочники.ВходВСистему_ХамелеонЦРПТ.НайтиПоНаименованию("Обувь",Истина);
	Если ЗначениеЗаполнено(СпрОб) Тогда
		СпрОб=СпрОб.ПолучитьОбъект();
	Иначе
		Спроб=Справочники.ВходВСистему_ХамелеонЦРПТ.СоздатьЭлемент();
	КонецЕсли;
	СпрОб.Наименование="Обувь";
	СпрОб.ТестовыйСтенд="shoes.demo.crpt.tech";
	СпрОб.ОригинальныйСтенд="shoes.crpt.ru";
	СпрОб.ДоступПоСУЗ="shoes";
	Спроб.Комментарий="Обувные товары";
//	СпрОб.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
	СпрОб.Записать();
	
	
	СпрОб=Справочники.ВходВСистему_ХамелеонЦРПТ.НайтиПоНаименованию("Сигареты",Истина);
	Если ЗначениеЗаполнено(СпрОб) Тогда
		СпрОб=СпрОб.ПолучитьОбъект();
		СпрОб.ПометкаУдаления=Истина;
		СпрОб.Записать();
	КонецЕсли;
	
	СпрОб=Справочники.ВходВСистему_ХамелеонЦРПТ.НайтиПоНаименованию("Табак",Истина);
	Если ЗначениеЗаполнено(СпрОб) Тогда
		СпрОб=СпрОб.ПолучитьОбъект();
	Иначе
		Спроб=Справочники.ВходВСистему_ХамелеонЦРПТ.СоздатьЭлемент();
	КонецЕсли;
	СпрОб.Наименование="Табак";
	///СпрОб.ТестовыйСтенд="stable.ismotp.crptech.ru";
	//СпрОб.ОригинальныйСтенд="ismotp.crptech.ru";
	СпрОб.ТестовыйСтенд="tobacco.demo.crpt.tech";
	СпрОб.ОригинальныйСтенд="tobacco.crpt.ru";
	СпрОб.ДоступПоСУЗ="tobacco";
	Спроб.Комментарий="Табачная продукция";
	СпрОб.Записать();
	
	

	СпрОб=Справочники.ВходВСистему_ХамелеонЦРПТ.НайтиПоНаименованию("Лекарства",Истина);
	Если ЗначениеЗаполнено(СпрОб) Тогда
		СпрОб=СпрОб.ПолучитьОбъект();
		СпрОб.ПометкаУдаления=Истина;
		СпрОб.Записать();
	КонецЕсли;
	//СпрОб.Наименование="Лекарства";
	//СпрОб.ТестовыйСтенд="api.sb.mdlp.crpt.ru";
	//СпрОб.ОригинальныйСтенд="mdlp.crpt.ru";
	 	
	СпрОб=Справочники.ВходВСистему_ХамелеонЦРПТ.НайтиПоНаименованию("Изделия из натурального меха",Истина);
	Если ЗначениеЗаполнено(СпрОб) Тогда
		СпрОб=СпрОб.ПолучитьОбъект();
		СпрОб.Наименование="(НЕ ИСПОЛЬЗОВАТЬ) Изделия из натурального меха";
		СпрОб.Записать();
	КонецЕсли;
	
	СпрОб=Справочники.ВходВСистему_ХамелеонЦРПТ.НайтиПоНаименованию("(НЕ ИСПОЛЬЗОВАТЬ) Изделия из натурального меха",Истина);
	Если ЗначениеЗаполнено(СпрОб) Тогда
		СпрОб=СпрОб.ПолучитьОбъект();
	Иначе
		Спроб=Справочники.ВходВСистему_ХамелеонЦРПТ.СоздатьЭлемент();
	КонецЕсли;
	СпрОб.Наименование="(НЕ ИСПОЛЬЗОВАТЬ) Изделия из натурального меха";
	СпрОб.ТестовыйСтенд="";
	
	СпрОб.ДоступПоСУЗ="";
	СпрОб.ОригинальныйСтенд="furs.mark.crpt.ru";
	
	СпрОб.Записать();
	
	СпрОб=Справочники.ВходВСистему_ХамелеонЦРПТ.НайтиПоНаименованию("Шины",Истина);
	Если ЗначениеЗаполнено(СпрОб) Тогда
		СпрОб=СпрОб.ПолучитьОбъект();
	Иначе
		Спроб=Справочники.ВходВСистему_ХамелеонЦРПТ.СоздатьЭлемент();
	КонецЕсли;
	СпрОб.Наименование="Шины";
	СпрОб.ТестовыйСтенд="tires.demo.crpt.tech";
	//СпрОб.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
	СпрОб.ОригинальныйСтенд="tires.crpt.ru";
	СпрОб.ДоступПоСУЗ="tires";
	Спроб.Комментарий="Шины и покрышки пневматические резиновые новые";
	СпрОб.Записать();
	
	СпрОб=Справочники.ВходВСистему_ХамелеонЦРПТ.НайтиПоНаименованию("Молоко",Истина);
	Если ЗначениеЗаполнено(СпрОб) Тогда
		СпрОб=СпрОб.ПолучитьОбъект();
	Иначе
		Спроб=Справочники.ВходВСистему_ХамелеонЦРПТ.СоздатьЭлемент();
	КонецЕсли;
	СпрОб.Наименование="Молоко";
	СпрОб.ТестовыйСтенд="milk.demo.crpt.tech";
	//СпрОб.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
	СпрОб.ОригинальныйСтенд="milk.crpt.ru";
	СпрОб.ДоступПоСУЗ="milk";
	Спроб.Комментарий="Молочная продукция";
	СпрОб.Записать();
	
	
		
	СпрОб=Справочники.ВходВСистему_ХамелеонЦРПТ.НайтиПоНаименованию("Свет",Истина);
	Если ЗначениеЗаполнено(СпрОб) Тогда
		СпрОб=СпрОб.ПолучитьОбъект();
		СпрОб.Наименование="Одежда";
		СпрОб.ТестовыйСтенд="clothes.demo.crpt.tech";
	//СпрОб.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
		СпрОб.ОригинальныйСтенд="clothes.crpt.ru";
		СпрОб.ДоступПоСУЗ="lp";
		СпрОб.ПометкаУдаления=Ложь;
		Спроб.Комментарий="Предметы одежды, белье постельное, столовое, туалетное и кухонное";
		СпрОб.Записать();
	Иначе
		
		СпрОб=Справочники.ВходВСистему_ХамелеонЦРПТ.НайтиПоНаименованию("Одежда",Истина);
		Если ЗначениеЗаполнено(СпрОб) Тогда
			СпрОб=СпрОб.ПолучитьОбъект();
		Иначе
			Спроб=Справочники.ВходВСистему_ХамелеонЦРПТ.СоздатьЭлемент();
		КонецЕсли;
		СпрОб.Наименование="Одежда";
		//СпрОб.ТестовыйСтенд="";
		СпрОб.ТестовыйСтенд="clothes.demo.crpt.tech";
		//СпрОб.ТестовыйСтенд="demo.fashion.crpt.ru";
		//СпрОб.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
		СпрОб.ПометкаУдаления=Ложь;
		СпрОб.ОригинальныйСтенд="clothes.crpt.ru";
		СпрОб.ДоступПоСУЗ="lp";
		Спроб.Комментарий="Предметы одежды, белье постельное, столовое, туалетное и кухонное";
		СпрОб.Записать();
		
	КонецЕсли;
		
	СпрОб=Справочники.ВходВСистему_ХамелеонЦРПТ.НайтиПоНаименованию("Фармацевтика",Истина);
	Если ЗначениеЗаполнено(СпрОб) Тогда
		СпрОб=СпрОб.ПолучитьОбъект();
	Иначе
		Спроб=Справочники.ВходВСистему_ХамелеонЦРПТ.СоздатьЭлемент();
	КонецЕсли;
	СпрОб.Наименование="Фармацевтика";
	//СпрОб.ТестовыйСтенд="";
	СпрОб.ТестовыйСтенд="api.sb.mdlp.crpt.ru";
	//СпрОб.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
	СпрОб.ОригинальныйСтенд="api.mdlp.crpt.ru";
	СпрОб.ДоступПоСУЗ="pharma";
	Спроб.Комментарий="Фармацевтика";
	СпрОб.Записать();
	
	СпрОб=Справочники.ВходВСистему_ХамелеонЦРПТ.НайтиПоНаименованию("Парфюм",Истина);
	Если ЗначениеЗаполнено(СпрОб) Тогда
		СпрОб=СпрОб.ПолучитьОбъект();
	Иначе
		Спроб=Справочники.ВходВСистему_ХамелеонЦРПТ.СоздатьЭлемент();
	КонецЕсли;
	СпрОб.Наименование="Парфюм";
	СпрОб.ТестовыйСтенд="perfumery.demo.crpt.tech";
	//СпрОб.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
	СпрОб.ОригинальныйСтенд="perfumery.crpt.ru";
	СпрОб.ДоступПоСУЗ="perfum";
	Спроб.Комментарий="Духи и туалетная вода";
	СпрОб.Записать();
	
	
	СпрОб=Справочники.ВходВСистему_ХамелеонЦРПТ.НайтиПоНаименованию("Фото",Истина);
	Если ЗначениеЗаполнено(СпрОб) Тогда
		СпрОб=СпрОб.ПолучитьОбъект();
	Иначе
		Спроб=Справочники.ВходВСистему_ХамелеонЦРПТ.СоздатьЭлемент();
	КонецЕсли;
	СпрОб.Наименование="Фото";
	СпрОб.ТестовыйСтенд="electronics.demo.crpt.tech";
	//СпрОб.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
	СпрОб.ОригинальныйСтенд="electronics.crpt.ru";
	СпрОб.ДоступПоСУЗ="photo";
	Спроб.Комментарий="Фотокамеры (кроме кинокамер), фотовспышки и лампы-вспышки";
	СпрОб.Записать();
	
	
	
	
	СпрОб=Справочники.ВходВСистему_ХамелеонЦРПТ.НайтиПоНаименованию("Пиво",Истина);
	Если ЗначениеЗаполнено(СпрОб) Тогда
		СпрОб=СпрОб.ПолучитьОбъект();
	Иначе
		Спроб=Справочники.ВходВСистему_ХамелеонЦРПТ.СоздатьЭлемент();
	КонецЕсли;
	СпрОб.Наименование="Пиво";
	СпрОб.ТестовыйСтенд="beer.demo.crpt.tech";
	СпрОб.ОригинальныйСтенд="beer.crpt.ru";
	СпрОб.ДоступПоСУЗ="beer";
//	СпрОб.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
	Спроб.Комментарий="Пиво, напитки, изготавливаемые на основе пива, и слабоалкогольные напитки";
	СпрОб.Записать();
	
	
	
	


КонецПроцедуры



Процедура ОбновитьСправочники()
	
	
	Макет_1=Справочники.ВидТовара_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ВидТовара_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	

	
	Макет_1=Справочники.ОКПД2_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ОКПД2_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	

	
	Макет_1=Справочники.УровеньИерархии_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.УровеньИерархии_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
		
	
	
	
	Макет_1=Справочники.КодВидаПодакцизныхТоваров_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.КодВидаПодакцизныхТоваров_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	
	
	Макет_1=Справочники.ТипПриводаВДвижении_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ТипПриводаВДвижении_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	

	
	
	Макет_1=Справочники.ЕдиницыИзмеренияГлубины_Коляски_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ЕдиницыИзмеренияГлубины_Коляски_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	
	
	Макет_1=Справочники.ЕдиницаИзмеренияШирины_Коляски_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ЕдиницаИзмеренияШирины_Коляски_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Макет_1=Справочники.ЕдиницыИзмеренияВысоты_Коляски_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ЕдиницыИзмеренияВысоты_Коляски_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	
	Макет_1=Справочники.ЕдиницаИзмеренияВысотыСпинки_Коляски_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ЕдиницаИзмеренияВысотыСпинки_Коляски_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.НайтиПоКоду("default");
	Если Не ЗначениеЗаполнено(СпрР) тогда
		СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрР.Код="default";
		СпрР.Наименование="Вид спереди";
		СпрР.Записать();;
	КонецЕсли;
	
	
	СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.НайтиПоКоду("7");
	Если Не ЗначениеЗаполнено(СпрР) тогда
		СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрР.Код="7";
		СпрР.Наименование="Вид слева";
		СпрР.Записать();;
	КонецЕсли;
	
	СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.НайтиПоКоду("19");
	Если Не ЗначениеЗаполнено(СпрР) тогда
		СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрР.Код="19";
		СпрР.Наименование="Вид справа";
		СпрР.Записать();;
	КонецЕсли;
	
	
	СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.НайтиПоКоду("13");
	Если Не ЗначениеЗаполнено(СпрР) тогда
		СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрР.Код="13";
		СпрР.Наименование="Вид сзади";
		СпрР.Записать();;
	КонецЕсли;
	
	СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.НайтиПоКоду("si1");
	Если Не ЗначениеЗаполнено(СпрР) тогда
		СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрР.Код="si1";
		СпрР.Наименование="Вид сверху";
		СпрР.Записать();;
	КонецЕсли;
	
	СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.НайтиПоКоду("si2");
	Если Не ЗначениеЗаполнено(СпрР) тогда
		СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрР.Код="si2";
		СпрР.Наименование="Вид снизу";
		СпрР.Записать();;
	КонецЕсли;

	СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.НайтиПоКоду("si3");
	Если Не ЗначениеЗаполнено(СпрР) тогда
		СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрР.Код="si3";
		СпрР.Наименование="Вид в упаковке";
		СпрР.Записать();;
	КонецЕсли;

	СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.НайтиПоКоду("si4");
	Если Не ЗначениеЗаполнено(СпрР) тогда
		СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрР.Код="si4";
		СпрР.Наименование="Вид без упаковки";
		СпрР.Записать();;
	КонецЕсли;
	

	СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.НайтиПоКоду("si5");
	Если Не ЗначениеЗаполнено(СпрР) тогда
		СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрР.Код="si5";
		СпрР.Наименование="Вид внутри упаковки";
		СпрР.Записать();;
	КонецЕсли;
	
	
	СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.НайтиПоКоду("3ds");
	Если Не ЗначениеЗаполнено(СпрР) тогда
		СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрР.Код="3ds";
		СпрР.Наименование="3D серия";
		СпрР.Записать();;
	КонецЕсли;
	
	СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.НайтиПоКоду("marketing");
	Если Не ЗначениеЗаполнено(СпрР) тогда
		СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрР.Код="marketing";
		СпрР.Наименование="Маркетинговое фото";
		СпрР.Записать();;
	КонецЕсли;
	
	СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.НайтиПоКоду("text");
	Если Не ЗначениеЗаполнено(СпрР) тогда
		СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрР.Код="text";
		СпрР.Наименование="Фото текста";
		СпрР.Записать();;
	КонецЕсли;
	
СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.НайтиПоКоду("ecommerce");
	Если Не ЗначениеЗаполнено(СпрР) тогда
		СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрР.Код="ecommerce";
		СпрР.Наименование="e-commerce фото";
		СпрР.Записать();;
	КонецЕсли;
	
		
	СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.НайтиПоКоду("facing");
	Если Не ЗначениеЗаполнено(СпрР) тогда
		СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрР.Код="facing";
		СпрР.Наименование="Фото для планограмм";
		СпрР.Записать();;
	КонецЕсли;
	
	СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.НайтиПоКоду("undef");
	Если Не ЗначениеЗаполнено(СпрР) тогда
		СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрР.Код="undef";
		СпрР.Наименование="Иной вид";
		СпрР.Записать();;
	КонецЕсли;
	
СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.НайтиПоКоду("cubi");
	Если Не ЗначениеЗаполнено(СпрР) тогда
		СпрР=Справочники.ВидыРисунков_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрР.Код="cubi";
		СпрР.Наименование="Фото измерения ВГХ";
		СпрР.Записать();;
	КонецЕсли;
	
	
	
	Макет_1=Справочники.ДополнительныеРеквизиты_Белье_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Строк=Макет_1.ПолучитьТекст();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строк);
	NNN=ПрочитатьJSON(ЧтениеJSON);
	
	
	
	   
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[4].preset Цикл
		Если Не Значениезаполнено(Справочники.ДекоративныеЭлементы_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ДекоративныеЭлементы_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	
	
	Макет_1=Справочники.ДополнительныеРеквизиты_ОБУВЬ_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Строк=Макет_1.ПолучитьТекст();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строк);
	NNN=ПрочитатьJSON(ЧтениеJSON);
	
	
	
	
	

	   
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[5].preset Цикл
		Если Не Значениезаполнено(Справочники.РазмерыВМетрическойСистемемм_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.РазмерыВМетрическойСистемемм_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[8].valuesTypePreset Цикл
		Если Не Значениезаполнено(Справочники.СистемаРазмерПолнотыОбуви_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.СистемаРазмерПолнотыОбуви_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	

	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[10].preset Цикл
		Если Не Значениезаполнено(Справочники.ВысотаКаблука_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ВысотаКаблука_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	

	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[12].preset Цикл
		Если Не Значениезаполнено(Справочники.ВодонепроницаемаяВодостойкая_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ВодонепроницаемаяВодостойкая_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	

	
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[14].preset Цикл
		Если Не Значениезаполнено(Справочники.ТипЧастичноЗакрытогоВерха_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ТипЧастичноЗакрытогоВерха_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	

	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[15].preset Цикл
		Если Не Значениезаполнено(Справочники.ТипЗастежки_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ТипЗастежки_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	

	
	Для Каждого Стр_1 Из NNN.attrGroup[10].attributes[6].preset Цикл
		Если Не Значениезаполнено(Справочники.ФорматПродажи_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ФорматПродажи_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	Для Каждого Стр_1 Из NNN.attrGroup[10].attributes[7].preset Цикл
		Если Не Значениезаполнено(Справочники.СпособВводаТовараВОборот_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.СпособВводаТовараВОборот_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	

	
	
	
	
	
	
	
	
	
	
	              
	
	Макет_1=Справочники.ДополнительныеРеквизиты_ПредметыОдежды_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Строк=Макет_1.ПолучитьТекст();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строк);
	NNN=ПрочитатьJSON(ЧтениеJSON);
	
	   
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[2].preset Цикл
		Если Не Значениезаполнено(Справочники.ВозвратПотребителя_Одежда_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ВозвратПотребителя_Одежда_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[5].valuesTypePreset Цикл
		Если Не Значениезаполнено(Справочники.СтраныДляИныхРазмеровОдежды_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.СтраныДляИныхРазмеровОдежды_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[6].preset Цикл
		Если Не Значениезаполнено(Справочники.Рост_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.Рост_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	
	
	
	Для Каждого Стр_1 Из NNN.attrGroup[3].attributes[2].preset Цикл
		Если Не Значениезаполнено(Справочники.Материал_Одежда_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.Материал_Одежда_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	Для Каждого Стр_1 Из NNN.attrGroup[3].attributes[2].valuesTypePreset Цикл
		Если Не Значениезаполнено(Справочники.Процент_Одежда_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.Процент_Одежда_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	
	
	
	
		Макет_1=Справочники.Продукция_ХамелеонЦРПТ.ПолучитьМакет("НК_Велосипеды");
	Строк=Макет_1.ПолучитьТекст();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строк);
	NNN=ПрочитатьJSON(ЧтениеJSON);
	
	
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[1].preset Цикл
		Если Не Значениезаполнено(Справочники.КлассВелосипеда_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.КлассВелосипеда_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[3].preset Цикл
		Если Не Значениезаполнено(Справочники.Возраст_Велосипеды_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.Возраст_Велосипеды_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[9].preset Цикл
		Если Не Значениезаполнено(Справочники.ТипыКонструкцииРамы_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ТипыКонструкцииРамы_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[14].preset Цикл
		Если Не Значениезаполнено(Справочники.КоличествоКолес_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.КоличествоКолес_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	

	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[15].preset Цикл
		Если Не Значениезаполнено(Справочники.ТипыКолесныхДисков_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ТипыКолесныхДисков_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[18].preset Цикл
		Если Не Значениезаполнено(Справочники.ТипПодвески_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ТипПодвески_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[19].preset Цикл
		Если Не Значениезаполнено(Справочники.КоличествоСкоростей_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.КоличествоСкоростей_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[20].preset Цикл
		Если Не Значениезаполнено(Справочники.МатериалПодкрылков_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.МатериалПодкрылков_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[21].preset Цикл
		Если Не Значениезаполнено(Справочники.РасположениеФар_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.РасположениеФар_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[22].preset Цикл
		Если Не Значениезаполнено(Справочники.НалииеКофры_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.НалииеКофры_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	//Для Каждого Стр_1 Из NNN.attrGroup[4].attributes[1].valuesTypePreset Цикл
	//	Если Не Значениезаполнено(Справочники.ЕдиницыИзмерения_Велосипеда_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
	//		СпрМ=Справочники.ЕдиницыИзмерения_Велосипеда_ХамелеонЦРПТ.СоздатьЭлемент();
	//		СпрМ.Наименование=Стр_1.text;
	//		СпрМ.Записать();
	//	КонецЕсли;
	//	
	//	
	//Конеццикла;
	

		Макет_1=Справочники.Продукция_ХамелеонЦРПТ.ПолучитьМакет("НК_Фарма");
	Строк=Макет_1.ПолучитьТекст();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строк);
	NNN=ПрочитатьJSON(ЧтениеJSON);
	
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[1].preset Цикл
		Если Не Значениезаполнено(Справочники.ВозрастПотребителя_Парфюм_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ВозрастПотребителя_Парфюм_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[2].preset Цикл
		Если Не Значениезаполнено(Справочники.ПолЦелевогоПотребителя_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ПолЦелевогоПотребителя_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[3].preset Цикл
		Если Не Значениезаполнено(Справочники.ФормаСостояниеФормат_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ФормаСостояниеФормат_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	

	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[4].preset Цикл
		Если Не Значениезаполнено(Справочники.ТипДозатора_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ТипДозатора_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[6].preset Цикл
		Если Не Значениезаполнено(Справочники.ТипАромата_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ТипАромата_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;

	
	Для Каждого Стр_1 Из NNN.attrGroup[4].attributes[0].valuesTypePreset Цикл
		Если Не Значениезаполнено(Справочники.ЕдиницаИзмерения_Парфюм_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ЕдиницаИзмерения_Парфюм_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;

	
	Для Каждого Стр_1 Из NNN.attrGroup[4].attributes[0].valuesTypePreset Цикл
		Если Не Значениезаполнено(Справочники.ЕдиницаИзмерения_Парфюм_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ЕдиницаИзмерения_Парфюм_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	Для Каждого Стр_1 Из NNN.attrGroup[4].attributes[3].preset Цикл
		Если Не Значениезаполнено(Справочники.ТипУпаковкиИспользования_Парфюм_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ТипУпаковкиИспользования_Парфюм_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;

	
	
	

		Макет_1=Справочники.Продукция_ХамелеонЦРПТ.ПолучитьМакет("НК_Фото");
	Строк=Макет_1.ПолучитьТекст();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строк);
	NNN=ПрочитатьJSON(ЧтениеJSON);
	
	
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[2].preset Цикл
		Если Не Значениезаполнено(Справочники.Цвет_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.Цвет_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	

	
	Макет_1=Справочники.Продукция_ХамелеонЦРПТ.ПолучитьМакет("НК_Шины");
	Строк=Макет_1.ПолучитьТекст();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строк);
	NNN=ПрочитатьJSON(ЧтениеJSON);
	
	
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[0].preset Цикл
		Если Не Значениезаполнено(Справочники.ЦелевоеИспользование_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ЦелевоеИспользование_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	

	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[2].preset Цикл
		Если Не Значениезаполнено(Справочники.ШиринааПрофиляШиныКамерыДюймы_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ШиринааПрофиляШиныКамерыДюймы_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[11].valuesTypePreset Цикл
		Если Не Значениезаполнено(Справочники.ШиринааПрофиляШиныКамерыДюймы_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ШиринааПрофиляШиныКамерыДюймы_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[12].preset Цикл
		Если Не Значениезаполнено(Справочники.ТопливнаяЭкономичность_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ТопливнаяЭкономичность_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[13].preset Цикл
		Если Не Значениезаполнено(Справочники.ИндексСцепленияСМокройДорогой_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ИндексСцепленияСМокройДорогой_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[15].preset Цикл
		Если Не Значениезаполнено(Справочники.РисунокПротектора_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.РисунокПротектора_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[17].preset Цикл
		Если Не Значениезаполнено(Справочники.УсиленнаяШина_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.УсиленнаяШина_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[17].preset Цикл
		Если Не Значениезаполнено(Справочники.УсиленнаяШина_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.УсиленнаяШина_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	
	Макет_1=Справочники.Продукция_ХамелеонЦРПТ.ПолучитьМакет("НК_Молоко");
	Строк=Макет_1.ПолучитьТекст();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строк);
	NNN=ПрочитатьJSON(ЧтениеJSON);

	
	Для Каждого Стр_1 Из NNN.attrGroup[8].attributes[1].preset Цикл
		Если Не Значениезаполнено(Справочники.ТипПродукции_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ТипПродукции_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	Для Каждого Стр_1 Из NNN.attrGroup[8].attributes[2].preset Цикл
		Если Не Значениезаполнено(Справочники.ПродукцияМолоко_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ПродукцияМолоко_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	
	Для Каждого Стр_1 Из NNN.attrGroup[8].attributes[3].preset Цикл
		Если Не Значениезаполнено(Справочники.ВидПродукции_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ВидПродукции_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	Для Каждого Стр_1 Из NNN.attrGroup[8].attributes[4].preset Цикл
		Если Не Значениезаполнено(Справочники.КатегорияПродукции_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.КатегорияПродукции_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	
	
	Для Каждого Стр_1 Из NNN.attrGroup[8].attributes[5].valuesTypePreset Цикл
		Если Не Значениезаполнено(Справочники.ТипГОСТМолоко_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ТипГОСТМолоко_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	
	
	Для Каждого Стр_1 Из NNN.attrGroup[8].attributes[8].valuesTypePreset Цикл
		Если Не Значениезаполнено(Справочники.ОтДоТочноеЗначение_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ОтДоТочноеЗначение_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;

	
	Для Каждого Стр_1 Из NNN.attrGroup[12].attributes[2].preset Цикл
		Если Не Значениезаполнено(Справочники.ЗаявленияОЖирностиМолока_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ЗаявленияОЖирностиМолока_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	Для Каждого Стр_1 Из NNN.attrGroup[12].attributes[7].preset Цикл
		Если Не Значениезаполнено(Справочники.Особенности_Питания_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.Особенности_Питания_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	
	
	Для Каждого Стр_1 Из NNN.attrGroup[12].attributes[4].preset Цикл
		Если Не Значениезаполнено(Справочники.ОбогащающиеКомпоненты_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ОбогащающиеКомпоненты_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	
	
	Для Каждого Стр_1 Из NNN.attrGroup[3].attributes[2].valuesTypePreset Цикл
		Если Не Значениезаполнено(Справочники.ЕдиницыИзмеренияПищевойЦенности_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ЕдиницыИзмеренияПищевойЦенности_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
		
	Конеццикла;
	
	Для Каждого Стр_1 Из NNN.attrGroup[3].attributes[3].valuesTypePreset Цикл
		Если Не Значениезаполнено(Справочники.ЕдиницыИзмеренияЭнергетическойЦенности_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ЕдиницыИзмеренияЭнергетическойЦенности_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
	Конеццикла;
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[13].preset Цикл
		Если Не Значениезаполнено(Справочники.Аллергены_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.Аллергены_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[11].preset Цикл
		Если Не Значениезаполнено(Справочники.ТипХранения_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ТипХранения_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	
	
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[7].preset Цикл
		Если Не Значениезаполнено(Справочники.ЦелевойВозраст_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ЦелевойВозраст_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[6].preset Цикл
		Если Не Значениезаполнено(Справочники.ТипОбработкиМолока_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ТипОбработкиМолока_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	
	
	
 	Для Каждого Стр_1 Из NNN.attrGroup[0].attributes[3].valuesTypePreset Цикл
		Если Не Значениезаполнено(Справочники.ПотребительскаяУпаковка_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ПотребительскаяУпаковка_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	
	
	
	
/////ПРОДОЛЖИТЬ	
	Макет_1=Справочники.ТипПродукта_Вода_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Строк=Макет_1.ПолучитьТекст();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строк);
	NNN=ПрочитатьJSON(ЧтениеJSON);
	
	Для Каждого Стр_1 Из NNN.attrGroup[5].attributes[3].valuesTypePreset Цикл
		Если Не Значениезаполнено(Справочники.ТипГОСТТУ_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ТипГОСТТУ_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
	Конеццикла;
	Для Каждого Стр_1 Из NNN.attrGroup[4].attributes[1].valuesTypePreset Цикл
		Если Не Значениезаполнено(Справочники.ТипыДополнительныхСроковГодности_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ТипыДополнительныхСроковГодности_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
	Конеццикла;
	
	
	Для Каждого Стр_1 Из NNN.attrGroup[4].attributes[0].valuesTypePreset Цикл
		Если Не Значениезаполнено(Справочники.ТипыСроковГодности_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ТипыСроковГодности_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
	Конеццикла;
	
	Для Каждого Стр_1 Из NNN.attrGroup[0].attributes[1].valuesTypePreset Цикл
		Если Не Значениезаполнено(Справочники.ЕдиницаИзмерения_Вода_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ЕдиницаИзмерения_Вода_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
	Конеццикла;
	
	
	Для Каждого Стр_1 Из NNN.attrGroup[8].attributes[2].preset   Цикл
		
		Если Не Значениезаполнено(Справочники.СтавкиНДС_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.СтавкиНДС_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[0].preset   Цикл
		
		Если Не Значениезаполнено(Справочники.ТипПродукта_Вода_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ТипПродукта_Вода_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[4].preset     Цикл
		Если Не Значениезаполнено(Справочники.СодержитГМО_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.СодержитГМО_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
		
	Конеццикла;
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[1].preset   Цикл
		
		Если Не Значениезаполнено(Справочники.МетодГазирования_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.МетодГазирования_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	
	Для Каждого Стр_1 Из NNN.attrGroup[2].attributes[2].valuesTypePreset   Цикл
		
		Если Не Значениезаполнено(Справочники.ЕдиницаИзмеренияМинерализации_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_1.text,Истина)) Тогда
			СпрМ=Справочники.ЕдиницаИзмеренияМинерализации_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрМ.Наименование=Стр_1.text;
			СпрМ.Записать();
		КонецЕсли;
		
		
	Конеццикла;
	//Возврат;
	

	Макет_1=Справочники.ТипРамы_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ТипРамы_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	

	Макет_1=Справочники.ВидМатериала_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ВидМатериала_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	Макет_1=Справочники.ВозрастПотребителя_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ВозврастПотребителя_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Макет_1=Справочники.ВидИзделия_Белье_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ВидИзделия_Белье_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	
	
	
	Макет_1=Справочники.ТипИзделия_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ТипИзделия_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	
	
	Макет_1=Справочники.РазмерИзделияГОСТ_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.РазмерИзделияГОСТ_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	Макет_1=Справочники.ВидИзделия_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ВидИзделия_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
		
	
	Макет_1=Справочники.ЦелевойПол_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ЦелевойПол_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
		
	
	
	Макет_1=Справочники.ТипВелосипеда_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ТипВелосипеда_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Макет_1=Справочники.ТипДвигателя_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ТипДвигателя_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
		Макет_1=Справочники.РазмерРамы_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.РазмерРамы_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	


		Макет_1=Справочники.МатериалРамы_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.МатериалРамы_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	

		Макет_1=Справочники.ШиринаПрофиля_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ШиринаПрофиля_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	

		Макет_1=Справочники.ТипТормознойСистемы_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ТипТормознойСистемы_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
		Макет_1=Справочники.ТипПереднейВилки_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ТипПереднейВилки_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
		Макет_1=Справочники.ЕдиницыИзмеренияМощностиДвигателя_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ЕдиницыИзмеренияМощностиДвигателя_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	

	
		Макет_1=Справочники.ГодПроизводства_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ГодПроизводства_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	

	
		Макет_1=Справочники.ЕдиницаИзмеренияРазмераРамы_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ЕдиницаИзмеренияРазмераРамы_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	
	Макет_1=Справочники.ТипПродукта_Молоко_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ТипПродукта_Молоко_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	
	Макет_1=Справочники.ТипПарфюмерии_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ТипПарфюмерии_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	Макет_1=Справочники.ТипШиныПоСпособуГерметизации_Шины_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ТипШиныПоСпособуГерметизации(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	
	Макет_1=Справочники.Сезонность_Шины_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.Сезонность(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	


	
	Макет_1=Справочники.КатегорияСкорости_Шины_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.КатегорияСкорости(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	

	Макет_1=Справочники.ИндексНагрузкиНаШину_Шины_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ИндексНагрузкиНаШину(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	
	Макет_1=Справочники.ТипКонструкцииКаркасаШины_Шины_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ТипКонструкцииКаркасаШины(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	
	
	Макет_1=Справочники.НоминальноеОтношениеВысотыПрофиляШиныКЕгоШирине_Шины_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.НоминальноеОтношениеВысотыПрофиляШиныКЕгоШирине(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	Макет_1=Справочники.ЕдиницаИзмерения_Шины_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ЕдиницаИзмерения_Шины(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	
	
	
	Макет_1=Справочники.ПродукцияДляДетскогоПитания_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ПродукцияДляДетскогоПитания_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Макет_1=Справочники.ПроисхождениеСырья_Молоко_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ПроисхождениеСырья_Молоко_ХамлеоенЦРПТ(Наименование);
			
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Макет_1=Справочники.МатериалУпаковки_Молоко_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.МатериалУпаковки_Молоко_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Макет_1=Справочники.ТипУпаковки_Молоко_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ТипУпаковки_Молоко_ХамелеонЦРПТ(Наименование);
			
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Макет_1=Справочники.ЕдиницаИзмеренияМолока_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ЕдиницыИзмерения_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	
	Макет_1=Справочники.ВидОбуви_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.ВидОбуви_ХамелеонЦРПТ(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		//Продукция=Таб.Область(Сч,1).Текст;
		//Наименование=Таб.Область(Сч,2).Текст;
		//Стр=КодыВидов.Добавить();
		//Стр.КодВида=КодВида;
		//Стр.НаименованиеВида=Наименование;
	КонецЦикла;
	Макет_1=Справочники.РазмерВШтихмассовойСистеме_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Обработки._Запуск_ХамелеонЦРПТ.РазмерСправочник(Наименование);
		Иначе
			Прервать;
			
		КонецЕсли;
		//Продукция=Таб.Область(Сч,1).Текст;
		//Наименование=Таб.Область(Сч,2).Текст;
		//Стр=КодыВидов.Добавить();
		//Стр.КодВида=КодВида;
		//Стр.НаименованиеВида=Наименование;
	КонецЦикла;
	
КонецПроцедуры

Процедура Обновитьстраны()
	Макет_1=Справочники.СтранаПроизводства_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	Таб=Новый ТабличныйДокумент;
	//ОбластьМакета=Макет_1.ПолучитьОбласть("Кодвида");
	Таб.Вывести(Макет_1);
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Если ЗначениеЗАполнено(Таб.Область(Сч,1).Текст) Тогда
			Наименование=СокрЛП(Таб.Область(Сч,1).Текст);
			Альфа2=СокрЛП(Таб.Область(Сч,2).Текст);
			Альфа3=СокрЛП(Таб.Область(Сч,3).Текст);
			Код=СокрЛП(Таб.Область(Сч,4).Текст);
			ЦКод=СокрЛП(Таб.Область(Сч,5).Текст);
			
			СпрСтр=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду(Код);
			Если СпрСтр=Справочники.СтранаПроизводства_ХамелеонЦРПТ.ПустаяСсылка() Тогда
				СпрСтр=Справочники.СтранаПроизводства_ХамелеонЦРПТ.СоздатьЭлемент();
				СпрСтр.Код=Код;
			Иначе
				СпрСтр=СпрСтр.ПолучитьОБъект();
			КонецЕсли;
			СпрСтр.Альфа2=Альфа2;
			СпрСтр.Альфа3=Альфа3;
			СпрСтр.Наименование=Наименование;
			СпрСтр.КодISO=ЦКод;
			СпрСтр.Записать();
			
			
			
		КонецЕсли;
		//Продукция=Таб.Область(Сч,1).Текст;
		//Наименование=Таб.Область(Сч,2).Текст;
		//Стр=КодыВидов.Добавить();
		//Стр.КодВида=КодВида;
		//Стр.НаименованиеВида=Наименование;
	КонецЦикла;
	
КонецПроцедуры

Функция ВернутьСтатусыДокументовПоТабличнойЧасти()
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводВОборот_ХамелеонЦРПТТовары.Ссылка,
		|	ВводВОборот_ХамелеонЦРПТТовары.order_ID
		|ИЗ
		|	Документ.ОплатаЗаКМ_ХамелеонЦРПТ.Товары КАК ВводВОборот_ХамелеонЦРПТТовары
		|ГДЕ
		|	ПОДСТРОКА(ВводВОборот_ХамелеонЦРПТТовары.order_ID, 1, 1000) <> """"
		|	И (ВводВОборот_ХамелеонЦРПТТовары.Статус В(&Статус)
		|ИЛИ ВводВОборот_ХамелеонЦРПТТовары.Статус=Значение(Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ПустаяСсылка))";
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	//Запрос.УстановитьПараметр("ТипДокумента",	Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании); 
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивВ=Новый Массив;
	Сч=0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		МассивВ.Добавить(Новый Структура("Документ,order_ID,Сч",ВыборкаДетальныеЗаписи.Ссылка,ВыборкаДетальныеЗаписи.order_ID,Сч));
		Сч=Сч+1;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Возврат    МассивВ
	
	
Конецфункции




Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	ОбновлятьРегламенты();
	Настройки = РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить();
	ДобавитьПрефиксДляGS1=Настройки.ДобавитьПрефиксДляGS1;
	КодТовараВУПД=Настройки.КодТовараВУПД;
	ДобавитьFNCПриПечатиУпаковок=Настройки.ДобавитьFNCПриПечатиУпаковок;
	ДобавитьДваНуля=Настройки.ДобавитьДваНуля;
	КоличествоЯдерДляГенерацииDataMatrix = Настройки.КоличествоЯдерДляГенерацииDataMatrix;
	ВыгружатьCSV=Настройки.ВыгружатьCSV;
	ВыгружатьОтгрузкуВФормате=Настройки.ВыгружатьОтгрузкуВФормате;
	ВыгружатьЭДОЛайтЧерезXML=Настройки.ВыгружатьЭДОЛайтЧерезXML;
	ГрузитьПоступленияТолькоСМаркировкойПоЭДО=Настройки.ГрузитьПоступленияТолькоСМаркировкойПоЭДО;
	БратьКоличествоИзТабличойЧасти=Настройки.БратьКоличествоИзТабличойЧасти;
	ЗагрузитьПриемкуЭДОЛайт=Настройки.ЗагрузитьПриемкуЭДОЛайт;
	ФормироватьАгрегатПоНовому=Настройки.ФормироватьАгрегатПоНовому;
	КоличествоЗнаковВКМАгрегата=Настройки.КоличествоЗнаковВКМАгрегата;
	НеИспользоватьТокен=Настройки.НеИспользоватьТокен;
	СколькоНаСтранице=10; 
	ФормаОбъект = РеквизитФормыВЗначение("Объект");

	Элементы.ВерсияЦРПТ.Заголовок="Версия: "+ФОрмаОБъект.Метаданные().Комментарий;
	ОбработкаWEBНаСервере=Настройки.ОбработкаWEBНаСервере;
	ПолучитьТокенНаСервере=Настройки.ПолучитьТокенНаСервере;
	
	АвтоматическиОбрабатыватьОшибкуТакаяУпаковкаУжеЕсть=Настройки.АвтоматическиОбрабатыватьОшибкуТакаяУпаковкаУжеЕсть;
	АвтоматическоийПодсчетСуммыПоКМИзКороба=Настройки.АвтоматическоийПодсчетСуммыПоКМИзКороба;
	ЗаписыватьДанныеПриОтправкеЗаказа=Настройки.ЗаписыватьДанныеПриОтправкеЗаказа;
	ЗаполнятьАртикулНачалоРазмерКонец=Настройки.ЗаполнятьАртикулНачалоРазмерКонец;
	ЗапрещатьРедактироватьПриемкуЕслиОнаОтправленаИлиОбработана=Настройки.ЗапрещатьРедактироватьПриемкуЕслиОнаОтправленаИлиОбработана;
	ИздаватьЗвукПрИНеправильнойКМ=Настройки.ИздаватьЗвукПрИНеправильнойКМ;
	Использовать15ШаблонДляАльтернативногоТабакаСУказаниемМРЦ=Настройки.Использовать15ШаблонДляАльтернативногоТабакаСУказаниемМРЦ;
	ПроверятьНаДубльПозицийВОтгрузке=Настройки.ПроверятьНаДубльПозицийВОтгрузке;
	ИспользоватьОтчетОбИспользованияДлМолока=Истина;
	//Настройки.ИспользоватьОтчетОбИспользованияДлМолока;
	КлюКапчи=Настройки.КлюКапчи;
	РасчетОстатков=Настройки.РасчетОстатков;
	ИспользоватьСайтGS1ПоМаркировке=Настройки.ИспользоватьСайтGS1ПоМаркировке;
	ТаймаутОжиданияОтСайта=Настройки.ТаймаутОжиданияОтСайта;
	ТаймаутОжиданияПослеПлученияКМ=Настройки.ТаймаутОжиданияПослеПлученияКМ;
	ЗаполнитьСправочникВнешний("ЗаказМарокОсновная","",Элементы.ГруппаКнопокВнешняя,"Подключаемый_ВыполнитьКомандуВнешняя_ЗаказМарокОсновная");
	ЗаполнитьСправочникВнешний("ВводВОборотОсновная","1",Элементы.ГруппаКнопокВнешняя1,"Подключаемый_ВыполнитьКомандуВнешняя_ВводВОборотОсновная");
	ЗаполнитьСправочникВнешний("ОтгрузкаОсновная","2",Элементы.ГруппаКнопокВнешняя2,"Подключаемый_ВыполнитьКомандуВнешняя_ОтгрузкаОсновная");
	ЗаполнитьСправочникВнешний("ПриемкаОсновная","3",Элементы.ГруппаКнопокВнешняя3,"Подключаемый_ВыполнитьКомандуВнешняя_Приемка");
	ЗаполнитьСправочникВнешний("СписаниеОсновная","4",Элементы.ГруппаКнопокВнешняя4,"Подключаемый_ВыполнитьКомандуВнешняя_СписаниеОсновная");
	Элементы.ЗаказыТаблицаПолучитьКМпоAPIШапка.Видимость=
	Ложь;
	ПроверкаНомеровКМ=Настройки.ПроверкаНомеровКМ;
	ПроверятьПередОтправкойНомерКоробаИСоздаватьНовый=Настройки.ПроверятьПередОтправкойНомерКоробаИСоздаватьНовый;
	УбиратьСкобкиПриСканировании=Настройки.УбиратьСкобкиПриСканировании;
	ОтправлятьПоУмолчаниюАгрегациюЧерезСУЗ=Настройки.ОтправлятьПоУмолчаниюАгрегациюЧерезСУЗ;
	//ОтправлятьЧерновикПоВводуВОборот=Настройки.ОтправлятьЧерновикПоВводуВОборот;
	ПоказыватьОплатуЗаказаЗаКМ=Настройки.ПоказыватьОплатуЗаказаЗаКМ;
	ПолучатьКМВФоне=Настройки.ПолучатьКМВФоне;
	ПоказыватьВкладкуТСД=Настройки.ПоказыватьВкладкуТСД;
	ОбновлятьСтатусыЗаказовКМСДаты=Настройки.ОбновлятьСтатусыЗаказовКМСДаты;
	ФормироватьАгрегациюПоGTIN=Настройки.ФормироватьАгрегациюПоGTIN;
	ЭДОЗаписыватьИныеСведенияВКомментарийПриемка=Настройки.ЭДОЗаписыватьИныеСведенияВКомментарийПриемка;
	БратьGLNОрганизацииДляФормированииАгрегации=Настройки.БратьGLNОрганизацииДляФормированииАгрегации;
	РаботатьНаV1=Настройки.РаботатьНаV1;
	ПослеОтправкиОтчетовВСУЗПодписать=Настройки.ПослеОтправкиОтчетовВСУЗПодписать;
	ПриЗагрузкеПриемкиЗаполнятьПроверкаПоКМ=Настройки.ПриЗагрузкеПриемкиЗаполнятьПроверкаПоКМ;
	ПриЗагрузкеИзЭДООбновлятьНазваниеПродукции=Настройки.ПриЗагрузкеИзЭДООбновлятьНазваниеПродукции;
	ПриЗагрузкеИнформацииПоЭДОПриемкаВКоличество=Настройки.ПриЗагрузкеИнформацииПоЭДОПриемкаВКоличество;
	НеДобавлятьКМПриФормированииXML=Настройки.НеДобавлятьКМПриФормированииXML;
	КачатьСЭДОЗаПоследниеДни=Настройки.КачатьСЭДОЗаПоследниеДни;
	ОтправлятьОбувьЧерезAPI=Настройки.ОтправлятьОбувьЧерезAPI;
	ПриЗаполненииОтгрузкиНеУчитыватьОстаток=Настройки.ПриЗаполненииОтгрузкиНеУчитыватьОстаток;
	ПриОтправкеВCSVУмножатьСуммыНа100=Настройки.ПриОтправкеВCSVУмножатьСуммыНа100;
	ПриОтправкеВЦРТИЭДОПроверятьСтатусКМ=Настройки.ПриОтправкеВЦРТИЭДОПроверятьСтатусКМ;
	ПриПроверкеСхемыПриОтгрузкеЕслиОшибкаНеФормироватьФайл	=Настройки.ПриПроверкеСхемыПриОтгрузкеЕслиОшибкаНеФормироватьФайл;
	ПриСканированииВПриемкеИскатьСтрочки=Настройки.ПриСканированииВПриемкеИскатьСтрочки;
	ПриФормированииXMLДобавлятьКМПоКоробам=Настройки.ПриФормированииXMLДобавлятьКМПоКоробам;
	
	
	ПриПроведенииПриемкиПриходоватьКМВоВложении=Настройки.ПриПроведенииПриемкиПриходоватьКМВоВложении;
	
	
	ПриФормированииXMLНеПолучитьИнформациюОКМВоВложении=Настройки.ПриФормированииXMLНеПолучитьИнформациюОКМВоВложении;
	ПодверждатьЗакрытиеХамелеонЦРПТ=Настройки.ПодверждатьЗакрытиеХамелеонЦРПТ;
	
	ПодключатьсяАвтоматическиПоЦРПТ=Настройки.ПодключатьсяАвтоматическиПоЦРПТ;
	ЗагрузатьНаименованиеПриПриемке=Настройки.ЗагрузатьНаименованиеПриПриемке;
	ЗагружатьВсеПриходы=Настройки.ЗагружатьВсеПриходы;
	ОпределятьНазваниеНеИзЦРПТПриОтгрузке=Настройки.ОпределятьНазваниеНеИзЦРПТПриОтгрузке;
	ОтправлятьНеУчастнику=Настройки.ОтправлятьНеУчастнику;
	ОтправлятьВЭДООткрепленнуюПодпись=Настройки.ОтправлятьВЭДООткрепленнуюПодпись;
	НеЭмитировать=Настройки.НеЭмитировать;
	КодВУчетнойСистемеИзXML=Настройки.КодВУчетнойСистемеИзXML;
	ОбновлятьКодВУчетнойСистеме=Настройки.ОбновлятьКодВУчетнойСистеме;
	ОбрезатьКМДляТабака=Настройки.ОбрезатьКМДляТабака;
	КоличествоКМВЗаказеОтображаемое=Настройки.КоличествоКМВЗаказеОтображаемое;
	НеИспользоватьCAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY=Настройки.НеИспользоватьCAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY;
	УбратьПриемкуЕслиНетСопоставления=Настройки.УбратьПриемкуЕслиНетСопоставления;
	Элементы.ПроверкаМарок.Видимость=ПроверкаНомеровКМ;
	
	// Вставить содержимое обработчика.
	Таб=Новый ТабличныйДокумент;
	Макет=РегистрыСведений.Адрес_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	ОбластьМакета=Макет.ПолучитьОбласть("Область");
	Таб.Вывести(ОбластьМакета);
	//ТаблицаАдресов=Новый ТаблицаЗначений;
	//ТаблицаАдресов.Колонки.Добавить("Адрес");
	//ТаблицаАдресов.Колонки.Добавить("КодРегиона");
	ТаблицаРегионов.Очистить();
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		АСС=ТаблицаРегионов.Добавить();
		АСС.КодРегиона=Сред(Таб.Область(Сч,1).Текст,1,2);
		АСС.Название=Таб.Область(Сч,2).Текст+" "+Таб.Область(Сч,3).Текст;
	КонецЦикла;
	ВидимостьОплатаЗаЗаказКМ();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуВнешняя_СписаниеОсновная(Команда)
	
//	// Вставить содержимое обработчика.	// Вставить содержимое обработчика.
	//Если Элементы.Списание.ТекущиеДанные<>Неопределено Тогда
		
		Попытка
			ВернДв=ВернутьИмяФайла(Команда.Имя);
			Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
				ДвоичныеДанные=ВернДв;
			Иначе
				ДвоичныеДанные=Новый ДвоичныеДанные(ВернДв);
			Конецесли;
			ОбработкаИмя=ПолучитьИмяВнешней(Двоичныеданные);
			Если Элементы.Списание.ТекущиеДанные<>Неопределено Тогда
				ОткрытьФорму("ВнешняяОбработка."+ОбработкаИмя+".Форма",Новый Структура("Ссылка",Элементы.Списание.ТекущиеДанные.Ссылка),ЭтаФорма);
			Иначе
				ОткрытьФорму("ВнешняяОбработка."+ОбработкаИмя+".Форма",Новый Структура("Ссылка",Неопределено),ЭтаФорма);
			
			КонецЕсли;
		Исключение
			Попытка
#Если ТолстыйКлиентОбычноеПриложение  Тогда
		ВернДв=ВернутьИмяФайла(Команда.Имя);
		Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
			//ДвоичныеДанные=ВернДв;
			ДвоичныеДанные=ПолучитьИмяВременногоФайла();
			ВернДв.Записать(ДвоичныеДанные);
			
		Иначе
			ДвоичныеДанные=ВернДв;
		Конецесли;
				ВернутьВн(ДвоичныеДанные);
				Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
					УдалитьФайлы(ДвоичныеДанные);
				КонецЕсли;
#Иначе
				
			ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
#КонецЕсли
			Исключение
				ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
			КонецПопытки;
		КонецПопытки;
	//КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуВнешняя_ОтгрузкаОсновная(Команда)
	
//	// Вставить содержимое обработчика.	// Вставить содержимое обработчика.
		
		Попытка
			ВернДв=ВернутьИмяФайла(Команда.Имя);
			Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
				ДвоичныеДанные=ВернДв;
			Иначе
				ДвоичныеДанные=Новый ДвоичныеДанные(ВернДв);
			Конецесли;
			ОбработкаИмя=ПолучитьИмяВнешней(Двоичныеданные);
			Если Элементы.Отгрузка_Список.ТекущиеДанные<>Неопределено Тогда
				ОткрытьФорму("ВнешняяОбработка."+ОбработкаИмя+".Форма",Новый Структура("Ссылка",Элементы.Отгрузка_Список.ТекущиеДанные.Ссылка),ЭтаФорма);
			Иначе
				ОткрытьФорму("ВнешняяОбработка."+ОбработкаИмя+".Форма",Новый Структура("Ссылка",Неопределено),ЭтаФорма);
			
			КонецЕсли;
		Исключение
			Попытка
#Если ТолстыйКлиентОбычноеПриложение  Тогда
		ВернДв=ВернутьИмяФайла(Команда.Имя);
		Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
			//ДвоичныеДанные=ВернДв;
			ДвоичныеДанные=ПолучитьИмяВременногоФайла();
			ВернДв.Записать(ДвоичныеДанные);
			
		Иначе
			ДвоичныеДанные=ВернДв;
		Конецесли;
				ВернутьВн(ДвоичныеДанные);
				Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
					УдалитьФайлы(ДвоичныеДанные);
				КонецЕсли;
#Иначе
				
			ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
#КонецЕсли
			Исключение
				ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
			КонецПопытки;
		КонецПопытки;
	//КонецЕсли;
КонецПроцедуры



&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуВнешняя_ВводВОборотОсновная(Команда)
	
//	// Вставить содержимое обработчика.	// Вставить содержимое обработчика.
		
		Попытка
			ВернДв=ВернутьИмяФайла(Команда.Имя);
			Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
				ДвоичныеДанные=ВернДв;
			Иначе
				ДвоичныеДанные=Новый ДвоичныеДанные(ВернДв);
			Конецесли;
			ОбработкаИмя=ПолучитьИмяВнешней(Двоичныеданные);
			Если Элементы.ВводВОборотТаблица.ТекущиеДанные<>Неопределено Тогда
				ОткрытьФорму("ВнешняяОбработка."+ОбработкаИмя+".Форма",Новый Структура("Ссылка",Элементы.ВводВОборотТаблица.ТекущиеДанные.Ссылка),ЭтаФорма);
			Иначе
				ОткрытьФорму("ВнешняяОбработка."+ОбработкаИмя+".Форма",Новый Структура("Ссылка",Неопределено),ЭтаФорма);
				
			КонецЕсли;
		Исключение
			Попытка
#Если ТолстыйКлиентОбычноеПриложение  Тогда
		ВернДв=ВернутьИмяФайла(Команда.Имя);
		Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
			//ДвоичныеДанные=ВернДв;
			ДвоичныеДанные=ПолучитьИмяВременногоФайла();
			ВернДв.Записать(ДвоичныеДанные);
			
		Иначе
			ДвоичныеДанные=ВернДв;
		Конецесли;
				ВернутьВн(ДвоичныеДанные);
				Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
					УдалитьФайлы(ДвоичныеДанные);
				КонецЕсли;
#Иначе
				
			ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
#КонецЕсли
			Исключение
				ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
			КонецПопытки;
		КонецПопытки;
//	КонецЕсли;
КонецПроцедуры



&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуВнешняя_ЗаказМарокОсновная(Команда)
	
//	// Вставить содержимое обработчика.	// Вставить содержимое обработчика.
		
		Попытка
			ВернДв=ВернутьИмяФайла(Команда.Имя);
			Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
				ДвоичныеДанные=ВернДв;
			Иначе
				ДвоичныеДанные=Новый ДвоичныеДанные(ВернДв);
			Конецесли;
			ОбработкаИмя=ПолучитьИмяВнешней(Двоичныеданные);
			Если Элементы.ЗаказыТаблица.ТекущиеДанные<>Неопределено Тогда
				ОткрытьФорму("ВнешняяОбработка."+ОбработкаИмя+".Форма",Новый Структура("Ссылка",Элементы.ЗаказыТаблица.ТекущиеДанные.Ссылка),ЭтаФорма);
			Иначе
				ОткрытьФорму("ВнешняяОбработка."+ОбработкаИмя+".Форма",Новый Структура("Ссылка",Неопределено),ЭтаФорма);
				
			КонецЕсли;
		Исключение
			Попытка
#Если ТолстыйКлиентОбычноеПриложение  Тогда
		ВернДв=ВернутьИмяФайла(Команда.Имя);
		Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
			//ДвоичныеДанные=ВернДв;
			ДвоичныеДанные=ПолучитьИмяВременногоФайла();
			ВернДв.Записать(ДвоичныеДанные);
			
		Иначе
			ДвоичныеДанные=ВернДв;
		Конецесли;
				ВернутьВн(ДвоичныеДанные);
				Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
					УдалитьФайлы(ДвоичныеДанные);
				КонецЕсли;
#Иначе
				
			ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
#КонецЕсли
			Исключение
				ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
			КонецПопытки;
		КонецПопытки;
	//КонецЕсли;
КонецПроцедуры



&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуВнешняя_Приемка(Команда)
	
//	// Вставить содержимое обработчика.	// Вставить содержимое обработчика.
		
		Попытка
			ВернДв=ВернутьИмяФайла(Команда.Имя);
			Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
				ДвоичныеДанные=ВернДв;
			Иначе
				ДвоичныеДанные=Новый ДвоичныеДанные(ВернДв);
			Конецесли;
			ОбработкаИмя=ПолучитьИмяВнешней(Двоичныеданные);
			Если Элементы.Приемкасписок.ТекущиеДанные<>Неопределено Тогда
				ОткрытьФорму("ВнешняяОбработка."+ОбработкаИмя+".Форма",Новый Структура("Ссылка",Элементы.Приемкасписок.ТекущиеДанные.Ссылка),ЭтаФорма);
			Иначе
				ОткрытьФорму("ВнешняяОбработка."+ОбработкаИмя+".Форма",Новый Структура("Ссылка",Неопределено),ЭтаФорма);
			
			КонецЕсли;
		Исключение
			Попытка
#Если ТолстыйКлиентОбычноеПриложение  Тогда
		ВернДв=ВернутьИмяФайла(Команда.Имя);
		Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
			//ДвоичныеДанные=ВернДв;
			ДвоичныеДанные=ПолучитьИмяВременногоФайла();
			ВернДв.Записать(ДвоичныеДанные);
			
		Иначе
			ДвоичныеДанные=ВернДв;
		Конецесли;
				ВернутьВн(ДвоичныеДанные);
				Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
					УдалитьФайлы(ДвоичныеДанные);
				КонецЕсли;
#Иначе
				
			ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
#КонецЕсли
			Исключение
				ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
			КонецПопытки;
		КонецПопытки;
//	КонецЕсли;
КонецПроцедуры

#Если ТолстыйКлиентОбычноеПриложение  Тогда
&НаКлиенте
Процедура ВернутьВн(ДвоичныеДанные)
	//ИмяВременФ=ПолучитьИмяВременногоФайла();
	//ДвоичныеДанные.Записать(ИмяВременФ);
	ВнешняяОбработка=ВнешниеОбработки.Создать(ДвоичныеДанные);
	Фоорма=ВнешняяОбработка.ПолучитьФорму(,ЭтаФорма);
	Попытка
		Фоорма.УФ=ЭтаФорма;
	Исключение
	КонецПопытки;
	Фоорма.Открыть();
Конецпроцедуры      	
#КонецЕсли



Функция ВернутьИмяФайла(Команда)
//	Если РегистрыСведений.НастройкиПрограммыЦРПТ.Получить().ЗагружатьВнешниеОбработкиИзХранилища Тогда
		Возврат Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоКоду(Сред(Команда,8)).Хранилище.Получить();
//	Иначе
//		СпрВн=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоКоду(Сред(Команда,8));
//	Конецесли;
	
//	Возврат СпрВн.ИмяВнешнейОБработки
	//НаимСправочника=Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя();
	//Спр=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоНаименованию(НаимСправочника,Истина);
	//Если Спр<>Справочники.ВнешниеОбработки_ХамелеонЦРПТ.ПустаяСсылка() Тогда
	//	Возврат Спр.ИмяВнешнейОБработки;
	//Конецесли;
	
КонецФункции

Функция ПолучитьИмяВнешней(ИмяФайла)
    АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ИмяФайла);
    ИмяОбр = ВнешниеОбработки.Подключить(АдресВоВременномХранилище,,Ложь);
    Возврат ИмяОбр;
КонецФункции



Процедура   ЗаполнитьСправочникВнешний(ИмяСпрД,Доп,ГруппаКнопокВнешняя,ИмяДейстия)
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнешниеОбработки_ХамелеонЦРПТ.ИмяВнешнейОБработки,
		|	ВнешниеОбработки_ХамелеонЦРПТ.НаименованиеКнопки,
		|	ВнешниеОбработки_ХамелеонЦРПТ.Код
		|ИЗ
		|	Справочник.ВнешниеОбработки_ХамелеонЦРПТ КАК ВнешниеОбработки_ХамелеонЦРПТ
		|ГДЕ
		|	ВнешниеОбработки_ХамелеонЦРПТ.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", ИмяСпрД); //"Документ.ВетеринарныеСправки_ХамелеонЦРПТ");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ИмяКоманды="Команда"+ВыборкаДетальныеЗаписи.Код;
		Попытка
		КомандаФормы = Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = ИмяДейстия;
		КомандаФормы.Заголовок = ВыборкаДетальныеЗаписи.ИмяВнешнейОБработки;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.Текст;
		
		//ОписаниеКомандыПечати.ИмяКомандыНаФорме = ИмяКоманды;
		
		НовыйЭлемент = Элементы.Добавить("ГруппаКнопокВнешняя"+Доп+ ИмяКоманды, Тип("КнопкаФормы"), ГруппаКнопокВнешняя);
		НовыйЭлемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		НовыйЭлемент.Заголовок=ВыборкаДетальныеЗаписи.НаименованиеКнопки;
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	Исключение
	КонецПопытки;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
КонецПроцедуры


&НаСервереБезКонтекста
Процедура HELPНаСервере(Теккк)
	// Вставить содержимое обработчика.
	Мак=Обработки._Запуск_ХамелеонЦРПТ.ПолучитьМакет("HELP");
	Теккк=Мак;
КонецПроцедуры

&НаКлиенте
Процедура HELP(Команда)
	Текст=Новый ТекстовыйДокумент;
	HELPНаСервере(Текст);
	Текст.Показать();
КонецПроцедуры

&НаСервере
Процедура ПользовательскоеСоглашениеНаСервере(Тект)
	// Вставить содержимое обработчика.
	ОлМ=Обработки._Запуск_ХамелеонЦРПТ.ПолучитьМакет("ПользовательскоеСоглашение");
	Тект.Вывести(Олм);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательскоеСоглашение(Команда)
	Тект=Новый ТабличныйДокумент;
//	Команда8НаСервере(Тект);
	ПользовательскоеСоглашениеНаСервере(Тект);
	Тект.Показать();
КонецПроцедуры

Функция НаКлиенте(ПараметрыДлякилента,Доб=Неопределено,НомерД=Неопределено) Экспорт
	Доб=РегистрыСведений.ПриемкаПоОрганизациям_ХамелеонЦРПТ.Получить(Новый Структура("Организация,СайтВходаВСистему",Пользователь.Организация,Пользователь.СайтыВходаВСистему)).ДатаОтсчета;
	НомерД=РегистрыСведений.ПриемкаПоОрганизациям_ХамелеонЦРПТ.Получить(Новый Структура("Организация,СайтВходаВСистему",Пользователь.Организация,Пользователь.СайтыВходаВСистему)).did;
	ПараметрыДлякилента=Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(Пользователь,ТекСайт);
	
	
	//Новый Структура;
	//ПараметрыДлякилента.Вставить("Пользователь",Пользователь.Логин);
	//ПараметрыДлякилента.Вставить("Пароль",Пользователь.Пароль);
	//Если    Пользователь.Сайт=Перечисления.Сайты_ХамелеонЦРПТ.Обувь Тогда
	//	ТекСайт=Строка(Перечисления.Сайты_ХамелеонЦРПТ.Обувь);
	//Иначе
	//	ПараметрыДлякилента.Вставить("Пользователь","");
	//	ПараметрыДлякилента.Вставить("Пароль","");
	//	
	//КонецЕсли;
	//
	//ПараметрыДлякилента.Вставить("АдресПрокси",Пользователь.АдресПрокси);
	//ПараметрыДлякилента.Вставить("ПортПрокси",Пользователь.ПортПрокси);
	//ПараметрыДлякилента.Вставить("ПользовательПрокси",Пользователь.ПользовательПрокси);
	//ПараметрыДлякилента.Вставить("ПарольПрокси",Пользователь.ПарольПрокси);
	//
	//
	//ПараметрыДлякилента.Вставить("АдресСУЗ",Пользователь.АдресСайтаСУЗ);
	//ПараметрыДлякилента.Вставить("ПользовательСУЗ",Пользователь.ПользовательСУЗ);
	//ПараметрыДлякилента.Вставить("ПарольСУЗ",Пользователь.ПарольСУЗ);
	//ПараметрыДлякилента.Вставить("ТокенСУЗ",Пользователь.ТокенКСУЗ);
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура Подключиться(Команда,Выводить=Истина,УдачноТожеВыводить=Ложь) Экспорт
	
	Если ИспользоватьСайтGS1ПоМаркировке Тогда
		

	ПараметрыДлякилента=Неопределено;
	Если НаКлиенте(ПараметрыДлякилента) Тогда
			Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение("srs.gs1ru.org",,,,Прокси,ПараметрыДлякилента.Таймаут,Новый ЗащищенноеСоединениеOpenSSL);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение("srs.gs1ru.org",,,,,ПараметрыДлякилента.Таймаут,Новый ЗащищенноеСоединениеOpenSSL);
			КонецЕсли;
			HTTPЗапрос = Новый HTTPЗапрос("login");
			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
			//HTTPЗапрос.Заголовки.Вставить("Cookie", "X-Oracle-BMC-LBS-Route=717d81046d26723fb1eeb82b13dca94babe8ee96");
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			
			
			ВсеКУки=Ответ.Заголовки["Set-Cookie"];
			Если   ВсеКУки=Неопределено тогда
				ВсеКУки=Ответ.Заголовки["set-cookie"];
				
			Конецесли;
			ВсеКуки=СтрЗаменитЬ(ВсеКуки,",",Символы.ПС);
 			
			
		//	Oracle="717d81046d26723fb1eeb82b13dca94babe8ee96";
		    Oracle="";
		
			Кэш_3="";
			JSESSIONID="";
			Если ЗначениеЗАполнено(ВсеКУки) тогда
				Для Сч_1=1 По СтрЧислоСтрок(ВсеКуки) Цикл
					
					ПолучитьСтроку=СтрПолучитьСтроку(ВсеКуки,Сч_1);
					//Если Найти(ПолучитьСтроку,"Set-Cookie")=1 
					//	Тогда
					Если ЗначениеЗаполнено(Кэш_3) Тогда
						Кэш_3=Кэш_3+";";
					Конецесли;
						//КэшТ=КэшТ+ПолучитьСтроку;
						Коок=ПолучитьСтроку;
						Коок=Сред(Коок,1,Найти(Коок,";")-1);
						Кэш_3=Кэш_3+Коок;
						Если Найти(ПолучитьСтроку,"X-Oracle-BMC-LBS-Route")>0 Тогда
							//ПродолжитЬ;
							Oracle=Коок;
						Конецесли;
						Если Найти(КооК,"JSESSIONID")>0 Тогда
							JSESSIONID=Коок;
						Конецесли;
					
				КонецЦикла;
			
				
			КонецЕсли;
			
			Если Ответ.КодСостояния<>200 Тогда
				
					Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение("srs.gs1ru.org",,,,Прокси,ПараметрыДлякилента.Таймаут,Новый ЗащищенноеСоединениеOpenSSL);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение("srs.gs1ru.org",,,,,ПараметрыДлякилента.Таймаут,Новый ЗащищенноеСоединениеOpenSSL);
			КонецЕсли;
			HTTPЗапрос = Новый HTTPЗапрос("login");
			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
			HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_3);
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			
			
			ВсеКУки=Ответ.Заголовки["Set-Cookie"];
			Если   ВсеКУки=неопределено тогда
			ВсеКУки=Ответ.Заголовки["set-cookie"];
				
				
			Конецесли;
			ВсеКуки=СтрЗаменитЬ(ВсеКуки,",",Символы.ПС);
 			
			
		//	Oracle="717d81046d26723fb1eeb82b13dca94babe8ee96";
		    Oracle="";
		
			Кэш_3="";
			JSESSIONID="";
			Если ЗначениеЗАполнено(ВсеКУки) тогда
				Для Сч_1=1 По СтрЧислоСтрок(ВсеКуки) Цикл
					
					ПолучитьСтроку=СтрПолучитьСтроку(ВсеКуки,Сч_1);
					//Если Найти(ПолучитьСтроку,"Set-Cookie")=1 
					//	Тогда
					Если ЗначениеЗаполнено(Кэш_3) Тогда
						Кэш_3=Кэш_3+";";
					Конецесли;
						//КэшТ=КэшТ+ПолучитьСтроку;
						Коок=ПолучитьСтроку;
						Коок=Сред(Коок,1,Найти(Коок,";")-1);
						Кэш_3=Кэш_3+Коок;
						Если Найти(ПолучитьСтроку,"X-Oracle-BMC-LBS-Route")>0 Тогда
							//ПродолжитЬ;
							Oracle=Коок;
						Конецесли;
						Если Найти(КооК,"JSESSIONID")>0 Тогда
							JSESSIONID=Коок;
						Конецесли;
					
				КонецЦикла;
			
				
			КонецЕсли;
			

				
				
				
			КонецеслИ;

			
	//

//			HTTPСервисЗапрос.Open("POST", "https://srs.gs1ru.org/login", 0);
			//Обработки._Запуск_ХамелеонЦРПТ.УстановитьПрокси(HTTPСервисЗапрос);
			HTTPЗапрос = Новый HTTPЗапрос("login");
			HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_3);
		  	Тело="j_character_encoding=UTF-8&username="+ПараметрыДлякилента.Пользователь+"&password="+ПараметрыДлякилента.Пароль;
		
			HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
			//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
			//HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
			HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Origin", "https://srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Content-Length", Формат(СтрДлина(Тело),"ЧГ="));
			HTTPЗапрос.Заголовки.Вставить("Referer", "https://srs.gs1ru.org/login");
			HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
//			Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko");
			//HTTPСервисЗапрос.SetRequestHeader("Connection" ,"Keep-Alive");
			//HTTPСервисЗапрос.SetRequestHeader("Host" ,"mercury.vetrf.ru");
			//HTTPЗапрос = Новый HTTPЗапрос("hs/",Заголовки);
//			Ответ=HTTPСервисЗапрос_Merc.Получить(HTTPЗапрос);

														#Если ВебКлиент Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
					#Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
																		#КонецЕсли

			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
			ВсеКуки=Ответ.Заголовки["Set-Cookie"];
			Если   ВсеКуки=Неопределено тогда
			ВсеКуки=Ответ.Заголовки["set-cookie"];
				
				
			Конецесли;
			ВсеКуки=СтрЗаменитЬ(ВсеКуки,",",Символы.ПС);
			
			//СтруктураКук=СтрРазделить(ВсеКуки,";") ;
			
			Кэш_Т=Oracle;
			
			Если Найти(ВсеКуки,"JSESSIONID")>0 Тогда
				JSESSIONID="";
			Конецесли;
			Если ЗначениеЗАполнено(ВсеКУки) тогда
				Для Сч_1=1 По СтрЧислоСтрок(ВсеКуки) Цикл
					
					ПолучитьСтроку=СтрПолучитьСтроку(ВсеКуки,Сч_1);
					
					Если Найти(ПолучитьСтроку,"=")=0 Тогда
						Продолжить;
					Конецесли;
					
						Если Найти(ПолучитьСтроку,"X-Oracle-BMC-LBS-Route")>0 Тогда
							Продолжить;
						Конецесли;
					
					//Если Найти(ПолучитьСтроку,"Set-Cookie")=1 
					//	Тогда
					Если ЗначениеЗаполнено(Кэш_Т) Тогда
						Кэш_Т=Кэш_Т+";";
					Конецесли;
						//КэшТ=КэшТ+ПолучитьСтроку;
						Коок=ПолучитьСтроку;
						Коок=Сред(Коок,1,Найти(Коок,";")-1);
						Кэш_Т=Кэш_Т+Коок;
						Если Найти(КооК,"JSESSIONID")>0 Тогда
							JSESSIONID=Коок;
						Конецесли;
						
						
						//Request.SetRequestHeader("Cookie",Коок);
					//КонецЕсли;
				КонецЦикла;
			
				
			КонецЕсли;
	//
			
			HTTPЗапрос = Новый HTTPЗапрос("index.jsp");
			HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
			
			HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
			//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
			HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
			//HTTPЗапрос.Заголовки.Вставить("Origin", "https://srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Referer", "https://srs.gs1ru.org/login");
			HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
			
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			//Кэш_Т=Ответ.Заголовки["Set-Cookie"];
			XORACLEAPMCSREQUESTID=Ответ.Заголовки["X-ORACLE-APMCS-REQUEST-ID"];
			Кэш_Т=Ответ.Заголовки["Set-Cookie"];
			Если Кэш_Т=Неопределено Тогда
				Кэш_Т=Ответ.Заголовки["set-cookie"];
				
				
			Конецесли;
			Ответ=Ответ.ПолучитьТелоКакСтроку();
			Подключились=Ложь;
 			//HTTPСервисЗапрос.Send(Тело);
			//HTTPСервисЗапрос.WaitForResponse();
			
		//		HTTPСервисЗапрос.Open("GET", "https://srs.gs1ru.org/index.jsp", 0);
		//	HTTPСервисЗапрос.Send();
		//	HTTPСервисЗапрос.WaitForResponse();
		//	Ответ=HTTPСервисЗапрос.ResponseText;
		
			Организации.Очистить();
			Если Найти(Ответ,"Единый язык")>0 Тогда
				
					
				ВсеКуки=СтрЗаменитЬ(Кэш_Т,",",Символы.ПС);
		//		
		//		//СтруктураКук=СтрРазделить(ВсеКуки,";") ;
		//	
		
					Кэш_Т=Oracle+";"+JSESSIONID;
		
				Если ЗначениеЗАполнено(ВсеКУки) тогда
					Для Сч_1=1 По СтрЧислоСтрок(ВсеКуки) Цикл
						Если Найти(ПолучитьСтроку,"=")=0 Тогда
							Продолжить;
						Конецесли;
					    Если Найти(ПолучитьСтроку,"X-Oracle-BMC-LBS-Route")>0 Тогда
							Продолжить;
						Конецесли;
						

						Если Найти(ПолучитьСтроку,"JSESSIONID")>0 Тогда
							Продолжить;
						Конецесли;
						
						ПолучитьСтроку=СтрПолучитьСтроку(ВсеКуки,Сч_1);
						//Если Найти(ПолучитьСтроку,"Set-Cookie")=1 
						//	Тогда
						Если ЗначениеЗаполнено(Кэш_Т) Тогда
							Кэш_Т=Кэш_Т+";";
						Конецесли;
							//КэшТ=КэшТ+ПолучитьСтроку;
							Коок=ПолучитьСтроку;
							Коок=Сред(Коок,1,Найти(Коок,";")-1);
							Кэш_Т=Кэш_Т+Коок;
							//Если Найти(КооК,"JSESSIONID")>0 Тогда
							//	JSESSIONID=Коок;
							//Конецесли;
							
							//Request.SetRequestHeader("Cookie",Коок);
						//КонецЕсли;
					КонецЦикла;
		//		
		//			
				КонецЕсли;
		////
		//		Кэш_Т=Кэш_Т+";"+JSESSIONID; 

				
				
				
				Подключились=Истина;
				Добав=Организации.Добавить();
				Организация_1=Сред(Ответ,Найти(Ответ,"<td style=""font-weight: bold;"">")+31);
				НаимОрг=СокрЛП(Сред(Организация_1,1,Найти(Организация_1,Символы.ПС)));
				ГлобалКод=Сред(НаимОрг,1,Найти(НаимОрг," ")-1);
				НаимОрг=Сред(НаимОрг,Найти(НаимОрг," ")+1);
				Статистка="<!DOCTYPE HTML>
|<html class=""portal-ru"">
|<head>
|";
				Ст_1=Сред(Ответ,Найти(Ответ,"<td width=""25%"""));
				Статистка=Статистка+"
				|"+Сред(Ст_1,1,Найти(Сред(Ст_1,2),"<td width=""25%"""));
				
				ИНН="";
				НАимПользователя=Сред(Организация_1,Найти(Организация_1,"<td style=""font-weight: bold;"">")+31);
				НАимПользователя=СокрЛП(Сред(НАимПользователя,Найти(НАимПользователя," ")+1));
				НАимПользователя=СокрЛП(Сред(НАимПользователя,1,Найти(НАимПользователя," ")-1));
				ПользНаим(НАимПользователя);
				Добав.ПОльзователь=Пользователь;
				
				HTTPЗапрос = Новый HTTPЗапрос("Ui/Ui.nocache.js?ui_ver=3.0.446-SNAPSHOT");
				HTTPЗапрос.Заголовки.Вставить("Accept", "*/*");
				HTTPЗапрос.Заголовки.Вставить("Referer", "https://srs.gs1ru.org/index.jsp");
				HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
				HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
				 HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
				
				Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
				//Кэш_Т=Ответ.Заголовки["Set-Cookie"];
				Ответ=Ответ.ПолучитьТелоКакСтроку();
				Если Найти(Ответ,"oc='")>0 Тогда
					qr=Сред(Ответ,Найти(Ответ,"oc='")+4);
					qr=Сред(qr,1,Найти(qr,"'")-1);
					
					
					HTTPЗапрос = Новый HTTPЗапрос("Ui/"+qr+".cache.js");
					HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
					HTTPЗапрос.Заголовки.Вставить("Referer", "https://srs.gs1ru.org/index.jsp");
					HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
					
					Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
					//Кэш_Т=Ответ.Заголовки["Set-Cookie"];
					Ответ=Ответ.ПолучитьТелоКакСтроку();
					Если Найти(Ответ,"'springGwtServices/setupService','")>0 Тогда
						setupService=Сред(Ответ,Найти(Ответ,"'springGwtServices/setupService','")+34);
						setupService=Сред(setupService,1,Найти(setupService,"'")-1);
						
						
						HTTPЗапрос = Новый HTTPЗапрос("Ui/springGwtServices/setupService");
						
						HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
						
						Передаем="7|0|4|https://srs.gs1ru.org/Ui/|"+setupService+"|com.gs46.api.client.service.SetupService|getInitialData|1|2|3|4|0|";
						HTTPЗапрос.Заголовки.Вставить("Content-Length", Формат(СтрДлина(Передаем),"ЧГ="));
						
						HTTPЗапрос.Заголовки.Вставить("X-GWT-Permutation", qr);
						HTTPЗапрос.Заголовки.Вставить("X-GWT-Module-Base", "https://srs.gs1ru.org/Ui/");
						
						
						HTTPЗапрос.Заголовки.Вставить("Accept", "*/*");
						//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
						HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
						HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
		//				HTTPЗапрос.Заголовки.Вставить("Content-Length", "128");
						HTTPЗапрос.Заголовки.Вставить("Content-Type", "text/x-gwt-rpc; charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
						HTTPЗапрос.Заголовки.Вставить("Origin", "https://srs.gs1ru.org");
						HTTPЗапрос.Заголовки.Вставить("Referer", "https://srs.gs1ru.org/index.jsp");
						//HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
						HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
						
						//ИмяФайлаОтправкиКонец = ПолучитьИмяВременногоФайла("txt");
					    //ФайлОтправкиКонец = Новый ЗаписьТекста(ИмяФайлаОтправкиКонец, КодировкаТекста.ANSI, Символы.ПС, Ложь);

					    //Завершение раздела двоичных данных
					    //Завершение сообщения для сервера
						
						//ФайлОтправкиКонец.ЗаписатьСтроку("7|0|4|https://srs.gs1ru.org/Ui/|"+setupService+"|com.gs46.api.client.service.SetupService|getInitialData|1|2|3|4|0|");
					    //ФайлОтправкиКонец.Закрыть();

						//HTTPЗапрос.УстановитьТелоИзСтроки(КодироватьСтрСерверURL("7|0|4|https://srs.gs1ru.org/Ui/|"+setupService+"|com.gs46.api.client.service.SetupService|getInitialData|1|2|3|4|0|"));
						//HTTPЗапрос.УстановитьИмяФайлаТела((УстановитьТелоИзСтроки(
						//КодироватьСтрСерверURL(
						//7|0|4|http://srs.gs1ru.org/Ui/|"+setupService+"|com.gs46.api.client.service.SetupService|getInitialData|1|2|3|4|0|"));
						//"7|0|4|http://srs.gs1ru.org/Ui/|"+setupService+"|com.gs46.api.client.service.SetupService|getInitialData|1|2|3|4|0|"
						//)
						//);
						HTTPЗапрос.УстановитьТелоИзСтроки(Передаем,
						КодировкаТекста.ANSI);
						//HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаОтправкиКонец);
		 				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
						//Кэш_Т=Ответ.Заголовки["Set-Cookie"];
						Ответ=Ответ.ПолучитьТелоКакСтроку();
						Если Найти(Ответ,"""ENT_INN"",""")>0 Тогда
							ИНН=Сред(Ответ,Найти(Ответ,"""ENT_INN"",""")+11);
							ИНН=Сред(ИНН,1,Найти(ИНН,"""")-1);
							
						КонецЕсли;
						если   ИНН="MONTH_REG" Тогда
							Если Найти(Ответ,"""ENT_VAT"",""")>0 Тогда
								ИНН=Сред(Ответ,Найти(Ответ,"""ENT_VAT"",""")+11);
								ИНН=Сред(ИНН,1,Найти(ИНН,"""")-1);
								
							КонецЕсли;
						КонецЕсли;
						//НачатьУдалениеФайлов(Новый Описа,ИмяФайлаОтправкиКонец);
						//НачатьУдалениеФайлов(Новый ОписаниеОповещения("УдаленияФайла",ЭтаФорма),ИмяФайлаОтправкиКонец);
						//Если 
						
					КонецЕсли;
				КонецЕсли;
				
				//ИмяВремен=ПолучитьИмяВременногоФайла("txt");
				ТекстовФ=Новый ТекстовыйДокумент;
				Попытка
					СпрОрг=СоздатьНайтиОрганизацияю(ГлобалКод,НАимОрг,ИНН,"");
					Добав.Организация=СпрОрг;
					Попытка
						Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
							Прокси=Новый ИнтернетПрокси;
							Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
							HTTP =  Новый HTTPСоединение("xn----7sbbamhfc3aanfgcf0aob1c4h3dua.xn--p1ai",,,,Прокси,ТаймаутОжиданияОтСайта,Новый ЗащищенноеСоединениеopenSSL());

						Иначе
							HTTP =  Новый HTTPСоединение("xn----7sbbamhfc3aanfgcf0aob1c4h3dua.xn--p1ai",,,,,ТаймаутОжиданияОтСайта,Новый ЗащищенноеСоединениеopenSSL());
						КонецЕсли;	
						HTTPЗапрос = Новый HTTPЗапрос("api/crtp.php");
						Отв=HTTP.Получить(HTTPЗапрос);
						Текст=Отв.ПолучитьТелоКакСтроку(КодировкаТекста.ANSI);
						ТекстовФ.УстановитьТекст(Текст);
					Исключение
					
						Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
							Прокси=Новый ИнтернетПрокси;
							Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
							HTTP =  Новый HTTPСоединение("ligin-tmb.nichost.ru",,,,Прокси,ТаймаутОжиданияОтСайта);

						Иначе
							HTTP =  Новый HTTPСоединение("ligin-tmb.nichost.ru",,,,,ТаймаутОжиданияОтСайта);
						КонецЕсли;	
						HTTPЗапрос = Новый HTTPЗапрос("api/crtp.php");
						Отв=HTTP.Получить(HTTPЗапрос);
						Текст=Отв.ПолучитьТелоКакСтроку(КодировкаТекста.ANSI);
						ТекстовФ.УстановитьТекст(Текст);
					КонецПопытки;
					//			ТекстовФ.НачатьЧтение(Новый ОписаниеОповещения("ПослеЧтения",ЭтаФорма,
					//Новый Структура("Текст,ИНН,ГлобалКод,НаимОрг,УдачноТожеВыводить,Добав",ТекстовФ,ИНН,ГлобалКод,НаимОрг,УдачноТожеВыводить,Добав)),ИмяВремен);
				Исключение
					Сообщить("На вашем компьютере нет доступа к ftp.ligin-tmb.nichost.ru");
					//ПослеЧтения(Новый Структура("Текст,ИНН,ГлобалКод,НаимОрг,УдачноТожеВыводить,Добав",ТекстовФ,ИНН,ГлобалКод,НаимОрг,УдачноТожеВыводить,Добав));
				КонецПопытки;
				
				МассивЛ=Новый СписокЗначений;
				Для Сч=1 По ТекстовФ.КоличествоСтрок() Цикл
					//МассивЛ.Добавить(СокрЛП(ТекстовФ.ПолучитьСтроку(Сч)));
					ДДД=СокрЛП(ТекстовФ.ПолучитьСтроку(Сч));
					Если    Найти(ДДД," ")>0 ТОгда
						МассивЛ.Добавить(Сред(ДДД,1,Найти(ДДД," ")-1),Сред(ДДД,Найти(ДДД," ")+1 ));
					Иначе
						МассивЛ.Добавить(ДДД,"");
						
					КонецЕсли;
				КонецЦикла;
				
				Лицензия="!НЕ ОБНАРУЖЕНА ЛИЦЕНЗИЯ. КУПИТЬ";
				Телефон="";
				Если ЗначениеЗаполнено(ИНН) Тогда
					РРР=МассивЛ.НайтиПоЗначению(ИНН+"+");
					Если РРР<>Неопределено Тогда
						 Лицензия="Расширенная лицензия";
						 Телефон=РРР.Представление;
					 Иначе
						РРР=МассивЛ.НайтиПоЗначению(ИНН);
						 Если МассивЛ.НайтиПоЗначению(ИНН)<>Неопределено Тогда
							 Лицензия="Лицензия активна";
							 Телефон=РРР.Представление;
							 
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				//МассивЛ=Новый Массив;
				//Для Сч=1 По ТекстовФ.КоличествоСтрок() Цикл
				//	//МассивЛ.Добавить(СокрЛП(ТекстовФ.ПолучитьСтроку(Сч)));
				//	МассивЛ.Добавить(ТекстовФ.ПолучитьСтроку(Сч));
				//КонецЦикла;
				//
				//Лицензия="!НЕ ОБНАРУЖЕНА ЛИЦЕНЗИЯ. КУПИТЬ";
				//Если ЗначениеЗаполнено(ИНН) Тогда
				//	Если МассивЛ.Найти(ИНН+"+")<>Неопределено Тогда
				//		 Лицензия="Расширенная лицензия";
				//	КонецЕсли;
				//	Если МассивЛ.Найти(ИНН)<>Неопределено Тогда
				//		 Лицензия="Лицензия активна";
				//	КонецЕсли;
				//КонецЕсли;
				Если Лицензия="!НЕ ОБНАРУЖЕНА ЛИЦЕНЗИЯ. КУПИТЬ" Тогда
					Попытка
						Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
							Прокси=Новый ИнтернетПрокси;
							Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
							HTTP =  Новый HTTPСоединение("xn----7sbbamhfc3aanfgcf0aob1c4h3dua.xn--p1ai",,,,Прокси,ТаймаутОжиданияОтСайта,Новый ЗащищенноеСоединениеopenSSL());

						Иначе
							HTTP =  Новый HTTPСоединение("xn----7sbbamhfc3aanfgcf0aob1c4h3dua.xn--p1ai",,,,,ТаймаутОжиданияОтСайта,Новый ЗащищенноеСоединениеopenSSL());
						КонецЕсли;	
						HTTPЗапрос = Новый HTTPЗапрос("form_order/?id=prodlenie-podpiski-na-ispolzovanie-hameleoncrpt-i-rassylka-obnovlenij-v-2021g.-dlya-1go-inn.-bez-dorabotok-i-konsultacij&inn="+ИНН);
						Отв=HTTP.Получить(HTTPЗапрос);
					Исключение
					КонецПопытки;
				КонецЕсли;
				
				СпрОрг=СоздатьНайтиОрганизацияю(ГлобалКод,НАимОрг,ИНН,Лицензия);
					
				
				Добав.Лицензия=Лицензия;
				Добав.ТелефонТехПоддержки=Телефон;
				
				Если УдачноТожеВыводить Тогда
					
					ПоказатьПредупреждение(,"Успешное подключение");
				КонецЕслИ;
				
			ИначеЕсли Выводить Тогда
				
				ПоказатьПредупреждение(,"Не удалось подключиться!");
			КонецЕсли;
			
		
	иначе
	КонецЕсли;
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
	Иначе
	
	ПараметрыДлякилента=Неопределено;
	Если НаКлиенте(ПараметрыДлякилента) Тогда
			Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение("srs.gs1ru.org",,,,Прокси,30);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение("srs.gs1ru.org",,,,,30);
			КонецЕсли;
			HTTPЗапрос = Новый HTTPЗапрос("login");
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			Кэш_3=Ответ.Заголовки["Set-Cookie"];
			Если Кэш_3=Неопределено тогда
			Кэш_3=Ответ.Заголовки["set-cookie"];
				
			Конецесли;
			
//			HTTPСервисЗапрос.Open("POST", "http://srs.gs1ru.org/login", 0);
			//Обработки._Запуск_ХамелеонЦРПТ.УстановитьПрокси(HTTPСервисЗапрос);
			HTTPЗапрос = Новый HTTPЗапрос("login");
			HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_3);
		
			HTTPЗапрос.Заголовки.Вставить("Accept", " text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
			//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
			HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
			HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
//			Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko");
			//HTTPСервисЗапрос.SetRequestHeader("Connection" ,"Keep-Alive");
			//HTTPСервисЗапрос.SetRequestHeader("Host" ,"mercury.vetrf.ru");
			//HTTPЗапрос = Новый HTTPЗапрос("hs/",Заголовки);
//			Ответ=HTTPСервисЗапрос_Merc.Получить(HTTPЗапрос);
			Тело="j_character_encoding=UTF-8&username="+ПараметрыДлякилента.Пользователь+"&password="+ПараметрыДлякилента.Пароль;
			HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
			Кэш_Т=Ответ.Заголовки["Set-Cookie"];
			Если Кэш_Т=Неопределено тогда
				Кэш_Т=Ответ.Заголовки["set-cookie"];
				
			Конецесли;
			
			HTTPЗапрос = Новый HTTPЗапрос("index.jsp");
			HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
			
			HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
			//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
			HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
			HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
			
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			//Кэш_Т=Ответ.Заголовки["Set-Cookie"];
			XORACLEAPMCSREQUESTID=Ответ.Заголовки["X-ORACLE-APMCS-REQUEST-ID"];
			Ответ=Ответ.ПолучитьТелоКакСтроку();
			Подключились=Ложь;
			//HTTPСервисЗапрос.Send(Тело);
			//HTTPСервисЗапрос.WaitForResponse();
			
		//		HTTPСервисЗапрос.Open("GET", "http://srs.gs1ru.org/index.jsp", 0);
		//	HTTPСервисЗапрос.Send();
		//	HTTPСервисЗапрос.WaitForResponse();
		//	Ответ=HTTPСервисЗапрос.ResponseText;
		
			Организации.Очистить();
			Если Найти(Ответ,"Единый язык")>0 Тогда
				Подключились=Истина;
				Добав=Организации.Добавить();
				Организация_1=Сред(Ответ,Найти(Ответ,"<td style=""font-weight: bold;"">")+31);
				НаимОрг=СокрЛП(Сред(Организация_1,1,Найти(Организация_1,Символы.ПС)));
				ГлобалКод=Сред(НаимОрг,1,Найти(НаимОрг," ")-1);
				НаимОрг=Сред(НаимОрг,Найти(НаимОрг," ")+1);
				Статистка="<!DOCTYPE HTML>
|<html class=""portal-ru"">
|<head>
|";
				Ст_1=Сред(Ответ,Найти(Ответ,"<td width=""25%"""));
				Статистка=Статистка+"
				|"+Сред(Ст_1,1,Найти(Сред(Ст_1,2),"<td width=""25%"""));
				
				ИНН="";
				НАимПользователя=Сред(Организация_1,Найти(Организация_1,"<td style=""font-weight: bold;"">")+31);
				НАимПользователя=СокрЛП(Сред(НАимПользователя,Найти(НАимПользователя," ")+1));
				НАимПользователя=СокрЛП(Сред(НАимПользователя,1,Найти(НАимПользователя," ")-1));
				ПользНаим(НАимПользователя);
				Добав.ПОльзователь=Пользователь;
				
				HTTPЗапрос = Новый HTTPЗапрос("Ui/Ui.nocache.js?ui_ver=3.0.445-SNAPSHOT");
				HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/index.jsp");
				HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
				HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
				
				Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
				//Кэш_Т=Ответ.Заголовки["Set-Cookie"];
				Ответ=Ответ.ПолучитьТелоКакСтроку();
				Если Найти(Ответ,"qc='")>0 Тогда
					qr=Сред(Ответ,Найти(Ответ,"qc='")+4);
					qr=Сред(qr,1,Найти(qr,"'")-1);
					
					
					HTTPЗапрос = Новый HTTPЗапрос("Ui/"+qr+".cache.js");
					HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
					HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/index.jsp");
					HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
					
					Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
					//Кэш_Т=Ответ.Заголовки["Set-Cookie"];
					Ответ=Ответ.ПолучитьТелоКакСтроку();
					Если Найти(Ответ,"'springGwtServices/setupService','")>0 Тогда
						setupService=Сред(Ответ,Найти(Ответ,"'springGwtServices/setupService','")+34);
						setupService=Сред(setupService,1,Найти(setupService,"'")-1);
						
						
						HTTPЗапрос = Новый HTTPЗапрос("Ui/springGwtServices/setupService");
						
						HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
						HTTPЗапрос.Заголовки.Вставить("X-GWT-Permutation", qr);
						HTTPЗапрос.Заголовки.Вставить("X-GWT-Module-Base", "http://srs.gs1ru.org/Ui/");
						
						
						HTTPЗапрос.Заголовки.Вставить("Accept", "*/*");
						//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
						HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
						HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
		//				HTTPЗапрос.Заголовки.Вставить("Content-Length", "128");
						HTTPЗапрос.Заголовки.Вставить("Content-Type", "text/x-gwt-rpc; charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
						HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
						HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/index.jsp");
						//HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
						HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
						
						//ИмяФайлаОтправкиКонец = ПолучитьИмяВременногоФайла("txt");
					    //ФайлОтправкиКонец = Новый ЗаписьТекста(ИмяФайлаОтправкиКонец, КодировкаТекста.ANSI, Символы.ПС, Ложь);

					    //Завершение раздела двоичных данных
					    //Завершение сообщения для сервера
						
						//ФайлОтправкиКонец.ЗаписатьСтроку("7|0|4|http://srs.gs1ru.org/Ui/|"+setupService+"|com.gs46.api.client.service.SetupService|getInitialData|1|2|3|4|0|");
					    //ФайлОтправкиКонец.Закрыть();

						//HTTPЗапрос.УстановитьТелоИзСтроки(КодироватьСтрСерверURL("7|0|4|http://srs.gs1ru.org/Ui/|"+setupService+"|com.gs46.api.client.service.SetupService|getInitialData|1|2|3|4|0|"));
						//HTTPЗапрос.УстановитьИмяФайлаТела((УстановитьТелоИзСтроки(
						//КодироватьСтрСерверURL(
						//7|0|4|http://srs.gs1ru.org/Ui/|"+setupService+"|com.gs46.api.client.service.SetupService|getInitialData|1|2|3|4|0|"));
						//"7|0|4|http://srs.gs1ru.org/Ui/|"+setupService+"|com.gs46.api.client.service.SetupService|getInitialData|1|2|3|4|0|"
						//)
						//);
						HTTPЗапрос.УстановитьТелоИзСтроки("7|0|4|http://srs.gs1ru.org/Ui/|"+setupService+"|com.gs46.api.client.service.SetupService|getInitialData|1|2|3|4|0|",
						КодировкаТекста.ANSI);
						//HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаОтправкиКонец);
		 				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
						//Кэш_Т=Ответ.Заголовки["Set-Cookie"];
						Ответ=Ответ.ПолучитьТелоКакСтроку();
						Если Найти(Ответ,"""ENT_INN"",""")>0 Тогда
							ИНН=Сред(Ответ,Найти(Ответ,"""ENT_INN"",""")+11);
							ИНН=Сред(ИНН,1,Найти(ИНН,"""")-1);
							
						КонецЕсли;
						если   ИНН="MONTH_REG" Тогда
							Если Найти(Ответ,"""ENT_VAT"",""")>0 Тогда
								ИНН=Сред(Ответ,Найти(Ответ,"""ENT_VAT"",""")+11);
								ИНН=Сред(ИНН,1,Найти(ИНН,"""")-1);
								
							КонецЕсли;
						КонецЕсли;
						//НачатьУдалениеФайлов(Новый Описа,ИмяФайлаОтправкиКонец);
						//НачатьУдалениеФайлов(Новый ОписаниеОповещения("УдаленияФайла",ЭтаФорма),ИмяФайлаОтправкиКонец);
						//Если 
						
					КонецЕсли;
				КонецЕсли;
				
				//ИмяВремен=ПолучитьИмяВременногоФайла("txt");
				ТекстовФ=Новый ТекстовыйДокумент;
				Попытка
					СпрОрг=СоздатьНайтиОрганизацияю(ГлобалКод,НАимОрг,ИНН,"");
					Добав.Организация=СпрОрг;
					Попытка
						Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
							Прокси=Новый ИнтернетПрокси;
							Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
							HTTP =  Новый HTTPСоединение("xn----7sbbamhfc3aanfgcf0aob1c4h3dua.xn--p1ai",,,,Прокси,ТаймаутОжиданияОтСайта,Новый ЗащищенноеСоединениеopenSSL());

						Иначе
							HTTP =  Новый HTTPСоединение("xn----7sbbamhfc3aanfgcf0aob1c4h3dua.xn--p1ai",,,,,ТаймаутОжиданияОтСайта,Новый ЗащищенноеСоединениеopenSSL());
						КонецЕсли;	
						HTTPЗапрос = Новый HTTPЗапрос("api/crtp.php");
						Отв=HTTP.Получить(HTTPЗапрос);
						Текст=Отв.ПолучитьТелоКакСтроку(КодировкаТекста.ANSI);
						ТекстовФ.УстановитьТекст(Текст);
					Исключение
					
						Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
							Прокси=Новый ИнтернетПрокси;
							Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
							HTTP =  Новый HTTPСоединение("ligin-tmb.nichost.ru",,,,Прокси,ТаймаутОжиданияОтСайта);

						Иначе
							HTTP =  Новый HTTPСоединение("ligin-tmb.nichost.ru",,,,,ТаймаутОжиданияОтСайта);
						КонецЕсли;	
						HTTPЗапрос = Новый HTTPЗапрос("api/crtp.php");
						Отв=HTTP.Получить(HTTPЗапрос);
						Текст=Отв.ПолучитьТелоКакСтроку(КодировкаТекста.ANSI);
						ТекстовФ.УстановитьТекст(Текст);
					КонецПопытки;
					//			ТекстовФ.НачатьЧтение(Новый ОписаниеОповещения("ПослеЧтения",ЭтаФорма,
					//Новый Структура("Текст,ИНН,ГлобалКод,НаимОрг,УдачноТожеВыводить,Добав",ТекстовФ,ИНН,ГлобалКод,НаимОрг,УдачноТожеВыводить,Добав)),ИмяВремен);
				Исключение
					Сообщить("На вашем компьютере нет доступа к ftp.ligin-tmb.nichost.ru");
					//ПослеЧтения(Новый Структура("Текст,ИНН,ГлобалКод,НаимОрг,УдачноТожеВыводить,Добав",ТекстовФ,ИНН,ГлобалКод,НаимОрг,УдачноТожеВыводить,Добав));
				КонецПопытки;
				
				МассивЛ=Новый СписокЗначений;
				Для Сч=1 По ТекстовФ.КоличествоСтрок() Цикл
					//МассивЛ.Добавить(СокрЛП(ТекстовФ.ПолучитьСтроку(Сч)));
					ДДД=СокрЛП(ТекстовФ.ПолучитьСтроку(Сч));
					Если    Найти(ДДД," ")>0 ТОгда
						МассивЛ.Добавить(Сред(ДДД,1,Найти(ДДД," ")-1),Сред(ДДД,Найти(ДДД," ")+1 ));
					Иначе
						МассивЛ.Добавить(ДДД,"");
						
					КонецЕсли;
				КонецЦикла;
				
				Лицензия="!НЕ ОБНАРУЖЕНА ЛИЦЕНЗИЯ. КУПИТЬ";
				Телефон="";
				Если ЗначениеЗаполнено(ИНН) Тогда
					РРР=МассивЛ.НайтиПоЗначению(ИНН+"+");
					Если РРР<>Неопределено Тогда
						 Лицензия="Расширенная лицензия";
						 Телефон=РРР.Представление;
					 Иначе
						РРР=МассивЛ.НайтиПоЗначению(ИНН);
						 Если МассивЛ.НайтиПоЗначению(ИНН)<>Неопределено Тогда
							 Лицензия="Лицензия активна";
							 Телефон=РРР.Представление;
							 
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				//МассивЛ=Новый Массив;
				//Для Сч=1 По ТекстовФ.КоличествоСтрок() Цикл
				//	//МассивЛ.Добавить(СокрЛП(ТекстовФ.ПолучитьСтроку(Сч)));
				//	МассивЛ.Добавить(ТекстовФ.ПолучитьСтроку(Сч));
				//КонецЦикла;
				//
				//Лицензия="!НЕ ОБНАРУЖЕНА ЛИЦЕНЗИЯ. КУПИТЬ";
				//Если ЗначениеЗаполнено(ИНН) Тогда
				//	Если МассивЛ.Найти(ИНН+"+")<>Неопределено Тогда
				//		 Лицензия="Расширенная лицензия";
				//	КонецЕсли;
				//	Если МассивЛ.Найти(ИНН)<>Неопределено Тогда
				//		 Лицензия="Лицензия активна";
				//	КонецЕсли;
				//КонецЕсли;
				Если Лицензия="!НЕ ОБНАРУЖЕНА ЛИЦЕНЗИЯ. КУПИТЬ" Тогда
					//НачатьЗапускПриложения("https://алкогольные-декларации.рф/form_order/?id=33&inn="+ИНН);
					Попытка
						Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
							Прокси=Новый ИнтернетПрокси;
							Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
							HTTP =  Новый HTTPСоединение("xn----7sbbamhfc3aanfgcf0aob1c4h3dua.xn--p1ai",,,,Прокси,ТаймаутОжиданияОтСайта,Новый ЗащищенноеСоединениеopenSSL());

						Иначе
							HTTP =  Новый HTTPСоединение("xn----7sbbamhfc3aanfgcf0aob1c4h3dua.xn--p1ai",,,,,ТаймаутОжиданияОтСайта,Новый ЗащищенноеСоединениеopenSSL());
						КонецЕсли;	
						HTTPЗапрос = Новый HTTPЗапрос("form_order/?id=prodlenie-podpiski-na-ispolzovanie-hameleoncrpt-i-rassylka-obnovlenij-v-2021g.-dlya-1go-inn.-bez-dorabotok-i-konsultacij&inn="+ИНН);
						Отв=HTTP.Получить(HTTPЗапрос);
					Исключение
					КонецПопытки;
				КонецЕсли;
				
				СпрОрг=СоздатьНайтиОрганизацияю(ГлобалКод,НАимОрг,ИНН,Лицензия);
					
				
				Добав.Лицензия=Лицензия;
				Добав.ТелефонТехПоддержки=Телефон;
				
				Если УдачноТожеВыводить Тогда
					
					ПоказатьПредупреждение(,"Успешное подключение");
				КонецЕслИ;
				
			ИначеЕсли Выводить Тогда
				
				ПоказатьПредупреждение(,"Не удалось подключиться!");
			КонецЕсли;
			
		
	иначе
	КонецЕсли;
	
КонецЕсли;
	
	Элементы.Организации.Обновить();
	Если Организации.Количество()>0 Тогда
		ОтборПоОрганизации(Организации[0].Организация);
	КонецЕсли;
	
	

КонецПроцедуры

&НаКлиенте
Процедура ПослеЧтения(Парам) Экспорт
	ТекстовФ=Парам.Текст;
	ГлобалКод=Парам.ГлобалКод;
	ИНН=Парам.ИНН;
	НаимОрг=Парам.НаимОрг;
	Добав=Парам.Добав;
	УдачноТожеВыводить=Парам.УдачноТожеВыводить;
				
				МассивЛ=Новый Массив;
				Для Сч=1 По ТекстовФ.КоличествоСтрок() Цикл
					//МассивЛ.Добавить(СокрЛП(ТекстовФ.ПолучитьСтроку(Сч)));
					МассивЛ.Добавить(ТекстовФ.ПолучитьСтроку(Сч));
				КонецЦикла;
				
				Лицензия="!НЕ ОБНАРУЖЕНА ЛИЦЕНЗИЯ. КУПИТЬ";
				Если ЗначениеЗаполнено(ИНН) Тогда
					Если МассивЛ.Найти(ИНН+"+")<>Неопределено Тогда
						 Лицензия="Расширенная лицензия";
					КонецЕсли;
					Если МассивЛ.Найти(ИНН)<>Неопределено Тогда
						 Лицензия="Лицензия активна";
					КонецЕсли;
				КонецЕсли;
				Если Лицензия="!НЕ ОБНАРУЖЕНА ЛИЦЕНЗИЯ. КУПИТЬ" Тогда
					НачатьЗапускПриложения(Новый ОписаниеОповещения("ПослеЗапускаПр",Этаформа),"https://алкогольные-декларации.рф/form_order/?id=prodlenie-podpiski-na-ispolzovanie-hameleoncrpt-i-rassylka-obnovlenij-v-2021g.-dlya-1go-inn.-bez-dorabotok-i-konsultacij&inn="+ИНН);
					
					//НачатьЗапускПриложения(Новый ОписаниеОповещения("ПослеЗапускаПр",Этаформа),"http://srs.gs1ru.org/mdo/");
				КонецЕсли;
				
				СпрОрг=СоздатьНайтиОрганизацияю(ГлобалКод,НАимОрг,ИНН,Лицензия);
					
				
				Добав.Лицензия=Лицензия;
				Если УдачноТожеВыводить Тогда
					
					ПоказатьПредупреждение(,"Успешное подключение");
				КонецЕслИ;
	
КонецПроцедуры


Процедура ПользНаим(НАимПользователя)
	Если Не ЗначениеЗаполнено(Пользователь.Наименование) 
		Тогда
		
		ППП=Пользователь.Ссылка.ПолучитьОбъект();
		
		ППП.Наименование=НаимПользователя;
		ППП.Записать();
		Пользователь=ППП.Ссылка.Ссылка;
	КонецЕсли;
КонецПроцедуры
&НаСервереБезКонтекста
Функция  СоздатьНайтиОрганизацияю(ГлобалКод,НАимОрг,ИНН,Лицензия)
	СпрОрг=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("GLN",Число(ГлобалКод));
	Если СпрОрг=Справочники.Организации_ХамелеонЦРПТ.ПустаяСсылка() 
		И ЗначениеЗаполнено(ИНН) Тогда
		СпрОрг=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",ИНН);
	КонецЕсли;
	Если СпрОрг=Справочники.Организации_ХамелеонЦРПТ.ПустаяСсылка() Тогда
		СпрОрг=Справочники.Организации_ХамелеонЦРПТ.СоздатьЭлемент();
	ИначеЕсли ((ЗначениеЗаполнено(СпрОрг.ИНН) И спрОрг.ИНН=ИНН) ИЛИ Не ЗначениеЗаполнено(ИНН)) 
		//И     ((СпрОрг.Лицензия=Лицензия ) ИЛИ Не ЗначениеЗАполнено(Лицензия))
		Тогда
		Если ЗначениеЗаполнено(ГлобалКод) И СпрОрг.GLN=ГлобалКод Тогда
			Возврат СпрОрг.Ссылка;
		ИначеЕсли Не ЗначениеЗаполнено(ГлобалКод) тогда
			Возврат СпрОрг.Ссылка;
		КонецЕсли;
		СпрОрг=СпрОрг.Получитьобъект();
	Иначе
		СпрОрг=СпрОрг.Получитьобъект();
		
	Конецесли;
	Если ЗначениеЗаполнено(ИНН) Тогда
		СпрОрг.ИНН=ИНН;
	Конецесли;	
	//	Если ЗначениеЗаполнено(Лицензия) тогда
//		СпрОрг.Лицензия=Лицензия;
//	КонецЕсли;
	СпрОрг.GLN=ГлобалКод;
	СпрОрг.Наименование=Наиморг;
	СпрОрг.Записать();
Возврат СпрОрг.Ссылка
КонецФункции

Процедура ЗагрузитьДокументыСервер(Команда,Все=Ложь)
	// Вставить содержимое обработчика.
	
	              
	//Подключиться(Команда);
	
	//Если Подключились Тогда
//	Если Организации.Количество()=0 Тогда
//		Подключиться(Команда);
//	КонецЕсли;
//	Если Организации.Количество()=0 Тогда
//		Возврат;
//	КонецЕсли;
	
	ПараметрыДлякилента=Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(Пользователь,ТекСайт);
;
	//Если НаКлиенте(ПараметрыДлякилента) Тогда
	
	Если ИспользоватьСайтGS1ПоМаркировке Тогда

Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение("srs.gs1ru.org",,,,Прокси,30);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение("srs.gs1ru.org",,,,,30);
			КонецЕсли;
			
			HTTPЗапрос = Новый HTTPЗапрос(ТекСайт+"io/");
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			Кэш_3=Ответ.Заголовки["Set-Cookie"];
			Если Кэш_3=Неопределено Тогда
			Кэш_3=Ответ.Заголовки["set-cookie"];
			Конецесли;
			
//			HTTPСервисЗапрос.Open("POST", "http://srs.gs1ru.org/login", 0);
			//Обработки._Запуск_ХамелеонЦРПТ.УстановитьПрокси(HTTPСервисЗапрос);
			HTTPЗапрос = Новый HTTPЗапрос("io/login/perform_login");
			HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_3);
		
			HTTPЗапрос.Заголовки.Вставить("Accept", " text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
			//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
			HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
			HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
//			Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko");
			//HTTPСервисЗапрос.SetRequestHeader("Connection" ,"Keep-Alive");
			//HTTPСервисЗапрос.SetRequestHeader("Host" ,"mercury.vetrf.ru");
			//HTTPЗапрос = Новый HTTPЗапрос("hs/",Заголовки);
//			Ответ=HTTPСервисЗапрос_Merc.Получить(HTTPЗапрос);
			Тело="j_character_encoding=UTF-8&username="+ПараметрыДлякилента.Пользователь+"&password="+ПараметрыДлякилента.Пароль;
			HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
			Кэш_Т=Ответ.Заголовки["Set-Cookie"];
			Если Кэш_Т=Неопределено тогда
			Кэш_Т=Ответ.Заголовки["set-cookie"];
				
			Конецесли;
			
			               
			HTTPЗапрос = Новый HTTPЗапрос("io/");
			HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
			
			HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
			//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
			HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
			HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
			
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			//Кэш_Т=Ответ.Заголовки["Set-Cookie"];
			Ответ=Ответ.ПолучитьТелоКакСтроку();
			
			НайтиТаблицы=Сред(Ответ,Найти(Ответ,"import_table"));
			НайтиТаблицы=Сред(НайтиТаблицы,1,Найти(НайтиТаблицы,"""")-1);
			
			HTTPЗапрос = Новый HTTPЗапрос("io/ui/"+НайтиТаблицы);
			HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
			
			HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
			//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
			HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
			HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			
			
			Чтение=Новый ЧтениеHTML;
			Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			ПостроительDOM = Новый ПостроительDOM;
			ДокументHTML = ПостроительDOM.Прочитать(Чтение);
			
			ПервуюПропускаем=Истина;
			Для Каждого Стр Из ДокументHTML.ПолучитьЭлементыПоИмени("tr") Цикл
				Если ПервуюПропускаем Тогда
					ПервуюПропускаем=ложь;
					Продолжить;
				КонецЕсли;
				Попытка
					НазнваниеДОкумента=СокрЛП(Стр.Ячейки[1].ДочерниеУзлы[1].Гиперссылка);
				Исключение
					
					НазнваниеДОкумента=СокрЛП(Стр.Ячейки[1].ДочерниеУзлы[1].ТекстовоеСодержимое);
					
				КонецПопытки;
				Дата1=СокрЛП(Стр.Ячейки[2].ТекстовоеСодержимое);
				Дата2=СокрЛП(Стр.Ячейки[3].ТекстовоеСодержимое);
				Статус=СокрЛП(Стр.Ячейки[4].ТекстовоеСодержимое);
				
				
					
				HTTPЗапрос = Новый HTTPЗапрос(НазнваниеДОкумента);
				HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
				
				HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
				//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
				HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
				HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
				HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
				HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
				HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
				HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
				HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
 				HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
				HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
				
				Имяекселя=СокрЛП(Стр.Ячейки[1].ТекстовоеСодержимое);
				Имяекселя=Сред(Имяекселя,1,Найти(Имяекселя,Символы.ПС)-1);
				
				ПервыйФ=1;
			//	ИмяФ=КаталогВременныхФайлов+xmlString(ПервыйФ);
			//	ФФФ=Новый Файл(ИмяФ);
			//	Пока ФФФ.Существует() Цикл
			//		ПервыйФ=ПервыйФ+1;
			//		ИмяФ=КаталогВременныхФайлов+xmlString(ПервыйФ);
			//		ФФФ=Новый Файл(ИмяФ);
			//	КонецЦикла;
				//Имяекселя=КаталогВременныхФайлов+Имяекселя;
				
	Каталог = КаталогВременныхФайловНаКлиенте;
	ИмяФайла = Строка(Новый УникальныйИдентификатор) + ".xlsx";
	Имяекселя_1= Каталог+ИмяФайла;
				
				//Имяекселя_1=ПолучитьИмяВременногоФайла("xlsx");
				HTTPСервисЗапрос.Получить(HTTPЗапрос,Имяекселя_1);
				
				Данн=Новый ДвоичныеДанные(Имяекселя_1);
				Адр=ПоместитьВоВременноеХранилище(Данн);
				УдалитьФайлы(Имяекселя_1);
				
				
				СоздатьДокумент(НазнваниеДОкумента,Дата1,Дата2,Статус,Адр,Имяекселя);
				
				
				
			Конеццикла;
	//		Если Все Тогда
	//			Гиперссылка=ДокументHTML.ПолучитьЭлементыПоИмени("p")[1].ДочерниеУзлы[0].Гиперссылка;
	//			HTTPЗапрос = Новый HTTPЗапрос(ТекСайт+"/"+Гиперссылка);
	//			HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
	//			
	//			HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
	//			//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
	//			HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
	//			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
	//			HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
	//			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	//			HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
	//			HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
	//			HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
	//			HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
	//			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
	//			
	//				Каталог = КаталогВременныхФайловНаКлиенте;
	//ИмяФайла = Строка(Новый УникальныйИдентификатор) + ".zip";
	//ИмяВр= Каталог+ИмяФайла;

	//			//ИмяВр=ПолучитьИмяВременногоФайла("zip");
	//			HTTPСервисЗапрос.Получить(HTTPЗапрос,ИмяВр);
	//			
	//			
	//			Удалитьфайлы(КаталогВременныхФайлов+"ZIP_M\","*.*");
	//			
	//			ЧтZIP=Новый ЧтениеZipФайла(ИмяВр);
	//			ЧтZIP.ИзвлечьВсе(КаталогВременныхФайлов+"ZIP_M");
	//			НайдФ=НайтиФайлы(КаталогВременныхФайлов+"ZIP_M","*.*");
	//			
	//			Для Каждого Стр Из НайдФ Цикл
	//					Если Стр.Расширение=".xlsx" Тогда
	//						ССС=КодироватьСтрСервер(Стр.Имя);
	//							Данн=Новый ДвоичныеДанные(Стр.ПолноеИмя);
	//							Адр=ПоместитьВоВременноеХранилище(Данн);
	//							УдалитьФайлы(Стр.ПолноеИмя);
	//							
	//							СоздатьДокумент("download_file?file="+ССС,Неопределено,Неопределено,Неопределено,Адр,Стр.Имя);
	//					КонецЕсли;
	//				Конеццикла;

	//			//РаспаковатьФайлы
	//			//НачатьУдалениеФайлов(Новый описаниеОповещения("ПослеРаспаковать",ЭтаФорма,ИмяВр),КаталогВременныхФайлов+"ZIP_M\","*.*");
	//			
	//			
	//			
	//			
	//			
	//			
	//		КонецЕсли;
			
		
	Иначе
		
			Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение("srs.gs1ru.org",,,,Прокси,30);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение("srs.gs1ru.org",,,,,30);
			КонецЕсли;
			
			HTTPЗапрос = Новый HTTPЗапрос(ТекСайт+"/");
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			Кэш_3=Ответ.Заголовки["Set-Cookie"];
			Если Кэш_3=Неопределено тогда
			Кэш_3=Ответ.Заголовки["set-cookie"];
			Конецесли;
			
//			HTTPСервисЗапрос.Open("POST", "http://srs.gs1ru.org/login", 0);
			//Обработки._Запуск_ХамелеонЦРПТ.УстановитьПрокси(HTTPСервисЗапрос);
			HTTPЗапрос = Новый HTTPЗапрос(ТекСайт+"/j_security_check");
			HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_3);
		
			HTTPЗапрос.Заголовки.Вставить("Accept", " text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
			//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
			HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
			HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
//			Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko");
			//HTTPСервисЗапрос.SetRequestHeader("Connection" ,"Keep-Alive");
			//HTTPСервисЗапрос.SetRequestHeader("Host" ,"mercury.vetrf.ru");
			//HTTPЗапрос = Новый HTTPЗапрос("hs/",Заголовки);
//			Ответ=HTTPСервисЗапрос_Merc.Получить(HTTPЗапрос);
			Тело="j_character_encoding=UTF-8&j_username="+ПараметрыДлякилента.Пользователь+"&j_password="+ПараметрыДлякилента.Пароль;
			HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
			Кэш_Т=Ответ.Заголовки["Set-Cookie"];
			Если  Кэш_Т=Неопределено тогда
			Кэш_Т=Ответ.Заголовки["set-cookie"];
				
			Конецесли;
			               
			HTTPЗапрос = Новый HTTPЗапрос(ТекСайт+"/");
			HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
			
			HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
			//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
			HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
			HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
			
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			//Кэш_Т=Ответ.Заголовки["Set-Cookie"];
			Ответ=Ответ.ПолучитьТелоКакСтроку();
			
			НайтиТаблицы=Сред(Ответ,Найти(Ответ,"import_table"));
			НайтиТаблицы=Сред(НайтиТаблицы,1,Найти(НайтиТаблицы,"""")-1);
			
			HTTPЗапрос = Новый HTTPЗапрос(ТекСайт+"/"+НайтиТаблицы);
			HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
			
			HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
			//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
			HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
			HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			
			
			Чтение=Новый ЧтениеHTML;
			Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			ПостроительDOM = Новый ПостроительDOM;
			ДокументHTML = ПостроительDOM.Прочитать(Чтение);
			
			ПервуюПропускаем=Истина;
			Для Каждого Стр Из ДокументHTML.ПолучитьЭлементыПоИмени("tr") Цикл
				Если ПервуюПропускаем Тогда
					ПервуюПропускаем=ложь;
					Продолжить;
				КонецЕсли;
				Попытка
					НазнваниеДОкумента=СокрЛП(Стр.Ячейки[1].ДочерниеУзлы[1].Гиперссылка);
				Исключение
					
					НазнваниеДОкумента=СокрЛП(Стр.Ячейки[1].ДочерниеУзлы[1].ТекстовоеСодержимое);
					
				КонецПопытки;
				Дата1=СокрЛП(Стр.Ячейки[1].ТекстовоеСодержимое);
				Дата2=СокрЛП(Стр.Ячейки[2].ТекстовоеСодержимое);
				Статус=СокрЛП(Стр.Ячейки[3].ТекстовоеСодержимое);
				
				
					
				HTTPЗапрос = Новый HTTPЗапрос(ТекСайт+"/"+НазнваниеДОкумента);
				HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
				
				HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
				//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
				HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
				HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
				HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
				HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
				HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
				HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
				HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
 				HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
				HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
				
				Имяекселя=СокрЛП(Стр.Ячейки[0].ТекстовоеСодержимое);
				Имяекселя=Сред(Имяекселя,1,Найти(Имяекселя,Символы.ПС)-1);
				
				ПервыйФ=1;
			//	ИмяФ=КаталогВременныхФайлов+xmlString(ПервыйФ);
			//	ФФФ=Новый Файл(ИмяФ);
			//	Пока ФФФ.Существует() Цикл
			//		ПервыйФ=ПервыйФ+1;
			//		ИмяФ=КаталогВременныхФайлов+xmlString(ПервыйФ);
			//		ФФФ=Новый Файл(ИмяФ);
			//	КонецЦикла;
				//Имяекселя=КаталогВременныхФайлов+Имяекселя;
				
	Каталог = КаталогВременныхФайловНаКлиенте;
	ИмяФайла = Строка(Новый УникальныйИдентификатор) + ".xlsx";
	Имяекселя_1= Каталог+ИмяФайла;
				
				//Имяекселя_1=ПолучитьИмяВременногоФайла("xlsx");
				HTTPСервисЗапрос.Получить(HTTPЗапрос,Имяекселя_1);
				
				Данн=Новый ДвоичныеДанные(Имяекселя_1);
				Адр=ПоместитьВоВременноеХранилище(Данн);
				УдалитьФайлы(Имяекселя_1);
				
				
				СоздатьДокумент(НазнваниеДОкумента,Дата1,Дата2,Статус,Адр,Имяекселя);
				
				
				
			Конеццикла;
			Если Все Тогда
				Гиперссылка=ДокументHTML.ПолучитьЭлементыПоИмени("p")[1].ДочерниеУзлы[0].Гиперссылка;
				HTTPЗапрос = Новый HTTPЗапрос(ТекСайт+"/"+Гиперссылка);
				HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
				
				HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
				//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
				HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
				HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
				HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
				HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
				HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
				HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
				HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
				HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
				HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
				
					Каталог = КаталогВременныхФайловНаКлиенте;
	ИмяФайла = Строка(Новый УникальныйИдентификатор) + ".zip";
	ИмяВр= Каталог+ИмяФайла;

				//ИмяВр=ПолучитьИмяВременногоФайла("zip");
				HTTPСервисЗапрос.Получить(HTTPЗапрос,ИмяВр);
				
				
				Удалитьфайлы(КаталогВременныхФайлов+"ZIP_M\","*.*");
				
				ЧтZIP=Новый ЧтениеZipФайла(ИмяВр);
				ЧтZIP.ИзвлечьВсе(КаталогВременныхФайлов+"ZIP_M");
				НайдФ=НайтиФайлы(КаталогВременныхФайлов+"ZIP_M","*.*");
				
				Для Каждого Стр Из НайдФ Цикл
						Если Стр.Расширение=".xlsx" Тогда
							ССС=КодироватьСтрСервер(Стр.Имя);
								Данн=Новый ДвоичныеДанные(Стр.ПолноеИмя);
								Адр=ПоместитьВоВременноеХранилище(Данн);
								УдалитьФайлы(Стр.ПолноеИмя);
								
								СоздатьДокумент("download_file?file="+ССС,Неопределено,Неопределено,Неопределено,Адр,Стр.Имя);
						КонецЕсли;
					Конеццикла;

				//РаспаковатьФайлы
				//НачатьУдалениеФайлов(Новый описаниеОповещения("ПослеРаспаковать",ЭтаФорма,ИмяВр),КаталогВременныхФайлов+"ZIP_M\","*.*");
				
				
				
				
				
				
			КонецЕсли;
		
	КонецЕсли;
	
	
	Элементы.ТаблицаДокументы.Обновить();
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьДокументы(Команда,Все=Ложь)
	// Вставить содержимое обработчика.
	
	
	//Подключиться(Команда);
	
	//Если Подключились Тогда
	Если Организации.Количество()=0 Тогда
		Подключиться(Команда);
	КонецЕсли;
	Если Организации.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДлякилента=Неопределено;
	Если НаКлиенте(ПараметрыДлякилента) Тогда
		
	Если ИспользоватьСайтGS1ПоМаркировке ИЛИ ПараметрыДлякилента.НаименованиеСтенда="Шины" Тогда

			Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение("srs.gs1ru.org",,,,Прокси,30);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение("srs.gs1ru.org",,,,,30);
			КонецЕсли;
			
			HTTPЗапрос = Новый HTTPЗапрос("io/");
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			ВсеКУки=Ответ.Заголовки["Set-Cookie"];
			Если   ВсеКУки=неопределено тогда
			ВсеКУки=Ответ.Заголовки["set-cookie"];
				
			Конецесли;
			ВсеКуки=СтрЗаменитЬ(ВсеКуки,",",Символы.ПС);
 			
			
		//	Oracle="717d81046d26723fb1eeb82b13dca94babe8ee96";
		    Oracle="";
		
			Кэш_3="";
			JSESSIONID="";
			Если ЗначениеЗАполнено(ВсеКУки) тогда
				Для Сч_1=1 По СтрЧислоСтрок(ВсеКуки) Цикл
					
					ПолучитьСтроку=СтрПолучитьСтроку(ВсеКуки,Сч_1);
					//Если Найти(ПолучитьСтроку,"Set-Cookie")=1 
					//	Тогда
					Если ЗначениеЗаполнено(Кэш_3) Тогда
						Кэш_3=Кэш_3+";";
					Конецесли;
						//КэшТ=КэшТ+ПолучитьСтроку;
						Коок=ПолучитьСтроку;
						Коок=Сред(Коок,1,Найти(Коок,";")-1);
						Кэш_3=Кэш_3+Коок;
						Если Найти(ПолучитьСтроку,"X-Oracle-BMC-LBS-Route")>0 Тогда
							//ПродолжитЬ;
							Oracle=Коок;
						Конецесли;
						Если Найти(КооК,"JSESSIONID")>0 Тогда
							JSESSIONID=Коок;
						Конецесли;
					
				КонецЦикла;
			
				
			КонецЕсли;
			
			

			
			

			
			
//			HTTPСервисЗапрос.Open("POST", "http://srs.gs1ru.org/login", 0);
			//Обработки._Запуск_ХамелеонЦРПТ.УстановитьПрокси(HTTPСервисЗапрос);
			HTTPЗапрос = Новый HTTPЗапрос("io/login/perform_login");
			HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_3);
		
			HTTPЗапрос.Заголовки.Вставить("Accept", " text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
			//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
			HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
			HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
//			Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko");
			//HTTPСервисЗапрос.SetRequestHeader("Connection" ,"Keep-Alive");
			//HTTPСервисЗапрос.SetRequestHeader("Host" ,"mercury.vetrf.ru");
			//HTTPЗапрос = Новый HTTPЗапрос("hs/",Заголовки);
//			Ответ=HTTPСервисЗапрос_Merc.Получить(HTTPЗапрос);
			Тело="j_character_encoding=UTF-8&username="+ПараметрыДлякилента.Пользователь+"&password="+ПараметрыДлякилента.Пароль;
			HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
			//Кэш_Т=Ответ.Заголовки["Set-Cookie"];
			
			
			ВсеКуки=Ответ.Заголовки["Set-Cookie"];
			Если   ВсеКуки=Неопределено Тогда
			ВсеКуки=Ответ.Заголовки["set-cookie"];
				
			Конецесли;
			
			ВсеКуки=СтрЗаменитЬ(ВсеКуки,",",Символы.ПС);
			
			//СтруктураКук=СтрРазделить(ВсеКуки,";") ;
			
			Кэш_Т=Oracle;
			
			Если Найти(ВсеКуки,"JSESSIONID")>0 Тогда
				JSESSIONID="";
			Конецесли;
			Если ЗначениеЗАполнено(ВсеКУки) тогда
				Для Сч_1=1 По СтрЧислоСтрок(ВсеКуки) Цикл
					
					ПолучитьСтроку=СтрПолучитьСтроку(ВсеКуки,Сч_1);
					
					Если Найти(ПолучитьСтроку,"=")=0 Тогда
						Продолжить;
					Конецесли;
					
						Если Найти(ПолучитьСтроку,"X-Oracle-BMC-LBS-Route")>0 Тогда
							Продолжить;
						Конецесли;
					
					//Если Найти(ПолучитьСтроку,"Set-Cookie")=1 
					//	Тогда
					Если ЗначениеЗаполнено(Кэш_Т) Тогда
						Кэш_Т=Кэш_Т+";";
					Конецесли;
						//КэшТ=КэшТ+ПолучитьСтроку;
						Коок=ПолучитьСтроку;
						Коок=Сред(Коок,1,Найти(Коок,";")-1);
						Кэш_Т=Кэш_Т+Коок;
						Если Найти(КооК,"JSESSIONID")>0 Тогда
							JSESSIONID=Коок;
						Конецесли;
						
						
						//Request.SetRequestHeader("Cookie",Коок);
					//КонецЕсли;
				КонецЦикла;
			
				
			КонецЕсли;


			
			
			
			

			
			
			
			
			
			HTTPЗапрос = Новый HTTPЗапрос("io/");
			HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
			
			HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
			//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
			HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
			HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
			
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			
		//	ВсеКуки=Ответ.Заголовки["Set-Cookie"];
		//		//		
		////		//СтруктураКук=СтрРазделить(ВсеКуки,";") ;
		////	
		//
		//			Кэш_Т=Oracle+";"+JSESSIONID;
		//
		//		Если ЗначениеЗАполнено(ВсеКУки) тогда
		//			Для Сч_1=1 По СтрЧислоСтрок(ВсеКуки) Цикл
		//				Если Найти(ПолучитьСтроку,"=")=0 Тогда
		//					Продолжить;
		//				Конецесли;
		//			    Если Найти(ПолучитьСтроку,"X-Oracle-BMC-LBS-Route")>0 Тогда
		//					Продолжить;
		//				Конецесли;
		//				

		//				Если Найти(ПолучитьСтроку,"JSESSIONID")>0 Тогда
		//					Продолжить;
		//				Конецесли;
		//				
		//				ПолучитьСтроку=СтрПолучитьСтроку(ВсеКуки,Сч_1);
		//				//Если Найти(ПолучитьСтроку,"Set-Cookie")=1 
		//				//	Тогда
		//				Если ЗначениеЗаполнено(Кэш_Т) Тогда
		//					Кэш_Т=Кэш_Т+";";
		//				Конецесли;
		//					//КэшТ=КэшТ+ПолучитьСтроку;
		//					Коок=ПолучитьСтроку;
		//					Коок=Сред(Коок,1,Найти(Коок,";")-1);
		//					Кэш_Т=Кэш_Т+Коок;
		//					//Если Найти(КооК,"JSESSIONID")>0 Тогда
		//					//	JSESSIONID=Коок;
		//					//Конецесли;
		//					
		//					//Request.SetRequestHeader("Cookie",Коок);
		//				//КонецЕсли;
		//			КонецЦикла;
		////		
		////			
		//		КонецЕсли;
		////
		//		Кэш_Т=Кэш_Т+";"+JSESSIONID; 

				
			
			
			//Кэш_Т=Ответ.Заголовки["Set-Cookie"];
			Ответ=Ответ.ПолучитьТелоКакСтроку();
			
			НайтиТаблицы=Сред(Ответ,Найти(Ответ,"import_table"));
			НайтиТаблицы=Сред(НайтиТаблицы,1,Найти(НайтиТаблицы,"""")-1);
			
			HTTPЗапрос = Новый HTTPЗапрос("io/ui/"+НайтиТаблицы);
			HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
			
			HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
			//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
			HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
			HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			
			
			Чтение=Новый ЧтениеHTML;
			Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			ПостроительDOM = Новый ПостроительDOM;
			ДокументHTML = ПостроительDOM.Прочитать(Чтение);
			
			ПервуюПропускаем=Истина;
			Для Каждого Стр Из ДокументHTML.ПолучитьЭлементыПоИмени("tr") Цикл
				Если ПервуюПропускаем Тогда
					ПервуюПропускаем=ложь;
					Продолжить;
				КонецЕсли;
				ТипДокумента=СокрЛП(Стр.Ячейки[0].ТекстовоеСодержимое);
				Попытка
					НазнваниеДОкумента=СокрЛП(Стр.Ячейки[1].ДочерниеУзлы[1].Гиперссылка);
				Исключение
					Продолжить;
				КонецПопытки;
				Дата1=СокрЛП(Стр.Ячейки[2].ТекстовоеСодержимое);
				Дата2=СокрЛП(Стр.Ячейки[3].ТекстовоеСодержимое);
				Статус=СокрЛП(Стр.Ячейки[4].ТекстовоеСодержимое);
				
				
					
				HTTPЗапрос = Новый HTTPЗапрос(НазнваниеДОкумента);
				HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
				
				HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
				//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
				HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
				HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
				HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
				HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
				HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
				HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
				HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
 				HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
				HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
				
				Имяекселя=СокрЛП(Стр.Ячейки[1].ТекстовоеСодержимое);
				Имяекселя=Сред(Имяекселя,1,Найти(Имяекселя,Символы.ПС)-1);
				
				ПервыйФ=1;
			//	ИмяФ=КаталогВременныхФайлов+xmlString(ПервыйФ);
			//	ФФФ=Новый Файл(ИмяФ);
			//	Пока ФФФ.Существует() Цикл
			//		ПервыйФ=ПервыйФ+1;
			//		ИмяФ=КаталогВременныхФайлов+xmlString(ПервыйФ);
			//		ФФФ=Новый Файл(ИмяФ);
			//	КонецЦикла;
				//Имяекселя=КаталогВременныхФайлов+Имяекселя;
				
	Каталог = КаталогВременныхФайловНаКлиенте;
	ИмяФайла = Строка(Новый УникальныйИдентификатор) + ".xlsx";
	Имяекселя_1= Каталог+ИмяФайла;
				
				//Имяекселя_1=ПолучитьИмяВременногоФайла("xlsx");
				HTTPСервисЗапрос.Получить(HTTPЗапрос,Имяекселя_1);
				
				Данн=Новый ДвоичныеДанные(Имяекселя_1);
				Адр=ПоместитьВоВременноеХранилище(Данн);
				УдалитьФайлы(Имяекселя_1);
				
				
				СоздатьДокумент(НазнваниеДОкумента,Дата1,Дата2,Статус,Адр,Имяекселя,ТипДокумента);
				
				
				
			Конеццикла;
			
	НайтиТаблицы="export_table";
			
				HTTPЗапрос = Новый HTTPЗапрос("io/ui/"+НайтиТаблицы);
			HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
			
			HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
			//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
			HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
			HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			
			
			Чтение=Новый ЧтениеHTML;
			Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			ПостроительDOM = Новый ПостроительDOM;
			ДокументHTML = ПостроительDOM.Прочитать(Чтение);
			
			ПервуюПропускаем=Истина;
			Для Каждого Стр Из ДокументHTML.ПолучитьЭлементыПоИмени("tr") Цикл
				Если ПервуюПропускаем Тогда
					ПервуюПропускаем=ложь;
					Продолжить;
				КонецЕсли;
				ТипДокумента=СокрЛП(Стр.Ячейки[0].ТекстовоеСодержимое);
				НазнваниеДОкумента=СокрЛП(Стр.Ячейки[1].ДочерниеУзлы[1].Гиперссылка);
				Дата1=СокрЛП(Стр.Ячейки[2].ТекстовоеСодержимое);
				Дата2=СокрЛП(Стр.Ячейки[3].ТекстовоеСодержимое);
				Статус=СокрЛП(Стр.Ячейки[4].ТекстовоеСодержимое);
				
				
					
				HTTPЗапрос = Новый HTTPЗапрос(НазнваниеДОкумента);
				HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
				
				HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
				//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
				HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
				HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
				HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
				HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
				HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
				HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
				HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
 				HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
				HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
				
				Имяекселя=СокрЛП(Стр.Ячейки[1].ТекстовоеСодержимое);
				Имяекселя=Сред(Имяекселя,1,Найти(Имяекселя,Символы.ПС)-1);
				
				ПервыйФ=1;
			//	ИмяФ=КаталогВременныхФайлов+xmlString(ПервыйФ);
			//	ФФФ=Новый Файл(ИмяФ);
			//	Пока ФФФ.Существует() Цикл
			//		ПервыйФ=ПервыйФ+1;
			//		ИмяФ=КаталогВременныхФайлов+xmlString(ПервыйФ);
			//		ФФФ=Новый Файл(ИмяФ);
			//	КонецЦикла;
				//Имяекселя=КаталогВременныхФайлов+Имяекселя;
				
	Каталог = КаталогВременныхФайловНаКлиенте;
	ИмяФайла = Строка(Новый УникальныйИдентификатор) + ".xlsx";
	Имяекселя_1= Каталог+ИмяФайла;
				
				//Имяекселя_1=ПолучитьИмяВременногоФайла("xlsx");
				HTTPСервисЗапрос.Получить(HTTPЗапрос,Имяекселя_1);
				
				Данн=Новый ДвоичныеДанные(Имяекселя_1);
				Адр=ПоместитьВоВременноеХранилище(Данн);
				УдалитьФайлы(Имяекселя_1);
				
				
				СоздатьДокумент(НазнваниеДОкумента,Дата1,Дата2,Статус,Адр,Имяекселя,ТипДокумента);
				
				
				
			Конеццикла;
			
			
	Иначе
			
			Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение("srs.gs1ru.org",,,,Прокси,30);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение("srs.gs1ru.org",,,,,30);
			КонецЕсли;
			
			HTTPЗапрос = Новый HTTPЗапрос(ТекСайт+"/");
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			ВсеКУки=Ответ.Заголовки["Set-Cookie"];
			Если   ВсеКУки=Неопределено тогда
				ВсеКУки=Ответ.Заголовки["set-cookie"];
				
			Конецесли;
			
			ВсеКуки=СтрЗаменитЬ(ВсеКуки,",",Символы.ПС);
 			
			
		//	Oracle="717d81046d26723fb1eeb82b13dca94babe8ee96";
		    Oracle="";
		
			Кэш_3="";
			JSESSIONID="";
			Если ЗначениеЗАполнено(ВсеКУки) тогда
				Для Сч_1=1 По СтрЧислоСтрок(ВсеКуки) Цикл
					
					ПолучитьСтроку=СтрПолучитьСтроку(ВсеКуки,Сч_1);
					//Если Найти(ПолучитьСтроку,"Set-Cookie")=1 
					//	Тогда
					Если ЗначениеЗаполнено(Кэш_3) Тогда
						Кэш_3=Кэш_3+";";
					Конецесли;
						//КэшТ=КэшТ+ПолучитьСтроку;
						Коок=ПолучитьСтроку;
						Коок=Сред(Коок,1,Найти(Коок,";")-1);
						Кэш_3=Кэш_3+Коок;
						Если Найти(ПолучитьСтроку,"X-Oracle-BMC-LBS-Route")>0 Тогда
							//ПродолжитЬ;
							Oracle=Коок;
						Конецесли;
						Если Найти(КооК,"JSESSIONID")>0 Тогда
							JSESSIONID=Коок;
						Конецесли;
					
				КонецЦикла;
			
				
			КонецЕсли;
			
			
			
			HTTPЗапрос = Новый HTTPЗапрос(ТекСайт+"/j_security_check");
			HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_3);
		
			HTTPЗапрос.Заголовки.Вставить("Accept", " text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
			//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
			HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
			HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
//			Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko");
			//HTTPСервисЗапрос.SetRequestHeader("Connection" ,"Keep-Alive");
			//HTTPСервисЗапрос.SetRequestHeader("Host" ,"mercury.vetrf.ru");
			//HTTPЗапрос = Новый HTTPЗапрос("hs/",Заголовки);
//			Ответ=HTTPСервисЗапрос_Merc.Получить(HTTPЗапрос);
			Тело="j_character_encoding=UTF-8&j_username="+ПараметрыДлякилента.Пользователь+"&j_password="+ПараметрыДлякилента.Пароль;
			HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
			//Кэш_Т=Ответ.Заголовки["Set-Cookie"];
			
			ВсеКуки=Ответ.Заголовки["Set-Cookie"];
			Если   ВсеКуки=Неопределено Тогда
				ВсеКуки=Ответ.Заголовки["set-cookie"];
				
			Конецесли;
			
			ВсеКуки=СтрЗаменитЬ(ВсеКуки,",",Символы.ПС);
			
			//СтруктураКук=СтрРазделить(ВсеКуки,";") ;
			
			Кэш_Т=Oracle;
			
			Если Найти(ВсеКуки,"JSESSIONID")>0 Тогда
				JSESSIONID="";
			Конецесли;
			Если ЗначениеЗАполнено(ВсеКУки) тогда
				Для Сч_1=1 По СтрЧислоСтрок(ВсеКуки) Цикл
					
					ПолучитьСтроку=СтрПолучитьСтроку(ВсеКуки,Сч_1);
					
					Если Найти(ПолучитьСтроку,"=")=0 Тогда
						Продолжить;
					Конецесли;
					
						Если Найти(ПолучитьСтроку,"X-Oracle-BMC-LBS-Route")>0 Тогда
							Продолжить;
						Конецесли;
					
					//Если Найти(ПолучитьСтроку,"Set-Cookie")=1 
					//	Тогда
					Если ЗначениеЗаполнено(Кэш_Т) Тогда
						Кэш_Т=Кэш_Т+";";
					Конецесли;
						//КэшТ=КэшТ+ПолучитьСтроку;
						Коок=ПолучитьСтроку;
						Коок=Сред(Коок,1,Найти(Коок,";")-1);
						Кэш_Т=Кэш_Т+Коок;
						Если Найти(КооК,"JSESSIONID")>0 Тогда
							JSESSIONID=Коок;
						Конецесли;
						
						
						//Request.SetRequestHeader("Cookie",Коок);
					//КонецЕсли;
				КонецЦикла;
			
				
			КонецЕсли;


			
			
			
			
			
			HTTPЗапрос = Новый HTTPЗапрос(ТекСайт+"/");
			HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
			
			HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
			//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
			HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
			HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
			
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			//Кэш_Т=Ответ.Заголовки["Set-Cookie"];
			Ответ=Ответ.ПолучитьТелоКакСтроку();
			
			
			
			
			
			
			НайтиТаблицы=Сред(Ответ,Найти(Ответ,"import_table"));
			НайтиТаблицы=Сред(НайтиТаблицы,1,Найти(НайтиТаблицы,"""")-1);
			
			HTTPЗапрос = Новый HTTPЗапрос(ТекСайт+"/"+НайтиТаблицы);
			HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
			
			HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
			//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
			HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
			HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			
			
			Чтение=Новый ЧтениеHTML;
			Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			ПостроительDOM = Новый ПостроительDOM;
			ДокументHTML = ПостроительDOM.Прочитать(Чтение);
			
			ПервуюПропускаем=Истина;
			Для Каждого Стр Из ДокументHTML.ПолучитьЭлементыПоИмени("tr") Цикл
				Если ПервуюПропускаем Тогда
					ПервуюПропускаем=ложь;
					Продолжить;
				КонецЕсли;
				НазнваниеДОкумента=СокрЛП(Стр.Ячейки[0].ДочерниеУзлы[1].Гиперссылка);
				Дата1=СокрЛП(Стр.Ячейки[1].ТекстовоеСодержимое);
				Дата2=СокрЛП(Стр.Ячейки[2].ТекстовоеСодержимое);
				Статус=СокрЛП(Стр.Ячейки[3].ТекстовоеСодержимое);
				
				
					
				HTTPЗапрос = Новый HTTPЗапрос(ТекСайт+"/"+НазнваниеДОкумента);
				HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
				
				HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
				//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
				HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
				HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
				HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
				HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
				HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
				HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
				HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
 				HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
				HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
				
				Имяекселя=СокрЛП(Стр.Ячейки[0].ТекстовоеСодержимое);
				Имяекселя=Сред(Имяекселя,1,Найти(Имяекселя,Символы.ПС)-1);
				
				ПервыйФ=1;
			//	ИмяФ=КаталогВременныхФайлов+xmlString(ПервыйФ);
			//	ФФФ=Новый Файл(ИмяФ);
			//	Пока ФФФ.Существует() Цикл
			//		ПервыйФ=ПервыйФ+1;
			//		ИмяФ=КаталогВременныхФайлов+xmlString(ПервыйФ);
			//		ФФФ=Новый Файл(ИмяФ);
			//	КонецЦикла;
				//Имяекселя=КаталогВременныхФайлов+Имяекселя;
				
	Каталог = КаталогВременныхФайловНаКлиенте;
	ИмяФайла = Строка(Новый УникальныйИдентификатор) + ".xlsx";
	Имяекселя_1= Каталог+ИмяФайла;
				
				//Имяекселя_1=ПолучитьИмяВременногоФайла("xlsx");
				HTTPСервисЗапрос.Получить(HTTPЗапрос,Имяекселя_1);
				
				Данн=Новый ДвоичныеДанные(Имяекселя_1);
				Адр=ПоместитьВоВременноеХранилище(Данн);
				НачатьУдалениеФайлов(Новый ОписаниеОповещения("УдаленияФайла",ЭтаФорма),Имяекселя_1);
				
				
				СоздатьДокумент(НазнваниеДОкумента,Дата1,Дата2,Статус,Адр,Имяекселя);
				
				
				
			Конеццикла;
			Если Все Тогда
				Гиперссылка=ДокументHTML.ПолучитьЭлементыПоИмени("p")[1].ДочерниеУзлы[0].Гиперссылка;
				HTTPЗапрос = Новый HTTPЗапрос(ТекСайт+"/"+Гиперссылка);
				HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
				
				HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
				//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
				HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
				HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
				HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
				HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
				HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
				HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
				HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
				HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
				HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
				
					Каталог = КаталогВременныхФайловНаКлиенте;
	ИмяФайла = Строка(Новый УникальныйИдентификатор) + ".zip";
	ИмяВр= Каталог+ИмяФайла;

				//ИмяВр=ПолучитьИмяВременногоФайла("zip");
				HTTPСервисЗапрос.Получить(HTTPЗапрос,ИмяВр);
				
				
				НачатьУдалениеФайлов(Новый описаниеОповещения("ПослеРаспаковать",ЭтаФорма,ИмяВр),КаталогВременныхФайлов+"ZIP_M\","*.*");
				
				
				
				
			КонецЕсли;	
				
			КонецЕсли;
		
	КонецЕсли;
	
	
	Элементы.ТаблицаДокументы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРаспаковать(ИмяВр) Экспорт
	ЧтZIP=Новый ЧтениеZipФайла(ИмяВр);
	ЧтZIP.ИзвлечьВсе(КаталогВременныхФайлов+"ZIP_M");
	НачатьПоискФайлов(Новый ОписаниеОповещения("СоздаеМДокументыПоАрхиву",ЭтаФорма),КаталогВременныхФайлов+"ZIP_M","*.*");
КонецПроцедуры

&НаКлиенте
Процедура СоздаеМДокументыПоАрхиву(НайдФ,ДД) Экспорт
	Для Каждого Стр Из НайдФ Цикл
		Если Стр.Расширение=".xlsx" Тогда
			ССС=КодироватьСтрСервер(Стр.Имя);
				Данн=Новый ДвоичныеДанные(Стр.ПолноеИмя);
				Адр=ПоместитьВоВременноеХранилище(Данн);
				НачатьУдалениеФайлов(Новый ОписаниеОповещения("УдаленияФайла",ЭтаФорма),Стр.ПолноеИмя);
				
				СоздатьДокумент("download_file?file="+ССС,Неопределено,Неопределено,Неопределено,Адр,Стр.Имя);
		КонецЕсли;
	Конеццикла;
		Элементы.ТаблицаДокументы.Обновить();

КонецПроцедуры
&НаСервереБезКонтекста
Функция КодироватьСтрСервер(Стр)
	Стрк=КодироватьСтроку(СтрЗаменить(Стр," ","+"),СпособКодированияСтроки.КодировкаURL);
	Стрк=СтрЗаменить(СтрК,"%2B","+");
	Возврат СтрК
КонецФункции

&НаСервереБезКонтекста
Функция КодироватьСтрСерверURL(Стр)
	Стрк=КодироватьСтроку(Стр,СпособКодированияСтроки.КодировкаURL);
	Возврат СтрК
КонецФункции

&НаКлиенте
Процедура УдаленияФайла(РР) Экспорт
КонецПроцедуры
Процедура  СоздатьДокумент(НазваниеДокумента,Дата1,Дата2,Статус,Адр,Имяекселя,ТипДокумента="MDO")
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	GS1_Обувь_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Документ.GS1_Обувь_ХамелеонЦРПТ КАК GS1_Обувь_ХамелеонЦРПТ
		|ГДЕ
		|	GS1_Обувь_ХамелеонЦРПТ.НазваниеДокумента = &НазваниеДокумента";
	
	Запрос.УстановитьПараметр("НазваниеДокумента", НазваниеДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Докум=ВыборкаДетальныеЗаписи.ссылка.ПолучитьОбъект();
	Иначе
		
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Если ИспользоватьСайтGS1ПоМаркировке ИЛИ Пользователь.СайтыВходаВСистему.Наименование="Шины" 
		ИЛИ Пользователь.СайтыВходаВСистему.Наименование="Парфюм"
		ИЛИ Пользователь.СайтыВходаВСистему.Наименование="Молоко"
		Тогда
		Если Найти(НазваниеДокумента,"%24")>0 Тогда
			Имяекселя=Сред(НазваниеДокумента,Найти(НазваниеДокумента,"%24")+3);
		Иначе
			Имяекселя=НазваниеДокумента;
		КонецЕсли;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	GS1_Обувь_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Документ.GS1_Обувь_ХамелеонЦРПТ КАК GS1_Обувь_ХамелеонЦРПТ
		|ГДЕ
		|	GS1_Обувь_ХамелеонЦРПТ.ИмяФайла ПОДОБНО &ИмяФайла
		|	И GS1_Обувь_ХамелеонЦРПТ.Статус = &Статус";
	
	Запрос.УстановитьПараметр("ИмяФайла", Имяекселя);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		Докум=ВыборкаДетальныеЗаписи.ссылка.ПолучитьОбъект();

		Иначе
		
		
		Докум=Документы.GS1_Обувь_ХамелеонЦРПТ.СоздатьДокумент();
		
		     
		
		Докум.Дата=Текущаядата();
		КонецЕсли;
	КонецЕсли;;
	Докум.НазваниеДокумента=НазваниеДокумента;
	Если ЗначениеЗАполнено(Дата1) Тогда
		Если Год(Дата1)>=3999 И Год(Дата1)>0
			Тогда
			Если Не ЗначениеЗаполнено(Докум.Дата) Тогда
				Докум.Дата=ТекущаяДата();
			Конецесли;
		Иначе
			Докум.Дата=Дата(Дата1);
		Конецесли;
	КонецЕсли;
	Если ЗначениеЗаполнено(дата2) Тогда
		Если Год(Дата2)<3999 И Год(Дата2)>0 
			Тогда
			Докум.ДатаОбработки=Дата(Дата2);
		Конецесли;
	КонецЕсли;
	Докум.ИмяФайла=Имяекселя;
	Если ЗначениеЗаполнено(Статус) Тогда
		Докум.РезультатОбработкиДанныхВGS46=Статус;
		
		Если Статус="Успешно обработан"
			ИЛИ Статус="Завершено"
			Тогда
			Докум.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан;
		ИначеЕсли Статус="Файл обработан частично" Тогда
			Докум.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ФайлОбработанЧастично;
		ИначеЕсли Статус="Есть ошибочные записи" Тогда
			Докум.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ФайлОбработанЧастично;
		Иначе
			Докум.Ошибка=Статус;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Докум.Организация=Организации[0].Организация;
	
	Докум.ТекущийПользователь=Пользователь;
	
	Обработки._Запуск_ХамелеонЦРПТ.ОбработкаЗагрузкиДокумента(Докум,Адр,,ТипДокумента);
	
	Докум.Записать();
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Вставить содержимое обработчика.
	Попытка
	АвтоПодключение=АвтоматическиПодключаться(Пользователь);
	Если АвтоПодключение=Истина Тогда
		Подключиться("");
	ИначеЕсли ПодключатьсяАвтоматическиПоЦРПТ Тогда
		ПодключитьсяКЦРПТ("",Ложь);
	КонецЕсли;
	НачатьПолучениеКаталогаВременныхФайлов(Новый ОписаниеОповещения("КаталогВрФ",ЭтаФорма));
исключение
	КонецПопытки;
	НачатьПолучениеКаталогаВременныхФайлов(Новый ОписаниеОповещения("ПослеПолученияКаталога",Этаформа));
	
	
	Если ПроверкаПоПользователю(Пользователь) Тогда
		Пользователь=Неопределено;
	КонецЕсли;
	
	ПользовательПриИзмененииНаСервере();
	
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаПоПользователю(Пользователь)
	
	Масс=ОбщийМодуль_ОграничениеПользователей_ХамелеонЦРПТ.ВернутьСписокПользователей();
	Если Масс<>Неопределено Тогда
		Если Масс.Найти(Пользователь)=Неопределено Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат ЛожЬ;
	
КонецФункции

&НаКлиенте
Процедура ПослеПолученияКаталога(Кат,ДД) Экспорт
	КаталогВременныхФайловНаКлиенте=Кат;
	НачатьСозданиеКаталога(Новый ОписаниеОповещения("УдалитьТутВсе",ЭтаФорма), КаталогВременныхФайлов+"FILEKONTUR\") 
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТутВсе(РР,ДД) Экспорт
	//КаталогВременныхФайлов=РР;
	НачатьУдалениеФайлов(Новый ОписаниеОповещения("ПослеУдаления",ЭтаФорма), КаталогВременныхФайлов+"FILEKONTUR\","*.*") 
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаления(ДД) Экспорт
КонецПроцедуры

&НаСервере
Функция АвтоматическиПодключаться(Пользователь)
	
	ХранилищеСистемныхНастроек.Сохранить("ТекущийПользователь_ХамелеонЦРПТ","ТекущийПользователь_ХамелеонЦРПТ",Пользователь);
	
		если Константы.РежимРаботыХамелеонЦРПТ.Получить()=2 тогда
	этаформа.Заголовок="Тестовый режим: "
иначеесли Константы.РежимРаботыХамелеонЦРПТ.Получить()=1 тогда
	этаформа.Заголовок="РАБОЧИЙ РЕЖИМ"
Иначе
	этаформа.Заголовок="Задайте режим работы пользователя"

конецесли;	
	ЭтаФорма.Заголовок=ЭтаФорма.Заголовок+" "+Пользователь.Наименование;
	
	ЭтаФорма.Заголовок=ЭтаФорма.Заголовок+" \ "+Пользователь.СайтыВходаВСистему.Наименование+" \ "+Пользователь.Организация.Наименование;

	
	//ЭтаФорма.Заголовок=ЭтаФорма.Заголовок+" "+"Хамелеон ЦРПТ";

	Возврат Пользователь.ПодключатьсяКGS1Автоматически
Конецфункции

&НаКлиенте
Процедура КаталогВрФ(РР,ДД) Экспорт
	КаталогВременныхФайлов=РР;
	НачатьСозданиеКаталога(Новый ОписаниеОповещения("ДляСозданияZIP",ЭтаФорма), КаталогВременныхФайлов+"ZIP_M") 
КонецПроцедуры

&НаКлиенте
Процедура ДляСозданияZIP(РР,ДД) Экспорт
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
	Если Организации.Количество()=0 Тогда
		Подключиться(Элемент,ЛОжь);
	КонецЕсли;
	Если                         Организации.Количество()>0 Тогда
		Если  Копирование Тогда
			Отказ = Истина;
			Парам = Новый Структура;
			Парам.Вставить("Организация", Организации[0].Организация);
			Парам.Вставить("ЗначениеКопирования",Элемент.ТекущиеДанные.Ссылка);
			ОткрытьФорму("Документ.GS1_Обувь_ХамелеонЦРПТ.ФормаОбъекта", Парам,ЭтаФорма);
		Иначе
			Отказ = Истина;
			Парам = Новый Структура;
			Парам.Вставить("Организация", Организации[0].Организация);
			ОткрытьФорму("Документ.GS1_Обувь_ХамелеонЦРПТ.ФормаОбъекта", Парам,ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОтправкаШаблона(Команда)
	// Вставить содержимое обработчика.
	Если Организации.Количество()=0 Тогда
		подключиться(Команда,Истина);
	КонецЕсли;
	Если Организации.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	//СоздатьД=СоздатьДокумент_П();
	ОткрытьФорму("Документ.GS1_Обувь_ХамелеонЦРПТ.ФормаОбъекта",Новый Структура("ЗагрузитьИОтправить,Организация",Истина,Организации[0].Организация));
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьВСЕ(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	
	//Подключиться(Команда);
	
	//Если Подключились Тогда
	ЗагрузитьДокументы(Команда,истина);	
	
	
	
	Элементы.ТаблицаДокументы.Обновить();
	
КонецПроцедуры

Функция ВернутьОр()
	Возврат Пользователь.Организация
КонецФункции
&НаКлиенте
Процедура ЗаказыТаблицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
//	Если Организации.Количество()=0 Тогда
//		ПодключитьсяКЦРПТ(Элемент,ЛОжь);
//	КонецЕсли;
	Если                         Организации.Количество()>0 Тогда
		Если  Копирование Тогда
			Отказ = Истина;
			Парам = Новый Структура;
			Парам.Вставить("Организация", ВернутьОр());
			Парам.Вставить("Пользовтаель", Пользователь);
			Парам.Вставить("ЗначениеКопирования",Элемент.ТекущиеДанные.Ссылка);
			ОткрытьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.ФормаОбъекта", Парам,ЭтаФорма);
		Иначе
			Отказ = Истина;
			Парам = Новый Структура;
			Парам.Вставить("Организация", ВернутьОр());
			Парам.Вставить("Пользовтаель", Пользователь);
			ОткрытьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.ФормаОбъекта", Парам,ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьИНН(Н)
	Возврат Н.ИНН
КонецФункции

&НаКлиенте
Процедура ОрганизацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
		// Вставить содержимое обработчика.
	Если Поле.Имя="ОрганизацииЛицензия" И Элементы.Организации.ТекущиеДанные.Лицензия="!НЕ ОБНАРУЖЕНА ЛИЦЕНЗИЯ. КУПИТЬ" Тогда
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ЗапускПриложения",ЭтаФорма),"https://алкогольные-декларации.рф/form_order/?id=prodlenie-podpiski-na-ispolzovanie-hameleoncrpt-i-rassylka-obnovlenij-v-2021g.-dlya-1go-inn.-bez-dorabotok-i-konsultacij&inn="+ВернутьИНН(Элементы.Организации.ТекущиеДанные.Организация));
		СтандартнаяОбработка=Ложь;                      
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапускПриложения(РР,ДД) Экспорт
КонецПроцедуры


Функция ПолучитьИзПользователя() Экспорт
	Возврат Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(Пользователь);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТокенСрегистра(Thumbprint_1)
	Возврат Регистрысведений.ТокенПоСертификату_ХамелеонЦРПТ.Получить(Новый Структура("Отпечаток",Thumbprint_1)).Токен;
КонецФункции


&НаСервереБезКонтекста
Процедура ОбновитьСтатусДокумента_ВводВОборот(Ссылка,Статус,Ошибка,Заказ=неопределено)
	
	Если Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ Тогда
		Если Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
			 Тогда
			Возврат;
		КонецЕсли;
			
		
	КонецЕсли;
	
	Добб=Ссылка.ПолучитьОбъект();
	Добб.ОшибкаОтправки=Ошибка;
	Добб.Статус=Статус;
	//Если Заказ<>Неопределено тогда
	//	
	//	Добб.Товары.Очистить();
	//	Добб.СерийныеНомера.Очистить();
	//	
	//	Для Каждого Стр_з из ЗАказ.products Цикл
	//		
	//		
	//		Добав_С=Добб.СерийныеНомера.Добавить();
	//		Добав_С.НомерСтрокиСвязи="";
	//		//Добав_С.GTIN=Стр_З.gtin;
	//		//Добав_С.НаименованиеТовара=Добав.GTIN;
	//		Добав_С.cis=Стр_з.uit_code;
	//			
	//		
	//		
	//		Добав=Добб.Товары.Добавить();
	//		Добав.КоличествоКМ=Стр_З.code_quantity;
	//		code_type="";
	//		Если Стр_З.Свойство("code_type",code_type) Тогда
	//			Если code_type="GLUEABLE" Тогда
	//				Добав.ВидСИ=Перечисления.ВидСИ_ХамелеонЦРПТ.Клеевой;
	//			ИначеЕсли code_type="MOUNTABLE" Тогда
	//				Добав.ВидСИ=Перечисления.ВидСИ_ХамелеонЦРПТ.Навесной;
	//			Иначе
	//				Добав.ВидСИ=Перечисления.ВидСИ_ХамелеонЦРПТ.Печатаемый;
	//			КонецЕсли;
	//		Иначе
	//			
	//			Добав.ВидСИ=Перечисления.ВидСИ_ХамелеонЦРПТ.Печатаемый;
	//		КонецЕсли;
	//		Если Стр_З.emission_type="LOCAL" Тогда
	//			Добав.СпособВыпускаТоваров="Производство в РФ" 
	//		Иначе
	//			Добав.СпособВыпускаТоваров="Ввезен в РФ" 
	//		КонецЕсли;
	//		Если Стр_З.serial_num_type="SELF_MADE" Тогда
	//			Добав.СпособФормированияСН=Перечисления.СпособФормированияСН_ХамелеонЦРПТ.Самостоятельно
	//		Иначе
	//			Добав.СпособФормированияСН=Перечисления.СпособФормированияСН_ХамелеонЦРПТ.ОператорИСМП
	//		КонецЕсли;
	//		
	//		Добав.GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(Стр_З.gtin));
	//		Если Не ЗначениеЗаполнено(Добав.GTIN) Тогда
	//			СпрП=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
	//			СпрП.GTIN=Число(Стр_З.gtin);
	//			СпрП.Записать();
	//			Добав.GTIN=СпрП.Ссылка;
	//		КонецЕсли;
	//		marking_type="";
	//		Если Стр_З.Свойство("marking_type",marking_type) Тогда
	//			Если marking_type="PRODUCT_PACKAGE" Тогда
	//				Добав.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаПотребительскуюУпаковку;
	//			ИначеЕсли marking_type="PRODUCT" Тогда
	//				Добав.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаТовар;
	//			Иначе
	//				Добав.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаТоварныйЯрлык;
	//			КонецЕсли;
	//		Иначе
	//			Добав.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаТовар;
	//		КонецЕсли;
	//		
	//		СпрОрд=Справочники.ID_строки_партия_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_З.order_line_id);
	//		Если Не ЗначениеЗаполнено(СпрОрд) Тогда
	//			
	//			СпрОрд=Справочники.ID_строки_партия_ХамелеонЦРПТ.СоздатьЭлемент();
	//			СпрОрд.Наименование=Стр_З.order_line_id;
	//			СпрОрд.Записать();
	//		КонецЕсли;
	//		
	//		Добав.ID=СпрОрд.Ссылка;
	//		Добав.СтатусСтроки=Стр_З.order_line_status;
	//		Добав.КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(Стр_З.tn_ved_code);
	//		
	//		Если Не ЗначениеЗаполнено(Добав.КодТНВЭД) Тогда
	//			СпрК=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
	//			СпрК.Код=Стр_З.tn_ved_code;
	//			СпрК.Наименование=Стр_З.tn_ved_code;
	//			СпрК.Записать();
	//			Добав.КодТНВЭД=СпрК.Ссылка;
	//		КонецЕсли;
	//		
	//		Добав.НомерСтрокиСвязи=Добав.НомерСтроки;
	//		Если Стр_З.serial_numbers<>Неопределено тогда
	//			Для Каждого Стр_М Из Стр_З.serial_numbers Цикл
	//				
	//				Добав_С=Добб.СерийныеНомера.Добавить();
	//				Добав_С.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
	//				Добав_С.GTIN=Стр_З.gtin;
	//				Добав_С.НаименованиеТовара=Добав.GTIN;
	//				Добав_С.СерийныйНомер=Стр_М;
	//				
	//			Конеццикла;
	//		КонецЕсли;
	//		
	//	Конеццикла;
	//	
	//	
	//КонецЕсли;
	//
	
	
	Добб.Записать();
	Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан Тогда
		Попытка
			Добб.Записать(РежимЗаписиДокумента.Проведение) 
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если Найти(Ошибка,"05")=1 тогда
		
		Сообщить("В документе "+Строка(Добб.Ссылка)+" ошибка: "+Ошибка+". Проверьте коды ТНВЭД");
		
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
 Процедура ОбновитьСтатусДокумента_Отгрузка(Ссылка,Статус,Ошибка,Заказ=неопределено,НадоПринять=Ложь)
	 
	 ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусДокумента_Отгрузка(Ссылка,Статус,Ошибка,Заказ,НадоПринять);
	 Возврат;
	Если Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ Тогда
		Если Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета
			ИЛИ Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус
			ИЛИ Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы
			ИЛИ Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован Тогда
			Возврат;
		КонецЕсли;
			
		
	КонецЕсли;
	
	Если ТипЗнч(Ссылка)=Тип("ДокументСсылка.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ") 
		И Ссылка.Агрегации.Количество()>0 Тогда
		
			Добб=Ссылка.ПолучитьОбъект();
			Добб.ОшибкаОтправки=Ошибка;
			Добб.Статус=Статус;
			
			
			
			Добб.Записать();
			Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета 
				ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента
				ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
				
				Тогда
				Попытка
					Добб.ПометкаУдаления=ложь;
					Добб.Записать(РежимЗаписиДокумента.Проведение);
					
				Исключение
				КонецПопытки;
			КонецЕсли;
		
			Для Каждого Ссылка_1 Из Ссылка.Агрегации Цикл
				
				Добб=Ссылка_1.Агрегация.ПолучитьОбъект();
				Добб.ОшибкаОтправки=Ошибка;
				Добб.Статус=Статус;
				Добб.ВходитВГрупповую=ЛожЬ;
				
				
				
				Добб.Записать();
				Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета 
					ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента
					ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
					
					Тогда
					Попытка
						Добб.ПометкаУдаления=ложь;
						Добб.Записать(РежимЗаписиДокумента.Проведение);
						
						//Если Добб.НадоПрнинять=Истина Тогда
						//	НадоПринять=Новый Структура("ИНН,Ордер", Добб.Контрагент.ИНН,Добб._Order_ID);
						//КонецЕсли;
						
					Исключение
					КонецПопытки;
				КонецЕсли;
				
			Конеццикла;
		
		
		
		
		
		
		
		Возврат;
	КонецЕслИ;
	
	
	Добб=Ссылка.ПолучитьОбъект();
	Добб.ОшибкаОтправки=Ошибка;
	Добб.Статус=Статус;
	
	
	

	//Добб.ОшибкаОтправки=Ошибка;
	//Добб.Статус=Статус;
	Если ЗначениеЗАполненО(Заказ) тогда
		
		//Добб.Товары.Очистить();
		//Добб.СерийныеНомера.Очистить();
		
		//Добб.Короба.Очистить();
		Для Каждого СТР_1 Из Добб.СерийныеНомера Цикл
			Стр_1.Отказано=Ложь;
			
		Конеццикла;
		
		
		Сч=0;
		Для Каждого Стр_з из ЗАказ.body.products Цикл
			accepted="";
			Если Стр_з.Свойство("accepted",accepted) Тогда
				Если accepted="false" Тогда
					
				
					
				КонецЕсли;
				
				Конецесли;
			
			
			
		Конеццикла;
		
		
	КонецЕсли;
		
	
	
	Добб.Записать();
	Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета 
		ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента
		ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
		
		Тогда
		Попытка
			Добб.ПометкаУдаления=ложь;
			Добб.Записать(РежимЗаписиДокумента.Проведение);
			
			Если Добб.НадоПрнинять=Истина Тогда
				НадоПринять=Новый Структура("ИНН,Ордер", Добб.Контрагент.ИНН,Добб._Order_ID);
			КонецЕсли;
			
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры



&НаСервереБезКонтекста
Процедура ОбновитьСтатусДокумента(Ссылка,Статус,Ошибка,Заказ=неопределено,ПоЛюбому=Ложь,ТолькоСтатус=Ложь)
	
	Если Не ПоЛюбому Тогда
	Если Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ Тогда
		Если Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство
			ИЛИ Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус
			ИЛИ Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы
			ИЛИ Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован Тогда
			Возврат;
		КонецЕсли;
			
		
	КонецЕсли;
	КонецЕсли;
	Добб=Ссылка.ПолучитьОбъект();
	Добб.ОшибкаОтправки=Ошибка;
	Добб.Статус=Статус;
	Если Заказ<>Неопределено И Не ТолькоСтатус тогда
		
		Добб.Товары.Очистить();
		Добб.СерийныеНомера.Очистить();
		
		Для Каждого Стр_з из ЗАказ.products_information Цикл
			Добав=Добб.Товары.Добавить();
			Добав.КоличествоКМ=Стр_З.code_quantity;
			code_type="";
			Если Стр_З.Свойство("code_type",code_type) Тогда
				Если code_type="GLUEABLE" Тогда
					Добав.ВидСИ=Перечисления.ВидСИ_ХамелеонЦРПТ.GLUED;
				ИначеЕсли code_type="MOUNTABLE" Тогда
					Добав.ВидСИ=Перечисления.ВидСИ_ХамелеонЦРПТ.HINGED;
				Иначе
					Добав.ВидСИ=Перечисления.ВидСИ_ХамелеонЦРПТ.PRINTED;
				КонецЕсли;
			Иначе
				
				Добав.ВидСИ=Перечисления.ВидСИ_ХамелеонЦРПТ.PRINTED;
			КонецЕсли;
			Если Стр_З.emission_type="LOCAL" Тогда
				Добав.СпособВыпускаТоваров="Производство в РФ" 
			Иначе
				Добав.СпособВыпускаТоваров="Ввезен в РФ" 
			КонецЕсли;
			Если Стр_З.serial_num_type="SELF_MADE" Тогда
				Добав.СпособФормированияСН=Перечисления.СпособФормированияСН_ХамелеонЦРПТ.Самостоятельно
			Иначе
				Добав.СпособФормированияСН=Перечисления.СпособФормированияСН_ХамелеонЦРПТ.ОператорИСМП
			КонецЕсли;
			
			Добав.GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(Стр_З.gtin));
			Если Не ЗначениеЗаполнено(Добав.GTIN) Тогда
				СпрП=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
				СпрП.GTIN=Число(Стр_З.gtin);
		СпрП.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
				
				СпрП.Записать();
				Добав.GTIN=СпрП.Ссылка;
			КонецЕсли;
			marking_type="";
			Если Стр_З.Свойство("marking_type",marking_type) Тогда
				Если marking_type="PRODUCT_PACKAGE" Тогда
					Добав.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаПотребительскуюУпаковку;
				ИначеЕсли marking_type="PRODUCT" Тогда
					Добав.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаТовар;
				Иначе
					Добав.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаТоварныйЯрлык;
				КонецЕсли;
			Иначе
				Добав.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаТовар;
			КонецЕсли;
			
			СпрОрд=Справочники.ID_строки_партия_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_З.order_line_id);
			Если Не ЗначениеЗаполнено(СпрОрд) Тогда
				
				СпрОрд=Справочники.ID_строки_партия_ХамелеонЦРПТ.СоздатьЭлемент();
				СпрОрд.Наименование=Стр_З.order_line_id;
				СпрОрд.Записать();
			КонецЕсли;
			
			Добав.ID=СпрОрд.Ссылка;
			Добав.СтатусСтроки=Стр_З.order_line_status;
			
			Добав.КодТНВЭД=Добав.GTIN.КодТНВЭД;
			Если Не ЗначениеЗаполнено(Добав.КодТНВЭД) Тогда
				 //{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	КодТНВЭД_ХамелеонЦРПТ.Ссылка
					|ИЗ
					|	Справочник.КодТНВЭД_ХамелеонЦРПТ КАК КодТНВЭД_ХамелеонЦРПТ
					|ГДЕ
					|	КодТНВЭД_ХамелеонЦРПТ.Код ПОДОБНО &Код";
				
				Запрос.УстановитьПараметр("Код", Стр_З.tn_ved_code+"%");
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					Добав.КодТНВЭД=ВыборкаДетальныеЗаписи.Ссылка;

				Иначе			
					Добав.КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(Стр_З.tn_ved_code);
					
					Если Не ЗначениеЗаполнено(Добав.КодТНВЭД) Тогда
						СпрК=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
						СпрК.Код=Стр_З.tn_ved_code;
						СпрК.Наименование=Стр_З.tn_ved_code;
						СпрК.Записать();
						Добав.КодТНВЭД=СпрК.Ссылка;
					КонецЕсли;
				Конецесли;
			КонецЕсли;
			Добав.НомерСтрокиСвязи=Добав.НомерСтроки;
			//Если Стр_З.serial_numbers<>Неопределено тогда
			//	Для Каждого Стр_М Из Стр_З.serial_numbers Цикл
			//		
			//		Добав_С=Добб.СерийныеНомера.Добавить();
			//		Добав_С.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
			//		Добав_С.GTIN=Стр_З.gtin;
			//		Добав_С.НаименованиеТовара=Добав.GTIN;
			//		Добав_С.СерийныйНомер=Стр_М;
			//		
			//	Конеццикла;
			//КонецЕсли;
			
		Конеццикла;
		
		
	КонецЕсли;
	
	Если Полюбому И Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ Тогда
		Добб._Order_ID="";
		Для Каждого Стр_1 Из Добб.Товары Цикл
			Стр_1.ID=""
		Конеццикла;
	КонецЕсли;
	
	Добб.Записать();
	Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован 
		ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы
		Тогда
		Попытка
			Добб.Записать(РежимЗаписиДокумента.Проведение) 
		Исключение
		КонецПопытки;
		КонецЕсли;
КонецПроцедуры

Функция ВернутьГТИН(Н)	
	Возврат xmlString(Н.GTIN)
КонецФункции


&НаСервереБезКонтекста
Процедура ЗаписатьОтветвЗаказ(Ссылка,Ответ_1)
	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Ссылка);
	РегДв.Отбор.Вид.Установить("Получили ответ");
	Добав=РегДв.Добавить();
	Добав.Документ=Ссылка;
	Добав.Вид="Получили ответ";
	Добав.Файл=Новый ХранилищеЗначения(Ответ_1,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьСтатусыДокументовНаСервереВвод_Использование(ДокументПроверки,Пользователь)
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводВОборот_ХамелеонЦРПТ.Ссылка,
		|	ВводВОборот_ХамелеонЦРПТ._Order_ID
		|ИЗ
		|	Документ.ВводВОборот_ХамелеонЦРПТ КАК ВводВОборот_ХамелеонЦРПТ
		|ГДЕ
		|	ВводВОборот_ХамелеонЦРПТ.Статус В(&Статус)
		|	И ПОДСТРОКА(ВводВОборот_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|	И ВводВОборот_ХамелеонЦРПТ.ТипДокумента = &ТипДокумента
		|	И ВводВОборот_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему.Наименование <> ""Фармацевтика""
		|	И ВводВОборот_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему = &СайтыВходаВСистему";
	
	Если ЗначениеЗаполнено(ДокументПроверки) Тогда
		Запрос.Текст = Запрос.Текст +"
		|И ВводВОборот_ХамелеонЦРПТ.Ссылка в (&ДокументПроверки)";
		Запрос.УстановитьПараметр("ДокументПроверки",ДокументПроверки);
		
	КонецЕсли;
	
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета);
	
	Запрос.УстановитьПараметр("СайтыВходаВСистему",	Пользователь.СайтыВходаВСистему); 
	
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	Запрос.УстановитьПараметр("ТипДокумента",	Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	
Конецфункции


&НаСервереБезКонтекста
Функция ОбновитьСтатусыДокументовНаСервереСозданиеНовогоШкНаКороба_ХамелеонЦРПТ(ДокументПроверки,Пользователь)
	Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусыДокументовНаСервереСозданиеНовогоШкНаКороба_ХамелеонЦРПТ(ДокументПроверки,Пользователь)
Конецфункции

&НаСервереБезКонтекста
Функция ОбновитьСтатусыДокументовНаСервереПеремаркировка_ХамелеонЦРПТ(ДокументПроверки,ТекущийПользователь)
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Перемаркировка_ХамелеонЦРПТ.Ссылка,
		|	Перемаркировка_ХамелеонЦРПТ._Order_ID КАК _Order_ID
		|ИЗ
		|	Документ.Перемаркировка_ХамелеонЦРПТ КАК Перемаркировка_ХамелеонЦРПТ
		|ГДЕ
		|	Перемаркировка_ХамелеонЦРПТ.Статус В(&Статус)
		|	И Перемаркировка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему.Наименование <> ""Фармацевтика""
		|	И ПОДСТРОКА(Перемаркировка_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|	И Перемаркировка_ХамелеонЦРПТ.Организация = &Организация
		|	И Перемаркировка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему = &СайтыВходаВСистему";
	Если ЗначениеЗаполнено(ДокументПроверки) тогда
		Запрос.Текст = Запрос.Текст +"
		|  И Перемаркировка_ХамелеонЦРПТ.Ссылка=&ДокументПроверки";
		Запрос.УстановитьПараметр("ДокументПроверки",ДокументПроверки);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СайтыВходаВСистему",	ТекущийПользователь.СайтыВходаВСистему); 
	
	
	Запрос.УстановитьПараметр("Организация",	ТекущийПользователь.Организация); 
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	
Конецфункции


&НаСервере
Функция ОбновитьСтатусыДокументовНаСервере_ОдинДокумент(ДокументПроверки,ЗаказыСУЗ=Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказМарок_ХамелеонЦРПТ.Ссылка,
		|	ЗаказМарок_ХамелеонЦРПТ._Order_ID
		|ИЗ
		|	Документ.ЗаказМарок_ХамелеонЦРПТ КАК ЗаказМарок_ХамелеонЦРПТ
		|ГДЕ
		|	ЗаказМарок_ХамелеонЦРПТ.Статус В(&Статус)
		|	И ЗаказМарок_ХамелеонЦРПТ.Ссылка = &ДокументПроверки
		|	И ПОДСТРОКА(ЗаказМарок_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|	И (ЗаказМарок_ХамелеонЦРПТ.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипПродукции_ХамелеонЦРПТ.Обувь)
		|			ИЛИ ЗаказМарок_ХамелеонЦРПТ.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипПродукции_ХамелеонЦРПТ.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказМарок_ХамелеонЦРПТ.Организация";
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	
	Запрос.УстановитьПараметр("ДокументПроверки",	ДокументПроверки); 
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	//КонецЕсли;
	Возврат Массив_1
	
Конецфункции

Процедура НаСервереОБновляемСтатусыВСЕЗаказы(Текст1,Ссылка,ТолькоСтатус)
					ЧтениеJSON = Новый ЧтениеJSON;
					ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ПрочитатьJSON(ЧтениеJSON);
					Если NNN.order_status="DRAFT" Тогда
						
						ОбновитьСтатусДокумента(Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ЧерновикОбработан"),"",,,ТолькоСтатус);
					ИначеЕсли NNN.order_status="VALIDATION_FAILED" 
						ИЛИ NNN.order_status="ERROR" 
						Тогда
						ОбновитьСтатусДокумента(Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.order_status_details,,ИСТИНА,ТолькоСтатус);
					ИначеЕсли NNN.order_status="READY_FOR_EXTERNAL_PROCESSING" Тогда
						ОбновитьСтатусДокумента(Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус"),"",,,ТолькоСтатус);
						
					ИначеЕсли NNN.order_status="PRODUCTION" 
						ИЛИ NNN.order_status="EXTERNAL_PROCESSING" 
						Тогда
						ОбновитьСтатусДокумента(Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство"),"",NNN.document_information,,ТолькоСтатус);
					ИначеЕсли NNN.order_status="PROCESSING_FAILED" Тогда
						ОбновитьСтатусДокумента(Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.order_status_details,,,ТолькоСтатус);
					ИначеЕсли NNN.order_status="MK_PARTLY_EMITTED" Тогда
						ОбновитьСтатусДокумента(Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы"),"",NNN.document_information,,ТолькоСтатус);
					ИначеЕсли NNN.order_status="MK_EMITTED" Тогда
						ОбновитьСтатусДокумента(Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован"),"",NNN.document_information,,ТолькоСтатус);
					КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьДокументыПоСУЗ(Thumbprint_1,МассивОбновляем=Неопределено)
	Массив_1=Новый Массив;
		
		
		
		Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписаниеКМНанесенныхНеНанесенныхНаТовар_ХамелеонЦРПТ.Ссылка,
		|	СписаниеКМНанесенныхНеНанесенныхНаТовар_ХамелеонЦРПТ._Order_ID
		|ИЗ
		|	Документ.СписаниеКМНанесенныхНеНанесенныхНаТовар_ХамелеонЦРПТ КАК СписаниеКМНанесенныхНеНанесенныхНаТовар_ХамелеонЦРПТ
		|ГДЕ
		|	СписаниеКМНанесенныхНеНанесенныхНаТовар_ХамелеонЦРПТ.Статус В(&Статус)
		|	И ПОДСТРОКА(СписаниеКМНанесенныхНеНанесенныхНаТовар_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|	И (СписаниеКМНанесенныхНеНанесенныхНаТовар_ХамелеонЦРПТ.ТипПродукции В(&ТипПроудкции) ИЛИ СписаниеКМНанесенныхНеНанесенныхНаТовар_ХамелеонЦРПТ.ЧерезСУЗ) 
		|	И СписаниеКМНанесенныхНеНанесенныхНаТовар_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему = &СайтыВходаВСистему";
	
	Если МассивОбновляем<>Неопределено Тогда
		Запрос.Текст=Запрос.Текст+"
		|И СписаниеКМНанесенныхНеНанесенныхНаТовар_ХамелеонЦРПТ.Ссылка в (&МассивОбновляем)";
		Запрос.УстановитьПараметр("МассивОбновляем",МассивОбновляем);
	КонецЕсли;
	
	ТипПроудкции=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	//ТипПроудкции.Добавить(Перечисления.ТипПродукции_ХамелеонЦРПТ.Шины);
///	ТипПроудкции.Добавить(Перечисления.ТипПродукции_ХамелеонЦРПТ.Молоко);
	//ТипПроудкции.Добавить(Перечисления.ТипПродукции_ХамелеонЦРПТ.Свет);
	//ТипПроудкции.Добавить(Перечисления.ТипПродукции_ХамелеонЦРПТ.Одежда);
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправ);
	ТипПроудкции.Добавить(Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак);
	ТипПроудкции.Добавить(Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак);
	ТипПроудкции.Добавить(Перечисления.ТипПродукции_ХамелеонЦРПТ.Фармацевтика);
	//ТипПроудкции.Добавить(Перечисления.ТипПродукции_ХамелеонЦРПТ.Фото);
	//ТипПроудкции.Добавить(Перечисления.ТипПродукции_ХамелеонЦРПТ.Парфюм);
	
	Запрос.УстановитьПараметр("СайтыВходаВСистему",	Пользователь.СайтыВходаВСистему); 
	
	Запрос.УстановитьПараметр("ТипПроудкции",	ТипПроудкции); 
	
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета);
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	Возврат Массив_1

КонецФункции

Процедура ЗагрузканаСервереОтправитьСписание_Шины(Thumbprint_1,Тело,Адрес,Порт,ПолучитьДокументы,Защищ)
	      Для Каждого Стр Из ПолучитьДокументы Цикл
	
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;
			
	
		HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/report/info?reportId="+Стр.order_id+"&omsId="+Thumbprint_1.ИдентификаторСУЗ);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
																			ТокенСУЗ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);

	HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
	
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.reportStatus="READY_TO_SEND" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета"),"");
						
						//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ЧерновикОбработан"),"");
					//ИначеЕсли NNN.status="CHECKED_OK" Тогда
					//	ОбновитьСтатусДокумента_ВводВОборот(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"",NNN.body);
						
					КонецЕсли;
				
				//ОбработаноМассив.Добавить(Стр);
//				a/=1
			Иначе				    ОшибкаОтправки="";
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Попытка
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
					ОшибкаОтправки=Текст1;
				КонецПопытки;
			ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),ОшибкаОтправки);
		

		КонецЕсли;
		
	        Конеццикла;
	
КонецПроцедуры

Функция ПолучитьСписоскПродукцииОстаток()
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Продукция_ХамелеонЦРПТ.guid,
		|	Продукция_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
		|ГДЕ
		|	Продукция_ХамелеонЦРПТ.Остатки
		|	И Продукция_ХамелеонЦРПТ.guid <> """"
		|	И Продукция_ХамелеонЦРПТ.ДатаПубликации = ДАТАВРЕМЯ(1, 1, 1)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивН=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		МассивН.Добавить(Новый Структура("Ссылка,ГУИД",ВыборкаДетальныеЗаписи.Ссылка,ВыборкаДетальныеЗаписи.guid));
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Возврат МассивН
	
Конецфункции


&НаСервереБезКонтекста
Процедура ПолучимГТИНПродукции(Текст1,Ссылка,ГТИН)
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
	
	
	
	Пр=Ссылка.ПолучитЬОбъект();
	gtin="";
	Если NNN.body.products_list[0].Свойство("gtin",gtin) Тогда
		Пр.gtin=NNN.body.products_list[0].gtin;
	Конецесли;
	Пр.guid="";
	Статус="";
	Если NNN.Свойство("status",Статус) Тогда
		Если (Статус="CHECKED_NOT_OK" ИЛИ Статус="PARSE_ERROR"
									ИЛИ Статус="PROCESSING_ERROR"

			)
			И NNN.Свойство("downloadDesc",Статус) Тогда
			Пр.ОшибкаОбработки=Статус;
		Конецесли;
	КонецЕсли;
	//ДатаДокумента=NNN.receivedAt;
	Пр.Записать();
	ГТИН=gtin;
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ПолучимГТИНПродукции_Табак(Текст1,Ссылка,ГТИН)
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
	
	
	
	Пр=Ссылка.ПолучитЬОбъект();
	gtin="";
	Строка=NNN.products_list[0];
	Если Строка.Свойство("gtin",gtin) Тогда
		Пр.gtin=gtin;
		Строка.Свойство("name",Пр.Наименование);
		Строка.Свойство("brand",Пр.БрендТорговаяМарка);
		Строка.Свойство("tnvedCode",Пр.ТНВЭДДляОстатка);
		
		Если Строка.productGroup="OTP"	Тогда
			Пр.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак
		Иначе
			Пр.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак
		КонецЕсли;
		
	Конецесли;
	
	
	
	Пр.guid="";
	Статус="";
	Если NNN.Свойство("status",Статус) Тогда
		Если (Статус="CHECKED_NOT_OK" ИЛИ Статус="PARSE_ERROR"
									ИЛИ Статус="PROCESSING_ERROR"
)
			И NNN.Свойство("downloadDesc",Статус) Тогда
			Пр.ОшибкаОбработки=Статус;
			Если Не ЗначениеЗаполненО(Пр.ОшибкаОбработки) Тогда
				Пр.ОшибкаОбработки="Обработан с ошибками"
			КонецЕсли;
		Конецесли;
	КонецЕсли;
	
	//ДатаДокумента=NNN.receivedAt;
	Пр.Записать();
	ГТИН=gtin;
КонецПроцедуры




&НаСервереБезКонтекста
Функция ВернутьВводвоборотЛекарства()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводВОборот_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Документ.ВводВОборот_ХамелеонЦРПТ КАК ВводВОборот_ХамелеонЦРПТ
		|ГДЕ
		//|	ВводВОборот_ХамелеонЦРПТ.ТипДокумента = &ТипДокумента
		|	ПОДСТРОКА(ВводВОборот_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|	И ВводВОборот_ХамелеонЦРПТ.Статус В(&Статус)
		|	И ВводВОборот_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему.Наименование = ""Фармацевтика""";
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
//	Запрос.УстановитьПараметр("ТипДокумента",	Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании); 
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивВ=Новый Массив;
	Сч=0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		МассивВ.Добавить(Новый Структура("Ссылка,order_ID,Сч",ВыборкаДетальныеЗаписи.Ссылка,ВыборкаДетальныеЗаписи.Ссылка._Order_ID,Сч));
		Сч=Сч+1;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Возврат    МассивВ
	

КонецФункции

&НаСервереБезКонтекста
Функция ВернутьАгрегациюЛекарства()
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Отгрузка_ХамелеонЦРПТ.Ссылка,
		|	Отгрузка_ХамелеонЦРПТ._Order_ID
		|ИЗ
		|	Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ КАК Отгрузка_ХамелеонЦРПТ
		|ГДЕ
		|	Отгрузка_ХамелеонЦРПТ.Статус В(&Статус)
		|	И ПОДСТРОКА(Отгрузка_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|	И Отгрузка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему.Наименование = ""Фармацевтика""";
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаемРегистрациюУчастникавИСМП);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента);
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	
Конецфункции



&НаСервереБезКонтекста
Функция ВернутьОтгрузкуЛекарстваобратныйакцепт()
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Отгрузка_ХамелеонЦРПТ.Ссылка,
		|	Отгрузка_ХамелеонЦРПТ.LetterIDДиадок КАК _Order_ID
		|ИЗ
		|	Документ.Отгрузка_ХамелеонЦРПТ КАК Отгрузка_ХамелеонЦРПТ
		|ГДЕ
		|	Отгрузка_ХамелеонЦРПТ.Статус В(&Статус)
		|	И ПОДСТРОКА(Отгрузка_ХамелеонЦРПТ.LetterIDДиадок, 1, 1000) <> """"
		|	И Отгрузка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему.Наименование = ""Фармацевтика""
		|	И Отгрузка_ХамелеонЦРПТ.ОбратныйАкцепт";
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаемРегистрациюУчастникавИСМП);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента);
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	
Конецфункции


&НаСервереБезКонтекста
Функция ВернутьОтгрузкуЛекарства()
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Отгрузка_ХамелеонЦРПТ.Ссылка,
		|	Отгрузка_ХамелеонЦРПТ._Order_ID
		|ИЗ
		|	Документ.Отгрузка_ХамелеонЦРПТ КАК Отгрузка_ХамелеонЦРПТ
		|ГДЕ
		|	Отгрузка_ХамелеонЦРПТ.Статус В(&Статус)
		|	И ПОДСТРОКА(Отгрузка_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|	И Отгрузка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему.Наименование = ""Фармацевтика""
		|	И НЕ Отгрузка_ХамелеонЦРПТ.ОбратныйАкцепт";
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаемРегистрациюУчастникавИСМП);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента);
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	
Конецфункции

&НаСервереБезКонтекста
Функция ВернутьОтказыПоЛекарствам	()
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Отгрузка_ХамелеонЦРПТ.Ссылка,
		|	Отгрузка_ХамелеонЦРПТ._Order_ID
		|ИЗ
		|	Документ.РегистрацияСеденийОбОтзывеОтгрузок_ХамелеонЦРПТ КАК Отгрузка_ХамелеонЦРПТ
		|ГДЕ
		|	Отгрузка_ХамелеонЦРПТ.Статус В(&Статус)
		|	И ПОДСТРОКА(Отгрузка_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|	И Отгрузка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему.Наименование = ""Фармацевтика""";
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаемРегистрациюУчастникавИСМП);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента);
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	
Конецфункции

&НаСервереБезКонтекста
Функция ВернутьОтказыПоЛекарствамСВОИ	()
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрацияСведенийОбОтменеОперации_ХамелеонЦРПТ.Ссылка,
		|	РегистрацияСведенийОбОтменеОперации_ХамелеонЦРПТ._Order_ID
		|ИЗ
		|	Документ.РегистрацияСведенийОбОтменеОперации_ХамелеонЦРПТ КАК РегистрацияСведенийОбОтменеОперации_ХамелеонЦРПТ
		|ГДЕ
		|	РегистрацияСведенийОбОтменеОперации_ХамелеонЦРПТ.Статус В(&Статус)
		|	И ПОДСТРОКА(РегистрацияСведенийОбОтменеОперации_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|	И РегистрацияСведенийОбОтменеОперации_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему.Наименование = ""Фармацевтика""";
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаемРегистрациюУчастникавИСМП);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента);
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	
Конецфункции


Процедура ОбновитьСтатусыДокументовЛекарстваСервер(Thumbprint_1,УжеОтправили=Ложь)
	
	Срегистра=Неопределено;
			
	МассивЛекарств=ВернутьВводвоборотЛекарства();
	
	Если МассивЛекарств.Количество()>0 Тогда
		
			СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			Попытка
				СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
			исключение
				СРегистра=Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		    Для Каждого Стр Из    МассивЛекарств Цикл
					
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+Стр.order_id+"/ticket");
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.order_id+"/ticket");
					
				Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
					
					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
					
				КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
		
		
		 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				 
				 
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					
					
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(NNN.link,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//
					Сайт_1=NNN.link;
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
					
					
										
					
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		                  КонецЕсли;
			          Чтен=Новый ЧтениеXML;
					    Чтен.УстановитьСтроку(Текст1);
						Результат="";
						Ошибка="";
						Попытка
						Пока Чтен.Прочитать() Цикл
							Если Чтен.Имя="operation_result" Тогда
								Чтен.Прочитать();
								Результат=Чтен.Значение;
								Чтен.Прочитать()
							ИначеЕсли Чтен.Имя="operation_comment" Тогда
								
								Чтен.Прочитать();
								Ошибка=Чтен.Значение;
								Чтен.Прочитать()
							КонецЕсли;
						Конеццикла;
					Исключение
					КонецПопытки;
					
					  ОработатьДокументы(Стр,Результат,Ошибка,Текст1)

					
					//ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					    			Если УжеОтправили=Истина Тогда
										ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);		
										Возврат
									Иначе
										ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);
										ОбновитьСтатусыДокументовЛекарстваСервер(Thumbprint_1,Истина);			
										Возврат;
									КонецЕсли
					
				ИначеЕсли Ответ.КодСостояния=301 Тогда
					
					ОшибкаОтправки="";
					//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
						ОшибкаОтправки=NNN.error_message;
						
					Исключение
					КонецПопытки;
					//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
					
					
				КонецЕсли;
		

		
			Исключение
			КонецПопытки;
		 Конеццикла;
		
	 КонецЕсли;
	 
	 
	 
	 
	//////ЛЕКАРСТВА!!
		МассивОтправок=ВернутьСтатусыДокументовПоТабличнойЧасти();

	ОбработаноМассив=Новый Массив;
		Если МассивОтправок.Количество()>0 Тогда
		Если Не ЗначениеЗаполнено(СРегистра) Тогда	
			
				СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Если Не ЗначениеЗаполнено(СРегистра) тогда
					Попытка
						СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
					исключение
						СРегистра=Неопределено;
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		    Для Каждого Стр Из    МассивОтправок Цикл
				ОбработаноМассив.Очистить();	
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+Стр.order_id+"/ticket");
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.order_id+"/ticket");
					
				Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
					
					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
					
				КонецЕсли;
 		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);

			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Документ,Текст1);
				
			Конецесли;
		
		 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				   Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					
					            Сайт_1=NNN.link;
					//Сайт="https://"+Thumbprint_1.АдресКАПИ+":443";
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");

					//
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//
					//
					//Сайт_1=СтрЗаменить(Сайт_1,"http://nginx-for-lk:8080/","");
					
										Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);

					
					
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		
		
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);

		
		
					      КонецЕсли;
		
			          Чтен=Новый ЧтениеXML;
					    Чтен.УстановитьСтроку(Текст1);
						Результат="";
						Ошибка="";
						Попытка
						Пока Чтен.Прочитать() Цикл
							Если Чтен.Имя="operation_result" Тогда
								Чтен.Прочитать();
								Результат=Чтен.Значение;
								Чтен.Прочитать()
							ИначеЕсли Чтен.Имя="operation_comment" Тогда
								
								Чтен.Прочитать();
								Ошибка=Чтен.Значение;
								Чтен.Прочитать()
							КонецЕсли;
						Конеццикла;
					Исключение
					КонецПопытки;
						 
					
					
					
					ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					    			Если УжеОтправили=Истина Тогда
										ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);		
										Возврат
									Иначе
										ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);
										ОбновитьСтатусыДокументовЛекарстваСервер(Thumbprint_1,Истина);			
										Возврат;
									КонецЕсли
						
				ИначеЕсли Ответ.КодСостояния=301 Тогда
					
					ОшибкаОтправки="";
					//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
						ОшибкаОтправки=NNN.error_message;
						
					Исключение
					КонецПопытки;
					//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
					
					
				КонецЕсли;
			Исключение
			КонецПопытки;
		Конеццикла;

		ОбработаноМассив_Обработать(ОбработаноМассив);
		
		   КонецЕсли;
	
	           Элементы.ОплатаЗаКМ_Таблица.Обновить();;
	 
	МассивЛекарств=ВернутьОтгрузкуЛекарства();
	
	Если МассивЛекарств.Количество()>0 Тогда
		Если Не ЗначениеЗаполнено(СРегистра) Тогда	
				СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Если Не ЗначениеЗаполнено(СРегистра) тогда
					Попытка
						СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
					исключение
						СРегистра=Неопределено;
					КонецПопытки;
				КонецЕсли;
	КонецЕсли;	
		    Для Каждого Стр Из    МассивЛекарств Цикл
					
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+Стр.order_id+"/ticket");
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.order_id+"/ticket");
					
				Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
					
					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
					
				КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
		
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	
	//	 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				 
				 
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					   Сайт_1=NNN.link;
					//Сайт="https://"+Thumbprint_1.АдресКАПИ+":443";
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");

					//
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//
					//
					//
					//Сайт_1=СтрЗаменить(Сайт_1,"http://nginx-for-lk:8080/","");
					
										Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);

										
					
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		                  КонецЕсли;
			          Чтен=Новый ЧтениеXML;
					    Чтен.УстановитьСтроку(Текст1);
						Результат="";
						Ошибка="";
						Попытка
						Пока Чтен.Прочитать() Цикл
							Если Чтен.Имя="operation_result" Тогда
								Чтен.Прочитать();
								Результат=Чтен.Значение;
								Чтен.Прочитать()
							ИначеЕсли Чтен.Имя="operation_comment" Тогда
								
								Чтен.Прочитать();
								Ошибка=Чтен.Значение;
								Чтен.Прочитать()
							КонецЕсли;
						Конеццикла;
					Исключение
					КонецПопытки;
					
					  ОработатьДокументы(Стр,Результат,Ошибка,Текст1)

					
					//ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					    			Если УжеОтправили=Истина Тогда
										ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);		
										Возврат
									Иначе
										ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);
										ОбновитьСтатусыДокументовЛекарстваСервер(Thumbprint_1,Истина);			
										Возврат;
									КонецЕсли
					
				ИначеЕсли Ответ.КодСостояния=301 Тогда
					
					ОшибкаОтправки="";
					//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
						ОшибкаОтправки=NNN.error_message;
						
					Исключение
					КонецПопытки;
					//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
					
					
				КонецЕсли;
		
		//	Исключение
		//	КонецПопытки;
		 Конеццикла;
		
	 КонецЕсли;
	 
	 
	 Элементы.Отгрузка_Список.Обновить();;
	 
	 
	 
	 
	 
	МассивЛекарств=ВернутьАгрегациюЛекарства();
	
	Если МассивЛекарств.Количество()>0 Тогда
		Если Не ЗначениеЗаполнено(СРегистра) Тогда	
				СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Если Не ЗначениеЗаполнено(СРегистра) тогда
					Попытка
						СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
					исключение
						СРегистра=Неопределено;
					КонецПопытки;
				КонецЕсли;
	КонецЕсли;	
		    Для Каждого Стр Из    МассивЛекарств Цикл
					
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+Стр.order_id+"/ticket");
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.order_id+"/ticket");
					
				Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
					
					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
					
				КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
		
			
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
			
	//	 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				 
				 
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					          Сайт_1=NNN.link;
					//Сайт="https://"+Thumbprint_1.АдресКАПИ+":443";
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");

					//
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//
					//
					//
					//Сайт_1=СтрЗаменить(Сайт_1,"http://nginx-for-lk:8080/","");
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
					
										
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		                  КонецЕсли;
			          Чтен=Новый ЧтениеXML;
					    Чтен.УстановитьСтроку(Текст1);
						Результат="";
						Ошибка="";
					Попытка
						Пока Чтен.Прочитать() Цикл
							Если Чтен.Имя="operation_result" Тогда
								Чтен.Прочитать();
								Результат=Чтен.Значение;
								Чтен.Прочитать()
							ИначеЕсли Чтен.Имя="operation_comment" Тогда
								
								Чтен.Прочитать();
								Ошибка=Чтен.Значение;
								Чтен.Прочитать()
							КонецЕсли;
						Конеццикла;
						  
					
					  ОработатьДокументы(Стр,Результат,Ошибка,Текст1)

				  Исключение
					 КонецПопытки;
					//ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					    			Если УжеОтправили=Истина Тогда
										ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);		
										Возврат
									Иначе
										ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);
										ОбновитьСтатусыДокументовЛекарстваСервер(Thumbprint_1,Истина);			
										Возврат;
									КонецЕсли
					
				ИначеЕсли Ответ.КодСостояния=301 Тогда
					
					ОшибкаОтправки="";
					//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
						ОшибкаОтправки=NNN.error_message;
						
					Исключение
					КонецПопытки;
					//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
					
					
				КонецЕсли;
		
		//	Исключение
		//	КонецПопытки;
		 Конеццикла;
		
	 КонецЕсли;
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	МассивЛекарств=ВернутьОтказыПоЛекарствам();
	
	Если МассивЛекарств.Количество()>0 Тогда
		Если Не ЗначениеЗаполнено(СРегистра) Тогда	
				СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Если Не ЗначениеЗаполнено(СРегистра) тогда
					Попытка
						СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
					исключение
						СРегистра=Неопределено;
					КонецПопытки;
				КонецЕсли;
	КонецЕсли;	
		    Для Каждого Стр Из    МассивЛекарств Цикл
					
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+Стр.order_id+"/ticket");
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.order_id+"/ticket");
					
				Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
					
					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
					
				КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	
		
	//	 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				 
				 
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					
					
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(NNN.link,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//
					Сайт_1=NNN.link;
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
					
					
					
					
					
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		                  КонецЕсли;
			          Чтен=Новый ЧтениеXML;
					    Чтен.УстановитьСтроку(Текст1);
						Результат="";
						Ошибка="";
						Попытка
						Пока Чтен.Прочитать() Цикл
							Если Чтен.Имя="operation_result" Тогда
								Чтен.Прочитать();
								Результат=Чтен.Значение;
								Чтен.Прочитать()
							ИначеЕсли Чтен.Имя="operation_comment" Тогда
								
								Чтен.Прочитать();
								Ошибка=Чтен.Значение;
								Чтен.Прочитать()
							КонецЕсли;
						Конеццикла;
						  
					
					  ОработатьДокументыОтказы(Стр,Результат,Ошибка)
				  Исключение
					  КонецПопытки;
					
					//ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					    			Если УжеОтправили=Истина Тогда
										ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);		
										Возврат
									Иначе
										ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);
										ОбновитьСтатусыДокументовЛекарстваСервер(Thumbprint_1,Истина);			
										Возврат;
									КонецЕсли
					
				ИначеЕсли Ответ.КодСостояния=301 Тогда
					
					ОшибкаОтправки="";
					//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
						ОшибкаОтправки=NNN.error_message;
						
					Исключение
					КонецПопытки;
					//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
					
					
				КонецЕсли;
		
		//	Исключение
		//	КонецПопытки;
		 Конеццикла;
		
	 КонецЕсли;
	 
	 
	 
	 
	 
	 
	 
	МассивЛекарств=ВернутьОтказыПоЛекарствамСВОИ();
	
	Если МассивЛекарств.Количество()>0 Тогда
		Если Не ЗначениеЗаполнено(СРегистра) Тогда	
				СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Если Не ЗначениеЗаполнено(СРегистра) тогда
					Попытка
						СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
					исключение
						СРегистра=Неопределено;
					КонецПопытки;
				КонецЕсли;
	КонецЕсли;	
		    Для Каждого Стр Из    МассивЛекарств Цикл
					
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+Стр.order_id+"/ticket");
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.order_id+"/ticket");
					
				Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
					
					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
					
				КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	
		
	//	 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				 
				 
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					
					
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(NNN.link,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//
					Сайт_1=NNN.link;
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
					
					
					
					
					
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		                  КонецЕсли;
			          Чтен=Новый ЧтениеXML;
					    Чтен.УстановитьСтроку(Текст1);
						Результат="";
						Ошибка="";
						Попытка
						Пока Чтен.Прочитать() Цикл
							Если Чтен.Имя="operation_result" Тогда
								Чтен.Прочитать();
								Результат=Чтен.Значение;
								Чтен.Прочитать()
							ИначеЕсли Чтен.Имя="operation_comment" Тогда
								
								Чтен.Прочитать();
								Ошибка=Чтен.Значение;
								Чтен.Прочитать()
							КонецЕсли;
						Конеццикла;
						  
					
					  ОработатьДокументыОтказы(Стр,Результат,Ошибка)
				  Исключение
					  КонецПопытки;
					
					//ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					    			Если УжеОтправили=Истина Тогда
										ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);		
										Возврат
									Иначе
										ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);
										ОбновитьСтатусыДокументовЛекарстваСервер(Thumbprint_1,Истина);			
										Возврат;
									КонецЕсли
					
				ИначеЕсли Ответ.КодСостояния=301 Тогда
					
					ОшибкаОтправки="";
					//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
						ОшибкаОтправки=NNN.error_message;
						
					Исключение
					КонецПопытки;
					//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
					
					
				КонецЕсли;
		
		//	Исключение
		//	КонецПопытки;
		 Конеццикла;
		
	 КонецЕсли;
	 
	 
	 
	 
	 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьПриемкаЛекарства_Акцепт(Пользователь)
	
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Приемка_ХамелеонЦРПТ.Ссылка,
		|	Приемка_ХамелеонЦРПТ._Order_ID,
		|	Приемка_ХамелеонЦРПТ.УПД,
		|	Приемка_ХамелеонЦРПТ.ДокументОтгрузки
		|ИЗ
		|	Документ.Приемка_ХамелеонЦРПТ КАК Приемка_ХамелеонЦРПТ
		|ГДЕ
		|	 Приемка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему.Наименование = ""Фармацевтика""
		|	И Приемка_ХамелеонЦРПТ.ОбратныйАкцепт=Истина
		|	И Приемка_ХамелеонЦРПТ.Статус В(&Статус) И Приемка_ХамелеонЦРПТ.Организация=&Организация
		|	
		|
		|	";
	
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан);
	
	Запрос.УстановитьПараметр("Организация",	Пользователь.Организация); 
	
	Запрос.УстановитьПараметр("СтатусУПД",	Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан); 
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,НомерДокумента,Ссылка,УПД",ВыборкаДетальныеЗаписи._Order_ID,xmlString(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()),ВыборкаДетальныеЗаписи.Ссылка,ВыборкаДетальныеЗаписи.УПД));
		//Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	
	
КонецФункции



&НаСервереБезКонтекста
Функция ВернутьПриемкаЛекарства(Пользователь)
	
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Приемка_ХамелеонЦРПТ.Ссылка,
		|	Приемка_ХамелеонЦРПТ._Order_ID,
		|	Приемка_ХамелеонЦРПТ.УПД,
		|	Приемка_ХамелеонЦРПТ.ДокументОтгрузки
		|ИЗ
		|	Документ.Приемка_ХамелеонЦРПТ КАК Приемка_ХамелеонЦРПТ
		|ГДЕ
		|	 Приемка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему.Наименование = ""Фармацевтика""
		|	И Приемка_ХамелеонЦРПТ.ОбратныйАкцепт=Ложь
		|	И Приемка_ХамелеонЦРПТ.Статус В(&Статус) И Приемка_ХамелеонЦРПТ.Организация=&Организация
		|	
		|
		|	";
	
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан);
	
	Запрос.УстановитьПараметр("Организация",	Пользователь.Организация); 
	
	Запрос.УстановитьПараметр("СтатусУПД",	Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан); 
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,НомерДокумента,Ссылка,УПД",ВыборкаДетальныеЗаписи._Order_ID,xmlString(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()),ВыборкаДетальныеЗаписи.Ссылка,ВыборкаДетальныеЗаписи.УПД));
		//Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСтатусыДокументовЛекарства(Thumbprint_1,УжеОтправили=Ложь)
	
	
	
	Срегистра=Неопределено;
	
	
	
	
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
		//АдресКАПИ=СтрЗаменить(Thumbprint_1.АдресКАПИ,"api.","");
		
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
		ПолучитьПриемкуЛекарства=ВернутьПриемкаЛекарства(Пользователь);
				
			Для Каждого Стр_2 Из ПолучитьПриемкуЛекарства Цикл
					
													Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
														HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+Стр_2.order_id+"/ticket");
													Иначе
														HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр_2.order_id+"/ticket");
														
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
													КонецЕсли;
			
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
												//	КонецЕсли;
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
											Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
												ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
												
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОшибку(Стр_2.Ссылка,Текст1);
				
			Конецесли;
		
		
		 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				 
				 
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					
					
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(NNN.link,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//
					//
					
					
					//Сайт="https://"+Thumbprint_1.АдресКАПИ+":443";
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");

					//
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//
					//
					//
					//Сайт_1=СтрЗаменить(Сайт_1,"http://nginx-for-lk:8080/","");
					//
					Сайт_1=NNN.link;
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
					
					

										
					
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		                  КонецЕсли;
			          Чтен=Новый ЧтениеXML;
					    Чтен.УстановитьСтроку(Текст1);
						Результат="";
						Ошибка="";
					Попытка
						Пока Чтен.Прочитать() Цикл
							Если Чтен.Имя="operation_result" Тогда
								Чтен.Прочитать();
								Результат=Чтен.Значение;
								Чтен.Прочитать()
							ИначеЕсли Чтен.Имя="operation_comment" Тогда
								
								Чтен.Прочитать();
								Ошибка=Чтен.Значение;
								Чтен.Прочитать()
							КонецЕсли;
						Конеццикла;
						  
					
					  ОработатьДокументы_Приемка(Стр_2,Результат,Ошибка,Текст1)

				  Исключение
					 КонецПопытки;
					
					//ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					    			Если УжеОтправили=Истина Тогда
										ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);		
										Возврат
									Иначе
										ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);
										ОбновитьСтатусыДокументовЛекарства(Thumbprint_1,Истина);			
										Возврат;
									КонецЕсли
					
				ИначеЕсли Ответ.КодСостояния=301 Тогда
					
					ОшибкаОтправки="";
					//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
						ОшибкаОтправки=NNN.error_message;
						
					Исключение
					КонецПопытки;
					//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
					
					
				КонецЕсли;
		

		
			Исключение
			КонецПопытки;
												
												
		Конеццикла;	
	
	
	
	
		
		
			
		ПолучитьПриемкуЛекарства_Акцепт=ВернутьПриемкаЛекарства_Акцепт(Пользователь);
				
			Для Каждого Стр_2 Из ПолучитьПриемкуЛекарства_Акцепт Цикл
					
													Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
														HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+Стр_2.order_id+"/ticket");
													Иначе
														HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр_2.order_id+"/ticket");
														
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
													КонецЕсли;
			
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
												//	КонецЕсли;
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
											Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
												ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
												
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	
				
		 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				 
				 
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					
					
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(NNN.link,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//\
										Сайт_1=NNN.link;
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);

					
										
					
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
	КонецЕсли;
	
		Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОшибку(Стр_2.Ссылка,Текст1);
				
			Конецесли;
		

			          Чтен=Новый ЧтениеXML;
					    Чтен.УстановитьСтроку(Текст1);
						Результат="";
						Ошибка="";
					Попытка
						Пока Чтен.Прочитать() Цикл
							Если Чтен.Имя="operation_result" Тогда
								Чтен.Прочитать();
								Результат=Чтен.Значение;
								Чтен.Прочитать()
							ИначеЕсли Чтен.Имя="operation_comment" Тогда
								
								Чтен.Прочитать();
								Ошибка=Чтен.Значение;
								Чтен.Прочитать()
							КонецЕсли;
						Конеццикла;
						  
					
					  ОработатьДокументы_Приемка_акцепт(Стр_2,Результат,Ошибка,Текст1)

				  Исключение
					 КонецПопытки;
					
					//ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					    			Если УжеОтправили=Истина Тогда
										ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);		
										Возврат
									Иначе
										ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);
										ОбновитьСтатусыДокументовЛекарства(Thumbprint_1,Истина);			
										Возврат;
									КонецЕсли;
									
										Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОшибку(Стр_2.Ссылка,Текст1);
				
			Конецесли;
		

				ИначеЕсли Ответ.КодСостояния=301 Тогда
					      	Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОшибку(Стр_2.Ссылка,Текст1);
				
			Конецесли;
		

					ОшибкаОтправки="";
					//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
						ОшибкаОтправки=NNN.error_message;
						
					Исключение
					КонецПопытки;
					//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
					
					
				КонецЕсли;
		

		
			Исключение
			КонецПопытки;
												
												
		Конеццикла;	
	
	
	
	
		
		 
			
	МассивЛекарств=ВернутьВводвоборотЛекарства();
	
	Если МассивЛекарств.Количество()>0 Тогда
		
		//	СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			Попытка
				СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
			исключение
				СРегистра=Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		    Для Каждого Стр Из    МассивЛекарств Цикл
					
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+Стр.order_id+"/ticket");
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.order_id+"/ticket");
					
				Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
					
					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
					
				КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	 		 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				 
				 
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					
					
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(NNN.link,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					
					Сайт_1=NNN.link;
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
					
					
										
					
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		                  КонецЕсли;
						  			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОшибку(Стр.Ссылка,Текст1);
				
			Конецесли;
		
		

			          Чтен=Новый ЧтениеXML;
					    Чтен.УстановитьСтроку(Текст1);
						Результат="";
						Ошибка="";
					Попытка
						Пока Чтен.Прочитать() Цикл
							Если Чтен.Имя="operation_result" Тогда
								Чтен.Прочитать();
								Результат=Чтен.Значение;
								Чтен.Прочитать()
							ИначеЕсли Чтен.Имя="operation_comment" Тогда
								
								Чтен.Прочитать();
								Ошибка=Чтен.Значение;
								Чтен.Прочитать()
							КонецЕсли;
						Конеццикла;
					Исключение
					КонецПопытки;
					
					  ОработатьДокументы(Стр,Результат,Ошибка,Текст1)

					
					//ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
								Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОшибку(Стр.Ссылка,Текст1);
				
			Конецесли;
		
		

					
					Если УжеОтправили=Истина Тогда
										ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);		
										Возврат
									Иначе
										ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);
										ОбновитьСтатусыДокументовЛекарства(Thumbprint_1,Истина);			
										Возврат;
									КонецЕсли
					
				ИначеЕсли Ответ.КодСостояния=301 Тогда
					               			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОшибку(Стр.Ссылка,Текст1);
				
			Конецесли;
		
		

					ОшибкаОтправки="";
					//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
						ОшибкаОтправки=NNN.error_message;
						
					Исключение
					КонецПопытки;
					//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
					
					
				КонецЕсли;
		

		
			Исключение
			КонецПопытки;
		 Конеццикла;
		
	 КонецЕсли;
	 
	 
	 
	 
	//////ЛЕКАРСТВА!!
		МассивОтправок=ВернутьСтатусыДокументовПоТабличнойЧасти();

		
		
		
	ОбработаноМассив=Новый Массив;
		Если МассивОтправок.Количество()>0 Тогда
		Если Не ЗначениеЗаполнено(СРегистра) Тогда	
			
				СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Если Не ЗначениеЗаполнено(СРегистра) тогда
					Попытка
						СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
					исключение
						СРегистра=Неопределено;
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		    Для Каждого Стр Из    МассивОтправок Цикл
				ОбработаноМассив.Очистить();	
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+Стр.order_id+"/ticket");
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.order_id+"/ticket");
					
				Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
					
					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
					
				КонецЕсли;
 		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);

				
		 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				   Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Сайт_1=NNN.link;
					//Сайт="https://"+Thumbprint_1.АдресКАПИ+":443";
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");

					//
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//
					//
					//
					//Сайт_1=СтрЗаменить(Сайт_1,"http://nginx-for-lk:8080/","");
					//
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
					
					
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		
		
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);

		
		
					      КонецЕсли;
						  
						  	Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОшибку(Стр.Документ,Текст1);
				
			Конецесли;

		            Попытка
			          Чтен=Новый ЧтениеXML;
					    Чтен.УстановитьСтроку(Текст1);
						Результат="";
						Ошибка="";
						Пока Чтен.Прочитать() Цикл
							Если Чтен.Имя="operation_result" Тогда
								Чтен.Прочитать();
								Результат=Чтен.Значение;
								Чтен.Прочитать()
							ИначеЕсли Чтен.Имя="operation_comment" Тогда
								
								Чтен.Прочитать();
								Ошибка=Чтен.Значение;
								Чтен.Прочитать()
							КонецЕсли;
						Конеццикла;
						  
					
					
					
					ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
				ИсКлючение
					КонецПопытки;
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					    	Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОшибку(Стр.Документ,Текст1);
				
			Конецесли;
			Если УжеОтправили=Истина Тогда
										ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);		
										Возврат
									Иначе
										ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);
										ОбновитьСтатусыДокументовЛекарства(Thumbprint_1,Истина);			
										Возврат;
									КонецЕсли
						
				ИначеЕсли Ответ.КодСостояния=301 Тогда
						Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОшибку(Стр.Документ,Текст1);
				
			Конецесли;

					ОшибкаОтправки="";
					//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
						ОшибкаОтправки=NNN.error_message;
						
					Исключение
					КонецПопытки;
					//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
					
					
				КонецЕсли;
			Исключение
			КонецПопытки;
		Конеццикла;

		ОбработаноМассив_Обработать(ОбработаноМассив);
		
		   КонецЕсли;
	
	           Элементы.ОплатаЗаКМ_Таблица.Обновить();;
			   
			   
			   
			   
			   
									 
									 
			   
			   
			   
	МассивЛекарств=ВернутьОтгрузкуЛекарства();
	
	Если МассивЛекарств.Количество()>0 Тогда
		Если Не ЗначениеЗаполнено(СРегистра) Тогда	
				СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Если Не ЗначениеЗаполнено(СРегистра) тогда
					Попытка
						СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
					исключение
						СРегистра=Неопределено;
					КонецПопытки;
				КонецЕсли;
	КонецЕсли;	
		    Для Каждого Стр Из    МассивЛекарств Цикл
					
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+Стр.order_id+"/ticket");
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.order_id+"/ticket");
					
				Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
					
					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
					
				КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	
	//	 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				 
				 
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					           Сайт_1=NNN.link;
					//Сайт="https://"+Thumbprint_1.АдресКАПИ+":443";
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");

					//
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//
					//
					//
					//Сайт_1=СтрЗаменить(Сайт_1,"http://nginx-for-lk:8080/","");
					//
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
					
										
					
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
	КонецЕсли;
		Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОшибку(Стр.Ссылка,Текст1);
				
			Конецесли;
		

	Попытка
			          Чтен=Новый ЧтениеXML;
					    Чтен.УстановитьСтроку(Текст1);
						Результат="";
						Ошибка="";
						Пока Чтен.Прочитать() Цикл
							Если Чтен.Имя="operation_result" Тогда
								Чтен.Прочитать();
								Результат=Чтен.Значение;
								Чтен.Прочитать()
							ИначеЕсли Чтен.Имя="operation_comment" Тогда
								
								Чтен.Прочитать();
								Ошибка=Чтен.Значение;
								Чтен.Прочитать()
							КонецЕсли;
						Конеццикла;
						  
					
					  ОработатьДокументы(Стр,Результат,Ошибка,Текст1)
				  Исключение
					 КонецПопытки;
					
					//ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
						Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОшибку(Стр.Ссылка,Текст1);
				
			Конецесли;
		

					Если УжеОтправили=Истина Тогда
										ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);		
										Возврат
									Иначе
										ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);
										ОбновитьСтатусыДокументовЛекарства(Thumbprint_1,Истина);			
										Возврат;
									КонецЕсли
					
				ИначеЕсли Ответ.КодСостояния=301 Тогда
						Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОшибку(Стр.Ссылка,Текст1);
				
			Конецесли;
		

					ОшибкаОтправки="";
					//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
						ОшибкаОтправки=NNN.error_message;
						
					Исключение
					КонецПопытки;
					//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
					
					
				КонецЕсли;
		
		//	Исключение
		//	КонецПопытки;
		 Конеццикла;
		
	 КонецЕсли;
	 
	 
	 
	 
	 
	 
			   
			   
			   
	МассивЛекарств=ВернутьОтгрузкуЛекарстваобратныйАкцепт();
	
	Если МассивЛекарств.Количество()>0 Тогда
		Если Не ЗначениеЗаполнено(СРегистра) Тогда	
				СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Если Не ЗначениеЗаполнено(СРегистра) тогда
					Попытка
						СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
					исключение
						СРегистра=Неопределено;
					КонецПопытки;
				КонецЕсли;
	КонецЕсли;	
		    Для Каждого Стр Из    МассивЛекарств Цикл
					
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+Стр.order_id+"/ticket");
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.order_id+"/ticket");
					
				Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
					
					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
					
				КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	
	//	 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				 
				 
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					           Сайт_1=NNN.link;
					//Сайт="https://"+Thumbprint_1.АдресКАПИ+":443";
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");

					//
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//
					//
					//
					//Сайт_1=СтрЗаменить(Сайт_1,"http://nginx-for-lk:8080/","");
					//
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
					
										
					
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
	КонецЕсли;
	Попытка
			          Чтен=Новый ЧтениеXML;
					    Чтен.УстановитьСтроку(Текст1);
						Результат="";
						Ошибка="";
						Пока Чтен.Прочитать() Цикл
							Если Чтен.Имя="operation_result" Тогда
								Чтен.Прочитать();
								Результат=Чтен.Значение;
								Чтен.Прочитать()
							ИначеЕсли Чтен.Имя="operation_comment" Тогда
								
								Чтен.Прочитать();
								Ошибка=Чтен.Значение;
								Чтен.Прочитать()
							КонецЕсли;
						Конеццикла;
						  
					
					  ОработатьДокументы_Обратный(Стр,Результат,Ошибка,Текст1)
				  Исключение
					 КонецПопытки;
					
					//ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					    			Если УжеОтправили=Истина Тогда
										ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);		
										Возврат
									Иначе
										ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);
										ОбновитьСтатусыДокументовЛекарства(Thumbprint_1,Истина);			
										Возврат;
									КонецЕсли
					
				ИначеЕсли Ответ.КодСостояния=301 Тогда
					
					ОшибкаОтправки="";
					//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
						ОшибкаОтправки=NNN.error_message;
						
					Исключение
					КонецПопытки;
					//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
					
					
				КонецЕсли;
		
		//	Исключение
		//	КонецПопытки;
		 Конеццикла;
		
	 КонецЕсли;
	 
	 
	 
	 Элементы.Отгрузка_Список.Обновить();
	 
	 
	 
	 
	 
	МассивЛекарств=ВернутьАгрегациюЛекарства();
	
	Если МассивЛекарств.Количество()>0 Тогда
		Если Не ЗначениеЗаполнено(СРегистра) Тогда	
				СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Если Не ЗначениеЗаполнено(СРегистра) тогда
					Попытка
						СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
					исключение
						СРегистра=Неопределено;
					КонецПопытки;
				КонецЕсли;
	КонецЕсли;	
		    Для Каждого Стр Из    МассивЛекарств Цикл
					
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+Стр.order_id+"/ticket");
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.order_id+"/ticket");
					
				Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
					
					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
					
				КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОшибку(Стр.Ссылка,Текст1);
				
			Конецесли;
		
			
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
			
	//	 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				 
				 
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					          Сайт_1=NNN.link;
					//Сайт="https://"+Thumbprint_1.АдресКАПИ+":443";
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");

					//
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//
					//
					//
					//Сайт_1=СтрЗаменить(Сайт_1,"http://nginx-for-lk:8080/","");
					//
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
					
										
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
	КонецЕсли;
	Попытка
			          Чтен=Новый ЧтениеXML;
					    Чтен.УстановитьСтроку(Текст1);
						Результат="";
						Ошибка="";
						Пока Чтен.Прочитать() Цикл
							Если Чтен.Имя="operation_result" Тогда
								Чтен.Прочитать();
								Результат=Чтен.Значение;
								Чтен.Прочитать()
							ИначеЕсли Чтен.Имя="operation_comment" Тогда
								
								Чтен.Прочитать();
								Ошибка=Чтен.Значение;
								Чтен.Прочитать()
							КонецЕсли;
						Конеццикла;
					Исключение
					КонецПопытки;
					
					  ОработатьДокументы(Стр,Результат,Ошибка,Текст1)

					
					//ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					    			Если УжеОтправили=Истина Тогда
										ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);		
										Возврат
									Иначе
										ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);
										ОбновитьСтатусыДокументовЛекарства(Thumbprint_1,Истина);			
										Возврат;
									КонецЕсли
					
				ИначеЕсли Ответ.КодСостояния=301 Тогда
					
					ОшибкаОтправки="";
					//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
						ОшибкаОтправки=NNN.error_message;
						
					Исключение
					КонецПопытки;
					//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
					
					
				КонецЕсли;
		
		//	Исключение
		//	КонецПопытки;
		 Конеццикла;
		
	 КонецЕсли;
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	МассивЛекарств=ВернутьОтказыПоЛекарствам();
	
	Если МассивЛекарств.Количество()>0 Тогда
		Если Не ЗначениеЗаполнено(СРегистра) Тогда	
				СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Если Не ЗначениеЗаполнено(СРегистра) тогда
					Попытка
						СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
					исключение
						СРегистра=Неопределено;
					КонецПопытки;
				КонецЕсли;
	КонецЕсли;	
		    Для Каждого Стр Из    МассивЛекарств Цикл
					
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+Стр.order_id+"/ticket");
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.order_id+"/ticket");
					
				Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
					
					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
					
				КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОшибку(Стр.Ссылка,Текст1);
				
			Конецесли;
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	
		
	//	 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				 
				 
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					
					
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(NNN.link,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//
					//
					Сайт_1=NNN.link;
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
					
					
					
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Текст1) тогда
			          Чтен=Новый ЧтениеXML;
					    Чтен.УстановитьСтроку(Текст1);
						Результат="";
						Ошибка="";
					Попытка
						Пока Чтен.Прочитать() Цикл
							Если Чтен.Имя="operation_result" Тогда
								Чтен.Прочитать();
								Результат=Чтен.Значение;
								Чтен.Прочитать()
							ИначеЕсли Чтен.Имя="operation_comment" Тогда
								
								Чтен.Прочитать();
								Ошибка=Чтен.Значение;
								Чтен.Прочитать()
							КонецЕсли;
						Конеццикла;
						  
					
					  ОработатьДокументыОтказы(Стр,Результат,Ошибка)
				  Исключение
					 КонецПопытки;
					
					//ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					    			Если УжеОтправили=Истина Тогда
										ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);		
										Возврат
									Иначе
										ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);
										ОбновитьСтатусыДокументовЛекарства(Thumbprint_1,Истина);			
										Возврат;
									КонецЕсли
					
				ИначеЕсли Ответ.КодСостояния=301 Тогда
					
					ОшибкаОтправки="";
					//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
						ОшибкаОтправки=NNN.error_message;
						
					Исключение
					КонецПопытки;
					//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
					
					
				КонецЕсли;
		      КонецЕсли;
		//	Исключение
		//	КонецПопытки;
		 Конеццикла;
		
	 КонецЕсли;
	 
	 
	 
	 
	 
	   	 
	 
	МассивЛекарств=ВернутьОтказыПоЛекарствамСВОИ();
	
	Если МассивЛекарств.Количество()>0 Тогда
		Если Не ЗначениеЗаполнено(СРегистра) Тогда	
				СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Если Не ЗначениеЗаполнено(СРегистра) тогда
					Попытка
						СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
					исключение
						СРегистра=Неопределено;
					КонецПопытки;
				КонецЕсли;
	КонецЕсли;	
		    Для Каждого Стр Из    МассивЛекарств Цикл
					
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+Стр.order_id+"/ticket");
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.order_id+"/ticket");
					
				Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
					
					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
					
				КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	
		
	//	 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				 
				 
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					
					
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(NNN.link,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//
					Сайт_1=NNN.link;
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
					
					
					
					
					
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		                  КонецЕсли;
			          Чтен=Новый ЧтениеXML;
					    Чтен.УстановитьСтроку(Текст1);
						Результат="";
						Ошибка="";
						Попытка
						Пока Чтен.Прочитать() Цикл
							Если Чтен.Имя="operation_result" Тогда
								Чтен.Прочитать();
								Результат=Чтен.Значение;
								Чтен.Прочитать()
							ИначеЕсли Чтен.Имя="operation_comment" Тогда
								
								Чтен.Прочитать();
								Ошибка=Чтен.Значение;
								Чтен.Прочитать()
							КонецЕсли;
						Конеццикла;
						  
					
					  ОработатьДокументыОтказы(Стр,Результат,Ошибка)
				  Исключение
					  КонецПопытки;
					
					//ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					    			Если УжеОтправили=Истина Тогда
										ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);		
										Возврат
									Иначе
										ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);
										ОбновитьСтатусыДокументовЛекарстваСервер(Thumbprint_1,Истина);			
										Возврат;
									КонецЕсли
					
				ИначеЕсли Ответ.КодСостояния=301 Тогда
					
					ОшибкаОтправки="";
					//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
						ОшибкаОтправки=NNN.error_message;
						
					Исключение
					КонецПопытки;
					//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
					
					
				КонецЕсли;
		
		//	Исключение
		//	КонецПопытки;
		 Конеццикла;
		
	 КонецЕсли;
	 
	 

	
КонецПроцедуры



Процедура  ОработатьДокументыОтказы(Стр_1,Статус,Ошибка)
		ДокумП=Стр_1.Ссылка.ПолучитьОбъект();
		Если Статус="Rejected" Тогда
			ДокумП.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ;
		ИначеЕсли Статус="Accepted"  
			ИЛИ Статус="Partial"
			Тогда
			ДокумП.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан;
			
			ПолучДокм=ДокумП.Документоснование.ПолучитьОбъект();
			ПолучДокм.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ;
			ПолучДокм.ОшибкаОтправки="Отменено по документу "+Строка(Стр_1.Ссылка);
			ПолучДокм.ПометкаУдаления=Истина;
			Если     ПолучДокм.Проведен Тогда
					ПолучДокм.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				ПолучДокм.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			//ДокумП.Товары[Стр_1.Сч].Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ;
		КонецЕсли;
		ДокумП.ОшибкаОтправки=Ошибка;
		ДокумП.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры

Процедура  ОработатьДокументы_Приемка(Стр_1,Статус,Ошибка,Текст1)
		ДокумП=Стр_1.Ссылка.ПолучитьОбъект();
		Если Статус="Partial" Тогда
			ДокумП.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ФайлОбработанЧастично;
			ДокумП.ОшибкаОтправки=Ошибка;
			
			
			Чтен=Новый ЧтениеXML;
			Чтен.УстановитьСтроку(Текст1);
			ОтветСтруктура = ФабрикаXDTO.ПрочитатьXML(Чтен);
			
			Для Каждого СТр_1 Из ДокумП.СерийныеНомера Цикл
				Стр_1.Принят=Истина;
				//Стр_1.ИдЗапроса=ДокумП._Order_ID;
			Конеццикла;
			
			Попытка
				Если ТипЗнч(ОтветСтруктура.result.errors)=Тип("ОбъектXDTO") Тогда
					Стр_1= ОтветСтруктура.result.errors;
					НСТР=ДокумП.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1.object_id));
					Для Каждого Стр_2 Из Нстр Цикл
						 Стр_2.Принят=Ложь
						
					Конеццикла;
					
				Иначе
						Для Каждого Стр_1 Из ОтветСтруктура.result.errors Цикл
								НСТР=ДокумП.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1.object_id));
								Для Каждого Стр_2 Из Нстр Цикл
									 Стр_2.Принят=Ложь
									
								Конеццикла;
				
						Конеццикла;
				КонецЕсли;
				
				
				
			Исключение
			КонецПопытки;
			
			
			
			ДокумП.Записать(РежимЗаписиДокумента.Запись);
		ИначеЕсли Статус="Rejected" Тогда
			ДокумП.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ;
			ДокумП.ОшибкаОтправки=Ошибка;
			ДокумП.Записать(РежимЗаписиДокумента.Запись);
		ИначеЕсли Статус="Accepted"  Тогда
			
			Для Каждого Стр_1 Из ДокумП.СерийныеНомера Цикл
				Стр_1.Принят=Истина;
				
			Конеццикла;
			
			ДокумП.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан;
			ДокумП.ОшибкаОтправки=Ошибка;
			ДокумП.Записать(РежимЗаписиДокумента.Проведение);
			//ДокумП.Товары[Стр_1.Сч].Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ;
		КонецЕсли;
КонецПроцедуры


Процедура  ОработатьДокументы_Приемка_Акцепт(Стр_33,Статус,Ошибка,Текст1)
		ДокумП=Стр_33.Ссылка.ПолучитьОбъект();
		Если Статус="Partial" Тогда
			ДокумП.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ФайлОбработанЧастично;
			ДокумП.ОшибкаОтправки=Ошибка;
			
			
			Чтен=Новый ЧтениеXML;
			Чтен.УстановитьСтроку(Текст1);
			ОтветСтруктура = ФабрикаXDTO.ПрочитатьXML(Чтен);
			
			Для Каждого СТр_1 Из ДокумП.Марки Цикл
				Если ДокумП._702Схема тогда
					Стр_1.ПринятОбратныйАкцепт=Истина;
				Иначе
					Стр_1.Отправлен=Истина;
				КонецЕсли;
			Конеццикла;
			
			Попытка
				Если ТипЗнч(ОтветСтруктура.result.errors)=Тип("ОбъектXDTO") Тогда
					Стр_1= ОтветСтруктура.result.errors;
					НСТР=ДокумП.Марки.НайтиСтроки(Новый Структура("Марка",Стр_1.object_id));
					Для Каждого Стр_2 Из Нстр Цикл
						Если ДокумП._702Схема тогда
							Стр_2.ПринятОбратныйАкцепт=Ложь;
						Иначе
							Стр_2.Отправлен=Ложь;
						КонецЕсли;
						
					Конеццикла;
					
				Иначе
						Для Каждого Стр_1 Из ОтветСтруктура.result.errors Цикл
								НСТР=ДокумП.Марки.НайтиСтроки(Новый Структура("Марка",Стр_1.object_id));
								Для Каждого Стр_2 Из Нстр Цикл
									Если ДокумП._702Схема тогда
										Стр_2.ПринятОбратныйАкцепт=Ложь;
									Иначе
										Стр_2.Отправлен=Ложь;
									КонецЕсли;
									// Стр_2.Отправлен=Ложь
									
								Конеццикла;
				
						Конеццикла;
				КонецЕсли;
				
				
				
			Исключение
			КонецПопытки;
			
			
			
			ДокумП.Записать(РежимЗаписиДокумента.Запись);
		ИначеЕсли Статус="Rejected" Тогда
			ДокумП.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ;
			ДокумП.ОшибкаОтправки=Ошибка;
			ДокумП.Записать(РежимЗаписиДокумента.Запись);
		ИначеЕсли Статус="Accepted"  Тогда
			
			//Для Каждого Стр_1 Из ДокумП.СерийныеНомера Цикл
			//	Стр_1.Принят=Истина;
				
			//Конеццикла;
			Для Каждого СТр_1 Из ДокумП.Марки Цикл
				Если ДокумП._702Схема тогда
					Стр_1.ПринятОбратныйАкцепт=Истина;
				Иначе
					Стр_1.Отправлен=Истина;
				КонецЕсли;
			Конеццикла;
			
			Если НЕ ДокумП._702Схема тогда
				ДокумП.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента;
			Иначе
				ДокумП.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан;
				
			КонецЕсли;
			ДокумП.ОшибкаОтправки=Ошибка;
			ДокумП.Записать(РежимЗаписиДокумента.Проведение);
			//ДокумП.Товары[Стр_1.Сч].Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ;
		КонецЕсли;
КонецПроцедуры

Процедура  ОработатьДокументы_Обратный(Стр_1,Статус,Ошибка,Текст1)
	
	
	
	
ДокумП=Стр_1.Ссылка.ПолучитьОбъект();
		Если Статус="Partial" Тогда
			ДокумП.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ФайлОбработанЧастично;
			ДокумП.ОшибкаОтправки=Ошибка;
			
			
			Чтен=Новый ЧтениеXML;
			Чтен.УстановитьСтроку(Текст1);
			ОтветСтруктура = ФабрикаXDTO.ПрочитатьXML(Чтен);
			
			Для Каждого СТр_1 Из ДокумП.СерийныеНомера Цикл
				Стр_1.Отправлена=Истина;
				Стр_1.ИдЗапроса=ДокумП._Order_ID;
			Конеццикла;
			
			Попытка
				Если ТипЗнч(ОтветСтруктура.result.errors)=Тип("ОбъектXDTO") Тогда
					Стр_1= ОтветСтруктура.result.errors;
					НСТР=ДокумП.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1.object_id));
					Для Каждого Стр_2 Из Нстр Цикл
						 Стр_2.Отправлена=Ложь
						
					Конеццикла;
					
				Иначе
						Для Каждого Стр_1 Из ОтветСтруктура.result.errors Цикл
								НСТР=ДокумП.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_1.object_id));
								Для Каждого Стр_2 Из Нстр Цикл
									 Стр_2.Отправлена=Ложь
									
								Конеццикла;
				
						Конеццикла;
				КонецЕсли;
				
				
				
			Исключение
			КонецПопытки;
			
			
			
			ДокумП.Записать(РежимЗаписиДокумента.Запись);
		ИначеЕсли Статус="Rejected" Тогда
			ДокумП.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента;
			ДокумП.ОшибкаОтправки=Ошибка;
			ДокумП.Записать(РежимЗаписиДокумента.Запись);
		ИначеЕсли Статус="Accepted"  Тогда
			
			ДокумП.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан;
			
			ДокумП.ОшибкаОтправки=Ошибка;
			ДокумП.Записать(РежимЗаписиДокумента.Проведение);
			//ДокумП.Товары[Стр_1.Сч].Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ;
		КонецЕсли;
		ЗаписатьОтветвЗаказ(ДокумП.Ссылка,Текст1)
КонецПроцедуры


Процедура  ОработатьДокументы(Стр_1,Статус,Ошибка,Текст1)
	
	
	
	
ДокумП=Стр_1.Ссылка.ПолучитьОбъект();
		Если Статус="Partial" Тогда
			ДокумП.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ФайлОбработанЧастично;
			ДокумП.ОшибкаОтправки=Ошибка;
			
			
			Чтен=Новый ЧтениеXML;
			Чтен.УстановитьСтроку(Текст1);
			ОтветСтруктура = ФабрикаXDTO.ПрочитатьXML(Чтен);
			
			
			Попытка
				Для Каждого СТр_3 Из ДокумП.СерийныеНомера Цикл
					Стр_3.Отправлена=Истина;        
					Попытка
						Стр_3.ИдЗапроса=ДокумП._Order_ID;
					Исключение
					КонецПопытки;
				Конеццикла;
			
			
			Если ТипЗнч(ОтветСтруктура.result.errors)=Тип("ОбъектXDTO") Тогда
					Стр_3= ОтветСтруктура.result.errors;
Если ТипЗнч(ДокумП.Ссылка)=Тип("ДокументСсылка.ВводВОборот_ХамелеонЦРПТ") Тогда
							КМ=Стр_3.object_id;
							Если СтрДлина(КМ)<>18 Тогда
								КМ="01"+Сред(КМ,1,14)+"21"+Сред(КМ,15);
								
							КонецЕсли;
								НСТР=ДокумП.СерийныеНомера.НайтиСтроки(Новый Структура("cis",КМ));
								Для Каждого Стр_2 Из Нстр Цикл
									 Стр_2.Отправлена=Ложь
									
								Конеццикла;
						Иначе
											НСТР=ДокумП.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_3.object_id));
										КонецЕсли;
					Для Каждого Стр_2 Из Нстр Цикл
						 Стр_2.Отправлена=Ложь
						
					Конеццикла;
					
				Иначе
					Для Каждого Стр_3 Из ОтветСтруктура.result.errors Цикл
						Если ТипЗнч(ДокумП.Ссылка)=Тип("ДокументСсылка.ВводВОборот_ХамелеонЦРПТ") Тогда
							КМ=Стр_3.object_id;
							Если СтрДлина(КМ)<>18 Тогда
								КМ="01"+Сред(КМ,1,14)+"21"+Сред(КМ,15);
								
							КонецЕсли;
								НСТР=ДокумП.СерийныеНомера.НайтиСтроки(Новый Структура("cis",КМ));
								Для Каждого Стр_2 Из Нстр Цикл
									 Стр_2.Отправлена=Ложь
									
								Конеццикла;
						Иначе
						
								НСТР=ДокумП.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_3.object_id));
								Для Каждого Стр_2 Из Нстр Цикл
									 Стр_2.Отправлена=Ложь
									
								Конеццикла;
								
							КонецЕсли;
						Конеццикла;
				КонецЕсли;
				
				
				
			Исключение
			КонецПопытки;
			
			
			
			ДокумП.Записать(РежимЗаписиДокумента.Запись);
		ИначеЕсли Статус="Rejected" Тогда
			ДокумП.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ;
			ДокумП.ОшибкаОтправки=Ошибка;
			ДокумП.Записать(РежимЗаписиДокумента.Запись);
		ИначеЕсли Статус="Accepted"  Тогда
			
			ДокумП.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан;
			
			ДокумП.ОшибкаОтправки=Ошибка;
			ДокумП.ПометкаУдаления=Ложь;
			Попытка
				
				ДокумП.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ДокумП.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
			//ДокумП.Товары[Стр_1.Сч].Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ;
		КонецЕсли;
		ЗаписатьОтветвЗаказ(ДокумП.Ссылка,Текст1)
КонецПроцедуры


Процедура ОбновитьСтатусыДокументовСервер(Команда,ВернутьДокументы=Неопределено,УжеОтправили=Ложь,ДокументПроверки=Неопределено,ТолькоСтатус=Ложь) Экспорт
	Thumbprint_1=Команда;	
	
	
	ОбновитьСтатусыДокументовЛекарстваСервер(Thumbprint_1);
	
		СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			Попытка
				СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
			исключение
				СРегистра=Неопределено;
			КонецПопытки;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			Сообщить("Не удалось получить токен по организации");
			//Возврат;
		Конецесли;
		
		
		Если Не ЗначениеЗаполнено(ДокументПроверки) ИЛИ (ЗначениеЗаполнено(ДокументПроверки) И ТипЗнч(ДокументПроверки)=Тип("ДокументСсылка.ЗаказМарок_ХамелеонЦРПТ")
			) Тогда
		
	//Если ОбработкаWEBНаСервере Тогда
	//	ОбновлениеСтатусовНаСервереDct(ДокументПроверки,СРегистра,Thumbprint_1,ТолькоСтатус);
	//Иначе
	Если УжеОтправили=Ложь Тогда	
		Если ЗначениеЗаполнено(ДокументПроверки) 
			И ТипЗнч(ДокументПроверки)=Тип("ДокументСсылка.ЗаказМарок_ХамелеонЦРПТ")

			Тогда
			ВернутьДокументы=ОбновитьСтатусыДокументовНаСервере_ОдинДокумент(ДокументПроверки);
		Иначе
			ВернутьДокументы=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусыДокументовНаСервере(,Пользователь);
		КонецЕсли;
	КонецЕсли;
	ОбработаноМассив=Новый Массив;
		Для Каждого Стр Из ВернутьДокументы Цикл
	
Попытка
		
			
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/order/"+Стр.order_id+"/details");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
			
			
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				НаСервереОБновляемСтатусыВСЕЗаказы(Текст1,Стр.Ссылка,ТолькоСтатус);
				
				ОбработаноМассив.Добавить(Стр);
				a=1
		ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
				Если УжеОтправили=Истина Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
				Иначе
					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
					Для Каждого с Из ОбработаноМассив Цикл
						ВернутьДокументы.Удалить(с)
					Конеццикла;
					
					ОбновитьСтатусыДокументовСервер(Команда,ВернутьДокументы,Истина,ДокументПроверки);			
					Возврат;
				КонецЕсли
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				    ОшибкаОтправки="";
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Попытка
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
				КонецПопытки;
			//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"4 код ошибки");
		

		КонецЕсли;
	Исключение
		КонецПопытки;	 
	Конеццикла;
	Элементы.ЗаказыТаблица.Обновить();	
	
	Если ЗначениеЗаполнено(ДокументПроверки) Тогда
		Возврат;
	КонецЕсли;	
	
//КонецЕсли;	
	  КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументПроверки) ИЛИ (ЗначениеЗаполнено(ДокументПроверки) И ТипЗнч(ДокументПроверки)<>Тип("ДокументСсылка.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ")
			) Тогда
		
						Если УжеОтправили=Ложь Тогда	
						//	Если ЗначениеЗаполнено(ДокументПроверки) тогда
								ВернутьДокументы=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусыДокументовНаСервереВвод(ДокументПроверки,Пользователь);
						//	Конецесли;
						КонецЕсли;
						Thumbprint_1=ПолучитьИзПользователя();	
						Для Каждого Стр Из ВернутьДокументы Цикл
							
							Попытка
								Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
									Прокси=Новый ИнтернетПрокси;
									Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
								
									HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
								Иначе
									HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
								КонецЕсли;
								
 			что=Thumbprint_1.что;
	
								

								HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body?pg="+что+"&limit=2147483647");
							HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
							HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
							//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
							///Константин           
							Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
								Текст1=Ответ.ПолучитьТелоКакСтроку();
								Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
									 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
									
								Конецесли;
								
								
								Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
										//ЧтениеJSON = Новый ЧтениеJSON;
										//ЧтениеJSON.УстановитьСтроку(Текст1);
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
										Если NNN.status="CHECKED_NOT_OK"
											ИЛИ NNN.status="PARSE_ERROR" 
						ИЛИ NNN.status="PROCESSING_ERROR"
											Тогда
											ОбновитьСтатусДокумента_ВводВОборот(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
											
											//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ЧерновикОбработан"),"");
										ИначеЕсли NNN.status="CHECKED_OK" Тогда
											ОбновитьСтатусДокумента_ВводВОборот(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"",NNN.body);
											
										КонецЕсли;
									
									ОбработаноМассив.Добавить(Стр);
									a=1
							ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
									Если УжеОтправили=Истина Тогда
										ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
									Иначе
										ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
										Для Каждого с Из ОбработаноМассив Цикл
											ВернутьДокументы.Удалить(с)
										Конеццикла;
										
										ОбновитьСтатусыДокументовСервер(Команда,ВернутьДокументы,Истина,ДокументПроверки)			;
										Возврат;
									КонецЕсли
								ИначеЕсли Ответ.КодСостояния=301 Тогда
									
									    ОшибкаОтправки="";
								//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
									Попытка
										//ЧтениеJSON = Новый ЧтениеJSON;
										//ЧтениеJSON.УстановитьСтроку(Текст1);
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
										ОшибкаОтправки=NNN.error_message;
										
									Исключение
									КонецПопытки;
								//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
							

							КонецЕсли;
						Исключение
							КонецПопытки;
							
						Конеццикла;
						Элементы.ВводВОборотТаблица.Обновить();	
						
						
						
						
						ВернутьДокументы_ОтчтетОбИспользовании=ОбновитьСтатусыДокументовНаСервереВвод_Использование(ДокументПроверки,Пользователь);
						
						
						
						ОбработаноМассив=Новый Массив;
						Thumbprint_1=ПолучитьИзПользователя();
						  	
						 ПолучитьДокументы=ПолучитьДокументыПоСУЗ(Thumbprint_1);
							АдресРаздробить=Thumbprint_1.АдресСУЗ;
							Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
							Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
							Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
							Порт=Сред(Порт,Найти(Порт,":")+1);
							Попытка
								Порт=число(Порт);
							Исключение
								Порт=Неопределено;
							КонецПопытки;
							
								Если Найти(АдресРаздробить ,"https")=1 Тогда
									Защищ=Новый ЗащищенноеСоединениеopenSSL();
								Иначе
									Защищ=Неопределено;
								КонецЕсли;

							
								//	Если Не ЗначениеЗаполнено(Адрес) Тогда
								
								//ПоказатьПредупреждение(,"В пользователе не заполнен адрес СУЗ");
								//Возврат;
								
							//КонецЕсли;
								Если ЗначениеЗаполнено(Адрес) Тогда
									
					Для Каждого Стр Из ВернутьДокументы_ОтчтетОбИспользовании Цикл
						
								    Попытка
								Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
									Прокси=Новый ИнтернетПрокси;
									Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
								
									HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
								Иначе
									HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
								КонецЕсли;
								
								
								//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body");
							HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/report/info?reportId="+Стр.order_id+"&omsId="+Thumbprint_1.ИдентификаторСУЗ);
							HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
																			ТокенСУЗ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);
							
							HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
							//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
							///Константин           
							Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
								Текст1=Ответ.ПолучитьТелоКакСтроку();
								Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
									 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
									
								Конецесли;
								
								
								Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
										//ЧтениеJSON = Новый ЧтениеJSON;
										//ЧтениеJSON.УстановитьСтроку(Текст1);
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
										Если NNN.reportStatus="ERROR" ИЛИ NNN.reportStatus="REJECTED"  Тогда
											ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),Неопределено);
										ИначеЕсли 	NNN.reportStatus="READY_TO_SEND" Тогда
											ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета"),Неопределено);
										ИначеЕсли 	NNN.reportStatus="UNPROCESSED" Тогда
											ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВПроцессе"),Неопределено);
										ИначеЕсли 	NNN.reportStatus="COMPLETE" 
											ИЛИ NNN.reportStatus="SENT" 
											Тогда
											ОбновитьСтатусДокумента_Списания(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
											
											
											
											
										КонецЕсли;
									
									ОбработаноМассив.Добавить(Стр);
							ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
									
								ИначеЕсли Ответ.КодСостояния=301 Тогда
									
									    ОшибкаОтправки="";
								//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
									Попытка
										//ЧтениеJSON = Новый ЧтениеJSON;
										//ЧтениеJSON.УстановитьСтроку(Текст1);
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
										ОшибкаОтправки=NNN.error_message;
										
									Исключение
									КонецПопытки;
								//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
							      

							КонецЕсли;
							Исключение
							КонецПопытки;
							
						Конеццикла;
									
						Если ЗначениеЗаполнено(ДокументПроверки)		Тогда
							возврат;
						КонецЕсли;
						
						
						
						
						Если Элементы.Основная.ТекущаяСтраница=Элементы.Документы Тогда
							ЗагрузитьДокументыСервер(Команда);
							
							
						КонецЕсли;
						
						
						
						
						
						
						
						
						       	
						
	КонецЕсли;				
	
	
	
	
			   
	СправочникиОбновить=ПолучитьСписоскПродукцииОстаток();
	
	
	
	
	
	Если СправочникиОбновить.Количество()>0 Тогда
		
		
		Для Каждого Стр Из СправочникиОбновить Цикл
			
			
			
		
	Попытка
			
				
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
 			что=Thumbprint_1.что;
	
								
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.ГУИД+"/body?pg="+что+"&limit=2147483647");
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин           
			
			Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				Текст1=Ответ.ПолучитьТелоКакСтроку();
				
				
				Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					ГТИН="";
					ПолучимГТИНПродукции(Текст1,Стр.Ссылка,ГТИН);
					Если ЗначениеЗаполнено(ГТИН) Тогда
						
						
						Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
	HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
	HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
//			ИНН=ВернутьИНН(Обр.Организации[0].Организация );
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?gtin="+ГТИН);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	Если Ответ.КодСостояния=200 Тогда
		//ЗагружаемШаблоныНасервере(Текст1,Обр.Пользователь);
		ЗагружаемГТИН(Текст1,,,,Thumbprint_1,Истина);
		
		
	КонецЕсли;
			Конецесли;		
					
			ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					Если УжеОтправили=Истина Тогда
						ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
					Иначе
						ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
						
						ОбновитьСтатусыДокументовСервер(Команда,ВернутьДокументы,Истина,ДокументПроверки);			
						Возврат;
					КонецЕсли
					
				КонецЕсли;
			Исключение
				КонецПопытки;
		Конеццикла;

	КонецЕсли;
	
			   
		
	//Если ОбработкаWEBНаСервере Тогда
	//	ЗагрузканаСервереОтправитьСписание_Шины(Thumbprint_1,"",Адрес,Порт,ПолучитьДокументы,Защищ);
		
		
	//Иначе
		
							АдресРаздробить=Thumbprint_1.АдресСУЗ;
							Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
							Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
							Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
							Порт=Сред(Порт,Найти(Порт,":")+1);
							Попытка
								Порт=число(Порт);
							Исключение
								Порт=Неопределено;
							КонецПопытки;
							
								Если Найти(АдресРаздробить ,"https")=1 Тогда
									Защищ=Новый ЗащищенноеСоединениеopenSSL();
								Иначе
									Защищ=Неопределено;
								КонецЕсли;

		
	      Для Каждого Стр Из ПолучитьДокументы Цикл
	
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;
			
	
		HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/report/info?reportId="+Стр.order_id+"&omsId="+Thumbprint_1.ИдентификаторСУЗ);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
																				ТокенСУЗ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);

	HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
	
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.reportStatus="READY_TO_SEND" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета"),"");
						
					ИначеЕсли 	NNN.reportStatus="SENT" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
						

					КонецЕсли;
				
			Иначе				    ОшибкаОтправки="";
				Попытка
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
					ОшибкаОтправки=Текст1;
				КонецПопытки;
			ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),ОшибкаОтправки);
		

		КонецЕсли;
		
	        Конеццикла;
	 //  КонецЕсли;
	   
		   Элементы.Списание.Обновить();;
	   
	
	   Если Не ЗначениеЗаполнено(Thumbprint_1.АдресКАПИ) Тогда
		Возврат;
	КонецЕсли;
	
	СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		Сообщить("Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	   НадоЗагружатьОтвет=Ложь;
	
	
	
	
	
	
	
		//Если УжеОтправили=Ложь Тогда	
		ВернутьДокументы_Отгрузка=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусыДокументовНаСервереОтгрузка(,Пользователь);
	//КонецЕсли;
	ОбработаноМассив=Новый Массив;
	Thumbprint_1=ПолучитьИзПользователя();	
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаемРегистрациюУчастникавИСМП"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"));
	
	

	
	Для Каждого Стр Из ВернутьДокументы_Отгрузка Цикл
		
		
		
		Если СписокСтатусов.НайтиПоЗначению(Стр.Статус)=Неопределено тогда
			
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Стр.order_id) Тогда
			Продолжить;
		КонецЕсли;
		
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
 			что=Thumbprint_1.что;
	
								
			
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body?pg="+что+"&limit=2147483647");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
			
			
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.status="CHECKED_NOT_OK" ИЛИ NNN.status="PARSE_ERROR"  
						ИЛИ NNN.status="PROCESSING_ERROR"
						Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
					ИначеЕсли 	NNN.status="WAIT_ACCEPTANCE" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"");
					ИначеЕсли 	NNN.status="CANCELLED" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
					ИначеЕсли NNN.Status="WAIT_PARTICIPANT_REGISTRATION" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаемРегистрациюУчастникавИСМП"),"");
						
					ИначеЕсли NNN.Status="ACCEPTED"
						ИЛИ NNN.Status="CHECKED_OK" Тогда
						Если Стр.ОтгрузкаНеУчастника И Стр.ВыводИзОборота Тогда
								ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),NNN);
						КонецЕсли;
					//	ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),NNN);
						
					КонецЕсли;
				
				ОбработаноМассив.Добавить(Стр);
				a=1
		ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
				Если УжеОтправили=Истина Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
				Иначе
					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
					Для Каждого с Из ОбработаноМассив Цикл
						ВернутьДокументы.Удалить(с)
					Конеццикла;
					
					ОбновитьСтатусыДокументовСервер(Команда,ВернутьДокументы,Истина,ДокументПроверки);			
					Возврат;
				КонецЕсли
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				    ОшибкаОтправки="";
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Попытка
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
				КонецПопытки;
			//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
		

		КонецЕсли;
		
		
	Конеццикла;
	Элементы.Отгрузка_Список.Обновить();	
	

	

	
	//Если УжеОтправили=Ложь Тогда	
		ВернутьДокументы_Списание=ОбновитьСтатусыДокументовНаСервереСписание(Пользователь);
	//КонецЕсли;
	ОбработаноМассив=Новый Массив;
	Thumbprint_1=ПолучитьИзПользователя();	
	Для Каждого Стр Из ВернутьДокументы_Списание Цикл
	
				
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
 			что=Thumbprint_1.что;
	
								
			
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body?pg="+что+"&limit=2147483647");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
			
			
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.status="CHECKED_NOT_OK" ИЛИ NNN.status="PARSE_ERROR"  
						ИЛИ NNN.status="PROCESSING_ERROR"
						Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
					ИначеЕсли 	NNN.status="WAIT_ACCEPTANCE" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"");
					ИначеЕсли 	NNN.status="CANCELLED" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
					ИначеЕсли 	NNN.status="CHECKED_OK" Тогда
						
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
					
					КонецЕсли;
				
				ОбработаноМассив.Добавить(Стр);
				a=1
		ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
				Если УжеОтправили=Истина Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
				Иначе
					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
					Для Каждого с Из ОбработаноМассив Цикл
						ВернутьДокументы.Удалить(с)
					Конеццикла;
					
					ОбновитьСтатусыДокументовСервер(Команда,ВернутьДокументы,Истина,ДокументПроверки)			;
					Возврат;
				КонецЕсли
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				    ОшибкаОтправки="";
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Попытка
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
				КонецПопытки;
			//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
		

		КонецЕсли;
		
		
	Конеццикла;
	Элементы.Списание.Обновить();	
	
	
	
	
	
	
	
	
	
	
	
	
	//Если УжеОтправили=Ложь Тогда	
		ВернутьДокументы_Приемка=ОбновитьСтатусыДокументовНаСервереПРИХОДЫОТВЕТЫ(Пользователь);
	//КонецЕсли;
	ОбработаноМассив=Новый Массив;
	Thumbprint_1=ПолучитьИзПользователя();	
	Для Каждого Стр Из ВернутьДокументы_Приемка Цикл
	
			
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
 			что=Thumbprint_1.что;
	
								
			
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body?pg="+что+"&limit=2147483647");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				// ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
			
			
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.status="CHECKED_NOT_OK" ИЛИ NNN.status="PARSE_ERROR"  
						ИЛИ NNN.status="PROCESSING_ERROR"
						Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),NNN.downloadDesc);
					ИначеЕсли 	NNN.status="WAIT_ACCEPTANCE" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"");
					ИначеЕсли 	NNN.status="CANCELLED" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"");
					ИначеЕсли 	NNN.status="CHECKED_OK" Тогда
						МассивУп=Новый Массив;
						
 			что=Thumbprint_1.что;
	
								
						
						HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+NNN.body.release_order_number+"/body?pg="+что+"&limit=2147483647");
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
						//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
						///Константин           
						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
						Текст1=Ответ.ПолучитьТелоКакСтроку();
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						//NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(NNN_1.content);
						//NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(NNN.content);
						ЗаполненаТабличнаяЧастьПриемки=Ложь;
						дкоументФарм=ОбновитьСтатусДокумента_Приемка(NNN_1,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа,,Стр.Ссылка,NNN,,,ЗаполненаТабличнаяЧастьПриемки);
						
						
						

						
						
						//ОбновитьИнформациюОПродукции(Стр.Ссылка);
						
						
						
						//ОбновитьСтатусДокумента_Приемка_АКТ_1(Стр.Ссылка,NNN_1,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа,NNN);	
						
						//ОбновитьСтатусДокумента_Приемка_АКТ(Стр.Ссылка,NNN_1 ,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа);	
						//ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
					
					КонецЕсли;
				
				ОбработаноМассив.Добавить(Стр);
				a=1
		ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
				Если УжеОтправили=Истина Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
				Иначе
					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
					Для Каждого с Из ОбработаноМассив Цикл
						ВернутьДокументы.Удалить(с)
					Конеццикла;
					
					ОбновитьСтатусыДокументовСервер(Команда,ВернутьДокументы,Истина,ДокументПроверки);			
					Возврат;
				КонецЕсли
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				    ОшибкаОтправки="";
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Попытка
					ЧтениеJSON = Новый ЧтениеJSON;
					ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
				КонецПопытки;
			//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
		

		КонецЕсли;
		
		
	Конеццикла;
	Элементы.Приемкасписок .Обновить();	
	
	
	
	
	
	
	КонецЕсли;
	
					
						
						
						
						
						
						
	
	
	
	
	
	
	
	
	
	
	ВернутьДокументы_3=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусыДокументовНаСервереСозданиеНовогоШкНаКороба_ХамелеонЦРПТСУЗ(ДокументПроверки,Пользователь);
	
	
	
	
							АдресРаздробить=Thumbprint_1.АдресСУЗ;
							Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
							Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
							Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
							Порт=Сред(Порт,Найти(Порт,":")+1);
							Попытка
								Порт=число(Порт);
							Исключение
								Порт=Неопределено;
							КонецПопытки;
							
								Если Найти(АдресРаздробить ,"https")=1 Тогда
									Защищ=Новый ЗащищенноеСоединениеopenSSL();
								Иначе
									Защищ=Неопределено;
								КонецЕсли;


	
	 	
	Для Каждого Стр Из ВернутьДокументы_3 Цикл
	
			    Попытка
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;
			
			
			//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body+"&limit=2147483647"");
		HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/report/info?reportId="+Стр.order_id+"&omsId="+Thumbprint_1.ИдентификаторСУЗ);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
																					ТокенСУЗ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);

		HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
			
			
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.reportStatus="ERROR" 
						ИЛИ NNN.reportStatus="REJECTED" 
						Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),Неопределено);
					ИначеЕсли 	NNN.reportStatus="READY_TO_SEND" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета"),Неопределено);
					ИначеЕсли 	NNN.reportStatus="UNPROCESSED" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВПроцессе"),Неопределено);
					ИначеЕсли 	NNN.reportStatus="COMPLETE" 
						ИЛИ NNN.reportStatus="SENT" 
						Тогда
						ОбновитьСтатусДокумента_Списания(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
					КонецЕсли;
				
				ОбработаноМассив.Добавить(Стр);
				a=1
		ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
				
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				    ОшибкаОтправки="";
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Попытка
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
				КонецПопытки;
			//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
		      

		КонецЕсли;
		Исключение
		КонецПопытки;
		
	Конеццикла;

	
	
	
			Если УжеОтправили=Ложь Тогда	
		ВернутьДокументы=ОбновитьСтатусыДокументовНаСервереСозданиеНовогоШкНаКороба_ХамелеонЦРПТ(ДокументПроверки,Пользователь);
	КонецЕсли;
	ОбработаноМассив=Новый Массив;
	Thumbprint_1=ПолучитьИзПользователя();	
	Для Каждого Стр Из ВернутьДокументы Цикл
	
				
		
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
 			что=Thumbprint_1.что;
	
								
			
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body?pg="+что+"&limit=2147483647");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Попытка
			Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
		Исключение
			Продолжить;
		КонецПопытки;
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
			
			
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.status="CHECKED_NOT_OK" ИЛИ NNN.status="PARSE_ERROR"  
						ИЛИ NNN.status="PROCESSING_ERROR"
						Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
					ИначеЕсли 	NNN.status="WAIT_ACCEPTANCE" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"");
					ИначеЕсли 	NNN.status="CANCELLED" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
					ИначеЕсли 	NNN.status="CHECKED_OK" Тогда
						ОбновитьСтатусДокумента_Списания(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
					КонецЕсли;
				
				ОбработаноМассив.Добавить(Стр);
				a=1
		ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
				Если УжеОтправили=Истина Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
				Иначе
					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
					Для Каждого с Из ОбработаноМассив Цикл
						ВернутьДокументы.Удалить(с)
					Конеццикла;
					
					ОбновитьСтатусыДокументовСервер(Команда,ВернутьДокументы,Истина,ДокументПроверки)			;
					Возврат;
				КонецЕсли
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				    ОшибкаОтправки="";
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Попытка
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
				КонецПопытки;
			//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
		

		КонецЕсли;
		
		
	Конеццикла;
	Элементы.Отгрузка_Список.Обновить();	
	   //КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьПоДокументуЗаново(Знач Стр,ТекущийПользователь,Thumbprint_1)
	Стр=Стр.Ссылка;
	Если Стр.Организация.ИНН=ТекущийПользователь.Организация.ИНН 
		И Стр.ТекущийПользователь.СайтыВходаВСистему=ТекущийПользователь.СайтыВходаВСистему Тогда
		Возврат Thumbprint_1;
	ИначеЕсли Стр.ТекущийПользователь.ПометкаУдаления=Ложь Тогда
		Возврат Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(Стр.ТекущийПользователь);
	Иначе
		
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Пользователи_ХамелеонЦРПТ КАК Пользователи_ХамелеонЦРПТ
		|ГДЕ
		|	Пользователи_ХамелеонЦРПТ.Организация.ИНН = &Организация
		|	И Пользователи_ХамелеонЦРПТ.СайтыВходаВСистему = &СайтыВходаВСистему";
	
	Запрос.УстановитьПараметр("Организация", Стр.Организация.ИНН);
	Запрос.УстановитьПараметр("СайтыВходаВСистему", Стр.ТекущийПользователь.СайтыВходаВСистему);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НайтиПольз=Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		                      НайтиПольз=ВыборкаДетальныеЗаписи.Ссылка
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		
		//НайтиПольз=Справочники.Пользователи_ХамелеонЦРПТ.НайтиПоРеквизиту("Организация",Объект.Организация);
		Если ЗначениеЗаполнено(НайтиПольз) Тогда
			Возврат Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(НайтиПольз);
		КонецЕсли;
		
	КонецЕслИ;
	Возврат Неопределено;
	
	
Конецфункции

&НаСервереБезКонтекста
Функция ОпределитьПоДокументуЗаново_Продукция(Знач Стр,ТекущийПользователь,Thumbprint_1)
	Стр=Стр.Ссылка;
	Если Стр.ИННПроизводителяИмпортёра.ИНН=ТекущийПользователь.Организация.ИНН 
//		И Стр.ТекущийПользователь.СайтыВходаВСистему=ТекущийПользователь.СайтыВходаВСистему 
Тогда
		Возврат Thumbprint_1;
	Иначе
		
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Пользователи_ХамелеонЦРПТ КАК Пользователи_ХамелеонЦРПТ
		|ГДЕ
		|	Пользователи_ХамелеонЦРПТ.Организация.ИНН = &Организация";
		//|	И Пользователи_ХамелеонЦРПТ.СайтыВходаВСистему = &СайтыВходаВСистему";
	
	Запрос.УстановитьПараметр("Организация", Стр.ИННПроизводителяИмпортёра.ИНН);
	//Запрос.УстановитьПараметр("СайтыВходаВСистему", Стр.ТекущийПользователь.СайтыВходаВСистему);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НайтиПольз=Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		                      НайтиПольз=ВыборкаДетальныеЗаписи.Ссылка
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		
		//НайтиПольз=Справочники.Пользователи_ХамелеонЦРПТ.НайтиПоРеквизиту("Организация",Объект.Организация);
		Если ЗначениеЗаполнено(НайтиПольз) Тогда
			Возврат Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(НайтиПольз);
		КонецЕсли;
		
	КонецЕслИ;
	Возврат Неопределено;
	
	
Конецфункции

&НаСервереБезКонтекста
Функция ИщемЗаказыКМДляОборота(ползователь)
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказМарок_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Документ.ЗаказМарок_ХамелеонЦРПТ КАК ЗаказМарок_ХамелеонЦРПТ
		|ГДЕ
		|	ЗаказМарок_ХамелеонЦРПТ.ВвестиВОборотПослеЭмитирования = ИСТИНА
		|	И ЗаказМарок_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему = &СайтыВходаВСистему";
	
	Запрос.УстановитьПараметр("СайтыВходаВСистему",ползователь.СайтыВходаВСистему);
	Запрос.УстановитьПараметр("Статус",Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивДокументов=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		МассивДокументов.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	Возврат             МассивДокументов
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
Конецфункции


&НаСервере
Функция ОбновитьСтатусыДокументовНаСервере_ЗазкаыКМ()
	
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
		Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказМарок_ХамелеонЦРПТ.Ссылка,
		|	ЗаказМарок_ХамелеонЦРПТ._Order_ID
		|ИЗ
		|	Документ.ЗаказМарок_ХамелеонЦРПТ КАК ЗаказМарок_ХамелеонЦРПТ
		|ГДЕ
		|	ЗаказМарок_ХамелеонЦРПТ.Статус В(&Статус)
		|	И ПОДСТРОКА(ЗаказМарок_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|	И НЕ ЗаказМарок_ХамелеонЦРПТ.ПометкаУдаления
		|	И ЗаказМарок_ХамелеонЦРПТ.Организация = &Организация
		|	И ЗаказМарок_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему = &СайтыВходаВСистему
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказМарок_ХамелеонЦРПТ.Организация";
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВПроцессе);
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	Запрос.УстановитьПараметр("Организация",	Пользователь.Организация); 
	Запрос.УстановитьПараметр("СайтыВходаВСистему",	Пользователь.СайтыВходаВСистему); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	
Конецфункции


&НаСервере
Функция ОбновитьСтатусыДокументовНаСервере_ВводВоборотОтчет()
	
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
		Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводВОборот_ХамелеонЦРПТ.Ссылка,
		|	ВводВОборот_ХамелеонЦРПТ._Order_ID
		|ИЗ
		|	Документ.ВводВОборот_ХамелеонЦРПТ КАК ВводВОборот_ХамелеонЦРПТ
		|ГДЕ
		|	ВводВОборот_ХамелеонЦРПТ.Статус В(&Статус)
		|	И НЕ ВводВОборот_ХамелеонЦРПТ.ПометкаУдаления
		|	И ВводВОборот_ХамелеонЦРПТ.ТипДокумента = &ТипДокумента
		|	И ВводВОборот_ХамелеонЦРПТ.Организация = &Организация
		|	И ВводВОборот_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему = &СайтыВходаВСистему
	//	|	И ВводВОборот_ХамелеонЦРПТ.ВводВОборотПослеВводаВОтчет.Статус В(&Статус1)
		|	И ВводВОборот_ХамелеонЦРПТ.ВводВОборотПослеВводаВОтчет = ЗНАЧЕНИЕ(Документ.ВводВОборот_ХамелеонЦРПТ.ПустаяСсылка)
		|	И ВводВОборот_ХамелеонЦРПТ.ПродолжитьВводВОборот
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВводВОборот_ХамелеонЦРПТ.Организация";
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан);
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВПроцессе);
	
	Запрос.УстановитьПараметр("Организация",	Пользователь.Организация); 
	Запрос.УстановитьПараметр("СайтыВходаВСистему",	Пользователь.СайтыВходаВСистему); 
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	Запрос.УстановитьПараметр("ТипДокумента",	Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		
		ДокументВводВоборот=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
		ДокументВводВоборот.Заполнить(ВыборкаДетальныеЗаписи.Ссылка);
		ДокументВводВоборот.Дата=Текущаядата();
		ДокументВводВоборот.Записать();
		ПолПр=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ПолПр.ВводВОборотПослеВводаВОтчет=ДокументВводВоборот.Ссылка;
		ПолПр.Записать();
		
		
		
		
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ДокументВводВоборот.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	
Конецфункции


&НаКлиенте
Процедура ПолучитьСправочникПоТабаку(ГУИД,что,Thumbprint_1,HTTPСервисЗапрос,ДокументПроверки,УжеОтправили,СРегистра,Ссылка,ВернутьДокументы)
	
	Тело="{""id"":"""+ГУИД+"""}";
			HTTPЗапрос=Новый HTTPЗапрос("/api/v3/facade/documents/view");
				
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин           
			HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
			
			Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("POST",HTTPЗапрос);
				Текст1=Ответ.ПолучитьТелоКакСтроку();
				
				
				Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					ГТИН="";
					ПолучимГТИНПродукции_Табак(Текст1,Ссылка,ГТИН);
					
				КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьСтатусыДокументов(Команда,ВернутьДокументы=Неопределено,УжеОтправили=Ложь,ДокументПроверки=Неопределено,ТолькоСтатус=Ложь,Что_1=0) Экспорт
	Thumbprint_1=ПолучитьИзПользователя();	
	
	Если ОбработкаWEBНаСервере Тогда
		
		ОбновитьСтатусыДокументовСервер(Thumbprint_1,ВернутьДокументы,УжеОтправили,ДокументПроверки,ТолькоСтатус) ;
		Возврат;
		
	КонецЕсли;
	ОбработаноМассив=Новый Массив;
	
	
	
	
	Если Не ЗначениеЗАполнено(ДокументПроверки) И Что_1=0 тогда
		ИщемЗаказыКМ=ИщемЗаказыКМДляОборота(Пользователь);
		Для Каждого Ст_1 Из ИщемЗаказыКМ Цикл
			ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПроверкаВводВОБорот(Ст_1);
		Конеццикла;
		
	Конецесли;
	
	Если НЕ ЗначениеЗаполнено(ДокументПроверки) И НЕ НеЭмитировать И Что_1=0 тогда
		
		ДокументыЗаказы=ОбновитьСтатусыДокументовНаСервере_ЗазкаыКМ();
		Для Каждого Стр_ЗаказКМ ИЗ ДокументыЗаказы Цикл
			
			Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
			"Ключ",Стр_ЗаказКМ.Ссылка));
			Форм.ПолучитьКМИзAPI(Команда);
		
			
			
			
		Конеццикла;
		Элементы.ЗаказыТаблица.Обновить();
		
	Конецесли;
	
	
Thumbprint_1=ПолучитьИзПользователя();

АдресРаздробить=Thumbprint_1.АдресСУЗ;
							Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
							Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
							Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
							Порт=Сред(Порт,Найти(Порт,":")+1);
							Попытка
								Порт=число(Порт);
							Исключение
								Порт=Неопределено;
							КонецПопытки;
							
								Если Найти(АдресРаздробить ,"https")=1 Тогда
									Защищ=Новый ЗащищенноеСоединениеopenSSL();
								Иначе
									Защищ=Неопределено;
								КонецЕсли;
								
								
			Если Что_1=0 ИЛИ Что_1=2 Тогда
								
								Если ЗначениеЗаполнено(Адрес) Тогда
								Количество=0;	
						ВернутьДокументы_ОтчтетОбИспользовании=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВернутьСтатусыДокументовПоТабличнойЧасти_ОтчетОбИспользовании(ДокументПроверки,Пользователь);
								
					Для Каждого Стр Из ВернутьДокументы_ОтчтетОбИспользовании Цикл
						
						
						
								Количество=Количество+1;
							//Состояние("Обрабатывается статусы отчетов об использовании "+Строка(СТР.Ссылка)+" "+Строка(КоличествО)+" из "+Строка(ВернутьДокументы_ОтчтетОбИспользовании.Количество()),Количество*100/ВернутьДокументы_ОтчтетОбИспользовании.Количество());
							Состояние("Обрабатывается статусы отчетов об использовании "+Строка(СТР.Ссылка)+" "+Строка(КоличествО)+" из "+Строка(ВернутьДокументы_ОтчтетОбИспользовании.Количество()));
						
								    Попытка
								Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
									Прокси=Новый ИнтернетПрокси;
									Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
								
									HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
								Иначе
									HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
								КонецЕсли;
								
								
								//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body+"&limit=2147483647"");
							HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/report/info?reportId="+Стр.order_id+"&omsId="+Thumbprint_1.ИдентификаторСУЗ);
							HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
																		ТокенСУЗ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);

							HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
							//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
							///Константин           
							Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
								Текст1=Ответ.ПолучитьТелоКакСтроку();
								//Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
									 //ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
									
								//Конецесли;
								
								
								Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
										//ЧтениеJSON = Новый ЧтениеJSON;
										//ЧтениеJSON.УстановитьСтроку(Текст1);
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
										Если NNN.reportStatus="ERROR" ИЛИ NNN.reportStatus="REJECTED"  Тогда
											Стр_1=Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"));

											ОбработаноМассив_статусы(Стр_1);
										//	ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),Неопределено);
									ИначеЕсли 	NNN.reportStatus="READY_TO_SEND" 
										
										Тогда
											Стр_1=Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета"));
										ОбработаноМассив_статусы(Стр_1)
											//ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета"),Неопределено);
										ИначеЕсли 	NNN.reportStatus="UNPROCESSED" Тогда
											Стр_1=Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВПроцессе"));
											ОбработаноМассив_статусы(Стр_1)
											//ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВПроцессе"),Неопределено);
										ИначеЕсли 	NNN.reportStatus="COMPLETE" 
											ИЛИ NNN.reportStatus="SENT" 
											Тогда
											Стр_1=Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"));
											ОбработаноМассив_статусы(Стр_1)
											//ОбновитьСтатусДокумента_Списания(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
											
											
											
											
										КонецЕсли;
									
									//ОбработаноМассив.Добавить(Стр);
							ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
									
								ИначеЕсли Ответ.КодСостояния=301 Тогда
									
									    ОшибкаОтправки="";
								//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
									Попытка
										//ЧтениеJSON = Новый ЧтениеJSON;
										//ЧтениеJSON.УстановитьСтроку(Текст1);
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
										ОшибкаОтправки=NNN.error_message;
										
									Исключение
									КонецПопытки;
								//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
							      

							КонецЕсли;
							Исключение
							КонецПопытки;
							
						Конеццикла;
									
							КонецЕсли;	
						
						Элементы.ВводВОборотТаблица.Обновить();	
						
						
				КонецЕсли;
				
				
				
				
				
				
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
		ОбновитьСтатусыДокументовЛекарства(Thumbprint_1);
		Возврат;
	Конецесли;
	
	Если Что_1=0 тогда
		НайдемЗаказыПоСервисПрайду=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.НайдемЗаказыПоСервисПрайду(Пользователь);
		
		Для Каждого Стр_1 Из НайдемЗаказыПоСервисПрайду Цикл
			Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",
			Новый Структура("Ключ",Стр_1.Ссылка));
			Форм.ОбновимСтатсыПострчокам();
		Конеццикла;
		
	КонецЕсли;
				

	
	
		//СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		//Если Не ЗначениеЗаполнено(СРегистра) тогда
		//	Попытка
		//		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		//	исключение
		//		СРегистра=Неопределено;
		//	КонецПопытки;
		//КонецЕсли;
		//Если Не ЗначениеЗаполнено(СРегистра) Тогда
		//	Сообщить("Не удалось получить токен по организации");
		//	//Возврат;
		//Конецесли;
		//
		
		Если Не ЗначениеЗаполнено(ДокументПроверки) ИЛИ (ЗначениеЗаполнено(ДокументПроверки) И ТипЗнч(ДокументПроверки)=Тип("ДокументСсылка.ЗаказМарок_ХамелеонЦРПТ")
			) Тогда
		
//	Если ОбработкаWEBНаСервере Тогда
//		ОбновлениеСтатусовНаСервереDct(ДокументПроверки,СРегистра,Thumbprint_1,ТолькоСтатус);
//	Иначе
Если Что_1=0 Тогда
	Если УжеОтправили=Ложь Тогда	
		Если ЗначениеЗаполнено(ДокументПроверки) 
			И ТипЗнч(ДокументПроверки)=Тип("ДокументСсылка.ЗаказМарок_ХамелеонЦРПТ")

			Тогда
			ВернутьДокументы=ОбновитьСтатусыДокументовНаСервере_ОдинДокумент(ДокументПроверки);
		Иначе
			ВернутьДокументы=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусыДокументовНаСервере(,Пользователь);
		КонецЕсли;
	КонецЕсли;
	Количество=0;
		Для Каждого Стр Из ВернутьДокументы Цикл
	
			Попытка
				Количество=Количество+1;
				//Состояние("Обрабатывается статусы заказы КМ "+Строка(СТР.ссылка)+" "+Строка(КоличествО)+" из "+Строка(ВернутьДокументы.Количество()),Количество*100/ВернутьДокументы.Количество());
				Состояние("Обрабатывается статусы заказы КМ "+Строка(СТР.ссылка)+" "+Строка(КоличествО)+" из "+Строка(ВернутьДокументы.Количество()));
				
				
				Thumbprint_1=ОпределитьПоДокументуЗаново(Стр,Пользователь,Thumbprint_1);
				Если Не ЗначениеЗаполнено(Thumbprint_1) тогда
					Продолжить;
				КонецЕсли;
				
				СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Если Не ЗначениеЗаполнено(СРегистра) тогда
					Попытка
						СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
					исключение
						СРегистра=Неопределено;
					КонецПопытки;
				КонецЕсли;
				
				
			
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/order/"+Стр.order_id+"/details");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
			
			
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				НаСервереОБновляемСтатусыВСЕЗаказы(Текст1,Стр.Ссылка,ТолькоСтатус);
				
				ОбработаноМассив.Добавить(Стр);
				a=1
		ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
				Если УжеОтправили=Истина Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
				Иначе
					ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
					Для Каждого с Из ОбработаноМассив Цикл
						ВернутьДокументы.Удалить(с)
					Конеццикла;
					
					ОбновитьСтатусыДокументов(Команда,ВернутьДокументы,Истина,ДокументПроверки);			
					Возврат;
				КонецЕсли
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				    ОшибкаОтправки="";
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Попытка
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
				КонецПопытки;
			//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
		

		КонецЕсли;
	Исключение
		КонецПопытки;	 
	Конеццикла;
	Элементы.ЗаказыТаблица.Обновить();	
	
КонецЕсли;
	Если ЗначениеЗаполнено(ДокументПроверки) Тогда
		Возврат;
	КонецЕсли;	
	
//КонецЕсли;	
	  КонецЕсли;
	  
	Если Не ЗначениеЗаполнено(ДокументПроверки) ИЛИ (ЗначениеЗаполнено(ДокументПроверки) И ТипЗнч(ДокументПроверки)<>Тип("ДокументСсылка.Перемаркировка_ХамелеонЦРПТ")
			) Тогда
		
	
	Если Не ЗначениеЗаполнено(ДокументПроверки) ИЛИ (ЗначениеЗаполнено(ДокументПроверки) И ТипЗнч(ДокументПроверки)<>Тип("ДокументСсылка.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ")
			) Тогда
			Если Что_1=0 ИЛИ Что_1=2 Тогда
		
						Если УжеОтправили=Ложь Тогда	
						//	Если ЗначениеЗаполнено(ДокументПроверки) тогда
								ВернутьДокументы=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусыДокументовНаСервереВвод(ДокументПроверки,Пользователь);
						//	Конецесли;
						КонецЕсли;
						Thumbprint_1=ПолучитьИзПользователя();	
						Количество=0;
						Для Каждого Стр Из ВернутьДокументы Цикл
							
								Thumbprint_1=ОпределитьПоДокументуЗаново(Стр,Пользователь,Thumbprint_1);
								Если Не ЗначениеЗаполнено(Thumbprint_1) тогда
									Продолжить;
								КонецЕсли;
								СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
								Если Не ЗначениеЗаполнено(СРегистра) тогда
									Попытка
										СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
									исключение
										СРегистра=Неопределено;
									КонецПопытки;
								КонецЕсли;
								
								
								
								
								
									Количество=Количество+1;
							//Состояние("Обрабатывается статусы ввод в оборот "+Строка(СТР.Ссылка)+" "+Строка(КоличествО)+" из "+Строка(ВернутьДокументы.Количество()),Количество*100/ВернутьДокументы.Количество());
							Состояние("Обрабатывается статусы ввод в оборот "+Строка(СТР.Ссылка)+" "+Строка(КоличествО)+" из "+Строка(ВернутьДокументы.Количество()));
	
							Попытка
								Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
									Прокси=Новый ИнтернетПрокси;
									Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
								
									HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
								Иначе
									HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
								КонецЕсли;
 			что=Thumbprint_1.что;
	
								
								
								HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body"+"?pg="+что+"&limit=2147483647");
							HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
							HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
							//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
							///Константин           
							Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
								Текст1=Ответ.ПолучитьТелоКакСтроку();
								Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
									 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
									
								Конецесли;
								
								
								Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
										//ЧтениеJSON = Новый ЧтениеJSON;
										//ЧтениеJSON.УстановитьСтроку(Текст1);
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
										Если NNN.status="CHECKED_NOT_OK" ИЛИ NNN.status="PARSE_ERROR"  
						ИЛИ NNN.status="PROCESSING_ERROR"
											Тогда
											ОбновитьСтатусДокумента_ВводВОборот(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
											
											//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ЧерновикОбработан"),"");
										ИначеЕсли NNN.status="CHECKED_OK" Тогда
											ОбновитьСтатусДокумента_ВводВОборот(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"",NNN.body);
											
										КонецЕсли;
									
									ОбработаноМассив.Добавить(Стр);
									a=1
							ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
									Если УжеОтправили=Истина Тогда
										ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
									Иначе
										ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
										Для Каждого с Из ОбработаноМассив Цикл
											ВернутьДокументы.Удалить(с)
										Конеццикла;
										
										ОбновитьСтатусыДокументов(Команда,ВернутьДокументы,Истина,ДокументПроверки)			;
										Возврат;
									КонецЕсли
								ИначеЕсли Ответ.КодСостояния=301 Тогда
									
									    ОшибкаОтправки="";
								//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
									Попытка
										//ЧтениеJSON = Новый ЧтениеJSON;
										//ЧтениеJSON.УстановитьСтроку(Текст1);
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
										ОшибкаОтправки=NNN.error_message;
										
									Исключение
									КонецПопытки;
								//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
							

							КонецЕсли;
						Исключение
							КонецПопытки;
							
						Конеццикла;
						
						
												
						
						ВернутьДокументы_ОтчтетОбИспользовании=ОбновитьСтатусыДокументовНаСервереВвод_Использование(ДокументПроверки,Пользователь);
						
	Thumbprint_1=ПолучитьИзПользователя();	
						
						
						//ОбработаноМассив=Новый Массив;

							
								//	Если Не ЗначениеЗаполнено(Адрес) Тогда
								
								//ПоказатьПредупреждение(,"В пользователе не заполнен адрес СУЗ");
								//Возврат;
								
							//КонецЕсли;
								Если ЗначениеЗаполнено(Адрес) Тогда
								Количество=0;	
					Для Каждого Стр Из ВернутьДокументы_ОтчтетОбИспользовании Цикл
						
						
						
								Количество=Количество+1;
//							Состояние("Обрабатывается статусы отчетов об использовании "+Строка(СТР.Ссылка)+" "+Строка(КоличествО)+" из "+Строка(ВернутьДокументы_ОтчтетОбИспользовании.Количество()),Количество*100/ВернутьДокументы_ОтчтетОбИспользовании.Количество());
							Состояние("Обрабатывается статусы отчетов об использовании "+Строка(СТР.Ссылка)+" "+Строка(КоличествО)+" из "+Строка(ВернутьДокументы_ОтчтетОбИспользовании.Количество()));
						
								    Попытка
								Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
									Прокси=Новый ИнтернетПрокси;
									Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
								
									HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
								Иначе
									HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
								КонецЕсли;
								
								
								//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body+"&limit=2147483647"");
							HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/report/info?reportId="+Стр.order_id+"&omsId="+Thumbprint_1.ИдентификаторСУЗ);
							HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
																									ТокенСУЗ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);

							HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
							//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
							///Константин           
							Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
								Текст1=Ответ.ПолучитьТелоКакСтроку();
								Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
									 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
									
								Конецесли;
								
								
								Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
										//ЧтениеJSON = Новый ЧтениеJSON;
										//ЧтениеJSON.УстановитьСтроку(Текст1);
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
										Если NNN.reportStatus="ERROR" ИЛИ NNN.reportStatus="REJECTED"  Тогда
											ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),Неопределено);
										ИначеЕсли 	NNN.reportStatus="READY_TO_SEND" Тогда
											ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета"),Неопределено);
										ИначеЕсли 	NNN.reportStatus="UNPROCESSED" Тогда
											ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВПроцессе"),Неопределено);
										ИначеЕсли 	NNN.reportStatus="COMPLETE" 
											ИЛИ NNN.reportStatus="SENT" 
											Тогда
											ОбновитьСтатусДокумента_Списания(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
											
											
											
											
										КонецЕсли;
									
									ОбработаноМассив.Добавить(Стр);
							ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
									
								ИначеЕсли Ответ.КодСостояния=301 Тогда
									
									    ОшибкаОтправки="";
								//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
									Попытка
										//ЧтениеJSON = Новый ЧтениеJSON;
										//ЧтениеJSON.УстановитьСтроку(Текст1);
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
										ОшибкаОтправки=NNN.error_message;
										
									Исключение
									КонецПопытки;
								//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
							      

							КонецЕсли;
							Исключение
							КонецПопытки;
							
						Конеццикла;
									
										
						
						
					 Если АвтоматОтчетОбИспользовании(Пользователь) Тогда
							
							ДокументыЗаказы_1=ОбновитьСтатусыДокументовНаСервере_ВводВоборотОтчет();
							Для Каждого Стр_ЗаказКМ ИЗ ДокументыЗаказы_1 Цикл
								
								Форм=ПолучитьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
								"Ключ",Стр_ЗаказКМ.Ссылка));
								Форм.ОтправитьЗаявку(Команда);
							
								
								
								
							Конеццикла;
							Элементы.ВводВОборотТаблица.Обновить();
							
						Конецесли;
						
						
					КонецЕсли;
						
						       	
						
	КонецЕсли;				
	
	
			Если ЗначениеЗаполнено(ДокументПроверки)		Тогда
							возврат;
						КонецЕсли;
						
						
						
						
						
						Если Элементы.Основная.ТекущаяСтраница=Элементы.Документы И Что_1=0 Тогда
							ЗагрузитьДокументы(Команда);
							
							
						КонецЕсли;
						
						
					Если Что_1=0 Тогда
			
						 ПолучитьДокументы=ПолучитьДокументыПоСУЗ(Thumbprint_1);
							АдресРаздробить=Thumbprint_1.АдресСУЗ;
							Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
							Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
							Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
							Порт=Сред(Порт,Найти(Порт,":")+1);
							Попытка
								Порт=число(Порт);
							Исключение
								Порт=Неопределено;
							КонецПопытки;
							
								Если Найти(АдресРаздробить ,"https")=1 Тогда
									Защищ=Новый ЗащищенноеСоединениеopenSSL();
								Иначе
									Защищ=Неопределено;
								КонецЕсли;

								Количество=0;
		
	      Для Каждого Стр Из ПолучитьДокументы Цикл
	
									Количество=Количество+1;
							//Состояние("Обрабатывается списание по СУЗ "+Строка(СТР.Ссылка)+" "+Строка(КоличествО)+" из "+Строка(ПолучитьДокументы.Количество()),Количество*100/ПолучитьДокументы.Количество());
							Состояние("Обрабатывается списание по СУЗ "+Строка(СТР.Ссылка)+" "+Строка(КоличествО)+" из "+Строка(ПолучитьДокументы.Количество()));
	
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;
			
	
		HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/report/info?reportId="+Стр.order_id+"&omsId="+Thumbprint_1.ИдентификаторСУЗ);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	
																			ТокенСУЗ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);

	HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
	
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.reportStatus="READY_TO_SEND" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета"),"");
						
					ИначеЕсли 	NNN.reportStatus="SENT" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
						

					КонецЕсли;
				
			Иначе				    ОшибкаОтправки="";
				Попытка
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
					ОшибкаОтправки=Текст1;
				КонецПопытки;
			ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),ОшибкаОтправки);
		

		КонецЕсли;
		
	        Конеццикла;
	 //  КонецЕсли;
	   
		   Элементы.Списание.Обновить();;
	   
		   
		  КонецЕсли;
	   Если Не ЗначениеЗаполнено(Thumbprint_1.АдресКАПИ) Тогда
		Возврат;
	КонецЕсли;
	
	//СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
	//Если Не ЗначениеЗаполнено(СРегистра)  тогда
	//	Попытка
	//		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
	//	исключение
	//		СРегистра=Неопределено;
	//	КонецПопытки;
	//КонецЕсли;
	//Если Не ЗначениеЗаполнено(СРегистра) Тогда
	//	Сообщить("Не удалось получить токен по организации");
	//	Возврат;
	//Конецесли;
	//
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
					
Если Что_1=0 Тогда
	
	
			   
	СправочникиОбновить=ПолучитьСписоскПродукцииОстаток();
	
	
	
	
	
	Если СправочникиОбновить.Количество()>0 Тогда
		Количество=0;
		
		Для Каждого Стр Из СправочникиОбновить Цикл
			
								
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
							СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
									СерийныйНомер=СтруктураНастроек.СерийныйНомер;
							
								Если Не ЗначениеЗаполнено(СРегистра) Тогда
									СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
								Иначе
								   
										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
											Прокси=Новый ИнтернетПрокси;
											Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										Иначе
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										КонецЕсли;
										
										HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
										HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
										HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
										//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
										///Константин           
										Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
										//Текст1=Ответ.ПолучитьТелоКакСтроку();
										Если Ответ.КодСостояния<>200 Тогда
											СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
										КонецЕсли;
											
								КонецЕсли;

			
											Количество=Количество+1;
							//Состояние("Обрабатывается справочник продукции по остаткам "+Строка(СТР.Ссылка)+" "+Строка(КоличествО)+" из "+Строка(СправочникиОбновить.Количество()),Количество*100/СправочникиОбновить.Количество());
							Состояние("Обрабатывается справочник продукции по остаткам "+Строка(СТР.Ссылка)+" "+Строка(КоличествО)+" из "+Строка(СправочникиОбновить.Количество()));
	
		
	Попытка
			
				
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
 			что=Thumbprint_1.что;
	
								
				
			
			Если Thumbprint_1.НаименованиеСтенда="Альтернативный табак" 
				ИЛИ Thumbprint_1.НаименованиеСтенда="Табак" 
				Тогда
				  ПолучитьСправочникПоТабаку(Стр.ГУИД,что,Thumbprint_1,HTTPСервисЗапрос,ДокументПроверки,УжеОтправили,СРегистра,Стр.Ссылка,ВернутьДокументы);
				
				//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.ГУИД+"/body?pg="+что+"&limit=2147483647");
			Иначе
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.ГУИД+"/body?pg="+что+"&limit=2147483647");
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин           
			
			Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				Текст1=Ответ.ПолучитьТелоКакСтроку();
				
				
				Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					ГТИН="";
										Если Thumbprint_1.НаименованиеСтенда="Шины"  Тогда
						ПолучимГТИНПродукции_Шины(Текст1,Стр.Ссылка,ГТИН);
						
					Иначе
ПолучимГТИНПродукции(Текст1,Стр.Ссылка,ГТИН);
					Если ЗначениеЗаполнено(ГТИН) Тогда
						
						
						Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
	HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
	HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
//			ИНН=ВернутьИНН(Обр.Организации[0].Организация );
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?gtin="+ГТИН);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	Если Ответ.КодСостояния=200 Тогда
		//ЗагружаемШаблоныНасервере(Текст1,Обр.Пользователь);
		ЗагружаемГТИН(Текст1,,,,Thumbprint_1);
		
		
	КонецЕсли;
			Конецесли;		
					
			КонецЕсли;
			ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					Если УжеОтправили=Истина Тогда
						ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
					Иначе
						ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
						
						ОбновитьСтатусыДокументов(Команда,ВернутьДокументы,Истина,ДокументПроверки);			
						Возврат;
					КонецЕсли
					
				КонецЕсли;
				
				КонецЕсли;
			Исключение
				КонецПопытки;
				
				
		Конеццикла;

	КонецЕсли;
	
			   
	
КонецЕсли;
	//Если ОбработкаWEBНаСервере Тогда
	//	ЗагрузканаСервереОтправитьСписание_Шины(Thumbprint_1,"",Адрес,Порт,ПолучитьДокументы,Защищ);
		
		
	//Иначе
	
	
	   НадоЗагружатьОтвет=Ложь;
	
	   
	  Если Что_1=0 Тогда
	
		//Если УжеОтправили=Ложь Тогда	
		ВернутьДокументы_Отгрузка=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусыДокументовНаСервереОтгрузка(,Пользователь);
	//КонецЕсли;
	ОбработаноМассив=Новый Массив;
	Thumbprint_1=ПолучитьИзПользователя();	
	
										
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
							СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
									СерийныйНомер=СтруктураНастроек.СерийныйНомер;
							
								Если Не ЗначениеЗаполнено(СРегистра) ИЛИ Не ЗначениеЗаполнено(СерийныйНомер) Тогда
									СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
								Иначе
								   
										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
											Прокси=Новый ИнтернетПрокси;
											Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										Иначе
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										КонецЕсли;
										
										HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
										HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
										HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
										//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
										///Константин           
										Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
										//Текст1=Ответ.ПолучитьТелоКакСтроку();
										Если Ответ.КодСостояния<>200 Тогда
											СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
										КонецЕсли;
											
								КонецЕсли;

								
				ОбновитьОтгрузкуПоМассивуНакладных(Thumbprint_1,СРегистра,ВернутьДокументы_Отгрузка,ОбработаноМассив);								
				
				
				
				
				
				
	
	//Если УжеОтправили=Ложь Тогда	
		ВернутьДокументы_Списание=ОбновитьСтатусыДокументовНаСервереСписание(Пользователь);
	//КонецЕсли;
	ОбработаноМассив=Новый Массив;
	Thumbprint_1=ПолучитьИзПользователя();	
	Количество=0;
	Для Каждого Стр Из ВернутьДокументы_Списание Цикл
								Thumbprint_1=ОпределитьПоДокументуЗаново(Стр,Пользователь,Thumbprint_1);
								Если Не ЗначениеЗаполнено(Thumbprint_1) тогда
									Продолжить;
								КонецЕсли;
								СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
								Если Не ЗначениеЗаполнено(СРегистра) тогда
									Попытка
										СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
									исключение
										СРегистра=Неопределено;
									КонецПопытки;
								КонецЕсли;
	
									Количество=Количество+1;
							//Состояние("Обрабатывается списания "+Строка(СТР.Ссылка)+" "+Строка(КоличествО)+" из "+Строка(ВернутьДокументы_Списание.Количество()),Количество*100/ВернутьДокументы_Списание.Количество());
							Состояние("Обрабатывается списания "+Строка(СТР.Ссылка)+" "+Строка(КоличествО)+" из "+Строка(ВернутьДокументы_Списание.Количество()));
				
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
 			что=Thumbprint_1.что;
	
								
			
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body?pg="+что+"&limit=2147483647");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
			
			
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.status="CHECKED_NOT_OK" ИЛИ NNN.status="PARSE_ERROR"  
						ИЛИ NNN.status="PROCESSING_ERROR"
						Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
					ИначеЕсли 	NNN.status="WAIT_ACCEPTANCE" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"");
					ИначеЕсли 	NNN.status="CANCELLED" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
					ИначеЕсли 	NNN.status="CHECKED_OK" Тогда
						
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
					
					КонецЕсли;
				
				ОбработаноМассив.Добавить(Стр);
				a=1
		ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
				Если УжеОтправили=Истина Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
				Иначе
					ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
					Для Каждого с Из ОбработаноМассив Цикл
						ВернутьДокументы.Удалить(с)
					Конеццикла;
					
					ОбновитьСтатусыДокументов(Команда,ВернутьДокументы,Истина,ДокументПроверки)			;
					Возврат;
				КонецЕсли
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				    ОшибкаОтправки="";
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Попытка
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
				КонецПопытки;
			//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
		

		КонецЕсли;
		
		
	Конеццикла;
	Элементы.Списание.Обновить();	
	
	
	     КонецЕсли;
	
	
	
	
Если Что_1=0 ИЛИ Что_1=1 Тогда	
	
	
	
	
	//Если УжеОтправили=Ложь Тогда	
		ВернутьДокументы_Приемка=ОбновитьСтатусыДокументовНаСервереПРИХОДЫОТВЕТЫ(Пользователь);
	//КонецЕсли;
	ОбработаноМассив=Новый Массив;
	Thumbprint_1=ПолучитьИзПользователя();	
		СерийныйНомер=Неопределено;

	Количество=0;
	Для Каждого Стр Из ВернутьДокументы_Приемка Цикл
	           Попытка
								Thumbprint_1=ОпределитьПоДокументуЗаново(Стр,Пользователь,Thumbprint_1);
								Если Не ЗначениеЗаполнено(Thumbprint_1) тогда
									Продолжить;
								КонецЕсли;
								СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
								Если Не ЗначениеЗаполнено(СРегистра) тогда
									Попытка
										СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
									исключение
										СРегистра=Неопределено;
									КонецПопытки;
								КонецЕсли;
									Количество=Количество+1;
							//Состояние("Обрабатывается статусы приемки "+Строка(СТР.Ссылка)+" "+Строка(КоличествО)+" из "+Строка(ВернутьДокументы_Приемка.Количество()),Количество*100/ВернутьДокументы_Приемка.Количество());
							Состояние("Обрабатывается статусы приемки "+Строка(СТР.Ссылка)+" "+Строка(КоличествО)+" из "+Строка(ВернутьДокументы_Приемка.Количество()));
							
							
							
							
						Если Стр.УПД=Истина Тогда
						СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
							СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
									СерийныйНомер=СтруктураНастроек.СерийныйНомер;
							
								Если Не ЗначениеЗаполнено(СРегистра) ИЛИ НЕ ЗначениеЗаполнено(СерийныйНомер)  Тогда
									СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
								Иначе
								   
										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
											Прокси=Новый ИнтернетПрокси;
											Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										Иначе
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										КонецЕсли;
										
										HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
										HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
										HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
										//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
										///Константин           
										Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
										//Текст1=Ответ.ПолучитьТелоКакСтроку();
										Если Ответ.КодСостояния<>200 Тогда
											СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
										КонецЕсли;
											
								КонецЕсли;
							
							ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюОбУПДПриемка(Стр.Ссылка,ЗагрузатьНаименованиеПриПриемке,ЗаписыватьДанныеПриОтправкеЗаказа,Пользователь,HTTPСервисЗапрос,СерийныйНомер,СРегистра,Thumbprint_1) ;

							Продолжить;
						КОнецЕсли;
							
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
 			что=Thumbprint_1.что;
	
								
			
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body?pg="+Что+"&limit=2147483647");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				// ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
			
			
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.status="CHECKED_NOT_OK" ИЛИ NNN.status="PARSE_ERROR" 
												ИЛИ NNN.status="PROCESSING_ERROR"
						Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),NNN.downloadDesc);
					ИначеЕсли 	NNN.status="WAIT_ACCEPTANCE" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"");
					ИначеЕсли 	NNN.status="CANCELLED" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"");
					ИначеЕсли 	NNN.status="CHECKED_OK" Тогда
						МассивУп=Новый Массив;
	//					
	//					NNN_1=NNN.content;
	//					//ЧтениеJSON = Новый ЧтениеJSON;
	//					//ЧтениеJSON.УстановитьСтроку(NNN_1);
	//					NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(NNN_1);//ПрочитатьJSON(ЧтениеJSON);
	//					
	//					
	//					HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body+"&limit=2147483647"");
	//					HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	//					HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//					//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	//					///Константин           
	//					Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
	//					Текст1=Ответ.ПолучитьТелоКакСтроку();
	//					//ЧтениеJSON = Новый ЧтениеJSON;
	//					//ЧтениеJSON.УстановитьСтроку(Текст1);
	//					NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
	//					//МассивУп=Новый Массив;
	//
	
 			что=Thumbprint_1.что;
	
								
	
						HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+NNN.body.release_order_number+"/body?pg="+Что+"&limit=2147483647");
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
						//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
						///Константин           
						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
						Текст1=Ответ.ПолучитьТелоКакСтроку();
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						
						NNN=NNN.body;
						//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(NNN.content);
						
						ЗаполненаТабличнаяЧастьПриемки=Ложь;
						Принять_1=Ложь;
						
						дкоументФарм=ОбновитьСтатусДокумента_Приемка(NNN_1,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа,,Стр.Ссылка,NNN,,,ЗаполненаТабличнаяЧастьПриемки,Принять_1);	
																		Если Принять_1=Истина Тогда
							Попытка
								
								Форм=ПолучитьФорму("Документ.Приемка_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
								"Ключ",ДкоументФарм));
								Форм.Принять("");
								

							Исключение
							КонецПопытки;
						КонецЕсли;

						ОбновитьИнформациюОПродукции(Стр.Ссылка);
					Если ПриЗагрузкеПриемкиЗаполнятьПроверкаПоКМ=Истина И ЗаполненаТабличнаяЧастьПриемки<>Истина тОгда
						Форм=ОткрытьФорму("Документ.Приемка_ХамелеонЦРПТ.Форма.ФормаДокумента",
						Новый Структура("Ключ",дкоументФарм));
						Форм.ЗакачатьДетальнуюИнформацию("");
						Форм.Записать();
						Форм.Закрыть();
					КонецЕсли;
						
						//ОбновитьСтатусДокумента_Приемка_АКТ_1(Стр.Ссылка,NNN_1,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа,NNN);	
						
//						ОбновитьСтатусДокумента_Приемка_АКТ(Стр.Ссылка,NNN_1 ,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа);	
						//ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
					
					КонецЕсли;
				
				ОбработаноМассив.Добавить(Стр);
				a=1
		ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
				Если УжеОтправили=Истина Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
				Иначе
					ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
					Для Каждого с Из ОбработаноМассив Цикл
						ВернутьДокументы.Удалить(с)
					Конеццикла;
					
					ОбновитьСтатусыДокументов(Команда,ВернутьДокументы,Истина,ДокументПроверки);			
					Возврат;
				КонецЕсли
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				    ОшибкаОтправки="";
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Попытка
					ЧтениеJSON = Новый ЧтениеJSON;
					ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
				КонецПопытки;
			//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
		

		КонецЕсли;
	Исключение
	КонецПопытки;
		
	Конеццикла;
	Элементы.Приемкасписок .Обновить();	
	
	
	
	КонецЕсли;
	
	
	
	КонецЕсли;
	
					
						
						
						
						
						
						
	
	
	
	
	
	
	
	Если Что_1=0 ИЛИ Что_1=3 ТОгда
	
	
	
	ВернутьДокументы_3=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусыДокументовНаСервереСозданиеНовогоШкНаКороба_ХамелеонЦРПТСУЗ(ДокументПроверки,Пользователь);
	
	
	
	
							АдресРаздробить=Thumbprint_1.АдресСУЗ;
							Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
							Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
							Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
							Порт=Сред(Порт,Найти(Порт,":")+1);
							Попытка
								Порт=число(Порт);
							Исключение
								Порт=Неопределено;
							КонецПопытки;
							
								Если Найти(АдресРаздробить ,"https")=1 Тогда
									Защищ=Новый ЗащищенноеСоединениеopenSSL();
								Иначе
									Защищ=Неопределено;
								КонецЕсли;


Количество=0;	
	 	
	Для Каждого Стр Из ВернутьДокументы_3 Цикл
		
		
								Количество=Количество+1;
							//Состояние("Обрабатывается агрегации "+Строка(СТР.Ссылка)+" "+Строка(КоличествО)+" из "+Строка(ВернутьДокументы_3.Количество()),Количество*100/ВернутьДокументы_3.Количество());
							Состояние("Обрабатывается агрегации "+Строка(СТР.Ссылка)+" "+Строка(КоличествО)+" из "+Строка(ВернутьДокументы_3.Количество()));
		
			    Попытка
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;
			
			
			//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body+"&limit=2147483647"");
		HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/report/info?reportId="+Стр.order_id+"&omsId="+Thumbprint_1.ИдентификаторСУЗ);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
																				ТокенСУЗ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);

		HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
			
			
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.reportStatus="ERROR" 
						ИЛИ NNN.reportStatus="REJECTED" 
						Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),Неопределено);
					ИначеЕсли 	NNN.reportStatus="READY_TO_SEND" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета"),Неопределено);
					ИначеЕсли 	NNN.reportStatus="UNPROCESSED" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВПроцессе"),Неопределено);
					ИначеЕсли 	NNN.reportStatus="COMPLETE" 
						ИЛИ NNN.reportStatus="SENT" 
						Тогда
						
						
						
						ОбновитьСтатусДокумента_Списания(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
					КонецЕсли;
				
				ОбработаноМассив.Добавить(Стр);
				a=1
		ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
				
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				    ОшибкаОтправки="";
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Попытка
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
				КонецПопытки;
			//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
		      

		КонецЕсли;
		Исключение
		КонецПопытки;
		
	Конеццикла;

	
	
	
			//Если УжеОтправили=Ложь Тогда	
		ВернутьДокументы_Агр=ОбновитьСтатусыДокументовНаСервереСозданиеНовогоШкНаКороба_ХамелеонЦРПТ(ДокументПроверки,Пользователь);
	//КонецЕсли;
	ОбработаноМассив=Новый Массив;
	Thumbprint_1=ПолучитьИзПользователя();	
	Количество=0;
	Для Каждого Стр Из ВернутьДокументы_Агр Цикл
								Thumbprint_1=ОпределитьПоДокументуЗаново(Стр,Пользователь,Thumbprint_1);
								Если Не ЗначениеЗаполнено(Thumbprint_1) тогда
									Продолжить;
								КонецЕсли;
								СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
								Если Не ЗначениеЗаполнено(СРегистра) тогда
									Попытка
										СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
									исключение
										СРегистра=Неопределено;
									КонецПопытки;
								КонецЕсли;
	
										Количество=Количество+1;
							//Состояние("Обрабатывается агрегации по СУЗ "+Строка(СТР.Ссылка)+" "+Строка(КоличествО)+" из "+Строка(ВернутьДокументы_Агр.Количество()),Количество*100/ВернутьДокументы_Агр.Количество());
							Состояние("Обрабатывается агрегации по СУЗ "+Строка(СТР.Ссылка)+" "+Строка(КоличествО)+" из "+Строка(ВернутьДокументы_Агр.Количество()));
		
		
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
 			что=Thumbprint_1.что;
	
								
			
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body?pg="+Что+"&limit=1");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Попытка
			Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
		Исключение
			Продолжить;
		КонецПопытки;
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
			
			
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					
					//еррор="";
					//Если NNN.свойство("errors",еррор) Тогда
					//	ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
						
					Если NNN.status="CHECKED_NOT_OK" ИЛИ NNN.status="PARSE_ERROR"  
												ИЛИ NNN.status="PROCESSING_ERROR"

						Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
					ИначеЕсли 	NNN.status="WAIT_ACCEPTANCE" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"");
					ИначеЕсли 	NNN.status="CANCELLED" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
					ИначеЕсли 	NNN.status="CHECKED_OK" Тогда
						ОбновитьСтатусДокумента_Списания(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
					КонецЕсли;
				
				ОбработаноМассив.Добавить(Стр);
				a=1
		ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
				Если УжеОтправили=Истина Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
				Иначе
					ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
					Для Каждого с Из ОбработаноМассив Цикл
						ВернутьДокументы.Удалить(с)
					Конеццикла;
					
					ОбновитьСтатусыДокументов(Команда,ВернутьДокументы,Истина,ДокументПроверки)			;
					Возврат;
				КонецЕсли
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				    ОшибкаОтправки="";
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Попытка
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
				КонецПопытки;
			//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
		

		КонецЕсли;
		
		
	Конеццикла;
	
	
КонецЕсли;
КонецЕсли;
Если Что_1=0 Тогда
		ВернутьДокументы_Агр=ОбновитьСтатусыДокументовНаСервереПеремаркировка_ХамелеонЦРПТ(ДокументПроверки,Пользователь);
		//КонецЕсли;
		ОбработаноМассив=Новый Массив;
		Thumbprint_1=ПолучитьИзПользователя();	
		Количество=0;
		Для Каждого Стр Из ВернутьДокументы_Агр Цикл
									Thumbprint_1=ОпределитьПоДокументуЗаново(Стр,Пользователь,Thumbprint_1);
									Если Не ЗначениеЗаполнено(Thumbprint_1) тогда
										Продолжить;
									КонецЕсли;
									СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
									Если Не ЗначениеЗаполнено(СРегистра) тогда
										Попытка
											СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
										исключение
											СРегистра=Неопределено;
										КонецПопытки;
									КонецЕсли;
		
											Количество=Количество+1;
								//Состояние("Обрабатывается агрегации по СУЗ "+Строка(СТР.Ссылка)+" "+Строка(КоличествО)+" из "+Строка(ВернутьДокументы_Агр.Количество()),Количество*100/ВернутьДокументы_Агр.Количество());
								Состояние("Обрабатывается агрегации по СУЗ "+Строка(СТР.Ссылка)+" "+Строка(КоличествО)+" из "+Строка(ВернутьДокументы_Агр.Количество()));
			
			
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
 			что=Thumbprint_1.что;
	
								

				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body?pg="+Что+"&limit=2147483647");
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин           
			Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
					 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
					
				Конецесли;
				
				
				Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						Если NNN.status="CHECKED_NOT_OK" ИЛИ NNN.status="PARSE_ERROR" 
						ИЛИ NNN.status="PROCESSING_ERROR"
							Тогда
							ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
						ИначеЕсли 	NNN.status="WAIT_ACCEPTANCE" Тогда
							ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"");
						ИначеЕсли 	NNN.status="CANCELLED" Тогда
							ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
						ИначеЕсли 	NNN.status="CHECKED_OK" Тогда
							ОбновитьСтатусДокумента_Списания(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
						КонецЕсли;
					
					ОбработаноМассив.Добавить(Стр);
					a=1
			ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					Если УжеОтправили=Истина Тогда
						ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
					Иначе
						ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
						Для Каждого с Из ОбработаноМассив Цикл
							ВернутьДокументы.Удалить(с)
						Конеццикла;
						
						ОбновитьСтатусыДокументов(Команда,ВернутьДокументы,Истина,ДокументПроверки)			;
						Возврат;
					КонецЕсли
				ИначеЕсли Ответ.КодСостояния=301 Тогда
					
					    ОшибкаОтправки="";
				//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
						ОшибкаОтправки=NNN.error_message;
						
					Исключение
					КонецПопытки;
				//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
			

			КонецЕсли;
			
			
		Конеццикла;
	
	
КонецЕсли;	
	
	
	
	Элементы.Отгрузка_Список.Обновить();	
	   //КонецЕсли;
	   
	   
	 Если (НЕ ЗначениеЗаполнено(ДокументПроверки)) И АвтоматОтчетОбИспользовании(Пользователь) И Что_1=0 Тогда
		
		ДокументыЗаказы_1=ОбновитьСтатусыДокументовНаСервере_ВводВоборотОтчет();
		Для Каждого Стр_ЗаказКМ ИЗ ДокументыЗаказы_1 Цикл
			
			Форм=ПолучитьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
			"Ключ",Стр_ЗаказКМ.Ссылка));
			Форм.ОтправитьЗаявку(Команда);
		
			
			
			
		Конеццикла;
		Элементы.ВводВОборотТаблица.Обновить();
		
	Конецесли;
	
	   
КонецПроцедуры

&НаСервереБезКонтекста
Функция АвтоматОтчетОбИспользовании(Пользователь)
	Возврат Пользователь.СоздаватьИОтправлятьВводВОборотПослеЭмитирования;
Конецфункции



Процедура ОбработаноМассив_статусы(Стр_1)
	//Для Каждого Стр_1 Из 	ОбработаноМассив Цикл
		ДокумП=Стр_1.Докум.ПолучитьОбъект();
		//Если Стр_1.Статус="Rejected" Тогда
			ДокумП.Товары[Стр_1.Сч].Статус=Стр_1.Статус;
			//ДокумП.Товары[Стр_1.Сч].ОшибкаОтправки=Стр_1.Ошибка;
		Если Стр_1.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ Тогда
				ДокумП.Товары[Стр_1.Сч].СтатусСтроки="Отказ";
			ДокумП.Записать(РежимЗаписиДокумента.Запись);
			ИначеЕсли Стр_1.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан Тогда
				ДокумП.Товары[Стр_1.Сч].СтатусСтроки="Обработан";
			ДокумП.Записать(РежимЗаписиДокумента.Проведение);

			КонецЕсли;
			
	//Конеццикла;
	
КонецПроцедуры

Процедура ОбработаноМассив_Обработать(ОбработаноМассив)
	Для Каждого Стр_1 Из 	ОбработаноМассив Цикл
		ДокумП=Стр_1.Докум.ПолучитьОбъект();
		Если Стр_1.Статус="Rejected" Тогда
			ДокумП.Товары[Стр_1.Сч].Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ;
			ДокумП.Товары[Стр_1.Сч].ОшибкаОтправки=Стр_1.Ошибка;
			ДокумП.Товары[Стр_1.Сч].СтатусСтроки="Отказ";
			
			ДокумП.Записать(РежимЗаписиДокумента.Запись);
		ИначеЕсли Стр_1.статус="Accepted" Тогда
			ДокумП.Товары[Стр_1.Сч].Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан;
			ДокумП.Товары[Стр_1.Сч].ОшибкаОтправки=Стр_1.Ошибка;
			ДокумП.Товары[Стр_1.Сч].СтатусСтроки="Обработан";
			ДокумП.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЕсли;
	Конеццикла;
	
КонецПроцедуры



&НаСервереБезКонтекста
Функция ОбновитьСтатусыДокументовНаСервереСписание(Пользователь)
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Отгрузка_ХамелеонЦРПТ.Ссылка,
		|	Отгрузка_ХамелеонЦРПТ._Order_ID
		|ИЗ
		|	Документ.СписаниеКМНанесенныхНеНанесенныхНаТовар_ХамелеонЦРПТ КАК Отгрузка_ХамелеонЦРПТ
		|ГДЕ
		|	Отгрузка_ХамелеонЦРПТ.Статус В(&Статус)
		|	И ПОДСТРОКА(Отгрузка_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|	И Отгрузка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему = &СайтыВходаВСистему";
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	
	Запрос.УстановитьПараметр("СайтыВходаВСистему",	Пользователь.СайтыВходаВСистему); 
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	
Конецфункции

&НаСервереБезКонтекста
Функция ОбновитьСтатусыДокументовНаСервереПРИХОДЫОТВЕТЫ(Пользователь)
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Приемка_ХамелеонЦРПТ.Ссылка,
		|	Приемка_ХамелеонЦРПТ._Order_ID,
		|	Приемка_ХамелеонЦРПТ.УПД,
		|	Приемка_ХамелеонЦРПТ.ДокументОтгрузки
		|ИЗ
		|	Документ.Приемка_ХамелеонЦРПТ КАК Приемка_ХамелеонЦРПТ
		|ГДЕ
		|	(Приемка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему.Наименование <> ""Фармацевтика""
		|				И (Приемка_ХамелеонЦРПТ.Статус В (&Статус)
		|					И ПОДСТРОКА(Приемка_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|					И НЕ Приемка_ХамелеонЦРПТ.УПД)
		|			ИЛИ Приемка_ХамелеонЦРПТ.УПД
		|				И Приемка_ХамелеонЦРПТ.СтатусУПД <> &СтатусУПД)
		|	И Приемка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему = &СайтыВходаВСистему";
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан);
	
	
	Запрос.УстановитьПараметр("СайтыВходаВСистему",	Пользователь.СайтыВходаВСистему); 
	
	
	Запрос.УстановитьПараметр("СтатусУПД",	Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан); 
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Ссылка.ТипЭДО) И ВыборкаДетальныеЗаписи.Ссылка.ТипЭДО<>ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОЛайт") Тогда
			Продолжить;
		Конецесли;
		
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,НомерДокумента,Ссылка,УПД",ВыборкаДетальныеЗаписи._Order_ID,xmlString(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()),ВыборкаДетальныеЗаписи.Ссылка,ВыборкаДетальныеЗаписи.УПД));
		//Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	
Конецфункции


Процедура ОчиститьТокенСрегистра(ТТ)
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(ТТ,"")
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписыватьОтправкуИОтветыПриИзмененииНаСервере(ЗаписыватьДанныеПриОтправкеЗаказа)
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ЗаписыватьДанныеПриОтправкеЗаказа=ЗаписыватьДанныеПриОтправкеЗаказа;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписыватьОтправкуИОтветыПриИзменении(Элемент)
	ЗаписыватьОтправкуИОтветыПриИзмененииНаСервере(ЗаписыватьДанныеПриОтправкеЗаказа);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВЦРПТ(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Стр Из Элементы.Отгрузка_Список.ВыделенныеСтроки Цикл
		Форм=ПолучитьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
		"Ключ",Стр));
		Форм.ТекущийПользователь=Пользователь;
		Форм.ОтправитьВЦРПТ(Команда);
	КонецциклА;
	Элементы.Отгрузка_Список.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура Черновик(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Стр Из Элементы.ЗаказыТаблица.ВыделенныеСтроки Цикл
		Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
		"Ключ",Стр));
		Форм.ОтправитьВЦРПТ(Команда);
	КонецциклА;
	Элементы.ЗаказыТаблица.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТаймаутОжиданияОтСайтаПриИзмененииНаСервере(ТаймаутОжиданияОтСайта)
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ТаймаутОжиданияОтСайта=ТаймаутОжиданияОтСайта;
	РегДв.Записать(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаймаутОжиданияОтСайтаПриИзменении(Элемент)
	ТаймаутОжиданияОтСайтаПриИзмененииНаСервере(ТаймаутОжиданияОтСайта);
КонецПроцедуры

&НаСервере
Функция HELPЗаявокНаСервере()
	// Вставить содержимое обработчика.
	Возврат Обработки._Запуск_ХамелеонЦРПТ.ПолучитьМакет("HELPЗаказов");
КонецФункции

&НаКлиенте
Процедура HELPЗаявок(Команда)
	Табл=HELPЗаявокНаСервере();
	Табл.Показать();
КонецПроцедуры

&НаСервере
Функция HELPGSI1НаСервере()
	// Вставить содержимое обработчика.
	Возврат Обработки._Запуск_ХамелеонЦРПТ.ПолучитьМакет("HELPGSI1");
КонецФункции

&НаКлиенте
Процедура HELPGSI1(Команда)
	Табл=HELPGSI1НаСервере();
	Табл.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ПечатьPDF(Команда)
	// Вставить содержимое обработчика.

	Yjv=0;
	Для Каждого стр_1 Из Элементы.ЗаказыТаблица.ВыделенныеСтроки Цикл
		Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура("Ключ",
		Стр_1));
		Форм.ПечатьPDF(Команда,Yjv)
		
	Конеццикла;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКМ(Команда)
	// Вставить содержимое обработчика.
	Для Каждого стр_1 Из Элементы.ЗаказыТаблица.ВыделенныеСтроки Цикл
		Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура("Ключ",
		Стр_1));
		Форм.ПолучитьКМ(Команда)
		
	Конеццикла;
	
КонецПроцедуры

Функция ПодключитьсякЦРПТСервер(ПараметрыДлякилента)
		Организации.Очистить();
		Если НЕ ЗначениеЗаполнено(ПараметрыДлякилента.Организация) Тогда
			Возврат Ложь;
		КонецЕсли;
		Добав=Организации.Добавить();
		Добав.Пользователь=Пользователь;
		Добав.Организация=ПараметрыДлякилента.Организация;
		ИНН=ВернутьИНН(Добав.Организация);
				ТекстовФ=Новый ТекстовыйДокумент;
				Попытка
					Попытка
						Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
							Прокси=Новый ИнтернетПрокси;
							Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
							HTTP =  Новый HTTPСоединение("xn----7sbbamhfc3aanfgcf0aob1c4h3dua.xn--p1ai",,,,Прокси,ТаймаутОжиданияОтСайта,Новый ЗащищенноеСоединениеopenSSL());

						Иначе
							HTTP =  Новый HTTPСоединение("xn----7sbbamhfc3aanfgcf0aob1c4h3dua.xn--p1ai",,,,,ТаймаутОжиданияОтСайта,Новый ЗащищенноеСоединениеopenSSL());
						КонецЕсли;	
						HTTPЗапрос = Новый HTTPЗапрос("api/crtp.php");
						Отв=HTTP.Получить(HTTPЗапрос);
						Текст=Отв.ПолучитьТелоКакСтроку(КодировкаТекста.ANSI);
						ТекстовФ.УстановитьТекст(Текст);
					Исключение
					
						Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
							Прокси=Новый ИнтернетПрокси;
							Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
							HTTP =  Новый HTTPСоединение("ligin-tmb.nichost.ru",,,,Прокси,ТаймаутОжиданияОтСайта);

						Иначе
							HTTP =  Новый HTTPСоединение("ligin-tmb.nichost.ru",,,,,ТаймаутОжиданияОтСайта);
						КонецЕсли;	
						HTTPЗапрос = Новый HTTPЗапрос("api/crtp.php");
						Отв=HTTP.Получить(HTTPЗапрос);
						Текст=Отв.ПолучитьТелоКакСтроку(КодировкаТекста.ANSI);
						ТекстовФ.УстановитьТекст(Текст);
					КонецПопытки;
					//			ТекстовФ.НачатьЧтение(Новый ОписаниеОповещения("ПослеЧтения",ЭтаФорма,
					//Новый Структура("Текст,ИНН,ГлобалКод,НаимОрг,УдачноТожеВыводить,Добав",ТекстовФ,ИНН,ГлобалКод,НаимОрг,УдачноТожеВыводить,Добав)),ИмяВремен);
				Исключение
					Сообщить("На вашем компьютере нет доступа к ftp.ligin-tmb.nichost.ru");
					//ПослеЧтения(Новый Структура("Текст,ИНН,ГлобалКод,НаимОрг,УдачноТожеВыводить,Добав",ТекстовФ,ИНН,ГлобалКод,НаимОрг,УдачноТожеВыводить,Добав));
				КонецПопытки;
				
				МассивЛ=Новый СписокЗначений;
				Для Сч=1 По ТекстовФ.КоличествоСтрок() Цикл
					//МассивЛ.Добавить(СокрЛП(ТекстовФ.ПолучитьСтроку(Сч)));
					ДДД=СокрЛП(ТекстовФ.ПолучитьСтроку(Сч));
					Если    Найти(ДДД," ")>0 ТОгда
						МассивЛ.Добавить(Сред(ДДД,1,Найти(ДДД," ")-1),Сред(ДДД,Найти(ДДД," ")+1));
					Иначе
						МассивЛ.Добавить(ДДД,"");
						
					КонецЕсли;
				КонецЦикла;
				
				Лицензия="!НЕ ОБНАРУЖЕНА ЛИЦЕНЗИЯ. КУПИТЬ";
				Телефон="";
				Если ЗначениеЗаполнено(ИНН) Тогда
					РРР=МассивЛ.НайтиПоЗначению(ИНН+"+");
					Если РРР<>Неопределено Тогда
						 Лицензия="Расширенная лицензия";
						 Телефон=РРР.Представление;
					 Иначе
						РРР=МассивЛ.НайтиПоЗначению(ИНН);
						 Если МассивЛ.НайтиПоЗначению(ИНН)<>Неопределено Тогда
							 Лицензия="Лицензия активна";
							 Телефон=РРР.Представление;
							 
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если Лицензия="!НЕ ОБНАРУЖЕНА ЛИЦЕНЗИЯ. КУПИТЬ" Тогда
					//НачатьЗапускПриложения("https://алкогольные-декларации.рф/form_order/?id=33&inn="+ИНН);
					Попытка
						Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
							Прокси=Новый ИнтернетПрокси;
							Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
							HTTP =  Новый HTTPСоединение("xn----7sbbamhfc3aanfgcf0aob1c4h3dua.xn--p1ai",,,,Прокси,ТаймаутОжиданияОтСайта,Новый ЗащищенноеСоединениеopenSSL());

						Иначе
							HTTP =  Новый HTTPСоединение("xn----7sbbamhfc3aanfgcf0aob1c4h3dua.xn--p1ai",,,,,ТаймаутОжиданияОтСайта,Новый ЗащищенноеСоединениеopenSSL());
						КонецЕсли;	
						HTTPЗапрос = Новый HTTPЗапрос("form_order/?id=prodlenie-podpiski-na-ispolzovanie-hameleoncrpt-i-rassylka-obnovlenij-v-2021g.-dlya-1go-inn.-bez-dorabotok-i-konsultacij&inn="+ИНН);
						Отв=HTTP.Получить(HTTPЗапрос);
					Исключение
					КонецПопытки;
				КонецЕсли;
		Добав.Лицензия=Лицензия;
		Добав.ТелефонТехПоддержки=Телефон;
		Возврат Истина;
		//Если ОпределятьТокен<>Ложь Тогда
		//	ПоказатьПредупреждение(,"Успешное подключения к ЦРПТ");
		//КонецЕсли;
	
КонецФункции
&НаКлиенте
Процедура ПодключитьсяКЦРПТ(Команда,ОпределятьТокен=Истина)  Экспорт
	// Вставить содержимое обработчика.
	ПараметрыДлякилента=ПолучитьИзПользователя();	
	
	Если ПараметрыДлякилента.НаименованиеСтенда="Фармацевтика" Тогда
	Если ОпределятьТокен<>Ложь Тогда
					Ток=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(ПараметрыДлякилента);	
				КонецЕсли;
				Если ЗначениеЗаполнено(Ток) ИЛИ ОпределятьТокен=Ложь Тогда
					Если ОбработкаWEBНаСервере Тогда
						Если ПодключитьсякЦРПТСервер(ПараметрыДлякилента) Тогда
							Если ОпределятьТокен<>Ложь Тогда
								ПоказатьПредупреждение(,"Успешное подключения к ЦРПТ");
							КонецЕсли;
						КонецЕсли;

					Иначе
					Организации.Очистить();
					Если НЕ ЗначениеЗаполнено(ПараметрыДлякилента.Организация) Тогда
						Возврат;
					КонецЕсли;
					Добав=Организации.Добавить();
					Добав.Пользователь=Пользователь;
					Добав.Организация=ПараметрыДлякилента.Организация;
					ИНН=ВернутьИНН(Добав.Организация);
					ЛицензияОпределить(ИНН,ПараметрыДлякилента,Добав,ОпределятьТокен);
					КонецЕсли;	
				Иначе
					Если ОпределятьТокен<>Ложь Тогда
						ПоказатьПредупреждение(,"Не удалось подключиться к ЦРПТ");
					КонецЕсли;

					
				КонецЕсли;
				
				Если Организации.Количество()>0 Тогда
					ОтборПоОрганизации(Организации[0].Организация);
					
				КонецЕсли;
				
				
		Возврат;
	КонецЕсли;
	
	
	Если ОпределятьТокен<>Ложь Тогда
	//	Ток=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(ПараметрыДлякилента);	
		
		Thumbprint_1=ПараметрыДлякилента;
		
		Ток=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(Ток) тогда
			Ток=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Ток);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					Ток=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
				КонецЕсли;
					
		КонецЕсли;
		
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Ток) ИЛИ ОпределятьТокен=Ложь Тогда
		Если ОбработкаWEBНаСервере Тогда
			Если ПодключитьсякЦРПТСервер(ПараметрыДлякилента) Тогда
				Если ОпределятьТокен<>Ложь Тогда
					ПоказатьПредупреждение(,"Успешное подключения к ЦРПТ");
				КонецЕсли;
			КонецЕсли;

		Иначе
		Организации.Очистить();
		Если НЕ ЗначениеЗаполнено(ПараметрыДлякилента.Организация) Тогда
			Возврат;
		КонецЕсли;
		Добав=Организации.Добавить();
		Добав.Пользователь=Пользователь;
		Добав.Организация=ПараметрыДлякилента.Организация;
		ИНН=ВернутьИНН(Добав.Организация);
		ЛицензияОпределить(ИНН,ПараметрыДлякилента,Добав,ОпределятьТокен);
		КонецЕсли;	
	Иначе
		Если ОпределятьТокен<>Ложь Тогда
			ПоказатьПредупреждение(,"Не удалось подключиться к ЦРПТ");
		КонецЕсли;

		
	КонецЕсли;
	
	Если Организации.Количество()>0 Тогда
		ОтборПоОрганизации(Организации[0].Организация);
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура УдалимОтборы()
	Удалим=Новый Массив;
	Для Каждого Стр ИЗ Заказы.Отбор.Элементы Цикл
		Если Стр.Представление="ОТБОР_ПРЕДПРИЯТИЕ" Тогда
			Удалим.Добавить(Стр);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Стр Из Удалим Цикл
		Заказы.Отбор.Элементы.Удалить(Стр);
	КонецЦикла;
	
	
	Удалим.Очистить();
	Для Каждого Стр ИЗ ОплатаЗаКМ.Отбор.Элементы Цикл
		Если Стр.Представление="ОТБОР_ПРЕДПРИЯТИЕ" Тогда
			Удалим.Добавить(Стр);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Стр Из Удалим Цикл
		ОплатаЗаКМ.Отбор.Элементы.Удалить(Стр);
	КонецЦикла;
	
	Удалим.Очистить();
	Для Каждого Стр ИЗ ВводВОборот.Отбор.Элементы Цикл
		Если Стр.Представление="ОТБОР_ПРЕДПРИЯТИЕ" Тогда
			Удалим.Добавить(Стр);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Стр Из Удалим Цикл
		ВводВОборот.Отбор.Элементы.Удалить(Стр);
	КонецЦикла;
	
	Удалим.Очистить();
	Для Каждого Стр ИЗ Отгрузка.Отбор.Элементы Цикл
		Если Стр.Представление="ОТБОР_ПРЕДПРИЯТИЕ" Тогда
			Удалим.Добавить(Стр);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Стр Из Удалим Цикл
		Отгрузка.Отбор.Элементы.Удалить(Стр);
	КонецЦикла;
	
	Удалим.Очистить();
	Для Каждого Стр ИЗ Приемка.Отбор.Элементы Цикл
		Если Стр.Представление="ОТБОР_ПРЕДПРИЯТИЕ" Тогда
			Удалим.Добавить(Стр);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Стр Из Удалим Цикл
		Приемка.Отбор.Элементы.Удалить(Стр);
	КонецЦикла;
	
	Удалим.Очистить();
	Для Каждого Стр ИЗ Списание.Отбор.Элементы Цикл
		Если Стр.Представление="ОТБОР_ПРЕДПРИЯТИЕ" Тогда
			Удалим.Добавить(Стр);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Стр Из Удалим Цикл
		Списание.Отбор.Элементы.Удалить(Стр);
	КонецЦикла;
	
	
	Удалим.Очистить();
	Для Каждого Стр ИЗ ЖурналДокументов.Отбор.Элементы Цикл
		Если Стр.Представление="ОТБОР_ПРЕДПРИЯТИЕ" Тогда
			Удалим.Добавить(Стр);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Стр Из Удалим Цикл
		ЖурналДокументов.Отбор.Элементы.Удалить(Стр);
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ОтборПоОрганизации(Организация)
	
	УдалимОтборы();	
	
	
	
	Стр=ЖурналДокументов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Стр.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
	Стр.Использование=Истина;
	Стр.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Организация");
	Стр.ПравоеЗначение=Организация; 
	Стр.Представление="ОТБОР_ПРЕДПРИЯТИЕ";
	Стр.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
	
	Стр=Заказы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Стр.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
	Стр.Использование=Истина;
	Стр.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Организация");
	Стр.ПравоеЗначение=Организация; 
	Стр.Представление="ОТБОР_ПРЕДПРИЯТИЕ";
	Стр.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
	
	Стр=ОплатаЗаКМ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Стр.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
	Стр.Использование=Истина;
	Стр.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Организация");
	Стр.ПравоеЗначение=Организация; 
	Стр.Представление="ОТБОР_ПРЕДПРИЯТИЕ";
	Стр.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
	
	Стр=ВводВОборот.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Стр.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
	Стр.Использование=Истина;
	Стр.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Организация");
	Стр.ПравоеЗначение=Организация; 
	Стр.Представление="ОТБОР_ПРЕДПРИЯТИЕ";
	Стр.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
	
	Стр=Отгрузка.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Стр.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
	Стр.Использование=Истина;
	Стр.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Организация");
	Стр.ПравоеЗначение=Организация; 
	Стр.Представление="ОТБОР_ПРЕДПРИЯТИЕ";
	Стр.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
	Стр=Приемка.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Стр.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
	Стр.Использование=Истина;
	Стр.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Организация");
	Стр.ПравоеЗначение=Организация; 
	Стр.Представление="ОТБОР_ПРЕДПРИЯТИЕ";
	Стр.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
	Стр=Списание.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Стр.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
	Стр.Использование=Истина;
	Стр.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Организация");
	Стр.ПравоеЗначение=Организация; 
	Стр.Представление="ОТБОР_ПРЕДПРИЯТИЕ";
	Стр.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицензияОпределить(ИНН,ПараметрыДлякилента,Добав,ОпределятьТокен)
ТекстовФ=Новый ТекстовыйДокумент;
				Попытка
					Попытка
						Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
							Прокси=Новый ИнтернетПрокси;
							Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
							HTTP =  Новый HTTPСоединение("xn----7sbbamhfc3aanfgcf0aob1c4h3dua.xn--p1ai",,,,Прокси,ТаймаутОжиданияОтСайта,Новый ЗащищенноеСоединениеopenSSL());

						Иначе
							HTTP =  Новый HTTPСоединение("xn----7sbbamhfc3aanfgcf0aob1c4h3dua.xn--p1ai",,,,,ТаймаутОжиданияОтСайта,Новый ЗащищенноеСоединениеopenSSL());
						КонецЕсли;	
						HTTPЗапрос = Новый HTTPЗапрос("api/crtp.php");
						Отв=HTTP.Получить(HTTPЗапрос);
						Текст=Отв.ПолучитьТелоКакСтроку(КодировкаТекста.ANSI);
						ТекстовФ.УстановитьТекст(Текст);
					Исключение
					
						Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
							Прокси=Новый ИнтернетПрокси;
							Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
							HTTP =  Новый HTTPСоединение("ligin-tmb.nichost.ru",,,,Прокси,ТаймаутОжиданияОтСайта);

						Иначе
							HTTP =  Новый HTTPСоединение("ligin-tmb.nichost.ru",,,,,ТаймаутОжиданияОтСайта);
						КонецЕсли;	
						HTTPЗапрос = Новый HTTPЗапрос("api/crtp.php");
						Отв=HTTP.Получить(HTTPЗапрос);
						Текст=Отв.ПолучитьТелоКакСтроку(КодировкаТекста.ANSI);
						ТекстовФ.УстановитьТекст(Текст);
					КонецПопытки;
					//			ТекстовФ.НачатьЧтение(Новый ОписаниеОповещения("ПослеЧтения",ЭтаФорма,
					//Новый Структура("Текст,ИНН,ГлобалКод,НаимОрг,УдачноТожеВыводить,Добав",ТекстовФ,ИНН,ГлобалКод,НаимОрг,УдачноТожеВыводить,Добав)),ИмяВремен);
				Исключение
					Сообщить("На вашем компьютере нет доступа к ftp.ligin-tmb.nichost.ru");
					//ПослеЧтения(Новый Структура("Текст,ИНН,ГлобалКод,НаимОрг,УдачноТожеВыводить,Добав",ТекстовФ,ИНН,ГлобалКод,НаимОрг,УдачноТожеВыводить,Добав));
				КонецПопытки;
				
				МассивЛ=Новый СписокЗначений;
				Для Сч=1 По ТекстовФ.КоличествоСтрок() Цикл
					//МассивЛ.Добавить(СокрЛП(ТекстовФ.ПолучитьСтроку(Сч)));
					ДДД=СокрЛП(ТекстовФ.ПолучитьСтроку(Сч));
					Если    Найти(ДДД," ")>0 ТОгда
						МассивЛ.Добавить(Сред(ДДД,1,Найти(ДДД," ")-1),Сред(ДДД,Найти(ДДД," ")+1));
					Иначе
						МассивЛ.Добавить(ДДД,"");
						
					КонецЕсли;
				КонецЦикла;
				
				Лицензия="!НЕ ОБНАРУЖЕНА ЛИЦЕНЗИЯ. КУПИТЬ";
				Телефон="";
				Если ЗначениеЗаполнено(ИНН) Тогда
					РРР=МассивЛ.НайтиПоЗначению(ИНН+"+");
					Если РРР<>Неопределено Тогда
						 Лицензия="Расширенная лицензия";
						 Телефон=РРР.Представление;
					 Иначе
						РРР=МассивЛ.НайтиПоЗначению(ИНН);
						 Если МассивЛ.НайтиПоЗначению(ИНН)<>Неопределено Тогда
							 Лицензия="Лицензия активна";
							 Телефон=РРР.Представление;
							 
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если Лицензия="!НЕ ОБНАРУЖЕНА ЛИЦЕНЗИЯ. КУПИТЬ" Тогда
					//НачатьЗапускПриложения("https://алкогольные-декларации.рф/form_order/?id=33&inn="+ИНН);
					Попытка
						Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
							Прокси=Новый ИнтернетПрокси;
							Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
							HTTP =  Новый HTTPСоединение("xn----7sbbamhfc3aanfgcf0aob1c4h3dua.xn--p1ai",,,,Прокси,ТаймаутОжиданияОтСайта,Новый ЗащищенноеСоединениеopenSSL());

						Иначе
							HTTP =  Новый HTTPСоединение("xn----7sbbamhfc3aanfgcf0aob1c4h3dua.xn--p1ai",,,,,ТаймаутОжиданияОтСайта,Новый ЗащищенноеСоединениеopenSSL());
						КонецЕсли;	
						HTTPЗапрос = Новый HTTPЗапрос("form_order/?id=prodlenie-podpiski-na-ispolzovanie-hameleoncrpt-i-rassylka-obnovlenij-v-2021g.-dlya-1go-inn.-bez-dorabotok-i-konsultacij&inn="+ИНН);
						Отв=HTTP.Получить(HTTPЗапрос);
					Исключение
					КонецПопытки;
				КонецЕсли;
		Добав.Лицензия=Лицензия;
		Добав.ТелефонТехПоддержки=Телефон;
		Если ОпределятьТокен<>Ложь Тогда
			ПоказатьПредупреждение(,"Успешное подключения к ЦРПТ");
		КонецЕсли;
Конецпроцедуры

&НаКлиенте
Процедура ВводВОборотТаблицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Если Организации.Количество()=0 Тогда
		ПодключитьсяКЦРПТ(Элемент,ЛОжь);
	КонецЕсли;
	Если                         Организации.Количество()>0 
		
		Тогда
		Если  Копирование Тогда
			Если Элементы.ВводВОборотТаблица.ТекущиеДанные<>Неопределено Тогда
				Отказ = Истина;
				Парам = Новый Структура;
				Парам.Вставить("Организация", Организации[0].Организация);
				Парам.Вставить("Пользовтаель", Пользователь);
				Парам.Вставить("ЗначениеКопирования",Элементы.ВводВОборотТаблица.ТекущиеДанные.Ссылка);
				ОткрытьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.ФормаОбъекта", Парам,ЭтаФорма);
			КонецЕсли;
		Иначе
			Отказ = Истина;
			Парам = Новый Структура;
			Парам.Вставить("Организация", Организации[0].Организация);
			Парам.Вставить("Пользовтаель", Пользователь);
			ОткрытьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.ФормаОбъекта", Парам,ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭтикеток(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Для Каждого Стр Из Элементы.ЗаказыТаблица.ВыделенныеСтроки Цикл
		
		
		Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
		"Ключ",Стр));
		Форм.ПечатьЭтикеток(Команда);
	КонецциклА;
	Элементы.ЗаказыТаблица.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВнешниеОбработкиПриемка(Команда)
	// Вставить содержимое обработчика.
		ОткрытьФорму("Справочник.ВнешниеОбработки_ХамелеонЦРПТ.Форма.ФормаСписка",
		Новый структура("Тип",
			"ПриемкаОсновная"));
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТаймаутОжиданияПослеПлученияКМПриИзмененииНаСервере(ТаймаутОжиданияПослеПлученияКМ)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ТаймаутОжиданияПослеПлученияКМ=ТаймаутОжиданияПослеПлученияКМ;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТаймаутОжиданияПослеПлученияКМПриИзменении(Элемент)
	ТаймаутОжиданияПослеПлученияКМПриИзмененииНаСервере(ТаймаутОжиданияПослеПлученияКМ);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВЦРПТВводВОборот(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Стр Из Элементы.ВводВОборотТаблица.ВыделенныеСтроки Цикл
		Форм=ПолучитьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
		"Ключ",Стр));
		Форм.ОтправитьЗаявку(Команда);
	КонецциклА;
	Элементы.ВводВОборотТаблица.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Отгрузка_СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
 		Если  Копирование Тогда
			Отказ = Истина;
			Парам = Новый Структура;
			Парам.Вставить("Организация", вЕРНУТЬоР());
			Парам.Вставить("Пользовтаель", Пользователь);
			Парам.Вставить("ЗначениеКопирования",Элемент.ТекущиеДанные.Ссылка);
			ОткрытьФорму("Документ.Отгрузка_ХамелеонЦРПТ.ФормаОбъекта", Парам,ЭтаФорма);
		Иначе
			Отказ = Истина;
			Парам = Новый Структура;
			Парам.Вставить("Организация",  вЕРНУТЬоР());
			Парам.Вставить("Пользовтаель", Пользователь);
			ОткрытьФорму("Документ.Отгрузка_ХамелеонЦРПТ.ФормаОбъекта", Парам,ЭтаФорма);
		КонецЕсли;
	
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьНайтиКонтрагента_Приемка(ЗЗ)
	СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",
	ЗЗ.trade_sender_inn);
	Если ЗначениеЗАполнено(СпрК) тогда
		Возврат СпрК.Ссылка;
		//СпрК=СпрК.ПолучитьОбъект();
	Иначе
		СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрК.Наименование=ЗЗ.trade_sender_inn;
	КонецЕсли;
	СпрК.ИНН=ЗЗ.trade_sender_inn;
	СпрК.Записать();
	Возврат СпрК.Ссылка
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьНайтиКонтрагента_Приемка_Старый(ЗЗ)
	СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",
	ЗЗ.sender_inn);
	Если ЗначениеЗАполнено(СпрК) тогда
		//Возврат СпрК.Ссылка;
		СпрК=СпрК.ПолучитьОбъект();
	Иначе
		СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
	КонецЕсли;
	ЗЗ.Свойство("sender",СпрК.Наименование);
	
	СпрК.ИНН=ЗЗ.sender_inn;
	Если Не ЗначениеЗАполнено(СпрК.Наименование) Тогда
		СпрК.Наименование=СпрК.ИНН;
	КонецЕсли;
	СпрК.Записать();
	Возврат СпрК.Ссылка
КонецФункции


&НаСервереБезКонтекста
Функция СоздатьНайтиGTIN(Стр)
	
	//Контр=Справочники.ПроизводителиИмпортеры_ХамелеонЦРПТ.
	uit_code="";
	Если Стр.Свойство("uit_code",uit_code) И ЗначениеЗаполнено(uit_code) Тогда
		
		Если Сред(Стр.uit_code,1,2)="01" Тогда
			ГТИН=Число(Сред(Стр.uit_code,3,14));
		Иначе
			ГТИН=Число(Сред(Стр.uit_code,1,14));
		КонецЕсли;
		Спр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(ГТИН));
		Если Спр<>Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка() Тогда
			Спр_1=Спр.ПолучитьОбъект();
		Иначе
			Спр_1=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
		КонецЕсли;
		Спр_1.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
		
		product_description="";
		Если Стр.Свойство("product_description",product_description) Тогда
		Если product_description<>спр_1.НаименованиеТовара 
			ИЛИ ГТИН<>Спр_1.gtin 
			Тогда
			Спр_1.GTIN=ГТИН;
			Спр_1.Наименование=Стр.product_description;
			Спр_1.НаименованиеТовара=Стр.product_description;
			Спр_1.Записать();;
		КонецЕсли;
	Иначе
		Если ГТИН<>Спр_1.gtin 
			Тогда
			Спр_1.GTIN=ГТИН;
			Спр_1.Наименование=ГТИН;
			Спр_1.НаименованиеТовара=ГТИН;
			Спр_1.Записать();;
		КонецЕсли;
		
		КонецЕсли;
	Возврат Спр_1.Ссылка
Иначе
	Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Процедура РекурсияУпаковки_Приход(Стр_children_1,НСтр,Добб,КоличествоКМ)
	children="";
	
						//ДобавК=Добб.Короба.Добавить();
						//ДобавК.НомерКороба=Стр_З.uitu_code;
						//ШтрихКод="";
						//Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
						//	ШтрихКод=Стр_children.uit_code;
						//	НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
						//Иначе
						//	РекурсияУпаковки_Приход(Стр_children,НСтр);
						//КонецЕсли;
						//ДобавК.ШтрихКод=ШтрихКод;
	
	еСЛИ                        Стр_children_1.Свойство("children",children) Тогда
		Для Каждого Стр_children Из children Цикл
			ШтрихКод="";
			Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
				НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
				КоличествоКМ=КоличествоКМ+1;
				ШтрихКод=Стр_children.uit_code;
										Если Добб.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Стр_children_1.uitu_code,ШтрихКод)).Количество()=0 Тогда
			ДобавК=Добб.Короба.Добавить();
			ДобавК.НомерКороба=Стр_children_1.uitu_code;
			ДобавК.ШтрихКод=ШтрихКод;
				Конецесли;				
			Иначе
										Если Добб.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Стр_children_1.uitu_code,ШтрихКод)).Количество()=0 Тогда
			ДобавК=Добб.Короба.Добавить();
			ДобавК.НомерКороба=Стр_children_1.uitu_code;
			ДобавК.ШтрихКод=ШтрихКод;
				Конецесли;				
				РекурсияУпаковки_Приход(Стр_children,НСтр,Добб,КоличествоКМ);
			КонецЕсли;
						
		КонецЦикла;
	Иначе
		КоличествоКМ=КоличествоКМ+1;
		НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
	КонецЕсли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция РекурсияУпаковки_Приход_Продукция(Стр_children_1)
children="";
	
					
	еСЛИ                        Стр_children_1.Свойство("children",children) Тогда
		Для Каждого Стр_children Из children Цикл
			ШтрихКод="";
			Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
				ШтрихКод=Стр_children.uit_code;
				Продукция=СоздатьНайтиGTIN(Стр_children);
				Если ЗначениеЗАполнено(Продукция) тогда
					Возврат Продукция;
				КонецЕсли;
			Иначе
				Продукция=РекурсияУпаковки_Приход_Продукция(Стр_children);
				Если ЗначениеЗАполнено(Продукция) тогда
					Возврат Продукция;
				КонецЕсли;
			КонецЕсли;
						
		КонецЦикла;
	КонецЕсли;
	
	
	
Конецфункции

&НаСервереБезКонтекста
Функция СоздатьНайтиGTIN_ГТИН(Стр)
	
	//Контр=Справочники.ПроизводителиИмпортеры_ХамелеонЦРПТ.
		
		Если Сред(Стр,1,2)="01" Тогда
			ГТИН=Число(Сред(Стр,3,14));
		Иначе
			ГТИН=Число(Сред(Стр,1,14));
		КонецЕсли;
		Спр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(ГТИН));
		Если Спр<>Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка() Тогда
			Спр_1=Спр.ПолучитьОбъект();
		Иначе
			Спр_1=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
			Спр_1.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
		
			Спр_1.GTIN=ГТИН;
			Спр_1.Наименование=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(ГТИН,14,"0");
			Спр_1.НаименованиеТовара=Спр_1.Наименование;
			Спр_1.Записать();;
		КонецЕсли;
		//КонецЕсли;
		Возврат Спр_1.Ссылка
КонецФункции





&НаСервереБезКонтекста
Функция ОбновитьСтатусДокумента_Приемка(Заказ,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа,ОбновлятьВсе=Ложь,Документ_1=Неопределено,NNN_2=Неопределено,МассивПродукций=Неопределено,ЗагрузатьНаименованиеПриПриемке=Ложь,ЗаполненаТабличнаяЧастьПриемки,Принять_1=Ложь)
	
	Докум_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусДокумента_Приемка(Заказ,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа,ОбновлятьВсе,Документ_1,NNN_2,МассивПродукций,ЗагрузатьНаименованиеПриПриемке,ЗаполненаТабличнаяЧастьПриемки);
	Если ЗначениеЗАполненО(Докум_1) ТОгда
		Принять_1=Докум_1.Поставщик.ПринятьПриемкуВЦРПТПослеЗагрузки;
	КонецЕсли;
	Возврат Докум_1;
Конецфункции



&НаСервереБезКонтекста
Функция СоздатьНайтиПоGTIN(Стр)
	
	//Контр=Справочники.ПроизводителиИмпортеры_ХамелеонЦРПТ.
	
	
	Спр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Стр.gtin));
	Если Спр<>Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка() Тогда
		Спр_1=Спр.ПолучитьОбъект();
	Иначе
		Спр_1=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
	КонецЕсли;
		Спр_1.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
	
	ТНВЭД="";
	Стр.Свойство("tnVedEaesGroup",ТНВЭД);
	
	Если Стр.productName<>спр_1.НаименованиеТовара 
		ИЛИ Стр.gtin<>Спр_1.gtin 
		ИЛИ ТНВЭД<>Спр_1.КодТНВЭД
		Тогда
		Спр_1.GTIN=стр.gtin;
		Спр_1.КодТНВЭД=ТНВЭД;
		Спр_1.Наименование=Стр.productName;
		Спр_1.НаименованиеТовара=Стр.productName;
		Спр_1.Записать();;
	КонецЕсли;
	Возврат Спр_1.Ссылка
КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьИнфуПоДокументу(ДокумПриемки)
	
КонецПроцедуры

Функция ЗагрузканаСерверИзЦРПТ(Thumbprint_1,СРегистра,УжеОтправили)
	Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагрузкаНаСервереИзЦРПТПриемка(Пользователь);
//Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
//				Прокси=Новый ИнтернетПрокси;
//				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
//			
//				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
//			Иначе
//				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
//			КонецЕсли;
//			
//			
// 			что=Thumbprint_1.что;
//		
//		
//	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/listV2?inputFormat=true&documentType=LP_SHIP_GOODS_CSV&documentType=LP_SHIP_GOODS_XML&documentType=LP_SHIP_GOODS&limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=docDate&pageDir=NEXT&pg="+Что);
//	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
//	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
//	//Тело="documentType=LP_ACCEPT_GOODS_XML";
////	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
//	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
//	///Константин           
//	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
//	Текст1=Ответ.ПолучитьТелоКакСтроку();
//							
//	
//	
//	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
//				//ЧтениеJSON = Новый ЧтениеJSON;
//			Страница=0;
//			Тотал=1;
//			Пока Страница*СколькоНаСтранице<=Тотал Цикл
// 					страница=Страница+1;
//				//ЧтениеJSON.УстановитьСтроку(Текст1);
//				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
//				Тотал=NNN.total;
//				did="";
//				docDate="";
//				Для Каждого Стр Из  NNN.results Цикл
//					did=Стр.number;
//					docDate=Стр.docDate;
//					Если Стр.input=true 
//						И Найти(Стр.type,"LP_SHIP_GOODS")=1
//						Тогда
//						
//						
// 			что=Thumbprint_1.что;
//	
//								

//						HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.number+"/body?pg="+что+"&limit=2147483647");
//						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
//						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
//						//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
//						///Константин           
//						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
//						Текст1=Ответ.ПолучитьТелоКакСтроку();
//						//ЧтениеJSON = Новый ЧтениеJSON;
//						//ЧтениеJSON.УстановитьСтроку(Текст1);
//						NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
//						МассивУп=Новый Массив;
//						
//						ЗаполненаТабличнаяЧастьПриемки=Ложь;
//						ДокумПриемки=ОбновитьСтатусДокумента_Приемка(NNN_1,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа,,,,,,ЗаполненаТабличнаяЧастьПриемки);	
//					КонецЕсли;
//				Конеццикла;
//				
//				Если Страница*СколькоНаСтранице>Тотал Тогда
//					Прервать;
//				КонецЕсли;
//				
// 			что=Thumbprint_1.что;
//	
//				
//				 HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/listV2?inputFormat=true&documentType=LP_SHIP_GOODS_CSV&documentType=LP_SHIP_GOODS_XML&documentType=LP_SHIP_GOODS&limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=docDate&did="+did+"&orderedColumnValue="+docDate+"&pageDir=NEXT&pg="+Что);
//				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
//		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
//		//Тело="documentType=LP_ACCEPT_GOODS_XML";
////	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
//	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
//	///Константин           
//	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
//	Текст1=Ответ.ПолучитьТелоКакСтроку();  
//	Если Ответ.КодСостояния<>202 И Ответ.КодСостояния<>200  Тогда
//			Если УжеОтправили=Истина Тогда
//				Сообщить("Не удалось загрузить приходы с ЦРПТ, отсутствует доступ.");
//				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
//				Возврат Истина;
//			Иначе
//				Возврат Ложь;
//			КонецЕсли;
//	КонецЕсли;
//	Конеццикла;	
//				

//				
//				
//	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
//			Если УжеОтправили=Истина Тогда
//				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
//			Иначе
//				Возврат Ложь;
//			КонецЕсли
//	Иначе
//					Попытка
//						//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);ЧтениеJSON = Новый ЧтениеJSON;
//						//ЧтениеJSON.УстановитьСтроку(Текст1);
//						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
//						попытка
//								Если NNN.error="access_denied" Тогда
//									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
//								КонецЕсли;
//							
//						Исключение
//							Попытка
//								Если NNN.error="access_denied" Тогда
//									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
//								КонецЕсли;
//							Исключение
//							КонецПопытки;
//							
//						КонецПопытки;
//						
//					Исключение
//					КонецПопытки;
//		//	Иначе
//		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
//		//		ОтправитьЗаявку(Команда,Истина)			
//		//	КонецЕсли
//	КонецЕсли;
//	
	Возврат Истина
КонецФункции


&НаКлиенте
Процедура ЛицензияОпределить_Просто(ПараметрыДлякилента) Экспорт
ТекстовФ=Новый ТекстовыйДокумент;
ИНН=ПараметрыДлякилента.ИНН;
				Попытка
					Попытка
						Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
							Прокси=Новый ИнтернетПрокси;
							Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
							HTTP =  Новый HTTPСоединение("xn----7sbbamhfc3aanfgcf0aob1c4h3dua.xn--p1ai",,,,Прокси,ТаймаутОжиданияОтСайта,Новый ЗащищенноеСоединениеopenSSL());

						Иначе
							HTTP =  Новый HTTPСоединение("xn----7sbbamhfc3aanfgcf0aob1c4h3dua.xn--p1ai",,,,,ТаймаутОжиданияОтСайта,Новый ЗащищенноеСоединениеopenSSL());
						КонецЕсли;	
						HTTPЗапрос = Новый HTTPЗапрос("api/crtp.php");
						Отв=HTTP.Получить(HTTPЗапрос);
						Текст=Отв.ПолучитьТелоКакСтроку(КодировкаТекста.ANSI);
						ТекстовФ.УстановитьТекст(Текст);
					Исключение
					
						Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
							Прокси=Новый ИнтернетПрокси;
							Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
							HTTP =  Новый HTTPСоединение("ligin-tmb.nichost.ru",,,,Прокси,ТаймаутОжиданияОтСайта);

						Иначе
							HTTP =  Новый HTTPСоединение("ligin-tmb.nichost.ru",,,,,ТаймаутОжиданияОтСайта);
						КонецЕсли;	
						HTTPЗапрос = Новый HTTPЗапрос("api/crtp.php");
						Отв=HTTP.Получить(HTTPЗапрос);
						Текст=Отв.ПолучитьТелоКакСтроку(КодировкаТекста.ANSI);
						ТекстовФ.УстановитьТекст(Текст);
					КонецПопытки;
					//			ТекстовФ.НачатьЧтение(Новый ОписаниеОповещения("ПослеЧтения",ЭтаФорма,
					//Новый Структура("Текст,ИНН,ГлобалКод,НаимОрг,УдачноТожеВыводить,Добав",ТекстовФ,ИНН,ГлобалКод,НаимОрг,УдачноТожеВыводить,Добав)),ИмяВремен);
				Исключение
				//Сообщить("На вашем компьютере нет доступа к ftp.ligin-tmb.nichost.ru");
					//ПослеЧтения(Новый Структура("Текст,ИНН,ГлобалКод,НаимОрг,УдачноТожеВыводить,Добав",ТекстовФ,ИНН,ГлобалКод,НаимОрг,УдачноТожеВыводить,Добав));
				КонецПопытки;
				
				МассивЛ=Новый СписокЗначений;
				Для Сч=1 По ТекстовФ.КоличествоСтрок() Цикл
					//МассивЛ.Добавить(СокрЛП(ТекстовФ.ПолучитьСтроку(Сч)));
					ДДД=СокрЛП(ТекстовФ.ПолучитьСтроку(Сч));
					Если    Найти(ДДД," ")>0 ТОгда
						МассивЛ.Добавить(Сред(ДДД,1,Найти(ДДД," ")-1),Сред(ДДД,Найти(ДДД," ")+1));
					Иначе
						МассивЛ.Добавить(ДДД,"");
						
					КонецЕсли;
				КонецЦикла;
				
				Лицензия="!НЕ ОБНАРУЖЕНА ЛИЦЕНЗИЯ. КУПИТЬ";
				Телефон="";
				Если ЗначениеЗаполнено(ИНН) Тогда
					РРР=МассивЛ.НайтиПоЗначению(ИНН+"+");
					Если РРР<>Неопределено Тогда
						 Лицензия="Расширенная лицензия";
						 Телефон=РРР.Представление;
					 Иначе
						РРР=МассивЛ.НайтиПоЗначению(ИНН);
						 Если МассивЛ.НайтиПоЗначению(ИНН)<>Неопределено Тогда
							 Лицензия="Лицензия активна";
							 Телефон=РРР.Представление;
							 
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если Лицензия="!НЕ ОБНАРУЖЕНА ЛИЦЕНЗИЯ. КУПИТЬ" Тогда
					//НачатьЗапускПриложения("https://алкогольные-декларации.рф/form_order/?id=33&inn="+ИНН);
					Попытка
						Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
							Прокси=Новый ИнтернетПрокси;
							Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
							HTTP =  Новый HTTPСоединение("xn----7sbbamhfc3aanfgcf0aob1c4h3dua.xn--p1ai",,,,Прокси,ТаймаутОжиданияОтСайта,Новый ЗащищенноеСоединениеopenSSL());

						Иначе
							HTTP =  Новый HTTPСоединение("xn----7sbbamhfc3aanfgcf0aob1c4h3dua.xn--p1ai",,,,,ТаймаутОжиданияОтСайта,Новый ЗащищенноеСоединениеopenSSL());
						КонецЕсли;	
						HTTPЗапрос = Новый HTTPЗапрос("form_order/?id=prodlenie-podpiski-na-ispolzovanie-hameleoncrpt-i-rassylka-obnovlenij-v-2021g.-dlya-1go-inn.-bez-dorabotok-i-konsultacij&inn="+ИНН);
						Отв=HTTP.Получить(HTTPЗапрос);
					Исключение
					КонецПопытки;
				КонецЕсли;
Конецпроцедуры

Функция   ДобавитьПриемку(Текст1,Стр,МассивПроудцкий,МассивКонтрагентов,ЗаполненаТабличнаяЧастьПриемки,ДатаДокумента);
ДатаВыдачи=Стр.date;
ДатаДокумента=Дата(Сред(ДатаВыдачи,1,4),Сред(ДатаВыдачи,6,2),Сред(ДатаВыдачи,9,2),Сред(ДатаВыдачи,12,2),Сред(ДатаВыдачи,15,2),Сред(ДатаВыдачи,18,2));									 												          Чтен=Новый ЧтениеXML;
										    Чтен.УстановитьСтроку(Текст1);
	ОтветСтруктура = ФабрикаXDTO.ПрочитатьXML(Чтен).move_order_notification;	
	
	ИдДокумента=Стр.document_id;
	
	ДокументПриемки=Документы.Приемка_ХамелеонЦРПТ.НайтиПоРеквизиту("ДокументОтгрузки",ИдДокумента);
	Если ЗначениеЗаполнено(ДокументПриемки) тогда
		ДокументПриемки=ДокументПриемки.ПолучитьОбъект();
		Если ДокументПриемки.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан 
			ИЛИ ДокументПриемки.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен 
			
		ИЛИ ДокументПриемки.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик")
		ИЛИ ДокументПриемки.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ЧастичноПринят")
		ИЛИ ДокументПриемки.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ЧерновикОбработан")
			
			Тогда
			ЗаполненаТабличнаяЧастьПриемки=ДокументПриемки.ПроверкаПоНомерамКМ.Количество()>0;
			Возврат ДокументПриемки.Ссылка
		КонецЕсли;
	Иначе
		
		ДокументПриемки=Документы.Приемка_ХамелеонЦРПТ.СоздатьДокумент();
	КонецЕслИ;
	
	ДокументПриемки.ДокументОтгрузки=ИдДокумента;
ДокументПриемки.Организация=Пользователь.Организация;                
ДокументПриемки.ТекущийПользователь=Пользователь;
ДокументПриемки.Дата=Дата(Сред(ДатаВыдачи,1,4),Сред(ДатаВыдачи,6,2),Сред(ДатаВыдачи,9,2),Сред(ДатаВыдачи,12,2),Сред(ДатаВыдачи,15,2),Сред(ДатаВыдачи,18,2));

ДатаВыдачи=ОтветСтруктура.doc_date;
ДокументПриемки.ДатаВходящий=	Дата(Сред(ДатаВыдачи,7,4),Сред(ДатаВыдачи,4,2),Сред(ДатаВыдачи,1,2));
ДокументПриемки.НомерВходящий=ОтветСтруктура.doc_num;
Если ОтветСтруктура.contract_type="1"	Тогда
	ДокументПриемки.ТипДокументаЛекарства=Перечисления.ВидТоварооборота_ХамелеонЦРПТ.SELLING
КонецЕсли;
Если ОтветСтруктура.Свойства().Получить("contract_num")<>Неопределено Тогда
	ДокументПриемки.НомерКонтракта=ОтветСтруктура.contract_num
КонецЕсли;
ДокументПриемки.ОрганизацияОтправитьль_Лекарства=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("subjectIdФармацевтика",Стр.sender);
Если Не ЗначениеЗаполнено(ДокументПриемки.ОрганизацияОтправитьль_Лекарства) Тогда
спрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
СпрК.subjectIdФармацевтика=Стр.sender;
СпрК.subjectId_sys_Фармацевтика=Стр.sender_sys_id;
СпрК.Наименование=СпрК.subjectIdФармацевтика;
СпрК.Записать();
ДокументПриемки.ОрганизацияОтправитьль_Лекарства=СпрК.Ссылка;
КонецЕсли;
Если Не ЗначениеЗАполнено(ДокументПриемки.ОрганизацияОтправитьль_Лекарства.ИНН) Тогда
	МассивКонтрагентов.Добавить(Стр.sender_sys_id);
КонецЕсли;	
ДокументПриемки.Поставщик=ДокументПриемки.ОрганизацияОтправитьль_Лекарства;

ДокументПриемки.ОрганизацияПолучатель_Лекарства=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("subjectIdФармацевтика",Стр.receiver);
Если Не ЗначениеЗаполнено(ДокументПриемки.ОрганизацияПолучатель_Лекарства) Тогда
спрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
СпрК.subjectIdФармацевтика=Стр.receiver;
СпрК.subjectId_sys_Фармацевтика=Стр.request_id;
СпрК.Наименование=СпрК.subjectIdФармацевтика;
СпрК.Записать();
ДокументПриемки.ОрганизацияПолучатель_Лекарства=СпрК.Ссылка;
КонецЕсли;
Если Не ЗначениеЗАполнено(ДокументПриемки.ОрганизацияПолучатель_Лекарства.ИНН) Тогда
	МассивКонтрагентов.Добавить(Стр.request_id);
КонецЕсли;	



ДокументПриемки.Товары.Очистить();
ДокументПриемки.СерийныеНомера.Очистить();
//ДокументПриемки.Короба.Очистить();
Если ТипЗнч(ОтветСтруктура.order_details.union)=Тип("ОбъектXDTO") тогда
	
	   Стр_1=ОтветСтруктура.order_details.union;
	
		Добав=Документприемки.СерийныеНомера.Добавить();
		Если Стр_1.Свойства().Получить("sgtin")=Неопределено Тогда
			
			//Сообщить(Текст1);
			
			// Сообщить("Есть упаковки");
			//Сообщить(Стр_1.sscc_detail.sscc);
			Добав.cis=Стр_1.sscc_detail.sscc;
			
			detail=Неопределено;
			если  Стр_1.sscc_detail.Свойства().Получить("detail")<>Неопределено Тогда
				  detail=Стр_1.sscc_detail.detail;
			////Для Каждого Стр_222 Из     detail Цикл
				Добав.GTIN=detail.gtin;
				Добав.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(Добав.GTIN));
				Если не ЗначениеЗаполнено(Добав.НаименованиеТовара) Тогда
					СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
					СпрПр.GTIN=число(Сред(Добав.cis,1,14));
					СпрПр.Наименование=xmlString(СпрПр.GTIN);
					СпрПр.НаименованиеТовара=xmlString(СпрПр.GTIN);
					СпрПр.Записать();
					Добав.НаименованиеТовара=СпрПр.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			
			//Добав.GTIN=Сред(Добав.cis,1,14);
			//Добав.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(Добав.GTIN));
			//Если не ЗначениеЗаполнено(Добав.НаименованиеТовара) Тогда
			//	СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
			//	СпрПр.GTIN=число(Сред(Добав.cis,1,14));
			//	СпрПр.Наименование=xmlString(СпрПр.GTIN);
			//	СпрПр.Записать();
			//	Добав.НаименованиеТовара=СпрПр.Ссылка;
			//КонецЕсли;
							
			//Конеццикла;
			//КонецЕсли;
			Добав.Цена=Стр_1.cost;
			Нстр=ДокументПриемки.Товары.НайтиСтроки(Новый Структура("GTIN,Цена",Добав.НаименованиеТовара,Добав.Цена));
			Если НСтр.Количество()=0 Тогда
				НСтр=ДокументПриемки.Товары.Добавить();
				НСтр.GTIN=Добав.НаименованиеТовара;
				Попытка
					Если Число(НСтр.GTIN.GTIN)=Число(НСтр.GTIN.Наименование) тогда
						МассивПроудцкий.Добавить(Добав.GTIN);
						
					КонецЕсли;
				Исключение
				КонецПопытки;
			Иначе
				НСтр=Нстр[0]
			КонецЕсли;
			Добав.НДС=Стр_1.vat_value;
			НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
			НСтр.Сумма=НСтр.Сумма+Стр_1.cost;
			НСтр.НДС=НСтр.НДС+Стр_1.vat_value;
			Нстр.Цена=НСтр.Сумма/НСтр.КоличествоКМ;
			 
			 
		Иначе
			Добав.cis=Стр_1.sgtin;
			Добав.GTIN=Сред(Добав.cis,1,14);
			Добав.Цена=Стр_1.cost;
			Добав.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(Добав.GTIN));
			Если не ЗначениеЗаполнено(Добав.НаименованиеТовара) Тогда
				СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
				СпрПр.GTIN=число(Сред(Добав.cis,1,14));
				СпрПр.Наименование=xmlString(СпрПр.GTIN);
				СпрПр.НаименованиеТовара=xmlString(СпрПр.GTIN);
				СпрПр.Записать();
				Добав.НаименованиеТовара=СпрПр.Ссылка;
			КонецЕсли;
			//Нстр=ДокументПриемки.Товары.Найти(Добав.НаименованиеТовара,"GTIN");
			Нстр=ДокументПриемки.Товары.НайтиСтроки(Новый Структура("GTIN,Цена",Добав.НаименованиеТовара,Добав.Цена));
			Если НСтр.Количество()=0 Тогда
				НСтр=ДокументПриемки.Товары.Добавить();
				НСтр.GTIN=Добав.НаименованиеТовара;
				Попытка
					Если Число(НСтр.GTIN.GTIN)=Число(НСтр.GTIN.Наименование) тогда
						МассивПроудцкий.Добавить(Добав.GTIN);
						
					КонецЕсли;
				Исключение
				КонецПопытки;
			Иначе
				НСтр=НСтр[0]
			КонецЕсли;
			Добав.НДС=Стр_1.vat_value;
			
			НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
			НСтр.Сумма=НСтр.Сумма+Стр_1.cost;
			НСтр.НДС=НСтр.НДС+Стр_1.vat_value;
			Нстр.Цена=НСтр.Сумма/НСтр.КоличествоКМ;
						
		КонецЕсли;
		
	
Иначе
	Для Каждого Стр_1 Из ОтветСтруктура.order_details.union Цикл
		//Добав=ДокументПриемки.Товары.Добавить();
		//Добав.GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",
		Добав=Документприемки.СерийныеНомера.Добавить();
		Если Стр_1.Свойства().Получить("sgtin")=Неопределено Тогда
			
			//Сообщить(Текст1);
			
			// Сообщить("Есть упаковки");
			//Сообщить(Стр_1.sscc_detail.sscc);
			Добав.cis=Стр_1.sscc_detail.sscc;
			
			detail=Неопределено;
			если  Стр_1.sscc_detail.Свойства().Получить("detail")<>Неопределено Тогда
				  detail=Стр_1.sscc_detail.detail;
			////Для Каждого Стр_222 Из     detail Цикл
				Добав.GTIN=detail.gtin;
				Добав.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(Добав.GTIN));
				Если не ЗначениеЗаполнено(Добав.НаименованиеТовара) Тогда
					СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
					СпрПр.GTIN=число(Сред(Добав.cis,1,14));
					СпрПр.Наименование=xmlString(СпрПр.GTIN);
					СпрПр.НаименованиеТовара=xmlString(СпрПр.GTIN);
					СпрПр.Записать();
					Добав.НаименованиеТовара=СпрПр.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			
			//Добав.GTIN=Сред(Добав.cis,1,14);
			//Добав.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(Добав.GTIN));
			//Если не ЗначениеЗаполнено(Добав.НаименованиеТовара) Тогда
			//	СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
			//	СпрПр.GTIN=число(Сред(Добав.cis,1,14));
			//	СпрПр.Наименование=xmlString(СпрПр.GTIN);
			//	СпрПр.Записать();
			//	Добав.НаименованиеТовара=СпрПр.Ссылка;
			//КонецЕсли;
							
			//Конеццикла;
			//КонецЕсли;
			Добав.Цена=Стр_1.cost;
			Нстр=ДокументПриемки.Товары.НайтиСтроки(Новый Структура("GTIN,Цена",Добав.НаименованиеТовара,Добав.Цена));
			Если НСтр.Количество()=0 Тогда
				НСтр=ДокументПриемки.Товары.Добавить();
				НСтр.GTIN=Добав.НаименованиеТовара;
				Попытка
					Если Число(НСтр.GTIN.GTIN)=Число(НСтр.GTIN.Наименование) тогда
						МассивПроудцкий.Добавить(Добав.GTIN);
						
					КонецЕсли;
				Исключение
				КонецПопытки;
			Иначе
				Нстр=Нстр[0];
			КонецЕсли;
			Добав.НДС=Стр_1.vat_value;
			
			НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
			НСтр.Сумма=НСтр.Сумма+Стр_1.cost;
			НСтр.НДС=НСтр.НДС+Стр_1.vat_value;
			Нстр.Цена=НСтр.Сумма/НСтр.КоличествоКМ;
			 
			 
		Иначе
			Добав.cis=Стр_1.sgtin;
			Добав.GTIN=Сред(Добав.cis,1,14);
			Добав.Цена=Стр_1.cost;
			Добав.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(Добав.GTIN));
			Если не ЗначениеЗаполнено(Добав.НаименованиеТовара) Тогда
				СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
				СпрПр.GTIN=число(Сред(Добав.cis,1,14));
				СпрПр.Наименование=xmlString(СпрПр.GTIN);
				СпрПр.НаименованиеТовара=xmlString(СпрПр.GTIN);
				СпрПр.Записать();
				Добав.НаименованиеТовара=СпрПр.Ссылка;
			КонецЕсли;
			Нстр=ДокументПриемки.Товары.НайтиСтроки(Новый Структура("GTIN,Цена",Добав.НаименованиеТовара,Добав.Цена));
			Если НСтр.Количество()=0 Тогда
				НСтр=ДокументПриемки.Товары.Добавить();
				НСтр.GTIN=Добав.НаименованиеТовара;
				Попытка
					Если Число(НСтр.GTIN.GTIN)=Число(НСтр.GTIN.Наименование) тогда
						Если МассивПроудцкий.Найти(Добав.GTIN)=Неопределено Тогда
							МассивПроудцкий.Добавить(Добав.GTIN);
						КонецЕсли;
						
					КонецЕсли;
				Исключение
				КонецПопытки;
			Иначе
				НСтр=НСтр[0];
			КонецЕсли;
			Добав.НДС=Стр_1.vat_value;
			
			НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
			НСтр.Сумма=НСтр.Сумма+Стр_1.cost;
			НСтр.НДС=НСтр.НДС+Стр_1.vat_value;
			Нстр.Цена=НСтр.Сумма/НСтр.КоличествоКМ;
						
		КонецЕсли;
		
		
		
		 
		
	Конеццикла;
	
Конецесли;
ДокументПриемки.Записать();

						Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
					 ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапистьПриемкку(ДокументПриемки.Ссылка,Текст1);
					
				Конецесли;
			ЗаполненаТабличнаяЧастьПриемки=ДокументПриемки.ПроверкаПоНомерамКМ.Количество()>0;
				
				Возврат документПриемки.Ссылка;
КонецФункции

Процедура ЗаписатьКонтрагента(Текст1)
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Для Каждого Стр Из NNN["filtered_records"] Цикл
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ КАК ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ
		|ГДЕ
		|	ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.subjectId_sys_Фармацевтика = &subjectId_sys_Фармацевтика";
	
	Запрос.УстановитьПараметр("subjectId_sys_Фармацевтика", Стр["system_subj_id"]);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//СпрПр=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("subjectId_sys_Фармацевтика",Стр.system_subj_id);
		//Если ЗначениеЗАполнено(СпрПр) тогда
			СпрПр=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		//Иначе
		//	СпрПр=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
		//КонецЕсли;
		СпрПр.subjectId_sys_Фармацевтика=Стр["system_subj_id"];
		СпрПр.Наименование=Стр["ORG_NAME"];
		СпрПр.ИНН=Стр["inn"];
		СпрПр.КПП=Стр["KPP"];
		
		СпрПр.Записать();
		
		
	Конеццикла;
	Конеццикла;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнформациюИзФармацевтикиПриход(Срегистра,HTTPСервисЗапрос,УжеОтправили,ДатаОтчета,Thumbprint_1,ДатаНачала,ДатаКонца,ВсеХорошо)
		                          
				Куки="lk-auth-token="+Срегистра ;
				
				
	Команда=Неопределено;			
	
				
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("start_from");	
	Чтен.ЗаписатьЗначение(0);
	Чтен.ЗаписатьИмяСвойства("count");
	Чтен.ЗаписатьЗначение(СколькоНаСтранице);
	Чтен.ЗаписатьИмяСвойства("filter");
	Чтен.ЗаписатьНачалоОбъекта();
	
	Если ЗначениеЗаполнено(ДатаНачала) тогда
		Чтен.ЗаписатьИмяСвойства("start_date");
		Чтен.ЗаписатьЗначение(Формат(ДатаНачала,"ДФ=""гггг-ММ-дд"""));
		Чтен.ЗаписатьИмяСвойства("end_date");
		Чтен.ЗаписатьЗначение(Формат(ДатаКонца,"ДФ=""гггг-ММ-дд"""));
	КонецЕслИ;	
	
	
	Чтен.ЗаписатьИмяСвойства("doc_type");
	Чтен.ЗаписатьЗначение("601");
	
	
				       Чтен.ЗаписатьКонецОбъекта();
	
	//Чтен.ЗаписатьЗначение("{}");
				       Чтен.ЗаписатьКонецОбъекта();
				
				Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
	Тело=СтрЗаменить(Тело,Символы.ПС,"");
	Тело=СтрЗаменить(Тело,Символы.ВК,"");
	
				
//			Тело="{start_from: 0, count: 20, filter: {doc_type: ""601""}}";
			
	HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/income");
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
	HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
	//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
							
	
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(4);
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				//ЧтениеJSON = Новый ЧтениеJSON;
			Страница=0;
			Тотал=1;
			Пока Страница*СколькоНаСтранице<=Тотал Цикл
				
 					страница=Страница+1;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Тотал=NNN.total;
				
				Если СколькоНаСтранице>NNN.documents.Количество() Тогда
					 Тотал=NNN.documents.Количество()
				КонецЕсли;
				
				did="";
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				docDate="";
				Для Каждого Стр Из  NNN.documents Цикл
					
					
												Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
														HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/download/"+Стр.document_id+"");
													Иначе
														HTTPЗапрос=Новый HTTPЗапрос("documents/download/"+Стр.document_id+"");
											/////			
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
												КонецЕсли;
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
											Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
											
										
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	
		
Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
																							
											NNN_2_Ы=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
											
											Попытка
												Сайт_1=NNN_2_Ы.link;
											Исключение
												Продолжить;
											КонецПопытки;
											Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
											Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
											
											

																
											
														HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
								//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
								///Константин           
								//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
								Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
								Текст1=Ответ.ПолучитьТелоКакСтроку();
												ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
								
										КонецЕсли;												
										
																						
											
			//Попытка
				
				
				МассивПроудкций=Новый Массив;
				МассивКонтрагентов=Новый Массив;
				Попытка
					ЗаполненаТабличнаяЧастьПриемки=Ложь;
					ДатаДокумента="";
					дкоументФарм=ДобавитьПриемку(Текст1,Стр,МассивПроудкций,МассивКонтрагентов,ЗаполненаТабличнаяЧастьПриемки,ДатаДокумента);
					Если ВсеХорошо=Истина И ЗначениеЗаполнено(дкоументФарм) тогда
						ДатаДокумента_1=НачалоДня(ДатаДокумента)-1*24*60*60;
						ДатаОтчета_1=Формат(ДатаДокумента_1,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""");
						Если ДатаОтчета<>ДатаОтчета_1 Тогда
							ДатаОтчета=ДатаОтчета_1;
							
							
							ЗапомнимДанныеСэтихЗаписываем(Пользователь,ДатаОтчета,"");
							
						КонецЕсли;
					Конецесли;
					
					Если ПриЗагрузкеПриемкиЗаполнятьПроверкаПоКМ=Истина И ЗаполненаТабличнаяЧастьПриемки<>Истина тОгда
						Форм=ОткрытьФорму("Документ.Приемка_ХамелеонЦРПТ.Форма.ФормаДокумента",
						Новый Структура("Ключ",дкоументФарм));
						Форм.ЗакачатьДетальнуюИнформацию("");
						Форм.Записать();
						Форм.Закрыть();
					КонецЕсли;
				Исключение
					   Инфо = ИнформацияОбОшибке();
    Сообщить("Описание='" + Инфо.Описание + "'");
    Сообщить("ИмяМодуля='" + Инфо.ИмяМодуля + "'");
    Сообщить("НомерСтроки=" + Инфо.НомерСтроки);
    Сообщить("ИсходнаяСтрока='" + Инфо.ИсходнаяСтрока + "'");

					Сообщить(Стр.document_id);
					Сообщить(Текст1);
					ВсеХорошо=Ложь;
				КонецПопытки;
					Для Каждого Стр_1 Из МассивПроудкций Цикл
						
						Попытка
									Чтен=Новый  ЗаписьJSON;
										Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
										Чтен.ЗаписатьНачалоОбъекта();
										Чтен.ЗаписатьИмяСвойства("start_from");	
										Чтен.ЗаписатьЗначение(0);
										Чтен.ЗаписатьИмяСвойства("count");
										Чтен.ЗаписатьЗначение(СколькоНаСтранице);
										Чтен.ЗаписатьИмяСвойства("filter");
										Чтен.ЗаписатьНачалоОбъекта();
										
										Чтен.ЗаписатьИмяСвойства("gtin");
										Чтен.ЗаписатьЗначение(Стр_1);
										
										
													       Чтен.ЗаписатьКонецОбъекта();
										
										//Чтен.ЗаписатьЗначение("{}");
													       Чтен.ЗаписатьКонецОбъекта();
													
													Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
										Тело=СтрЗаменить(Тело,Символы.ПС,"");
										Тело=СтрЗаменить(Тело,Символы.ВК,"");
										
						
						
								HTTPЗапрос=Новый HTTPЗапрос("api/v1/reestr/med_products/public/filter");
								          HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
								
												//	Иначе
												//	HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.document_id+"");
											/////			
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
												//	КонецЕсли;
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
											HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
											Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
											ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьПродукцию(Текст1);
											
											
												ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
											
																						
											Исключение
											КонецПопытки;
					Конеццикла;
					
					
					Для Каждого Стр_1 Из МассивКонтрагентов Цикл
						
						Попытка
									Чтен=Новый  ЗаписьJSON;
										Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
										Чтен.ЗаписатьНачалоОбъекта();
										Чтен.ЗаписатьИмяСвойства("start_from");	
										Чтен.ЗаписатьЗначение(0);
										Чтен.ЗаписатьИмяСвойства("count");
										Чтен.ЗаписатьЗначение(СколькоНаСтранице);
										Чтен.ЗаписатьИмяСвойства("filter");
										Чтен.ЗаписатьНачалоОбъекта();
										
										Чтен.ЗаписатьИмяСвойства("system_subj_id");
										Чтен.ЗаписатьЗначение(Стр_1);
										
										Чтен.ЗаписатьИмяСвойства("reg_entity_type");
										Чтен.ЗаписатьЗначение("1");
										
													       Чтен.ЗаписатьКонецОбъекта();
										
										//Чтен.ЗаписатьЗначение("{}");
													       Чтен.ЗаписатьКонецОбъекта();
													
													Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
										Тело=СтрЗаменить(Тело,Символы.ПС,"");
										Тело=СтрЗаменить(Тело,Символы.ВК,"");
										
						
						
								HTTPЗапрос=Новый HTTPЗапрос("api/v1/reestr_partners/filter");
								          HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
								
												//	Иначе
												//	HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.document_id+"");
											/////			
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
												//	КонецЕсли;
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
											HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
											Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
											ЗаписатьКонтрагента(Текст1);
											
											
												ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
											
																						
				Исключение
					КонецПопытки;
						
					Конеццикла;

					
														  //ОработатьДокументы(Стр,Результат,Ошибка)

														
														//ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
																									//Исключение
											//	КонецПопытки;
											 Конеццикла;

					
								//Конеццикла;
				
				Если Страница*СколькоНаСтранице>Тотал Тогда
					Прервать;
				КонецЕсли;
				
			 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("start_from");	
	Чтен.ЗаписатьЗначение(Страница*СколькоНаСтранице);
	Чтен.ЗаписатьИмяСвойства("count");
	Чтен.ЗаписатьЗначение(СколькоНаСтранице);
	Чтен.ЗаписатьИмяСвойства("filter");
	Чтен.ЗаписатьНачалоОбъекта();
	
	Если ЗначениеЗаполнено(ДатаНачала) тогда
		Чтен.ЗаписатьИмяСвойства("start_date");
		Чтен.ЗаписатьЗначение(ДатаНачала);
	КонецЕслИ;	
		
	Чтен.ЗаписатьИмяСвойства("doc_type");
	Чтен.ЗаписатьЗначение("601");
	           Чтен.ЗаписатьКонецОбъекта();
	
	//Чтен.ЗаписатьЗначение("{}");
				       Чтен.ЗаписатьКонецОбъекта();
				
				Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
	Тело=СтрЗаменить(Тело,Символы.ПС,"");
	Тело=СтрЗаменить(Тело,Символы.ВК,"");
	
		
				HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/income");
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
	HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
	//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
							
	
	

	Если Ответ.КодСостояния<>202 И Ответ.КодСостояния<>200  Тогда
		Если УжеОтправили=Истина Тогда
				Сообщить("Не удалось загрузить приходы с ЦРПТ, отсутствует доступ.");
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Возврат;
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ЗагрузитьИзЦРПТ(Команда,Истина)			
			КонецЕсли
	КонецЕсли;
	
	Конеццикла;	
				
				
ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
					ВсеХорошо=Ложь;
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ЗагрузитьИзЦРПТ(Команда,Истина)			
			КонецЕсли
	Иначе
					ВсеХорошо=Ложь;
					Попытка
						//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							
						Исключение
							Попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								
								Если Найти(Текст1,"Billing contract")>0 И
									Найти(Текст1,"not signed by participant")>0 Тогда
									Сообщить("Договор биллинга для выбранной группы товаров не подписан участником");
								КонецЕсли;
								
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьИзЦРПТ(Команда,УжеОтправили=Ложь) Экспорт
	// Вставить содержимое обработчика.
	Thumbprint_1=Неопределено;
	ДатаНачала=Неопределено;
	Если НаКлиенте(Thumbprint_1,ДатаНачала)<>Истина Тогда
		
		Возврат;
	Конецесли;
		Попытка
			ЛицензияОпределить_Просто(Thumbprint_1);
		Исключение
		КонецПопытки;
		
		СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			Попытка
				СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
			исключение
				СРегистра=Неопределено;
			КонецПопытки;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			ПоказатьПредупреждение(,"Не удалось получить токен по организации");
			Возврат;
		Конецесли;
		
 	Если ОбработкаWEBНаСервере Тогда
		Если НЕ ЗагрузканаСерверИзЦРПТ(Thumbprint_1,СРегистра,УжеОтправили) Тогда
				Если УжеОтправили=Истина Тогда
				//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ЗагрузитьИзЦРПТ(Команда,Истина)			
		КонецЕсли
		
		КонецЕсли;
		
		
	Иначе
		
		
Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
			
	СРегистра="";
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
		//АдресКАПИ=СтрЗаменить(Thumbprint_1.АдресКАПИ,"api.","");
		  АдресКАПИ=Thumbprint_1.АдресКАПИ;
		
	Датаотчета="";
			
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;   
			
			
		ВсеХорошо=Истина;
			
		//если Не ЗначениеЗаполнено(ДатаНачала) тогда
			ПолучитьИнформациюИзФармацевтикиПриход(Срегистра,HTTPСервисЗапрос,УжеОтправили,ДатаОтчета,Thumbprint_1,Неопределено,Неопределено,ВсеХорошо);
		//Иначе
		//	ДатаКОнца=КОнецДня(ТекущаяДата());
			                                         
		//	ДатаНачалаДаток=Дата(Число(Сред(ДатаНачала,1,4)),Число(Сред(ДатаНачала,6,2)),Число(Сред(ДатаНачала,9,2)));
		//	ДатаКонца_1=ДатаНачалаДаток;
		//	Пока ДатаКонца_1<ДатаКонца Цикл
		//		ДатаНачалаДаток=ДатаКонца_1;
		//		ДатаКонца_1=Мин(ДатаКонца_1+30*24*60*60,ДатаКОнца);
		//		ПолучитьИнформациюИзФармацевтикиПриход(Срегистра,HTTPСервисЗапрос,УжеОтправили,ДатаОтчета,Thumbprint_1,ДатаНачала,ДатаКонца_1,ВсеХорошо);
		//	Конеццикла;
			
			
			
		//КонецЕсли;
			
		Элементы.Приемкасписок.Обновить();
			  Возврат;
		КонецЕсли;
		
		

	
		
		
		
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;                                                       
			
			
 			что=Thumbprint_1.что;
			
			
			Если ЗагружатьВсеПриходы Тогда
				
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/listV2?inputFormat=true&documentType=LP_SHIP_GOODS_CSV&documentType=LP_SHIP_GOODS_CSV&documentType=LP_SHIP_GOODS_XML&documentType=LP_SHIP_GOODS&limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=docDate&pageDir=NEXT&pg="+что);
			Иначе
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/listV2?inputFormat=true&documentType=LP_SHIP_GOODS_CSV&documentType=LP_SHIP_GOODS_CSV&documentType=LP_SHIP_GOODS_XML&documentType=LP_SHIP_GOODS&documentStatus=WAIT_ACCEPTANCE&documentStatus=WAIT_PARTICIPANT_REGISTRATION&limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=docDate&pageDir=NEXT&pg="+что);
	КонецЕсли;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
							
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				//ЧтениеJSON = Новый ЧтениеJSON;
			Страница=0;
			Тотал=1;
			Пока Страница*СколькоНаСтранице<=Тотал Цикл
				
 					страница=Страница+1;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Тотал=NNN.total;
				
				Если СколькоНаСтранице>NNN.results.Количество() Тогда
					 Тотал=NNN.results.Количество()
				КонецЕсли;
				
				did="";
				docDate="";
				Для Каждого Стр Из  NNN.results Цикл
					did=Стр.number;
					docDate=Стр.docDate;
					Если Стр.input=true 
						И Найти(Стр.type,"LP_SHIP_GOODS")=1
						Тогда
						
  			что=Thumbprint_1.что;
	
								
						
						HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.number+"/body?pg="+что+"&limit=2147483647");
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
						//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
						///Константин     
						Попытка
							Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
							
							Если Ответ.КодСостояния<>200 Тогда
								ВызватьИсключение "Не получилось получить запрос по документу"
							КонецЕсли
							
						Исключение
							
							HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.number+"/body?pg="+что+"&limit=11");
							HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
							HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
							
							Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
						КонецПопытки;
						Текст1=Ответ.ПолучитьТелоКакСтроку();
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						МассивУп=Новый Массив;
						
						МассивКМ=Новый Массив;
						ЗаполненаТабличнаяЧастьПриемки=ЛожЬ;
						Принять_1=ЛОжь;
						ДокумПриемки=ОбновитьСтатусДокумента_Приемка(NNN_1,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа,,,,МассивКМ,ЗагрузатьНаименованиеПриПриемке,ЗаполненаТабличнаяЧастьПриемки,Принять_1);	
						Если Принять_1=Истина Тогда
							Попытка
								
								Форм=ПолучитьФорму("Документ.Приемка_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
								"Ключ",ДокумПриемки));
								Форм.Принять("");
								

							Исключение
							КонецПопытки;
						КонецЕсли;
						
						
						
						Если ПриЗагрузкеПриемкиЗаполнятьПроверкаПоКМ=Истина И ЗаполненаТабличнаяЧастьПриемки<>Истина тОгда
							Форм=ОткрытьФорму("Документ.Приемка_ХамелеонЦРПТ.Форма.ФормаДокумента",
							Новый Структура("Ключ",ДокумПриемки));
							Форм.ЗакачатьДетальнуюИнформацию("");
							Форм.Записать();
							Форм.Закрыть();
						КонецЕсли;
						Если МассивКМ.Количество()>0 Тогда
							
							СписокОбнТовара=Новый Массив;
							
							
							ЗаполненаТабличнаяЧастьПриемки=ложь;
							дкоументФарм=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьИнформациюНаСервереДЛяПриемки(Thumbprint_1,МассивКМ,СписокОбнТовара,ЗаполненаТабличнаяЧастьПриемки);
							
							
							
							Если ПриЗагрузкеПриемкиЗаполнятьПроверкаПоКМ=Истина И ЗаполненаТабличнаяЧастьПриемки<>Истина тОгда
								Форм=ОткрытьФорму("Документ.Приемка_ХамелеонЦРПТ.Форма.ФормаДокумента",
								Новый Структура("Ключ",дкоументФарм));
								Форм.ЗакачатьДетальнуюИнформацию("");
								Форм.Записать();
								Форм.Закрыть();
							КонецЕсли;
							
							
									Для Каждого Стр_1 Из СписокОбнТовара Цикл
										ОповеститьОбИзменении(Стр_1);
									КонецЦиклА;
									МассивКМ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСледющийМассив(ДокумПриемки);
									СписокОбнТовара.Очистить();

										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
														Прокси_20=Новый ИнтернетПрокси;
														Прокси_20.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
													
														HTTPСервисЗапрос_20=Новый HTTPСоединение("xn--80aqu.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,Прокси_20,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
													Иначе
														HTTPСервисЗапрос_20=Новый HTTPСоединение("xn--80aqu.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
													КонецЕсли;
													
												МассивСтруктур=Новый Массив;	
										Для Каждого Стр_1 из МассивКМ Цикл

											GTINНаименованиеТовара=Сред(Стр_1.Марка,3,14);
											HTTPЗапрос_20=Новый HTTPЗапрос("v3/product?gtin="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ДополнитьСтроку(Формат(GTINНаименованиеТовара,"ЧГ="))+"&apikey=l10k3203w65mbngr");
											HTTPЗапрос_20.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded; charset=UTF-8");
											//HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//Тело="task=getItemByGTIN&lng=ru&keyValue="+ДополнитьСтроку(Формат(Стр_1.GTINНаименованиеТовара,"ЧГ="));
									//		HTTPЗапрос.УстановитьТелоИзСтроки();
											//Тело);
											Ответ_20=HTTPСервисЗапрос_20.ОтправитьДляОбработки(HTTPЗапрос_20);
												Если Ответ_20.КодСостояния=200 Тогда
									Текст1_20=Ответ_20.ПолучитьТелоКакСтроку();
												NNN_20=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1_20);//ПрочитатьJSON(ЧтениеJSON);
											Название=неопределено;
											Попытка
												Название=NNN_20.result[0].good_name; 
											Исключение
											КонецПопытки;
											Если Название=Неопределено Тогда
												
									//			http://gepir.gs1ru.org/GEPIR40/index.jsp?p=gtin&lng=ru
											КонецЕсли;
											Если ЗначениеЗаполнено(Название) Тогда
												МассивСтруктур.Добавить(Новый Структура("gtin,Название",GTINНаименованиеТовара,Название));
												
											КонецЕсли;
											КонецЕсли;
										Конеццикла;
										
										МММ=Новый Массив;
										Если МассивСтруктур.Количество()>0 тогда
											МММ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагрузитьПродукции(МассивСтруктур);
											
										КонецЕсли;
										Для Каждого Стр_1 Из МММ Цикл
											ОповеститьОбИзменении(Стр_1);
										КонецЦиклА;
										
										МассивКМ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСледющийМассив(ДокумПриемки);
										СписокОбнТовара.Очистить();
										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
												Прокси_20=Новый ИнтернетПрокси;
															Прокси_20.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
														
															HTTPСервисЗапрос_20=Новый HTTPСоединение("gepir.gs1ru.org",,,,Прокси_20,Thumbprint_1.Таймаут);
														Иначе
															HTTPСервисЗапрос_20=Новый HTTPСоединение("gepir.gs1ru.org",,,,,Thumbprint_1.Таймаут);
														КонецЕсли;
														
														
														
													МассивСтруктур.Очистить();	
												
											Для Каждого СтР_1 Из МассивКМ Цикл
												
										

GTINНаименованиеТовара=Сред(Стр_1.Марка,3,14);

												HTTPЗапрос=Новый HTTPЗапрос("GEPIR40/getItem");
												HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded; charset=UTF-8");
												//HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
												//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
												///Константин           
												Тело="task=getItemByGTIN&lng=ru&keyValue="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ДополнитьСтроку(Формат(GTINНаименованиеТовара,"ЧГ="));
												HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
												Ответ=HTTPСервисЗапрос_20.ОтправитьДляОбработки(HTTPЗапрос);
													Если Ответ.КодСостояния=200 Тогда
									
												Текст1=Ответ.ПолучитьТелоКакСтроку();
												NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
												Название=неопределено;
												Попытка
													Название=NNN.gepirItem.itemDataLine[0].itemName; 
												Исключение
												КонецПопытки;
												Если Название=Неопределено Тогда
													
										//			http://gepir.gs1ru.org/GEPIR40/index.jsp?p=gtin&lng=ru
												КонецЕсли;
												Если ЗначениеЗаполнено(Название) Тогда
													МассивСтруктур.Добавить(Новый Структура("gtin,Название",Стр_1.GTINНаименованиеТовара,Название));
													
												КонецЕсли;
												КонецЕсли;
											Конеццикла;
											
										МММ=Новый Массив;
										Если МассивСтруктур.Количество()>0 тогда
											МММ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагрузитьПродукции(МассивСтруктур);
											
										КонецЕсли;
										Для Каждого Стр_1 Из МММ Цикл
											ОповеститьОбИзменении(Стр_1);
										КонецЦиклА;

									
							
						КонецЕсли;
						
					КонецЕсли;
				Конеццикла;
				
				Если Страница*СколькоНаСтранице>Тотал Тогда
					Прервать;
				КонецЕсли;
				
 			что=Thumbprint_1.что;
	
				
		Если ЗагружатьВсеПриходы Тогда
				
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/listV2?inputFormat=true&documentType=LP_SHIP_GOODS_CSV&documentType=LP_SHIP_GOODS_CSV&documentType=LP_SHIP_GOODS_XML&documentType=LP_SHIP_GOODS&limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=docDate&did="+did+"&orderedColumnValue="+docDate+"&pageDir=NEXT&pg="+Что);
Иначе
					 HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/listV2?inputFormat=true&documentType=LP_SHIP_GOODS_CSV&documentType=LP_SHIP_GOODS_CSV&documentType=LP_SHIP_GOODS_XML&documentType=LP_SHIP_GOODS&documentStatus=WAIT_ACCEPTANCE&documentStatus=WAIT_PARTICIPANT_REGISTRATION&limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=docDate&did="+did+"&orderedColumnValue="+docDate+"&pageDir=NEXT&pg="+Что);
					КонецЕсли;
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	Если Ответ.КодСостояния<>202 И Ответ.КодСостояния<>200  Тогда
		Если УжеОтправили=Истина Тогда
				Сообщить("Не удалось загрузить приходы с ЦРПТ, отсутствует доступ.");
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Возврат;
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ЗагрузитьИзЦРПТ(Команда,Истина)			
			КонецЕсли
	КонецЕсли;
	
	Конеццикла;	
				
				
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ЗагрузитьИзЦРПТ(Команда,Истина)			
			КонецЕсли
	Иначе
					Попытка
						//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							
						Исключение
							Попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								
								Если Найти(Текст1,"Billing contract")>0 И
									Найти(Текст1,"not signed by participant")>0 Тогда
									Сообщить("Договор биллинга для выбранной группы товаров не подписан участником");
								КонецЕсли;
								
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	КонецЕсли;


//	ЗагрузитьОтветыПоОтгрузкам(Команда,,Thumbprint_1,СРегистра);


	
КонецПроцедуры



Функция ЗаписатьСтрокуВОЫЩТ(Стр)
										Запись = Новый ЗаписьJSON;	
									Запись.УстановитьСтроку();
									ЗаписатьJSON(Запись, Новый Структура("code",Стр));
Возврат Запись.Закрыть()
Конецфункции






&НаКлиенте
Процедура РасширенноеСопоставлениеПродукции(Команда)
	// Вставить содержимое обработчика.
	УФ=ПолучитьФорму("Обработка.РасширенноеСопоставлениеПоПродукции_ХамелеонЦРПТ.Форма.ФормаСопоставления");
	Если Организации.Количество()>0 Тогда
		УФ.Предприятие=Организации[0].Организация;
	КонецЕсли;
	УФ.Открыть();
	УФ.ВидСопоставленияМеркурия="СправочникСсылка.Продукция_ХамелеонЦРПТ";
	УФ.УкажемТипМеркурия();
	
	СпрТип=ОпределеяемТипДля1С();
	
	Если ЗначениеЗаполнено(СпрТип) Тогда
		УФ.ВидСопоставленияНеЦРПТ=СпрТип;
		УФ.УкажемТипМеркурияНЕ();
	КонецЕсли;
	
	УФ.ОбновитьСписок();	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределеяемТипДля1С()
	
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Справочник_Документ
		|ИЗ
		|	РегистрСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ КАК СопоставлениеСправочниковДокументов_ХамелеонЦРПТ
		|ГДЕ
		|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СправочникДокумент_Меркурия ССЫЛКА Справочник.Продукция_ХамелеонЦРПТ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Справочник_Документ) Тогда
			Возврат "СправочникСсылка."+Строка(ТипЗнч(ВыборкаДетальныеЗаписи.Справочник_Документ))
		КонецЕсли;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Неопределено
	
КонецФункции

&НаКлиенте
Процедура Принять(Команда) Экспорт
	// Вставить содержимое обработчика.
	Для Каждого Стр Из Элементы.Приемкасписок.ВыделенныеСтроки Цикл
		Форм=ПолучитьФорму("Документ.Приемка_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
		"Ключ",Стр));
		Форм.Принять(Команда);
	КонецциклА;
	Элементы.Приемкасписок.Обновить();
	
КонецПроцедуры

Функция ПолучитьПриходы() Экспорт
	 	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Приемка_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Документ.Приемка_ХамелеонЦРПТ КАК Приемка_ХамелеонЦРПТ
		|ГДЕ
		|	Приемка_ХамелеонЦРПТ.Организация = &Организация
		|	И Приемка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему = &СайтыВходаВСистему
		|	И (Приемка_ХамелеонЦРПТ.Статус = &Статус
		|			ИЛИ Приемка_ХамелеонЦРПТ.СтатусУПД В (&СтатусУПД))";
	
	Запрос.УстановитьПараметр("Организация", Пользователь.Организация);
	Запрос.УстановитьПараметр("СайтыВходаВСистему", Пользователь.СайтыВходаВСистему);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента);
	СписокСтатусУПД=Новый СписокЗначений;
	СписокСтатусУПД.Добавить(Перечисления.СтатусыУПД_ХамелеонЦРПТ.ОжидаетсяОтправка);
	СписокСтатусУПД.Добавить(Перечисления.СтатусыУПД_ХамелеонЦРПТ.ОжидаетсяУточнение);
	СписокСтатусУПД.Добавить(Перечисления.СтатусыУПД_ХамелеонЦРПТ.ТребуетсяПодпись);
	СписокСтатусУПД.Добавить(Перечисления.СтатусыУПД_ХамелеонЦРПТ.ТребуетсяПодписьДокументПросмотрен);
	СписокСтатусУПД.Добавить(Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отправлен);
	Запрос.УстановитьПараметр("СтатусУПД", СписокСтатусУПД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивДокументов=Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		МассивДокументов.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Возврат МассивДокументов
КонецФункции

&НаКлиенте
Процедура Принять_ВсеПоПользователю(Команда) Экспорт
	// Вставить содержимое обработчика.
	МассивПриходов=ПолучитьПриходы();
	Для Каждого Стр Из МассивПриходов Цикл
		Форм=ПолучитьФорму("Документ.Приемка_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
		"Ключ",Стр));
		Форм.Принять(Команда);
	КонецциклА;
	Элементы.Приемкасписок.Обновить();
	
КонецПроцедуры


&НаСервере
Процедура ПользовательПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	ХранилищеСистемныхНастроек.Сохранить("ТекущийПользователь_ХамелеонЦРПТ","ТекущийПользователь_ХамелеонЦРПТ",Пользователь);
	если Константы.РежимРаботыХамелеонЦРПТ.Получить()=2 тогда
		этаформа.Заголовок="Тестовый режим: "
	иначеесли Константы.РежимРаботыХамелеонЦРПТ.Получить()=1 тогда
		этаформа.Заголовок="РАБОЧИЙ РЕЖИМ"
	Иначе
		этаформа.Заголовок="Задайте режим работы пользователя"

	конецесли;
	ЭтаФорма.Заголовок=ЭтаФорма.Заголовок+" "+Пользователь.Наименование;
	ЭтаФорма.Заголовок=ЭтаФорма.Заголовок+" \ "+Пользователь.СайтыВходаВСистему.Наименование+" \ "+Пользователь.Организация.Наименование;
	
	//ЭтаФорма.Заголовок=ЭтаФорма.Заголовок+" "+"Хамелеон ЦРПТ";
	УдалимОтборы();
	
	если пользователь.СрокДействияСертификата<текущаядата()-10*24*60*60 тогда
		элементы.СрокДействияСертификата.ЦветТекстаЗаголовка=новый цвет(255,0,0);
		элементы.СрокДействияСертификата.ЦветТекста=новый цвет(255,0,0);
	Иначе
		элементы.СрокДействияСертификата.ЦветТекстаЗаголовка=Элементы.Пользователь.ЦветТекстаЗаголовка;
		элементы.СрокДействияСертификата.ЦветТекста=Элементы.Пользователь.ЦветТекста;
		
	конецесли
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	
	Если ПроверкаПоПользователю(Пользователь) Тогда
		Пользователь=Неопределено;
	КонецЕсли;
	
	Организации.Очистить();
	ПользовательПриИзмененииНаСервере();
	Если ПодключатьсяАвтоматическиПоЦРПТ Тогда
		ПодключитьсяКЦРПТ("",Ложь);
	Конецесли
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательОткрытие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка=Ложь;
	ОткрытьФорму("Справочник.Пользователи_ХамелеонЦРПТ.ФормаОбъекта",Новый Структура("Ключ",Пользователь),,,,,
	Новый ОписаниеОповещения("ПослеОтрытия",Этаформа));
КонецПроцедуры



&НаСервере
Процедура ПользовательПриИзмененииНаСервере_Откр()
	// Вставить содержимое обработчика.
	ХранилищеСистемныхНастроек.Сохранить("ТекущийПользователь_ХамелеонЦРПТ","ТекущийПользователь_ХамелеонЦРПТ",Пользователь);
	если Константы.РежимРаботыХамелеонЦРПТ.Получить()=2 тогда
		этаформа.Заголовок="Тестовый режим: "
	иначеесли Константы.РежимРаботыХамелеонЦРПТ.Получить()=1 тогда
		этаформа.Заголовок="РАБОЧИЙ РЕЖИМ"
	Иначе
		этаформа.Заголовок="Задайте режим работы пользователя"

	конецесли;
	ЭтаФорма.Заголовок=ЭтаФорма.Заголовок+" "+Пользователь.Наименование;
	ЭтаФорма.Заголовок=ЭтаФорма.Заголовок+" \ "+Пользователь.СайтыВходаВСистему.Наименование+" \ "+Пользователь.Организация.Наименование;
	
	//ЭтаФорма.Заголовок=ЭтаФорма.Заголовок+" "+"Хамелеон ЦРПТ";
	
	если пользователь.СрокДействияСертификата<текущаядата()-10*24*60*60 тогда
		элементы.СрокДействияСертификата.ЦветТекстаЗаголовка=новый цвет(255,0,0);
		элементы.СрокДействияСертификата.ЦветТекста=новый цвет(255,0,0);
	Иначе
		элементы.СрокДействияСертификата.ЦветТекстаЗаголовка=Элементы.Пользователь.ЦветТекстаЗаголовка;
		элементы.СрокДействияСертификата.ЦветТекста=Элементы.Пользователь.ЦветТекста;
		
	конецесли
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтрытия(РР,ДД)   Экспорт
	ПользовательПриИзмененииНаСервере_Откр();
КонецПроцедуры


&НаСервере
Функция HELPОтгрузкаНаСервере()
	// Вставить содержимое обработчика.
	Возврат Документы.Отгрузка_ХамелеонЦРПТ.ПолучитьМакет("HELP");
КонецФункции


&НаКлиенте
Процедура HELPОтгрузка(Команда)
	N=HELPОтгрузкаНаСервере();
	 N.Показать();
КонецПроцедуры


&НаСервере
Функция HELPПРиемкаНаСервере()
	// Вставить содержимое обработчика.
	Возврат Документы.Приемка_ХамелеонЦРПТ.ПолучитьМакет("HELP");
КонецФункции


&НаКлиенте
Процедура HELPПРиемка(Команда)
	М=HELPПРиемкаНаСервере();
	М.Показать();
КонецПроцедуры


&НаКлиенте
Процедура ОтменаОтгрузки(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Стр Из Элементы.Отгрузка_Список.ВыделенныеСтроки Цикл
		Форм=ПолучитьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
		"Ключ",Стр));
		Форм.ТекущийПользователь=Пользователь;
		Форм.ОтменаОтгрузки(Команда);
	КонецциклА;
	Элементы.Отгрузка_Список.Обновить();
	
КонецПроцедуры


&НаКлиенте
Процедура Отклонить(Команда)
	// Вставить содержимое обработчика.
	ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопросаОтклонения",ЭтаФорма),"Полный отказ правильнее делать со стороны поставщика, все равно отказать?",РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОтклонения(РР,ДД) Экспорт
	Если РР<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из Элементы.Приемкасписок.ВыделенныеСтроки Цикл
		Форм=ПолучитьФорму("Документ.Приемка_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
		"Ключ",Стр));
		Форм.Отклонить("",,Истина);
	КонецциклА;
	Элементы.Приемкасписок.Обновить();
	
КонецПроцедуры


&НаСервере
Функция HELPАгрегацииНаСервере()
	// Вставить содержимое обработчика.
	Возврат Обработки._Запуск_ХамелеонЦРПТ.ПолучитьМакет("HELPАгрегации");
Конецфункции


&НаКлиенте
Процедура HELPАгрегации(Команда)
	Текст=HELPАгрегацииНаСервере();
	Текст.Показать();
КонецПроцедуры


&НаКлиенте
Процедура ПечатьСПО(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Счетч=1;
		Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводПервогоЧисла",ЭтаФорма));
	Форм.Число=Счетч;
	Форм.Заголовок="Начать печать с № КМ";
	//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводПервогоЧисла",ЭтаФорма),Счетч,"Начать печать с № КМ");
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводПервогоЧисла(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
 				Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводВторогоЧисла",ЭтаФорма,РР));
	Форм.Число=30;
	Форм.Заголовок="Допечатать указанное количество № КМ";
//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводВторогоЧисла",ЭтаФорма,РР),30,"Допечатать указанное количество № КМ");
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводВторогоЧисла(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
		Таб=Новый ТабличныйДокумент;
		
		Для Каждого Стр Из Элементы.ЗаказыТаблица.ВыделенныеСтроки Цикл
			Если ЗначениеЗаполненО(КоличествоЯдерДляГенерацииDataMatrix) тогда
				Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
				"Ключ",Стр));
				Таб = Форм.ПечатьЭти_1_Функция(ДД,РР);
			Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
		
			Таб.Показать();
				
				
				//Таб = ПолучитьИзВременногоХранилища(ПечатьЭти_1_ЦРПТ_Функция(ДД,РР));
				//Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
				
				//Таб.Показать();
				
			Иначе
			
				Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
				"Ключ",Стр));
				Форм.ПечатьЭти_1(Таб,ДД,РР);
				
			Конецесли;
//			Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
//			"Ключ",Стр));
//			Форм.ПечатьЭти_1(Таб,ДД,РР);
//			Таб.ВывестиГоризонтальныйРазделительСтраниц();
			//Форм.ПечатьЭтикеток(Команда);
		КонецциклА;
		Если НЕ ЗначениеЗаполненО(КоличествоЯдерДляГенерацииDataMatrix) тогда
			Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
		
			Таб.Показать();
		Конецесли;
//		Элементы.ЗаказыТаблица.Обновить();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьКМИзAPI(Команда)
		// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Для Каждого Стр Из Элементы.ЗаказыТаблица.ВыделенныеСтроки Цикл
		Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
		"Ключ",Стр));
		Форм.ПолучитьКМИзAPI(Команда);
	КонецциклА;
	Элементы.ЗаказыТаблица.Обновить();
	

КонецПроцедуры


&НаКлиенте
Процедура ЗаказыТаблицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если Поле.Имя="ЗаказыТаблицаСвязь" Тогда
		СтандартнаяОбработка = Ложь;
		ТаблицаЗнач=Новый Массив;
	
		Массив1с=СправочникиНайтиПоМеркурию(Элементы.ЗаказыТаблица.ТекущиеДанные.Ссылка);
		Если Массив1с.Количество()=1 Тогда
			ПоказатьЗначение(,Массив1с[0]);
		ИначеЕсли Массив1с.Количество()>1 ТОгда
			//Для Каждого Стр_Спр Из Массив1с Цикл
				                  ММММ=Новый СписокЗначений;
								  Для Каждого Стр Из Массив1С Цикл
									  ММММ.Добавить(Стр);
									 КонецЦикла;
				Форм=ОткрытьФорму("Обработка.УниверсальныйЖурнал_ХамелеонЦРПТ.Форма.Форма",Новый Структура("Тип,ТипДальше","Документ",ПолучитьТип(Массив1с[0] )));
		ДД=Форм.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ДД.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке;
		ДД.Использование=Истина;
		ДД.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Ссылка");
		ДД.ПравоеЗначение=ММММ;
				//	ТипСпр=Стр_Спр;
			//	ТаблицаЗнач.Добавить(Новый Структура("Справочник1С,СправочникМеркурия",Стр_Спр,Стр));
			//КонецЦикла;
		КонецЕсли;
			//ДД=ТаблицаЗнач.Добавить();
			
		
	КонецЕсли;
	
КонецПроцедуры

Функция СправочникиНайтиПоМеркурию(Стр)
	Возврат Обработки._Запуск_ХамелеонЦРПТ.ВернутьМного1СПоМеркурию(Стр); 
КонецФункции

Функция Получитьтип(МММ)
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(МММ)).Имя
КонецФункции


&НаКлиенте
Процедура ВводВОборотТаблицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если Поле.Имя="ВводВОборотТаблицаСвязь" Тогда
		СтандартнаяОбработка = Ложь;
		ТаблицаЗнач=Новый Массив;
	
		Массив1с=СправочникиНайтиПоМеркурию(Элементы.ВводВОборотТаблица.ТекущиеДанные.Ссылка);
		Если Массив1с.Количество()=1 Тогда
			ПоказатьЗначение(,Массив1с[0]);
		ИначеЕсли Массив1с.Количество()>1 ТОгда
			//Для Каждого Стр_Спр Из Массив1с Цикл
				                  ММММ=Новый СписокЗначений;
								  Для Каждого Стр Из Массив1С Цикл
									  ММММ.Добавить(Стр);
									 КонецЦикла;
				Форм=ОткрытьФорму("Обработка.УниверсальныйЖурнал_ХамелеонЦРПТ.Форма.Форма",Новый Структура("Тип,ТипДальше","Документ",ПолучитьТип(Массив1с[0] )));
		ДД=Форм.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ДД.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке;
		ДД.Использование=Истина;
		ДД.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Ссылка");
		ДД.ПравоеЗначение=ММММ;
				//	ТипСпр=Стр_Спр;
			//	ТаблицаЗнач.Добавить(Новый Структура("Справочник1С,СправочникМеркурия",Стр_Спр,Стр));
			//КонецЦикла;
		КонецЕсли;
			//ДД=ТаблицаЗнач.Добавить();
			
		
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура Отгрузка_СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Если Поле.Имя="Отгрузка_СписокСвязь" Тогда
		СтандартнаяОбработка = Ложь;
		ТаблицаЗнач=Новый Массив;
	
		Массив1с=СправочникиНайтиПоМеркурию(Элементы.Отгрузка_Список.ТекущиеДанные.Ссылка);
		Если Массив1с.Количество()=1 Тогда
			ПоказатьЗначение(,Массив1с[0]);
		ИначеЕсли Массив1с.Количество()>1 ТОгда
			//Для Каждого Стр_Спр Из Массив1с Цикл
				                  ММММ=Новый СписокЗначений;
								  Для Каждого Стр Из Массив1С Цикл
									  ММММ.Добавить(Стр);
									 КонецЦикла;
				Форм=ОткрытьФорму("Обработка.УниверсальныйЖурнал_ХамелеонЦРПТ.Форма.Форма",Новый Структура("Тип,ТипДальше","Документ",ПолучитьТип(Массив1с[0] )));
		ДД=Форм.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ДД.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке;
		ДД.Использование=Истина;
		ДД.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Ссылка");
		ДД.ПравоеЗначение=ММММ;
				//	ТипСпр=Стр_Спр;
			//	ТаблицаЗнач.Добавить(Новый Структура("Справочник1С,СправочникМеркурия",Стр_Спр,Стр));
			//КонецЦикла;
		КонецЕсли;
			//ДД=ТаблицаЗнач.Добавить();
			
		
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ПриемкасписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если Поле.Имя="ПриемкасписокСвязь" Тогда
		СтандартнаяОбработка = Ложь;
		ТаблицаЗнач=Новый Массив;
	
		Массив1с=СправочникиНайтиПоМеркурию(Элементы.Приемкасписок.ТекущиеДанные.Ссылка);
		Если Массив1с.Количество()=1 Тогда
			ПоказатьЗначение(,Массив1с[0]);
		ИначеЕсли Массив1с.Количество()>1 ТОгда
			//Для Каждого Стр_Спр Из Массив1с Цикл
				                  ММММ=Новый СписокЗначений;
								  Для Каждого Стр Из Массив1С Цикл
									  ММММ.Добавить(Стр);
									 КонецЦикла;
				Форм=ОткрытьФорму("Обработка.УниверсальныйЖурнал_ХамелеонЦРПТ.Форма.Форма",Новый Структура("Тип,ТипДальше","Документ",ПолучитьТип(Массив1с[0] )));
		ДД=Форм.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ДД.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке;
		ДД.Использование=Истина;
		ДД.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Ссылка");
		ДД.ПравоеЗначение=ММММ;
				//	ТипСпр=Стр_Спр;
			//	ТаблицаЗнач.Добавить(Новый Структура("Справочник1С,СправочникМеркурия",Стр_Спр,Стр));
			//КонецЦикла;
		КонецЕсли;
			//ДД=ТаблицаЗнач.Добавить();
			
	ИначеЕсли Поле.Имя="ПриемкасписокПриемкаРасформированиеКоробов"	 Тогда
		
		ТекД=Элементы.Приемкасписок.ТекущиеДанные;
		
		Если ЗначениеЗаполнено(ТекД.РасформированиеКоробов) Тогда
			Агрег=ТекД.РасформированиеКоробов;
		Иначе
		    Агрег=СоздатьРАсформирование(ТекД.Ссылка);
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Форма.ФормаДокумента",
			Новый структура("Ключ",Агрег));
		Элементы.Приемкасписок.Обновить();;
			
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура СписаниеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Если Организации.Количество()=0 Тогда
		ПодключитьсяКЦРПТ(Элемент,ЛОжь);
	КонецЕсли;
	Если                         Организации.Количество()>0 Тогда
		Если  Копирование И Элемент.Текущиеданные<>Неопределено Тогда
			Отказ = Истина;
			Парам = Новый Структура;
			Парам.Вставить("Организация", Организации[0].Организация);
			Парам.Вставить("Пользовтаель", Пользователь);
			Парам.Вставить("ЗначениеКопирования",Элемент.ТекущиеДанные.Ссылка);
			ОткрытьФорму("Документ.СписаниеКМНанесенныхНеНанесенныхНаТовар_ХамелеонЦРПТ.ФормаОбъекта", Парам,ЭтаФорма);
		Иначе
			Отказ = Истина;
			Парам = Новый Структура;
			Парам.Вставить("Организация", Организации[0].Организация);
			Парам.Вставить("Пользовтаель", Пользователь);
			ОткрытьФорму("Документ.СписаниеКМНанесенныхНеНанесенныхНаТовар_ХамелеонЦРПТ.ФормаОбъекта", Парам,ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СписаниеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Если Поле.Имя="СписаниеСвязь" Тогда
		СтандартнаяОбработка = Ложь;
		ТаблицаЗнач=Новый Массив;
	
		Массив1с=СправочникиНайтиПоМеркурию(Элементы.Списание.ТекущиеДанные.Ссылка);
		Если Массив1с.Количество()=1 Тогда
			ПоказатьЗначение(,Массив1с[0]);
		ИначеЕсли Массив1с.Количество()>1 ТОгда
			//Для Каждого Стр_Спр Из Массив1с Цикл
				                  ММММ=Новый СписокЗначений;
								  Для Каждого Стр Из Массив1С Цикл
									  ММММ.Добавить(Стр);
									 КонецЦикла;
				Форм=ОткрытьФорму("Обработка.УниверсальныйЖурнал_ХамелеонЦРПТ.Форма.Форма",Новый Структура("Тип,ТипДальше","Документ",ПолучитьТип(Массив1с[0] )));
		ДД=Форм.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ДД.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке;
		ДД.Использование=Истина;
		ДД.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Ссылка");
		ДД.ПравоеЗначение=ММММ;
				//	ТипСпр=Стр_Спр;
			//	ТаблицаЗнач.Добавить(Новый Структура("Справочник1С,СправочникМеркурия",Стр_Спр,Стр));
			//КонецЦикла;
		КонецЕсли;
			//ДД=ТаблицаЗнач.Добавить();
			
		
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура HELPСписания(Команда)
	// Вставить содержимое обработчика.
	N=HELСписнаияНаСервере();
	 N.Показать();
КонецПроцедуры


&НаСервере
Функция HELСписнаияНаСервере()
	// Вставить содержимое обработчика.
	Возврат Документы.СписаниеКМНанесенныхНеНанесенныхНаТовар_ХамелеонЦРПТ.ПолучитьМакет("HELP");
КонецФункции

&НаСервере
Функция HELPВводВОборотНаСервере()
	// Вставить содержимое обработчика.
	Возврат Обработки._Запуск_ХамелеонЦРПТ.ПолучитьМакет("HELPВводВОборот");
КонецФункции

&НаКлиенте
Процедура HELPВводВОборот(Команда)
	Текст=HELPВводВОборотНаСервере();
	Текст.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВнешниеОбработки(Команда)
		// Вставить содержимое обработчика.
		ОткрытьФорму("Справочник.ВнешниеОбработки_ХамелеонЦРПТ.Форма.ФормаСписка",
		Новый структура("Тип",
			"ЗаказМарокОсновная"));

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВнешнююОбрВводВОборот(Команда)
			ОткрытьФорму("Справочник.ВнешниеОбработки_ХамелеонЦРПТ.Форма.ФормаСписка",
		Новый структура("Тип",
			"ВводВОборотОсновная"));

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВнешнююОбработкуОтгрузка(Команда)
	// Вставить содержимое обработчика.
			ОткрытьФорму("Справочник.ВнешниеОбработки_ХамелеонЦРПТ.Форма.ФормаСписка",
		Новый структура("Тип",
			"ОтгрузкаОсновная"));

	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеВнешнейОбработкиСписание(Команда)
	// Вставить содержимое обработчика.
			ОткрытьФорму("Справочник.ВнешниеОбработки_ХамелеонЦРПТ.Форма.ФормаСписка",
		Новый структура("Тип",
			"СписаниеОсновная"));
	
КонецПроцедуры

&НаСервере
Функция СоздатьЗаказКМНаСервере(Д)
	// Вставить содержимое обработчика.
	ПД=Д.ПолучитьОбъект();
	Для Каждого Стр_1 Из ПД.Товары Цикл
		Стр_1.КоличествоПолучено=0;
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НомераКМ_ХамелеонЦРПТ.НомерКМ
			|ИЗ
			|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
			|ГДЕ
			|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа";
		
		Запрос.УстановитьПараметр("ДокументЗаказа", ПД.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
		Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда 
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Стр=ВыборкаДетальныеЗаписи;
				штрихКод_1=Стр.НомерКМ;
				cis=Сред(СтрЗаменить(штрихКод_1,"%1D",""),1,38);
						Если Сред(cis,32,3)<>"240" Тогда
//								cis=Сред(cis,1,31);
								
								cis=Сред(штрихКод_1,1,Найти(штрихКод_1,"%1D")-1);
								cis=РаскодироватьСтроку(cis,СпособКодированияСтроки.КодировкаURL);
							КонецЕсли;

				Если Число(Стр_1.GTIN.GTIN)=Число(Сред(cis,3,14)) Тогда
					Стр_1.КоличествоПолучено=Стр_1.КоличествоПолучено+1;
				КонецЕсли;
				
			КонецЦикла;
		
		Иначе
		
			Для Каждого Стр_2 Из ПД.КМИзAPI Цикл
				Если Число(Стр_1.GTIN.GTIN)=Число(Сред(Стр_2.НомерКМ,3,14)) Тогда
					Стр_1.КоличествоПолучено=Стр_1.КоличествоПолучено+1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Конеццикла;
	ПД.Записать();

	
	ДокумЗ=Документы.ЗаказМарок_ХамелеонЦРПТ.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ДокумЗ,Д,,"Номер,Статус,_Order_ID,ОшибкаОтправки");
	Для Каждого Стр_1 ИЗ Д.Товары Цикл
		Если Стр_1.КоличествоКМ>Стр_1.КоличествоПолучено Тогда
			Добав=ДокумЗ.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(Добав,Стр_1);
			Добав.КоличествоКМ=Стр_1.КоличествоКМ-Стр_1.КоличествоПолучено;
			Добав.КоличествоПолучено=0;
		КонецЕсли;
		
	КонецЦикла;
	ДокумЗ.Записать();
	
	РегДв=РегистрыСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Справочник_Документ.Установить(Д.Ссылка);
	Добав=РегДв.Добавить();
	Добав.Справочник_Документ=Д.Ссылка;
	Добав.СправочникДокумент_Меркурия=ДокумЗ.Ссылка;
	РегДв.Записать(Истина);
	
	Возврат ДокумЗ.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура СоздатьЗаказКМ(Команда)
	Если Элементы.ЗаказыТаблица.ТекущиеДанные<>Неопределено Тогда
		ООО=СоздатьЗаказКМНаСервере(Элементы.ЗаказыТаблица.ТекущиеДанные.Ссылка);
		ОткрытьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура("Ключ",ООО));
	КонецЕсли;
КонецПроцедуры

Функция ЗагрузканаСервереОтправкаВЦРПТ(Thumbprint_1,СРегистра,УжеОтправили,Организация )
Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
	HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
	HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			ИНН=ВернутьИНН(Организация );
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?inn="+ИНН+"&limit=100&offset=0");;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	Если Ответ.КодСостояния=200 Тогда
		//ЗагружаемШаблоныНасервере(Текст1,Обр.Пользователь);
		Тотал=1;
		числоЗагрузили=0;
		Первый1=0;
		Пока Первый1<Тотал Цикл
 		
			ЗагружаемГТИН(Текст1,ИНН,Тотал,числоЗагрузили,Thumbprint_1);
			Первый1=Первый1+1;
			Если Первый1*100>=Тотал Тогда
				Прервать;
			КонецЕсли;
			
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?inn="+ИНН+"&limit=100&page="+Формат(Первый1,"ЧГ="));
 			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин           
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			Если Ответ.КодСостояния<>200 Тогда
				Сообщить("Не удалось получить все GTIN");
				Прервать;
			КонецЕсли;
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			
		Конеццикла;	
	Сообщить("Загружено "+Строка(числоЗагрузили));		
	ИначеЕсли Ответ.КодСостояния=401 
		ИЛИ Ответ.КодСостояния=502  
		Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				Возврат Ложь;
		КонецЕсли
	КонецЕсли;
	
	Возврат Истина
КонецФункции


&НаКлиенте
Процедура ОбновитьГТИН(Команда,УжеОтправили=Ложь)
	ЗагрузитьGTIN(Команда);	
	
КонецПроцедуры

Процедура ЗагружаемГТИН(Текст,ИНН=Неопределено,Тотал=0,числоЗагрузили=0,Thumbprint_1,НеПроверять=Ложь)
	Если ИНН=Неопределено Тогда
		ИНН=Пользователь.Организация.ИНН
	КонецЕсли;
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Текст);
			Попытка
				NNN=ПрочитатьJSON(ЧтениеJSON);
				Тотал=NNN.total;
				
				Для Каждого Стр Из NNN.results Цикл
					Если ИНН<>Стр.INN И НеПроверять=ложь Тогда
						Продолжить;
					КонецЕсли;
					числоЗагрузили=числоЗагрузили+1;
					СпрД=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Стр.gtin));
					Если СпрД<>Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка() Тогда
						СпрД=СпрД.ПолучитьОбъект();
					Иначе
						СпрД=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
					КонецЕсли;
					Если Не ЗначениеЗаполнено(СпрД.тип) тогда
						Если Thumbprint_1.НаименованиеСтенда="Обувь" Тогда
							СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
						ИначеЕсли Thumbprint_1.НаименованиеСтенда="Табак" Тогда
							СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак;
						ИначеЕсли Thumbprint_1.НаименованиеСтенда="Альтернативный табак" Тогда
							СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак;
						ИначеЕсли Thumbprint_1.НаименованиеСтенда="Одежда" Тогда
							СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Одежда;
							
						КонецЕсли;
					КонецЕсли;
						
					СпрД.БрендТорговаяМарка=Стр.brand;
					country="";
					
					Стр.Свойство("country",country);
					Если ЗначениеЗАполнено(country) Тогда
						Если country="РОССИЙСКАЯ ФЕДЕРАЦИЯ" Тогда
							СпрД.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
						Иначе
							СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(country);
						КонецЕсли;	
//						СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(Стр.country);
					//ИначеЕсли Не ЗначениеЗаполнено(	СпрД.СтранаПроизводства) Тогда
					//	СпрД.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
					КонецЕсли;
					СпрД.GTIN=Число(Стр.gtin);
					СпрД.id=Стр.id;
					СпрД.ИННПроизводителяИмпортёра=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",Стр.inn);
					Если Не ЗначениеЗАполнено(СпрД.ИННПроизводителяИмпортёра) Тогда
						Спр_К=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
						Спр_К.ИНН=Стр.inn;
						Спр_К.Наименование=Спр_К.ИНН;
						Спр_К.Записать();
						СпрД.ИННПроизводителяИмпортёра=Спр_К.Ссылка;
						
					Конецесли;
					Стр.Свойство("materialDown",СпрД.МатериалНиза);
					Стр.Свойство("materialLining",СпрД.МатериалПодкладки);
					Стр.Свойство("materialUpper",СпрД.МатериалВерха);
					Стр.Свойство("color",СпрД.Цвет);
					
					Стр.Свойство("model",СпрД.МодельПроизводителяАртикул);
					//сТР.Свойство("name",СпрД.Наименование);
					//СпрД.Наименование=Стр.name;
					СпрД.НаименованиеТовара=Стр.name;
					
					Стр.Свойство("tnVedCode",СпрД.КодТНВЭДКороткий);
					
									
					КодПр="";
					Стр.Свойство("productType",КодПр);
					Если ЗначениеЗаполнено(КодПр) Тогда
					СпрД.ВидОбуви=Справочники.ВидОбуви_ХамелеонЦРПТ.НайтиПоКоду(Стр.productType);
					Если Не ЗначениеЗаполнено(СпрД.ВидОбуви) тогда
						СпрВ=Справочники.ВидОбуви_ХамелеонЦРПТ.СоздатьЭлемент();
						СпрВ.Код=Стр.productType;
						СпрВ.Наименование=Стр.productTypeDesc;
						СпрВ.Записать();
						СпрД.ВидОбуви=СпрВ.Ссылка;
					КонецЕсли;
				КонецЕсли;
				publicationDate=Неопределено;
				    Стр.Свойство("publicationDate",publicationDate);
					Если ЗначениеЗаполнено(publicationDate) тогда
						СпрД.ДатаПубликации=Дата(1970,1,1)+Стр.publicationDate/1000;					
					Конецесли;
					////То была обувь теперь сигареты
				packageType=Неопределено;
				    Стр.Свойство("packageType",packageType);
									Если ЗначениеЗАполнено(packageType) тогда
						Попытка
							СПрд.ТипУпаковкиСигарет=Перечисления.ТипУпаковкиСигареты_ХамелеонЦРПТ[packageType];
						Исключение
							 Если packageType="КОРОБКА/БОКС" Тогда
								СПрд.ТипУпаковкиСигарет=Перечисления.ТипУпаковкиСигареты_ХамелеонЦРПТ.box;
							КонецЕсли;
						КонецПопытки;
					КонецЕсли;
					КоличествоВГруппе=0;
					Если Стр.Свойство("innerUnitCount",КоличествоВГруппе) И
						ЗначениеЗаполненО(КоличествоВГруппе) Тогда
						СпрД.КоличествоВГруппе=КоличествоВГруппе;
					Конецесли;
				productGroup=Неопределено;
				    Стр.Свойство("productGroup",productGroup);
					Если ЗначениеЗаполнено(productGroup) тогда
						СпрГр=Справочники.ГруппаСигарет_ХамелеонЦРПТ.НайтиПоНаименованию(productGroup);
						Если Не ЗначениеЗаполнено(СпрГр) Тогда
							СпрГр=Справочники.ГруппаСигарет_ХамелеонЦРПТ.СоздатьЭлемент();
							СпрГр.Наименование=productGroup;
							СпрГр.Записать();
						КонецЕсли;
						СпрД.ГруппаСигарет=СпрГр.Ссылка;
						
					КонецЕсли;
					
					productSize=Неопределено;
				    Стр.Свойство("productSize",productSize);
					Если ЗначениеЗаполнено(productSize) тогда
						productSize=СтрЗаменить(productSize,".",",");
						СпрД.Размер=Справочники.РазмерВШтихмассовойСистеме_ХамелеонЦРПТ.НайтиПоНаименованию(productSize,Истина);
					КонецЕсли;
					
					
					
					СпрД.Записать();
				Конеццикла;
				
				//Элементы.Список.Обновить();
			Исключение
				Возврат
			КонецПопытки;
	
	
		КонецПроцедуры


//Процедура ЗагружаемГТИН(Текст,ИНН=Неопределено,Тотал=0,числоЗагрузили=0)
//	Если ИНН=Неопределено Тогда
//		ИНН=Пользователь.Организация.ИНН
//	КонецЕсли;
//	
//			ЧтениеJSON = Новый ЧтениеJSON;
//			ЧтениеJSON.УстановитьСтроку(Текст);
//			Попытка
//				NNN=ПрочитатьJSON(ЧтениеJSON);
//				Тотал=NNN.total;
//				
//				Для Каждого Стр Из NNN.results Цикл
//					Если ИНН<>Стр.INN Тогда
//						Продолжить;
//					КонецЕсли;
//					числоЗагрузили=числоЗагрузили+1;
//					
//					
//						//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
//	// Данный фрагмент построен конструктором.
//	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	Продукция_ХамелеонЦРПТ.Ссылка
//		|ИЗ
//		|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
//		|ГДЕ
//		|	Продукция_ХамелеонЦРПТ.GTIN = &GTIN";
//	
//	Запрос.УстановитьПараметр("GTIN", Число(Стр.gtin));
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	
//	Если ВыборкаДетальныеЗаписи.Количество()=0 Тогда
//					СпрД=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
//					СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
//					
//					СпрД.БрендТорговаяМарка=Стр.brand;
//					СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(Стр.country);
//					СпрД.GTIN=Число(Стр.gtin);
//					СпрД.id=Стр.id;
//					СпрД.ИННПроизводителяИмпортёра=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",Стр.inn);
//					Если Не ЗначениеЗАполнено(СпрД.ИННПроизводителяИмпортёра) Тогда
//						Спр_К=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
//						Спр_К.ИНН=Стр.inn;
//						Спр_К.Наименование=Спр_К.ИНН;
//						Спр_К.Записать();
//						СпрД.ИННПроизводителяИмпортёра=Спр_К.Ссылка;
//						
//					Конецесли;
//					Стр.Свойство("materialDown",СпрД.МатериалНиза);
//					Стр.Свойство("materialLining",СпрД.МатериалПодкладки);
//					Стр.Свойство("materialUpper",СпрД.МатериалВерха);
//					Стр.Свойство("tnVedCode",СпрД.КодТНВЭДКороткий);
//					СпрД.МодельПроизводителяАртикул=Стр.model;
//					СпрД.Наименование=Стр.name;
//					СпрД.НаименованиеТовара=Стр.name;
//					productSize=Неопределено;
//				    Стр.Свойство("productSize",productSize);
//					Если ЗначениеЗаполнено(productSize) тогда
//						СпрД.Размер=Справочники.РазмерВШтихмассовойСистеме_ХамелеонЦРПТ.НайтиПоНаименованию(productSize);
//					КонецЕсли;
//					
//					
//					
//					СпрД.ВидОбуви=Справочники.ВидОбуви_ХамелеонЦРПТ.НайтиПоКоду(Стр.productType);
//					Если Не ЗначениеЗаполнено(СпрД.ВидОбуви) тогда
//						СпрВ=Справочники.ВидОбуви_ХамелеонЦРПТ.СоздатьЭлемент();
//						СпрВ.Код=Стр.productType;
//						СпрВ.Наименование=Стр.productTypeDesc;
//						СпрВ.Записать();
//						СпрД.ВидОбуви=СпрВ.Ссылка;
//					КонецЕсли;
//					СпрД.ДатаПубликации=Дата(1970,1,1)+Стр.publicationDate/1000;					
//					СпрД.Записать();
//				

//	Иначе 	
//		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//		// Вставить обработку выборки ВыборкаДетальныеЗаписи
//	

//					СпрД=ВыборкаДетальныеЗаписи.Ссылка;
//						СпрД=СпрД.ПолучитьОбъект();
//					СпрД.БрендТорговаяМарка=Стр.brand;
//					
//					Стран="";
//					Если Стр.Свойство("country",Стран) Тогда
//						СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(Стран);
//					КонецЕсли;
//					СпрД.GTIN=Число(Стр.gtin);
//					СпрД.id=Стр.id;
//					СпрД.ИННПроизводителяИмпортёра=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",Стр.inn);
//					Если Не ЗначениеЗАполнено(СпрД.ИННПроизводителяИмпортёра) Тогда
//						Спр_К=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
//						Спр_К.ИНН=Стр.inn;
//						Спр_К.Наименование=Спр_К.ИНН;
//						Спр_К.Записать();
//						СпрД.ИННПроизводителяИмпортёра=Спр_К.Ссылка;
//						
//					Конецесли;
//					Стр.Свойство("materialDown",СпрД.МатериалНиза);
//					Стр.Свойство("materialLining",СпрД.МатериалПодкладки);
//					Стр.Свойство("materialUpper",СпрД.МатериалВерха);
//					СпрД.МодельПроизводителяАртикул=Стр.model;
//					СпрД.Наименование=Стр.name;
//					СпрД.НаименованиеТовара=Стр.name;
//					productSize=Неопределено;
//				    Стр.Свойство("productSize",productSize);
//					Если ЗначениеЗаполнено(productSize) тогда
//						СпрД.Размер=Справочники.РазмерВШтихмассовойСистеме_ХамелеонЦРПТ.НайтиПоНаименованию(productSize);
//					КонецЕсли;
//					
//					
//					СпрД.ВидОбуви=Справочники.ВидОбуви_ХамелеонЦРПТ.НайтиПоКоду(Стр.productType);
//					Если Не ЗначениеЗаполнено(СпрД.ВидОбуви) тогда
//						СпрВ=Справочники.ВидОбуви_ХамелеонЦРПТ.СоздатьЭлемент();
//						СпрВ.Код=Стр.productType;
//						СпрВ.Наименование=Стр.productTypeDesc;
//						СпрВ.Записать();
//						СпрД.ВидОбуви=СпрВ.Ссылка;
//					КонецЕсли;
//					СпрД.ДатаПубликации=Дата(1970,1,1)+Стр.publicationDate/1000;					
//					СпрД.Записать();
//				Конеццикла;
//						КонецЕсли;
//	          КонецЦикла;
//				
//				Элементы.Список.Обновить();
//			Исключение
//				Возврат
//			КонецПопытки;
//	
//		КонецПроцедуры


&НаКлиенте
Процедура ПриемкасписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
			// Вставить содержимое обработчика.
			Отказ=Истина;
КонецПроцедуры
		
Процедура ОбновитьСтатусДокумента_Списания(Ссылка,Статус,Ошибка,Заказ=неопределено)
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусДокумента_Списания(Ссылка,Статус,Ошибка,Заказ);
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьВЦРПТЗаявка(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Стр Из Элементы.ЗаказыТаблица.ВыделенныеСтроки Цикл
		Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
		"Ключ",Стр));
		Форм.ОтправитьЗаявку(Команда);
	КонецциклА;
	Элементы.ЗаказыТаблица.Обновить();
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьGTIN(Команда)
	// Вставить содержимое обработчика.
	Thumbprint_1=ПолучитьИзПользователя();	
	//СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
	//Если Значениезаполнено(Срегистра) Тогда
	//	ПоказатьПредупреждение(,"Подключение успешно установлено к ЦРПТ");
	Попытка
		Фор=ПолучитьФорму("Справочник.Продукция_ХамелеонЦРПТ.Форма.ФормаСписка");
		Фор.Загрузить(Команда);
	Исключение
	КонецПопытки;
	//Иначе
		//ПоказатьПредупреждение(,"Не удалось подключиться к ЦРПТ");
		
	//КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РасчетОстатковПриИзмененииНаСервере(РасчетОстатков)
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.РасчетОстатков=РасчетОстатков;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура РасчетОстатковПриИзменении(Элемент)
	РасчетОстатковПриИзмененииНаСервере(РасчетОстатков);
КонецПроцедуры


&НаСервереБезКонтекста
Процедура АвтоматическиОбрабатыватьОшибкуТакаяУпаковкаУжеЕстьПриИзмененииНаСервере(АвтоматическиОбрабатыватьОшибкуТакаяУпаковкаУжеЕсть)
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.АвтоматическиОбрабатыватьОшибкуТакаяУпаковкаУжеЕсть=АвтоматическиОбрабатыватьОшибкуТакаяУпаковкаУжеЕсть;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиОбрабатыватьОшибкуТакаяУпаковкаУжеЕстьПриИзменении(Элемент)
	АвтоматическиОбрабатыватьОшибкуТакаяУпаковкаУжеЕстьПриИзмененииНаСервере(АвтоматическиОбрабатыватьОшибкуТакаяУпаковкаУжеЕсть);
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьРасширениеСФайлам(Команда)
	// Вставить содержимое обработчика.
	  НачатьУстановкуРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ПослеПодключения",ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключения_1(Подключено,ДД)           Экспорт
	Если Подключено=Истина Тогда 
		ПоказатьПредупреждение(,"Расширение работы с файлами установлено")
	Иначе
		ПоказатьПредупреждение(,"Расширение работы с файлами НЕ установлено")
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключения(ДД)           Экспорт
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ПослеПодключения_1",ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьКриптографияРасширение(Команда)
	// Вставить содержимое обработчика.
	НачатьУстановкуРасширенияРаботыСКриптографией();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработкаWEBНаСервереПриИзмененииНаСервере(ОбработкаWEBНаСервере)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ОбработкаWEBНаСервере=ОбработкаWEBНаСервере;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаWEBНаСервереПриИзменении(Элемент)
	ОбработкаWEBНаСервереПриИзмененииНаСервере(ОбработкаWEBНаСервере);
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяПриСменеСтраницы(Элемент, ТекущаяСтраница)
	// Вставить содержимое обработчика.
	Элементы.ЗаказыТаблицаПолучитьКМпоAPIШапка.Видимость=
	Элементы.Основная.ТекущаяСтраница=Элементы.Заказы;
КонецПроцедуры

&НаСервере
Процедура ДобавитьПрефиксДляGS1ПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ДобавитьПрефиксДляGS1=ДобавитьПрефиксДляGS1;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПрефиксДляGS1ПриИзменении(Элемент)
	ДобавитьПрефиксДляGS1ПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НеИспользоватьТокенПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.НеИспользоватьТокен=НеИспользоватьТокен;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура НеИспользоватьТокенПриИзменении(Элемент)
	НеИспользоватьТокенПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВtxtВыделенныеЗаказы(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	ДилогВыбора=Новый ДиалогВыбораФайла(РежимдиалогаВыбораФайла.ВыборКаталога);
	ДилогВыбора.Заголовок="Выберите каталог для сохранения файлов с номерами КМ";
	Если ДилогВыбора.Выбрать() Тогда
		Каталог=ДилогВыбора.Каталог;
		
		Для Каждого Стр_1 Из Элементы.ЗаказыТаблица.ВыделенныеСтроки Цикл
			
			Номер="";
			ДвоичнД=СохранитьФайлНаДИске(Стр_1,Номер);
			
			ИмяФ=Каталог+"\"+СокрЛП(Номер)+".txt";
			ДвоичнД.Записать(ИмяФ);
		Конеццикла;
		
		
	КонецЕсли;
	
	
отказ=Истина;
КонецПроцедуры

Функция СохранитьФайлНаДИске(Ссылка,Номер)
	
	ТекстД=Новый ТекстовыйДокумент;
	Номер=Ссылка.Номер;
	//ТекстД.ДобавитьСтроку(Ссылка.Номер);
	
	
//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ КАК НомерКМ
		|ИЗ
		|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
		|ГДЕ
		|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа";
	
	Запрос.УстановитьПараметр("ДокументЗаказа", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДД = РезультатЗапроса.Выбрать();
	
	Если ДД.Количество()=0 Тогда
	
	
	
		Для Каждого ДД ИЗ Ссылка.КМИзAPI Цикл
			РР=РаскодироватьСтроку(ДД.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			ТекстД.ДобавитьСтроку(РР);
		Конеццикла;
	Иначе
		Пока ДД.Следующий() Цикл
			РР=РаскодироватьСтроку(ДД.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			ТекстД.ДобавитьСтроку(РР);
			
		КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	КонецеслИ;
	
	ИмяТекст=ПолучитьИмяВременногоФайла();
	ТекстД.Записать(ИмяТекст,КодировкаТекста.UTF8);
	ДвоичнД=Новый ДвоичныеДанные(ИмяТекст);
    Строка64=Base64Строка(ДвоичнД);
    Строка64=Прав(Строка64,СтрДлина(Строка64)-4);
    ДвоичнД=Base64Значение(Строка64);
	УдалитьФайлы(ИмяТекст);
	Возврат ДвоичнД 
	
КонецФункции

&НаСервере
Процедура ПроверкаНомеровКМПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ПроверкаНомеровКМ=ПроверкаНомеровКМ;
	РегДв.Записать(Истина);
	Элементы.ПроверкаМарок.Видимость=ПроверкаНомеровКМ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНомеровКМПриИзменении(Элемент)
	ПроверкаНомеровКМПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПечатьВыделенных(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Табл=Новый ТабличныйДокумент;
	Для Каждого Стр Из Элементы.ЗаказыТаблица.ВыделенныеСтроки Цикл
		Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
		"Ключ",Стр));
		Форм.ПечатьЭтикеток_Один(Табл);
	КонецциклА;
	Табл.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
	
	Табл.ТолькоПросмотр=Истина;
	Табл.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыВыделенныхСтрокВвод(Команда)
	// Вставить содержимое обработчика.
	
	МассивВ=Новый Массив;
	Для Каждого СТр_11 Из Элементы.ВводВОборотТаблица.ВыделенныеСтроки Цикл
		   МассивВ.Добавить(СТр_11);
	Конеццикла;
	Если МассивВ.Количество()>0 Тогда
		ОбновитьСтатусыДокументов(кОМАНДА,,,МассивВ);
	КонецЕсли;
	Элементы.ВводВОборотТаблица.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАгрегации(Команда)
	// Вставить содержимое обработчика.
	МассивЗакзаов=Новый Массив;
	Для Каждого СТР_2 Из Элементы.ЗаказыТаблица.ВыделенныеСтроки Цикл
		         МассивЗакзаов.Добавить(Стр_2);
			 Конеццикла;
			 Если МассивЗакзаов.Количество()>0 Тогда
				 
				 Агрегация=СоздатьДокументАгрегации(МассивЗакзаов);
				 ОткрытьФорму("Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Форма.ФормаДокумента",
				 Новый Структура("Ключ",Агрегация));
		КонецЕсли;	 
	КонецПроцедуры
	
Функция СоздатьДокументАгрегации(МассивЗакзаов)
	СоздатьАгр=Документы.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.СоздатьДокумент();
	СоздатьАгр.ТекущийПользователь=МассивЗакзаов[0].ТекущийПользователь;
	СоздатьАгр.Организация=МассивЗакзаов[0].Организация;
	СоздатьАгр.СтатусКМ=Перечисления.СтатусыКМДляАгрегации_ХамелеонЦРПТ.КМЭмитирован;
	СоздатьАгр.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.Формирование;
	СоздатьАгр.Дата=ТекущаяДата();
	СоздатьАгр.ЧерезСУЗ=ОтправлятьПоУмолчаниюАгрегациюЧерезСУЗ;
	
	Для Каждого Стр_1 Из МассивЗакзаов Цикл
		
		
		НетПоКМ=Ложь;
		
		ВыбратьДв=РегистрыНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.ВыбратьПоРегистратору(Стр_1);
		Пока ВыбратьДв.Следующий() Цикл
			НетПоКМ=Истина;
			Добав=СоздатьАгр.Марки.Добавить();
			Добав.cis=ВыбратьДв.СерийныйНомер;
			Добав.Марка=ВыбратьДв.СерийныйНомер;
			Добав.Продукция=ВыбратьДв.Продукция;
			
		Конеццикла;
		
		Если не НетПоКМ тогда
			
			СоздатьАгр.СтатусКМ=Перечисления.СтатусыКМДляАгрегации_ХамелеонЦРПТ.КМДоЭммитирования;
			
			ВыбратьДв=РегистрыНакопления.ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТ.ВыбратьПоРегистратору(Стр_1);
			Пока ВыбратьДв.Следующий() Цикл
				НетПоКМ=Истина;
				Добав=СоздатьАгр.Марки.Добавить();
				Добав.cis=ВыбратьДв.СерийныйНомер;
				Добав.Марка=ВыбратьДв.СерийныйНомер;
				Добав.Продукция=ВыбратьДв.Продукция;
				
			Конеццикла;
			
			
		КонецЕсли;
		
		
	Конеццикла;
	
	СоздатьАгр.Записать();
	Возврат СоздатьАгр.Ссылка
		
КонецФункции


&НаСервере
Процедура ОтправлятьПоУмолчаниюАгрегациюЧерезСУЗПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ОтправлятьПоУмолчаниюАгрегациюЧерезСУЗ=ОтправлятьПоУмолчаниюАгрегациюЧерезСУЗ;
	РегДв.Записать(Истина);
КонецПроцедуры


&НаКлиенте
Процедура ОтправлятьПоУмолчаниюАгрегациюЧерезСУЗПриИзменении(Элемент)
	ОтправлятьПоУмолчаниюАгрегациюЧерезСУЗПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ЗакрытьЗаказы(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Для Каждого Стр Из Элементы.ЗаказыТаблица.ВыделенныеСтроки Цикл
		Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
		"Ключ",Стр));
		Форм.ЗакрытьЗаказ(Команда);
	КонецциклА;
	Элементы.ЗаказыТаблица.Обновить();
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьСтатусыЗаявок(Команда)
	// Вставить содержимое обработчика.
	Thumbprint_1=ПолучитьИзПользователя();	

	АдресРаздробить=Thumbprint_1.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
		
	
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
	
//	Если ОбработкаWEBНаСервере Тогда
		//ЗагрузканаСервереОтправитьЗаявка_Обувь(Thumbprint_1,Тело,Адрес,Порт,Защищ);
		
		
//	Иначе
		
		

СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
							СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
									СерийныйНомер=СтруктураНастроек.СерийныйНомер;
							
								Если Не ЗначениеЗаполнено(СРегистра)  Тогда
									СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
								Иначе
								   
										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
											Прокси=Новый ИнтернетПрокси;
											Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										Иначе
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										КонецЕсли;
										
										HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
										HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
										HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
										//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
										///Константин           
										Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
										//Текст1=Ответ.ПолучитьТелоКакСтроку();
										Если Ответ.КодСостояния<>200 Тогда
											СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
										КонецЕсли;
											
								КонецЕсли;
				Если НЕ ЗначениеЗАполнено(СРегистра) тогда
					Сообщить("Не удалось подключиться к ЦРПТ");
					Возврат;
				КонецЕсли;
			
				
				
				
				
				
				Если Thumbprint_1.ПараметрРаботы="Тестовый" Тогда
					
							Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
									Прокси=Новый ИнтернетПрокси;
									Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
								
									HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,12015,,,Прокси,Thumbprint_1.Таймаут,Защищ);
								Иначе
									HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,12015,,,,Thumbprint_1.Таймаут,Защищ);
								КонецЕсли;
												
				Иначе
				
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(СтрЗаменить(Адрес,"suz","suzsrv"),,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(СтрЗаменить(Адрес,"suz","suzsrv"),,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;
			
КонецЕсли;
			
		
			
		HTTPЗапрос=Новый HTTPЗапрос("signin");
	//	HTTPЗапрос=Новый HTTPЗапрос("api/orders");
	
	
	
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0");
	
	Чтен_Подкл=Новый  ЗаписьJSON;
	Чтен_Подкл.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен_Подкл.ЗаписатьНачалоОбъекта();
	Чтен_Подкл.ЗаписатьИмяСвойства("token");
	Чтен_Подкл.ЗаписатьЗначение(СРегистра);
	Чтен_Подкл.ЗаписатьКонецОбъекта();
	Текст_Подкл=Чтен_Подкл.Закрыть();
	Текст_Подкл=СтрЗаменить(Текст_Подкл,Символы.ПС,"");
	Текст_Подкл=СтрЗаменить(Текст_Подкл,Символы.ВК,"");
	

	HTTPЗапрос.УстановитьТелоИзСтроки(Текст_Подкл);
	
	Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("PUT",HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	
			
		НСтр=Сред(Текст1,Найти(Текст1,"?sid=")+5);
		НСтр=Сред(НСтр,1,Найти(НСтр,"""")-1);
			
			
		Куки="certSerial="+Thumbprint_1.Thumbprint_1+"; org.springframework.web.servlet.i18n.CookieLocaleResolver.LOCALE=ru; count=2; JSESSIONID="+НСтр+"; tokenPart1="+Сред(СРегистра,1,4000)+"; "+
		"tokenPart2="+Сред(СРегистра,4001) ;
		
					Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;

			
			
			
			
			
			HTTPЗапрос = Новый HTTPЗапрос(); //"static/1555676332000/js/main/preload.js");
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
		
			
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
	
			Текст=Новый ТекстовыйДОкумент;
			Текст.УстановитьТекст(Текст1);
			Для сч=1 По Текст.КоличествоСтрок() Цикл
				ПолучСтр=Текст.ПолучитьСтроку(сч);
				Если Найти(ПолучСтр,"preload.js")>0 Тогда
					Адрес_1=Сред(получСтр,Найти(получСтр,"src=""/")+6);
					Адрес_1=Сред(Адрес_1,1,Найти(Адрес_1,""">")-1);
					Прервать;
				КонецЕсли;
			Конеццикла;
			
			Если Адрес_1=Неопределено Тогда
				
					HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/orders?limit=1000&skip=0"); //"static/1555676332000/js/main/preload.js");
					HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
				
					
				Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
				Текст1=Ответ.ПолучитьТелоКакСтроку();
				
				
		Иначе
				HTTPЗапрос = Новый HTTPЗапрос(Адрес_1); //"static/1555676332000/js/main/preload.js");
			
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			Токен=Ответ.ПолучитьТелоКакСтроку();
			Токен=Сред(Токен,Найти(Токен,"'clientToken', """)+16);
			Токен=Сред(Токен,1,Найти(Токен,"""")-1);
			
	
		//businessOrders/list?skip=0&limit=10			
			
				HTTPЗапрос=Новый HTTPЗапрос("businessOrders/list?skip=0&limit=100");
	//	HTTPЗапрос=Новый HTTPЗапрос("api/orders");
		
	HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	Если НЕ НеИспользоватьТокен Тогда
		HTTPЗапрос.Заголовки.Вставить("clientToken",Токен);
	КонецЕсли;
	HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
	HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0");
	HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
	HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
	

	

	Адрес11=Адрес;
	Если ЗначениеЗаполнено(Порт) Тогда
		Адрес11=Адрес11+":"+Формат(Порт,"ЧГ=");
	КонецЕслИ;
	HTTPЗапрос.Заголовки.Вставить("Host",Адрес11);
	//HTTPЗапрос.УстановитьТелоИзСтроки(Текст_Подкл);

	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	КонецЕсли;
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);	
	ЗаписатьСтатусВДокументЗаявки(NNN);
	
	//КонецЕсли;
		
	
	
	Элементы.ЗаказыТаблица.Обновить();;
	
КонецПроцедуры


Процедура ЗаписатьСтатусВДокументЗаявки(NNN)
	Попытка
		
		Для Каждого Стр_112 Из NNN.orderSummaryInfos Цикл
			ДокумЗаяв=Документы.ЗаказМарок_ХамелеонЦРПТ.НайтиПоРеквизиту("_Order_ID",Стр_112.orderId);
			Если ЗначениеЗаполнено(ДокумЗаяв) Тогда
				Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВПроцессе;
				Если Стр_112.orderStatus="CREATED" Тогда
					Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен;
				ИначеЕсли Стр_112.orderStatus="READY" Тогда
					Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство;
				КонецЕсли;
				
				ДДПр=ДокумЗаяв.ПолучитьОбъект(); 
				ДДПр.Статус=Статус;	
				ДДПр.Записать();
			КонецЕсли;
			
		Конеццикла;
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаказыИзЦРПТ(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Форм=ЭтаФорма;
	Если Форм.Организации.Количество()=0 Тогда
		Форм.ПодключитьсяКЦРПТ(Команда,Ложь);
	КонецЕсли;
	//Текст=Форм.Пользователь;
	//Форм.Пользователь=Объект.ТекущийПользователь;
	ПараметрыДлякилента=Неопределено;
	Если Форм.НаКлиенте(ПараметрыДлякилента) Тогда
//		Форм.Пользователь=Текст;
	Thumbprint_1=ПараметрыДлякилента;
			
				АдресРаздробить=ПараметрыДлякилента.АдресСУЗ;
				Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
				Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
				Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
				Порт=Сред(Порт,Найти(Порт,":")+1);
				Попытка
					Порт=число(Порт);
				Исключение
					Порт=Неопределено;
				КонецПопытки;
				
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			ПоказатьПредупреждение(,"В пользователе не заполнен адрес СУЗ");
			Возврат;
			
		КонецЕсли;
		
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
		
			Срегистра="";
			СерийныйНомер="";
	  	Куки=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитькукиВСУЗ(Thumbprint_1,,Срегистра,СерийныйНомер);
			
		Если Не ЗначениеЗаполнено(Куки) 
			ИЛИ Не ЗначениеЗаполнено(Срегистра) ИЛИ Не ЗначениеЗаполнено(СерийныйНомер) 
			Тогда
			
		//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(Thumbprint_1.Thumbprint_1,"");
		//	Если УжеОтправили<>Истина Тогда
		//		 ПолучитьТокенИИД(Команда,Истина)
		//	КонецЕсли;
			Возврат;
			
		КонецЕсли;

			Срегистра="";
			СерийныйНомер="";
	  	Куки=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитькукиВСУЗ(Thumbprint_1,,Срегистра,СерийныйНомер);
			
		Если Не ЗначениеЗаполнено(Куки) 
			ИЛИ Не ЗначениеЗаполнено(Срегистра) ИЛИ Не ЗначениеЗаполнено(СерийныйНомер) 
			Тогда
			
		//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(Thumbprint_1.Thumbprint_1,"");
		//	Если УжеОтправили<>Истина Тогда
		//		 ПолучитьТокенИИД(Команда,Истина)
		//	КонецЕсли;
			Возврат;
			
		КонецЕсли;




		Если Ложь Тогда
		//		Если НЕ ЗагрузканаСервереПолучитьКМИзФЗШ_Шины(ПараметрыДлякилента,Адрес,Порт,Защищ) Тогда
		//					ПоказатьПредупреждение(,"Не удалось подключиться к СУЗ");
		//	
		//		КонецЕсли;
				
				
			Иначе
				
					Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
					
						HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,,Защищ);
					Иначе
						HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,,Защищ);
					КонецЕсли;
					
											//Если ОБъект.СУЗОбувь Тогда
											
											
											
//								HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
//								Формат(Получить,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
							//Иначе
							//	HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
							//	Формат(Получить,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								
							//КонецЕслИ;
							
							
							
							
							
							
							//ИдентификаторСУЗ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(ПараметрыДлякилента);
							 // HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилxента.СайтКСУЗ+"/orders?omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
							 
							 СайтКСУЗ=Врег(ПараметрыДлякилента.СайтКСУЗ);
							 Если    СайтКСУЗ="LP" Тогда
								 СайтКСУЗ="LIGHT"
							Конецесли;
							 
							 HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/orders?limit=100&skip=0&productGroup="+СайтКСУЗ);
							 

							 
							 
							 ТокенСУЗ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(ПараметрыДлякилента);
							
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
								HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
								
								Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
								ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
								
								NNNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);
								
								orderSummaryInfos="";
								Если NNNN.Свойство("orderSummaryInfos",orderSummaryInfos) Тогда
									Для Каждого Стр Из orderSummaryInfos  Цикл
										HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/orders/"+Стр.orderid); //"static/1555676332000/js/main/preload.js");
										HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
										HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
										
											
										Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
										Текст1=Ответ.ПолучитьТелоКакСтроку();
										
										NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(СтрЗАменить(Текст1,"@class","class"));
										
										
										HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/orders/"+Стр.orderid+"/buffer"); //"static/1555676332000/js/main/preload.js");
										HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
										HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
										
											
										Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
										Текст1=Ответ.ПолучитьТелоКакСтроку();
										
										NNN_2=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(СтрЗАменить(Текст1,"@class","class"));
										
										
										СоздатьДокументНасервере(NNN_2,NNN_1,Форм.Организации[0].Организация,Форм.Пользователь);
									//	Возврат;
										
								Конеццикла;
							Конецесли;
									
								
								
			КонецЕсли;		
	
	
КонецЕсли;	
	Элементы.ЗаказыТаблица.Обновить();	
КонецПроцедуры


Процедура СоздатьДокументНасервере(NNN_2,Стр,Организация,Пользователь)
	
	                                 	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказМарок_ХамелеонЦРПТ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказМарок_ХамелеонЦРПТ КАК ЗаказМарок_ХамелеонЦРПТ
		|ГДЕ
		|	ПОДСТРОКА(ЗаказМарок_ХамелеонЦРПТ._Order_ID, 1, 1000) = &_Order_ID";
	
 	Запрос.УстановитьПараметр("_Order_ID", Стр.id);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если НЕ ВыборкаДетальныеЗаписи.Следующий() Тогда
		                   orderInfo="";
		Если Стр.Свойство("orderInfo",orderInfo) Тогда
		Докум=Документы.ЗаказМарок_ХамелеонЦРПТ.СоздатьДокумент();
		Докум._Order_ID=Стр.id;
		Докум.Дата=дата(1970,1,1,1,0,0) + стр.createdTimestamp/1000;
		Докум.Организация=Организация;
		Докум.ТекущийПользователь=Пользователь;
		
		Докум.ШаблонЭтикетки=справочники.ШаблоныЭтикеток_ХамелеонЦРПТ.НайтиПоКоду("000000004");
		Докум.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен;
		                   сч=0;
		Для Каждого Стр_1 Из orderInfo.products Цикл
			Добав=Докум.Товары.Добавить();
			
			Добав.GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Стр_1.gtin));
			Если Не ЗначениеЗаполнено(Добав.GTIN) тогда
				СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
				СпрПр.GTIN=Число(Стр_1.gtin);
				СпрПр.Наименование=xmlString(Число(Стр_1.gtin));
				СпрПр.НаименованиеТовара=xmlString(Число(Стр_1.gtin));
				СпрПр.Записать();
				Добав.GTIN=СпрПр.Ссылка
			КонецЕсли;
			Если NNN_2[Сч].totalCodes=-1 Тогда
				Добав.КоличествоКМ= Стр_1.quantity;
				Добав.КоличествоПолучено=0;
			Иначе
				Добав.КоличествоКМ= NNN_2[Сч].totalCodes;
				Добав.КоличествоПолучено=NNN_2[Сч].totalPassed;
				Если ЗначениеЗаполнено(Добав.КоличествоПолучено) Тогда
					Добав.ПоследнийБлок=xmlString(Добав.КоличествоПолучено);
				КонецЕсли;
			КонецЕсли;
			Добав.СтатусСтроки=NNN_2[Сч].bufferStatus;//Стр_1.bufferStatus;
			Сч=Сч+1;
			Добав.СпособФормированияСН=Перечисления.СпособФормированияСН_ХамелеонЦРПТ.ОператорИСМП;
			Добав.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаТовар;
				Если Добав.GTIN.СтранаПроизводства.Альфа2="RU" Тогда
						Добав.СпособВыпускаТоваров="Производство в РФ";
					Иначе
								Добав.СпособВыпускаТоваров="Ввезен в РФ";
						
							КонецЕсли;
							
							                             codeTnVed="";
							Если Стр_1.Свойство("codeTnVed",codeTnVed) Тогда
								Добав.КодТНВЭД=Стр_1.codeTnVed;
							КонецЕсли;
			
						Конеццикла;
						
						Если Докум.Товары.Количество()>0 Тогда
							
							товар=Докум.Товары[0].GTIN;
							Если Товар.СтранаПроизводства.Код="643"
								ИЛИ Не ЗначениеЗаполнено(товар.СтранаПроизводства) Тогда
								Докум.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ПроизведенВРФ;
							Иначе
								Докум.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ВвезенВРФ;
							КонецЕсли;
							
							
						КонецЕсли;
						
	Докум.Записать(РежимЗаписиДокумента.Запись);
						КонецЕсли;
		
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
КонецПроцедуры


&НаКлиенте
Процедура ПечатьСПОКакВЦРПТ(Команда)
	// Вставить содержимое обработчика.
	
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Счетч=1;
			Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводПервогоЧисла_ЦРПТ",ЭтаФорма));
	Форм.Число=Счетч;
	Форм.Заголовок="Начать печать с № КМ";
//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводПервогоЧисла_ЦРПТ",ЭтаФорма),Счетч,"Начать печать с № КМ");
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводПервогоЧисла_ЦРПТ(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
			Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводВторогоЧисла_ЦРПТ",ЭтаФорма,РР));
	Форм.Число=30;
	Форм.Заголовок="Допечатать указанное количество № КМ";
 		//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводВторогоЧисла_ЦРПТ",ЭтаФорма,РР),30,"Допечатать указанное количество № КМ");
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводВторогоЧисла_ЦРПТ(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
		Таб=Новый ТабличныйДокумент;
		
		Для Каждого Стр Из Элементы.ЗаказыТаблица.ВыделенныеСтроки Цикл
			Если ЗначениеЗаполненО(КоличествоЯдерДляГенерацииDataMatrix) тогда
				Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
				"Ключ",Стр));
				Таб = Форм.ПечатьЭти_1_ЦРПТ_Функция(ДД,РР);
				Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
				Таб.Показать();
				
				//Таб = ПолучитьИзВременногоХранилища(ПечатьЭти_1_ЦРПТ_Функция(ДД,РР));
				//Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
				
				//Таб.Показать();
				
			Иначе
			
				Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
				"Ключ",Стр));
				Форм.ПечатьЭти_1_ЦРПТ(Таб,ДД,РР);
				
			Конецесли;
			//Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
			//"Ключ",Стр));
			//Форм.ПечатьЭти_1_ЦРПТ(Таб,ДД,РР);
//			Таб.ВывестиГоризонтальныйРазделительСтраниц();
			//Форм.ПечатьЭтикеток(Команда);
		КонецциклА;
		Если НЕ ЗначениеЗаполненО(КоличествоЯдерДляГенерацииDataMatrix) тогда
			Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";

			Таб.Показать();
		КонецЕсли;
//		Элементы.ЗаказыТаблица.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСПООстаток(Команда)
		
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Счетч=1;
			Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводПервогоЧисла_Остаток",ЭтаФорма));
	Форм.Число=Счетч;
	Форм.Заголовок="Начать печать с № КМ";
//	ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводПервогоЧисла_Остаток",ЭтаФорма),Счетч,"Начать печать с № КМ");
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводПервогоЧисла_Остаток(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
			Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводВторогоЧисла_Остаток",ЭтаФорма,РР));
	Форм.Число=30;
	Форм.Заголовок="Допечатать указанное количество № КМ";
// 		ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводВторогоЧисла_Остаток",ЭтаФорма,РР),30,"Допечатать указанное количество № КМ");
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводВторогоЧисла_Остаток(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
		Таб=Новый ТабличныйДокумент;
		
		Для Каждого Стр Из Элементы.ЗаказыТаблица.ВыделенныеСтроки Цикл
			Если ЗначениеЗаполненО(КоличествоЯдерДляГенерацииDataMatrix) тогда
				Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
				"Ключ",Стр));
				Таб = Форм.ПечатьЭти_1_Остатки_Функция(ДД,РР);
				
				Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
			
				Таб.Показать();
				
				//Таб = ПолучитьИзВременногоХранилища(ПечатьЭти_1_ЦРПТ_Функция(ДД,РР));
				//Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
				
				//Таб.Показать();
				
			Иначе
			
				Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
				"Ключ",Стр));
				Форм.ПечатьЭти_1_Остатки(Таб,ДД,РР);
				
			Конецесли;
//			Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
//			"Ключ",Стр));
//			Форм.ПечатьЭти_1_Остатки(Таб,ДД,РР);
//			Таб.ВывестиГоризонтальныйРазделительСтраниц();
			//Форм.ПечатьЭтикеток(Команда);
		КонецциклА;
		Если НЕ ЗначениеЗаполненО(КоличествоЯдерДляГенерацииDataMatrix) тогда
			Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
		
			Таб.Показать();
		Конецесли;
//		Элементы.ЗаказыТаблица.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСПоPDF(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Счетч=1;
			Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводПервогоЧисла_PDF",ЭтаФорма));
	Форм.Число=Счетч;
	Форм.Заголовок="Начать печать с № КМ";
//	ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводПервогоЧисла_PDF",ЭтаФорма),Счетч,"Начать печать с № КМ");
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводПервогоЧисла_PDF(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
			Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводВторогоЧисла_PDF",ЭтаФорма,РР));
	Форм.Число=30;
	Форм.Заголовок="Допечатать указанное количество № КМ";
 		//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводВторогоЧисла_PDF",ЭтаФорма,РР),30,"Допечатать указанное количество № КМ");
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводВторогоЧисла_PDF(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
		Таб=Новый ТабличныйДокумент;
	Режим=РежимДиалогаВыбораФайла.ВыборКаталога;
			
	нДиалог= НОвый ДиалогВыбораФайла(Режим);
		нДиалог.Заголовок="Выберите каталог для сохранения КМ" ;
		Если нДиалог.Выбрать() Тогда
		
		Для Каждого Стр Из Элементы.ЗаказыТаблица.ВыделенныеСтроки Цикл
			
				
			
			//Табл.Записать(,ТипФайлаТабличногоДокумента.PDF)
			Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
			"Ключ",Стр));
			НомерТТН="";
			Форм.ПечатьЭти_1_ЦРПТ(Таб,ДД,РР,НомерТТН);
			//Номер_1=0;
			
			//Для Каждого Стр Из Табл Цикл
			//	Номер_1=Номер_1+1;
			//	НомерСтт=СтроковыеФункцииКлиентСервер.ДополнитьСтроку(xmlstring(Номер_1),5,"0");
			Таб.Записать(нДиалог.Каталог+"\"+НомерТТН+"_c_"+Формат(ДД,"ЧГ=")+"_по_"+Формат(РР,"ЧГ=")+".pdf",ТипФайлаТабличногоДокумента.PDF);
			//КонецЦикла;
			
//			Таб.ВывестиГоризонтальныйРазделительСтраниц();
			//Форм.ПечатьЭтикеток(Команда);
		КонецциклА;
	КонецЕсли;
//		Элементы.ЗаказыТаблица.Обновить();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура Декорация1Нажатие(Элемент)
	// Вставить содержимое обработчика.
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ПослеЗапускаПр",Этаформа),"https://честныйзнак.рф/potrebitelyam/");
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаПр(РР,ДД) Экспорт
КонецПроцедуры


&НаСервере
Процедура ПоказыватьОплатуЗаказаЗаКМПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ПоказыватьОплатуЗаказаЗаКМ=ПоказыватьОплатуЗаказаЗаКМ;
	РегДв.Записать(Истина);
	ВидимостьОплатаЗаЗаказКМ();
КонецПроцедуры

Функция ВидимостьОплатаЗаЗаказКМ()
	Элементы.ОплатаЗаКМ.Видимость=ПоказыватьОплатуЗаказаЗаКМ;
	Элементы.ТСД.Видимость=ПоказыватьВкладкуТСД;
	
	Если ПолучатьКМВФоне=Истина Тогда
		Элементы.ЗаказыТаблицаПолучитьКМпоAPI.Заголовок="Эмитировать КМ в фоновом режиме (Получить КМ по выделенным через API) обновить статус для типографии";
		
	Иначе
		Элементы.ЗаказыТаблицаПолучитьКМпоAPI.Заголовок="Эмитировать КМ(Получить КМ по выделенным через API) обновить статус для типографии"
	Конецесли;
	
КонецФункции

&НаКлиенте
Процедура ПоказыватьОплатуЗаказаЗаКМПриИзменении(Элемент)
	ПоказыватьОплатуЗаказаЗаКМПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ОплатаЗаКМ_ТаблицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
//	Если Организации.Количество()=0 Тогда
//		ПодключитьсяКЦРПТ(Элемент,ЛОжь);
//	КонецЕсли;
//	Если                         Организации.Количество()>0 Тогда
		Если  Копирование Тогда
			Отказ = Истина;
			Парам = Новый Структура;
			Парам.Вставить("Организация", ВернутьОр());
			Парам.Вставить("Пользовтаель", Пользователь);
			Парам.Вставить("ЗначениеКопирования",Элемент.ТекущиеДанные.Ссылка);
			ОткрытьФорму("Документ.ОплатаЗаКМ_ХамелеонЦРПТ.ФормаОбъекта", Парам,ЭтаФорма);
		Иначе
			Отказ = Истина;
			Парам = Новый Структура;
			Парам.Вставить("Организация", ВернутьОр());
			Парам.Вставить("Пользовтаель", Пользователь);
			ОткрытьФорму("Документ.ОплатаЗаКМ_ХамелеонЦРПТ.ФормаОбъекта", Парам,ЭтаФорма);
		КонецЕсли;
//	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура РаботатьНаV1ПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.РаботатьНаV1=РаботатьНаV1;
	РегДв.Записать(Истина);
КонецПроцедуры


&НаКлиенте
Процедура РаботатьНаV1ПриИзменении(Элемент)
	РаботатьНаV1ПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Процедура ФормироватьАгрегациюПоGTINПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ФормироватьАгрегациюПоGTIN=ФормироватьАгрегациюПоGTIN;
	РегДв.Записать(Истина);
КонецПроцедуры


&НаКлиенте
Процедура ФормироватьАгрегациюПоGTINПриИзменении(Элемент)
	ФормироватьАгрегациюПоGTINПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Процедура ОтправлятьОбувьЧерезAPIПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ОтправлятьОбувьЧерезAPI=ОтправлятьОбувьЧерезAPI;
	РегДв.Записать(Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура ОтправлятьОбувьЧерезAPIПриИзменении(Элемент)
	ОтправлятьОбувьЧерезAPIПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Процедура ПриЗаполненииОтгрузкиНеУчитыватьОстатокПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ПриЗаполненииОтгрузкиНеУчитыватьОстаток=ПриЗаполненииОтгрузкиНеУчитыватьОстаток;
	РегДв.Записать(Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура ПриЗаполненииОтгрузкиНеУчитыватьОстатокПриИзменении(Элемент)
	ПриЗаполненииОтгрузкиНеУчитыватьОстатокПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВФоне(Команда)
	// Вставить содержимое обработчика.
	Thumbprint_1=ПолучитьИзПользователя();	
	СерийныйНомер="";

СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
							СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
									СерийныйНомер=СтруктураНастроек.СерийныйНомер;
							
								Если Не ЗначениеЗаполнено(СРегистра)  Тогда
									СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
								Иначе
								   
										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
											Прокси=Новый ИнтернетПрокси;
											Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										Иначе
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										КонецЕсли;
										
										HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
										HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
										HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
										//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
										///Константин           
										Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
										//Текст1=Ответ.ПолучитьТелоКакСтроку();
										Если Ответ.КодСостояния<>200 Тогда
											СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
										КонецЕсли;
											
								КонецЕсли;
		
	
	Aj=ОбновитьВФоне(Thumbprint_1,СерийныйНомер);
	Если Aj="ФОН" Тогда
		Элементы.ЗапщуенаСинхронизация.Видимость=Истина;
		Элементы.ЗапщуенаСинхронизация.Заголовок="Запущено фоновое обновление статусов";
		Попытка
			ПодключитьОбработчикОжидания("ПроверкаФоновогоЗадания",30,Ложь);
		Исключение
		КонецПопытки;;
	ИначеЕсли Aj=Истина Тогда
		Элементы.ЗапщуенаСинхронизация.Видимость=Истина;
		
		Элементы.ЗапщуенаСинхронизация.Заголовок="Запущено фоновое обновление статусов";
		Попытка
			ПодключитьОбработчикОжидания("ПроверкаФоновогоЗадания",30,Ложь);
		Исключение
		КонецПопытки;;
		
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьФоновоеЗадание()
	Ключ="СинхронизацияДанных_ФоновоеЗадания_ОбновлениеСТАТУСОВВФОНЕ";
	Попытка
		АААААА=ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ",Ключ));
		
		Для Каждого Стр Из АААААА Цикл
			Если Стр.Состояние= СостояниеФоновогоЗадания.Активно Тогда
				
				Возврат Истина;
			КонецЕслИ;
		Конеццикла;;
	Исключение
		Возврат Истина;
	КонецПопытки;
	Возврат ЛожЬ;
КонецФункции

&НаКлиенте
Процедура ПроверкаФоновогоЗадания()
	Если НЕ ЕстьФоновоеЗадание() Тогда
				Элементы.ЗапщуенаСинхронизация.Видимость=Ложь;

		Элементы.ЗапщуенаСинхронизация.Заголовок="";
		Попытка
			
			ОтключитьОбработчикОжидания("ПроверкаФоновогоЗадания");
			ОбновитьИнтерфейс();
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры


Функция ОбновитьВФоне(Thumbprint_1,СерийныйНомер)
	Ключ="СинхронизацияДанных_ФоновоеЗадания_ОбновлениеСТАТУСОВВФОНЕ";
	Попытка
		АААААА=ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ",Ключ));
		
		Для Каждого Стр Из АААААА Цикл
			Если Стр.Состояние= СостояниеФоновогоЗадания.Активно Тогда
				
				Возврат "ФОН";
			КонецЕслИ;
		Конеццикла;;
	Исключение
	КонецПопытки;
	Попытка 
		//Thumbprint_1=ПолучитьИзПользователя();	
		//СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		
		
		ММ=Новый Массив;
		ММ.Добавить(Thumbprint_1);
		ММ.Добавить(Пользователь);
		ММ.Добавить(СерийныйНомер);
		
	
		АдресФ=ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусыДокументовСервер",
		ММ,Ключ);
		
		Возврат Истина;

	Исключение
		сообщить("Не получилось запустить синхронизацию в фоне "+ОписаниеОшибки());
		//ЗагружаемДанныеНаСервере(ПланОбмена);
		
		Возврат Ложь;
		//ОтправитьНаСервере(ПланОбмена);
	КонецПопытки;
	
	
КонецФункции


Функция ВывестиТабличнД(Ссылк,ОткрытьФорму_1,Сообщения)
		
	Возврат  ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВывестиТабличнД(Ссылк,ОткрытьФорму_1,Сообщения,ПриПроверкеСхемыПриОтгрузкеЕслиОшибкаНеФормироватьФайл);	
	
КонецФункции

Функция ПолучитьСерийникиДЛяВывода(Отгрузка)
	МассивCis=Новый массив;
	Для Каждого Стр_ иЗ Отгрузка.СерийныеНомера Цикл
		Если Стр_.типУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
			МассивCis.Добавить(Стр_.cis);
		КонецЕсли;
	Конеццикла;
	
	возврат МассивCis;
Конецфункции

Функция СохранитьИнформациюНаСервере(Отгрузка)
	//РегДв=РегистрыСведений.ИсторияПоCIS_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	//РегДв.Отбор.ДОкумент.Установить(Отгрузка);
	//регДв.Записать(Истина);
	Для Каждого Стр_1 Из ДеревоКМ.ПолучитьЭлементы() Цикл
		РекурсияСохранить(Стр_1,Отгрузка);
	Конеццикла;
	
КонецФункции

Процедура  РекурсияСохранить(Стр_1,ТекущийОбъект)
	
	
	Для Каждого Стр_2 Из Стр_1.ПолучитьЭлементы() Цикл
		РегДв=РегистрыСведений.ИсторияПоCIS_ХамелеонЦРПТ.СоздатьНаборЗаписей();
		РегДв.Отбор.ДОкумент.Установить(ТекущийОбъект.Ссылка);
		РегДв.Отбор.НомерКороба.Установить(Стр_2.НомерКМ);
		Добав=РегДв.Добавить();
		Добав.НомерКороба=Стр_2.НомерКМ;
		Добав.Документ=ТекущийОбъект.Ссылка;
		Добав.cis=Стр_1.cis;
		Добав.Статус=Стр_2.Статус;
		РегДв.Записать(Истина);
		
		РекурсияСохранить(Стр_2,ТекущийОбъект)
	Конеццикла;
	
КонецПроцедуры


&НаКлиенте
Процедура СформироватьФайлXMLЭДО(Команда)
	// Вставить содержимое обработчика.
	//Если Элементы.Отгрузка_Список.ТекущиеДанные=Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	
	ДиалогФыбораФайла								=	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогФыбораФайла.Фильтр="Файл xml (*.xml)|*.xml";
	ДиалогФыбораФайла.Заголовок						=	"Выберите каталог для сохранения";
	ДиалогФыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогФыбораФайла.Расширение					=	"xml";
	ДиалогФыбораФайла.ИндексФильтра					=	0;
	ДиалогФыбораФайла.ПолноеИмяФайла				=	"";
	ДиалогФыбораФайла.ПроверятьСуществованиеФайла	=	Истина;
	
	Подразделение=НеопределенО;
	ДиалогФыбораФайла.Показать(Новый ОписаниеОповещения("ВыборКаталогаДляСохранения",ЭтаФорма));
КонецПроцедуры


&НаКлиенте
Процедура ВыборКаталогаДляСохранения(ВыборЗагрExcel,ДД) Экспорт
	Если ЗначениеЗАполнено(ВыборЗагрExcel)
		И ВыборЗагрExcel.Количество()>0  тогда
		Для Каждого Отгрузка_1 Из Элементы.Отгрузка_Список.ВыделенныеСтроки Цикл
			
			//Отгрузка_1=Элементы.Отгрузка_Список.ТекущиеДанные.Ссылка;
			СохранитьXMLЭДО(Отгрузка_1,ВыборЗагрExcel)	
		Конеццикла;
	КонецЕсли;
КонецПроцедуры
	
&НаКлиенте
Процедура СохранитьXMLЭДО(Отгрузка_1,ВыборЗагрExcel) Экспорт
	Если ПриФормированииXMLНеПолучитьИнформациюОКМВоВложении=Ложь Тогда
		МассивCis=ПолучитьСерийникиДЛяВывода(Отгрузка_1);
		ДеревоКМ.ПолучитьЭлементы().Очистить();
		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюПоКМ_Массив(ДеревоКМ,МассивCis,Пользователь);
		СохранитьИнформациюНаСервере(Отгрузка_1);
	КонецЕсли;
	
	ОткрытьФорму_1=Ложь;
	Сообщения=Неопределено;
	Табл=ВывестиТабличнД(Отгрузка_1,ОткрытьФорму_1,Сообщения);
	
	
	Если Табл=Неопределено Тогда
		
		Если ОткрытьФорму_1=Истина Тогда
			ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ФормаСообщенийПользователю", Новый Структура("Сообщения", Сообщения));
		КонецЕсли;
		
		Сообщить("Сформированный файл не соответствует схеме, исправьте документ и сформируйте заново");
		возврат;	
	КонецЕсли;
	
	РР=Табл;
	Если ЗначениеЗАполнено(ВыборЗагрExcel)
		И ВыборЗагрExcel.Количество()>0  тогда
	
		ИмяФ=ВыборЗагрExcel[0];
		ИмяФ=ИмяФ+"\"+РР.ИмяФайла;
		
		РР.Текстовыйдо.НачатьЗапись(Новый ОписаниеОповещения("ПослеЗаписиФайла",ЭтаФорма,ИмяФ),ИмяФ,"windows-1251");
		//РР.НачатьЗапись(,ИмяФ,ТипФайлаТабличногоДокумента.XLSX);
		//РР.НачатьЗапись(,Сред(ИмяФ,1,СтрДлина(ИмяФ)-1),ТипФайлаТабличногоДокумента.XLS)
		
	КонецЕсли
	
КонецПроцедуры

&наКлиенте
Процедура ПослеЗаписиФайла(РР,ДД) Экспорт
	
//	Если РР=Истина Тогда
//		ДвоичнД=Новый ДвоичныеДанные(ДД);
//		НеПрошлаПроверка(ДвоичнД);
//	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НеИспользоватьCAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLYПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.НеИспользоватьCAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY=НеИспользоватьCAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура НеИспользоватьCAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLYПриИзменении(Элемент)
	НеИспользоватьCAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLYПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриПроверкеСхемыПриОтгрузкеЕслиОшибкаНеФормироватьФайлПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ПриПроверкеСхемыПриОтгрузкеЕслиОшибкаНеФормироватьФайл=ПриПроверкеСхемыПриОтгрузкеЕслиОшибкаНеФормироватьФайл;
	РегДв.Записать(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПроверкеСхемыПриОтгрузкеЕслиОшибкаНеФормироватьФайлПриИзменении(Элемент)
	ПриПроверкеСхемыПриОтгрузкеЕслиОшибкаНеФормироватьФайлПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВыделенныеДокументы(Команда)
	// Вставить содержимое обработчика.
	МассивОбновляем=Новый Массив;
	Для Каждого Стр_1 Из Элементы.Приемкасписок.ВыделенныеСтроки Цикл
		Докум=ВернутьНомерДокумента(Стр_1);
		Если Докум<>Неопределено тогда
			МассивОбновляем.Добавить(Докум);
		КонецЕсли;
	Конеццикла;
	  ОбновитьПриход(МассивОбновляем)
КонецПроцедуры
	
	
&НаКлиенте
Процедура ОбновитьПриход(МассивОбновляем,УЖеОтправили=Ложь)	 Экспорт
	
	Thumbprint_1=ПолучитьИзПользователя();	
	
	
	
	
	
	Если ОбработкаWEBНаСервере Тогда
	//	ОбновитьСтатусыДокументовСервер(Thumbprint_1,ВернутьДокументы,УжеОтправили,ДокументПроверки,ТолькоСтатус) ;
	//	Возврат;
		
	КонецЕсли;
	
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
		//ОбновитьСтатусыДокументовЛекарства(Thumbprint_1);
		
Срегистра=Неопределено;
	
	
	
	
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
		//АдресКАПИ=СтрЗаменить(Thumbprint_1.АдресКАПИ,"api.","");
		
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				        
			Для Каждого Стр_2 Из МассивОбновляем Цикл
					
													Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
														HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+Стр_2.order_id+"/ticket");
													Иначе
														HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр_2.order_id+"/ticket");
														
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
													КонецЕсли;
			
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
												//	КонецЕсли;
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
											Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
												ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
												
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	
		
		
		 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				 
				 
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					
					
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(NNN.link,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//
					Сайт_1=NNN.link;
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
					
					
										
					
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
	КонецЕсли;
	
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 //ЗаписатьОтветвЗаказ(Стр_2.Ссылка,Текст1);
				ЗаписатьОшибку(Стр_2.Ссылка,Текст1);
				
			Конецесли;
	
			          Чтен=Новый ЧтениеXML;
					    Чтен.УстановитьСтроку(Текст1);
						Результат="";
						Ошибка="";
						Попытка
						Пока Чтен.Прочитать() Цикл
							Если Чтен.Имя="operation_result" Тогда
								Чтен.Прочитать();
								Результат=Чтен.Значение;
								Чтен.Прочитать()
							ИначеЕсли Чтен.Имя="operation_comment" Тогда
								
								Чтен.Прочитать();
								Ошибка=Чтен.Значение;
								Чтен.Прочитать()
							КонецЕсли;
						Конеццикла;
					Исключение
					КонецПопытки;
					
					Если Стр_2.Обратный=Истина Тогда
											  ОработатьДокументы_Приемка_акцепт(Стр_2,Результат,Ошибка,Текст1)

					Иначе
					
					  	ОработатьДокументы_Приемка(Стр_2,Результат,Ошибка,Текст1)

					КонецЕсли;					
					//ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					
								Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 //ЗаписатьОтветвЗаказ(Стр_2.Ссылка,Текст1);
				ЗаписатьОшибку(Стр_2.Ссылка,Текст1);
				
			Конецесли;

					    				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);		
										Возврат;
											ИначеЕсли Ответ.КодСостояния=301 Тогда
												
															Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 //ЗаписатьОтветвЗаказ(Стр_2.Ссылка,Текст1);
				ЗаписатьОшибку(Стр_2.Ссылка,Текст1);
				
			Конецесли;

					ОшибкаОтправки="";
					//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
						ОшибкаОтправки=NNN.error_message;
						
					Исключение
					КонецПопытки;
					//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
					
					
				КонецЕсли;
		

		
			Исключение
			КонецПопытки;
												
												
		Конеццикла;	
	
	
	        	Элементы.Приемкасписок.Обновить();

	
	
	
		
		
		Возврат;
	Конецесли;
	
	СерийныйНомер=Неопределено;
		СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			Попытка
				СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
			исключение
				СРегистра=Неопределено;
			КонецПопытки;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			Сообщить("Не удалось получить токен по организации");
			//Возврат;
		Конецесли;
		
		МассивУп="";
	Для Каждого Стр Из МассивОбновляем Цикл
		              Попытка
		Если Стр.УПД=Истина Тогда

СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
							СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
									СерийныйНомер=СтруктураНастроек.СерийныйНомер;
							
								Если Не ЗначениеЗаполнено(СРегистра)  Тогда
									СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
								Иначе
								   
										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
											Прокси=Новый ИнтернетПрокси;
											Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										Иначе
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										КонецЕсли;
										
										HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
										HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
										HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
										//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
										///Константин           
										Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
										//Текст1=Ответ.ПолучитьТелоКакСтроку();
										Если Ответ.КодСостояния<>200 Тогда
											СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
										КонецЕсли;
											
								КонецЕсли;
			ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюОбУПДПриемка(Стр.Ссылка,ЗагрузатьНаименованиеПриПриемке,ЗаписыватьДанныеПриОтправкеЗаказа,Пользователь,HTTPСервисЗапрос,СерийныйНомер,СРегистра,Thumbprint_1) ;

			Продолжить;
		КОнецЕсли;
		
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			
 			что=Thumbprint_1.что;
	
								
			
			//Если ЗначениеЗаполнено(Стр.order_id) тогда
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.НомерЗаказа+"/body?pg="+Что+"&limit=2147483647");
			//Иначе
			//	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.НомерЗаказа+"/body?pg="+Что+"&limit=2147483647");
				
			//КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин         
		Попытка
			Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
							Если Ответ.КодСостояния<>200 Тогда
								ВызватьИсключение "Не получилось получить запрос по документу"
							КонецЕсли
			
		Исключение
			
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.НомерЗаказа+"/body?pg="+Что+"&limit=11");
			//Иначе
			//	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.НомерЗаказа+"/body?pg="+Что+"&limit=2147483647");
					
				//КонецЕсли;
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин         
			Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
			
			
		КонецПопытки;
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				// ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
			                                                          
			
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						//МассивУп=Новый Массив;
	//
						NNN_2=Неопределено;
						Если ЗначениеЗаполнено(Стр.order_id) Тогда
 			что=Thumbprint_1.что;
								
							
						HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body?pg="+Что+"&limit=2147483647");
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
						//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
						///Константин           
						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
							Текст1=Ответ.ПолучитьТелоКакСтроку();
						Если Ответ.КодСостояния=200 ИЛИ Ответ.КодСостояния=202 Тогда			
								NNN_2=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
								
								Если NNN_2.status="CHECKED_NOT_OK" ИЛИ NNN_2.status="PARSE_ERROR"  
						ИЛИ NNN_2.status="PROCESSING_ERROR"
									Тогда
									Сообщить("При подтверждении приемки "+Строка(Стр.Ссылка)+" произошла ошибка: "+NNN_2.downloadDesc);
									ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),NNN_2.downloadDesc);
									
NNN_2=Неопределено;
																		
								ИначеЕсли 	NNN_2.status="WAIT_ACCEPTANCE" Тогда
								NNN_2=Неопределено;
									ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"");
								ИначеЕсли 	NNN_2.status="CANCELLED" Тогда
									NNN_2=Неопределено;
									ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"");
											
								Иначе			
											
								
									NNN_2=NNN_2.body
									//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(NNN_2.content);
								КонецЕсли;
							Иначе
								NNN_2=Неопределено;
						КонецЕсли;
						
					КонецЕсли;
						ЗаполненаТабличнаяЧастьПриемки=ЛожЬ;
						Принять_1=Ложь;
						дкоументФарм=ОбновитьСтатусДокумента_Приемка(NNN_1,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа,Истина,Стр.Ссылка,NNN_2,,,ЗаполненаТабличнаяЧастьПриемки,Принять_1);	
						
						Если Принять_1=Истина Тогда
							Попытка
								
								Форм=ПолучитьФорму("Документ.Приемка_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
								"Ключ",ДкоументФарм));
								Форм.Принять("");
								

							Исключение
							КонецПопытки;
						КонецЕсли;

						Если ПриЗагрузкеПриемкиЗаполнятьПроверкаПоКМ=Истина И ЗаполненаТабличнаяЧастьПриемки<>Истина тОгда
							Форм=ОткрытьФорму("Документ.Приемка_ХамелеонЦРПТ.Форма.ФормаДокумента",
							Новый Структура("Ключ",дкоументФарм));
							Форм.ЗакачатьДетальнуюИнформацию("");
							Форм.Записать();
							Форм.Закрыть();
						КонецЕсли;
						
						//ОбновитьСтатусДокумента_Приемка_АКТ(Стр.Ссылка,NNN_1 ,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа);	
						//ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
					
				
					ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
						
Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)   ;
				Возврат;
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ОбновитьПриход(МассивОбновляем,Истина);//(Команда,Истина)			
				;
				Возврат;
			КонецЕсли
						
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				
		КонецЕсли;
	Исключение
		КонецПопытки;
		
	Конеццикла;
	Элементы.Приемкасписок .Обновить();		

	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОшибку(Ссылка,Ответ_1)
	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Ссылка);
	РегДв.Отбор.Вид.Установить("Ошибка по лекарствам");
	Добав=РегДв.Добавить();
	Добав.Документ=Ссылка;
	Добав.Вид="Ошибка по лекарствам";
	Добав.Файл=Новый ХранилищеЗначения(Ответ_1,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ВернутьНомерДокумента(До) Экспорт
	Если ЗначениеЗаполнено(До.ТипЭДО) И До.ТипЭДО<>ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОЛайт") Тогда
	//	Сообщить("Документ получен по "+Строка(До.ТипЭДО));
		ВОзврат Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("Ссылка,НомерЗаказа,order_id,УПД,Обратный",До,До.ДокументОтгрузки,До._Order_ID,До.УПД,До.ОбратныйАкцепт);
КонецФункции

&НаСервереБезКонтекста
Процедура ДелаемРекурсию(Стр_З,Нстрт,ДокумОб)
	Хилдерн=Неопределено;
	Для Каждого Стр_222 Из Стр_З.children Цикл
		accepted="";
		Если Стр_222.Свойство("accepted",accepted) Тогда
			Если accepted="true" ИЛИ accepted=Истина Тогда
				ШтрихКод="";
				Если Не Стр_222.Свойство("uit_code",ШТрихКод) ИЛИ Не ЗначениеЗаполнено(ШтрихКод) тогда
					Стр_222.Свойство("uitu_code",ШТрихКод);
				КонецЕсли;
				
				Нстрт_1=ДокумОб.СерийныеНомера.Найти(ШтрихКод,"cis");
				Если Нстрт_1<>Неопределено Тогда
					Нстрт_1.Отказано=ЛОжь;
					
				Иначе
					Нстрт_1=ДокумОб.СерийныеНомера.Добавить();
					Если Нстрт<>Неопределено Тогда
						ЗаполнитьЗначенияСвойств(Нстрт_1,Нстрт);
					КонецЕсли;
					Нстрт_1.cis=ШтрихКод;
					Нстрт_1.Отказано=Ложь;
				Конецесли;
			ИначеЕсли Стр_222.Свойство("children",Хилдерн) Тогда
						
				ДелаемРекурсию(Стр_222,Нстрт,ДокумОб);
						
					
			КонецЕсли;
			
		КонецЕсли
		
	Конеццикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
 Процедура ОбновитьСтатусДокумента_Расход(NNN)
	 
	Код="";
	Если NNN.Свойство("code",Код) Тогда
		Если Код=500 Тогда
			Возврат
		КонецЕсли;
	КонецЕсли;
	 
	 ДокументОгр=Документы.Отгрузка_ХамелеонЦРПТ.НайтиПоРеквизиту("_Order_ID",NNN.body.release_order_number);
	 Если Не ЗначениеЗаполнено(ДокументОгр) Тогда
		 Возврат;     
	 КонецЕсли;
	 
	 ДокумОб=ДокументОгр.ПолучитьОбъект();
	 Если NNN.status="CHECKED_NOT_OK" ИЛИ NNN.status="PARSE_ERROR" 
						ИЛИ NNN.status="PROCESSING_ERROR"
		 Тогда
		ДокумОб.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
	ИначеЕсли 	NNN.status="WAIT_ACCEPTANCE" Тогда
		ДокумОб.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента");
	ИначеЕсли 	NNN.status="CANCELLED" Тогда
		ДокумОб.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
	ИначеЕсли NNN.Status="WAIT_PARTICIPANT_REGISTRATION" Тогда
		ДокумОб.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаемРегистрациюУчастникавИСМП");
	ИначеЕсли NNN.Status="ACCEPTED" Тогда
		ДокумОб.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан");
	ИначеЕсли NNN.Status="CHECKED_OK" Тогда
		ДокумОб.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан");
	КонецЕсли;
	
	Если ДокумОб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан Тогда
		
		Если ДокумОб.ОтправлятьКМВместоАгрегаций=Истина Тогда
			/////МЕНЯЕМ ВСЕ КОРОБА НА ТО ЧТО ЕСТЬ
			УдаляемСтрокиКоробов=Новый Массив;
			Для Каждого Стр_1 Из ДокумОб.СтарыеКоробки Цикл
				
				Если ДокумОб.СерийныеНомера.Найти(Стр_1.НомерКМ,"cis")=Неопределено тогда
					Добав_1=ДокумОб.СерийныеНомера.Добавить();
					Добав_1.cis=Стр_1.НомерКМ;
					Добав_1.НаименованиеТовара=Стр_1.НаименованиеТовара;
					Добав_1.GTIN=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(
					Добав_1.НаименованиеТовара.GTIN),14,"0");
					Добав_1.НомерСтрокиСвязи=Стр_1.НомерСтрокиСвязи;
					
				КонецЕсли;
				НСтрКороба=ДокумОб.СерийныеНомера.НайтиСтроки(Новый структура("cis",Стр_1.НомерКороба));
				Для Каждого Стр_1_К Из НСтрКороба Цикл
					Если УдаляемСтрокиКоробов.Найти(Стр_1_К)=Неопределено Тогда
						УдаляемСтрокиКоробов.Добавить(Стр_1_К);
					КонецЕсли;
					
				Конеццикла;
				
			Конеццикла;
			Для Каждого Стр_1_К Из УдаляемСтрокиКоробов Цикл
				ДокумОб.СерийныеНомера.Удалить(Стр_1_К);
			Конеццикла;
			
			
		КонецЕсли;
		
		
		
		
		ПринялиВсе=Ложь;
		accept_all=Неопределено;
		Если NNN.body.Свойство("accept_all",accept_all) тогда
			Если	 accept_all=Истина Тогда
				ПринялиВсе=Истина;
				Для Каждого Стр_1 Из ДокумОб.СерийныеНомера Цикл
						Стр_1.Отказано=Ложь;
						
				Конеццикла
			КонецЕсли;
		КонецЕсли;
		
		Если ПринялиВсе=ЛОжь Тогда
		
			ОтменилиВсе=Ложь;
			
			Если NNN.body.Свойство("reject_all",accept_all) тогда
				Если	 accept_all=Истина Тогда
					ПринялиВсе=Истина;
					Для Каждого Стр_1 Из ДокумОб.СерийныеНомера Цикл
							Стр_1.Отказано=Истина;
							
					Конеццикла
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
	Если ПринялиВсе=Ложь Тогда
		Для Каждого СТР_1 Из ДокумОб.СерийныеНомера Цикл
			Стр_1.Отказано=Истина;
			
		Конеццикла;
		
		
		
		
		
		Для Каждого Стр_з из NNN.body.products Цикл
			
				accepted="";
				Если Стр_з.Свойство("accepted",accepted) Тогда
					
					
					
					Хилдерн=Неопределено;
					
					
					
					Если accepted="true" ИЛИ accepted=Истина Тогда
						ШтрихКод="";
						Если Не Стр_З.Свойство("uit_code",ШТрихКод) ИЛИ Не ЗначениеЗаполнено(ШтрихКод) тогда
							Стр_З.Свойство("uitu_code",ШТрихКод);
						КонецЕсли;
						
						Нстрт=ДокумОб.СерийныеНомера.Найти(ШтрихКод,"cis");
						Если Нстрт<>Неопределено Тогда
							Нстрт.Отказано=ЛОжь;
						Конецесли;
					
					ИначеЕсли Стр_З.Свойство("children",Хилдерн) Тогда
						ШтрихКод="";
						Если Не Стр_З.Свойство("uit_code",ШТрихКод) ИЛИ Не ЗначениеЗаполнено(ШтрихКод) тогда
							Стр_З.Свойство("uitu_code",ШТрихКод);
						КонецЕсли;
						Нстрт=ДокумОб.СерийныеНомера.Найти(ШтрихКод,"cis");
						
						
						ДелаемРекурсию(Стр_З,Нстрт,ДокумОб);
						
						
						
					КонецЕсли;
					
					Конецесли;
				
				
				
				Конеццикла;
				
			КонецЕсли;
		//NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(NNN.content);
		//Accept_all=Неопределено;
		//Если NNN.Свойство("accept_all",Accept_all) Тогда
		//	//Если Accept_all=Истина Тогда
		//	Для Каждого Стр_ФСС Из ДокумОб.СерийныеНомера Цикл
		//		Если Accept_all=Истина Тогда
		//			Стр_ФСС.Отказано=Ложь;
		//			КонецЕсли;
		//		Конеццикла;
		//		
		//	//КонецЕсли;
		//	
		//Иначе
		//	Сч=0;
		//	Для Каждого Стр_з из NNN.products Цикл
		//		accepted="";
		//		Если Стр_з.Свойство("accepted",accepted) Тогда
		//			Если accepted="true" ИЛИ accepted=Истина Тогда
		//				ШтрихКод="";
		//				Если Не Стр_З.Свойство("uit_code",ШТрихКод) ИЛИ Не ЗначениеЗаполнено(ШтрихКод) тогда
		//					Стр_З.Свойство("uitu_code",ШТрихКод);
		//				КонецЕсли;
		//				
		//				Нстрт=ДокумОб.СерийныеНомера.Найти(ШтрихКод,"cis");
		//				Если Нстрт<>Неопределено Тогда
		//					Нстрт.Отказано=ЛОжь;
		//				Конецесли;
		//			
		//			
		//				
		//				
		//			КонецЕсли;
		//			
		//			Конецесли;
		//		
		//		
		//		
		//		Конеццикла;
		// КонецЕсли;
				ДокумОб.ПометкаУдаления=Ложь;
		 ДокумОб.Записать(РежимЗаписиДокумента.Проведение);
		
	ИначеЕсли ДОкумОб.Статус<>ДокумОб.Ссылка.Статус Тогда
		
		Если ДокумОб.Проведен Тогда
			ДокумОб.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ДокумОб.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
	КонецЕсли;
	
	
	

	 //а=1;
	//Если Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ Тогда
	//	Если Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета
	//		ИЛИ Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус
	//		ИЛИ Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы
	//		ИЛИ Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован Тогда
	//		Возврат;
	//	КонецЕсли;
	//		
	//	
	//КонецЕсли;
	//
	//Добб=Ссылка.ПолучитьОбъект();
	//Добб.ОшибкаОтправки=Ошибка;
	//Добб.Статус=Статус;
	//
	//
	//

	////Добб.ОшибкаОтправки=Ошибка;
	////Добб.Статус=Статус;
	//Если ЗначениеЗАполненО(Заказ) тогда
	//	
	//	//Добб.Товары.Очистить();
	//	//Добб.СерийныеНомера.Очистить();
	//	
	//	//Добб.Короба.Очистить();
	//	Для Каждого СТР_1 Из Добб.СерийныеНомера Цикл
	//		Стр_1.Отказано=Ложь;
	//		
	//	Конеццикла;
	//	
	//	
	//	Сч=0;
	//	Для Каждого Стр_з из ЗАказ.body.products Цикл
	//		accepted="";
	//		Если Стр_з.Свойство("accepted",accepted) Тогда
	//			Если accepted="false" Тогда
	//				
	//			
	//				
	//			КонецЕсли;
	//			
	//			Конецесли;
	//		
	//		
	//		
	//	Конеццикла;
	//	
	//	
	//КонецЕсли;
	//	
	//
	//
	//Добб.Записать();
	//Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета 
	//	ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента
	//	ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
	//	
	//	Тогда
	//	Попытка
	//		Добб.ПометкаУдаления=ложь;
	//		Добб.Записать(РежимЗаписиДокумента.Проведение) 
	//	Исключение
	//	КонецПопытки;
	//КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ЗапомнимДанныеСэтихЗаписываем(Пользователь,Записываем1,Записываем2)
	РегДв=РегистрыСведений.ПриемкаПоОрганизациям_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Организация.Установить(Пользователь.Организация);
	РегДв.Отбор.СайтВходаВСистему.Установить(Пользователь.СайтыВходаВСистему);
	
	Добав=РегДв.Добавить();
	Добав.Организация=Пользователь.Организация;
	Добав.СайтВходаВСистему=Пользователь.СайтыВходаВСистему;
	Добав.did=Записываем2;
	Добав.ДатаОтсчета=Записываем1;
	РегДв.Записать(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОтветыПоОтгрузкам(Команда,УжеОтправили=Ложь,Thumbprint_1=Неопределено,СРегистра=Неопределено)
	Если Thumbprint_1=Неопределено Тогда
	Thumbprint_1=Неопределено;
	ДатаПр=Неопределено;
	НомерД=Неопределено;
	Если НаКлиенте(Thumbprint_1,ДатаПр,НомерД) Тогда
//		ДатаПр=НачаЛоДня(ДатаПр)-1*24*60*60;
		СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			Попытка
				СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
			исключение
				СРегистра=Неопределено;
			КонецПопытки;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			ПоказатьПредупреждение(,"Не удалось получить токен по организации");
			Возврат;
		Конецесли;
	//Иначе
		
		//СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
			
	КонецЕсли;
ИначеЕсли 		СРегистра=Неопределено Тогда
	СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);

	КонецЕсли;
 	Если ОбработкаWEBНаСервере Тогда
		Если НЕ ЗагрузканаСерверИзЦРПТ(Thumbprint_1,СРегистра,УжеОтправили) Тогда
				Если УжеОтправили=Истина Тогда
				//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ЗагрузитьОтветыПоОтгрузкам(Команда,Истина,Thumbprint_1)			
		КонецЕсли
		
		КонецЕсли;
		
		
	Иначе
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;                                                       
			
			
 			что=Thumbprint_1.что;
			
			Если ЗначениеЗаполнено(ДатаПр) И ЗначениеЗаполнено(НомерД) Тогда
				
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/listV2?inputFormat=true&documentType=LP_ACCEPT_GOODS&limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&order=ASC&orderColumn=docDate&did="+НомерД+"&orderedColumnValue="+ДатаПр+"&pageDir=NEXT&pg="+Что);
	Иначе
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/listV2?inputFormat=true&documentType=LP_ACCEPT_GOODS&limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&order=ASC&orderColumn=docDate&pg="+Что);
	КонецЕсли;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
							
	        ВсеХорошо=Истина;
	                 КоличествоОбработано=1;
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				//ЧтениеJSON = Новый ЧтениеJSON;
			Страница=0;
			Тотал=1;
			
			Записываем1=Неопределено;
			Записываем2=Неопределено;
			
			Пока Страница*СколькоНаСтранице<=Тотал Цикл
 					страница=Страница+1;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Тотал=NNN.total;
				Если СколькоНаСтранице>NNN.results.Количество() Тогда
					 Тотал=NNN.results.Количество();
				 КонецЕсли;
				 Если Тотал=0 Тогда
					 Тотал=1;
				КонецЕсли;
				 КоличествоОбработано=КоличествоОбработано+1;
				Состояние("Обрабатывается отгрузка "+Строка(КоличествоОбработано)+" из "+Строка(Тотал),КоличествоОбработано*100/Тотал);
				did="";
				docDate="";
				Для Каждого Стр Из  NNN.results Цикл
					did=Стр.number;
					docDate=Стр.docDate;
					Если Стр.input=true 
						И Найти(Стр.type,"LP_ACCEPT_GOODS")=1
						Тогда
						
 			что=Thumbprint_1.что;
								
						
						HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.number+"/body?pg="+Что+"&limit=2147483647");
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
						//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
						///Константин           
						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
						Текст1=Ответ.ПолучитьТелоКакСтроку();
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						МассивУп=Новый Массив;
						
						Попытка
						
							ОбновитьСтатусДокумента_Расход(NNN_1);	
	                 КоличествоОбработано=0;
							
							Если ЗначениеЗАполнено(Записываем1) И ЗначениеЗАполнено(Записываем2) И ВсеХорошо=Истина Тогда
								ЗапомнимДанныеСэтихЗаписываем(Пользователь,Записываем2,Записываем1);
								
							КонецЕсли;
							Записываем1=did;
							Записываем2=docDate;
							
							
						Исключение
							ВсеХорошо=Ложь;
						КонецПопытки;
					КонецЕсли;
				Конеццикла;
				
				Если Страница*СколькоНаСтранице>Тотал Тогда
					Прервать;
				КонецЕсли;
				
 			что=Thumbprint_1.что;
	
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/listV2?inputFormat=true&documentType=LP_ACCEPT_GOODS&limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&order=ASC&orderColumn=docDate&did="+did+"&orderedColumnValue="+docDate+"&pageDir=NEXT&pg="+что);
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
	Иначе
		ВсеХорошо=Ложь;
		Если УжеОтправили=Истина Тогда
				Сообщить("Не удалось загрузить ответы, отсутствует доступ.");
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Возврат;
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ЗагрузитьОтветыПоОтгрузкам(Команда,Истина)			
			КонецЕсли
	КонецЕсли;
	Конеццикла;	
				
				
ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502 
	ИЛИ Ответ.КодСостояния=500 Тогда
	//ВсеХорошо=Ложь;
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ЗагрузитьОтветыПоОтгрузкам(Команда,Истина)			
			КонецЕсли
		Иначе
			ВсеХорошо=Ложь;
					Попытка
						//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							
						Исключение
							Попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								
								Если Найти(Текст1,"Billing contract")>0 И
									Найти(Текст1,"not signed by participant")>0 Тогда
									Сообщить("Договор биллинга для выбранной группы товаров не подписан участником");
								КонецЕсли;
								
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	КонецЕсли;
	//КонецЕсли;

	Элементы.Отгрузка_Список.Обновить();;
	// Вставить содержимое обработчика.

	
	
	 	
КонецПроцедуры


&НаКлиенте
Процедура КоличествоЯдерДляГенерацииDataMatrixПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	КоличествоЯдерДляГенерацииDataMatrixПриИзмененииНаСервере();
	
КонецПроцедуры

Процедура КоличествоЯдерДляГенерацииDataMatrixПриИзмененииНаСервере()
	
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.КоличествоЯдерДляГенерацииDataMatrix=КоличествоЯдерДляГенерацииDataMatrix;
	РегДв.Записать(Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура ЧастичныйОтказ(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Стр Из Элементы.Приемкасписок.ВыделенныеСтроки Цикл
		//Форм=ПолучитьФорму("Документ.Приемка_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
		//"Ключ",Стр));
		ОткрытьФорму("Документ.Приемка_ХамелеонЦРПТ.Форма.ФормаЧастичныйОтказ",Новый Структура("СсылкаНаОъект",Стр),,,,,Новый ОписаниеОповещения("ПослеЧастичногоОтказа",ЭтаФорма));
	КонецциклА;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЧастичногоОтказа(РР,ДД) Экспорт
	Элементы.Приемкасписок.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ВыгружатьCSVПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ВыгружатьCSV=ВыгружатьCSV;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьCSVПриИзменении(Элемент)
	ВыгружатьCSVПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РасформироватьКороба(Команда)
	// Вставить содержимое обработчика.
	Если Элементы.Приемкасписок.ТекущиеДанные<>Неопределено Тогда
		
		Агрег=СоздатьРАсформирование(Элементы.Приемкасписок.ТекущиеДанные.Ссылка);
		Если ЗначениеЗаполнено(Агрег) Тогда
			ОткрытьФорму("Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Форма.ФормаДокумента",
			Новый Структура("Ключ",Агрег));
		КонецЕсли;
	КонецЕсли;
	Элементы.Приемкасписок.Обновить();;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьРАсформирование(Ссылка)
	Если Ссылка.Статус<>Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан 
		И Ссылка.Статус<>Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ЧастичноПринят
		И Ссылка.Статус<>Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ЧерновикОбработан
		И Ссылка.СтатусУПД<>Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан
		Тогда
		Сообщить("Накладная "+Строка(Ссылка)+" должна быть в статусе Обработан");
		Возврат Неопределено;
	КонецЕсли;
	
	Если не ЗначениеЗАполнено(Ссылка.РасформированиеКоробов) Тогда
		Агр=Документы.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.СоздатьДокумент();
		
					  ДокОснование=Ссылка;
					  ЗаполнитьЗначенияСвойств(Агр,ДокОснование,,"Номер,Дата,_Order_ID,Статус");
					  Агр.ТипДокумента=перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.Расформирование;
					  //ПриемкаЦРПТ=ДокОснование;
					        Агр.Дата=Текущаядата();
							Агр.СтатусКМ=Перечисления.СтатусыКМДляАгрегации_ХамелеонЦРПТ.КМВОбороте;
		Если	 РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ОтправлятьПоУмолчаниюАгрегациюЧерезСУЗ Тогда
	
			Агр.ЧерезСУЗ=Истина;
		КонецЕсли;
					  Агр.Продукция=ДокОснование.Товары[0].GTIN;
					  Для Каждого Стр_1 Из ДокОснование.СерийныеНомера Цикл
						  Если Стр_1.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука Тогда
							  ПродолжитЬ;
							КонецЕсли;
						  Добав=Агр.Марки.Добавить();
						  Добав.cis=Стр_1.cis;
						  Добав.Марка=Добав.cis;
						  
						  Нстроки=ДокОснование.КОроба.НайтиСтроки(Новый Структура("НомерКороба",Стр_1.cis));
						  Для Каждого Стр_ИзКор Из НСтроки Цикл
							  Если Агр.МаркиОприходовать.Найти(Стр_ИзКор.Штрихкод,"Марка")=Неопределено Тогда
								  
								  Добав=Агр.МаркиОприходовать.Добавить();
								  Добав.Марка=Стр_ИзКор.Штрихкод;
								  Добав.НомерКороба=Стр_1.cis;
								  
								КонецЕсли;
							  
							Конеццикла;
						  
						  
					  Конеццикла;
		Агр.Записать();
		
		Поступ=Ссылка.ПолучитьОбъект();
		Поступ.РасформированиеКоробов=Агр.Ссылка;
		Поступ.Записать();
		
		Возврат Агр.Ссылка;
	Иначе
		Сообщить("По документу "+Строка(Ссылка)+" уже создана агрегация");
		Возврат Ссылка.РасформированиеКоробов
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ОбработкаПерехода(ОбъектПерехода, СтандартнаяОбработка)
	// ставить содержимое обработчика.
	а=1;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВcsvВыделенныеЗаказы(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	ДилогВыбора=Новый ДиалогВыбораФайла(РежимдиалогаВыбораФайла.ВыборКаталога);
	ДилогВыбора.Заголовок="Выберите каталог для сохранения файлов с номерами КМ";
	Если ДилогВыбора.Выбрать() Тогда
		Каталог=ДилогВыбора.Каталог;
//		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СохранитьВcsvВыделенныеЗаказы(Элементы.ЗаказыТаблица.ВыделенныеСтроки,Каталог+"\");
//		Возврат;
		Для Каждого Стр_1 Из Элементы.ЗаказыТаблица.ВыделенныеСтроки Цикл
			
			Номер="";
			ДвоичнД=СохранитьФайлНаДИске(Стр_1,Номер);
			
			ИмяФ=Каталог+"\"+СокрЛП(Номер)+".csv";
			ДвоичнД.Записать(ИмяФ);
		Конеццикла;
		
		
	КонецЕсли;
	
	
отказ=Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВыгружатьОтгрузкуВФорматеПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ВыгружатьОтгрузкуВФормате=ВыгружатьОтгрузкуВФормате;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьОтгрузкуВФорматеПриИзменении(Элемент)
	ВыгружатьОтгрузкуВФорматеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Функция ПечатьУПДНаСервере(ТабДокумент,Ссылка,КМ=Ложь) Экспорт
	
	// Вставить содержимое обработчика.
	Таб=Новый ТабличныйДОкумент;
	Макет=Документы.Отгрузка_ХамелеонЦРПТ.ПолучитьМакет("Страны");
	ОбластьМакета=Макет.ПолучитьОбласть("Страны");
	Таб.Вывести(ОбластьМакета);
	СтраныКоды=Новый Таблицазначений;
	СтраныКоды.Колонки.Добавить("Код");
	СтраныКоды.Колонки.Добавить("КодАльфа");
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Сссс=СтраныКоды.Добавить();
		СССС.Код=Таб.Область(Сч,2).Текст;
		СССС.КодАльфа=Таб.Область(Сч,4).Текст;
			
	КонецЦикла;
	

		ТоварКод = "Код";
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент",   Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номер,
		|	Дата КАК ДатаДокумента,
		|	Организация КАК Организация,
		|	Организация КАК ЮрФизЛицо,
		|	Организация КАК Поставщик,
		|	Организация КАК Контрагент,
		|	Организация КАК Руководители,
		|	ВЫБОР КОГДА ПОДСТРОКА(Контрагент.ФактическийАдрес,1,1000)="""" ТОГДА Контрагент.ЮридическийАдрес ИНАЧЕ Контрагент.ФактическийАдрес КОНЕЦ КАК АдресДоставки,
		|	Контрагент КАК Грузополучатель,
		|	Организация КАК Груз3оотправитель,
		|	"""" КАК БанковскийСчет,
		|	Контрагент КАК Покупатель,
		|	Контрагент КАК Плательщик
		|ИЗ
		|	Документ.Отгрузка_ХамелеонЦРПТ КАК РеализацияТоваровУслуг_2
		|
		|
		|ГДЕ
		|	РеализацияТоваровУслуг_2.Ссылка = &ТекущийДокумент
		|";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|		ВложенныйЗапрос.НаименованиеВУПД КАК ТоварНаименование,
		|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.Наименование КАК СТРОКА(1000))
		|		КАК ТоварНаим,
		|	ВложенныйЗапрос.Номенклатура.Код КАК ТоварКод,
		|	"""" КАК БазоваяЕдиницаНаименование,
		|	"""" КАК БазоваяЕдиницаКодПоОКЕИ,
		|	"""" КАК ЕдиницаИзмерения,
		|	"""" КАК ВидУпаковки,
		|	1 КАК КоличествоВОдномМесте,
		|	1 КАК МассаБрутто,
		|	"""" КАК Характеристика,
		|	"""" КАК Серия,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.БеНДС
		|			ТОГДА 0
		|		ИНАЧЕ &СтавкаНДС
		|	КОНЕЦ КАК СтавкаНДС,
		|	ВложенныйЗапрос.Цена КАК Цена,
		|	ЛОЖЬ КАК ЕстьСкидкиПоСтроке,
		|	ВложенныйЗапрос.Количество КАК Количество,
		|	ВложенныйЗапрос.КоличествоМест КАК КоличествоМест,
		|	ВложенныйЗапрос.Сумма КАК Сумма,
		|	ВложенныйЗапрос.СуммаНДС КАК СуммаНДС,
		|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
		|	ВложенныйЗапрос.Метка КАК Метка,
		|	ВложенныйЗапрос.Поле1 КАК ПредставлениеГТД,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
		|	ВложенныйЗапрос.НомерСтрокиСвязи,
		|	ВложенныйЗапрос.НомерГТД,
		|	ВложенныйЗапрос.НаименованиеВУПД
		|ИЗ
		|	(ВЫБРАТЬ
		|		РеализацияТоваровУслуг_2.GTIN КАК Номенклатура,
		|		1 КАК Коэффициент,
		|		РеализацияТоваровУслуг_2.Цена КАК Цена,
		|		СУММА(РеализацияТоваровУслуг_2.КоличествоКМ) КАК Количество,
		|		СУММА(РеализацияТоваровУслуг_2.КоличествоКМ) КАК КоличествоМест,
		|		СУММА(ВЫБОР
		|				КОГДА РеализацияТоваровУслуг_2.Сумма = 0
		|					ТОГДА РеализацияТоваровУслуг_2.Цена * РеализацияТоваровУслуг_2.КоличествоКМ
		|				ИНАЧЕ РеализацияТоваровУслуг_2.Сумма
		|			КОНЕЦ) КАК Сумма,
		|		СУММА(ВЫРАЗИТЬ(РеализацияТоваровУслуг_2.НДС КАК ЧИСЛО(15, 2))) КАК СуммаНДС,
		|		РеализацияТоваровУслуг_2.НомерСтроки КАК НомерСтроки,
		|		0 КАК Метка,
		|		ВЫБОР
		|			КОГДА СУММА(ВЫРАЗИТЬ(РеализацияТоваровУслуг_2.НДС КАК ЧИСЛО(15, 2))) = 0
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК БеНДС,
		|		"""" КАК Поле1,
		|		РеализацияТоваровУслуг_2.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		РеализацияТоваровУслуг_2.НомерСтроки КАК НомерСтроки1,
		|		РеализацияТоваровУслуг_2.НомерСтрокиСвязи КАК НомерСтрокиСвязи,
		|		РеализацияТоваровУслуг_2.НомерГТД КАК НомерГТД,
		|		РеализацияТоваровУслуг_2.НаименованиеВУПД КАК НаименованиеВУПД
		|	ИЗ
		|		Документ.Отгрузка_ХамелеонЦРПТ.Товары КАК РеализацияТоваровУслуг_2
		|	ГДЕ
		|		РеализацияТоваровУслуг_2.Ссылка = &ТекущийДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РеализацияТоваровУслуг_2.GTIN,
		|		РеализацияТоваровУслуг_2.ЕдиницаИзмерения,
		|		РеализацияТоваровУслуг_2.НомерСтроки,
		|		РеализацияТоваровУслуг_2.Цена,
		|		РеализацияТоваровУслуг_2.НомерСтрокиСвязи,
		|		РеализацияТоваровУслуг_2.НомерГТД,
		|		РеализацияТоваровУслуг_2.НаименованиеВУПД,
		|		РеализацияТоваровУслуг_2.НомерСтроки) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.НомерСтроки";
		
		
			Запрос.УстановитьПараметр("СтавкаНДС",20);
		
		ЗапросТовары = Запрос.Выполнить().Выгрузить();

			
		
			Макет = Документы.Отгрузка_ХамелеонЦРПТ.ПолучитьМакет("УниверсальныйПередаточныйДокумент981_01_10_2018");
			
			
		
		СведенияОПоставщике       = 
		Ссылка.Организация.Наименование;
		//+", "+Ссылка.Организация.АдресМестонахождения;
		
		Если ЗначениеЗаполнено(Ссылка.Контрагент.НаименованиеПолное) Тогда
			СведенияОПокупателе       = ""+Ссылка.Контрагент.НаименованиеПолное;
		Иначе
			СведенияОПокупателе       = ""+Ссылка.Контрагент.Наименование;
		КонецЕсли;
		//+", "+Ссылка.Контрагент.ЮридическийАдрес;
		

		
		

		Если ЗначениеЗАполнено(Ссылка.Грузополучатель) Тогда
			
			НаименованиеГр=Ссылка.Грузополучатель.НаименованиеПолное;
			Если Не ЗначениеЗаполнено(НаименованиеГр) Тогда
				НаименованиеГр=Ссылка.Грузополучатель.Наименование
			КонецЕсли;
			
			

		
			ФактАдрес_1=РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("ОБъект,Тип",Ссылка.Грузополучатель,
						Перечисления.ТипАдреса_ХамелеонЦРПТ.Фактический));
			Если ЗначениеЗаполнено(ФактАдрес_1.КодРегиона) Тогда
				
				ТТТ=ТаблицаРегионов.НайтиСтроки(Новый Структура("КодРегиона",ФактАдрес_1.КодРегиона));
				Если ТТТ.Количество()>0 Тогда
					КодРегиона=ТТТ[0].Название
				Иначе
					КодРегиона=ФактАдрес_1.КодРегиона
				Конецесли;
				
				ФактическийАдрес=ФактАдрес_1.Индекс+", "+КодРегиона+", "+ФактАдрес_1.Район+", "+
				ФактАдрес_1.Город+", "+ФактАдрес_1.НаселенныйПункт+", "+ФактАдрес_1.Улица+", "+ФактАдрес_1.Дом+", "+ФактАдрес_1.Корпус
				+", "+ФактАдрес_1.Квартира;
				
				
			Иначе
				
	    	Если ЗначениеЗаполнено(Ссылка.Грузополучатель.ФактическийАдрес) Тогда
				ФактическийАдрес=Ссылка.Грузополучатель.ФактическийАдрес;
			Иначе
				ФактическийАдрес=Ссылка.Грузополучатель.ЮридическийАдрес;
			КонецЕсли;
							
			КонецЕсли;
			
			
			
			
	    		СведенияОГрузополучателе=НаименованиеГр+", "+ФактическийАдрес;
			
			Если ЗначениеЗаполнено(Ссылка.Грузополучатель.Телефон) Тогда
				СведенияОГрузополучателе=СведенияОГрузополучателе+", телефон: "+Ссылка.Грузополучатель.Телефон;
				
			КонецЕсли;
			
		Иначе
			//Если ЗначениеЗаполнено(Ссылка.Контрагент.ФактическийАдрес) Тогда
			
			
		
			ФактАдрес_1=РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("ОБъект,Тип",Ссылка.Контрагент,
						Перечисления.ТипАдреса_ХамелеонЦРПТ.Фактический));
			Если ЗначениеЗаполнено(ФактАдрес_1.КодРегиона) Тогда
				
				ТТТ=ТаблицаРегионов.НайтиСтроки(Новый Структура("КодРегиона",ФактАдрес_1.КодРегиона));
				Если ТТТ.Количество()>0 Тогда
					КодРегиона=ТТТ[0].Название
				Иначе
					КодРегиона=ФактАдрес_1.КодРегиона
				Конецесли;
				
				ФактическийАдрес=ФактАдрес_1.Индекс+", "+КодРегиона+", "+ФактАдрес_1.Район+", "+
				ФактАдрес_1.Город+", "+ФактАдрес_1.НаселенныйПункт+", "+ФактАдрес_1.Улица+", "+ФактАдрес_1.Дом+", "+ФактАдрес_1.Корпус
				+", "+ФактАдрес_1.Квартира;
				
				
			Иначе
				
	    	Если ЗначениеЗаполнено(Ссылка.Контрагент.ФактическийАдрес) Тогда
				ФактическийАдрес=Ссылка.Контрагент.ФактическийАдрес;
			Иначе
				ФактическийАдрес=Ссылка.Контрагент.ЮридическийАдрес;
			КонецЕсли;
							
			КонецЕсли;
			
			
			
			
			НаименованиеГр=Ссылка.Контрагент.НаименованиеПолное;
			Если Не ЗначениеЗаполнено(НаименованиеГр) Тогда
				НаименованиеГр=Ссылка.Контрагент.Наименование
			КонецЕсли;
			
			СведенияОГрузополучателе=НаименованиеГр+", "+ФактическийАдрес;
			Если ЗначениеЗаполнено(Ссылка.Контрагент.Телефон) Тогда
				СведенияОГрузополучателе=СведенияОГрузополучателе+", телефон: "+Ссылка.Контрагент.Телефон;
			КонецЕсли;
		//Иначе
		//	НаименованиеГр=Ссылка.Контрагент.НаименованиеПолное;
		//	Если Не ЗначениеЗаполнено(НаименованиеГр) Тогда
		//		НаименованиеГр=Ссылка.Контрагент.Наименование
		//	КонецЕсли;
		//	
		//	
		//	
		//	СведенияОГрузополучателе=НаименованиеГр+", "+Ссылка.Контрагент.ЮридическийАдрес;
		//	Если ЗначениеЗаполнено(Ссылка.Контрагент.Телефон) Тогда
		//		СведенияОГрузополучателе=СведенияОГрузополучателе+", телефон: "+Ссылка.Контрагент.Телефон;
		//	КонецЕсли;
		КонецЕсли;
		
		
		
		
//		Если ЗначениеЗаполнено(Объект.АдресМестонахождения) ТОгда
Если ЗначениеЗаполнено(Ссылка.Грузоотправитель) Тогда
	НаименованиеГр=Ссылка.Грузоотправитель.НаименованиеПолное;
			Если Не ЗначениеЗаполнено(НаименованиеГр) Тогда
				НаименованиеГр=Ссылка.Грузоотправитель.Наименование
			КонецЕсли;
			
			
				
		
			ФактАдрес_1=РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("ОБъект,Тип",Ссылка.Грузоотправитель,
						Перечисления.ТипАдреса_ХамелеонЦРПТ.Фактический));
			Если ЗначениеЗаполнено(ФактАдрес_1.КодРегиона) Тогда
				
				ТТТ=ТаблицаРегионов.НайтиСтроки(Новый Структура("КодРегиона",ФактАдрес_1.КодРегиона));
				Если ТТТ.Количество()>0 Тогда
					КодРегиона=ТТТ[0].Название
				Иначе
					КодРегиона=ФактАдрес_1.КодРегиона
				Конецесли;
				
				ФактическийАдрес=ФактАдрес_1.Индекс+", "+КодРегиона+", "+ФактАдрес_1.Район+", "+
				ФактАдрес_1.Город+", "+ФактАдрес_1.НаселенныйПункт+", "+ФактАдрес_1.Улица+", "+ФактАдрес_1.Дом+", "+ФактАдрес_1.Корпус
				+", "+ФактАдрес_1.Квартира;
				
				
			Иначе
				
	    	Если ЗначениеЗаполнено(Ссылка.Грузоотправитель.ФактическийАдрес) Тогда
				ФактическийАдрес=Ссылка.Грузоотправитель.ФактическийАдрес;
			Иначе
				ФактическийАдрес=Ссылка.Грузоотправитель.ЮридическийАдрес;
			КонецЕсли;
							
			КонецЕсли;
			
		
	
			СведенияОГрузоотправитель =НаименованиеГр+", "+ФактическийАдрес ;
		
		
			Если ЗначениеЗаполнено(Ссылка.Грузоотправитель.Телефон) Тогда
				СведенияОГрузоотправитель=СведенияОГрузоотправитель+", телефон: "+Ссылка.Грузоотправитель.Телефон;
			КонецЕсли;
		
		Иначе
			

		
			ФактАдрес_1=РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("ОБъект,Тип",Ссылка.Организация,
						Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический));
			Если ЗначениеЗаполнено(ФактАдрес_1.КодРегиона) Тогда
				
				ТТТ=ТаблицаРегионов.НайтиСтроки(Новый Структура("КодРегиона",ФактАдрес_1.КодРегиона));
				Если ТТТ.Количество()>0 Тогда
					КодРегиона=ТТТ[0].Название
				Иначе
					КодРегиона=ФактАдрес_1.КодРегиона
				Конецесли;
				
				ФактическийАдрес=ФактАдрес_1.Индекс+", "+КодРегиона+", "+ФактАдрес_1.Район+", "+
				ФактАдрес_1.Город+", "+ФактАдрес_1.НаселенныйПункт+", "+ФактАдрес_1.Улица+", "+ФактАдрес_1.Дом+", "+ФактАдрес_1.Корпус
				+", "+ФактАдрес_1.Квартира;
				
				
			Иначе
				
					ФактическийАдрес=Ссылка.Организация.АдресМестонахождения ;
							
			КонецЕсли;
			
			
			
			СведенияОГрузоотправитель =Ссылка.Организация.Наименование+", "+ФактическийАдрес;
			Если ЗначениеЗаполнено(Ссылка.Организация.Телефон) Тогда
				СведенияОГрузоотправитель=СведенияОГрузоотправитель+", телефон: "+Ссылка.Организация.Телефон;
			КонецЕсли;
		КонецЕсли;
//		Иначе
//		КонецЕсли;

		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Номер=Ссылка.НомерПервичногоДокумента;
		ОбластьМакета.Параметры.Дата = Формат(Ссылка.Дата, "ДФ='дд ММММ гггг'") + " г.";
		
		
					ФактАдрес_1=РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("ОБъект,Тип",Ссылка.Организация,
						Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический));
			Если ЗначениеЗаполнено(ФактАдрес_1.КодРегиона) Тогда
				
				ТТТ=ТаблицаРегионов.НайтиСтроки(Новый Структура("КодРегиона",ФактАдрес_1.КодРегиона));
				Если ТТТ.Количество()>0 Тогда
					КодРегиона=ТТТ[0].Название
				Иначе
					КодРегиона=ФактАдрес_1.КодРегиона
				Конецесли;
				
				ФактическийАдрес=ФактАдрес_1.Индекс+", "+КодРегиона+", "+ФактАдрес_1.Район+", "+
				ФактАдрес_1.Город+", "+ФактАдрес_1.НаселенныйПункт+", "+ФактАдрес_1.Улица+", "+ФактАдрес_1.Дом+", "+ФактАдрес_1.Корпус
				+", "+ФактАдрес_1.Квартира;
				
				
			Иначе
				
					ФактическийАдрес=Ссылка.Организация.АдресМестонахождения ;
							
			КонецЕсли;
			
			

		
		
		
			ОбластьМакета.Параметры.АдресПоставщика = СокрЛП(ФактическийАдрес);
			
			Если ЗначениеЗаполнено(Ссылка.Организация.Телефон) Тогда
				ОбластьМакета.Параметры.АдресПоставщика = ОбластьМакета.Параметры.АдресПоставщика +", телефон: "+
				Ссылка.Организация.Телефон;
			КонецЕсли;
			
				ОбластьМакета.Параметры.ИННПоставщика=Ссылка.Организация.ИНН+"/"+Ссылка.организация.КПП;
		
		
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя=СведенияОГрузоотправитель;
		
		Если Ссылка.Товары.Итог("НДС")=0 
			ИЛИ Ссылка.ВидТоварооборота=Перечисления.ВидТоварооборота_ХамелеонЦРПТ.COMMISSION Тогда
			ОбластьМакета.Параметры.Статус="2";
		Иначе
			ОбластьМакета.Параметры.Статус="1";
			
		КонецЕсли;
		
//		ОбластьМакета.Параметры.ПредставлениеОрганизации = СведенияОПоставщике;
		
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя = СведенияОГрузополучателе;
		//СтрокаПоДокументу = "К платежно-расчетному документу №    от";
		//ОбластьМакета.Параметры.ПоДокументу = СтрокаПоДокументу;
		
		
		ОбластьМакета.Параметры.ПредставлениеПоставщика  = СведенияОПоставщике;
		ОбластьМакета.Параметры.ПредставлениеПокупателя= СведенияОПокупателе;
		
		

		
					ФактАдрес_1=РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("ОБъект,Тип",Ссылка.Контрагент,
						Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический));
			Если ЗначениеЗаполнено(ФактАдрес_1.КодРегиона) Тогда
				
				ТТТ=ТаблицаРегионов.НайтиСтроки(Новый Структура("КодРегиона",ФактАдрес_1.КодРегиона));
				Если ТТТ.Количество()>0 Тогда
					КодРегиона=ТТТ[0].Название
				Иначе
					КодРегиона=ФактАдрес_1.КодРегиона
				Конецесли;
				
				ФактическийАдрес=ФактАдрес_1.Индекс+", "+КодРегиона+", "+ФактАдрес_1.Район+", "+
				ФактАдрес_1.Город+", "+ФактАдрес_1.НаселенныйПункт+", "+ФактАдрес_1.Улица+", "+ФактАдрес_1.Дом+", "+ФактАдрес_1.Корпус
				+", "+ФактАдрес_1.Квартира;
				
				
			Иначе
				
					ФактическийАдрес=Ссылка.Контрагент.ЮридическийАдрес;
							
			КонецЕсли;
			
			
		
			ОбластьМакета.Параметры.АдресПокупателя=ФактическийАдрес;
			
			
					
			Если ЗначениеЗаполнено(Ссылка.Контрагент.Телефон) Тогда
				ОбластьМакета.Параметры.АдресПокупателя = ОбластьМакета.Параметры.АдресПокупателя+", телефон: "+
				Ссылка.Контрагент.Телефон;
			КонецЕсли;
	
		ОбластьМакета.Параметры.ИННПокупателя=Ссылка.Контрагент.ИНН+"/"+Ссылка.Контрагент.КПП;

		
		ТабДокумент.Вывести(ОбластьМакета);
		
		НомерСтраницы   = 1;
	
		КоличествоСтрок = ЗапросТовары.Количество();
		
		// инициализация итогов по странице
		ИтогоМассаБруттоНаСтранице = 0;
		ИтогоМестНаСтранице        = 0;
		ИтогоКоличествоНаСтранице  = 0;
		ИтогоСуммаНаСтранице       = 0;
		ИтогоНДСНаСтранице         = 0;
		ИтогоСуммаСНДСНаСтранице   = 0;
		
		// инициализация итогов по документу
		ИтогоМассаБрутто = 0;
		ИтогоМест        = 0;
		ИтогоКоличество  = 0;
		ИтогоСуммаСНДС   = 0;
		ИтогоСумма       = 0;
		ИтогоНДС         = 0;
		Ном              = 0;
		ИтогАкциз=0;
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть докмента
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		
		ТабДокумент.Вывести(ОбластьЗаголовокТаблицы);
		
		Если КМ=Истина Тогда
			ОбластьМакета           = Макет.ПолучитьОбласть("СтрокаКМ");
		Иначе
			ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
		КонецЕсли;
		ОбластьВсего            = Макет.ПолучитьОбласть("ИТого");
		ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
		Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
			
			
			Ном           = Ном + 1;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
			
			Если ЗначениеЗаполнено(ВыборкаСтрок.ТоварНаименование) тогда
				ОбластьМакета.Параметры.ТоварНаименование=ВыборкаСтрок.ТоварНаименование
			Иначе
				ОбластьМакета.Параметры.ТоварНаименование=ВыборкаСтрок.ТоварНаим
				
			Конецесли;
			
			//Если ЗначениеЗаполнено(ВыборкаСтрок.НаименованиеВУПД) Тогда
			//	ОбластьМакета.Параметры.ТоварНаименование=ВыборкаСтрок.НаименованиеВУПД
				//Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				//Продолжить;
			//КонецЕсли;
			
			Если КМ=Истина Тогда
				КодыМаркировок="";
				Если КМ=Истина Тогда
					
					Нстр=Ссылка.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",ВыборкаСтрок.НомерСтрокиСвязи));
					Если НСтр.Количество()>0 Тогда
						КодыМаркировок="Коды маркировок: ";
						
						Для Каждого Стр_1_М Из НСтр Цикл
							Если КодыМаркировок<>"Коды маркировок: " Тогда
								КодыМаркировок=КодыМаркировок+", ";
							КонецЕсли;
							КодыМаркировок=КодыМаркировок+Стр_1_М.cis
						Конеццикла;
						
					КонецЕсли;
					
					
					
				КонецЕсли;
				ОбластьМакета.Параметры.КодыМаркировок=КодыМаркировок;
			КонецЕсли;
			
			
			КодТовара="";
			Если КодТовараВУПД=1 Тогда
				КодТовара=xmlString(ВыборкаСтрок.Номенклатура.МодельПроизводителяАртикул);
			ИначеЕсли КодТовараВУПД=2 Тогда
				КодТовара=xmlString(ВыборкаСтрок.Номенклатура.КодВУчетнойСистеме);
			ИначеЕсли КодТовараВУПД=3 Тогда
				КодТовара=xmlString(ВыборкаСтрок.Номенклатура.Код);
				
			Иначе
				КодТовара=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(ВыборкаСтрок.Номенклатура.GTIN),14,"0");
			КонецЕслИ;
			
			Если не ЗначениеЗаполненО(КодТовара) Тогда
				КодТовара="-";
			КонецЕсли;
			ОбластьМакета.Параметры.ТоварКод = СокрЛП(КодТовара) ;

			Если ЗначениеЗаполнено(ВыборкаСтрок.ТоварНаименование) тогда
				ОбластьМакета.Параметры.ТоварНаименование=ВыборкаСтрок.ТоварНаименование
			Иначе
				ОбластьМакета.Параметры.ТоварНаименование=ВыборкаСтрок.ТоварНаим
				
			Конецесли;
			
			//ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование)
			//;
			Акциз=0;
			Если Акциз=0 Тогда
				ОбластьМакета.Параметры.Акциз="без акциза";
			Иначе
				ОбластьМакета.Параметры.Акциз=окр(Акциз,2);
				ИтогАкциз=ИтогАкциз+окр(Акциз,2)
			КонецЕсли;
			        
			//ОбластьМакета.Параметры.ПредставлениеГТД=;
			
			//СписокКМ=Новый СписокЗначений;
			//СписокКМ.Добавить();
			
			
			
			ОбластьМакета.Параметры.СтранаПроисхожденияКод=ВыборкаСтрок.Номенклатура.СтранаПроизводства.Код;
			
				ОбластьМакета.Параметры.ПредставлениеСтраны=ВыборкаСтрок.Номенклатура.СтранаПроизводства.Наименование;
			
			
Если ЗначениеЗаполнено(ВыборкаСтрок.НомерГТД) Тогда
			
				Если ВыборкаСтрок.НомерГТД.НомераГТДНесколько.Количество()>0 Тогда
					
					НомерГТД="";
					Для Каждого СТр_2 ИЗ ВыборкаСтрок.НомерГТД.НомераГТДНесколько Цикл
						
						Если ЗначениеЗаполнено(НомерГТД) Тогда
							НомерГТД=НомерГТД+",";
						КонецЕсли;
						КодСтраны=Стр_2.КодСтраны;
						НомерГТД=НомерГТД+СокрЛП(Стр_2.НомерГТД);
						
											
					Конеццикла;
					
					ОбластьМакета.Параметры.ПредставлениеГТД=СокрЛП(НомерГТД);
					ОбластьМакета.Параметры.СтранаПроисхожденияКод=КодСтраны;
					ОбластьМакета.Параметры.ПредставлениеСтраны=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду(КодСтраны);
				Иначе
						КодСтраны=ВыборкаСтрок.НомерГТД.наименование;
						НомерГТД=ВыборкаСтрок.НомерГТД.Код;
					ОбластьМакета.Параметры.ПредставлениеГТД=СокрЛП(НомерГТД);
					ОбластьМакета.Параметры.СтранаПроисхожденияКод=КодСтраны;
					ОбластьМакета.Параметры.ПредставлениеСтраны=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду(КодСтраны);
				КонецЕсли;
			
			
		Иначе
								
			Если ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура.СтранаПроизводства.Код) 
				И ВыборкаСтрок.Номенклатура.СтранаПроизводства.Код<>"643" 
				И ВыборкаСтрок.Номенклатура.СтранаПроизводства.Код<>"051" 
				И ВыборкаСтрок.Номенклатура.СтранаПроизводства.Код<>"398" 
				И ВыборкаСтрок.Номенклатура.СтранаПроизводства.Код<>"112" 
				Тогда
				
				
				
				СтрокиКММ=Ссылка.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",ВыборкаСтрок.НомерСтрокиСвязи));
				МассивКМ=Новый СписокЗначений;
				Для Каждого Стр_1 Из СтрокиКММ Цикл
					Если МассивКМ.НайтиПоЗначению(Стр_1.СерийныйНомер)=Неопределено Тогда
						МассивКМ.Добавить(Стр_1.СерийныйНомер);
						Нстрок=Ссылка.ТоварыКМ.НайтИСтроки(Новый Структура("НомерКороба",Стр_1.СерийныйНомер));
						Для Каждого Стр_КМ из Нстрок Цикл
							Если МассивКМ.НайтиПоЗначению(Стр_КМ.cis)=Неопределено Тогда
								МассивКМ.Добавить(Стр_КМ.cis);
								
							КонецЕсли;
							
						Конеццикла;
						
					КонецЕсли;
				Конеццикла;
				
				Если МассивКМ.Количество()>0 Тогда
						//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.Ссылка,
		|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.Ссылка.НомерДекларацииТовара   КАК НомерДекларацииТовара
		|ИЗ
		|	Документ.ВводВОборот_ХамелеонЦРПТ.СерийныеНомера КАК ВводВОборот_ХамелеонЦРПТСерийныеНомера
		|ГДЕ
		|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.cis В (&СерийныйНомер)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.Ссылка.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("СерийныйНомер",МассивКМ);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НомерДекларацииТовара) Тогда
			
				ОбластьМакета.Параметры.ПредставлениеГТД=СокрЛП(ВыборкаДетальныеЗаписи.НомерДекларацииТовара);
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

				КонецЕсли;
				
				
			КонецЕсли;
		КонецЕсли;	
			//ООО=СтраныКоды.Найти(ВыборкаСтрок.Номенклатура.Producer.Country,"Код");
			//Если ООО=Неопределено Тогда
			//Иначе
			//	ОбластьМакета.Параметры.ПредставлениеСтраны=ООО.КодАльфа;
			//КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура.КодТНВЭД) Тогда
				ОбластьМакета.Параметры.КодТНВЭД=ВыборкаСтрок.Номенклатура.КодТНВЭД;
			Иначе
				ОбластьМакета.Параметры.КодТНВЭД=ВыборкаСтрок.Номенклатура.КодТНВЭДКороткий;
				
			КонецЕслИ;
				ОбластьМакета.Параметры.ЕдиницаИзмеренияКод=ВыборкаСтрок.ЕдиницаИзмеренияКод;
				ОбластьМакета.Параметры.ЕдиницаИзмерения=ВыборкаСтрок.ЕдиницаИзмеренияНаименование;
			
//			Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
				МассаБрутто = 0;
//			Иначе
//				МассаБрутто = ВыборкаСтрок.МассаБрутто;
//				МассаБрутто = ?(МассаБрутто <> Неопределено И МассаБрутто <> NULL, МассаБрутто, 0);
//			КонецЕсли;
			
//			Мест        = ВыборкаСтрок.КоличествоМест;
//			Мест        = ?(Мест <> Неопределено И Мест <> NULL, Мест, 0);
			Мест=0;
			Количество  = ВыборкаСтрок.Количество;
			СуммаСНДС   = ВыборкаСтрок.Сумма;
			СуммаНДС    = ВыборкаСтрок.СуммаНДС;
			СуммаБезНДС = СуммаСНДС  - СуммаНДС;
			
			ОбластьМакета.Параметры.Всего   = СуммаСНДС;
//			ОбластьМакета.Параметры.СуммаНДС    = СуммаНДС;

			Если Ссылка.Товары.Итог("НДС")=0 Тогда
				ОбластьМакета.Параметры.СуммаНДС    = "без НДС";
			Иначе
				ОбластьМакета.Параметры.СуммаНДС    = СуммаНДС;
			КонецЕсли;
			
		СтавкаНДС_1="без НДС";
		Если СуммаНДС<>0 Тогда
			Если СуммаСНДС-СуммаНДС<>0 Тогда
				СтавкаНДС=СуммаНДС*100/(СуммаСНДС-СуммаНДС);
				Если СтавкаНДС<5 Тогда
					СтавкаНДС_1="без НДС";
				ИначеЕсли СтавкаНДС<17 Тогда
					СтавкаНДС_1="10%"
				Иначе
					СтавкаНДС_1="20%"
					
				КонецЕслИ;
			КонецЕсли;
		КонецЕсли;
			
//			Если ВыборкаСтрок.СтавкаНДС=0 Тогда
//			ОбластьМакета.Параметры.СтавкаНДС   = "без НДС";
//		Иначе
//			ОбластьМакета.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
//		КонецЕсли;
			ОбластьМакета.Параметры.СтавкаНДС   = СтавкаНДС_1;

			ОбластьМакета.Параметры.Стоимость = СуммаБезНДС;
			Если Количество=0 Тогда
				ОбластьМакета.Параметры.Цена = СуммаБезНДС;
			Иначе
				ОбластьМакета.Параметры.Цена = СуммаБезНДС/Количество;
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			// увеличим итоги по странице
			ИтогоМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице + МассаБрутто;
			ИтогоМестНаСтранице        = ИтогоМестНаСтранице        + Мест;
			ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + Количество;
			ИтогоСуммаНаСтранице       = ИтогоСуммаНаСтранице       + СуммаБезНДС;
			ИтогоНДСНаСтранице         = ИтогоНДСНаСтранице         + СуммаНДС;
			ИтогоСуммаСНДСНаСтранице   = ИтогоСуммаСНДСНаСтранице   + СуммаСНДС;
			
			// увеличим итоги по дукументу
			ИтогоМассаБрутто = ИтогоМассаБрутто + МассаБрутто;
			ИтогоМест        = ИтогоМест        + Мест;
			ИтогоКоличество  = ИтогоКоличество  + Количество;
			ИтогоСумма       = ИтогоСумма       + СуммаБезНДС;
			ИтогоНДС         = ИтогоНДС         + СуммаНДС;
			ИтогоСуммаСНДС   = ИтогоСуммаСНДС   + СуммаСНДС;
			
		КонецЦикла;
		
		// Выводим итоги по документу в целом
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.ИтогоСтоимость       = ИтогоСумма;
			Если Ссылка.Товары.Итог("НДС")=0 Тогда
				ОбластьМакета.Параметры.ИтогоСуммаНДС    = "без НДС";
			Иначе
				ОбластьМакета.Параметры.ИтогоСуммаНДС    = ИтогоНДС;
			КонецЕсли;
		//ОбластьМакета.Параметры.ИтогоСуммаНДС         = ИтогоНДС;
		ОбластьМакета.Параметры.ИтогоВсего   = ИтогоСуммаСНДС;
		ОбластьМакета.Параметры.Акциз   = ИтогАкциз;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		
		Основание="";
		Для Каждого Стр_1 Из Ссылка.ОснованиеОтгрузкиТоваров Цикл
			
			Если ЗначениеЗаполнено(Основание) Тогда
				Основание=Основание+", ";
			КонецЕслИ;
			
			Основание=Основание+Стр_1.НаименованиеДокумента+" № "+Стр_1.НомерДокумента+" от "+Формат(Стр_1.ДатаОтгрузки,"ДЛФ=Д");
			
		Конеццикла;
		
		
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалНакладной");
		
		ОбластьМакета.Параметры.основание=Основание;
		
		Если ЗначениеЗАполнено(Ссылка.ДатаПередачиТовара) Тогда
			ОбластьМакета.Параметры.ДатаОтгрузкиПередачи = Формат(Ссылка.ДатаПередачиТовара, "ДФ='дд ММММ гггг'") + " г.";
		КонецЕсли;
		
		ОБластьМакета.Параметры.ПредставлениеОрганизации=Ссылка.Организация.Наименование+", ИНН/КПП: "+Ссылка.Организация.ИНН+"/"+Ссылка.Организация.КПП;
		ОБластьМакета.Параметры.ПредставлениеКонтрагента=Ссылка.Контрагент.Наименование+", ИНН/КПП: "+Ссылка.Контрагент.ИНН+"/"+Ссылка.Контрагент.КПП;
		
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		
		Возврат ТабДокумент;
		
КонецФункции


&НаКлиенте
Процедура ПечатьУПД(Команда)
	
		Печать=Новый ТабличныйДокумент;
	Для Каждого Стр_1 Из Элементы.Отгрузка_Список.ВыделенныеСтроки Цикл
	ПечатьУПДНаСервере(печать,Стр_1);
	
	Конеццикла;
	Печать.АвтоМасштаб=Истина;
	Печать.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	
	Печать.ИмяПараметровПечати="Печать_УПД";
	Печать.Показать();
	
КонецПроцедуры

Функция СформироватьXSML(Ссылка)
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("acceptance");
	Чтение.ЗаписатьАтрибут("action_id","11");
	Чтение.ЗаписатьАтрибут("version","5");
	
	Чтение.ЗаписатьНачалоЭлемента("shipment_id");
	Чтение.ЗаписатьТекст(Ссылка._Order_ID);
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Чтение.ЗаписатьНачалоЭлемента("trade_participant_inn_sender");
	Чтение.ЗаписатьТекст(Ссылка.Организация.ИНН);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("trade_participant_inn_receiver");
	Чтение.ЗаписатьТекст(Ссылка.Контрагент.ИНН);
	Чтение.ЗаписатьКонецЭлемента();
	
//	Чтение.ЗаписатьНачалоЭлемента("trade_participant_inn_owner");
//	Чтение.ЗаписатьТекст(Ссылка.Организация.ИНН);
//	Чтение.ЗаписатьКонецЭлемента();
	
	
	Чтение.ЗаписатьНачалоЭлемента("shipment_date");
	Чтение.ЗаписатьТекст(Формат(Ссылка.ДатаПередачиТовара,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("reception_date");
	Чтение.ЗаписатьТекст(Формат(Ссылка.ДатаПередачиТовара,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Чтение.ЗаписатьНачалоЭлемента("transfer_date");
	Чтение.ЗаписатьТекст(Формат(Ссылка.ДатаПередачиТовара,"ДФ=""дд.ММ.гггг"""));
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("move_document_number");
	Чтение.ЗаписатьТекст(Ссылка.НомерПервичногоДокумента);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("move_document_date");
	Чтение.ЗаписатьТекст(Формат(Ссылка.Дата,"ДФ=""дд.ММ.гггг"""));
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("turnover_type");
	Если ЗначениеЗаполнено(Ссылка.ВидТоварооборота) Тогда
		Чтение.ЗаписатьТекст(xmlString(Ссылка.ВидТоварооборота));
		
	Иначе
		//Чтен.ЗаписатьЗначение("SALE");
		Чтение.ЗаписатьТекст("SELLING");
	КонецЕсли;
	Чтение.ЗаписатьКонецЭлемента();
	
	//Чтение.ЗаписатьНачалоЭлемента("to_not_participant");
	//Если Ссылка.ОтгрузкаНеУчастника Тогда 
	//	Чтение.ЗаписатьТекст("true");
	//Иначе
	//	Чтение.ЗаписатьТекст("false");
	//КонецЕсли;
	//Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("products_list");
	
Для Каждого Стр_1 Из Ссылка.Товары Цикл
	
	//Чтение.ЗаписатьНачалоЭлемента("signs");
	НСтрок=Ссылка.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
	Для Каждого Стр_c Из НСтрок Цикл
		Если Стр_c.Статус="RETIRED" Тогда
			Продолжить;
		КонецЕсли;
		Чтение.ЗаписатьНачалоЭлемента("product");
		
		
		Если СтрДлина(Стр_c.cis)=18 Тогда	
			Чтение.ЗаписатьНачалоЭлемента("kitu");
		Иначе
			Чтение.ЗаписатьНачалоЭлемента("ki");
		КонецЕсли;
		
		Штрих=Стр_c.cis;
		
		Чтение.ЗаписатьТекст(Штрих);
		Чтение.ЗаписатьКонецЭлемента();
		
		
		Чтение.ЗаписатьНачалоЭлемента("accept_type");
		
		Чтение.ЗаписатьТекст("true");
		Чтение.ЗаписатьКонецЭлемента();
		
		
		
		
		Если ЗначениеЗаполнено(Стр_1.Цена) тогда
			Чтение.ЗаписатьНачалоЭлемента("cost");
			
			Чтение.ЗаписатьТекст(xmlString(Стр_1.Цена));
			Чтение.ЗаписатьКонецЭлемента();
			
			Если ЗначениеЗАполнено(Стр_1.НДС) И ЗначениеЗАполнено(Стр_1.КоличествоКМ) ТОгда
				
				Чтение.ЗаписатьНачалоЭлемента("vat_value");				
				Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.НДС/Стр_1.КоличествоКМ,2)));
				Чтение.ЗаписатьКонецЭлемента();
				
			КонецЕсли;
		КонецЕсли;
		Чтение.ЗаписатьКонецЭлемента();
		
	 	//Чтение.ЗаписатьКонецЭлемента();
		
	Конеццикла;
Конеццикла;
	Чтение.ЗаписатьКонецЭлемента();
//	Чтение.ЗаписатьКонецЭлемента();
		
	Чтение.ЗаписатьКонецЭлемента();
	
	Текст=Чтение.Закрыть();

	//МассивТекстов.Добавить(Текст);
	 //Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		//ЗапишемВРегистр(Текст);
	//КонецЕсли;
//Конеццикла;
	Возврат Текст
Конецфункции

&НаКлиенте
Процедура СоздатьXMLФайлПодтверждения(Команда)
	// Вставить содержимое обработчика.
	Если Элементы.Отгрузка_Список.ТекущиеДанные=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	СохранитьФайлXMLОтгрузка(Элементы.Отгрузка_Список.ТекущиеДанные.Ссылка)
КонецПроцедуры	
&НаКлиенте
Процедура СохранитьФайлXMLОтгрузка(Ccsk) Экспорт
	Текст=СформироватьXSML(Ccsk) ;
	
	
	ДиалогФыбораФайла								=	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогФыбораФайла.Фильтр="Файл xml (*.xml)|*.xml";
	ДиалогФыбораФайла.Заголовок						=	"Выберите загружаемый файл с данными";
	ДиалогФыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогФыбораФайла.Расширение					=	"xml";
	ДиалогФыбораФайла.ИндексФильтра					=	0;
	ДиалогФыбораФайла.ПолноеИмяФайла				=	"";
	ДиалогФыбораФайла.ПроверятьСуществованиеФайла	=	Истина;
	
	ДиалогФыбораФайла.Показать(Новый ОписаниеОповещения("ВыборФайла",ЭтаФорма,Текст));
КонецПроцедуры

&НаКлиенте
&наКлиенте
Процедура ВыборФайла(ВыборЗагрExcel,РР) Экспорт
	Если ЗначениеЗАполнено(ВыборЗагрExcel)
		И ВыборЗагрExcel.Количество()>0  тогда
		AAA=ВыборЗагрExcel[0];

		ТекстоывйДо=Новый ТекстовыйДокумент;
		ТекстоывйДо.ДобавитьСтроку(РР);
		ТекстоывйДо.НачатьЗапись(,AAA,КодировкаТекста.UTF8);
	КонецЕсли;
	//ДиалогФыбораФайла.Показать(Новый ОписаниеОповещения("ВыборФайлаСохранить",ЭтаФорма,Табл));
КонецПроцедуры

&НаСервере
Процедура КлюКапчиПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.КлюКапчи=КлюКапчи;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КлюКапчиПриИзменении(Элемент)
	КлюКапчиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КупитьКапча(Команда)
	// Вставить содержимое обработчика.
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ПослеЗапускаРУкапча",Этаформа),"https://rucaptcha.com/?from=2241883");
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаРУкапча(РР,ДД) Экспорт
КонецПроцедуры


&НаСервере
Процедура Поле1ПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ПодключатьсяАвтоматическиПоЦРПТ=ПодключатьсяАвтоматическиПоЦРПТ;
	РегДв.Записать(Истина);
КонецПроцедуры


&НаКлиенте
Процедура Поле1ПриИзменении(Элемент)
	Поле1ПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ПечатьУПДРасширенная(Команда)
	// Вставить содержимое обработчика.
	
		Печать=Новый ТабличныйДокумент;
		Для Каждого Стр_1 Из Элементы.Отгрузка_Список.ВыделенныеСтроки Цикл
			
			
	ПечатьУПДНаСервере_Расширенная(печать,Стр_1);
	
	Конеццикла;
	Печать.АвтоМасштаб=Истина;
	Печать.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	
	Печать.ИмяПараметровПечати="Печать_УПД";
	Печать.Показать();
	
	
КонецПроцедуры

Функция ПечатьУПДНаСервере_Расширенная(ТабДокумент,Ссылка,КМ=Ложь) Экспорт
	
	Если Ссылка.ТоварыКМ.Количество()=0 Тогда
		Сообщить("По документу "+Строка(Ссылка)+" нет информации по каждой КМ");
		Возврат Неопределено;
	КонецЕсли;
	// Вставить содержимое обработчика.
	Таб=Новый ТабличныйДОкумент;
	Макет=Документы.Отгрузка_ХамелеонЦРПТ.ПолучитьМакет("Страны");
	ОбластьМакета=Макет.ПолучитьОбласть("Страны");
	Таб.Вывести(ОбластьМакета);
	СтраныКоды=Новый Таблицазначений;
	СтраныКоды.Колонки.Добавить("Код");
	СтраныКоды.Колонки.Добавить("КодАльфа");
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Сссс=СтраныКоды.Добавить();
		СССС.Код=Таб.Область(Сч,2).Текст;
		СССС.КодАльфа=Таб.Область(Сч,4).Текст;
			
	КонецЦикла;
	


	
	
	
	Массивоваров=Новый ТаблицаЗначений;
	Массивоваров.Колонки.Добавить("Номенклатура");
	Массивоваров.Колонки.Добавить("Количество");
	Массивоваров.Колонки.Добавить("НомерКороба");
	
	Для Каждого Стр_1 Из Ссылка.ТоварыКМ Цикл
		Стр_2=Массивоваров.Найти(Стр_1.Продукция,"Номенклатура");
		Если Стр_2=Неопределено Тогда
			Стр_2=Массивоваров.Добавить();
			Стр_2.Номенклатура=Стр_1.Продукция;
			Стр_2.НомерКороба=Стр_1.НомерКороба;
			Стр_2.Количество=0;
		КонецЕсли;
		Стр_2.Количество=Стр_2.Количество+1;
	Конеццикла;
	
	
	
		ТоварКод = "Код";
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент",   Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номер,
		|	Дата КАК ДатаДокумента,
		|	Организация КАК Организация,
		|	Организация КАК ЮрФизЛицо,
		|	Организация КАК Поставщик,
		|	Организация КАК Контрагент,
		|	Организация КАК Руководители,
		|	ВЫБОР КОГДА ПОДСТРОКА(Контрагент.ФактическийАдрес,1,1000)="""" ТОГДА Контрагент.ЮридическийАдрес ИНАЧЕ Контрагент.ФактическийАдрес КОНЕЦ КАК АдресДоставки,
		|	Контрагент КАК Грузополучатель,
		|	Организация КАК Груз3оотправитель,
		|	"""" КАК БанковскийСчет,
		|	Контрагент КАК Покупатель,
		|	Контрагент КАК Плательщик
		|ИЗ
		|	Документ.Отгрузка_ХамелеонЦРПТ КАК РеализацияТоваровУслуг_2
		|
		|
		|ГДЕ
		|	РеализацияТоваровУслуг_2.Ссылка = &ТекущийДокумент
		|";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|		ВложенныйЗапрос.НаименованиеВУПД КАК ТоварНаименование,
		|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.Наименование КАК СТРОКА(1000))
		|		КАК ТоварНаим,
		|	ВложенныйЗапрос.Номенклатура.Код КАК ТоварКод,
		|	"""" КАК БазоваяЕдиницаНаименование,
		|	"""" КАК БазоваяЕдиницаКодПоОКЕИ,
		|	"""" КАК ЕдиницаИзмерения,
		|	"""" КАК ВидУпаковки,
		|	1 КАК КоличествоВОдномМесте,
		|	1 КАК МассаБрутто,
		|	"""" КАК Характеристика,
		|	"""" КАК Серия,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.БеНДС
		|			ТОГДА 0
		|		ИНАЧЕ &СтавкаНДС
		|	КОНЕЦ КАК СтавкаНДС,
		|	ВложенныйЗапрос.Цена КАК Цена,
		|	ЛОЖЬ КАК ЕстьСкидкиПоСтроке,
		|	ВложенныйЗапрос.Количество КАК Количество,
		|	ВложенныйЗапрос.КоличествоМест КАК КоличествоМест,
		|	ВложенныйЗапрос.Сумма КАК Сумма,
		|	ВложенныйЗапрос.СуммаНДС КАК СуммаНДС,
		|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
		|	ВложенныйЗапрос.Метка КАК Метка,
		|	ВложенныйЗапрос.Поле1 КАК ПредставлениеГТД,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
		|	ВложенныйЗапрос.НомерСтрокиСвязи
		|ИЗ
		|	(ВЫБРАТЬ
		|		РеализацияТоваровУслуг_2.GTIN КАК Номенклатура,
		|		1 КАК Коэффициент,
		|		РеализацияТоваровУслуг_2.Цена КАК Цена,
		|		СУММА(РеализацияТоваровУслуг_2.КоличествоКМ) КАК Количество,
		|		СУММА(РеализацияТоваровУслуг_2.КоличествоКМ) КАК КоличествоМест,
		|		СУММА(ВЫБОР
		|				КОГДА РеализацияТоваровУслуг_2.Сумма = 0
		|					ТОГДА РеализацияТоваровУслуг_2.Цена * РеализацияТоваровУслуг_2.КоличествоКМ
		|				ИНАЧЕ РеализацияТоваровУслуг_2.Сумма
		|			КОНЕЦ) КАК Сумма,
		|		СУММА(ВЫРАЗИТЬ(РеализацияТоваровУслуг_2.НДС КАК ЧИСЛО(15, 2))) КАК СуммаНДС,
		|		РеализацияТоваровУслуг_2.НомерСтроки КАК НомерСтроки,
		|		0 КАК Метка,
		|		ВЫБОР
		|			КОГДА СУММА(ВЫРАЗИТЬ(РеализацияТоваровУслуг_2.НДС КАК ЧИСЛО(15, 2))) = 0
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК БеНДС,
		|		"""" КАК Поле1,
		|		РеализацияТоваровУслуг_2.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		РеализацияТоваровУслуг_2.НомерСтроки КАК НомерСтроки1,
		|		РеализацияТоваровУслуг_2.НомерСтрокиСвязи КАК НомерСтрокиСвязи,
		|		ПОДСТРОКА(ВЫРАЗИТЬ(РеализацияТоваровУслуг_2.НаименованиеВУПД КАК СТРОКА), 1, 1000) КАК НаименованиеУПД
		|	ИЗ
		|		Документ.Отгрузка_ХамелеонЦРПТ.Товары КАК РеализацияТоваровУслуг_2
		|	ГДЕ
		|		РеализацияТоваровУслуг_2.Ссылка = &ТекущийДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РеализацияТоваровУслуг_2.GTIN,
		|		РеализацияТоваровУслуг_2.ЕдиницаИзмерения,
		|		РеализацияТоваровУслуг_2.НомерСтроки,
		|		РеализацияТоваровУслуг_2.Цена,
		|		РеализацияТоваровУслуг_2.НомерСтрокиСвязи,
		|		РеализацияТоваровУслуг_2.НомерСтроки,
		|		ПОДСТРОКА(ВЫРАЗИТЬ(РеализацияТоваровУслуг_2.НаименованиеВУПД КАК СТРОКА), 1, 1000)) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.НомерСтроки";
		
		
			Запрос.УстановитьПараметр("СтавкаНДС",20);
		
		ЗапросТовары = Запрос.Выполнить().Выгрузить();

			
		
			Макет = Документы.Отгрузка_ХамелеонЦРПТ.ПолучитьМакет("УниверсальныйПередаточныйДокумент981_01_10_2018");
		
		СведенияОПоставщике       = 
		Ссылка.Организация.Наименование;
		//+", "+Ссылка.Организация.АдресМестонахождения;
		
		
		
		//СведенияОПокупателе       = "Покупатель: "+Ссылка.Контрагент.Наименование;
		СведенияОПокупателе       = Ссылка.Контрагент.Наименование;
		//+", "+Ссылка.Контрагент.ЮридическийАдрес;
		

		Если ЗначениеЗАполнено(Ссылка.Грузополучатель) Тогда
			
			ФактАдрес_1=РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("ОБъект,Тип",Ссылка.Грузополучатель,
						Перечисления.ТипАдреса_ХамелеонЦРПТ.Фактический));
			Если ЗначениеЗаполнено(ФактАдрес_1.КодРегиона) Тогда
				
				ТТТ=ТаблицаРегионов.НайтиСтроки(Новый Структура("КодРегиона",ФактАдрес_1.КодРегиона));
				Если ТТТ.Количество()>0 Тогда
					КодРегиона=ТТТ[0].Название
				Иначе
					КодРегиона=ФактАдрес_1.КодРегиона
				Конецесли;
				
				ФактическийАдрес=ФактАдрес_1.Индекс+", "+КодРегиона+", "+ФактАдрес_1.Район+", "+
				ФактАдрес_1.Город+", "+ФактАдрес_1.НаселенныйПункт+", "+ФактАдрес_1.Улица+", "+ФактАдрес_1.Дом+", "+ФактАдрес_1.Корпус
				+", "+ФактАдрес_1.Квартира;
				
				
			Иначе
				
				Если ЗначениеЗаполнено(Ссылка.Грузополучатель.ФактическийАдрес) Тогда
					ФактическийАдрес=Ссылка.Грузополучатель.ФактическийАдрес;
				Иначе
					ФактическийАдрес=Ссылка.Грузополучатель.ЮридическийАдрес;
				КонецЕсли;
							
			КонецЕсли;
			
			
			СведенияОГрузополучателе=Ссылка.Грузополучатель.Наименование+", "+ФактическийАдрес;
			
			Если ЗначениеЗаполнено(Ссылка.Грузополучатель.Телефон) Тогда
				СведенияОГрузополучателе=СведенияОГрузополучателе+", телефон: "+Ссылка.Грузополучатель.Телефон;
				
			КонецЕсли;
			
		Иначе
			ФактАдрес_1=РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("ОБъект,Тип",Ссылка.Контрагент,
						Перечисления.ТипАдреса_ХамелеонЦРПТ.Фактический));
			Если ЗначениеЗаполнено(ФактАдрес_1.КодРегиона) Тогда
				
				ТТТ=ТаблицаРегионов.НайтиСтроки(Новый Структура("КодРегиона",ФактАдрес_1.КодРегиона));
				Если ТТТ.Количество()>0 Тогда
					КодРегиона=ТТТ[0].Название
				Иначе
					КодРегиона=ФактАдрес_1.КодРегиона
				Конецесли;
				
				ФактическийАдрес=ФактАдрес_1.Индекс+", "+КодРегиона+", "+ФактАдрес_1.Район+", "+
				ФактАдрес_1.Город+", "+ФактАдрес_1.НаселенныйПункт+", "+ФактАдрес_1.Улица+", "+ФактАдрес_1.Дом+", "+ФактАдрес_1.Корпус
				+", "+ФактАдрес_1.Квартира;
				
				
			Иначе
				
				Если ЗначениеЗаполнено(Ссылка.Контрагент.ФактическийАдрес) Тогда
					ФактическийАдрес=Ссылка.Контрагент.ФактическийАдрес;
				Иначе
					ФактическийАдрес=Ссылка.Контрагент.ЮридическийАдрес;
				КонецЕсли;
							
			КонецЕсли;
			
			
			
				СведенияОГрузополучателе=Ссылка.Контрагент.Наименование+", "+ФактическийАдрес;
				Если ЗначениеЗаполнено(Ссылка.Контрагент.Телефон) Тогда
					СведенияОГрузополучателе=СведенияОГрузополучателе+", телефон: "+Ссылка.Контрагент.Телефон;
				КонецЕсли;
		КонецЕсли;
		
		
		
		
//		Если ЗначениеЗаполнено(Объект.АдресМестонахождения) ТОгда
Если ЗначениеЗаполнено(Ссылка.Грузоотправитель) Тогда
	
			ФактАдрес_1=РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("ОБъект,Тип",Ссылка.Грузоотправитель,
						Перечисления.ТипАдреса_ХамелеонЦРПТ.Фактический));
			Если ЗначениеЗаполнено(ФактАдрес_1.КодРегиона) Тогда
				
				ТТТ=ТаблицаРегионов.НайтиСтроки(Новый Структура("КодРегиона",ФактАдрес_1.КодРегиона));
				Если ТТТ.Количество()>0 Тогда
					КодРегиона=ТТТ[0].Название
				Иначе
					КодРегиона=ФактАдрес_1.КодРегиона
				Конецесли;
				
				ФактическийАдрес=ФактАдрес_1.Индекс+", "+КодРегиона+", "+ФактАдрес_1.Район+", "+
				ФактАдрес_1.Город+", "+ФактАдрес_1.НаселенныйПункт+", "+ФактАдрес_1.Улица+", "+ФактАдрес_1.Дом+", "+ФактАдрес_1.Корпус
				+", "+ФактАдрес_1.Квартира;
				
				
			Иначе
				
				Если ЗначениеЗаполнено(Ссылка.Грузоотправитель.ФактическийАдрес) Тогда
					ФактическийАдрес=Ссылка.Грузоотправитель.ФактическийАдрес;
				Иначе
					ФактическийАдрес=Ссылка.Грузоотправитель.ЮридическийАдрес;
				КонецЕсли;
							
			КонецЕсли;
			
	
	
//	Если ЗначениеЗАполнено(Ссылка.Грузоотправитель.ФактическийАдрес) Тогда
			СведенияОГрузоотправитель =Ссылка.Грузоотправитель.Наименование+", "+ФактическийАдрес ;
//		Иначе
//			СведенияОГрузоотправитель =Ссылка.Грузоотправитель.Наименование+", "+Ссылка.Грузоотправитель.ЮридическийАдрес ;
//		КонецЕсли;
		
		
			Если ЗначениеЗаполнено(Ссылка.Грузоотправитель.Телефон) Тогда
				СведенияОГрузоотправитель=СведенияОГрузоотправитель+", телефон: "+Ссылка.Грузоотправитель.Телефон;
			КонецЕсли;
		
		Иначе
			ФактАдрес_1=РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("ОБъект,Тип",Ссылка.Организация,
						Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический));
			Если ЗначениеЗаполнено(ФактАдрес_1.КодРегиона) Тогда
				
				ТТТ=ТаблицаРегионов.НайтиСтроки(Новый Структура("КодРегиона",ФактАдрес_1.КодРегиона));
				Если ТТТ.Количество()>0 Тогда
					КодРегиона=ТТТ[0].Название
				Иначе
					КодРегиона=ФактАдрес_1.КодРегиона
				Конецесли;
				
				ФактическийАдрес=ФактАдрес_1.Индекс+", "+КодРегиона+", "+ФактАдрес_1.Район+", "+
				ФактАдрес_1.Город+", "+ФактАдрес_1.НаселенныйПункт+", "+ФактАдрес_1.Улица+", "+ФактАдрес_1.Дом+", "+ФактАдрес_1.Корпус
				+", "+ФактАдрес_1.Квартира;
				
				
			Иначе
				
					ФактическийАдрес=Ссылка.Организация.АдресМестонахождения ;
							
			КонецЕсли;
			
			
			
			СведенияОГрузоотправитель =Ссылка.Организация.Наименование+", "+ФактическийАдрес;
			Если ЗначениеЗаполнено(Ссылка.Организация.Телефон) Тогда
				СведенияОГрузоотправитель=СведенияОГрузоотправитель+", телефон: "+Ссылка.Организация.Телефон;
			КонецЕсли;
		КонецЕсли;
//		Иначе
//		КонецЕсли;

		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Номер=Ссылка.НомерПервичногоДокумента;
		ОбластьМакета.Параметры.Дата = Формат(Ссылка.Дата, "ДФ='дд ММММ гггг'") + " г.";
		
		
		
		
		
			ФактАдрес_1=РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("ОБъект,Тип",Ссылка.Организация,
						Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический));
			Если ЗначениеЗаполнено(ФактАдрес_1.КодРегиона) Тогда
				
				ТТТ=ТаблицаРегионов.НайтиСтроки(Новый Структура("КодРегиона",ФактАдрес_1.КодРегиона));
				Если ТТТ.Количество()>0 Тогда
					КодРегиона=ТТТ[0].Название
				Иначе
					КодРегиона=ФактАдрес_1.КодРегиона
				Конецесли;
				
				ФактическийАдрес=ФактАдрес_1.Индекс+", "+КодРегиона+", "+ФактАдрес_1.Район+", "+
				ФактАдрес_1.Город+", "+ФактАдрес_1.НаселенныйПункт+", "+ФактАдрес_1.Улица+", "+ФактАдрес_1.Дом+", "+ФактАдрес_1.Корпус
				+", "+ФактАдрес_1.Квартира;
				
				
			Иначе
				
					ФактическийАдрес=Ссылка.Организация.АдресМестонахождения ;
							
			КонецЕсли;
			
			
			
		
			ОбластьМакета.Параметры.АдресПоставщика = СокрЛП(ФактическийАдрес);
			
			Если ЗначениеЗаполнено(Ссылка.Организация.Телефон) Тогда
				ОбластьМакета.Параметры.АдресПоставщика = ОбластьМакета.Параметры.АдресПоставщика +", телефон: "+
				Ссылка.Организация.Телефон;
			КонецЕсли;
			
			
		ОбластьМакета.Параметры.ИННПоставщика=Ссылка.Организация.ИНН+"/"+Ссылка.организация.КПП;
		
		
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя=СведенияОГрузоотправитель;
		
		
		Если Ссылка.Товары.Итог("НДС")=0 
			ИЛИ Ссылка.ВидТоварооборота=Перечисления.ВидТоварооборота_ХамелеонЦРПТ.COMMISSION Тогда
			ОбластьМакета.Параметры.Статус="2";
		Иначе
			ОбластьМакета.Параметры.Статус="1";
			
		КонецЕсли;
		
//		ОбластьМакета.Параметры.ПредставлениеОрганизации = СведенияОПоставщике;
		
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя = СведенияОГрузополучателе;
		//СтрокаПоДокументу = "К платежно-расчетному документу №    от";
		//ОбластьМакета.Параметры.ПоДокументу = СтрокаПоДокументу;
		
		
		ОбластьМакета.Параметры.ПредставлениеПоставщика  = СведенияОПоставщике;
		ОбластьМакета.Параметры.ПредставлениеПокупателя= СведенияОПокупателе;
		
		
		
					ФактАдрес_1=РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("ОБъект,Тип",Ссылка.Контрагент,
						Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический));
			Если ЗначениеЗаполнено(ФактАдрес_1.КодРегиона) Тогда
				
				ТТТ=ТаблицаРегионов.НайтиСтроки(Новый Структура("КодРегиона",ФактАдрес_1.КодРегиона));
				Если ТТТ.Количество()>0 Тогда
					КодРегиона=ТТТ[0].Название
				Иначе
					КодРегиона=ФактАдрес_1.КодРегиона
				Конецесли;
				
				ФактическийАдрес=ФактАдрес_1.Индекс+", "+КодРегиона+", "+ФактАдрес_1.Район+", "+
				ФактАдрес_1.Город+", "+ФактАдрес_1.НаселенныйПункт+", "+ФактАдрес_1.Улица+", "+ФактАдрес_1.Дом+", "+ФактАдрес_1.Корпус
				+", "+ФактАдрес_1.Квартира;
				
				
			Иначе
				
					ФактическийАдрес=Ссылка.Контрагент.ЮридическийАдрес;
							
			КонецЕсли;
			
		
			ОбластьМакета.Параметры.АдресПокупателя=ФактическийАдрес;
			
			Если ЗначениеЗаполнено(Ссылка.Контрагент.Телефон) Тогда
				ОбластьМакета.Параметры.АдресПокупателя = ОбластьМакета.Параметры.АдресПокупателя+", телефон: "+
				Ссылка.Контрагент.Телефон;
			КонецЕсли;
			

			
			
			
			
		ОбластьМакета.Параметры.ИННПокупателя=Ссылка.Контрагент.ИНН+"/"+Ссылка.Контрагент.КПП;

		
		ТабДокумент.Вывести(ОбластьМакета);
		
		НомерСтраницы   = 1;
	
		КоличествоСтрок = ЗапросТовары.Количество();
		
		// инициализация итогов по странице
		ИтогоМассаБруттоНаСтранице = 0;
		ИтогоМестНаСтранице        = 0;
		ИтогоКоличествоНаСтранице  = 0;
		ИтогоСуммаНаСтранице       = 0;
		ИтогоНДСНаСтранице         = 0;
		ИтогоСуммаСНДСНаСтранице   = 0;
		
		// инициализация итогов по документу
		ИтогоМассаБрутто = 0;
		ИтогоМест        = 0;
		ИтогоКоличество  = 0;
		ИтогоСуммаСНДС   = 0;
		ИтогоСумма       = 0;
		ИтогоНДС         = 0;
		Ном              = 0;
		ИтогАкциз=0;
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть докмента
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		
		ТабДокумент.Вывести(ОбластьЗаголовокТаблицы);
		
		Если Км=Истина Тогда	
			ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
		Иначе
			ОбластьМакета           = Макет.ПолучитьОбласть("СтрокаКМ");
			
		КонецЕсли;
		ОбластьВсего            = Макет.ПолучитьОбласть("ИТого");
		ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
		
		
		Для Каждого ВыборкаСтрок_1 ИЗ Массивоваров Цикл
			
			
			
	//"ВЫБРАТЬ
	//	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	//	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.Наименование КАК СТРОКА(1000)) КАК ТоварНаименование,
	//	|	ВложенныйЗапрос.Номенклатура.Код КАК ТоварКод,
	//	|	"""" КАК БазоваяЕдиницаНаименование,
	//	|	"""" КАК БазоваяЕдиницаКодПоОКЕИ,
	//	|	"""" КАК ЕдиницаИзмерения,
	//	|	"""" КАК ВидУпаковки,
	//	|	1 КАК КоличествоВОдномМесте,
	//	|	1 КАК МассаБрутто,
	//	|	"""" КАК Характеристика,
	//	|	"""" КАК Серия,
	//	|	ВЫБОР
	//	|		КОГДА ВложенныйЗапрос.БеНДС
	//	|			ТОГДА 0
	//	|		ИНАЧЕ &СтавкаНДС
	//	|	КОНЕЦ КАК СтавкаНДС,
	//	|	ВложенныйЗапрос.Цена КАК Цена,
	//	|	ЛОЖЬ КАК ЕстьСкидкиПоСтроке,
	//	|	ВложенныйЗапрос.Количество КАК Количество,
	//	|	ВложенныйЗапрос.КоличествоМест КАК КоличествоМест,
	//	|	ВложенныйЗапрос.Сумма КАК Сумма,
	//	|	ВложенныйЗапрос.СуммаНДС КАК СуммаНДС,
	//	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	//	|	ВложенныйЗапрос.Метка КАК Метка,
	//	|	ВложенныйЗапрос.Поле1 КАК ПредставлениеГТД,
	//	|	ВложенныйЗапрос.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	//	|	ВложенныйЗапрос.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	//	|	ВложенныйЗапрос.НомерСтрокиСвязи
	
		         ВыборкаСтрок=Новый Структура;
				 ВыборкаСтрок.Вставить("Номенклатура",ВыборкаСтрок_1.Номенклатура);
				 
				 
			Если ЗначениеЗаполнено(ВыборкаСтрок.ТоварНаименование) тогда
				//ОбластьМакета.Параметры.ТоварНаименование=ВыборкаСтрок.ТоварНаименование
				 ВыборкаСтрок.Вставить("ТоварНаименование",ВыборкаСтрок.ТоварНаименование);
			Иначе
//				ОбластьМакета.Параметры.ТоварНаименование=ВыборкаСтрок.ТоварНаим
				 ВыборкаСтрок.Вставить("ТоварНаименование",ВыборкаСтрок.ТоварНаим);
				
			Конецесли;
				 
				 ВыборкаСтрок.Вставить("ТоварКод",ВыборкаСтрок_1.Номенклатура.Код);
				 
				 СерийникНайти=Ссылка.СерийныеНомера.НайтиСтроки(Новый Структура("cis",ВыборкаСтрок_1.НомерКороба));
				 Нстр=Ссылка.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",СерийникНайти[0].НомерСтрокиСвязи));
				Нстр=Нстр[0];
				КоличКм=Нстр.КоличествоНомеровКМ;
				Если Не ЗначениеЗаполнено(КоличКм) Тогда
					КоличКм=НСТр.КоличествоКМ;
				КонецЕсли;
				цена=Окр(Нстр.Цена*НСТр.КоличествоКМ/КоличКМ,2);
				 ВыборкаСтрок.Вставить("цена",цена);
				 ВыборкаСтрок.Вставить("Количество",ВыборкаСтрок_1.Количество);
				 ВыборкаСтрок.Вставить("Сумма",Окр(цена*ВыборкаСтрок_1.Количество,2));
				 ВыборкаСтрок.Вставить("СуммаНДС",Окр(Нстр.НДС*ВыборкаСтрок_1.Количество/КоличКМ,2));
				 ВыборкаСтрок.Вставить("ЕдиницаИзмеренияКод",Нстр.ЕдиницаИзмерения.Код);
				 ВыборкаСтрок.Вставить("ЕдиницаИзмеренияНаименование",Нстр.ЕдиницаИзмерения.Наименование);
				 
				 
				 
				 
			Ном           = Ном + 1;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
			
			Если КМ=Истина Тогда
				КодыМаркировок="";
				Если КМ=Истина Тогда
					
					Нстр=Ссылка.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",ВыборкаСтрок.НомерСтрокиСвязи));
					Если НСтр.Количество()>0 Тогда
						КодыМаркировок="Коды маркировок: ";
						
						Для Каждого Стр_1_М Из НСтр Цикл
							Если КодыМаркировок<>"Коды маркировок: " Тогда
								КодыМаркировок=КодыМаркировок+", ";
							КонецЕсли;
							КодыМаркировок=КодыМаркировок+Стр_1_М.cis
						Конеццикла;
						
					КонецЕсли;
					
					
					
				КонецЕсли;
				ОбластьМакета.Параметры.КодыМаркировок=КодыМаркировок;
			КонецЕсли;
			
			
				 
			Если ЗначениеЗаполнено(ВыборкаСтрок_1.ТоварНаименование) тогда
				//ОбластьМакета.Параметры.ТоварНаименование=ВыборкаСтрок.ТоварНаименование
			//	 ВыборкаСтрок.Вставить("ТоварНаименование",ВыборкаСтрок_1.ТоварНаименование);
			
			ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок_1.ТоварНаименование)
			;
			Иначе
//				ОбластьМакета.Параметры.ТоварНаименование=ВыборкаСтрок.ТоварНаим
			ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок_1.ТоварНаим)
			;
				 //ВыборкаСтрок.Вставить("ТоварНаименование",ВыборкаСтрок.ТоварНаим);
				
			Конецесли;
				 

			
			//ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок_1.Номенклатура.Наименование)
			//;
			КодТовара="";
			Если КодТовараВУПД=1 Тогда
				КодТовара=xmlString(ВыборкаСтрок.Номенклатура.МодельПроизводителяАртикул);
			ИначеЕсли КодТовараВУПД=2 Тогда
				КодТовара=xmlString(ВыборкаСтрок.Номенклатура.КодВУчетнойСистеме);
			ИначеЕсли КодТовараВУПД=3 Тогда
				КодТовара=xmlString(ВыборкаСтрок.Номенклатура.Код);
				
			Иначе
				КодТовара=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(ВыборкаСтрок.Номенклатура.GTIN),14,"0");
			КонецЕслИ;
			
			Если не ЗначениеЗаполненО(КодТовара) Тогда
				КодТовара="-";
			КонецЕсли;
			ОбластьМакета.Параметры.ТоварКод = СокрЛП(КодТовара) ;
			Акциз=0;
			Если Акциз=0 Тогда
				ОбластьМакета.Параметры.Акциз="без акциза";
			Иначе
				ОбластьМакета.Параметры.Акциз=окр(Акциз,2);
				ИтогАкциз=ИтогАкциз+окр(Акциз,2)
			КонецЕсли;
			        
			//ОбластьМакета.Параметры.ПредставлениеГТД=;
			
			//СписокКМ=Новый СписокЗначений;
			//СписокКМ.Добавить();
			
			
			
			ОбластьМакета.Параметры.СтранаПроисхожденияКод=ВыборкаСтрок_1.Номенклатура.СтранаПроизводства.Код;
			
			Если ЗначениеЗаполнено(ВыборкаСтрок_1.Номенклатура.СтранаПроизводства.Код) И 
				ВыборкаСтрок_1.Номенклатура.СтранаПроизводства.Код<>"643" Тогда
				
				СтрокиКММ=Ссылка.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Нстр.НомерСтрокиСвязи));
				МассивКМ=Новый СписокЗначений;
				Для Каждого Стр_1 Из СтрокиКММ Цикл
					Если МассивКМ.НайтиПоЗначению(Стр_1.СерийныйНомер)=Неопределено Тогда
						МассивКМ.Добавить(Стр_1.СерийныйНомер);
						Нстрок=Ссылка.ТоварыКМ.НайтИСтроки(Новый Структура("НомерКороба",Стр_1.СерийныйНомер));
						Для Каждого Стр_КМ из Нстрок Цикл
							Если МассивКМ.НайтиПоЗначению(Стр_КМ.cis)=Неопределено Тогда
								МассивКМ.Добавить(Стр_КМ.cis);
								
							КонецЕсли;
							
						Конеццикла;
						
					КонецЕсли;
				Конеццикла;
				
				Если МассивКМ.Количество()>0 Тогда
						//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.Ссылка,
		|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.Ссылка.НомерДекларацииТовара   КАК НомерДекларацииТовара
		|ИЗ
		|	Документ.ВводВОборот_ХамелеонЦРПТ.СерийныеНомера КАК ВводВОборот_ХамелеонЦРПТСерийныеНомера
		|ГДЕ
		|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.cis В (&СерийныйНомер)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.Ссылка.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("СерийныйНомер",МассивКМ);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НомерДекларацииТовара) Тогда
			
				ОбластьМакета.Параметры.ПредставлениеГТД=СокрЛП(ВыборкаДетальныеЗаписи.НомерДекларацииТовара);
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

				КонецЕсли;
				
				
			КонецЕсли;
			
			//ООО=СтраныКоды.Найти(ВыборкаСтрок.Номенклатура.Producer.Country,"Код");
			//Если ООО=Неопределено Тогда
				ОбластьМакета.Параметры.ПредставлениеСтраны=ВыборкаСтрок_1.Номенклатура.СтранаПроизводства.Наименование;
			//Иначе
			//	ОбластьМакета.Параметры.ПредставлениеСтраны=ООО.КодАльфа;
			//КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаСтрок_1.Номенклатура.КодТНВЭД) Тогда
				ОбластьМакета.Параметры.КодТНВЭД=ВыборкаСтрок_1.Номенклатура.КодТНВЭД;
			Иначе
				ОбластьМакета.Параметры.КодТНВЭД=ВыборкаСтрок_1.Номенклатура.КодТНВЭДКороткий;
				
			КонецЕслИ;
				//ОбластьМакета.Параметры.ЕдиницаИзмеренияКод=ВыВыборкаСтрок_1.ЕдиницаИзмеренияКод;
				//ОбластьМакета.Параметры.ЕдиницаИзмерения=ВыборкаСтрок.ЕдиницаИзмеренияНаименование;
			
//			Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
				МассаБрутто = 0;
//			Иначе
//				МассаБрутто = ВыборкаСтрок.МассаБрутто;
//				МассаБрутто = ?(МассаБрутто <> Неопределено И МассаБрутто <> NULL, МассаБрутто, 0);
//			КонецЕсли;
			
//			Мест        = ВыборкаСтрок.КоличествоМест;
//			Мест        = ?(Мест <> Неопределено И Мест <> NULL, Мест, 0);
			Мест=0;
			Количество  = ВыборкаСтрок_1.Количество;
			СуммаСНДС   = Окр(цена*ВыборкаСтрок_1.Количество,2);
			СуммаНДС    = Окр(Нстр.НДС*ВыборкаСтрок_1.Количество/КоличКМ,2);
			СуммаБезНДС = СуммаСНДС  - СуммаНДС;
			
			ОбластьМакета.Параметры.Всего   = СуммаСНДС;
//			ОбластьМакета.Параметры.СуммаНДС    = СуммаНДС;

			Если Ссылка.Товары.Итог("НДС")=0 Тогда
				ОбластьМакета.Параметры.СуммаНДС    = "без НДС";
			Иначе
				ОбластьМакета.Параметры.СуммаНДС    = СуммаНДС;
			КонецЕсли;
			
		СтавкаНДС_1="без НДС";
		Если СуммаНДС<>0 Тогда
			Если СуммаСНДС-СуммаНДС<>0 Тогда
				СтавкаНДС=СуммаНДС*100/(СуммаСНДС-СуммаНДС);
				Если СтавкаНДС<5 Тогда
					СтавкаНДС_1="без НДС";
				ИначеЕсли СтавкаНДС<17 Тогда
					СтавкаНДС_1="10%"
				Иначе
					СтавкаНДС_1="20%"
					
				КонецЕслИ;
			КонецЕсли;
		КонецЕсли;
			
//			Если ВыборкаСтрок.СтавкаНДС=0 Тогда
//			ОбластьМакета.Параметры.СтавкаНДС   = "без НДС";
//		Иначе
//			ОбластьМакета.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
//		КонецЕсли;
			ОбластьМакета.Параметры.СтавкаНДС   = СтавкаНДС_1;

			ОбластьМакета.Параметры.Стоимость = СуммаБезНДС;
			Если Количество=0 Тогда
				ОбластьМакета.Параметры.Цена = СуммаБезНДС;
			Иначе
				ОбластьМакета.Параметры.Цена = СуммаБезНДС/Количество;
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			// увеличим итоги по странице
			ИтогоМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице + МассаБрутто;
			ИтогоМестНаСтранице        = ИтогоМестНаСтранице        + Мест;
			ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + Количество;
			ИтогоСуммаНаСтранице       = ИтогоСуммаНаСтранице       + СуммаБезНДС;
			ИтогоНДСНаСтранице         = ИтогоНДСНаСтранице         + СуммаНДС;
			ИтогоСуммаСНДСНаСтранице   = ИтогоСуммаСНДСНаСтранице   + СуммаСНДС;
			
			// увеличим итоги по дукументу
			ИтогоМассаБрутто = ИтогоМассаБрутто + МассаБрутто;
			ИтогоМест        = ИтогоМест        + Мест;
			ИтогоКоличество  = ИтогоКоличество  + Количество;
			ИтогоСумма       = ИтогоСумма       + СуммаБезНДС;
			ИтогоНДС         = ИтогоНДС         + СуммаНДС;
			ИтогоСуммаСНДС   = ИтогоСуммаСНДС   + СуммаСНДС;
			
			
			
		Конеццикла;
		
//		Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
//			
//			Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
//				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
//				Продолжить;
//			КонецЕсли;
//			
//			Ном           = Ном + 1;
//			
//			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
//			ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование)
//			;
//			Акциз=0;
//			Если Акциз=0 Тогда
//				ОбластьМакета.Параметры.Акциз="без акциза";
//			Иначе
//				ОбластьМакета.Параметры.Акциз=окр(Акциз,2);
//				ИтогАкциз=ИтогАкциз+окр(Акциз,2)
//			КонецЕсли;
//			        
//			//ОбластьМакета.Параметры.ПредставлениеГТД=;
//			
//			//СписокКМ=Новый СписокЗначений;
//			//СписокКМ.Добавить();
//			
//			
//			
//			ОбластьМакета.Параметры.СтранаПроисхожденияКод=ВыборкаСтрок.Номенклатура.СтранаПроизводства.Код;
//			
//			Если ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура.СтранаПроизводства.Код) И 
//				ВыборкаСтрок.Номенклатура.СтранаПроизводства.Код<>"643" Тогда
//				
//				СтрокиКММ=Ссылка.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",ВыборкаСтрок.НомерСтрокиСвязи));
//				МассивКМ=Новый СписокЗначений;
//				Для Каждого Стр_1 Из СтрокиКММ Цикл
//					Если МассивКМ.НайтиПоЗначению(Стр_1.СерийныйНомер)=Неопределено Тогда
//						МассивКМ.Добавить(Стр_1.СерийныйНомер);
//						Нстрок=Ссылка.ТоварыКМ.НайтИСтроки(Новый Структура("НомерКороба",Стр_1.СерийныйНомер));
//						Для Каждого Стр_КМ из Нстрок Цикл
//							Если МассивКМ.НайтиПоЗначению(Стр_КМ.cis)=Неопределено Тогда
//								МассивКМ.Добавить(Стр_КМ.cis);
//								
//							КонецЕсли;
//							
//						Конеццикла;
//						
//					КонецЕсли;
//				Конеццикла;
//				
//				Если МассивКМ.Количество()>0 Тогда
//						//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
//	// Данный фрагмент построен конструктором.
//	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.Ссылка,
//		|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.Ссылка.НомерДекларацииТовара   КАК НомерДекларацииТовара
//		|ИЗ
//		|	Документ.ВводВОборот_ХамелеонЦРПТ.СерийныеНомера КАК ВводВОборот_ХамелеонЦРПТСерийныеНомера
//		|ГДЕ
//		|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.СерийныйНомер В (&СерийныйНомер)
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.Ссылка.Дата УБЫВ";
//	
//	Запрос.УстановитьПараметр("СерийныйНомер",МассивКМ);
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	
//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//		// Вставить обработку выборки ВыборкаДетальныеЗаписи
//		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НомерДекларацииТовара) Тогда
//			
//				ОбластьМакета.Параметры.ПредставлениеГТД=ВыборкаДетальныеЗаписи.НомерДекларацииТовара;
//			Прервать;
//			
//		КонецЕсли;
//	КонецЦикла;
//	
//	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

//				КонецЕсли;
//				
//				
//			КонецЕсли;
//			
//			//ООО=СтраныКоды.Найти(ВыборкаСтрок.Номенклатура.Producer.Country,"Код");
//			//Если ООО=Неопределено Тогда
//				ОбластьМакета.Параметры.ПредставлениеСтраны=ВыборкаСтрок.Номенклатура.СтранаПроизводства.Наименование;
//			//Иначе
//			//	ОбластьМакета.Параметры.ПредставлениеСтраны=ООО.КодАльфа;
//			//КонецЕсли;
//			
//			Если ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура.КодТНВЭД) Тогда
//				ОбластьМакета.Параметры.КодТНВЭД=ВыборкаСтрок.Номенклатура.КодТНВЭД;
//			Иначе
//				ОбластьМакета.Параметры.КодТНВЭД=ВыборкаСтрок.Номенклатура.КодТНВЭДКороткий;
//				
//			КонецЕслИ;
//				ОбластьМакета.Параметры.ЕдиницаИзмеренияКод=ВыборкаСтрок.ЕдиницаИзмеренияКод;
//				ОбластьМакета.Параметры.ЕдиницаИзмерения=ВыборкаСтрок.ЕдиницаИзмеренияНаименование;
//			
////			Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
//				МассаБрутто = 0;
////			Иначе
////				МассаБрутто = ВыборкаСтрок.МассаБрутто;
////				МассаБрутто = ?(МассаБрутто <> Неопределено И МассаБрутто <> NULL, МассаБрутто, 0);
////			КонецЕсли;
//			
////			Мест        = ВыборкаСтрок.КоличествоМест;
////			Мест        = ?(Мест <> Неопределено И Мест <> NULL, Мест, 0);
//			Мест=0;
//			Количество  = ВыборкаСтрок.Количество;
//			СуммаСНДС   = ВыборкаСтрок.Сумма;
//			СуммаНДС    = ВыборкаСтрок.СуммаНДС;
//			СуммаБезНДС = СуммаСНДС  - СуммаНДС;
//			
//			ОбластьМакета.Параметры.Всего   = СуммаСНДС;
////			ОбластьМакета.Параметры.СуммаНДС    = СуммаНДС;

//			Если Ссылка.Товары.Итог("НДС")=0 Тогда
//				ОбластьМакета.Параметры.СуммаНДС    = "без НДС";
//			Иначе
//				ОбластьМакета.Параметры.СуммаНДС    = СуммаНДС;
//			КонецЕсли;
//			
//		СтавкаНДС_1="без НДС";
//		Если СуммаНДС<>0 Тогда
//			Если СуммаСНДС-СуммаНДС<>0 Тогда
//				СтавкаНДС=СуммаНДС*100/(СуммаСНДС-СуммаНДС);
//				Если СтавкаНДС<5 Тогда
//					СтавкаНДС_1="без НДС";
//				ИначеЕсли СтавкаНДС<17 Тогда
//					СтавкаНДС_1="10%"
//				Иначе
//					СтавкаНДС_1="20%"
//					
//				КонецЕслИ;
//			КонецЕсли;
//		КонецЕсли;
//			
////			Если ВыборкаСтрок.СтавкаНДС=0 Тогда
////			ОбластьМакета.Параметры.СтавкаНДС   = "без НДС";
////		Иначе
////			ОбластьМакета.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
////		КонецЕсли;
//			ОбластьМакета.Параметры.СтавкаНДС   = СтавкаНДС_1;

//			ОбластьМакета.Параметры.Стоимость = СуммаБезНДС;
//			Если Количество=0 Тогда
//				ОбластьМакета.Параметры.Цена = СуммаБезНДС;
//			Иначе
//				ОбластьМакета.Параметры.Цена = СуммаБезНДС/Количество;
//			КонецЕсли;
//			
//			ТабДокумент.Вывести(ОбластьМакета);
//			
//			// увеличим итоги по странице
//			ИтогоМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице + МассаБрутто;
//			ИтогоМестНаСтранице        = ИтогоМестНаСтранице        + Мест;
//			ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + Количество;
//			ИтогоСуммаНаСтранице       = ИтогоСуммаНаСтранице       + СуммаБезНДС;
//			ИтогоНДСНаСтранице         = ИтогоНДСНаСтранице         + СуммаНДС;
//			ИтогоСуммаСНДСНаСтранице   = ИтогоСуммаСНДСНаСтранице   + СуммаСНДС;
//			
//			// увеличим итоги по дукументу
//			ИтогоМассаБрутто = ИтогоМассаБрутто + МассаБрутто;
//			ИтогоМест        = ИтогоМест        + Мест;
//			ИтогоКоличество  = ИтогоКоличество  + Количество;
//			ИтогоСумма       = ИтогоСумма       + СуммаБезНДС;
//			ИтогоНДС         = ИтогоНДС         + СуммаНДС;
//			ИтогоСуммаСНДС   = ИтогоСуммаСНДС   + СуммаСНДС;
//			
//		КонецЦикла;
		
		// Выводим итоги по документу в целом
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.ИтогоСтоимость       = ИтогоСумма;
			Если Ссылка.Товары.Итог("НДС")=0 Тогда
				ОбластьМакета.Параметры.ИтогоСуммаНДС    = "без НДС";
			Иначе
				ОбластьМакета.Параметры.ИтогоСуммаНДС    = ИтогоНДС;
			КонецЕсли;
		//ОбластьМакета.Параметры.ИтогоСуммаНДС         = ИтогоНДС;
		ОбластьМакета.Параметры.ИтогоВсего   = ИтогоСуммаСНДС;
		ОбластьМакета.Параметры.Акциз   = ИтогАкциз;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		
	Основание="";
		Для Каждого Стр_1 Из Ссылка.ОснованиеОтгрузкиТоваров Цикл
			
			Если ЗначениеЗаполнено(Основание) Тогда
				Основание=Основание+", ";
			КонецЕслИ;
			
			Основание=Основание+Стр_1.НаименованиеДокумента+" № "+Стр_1.НомерДокумента+" от "+Формат(Стр_1.ДатаОтгрузки,"ДЛФ=Д");
			
		Конеццикла;
		
			
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалНакладной");
		
		ОбластьМакета.Параметры.основание=Основание;
		
		
		
		Если ЗначениеЗАполнено(Ссылка.ДатаПередачиТовара) Тогда
			ОбластьМакета.Параметры.ДатаОтгрузкиПередачи = Формат(Ссылка.ДатаПередачиТовара, "ДФ='дд ММММ гггг'") + " г.";
		КонецЕсли;
		
		ОБластьМакета.Параметры.ПредставлениеОрганизации=Ссылка.Организация.Наименование+", ИНН/КПП: "+Ссылка.Организация.ИНН+"/"+Ссылка.Организация.КПП;
		ОБластьМакета.Параметры.ПредставлениеКонтрагента=Ссылка.Контрагент.Наименование+", ИНН/КПП: "+Ссылка.Контрагент.ИНН+"/"+Ссылка.Контрагент.КПП;
		
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		
		Возврат ТабДокумент;
		
КонецФункции


&НаСервере
Процедура ЗагрузатьНаименованиеПриПриемкеПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ЗагрузатьНаименованиеПриПриемке=ЗагрузатьНаименованиеПриПриемке;
	РегДв.Записать(Истина);
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузатьНаименованиеПриПриемкеПриИзменении(Элемент)
	ЗагрузатьНаименованиеПриПриемкеПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Процедура ОпределятьНазваниеНеИзЦРПТПриОтгрузкеПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ОпределятьНазваниеНеИзЦРПТПриОтгрузке=ОпределятьНазваниеНеИзЦРПТПриОтгрузке;
	РегДв.Записать(Истина);
КонецПроцедуры


&НаКлиенте
Процедура ОпределятьНазваниеНеИзЦРПТПриОтгрузкеПриИзменении(Элемент)
	ОпределятьНазваниеНеИзЦРПТПриОтгрузкеПриИзмененииНаСервере();
КонецПроцедуры


&НаСервереБезКонтекста
Функция СоздатьВводВОборотПоВыделеннымНаСервере(МассивЗаказов,Отчте=Ложь)
	// Вставить содержимое обработчика.
	Если МассивЗаказов.Количество()>0 Тогда
		ВводВоборот=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
			Документоснование=МассивЗаказов[0];
			ВводВоборот.ДокОснование=Документоснование;
			ЗаполнитьЗначенияСвойств(ВводВоборот,ВводВоборот.ДокОснование,,"Номер,Дата,_Order_ID,Статус");
				Если ВводВоборот.ДокОснование.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ВвезенВРФ Тогда
					ВводВоборот.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотИмпорт;
				ИначеЕсли ВводВоборот.ДокОснование.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.МаркировкаОстатков Тогда
					ВводВоборот.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.МаркировкаОстатков;
				ИначеЕсли ВводВоборот.ДокОснование.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ПроизведенВРФ Тогда
					ВводВоборот.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборот;
				
					
				КонецЕсли;
		Для Каждого Документоснование ИЗ МассивЗаказов Цикл
			
		
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер КАК СерийныйНомер,
				|	СУММА(ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.КоличествоОстаток) КАК КоличествоОстаток,
				|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция КАК Продукция
				|ИЗ
				|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Остатки(
				|			,
				|			Организация = &Организация
				|				И СерийныйНомер В
				|					(ВЫБРАТЬ
				|						ОстаткиКМЭмитированые_ХамелеонЦРПТ.СерийныйНомер
				|					ИЗ
				|						РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ КАК ОстаткиКМЭмитированые_ХамелеонЦРПТ
				|					ГДЕ
				|						ОстаткиКМЭмитированые_ХамелеонЦРПТ.Регистратор = &Регистратор)) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки
				|
				|СГРУППИРОВАТЬ ПО
				|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.СерийныйНомер,
				|	ОстаткиКМЭмитированые_ХамелеонЦРПТОстатки.Продукция
				|ИТОГИ
				|	СУММА(КоличествоОстаток)
				|ПО
				|	СерийныйНомер,
				|	Продукция";
			
			Запрос.УстановитьПараметр("Организация", ДокументОснование.Организация);
				Запрос.УстановитьПараметр("Регистратор", ДокументОснование.Ссылка);
			
			РезультатЗапроса_М = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
			
			
			
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	НомераКМ_ХамелеонЦРПТ.НомерКМ
					|ИЗ
					|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
					|ГДЕ
					|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа";
				
				Запрос.УстановитьПараметр("ДокументЗаказа", ДокументОснование.Ссылка);
				
				РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗАпроса.Прямой);
				
				Если РезультатЗапроса.Количество()>0 Тогда 
					КоличествоНеобходмо=РезультатЗапроса.Количество();
					Смещение=0;
					Пока КоличествоНеобходмо>0 Цикл
						Если КоличествоНеобходмо<=99999 Тогда
							Для Сч=Смещение По  Смещение+КоличествоНеобходмо-1 Цикл
								
								GGG=РезультатЗапроса[Сч].НомерКМ;
								cis=Сред(СтрЗаменить(GGG,"%1D",""),1,38);
								
								Если Сред(cis,32,3)<>"240" Тогда
									//cis=Сред(cis,1,31);
									
									cis=Сред(GGG,1,Найти(GGG,"%1D")-1);
									cis=РаскодироватьСтроку(cis,СпособКодированияСтроки.КодировкаURL);
								КонецЕсли;
								
								ППП=РезультатЗапроса_М.НайтиСтроки(Новый Структура("СерийныйНомер",cis));
								Если ППП.Количество()=0 
									//И ППП.КоличествоОстаток<=0 
									Тогда
									Продолжить;
								КонецЕсли;
								Продукция=Неопределено;
								Для Каждого Стр_1П Из ППП Цикл
									Если ЗначениеЗаполнено(Стр_1П.Продукция) Тогда
										Продукция=Стр_1П.Продукция
									КонецЕсли;
									
									
								Конеццикла;
								
								
								ДД=ВводВоборот.СерийныеНомера.Добавить();
								Если ЗначениеЗаполнено(Продукция) Тогда
									ДД.НаименованиеТовара=Продукция
								Иначе
									Если Сред(cis,1,2)="01" тогда
									
										ДД.GTIN=Сред(cis,3,14);
									Иначе
										ДД.GTIN=Сред(cis,1,14);
										
									КонецЕсли;
									ДД.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(ДД.GTIN));;
								КонецЕсли;
								ДД.cis=cis;
								
								Добав=ВводВоборот.Товары.Найти(ДД.НаименованиеТовара,"GTIN");
								Если Добав=Неопределено Тогда
									Добав=ВводВоборот.Товары.Добавить();
									Добав.GTIN=ДД.НаименованиеТовара;
									Добав.ДекларацияИлиСертификатСоответствия=РЕгистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(
											ТекущаяДата(),Новый Структура("Продукция",Добав.GTIN)).Документ;
									Добав.НомерСтрокиСвязи=Добав.НомерСтроки;
									Добав.КодТНВЭД=Добав.GTIN.КодТНВЭД;
								КонецЕсли;
								ДД.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
								Добав.КоличествоКМ=Добав.КоличествоКМ+1;
								Добав.СпособВыпускаТоваров="";
								
							КонецЦикла;;
							
							КоличествоНеобходмо=0;               
						Иначе
							НадоСпсать=Мин(КоличествоНеобходмо,99999);
							ДокумС=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
							ЗаполнитьЗначенияСвойств(ДокумС,ВводВоборот,,"Номер");
							ДокумС.Дата=ТекущаяДата();
							Для Сч=Смещение По Смещение+НадоСпсать-1 Цикл
								GGG=РезультатЗапроса[Сч].НомерКМ;
								cis=Сред(СтрЗаменить(GGG,"%1D",""),1,38);
								Если Сред(cis,32,3)<>"240" Тогда
									//cis=Сред(cis,1,31);
									cis=Сред(GGG,1,Найти(GGG,"%1D")-1);
									cis=РаскодироватьСтроку(cis,СпособКодированияСтроки.КодировкаURL);
								КонецЕсли;

								ППП=РезультатЗапроса_М.НайтиСтроки(Новый Структура("СерийныйНомер",cis));
								Если ППП.Количество()=0 
									//И ППП.КоличествоОстаток<=0 
									Тогда
									Продолжить;
								КонецЕсли;
								Продукция=Неопределено;
								Для Каждого Стр_1П Из ППП Цикл
									Если ЗначениеЗаполнено(Стр_1П.Продукция) Тогда
										Продукция=Стр_1П.Продукция
									КонецЕсли;
									
									
								Конеццикла;
								
								
								ДД=ВводВоборот.СерийныеНомера.Добавить();
								Если ЗначениеЗаполнено(Продукция) Тогда
									ДД.НаименованиеТовара=Продукция
								Иначе
									Если Сред(cis,1,2)="01" тогда
									
										ДД.GTIN=Сред(cis,3,14);
									Иначе
										ДД.GTIN=Сред(cis,1,14);
										
									КонецЕсли;
									ДД.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(ДД.GTIN));;
								КонецЕсли;
								ДД.cis=cis;
								
								Добав=ВводВоборот.Товары.Найти(ДД.НаименованиеТовара,"GTIN");
								Если Добав=Неопределено Тогда
									Добав=ВводВоборот.Товары.Добавить();
									Добав.GTIN=ДД.НаименованиеТовара;
									Добав.ДекларацияИлиСертификатСоответствия=РЕгистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(
											ТекущаяДата(),Новый Структура("Продукция",Добав.GTIN)).Документ;
									Добав.НомерСтрокиСвязи=Добав.НомерСтроки;
									Добав.КодТНВЭД=Добав.GTIN.КодТНВЭД;
								КонецЕсли;
								ДД.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
								Добав.КоличествоКМ=Добав.КоличествоКМ+1;
								Добав.СпособВыпускаТоваров="";

							КонецЦикла;
							Смещение=Смещение+НадоСпсать;
							КоличествоНеобходмо=КоличествоНеобходмо-НадоСпсать;
							ДокумС.Записать();
							Сообщить("Создан документ "+Строка(ДокумС.Ссылка));
						КонецЕсли;
						
					КонецЦикла;
				Иначе
					
							Для Каждого Стр_1 Из Документоснование.КМИзAPI    Цикл
	GGG=Стр_1.НомерКМ;							
								cis=Сред(СтрЗаменить(GGG,"%1D",""),1,38);
								Если Сред(cis,32,3)<>"240" Тогда
									cis=Сред(GGG,1,Найти(GGG,"%1D")-1);
									cis=РаскодироватьСтроку(cis,СпособКодированияСтроки.КодировкаURL);
									
	//								cis=Сред(cis,1,31);
								КонецЕсли;

								ППП=РезультатЗапроса_М.НайтиСтроки(Новый Структура("СерийныйНомер",cis));
		Если (Документоснование.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак
			
			  ИЛИ Документоснование.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак
			
)
			И Документоснование.ШаблонКМ_Табак=Перечисления.Шаблоны_подписи_кодов_КМ_Табак_ХамелеонЦРПТ.Блок Тогда
			                   //Документоснование.Товары[0].GTIN;
							   Для Каждого Стр_22 Из Документоснование.Товары Цикл
								   Если ЗначениеЗаполнено(Стр_22.GTIN) Тогда
								   	Продукция=Стр_22.GTIN;
								КонецЕсли;
								   
								Конеццикла;
							   
							   
							Иначе
								Если ППП=Неопределено ИЛИ (ППП.Количество()=0 
									//И ППП.КоличествоОстаток<=0
									) 
									Тогда
									Продолжить;
								КонецЕсли;
								Продукция=Неопределено;
								Для Каждого Стр_1П Из ППП Цикл
									Если ЗначениеЗаполнено(Стр_1П.Продукция) Тогда
										Продукция=Стр_1П.Продукция;
										Прервать;
									КонецЕсли;
									
									
								Конеццикла;
							КонецЕсли;
								
								
								ДД=ВводВоборот.СерийныеНомера.Добавить();
								Если ЗначениеЗаполнено(Продукция) Тогда
									ДД.НаименованиеТовара=Продукция
								Иначе
									Если Сред(cis,1,2)="01" тогда
									
										ДД.GTIN=Сред(cis,3,14);
									Иначе
										ДД.GTIN=Сред(cis,1,14);
										
									КонецЕсли;
									ДД.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(ДД.GTIN));;
								КонецЕсли;
								ДД.cis=cis;
							
								Добав=ВводВоборот.Товары.Найти(ДД.НаименованиеТовара,"GTIN");
								Если Добав=Неопределено Тогда
									Добав=ВводВоборот.Товары.Добавить();
									Добав.GTIN=ДД.НаименованиеТовара;
									Добав.ДекларацияИлиСертификатСоответствия=РЕгистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(
											ТекущаяДата(),Новый Структура("Продукция",Добав.GTIN)).Документ;
									Добав.НомерСтрокиСвязи=Добав.НомерСтроки;
									Добав.КодТНВЭД=Добав.GTIN.КодТНВЭД;
								КонецЕсли;
								ДД.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
								Добав.КоличествоКМ=Добав.КоличествоКМ+1;
								Добав.СпособВыпускаТоваров="";
								
							КонецЦикла;;
					
					КонецЕсли;
		КонецЦикла
		
	КонецЕслИ;
	ВводВоборот.Дата=Текущаядата();
	
	ВводВоборот.Записать(РежимЗаписиДокумента.Запись);
	
	Для Каждого Стр_1 Из МассивЗаказов Цикл
		ПолучОб=Стр_1.ПолучитьОбъект();
		ПолучОб.ВводВОборот=ВводВоборот.Ссылка;
		ПолучОб.Записать();
	конеццикла;
	
							Сообщить("Создан документ "+Строка(ВводВоборот.Ссылка));
	Возврат 	ВводВоборот.Ссылка
Конецфункции


&НаКлиенте
Процедура СоздатьВводВОборотПоВыделенным(Команда)
	МассивЗаказов=Новый массив;
	Для Каждого Стр_1 Из Элементы.ЗаказыТаблица.ВыделенныеСтроки Цикл
		МассивЗаказов.Добавить(Стр_1);
	Конеццикла;
	
	ВводВоборот_1=СоздатьВводВОборотПоВыделеннымНаСервере(МассивЗаказов);
	
	
КонецПроцедуры


&НаСервере
Функция СоздатьОднуОтгрузкуНаСервере(МассивВ)
	// Вставить содержимое обработчика.
	
	ДокумР=Документы.Отгрузка_ХамелеонЦРПТ.СоздатьДокумент();
	
				ЗаполнитьЗначенияСвойств(ДокумР,МассивВ[0],,"Номер,Дата,_Order_ID,ОшибкаОтправки,Статус");
				ДокумР.Дата=ТекущаяДата();
				ДокумР.ВидТоварооборота=Перечисления.ВидТоварооборота_ХамелеонЦРПТ.SELLING;
				
		Для Каждого ДокОснование Из МассивВ Цикл		
			
			//Для Каждого Стр_1 Из ДокОснование.Товары Цикл
			//		Добав=ДокумР.Товары.Добавить();
			//		ЗаполнитьЗначенияСвойств(Добав,Стр_1);
					
			//	КонецЦикла;
			
			
			
				Для Каждого Стр_1 Из ДокОснование.СерийныеНомера Цикл
					Добав=ДокумР.СерийныеНомера.Добавить();
					ЗаполнитьЗначенияСвойств(Добав,Стр_1);	
					
						Если ДокОснование.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак" 
							ИЛИ ДокОснование.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак"
							тогда
										  Добав.cis=РаскодироватьСтроку(Добав.cis,СпособКодированияСтроки.КодировкаURL);
										  
					КонецЕсли;

					Продукция=Стр_1.НаименованиеТовара;
					
					НомерГТД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.НайтиГТД(ДокОснование.НомерДекларацииТовара,Продукция.СтранаПроизводства.Код);
					ППП=ДокумР.Товары.НайтиСтроки(Новый структура("gtin,НомерГТД",Продукция,НомерГТД));
					
					
					Если ППП.Количество()=0 Тогда
						Добав_1=ДокумР.Товары.Добавить();
						Добав_1.GTIN=Продукция;
						Добав_1.КодТНВЭД=Продукция.КодТНВЭД;
						Добав_1.ЕдиницаИзмерения=ДокумР.ТекущийПользователь.ОсновнаяЕдиницаИзмерения;
						Добав_1.НомерГТД=НомерГТД;
						
						
			//			Добав_1.СпособВыпускаТоваров="";
						Добав_1.НомерСтрокиСвязи=Добав_1.НомерСтроки-1;
					Иначе
						Добав_1=ППП[0];
					КонецЕсли;
					Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
					Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
					
					
					
					
				Конеццикла;
			КонецЦикла;
			ДокумР.Записать();
			Возврат ДокумР.Ссылка
Конецфункции


&НаКлиенте
Процедура СоздатьОднуОтгрузку(Команда)
	МасисвВ=Новый Массив;
	Для Каждого Стр_1 Из Элементы.ВводВОборотТаблица.ВыделенныеСтроки Цикл
		МасисвВ.Добавить(Стр_1);
	Конеццикла;
	Если       МасисвВ.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	Докум=СоздатьОднуОтгрузкуНаСервере(МасисвВ);
	Если ЗначениеЗаполнено(Докум) тогда
		
		ОткрытьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаДокумента",
		Новый Структура("Ключ",Докум));
		
	Конецесли;
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьВЦРПТСписание(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Для Каждого Стр Из Элементы.Списание.ВыделенныеСтроки Цикл
		Форм=ПолучитьФорму("Документ.СписаниеКМНанесенныхНеНанесенныхНаТовар_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
		"Ключ",Стр));
		Форм.ОтправитьВЦРПТ(Команда);
	КонецциклА;
	Элементы.Списание.Обновить();
	
КонецПроцедуры

Процедура ПоменятьНаНеУчастнику(Стр_1)
	Стр=Стр_1.ПолучитьОбъект();
	Стр.ОшибкаОтправки="";
	Стр.ОтгрузкаНеУчастника=Истина;
	Стр.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтветПоВыделенным(Команда,УжеОтправили=Ложь)
	// Вставить содержимое обработчика.
	МассивВ=Новый Массив;
	НадоЗагружатьОтвет=Ложь;
	Для Каждого СТр_11 Из Элементы.Отгрузка_Список.ВыделенныеСтроки Цикл
		   МассивВ.Добавить(СТр_11);
	   Конеццикла;
	   
	   
	Если МассивВ.Количество()>0 Тогда
//		ОбновитьСтатусыДокументов(кОМАНДА,,,МассивВ);
		Thumbprint_1=ПолучитьИзПользователя();	
		СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		СерийныйНомер="";
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			Попытка
				СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
			исключение
				СРегистра=Неопределено;
			КонецПопытки;
			
		КонецЕсли;
		ОбработаноМассив=Новый Массив;
		ВернутьДокументы_Отгрузка=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусыДокументовНаСервереОтгрузка(МассивВ,Пользователь);
		ОбновитьОтгрузкуПоМассивуНакладных(Thumbprint_1,СРегистра,ВернутьДокументы_Отгрузка,ОбработаноМассив);
	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

&AtClient
Function ValueFromHeaders(ValueName,Request)
	
	Result = "";	
	ResponseHeaders = Request.GetAllResponseHeaders();
	For Line = 1 To StrLineCount(ResponseHeaders) Do
		CurLine = StrGetLine(ResponseHeaders, Line);
		If Find(CurLine, ValueName) > 0 Then
			BeginPos = Find(CurLine, "=") + 1;
			EndPos = Find(CurLine, ";");
			Result = Mid(CurLine, BeginPos, EndPos - BeginPos);
			Break;
		EndIf;
	EndDo;
	Return Result;

EndFunction

&НаСервереБезКонтекста
Function JSONValue(Val String)
	
	Reader = New JSONReader;
	Reader.SetString(String);
	Result = ReadJSON(Reader);
	Reader.Close();
	Return Result;

EndFunction


Процедура ЗаписатьСтатусДокумента(Докум,Статус)
	ПолОб=Докум.ПолучитьОбъект();
	ПолОб.СтатусУПД=Статус;
	ПолОб.Записать();
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ПолучимГТИНПродукции_Шины(Текст1,Ссылка,ГТИН)
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
	
	
	
	Пр=Ссылка.ПолучитЬОбъект();
	gtin="";
	
	Стр_Ш=NNN.body.products_list[0];
	Если Стр_Ш.Свойство("gtin",gtin) Тогда
		Пр.gtin=gtin;
	Конецесли;
	
	ДопРеквиз=Пр.ДополнительныйРеквизитШины;
	Если ЗначениеЗаполнено(ДопРеквиз) тогда
		ДопРеквиз=ДопРеквиз.ПолучитьОбъект();
	Иначе
		ДопРеквиз=Справочники.ДополнительныеРеквизиты_Шины_ХамелеонЦРПТ.СоздатьЭлемент();
		
	КонецЕсли;
	
	Стр_Ш.Свойство("model",ДопРеквиз.МодельШины);
	Стр_Ш.Свойство("brand",Пр.БрендТорговаяМарка);
	ДопРеквиз.Записать();
	Пр.ДополнительныйРеквизитШины=ДопРеквиз.Ссылка;
	Пр.guid="";
	Пр.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Шины;
	Пр.Наименование="Остатки по шинам, "+ДопРеквиз.МодельШины;
	Если ЗначениеЗАполнено(Пр.БрендТорговаяМарка) тогда
		Пр.Наименование=Пр.Наименование+", "+Пр.БрендТорговаяМарка;
	КонецЕслИ;
	Статус="";
	Если NNN.Свойство("status",Статус) Тогда
		Если (Статус="CHECKED_NOT_OK" ИЛИ Статус="PARSE_ERROR"
									ИЛИ Статус="PROCESSING_ERROR"

			)
			И NNN.Свойство("downloadDesc",Статус) Тогда
			Пр.ОшибкаОбработки=Статус;
		Конецесли;
	КонецЕсли;
	//ДатаДокумента=NNN.receivedAt;
	Пр.Записать();
	ГТИН=gtin;
КонецПроцедуры



&НаКлиенте
Процедура ОбновимНаКлиентеОтдельноКонтурИзЗаВебэ(Request,Thumbprint_1,Стр,VerificationToken)
	#Если ВебКлиент Тогда
	#Иначе
		Если Request=Неопределено Тогда
			
			Если Не ЗначениеЗаполнено(Thumbprint_1.ЛогинКонтур) тогда
				Возврат;
			Конецесли;
			boxId="";
			
			BoxUrl="";
			PortalUserId="";
			VerificationToken="";
			Попытка
				Если НЕ РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ПодключениеПоКонтурДиадок(Request,Thumbprint_1,boxId,BoxUrl,PortalUserId,VerificationToken) Тогда
					Сообщить("Не удалось подключиться к Диадок");
					возврат;
				КонецЕсли;
			Исключение
				Сообщить("Не удалось подключиться к Диадок");
				возврат;
				
			КонецПопытки;
	кОНЕЦеСЛИ;			
			Order_ID_УПД=Стр.Order_ID_УПД;
			LetterID=Стр.LetterIDДиадок;
			Если ЗначениеЗАполненО(Order_ID_УПД) И ЗначениеЗАполненО(LetterID) Тогда
				////СЧИТЫВАЕМ СТАТУС
				Request.Open("GET", "https://diadoc.kontur.ru/api/Documents.v1/boxes/"+boxid+"/letters/"+LetterID+"/documents/"+Order_ID_УПД, 0);
				Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
				Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
				Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");
				Request.Send();
				Request.WaitForResponse();
				Попытка
					СтатусДокумента=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ВернутьСтатусДокументаКонтВЕБ(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Request.ResponseText).documentStatus.text);
				//Если СтатусУПД<>СтатусДокумента Тогда
					ЗаписатьСтатусДокумента(Стр.Ссылка,СтатусДокумента);
				Исключение
				КонецПопытки;
					//СтатусУПД=СтатусДокумента;
				//КонецЕсли;
			//	Возврат;
			Конецесли;
			
			
	#КонецЕсли
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьОтгрузкуПоМассивуНакладных(Thumbprint_1,СРегистра,ВернутьДокументы_Отгрузка,ОбработаноМассив,УжеОтправили=Ложь) Экспорт
	Количество=0;
	
СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаемРегистрациюУчастникавИСМП"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"));
	
	

	Маркер=Неопределено;
	МаркерСБ=Неопределено;
	
	ОбработалиВТХЦ=Новый Массив;
	
	
	НадоЗагружатьОтвет=Новый Массив;
	
	Request=Неопределено;
	VerificationToken=неопределено;
	Для Каждого Стр Из ВернутьДокументы_Отгрузка Цикл
		
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
		
		
		
									Количество=Количество+1;
							//Состояние("Обрабатывается отгрузка "+Строка(СТР.Ссылка)+" "+Строка(КоличествО)+" из "+Строка(ВернутьДокументы_Отгрузка.Количество()),Количество*100/ВернутьДокументы_Отгрузка.Количество());
							Состояние("Обрабатывается отгрузка "+Строка(СТР.Ссылка)+" "+Строка(КоличествО)+" из "+Строка(ВернутьДокументы_Отгрузка.Количество()));
							
							
							Если ЗначениеЗаполнено(Стр.ТипУточненияУПД) Тогда
								Если ЗначениеЗаполнено(Стр.Order_ID_КорректировачнаяУПД) Тогда
							
						СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
							СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
									СерийныйНомер=СтруктураНастроек.СерийныйНомер;
							
								Если Не ЗначениеЗаполнено(СРегистра) ИЛИ НЕ ЗначениеЗаполнено(СерийныйНомер)  Тогда
									СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
								Иначе
								   
										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
											Прокси=Новый ИнтернетПрокси;
											Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										Иначе
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										КонецЕсли;
										
										HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
										HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
										HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
										//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
										///Константин           
										Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
										//Текст1=Ответ.ПолучитьТелоКакСтроку();
										Если Ответ.КодСостояния<>200 Тогда
											СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
										КонецЕсли;
											
								КонецЕсли;
							
									
									
									ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюОбУПДОтгрузка(Стр.Order_ID_КорректировачнаяУПД,Пользователь,HTTPСервисЗапрос,СерийныйНомер,Срегистра,Thumbprint_1,Стр.Ссылка);
									
								КонецЕсли;
								
							Иначе
								Если ЗначениеЗаполнено(Стр.Order_ID_УПД) Тогда
									
									
									Если Не ЗначениеЗаполнено(Стр.ТипЭДО)
										И Стр.ТипЭДО=ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОЛайт") Тогда
										
										
									
									
														СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
							СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
									СерийныйНомер=СтруктураНастроек.СерийныйНомер;
							
								Если Не ЗначениеЗаполнено(СРегистра) ИЛИ НЕ ЗначениеЗаполнено(СерийныйНомер)  Тогда
									СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
								Иначе
								   
										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
											Прокси=Новый ИнтернетПрокси;
											Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										Иначе
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										КонецЕсли;
										
										HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
										HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
										HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
										//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
										///Константин           
										Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
										//Текст1=Ответ.ПолучитьТелоКакСтроку();
										Если Ответ.КодСостояния<>200 Тогда
											СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
										КонецЕсли;
											
								КонецЕсли;
							

									ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюОбУПДОтгрузка(Стр.Order_ID_УПД,Пользователь,HTTPСервисЗапрос,СерийныйНомер,Срегистра,Thumbprint_1,Стр.Ссылка);
									
									
									
									
									
									
									
									
									
									
									
								ИначеЕсли Стр.ТипЭДО=ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОТензор") Тогда
									
											Если ОбработалиВТХЦ.Найти(Стр)=Неопределено тогда
											//		
													СайтДляПодключенияПоТакскму=Thumbprint_1.СБ;
													Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
														Прокси=Новый ИнтернетПрокси;
														Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
																
														HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
													Иначе
																
														HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
													КонецЕсли;
											//		
											Если Не ЗначениеЗаполнено(МаркерСБ) тогда
													//ДанныеИнт=Неопределено;
												//ОбъектПл=Неопределено;
	ДанныеАгрегации="";
	ОбъектПлагин=Неопределено;
												
	Если Thumbprint_1.ТипПодключения=ПредопределенноеЗначение("Перечисление.ТипыПодключенияКЭДОСБ_ХамелеонЦРПТ.SDK") Тогда
		//Маркер=РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОСб_SDK(Thumbprint_1,ПолучитьИдЭд(Пользователь),HTTPСервисЗапрос_ТХЦ,СерийныйНомер,ДанныеАгрегации,ОбъектПлагин);
		МаркерСБ=РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОСб_SDK(Thumbprint_1,ПолучитьИдЭд(Пользователь),HTTPСервисЗапрос_ТХЦ,СерийныйНомер,ДанныеАгрегации,ОбъектПлагин,СайтДляПодключенияПоТакскму);
		
	Иначе
		МаркерСБ=РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОСб_Новый(Thumbprint_1,ПолучитьИдЭд(Пользователь),HTTPСервисЗапрос_ТХЦ,СерийныйНомер,ДанныеАгрегации,ОбъектПлагин);
	КонецЕсли;
													КонецЕсли;
													Если  ЗначениеЗаполнено(МаркерСБ) тогда
														Докум=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ДокументОтгрузки(Стр.Order_ID_УПД);
														HTTPЗапрос=Новый HTTPЗапрос("service/?srv=1");

														HTTPЗапрос.Заголовки.Вставить("X-SBISSessionID",	МаркерСБ);
														HTTPЗапрос.Заголовки.Вставить("Content-Type",	"application/json; charset=utf-8");
														//	HTTPЗапрос.Заголовки.Вставить("User-Agent",	"1C8.3.10.2772_VO2.0.35.1");
														//	HTTPЗапрос.Заголовки.Вставить("X-API-Version",	"2.3.1");


														#Если ВебКлиент Тогда
																HTTPЗапрос.УстановитьТелоИзСтроки(Докум,"UTF-8");
																#Иначе
																HTTPЗапрос.УстановитьТелоИзСтроки(Докум,"UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
															#КонецЕсли
															

														Ответ=HTTPСервисЗапрос_ТХЦ.ОтправитьДляОбработки(HTTPЗапрос);
														ТТТ_Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());	
														
														Если Ответ.КодСостояния=200 Тогда
															
															ОбновитьСтатусДокументаСБ(Стр,ТТТ_Ответ);
															//ПолучитьСписокНакладных_1
															//ОбработатьСтатусыНаСервереПоНакладным(ПолучитьСписокНакладных_1,ОбработалиВТХЦ,ПолучитьПричинуОтказа);
													
															
														КонецЕсли;
														
														
													КонецЕсли;
												КонецЕсли;

									
									ИначеЕсли Стр.ТипЭДО=ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОТакском") Тогда
										
										Если ОбработалиВТХЦ.Найти(Стр)=Неопределено тогда
											
											СайтДляПодключенияПоТакскму=Thumbprint_1.ТХЦ;
											Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
												Прокси=Новый ИнтернетПрокси;
												Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
														
												HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
											Иначе
														
												HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
											КонецЕсли;
											
											Если Не ЗначениеЗаполнено(Маркер) тогда
												Маркер=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОТХЦ(Thumbprint_1,Стр.ИдентификаторЭД,HTTPСервисЗапрос_ТХЦ);
											КонецЕсли;
											Если  ЗначениеЗаполнено(Маркер) тогда
												
												
												ПолучитьСписокНакладных_1=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.СписокИсходящихДокументов(Thumbprint_1,Маркер,"",Стр.ДатаДок);
												Если  ПолучитьСписокНакладных_1.Количество()>0 Тогда
													
													ПолучитьПричинуОтказа=Новый Массив;
													
													
													ОбработатьСтатусыНаСервереПоНакладным(ПолучитьСписокНакладных_1,ОбработалиВТХЦ,ПолучитьПричинуОтказа);
													
													Для КаждогО Стр_1 Из ПолучитьПричинуОтказа Цикл
														
													ДанныеДокументооборота =Неопределено;
															Попытка
																ДанныеДокументооборота = ДанныеДокументооборота(Стр_1.Идентификатор,HTTPСервисЗапрос_ТХЦ,Маркер );
															Исключение
																//ЕстьОшибки = Истина;
																Продолжить;
															КонецПопытки;
															АдресДанныхДокументооборота = ПоместитьВоВременноеХранилище(ДанныеДокументооборота, ЭтаФорма.УникальныйИдентификатор);
															
															СтруктураПараметр = Новый Структура("АдресДанныхДокументооборота, ИдентификаторДокументооборота", АдресДанныхДокументооборота, Стр_1.Идентификатор);
															
															СообщениеОбОшибке = "";
															РеквизитыЭлектронногоДокумента = ПолучитьОшибку_ТХЦ(СтруктураПараметр, СообщениеОбОшибке);
														ЗаписатьОшибкуВДокумент(Стр_1.Ссыла,РеквизитыЭлектронногоДокумента);													
														
														
													Конеццикла;
													
													
												КонецЕсли;
													//Запрос.УстановитьТелоИзДвоичныхДанных(ПакетЭДО);
												//Попытка 
													//Ответ = HTTPСервисЗапрос_ТХЦ.Получить(Запрос);
												//Исключение
													
													//Продолжить;
												//КонецПопытки;		
												
											КонецЕсли;
											
										КонецЕсли;
										
									ИначеЕсли Стр.ТипЭДО=ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОКонтур") Тогда
										

										
										ОбновимНаКлиентеОтдельноКонтурИзЗаВебэ(Request,Thumbprint_1,Стр,VerificationToken);
										 
										
										
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
							
							
							
							Если СписокСтатусов.НайтиПоЗначению(Стр.Статус)=Неопределено тогда
								Если Стр.НадоПринять<>Ложь Тогда
							ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИПринятьПриход(Стр.Ссылка,Стр);
						КонецЕсли;
								
			Продолжить;
		КонецЕсли;
							
		
 			что=Thumbprint_1.что;
			Если Не ЗначениеЗаполнено(Стр.order_id) Тогда
				Продолжить;
			КонецЕсли;
	
								
		
										HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body?pg="+Что+"&limit=11");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
			
			
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.status="CHECKED_NOT_OK" ИЛИ NNN.status="PARSE_ERROR" 
						ИЛИ NNN.Status="PROCESSING_ERROR"
						Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
						
						Если ОтправлятьНеУчастнику И (Найти(NNN.downloadDesc,"06: ""ИНН получателя""")>0
							ИЛИ Найти(NNN.downloadDesc,"18: Недопустимый статус участника, найденного по ИНН")>0)  
							Тогда
							ПоменятьНаНеУчастнику(стр.Ссылка);
							
							Форм=ПолучитьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
							"Ключ",Стр.Ссылка));
							Форм.ТекущийПользователь=Пользователь;
							Форм.ОтправитьВЦРПТ("");

						КонецЕсли;

						
					ИначеЕсли 	NNN.status="WAIT_ACCEPTANCE" Тогда
						НадоПринять=Ложь;
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"",,НадоПринять);
						
						Если НадоПринять<>Ложь Тогда
							ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИПринятьПриход(Стр.Ссылка,НадоПринять);
						КонецЕсли;
						
						
					ИначеЕсли 	NNN.status="CANCELLED" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
						Если ОтправлятьНеУчастнику И (Найти(NNN.downloadDesc,"06: ""ИНН получателя""")>0
							ИЛИ Найти(NNN.downloadDesc,"18: Недопустимый статус участника, найденного по ИНН")>0)  
							Тогда
							ПоменятьНаНеУчастнику(стр.Ссылка);
							
							Форм=ПолучитьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
							"Ключ",Стр.Ссылка));
							Форм.ТекущийПользователь=Пользователь;
							
							Форм.ОтправитьВЦРПТ("");

						КонецЕсли;

						
					ИначеЕсли NNN.Status="WAIT_PARTICIPANT_REGISTRATION" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаемРегистрациюУчастникавИСМП"),"");
						
					ИначеЕсли NNN.Status="ACCEPTED" Тогда
							   
							  Попытка
							   НадоЗагружатьОтвет.Добавить(NNN.documentDataDto.did);
							   
						   Исключение
							  КонецПопытки;
						//ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"",NNN);
					ИначеЕсли NNN.Status="CHECKED_OK" Тогда
						//ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"",NNN);
												Если Стр.ОтгрузкаНеУчастника И Стр.ВыводИзОборота Тогда
								ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),NNN);
Иначе	   							  Попытка
							   НадоЗагружатьОтвет.Добавить(NNN.documentDataDto.did);
							   
						   Исключение
							  КонецПопытки;

	КонецЕсли;					
					КонецЕсли;
				
				ОбработаноМассив.Добавить(Стр);
				a=1
		ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
				Если УжеОтправили=Истина Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
				Иначе
					ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
					Для Каждого с Из ОбработаноМассив Цикл
						ВернутьДокументы_Отгрузка.Удалить(с)
					Конеццикла;
					
					//ОбновитьСтатусыДокументов(Команда,ВернутьДокументы,Истина,ДокументПроверки);			
					ОбновитьОтгрузкуПоМассивуНакладных(Thumbprint_1,СРегистра,ВернутьДокументы_Отгрузка,ОбработаноМассив,Истина);					
					Возврат;
				КонецЕсли
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				    ОшибкаОтправки="";
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Попытка
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
				КонецПопытки;
			//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
		

		КонецЕсли;
		
		
	Конеццикла;
	

	


	//КонецЕсли;

	Для Каждого Стр_1 Из НадоЗагружатьОтвет Цикл
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
 			что=Thumbprint_1.что;
								
						
						HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр_1+"/body?pg="+Что+"&limit=2147483647");
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
						//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
						///Константин           
						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
						Текст1=Ответ.ПолучитьТелоКакСтроку();
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						МассивУп=Новый Массив;
						
						Попытка
						
							ОбновитьСтатусДокумента_Расход(NNN_1);	
	                 		
							
						Исключение
						КонецПопытки;

		
	Конеццикла;
	
	Элементы.Отгрузка_Список.Обновить();	
	
	//Если НадоЗагружатьОтвет=Истина Тогда
	//	ЗагрузитьОтветыПоОтгрузкам("");
	//КонецЕслИ;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьПриемкаУПД(Команда,УжеОтправили=ложь)  Экспорт
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Thumbprint_1=Неопределено;
	Если НаКлиенте(Thumbprint_1) Тогда
		
		Попытка
			ЛицензияОпределить_Просто(Thumbprint_1);
		Исключение
		КонецПопытки;
		
//		СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
//		СРегистра=Неопределено;
//		Если Не ЗначениеЗаполнено(СРегистра) тогда

СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
							СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
									СерийныйНомер=СтруктураНастроек.СерийныйНомер;
							
								Если Не ЗначениеЗаполнено(СРегистра) ИЛИ Не ЗначениеЗаполнено( СерийныйНомер) Тогда
									СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
								Иначе
								   
										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
											Прокси=Новый ИнтернетПрокси;
											Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										Иначе
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										КонецЕсли;
										
										HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
										HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
										HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
										//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
										///Константин           
										Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
										//Текст1=Ответ.ПолучитьТелоКакСтроку();
										Если Ответ.КодСостояния<>200 Тогда
											СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
										КонецЕсли;
											
								КонецЕсли;
//		КонецЕсли;
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			ПоказатьПредупреждение(,"Не удалось получить токен по организации");
			Возврат;
		Конецесли;
		
		
		Попытка
		
 	Если ОбработкаWEBНаСервере Тогда
		//Если НЕ ЗагрузканаСерверИзЦРПТ(Thumbprint_1,СРегистра,УжеОтправили) Тогда
		//		Если УжеОтправили=Истина Тогда
		//		//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
		//		ЗагрузитьИзЦРПТ(Команда,Истина)			
		//КонецЕсли
		//
		//КонецЕсли;
		//
		
	Иначе
		
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;                                                       
			
//	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/listV2?inputFormat=true&documentType=UNIVERSAL_TRANSFER_DOCUMENT&limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=docDate&pageDir=NEXT");


	HTTPЗапрос=Новый HTTPЗапрос("edo-api/incoming-documents?limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&offset=0&sortBy=created_at&asc=false&folder=0");
	
	
	
	
	
//	HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
	HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
	HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
	HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
	HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
	//HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ +"/documents/incoming/list");
	
	
	
	HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");
	
	//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
	HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
	HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
	
	
	
//	Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
	Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
	"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


	HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	
	//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
							
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				//ЧтениеJSON = Новый ЧтениеJSON;
			Страница=0;
			Тотал=1;
			Пока Страница*СколькоНаСтранице<=Тотал Цикл
				
 					страница=Страница+1;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Тотал=NNN.count;
				
				Если СколькоНаСтранице>NNN.items.Количество() Тогда
					 Тотал=NNN.items.Количество()
				КонецЕсли;
				
				did="";
				docDate="";
				Для Каждого Стр Из  NNN.items Цикл
					did=Стр.id;
					//docDate=Стр.docDate;
					////Если Стр.input=true 
					//	И Найти(Стр.type,"LP_SHIP_GOODS")=1
					//	Тогда
					
					ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьИнформациюОбУПДПриемка(
					Стр.id,ЗагрузатьНаименованиеПриПриемке,ЗаписыватьДанныеПриОтправкеЗаказа,Пользователь,HTTPСервисЗапрос,СерийныйНомер,СРегистра,Thumbprint_1);
//						
//						HTTPЗапрос=Новый HTTPЗапрос("edo-api/incoming-documents/"+Стр.id);
//	
//						
//						
//					//	HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
//						HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
//						HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
//						HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
//						HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
//						HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ +"/documents/incoming/list");
//						
//						
//						
//						HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");
//						
//						//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
//						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
//						HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
//						HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
//						HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
//						
//						
//						
//					//	Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
//						Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
//						"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


//						HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
//						
//						///Константин           
//						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
//						Текст1=Ответ.ПолучитьТелоКакСтроку();
//						//ЧтениеJSON = Новый ЧтениеJSON;
//						//ЧтениеJSON.УстановитьСтроку(Текст1);
//						NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
//						МассивУп=Новый Массив;
//						
//						МассивКМ=Новый Массив;
//						ДокумПриемки=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусДокумента_Приемка_УПД(NNN_1,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа,,,,МассивКМ,ЗагрузатьНаименованиеПриПриемке);	
//						Если МассивКМ.Количество()>0 Тогда
//							
//							СписокОбнТовара=Новый Массив;
//							
//							ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьИнформациюНаСервереДЛяПриемки(Thumbprint_1,МассивКМ,СписокОбнТовара);
//							
//									Для Каждого Стр_1 Из СписокОбнТовара Цикл
//										ОповеститьОбИзменении(Стр_1);
//									КонецЦиклА;
//									МассивКМ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСледющийМассив(ДокумПриемки);
//									СписокОбнТовара.Очистить();

//										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
//														Прокси_20=Новый ИнтернетПрокси;
//														Прокси_20.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
//													
//														HTTPСервисЗапрос_20=Новый HTTPСоединение("xn--80aqu.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,Прокси_20,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
//													Иначе
//														HTTPСервисЗапрос_20=Новый HTTPСоединение("xn--80aqu.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
//													КонецЕсли;
//													
//												МассивСтруктур=Новый Массив;	
//										Для Каждого Стр_1 из МассивКМ Цикл

//											GTINНаименованиеТовара=Сред(Стр_1.Марка,3,14);
//											HTTPЗапрос_20=Новый HTTPЗапрос("v3/product?gtin="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ДополнитьСтроку(Формат(GTINНаименованиеТовара,"ЧГ="))+"&apikey=l10k3203w65mbngr");
//											HTTPЗапрос_20.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded; charset=UTF-8");
//											//HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
//											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
//											///Константин           
//											//Тело="task=getItemByGTIN&lng=ru&keyValue="+ДополнитьСтроку(Формат(Стр_1.GTINНаименованиеТовара,"ЧГ="));
//									//		HTTPЗапрос.УстановитьТелоИзСтроки();
//											//Тело);
//											Ответ_20=HTTPСервисЗапрос_20.ОтправитьДляОбработки(HTTPЗапрос_20);
//												Если Ответ_20.КодСостояния=200 Тогда
//									Текст1_20=Ответ_20.ПолучитьТелоКакСтроку();
//												NNN_20=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1_20);//ПрочитатьJSON(ЧтениеJSON);
//											Название=неопределено;
//											Попытка
//												Название=NNN_20.result[0].good_name; 
//											Исключение
//											КонецПопытки;
//											Если Название=Неопределено Тогда
//												
//									//			http://gepir.gs1ru.org/GEPIR40/index.jsp?p=gtin&lng=ru
//											КонецЕсли;
//											Если ЗначениеЗаполнено(Название) Тогда
//												МассивСтруктур.Добавить(Новый Структура("gtin,Название",GTINНаименованиеТовара,Название));
//												
//											КонецЕсли;
//											КонецЕсли;
//										Конеццикла;
//										
//										МММ=Новый Массив;
//										Если МассивСтруктур.Количество()>0 тогда
//											МММ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагрузитьПродукции(МассивСтруктур);
//											
//										КонецЕсли;
//										Для Каждого Стр_1 Из МММ Цикл
//											ОповеститьОбИзменении(Стр_1);
//										КонецЦиклА;
//										
//										МассивКМ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСледющийМассив(ДокумПриемки);
//										СписокОбнТовара.Очистить();
//										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
//												Прокси_20=Новый ИнтернетПрокси;
//															Прокси_20.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
//														
//															HTTPСервисЗапрос_20=Новый HTTPСоединение("gepir.gs1ru.org",,,,Прокси_20,Thumbprint_1.Таймаут);
//														Иначе
//															HTTPСервисЗапрос_20=Новый HTTPСоединение("gepir.gs1ru.org",,,,,Thumbprint_1.Таймаут);
//														КонецЕсли;
//														
//														
//														
//													МассивСтруктур.Очистить();	
//												
//											Для Каждого СтР_1 Из МассивКМ Цикл
//												
//										

//GTINНаименованиеТовара=Сред(Стр_1.Марка,3,14);

//												HTTPЗапрос=Новый HTTPЗапрос("GEPIR40/getItem");
//												HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded; charset=UTF-8");
//												//HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
//												//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
//												///Константин           
//												Тело="task=getItemByGTIN&lng=ru&keyValue="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ДополнитьСтроку(Формат(GTINНаименованиеТовара,"ЧГ="));
//												HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
//												Ответ=HTTPСервисЗапрос_20.ОтправитьДляОбработки(HTTPЗапрос);
//													Если Ответ.КодСостояния=200 Тогда
//									
//												Текст1=Ответ.ПолучитьТелоКакСтроку();
//												NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
//												Название=неопределено;
//												Попытка
//													Название=NNN.gepirItem.itemDataLine[0].itemName; 
//												Исключение
//												КонецПопытки;
//												Если Название=Неопределено Тогда
//													
//										//			http://gepir.gs1ru.org/GEPIR40/index.jsp?p=gtin&lng=ru
//												КонецЕсли;
//												Если ЗначениеЗаполнено(Название) Тогда
//													МассивСтруктур.Добавить(Новый Структура("gtin,Название",Стр_1.GTINНаименованиеТовара,Название));
//													
//												КонецЕсли;
//												КонецЕсли;
//											Конеццикла;
//											
//										МММ=Новый Массив;
//										Если МассивСтруктур.Количество()>0 тогда
//											МММ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагрузитьПродукции(МассивСтруктур);
//											
//										КонецЕсли;
//										Для Каждого Стр_1 Из МММ Цикл
//											ОповеститьОбИзменении(Стр_1);
//										КонецЦиклА;

//									
//							
//						КонецЕсли;
						
				//	КонецЕсли;
				Конеццикла;
				
				Если Страница*СколькоНаСтранице>Тотал Тогда
					Прервать;
				КонецЕсли;
					
	HTTPЗапрос=Новый HTTPЗапрос("edo-api/incoming-documents?limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&offset="+Формат(Страница*СколькоНаСтранице,"ЧГ=")+"&sortBy=created_at&asc=false&folder=0");
	
	
	
	
	
//	HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
	HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
	HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
	HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
	HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
	HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ +"/documents/incoming/list");
	
	
	
	HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");
	
	//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
	HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
	HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
	
	
	
//	Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
	Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
	"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


	HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	
	//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
							
	
	
	Если Ответ.КодСостояния<>202 И Ответ.КодСостояния<>200  Тогда
		Если УжеОтправили=Истина Тогда
				Сообщить("Не удалось загрузить приходы с ЦРПТ, отсутствует доступ.");
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Возврат;
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ЗагрузитьПриемкаУПД(Команда,Истина)			
			КонецЕсли
	КонецЕсли;
	
	Конеццикла;	
				
				
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
	Иначе
					Попытка
						//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							
						Исключение
							Попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								
								Если Найти(Текст1,"Billing contract")>0 И
									Найти(Текст1,"not signed by participant")>0 Тогда
									Сообщить("Договор биллинга для выбранной группы товаров не подписан участником");
								КонецЕсли;
								
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	КонецЕсли;
	
	
Исключение
КонецПопытки;


КонецЕсли;


	ЗагрузитьОтветыПоОтгрузкам(Команда,,Thumbprint_1,СРегистра);


	Элементы.Приемкасписок.Обновить();
	
	
КонецПроцедуры

&НаСервере
Процедура ОтправлятьНеУчастникуПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ОтправлятьНеУчастнику=ОтправлятьНеУчастнику;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьНеУчастникуПриИзменении(Элемент)
	ОтправлятьНеУчастникуПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПодверждатьЗакрытиеХамелеонМеркурийПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ПодверждатьЗакрытиеХамелеонЦРПТ=ПодверждатьЗакрытиеХамелеонЦРПТ;
	РегДв.Записать(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодверждатьЗакрытиеХамелеонМеркурийПриИзменении(Элемент)
	ПодверждатьЗакрытиеХамелеонМеркурийПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если ПодверждатьЗакрытиеХамелеонЦРПТ Тогда
		Отказ=Истина;
		СтандартнаяОбработка=Ложь;
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗакрытьОбработку",ЭтаФорма),"Закрыть обработку Запуск Хамелеон ЦРПТ?",РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьОбработку(РР,ДД) Экспорт
	Если РР=КодВозвратаДиалога.Да Тогда
		ЗакрываемНаВсегда=Истина;
		Этаформа.Закрыть();
		
	Конецесли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьУПДЧерновик(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Стр Из Элементы.Отгрузка_Список.ВыделенныеСтроки Цикл
		Форм=ПолучитьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
		"Ключ",Стр));
		Форм.ТекущийПользователь=Пользователь;
		Форм.ОтправитьВУПДЧерновик(Команда);
	КонецциклА;
	Элементы.Отгрузка_Список.Обновить();
	
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьВУПД(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Стр Из Элементы.Отгрузка_Список.ВыделенныеСтроки Цикл
		Форм=ПолучитьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
		"Ключ",Стр));
		Форм.ТекущийПользователь=Пользователь;
		Форм.ОтрпавитьУПД(Команда);
	КонецциклА;
	Элементы.Отгрузка_Список.Обновить();
	
	
КонецПроцедуры


&НаСервере
Процедура ИспользоватьСайтGS1ПоМаркировкеПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ИспользоватьСайтGS1ПоМаркировке=ИспользоватьСайтGS1ПоМаркировке;
	РегДв.Записать(Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура ИспользоватьСайтGS1ПоМаркировкеПриИзменении(Элемент)
	ИспользоватьСайтGS1ПоМаркировкеПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ПечатьТаблицаСоответствияКоробовИКМ(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	Печать=Новый ТабличныйДокумент;
	Для Каждого Стр_1 Из Элементы.Отгрузка_Список.ВыделенныеСтроки Цикл
			
			
		ПечатьТаблицу(печать,Стр_1);
	
	Конеццикла;
	Печать.АвтоМасштаб=Истина;
	Печать.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	
	Печать.ИмяПараметровПечати="Печать_Таблица";
	Печать.Показать();
	
	
	
КонецПроцедуры



Процедура ПечатьТаблицу(Печать,Документ)   Экспорт
	
	Макет=Документы.Отгрузка_ХамелеонЦРПТ.ПолучитьМакет("ТаблицаСопоставлений");
	
	ОблШ=Макет.ПолучитьОбласть("Шапка");
	Печать.Вывести(ОблШ);
	ОблС=Макет.ПолучитьОбласть("Строка");
	

	НомПП=0;
	
	Для Каждого Стр_1 Из Документ.СерийныеНомера Цикл
		
			ТаблицаПродукций=Новый ТаблицаЗначений;
			ТаблицаПродукций.Колонки.Добавить("Номенклатура");
			ТаблицаПродукций.Колонки.Добавить("Количество");
			ТаблицаПродукций.Колонки.Добавить("КоличествоВУпаковке");
			ТаблицаПродукций.Колонки.Добавить("НомерКороба");
			ТаблицаПродукций.Колонки.Добавить("cis");
			ТаблицаПродукций.Очистить();
		
		
		Если Стр_1.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
			
			МаркаКМ=Стр_1.cis;
				//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ИсторияПоCIS_ХамелеонЦРПТ.НомерКороба КАК НомерКороба,
					|	ИсторияПоCIS_ХамелеонЦРПТ.cis КАК cis
					|ИЗ
					|	РегистрСведений.ИсторияПоCIS_ХамелеонЦРПТ КАК ИсторияПоCIS_ХамелеонЦРПТ
					|ГДЕ
					|	ИсторияПоCIS_ХамелеонЦРПТ.Документ = &Документ
					|	И ИсторияПоCIS_ХамелеонЦРПТ.cis = &cis
					|ИТОГИ ПО
					|	cis,
					|	НомерКороба";
				
				Запрос.УстановитьПараметр("Документ", Документ);
				Запрос.УстановитьПараметр("cis", МаркаКМ);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Выборкаcis = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				
				Продукция=Стр_1.НаименованиеТовара;
				
				Если Выборкаcis.Количество()=0 Тогда
					
					
						//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
						// Данный фрагмент построен конструктором.
						// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
						
						Запрос = Новый Запрос;
						Запрос.Текст = 
							"ВЫБРАТЬ
							|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Марка
							|ИЗ
							|	Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Марки КАК СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки
							|ГДЕ
							|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.НомерКороба = &НомерКороба
							|	И СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.Проведен";
						
						Запрос.УстановитьПараметр("НомерКороба", МаркаКМ);
						
						РезультатЗапроса = Запрос.Выполнить();
						
						ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
						
						Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
							// Вставить обработку выборки ВыборкаДетальныеЗаписи
							
							Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Сред(ВыборкаДетальныеЗаписи.Марка,3,14)));
							Добав=ТаблицаПродукций.Добавить();
							Добав.Номенклатура=Продукция;
							Добав.Количество=1;
							Добав.КоличествоВУпаковке=ВыборкаДетальныеЗаписи.Количество();
							Добав.НомерКороба=МаркаКМ;
							Добав.cis=ВыборкаДетальныеЗаписи.Марка;
							

						КонецЦикла;
						
						//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

					
					
				Иначе
					Пока Выборкаcis.Следующий() Цикл
						// Вставить обработку выборки Выборкаcis
					
						ВыборкаНомерКороба = Выборкаcis.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
						Пока ВыборкаНомерКороба.Следующий() Цикл
							// Вставить обработку выборки ВыборкаНомерКороба
							Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Сред(ВыборкаНомерКороба.НомерКороба,3,14)));
							Добав=ТаблицаПродукций.Добавить();
							Добав.Номенклатура=Продукция;
							Добав.Количество=1;
							Добав.КоличествоВУпаковке=ВыборкаНомерКороба.Количество();
							Добав.НомерКороба=МаркаКМ;
							Добав.cis=ВыборкаНомерКороба.НомерКороба;
							
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			
			
			ТаблицаПродукций.Свернуть("Номенклатура,НомерКороба,cis");
		
			Если ТаблицаПродукций.Количество()=0 Тогда
				
				НомПП=НомПП+1;
				ОблС.Параметры.НомПП=НомПП;
				Если ЗначениеЗаполнено(Продукция) тогда
					ОблС.Параметры.Артикул=Продукция.МодельПроизводителяАртикул;
					ОблС.Параметры.Размер=Продукция.Размер;
				КонецЕсли;
				ОблС.Параметры.Наименование=Продукция;
				ОблС.Параметры.Короб=маркаКМ;
				ОблС.Параметры.КМ="";
				ОблС.Параметры.ДлКМ="";
					Печать.Вывести(ОблС);

				
				
			Иначе
			
			Для Каждого Стр_20 Из ТаблицаПродукций Цикл
				
				Продукция=Стр_20.Номенклатура;
				НомПП=НомПП+1;
				ОблС.Параметры.НомПП=НомПП;
				Если ЗначениеЗаполнено(Продукция) тогда
					ОблС.Параметры.Артикул=Продукция.МодельПроизводителяАртикул;
					ОблС.Параметры.Размер=Продукция.Размер;
					ОблС.Параметры.GTIN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ДополнитьСтроку(xmlString(Продукция.GTIN));
				Иначе
					ОблС.Параметры.Артикул="";
					ОблС.Параметры.Размер="";
					ОблС.Параметры.GTIN="";
					
				КонецЕсли;
				ОблС.Параметры.Наименование=Продукция;
				ОблС.Параметры.Короб=маркаКМ;
				ОблС.Параметры.КМ=Стр_20.cis;
				
						
				 				
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	НомераКМ_ХамелеонЦРПТ.НомерКМ,
				|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий
				|ИЗ
				|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
				|ГДЕ
				|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий = &НомерКМ";
			
			Запрос.УстановитьПараметр("НомерКМ", Стр_20.cis);
			
					РезультатЗапроса=Запрос.Выполнить();
	
			ВыборкаДетальныеЗаписи_1 = РезультатЗапроса.Выбрать();

			Если ВыборкаДетальныеЗаписи_1.Следующий() Тогда
				НомерКМ_1=ВыборкаДетальныеЗаписи_1.НомерКМ;
							НомерКМ_1=РаскодироватьСтроку(НомерКМ_1,СпособКодированияСтроки.КодировкаURL);
				Есть=истина;
										
				
			Иначе
				

									
							
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты.Регистратор
					|ИЗ
					|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Обороты(, , Регистратор, СерийныйНомер = &cis) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты
					|ГДЕ
					|	ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты.Регистратор ССЫЛКА Документ.ЗаказМарок_ХамелеонЦРПТ";
				
				Запрос.УстановитьПараметр("cis", Стр_20.cis);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				НомерКМ_2=Стр_20.cis;
				
				Есть=Ложь;
				РРР=КодироватьСтроку(Сред(НомерКМ_2,1,31),СпособКодированияСТроки.КодировкаURL);
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					Для Каждого Стр_111 Из  ВыборкаДетальныеЗаписи.Регистратор.КМИзAPI Цикл
						Если Найти(Стр_111.НомерКМ,РРР)=1 Тогда
							НомерКМ_1=Стр_111.НомерКМ;
							НомерКМ_1=РаскодироватьСтроку(НомерКМ_1,СпособКодированияСтроки.КодировкаURL);
							Есть=истина;
							Прервать;
						КонецЕсли;
						
					Конеццикла;
					
					
				КонецЕсли;
			КонецЕсли;
				//Если Есть=Ложь тогда
				//	
				//	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				//	// Данный фрагмент построен конструктором.
				//	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				//	
				//	Запрос = Новый Запрос;
				//	Запрос.Текст = 
				//		"ВЫБРАТЬ
				//		|	ЗаказМарок_ХамелеонЦРПТКМИзAPI.НомерКМ
				//		|ИЗ
				//		|	Документ.ЗаказМарок_ХамелеонЦРПТ.КМИзAPI КАК ЗаказМарок_ХамелеонЦРПТКМИзAPI
				//		|ГДЕ
				//		|	ЗаказМарок_ХамелеонЦРПТКМИзAPI.НомерКМ ПОДОБНО &НомерКМ";
				//	
				//	Запрос.УстановитьПараметр("НомерКМ", НомерКМ);
				//	
				//	РезультатЗапроса = Запрос.Выполнить();
				//	
				//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				//	
				//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				//		// Вставить обработку выборки ВыборкаДетальныеЗаписи
				//	КонецЦикла;
				//	
				//	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

				//	
				//КонецЕсли;
				
				
				Если Есть=Ложь Тогда
					    	НомерКМ_1=Стр_20.cis;
			
				КонецЕсли;
				
				НомерКМ_1=СтрЗаменить(НомерКМ_1,Символ(29),"\u001d");
				ОблС.Параметры.ДлКМ=НомерКМ_1;
				   	Печать.Вывести(ОблС);

				
				
			Конеццикла;
			
			  КонецЕсли;
		
			
			
		Иначе
			
			Продукция=Стр_1.НаименованиеТовара;
			НомПП=НомПП+1;
				ОблС.Параметры.НомПП=НомПП;
				Если ЗначениеЗаполнено(Продукция) тогда
					ОблС.Параметры.Артикул=Продукция.МодельПроизводителяАртикул;
					ОблС.Параметры.Размер=Продукция.Размер;
					ОблС.Параметры.GTIN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ДополнитьСтроку(xmlString(Продукция.GTIN));
					
				Иначе
					ОблС.Параметры.Артикул="";
					ОблС.Параметры.Размер="";
					ОблС.Параметры.GTIN="";
					
				КонецЕсли;
				ОблС.Параметры.Наименование=Продукция;
				ОблС.Параметры.Короб="";
				ОблС.Параметры.КМ=Стр_1.cis;
				
				
					Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	НомераКМ_ХамелеонЦРПТ.НомерКМ,
				|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий
				|ИЗ
				|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
				|ГДЕ
				|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий = &НомерКМ";
			
			Запрос.УстановитьПараметр("НомерКМ", Стр_1.cis);
			
					РезультатЗапроса=Запрос.Выполнить();
	
			ВыборкаДетальныеЗаписи_1 = РезультатЗапроса.Выбрать();

			Если ВыборкаДетальныеЗаписи_1.Следующий() Тогда
				НомерКМ_1=ВыборкаДетальныеЗаписи_1.НомерКМ;
							НомерКМ_1=РаскодироватьСтроку(НомерКМ_1,СпособКодированияСтроки.КодировкаURL);
				Есть=истина;
										
				
			Иначе
				
	
				
							
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты.Регистратор
					|ИЗ
					|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Обороты(, , Регистратор, СерийныйНомер = &cis) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты
					|ГДЕ
					|	ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты.Регистратор ССЫЛКА Документ.ЗаказМарок_ХамелеонЦРПТ";
				
				Запрос.УстановитьПараметр("cis", Стр_1.cis);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				НомерКМ_1=Стр_1.cis;
				РРР=КодироватьСтроку(НомерКМ_1,СпособКодированияСТроки.КодировкаURL);
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					Для Каждого Стр_111 Из  ВыборкаДетальныеЗаписи.Регистратор.КМИзAPI Цикл
						Если Найти(Стр_111.НомерКМ,РРР)=1 Тогда
							НомерКМ_1=Стр_111.НомерКМ;
							НомерКМ_1=РаскодироватьСтроку(НомерКМ_1,СпособКодированияСтроки.КодировкаURL);
							
						КонецЕсли;
						
					Конеццикла;
					
					
				КонецЕсли;
КонецЕсли;
				НомерКМ_1=СтрЗаменить(НомерКМ_1,Символ(29),"\u001d");
				ОблС.Параметры.ДлКМ=НомерКМ_1;
	
		Печать.Вывести(ОблС);

			
			
		КонецЕсли;
		
		
		
	Конеццикла;
КонецПроцедуры


&НаКлиенте
Процедура ПечатьЭтикеток1(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Для Каждого Стр Из Элементы.ПроверкаМарокТаблица.ВыделенныеСтроки Цикл
		
		
		Форм=ПолучитьФорму("Документ.ПроверкаНомеровКМ_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
		"Ключ",Стр));
		Форм.Команда1(Команда);
	КонецциклА;
КонецПроцедуры


&НаКлиенте
Процедура ПечатьСПО1(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Счетч=1;
				Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводПервогоЧисла_1",ЭтаФорма));
	Форм.Число=Счетч;
	Форм.Заголовок="Начать печать с № КМ";
//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводПервогоЧисла_1",ЭтаФорма),Счетч,"Начать печать с № КМ");
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводПервогоЧисла_1(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
				Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводВторогоЧисла_1",ЭтаФорма,РР));
	Форм.Число=30;
	Форм.Заголовок="Допечатать указанное количество № КМ";
 		//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводВторогоЧисла_1",ЭтаФорма,РР),30,"Допечатать указанное количество № КМ");
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводВторогоЧисла_1(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
		Таб=Новый ТабличныйДокумент;
		
		Для Каждого Стр Из Элементы.ПроверкаМарокТаблица.ВыделенныеСтроки Цикл
			Если ЗначениеЗаполненО(КоличествоЯдерДляГенерацииDataMatrix) тогда
				Форм=ПолучитьФорму("Документ.ПроверкаНомеровКМ_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
				"Ключ",Стр));
				Таб = Форм.ПечатьЭти_1_Функция(ДД,РР);
			Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
		
			Таб.Показать();
				
				
				//Таб = ПолучитьИзВременногоХранилища(ПечатьЭти_1_ЦРПТ_Функция(ДД,РР));
				//Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
				
				//Таб.Показать();
				
			Иначе
			
				Форм=ПолучитьФорму("Документ.ПроверкаНомеровКМ_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
				"Ключ",Стр));
				Форм.ПечатьЭти_1(Таб,ДД,РР);
				
			Конецесли;
//			Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
//			"Ключ",Стр));
//			Форм.ПечатьЭти_1(Таб,ДД,РР);
//			Таб.ВывестиГоризонтальныйРазделительСтраниц();
			//Форм.ПечатьЭтикеток(Команда);
		КонецциклА;
		Если НЕ ЗначениеЗаполненО(КоличествоЯдерДляГенерацииDataMatrix) тогда
			Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
		
			Таб.Показать();
		Конецесли;
//		Элементы.ЗаказыТаблица.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСПОКакВЦРПТ1(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Счетч=1;
				Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводПервогоЧисла_ЦРПТ_1",ЭтаФорма));
	Форм.Число=Счетч;
	Форм.Заголовок="Начать печать с № КМ";
//	ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводПервогоЧисла_ЦРПТ_1",ЭтаФорма),Счетч,"Начать печать с № КМ");
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводПервогоЧисла_ЦРПТ_1(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
				Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводВторогоЧисла_ЦРПТ_1",ЭтаФорма,РР));
	Форм.Число=30;
	Форм.Заголовок="Допечатать указанное количество № КМ";
 		//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводВторогоЧисла_ЦРПТ_1",ЭтаФорма,РР),30,"Допечатать указанное количество № КМ");
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводВторогоЧисла_ЦРПТ_1(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
		Таб=Новый ТабличныйДокумент;
		
		Для Каждого Стр Из Элементы.ПроверкаМарокТаблица.ВыделенныеСтроки Цикл
			Если ЗначениеЗаполненО(КоличествоЯдерДляГенерацииDataMatrix) тогда
				Форм=ПолучитьФорму("Документ.ПроверкаНомеровКМ_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
				"Ключ",Стр));
				Таб = Форм.ПечатьЭти_1_ЦРПТ_Функция(ДД,РР);
				Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
				Таб.Показать();
				
				//Таб = ПолучитьИзВременногоХранилища(ПечатьЭти_1_ЦРПТ_Функция(ДД,РР));
				//Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
				
				//Таб.Показать();
				
			Иначе
			
				Форм=ПолучитьФорму("Документ.ПроверкаНомеровКМ_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
				"Ключ",Стр));
				Форм.ПечатьЭти_1_ЦРПТ(Таб,ДД,РР);
				
			Конецесли;
			//Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
			//"Ключ",Стр));
			//Форм.ПечатьЭти_1_ЦРПТ(Таб,ДД,РР);
//			Таб.ВывестиГоризонтальныйРазделительСтраниц();
			//Форм.ПечатьЭтикеток(Команда);
		КонецциклА;
		Если НЕ ЗначениеЗаполненО(КоличествоЯдерДляГенерацииDataMatrix) тогда
			Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";

			Таб.Показать();
		КонецЕсли;
//		Элементы.ЗаказыТаблица.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСПООстаток1(Команда)
	// Вставить содержимое обработчика.
		
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Счетч=1;
				Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводПервогоЧисла_Остаток_1",ЭтаФорма));
	Форм.Число=Счетч;
	Форм.Заголовок="Начать печать с № КМ";
	//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводПервогоЧисла_Остаток_1",ЭтаФорма),Счетч,"Начать печать с № КМ");
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводПервогоЧисла_Остаток_1(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
				Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводВторогоЧисла_Остаток_1",ЭтаФорма,РР));
	Форм.Число=30;
	Форм.Заголовок="Допечатать указанное количество № КМ";
 		//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводВторогоЧисла_Остаток_1",ЭтаФорма,РР),30,"Допечатать указанное количество № КМ");
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводВторогоЧисла_Остаток_1(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
		Таб=Новый ТабличныйДокумент;
		
		Для Каждого Стр Из Элементы.ПроверкаМарокТаблица.ВыделенныеСтроки Цикл
			Если ЗначениеЗаполненО(КоличествоЯдерДляГенерацииDataMatrix) тогда
				Форм=ПолучитьФорму("Документ.ПроверкаНомеровКМ_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
				"Ключ",Стр));
				Таб = Форм.ПечатьЭти_1_Остатки_Функция(ДД,РР);
				
				Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
			
				Таб.Показать();
				
				//Таб = ПолучитьИзВременногоХранилища(ПечатьЭти_1_ЦРПТ_Функция(ДД,РР));
				//Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
				
				//Таб.Показать();
				
			Иначе
			
				Форм=ПолучитьФорму("Документ.ПроверкаНомеровКМ_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
				"Ключ",Стр));
				Форм.ПечатьЭти_1_Остатки(Таб,ДД,РР);
				
			Конецесли;
//			Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
//			"Ключ",Стр));
//			Форм.ПечатьЭти_1_Остатки(Таб,ДД,РР);
//			Таб.ВывестиГоризонтальныйРазделительСтраниц();
			//Форм.ПечатьЭтикеток(Команда);
		КонецциклА;
		Если НЕ ЗначениеЗаполненО(КоличествоЯдерДляГенерацииDataMatrix) тогда
			Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
		
			Таб.Показать();
		Конецесли;
//		Элементы.ЗаказыТаблица.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьFNCПриПечатиУпаковокПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ДобавитьFNCПриПечатиУпаковок=ДобавитьFNCПриПечатиУпаковок;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьFNCПриПечатиУпаковокПриИзменении(Элемент)
	ДобавитьFNCПриПечатиУпаковокПриИзмененииНаСервере();
	Если ДобавитьFNCПриПечатиУпаковок=Истина Тогда
		Если ФормироватьАгрегациюПоGTIN=Ложь Тогда
			ФормироватьАгрегациюПоGTIN=Истина;
			ФормироватьАгрегациюПоGTINПриИзмененииНаСервере();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура РасформированиеКоробовОтгрузка(Команда)
	Если Элементы.Отгрузка_Список.ТекущиеДанные<>Неопределено Тогда
		
		Агрег=СоздатьРАсформирование_1(Элементы.Отгрузка_Список.ТекущиеДанные.Ссылка);
		Если ЗначениеЗаполнено(Агрег) Тогда
			ОткрытьФорму("Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Форма.ФормаДокумента",
			Новый Структура("Ключ",Агрег));
		КонецЕсли;
	КонецЕсли;
	Элементы.Отгрузка_Список.Обновить();;
КонецПроцедуры



&НаСервереБезКонтекста
Функция СоздатьРАсформирование_1(Ссылка)
	
	Если не ЗначениеЗАполнено(Ссылка.РасформированиеКоробов) Тогда
		Агр=Документы.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.СоздатьДокумент();
		
					  ДокОснование=Ссылка;
					  ЗаполнитьЗначенияСвойств(Агр,ДокОснование,,"Номер,Дата,_Order_ID,Статус");
					  Агр.ТипДокумента=перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.Расформирование;
					  //ПриемкаЦРПТ=ДокОснование;
					        Агр.Дата=Текущаядата();
							Агр.СтатусКМ=Перечисления.СтатусыКМДляАгрегации_ХамелеонЦРПТ.КМВОбороте;
		Если	 РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ОтправлятьПоУмолчаниюАгрегациюЧерезСУЗ Тогда
	
			Агр.ЧерезСУЗ=Истина;
		КонецЕсли;
					  Агр.Продукция=ДокОснование.Товары[0].GTIN;
					  Для Каждого Стр_1 Из ДокОснование.СерийныеНомера Цикл
						  Если Стр_1.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука Тогда
							  ПродолжитЬ;
							КонецЕсли;
						  Добав=Агр.Марки.Добавить();
						  Добав.cis=Стр_1.cis;
						  Добав.Марка=Добав.cis;
						  
						  Нстроки=ДокОснование.ТоварыКМ.НайтиСтроки(Новый Структура("НомерКороба",Стр_1.cis));
						  Для Каждого Стр_ИзКор Из НСтроки Цикл
							  Если Стр_ИзКор.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
								  Если Агр.МаркиОприходовать.Найти(Стр_ИзКор.cis,"Марка")=Неопределено Тогда
									  
									  Добав=Агр.МаркиОприходовать.Добавить();
									  Добав.Марка=Стр_ИзКор.Штрихкод;
									  Добав.НомерКороба=Стр_1.cis;
									  
								  КонецЕсли;
								 КонецЕсли;
							  
							Конеццикла;
						  
						  
					  Конеццикла;
		Агр.Записать();
		
		Поступ=Ссылка.ПолучитьОбъект();
		Поступ.РасформированиеКоробов=Агр.Ссылка;
		Поступ.Записать();
		
		Возврат Агр.Ссылка;
	Иначе
		Сообщить("По документу "+Строка(Ссылка)+" уже создана агрегация");
		Возврат Ссылка.РасформированиеКоробов
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СоздатьИсправлчние(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Для Каждого Стр Из Элементы.Отгрузка_Список.ВыделенныеСтроки Цикл
		Форм=ПолучитьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
		"Ключ",Стр));
		Форм.ТекущийПользователь=Пользователь;
		Форм.СоздатьИсправление(Команда);
	КонецциклА;
	Элементы.Отгрузка_Список.Обновить();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВЦРПТСПринятем(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Стр Из Элементы.Отгрузка_Список.ВыделенныеСтроки Цикл
		Форм=ПолучитьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
		"Ключ",Стр));
		Форм.ТекущийПользователь=Пользователь;
		Форм.ОтправитьСПринятием(Команда);
	КонецциклА;
	Элементы.Отгрузка_Список.Обновить();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьТаблицаСоответствияПаллетКоробовИКМ(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
	Печать=Новый ТабличныйДокумент;
	Для Каждого Стр_1 Из Элементы.Отгрузка_Список.ВыделенныеСтроки Цикл
			
			
		ПечатьТаблицу_паллыеты(печать,Стр_1);
	
	Конеццикла;
	Печать.АвтоМасштаб=Истина;
	Печать.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	
	Печать.ИмяПараметровПечати="Печать_Таблица";
	Печать.Показать();
	
	
	
КонецПроцедуры


Процедура ПечатьТаблицу_паллыеты(Печать,Документ)   Экспорт
	
	Макет=Документы.Отгрузка_ХамелеонЦРПТ.ПолучитьМакет("ТаблицаСопоставлений");
	
	ОблШ=Макет.ПолучитьОбласть("Шапка");
	Печать.Вывести(ОблШ);
	ОблС=Макет.ПолучитьОбласть("Строка");
	

	НомПП=0;
	
	Для Каждого Стр_1 Из Документ.СерийныеНомера Цикл
		
			ТаблицаПродукций=Новый ТаблицаЗначений;
			ТаблицаПродукций.Колонки.Добавить("Номенклатура");
			ТаблицаПродукций.Колонки.Добавить("Количество");
			ТаблицаПродукций.Колонки.Добавить("КоличествоВУпаковке");
			ТаблицаПродукций.Колонки.Добавить("НомерКороба");
			ТаблицаПродукций.Колонки.Добавить("cis");
			ТаблицаПродукций.Очистить();
		
		
		Если Стр_1.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
			
			МаркаКМ=Стр_1.cis;
									
						//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
						// Данный фрагмент построен конструктором.
						// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
						
						Запрос = Новый Запрос;
						Запрос.Текст = 
							"ВЫБРАТЬ
							|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Марка
							|ИЗ
							|	Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Марки КАК СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки
							|ГДЕ
							|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.НомерКороба = &НомерКороба
							|	И СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.Проведен";
						
						Запрос.УстановитьПараметр("НомерКороба", МаркаКМ);
						
						РезультатЗапроса = Запрос.Выполнить();
						
						ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
						
						Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
							// Вставить обработку выборки ВыборкаДетальныеЗаписи
							
							//Если СтрДлина(ВыборкаДетальныеЗаписи.Марка)=18 Тогда
								
								
								//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
								// Данный фрагмент построен конструктором.
										// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
										
										Запрос = Новый Запрос;
										Запрос.Текст = 
											"ВЫБРАТЬ
											|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Марка
											|ИЗ
											|	Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Марки КАК СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки
											|ГДЕ
											|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.НомерКороба = &НомерКороба
											|	И СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.Проведен";
										
										Запрос.УстановитьПараметр("НомерКороба", ВыборкаДетальныеЗаписи.Марка);
										
										РезультатЗапроса_123 = Запрос.Выполнить();
										
										ВыборкаДетальныеЗаписи_213123 = РезультатЗапроса_123.Выбрать();
							Если ВыборкаДетальныеЗаписи_213123 .Количество()>0 Тогда
										МаркаКМ=ВыборкаДетальныеЗаписи.Марка;
										Пока ВыборкаДетальныеЗаписи_213123.Следующий() Цикл
											// Вставить обработку выборки ВыборкаДетальныеЗаписи
											
												Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Сред(ВыборкаДетальныеЗаписи_213123.Марка,3,14)));
												Добав=ТаблицаПродукций.Добавить();
												Добав.Номенклатура=Продукция;
												Добав.Количество=1;
												Добав.КоличествоВУпаковке=ВыборкаДетальныеЗаписи_213123.Количество();
												Добав.НомерКороба=ВыборкаДетальныеЗаписи.Марка;
												Добав.cis=ВыборкаДетальныеЗаписи_213123.Марка;
											//КонецЕсли;

										КонецЦикла;
										
								
								
								
								
							Иначе
								
								
								Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Сред(ВыборкаДетальныеЗаписи.Марка,3,14)));
								Добав=ТаблицаПродукций.Добавить();
								Добав.Номенклатура=Продукция;
								Добав.Количество=1;
								Добав.КоличествоВУпаковке=ВыборкаДетальныеЗаписи.Количество();
								Добав.НомерКороба=МаркаКМ;
								Добав.cis=ВыборкаДетальныеЗаписи.Марка;
							КонецЕсли;

						КонецЦикла;
						
						//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

					
					
							
			ТаблицаПродукций.Свернуть("Номенклатура,НомерКороба,cis");
			//ТаблицаПродукций.Сортировать("НомерКОроба");
			
			Если ТаблицаПродукций.Количество()=0 Тогда
				
				НомПП=НомПП+1;
				ОблС.Параметры.НомПП=НомПП;
				Если ЗначениеЗаполнено(Продукция) тогда
					ОблС.Параметры.Артикул=Продукция.МодельПроизводителяАртикул;
					ОблС.Параметры.Размер=Продукция.Размер;
				КонецЕсли;
				ОблС.Параметры.Наименование=Продукция;
				ОблС.Параметры.Короб=маркаКМ;
				ОблС.Параметры.КМ="";
				ОблС.Параметры.ДлКМ="";
					Печать.Вывести(ОблС);

				
				
			Иначе
				
			НомерКороба="";
			Для Каждого Стр_20 Из ТаблицаПродукций Цикл
				
				
				Продукция=Стр_20.Номенклатура;
				НомПП=НомПП+1;
				ОблС.Параметры.НомПП=НомПП;
				Если ЗначениеЗаполнено(Продукция) тогда
					ОблС.Параметры.Артикул=Продукция.МодельПроизводителяАртикул;
					ОблС.Параметры.Размер=Продукция.Размер;
					ОблС.Параметры.GTIN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ДополнитьСтроку(xmlString(Продукция.GTIN));
				Иначе
					ОблС.Параметры.Артикул="";
					ОблС.Параметры.Размер="";
					ОблС.Параметры.GTIN="";
					
				КонецЕсли;
				ОблС.Параметры.Наименование=Продукция;
				ОблС.Параметры.Короб=маркаКМ;
				ОблС.Параметры.КМ=Стр_20.НомерКороба;
				Если НомерКороба<>Стр_20.НомерКороба Тогда
					Печать.Вывести(ОблС);
				КонецЕсли;
				НомерКороба=Стр_20.НомерКороба;
				
				
				
				ОблС.Параметры.Короб=Стр_20.НомерКороба;
				ОблС.Параметры.КМ=Стр_20.cis;
				
					 				
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	НомераКМ_ХамелеонЦРПТ.НомерКМ,
				|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий
				|ИЗ
				|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
				|ГДЕ
				|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий = &НомерКМ";
			
			Запрос.УстановитьПараметр("НомерКМ", Стр_20.cis);
			
					РезультатЗапроса=Запрос.Выполнить();
	
			ВыборкаДетальныеЗаписи_1 = РезультатЗапроса.Выбрать();

			Если ВыборкаДетальныеЗаписи_1.Следующий() Тогда
				НомерКМ_1=ВыборкаДетальныеЗаписи_1.НомерКМ;
							НомерКМ_1=РаскодироватьСтроку(НомерКМ_1,СпособКодированияСтроки.КодировкаURL);
				Есть=истина;
										
				
			Иначе
				

										
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты.Регистратор
					|ИЗ
					|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Обороты(, , Регистратор, СерийныйНомер = &cis) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты
					|ГДЕ
					|	ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты.Регистратор ССЫЛКА Документ.ЗаказМарок_ХамелеонЦРПТ";
				
				Запрос.УстановитьПараметр("cis", Стр_20.cis);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				НомерКМ_2=Стр_20.cis;
				
				Есть=Ложь;
				РРР=КодироватьСтроку(Сред(НомерКМ_2,1,31),СпособКодированияСТроки.КодировкаURL);
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					Для Каждого Стр_111 Из  ВыборкаДетальныеЗаписи.Регистратор.КМИзAPI Цикл
						Если Найти(Стр_111.НомерКМ,РРР)=1 Тогда
							НомерКМ_1=Стр_111.НомерКМ;
							НомерКМ_1=РаскодироватьСтроку(НомерКМ_1,СпособКодированияСтроки.КодировкаURL);
							Есть=истина;
							Прервать;
						КонецЕсли;
						
					Конеццикла;
					
					
				КонецЕсли;
			КонецЕсли;
				//Если Есть=Ложь тогда
				//	
				//	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				//	// Данный фрагмент построен конструктором.
				//	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				//	
				//	Запрос = Новый Запрос;
				//	Запрос.Текст = 
				//		"ВЫБРАТЬ
				//		|	ЗаказМарок_ХамелеонЦРПТКМИзAPI.НомерКМ
				//		|ИЗ
				//		|	Документ.ЗаказМарок_ХамелеонЦРПТ.КМИзAPI КАК ЗаказМарок_ХамелеонЦРПТКМИзAPI
				//		|ГДЕ
				//		|	ЗаказМарок_ХамелеонЦРПТКМИзAPI.НомерКМ ПОДОБНО &НомерКМ";
				//	
				//	Запрос.УстановитьПараметр("НомерКМ", НомерКМ);
				//	
				//	РезультатЗапроса = Запрос.Выполнить();
				//	
				//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				//	
				//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				//		// Вставить обработку выборки ВыборкаДетальныеЗаписи
				//	КонецЦикла;
				//	
				//	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

				//	
				//КонецЕсли;
				
				
				Если Есть=Ложь Тогда
					    	НомерКМ_1=Стр_20.cis;
			
				КонецЕсли;
				
				НомерКМ_1=СтрЗаменить(НомерКМ_1,Символ(29),"\u001d");
				ОблС.Параметры.ДлКМ=НомерКМ_1;
				   	Печать.Вывести(ОблС);

				
				
			Конеццикла;
			
			  КонецЕсли;
		
			
			
		Иначе
			
			Продукция=Стр_1.НаименованиеТовара;
			НомПП=НомПП+1;
				ОблС.Параметры.НомПП=НомПП;
				Если ЗначениеЗаполнено(Продукция) тогда
					ОблС.Параметры.Артикул=Продукция.МодельПроизводителяАртикул;
					ОблС.Параметры.Размер=Продукция.Размер;
					ОблС.Параметры.GTIN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ДополнитьСтроку(xmlString(Продукция.GTIN));
					
				Иначе
					ОблС.Параметры.Артикул="";
					ОблС.Параметры.Размер="";
					ОблС.Параметры.GTIN="";
					
				КонецЕсли;
				ОблС.Параметры.Наименование=Продукция;
				ОблС.Параметры.Короб="";
				ОблС.Параметры.КМ=Стр_1.cis;
				
				
				
				
				 				
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	НомераКМ_ХамелеонЦРПТ.НомерКМ,
				|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий
				|ИЗ
				|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
				|ГДЕ
				|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий = &НомерКМ";
			
			Запрос.УстановитьПараметр("НомерКМ", Стр_1.cis);
			
					РезультатЗапроса=Запрос.Выполнить();
	
			ВыборкаДетальныеЗаписи_1 = РезультатЗапроса.Выбрать();

			Если ВыборкаДетальныеЗаписи_1.Следующий() Тогда
				НомерКМ_1=ВыборкаДетальныеЗаписи_1.НомерКМ;
							НомерКМ_1=РаскодироватьСтроку(НомерКМ_1,СпособКодированияСтроки.КодировкаURL);
				Есть=истина;
										
				
			Иначе
				

											
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты.Регистратор
					|ИЗ
					|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Обороты(, , Регистратор, СерийныйНомер = &cis) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты
					|ГДЕ
					|	ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты.Регистратор ССЫЛКА Документ.ЗаказМарок_ХамелеонЦРПТ";
				
				Запрос.УстановитьПараметр("cis", Стр_1.cis);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				НомерКМ_1=Стр_1.cis;
				РРР=КодироватьСтроку(НомерКМ_1,СпособКодированияСТроки.КодировкаURL);
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					Для Каждого Стр_111 Из  ВыборкаДетальныеЗаписи.Регистратор.КМИзAPI Цикл
						Если Найти(Стр_111.НомерКМ,РРР)=1 Тогда
							НомерКМ_1=Стр_111.НомерКМ;
							НомерКМ_1=РаскодироватьСтроку(НомерКМ_1,СпособКодированияСтроки.КодировкаURL);
							
						КонецЕсли;
						
					Конеццикла;
					
					
				КонецЕсли;
		КонецЕсли;
				
				НомерКМ_1=СтрЗаменить(НомерКМ_1,Символ(29),"\u001d");
				ОблС.Параметры.ДлКМ=НомерКМ_1;
	
		Печать.Вывести(ОблС);

			
			
		КонецЕсли;
		
		
		
	Конеццикла;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПростаяБелая(Команда)
	// Вставить содержимое обработчика.
	
	Счетч=1;
				Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводПервогоЧисла_ЦРПТ_ПростаяБелая",ЭтаФорма));
	Форм.Число=счетч;
	Форм.Заголовок="Начать печать с № КМ";
	//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводПервогоЧисла_ЦРПТ_ПростаяБелая",ЭтаФорма),Счетч,"Начать печать с № КМ");
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводПервогоЧисла_ЦРПТ_ПростаяБелая(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
				Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводЧисла",,,,,,Новый ОписаниеОповещения("ПослеВводВторогоЧисла_ЦРПТ_ПростаяБелая",ЭтаФорма,РР));
	Форм.Число=30;
	Форм.Заголовок="Допечатать указанное количество № КМ";
 		//ПоказатьВводЧисла(Новый ОписаниеОповещения("ПослеВводВторогоЧисла_ЦРПТ_ПростаяБелая",ЭтаФорма,РР),30,"Допечатать указанное количество № КМ");
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПослеВводВторогоЧисла_ЦРПТ_ПростаяБелая(РР,ДД) Экспорт
	Если ЗначениеЗаполнено(РР) Тогда
		Таб=Новый ТабличныйДокумент;
		
		Для Каждого Стр Из Элементы.ЗаказыТаблица.ВыделенныеСтроки Цикл
			Если ЗначениеЗаполненО(КоличествоЯдерДляГенерацииDataMatrix) тогда
				Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
				"Ключ",Стр));
				Таб = Форм.ПечатьЭти_1_ЦРПТ_Функция_ПростаяБелая(ДД,РР);
				Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
				Таб.Показать();
				
				//Таб = ПолучитьИзВременногоХранилища(ПечатьЭти_1_ЦРПТ_Функция(ДД,РР));
				//Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";
				
				//Таб.Показать();
				
			Иначе
			
				Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
				"Ключ",Стр));
				Форм.ПечатьЭти_1_ЦРПТ_ПростаяБелая(Таб,ДД,РР);
				
			Конецесли;
			//Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
			//"Ключ",Стр));
			//Форм.ПечатьЭти_1_ЦРПТ(Таб,ДД,РР);
//			Таб.ВывестиГоризонтальныйРазделительСтраниц();
			//Форм.ПечатьЭтикеток(Команда);
		КонецциклА;
		Если НЕ ЗначениеЗаполненО(КоличествоЯдерДляГенерацииDataMatrix) тогда
			Таб.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ";

			Таб.Показать();
		КонецЕсли;
//		Элементы.ЗаказыТаблица.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДваНуляПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ДобавитьДваНуля=ДобавитьДваНуля;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДваНуляПриИзменении(Элемент)
	ДобавитьДваНуляПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОтчетПоВыделеннымПоВыделенным(Команда)
	МассивЗаказов=Новый массив;
	Для Каждого Стр_1 Из Элементы.ЗаказыТаблица.ВыделенныеСтроки Цикл
		МассивЗаказов.Добавить(Стр_1);
	Конеццикла;
	
	ВводВоборот_1=СоздатьВводВОборотПоВыделеннымНаСервере_Отчет(МассивЗаказов);
	
	
КонецПроцедуры






&НаСервереБезКонтекста
Функция СоздатьВводВОборотПоВыделеннымНаСервере_Отчет(МассивЗаказов,Отчте=Ложь)
	// Вставить содержимое обработчика.
	Если МассивЗаказов.Количество()>0 Тогда
		ВводВоборот=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
			Документоснование=МассивЗаказов[0];
			ВводВоборот.ДокОснование=Документоснование;
			ЗаполнитьЗначенияСвойств(ВводВоборот,ВводВоборот.ДокОснование,,"Номер,Дата,_Order_ID,Статус");
					ВводВоборот.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании;
				
				
		Для Каждого Документоснование ИЗ МассивЗаказов Цикл
			
		
						
			
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	НомераКМ_ХамелеонЦРПТ.НомерКМ
					|ИЗ
					|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
					|ГДЕ
					|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа";
				
				Запрос.УстановитьПараметр("ДокументЗаказа", ВводВоборот.ДокОснование);
				
				РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗАпроса.Прямой);
				
				Если РезультатЗапроса.Количество()>0 Тогда 
					КоличествоНеобходмо=РезультатЗапроса.Количество();
					Смещение=0;
					Пока КоличествоНеобходмо>0 Цикл
						Если КоличествоНеобходмо<=99999 Тогда
							
							
							
										Для Сч=Смещение По  Смещение+КоличествоНеобходмо-1 Цикл
											
											cis_=РезультатЗапроса[Сч].НомерКМ;
											               НомерКМ_Короткий=РезультатЗапроса[Сч].НомерКМ_Короткий;
										cis=НомерКМ_Короткий;
										Продукция=Неопределено;
											
											ДД=ВводВоборот.СерийныеНомера.Добавить();
											Если ЗначениеЗаполнено(Продукция) Тогда
												ДД.НаименованиеТовара=Продукция
											Иначе
												Если Сред(cis,1,2)="01" тогда
												
													ДД.GTIN=Сред(cis,3,14);
												Иначе
													ДД.GTIN=Сред(cis,1,14);
													
												КонецЕсли;
												ДД.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(ДД.GTIN));;
											КонецЕсли;
											ДД.cis=cis_;
											
											часыДо=Ложь;
											Если ВводВоборот.ТекущийПользователь.СайтыВходаВСистему.Наименование="Молоко" Тогда
												Попытка
													Если Сред(cis,32,4)="7003" Тогда	
													 	ШтрихКод=Сред(cis,1,45);
														ДатаГоденДо=дата("20"+Сред(cis,36,2),Сред(cis,38,2),Сред(cis,40,2),Сред(cis,42,2),Сред(cis,44,2),0);
														часыДо=Истина;
													ИначеЕсли Сред(cis,32,2)="17" Тогда
													 	ШтрихКод=Сред(cis,1,39);
														ДатаГоденДо=дата("20"+Сред(cis,34,2),Сред(cis,36,2),Сред(cis,38,2));
														
													ИначеЕсли СтрДлина(cis)<=30 Тогда
														ШтрихКод=Сред(cis,1,24);
														ДатаГоденДо=Дата(1,1,1);
													Иначе
														ШтрихКод=Сред(cis,1,31);
														ДатаГоденДо=Дата(1,1,1);
														
													КонецЕсли;
												Исключение
													ДатаГоденДо=Дата(1,1,1);
													
												КонецПопытки;
												
												
											Иначе
												ДатаГоденДо=Дата(1,1,1);
												
											КонецЕсли;
											
											
																			//ДатаГоденДо=дата("20"+Сред(cis,34,2),Сред(cis,36,2),Сред(cis,38,2));
											
											
											Добав=ВводВоборот.Товары.НайтиСтроки(Новый Структура("GTIN,Годендо,ЧасыДо",ДД.НаименованиеТовара,ДатаГоденДо,ЧасыДо));
											Если Добав.Количество()=0 Тогда
												Добав=ВводВоборот.Товары.Добавить();
												Добав.GTIN=ДД.НаименованиеТовара;
												Добав.ЧасыДо=ЧасыДо;
												Добав.Годендо=ДатаГоденДо;
												Добав.ДекларацияИлиСертификатСоответствия=РЕгистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(
														ТекущаяДата(),Новый Структура("Продукция",Добав.GTIN)).Документ;
												Добав.НомерСтрокиСвязи=Добав.НомерСтроки;
												Добав.КодТНВЭД=Добав.GTIN.КодТНВЭД;
												
												СтрокиДляДатаПроизводстваИНомераВСД=ДокументОснование.Товары.НайтиСтроки(Новый Структура("GTIN,ГоденДо,ДоЧаса",
												Добав.GTIN,Добав.Годендо,Добав.ЧасыДо));
												Если СтрокиДляДатаПроизводстваИНомераВСД.Количество()>0  Тогда
													Добав.НомерВСД=СтрокиДляДатаПроизводстваИНомераВСД[0].НомерВСД;
													Добав.ДатаПроизводства=СтрокиДляДатаПроизводстваИНомераВСД[0].ДатаПроизводства;
												КонецЕсли;
												
												
												//Добав.НомерВСД=
											Иначе
												Добав=Добав[0];
											КонецЕсли;
											ДД.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
											Добав.КоличествоКМ=Добав.КоличествоКМ+1;
											Добав.СпособВыпускаТоваров="";
											
										КонецЦикла;;
										
										КоличествоНеобходмо=0;               
										
										
							              
						Иначе
							НадоСпсать=Мин(КоличествоНеобходмо,99999);
							ДокумС=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
							ЗаполнитьЗначенияСвойств(ДокумС,ВводВоборот,,"Номер");
							ДокумС.Дата=ТекущаяДата();
							Для Сч=Смещение По Смещение+НадоСпсать-1 Цикл
									cis_=РезультатЗапроса[Сч].НомерКМ;
											               НомерКМ_Короткий=РезультатЗапроса[Сч].НомерКМ_Короткий;
										cis=НомерКМ_Короткий;
										Продукция=Неопределено;
											
											ДД=ВводВоборот.СерийныеНомера.Добавить();
											Если ЗначениеЗаполнено(Продукция) Тогда
												ДД.НаименованиеТовара=Продукция
											Иначе
												Если Сред(cis,1,2)="01" тогда
												
													ДД.GTIN=Сред(cis,3,14);
												Иначе
													ДД.GTIN=Сред(cis,1,14);
													
												КонецЕсли;
												ДД.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(ДД.GTIN));;
											КонецЕсли;
											ДД.cis=cis_;
											
											часыДо=Ложь;
											Если ВводВоборот.ТекущийПользователь.СайтыВходаВСистему.Наименование="Молоко" Тогда
												Попытка
													Если Сред(cis,32,4)="7003" Тогда	
													 	ШтрихКод=Сред(cis,1,45);
														ДатаГоденДо=дата("20"+Сред(cis,36,2),Сред(cis,38,2),Сред(cis,40,2),Сред(cis,42,2),Сред(cis,44,2),0);
														часыДо=Истина;
													ИначеЕсли Сред(cis,32,2)="17" Тогда
													 	ШтрихКод=Сред(cis,1,39);
														ДатаГоденДо=дата("20"+Сред(cis,34,2),Сред(cis,36,2),Сред(cis,38,2));
														
													ИначеЕсли СтрДлина(cis)<=30 Тогда
														ШтрихКод=Сред(cis,1,24);
														ДатаГоденДо=Дата(1,1,1);
													Иначе
														ШтрихКод=Сред(cis,1,31);
														ДатаГоденДо=Дата(1,1,1);
														
													КонецЕсли;
												Исключение
													ДатаГоденДо=Дата(1,1,1);
													
												КонецПопытки;
												
												
											Иначе
												ДатаГоденДо=Дата(1,1,1);
												
											КонецЕсли;
											
											
																			//ДатаГоденДо=дата("20"+Сред(cis,34,2),Сред(cis,36,2),Сред(cis,38,2));
											
											
											Добав=ВводВоборот.Товары.НайтиСтроки(Новый Структура("GTIN,Годендо,ЧасыДо",ДД.НаименованиеТовара,ДатаГоденДо,ЧасыДо));
											Если Добав.Количество()=0 Тогда
												Добав=ВводВоборот.Товары.Добавить();
												Добав.GTIN=ДД.НаименованиеТовара;
												Добав.ЧасыДо=ЧасыДо;
												Добав.Годендо=ДатаГоденДо;
												Добав.ДекларацияИлиСертификатСоответствия=РЕгистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(
														ТекущаяДата(),Новый Структура("Продукция",Добав.GTIN)).Документ;
												Добав.НомерСтрокиСвязи=Добав.НомерСтроки;
												Добав.КодТНВЭД=Добав.GTIN.КодТНВЭД;
												
												СтрокиДляДатаПроизводстваИНомераВСД=ДокументОснование.Товары.НайтиСтроки(Новый Структура("GTIN,ГоденДо,ДоЧаса",
												Добав.GTIN,Добав.Годендо,Добав.ЧасыДо));
												Если СтрокиДляДатаПроизводстваИНомераВСД.Количество()>0  Тогда
													Добав.НомерВСД=СтрокиДляДатаПроизводстваИНомераВСД[0].НомерВСД;
													Добав.ДатаПроизводства=СтрокиДляДатаПроизводстваИНомераВСД[0].ДатаПроизводства;
												КонецЕсли;
												
												
												//Добав.НомерВСД=
											Иначе
												Добав=Добав[0];
											КонецЕсли;
											ДД.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
											Добав.КоличествоКМ=Добав.КоличествоКМ+1;
											Добав.СпособВыпускаТоваров="";
											


							КонецЦикла;
							Смещение=Смещение+НадоСпсать;
							КоличествоНеобходмо=КоличествоНеобходмо-НадоСпсать;
							ДокумС.Записать();
							Сообщить("Создан документ "+Строка(ДокумС.Ссылка));
						КонецЕсли;
						
					КонецЦикла;
				Иначе
					
							Для Каждого Стр_1 Из Документоснование.КМИзAPI    Цикл
										cis=Стр_1.НомерКМ_Короткий;
										cis_=Стр_1.НомерКМ;
										
											Продукция=Неопределено;
											
											
											ДД=ВводВоборот.СерийныеНомера.Добавить();
											Если ЗначениеЗаполнено(Продукция) Тогда
												ДД.НаименованиеТовара=Продукция
											Иначе
												Если Сред(cis,1,2)="01" тогда
												
													ДД.GTIN=Сред(cis,3,14);
												Иначе
													ДД.GTIN=Сред(cis,1,14);
													
												КонецЕсли;
												ДД.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(ДД.GTIN));;
											КонецЕсли;
											ДД.cis=cis_;
											
											ЧасыДо=Ложь;
											Если ВводВоборот.ТекущийПользователь.СайтыВходаВСистему.Наименование="Молоко" Тогда
												Попытка
											  Если Сред(cis,32,4)="7003" Тогда	
												 	ДатаГоденДо=дата("20"+Сред(cis,36,2),Сред(cis,38,2),Сред(cis,40,2),Сред(cis,42,2),Сред(cis,44,2),0);
													часыДо=Истина;
												ИначеЕсли Сред(cis,32,2)="17" Тогда
													
												 	ДатаГоденДо=дата("20"+Сред(cis,34,2),Сред(cis,36,2),Сред(cis,38,2));
													
												Иначе
													ДатаГоденДо=Дата(1,1,1);
												
												КонецЕсли;
											Исключение
																								ДатаГоденДо=Дата(1,1,1);
													ДатаГоденДо=Дата(1,1,1);

												КонецПопытки;
												//ДатаГоденДо=дата("20"+Сред(cis,34,2),Сред(cis,36,2),Сред(cis,38,2));
											Иначе
												ДатаГоденДо=Дата(1,1,1);
												
											КонецЕсли;
											
											
											Добав=ВводВоборот.Товары.НайтиСтроки(Новый Структура("GTIN,Годендо,ЧасыДо",ДД.НаименованиеТовара,ДатаГоденДо,ЧасыДо));
											Если Добав.Количество()=0 Тогда
												Добав=ВводВоборот.Товары.Добавить();
												Добав.GTIN=ДД.НаименованиеТовара;
												Добав.Годендо=ДатаГоденДо;
												Добав.ЧасыДо=Часыдо;
												Добав.ДекларацияИлиСертификатСоответствия=РЕгистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(
														ТекущаяДата(),Новый Структура("Продукция",Добав.GTIN)).Документ;
												Добав.НомерСтрокиСвязи=Добав.НомерСтроки;
												Добав.КодТНВЭД=Добав.GTIN.КодТНВЭД;
												СтрокиДляДатаПроизводстваИНомераВСД=ДокументОснование.Товары.НайтиСтроки(Новый Структура("GTIN,ГоденДо,ДоЧаса",
												Добав.GTIN,Добав.Годендо,Добав.ЧасыДо));
												Если СтрокиДляДатаПроизводстваИНомераВСД.Количество()>0  Тогда
													Добав.НомерВСД=СтрокиДляДатаПроизводстваИНомераВСД[0].НомерВСД;
													Добав.ДатаПроизводства=СтрокиДляДатаПроизводстваИНомераВСД[0].ДатаПроизводства;
												КонецЕсли;
												
			Иначе
												Добав=Добав[0];
																			КонецЕсли;
											ДД.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
											Добав.КоличествоКМ=Добав.КоличествоКМ+1;
											Добав.СпособВыпускаТоваров="";
											
								
							КонецЦикла;;
					
					КонецЕсли;
		КонецЦикла
		
	КонецЕслИ;
	ВводВоборот.Дата=Текущаядата();
	
	ВводВоборот.Записать(РежимЗаписиДокумента.Запись);
	
	Для Каждого Стр_1 Из МассивЗаказов Цикл
		ПолучОб=Стр_1.ПолучитьОбъект();
		ПолучОб.ВводВОборот=ВводВоборот.Ссылка;
		ПолучОб.Записать();
	конеццикла;
	
							Сообщить("Создан документ "+Строка(ВводВоборот.Ссылка));
	Возврат 	ВводВоборот.Ссылка
Конецфункции


&НаСервере
Процедура ИспользоватьОтчетОбИспользованияДлМолокаПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ИспользоватьОтчетОбИспользованияДлМолока=ИспользоватьОтчетОбИспользованияДлМолока;
	РегДв.Записать(Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура ИспользоватьОтчетОбИспользованияДлМолокаПриИзменении(Элемент)
	ИспользоватьОтчетОбИспользованияДлМолокаПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура Поле1ПриИзменении1(Элемент)
	Поле1ПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НеЭмитироватьПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.НеЭмитировать=НеЭмитировать;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура НеЭмитироватьПриИзменении(Элемент)
	НеЭмитироватьПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитСтатусыПоВемОрганизациям(Команда) Экспорт
	// Вставить содержимое обработчика.
	СтарыйП=Пользователь;
	ВернутьВсехПользователей=ВернутьВсехПользователей();
	
	Для Каждого Стр_1 Из    ВернутьВсехПользователей Цикл
		Пользователь=Стр_1;
		ОбновитьСтатусыДокументов(Команда);
		
	Конеццикла;
	Пользователь=СтарыйП;
	
	
КонецПроцедуры



Функция ВернутьВсехПользователей()
	ТаблицаН=Новый ТаблицаЗначений;
	ТаблицаН.Колонки.Добавить("Пользователь");
	ТаблицаН.Колонки.Добавить("Организация");
	ТаблицаН.Колонки.Добавить("Сайт");
	Добав=ТаблицаН.Добавить();
	Добав.Пользователь=Пользователь;
	Добав.Организация=Пользователь.Организация;
	Добав.Сайт=Пользователь.СайтыВходаВСистему;
	
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи_ХамелеонЦРПТ.Ссылка,
		|	Пользователи_ХамелеонЦРПТ.СайтыВходаВСистему,
		|	Пользователи_ХамелеонЦРПТ.Организация
		|ИЗ
		|	Справочник.Пользователи_ХамелеонЦРПТ КАК Пользователи_ХамелеонЦРПТ
		|ГДЕ
		|	НЕ Пользователи_ХамелеонЦРПТ.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Если ТаблицаН.НайтиСтроки(Новый Структура("Организация,Сайт",ВыборкаДетальныеЗаписи.Организация,ВыборкаДетальныеЗаписи.СайтыВходаВСистему)).Количество()=0 Тогда
			
			Добав=ТаблицаН.Добавить();
			Добав.Пользователь=ВыборкаДетальныеЗаписи.Ссылка;
			Добав.Организация=ВыборкаДетальныеЗаписи.Организация;
			Добав.Сайт=ВыборкаДетальныеЗаписи.СайтыВходаВСистему;
							
			
		КонецЕсли;
		
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	МассивВернуть=ТаблицаН.ВыгрузитьКолонку("Пользователь");
	Возврат МассивВернуть
	
	
КонецФункции

&НаСервере
Процедура АвтматическийВводВОборотПослеОтчетаОбисползованииПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.АвтматическийВводВОборотПослеОтчетаОбисползовании=АвтматическийВводВОборотПослеОтчетаОбисползовании;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура АвтматическийВводВОборотПослеОтчетаОбисползованииПриИзменении(Элемент)
	АвтматическийВводВОборотПослеОтчетаОбисползованииПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Функция СоздатьОтгрузкуСАгрегациейНаСервере(МассивМ)
	// Вставить содержимое обработчика.
	Если МассивМ.Количество()>0 Тогда
		
	ДокумР=Документы.Отгрузка_ХамелеонЦРПТ.СоздатьДокумент();
	
				ЗаполнитьЗначенияСвойств(ДокумР,МассивМ[0],,"Номер,Дата,_Order_ID,ОшибкаОтправки,Статус");
				ДокумР.Дата=ТекущаяДата();
				ДокумР.ВидТоварооборота=Перечисления.ВидТоварооборота_ХамелеонЦРПТ.SELLING;
				
		Для Каждого ДокументОснование Из МассивМ Цикл		
			
			//Для Каждого Стр_1 Из ДокОснование.Товары Цикл
			//		Добав=ДокумР.Товары.Добавить();
			//		ЗаполнитьЗначенияСвойств(Добав,Стр_1);
					
			//	КонецЦикла;
				
			 			
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	НомераКМ_ХамелеонЦРПТ.НомерКМ,
					|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий
					//|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.НомерКороба КАК НомерКороба
					|ИЗ
					|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
					//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Марки КАК СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки
					//|		ПО НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий = СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Марка
					//|			И (СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.Проведен)
					|ГДЕ
					|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа";
				
				Запрос.УстановитьПараметр("ДокументЗаказа", ДокументОснование);
				
				РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗАпроса.Прямой);
				
				Если РезультатЗапроса.Количество()>0 Тогда 
					КоличествоНеобходмо=РезультатЗапроса.Количество();
					Смещение=0;
					Пока КоличествоНеобходмо>0 Цикл
						//Если КоличествоНеобходмо<=99999 Тогда
							Для Сч=Смещение По  КоличествоНеобходмо-1 Цикл
								
								GGG=РезультатЗапроса[Сч].НомерКМ_Короткий;
								cis=GGG;//Сред(СтрЗаменить(GGG,"%1D",""),1,38);
								
								//Если Сред(cis,32,3)<>"240" Тогда
									//cis=Сред(cis,1,31);
									
								//	cis=Сред(GGG,1,Найти(GGG,"%1D")-1);
								//	cis=РаскодироватьСтроку(cis,СпособКодированияСтроки.КодировкаURL);
//								КонецЕсли;
								
								//Продукция=Неопределено;
								//Для Каждого Стр_1П Из ППП Цикл
								//	Если ЗначениеЗаполнено(Стр_1П.Продукция) Тогда
								//		Продукция=Стр_1П.Продукция
								//	КонецЕсли;
								//	
								//	
								//Конеццикла;
								
								gtin=Сред(cis,3,14);
								
								Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",
								Число(gtin));
								//НомерКороба=РезультатЗапроса[Сч].НомерКороба;
								//Если ЗначениеЗаполнено(НомерКороба) тогда
								//	cis=НомерКороба;
								//КонецЕсли;
								
																	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
									// Данный фрагмент построен конструктором.
									// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
									
									Запрос = Новый Запрос;
									Запрос.Текст = 
										"ВЫБРАТЬ
										|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.НомерКороба  КАК НомерКороба
										|ИЗ
										|	Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Марки КАК СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки
										|ГДЕ
										|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.Проведен
										|	И СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Марка = &Марка";
									
									Запрос.УстановитьПараметр("Марка", cis);
									
									РезультатЗапроса_1 = Запрос.Выполнить();
									
									ВыборкаДетальныеЗаписи = РезультатЗапроса_1.Выбрать();
									
									НомерКороба=Неопределено;
									Если ВыборкаДетальныеЗаписи.Следующий() Тогда
										// Вставить обработку выборки ВыборкаДетальныеЗаписи
										НомерКороба=ВыборкаДетальныеЗаписи.НомерКороба;
									Конецесли;
									
									//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

								
								//НомерКороба=НомерКороба;
								Если ЗначениеЗаполнено(НомерКороба) тогда
									cis=НомерКороба;
								КонецЕсли;
								

								
								Если ДокумР.СерийныеНомера.Найти(cis,"cis")=Неопределено Тогда
								
									ДД=ДокумР.СерийныеНомера.Добавить();
									ДД.НаименованиеТовара=Продукция;
									ДД.GTIN=gtin;
									ДД.cis=cis;
									ДД.СерийныйНомер=дд.cis;
									Добав=ДокумР.Товары.Найти(ДД.НаименованиеТовара,"GTIN");
									Если Добав=Неопределено Тогда
										Добав=ДокумР.Товары.Добавить();
										Добав.GTIN=ДД.НаименованиеТовара;
										Добав.НомерСтрокиСвязи=Добав.НомерСтроки;
										Добав.КодТНВЭД=Добав.GTIN.КодТНВЭД;
									КонецЕсли;
									ДД.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
									Добав.КоличествоКМ=Добав.КоличествоКМ+1;
								//	Добав.СпособВыпускаТоваров="";
									
								КонецЕсли;
							КонецЦикла;;
							
							//КоличествоНеобходмо=0;               
												
					КонецЦикла;
				Иначе
					
						Для Каждого Стр_1 Из Документоснование.КМИзAPI    Цикл
								GGG=Стр_1.НомерКМ_Короткий;							
								cis=GGG;//Сред(СтрЗаменить(GGG,"%1D",""),1,38);
								
								//Если Сред(cis,32,3)<>"240" Тогда
									//cis=Сред(cis,1,31);
									
								//	cis=Сред(GGG,1,Найти(GGG,"%1D")-1);
								//	cis=РаскодироватьСтроку(cis,СпособКодированияСтроки.КодировкаURL);
//								КонецЕсли;
								
								//Продукция=Неопределено;
								//Для Каждого Стр_1П Из ППП Цикл
								//	Если ЗначениеЗаполнено(Стр_1П.Продукция) Тогда
								//		Продукция=Стр_1П.Продукция
								//	КонецЕсли;
								//	
								//	
								//Конеццикла;
								
								gtin=Сред(cis,3,14);
								
								Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",
								Число(gtin));
								
								
								
								
									//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
									// Данный фрагмент построен конструктором.
									// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
									
									Запрос = Новый Запрос;
									Запрос.Текст = 
										"ВЫБРАТЬ
										|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.НомерКороба  КАК НомерКороба
										|ИЗ
										|	Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Марки КАК СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки
										|ГДЕ
										|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Ссылка.Проведен
										|	И СозданиеНовогоШкНаКороба_ХамелеонЦРПТМарки.Марка = &Марка";
									
									Запрос.УстановитьПараметр("Марка", cis);
									
									РезультатЗапроса = Запрос.Выполнить();
									
									ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
									
									НомерКороба=Неопределено;
									Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
										// Вставить обработку выборки ВыборкаДетальныеЗаписи
										НомерКороба=ВыборкаДетальныеЗаписи.НомерКороба;
									КонецЦикла;
									
									//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

								
								//НомерКороба=НомерКороба;
								Если ЗначениеЗаполнено(НомерКороба) тогда
									cis=НомерКороба;
								КонецЕсли;
								
								
								Если ДокумР.СерийныеНомера.Найти(cis,"cis")=Неопределено Тогда
								
									ДД=ДокумР.СерийныеНомера.Добавить();
									ДД.НаименованиеТовара=Продукция;
									ДД.GTIN=gtin;
									ДД.cis=cis;
									ДД.СерийныйНомер=дд.cis;
									Добав=ДокумР.Товары.Найти(ДД.НаименованиеТовара,"GTIN");
									Если Добав=Неопределено Тогда
										Добав=ДокумР.Товары.Добавить();
										Добав.GTIN=ДД.НаименованиеТовара;
										Добав.НомерСтрокиСвязи=Добав.НомерСтроки;
										Добав.КодТНВЭД=Добав.GTIN.КодТНВЭД;
									КонецЕсли;
									ДД.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
									Добав.КоличествоКМ=Добав.КоличествоКМ+1;
									//Добав.СпособВыпускаТоваров="";
									
								КонецЕсли;
							КонецЦикла;;
							

						КонецЕсли;
						
						
			КонецЦикла;
			ДокумР.Записать();
			Возврат ДокумР.Ссылка
		
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СоздатьОтгрузкуСАгрегацией(Команда)
	
	МассивМ=Новый Массив;
	Для Каждого Стр_1 Из Элементы.ЗаказыТаблица.ВыделенныеСтроки Цикл
		
		МассивМ.Добавить(Стр_1);
		
	Конеццикла;
	
	Отгр=СоздатьОтгрузкуСАгрегациейНаСервере(МассивМ);
	Если ЗначениеЗаполнено(Отгр) тогда
		ОткрытьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаДокумента",
		Новый Структура("Ключ",Отгр));
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОбратныйАкцептНаСервере()
	// Вставить содержимое обработчика.
	Если Пользователь.СайтыВходаВСистему.Наименование<>"Фармацевтика"
		Тогда
		Возврат Неопределено;
	КонецЕсли;
	Докум=Документы.Приемка_ХамелеонЦРПТ.СоздатьДокумент();
	Докум.ТекущийПользователь=Пользователь;
	Докум.Организация=Докум.ТекущийПользователь.Организация;
	Докум.ОбратныйАкцепт=Истина;
	Докум.ТипДокументаЛекарства=Перечисления.ВидТоварооборота_ХамелеонЦРПТ.SELLING;
	Докум.Дата=Текущаядата();
	Докум.Записать();
	Возврат Докум.Ссылка
КонецФункции

&НаКлиенте
Процедура ОбратныйАкцепт(Команда)
	
	Докум=ОбратныйАкцептНаСервере();
	Если ЗначениеЗаполнено(докум) Тогда
		ОткрытьФорму("Документ.Приемка_ХамелеонЦРПТ.Форма.ФормаДокумента",
		Новый Структура("Ключ",Докум));
	Иначе
		ПоказатьПредупреждение(,"Обратный акцепт можно вводить только для лекарств");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОтветыПоОбратномуАкцепту(Команда)
	// Вставить содержимое обработчика.
	Thumbprint_1=Неопределено;
	Если НЕ НаКлиенте(Thumbprint_1) Тогда
		Возврат;
	КонецЕсли;	
		Попытка
			ЛицензияОпределить_Просто(Thumbprint_1);
		Исключение
		КонецПопытки;
		
	
		
	СРегистра="";
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
		АдресКАПИ=СтрЗаменить(Thumbprint_1.АдресКАПИ,"api.","");
		
			
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;   
			
				Куки="lk-auth-token="+Срегистра ;
				
				
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("start_from");	
	Чтен.ЗаписатьЗначение(0);
	Чтен.ЗаписатьИмяСвойства("count");
	Чтен.ЗаписатьЗначение(СколькоНаСтранице);
	Чтен.ЗаписатьИмяСвойства("filter");
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("doc_type");
	Чтен.ЗаписатьЗначение("607");
	
	
				       Чтен.ЗаписатьКонецОбъекта();
	
	//Чтен.ЗаписатьЗначение("{}");
				       Чтен.ЗаписатьКонецОбъекта();
				
				Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
	Тело=СтрЗаменить(Тело,Символы.ПС,"");
	Тело=СтрЗаменить(Тело,Символы.ВК,"");
	
				
//			Тело="{start_from: 0, count: 20, filter: {doc_type: ""601""}}";
			
	HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/income");
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
	HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
	//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
							
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				//ЧтениеJSON = Новый ЧтениеJSON;
			Страница=0;
			Тотал=1;
			Пока Страница*СколькоНаСтранице<=Тотал Цикл
				
 					страница=Страница+1;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Тотал=NNN.total;
				
				Если СколькоНаСтранице>NNN.documents.Количество() Тогда
					 Тотал=NNN.documents.Количество()
				КонецЕсли;
				
				did="";
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				docDate="";
				Для Каждого Стр Из  NNN.documents Цикл
					
												Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
														HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/download/"+Стр.document_id+"");
													Иначе
														HTTPЗапрос=Новый HTTPЗапрос("documents/download/"+Стр.document_id+"");
											/////			
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
												КонецЕсли;
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
											Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
											
											
Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
																							
											NNN_2_Ы=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
											
											
											Попытка
												Сайт_1=NNN_2_Ы.link;
											Исключение
												Продолжить;
											КонецПопытки;
											Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
											Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
											
											

																
											
														HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
								//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
								///Константин           
								//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
								Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
								Текст1=Ответ.ПолучитьТелоКакСтроку();
								
										КонецЕсли;													ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
												
												
												
												
																						
											
			//Попытка
				
				
				МассивПроудкций=Новый Массив;
				МассивКонтрагентов=Новый Массив;
				Попытка
					ДобавитьПриемку_ПринятьАкцепт(Текст1,Стр,МассивПроудкций,МассивКонтрагентов);
				Исключение
					   Инфо = ИнформацияОбОшибке();
    Сообщить("Описание='" + Инфо.Описание + "'");
    Сообщить("ИмяМодуля='" + Инфо.ИмяМодуля + "'");
    Сообщить("НомерСтроки=" + Инфо.НомерСтроки);
    Сообщить("ИсходнаяСтрока='" + Инфо.ИсходнаяСтрока + "'");

					Сообщить(Стр.document_id);
					Сообщить(Текст1);
				КонецПопытки;
					Для Каждого Стр_1 Из МассивПроудкций Цикл
						
									Чтен=Новый  ЗаписьJSON;
										Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
										Чтен.ЗаписатьНачалоОбъекта();
										Чтен.ЗаписатьИмяСвойства("start_from");	
										Чтен.ЗаписатьЗначение(0);
										Чтен.ЗаписатьИмяСвойства("count");
										Чтен.ЗаписатьЗначение(СколькоНаСтранице);
										Чтен.ЗаписатьИмяСвойства("filter");
										Чтен.ЗаписатьНачалоОбъекта();
										
										Чтен.ЗаписатьИмяСвойства("gtin");
										Чтен.ЗаписатьЗначение(Стр_1);
										
										
													       Чтен.ЗаписатьКонецОбъекта();
										
										//Чтен.ЗаписатьЗначение("{}");
													       Чтен.ЗаписатьКонецОбъекта();
													
													Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
										Тело=СтрЗаменить(Тело,Символы.ПС,"");
										Тело=СтрЗаменить(Тело,Символы.ВК,"");
										
						
						
								HTTPЗапрос=Новый HTTPЗапрос("api/v1/reestr/med_products/public/filter");
								          HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
								
												//	Иначе
												//	HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.document_id+"");
											/////			
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
												//	КонецЕсли;
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
											HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
											Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
											ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьПродукцию(Текст1);
											
											
												ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
											
																						
						
					Конеццикла;
					
					
					Для Каждого Стр_1 Из МассивКонтрагентов Цикл
						
									Чтен=Новый  ЗаписьJSON;
										Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
										Чтен.ЗаписатьНачалоОбъекта();
										Чтен.ЗаписатьИмяСвойства("start_from");	
										Чтен.ЗаписатьЗначение(0);
										Чтен.ЗаписатьИмяСвойства("count");
										Чтен.ЗаписатьЗначение(СколькоНаСтранице);
										Чтен.ЗаписатьИмяСвойства("filter");
										Чтен.ЗаписатьНачалоОбъекта();
										
										Чтен.ЗаписатьИмяСвойства("system_subj_id");
										Чтен.ЗаписатьЗначение(Стр_1);
										
										Чтен.ЗаписатьИмяСвойства("reg_entity_type");
										Чтен.ЗаписатьЗначение("1");
										
													       Чтен.ЗаписатьКонецОбъекта();
										
										//Чтен.ЗаписатьЗначение("{}");
													       Чтен.ЗаписатьКонецОбъекта();
													
													Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
										Тело=СтрЗаменить(Тело,Символы.ПС,"");
										Тело=СтрЗаменить(Тело,Символы.ВК,"");
										
						
						
								HTTPЗапрос=Новый HTTPЗапрос("api/v1/reestr_partners/filter");
								          HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
								
												//	Иначе
												//	HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.document_id+"");
											/////			
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
												//	КонецЕсли;
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
											HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
											Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
											ЗаписатьКонтрагента(Текст1);
											
											
												ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
											
																						
						
					Конеццикла;

														  //ОработатьДокументы(Стр,Результат,Ошибка)

														
														//ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
																									//Исключение
											//	КонецПопытки;
											 Конеццикла;

					
								//Конеццикла;
				
				Если Страница*СколькоНаСтранице>Тотал Тогда
					Прервать;
				КонецЕсли;
				
			 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("start_from");	
	Чтен.ЗаписатьЗначение(Страница*СколькоНаСтранице);
	Чтен.ЗаписатьИмяСвойства("count");
	Чтен.ЗаписатьЗначение(СколькоНаСтранице);
	Чтен.ЗаписатьИмяСвойства("filter");
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("doc_type");
	Чтен.ЗаписатьЗначение("607");
	           Чтен.ЗаписатьКонецОбъекта();
	
	//Чтен.ЗаписатьЗначение("{}");
				       Чтен.ЗаписатьКонецОбъекта();
				
				Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
	Тело=СтрЗаменить(Тело,Символы.ПС,"");
	Тело=СтрЗаменить(Тело,Символы.ВК,"");
	
		
				HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/income");
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
	HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
	//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
							
	
	

	Если Ответ.КодСостояния<>202 И Ответ.КодСостояния<>200  Тогда
				Сообщить("Не удалось загрузить приходы с ЦРПТ, отсутствует доступ.");
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Возврат;
	КонецЕсли;
	
	Конеццикла;	
				
				
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
	Иначе
					Попытка
						//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							
						Исключение
							Попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								
								Если Найти(Текст1,"Billing contract")>0 И
									Найти(Текст1,"not signed by participant")>0 Тогда
									Сообщить("Договор биллинга для выбранной группы товаров не подписан участником");
								КонецЕсли;
								
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	Элементы.Приемкасписок.Обновить();
	
КонецПроцедуры

Процедура   ДобавитьПриемку_ПринятьАкцепт(Текст1,Стр,МассивПроудцкий,МассивКонтрагентов);
									 												          Чтен=Новый ЧтениеXML;
										    Чтен.УстановитьСтроку(Текст1);
	ОтветСтруктура = ФабрикаXDTO.ПрочитатьXML(Чтен).accept_notification;	
	
	
	МасссивПодвтержденных=Новый Массив;
	Макри=Новый списокЗначений;
	
	
		Если ОтветСтруктура.order_details.Свойства().Получить("sgtin")=Неопределено Тогда
	
	        
		Если ТипЗнч(ОтветСтруктура.order_details.sscc)<>Тип("СписокXDTO") тогда
	
	   Стр_1=ОтветСтруктура.order_details.sscc;
	
		//Добав=Документприемки.СерийныеНомера.Добавить();
		//Если Стр_1.Свойства().Получить("sgtin")=Неопределено Тогда
			
			//Сообщить(Текст1);
			
			// Сообщить("Есть упаковки");
			//Сообщить(Стр_1.sscc_detail.sscc);
			cis=Стр_1;
			
			НаименованиеТовара="";			
		  //МасссивПодвтержденных.Добавить("GTIN,cis",НаименованиеТовара,cis);
		  Макри.Добавить(cis);
		Иначе
			
			
			Для Каждого Стр_1 Из ОтветСтруктура.order_details.sscc Цикл
			cis=Стр_1;
			НаименованиеТовара="";
		  //МасссивПодвтержденных.Добавить(Новый структура("GTIN,cis",НаименованиеТовара,cis));
		  Макри.Добавить(cis);
			Конеццикла;
			//Нстр=ДокументПриемки.Товары.Найти(Добав.НаименованиеТовара,"GTIN");
		КонецЕсли;
		
Иначе
	Если ТипЗнч(ОтветСтруктура.order_details.sgtin)<>Тип("СписокXDTO") тогда
	
	   Стр_1=ОтветСтруктура.order_details.sgtin;
	
		//Добав=Документприемки.СерийныеНомера.Добавить();
		//Если Стр_1.Свойства().Получить("sgtin")=Неопределено Тогда
			
			//Сообщить(Текст1);
			
			// Сообщить("Есть упаковки");
			//Сообщить(Стр_1.sscc_detail.sscc);
			cis=Стр_1;
			
			НаименованиеТовара="";			
		  //МасссивПодвтержденных.Добавить(Новый структура("GTIN,cis",НаименованиеТовара,cis));
		  Макри.Добавить(cis);
		Иначе
			
			
			Для Каждого Стр_1 Из ОтветСтруктура.order_details.sgtin Цикл
			cis=Стр_1;
			НаименованиеТовара="";
		  //МасссивПодвтержденных.Добавить(Новый структура("GTIN,cis",НаименованиеТовара,cis));
		  Макри.Добавить(cis);
			Конеццикла;
			//Нстр=ДокументПриемки.Товары.Найти(Добав.НаименованиеТовара,"GTIN");
		КонецЕсли;

	
КонецЕсли;


ТаблицаДОкументов=Новый Массив;
//Для Каждого Стр_1 Из МасссивПодвтержденных Цикл
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Приемка_ХамелеонЦРПТМарки.НомерСтроки КАК НомерСтроки,
		|	Приемка_ХамелеонЦРПТМарки.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Приемка_ХамелеонЦРПТ.Марки КАК Приемка_ХамелеонЦРПТМарки
		|ГДЕ
		|	Приемка_ХамелеонЦРПТМарки.Ссылка.Статус = &Статус
		|	И Приемка_ХамелеонЦРПТМарки.Ссылка.Организация = &Организация
		|	И Приемка_ХамелеонЦРПТМарки.Марка В(&Марка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Приемка_ХамелеонЦРПТМарки.Ссылка,
		|	Приемка_ХамелеонЦРПТМарки.НомерСтроки
		|ИТОГИ ПО
		|	Ссылка,
		|	НомерСтроки";
	
	//Макри=Стр_1.cis;
	Запрос.УстановитьПараметр("Марка", Макри);
	Запрос.УстановитьПараметр("Организация", Пользователь.Организация);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		
		Докум=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ВыборкаС=ВыборкаДетальныеЗаписи.Выбрать(ОбходрезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаС.Следующий() Цикл
			Докум.Марки[ВыборкаС.НомерСтроки-1].ПринятОбратныйАкцепт=Истина;
		Конеццикла;
		Докум.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан;
		Докум.Записать(РежимЗаписиДокумента.Запись);
		Докум.ПометкаУдаления=Ложь;
		Докум.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
//Конеццикла;


КонецПроцедуры



&НаСервере
Процедура ПослеОтправкиОтчетовВСУЗПодписатьПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ПослеОтправкиОтчетовВСУЗПодписать=ПослеОтправкиОтчетовВСУЗПодписать;
	РегДв.Записать(Истина);
КонецПроцедуры


&НаКлиенте
Процедура ПослеОтправкиОтчетовВСУЗПодписатьПриИзменении(Элемент)
	ПослеОтправкиОтчетовВСУЗПодписатьПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Процедура ПолучитьТокенНаСервереПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ПолучитьТокенНаСервере=ПолучитьТокенНаСервере;
	РегДв.Записать(Истина);
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьТокенНаСервереПриИзменении(Элемент)
	ПолучитьТокенНаСервереПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура СброситьПодключение(Команда)
	// Вставить содержимое обработчика.
	Thumbprint_1=ПолучитьИзПользователя();	
	ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);		
КонецПроцедуры


&НаКлиенте
Процедура ОчиститьПриемку(Команда)
	// Вставить содержимое обработчика.
	ОчиститьПриемкуНаСервере();
	ЗагрузитьОтветыПоОтгрузкам(Команда);
КонецПроцедуры


&НаСервере
Процедура ОчиститьПриемкуНаСервере()
	// Вставить содержимое обработчика.
	
	Если ЗначениеЗАполнено(Пользователь) тогда
		Регдв=РегистрыСведений.ПриемкаПоОрганизациям_ХамелеонЦРПТ.СоздатьНаборЗаписей();
		Регдв.Отбор.Организация.Установить(Пользователь.Организация);
		РегДв.Отбор.СайтВходаВСистему.Установить(Пользователь.СайтыВходаВСистему);
		РегДв.Записать(Истина);
	КонецЕслИ;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВЭДОТХЦ(Команда)
	// Вставить содержимое обработчика.
		МассивНакладных=Новый Массив;
	
	Для Каждого Стр_1 Из Элементы.Отгрузка_Список.ВыделенныеСтроки Цикл
		МассивНакладных.Добавить(Стр_1);
	Конеццикла;
	Если МассивНакладных.Количество()>0 тогда
		Форм=ПолучитьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаДокумента",
		Новый структура("Ключ",МассивНакладных[0]));
		Форм.ОтправитьВЭДОТХЦ_Массив(МассивНакладных);
	КонецЕсли;
	Элементы.Отгрузка_Список.Обновить();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьСтатусыНаСервереПоНакладным(ПолучитьСписокНакладных,ОбработалиВТХЦ,ПолучитьПричинуОтказа)
	
	Для Каждого Стр_1 Из ПолучитьСписокНакладных Цикл
		НайтиДокум=Документы.Отгрузка_ХамелеонЦРПТ.НайтиПоРеквизиту("Order_ID_УПД",Стр_1.ИдентификаторДокументооборота);
		
		Если ЗначениеЗаполнено(НайтиДокум) Тогда
			ОбработалиВТХЦ.Добавить(НайтиДокум);
			СтатусДокумента=Статус(Стр_1.Статус);
			Если НайтиДокум.СтатусУПД<>СтатусДокумента Тогда
				Полоб=НайтиДокум.ПолучитьОбъект();
				Полоб.СтатусУПД=СтатусДокумента;
				Если ПолОб.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан
					ИЛИ ПолОб.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Уточнён Тогда
					Полоб.Записать(РежимЗаписиДокумента.Проведение);
				ИначеЕсли ПолОб.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отклонен
					ИЛИ ПолОб.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отозван
					Тогда
					Если Полоб.Проведен Тогда
						Полоб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Иначе
						Полоб.Записать();
					КонецЕсли;	
				Иначе
					Полоб.Записать();
				КонецЕсли;
			КонецЕсли;
			
			Если (СтатусДокумента=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отклонен
					ИЛИ СтатусДокумента=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отозван
				) И Не ЗначениеЗаполнено(НайтиДокум.ОшибкаОтправки) Тогда

					ПолучитьПричинуОтказа.Добавить(Новый Структура("Ссыла,Идентификатор",НайтиДокум.Ссылка,
					Стр_1.ИдентификаторДокументооборота));
				КонецЕсли;
			
			
		КонецЕсли;
		
		
		
	Конеццикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Статус(Знач НомерСтатуса)
	
	// 'Sending', 'CompletedWithWarning', 'Succeed', 'Fail', 'WaitingForAnswer', 'ResignWaiting', 'Suspended', 'Cancelled', 'WaitingForCancellation'
	
	НомерСтатуса=Число(НомерСтатуса);
	Если НомерСтатуса = 0 Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отправлен;//"Документооборот в процессе выполнения";
	ИначеЕсли НомерСтатуса = 1 Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Уточнён;//"Документооборот завершен с уточнениями или предупреждениями";
	ИначеЕсли НомерСтатуса = 2 Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан//"Документооборот успешно завершен";
	ИначеЕсли НомерСтатуса = 3 Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отклонен//"Документооборот завершен с ошибкой";
	ИначеЕсли НомерСтатуса = 4 Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.ОжидаетсяОтправка//"Ожидание ответа";
	ИначеЕсли НомерСтатуса = 5 Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.ТребуетсяПодпись//"Документ требует переподпись";
	ИначеЕсли НомерСтатуса = 6 Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.ОжидаетсяОтправка//"Документооборот приостановлен";
	ИначеЕсли НомерСтатуса = 7 Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отозван//"Аннулирован";
	ИначеЕсли НомерСтатуса = 8 Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отозван//"Ожидает аннулирования";
	КонецЕсли; 
		
	Возврат НомерСтатуса;
	
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьИдЭд(Пользователь)
	Возврат Пользователь.Организация.ИД_ЭДО
КонецФункции


&НаСервереБезКонтекста
Функция ТелоПолучитьAutoSendReceive(Thumbprint_1,СерийныйНомер,УникальныйИД)
	
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("ReglamentCommandResults");
	//Чтение.ЗаписатьАтрибут("xmlns","http://api-invoice.taxcom.ru/meta");
	Чтение.ЗаписатьАтрибут("xmlns:xs","http://www.w3.org/2001/XMLSchema");
	Чтение.ЗаписатьАтрибут("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
	
	Чтение.ЗаписатьНачалоЭлемента("Results");
	Чтение.ЗаписатьАтрибут("xsi:type","ArrayOfReglamentCommandBase");
	
	Чтение.ЗаписатьНачалоЭлемента("ReglamentCommandBase");
	Чтение.ЗаписатьАтрибут("xsi:type","ReglamentSignSessionedCommand");
	
	Чтение.ЗаписатьНачалоЭлемента("Certificates");
	
	Чтение.ЗаписатьНачалоЭлемента("CertificateData");
	
	Чтение.ЗаписатьНачалоЭлемента("Thumbprint");
	Чтение.ЗаписатьТекст(Thumbprint_1.Thumbprint_1);
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Чтение.ЗаписатьНачалоЭлемента("SerialNumber");
	Чтение.ЗаписатьТекст(Врег(СерийныйНомер));
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	
	
	УникальныйИ=xmlString(Новый УникальныйИдентификатор());
	Чтение.ЗаписатьНачалоЭлемента("CryptoMarker");
	Чтение.ЗаписатьТекст(УникальныйИ);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьКонецЭлемента();
	Возврат Чтение.Закрыть();
	
	
	
	
Конецфункции


&НаСервереБезКонтекста
Функция ПрочитатьXMLФайл(СодержимоеФайла, ПространствоИмен, ИмяТипа) Экспорт
	
	ПозицияПространстваИмен = Найти(СодержимоеФайла, ПространствоИмен);
    
    // Даже если XML валиден, фабрика не сможет его прочитать без пространства имен.
    Если ПозицияПространстваИмен = 0 Тогда
        
        ПозицияСхемы = Найти(СодержимоеФайла, "http://www.w3.org/2001/XMLSchema");
        
        Если ПозицияСхемы = 0 Тогда 
            СтрокаПространстваИмен = 
                "xmlns="""+ПространствоИмен+""" xmlns:xs="""+"http://www.w3.org/2001/XMLSchema"+""" xmlns:xsi="""+"http://www.w3.org/2001/XMLSchema-instance"+""""
                ;
        Иначе
             СтрокаПространстваИмен = "xmlns="""+ПространствоИмен+"""";
        КонецЕсли;
            
        ПозицияЭлемента = Найти(СодержимоеФайла, ИмяТипа);
		ДлинаИмени = СтрДлина(ИмяТипа);
            
        СодержимоеФайла = Лев(СодержимоеФайла, ПозицияЭлемента + ДлинаИмени - 1) 
			+ " "
            + СтрокаПространстваИмен 
			+ " "
            + Сред(СодержимоеФайла, ПозицияЭлемента + ДлинаИмени);
        
    КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СодержимоеФайла);
	
	//Пакет = НоваяФабрикаXDTO().Пакеты.Получить(ПространствоИмен);
	//ТипОбъекта = Пакет.КорневыеСвойства.Получить(ИмяТипа).Тип;
	
	Возврат ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьОтветнасервереПОAutoSendReceive(ОтветAutoSendReceive)
	
	
	ОбъектОтвета = ПрочитатьXMLФайл(ОтветAutoSendReceive, "http://api-invoice.taxcom.ru/AutoSendRecieve", "ReglamentCommands");
	
	Если ОбъектОтвета.Commands.Свойства().Получить("ReglamentCommandBase") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеФайлов = Новый Массив;
	
	Если ТипЗнч(ОбъектОтвета.Commands.ReglamentCommandBase)=Тип("СписокXDTO") Тогда
		
		Для Каждого ТекущийРегламент Из ОбъектОтвета.Commands.ReglamentCommandBase Цикл
			Если ТекущийРегламент.Свойства().Получить("PackageImages") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ТекущийРегламент.PackageImages.PackageImageData)=Тип("СписокXDTO") тогда
				Для Каждого PackageImageData Из ТекущийРегламент.PackageImages.PackageImageData Цикл
					ДанныеФайла = PackageImageData.Image;
					//ДанныеФайлаСтрокой = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(Base64Значение(ДанныеФайла));
					ДанныеФайлаСтрокой = ДанныеФайла;
					
					ИдентификаторПакета = PackageImageData.PackageId;
					ИдентификаторДанныхПакета = PackageImageData.PackageImageId;
					Ключ = ТекущийРегламент.Key;
					
					ДанныеФайлов.Добавить(Новый Структура("ДанныеФайлаСтрокой, ИдентификаторПакета, ИдентификаторДанныхПакета, Ключ",
														ДанныеФайлаСтрокой,
														ИдентификаторПакета,
														ИдентификаторДанныхПакета,
														Ключ));
				КонецЦикла;
			Иначе
				PackageImageData=ТекущийРегламент.PackageImages.PackageImageData;
					ДанныеФайла = PackageImageData.Image;
					//ДанныеФайлаСтрокой = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(Base64Значение(ДанныеФайла));
					ДанныеФайлаСтрокой = ДанныеФайла;
					
					ИдентификаторПакета = PackageImageData.PackageId;
					ИдентификаторДанныхПакета = PackageImageData.PackageImageId;
					Ключ = ТекущийРегламент.Key;
					
					ДанныеФайлов.Добавить(Новый Структура("ДанныеФайлаСтрокой, ИдентификаторПакета, ИдентификаторДанныхПакета, Ключ",
														ДанныеФайлаСтрокой,
														ИдентификаторПакета,
														ИдентификаторДанныхПакета,
														Ключ));
													
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТекущийРегламент=ОбъектОтвета.Commands.ReglamentCommandBase;
		Если ТекущийРегламент.Свойства().Получить("PackageImages") = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если ТипЗнч(ТекущийРегламент.PackageImages.PackageImageData)=Тип("ОбъектXDTO") Тогда
			PackageImageData=ТекущийРегламент.PackageImages.PackageImageData;
				ДанныеФайла = PackageImageData.Image;
				ДанныеФайлаСтрокой = Base64Строка(ДанныеФайла);
				
				ИдентификаторПакета = PackageImageData.PackageId;
				ИдентификаторДанныхПакета = PackageImageData.PackageImageId;
				Ключ = ТекущийРегламент.Key;
				
				ДанныеФайлов.Добавить(Новый Структура("ДанныеФайлаСтрокой, ИдентификаторПакета, ИдентификаторДанныхПакета, Ключ",
													ДанныеФайлаСтрокой,
													ИдентификаторПакета,
													ИдентификаторДанныхПакета,
													Ключ));
		Иначе
		
			Для Каждого PackageImageData Из ТекущийРегламент.PackageImages.PackageImageData Цикл
				ДанныеФайла = PackageImageData.Image;
				ДанныеФайлаСтрокой = Base64Строка(ДанныеФайла);
				
				ИдентификаторПакета = PackageImageData.PackageId;
				ИдентификаторДанныхПакета = PackageImageData.PackageImageId;
				Ключ = ТекущийРегламент.Key;
				
				ДанныеФайлов.Добавить(Новый Структура("ДанныеФайлаСтрокой, ИдентификаторПакета, ИдентификаторДанныхПакета, Ключ",
													ДанныеФайлаСтрокой,
													ИдентификаторПакета,
													ИдентификаторДанныхПакета,
													Ключ));
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	
	Возврат ДанныеФайлов;	
	
	
КонецФункции


Функция ЗаполнитьТекстКриптооперацииНаСервере(МаркерРасшифрованный, ОтветAutoSendRecieve, ДанныеПодписиСтрокой)
	
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("ReglamentCommandResults");
	//Чтение.ЗаписатьАтрибут("xmlns","http://api-invoice.taxcom.ru/meta");
	Чтение.ЗаписатьАтрибут("xmlns:xs","http://www.w3.org/2001/XMLSchema");
	Чтение.ЗаписатьАтрибут("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
	
	Чтение.ЗаписатьНачалоЭлемента("Results");
	Чтение.ЗаписатьАтрибут("xsi:type","ArrayOfReglamentCommandResultBase");
	
	Чтение.ЗаписатьНачалоЭлемента("ReglamentCommandResultBase");
	Чтение.ЗаписатьАтрибут("xsi:type","SignSessionedResults");
	
	Чтение.ЗаписатьНачалоЭлемента("Results");
	
	Чтение.ЗаписатьНачалоЭлемента("SignResult");
	Чтение.ЗаписатьАтрибут("xsi:type","SignResultV2");
	
	
	Чтение.ЗаписатьНачалоЭлемента("PackageId");
	Чтение.ЗаписатьТекст(ОтветAutoSendRecieve.ИдентификаторПакета);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("PackageImageId");
	Чтение.ЗаписатьТекст(ОтветAutoSendRecieve.ИдентификаторДанныхПакета);
	Чтение.ЗаписатьКонецЭлемента();
	
	Если ЗначениеЗаполнено(ДанныеПодписиСтрокой) Тогда
		Чтение.ЗаписатьНачалоЭлемента("Signature");
		Чтение.ЗаписатьТекст(ДанныеПодписиСтрокой);
		Чтение.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	Чтение.ЗаписатьНачалоЭлемента("Success");
	Чтение.ЗаписатьТекст("true");
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("Key");
	Чтение.ЗаписатьТекст(ОтветAutoSendRecieve.Ключ);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("CryptoMarker");
	Чтение.ЗаписатьТекст(МаркерРасшифрованный);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Возврат Чтение.Закрыть();
	
	
	
	//
	//
	//Пакет = НоваяФабрикаXDTO().Пакеты.Получить("http://api-invoice.taxcom.ru/AutoSendRecieve");
	//ТипКриптооперации = Пакет.КорневыеСвойства.Получить("ReglamentCommandResults").Тип;
	//ОбъектКриптооперации = НоваяФабрикаXDTO().Создать(ТипКриптооперации);
	//
	//ТипРезультата = Пакет.Получить("SignSessionedResults");
	//ОбъектРезультата = НоваяФабрикаXDTO().Создать(ТипРезультата);	
	//ОбъектРезультата.Results = НоваяФабрикаXDTO().Создать(Пакет.Получить("ArrayOfSignResult"));
	//
	//ТипРезультатаПодписания = Пакет.Получить("SignResultV2");
	//РезультатПодписания = НоваяФабрикаXDTO().Создать(ТипРезультатаПодписания);
	//РезультатПодписания.PackageId = ОтветAutoSendRecieve.ИдентификаторПакета;
	//РезультатПодписания.PackageImageId = ОтветAutoSendRecieve.ИдентификаторДанныхПакета;
	//РезультатПодписания.Signature = ДанныеПодписиСтрокой;
	//РезультатПодписания.Success = Истина;
	//
	//ОбъектРезультата.Results.SignResult.Добавить(РезультатПодписания);
	//ОбъектРезультата.Key = ОтветAutoSendRecieve.Ключ;
	//
	//ОбъектКриптооперации.Results = НоваяФабрикаXDTO().Создать(Пакет.Получить("ArrayOfReglamentCommandResultBase"));
	//ОбъектКриптооперации.Results.ReglamentCommandResultBase.Добавить(ОбъектРезультата);
	//ОбъектКриптооперации.CryptoMarker = МаркерРасшифрованный;
	//
	////ЗаписьXML = Новый ЗаписьXML;
	////ЗаписьXML.ЗаписатьОбъявлениеXML();
	////НоваяФабрикаXDTO().ЗаписатьXML(ЗаписьXML, ОбъектКриптооперации);
	////ТекстКриптооперации = ЗаписьXML.Закрыть();
	//
	//ТекстКриптооперации = СтрокаXMLБезПространстваИмен(
	//	ОбъектКриптооперации, "http://api-invoice.taxcom.ru/AutoSendRecieve", "ReglamentCommandResults");
	////ТекстКриптооперации = СтрЗаменить(ТекстКриптооперации,"	", "    ");
	//Возврат ТекстКриптооперации;
	//
КонецФункции


&НаКлиенте
Процедура ЗагрузитьИзЭДОТХЦ(Команда) Экспорт
	// Вставить содержимое обработчика.
Thumbprint_1=ПолучитьИзПользователя();	
	
	СайтДляПодключенияПоТакскму=Thumbprint_1.ТХЦ;
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
		Прокси=Новый ИнтернетПрокси;
		Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
		HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	Иначе
				
		HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	КонецЕсли;
	
	СерийныйНомер="";
	Маркер=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОТХЦ(Thumbprint_1,ПолучитьИдЭд(Пользователь),HTTPСервисЗапрос_ТХЦ,СерийныйНомер);
	Если  ЗначениеЗаполнено(Маркер) тогда
		
		Если Текущаядата()-ВремяAutoSendReceive>60 Тогда
			
			Компонента = Новый COMОбъект("CryptoAX.Encryptor");
			УникальныйИ="";
			ТелоПолучитьAutoSendReceive=ТелоПолучитьAutoSendReceive(Thumbprint_1,СерийныйНомер,УникальныйИ);
			
			//ЗапросСпискаДокументов = Новый HTTPЗапрос;
			АдресРесурса = "API/AutoSendReceive";
			
			Запрос = Новый HTTPЗапрос;
			Запрос.АдресРесурса = АдресРесурса;
			Запрос.Заголовки.Вставить("Integrator-Id", "Kartoteka_9AFE5408-C930-47FA-9CE4-FAE615EED09E");
			Запрос.Заголовки.Вставить("Assistant-Key", Маркер);
			Запрос.Заголовки.Вставить("API-Version", "1.8.0");
			Запрос.Заголовки.Вставить("Content-Type", "text/xml;charset=UTF-8");
			Запрос.УстановитьТелоИзСтроки(ТелоПолучитьAutoSendReceive);
			Ответ = HTTPСервисЗапрос_ТХЦ.ОтправитьДляОбработки(Запрос);
			ОтветAutoSendRecieve=ПолучитьОтветнасервереПОAutoSendReceive(Ответ.ПолучитьТелоКакСтроку());
			
			Если ОтветAutoSendRecieve <> Неопределено Тогда
				Для Каждого ДанныеФайла Из ОтветAutoSendRecieve Цикл
				//	Если Не ПустаяСтрока(ДанныеФайла.ДанныеФайлаСтрокой) Тогда
						Если ПустаяСтрока(ДанныеФайла.ДанныеФайлаСтрокой) Тогда
							ДанныеПодписиСтрокой=Неопределено;
						Иначе
							//ДанныеПодписиСтрокой=Компонента.MrSignByHash(
							//base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ДанныеФайла.ДанныеФайлаСтрокой,КодировкаТекста.ANSI,Ложь)),
							//Thumbprint_1.Thumbprint_1);
							ДанныеПодписиСтрокой=Компонента.MrSignByHash(
							ДанныеФайла.ДанныеФайлаСтрокой,
							Thumbprint_1.Thumbprint_1);
							
						КонецЕсли;
						
						//ДанныеПодписиСтрокой = БиблиотекаКриптографии().SignHash(ДанныеФайла.ДанныеФайлаСтрокой, 
						//ПараметрыСоединения.ОтпечатокСертификата, ПараметрыСоединения.ПарольСертификата);
						
						ТекстКриптооперации = ЗаполнитьТекстКриптооперацииНаСервере(Маркер, ДанныеФайла, ДанныеПодписиСтрокой);
						АдресРесурса = "API/AutoSendReceive";
						
						Запрос = Новый HTTPЗапрос;
						Запрос.АдресРесурса = АдресРесурса;
						Запрос.Заголовки.Вставить("Integrator-Id", "Kartoteka_9AFE5408-C930-47FA-9CE4-FAE615EED09E");
						Запрос.Заголовки.Вставить("Assistant-Key", Маркер);
						Запрос.Заголовки.Вставить("API-Version", "1.8.0");
						Запрос.Заголовки.Вставить("Content-Type", "text/xml;charset=UTF-8");
						Запрос.УстановитьТелоИзСтроки(ТекстКриптооперации);
						Ответ = HTTPСервисЗапрос_ТХЦ.ОтправитьДляОбработки(Запрос);
						Результ=ПолучитьОтветнасервереПОAutoSendReceive(Ответ.ПолучитьТелоКакСтроку());
						
						
						
						//Результат = ОтправитьВДоклайнзAutoSendRecieve("API/AutoSendReceive", ПараметрыСоединения, ТекстКриптооперации);
					//КонецЕсли;
				КонецЦикла; 
			КонецЕсли;
			ВремяAutoSendReceive=Текущаядата();
		КонецЕсли;	
			
		
		ПолучитьСписокНакладных=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.СписокВходящихДокументов(Thumbprint_1,Маркер,КачатьСЭДОЗаПоследниеДни);
		Если  ПолучитьСписокНакладных.Количество()>0 Тогда
			
			
			ОбработатьПолученныеНаСервере(ПолучитьСписокНакладных);			
			ЗагрузитьПолученные(HTTPСервисЗапрос_ТХЦ,Маркер);
			//ПолучитьПричинуОтказа=Новый Массив;
			
			//ОбработатьСтатусыНаСервереПоНакладным_Приемка();
			
		КонецЕсли;
			//Запрос.УстановитьТелоИзДвоичныхДанных(ПакетЭДО);
		//Попытка 
			//Ответ = HTTPСервисЗапрос_ТХЦ.Получить(Запрос);
		//Исключение
			
			//Продолжить;
		//КонецПопытки;		
		
	КонецЕсли;
		
КонецПроцедуры


&НаКлиенте
Функция ДанныеДокументооборота(ИдентификаторДокументооборота, HTTPСервисЗапрос_ТХЦ,Маркер) Экспорт 
	
	
	ЗапросСпискаДокументов = Новый HTTPЗапрос;
	ЗапросСпискаДокументов.АдресРесурса = "API/Get/"+ИдентификаторДокументооборота;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Integrator-Id", "Kartoteka_9AFE5408-C930-47FA-9CE4-FAE615EED09E");
	Заголовки.Вставить("Assistant-Key", Маркер);
	ЗапросСпискаДокументов.Заголовки = Заголовки;
	
	Ответ = HTTPСервисЗапрос_ТХЦ.Получить(ЗапросСпискаДокументов);
	Если Ответ.КодСостояния=200 Тогда
		Возврат Ответ.ПолучитьТелоКакДвоичныеДанные();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	//АдресРесурса = "API/Get/" + ИдентификаторДокументооборота;
	//ДанныеДокументооборота="";
	//ДанныеДокументооборота = ПолучитьИзДоклайнз(АдресРесурса, ПараметрыСоединения, Истина, Ложь, ТекстОшибки);
	//Возврат ДанныеДокументооборота;
	
КонецФункции


Функция РеквизитыЭлектронногоДокумента_Ошибка(ПутьКДокументу, СообщениеОбОшибке = "") Экспорт
	
	Если ЭтоАдресВременногоХранилища(ПутьКДокументу) Тогда 
		ПутьКДокументу = ПолучитьИзВременногоХранилища(ПутьКДокументу);
	КонецЕсли;
	
	ОшибкаВернуть="";
	Попытка
		
			Если ТипЗнч(ПутьКДокументу) = Тип("ДвоичныеДанные") Тогда
			
			СтрокаКодировка=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(
			ПутьКДокументу);
			//Поток = ПутьКДокументу.ОткрытьПотокДляЧтения();
		Иначе
			ПутьКДокументу_1=Новый ДвоичныеДанные(ПутьКДокументу);
			СтрокаКодировка=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(
			ПутьКДокументу_1);
			
			
			//Поток = ФайловыеПотоки.ОткрытьДляЧтения(ПутьКДокументу);
		КонецЕсли;

		
		//Если ТипЗнч(ПутьКДокументу) = Тип("ДвоичныеДанные") Тогда
		//	Поток = ПутьКДокументу.ОткрытьПотокДляЧтения();
		//Иначе
		//	Поток = ФайловыеПотоки.ОткрытьДляЧтения(ПутьКДокументу);
		//КонецЕсли;
		//
		//ЧтениеДанных = Новый ЧтениеДанных(Поток, "windows-1251");
		//СтрокаКодировка = ЧтениеДанных.ПрочитатьСтроку();
		//Поток.Закрыть();
		//ЧтениеДанных.Закрыть();
		//
		//Если ТипЗнч(ПутьКДокументу) = Тип("ДвоичныеДанные") Тогда
		//	Поток = ПутьКДокументу.ОткрытьПотокДляЧтения();
		//Иначе
		//	Поток = ФайловыеПотоки.ОткрытьДляЧтения(ПутьКДокументу);
		//КонецЕсли;
		
		//Если Найти(НРег(СтрокаКодировка), "encoding=""utf-8""") Тогда
		//	ЧтениеДанных = Новый ЧтениеДанных(Поток, "utf-8");
		//	ТекстФайла = ЧтениеДанных.ПрочитатьСимволы();
		//Иначе
		//	ЧтениеДанных = Новый ЧтениеДанных(Поток, "windows-1251");
		//	ТекстФайла = ЧтениеДанных.ПрочитатьСимволы();
		//КонецЕсли; 
		
		
		//Поток.Закрыть();
		//ЧтениеДанных.Закрыть();
		
		Если Найти(НРег(СтрокаКодировка), "encoding=""utf-8""") Тогда
			КодировкаТекста_1="utf-8";
		Иначе
////			ЧтениеДанных = Новый ЧтениеДанных(Поток, "windows-1251");
	//		ТекстФайла = ЧтениеДанных.ПрочитатьСимволы();
			КодировкаТекста_1="windows-1251";
		КонецЕсли; 
		
		
		
		
		
		Если ТипЗнч(ПутьКДокументу) = Тип("ДвоичныеДанные") Тогда
			
			ТекстФайла=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(
			ПутьКДокументу,КодировкаТекста_1);
			//Поток = ПутьКДокументу.ОткрытьПотокДляЧтения();
		Иначе
			ПутьКДокументу_1=Новый ДвоичныеДанные(ПутьКДокументу);
			ТекстФайла=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(
			ПутьКДокументу_1,КодировкаТекста_1);
			
			
			//Поток = ФайловыеПотоки.ОткрытьДляЧтения(ПутьКДокументу);
		КонецЕсли;
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстФайла);
			
		ДанныеФайла = Новый Структура;
		
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
				Продолжить;
			КонецЕсли; 
			Если ЧтениеXML.Имя = "описание" Тогда
				ЧтениеXML.Прочитать();
				ОшибкаВернуть=ОшибкаВернуть+ЧтениеXML.Значение;
				
			Конецесли;
		КонецЦикла;
		
		ЧтениеXML.Закрыть();
		
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ИнформацияОбОшибке;
	КонецПопытки;
	
	
	Возврат  ОшибкаВернуть
КонецФункции


Функция РеквизитыЭлектронногоДокумента(ПутьКДокументу, СообщениеОбОшибке = "") Экспорт
	
	//ПодключенныйМодульЧтениеЭД = ПодключенныйМодуль(ИмяМодуляЧтениеЭД); 
	//ПодключенныйМодульЧтениеЭД.НоваяФабрикаXDTO = ПолучитьНовуюФабрикуXDTO();
	РеквизитыЭлектронногоДокумента = ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.РеквизитыЭлектронногоДокумента(ПутьКДокументу, СообщениеОбОшибке);
	Возврат  РеквизитыЭлектронногоДокумента;
	
КонецФункции

Функция ПодставитьПараметрыВСтроку(Знач ШаблонСтроки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ЕстьПараметрыСПроцентом = Найти(Параметр1, "%")
		Или Найти(Параметр2, "%")
		Или Найти(Параметр3, "%")
		Или Найти(Параметр4, "%")
		Или Найти(Параметр5, "%")
		Или Найти(Параметр6, "%")
		Или Найти(Параметр7, "%")
		Или Найти(Параметр8, "%")
		Или Найти(Параметр9, "%");
		
	Если ЕстьПараметрыСПроцентом Тогда
		Возврат ПодставитьПараметрыСПроцентом(ШаблонСтроки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	КонецЕсли;
	
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%1", Параметр1);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%2", Параметр2);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%3", Параметр3);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%4", Параметр4);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%5", Параметр5);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%6", Параметр6);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%7", Параметр7);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%8", Параметр8);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%9", Параметр9);
	Возврат ШаблонСтроки;
	
КонецФункции



Функция ПодставитьПараметрыСПроцентом(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = Неопределено;
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр = Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр = Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр = Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр = Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр = Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр = Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр = Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр = Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр = Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = Неопределено Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции


Функция ДобавитьКонечныйРазделительПути(Знач ПутьКаталога, Знач Платформа = Неопределено) Экспорт
	
	Если ПустаяСтрока(ПутьКаталога) Тогда
		Возврат ПутьКаталога;
	КонецЕсли;
	
	ДобавляемыйСимвол = ПолучитьРазделительПути();
	
	Если СтрЗаканчиваетсяНа_Х(ПутьКаталога, ДобавляемыйСимвол) Тогда
		Возврат ПутьКаталога;
	Иначе 
		Возврат ПутьКаталога + ДобавляемыйСимвол;
	КонецЕсли;
	
КонецФункции


Процедура ПроверитьСоздатьКаталог(Путь) Экспорт
	
	КаталогНаДиске = Новый Файл(ДобавитьКонечныйРазделительПути(Путь));
	Если Не КаталогНаДиске.Существует() Тогда
		Попытка
			СоздатьКаталог(КаталогНаДиске.ПолноеИмя);	
		Исключение
			Ошибка = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ВызватьИсключение ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось создать каталог ""%1"" по причине: %2'", "ru"), КаталогНаДиске.ПолноеИмя, Ошибка);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры


Функция СтрЗаканчиваетсяНа_Х(Строка_1,Строка_2) Экспорт
	
	Если СтрДлина(Строка_1)<СтрДлина(Строка_2) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДляПроверки=Сред(Строка_1,СтрДлина(Строка_1)-СтрДлина(Строка_2));
	Возврат Найти(ДляПроверки,Строка_2);
	
КонецФункции



Функция ПолучитьОшибку_ТХЦ(ДанныеДокументооборота, УникальныйИдентификаторФормы, СообщениеОбОшибке = "") Экспорт

	КаталогРаспаковки = ПодставитьПараметрыВСтроку("%1%2%3",
		КаталогВременныхФайлов(), ДанныеДокументооборота.ИдентификаторДокументооборота, ПолучитьРазделительПути());
	ПроверитьСоздатьКаталог(КаталогРаспаковки);
	
	ДанныеКонтейнера = ПолучитьИзВременногоХранилища(ДанныеДокументооборота.АдресДанныхДокументооборота);
	ЧтениеZip = Новый ЧтениеZipФайла(ДанныеКонтейнера.ОткрытьПотокДляЧтения());
	ЧтениеZip.ИзвлечьВсе(КаталогРаспаковки);
	ЧтениеZip.Закрыть();
	
	НайденныеФайлы = НайтиФайлы(КаталогРаспаковки, "meta.xml");
	Если НайденныеФайлы.Количество() = 0 Тогда
		УдалитьФайлы(КаталогРаспаковки);
		СообщениеОбОшибке = "Не найден файл ""meta.xml"" в пакете """+ДанныеДокументооборота.ИдентификаторДокументооборота;
		
		Возврат Неопределено;
	КонецЕсли;
	
	ФайлОписанияДокументооборота = НайденныеФайлы[0];
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ФайлОписанияДокументооборота.ПолноеИмя);
	ДокументооборотXDTO = ФабрикаXDTO.ПрочитатьXML(Чтение);
	Чтение.Закрыть();
	
	ДокументооборотыДоклайнз = Новый Массив;
	Если ТипЗнч(ДокументооборотXDTO.DocFlow) = Тип("СписокXDTO") Тогда 
		ДокументооборотыДоклайнз = ДокументооборотXDTO.DocFlow;
	ИначеЕсли ТипЗнч(ДокументооборотXDTO.DocFlow) = Тип("ОбъектXDTO") Тогда 
		ДокументооборотыДоклайнз.Добавить(ДокументооборотXDTO.DocFlow);
	КонецЕсли;
	
	Транзакция = Неопределено;
	Для Каждого Документооборот Из ДокументооборотыДоклайнз Цикл
		Для Каждого Документ Из Документооборот.Documents.Document Цикл
			Если Документ.TransactionCode <> "ErrorMessage" Тогда
				Продолжить;
			КонецЕсли; 
			
			Транзакция = Новый Структура("КодРегламента, 
				|КодТранзакции, 
				|ПутьКДокументу, 
				|ПутьККарточке,
				|ИдентификаторДокументооборота");
			
			Транзакция.КодРегламента = Документ.ReglamentCode;
			Транзакция.КодТранзакции = Документ.TransactionCode;
			Транзакция.ИдентификаторДокументооборота = Документооборот.Id;
			Транзакция.ПутьКДокументу = КаталогРаспаковки + Документ.Files.MainImage.Path;
			//Транзакция.ПутьККарточке = КаталогРаспаковки + Документ.Files.ExternalCard.Path;
			
			Прервать;
			
		КонецЦикла;
	КонецЦикла;
	
	Если Транзакция = Неопределено Тогда
		УдалитьФайлы(КаталогРаспаковки);
		СообщениеОбОшибке = "Для документа "+ДанныеДокументооборота.ИдентификаторДокументооборота+" загрузка не предусмотрена";
		Возврат Неопределено;
	КонецЕсли; 
	
	СвязанныеДокументы = Новый Массив;
	РеквизитыКарточкиТаксом = РеквизитыЭлектронногоДокумента_Ошибка(Транзакция.ПутьКДокументу);
	
	Попытка
		УдалитьФайлы(КаталогРаспаковки);
	Исключение
	КонецПопытки;
		
	Возврат РеквизитыКарточкиТаксом;
	
КонецФункции



&НаСервере
Функция РеквизитыЭлектронногоДокументаИзДокументооборота(ДанныеДокументооборота, УникальныйИдентификаторФормы, СообщениеОбОшибке = "") Экспорт

	КаталогРаспаковки = ПодставитьПараметрыВСтроку("%1%2%3",
		КаталогВременныхФайлов(), ДанныеДокументооборота.ИдентификаторДокументооборота, ПолучитьРазделительПути());
	ПроверитьСоздатьКаталог(КаталогРаспаковки);
	
		ДанныеКонтейнера = ПолучитьИзВременногоХранилища(ДанныеДокументооборота.АдресДанныхДокументооборота);
	Попытка
		ЧтениеZip = Новый ЧтениеZipФайла(ДанныеКонтейнера.ОткрытьПотокДляЧтения());
	Исключение
		ДанныеКонтейнера .Записать(КаталогВременныхФайловНаКлиенте+"temp_1c_8.zip");
		ЧтениеZip = Новый ЧтениеZipФайла(КаталогВременныхФайловНаКлиенте+"temp_1c_8.zip");
		
	КонецПопытки;
	ЧтениеZip.ИзвлечьВсе(КаталогРаспаковки);
	ЧтениеZip.Закрыть();
	
	НайденныеФайлы = НайтиФайлы(КаталогРаспаковки, "meta.xml");
	Если НайденныеФайлы.Количество() = 0 Тогда
		УдалитьФайлы(КаталогРаспаковки);
		СообщениеОбОшибке = "Не найден файл ""meta.xml"" в пакете """+ДанныеДокументооборота.ИдентификаторДокументооборота;
		Возврат Неопределено;
	КонецЕсли;
	
	ФайлОписанияДокументооборота = НайденныеФайлы[0];
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ФайлОписанияДокументооборота.ПолноеИмя);
	ДокументооборотXDTO = ФабрикаXDTO.ПрочитатьXML(Чтение);
	Чтение.Закрыть();
	
	ДокументооборотыДоклайнз = Новый Массив;
	Если ТипЗнч(ДокументооборотXDTO.DocFlow) = Тип("СписокXDTO") Тогда 
		ДокументооборотыДоклайнз = ДокументооборотXDTO.DocFlow;
	ИначеЕсли ТипЗнч(ДокументооборотXDTO.DocFlow) = Тип("ОбъектXDTO") Тогда 
		ДокументооборотыДоклайнз.Добавить(ДокументооборотXDTO.DocFlow);
	КонецЕсли;
	
	Транзакция = Неопределено;
	Для Каждого Документооборот Из ДокументооборотыДоклайнз Цикл
		Для Каждого Документ Из Документооборот.Documents.Document Цикл
			Если Документ.TransactionCode <> "Invoice" Тогда
				Продолжить;
			КонецЕсли; 
			
			Транзакция = Новый Структура("КодРегламента, 
				|КодТранзакции, 
				|ПутьКДокументу, 
				|ПутьККарточке,
				|ИдентификаторДокументооборота");
			
			Транзакция.КодРегламента = Документ.ReglamentCode;
			Транзакция.КодТранзакции = Документ.TransactionCode;
			Транзакция.ИдентификаторДокументооборота = Документооборот.Id;
			Транзакция.ПутьКДокументу = КаталогРаспаковки + Документ.Files.MainImage.Path;
			Транзакция.ПутьККарточке = КаталогРаспаковки + Документ.Files.ExternalCard.Path;
			
			Прервать;
			
		КонецЦикла;
	КонецЦикла;
	
	Если Транзакция = Неопределено Тогда
		УдалитьФайлы(КаталогРаспаковки);
		СообщениеОбОшибке = "Для документа "+ДанныеДокументооборота.ИдентификаторДокументооборота+" загрузка не предусмотрена";
		Возврат Неопределено;
	КонецЕсли; 
	
	СвязанныеДокументы = Новый Массив;
	РеквизитыКарточкиТаксом = РеквизитыЭлектронногоДокумента(Транзакция.ПутьКДокументу);
	
							Если РеквизитыКарточкиТаксом.Загружать=Ложь Тогда
								Возврат Неопределено;
							КонецЕсли;
	
	Если РеквизитыКарточкиТаксом.Свойство("ДополнительныеСведения") Тогда
		Для Каждого Параметр Из РеквизитыКарточкиТаксом.ДополнительныеСведения Цикл
			Если Параметр.Имя = "LinkedDocument" Тогда
				СвязанныеДокументы.Добавить(Параметр.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	
	ОсновнойФайл = Транзакция.ПутьКдокументу;
	
	СтруктураИмениФайла = РазложитьПолноеИмяФайла(ОсновнойФайл);
	
	Расширение = СтруктураИмениФайла.Расширение;
	
	Если НРег(Расширение) = ".xml" Тогда
		
		РеквизитыЭлектронногоДокумента = РеквизитыЭлектронногоДокумента(ОсновнойФайл, СообщениеОбОшибке);
		Если РеквизитыЭлектронногоДокумента.Загружать=Ложь Тогда
			//РеквизитыЭлектронногоДокумента=Неопределено;
								Возврат неопределено;
							КонецЕсли;
		
		РеквизитыЭлектронногоДокумента.Вставить("СвязанныеДокументы", СвязанныеДокументы);
		РеквизитыЭлектронногоДокумента.Вставить("ИдентификаторДокументооборота", ДанныеДокументооборота.ИдентификаторДокументооборота);
		
		Если Найти(РеквизитыЭлектронногоДокумента.ФорматДокумента.Идентификатор, "ON_NSCHFDOPPR") = 0
			И Найти(РеквизитыЭлектронногоДокумента.ФорматДокумента.Идентификатор, "ON_SCHFDOPPR") = 0 Тогда
			СообщениеОбОшибке = ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 загрузка не предусмотрена'"), 
					ДанныеДокументооборота.ИдентификаторДокументооборота);
		ИначеЕсли РеквизитыЭлектронногоДокумента.Свойство("Исправление") Тогда
			СообщениеОбОшибке = ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 загрузка не предусмотрена: Не производится загрузка корректировочных и исправительных документов'"), 
					ДанныеДокументооборота.ИдентификаторДокументооборота);
		КонецЕсли;
			
	Иначе
		РеквизитыЭлектронногоДокумента = Неопределено;
	КонецЕсли;
	
	Если РеквизитыЭлектронногоДокумента <> Неопределено Тогда
		Текст=Новый ТекстовыйДокумент;
		Текст.Прочитать(ОсновнойФайл);
		РеквизитыЭлектронногоДокумента.Вставить("ТекстФайла",Текст.ПолучитьТекст());
		РеквизитыЭлектронногоДокумента.Вставить("ИмяФайлаЭД",СтруктураИмениФайла.Имя);
		РеквизитыЭлектронногоДокумента = ПоместитьВоВременноеХранилище(РеквизитыЭлектронногоДокумента, УникальныйИдентификаторФормы);
	КонецЕсли; 
	
	Попытка
		УдалитьФайлы(КаталогРаспаковки);
	Исключение
	КонецПопытки;
		
	Возврат РеквизитыЭлектронногоДокумента;
	
КонецФункции

Функция РазложитьПолноеИмяФайла(Знач ПолноеИмяФайла, ЭтоПапка = Ложь) Экспорт
	
	СтруктураИмениФайла = Новый Структура("ПолноеИмя,Путь,Имя,Расширение,ИмяБезРасширения");
	
	// Убираем из полного имени файла завершающий слеш и сохраняем получившееся полное имя в структуре.
	Если ЭтоПапка И (Прав(ПолноеИмяФайла, 1) = "/" Или Прав(ПолноеИмяФайла, 1) = "\") Тогда
		Если ЭтоПапка Тогда
			ПолноеИмяФайла = Сред(ПолноеИмяФайла, 1, СтрДлина(ПолноеИмяФайла) - 1);
		Иначе
			// Если путь к файлу заканчивается слешем, то у файла нет имени.
			СтруктураИмениФайла.Вставить("ПолноеИмя", ПолноеИмяФайла); 
			СтруктураИмениФайла.Вставить("Путь", ПолноеИмяФайла); 
			СтруктураИмениФайла.Вставить("Имя", ""); 
			СтруктураИмениФайла.Вставить("Расширение", ""); 
			СтруктураИмениФайла.Вставить("ИмяБезРасширения", ""); 
			Возврат СтруктураИмениФайла;
		КонецЕсли;
	КонецЕсли;
	СтруктураИмениФайла.Вставить("ПолноеИмя", ПолноеИмяФайла); 
	
	// Если полное имя файла оказалось пустым, то остальные параметры структуры возвращаем пустыми.
	Если СтрДлина(ПолноеИмяФайла) = 0 Тогда 
		СтруктураИмениФайла.Вставить("Путь", ""); 
		СтруктураИмениФайла.Вставить("Имя", ""); 
		СтруктураИмениФайла.Вставить("Расширение", ""); 
		СтруктураИмениФайла.Вставить("ИмяБезРасширения", ""); 
		Возврат СтруктураИмениФайла;
	КонецЕсли;
	
	// Выделяем путь к файлу и имя файла.
	Если Найти(ПолноеИмяФайла, "/") > 0 Тогда
		ПозицияРазделителя = СтрНайти_Сконца_Х(ПолноеИмяФайла, "/");
	ИначеЕсли Найти(ПолноеИмяФайла, "\") > 0 Тогда
		ПозицияРазделителя = СтрНайти_Сконца_Х(ПолноеИмяФайла, "\");
	Иначе
		ПозицияРазделителя = 0;
	КонецЕсли;
	СтруктураИмениФайла.Вставить("Путь", Лев(ПолноеИмяФайла, ПозицияРазделителя)); 
	СтруктураИмениФайла.Вставить("Имя", Сред(ПолноеИмяФайла, ПозицияРазделителя + 1));
	
	// Папки не имеют расширений, а для файла выделяем расширение.
	Если ЭтоПапка Тогда
		СтруктураИмениФайла.Вставить("Расширение", "");
		СтруктураИмениФайла.Вставить("ИмяБезРасширения", СтруктураИмениФайла.Имя);
	Иначе
		ПозицияТочки = СтрНайти_Сконца_Х(СтруктураИмениФайла.Имя, ".");
		Если ПозицияТочки = 0 Тогда
			СтруктураИмениФайла.Вставить("Расширение", "");
			СтруктураИмениФайла.Вставить("ИмяБезРасширения", СтруктураИмениФайла.Имя);
		Иначе
			СтруктураИмениФайла.Вставить("Расширение", Сред(СтруктураИмениФайла.Имя, ПозицияТочки));
			СтруктураИмениФайла.Вставить("ИмяБезРасширения", Лев(СтруктураИмениФайла.Имя, ПозицияТочки - 1));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураИмениФайла;
	
КонецФункции



Функция СтрНайти_Сконца_Х(Строка_1,Строка_2) Экспорт
	
	Если СтрДлина(Строка_1)<СтрДлина(Строка_2) Тогда
		Возврат 0;
	КонецЕсли;
	
	Строка_Поиска="";
	//Для Сч=СтрДлина(Строка_1) По 1 Цикл
	Для Сч=1 ПО СтрДлина(Строка_1) Цикл
		Строка_Поиска=Строка_Поиска+Сред(Строка_1,СтрДлина(Строка_1)-Сч+1,1);
	Конеццикла;
	
	Строка_Ищем="";
	Для Сч=1 ПО СтрДлина(Строка_1) Цикл
		Строка_Ищем=Строка_Ищем+Сред(Строка_2,СтрДлина(Строка_1)-Сч+1,1);
	Конеццикла;
	
	НомерК=Найти(Строка_Поиска,Строка_Ищем);
	Если НомерК=0 Тогда
		Возврат 0
	Иначе
		Возврат СтрДлина(Строка_1)-НомерК+1
	КонецЕсли;
	//Возврат Найти(ДляПроверки,Строка_2);
	
КонецФункции




&НаКлиенте
Процедура ЗагрузитьПолученные(HTTPСервисЗапрос_ТХЦ,Маркер)
	
	МассивДляЗагрузки = Новый Массив;
	ЕстьОшибки = Ложь;
	
	Для Каждого ТекущаяСтрока Из ПолученныеСтраница Цикл
		Если ЗначениеЗаполнено(ТекущаяСтрока.Документ) Тогда
		//	Если ПроверкаСтатуса(ТекущаяСтрока.Статус,ТекущаяСтрока.Документ)=истина Тогда
		//		Продолжить;
		//	Конецесли;
			
		//	ПоменятьСтатусДокументаИВСЕ(ТекущаяСтрока.Статус,ТекущаяСтрока.Документ);
			
			
			Продолжить;
		Конецесли;
		
		ДанныеДокументооборота =Неопределено;
			Попытка
				ДанныеДокументооборота = ДанныеДокументооборота(ТекущаяСтрока.ИдентификаторДокументооборота,HTTPСервисЗапрос_ТХЦ,Маркер );
			Исключение
				//ЕстьОшибки = Истина;
				Продолжить;
			КонецПопытки;
			Если ДанныеДокументооборота =Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			
			АдресДанныхДокументооборота = ПоместитьВоВременноеХранилище(ДанныеДокументооборота, ЭтаФорма.УникальныйИдентификатор);
			
			СтруктураПараметр = Новый Структура("АдресДанныхДокументооборота, ИдентификаторДокументооборота", АдресДанныхДокументооборота, ТекущаяСтрока.ИдентификаторДокументооборота);
			
			СообщениеОбОшибке = "";
			РеквизитыЭлектронногоДокумента = РеквизитыЭлектронногоДокументаИзДокументооборота(СтруктураПараметр, СообщениеОбОшибке);
						
			Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
				
				//Сообщить(СообщениеОбОшибке);
				//СтрокаКэша.Ошибка = СообщениеОбОшибке;
				ЕстьОшибки = Истина;
				Продолжить;
				
			ИначеЕсли РеквизитыЭлектронногоДокумента = Неопределено Тогда
				
				СообщениеОбОшибке = ПодставитьПараметрыВСтроку(НСтр("ru = 'Документ %1 не может быть загружен'"), ""
					//РеквизитыЭлектронногоДокумента.ИдентификаторДокументооборота
					);
				//Сообщить(СообщениеОбОшибке);	
				//Ошибка = СообщениеОбОшибке;
				ЕстьОшибки = Истина;
				Продолжить;
				
			КонецЕсли; 
			
			//РеквизитыЭлектронногоДокумента = РеквизитыЭлектронногоДокумента;

		//КонецЕсли; 
		
		МассивДляЗагрузки.Вставить(0, Новый Структура("Статус,РеквизитыЭлектронногоДокумента",ТекущаяСтрока.Статус,РеквизитыЭлектронногоДокумента));
	КонецЦикла;
	
	//Если МассивДляЗагрузки.Количество() = 0 Тогда
	//	Если НЕ ЕстьОшибки Тогда
	//		ТекстСообщения = НСтр("ru = 'Не выбраны документы для загрузки'");
	//		СообщитьПользователю(ТекстСообщения);
	//	КонецЕсли;	
	//	Возврат;
	//КонецЕсли; 
	
	НоменклатураДляСопоставления = Новый Массив;
	//ПроверитьСопоставлениеНоменклатуры(МассивДляЗагрузки, НоменклатураДляСопоставления);
	
	
	МассивУп=Новый Массив;
	МассивКМ=Новый Массив;

	
Текст1="";
	
	ЗагрузитьПолученныеНаСервере(МассивДляЗагрузки,МассивУп,МассивКМ);
	//ДокумПриемки=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусДокумента_Приемка_УПД(NNN_1,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа,,,,МассивКМ,ЗагрузатьНаименованиеПриПриемке);	
	
	//ОбработатьПолученныеНаСервере();

	
	Для Каждого ТекущаяСтрока Из МассивУп Цикл
		Если ЗначениеЗаполнено(ТекущаяСтрока.Документ) Тогда
			Если ПроверкаСтатуса(Статус(ТекущаяСтрока.Статус),ТекущаяСтрока.Документ)=истина Тогда
				Продолжить;
			Конецесли;
			
			ПоменятьСтатусДокументаИВСЕ(Статус(ТекущаяСтрока.Статус),ТекущаяСтрока.Документ);
			
			
			Продолжить;
		Конецесли;
		
	Конеццикла;
	
	//
	Для Каждого ТекущаяСтрока Из ПолученныеСтраница Цикл
		Если ЗначениеЗаполнено(ТекущаяСтрока.Документ) Тогда
			Если ПроверкаСтатуса(Статус(ТекущаяСтрока.Статус),ТекущаяСтрока.Документ)=истина Тогда
				Продолжить;
			Конецесли;
			
			ПоменятьСтатусДокументаИВСЕ(Статус(ТекущаяСтрока.Статус),ТекущаяСтрока.Документ);
			
			
			Продолжить;
		Конецесли;
		
	КонецЦикла;
	//
	Элементы.Приемкасписок.Обновить();
КонецПроцедуры


&НасервереБезКонтекста
Функция ПоменятьСтатусДокументаИВСЕ(Статус,документ)
	ПолДокум=Документ.ПолучитьОбъект();
	ПолДокум.СтатусУПД=Статус;
	Если ПолДокум.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан	 Тогда
		ПолДокум.ПометкаУдаления=ложь;
		ПолДокум.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		ПолДокум.Записать();
	Конецесли;
Конецфункции


&НасервереБезКонтекста
Функция ПроверкаСтатуса(Знач Статус,документ)
	Статус_1=Статус;
	Если Статус_1=Документ.СтатусУПД Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь
	Конецесли;
	
Конецфункции



Процедура ЗагрузитьПолученныеНаСервере(МассивДляЗагрузки,МассивУп,МассивКМ)
	ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	
	МассивУп=Новый Массив;
	
	Для Каждого АдресРеквизитов Из МассивДляЗагрузки Цикл
		РеквизитыЭлектронногоДокумента = ПолучитьИзВременногоХранилища(АдресРеквизитов.РеквизитыЭлектронногоДокумента);
		
		
		Если РеквизитыЭлектронногоДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ЗагрузкаПриемкиИзXML(РеквизитыЭлектронногоДокумента,МассивУп,ЗаписыватьДанныеПриОтправкеЗаказа,Пользователь,АдресРеквизитов,Справочники.ЭДО_ХамелеонЦРПТ.ЭДОТакском,,Ложь)
		
		//МассивДляЗагрузки.Добавить(РеквизитыЭлектронногоДокумента);
	КонецЦикла;
	//ПодключенныйМодуль(ИмяМодуляИнтеграции).ЗагрузитьДокументы(МассивДляЗагрузки, Организация);
	
	
	//ОсновнойМодуль().ЗагрузитьПолученные(МассивДляЗагрузки, Организация);
	
КонецПроцедуры



&НаСервере
Процедура ОбработатьПолученныеНаСервере(МассивВходящихТранзакций = Неопределено)
	
	ТаблицаПолученных = РеквизитФормыВЗначение("ПолученныеСтраница");
	
	Если МассивВходящихТранзакций <> Неопределено Тогда
		НомерСтроки = 1;
		Для Каждого Транзакция Из МассивВходящихТранзакций Цикл
			НоваяСтрока = ТаблицаПолученных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Транзакция);
			НоваяСтрока.Документ=Документы.Приемка_ХамелеонЦРПТ.НайтиПоРеквизиту("ДокументОтгрузки",Транзакция.ИдентификаторДокументооборота);
			НоваяСтрока.НомерСтроки = НомерСтроки;
			//НоваяСтрока.ВидДокумента = ПредставлениеДокумента(Транзакция.ВидДокумента, НоваяСтрока.ФункцияДокумента);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	МассивВходящихТранзакций.очистить();
//	ОбработаннаяТаблицаПолученных = ОсновнойМодуль().ОбработатьПолученные(ТаблицаПолученных);
//	Для Каждого ТекущаяСтрока Из ОбработаннаяТаблицаПолученных Цикл
//		Найдено = ТаблицаПолученных.НайтиСтроки(Новый Структура("ИдентификаторДокументооборота", ТекущаяСтрока.ИдентификаторДокументооборота));
//		ЗаполнитьЗначенияСвойств(Найдено[0], ТекущаяСтрока);
//	КонецЦикла;
//	
	ЗначениеВРеквизитФормы(ТаблицаПолученных, "ПолученныеСтраница");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОшибкуВДокумент(Документ,РеквизитыЭлектронногоДокумента)
	ПолОб=Документ.ПолучитьОбъект();
	ПолОб.ОшибкаОтправки=РеквизитыЭлектронногоДокумента;
	ПолОб.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПриемкуИЗXML(Команда)
	// Вставить содержимое обработчика.
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Фильтр="Файл xml|*.xml";
	Диалог.Заголовок = НСтр("ru='Выберите файл для загрузки'", "ru");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайл", ЭтаФорма);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте 
Процедура ЗагрузитьФайл(ВыбранныйФайл,ДД) Экспорт
	
	Если ВыбранныйФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	ДД = Новый ДвоичныеДанные(ВыбранныйФайл[0]);
	Файл=Новый Файл(ВыбранныйФайл[0]);
	МассивФайлов.Добавить(Новый Структура("Имя,Дв",Файл.Имя,ПоместитьВоВременноеХранилище(ДД)));
	
	ЗагрузитьНаСервере(МассивФайлов);
	Элементы.Приемкасписок.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНаСервере(МассивФайлов,Статус="")
	
	МассивУппешно=Новый Массив;
	ОшибкаЗагрузки=Ложь;
	Для Каждого Стр_1 Из МассивФайлов Цикл
		Попытка
			СообщениеОбОшибке="";
			РеквизитыЭлектр=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.РеквизитыЭлектронногоДокумента(Стр_1.Дв,СообщениеОбОшибке);
			Если РеквизитыЭлектр.Загружать=Ложь Тогда
					Продолжить;
				КонецЕсли;
						
			Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
				Сообщить("Не удалось загрузить файл "+Стр_1.Имя+" Ошибка: "+СообщениеОбОшибке);
				ОшибкаЗагрузки=Истина;
				Продолжить;
			КонецЕсли;
			
		
						//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			// Данный фрагмент построен конструктором.
			// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Приемка_ХамелеонЦРПТ.Ссылка
				|ИЗ
				|	Документ.Приемка_ХамелеонЦРПТ КАК Приемка_ХамелеонЦРПТ
				|ГДЕ
				|	Приемка_ХамелеонЦРПТ.НомерВходящий ПОДОБНО &НомерВходящий
				|	И НачалоПериода(Приемка_ХамелеонЦРПТ.ДатаВходящий,ДЕНЬ) = &ДатаВходящий
				|	И Приемка_ХамелеонЦРПТ.Организация.ИНН = &ИНН
				|	И Приемка_ХамелеонЦРПТ.Поставщик.ИНН = &ИННК";
			
			Запрос.УстановитьПараметр("ДатаВходящий",НачалоДня(РеквизитыЭлектр.Дата));
			Запрос.УстановитьПараметр("ИННК", РеквизитыЭлектр.Продавец.РеквизитыКонтрагента.ИНН);
			Запрос.УстановитьПараметр("ИНН", РеквизитыЭлектр.Покупатель.РеквизитыКонтрагента.ИНН);
			Запрос.УстановитьПараметр("НомерВходящий", РеквизитыЭлектр.Номер);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				// Вставить обработку выборки ВыборкаДетальныеЗаписи
				Если ЗначениеЗаполненО(Статус) И ВыборкаДетальныеЗаписи.Ссылка.СтатусУПД<>Статус Тогда
					ПолОб=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					ПолОб.СтатусУПД=Статус;
					ПолОб.Записать();
				КонецесЛИ;
				
				Продолжить;
			КонецЕсли;
			
			МассивУп=Новый Массив;
			АдресРеквизитов=Новый Структура;
			РеквизитыЭлектр.Вставить("ИдентификаторДокументооборота", Стр_1.Имя);
			АдресРеквизитов.Вставить("Статус",Статус);
			МассивУппешно.Добавить(ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ЗагрузкаПриемкиИзXML(РеквизитыЭлектр,МассивУп,ЗаписыватьДанныеПриОтправкеЗаказа,Пользователь,АдресРеквизитов,Справочники.ЭДО_ХамелеонЦРПТ.ЭДОФайл,ОшибкаЗагрузки))
		Исключение
			
			Сообщить("Не удалось загрузить файл "+Стр_1.Имя+" Ошибка:");
			
		   	Инфо = ИнформацияОбОшибке();
		    Сообщить("Описание='" + Инфо.Описание + "'");
		    Сообщить("ИмяМодуля='" + Инфо.ИмяМодуля + "'");
		    Сообщить("НомерСтроки=" + Инфо.НомерСтроки);
		    Сообщить("ИсходнаяСтрока='" + Инфо.ИсходнаяСтрока + "'");
			ОшибкаЗагрузки=Истина;
			
		КонецПопытки;
	Конеццикла;
	
	Если ОшибкаЗагрузки<>Истина Тогда
		Для Каждого Стр_1 Из МассивУппешно Цикл
			
			Если ЗначениеЗаполнено(Стр_1) Тогда
				
				Если ЗначениеЗаполненО(Статус) И Стр_1.СтатусУПД<>Статус Тогда
					ПолОб=Стр_1.ПолучитьОбъект();
					ПолОб.СтатусУПД=Статус;
					ПолОб.Записать();
				КонецесЛИ;
			
				Сообщить("Создан документ "+Строка(Стр_1));
			КонецЕсли;
			
		Конеццикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитЬИзКаталога(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	//Диалог.МножественныйВыбор = Ложь;
	Диалог.Фильтр="Файл xml|*.xml";
	Диалог.Заголовок = НСтр("ru='Выберите каталог для загрузки(укажите любой  файл для загрузки всех файлов из каталога)'", "ru");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьКаталог", ЭтаФорма);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте 
Процедура ЗагрузитьКаталог(ВыбранныйФайл,ДД) Экспорт
	Если ВыбранныйФайл=Неопределено Тогда
		возврат;
	КонецЕсли;
	ФС=Новый Файл(ВыбранныйФайл[0]);
	
	НачатьПоискФайлов(Новый ОписаниеОповещения("ПослеПоискаФайлов",ЭтаФорма),ФС.Путь,"*.xml",Истина);
	
КонецПроцедуры

&НаКлиенте 
Процедура ПослеПоискаФайлов(ВыбранныеФайл,ДД) Экспорт
	МассивФайлов = Новый Массив;
	
	Для каждого Стр_1 Из ВыбранныеФайл Цикл
		ДД = Новый ДвоичныеДанные(Стр_1.ПолноеИмя);
			
		МассивФайлов.Добавить(Новый Структура("Имя,Дв",Стр_1.Имя,ПоместитьВоВременноеХранилище(ДД)));
		
	КонецЦикла;
	ЗагрузитьНаСервере(МассивФайлов);
	
	Элементы.Приемкасписок.Обновить();
КонецПроцедуры


Процедура ЗагрузитьДокументИзАрхива(Архив)
	
	
	
	//ФайлАрхива = Новый ЧтениеZipФайла(ПутьКАрхиву + ИмяАрхива);
	Попытка
		//ФайлАрхива.ИзвлечьВсе(КаталогРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать); 
	//	ФайлАрхива.Закрыть(); 
	Исключение
		Отказ = Истина;
		//Возврат Новый Структура("code,message,details", 772, "Ошибка работы с файловой системой", ОписаниеОшибки());
	КонецПопытки;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСБЭДО(Команда)  Экспорт
	// Вставить содержимое обработчика.
Thumbprint_1=ПолучитьИзПользователя();	
	
	СайтДляПодключенияПоТакскму=Thumbprint_1.СБ;
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
		Прокси=Новый ИнтернетПрокси;
		Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
		HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	Иначе
				
		HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	КонецЕсли;
	
	СерийныйНомер="";
	ДанныеАгрегации="";
	ОбъектПлагин=Неопределено;
	
	Если Thumbprint_1.ТипПодключения=ПредопределенноеЗначение("Перечисление.ТипыПодключенияКЭДОСБ_ХамелеонЦРПТ.SDK") Тогда
		//Маркер=РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОСб_SDK(Thumbprint_1,ПолучитьИдЭд(Пользователь),HTTPСервисЗапрос_ТХЦ,СерийныйНомер,ДанныеАгрегации,ОбъектПлагин);
		Маркер=РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОСб_SDK(Thumbprint_1,ПолучитьИдЭд(Пользователь),HTTPСервисЗапрос_ТХЦ,СерийныйНомер,ДанныеАгрегации,ОбъектПлагин,СайтДляПодключенияПоТакскму);
		
	ИначеЕсли Thumbprint_1.ТипПодключения=ПредопределенноеЗначение("Перечисление.ТипыПодключенияКЭДОСБ_ХамелеонЦРПТ.ПоПаролю") Тогда
		Маркер=РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОСб(Thumbprint_1,ПолучитьИдЭд(Пользователь),HTTPСервисЗапрос_ТХЦ,СерийныйНомер);
	Иначе
		Маркер=РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОСб_Новый(Thumbprint_1,ПолучитьИдЭд(Пользователь),HTTPСервисЗапрос_ТХЦ,СерийныйНомер,ДанныеАгрегации,ОбъектПлагин);
	КонецЕсли;
	
	
	
	//Возврат;
	
	Если  ЗначениеЗаполнено(Маркер) тогда
		
		
		
		РазмерСтраницы=500;
		Страница=0;
		//Тотал=1;
		Пока Истина Цикл
		
		
			ПолучитьСписокНакладных=РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.СписокВходящихДокументовсб(Thumbprint_1,Маркер,Страница,РазмерСтраницы,КачатьСЭДОЗаПоследниеДни);
			Если  ПолучитьСписокНакладных<>Неопределено тогда
				
				СписокДляЗагрузкиВПрограмму=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.НаСервереОпределимЧтоНамГрузитьСБ(ПолучитьСписокНакладных);
				
				Для Каждого Стр_12 Из СписокДляЗагрузкиВПрограмму Цикл
					Вложение=Неопределено;
					Если НЕ Стр_12.Свойство("Вложение",Вложение) Тогда
						Продолжить;
					КонецЕслИ;
					
					Для Каждого Стр_11 Из Вложение Цикл
						
						АдресЗапроса=СтрЗаменить(Стр_11.Файл.Ссылка,"https://"+СайтДляПодключенияПоТакскму+"","");
						HTTPЗапрос=Новый HTTPЗапрос(АдресЗапроса);

						HTTPЗапрос.Заголовки.Вставить("X-SBISSessionID",	Маркер );
						HTTPЗапрос.Заголовки.Вставить("Content-Type",	"application/json; charset=utf-8");
						Ответ=HTTPСервисЗапрос_ТХЦ.Получить(HTTPЗапрос);
						Если Ответ.КодСостояния=200 Тогда
												
								//Попытка
								//	ДанныеДокументооборота = ДанныеДокументооборота(ТекущаяСтрока.ИдентификаторДокументооборота,HTTPСервисЗапрос_ТХЦ,Маркер );
								//Исключение
								//	//ЕстьОшибки = Истина;
								//	Продолжить;
								//КонецПопытки;
								//Если ДанныеДокументооборота =Неопределено Тогда
								//	Продолжить;
								//КонецЕсли;
								
								
							СообщениеОбОшибке="";
							Попытка
								РеквизитыЭлектр=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.РеквизитыЭлектронногоДокумента(Ответ.ПолучитьТелоКакДвоичныеДанные(),СообщениеОбОшибке);
							Исключение
								Продолжить;
							КонецПопытки;
							Если РеквизитыЭлектр.Загружать=Ложь Тогда
								Продолжить;
							КонецЕсли;
							Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
								Сообщить("Не удалось загрузить файл по документу "+Строка(Стр_12.Идентификатор)+" Ошибка: "+СообщениеОбОшибке);
								ОшибкаЗагрузки=Истина;
								Продолжить;
							КонецЕсли;
							//РеквизитыЭлектр.Вставить("ТекстФайла",);
							
							РеквизитыЭлектр.ВставитЬ("ИдентификаторДокументооборота",Стр_12.Идентификатор);
							МассивУп=Новый Массив;
							
							АдресРеквизитов=Новый Структура;
							//РеквизитыЭлектронногоДокумента.Вставить("ИдентификаторДокументооборота", ДанныеДокументооборота.ИдентификаторДокументооборота);
							АдресРеквизитов.Вставить("Статус",ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ВернутьСтатусДокументаСБ(Стр_12.Состояние.Код));
							
							Попытка
								ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ЗагрузкаПриемкиИзXML(РеквизитыЭлектр,МассивУп,ЗаписыватьДанныеПриОтправкеЗаказа,Пользователь,АдресРеквизитов,ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОТензор"),ОшибкаЗагрузки,Ложь);
							Исключение
							КонецПопытки;
							           	
							
						
						
					КонецЕсли;
					Конеццикла;
				Конеццикла;
				
				Если ПолучитьСписокНакладных.result.Навигация.ЕстьЕще="Нет" Тогда
					Прервать;
				Иначе
					
					Страница=Страница+1;
				КонецЕсли;
			Иначе
				Элементы.Приемкасписок.Обновить();
				Возврат;
			//ОбработатьПолученныеНаСервере(ПолучитьСписокНакладных);			
			//ЗагрузитьПолученные(HTTPСервисЗапрос_ТХЦ,Маркер);
			//ПолучитьПричинуОтказа=Новый Массив;
			
			//ОбработатьСтатусыНаСервереПоНакладным_Приемка();
			
			КонецЕсли;
		Конеццикла;
			//Запрос.УстановитьТелоИзДвоичныхДанных(ПакетЭДО);
		//Попытка 
			//Ответ = HTTPСервисЗапрос_ТХЦ.Получить(Запрос);
		//Исключение
			
			//Продолжить;
		//КонецПопытки;		
		
	КонецЕсли;
	// Вставить содержимое обработчика.
	
				Элементы.Приемкасписок.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПриемкуЭДОЛайтПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ЗагрузитьПриемкуЭДОЛайт=ЗагрузитьПриемкуЭДОЛайт;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПриемкуЭДОЛайтПриИзменении(Элемент)
	ЗагрузитьПриемкуЭДОЛайтПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура КодТовараВУПДПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.КодТовараВУПД=КодТовараВУПД;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КодТовараВУПДПриИзменении(Элемент)
	КодТовараВУПДПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВЭДОСБ(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
		МассивНакладных=Новый Массив;
	
	Для Каждого Стр_1 Из Элементы.Отгрузка_Список.ВыделенныеСтроки Цикл
		МассивНакладных.Добавить(Стр_1);
	Конеццикла;
	Если МассивНакладных.Количество()>0 тогда
		Форм=ПолучитьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаДокумента",
		Новый структура("Ключ",МассивНакладных[0]));
		Форм.ОтправитьВЭДОСБ_Массив(МассивНакладных);
	КонецЕсли;
	Элементы.Отгрузка_Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВЭДОСбисЧерновик(Команда)
		// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
		МассивНакладных=Новый Массив;
	
	Для Каждого Стр_1 Из Элементы.Отгрузка_Список.ВыделенныеСтроки Цикл
		МассивНакладных.Добавить(Стр_1);
	Конеццикла;
	Если МассивНакладных.Количество()>0 тогда
		Форм=ПолучитьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаДокумента",
		Новый структура("Ключ",МассивНакладных[0]));
		Форм.ОтправитьВСБЧерновик(МассивНакладных);
	КонецЕсли;
	Элементы.Отгрузка_Список.Обновить();

КонецПроцедуры

Function JSONString(Val Object)
	
	Writer  = New JSONWriter;
	Writer.SetString(New JSONWriterSettings(JSONLineBreak.None,,,эКРАнированиеСимволовJSON.СимволыВнеASCII));
	WriteJSON(Writer, Object);
	Body = Writer.Close();
	Return Body;

EndFunction

Функция    СтруктураКонутрЛП(Thumbprint_1)
	Params = New Structure("Login,Password,Remember", Thumbprint_1.ЛогинКонтур, Thumbprint_1.ПарольКонтур, False);	
	Возврат JSONString(Params);	
КонецФункции


Функция КодСтр(Строк)
	Возврат КодироватьСтроку(Строк,СпособКодированияСтроки.КодировкаURL)
КонецФункции


&НаКлиенте
Процедура ЗагрузитьСБКонтур(Команда)  Экспорт
	// Вставить содержимое обработчика. ъ
	#Если ВебКлиент Тогда
		
	#Иначе
	Thumbprint_1=ПолучитьИзПользователя();
	
	Если Не ЗначениеЗаполнено(Thumbprint_1.ЛогинКонтур) ИЛИ 
		Не ЗначениеЗаполнено(Thumbprint_1.ПарольКонтур) Тогда
		Сообщить("Не заполнены данные по подключению к Диадок(логин+пароль)");
		Возврат;
	КонецЕсли;
	
			Request="";
			boxId="";
			
			BoxUrl="";
			PortalUserId="";
			VerificationToken="";
			Если НЕ РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ПодключениеПоКонтурДиадок(Request,Thumbprint_1,boxId,BoxUrl,PortalUserId,VerificationToken) Тогда
				Сообщить("Не удалось подключиться к Диадок");
				возврат;
			КонецЕсли;

			
			
			
			
	///ПОЛУЧАЕМ 		
	//https://diadoc.kontur.ru/api/boxes/36ff2fd2-6a90-45e5-b5bc-bec8aed29260/documents/pending-receipts?batchKey=0i%2F%2FNpBq5UW1vL7IrtKSYJJ5osuhjt9Js9XK6Nl8ibDtTWfwGDUQRI9kkZvmuPNb0i%2F%2FNpBq5UW1vL7IrtKSYAAPAAAAKQEI2E9lOD%2BEGazseTtZILJJlczVxmF40rInbLG6U2zhT71dSBC2S%2FCc&thumbprint=B2EAC24A4BF2E224C272CE23109203E696C68249
			
			
			
	ДатаК=КонецДня(Текущаядата());
	ДатаК1=ДатаК+1*24*60*60;
	ДатаН=НачалоДня(ДатаК-КачатьСЭДОЗаПоследниеДни*24*60*60);
	ДатаН1=ДатаН-1*24*60*60;
//	Request.Open("GET", BoxUrl + "/Folder/Inbox?DateRange.Custom.FromDate="+Формат(ДатаН,"ДФ=""гггг-ММ-дд""")+"&DateRange.Custom.ToDate="+Формат(ДатаК,"ДФ=""гггг-ММ-дд""")+"&DateRange.Mode=Custom&DateRangeKind=LetterDate&DateTimeRange.FromDateTime="+Формат(ДатаН1,"ДФ=""гггг-ММ-дд""")+"T21:00:00.000Z&DateTimeRange.ToDateTime="+Формат(ДатаК1,"ДФ=""гггг-ММ-дд""")+"T21:00:00.000Z&IsFilterActive=true&LetterCategory=Incoming&TimezoneOffsetInMinutes=180", 0);
	Request.Open("POST", BoxUrl + "/ExportDocumentList/PutExportTask?IsFilterActive=true&Mode=Default&LetterCategory=Incoming&IncludeChildDepartments=false&DocumentType=Any&DocumentStatus=Any&DateRangeKind=LetterDate&DateTimeRange.FromDateTime="+Формат(ДатаН1,"ДФ=""гггг-ММ-дд""")+"T21:00:00.000Z&DateTimeRange.ToDateTime="+Формат(ДатаК1,"ДФ=""гггг-ММ-дд""")+"T21:00:00.000Z&DateTimeRange.IsEmpty=false&TimezoneOffsetInMinutes=240&DateRange.Mode=Custom&DateRange.Custom.FromDate="+Формат(ДатаН,"ДФ=""гггг-ММ-дд""")+"&DateRange.Custom.ToDate="+Формат(ДатаК,"ДФ=""гггг-ММ-дд""")+"&IsEmpty=false&NextPage=false&PrevPage=false&ShowAll=false&PageNumber=0", 0);
	//Request.SetRequestHeader("Content-Length", Формат(StrLen(Body),"ЧГ="));
	Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
	Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
	Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");
	Request.Send();
	Request.WaitForResponse();
	
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Request.ResponseText);
	
	Задача=NNN.TaskId;
	
	Тысячу=0;
	NNN_1=Неопределено;
	Пока Истина Цикл
		
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(2);
		TimeStamp = 1000 * (CurrentDate() - Date(1970,1,1) - 3 * 3600);

		Request.Open("GET", BoxUrl + "/ExportDocumentList/GetTaskStatus?taskId="+Задача+"&_="+Формат(TimeStamp,"ЧГ="), 0);
		//Request.SetRequestHeader("Content-Length", Формат(StrLen(Body),"ЧГ="));
		//Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
		//Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
		//Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");
		Request.Send();
		Request.WaitForResponse();
		
		NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Request.ResponseText);
		Тысячу=Тысячу+1;
		Попытка
		Если NNN_1.status="Success"
			ИЛИ      Тысячу>1000
			Тогда
			
			Прервать;
		КонецЕслИ;
	Исключение
		Если Тысячу>1000 Тогда
			Прервать;
		Конецесли;
	    Конецпопытки;
		
		
	Конеццикла;
	Попытка
	Если   ЗначениеЗаполнено(NNN_1) И NNN_1.status="Success" Тогда
		
		Request.Open("GET",  "https://diadoc.kontur.ru/ShelfDownload?nameOnShelf=__userId__/docList/"+Задача+
		"&originalFileName="+КодСтр(NNN.ResultFileName), 0);
		
		
		//Request.SetRequestHeader("Content-Length", Формат(StrLen(Body),"ЧГ="));
		//Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
		//Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
		//Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");
		Request.Send();
		Request.WaitForResponse();
		текст=Новый ТекстовыйДокумент;
		текст.ДобавитьСтроку(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Request.ResponseText,"ISO-8859-1")));
		Если Текст.КоличествоСтрок()<=1 Тогда
			Возврат
		КонецЕсли;
		Для Сч=2 По Текст.КоличествоСтрок() Цикл
			Строк=Текст.ПолучитьСтроку(Сч);
			Если Не ЗначениеЗаполнено(Строк) Тогда
				Продолжить;
			КонецЕсли;
			ИсходнаяСтрока=Строк;
			
			мПодстроки = Новый Массив;
			//определяем позицию первого разделителя
			позРазделителя = Найти(ИсходнаяСтрока, ";");
			Пока позРазделителя > 0 Цикл
				//добавляем первую подстроку
				мПодстроки.Добавить(Лев(ИсходнаяСтрока, позРазделителя - 1));
				//обрезаем исходную строку до места окончания разделителя
				ИсходнаяСтрока = Сред(ИсходнаяСтрока, позРазделителя + 1);
				//обновляем позицию разделителя
				позРазделителя = Найти(ИсходнаяСтрока, ";");
			КонецЦикла;
			//оставшуюся строку тоже добавляем в массив
			мПодстроки.Добавить(ИсходнаяСтрока);
			//МассивМ=СтрРазделить(Строк,";");
			Попытка 	
				Сайт=мПодстроки[19];
			Исключение  
				Продолжить; 
			КонецПопытки;
			
			letterid=Сред(Сайт,Найти(Сайт,"letterId=")+9);
			letterid=Сред(letterid,1,Найти(letterid,"&")-1);
			entityid=Сред(Сайт,Найти(Сайт,"documentId=")+11);
			//entityid=Сред(entityid,1,найти(entityid);
			Статус=мПодстроки[13];
			Request.Open("GET", BoxUrl+"/Download/Attachment?letterId="+letterid+"&attachmentId="+entityid);
			Request.SetRequestHeader("Content-Type", "application/json;charset=UTF-8");
			Request.Send();
			Request.WaitForResponse();
			
			
			 //Возврат;
			
			//Статус=СокрЛП(Anchor.РодительскийУзел.СледующийСоседний.СледующийСоседний.ТекстовоеСодержимое);
			
			СообщениеОбОшибке="";
			Попытка
							РеквизитыЭлектр=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.РеквизитыЭлектронногоДокумента(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Request.ResponseText,"ISO-8859-1"),СообщениеОбОшибке);
						Исключение
							Продолжить;
						КонецПопытки;
							Если РеквизитыЭлектр.Загружать=Ложь Тогда
								Продолжить;
							КонецЕсли;
							Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
								Сообщить("Не удалось загрузить файл по документу "+Строка(letterid)+" Ошибка: "+СообщениеОбОшибке);
								ОшибкаЗагрузки=Истина;
								Продолжить;
							КонецЕсли;
							//РеквизитыЭлектр.Вставить("ТекстФайла",);
							
							РеквизитыЭлектр.ВставитЬ("ИдентификаторДокументооборота",letterid);
							РеквизитыЭлектр.ВставитЬ("ИдСамогоДокумента",entityid);
							МассивУп=Новый Массив;
							
							АдресРеквизитов=Новый Структура;
							//РеквизитыЭлектронногоДокумента.Вставить("ИдентификаторДокументооборота", ДанныеДокументооборота.ИдентификаторДокументооборота);
							АдресРеквизитов.Вставить("Статус",ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ВернутьСтатусДокументаКонтВЕБ(Статус));
							ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ЗагрузкаПриемкиИзXML(РеквизитыЭлектр,МассивУп,ЗаписыватьДанныеПриОтправкеЗаказа,Пользователь,АдресРеквизитов,ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОКонтур"),ОшибкаЗагрузки,Ложь);
							     
			
		Конеццикла;
		
		
		
	КонецЕсли;
Исключение
КонецПопытки;
	 Элементы.Приемкасписок.Обновить();;
	
	
	Возврат;
	Reader = New HTMLReader;
	Reader.SetString(Request.ResponseText);
	
	Builder = Новый DOMBuilder;
    DocHTML = Builder.Read(Reader);
	
	
	Страница=0;	
	letterid="";
	documentid="";
	previndexkey="";
	nextindexkey="";
	
	Пока Истина Цикл
	//Inbox.Clear();
	Были=ложь;
	For each Anchor In DocHTML.Anchors Do
		If Anchor.Title = "" Then
			Continue;
		EndIf;
			Doc = New Structure;
			For each Attr In Anchor.Attributes Do
				If Find(Attr.ИмяУзла, "-") = 0 Then
					Doc.Insert(Attr.ИмяУзла, Attr.Value);
				EndIf;
			EndDo;
			Doc.Insert("entityid", Doc.documentid);
			
			Если Были=Ложь Тогда
				letterid=Doc.letterid;
				documentid=Doc.documentid;
				Если ЗначениеЗаполнено(Doc.prevIndexKey) Тогда
					previndexkey=Doc.prevIndexKey;
				Иначе
					previndexkey=Doc.nextindexkey;
				КонецЕсли;
				nextindexkey=Doc.nextindexkey;
								
			КонецЕсли;
		      Были=Истина;
			
			
			
			Request.Open("GET", BoxUrl+"/Download/Attachment?letterId="+Doc.letterid+"&attachmentId="+Doc.entityid);
			Request.SetRequestHeader("Content-Type", "application/json;charset=UTF-8");
			Request.Send();
			Request.WaitForResponse();
			
			Статус=СокрЛП(Anchor.РодительскийУзел.СледующийСоседний.СледующийСоседний.ТекстовоеСодержимое);
			
			СообщениеОбОшибке="";
			Попытка
							РеквизитыЭлектр=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.РеквизитыЭлектронногоДокумента(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Request.ResponseText,"ISO-8859-1"),СообщениеОбОшибке);
						Исключение
							Продолжить;
						КонецПопытки;
							Если РеквизитыЭлектр.Загружать=Ложь Тогда
								Продолжить;
							КонецЕсли;
							Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
								Сообщить("Не удалось загрузить файл по документу "+Строка(Doc.letterid)+" Ошибка: "+СообщениеОбОшибке);
								ОшибкаЗагрузки=Истина;
								Продолжить;
							КонецЕсли;
							//РеквизитыЭлектр.Вставить("ТекстФайла",);
							
							РеквизитыЭлектр.ВставитЬ("ИдентификаторДокументооборота",Doc.letterid);
							РеквизитыЭлектр.ВставитЬ("ИдСамогоДокумента",Doc.entityid);
							МассивУп=Новый Массив;
							
							АдресРеквизитов=Новый Структура;
							//РеквизитыЭлектронногоДокумента.Вставить("ИдентификаторДокументооборота", ДанныеДокументооборота.ИдентификаторДокументооборота);
							АдресРеквизитов.Вставить("Статус",ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ВернутьСтатусДокументаКонтВЕБ(Статус));
							ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ЗагрузкаПриемкиИзXML(РеквизитыЭлектр,МассивУп,ЗаписыватьДанныеПриОтправкеЗаказа,Пользователь,АдресРеквизитов,ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОКонтур"),ОшибкаЗагрузки,Истина);
							           	
			
			
		
	//	NewRow = Inbox.Add();
	//	FillPropertyValues(NewRow, Anchor, , "Attributes");
	//	For each Attr In Anchor.Attributes Do
	//		If Attr.Name = "needsfnsregmessage" Then
	//			AttrValue = Attr.Value;
	//		ElsIf Attr.Value = "true" Then
	//			AttrValue = True;
	//		ElsIf Attr.Value = "false" Then
	//			AttrValue = False;
	//		Else
	//			AttrValue = Attr.Value;
	//		EndIf;
	//		NewRow.Attributes.Add(AttrValue, Attr.Name);
	//	EndDo;
EndDo;
Если Были=Ложь тогда
	Прервать;
КонецЕсли;

Страница=Страница+1;

	

	Request.Open("GET", BoxUrl + "/Folder/Inbox?DateRange.Custom.FromDate="+Формат(ДатаН,"ДФ=""гггг-ММ-дд""")+"&DateRange.Custom.ToDate="+Формат(ДатаК,"ДФ=""гггг-ММ-дд""")+"&DateRange.Mode=Custom&DateRangeKind=LetterDate&DateTimeRange.FromDateTime="+Формат(ДатаН1,"ДФ=""гггг-ММ-дд""")+"T21:00:00.000Z&DateTimeRange.ToDateTime="+Формат(ДатаК1,"ДФ=""гггг-ММ-дд""")+"T21:00:00.000Z&IsFilterActive=true&LetterCategory=Incoming&TimezoneOffsetInMinutes=180"+
	"&NextPage=true&ShowAll=true&Count=50&PageNumber="+xmlString(Страница)+"&FirstDocumentkey.letterid="+letterid+
	"&FirstDocumentKey.documentId="+documentid+"&FirstDocumentKey.indexKey"+previndexkey+"&LastDocumentkey.letterid="+letterid+
	"&LastDocumentKey.documentId="+documentid+"&LastDocumentKey.indexKey"+nextindexkey, 0);
	Request.Send();
	Request.WaitForResponse();
	
	Reader = New HTMLReader;
	Reader.SetString(Request.ResponseText);
	
	Builder = Новый DOMBuilder;
    DocHTML = Builder.Read(Reader);

//Запрос	GET /05c3b28f-9f9b-42b1-8fed-9908d6e111df/Folder/Inbox?IsFilterActive=true&Mode=Default&LetterCategory=Incoming&IncludeChildDepartments=false&DocumentType=Any&DocumentStatus=Any&DateRangeKind=LetterDate&DateTimeRange.FromDateTime=2020-08-30T20%3A00%3A00Z&DateTimeRange.ToDateTime=2020-09-16T20%3A00%3A00Z&DateTimeRange.IsEmpty=false&FirstDocumentKey.letterId=abbd8444-c019-481c-9a33-bad85993338e&FirstDocumentKey.documentId=7cdcdfbc-6bf8-4a79-a10d-fe781de2f80d&LastDocumentKey.letterId=abbd8444-c019-481c-9a33-bad85993338e&LastDocumentKey.documentId=7cdcdfbc-6bf8-4a79-a10d-fe781de2f80d&LastDocumentKey.indexKey=eyJRdWVyeUhhc2giOiJaQ0RBaVN3dTJpYWV3WFJTNjFuRGFBPT0iLCJJbmRleEtleSI6Imo3TERCWnVmc1VLUDdaa0kxdUVSMzVKNW9zdWhqdDlKczlYSzZObDhpYkR0VFdmd0dEVVFSSTlra1p2bXVQTmJqN0xEQlp1ZnNVS1A3WmtJMXVFUjN3QS9BQUFBS1FFSTJGWmJ5cE1yUDdJTmtaRFRtMTVHaW9aaVZZWDNhZlpDSDBuclRhMUdRbzlKMlJ6TklNQkgiLCJQYWdlRGlyZWN0aW9uIjoxfQ%3D%3D&TimezoneOffsetInMinutes=240&DateRange.Mode=Custom&DateRange.Custom.FromDate=2020-08-31&DateRange.Custom.ToDate=2020-09-16&IsEmpty=false&NextPage=true&ShowAll=true&Count=50&PageNumber=1 HTTP/1.1


	Конеццикла;
	
	#КонецЕсли
	
	//Возврат;
	
	//РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.
	 Элементы.Приемкасписок.Обновить();;
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьЗаказыКМИзИсторий(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Форм=ЭтаФорма;
	Если Форм.Организации.Количество()=0 Тогда
		Форм.ПодключитьсяКЦРПТ(Команда,Ложь);
	КонецЕсли;
	    Thumbprint_1=ПолучитьИзПользователя();
	
		АдресРаздробить=Thumbprint_1.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
		
	
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
			
			
		
					Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;

			Срегистра="";
			СерийныйНомер="";
	  	Куки=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитькукиВСУЗ(Thumbprint_1,,Срегистра,СерийныйНомер);
			
		Если Не ЗначениеЗаполнено(Куки) 
			ИЛИ Не ЗначениеЗаполнено(Срегистра) ИЛИ Не ЗначениеЗаполнено(СерийныйНомер) 
			Тогда
			
		//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(Thumbprint_1.Thumbprint_1,"");
		//	Если УжеОтправили<>Истина Тогда
		//		 ПолучитьТокенИИД(Команда,Истина)
		//	КонецЕсли;
			Возврат;
			
		КонецЕсли;
		
		ОМС=Сред(Куки,Найти(Куки,"omsId=")+6);
		
		Если Найти(ОМС,";")>0 Тогда
			ОМС=Сред(ОМС,1,Найти(ОМС,";")-1);
			
		КонецЕсли;
		
//		Объект.ИдентификаторСУЗ=ОМС;
							куки=СтрЗаменить(куки,"Path=/, ","");
							куки=СтрЗаменить(куки,"path=/,","");
		Куки=Куки+"certSerial="+СерийныйНомер+"; tokenPart1="+Сред(СРегистра,1,4000)+"; "+
					"tokenPart2="+Сред(СРегистра,4001) ;
		
		Страница=0;
		Пока Истина Цикл
			
							 СайтКСУЗ=Врег(Thumbprint_1.СайтКСУЗ);
							 Если    СайтКСУЗ="LP" Тогда
								 СайтКСУЗ="LIGHT"
							Конецесли;
							 
							 //HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/orders?limit=100&skip=0&productGroup="+СайтКСУЗ);
			
			   		HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/orders/history?limit=10&skip="+Формат(Страница*10)+"&productGroup="+СайтКСУЗ);

					Страница=Страница+1;
					//HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/orders?limit=10&skip="+Формат(Страница*10)+"&statistics[totalSignedCount]=75&statistics[totalNotSignedCount]=6&statistics[totalReadyCount]=75");
					HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
				
					
				Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
				Текст1=Ответ.ПолучитьТелоКакСтроку();
	        NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);
			Попытка
			Если NNN.orderInfos.Количество()=0 Тогда
				Прервать;
			КонецЕсли;
		Исключение
			Прервать;
		КонецПопытки;
					Для Каждого Стр ИЗ NNN.orderInfos Цикл
						
						
											HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/orders/history/"+Стр.orderid); //"static/1555676332000/js/main/preload.js");
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
											
												
											Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
											
											NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(СтрЗАменить(Текст1,"@class","class"));
											
											
											//HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/orders/"+Стр.orderid+"/buffer"); //"static/1555676332000/js/main/preload.js");
											//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											//HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
											//
											//	
											//Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
											//Текст1=Ответ.ПолучитьТелоКакСтроку();
											//
											//NNN_2=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(СтрЗАменить(Текст1,"@class","class"));
						
											СоздатьДокументНасервере_История(NNN_1,Организации[0].Организация,Пользователь);
						
					Конеццикла;
					
				КонецЦИкла;
КонецПроцедуры





Процедура СоздатьДокументНасервере_История(Стр,Организация,Пользователь)
	
	                                 	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказМарок_ХамелеонЦРПТ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказМарок_ХамелеонЦРПТ КАК ЗаказМарок_ХамелеонЦРПТ
		|ГДЕ
		|	ПОДСТРОКА(ЗаказМарок_ХамелеонЦРПТ._Order_ID, 1, 1000) = &_Order_ID";
	
 	Запрос.УстановитьПараметр("_Order_ID", Стр.id);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если НЕ ВыборкаДетальныеЗаписи.Следующий() Тогда
		                   orderInfo="";
		Если Стр.Свойство("orderInfo",orderInfo) Тогда
		Докум=Документы.ЗаказМарок_ХамелеонЦРПТ.СоздатьДокумент();
		Докум._Order_ID=Стр.id;
		Докум.Дата=дата(1970,1,1,1,0,0) + стр.createdTimestamp/1000;
		Докум.Организация=Организация;
		Докум.ТекущийПользователь=Пользователь;
		
		Докум.ШаблонЭтикетки=справочники.ШаблоныЭтикеток_ХамелеонЦРПТ.НайтиПоКоду("000000004");
		Докум.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен;
		                   сч=0;
		Для Каждого Стр_1 Из Стр.products Цикл
			Добав=Докум.Товары.Добавить();
			
			Добав.GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Стр_1.gtin));
			Если Не ЗначениеЗаполнено(Добав.GTIN) тогда
				СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
				СпрПр.GTIN=Число(Стр_1.gtin);
				СпрПр.Наименование=xmlString(Число(Стр_1.gtin));
				СпрПр.НаименованиеТовара=xmlString(Число(Стр_1.gtin));
				СпрПр.Записать();
				Добав.GTIN=СпрПр.Ссылка
			КонецЕсли;
			//Если NNN_2[Сч].totalCodes=-1 Тогда
				Добав.КоличествоКМ= Стр_1.totalCodes;
				Добав.КоличествоПолучено=Добав.КоличествоКМ;
			Добав.СтатусСтроки=Стр_1.bufferStatus;//Стр_1.bufferStatus;
			Сч=Сч+1;
			Добав.СпособФормированияСН=Перечисления.СпособФормированияСН_ХамелеонЦРПТ.ОператорИСМП;
			Добав.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаТовар;
				Если Добав.GTIN.СтранаПроизводства.Альфа2="RU" Тогда
						Добав.СпособВыпускаТоваров="Производство в РФ";
					Иначе
								Добав.СпособВыпускаТоваров="Ввезен в РФ";
						
							КонецЕсли;
							
							                             codeTnVed="";
							Если Стр_1.Свойство("codeTnVed",codeTnVed) Тогда
								Добав.КодТНВЭД=Стр_1.codeTnVed;
							КонецЕсли;
			
						Конеццикла;
						
						Если Докум.Товары.Количество()>0 Тогда
							
							товар=Докум.Товары[0].GTIN;
							Если Товар.СтранаПроизводства.Код="643"
								ИЛИ Не ЗначениеЗаполнено(товар.СтранаПроизводства) Тогда
								Докум.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ПроизведенВРФ;
							Иначе
								Докум.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ВвезенВРФ;
							КонецЕсли;
							
							
						КонецЕсли;
						
	Докум.Записать(РежимЗаписиДокумента.Запись);
						КонецЕсли;
		
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
КонецПроцедуры


&НаСервере
Процедура КоличествоКМВЗаказеОтображаемоеПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.КоличествоКМВЗаказеОтображаемое=КоличествоКМВЗаказеОтображаемое;
	РегДв.Записать(Истина);
КонецПроцедуры


&НаКлиенте
Процедура КоличествоКМВЗаказеОтображаемоеПриИзменении(Элемент)
	КоличествоКМВЗаказеОтображаемоеПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ПечатьУПДСКМ(Команда)
	// Вставить содержимое обработчика.
	
		Печать=Новый ТабличныйДокумент;
	Для Каждого Стр_1 Из Элементы.Отгрузка_Список.ВыделенныеСтроки Цикл
	ПечатьУПДНаСервере(печать,Стр_1,Истина);
	
	Конеццикла;
	Печать.АвтоМасштаб=Истина;
	Печать.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	
	Печать.ИмяПараметровПечати="Печать_УПД";
	Печать.Показать();
	
КонецПроцедуры


&НаКлиенте
Процедура ПечатьУПДРасширеннаяСКМ(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	
		Печать=Новый ТабличныйДокумент;
		Для Каждого Стр_1 Из Элементы.Отгрузка_Список.ВыделенныеСтроки Цикл
			
			
	ПечатьУПДНаСервере_Расширенная(печать,Стр_1,Истина);
	
	Конеццикла;
	Печать.АвтоМасштаб=Истина;
	Печать.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	
	Печать.ИмяПараметровПечати="Печать_УПД";
	Печать.Показать();
	
	
	
КонецПроцедуры


&НаКлиенте
Процедура ОтчетАртикул(Команда)
	// Вставить содержимое обработчика.
	Табл=Новый ТабличныйДокумент;
	ВывестиШапку(Табл);
	Для Каждого Стр_1 Из Элементы.ЗаказыТаблица.ВыделенныеСтроки Цикл
		ВывестиАртикулы(Табл,Стр_1);
	конеццикла;
	
	Табл.ТолькоПросмотр=Истина;
	Табл.Показать();
КонецПроцедуры
Процедура ВывестиШапку(Табл)
	
	Макет_1=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("АртикулНазваниеГТИНДляТаможни");
	ОблШ=Макет_1.ПолучитьОбласть("Шапка");
	Табл.Вывести(ОблШ);
КонецПроцедуры

Процедура ВывестиАртикулы(Табл,Ссылка)
	
	
	Макет_1=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("АртикулНазваниеГТИНДляТаможни");
	ОблШ=Макет_1.ПолучитьОбласть("Шапка");
	ОблС=Макет_1.ПолучитьОбласть("Строка");
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ
		|ИЗ
		|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
		|ГДЕ
		|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа";
	
	Запрос.УстановитьПараметр("ДокументЗаказа", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда 
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Стр=ВыборкаДетальныеЗаписи;
			//НСтр=Объект.Товары.НайтиСтроки(Новый Структура("ID",Стр.Order_Id_Line));
			//Если НСтр.Количество()=0  Тогда
			//	Продолжить;
			//Иначе
			//	НСтр=НСтр[0];
			//КонецЕсли;
			
			ГТИН=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьGTINСМарки(Стр.НомерКМ);
			//ГТИН=Сред(ГТИН,1,14);
			GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
			
			Если ЗначениеЗАполнено(GTIN.Размер) Тогда
				ОблС.Параметры.Размер=GTIN.Размер;
			Иначе
				ОблС.Параметры.Размер="--";
			КонецЕсли;
			ОблС.Параметры.Артикул=GTIN.МодельПроизводителяАртикул;
			ОблС.Параметры.НаименованиеТовара=GTIN;
			
			ОблС.Параметры.GTIN=ГТИН;
			
			//ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			CIS=Сред(ООО,1,31);
			
			//ГТИН=Сред(ООО,3);
			//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
			//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
			//CIS=CIS+Сред(ГТИН,1,15-1)+"21";
	//		//ГТИН=Сред(ГТИН,15+2);
	//		ТутУправляющийСимвол=ГТИН;
	//			 ;
	//CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
	//	ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
	//		ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
	//		
	//		Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
	//			CIS=CIS+Символы.ПС+"(240)";
	//	
	//			ГТИН=Сред(ГТИН,14+3);
	//		
	//			ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
	//			ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
	//			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
	//			CIS=CIS+ТутУправляющийСимвол;
	//		КонецЕсли;
	//		//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
	//		//CIS=СтрЗаменить(CIS,"%1D","");
	//		
	//		//Если           Найти(ГТИН,"91")>0 Тогда
	//			ГТИН=Сред(ГТИН,6);
	//		
			ОблС.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
			
			
			ГУДИ=GTIN.КодВУчетнойСистеме;
			//ОблМ.Параметры.ШтрихКод=ГУДИ;
			
			
			ОблС.Параметры.Комментарий=Ссылка.Комментарий;
			Табл.Вывести(ОблС);
					
			
		КонецЦикла;
	
	Иначе
		
		Для Каждого Стр Из Ссылка.КМИзAPI Цикл
			
			ГТИН=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьGTINСМарки(Стр.НомерКМ);
			//ГТИН=Сред(ГТИН,1,14);
			GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
			
			Если ЗначениеЗАполнено(GTIN.Размер) Тогда
				ОблС.Параметры.Размер=GTIN.Размер;
			Иначе
				ОблС.Параметры.Размер="--";
			КонецЕсли;
			ОблС.Параметры.Артикул=GTIN.МодельПроизводителяАртикул;
			ОблС.Параметры.НаименованиеТовара=GTIN;
			
			ОблС.Параметры.GTIN=ГТИН;
			
			//ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			ООО=РаскодироватьСтроку(Стр.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			CIS=Сред(ООО,1,31);;
			
	//		ГТИН=Сред(ООО,3);
	//		//CIS=CIS+Сред(ГТИН,1,Найти(ГТИН,"21")-1)+Символы.ПС+"(21)";
	//		//ГТИН=Сред(ГТИН,Найти(ГТИН,"21")+2);
	//		CIS=CIS+Сред(ГТИН,1,15-1)+Символы.ПС+"(21)";
	//		ГТИН=Сред(ГТИН,15+2);
	//		ТутУправляющийСимвол=ГТИН;
	//			 ;
	//CIS=CIS+Сред(ТутУправляющийСимвол,1,Найти(ТутУправляющийСимвол,Символ(29))-1);
	//	ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
	//		ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
	//		
	//		Если Сред(ТутУправляющийСимвол,14,3)="240" Тогда
	//			CIS=CIS+Символы.ПС+"(240)";
	//	
	//			ГТИН=Сред(ГТИН,14+3);
	//		
	//			ТутУправляющийСимвол=Сред(ГТИН,1,6-1);
	//			ТутУправляющийСимвол=КодироватьСтроку(ТутУправляющийСимвол,СпособКодированияСтроки.КодировкаURL);
	//			ТутУправляющийСимвол=СтрЗАменить(ТутУправляющийСимвол,"%1D","");
	//			CIS=CIS+ТутУправляющийСимвол;
	//		КонецЕсли;
	//		//CIS=КодироватьСтроку(CIS,СпособКодированияСтроки.КодировкаURL);
	//		//CIS=СтрЗаменить(CIS,"%1D","");
	//		
	//		//Если           Найти(ГТИН,"91")>0 Тогда
	//			ГТИН=Сред(ГТИН,6);
			
			ОблС.Параметры.cis=CIS;
			
			//ГУДИ=Сайт+"/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid="+Стр_В.ГУИД;
			
					ОблС.Параметры.Комментарий=Ссылка.Комментарий;
	
			
			ГУДИ=GTIN.КодВУчетнойСистеме;
			//ОблМ.Параметры.ШтрихКод=ГУДИ;
			
		
			Табл.Вывести(ОблС);
				
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВЭДОКонтур(Команда)
	// Вставить содержимое обработчика.
		// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
		МассивНакладных=Новый Массив;
	
	Для Каждого Стр_1 Из Элементы.Отгрузка_Список.ВыделенныеСтроки Цикл
		МассивНакладных.Добавить(Стр_1);
	Конеццикла;
	Если МассивНакладных.Количество()>0 тогда
		Форм=ПолучитьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаДокумента",
		Новый структура("Ключ",МассивНакладных[0]));
		Форм.КаталогВременныхФ=КаталогВременныхФайлов;
		Форм.ОтправитьВЭДОДиадок_Массив_Черновик(МассивНакладных);
	КонецЕсли;
	Элементы.Отгрузка_Список.Обновить();

	
КонецПроцедуры

&НаКлиенте
Процедура ПодписьИОтправкаВДиадок(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
		МассивНакладных=Новый Массив;
	
	Для Каждого Стр_1 Из Элементы.Отгрузка_Список.ВыделенныеСтроки Цикл
		МассивНакладных.Добавить(Стр_1);
	Конеццикла;
	Если МассивНакладных.Количество()>0 тогда
		Форм=ПолучитьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаДокумента",
		Новый структура("Ключ",МассивНакладных[0]));
		Форм.КаталогВременныхФ=КаталогВременныхФайлов;
		Форм.ОтправитьВЭДОДиадок_Массив_Подписать(МассивНакладных);
	КонецЕсли;
	Элементы.Отгрузка_Список.Обновить();

	
КонецПроцедуры

&НаСервере
Процедура ГрузитьПоступленияТолькоСМаркировкойПоЭДОПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ГрузитьПоступленияТолькоСМаркировкойПоЭДО=ГрузитьПоступленияТолькоСМаркировкойПоЭДО;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ГрузитьПоступленияТолькоСМаркировкойПоЭДОПриИзменении(Элемент)
	ГрузитьПоступленияТолькоСМаркировкойПоЭДОПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура БратьКоличествоИзТабличойЧастиПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.БратьКоличествоИзТабличойЧасти=БратьКоличествоИзТабличойЧасти;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура БратьКоличествоИзТабличойЧастиПриИзменении(Элемент)
	БратьКоличествоИзТабличойЧастиПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриФормированииXMLНеПолучитьИнформациюОКМВоВложенииПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ПриФормированииXMLНеПолучитьИнформациюОКМВоВложении=ПриФормированииXMLНеПолучитьИнформациюОКМВоВложении;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПриФормированииXMLНеПолучитьИнформациюОКМВоВложенииПриИзменении(Элемент)
	ПриФормированииXMLНеПолучитьИнформациюОКМВоВложенииПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СформироватьФайлПоКМНаСервере(Табл,Стр_1)  Экспорт
	// Вставить содержимое обработчика.
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	НомерЗаказа=Стр_1._Order_ID;
	ДатаЗ=Стр_1.Дата;
	Если Стр_1.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ВвезенВРФ Тогда
		Тип="Импорт"
	ИначеЕсли Стр_1.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.МаркировкаОстатков Тогда
		Тип="Остатки"
	Иначе
		Тип="РФ"
		
	Конецесли;
	
	Макт=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("ИдЗаказаДатаКИТип");
	ОблС=Макт.ПолучитьОбласть("Строка");
	ОблС.Параметры.НомерЗаказа=НомерЗаказа;
	ОблС.Параметры.ДатаЗ=ДатаЗ;
	ОблС.Параметры.Тип=Тип;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий
		|ИЗ
		|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
		|ГДЕ
		|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа";
	
	Запрос.УстановитьПараметр("ДокументЗаказа", Стр_1);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
			КИ=ВыборкаДетальныеЗаписи.НомерКМ_Короткий;
			ОблС.Параметры.КИ=КИ;
	        Табл.Вывести(ОблС);
		КонецЦикла;
		
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Иначе
		Для Каждого Стр_22 Из Стр_1.КМИзAPI Цикл
			КИ=Стр_22.НомерКМ_Короткий;
			ОблС.Параметры.КИ=КИ;
			Табл.Вывести(ОблС);
		Конеццикла;
	
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ВывестиШапку_Заказ(Табл)
	Макет=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("ИдЗаказаДатаКИТип");
	ОлШ=Макет.ПолучитьОбласть("Шапка");
	Табл.Вывести(ОлШ);
КонецПроцедуры
	
&НаКлиенте
Процедура СформироватьФайлПоКМ(Команда)
	Табл=Новый ТабличныйДокумент;
	
	ВывестиШапку_Заказ(Табл);
	Для Каждого Стр_1 Из Элементы.ЗаказыТаблица.ВыделенныеСтроки Цикл
		СформироватьФайлПоКМНаСервере(Табл,Стр_1);
	Конеццикла;
	Табл.ТолькоПросмотр=Истина;
	Табл.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзXMLВОтгрузку(Команда)
	// Вставить содержимое обработчика.
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Фильтр="Файл xml|*.xml";
	Диалог.Заголовок = НСтр("ru='Выберите файл для загрузки'", "ru");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлОтгрузка", ЭтаФорма);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте 
Процедура ЗагрузитьФайлОтгрузка(ВыбранныйФайл,ДД) Экспорт
	
	Если ВыбранныйФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	ДД = Новый ДвоичныеДанные(ВыбранныйФайл[0]);
	МассивФайлов.Добавить(Новый Структура("Имя,Дв",ВыбранныйФайл[0],ПоместитьВоВременноеХранилище(ДД)));
	
	ЗагрузитьНаСервереОтгрузка(МассивФайлов);
	Элементы.Отгрузка_Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНаСервереОтгрузка(МассивФайлов)
	
	МассивУппешно=Новый Массив;
	ОшибкаЗагрузки=Ложь;
	Для Каждого Стр_1 Из МассивФайлов Цикл
		Попытка
			СообщениеОбОшибке="";
			РеквизитыЭлектр=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.РеквизитыЭлектронногоДокумента(Стр_1.Дв,СообщениеОбОшибке);
			Если РеквизитыЭлектр.Загружать=Ложь Тогда
					Продолжить;
				КонецЕсли;
						
			Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
				Сообщить("Не удалось загрузить файл "+Стр_1.Имя+" Ошибка: "+СообщениеОбОшибке);
				ОшибкаЗагрузки=Истина;
				Продолжить;
			КонецЕсли;
			МассивУп=Новый Массив;
			АдресРеквизитов=Новый Структура;
			//РеквизитыЭлектронногоДокумента.Вставить("ИдентификаторДокументооборота", ДанныеДокументооборота.ИдентификаторДокументооборота);
			АдресРеквизитов.Вставить("Статус","");
			МассивУппешно.Добавить(ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ЗагрузкаОтгуркзкиИзXML(РеквизитыЭлектр,МассивУп,ЗаписыватьДанныеПриОтправкеЗаказа,Пользователь,АдресРеквизитов,Справочники.ЭДО_ХамелеонЦРПТ.ЭДОФайл,ОшибкаЗагрузки,Истина))
		Исключение
			
			Сообщить("Не удалось загрузить файл "+Стр_1.Имя+" Ошибка:");
			
		   	Инфо = ИнформацияОбОшибке();
		    Сообщить("Описание='" + Инфо.Описание + "'");
		    Сообщить("ИмяМодуля='" + Инфо.ИмяМодуля + "'");
		    Сообщить("НомерСтроки=" + Инфо.НомерСтроки);
		    Сообщить("ИсходнаяСтрока='" + Инфо.ИсходнаяСтрока + "'");
			ОшибкаЗагрузки=Истина;
			
		КонецПопытки;
	Конеццикла;
	
	Если ОшибкаЗагрузки<>Истина Тогда
		Для Каждого Стр_1 Из МассивУппешно Цикл
			
			Если ЗначениеЗаполнено(Стр_1) Тогда
				Сообщить("Создан документ "+Строка(Стр_1));
			КонецЕсли;
			
		Конеццикла;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьИзКаталогаВОтгрузку(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	//Диалог.МножественныйВыбор = Ложь;
	Диалог.Фильтр="Файл xml|*.xml";
	Диалог.Заголовок = НСтр("ru='Выберите каталог для загрузки(укажите любой  файл для загрузки всех файлов из каталога)'", "ru");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьКаталог_Отгрузка", ЭтаФорма);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте 
Процедура ЗагрузитьКаталог_Отгрузка(ВыбранныйФайл,ДД) Экспорт
	Если ВыбранныйФайл=Неопределено Тогда
		возврат;
	КонецЕсли;
	ФС=Новый Файл(ВыбранныйФайл[0]);
	
	НачатьПоискФайлов(Новый ОписаниеОповещения("ПослеПоискаФайлов_Отгурзка",ЭтаФорма),ФС.Путь,"*.xml",Истина);
	
КонецПроцедуры


&НаКлиенте 
Процедура ПослеПоискаФайлов_Отгурзка(ВыбранныеФайл,ДД) Экспорт
	МассивФайлов = Новый Массив;
	
	Для каждого Стр_1 Из ВыбранныеФайл Цикл
		ДД = Новый ДвоичныеДанные(Стр_1.ПолноеИмя);
			
		МассивФайлов.Добавить(Новый Структура("Имя,Дв",Стр_1.ПолноеИмя,ПоместитьВоВременноеХранилище(ДД)));
		
	КонецЦикла;
	ЗагрузитьНаСервереОтгрузка(МассивФайлов);
	
	Элементы.Отгрузка_Список.Обновить();
КонецПроцедуры


&НаСервере
Процедура БратьGLNОрганизацииДляФормированииАгрегацииПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.БратьGLNОрганизацииДляФормированииАгрегации=БратьGLNОрганизацииДляФормированииАгрегации;
	РегДв.Записать(Истина);
КонецПроцедуры


&НаКлиенте
Процедура БратьGLNОрганизацииДляФормированииАгрегацииПриИзменении(Элемент)
	БратьGLNОрганизацииДляФормированииАгрегацииПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьВсеВводыВОборот(Команда)
	// Вставить содержимое обработчика.
	ЗагрузитьИзЦРПТ_ВВОД("");
КонецПроцедуры


Функция Загрузить_ВВодВоБОРОТ(NNN_1,Пользователь)
	//NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
	
	//ДокументВ=Документы.ВводВОборот_ХамелеонЦРПТ.НайтиПоРеквизиту("_Order_ID",
	///NNN_1.number);
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	number="";
	Если 	НЕ NNN_1.Свойство("number",number) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводВОборот_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Документ.ВводВОборот_ХамелеонЦРПТ КАК ВводВОборот_ХамелеонЦРПТ
		|ГДЕ
		|	ПОДСТРОКА(ВводВОборот_ХамелеонЦРПТ._Order_ID, 1, 1000) = &_Order_ID";
	
	Запрос.УстановитьПараметр("_Order_ID", NNN_1.number);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ДокументВ=Неопределено;
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ДокументВ=ВыборкаДетальныеЗаписи.Ссылка;
		Возврат ДокументВ.Ссылка;
	КонецЕслИ;
	
	
	body=NNN_1.body;
	Если ЗначениеЗаполнено(ДокументВ) Тогда
		ДокумС=ДокументВ.ПолучитьОбъект();
	Иначе
		ДокумС=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
	КонецЕсли;
	ДатаДокумента=NNN_1.docDate;
	ДокумС.Дата=Дата(Сред(ДатаДокумента,1,4),Сред(ДатаДокумента,6,2),Сред(ДатаДокумента,9,2),Сред(ДатаДокумента,12,2),Сред(ДатаДокумента,15,2),Сред(ДатаДокумента,18,2));
	
	
	ДокумС._Order_ID=NNN_1.number;
	
	

	
	//ДокумС.ВидПервичногоДокумента=Перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ.RECEIPT;
	
	//ДокумС.ПричинаВыводаИзОборота=Перечисления.ПричинаВыводаИзОборота_ХамлеонЦРПТ.RETAIL;
	Если NNN_1.status="CHECKED_OK" Тогда
		ДокумС.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан;	
	ИначеЕсли NNN_1.status="CHECKED_NOT_OK" Тогда
		ДокумС.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ;	
		          Иначе
		Сообщить("Не известный статус "+ NNN_1.status)
	КонецЕсли;
	//ДокумС.Статус=	
	//ДокумС.ДатаПервичногоДокумента=Дата(1970,1,1)+body.dateTime;;
	//ДокумС.ОФД=Истина;
//	ДокумС.НомерПервичногоДокумента=xmlString(body.fiscalDocumentNumber);
	Если NNN_1.type="RECEIPT"	 Тогда
		ДокумС.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота;
	ИначеЕсли NNN_1.type="RECEIPT_RETURN"	 Тогда
		ДокумС.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотВозвратВРозницу;
	ИначеЕсли Найти(NNN_1.type,"LP_INTRODUCE_GOODS")=1	 Тогда
		ДокумС.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборот;
		

		products="";
		
		Если body.Свойство("products",products) Тогда
	
Для Каждого Стр_1 Из body.products Цикл
	
	
	ШтрихКод="";
	Если Стр_1.Свойство("uit_code",ШтрихКод) Тогда
				Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
				Число(Сред(ШтрихКод,3,14)));;
				Если не ЗначениеЗаполнено(Продукция)  Тогда
					Прод=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
					Прод.GTIN=Число(Сред(ШтрихКод,3,14));
					//Стр_1.свойство("name",Прод.Наименование);
					Прод.Наименование=xmlString(Прод.GTIN);
					Прод.НаименованиеТовара=xmlString(Прод.GTIN);
					Прод.Записать();
					Продукция=Прод.Ссылка;
				КонецЕсли;
			Иначе
				ШтрихКод=Стр_1.uitu_code
			;Продукция=Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка();
	Конецесли;
				Добав=ДокумС.СерийныеНомера.Добавить();
				Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
				Добав.НаименованиеТовара=Продукция;
				Добав.cis=ШтрихКод;
				
				
				ППП=ДокумС.Товары.НайтиСтроки(Новый структура("gtin",Продукция));
				Если ППП.Количество()=0 Тогда
					Добав_1=ДокумС.Товары.Добавить();
					Добав_1.GTIN=Продукция;
					Добав_1.КодТНВЭД=Продукция.КодТНВЭД;
					Добав_1.НомерСтрокиСвязи=Добав_1.НомерСтроки;
					Добав_1.КоличествоКМ=1;
					Добав_1.ДекларацияИлиСертификатСоответствия=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(ДокумС.Дата,
					Новый Структура("Продукция",Продукция)).Документ;
					//Добав_1.Цена=Стр_1.sum/100;
					//Добав_1.СуммаНДС=Стр_1.ndsSum/100;
					
				Иначе
					Добав_1=ППП[0];
					Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
					//Сумма=Добав_1.Цена*(Добав_1.КоличествоКМ-1)+Стр_1.sum/100;
					//Добав_1.Цена=Сумма/Добав_1.КоличествоКМ;
					//Добав_1.СуммаНДС=Добав_1.СуммаНДС+Стр_1.ndsSum/100
				КонецЕсли;
				Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
						
		
			КонецциклА;
		  КонецЕсли;
		
	ИначеЕсли Найти(NNN_1.type,"LP_GOODS_IMPORT")=1	 Тогда
		ДокумС.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотИмпорт;
		
		
			products="";
		
		Если body.Свойство("products",products) Тогда
	
	
Для Каждого Стр_1 Из body.products Цикл
	
	
	ШтрихКод="";
	Если Стр_1.Свойство("uit_code",ШтрихКод) Тогда
				Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
				Число(Сред(ШтрихКод,3,14)));;
				Если не ЗначениеЗаполнено(Продукция)  Тогда
					Прод=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
					Прод.GTIN=Число(Сред(ШтрихКод,3,14));
					//Прод.Наименование=Стр_1.name;
					Прод.Наименование=xmlString(Прод.GTIN);
					Прод.НаименованиеТовара=xmlString(Прод.GTIN);
					Прод.Записать();
					Продукция=Прод.Ссылка;
				КонецЕсли;
			Иначе
				ШтрихКод=Стр_1.uitu_code
			;Продукция=Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка();
	Конецесли;
				Добав=ДокумС.СерийныеНомера.Добавить();
				Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
				Добав.НаименованиеТовара=Продукция;
				Добав.cis=ШтрихКод;
				
				
				ППП=ДокумС.Товары.НайтиСтроки(Новый структура("gtin",Продукция));
				Если ППП.Количество()=0 Тогда
					Добав_1=ДокумС.Товары.Добавить();
					Добав_1.GTIN=Продукция;
					Добав_1.КодТНВЭД=Продукция.КодТНВЭД;
					Добав_1.НомерСтрокиСвязи=Добав_1.НомерСтроки;
					Добав_1.КоличествоКМ=1;
					Добав_1.ДекларацияИлиСертификатСоответствия=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(ДокумС.Дата,
					Новый Структура("Продукция",Продукция)).Документ;
					//Добав_1.Цена=Стр_1.sum/100;
					//Добав_1.СуммаНДС=Стр_1.ndsSum/100;
					
				Иначе
					Добав_1=ППП[0];
					Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
					//Сумма=Добав_1.Цена*(Добав_1.КоличествоКМ-1)+Стр_1.sum/100;
					//Добав_1.Цена=Сумма/Добав_1.КоличествоКМ;
					//Добав_1.СуммаНДС=Добав_1.СуммаНДС+Стр_1.ndsSum/100
				КонецЕсли;
				Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
						
		
			КонецциклА;
		    КонецЕсли;
	ИначеЕсли Найти(NNN_1.type,"LP_INTRODUCE_OST")=1	 Тогда
		ДокумС.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.МаркировкаОстатков;
			products="";
		
		Если body.Свойство("product_list",products) Тогда
	
		
Для Каждого Стр_1 Из body.product_list Цикл
	
	
	ШтрихКод="";
	Если Стр_1.Свойство("ki",ШтрихКод) Тогда
				Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
				Число(Сред(ШтрихКод,3,14)));;
				Если не ЗначениеЗаполнено(Продукция)  Тогда
					Прод=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
					Прод.GTIN=Число(Сред(ШтрихКод,3,14));
					//Прод.Наименование=Стр_1.name;
					Прод.Наименование=xmlString(Прод.GTIN);
					Прод.НаименованиеТовара=xmlString(Прод.GTIN);
					Прод.Записать();
					Продукция=Прод.Ссылка;
				КонецЕсли;
			Иначе
				ШтрихКод=Стр_1.kitu
			;Продукция=Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка();
	Конецесли;
				Добав=ДокумС.СерийныеНомера.Добавить();
				Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
				Добав.НаименованиеТовара=Продукция;
				Добав.cis=ШтрихКод;
				
				
				ППП=ДокумС.Товары.НайтиСтроки(Новый структура("gtin",Продукция));
				Если ППП.Количество()=0 Тогда
					Добав_1=ДокумС.Товары.Добавить();
					Добав_1.GTIN=Продукция;
					Добав_1.КодТНВЭД=Продукция.КодТНВЭД;
					Добав_1.НомерСтрокиСвязи=Добав_1.НомерСтроки;
					Добав_1.КоличествоКМ=1;
					Добав_1.ДекларацияИлиСертификатСоответствия=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(ДокумС.Дата,
					Новый Структура("Продукция",Продукция)).Документ;
					//Добав_1.Цена=Стр_1.sum/100;
					//Добав_1.СуммаНДС=Стр_1.ndsSum/100;
					
				Иначе
					Добав_1=ППП[0];
					Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
					//Сумма=Добав_1.Цена*(Добав_1.КоличествоКМ-1)+Стр_1.sum/100;
					//Добав_1.Цена=Сумма/Добав_1.КоличествоКМ;
					//Добав_1.СуммаНДС=Добав_1.СуммаНДС+Стр_1.ndsSum/100
				КонецЕсли;
				Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
						
		
			КонецциклА;
		  КонецЕсли;
	Конецесли;
	//ДокумС.ТипПервичногоДокумента=Перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ.RECEIPT;
	ДокумС.ТекущийПользователь=Пользователь;
	ДокумС.Организация=ДокумС.ТекущийПользователь.Организация;
	//ДокумС.РегистрационныйНомерККТ=body.kktREGID;
	//ДокумС.СерийныеНомера.Очистить();;
	//ДокумС.Товары.Очистить();
				Попытка
	  			ДокумС.Записать();
			исключение
				Для Каждого Стр Из ДокумС.СерийныеНомера Цикл
					Стр.cis=КодироватьСтроку(Стр.cis,СпособКодированияСтроки.КодировкаURL);
				Конеццикла;
				
	  			ДокумС.Записать();
			КонецПопытки;
	  Попытка
		  ДокумС.Записать(РежимЗаписидокумента.Проведение);
	  Исключение
	  КонецПопытки;
КонецФункции


&НаКлиенте
Процедура ЗагрузитьИзЦРПТ_ВВОД(Команда,УжеОтправили=Ложь)
	// Вставить содержимое обработчика.
	Thumbprint_1=Неопределено;
	Если НаКлиенте(Thumbprint_1) Тогда
		
		
		СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			Попытка
				СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
			исключение
				СРегистра=Неопределено;
			КонецПопытки;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			ПоказатьПредупреждение(,"Не удалось получить токен по организации");
			Возврат;
		Конецесли;
		
 	Если Ложь Тогда
		
		
	Иначе
		
		
		
		
		
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;                                                       
			
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/listV2?inputFormat=false&documentType=LP_INTRODUCE_GOODS,LP_INTRODUCE_GOODS_CSV,LP_INTRODUCE_GOODS_XML,LP_GOODS_IMPORT,LP_GOODS_IMPORT_XML,LP_GOODS_IMPORT_CSV,LP_INTRODUCE_OST,LP_INTRODUCE_OST_XML,LP_INTRODUCE_OST_CSV,CROSSBORDER,CROSSBORDER_XML,CROSSBORDER_CSV&limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=docDate&pageDir=NEXT");
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
							
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				//ЧтениеJSON = Новый ЧтениеJSON;
			Страница=0;
			Тотал=1;
			Пока Страница*СколькоНаСтранице<=Тотал Цикл
				
 					страница=Страница+1;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Тотал=NNN.total;
				
				Если СколькоНаСтранице>NNN.results.Количество() Тогда
					 Тотал=NNN.results.Количество()
				КонецЕсли;
				
				did="";
				docDate="";
				Для Каждого Стр Из  NNN.results Цикл
					did=Стр.number;
					docDate=Стр.docDate;
					//Если Стр.input=true 
					//	И Найти(Стр.type,"LP_SHIP_GOODS")=1
					//	Тогда
						
						HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.number+"/body");
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
						//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
						///Константин           
						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
						Текст1=Ответ.ПолучитьТелоКакСтроку();
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						
						МассивУп=Новый Массив;
						
						МассивКМ=Новый Массив;
						ЗаполненаТабличнаяЧастьПриемки=ЛожЬ;
						Принять_1=Ложь;
						ДокумПриемки=Загрузить_ВВодВоБОРОТ(NNN_1,Пользователь);	
						

						
									
							
					//	КонецЕсли;
						
				//	КонецЕсли;
				Конеццикла;
				
				Если Страница*СколькоНаСтранице>Тотал Тогда
					Прервать;
				КонецЕсли;
					
				 HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/listV2?inputFormat=false&documentType=LP_INTRODUCE_GOODS,LP_INTRODUCE_GOODS_CSV,LP_INTRODUCE_GOODS_XML,LP_GOODS_IMPORT,LP_GOODS_IMPORT_XML,LP_GOODS_IMPORT_CSV,LP_INTRODUCE_OST,LP_INTRODUCE_OST_XML,LP_INTRODUCE_OST_CSV,CROSSBORDER,CROSSBORDER_XML,CROSSBORDER_CSV&&limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=docDate&did="+did+"&orderedColumnValue="+docDate+"&pageDir=NEXT");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	Если Ответ.КодСостояния<>202 И Ответ.КодСостояния<>200  Тогда
		Если УжеОтправили=Истина Тогда
				Сообщить("Не удалось загрузить приходы с ЦРПТ, отсутствует доступ.");
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Возврат;
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ЗагрузитьИзЦРПТ_ВВОД(Команда,Истина)			
			КонецЕсли
	КонецЕсли;
	
	Конеццикла;	
				
				
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ЗагрузитьИзЦРПТ_ВВОД(Команда,Истина)			
			КонецЕсли
	Иначе
					Попытка
						//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							
						Исключение
							Попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								
								Если Найти(Текст1,"Billing contract")>0 И
									Найти(Текст1,"not signed by participant")>0 Тогда
									Сообщить("Договор биллинга для выбранной группы товаров не подписан участником");
								КонецЕсли;
								
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	
	
	
	
Возврат;
	
		
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;                                                       
			
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/listV2?inputFormat=false&documentType=LP_ACCEPT_GOODS&documentType=LP_ACCEPT_GOODS_XML&limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=docDate&pageDir=NEXT");
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
							
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				//ЧтениеJSON = Новый ЧтениеJSON;
			Страница=0;
			Тотал=1;
			Пока Страница*СколькоНаСтранице<=Тотал Цикл
				
 					страница=Страница+1;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Тотал=NNN.total;
				
				Если СколькоНаСтранице>NNN.results.Количество() Тогда
					 Тотал=NNN.results.Количество()
				КонецЕсли;
				
				did="";
				docDate="";
				Для Каждого Стр Из  NNN.results Цикл
					did=Стр.number;
					docDate=Стр.docDate;
					Если Истина ИЛИ (Стр.input=true 
						И Найти(Стр.type,"LP_SHIP_GOODS")=1)
						Тогда
						
						HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.number+"/body");
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
						//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
						///Константин           
						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
						Текст1=Ответ.ПолучитьТелоКакСтроку();
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						
						
						HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+NNN_1.body.release_order_number+"/body");
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
						//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
						///Константин           
						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
							Текст1=Ответ.ПолучитьТелоКакСтроку();
						NNN_2=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						NNN_3=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(NNN_1.content);//ПрочитатьJSON(ЧтениеJSON);
						
						ДокумПриемки=ОбновитьСтатусДокумента_Ввод(NNN_2,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа,,,NNN_3,МассивКМ,ЗагрузатьНаименованиеПриПриемке);	
						
						
						
						  						
						
					КонецЕсли;
				Конеццикла;
				
				Если Страница*СколькоНаСтранице>Тотал Тогда
					Прервать;
				КонецЕсли;
					
				 HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/listV2?inputFormat=false&&documentType=LP_ACCEPT_GOODS&documentType=LP_ACCEPT_GOODS_XML&limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=docDate&did="+did+"&orderedColumnValue="+docDate+"&pageDir=NEXT");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	Если Ответ.КодСостояния<>202 И Ответ.КодСостояния<>200  Тогда
		Если УжеОтправили=Истина Тогда
				Сообщить("Не удалось загрузить приходы с ЦРПТ, отсутствует доступ.");
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Возврат;
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ЗагрузитьИзЦРПТ_ВВОД(Команда,Истина)			
			КонецЕсли
	КонецЕсли;
	
	Конеццикла;	
				
				
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ЗагрузитьИзЦРПТ_ВВОД(Команда,Истина)			
			КонецЕсли
	Иначе
					Попытка
						//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							
						Исключение
							Попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								
								Если Найти(Текст1,"Billing contract")>0 И
									Найти(Текст1,"not signed by participant")>0 Тогда
									Сообщить("Договор биллинга для выбранной группы товаров не подписан участником");
								КонецЕсли;
								
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	
	
	
	
	КонецЕсли;
КонецЕсли;






















	
	//Элементы.Приемкасписок.Обновить();
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ОбновитьСтатусДокумента_Ввод(Заказ,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа,ОбновлятьВсе=Ложь,Документ_1=Неопределено,NNN_2=Неопределено,МассивПродукций=Неопределено,ЗагрузатьНаименованиеПриПриемке=Ложь,number="")
	
	
	//Добб.ОшибкаОтправки=Ошибка;
	//Добб.Статус=Статус;
	trade_recipient_inn="";
	Если Заказ=Неопределено тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	Код="";
	Если Заказ.Свойство("code",Код) Тогда
			Возврат Неопределено
	КонецЕсли;
	
		Если ЗначениеЗаполнено(Документ_1) Тогда
			Добб=Документ_1.ПолучитьОбъект();
		Иначе
			
		Если Заказ.body.Свойство("trade_recipient_inn",trade_recipient_inn) Тогда
		
		Организация=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",
		trade_recipient_inn);
		
		
	Иначе
	Попытка	
			Организация=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",
		Заказ.body.trade_participant_inn);
		
		
	Исключение
		Сообщить("Не удалось обработать документ "+Заказ.number);
		Возврат Неопределено;
	КонецПопытки

	КонецЕсли;
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			// Данный фрагмент построен конструктором.
			// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВводВОборот_ХамелеонЦРПТ.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.ВводВОборот_ХамелеонЦРПТ КАК ВводВОборот_ХамелеонЦРПТ
				|ГДЕ
				|	ВводВОборот_ХамелеонЦРПТ.Организация = &Организация
				|	И ВводВОборот_ХамелеонЦРПТ._Order_ID = &_Order_ID";
			
			Запрос.УстановитьПараметр("_Order_ID", Заказ.number);
			Запрос.УстановитьПараметр("Организация", Организация);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			
			Если НЕ  ВыборкаДетальныеЗаписи.Следующий() Тогда
				// Вставить обработку выборки ВыборкаДетальныеЗаписи
			
			//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	      
				Добб_1=ДОкументы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
				
				//Добб_1.УстановитьСсылкуНового(Добб);
				Добб=Добб_1;
				Добб.Дата=ТекущаяДата();

			Иначе
				Добб=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
				ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ЧастичноПринят
				Тогда
				
				//Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				///	 ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапистьПриемкку(Добб.Ссылка,Текст1);
					
				//Конецесли;
			
				Если Добб.Товары.Количество()>0 Тогда
					Если ОбновлятьВсе=Истина Тогда
						Добб=Добб.Ссылка.ПолучитьОбъект();
					Иначе
						Возврат Добб.Ссылка;
					КонецЕсли;
				Иначе
					Добб=Добб.Ссылка.ПолучитьОбъект();
				КонецЕсли;
			КонецЕсли;
			//Иначе
			//	Добб=Добб.ПолучитьОбъект();
			КонецЕсли;
		КонецЕсли;
		//Добб.ДокументОтгрузки=Заказ.number;
			Добб._Order_ID=Заказ.number;
		Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен;
		Если Добб.Проведен Тогда
			Добб.Записать(режимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Добб.Записать(режимЗаписиДокумента.Запись);
		КонецЕсли;
		
		trade_recipient_inn="";
		//Добб.ДатаВходящий=Заказ.body.document_date;
		ДатаДокумента=Заказ.docDate;
		Добб.Дата=Дата(Сред(ДатаДокумента,1,4),Сред(ДатаДокумента,6,2),Сред(ДатаДокумента,9,2),Сред(ДатаДокумента,12,2),Сред(ДатаДокумента,15,2),Сред(ДатаДокумента,18,2));
		
		Добб.ТекущийПользователь=Пользователь;
		
		Добб.Организация=Организация;
		
		Добб.Товары.Очистить();
		Добб.СерийныеНомера.Очистить();
		
		//Добб.Короба.Очистить();
		
		Сч=0;
		
		
		
		
//	Если   Заказ.type="LP_SHIP_GOODS_CSV" Тогда

		//Для Каждого Стр_з из ЗАказ.body.products_list Цикл
		//		Продукция=СоздатьНайтиGTIN(Стр_з);
		//		
		//		Если Не ЗначениеЗаполнено(Продукция) Тогда
		//			children="";
		//			еСЛИ               Стр_з.Свойство("children",children) Тогда
		//				Для Каждого Стр_children Из children Цикл
		//					ШтрихКод="";
		//					Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
		//						//ШтрихКод=Стр_children.uit_code;
		//						Продукция=СоздатьНайтиGTIN(Стр_children);
		//						Если ЗначениеЗАполнено(Продукция) тогда
		//							Прервать;
		//						КонецЕсли;
		//							
		//					Иначе
		//						Продукция=РекурсияУпаковки_Приход_Продукция(Стр_children);
		//						Если ЗначениеЗаполнено(Продукция) Тогда
		//							Прервать;
		//						КонецЕслИ;
		//					КонецЕсли;
		//					//ДобавК.КоличестоКМ=НСтр.КоличествоНомеровКМ;
		//					
		//				КонецЦикла;
		//			КонецЕсли;
		//	КонецЕсли;
		//	
		//	ДобавилиПр=Ложь;
		//	
		//		
		//	Если ЗначениеЗАполнено(Продукция) тогда
		//		product_description=Строка(Продукция);
		//		НСтр=Добб.Товары.НайтиСтроки(Новый Структура("GTIN",Продукция));
		//		Если НСтр.Количество()=0 Тогда
		//			НСТр=Добб.Товары.Добавить();
		//			НСтр.GTIN=Продукция;
		//			НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
		//		Иначе
		//			НСТР=НСТР[0];
		//			НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
		//		КонецЕсли;
		//		НСТр.НаименованиеТовара=Продукция.Наименование;
		//		ДобавилиПр=Истина;
		//	Иначе
		//		product_description="НЕТ";
		//		еСЛИ                        Стр_з.Свойство("product_description",product_description) Тогда
		//			
		//		Иначе
		//			children="";
		//			еСЛИ                        Стр_з.Свойство("children",children) Тогда
		//				Для Каждого Стр_children Из children Цикл
		//					                                                                       product_description="";
		//						еСЛИ                   Стр_children.Свойство("product_description",product_description) Тогда
		//						//	НСТр=Добб.Товары.Добавить();
		//						//	НСТр.НаименованиеТовара=product_description;
		//						//	НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
		//							Прервать;
		//						КонецЕсли;
		//					
		//				КонецЦикла;
		//				
		//			КонецЕсли;
		//			
		//			
		//		КонецЕсли;
		//		
		//		НСтр=Добб.Товары.НайтиСтроки(Новый Структура("НаименованиеТовара",product_description));
		//		Если НСтр.Количество()=0 Тогда
		//		
		//			НСТр=Добб.Товары.Добавить();
		//			НСТр.НаименованиеТовара=product_description;
		//			НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
		//		Иначе
		//			НСТР=НСТР[0];
		//			НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
		//		КонецЕсли;
		//		
		//	КонецЕслИ;
		//	КоличествоКМ=0;
		//			children="";
		//			еСЛИ                        Стр_з.Свойство("children",children) Тогда
		//				Для Каждого Стр_children Из children Цикл
		//					ДобавК=Добб.Короба.Добавить();
		//					ДобавК.НомерКороба=Стр_З.uitu_code;
		//					ШтрихКод="";
		//					Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
		//						ШтрихКод=Стр_children.uit_code;
		//						КоличествоКМ=КоличествоКМ+1;
		//						НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
		//					Иначе
		//						РекурсияУпаковки_Приход(Стр_children,НСтр,Добб,КоличествоКМ);
		//					КонецЕсли;
		//					//ДобавК.КоличестоКМ=НСтр.КоличествоНомеровКМ;
		//					ДобавК.ШтрихКод=ШтрихКод;
		//					
		//				КонецЦикла;
		//			Иначе
		//				НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
		//				КоличествоКМ=1;
		//			КонецЕсли;

		//	
		//		Добав=Добб.СерийныеНомера.Добавить();
		//		Добав.КоличествоКМ=КоличествоКМ;
		//		Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
		//		стр_З.Свойство("product_cost",Добав.Цена);
		//		Если Заказ.type="LP_SHIP_GOODS" Тогда
		//			Добав.Цена=Добав.Цена/100;
		//		КонецЕсли;	
		//		//Добав.Цена=Стр_з.product_cost;
		//		//=Стр_з.product_tax;
		//		стр_З.Свойство("product_tax",Добав.НДС);
		//		Если Заказ.type="LP_SHIP_GOODS" Тогда
		//			Добав.НДС=Добав.НДС/100;
		//		КонецЕсли;
		//		Добав.НаименованиеТовараСтрокой=НСТр.НаименованиеТовара;
		//		uit_code="";
		//		Если Стр_з.Свойство("uit_code",uit_code) И ЗначениеЗаполнено(uit_code) тогда
		//			Добав.cis=uit_code;
		//			Добав.GTIN=Сред(Добав.cis,3,14);
		//		Иначе
		//			Добав.cis=Стр_з.uitu_code;
		//			Добав.НомерКороба=Стр_з.uitu_code;
		//			
		//		КонецЕсли;
		//		Добав.НаименованиеТовара=Продукция;
		//		Если ЗначениеЗаполнено(Продукция)   Тогда
		//			Добав.GTIN=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(Добав.НаименованиеТовара.GTIN),14,"0");
		//		КонецЕсли;
		//		Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан Тогда
		//			Добав.Принят=Истина;
		//		Иначе
		//			Добав.Принят=Ложь;
		//		КонецЕсли;
		//		
		//		Попытка
		//		Если NNN_2<>Неопределено Тогда
		//			accepted=Неопределено;
		//			Если NNN_2.products[Сч].Свойство("accepted",accepted) Тогда
		//				
		//				Если accepted="true" ИЛИ accepted=Истина Тогда
		//					Добав.Принят=Истина;
		//				Иначе
		//					Добав.Принят=Ложь;
		//					
		//				КонецЕсли;
		//			Иначе
		//				Добав.Принят=Ложь;
		//			Конецесли;
		//			Сч=Сч+1;
		//		Конецесли;
		//	Исключение
		//		КонецПопытки;
		//		НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
		//		НСтр.Сумма=НСтр.Сумма+Добав.цена;
		//		НСтр.НДС=НСтр.НДС+Добав.НДС;
		//		НСтр.Цена=НСТР.Сумма/НСтр.КОличествоКМ;
		//		
		//		
		//		
		//	Конеццикла;
		
			
//		Конецесли;
		
	//КонецЕсли;
Сч=0;		
Если   Найти(Заказ.type,"CSV")>0 Тогда
		
		
		Текст=Новый ТекстовыйДокумент;
		Текст.УстановитьТекст(Заказ.content);
		
		//ГрузимКМ=Ложь;
		
		Для сч_2=5 По Текст.КоличествоСтрок() Цикл
			СтрокаТ=Текст.ПолучитьСтроку(Сч_2);
			Если Сред(СтрокаТ,1,1)="""" Тогда
				ШтрихКод=СтрЗаменить(Сред(СтрокаТ,2),"""""",Символ(29));
				ШтрихКод=Сред(ШтрихКод,1,Найти(ШтрихКод,"""")-1);
				ШтрихКод=Стрзаменить(Штрихкод,Символ(29),"""");
				СтрокаТ=СтрЗаменить(Сред(СтрокаТ,2),"""""",Символ(29));
				СтрокаТ=Сред(СтрокаТ,Найти(СтрокаТ,"""")+2);
			Иначе
				ШтрихКод=Сред(СтрокаТ,1,Найти(СтрокаТ,",")-1);
				СтрокаТ=Сред(СтрокаТ,Найти(СтрокаТ,",")+1);
			КонецЕсли;
			Марка=Неопределено;
			Если ЗначениеЗаполнено(ШтрихкОД) Тогда
				Марка=ШтрихкОД;
				
			КонецЕсли;
			
			НомерБбокса=Сред(СтрокаТ,1,Найти(СтрокаТ,",")-1);
			
			Попытка
				СтрокаТ=Сред(СтрокаТ,Найти(СтрокаТ,",")+1);
				Цена=Сред(СтрокаТ,1,Найти(СтрокаТ,",")-1);
				Цена=СтрЗаменить(Цена,"""","");
				Цена=СтрЗаменить(Цена,",",".");
				Пока Найти(Цена,".")>0 Цикл
					СуммаНДПроверка=Сред(Цена,Найти(Цена,".")+1);
					Если Найти(СуммаНДПроверка,".")=0 Тогда
						Прервать;
					КонецЕсли;
					СуммаНДСПроверка=Сред(Цена,1,Найти(Цена,".")-1);
					Цена=СуммаНДСПроверка+Сред(Цена,Найти(Цена,".")+1);

				Конеццикла;
			исключение
				
				Сообщить("Не удалось получить цену");
			КонецПопытки;
			
			Если ЗначениеЗаполнено(Цена) Тогда
				Цена=Число(Цена);
			Иначе
				Цена=0;
			КонецЕсли;
			
			
			 //Цена=Число(СтрЗаменить(Сред(СтрокаТ,1,Найти(СтрокаТ,"""")-1),",","."));
			 СтрокаТ=Сред(СтрокаТ,Найти(СтрокаТ,",")+1);
			 
			 СуммаНДС=СтрокаТ;
			СуммаНДС=СтрЗаменить(СуммаНДС,"""","");
			СуммаНДС=СтрЗаменить(СуммаНДС,",",".");
			Попытка
			
			Пока Найти(СуммаНДС,".")>0 Цикл
				СуммаНДПроверка=Сред(СуммаНДС,Найти(СуммаНДС,".")+1);
				Если Найти(СуммаНДПроверка,".")=0 Тогда
					Прервать;
				КонецЕсли;
				СуммаНДСПроверка=Сред(СуммаНДС,1,Найти(СуммаНДС,".")-1);
				СуммаНДС=СуммаНДСПроверка+Сред(СуммаНДС,Найти(СуммаНДС,".")+1);

			Конеццикла;
			
			 ЕСли ЗначениеЗаполнено(СуммаНДС) Тогда
				 
			 	СуммаНДС=Число(СуммаНДС);
			Иначе
				СуммаНДС=0;
			КонецЕсли;
			 
		Исключение
			Сообщить("Не удалось получить НДС");
		КонецПопытки;
			     Продукция=Неопределено;
			 Если ЗначениеЗаполнено(Марка) Тогда
				 Продукция=СоздатьНайтиGTIN_ГТИН(Марка);
			 Иначе
				 Марка=НомерБбокса ;
						КонецЕсли;
						
						
						Строки=Добб.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Марка));
						
						Если Строки.Количество()>0 Тогда
							
							
							Добав=Строки[0];
				
							
				Попытка
							Исключение
				КонецПопытки;						
										
							
							
							Продолжить;
						КонецЕсли;
		
			Если ЗначениеЗАполнено(Продукция) тогда
				product_description=Строка(Продукция);
				НСтр=Добб.Товары.НайтиСтроки(Новый Структура("GTIN",Продукция));
				Если НСтр.Количество()=0 Тогда
					НСТр=Добб.Товары.Добавить();
					НСтр.GTIN=Продукция;
					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
				Иначе
					НСТР=НСТР[0];
					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
				КонецЕсли;
				//НСТр.НаименованиеТовара=Продукция.Наименование;
				НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
									
			Иначе
				product_description="";
				//еСЛИ                        Стр_з.Свойство("product_description",product_description) Тогда
					НСТр=Добб.Товары.Добавить();
					НСТр.НаименованиеТовара=Марка;
					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
								
			КонецЕслИ;
			КоличествоКМ=0;
					children="";
						
				Добав=Добб.СерийныеНомера.Добавить();
//				Добав.КоличествоКМ=КоличествоКМ;
				Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
		//		Добав.НаименованиеТовараСтрокой=НСТр.НаименованиеТовара;
					Добав.cis=Марка;
					Добав.GTIN=Сред(Марка,3,14);
				Добав.НаименованиеТовара=Продукция;
				Если ЗначениеЗаполнено(Продукция)   Тогда
					Добав.GTIN=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(Добав.НаименованиеТовара.GTIN),14,"0");
				КонецЕсли;
				//Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан Тогда
				//	Добав.Принят=Истина;
				//Иначе
					//Добав.Принят=Ложь;
				//КонецЕсли;
				
				
								НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
				
				
						
		Конеццикла;
		
	
Иначе             //////JSON
		Сообщить("Не известный тип документа "+Заказ.type);
		  Возврат Неопределено;
		
		//Текст=Новый ТекстовыйДокумент;
		//Текст.УстановитьТекст(Заказ.content);
		
		NNN=Заказ.body;
		//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Заказ.content);
		
		//ГрузимКМ=Ложь;
		
		Для Каждого Стр_з из NNN.products Цикл
			  uit_code="";
			  cis="";
				Если Стр_з.Свойство("uit_code",uit_code) тогда
					cis=uit_code;
				//Иначе
				//	cis=Стр_з.uitu_code;
					
				КонецЕсли;
				Если Не ЗначениеЗаполнено(cis) Тогда
					
					cis=Стр_з.uitu_code;
				КонецЕсли;
				
						
						Строки=Добб.СерийныеНомера.НайтиСтроки(Новый Структура("cis",cis));
						
						Если Строки.Количество()>0 Тогда
							
							
							Добав=Строки[0];
										
	
				Попытка
				Если NNN_2<>Неопределено Тогда
					accepted=Неопределено;
					Если NNN_2.products[Сч].Свойство("accepted",accepted) Тогда
						Если accepted="true" ИЛИ accepted=Истина Тогда
							Добав.Принят=Истина;
						Иначе
							Добав.Принят=Ложь;
							
						КонецЕсли;
					Иначе
						Добав.Принят=Ложь;
					Конецесли;
					Сч=Сч+1;
				Конецесли;
			Исключение
				КонецПопытки;						
										
							
							
							Продолжить;
						КонецЕсли;
			
			
				Продукция=СоздатьНайтиGTIN(Стр_з);
				
				Если Не ЗначениеЗаполнено(Продукция) Тогда
					children="";
					еСЛИ               Стр_з.Свойство("children",children) Тогда
						Для Каждого Стр_children Из children Цикл
							ШтрихКод="";
							Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
								//ШтрихКод=Стр_children.uit_code;
								Продукция=СоздатьНайтиGTIN(Стр_children);
								Если ЗначениеЗАполнено(Продукция) тогда
									Прервать;
								КонецЕсли;
									
							Иначе
								Продукция=РекурсияУпаковки_Приход_Продукция(Стр_children);
								Если ЗначениеЗаполнено(Продукция) Тогда
									Прервать;
								КонецЕслИ;
							КонецЕсли;
							//ДобавК.КоличестоКМ=НСтр.КоличествоНомеровКМ;
							
						КонецЦикла;
					КонецЕсли;
			КонецЕсли;
				
				
			Если ЗначениеЗАполнено(Продукция) тогда
				product_description=Строка(Продукция);
				НСтр=Добб.Товары.НайтиСтроки(Новый Структура("GTIN",Продукция));
				Если НСтр.Количество()=0 Тогда
					НСТр=Добб.Товары.Добавить();
					НСтр.GTIN=Продукция;
					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
				Иначе
					НСТР=НСТР[0];
					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
				КонецЕсли;
				НСТр.НаименованиеТовара=Продукция.Наименование;
				
			Иначе
				product_description="НЕТ";
				еСЛИ                        Стр_з.Свойство("product_description",product_description) Тогда
				Иначе
					children="";
					еСЛИ                        Стр_з.Свойство("children",children) Тогда
						Для Каждого Стр_children Из children Цикл
							                                                                       product_description="";
								еСЛИ                   Стр_children.Свойство("product_description",product_description) Тогда
									//НСТр=Добб.Товары.Добавить();
									//НСТр.НаименованиеТовара=product_description;
									//НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
									Прервать;
								КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
					
				КонецЕсли;
				
				НСтр=Добб.Товары.НайтиСтроки(Новый Структура("НаименованиеТовара",product_description));
				Если НСтр.Количество()=0 Тогда
					НСТр=Добб.Товары.Добавить();
					НСТр.НаименованиеТовара=product_description;
					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
				Иначе
					НСТР=НСТР[0];
					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
				КонецЕсли;
				
			КонецЕслИ;
			КоличествоКМ=0;
					children="";
					еСЛИ                        Стр_з.Свойство("children",children) Тогда
						Для Каждого Стр_children Из children Цикл
							ШтрихКод="";
							Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
								ШтрихКод=Стр_children.uit_code;
								Если Добб.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Стр_З.uitu_code,ШтрихКод)).Количество()=0 Тогда
							ДобавК=Добб.Короба.Добавить();
							ДобавК.НомерКороба=Стр_З.uitu_code;
							ДобавК.ШтрихКод=ШтрихКод;
								КонецЕсли;
								КоличествоКМ=КоличествоКМ+1;
								НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
							Иначе
								Если Добб.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Стр_З.uitu_code,ШтрихКод)).Количество()=0 Тогда
							ДобавК=Добб.Короба.Добавить();
							ДобавК.НомерКороба=Стр_З.uitu_code;
							ДобавК.ШтрихКод=ШтрихКод;
								КонецЕсли;
								РекурсияУпаковки_Приход(Стр_children,НСтр,Добб,КоличествоКМ);
							КонецЕсли;
							//ДобавК.КоличестоКМ=НСтр.КоличествоНомеровКМ;
							
						КонецЦикла;
					Иначе
						НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
						КоличествоКМ=1;
					КонецЕсли;

			
				Добав=Добб.СерийныеНомера.Добавить();
				Добав.КоличествоКМ=КоличествоКМ;
				Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
				стр_З.Свойство("product_cost",Добав.Цена);
				Если Заказ.type="LP_SHIP_GOODS" Тогда
					Добав.Цена=Добав.Цена/100;
				КонецЕсли;	
				//Добав.Цена=Стр_з.product_cost;
				//=Стр_з.product_tax;
				стр_З.Свойство("product_tax",Добав.НДС);
				Если Заказ.type="LP_SHIP_GOODS" Тогда
					Добав.НДС=Добав.НДС/100;
				КонецЕсли;
				Добав.НаименованиеТовараСтрокой=НСТр.НаименованиеТовара;
				uit_code="";
				Если Стр_з.Свойство("uit_code",uit_code) И ЗначениеЗаполнено(uit_code) тогда
					Добав.cis=uit_code;
					Добав.GTIN=Сред(Добав.cis,3,14);
				Иначе
					Добав.cis=Стр_з.uitu_code;
					Добав.НомерКороба=Стр_з.uitu_code;
					
				КонецЕсли;
				Добав.НаименованиеТовара=Продукция;
				Если ЗначениеЗаполнено(Продукция)   Тогда
					Добав.GTIN=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(Добав.НаименованиеТовара.GTIN),14,"0");
				КонецЕсли;
				//Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан Тогда
				//	Добав.Принят=Истина;
				//Иначе
				//	Добав.Принят=Ложь;
				//КонецЕсли;
				
				
				
				Попытка
					Если NNN_2.products[Сч].Свойство("accepted",accepted) Тогда
						Если accepted="true" ИЛИ accepted=Истина Тогда
							Добав.Принят=Истина;
						Иначе
							Добав.Принят=Ложь;
							
						КонецЕсли;
					Иначе
						Добав.Принят=Ложь;
					Конецесли;
					Сч=Сч+1;
					
			Исключение
				КонецПопытки;
				НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
				НСтр.Сумма=НСтр.Сумма+Добав.цена;
				НСтр.НДС=НСтр.НДС+Добав.НДС;
				НСтр.Цена=НСТР.Сумма/НСтр.КОличествоКМ;
				
				
				
			Конеццикла;
		
		
		
		КонецЕсли;
		
		
		
		Если Заказ.status="CHECKED_NOT_OK"
						ИЛИ Заказ.status="PROCESSING_ERROR"
			Тогда
			Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ;
		ИначеЕсли Заказ.status="CHECKED_OK" Тогда
			Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан;
		Иначе
			Сообщить("Не известный статус "+Заказ.status);
			Возврат Неопределено;
		КонецЕсли;
	
		Если Найти(Заказ.type,"LP_INTRODUCE_OST")=1 Тогда
			Добб.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.МаркировкаОстатков;
		Иначе
			Сообщить("Не известный тип документа "+Заказ.type);
			Возврат Неопределено;
		КонецЕсли;
	
		
	Добб.Записать();
	Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
		ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ЧастичноПринят
		
		Тогда
		Попытка
			Добб.ПометкаУдаления=Ложь;
			Добб.Записать(РежимЗаписиДокумента.Проведение) 
		Исключение
		КонецПопытки;
	КонецЕсли;
	Возврат Добб.Ссылка;
Конецфункции



&НаКлиенте
Процедура ОбновитьСтатусыПоВемОрганизациямПриемка(Команда) Экспорт
	// Вставить содержимое обработчика.
	СтарыйП=Пользователь;
	ВернутьВсехПользователей=ВернутьВсехПользователей();
	
	Для Каждого Стр_1 Из    ВернутьВсехПользователей Цикл
		Пользователь=Стр_1;
		ОбновитьСтатусыДокументов(Команда,,,,,1);
		
	Конеццикла;
	Пользователь=СтарыйП;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыПоВемОрганизациямВводВОборот(Команда) Экспорт
	// Вставить содержимое обработчика.
	СтарыйП=Пользователь;
	ВернутьВсехПользователей=ВернутьВсехПользователей();
	
	Для Каждого Стр_1 Из    ВернутьВсехПользователей Цикл
		Пользователь=Стр_1;
		ОбновитьСтатусыДокументов(Команда,,,,,2);
		
	Конеццикла;
	Пользователь=СтарыйП;
	
	
КонецПроцедуры



&НаКлиенте
Процедура ОбновитьСтатусыПоВемОрганизациямАгрегации(Команда) Экспорт
	// Вставить содержимое обработчика.
	СтарыйП=Пользователь;
	ВернутьВсехПользователей=ВернутьВсехПользователей();
	
	Для Каждого Стр_1 Из    ВернутьВсехПользователей Цикл
		Пользователь=Стр_1;
		ОбновитьСтатусыДокументов(Команда,,,,,3);
		
	Конеццикла;
	Пользователь=СтарыйП;
	
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьВводВОборотИзXML(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
		// Вставить содержимое обработчика.
		
	Перем Файл;
	ВклЗаг = 0;
	//ДанныеЛиста.Очистить();
	Режим=РежимДиалогаВыбораФайла.Открытие;
	нДиалог= НОвый ДиалогВыбораФайла(Режим);
	//Фильтр="Файл xls/txt/xml|*.xls;*.xlsx;*.txt;*.xml|Файл txt|*.txt|Файл xls|*.xls;*.xlsx|Файл xml|*.xml";
	Фильтр="Файл xml|*.xml";
	нДиалог.МножественныйВыбор=Истина;
	нДиалог.Фильтр=Фильтр;
	нДиалог.Заголовок="Выберите файл для загрузки..." ;
	нДиалог.Показать(Новый ОписаниеОповещения("ПослеВыбораФайла_ВводВОБОРОТ_ХамелеонЦРПТ",ЭтаФорма,Ложь));
	
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция дополнитьСтроку(Ср)
	ВОзврат Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Ср,14,"0");
	
Конецфункции


Процедура СоздатьАгрегацииПоФайлу(ДвоичнДанные,МассивАгрегация)
	
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СоздатьВводВОборотПоФайлу(ДвоичнДанные,МассивАгрегация);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайла_ВводВОБОРОТ_ХамелеонЦРПТ(РР,ДД) Экспорт
	МассивАгрегация=Новый Массив;
	МассивАгрегация.Очистить();
	Если РР<>Неопределено тогда
		Для Каждого Стр_Ф Из РР Цикл
			
			ДвоичнДанные=Новый ДвоичныеДанные(Стр_Ф);
			СоздатьАгрегацииПоФайлу(ДвоичнДанные,МассивАгрегация);
			
			
			
		Конеццикла;
		
		Если дД=Истина Тогда
			
			Для Каждого Стр_1 Из МассивАгрегация Цикл
				Форм=ПолучитьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
				"Ключ",Стр_1));
				Форм.ОтправитьЗаявку(ДД);
				
			Конеццикла;
			
		КонецЕслИ;
		Элементы.ВводВОборотТаблица.Обновить();
	КонецЕсли;
	
	
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьВводВОборотИзXMLИОтправить(Команда)
	// Вставить содержимое обработчика.
	Перем Файл;
	ВклЗаг = 0;
	//ДанныеЛиста.Очистить();
	Режим=РежимДиалогаВыбораФайла.Открытие;
	нДиалог= НОвый ДиалогВыбораФайла(Режим);
	//Фильтр="Файл xls/txt/xml|*.xls;*.xlsx;*.txt;*.xml|Файл txt|*.txt|Файл xls|*.xls;*.xlsx|Файл xml|*.xml";
	Фильтр="Файл xml|*.xml";
	нДиалог.МножественныйВыбор=Истина;
	нДиалог.Фильтр=Фильтр;
	нДиалог.Заголовок="Выберите файл для загрузки..." ;
	нДиалог.Показать(Новый ОписаниеОповещения("ПослеВыбораФайла_ВводВОБОРОТ_ХамелеонЦРПТ",ЭтаФорма,Истина));
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПриемкиЗаполнятьПроверкаПоКМПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ПриЗагрузкеПриемкиЗаполнятьПроверкаПоКМ=ПриЗагрузкеПриемкиЗаполнятьПроверкаПоКМ;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗагрузкеПриемкиЗаполнятьПроверкаПоКМПриИзменении(Элемент)
	ПриЗагрузкеПриемкиЗаполнятьПроверкаПоКМПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбнвоитьСтатусыПоВдыеленнымСписание(Команда)
	// Вставить содержимое обработчика.
	МассивОбновляем=Новый СписокЗначений;
	Для Каждого Стр_1 Из Элементы.Списание.ВыделенныеСтроки Цикл
		//Докум=ВернутьНомерДокумента(Стр_1);
//		Если Докум<>Неопределено тогда
			МассивОбновляем.Добавить(Стр_1);
//		КонецЕсли;
	Конеццикла;
	 ОбновитьСписание(МассивОбновляем)
КонецПроцедуры



&НаКлиенте
Процедура ОбновитьСписание(МассивОбновляем,УЖеОтправили=Ложь)	 Экспорт
	
	Thumbprint_1=ПолучитьИзПользователя();	
	
	Если ОбработкаWEBНаСервере Тогда
		
//		ОбновитьСтатусыДокументовСервер(Thumbprint_1,ВернутьДокументы,УжеОтправили,ДокументПроверки,ТолькоСтатус) ;
		Возврат;
		
	КонецЕсли;
	ОбработаноМассив=Новый Массив;
	
	
	
	

АдресРаздробить=Thumbprint_1.АдресСУЗ;
							Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
							Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
							Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
							Порт=Сред(Порт,Найти(Порт,":")+1);
							Попытка
								Порт=число(Порт);
							Исключение
								Порт=Неопределено;
							КонецПопытки;
							
								Если Найти(АдресРаздробить ,"https")=1 Тогда
									Защищ=Новый ЗащищенноеСоединениеopenSSL();
								Иначе
									Защищ=Неопределено;
								КонецЕсли;
								
								
	
	
			
						 ПолучитьДокументы=ПолучитьДокументыПоСУЗ(Thumbprint_1,МассивОбновляем);
							АдресРаздробить=Thumbprint_1.АдресСУЗ;
							Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
							Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
							Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
							Порт=Сред(Порт,Найти(Порт,":")+1);
							Попытка
								Порт=число(Порт);
							Исключение
								Порт=Неопределено;
							КонецПопытки;
							
								Если Найти(АдресРаздробить ,"https")=1 Тогда
									Защищ=Новый ЗащищенноеСоединениеopenSSL();
								Иначе
									Защищ=Неопределено;
								КонецЕсли;

								Количество=0;
		
	      Для Каждого Стр Из ПолучитьДокументы Цикл
	
									Количество=Количество+1;
							//Состояние("Обрабатывается списание по СУЗ "+Строка(СТР.Ссылка)+" "+Строка(КоличествО)+" из "+Строка(ПолучитьДокументы.Количество()),Количество*100/ПолучитьДокументы.Количество());
							Состояние("Обрабатывается списание по СУЗ "+Строка(СТР.Ссылка)+" "+Строка(КоличествО)+" из "+Строка(ПолучитьДокументы.Количество()));
	
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;
			
	
		HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/report/info?reportId="+Стр.order_id+"&omsId="+Thumbprint_1.ИдентификаторСУЗ);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
																			ТокенСУЗ=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);

	HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
	
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.reportStatus="READY_TO_SEND" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета"),"");
						
					ИначеЕсли 	NNN.reportStatus="SENT" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
						

					КонецЕсли;
				
			Иначе				    ОшибкаОтправки="";
				Попытка
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
					ОшибкаОтправки=Текст1;
				КонецПопытки;
			ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),ОшибкаОтправки);
		

		КонецЕсли;
		
	        Конеццикла;
	 //  КонецЕсли;
	   
		   Элементы.Списание.Обновить();;
	   
		   
	   Если Не ЗначениеЗаполнено(Thumbprint_1.АдресКАПИ) Тогда
		Возврат;
	КонецЕсли;
	
	
			СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			Попытка
				СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
			исключение
				СРегистра=Неопределено;
			КонецПопытки;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			Сообщить("Не удалось получить токен по организации");
			//Возврат;
		Конецесли;
		

	
	//Если УжеОтправили=Ложь Тогда	
		ВернутьДокументы_Списание=ОбновитьСтатусыДокументовНаСервереСписание(Пользователь);
	//КонецЕсли;
	ОбработаноМассив=Новый Массив;
	Thumbprint_1=ПолучитьИзПользователя();	
	Для Каждого Стр Из ВернутьДокументы_Списание Цикл
	
				
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
 			что=Thumbprint_1.что;
	
								
			
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body?pg="+что+"&limit=2147483647");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
			
			
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.status="CHECKED_NOT_OK" ИЛИ NNN.status="PARSE_ERROR"  
						ИЛИ NNN.status="PROCESSING_ERROR"
						Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
					ИначеЕсли 	NNN.status="WAIT_ACCEPTANCE" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"");
					ИначеЕсли 	NNN.status="CANCELLED" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
					ИначеЕсли 	NNN.status="CHECKED_OK" Тогда
						
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
					
					КонецЕсли;
				
				ОбработаноМассив.Добавить(Стр);
				a=1
		ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
				Если УжеОтправили=Истина Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
				Иначе
					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
					
					ОбновитьСписание(МассивОбновляем,Истина)			;
					Возврат;
				КонецЕсли
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				    ОшибкаОтправки="";
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Попытка
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
				КонецПопытки;
			//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
		

		КонецЕсли;
		
		
	Конеццикла;
	Элементы.Списание.Обновить();	
	
	
	
	   
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьСвязь(Докум)
	
	  	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.Справочник_Документ
		|ИЗ
		|	РегистрСведений.СопоставлениеСправочниковДокументов_ХамелеонЦРПТ КАК СопоставлениеСправочниковДокументов_ХамелеонЦРПТ
		|ГДЕ
		|	СопоставлениеСправочниковДокументов_ХамелеонЦРПТ.СправочникДокумент_Меркурия = &СправочникДокумент_Меркурия";
	
	Запрос.УстановитьПараметр("СправочникДокумент_Меркурия", Докум);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи.Количество()=0
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
Конецфункции

&НаКлиенте
Процедура ПриемкасписокПриАктивизацииСтроки(Элемент)
	// Вставить содержимое обработчика.
	Показать=Истина;
	Если УбратьПриемкуЕслиНетСопоставления Тогда
		Для Каждого Стр_1 Из Элементы.Приемкасписок.ВыделенныеСтроки Цикл
			Если ЕстьСвязь(Стр_1) Тогда
				Показать=Ложь;
				Прервать;
			КонецЕсли;
		Конеццикла;
	КонецЕсли;
	Элементы.Принять.Видимость=ПоказатЬ;
КонецПроцедуры

&НаСервере
Процедура УбратьПриемкуЕслиНетСопоставленияПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.УбратьПриемкуЕслиНетСопоставления=УбратьПриемкуЕслиНетСопоставления;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура УбратьПриемкуЕслиНетСопоставленияПриИзменении(Элемент)
	УбратьПриемкуЕслиНетСопоставленияПриИзмененииНаСервере();
	ПриемкасписокПриАктивизацииСтроки(Элемент);
КонецПроцедуры

&НаСервере
Процедура ЗаполнятьАртикулНачалоРазмерКонецПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ЗаполнятьАртикулНачалоРазмерКонец=ЗаполнятьАртикулНачалоРазмерКонец;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнятьАртикулНачалоРазмерКонецПриИзменении(Элемент)
	ЗаполнятьАртикулНачалоРазмерКонецПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура
	ЗагружаемТабакЭДО(Thumbprint_1,Срегистра)
	
		
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;                                                       
			
			
			Что=Thumbprint_1.что;
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/documents/search?pg="+Что);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	Тело="{""0"":{""id"":""documentType"",""value"":""UNIVERSAL_TRANSFER_DOCUMENT""},""documentType"":""UNIVERSAL_TRANSFER_DOCUMENT"",""pagination"":{""limit"":"+Формат(СколькоНаСтранице,"ЧГ=")+",""offset"":0},""excludingTypes"":[""LK_ADD_APP_USER"",""LK_ADD_APP_USER_XML"",""GRAY_ZONE_DOCUMENT"",""LP_FTS_INTRODUCE_REQUEST""]}";
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	
	
	
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
							
	
	
	Если Истина И (Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200) Тогда
//				//ЧтениеJSON = Новый ЧтениеJSON;
			Страница=0;
			Тотал=1;
			Пока Страница*СколькоНаСтранице<=Тотал Цикл
//				
 					страница=Страница+1;
//				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Тотал=NNN.Количество();
//				
				Если СколькоНаСтранице>NNN.Количество() Тогда
					 Тотал=NNN.Количество()
				КонецЕсли;
//				
//				did="";
//				docDate="";
//				
				МассивФайлов=Новый массив;
				МассивФайлов	.Очистить();
				Для Каждого Стр Из  NNN 
					Цикл
					Если Стр.status<>"CHECKED_OK" Тогда
						Продолжить;
					Конецесли;
						HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/documents/download");
						
						Тело="{""id"":"""+Стр.id+"""}";
						
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
						HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
						//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
						///Константин           
						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("POST",HTTPЗапрос);
						Текст1=Ответ.ПолучитьТелоКакСтроку();
					
					
//					did=Стр.number;
//					docDate=Стр.docDate;
//					Если Стр.input=true 
//						Тогда
//						
//						HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.number+"/body");
//						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
//						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
//						//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
//						///Константин           
//						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
//						Текст1=Ответ.ПолучитьТелоКакСтроку();
//						//ЧтениеJSON = Новый ЧтениеJSON;
//						//ЧтениеJSON.УстановитьСтроку(Текст1);
//						NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
//						МассивУп=Новый Массив;
//						
						ДД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Текст1,КодировкаТекста.ANSI,ЛОжь);
	МассивФайлов.Добавить(Новый Структура("Имя,Дв",Стр.id+".xml",ПоместитьВоВременноеХранилище(ДД)));
//						
//						
//						
//						
//					КонецЕсли;
				Конеццикла;
//				
		ЗагрузитьНаСервере(МассивФайлов);
//				
//				         
//				
//				
//				
//				
				Если Страница*СколькоНаСтранице>Тотал Тогда
					Прервать;
				КонецЕсли;
				
				
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/documents/search?pg="+Что);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	Тело="{""0"":{""id"":""documentType"",""value"":""UNIVERSAL_TRANSFER_DOCUMENT""},""documentType"":""UNIVERSAL_TRANSFER_DOCUMENT"",""pagination"":{""limit"":"+Формат(СколькоНаСтранице,"ЧГ=")+",""offset"":"+Формат(СколькоНаСтранице*Страница,"ЧГ=")+"},""excludingTypes"":[""LK_ADD_APP_USER"",""LK_ADD_APP_USER_XML"",""GRAY_ZONE_DOCUMENT"",""LP_FTS_INTRODUCE_REQUEST""]}";
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	
	
	
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
				
//					
//				 HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/listV2?inputFormat=true&documentFormat=UPD&limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=docDate&did="+did+"&orderedColumnValue="+docDate+"&pageDir=NEXT&&pg="+ЧТо);
//				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json");
//		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
//		//Тело="documentType=LP_ACCEPT_GOODS_XML";
////	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
//	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
//	///Константин           
//	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
//	Текст1=Ответ.ПолучитьТелоКакСтроку();
//	Если Ответ.КодСостояния<>202 И Ответ.КодСостояния<>200  Тогда
//		Если УжеОтправили=Истина Тогда
//				Сообщить("Не удалось загрузить приходы с ЦРПТ, отсутствует доступ.");
//				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
//				Возврат;
//			Иначе
//				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
//				ЗагрузтьИзЦРПТЭДО(Команда,Истина)			
//			КонецЕсли
//	КонецЕсли;
//	
	Конеццикла;	
//				
//				
//	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
//			Если УжеОтправили=Истина Тогда
//				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
//			Иначе
//				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
//				ЗагрузтьИзЦРПТЭДО(Команда,Истина)			
//			КонецЕсли
//	Иначе
//					Попытка
//						//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);ЧтениеJSON = Новый ЧтениеJSON;
//						//ЧтениеJSON.УстановитьСтроку(Текст1);
//						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
//						попытка
//								Если NNN.error="access_denied" Тогда
//									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
//								КонецЕсли;
//							
//						Исключение
//							Попытка
//								Если NNN.error="access_denied" Тогда
//									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
//								КонецЕсли;
//							Исключение
//								
//								Если Найти(Текст1,"Billing contract")>0 И
//									Найти(Текст1,"not signed by participant")>0 Тогда
//									Сообщить("Договор биллинга для выбранной группы товаров не подписан участником");
//								КонецЕсли;
//								
//							КонецПопытки;
//							
//						КонецПопытки;
//						
//					Исключение
//					КонецПопытки;
//		//	Иначе
//		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
//		//		ОтправитьЗаявку(Команда,Истина)			
//		//	КонецЕсли
//	КонецЕсли;
//КонецЕсли
КонецЕсли
	 




	
КОнецПроцедуры


&НаКлиенте
Процедура ЗагрузтьИзЦРПТЭДО(Команда,УжеОтправили)
		Thumbprint_1=Неопределено;
	Если НаКлиенте(Thumbprint_1) Тогда
		
		
		СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			Попытка
				СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
			исключение
				СРегистра=Неопределено;
			КонецПопытки;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			ПоказатьПредупреждение(,"Не удалось получить токен по организации");
			Возврат;
		Конецесли;
		
 	Если Ложь Тогда
		
		
	Иначе
		    Что=
Thumbprint_1.Что;		
		

Если Thumbprint_1.НаименованиеСтенда="Табак" ИЛИ  Thumbprint_1.НаименованиеСтенда="Альтернативный табак" Тогда
	
						//СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак;
						
						
						ЗагружаемТабакЭДО(Thumbprint_1,Срегистра);
						
						
				Возврат;		
				КонецЕсли;


		
		
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;                                                       
			
			  //  docum
			  
			 ДатаНачала=НачалоДня(ТекущаяДата())-КачатьСЭДОЗаПоследниеДни*24*60*60;

	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/listV2?inputFormat=true&documentFormat=UPD&dateFrom="+
	//Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=docDate&pageDir=NEXT&pg="+Что);
	Формат(Датаначала,"ДФ=""гггг-ММ-дд""")+"T03:00:00.000Z"+"&limit="+
	Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=docDate&pageDir=NEXT&pg="+Что);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
							
	
	
	Если Истина И (Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200) Тогда
				//ЧтениеJSON = Новый ЧтениеJSON;
			Страница=0;
			Тотал=1;
			Пока Страница*СколькоНаСтранице<=Тотал Цикл
				
 					страница=Страница+1;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Тотал=NNN.total;
				
				Если СколькоНаСтранице>NNN.results.Количество() Тогда
					 Тотал=NNN.results.Количество()
				КонецЕсли;
				
				did="";
				docDate="";
				
				МассивФайлов=Новый массив;
				МассивФайлов	.Очистить();
				Для Каждого Стр Из  NNN.results 
					Цикл
					Если Стр.status<>"CHECKED_OK" Тогда
						Продолжить;
					Конецесли;
					did=Стр.number;
					docDate=Стр.docDate;
					Если Стр.input=true 
						Тогда
						
						HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.number+"/body");
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
						//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
						///Константин           
						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
						Текст1=Ответ.ПолучитьТелоКакСтроку();
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						МассивУп=Новый Массив;
						
						МассивФайлов.Очистить();
						ДД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(NNN_1.content,"windows-1251",ЛОжь);
	МассивФайлов.Добавить(Новый Структура("Имя,Дв",NNN_1.number+".xml",ПоместитьВоВременноеХранилище(ДД)));
						
							ЗагрузитьНаСервере(МассивФайлов);
	
						
						
					КонецЕсли;
				Конеццикла;
				
				
				
				
				
				
				
				Если Страница*СколькоНаСтранице>Тотал Тогда
					Прервать;
				КонецЕсли;
					
				 HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/listV2?inputFormat=true&documentFormat=UPD&dateFrom="+
	Формат(Датаначала,"ДФ=""гггг-ММ-дд""")+"T03:00:00.000Z"+"&limit="+
	Формат(СколькоНаСтранице,"ЧГ=")+
	"&order=DESC&orderColumn=docDate&did="+did+"&orderedColumnValue="+docDate+"&pageDir=NEXT&pg="+ЧТо);
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	Если Ответ.КодСостояния<>202 И Ответ.КодСостояния<>200  Тогда
		Если УжеОтправили=Истина Тогда
				Сообщить("Не удалось загрузить приходы с ЦРПТ, отсутствует доступ.");
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Возврат;
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ЗагрузтьИзЦРПТЭДО(Команда,Истина)			
			КонецЕсли
	КонецЕсли;
	
	Конеццикла;	
				
				
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ЗагрузтьИзЦРПТЭДО(Команда,Истина)			
			КонецЕсли
	Иначе
					Попытка
						//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							
						Исключение
							Попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								
								Если Найти(Текст1,"Billing contract")>0 И
									Найти(Текст1,"not signed by participant")>0 Тогда
									Сообщить("Договор биллинга для выбранной группы товаров не подписан участником");
								КонецЕсли;
								
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
КонецЕсли
КонецЕсли;
	 







Элементы.Приемкасписок.Обновить();





КонецПроцедуры

&НаСервере
Процедура ПриСканированииВПриемкеИскатьСтрочкиПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ПриСканированииВПриемкеИскатьСтрочки=ПриСканированииВПриемкеИскатьСтрочки;
	РегДв.Записать(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриСканированииВПриемкеИскатьСтрочкиПриИзменении(Элемент)
	ПриСканированииВПриемкеИскатьСтрочкиПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагружатьВсеПриходыПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ЗагружатьВсеПриходы=ЗагружатьВсеПриходы;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗагружатьВсеПриходыПриИзменении(Элемент)
	ЗагружатьВсеПриходыПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаПриемокПоПериодуВсех(Команда)
	// Вставить содержимое обработчика.
	ПоказатьВводСтроки(Новый ОписаниеОповещения("ПослеВыбораИД",ЭтаФорма),"","ИД приемки");
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИД(РР,ДД) Экспорт
	Если РР<>Неопределено тогда
		
		
	// Вставить содержимое обработчика.
	Thumbprint_1=Неопределено;
	Если НаКлиенте(Thumbprint_1) Тогда
		
		Попытка
			ЛицензияОпределить_Просто(Thumbprint_1);
		Исключение
		КонецПопытки;
		
		СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			Попытка
				СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
			исключение
				СРегистра=Неопределено;
			КонецПопытки;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			ПоказатьПредупреждение(,"Не удалось получить токен по организации");
			Возврат;
		Конецесли;
		
		СерийныйНомер="";
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			
									СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
								Иначе
								   
										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
											Прокси=Новый ИнтернетПрокси;
											Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										Иначе
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										КонецЕсли;
										
										HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
										HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
										HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
										//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
										///Константин           
										Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
										//Текст1=Ответ.ПолучитьТелоКакСтроку();
										Если Ответ.КодСостояния<>200 Тогда
											СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
										КонецЕсли;
											
								КонецЕсли;
		
		
 	Если Ложь И  ОбработкаWEBНаСервере Тогда
		Если НЕ ЗагрузканаСерверИзЦРПТ(Thumbprint_1,СРегистра,Ложь) Тогда
				//Если УжеОтправили=Истина Тогда
				//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			//Иначе
				//ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				//ЗагрузитьИзЦРПТ("",Истина)			
		//КонецЕсли
		
		КонецЕсли;
		
		
	Иначе
		
		
Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
			
	СРегистра="";
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
		АдресКАПИ=СтрЗаменить(Thumbprint_1.АдресКАПИ,"api.","");
		
			
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;   
			
				Куки="lk-auth-token="+Срегистра ;
				
				
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("start_from");	
	Чтен.ЗаписатьЗначение(0);
	Чтен.ЗаписатьИмяСвойства("count");
	Чтен.ЗаписатьЗначение(СколькоНаСтранице);
	Чтен.ЗаписатьИмяСвойства("filter");
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("doc_type");
	Чтен.ЗаписатьЗначение("601");
	
	
				       Чтен.ЗаписатьКонецОбъекта();
	
	//Чтен.ЗаписатьЗначение("{}");
				       Чтен.ЗаписатьКонецОбъекта();
				
				Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
	Тело=СтрЗаменить(Тело,Символы.ПС,"");
	Тело=СтрЗаменить(Тело,Символы.ВК,"");
	
				
//			Тело="{start_from: 0, count: 20, filter: {doc_type: ""601""}}";
			
	HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/income");
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
	HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
	//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
							
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				//ЧтениеJSON = Новый ЧтениеJSON;
			Страница=0;
			Тотал=1;
			Пока Страница*СколькоНаСтранице<=Тотал Цикл
				
 					страница=Страница+1;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Тотал=NNN.total;
				
				Если СколькоНаСтранице>NNN.documents.Количество() Тогда
					 Тотал=NNN.documents.Количество()
				КонецЕсли;
				
				did="";
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				docDate="";
				Для Каждого Стр Из  NNN.documents Цикл
					
					
												Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
														HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/download/"+Стр.document_id+"");
													Иначе
														HTTPЗапрос=Новый HTTPЗапрос("documents/download/"+Стр.document_id+"");
											/////			
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
												КонецЕсли;
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
											Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
											
											
Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
																							
											NNN_2_Ы=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
											
											Попытка
												Сайт_1=NNN_2_Ы.link;
											Исключение
												Продолжить;
											КонецПопытки;
											Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
											Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
											
											

																
											
														HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
								//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
								///Константин           
								//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
								Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
								Текст1=Ответ.ПолучитьТелоКакСтроку();
								
										КонецЕсли;													ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
												
											
																						
											
			//Попытка
				
				
				МассивПроудкций=Новый Массив;
				МассивКонтрагентов=Новый Массив;
				Попытка
					ЗаполненаТабличнаяЧастьПриемки=Ложь;
					ДатаДокумента="";
					дкоументФарм=ДобавитьПриемку(Текст1,Стр,МассивПроудкций,МассивКонтрагентов,ЗаполненаТабличнаяЧастьПриемки,ДатаДокумента);
					Если ПриЗагрузкеПриемкиЗаполнятьПроверкаПоКМ=Истина И ЗаполненаТабличнаяЧастьПриемки<>Истина тОгда
						Форм=ОткрытьФорму("Документ.Приемка_ХамелеонЦРПТ.Форма.ФормаДокумента",
						Новый Структура("Ключ",дкоументФарм));
						Форм.ЗакачатьДетальнуюИнформацию("");
						Форм.Записать();
						Форм.Закрыть();
					КонецЕсли;
				Исключение
					   Инфо = ИнформацияОбОшибке();
    Сообщить("Описание='" + Инфо.Описание + "'");
    Сообщить("ИмяМодуля='" + Инфо.ИмяМодуля + "'");
    Сообщить("НомерСтроки=" + Инфо.НомерСтроки);
    Сообщить("ИсходнаяСтрока='" + Инфо.ИсходнаяСтрока + "'");

					Сообщить(Стр.document_id);
					Сообщить(Текст1);
				КонецПопытки;
					Для Каждого Стр_1 Из МассивПроудкций Цикл
						
									Чтен=Новый  ЗаписьJSON;
										Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
										Чтен.ЗаписатьНачалоОбъекта();
										Чтен.ЗаписатьИмяСвойства("start_from");	
										Чтен.ЗаписатьЗначение(0);
										Чтен.ЗаписатьИмяСвойства("count");
										Чтен.ЗаписатьЗначение(СколькоНаСтранице);
										Чтен.ЗаписатьИмяСвойства("filter");
										Чтен.ЗаписатьНачалоОбъекта();
										
										Чтен.ЗаписатьИмяСвойства("gtin");
										Чтен.ЗаписатьЗначение(Стр_1);
										
										
													       Чтен.ЗаписатьКонецОбъекта();
										
										//Чтен.ЗаписатьЗначение("{}");
													       Чтен.ЗаписатьКонецОбъекта();
													
													Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
										Тело=СтрЗаменить(Тело,Символы.ПС,"");
										Тело=СтрЗаменить(Тело,Символы.ВК,"");
										
						
						
								HTTPЗапрос=Новый HTTPЗапрос("api/v1/reestr/med_products/public/filter");
								          HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
								
												//	Иначе
												//	HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.document_id+"");
											/////			
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
												//	КонецЕсли;
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
											HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
											Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
											ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьПродукцию(Текст1);
											
											
												ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
											
																						
						
					Конеццикла;
					
					
					Для Каждого Стр_1 Из МассивКонтрагентов Цикл
						
									Чтен=Новый  ЗаписьJSON;
										Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
										Чтен.ЗаписатьНачалоОбъекта();
										Чтен.ЗаписатьИмяСвойства("start_from");	
										Чтен.ЗаписатьЗначение(0);
										Чтен.ЗаписатьИмяСвойства("count");
										Чтен.ЗаписатьЗначение(СколькоНаСтранице);
										Чтен.ЗаписатьИмяСвойства("filter");
										Чтен.ЗаписатьНачалоОбъекта();
										
										Чтен.ЗаписатьИмяСвойства("system_subj_id");
										Чтен.ЗаписатьЗначение(Стр_1);
										
										Чтен.ЗаписатьИмяСвойства("reg_entity_type");
										Чтен.ЗаписатьЗначение("1");
										
													       Чтен.ЗаписатьКонецОбъекта();
										
										//Чтен.ЗаписатьЗначение("{}");
													       Чтен.ЗаписатьКонецОбъекта();
													
													Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
										Тело=СтрЗаменить(Тело,Символы.ПС,"");
										Тело=СтрЗаменить(Тело,Символы.ВК,"");
										
						
						
								HTTPЗапрос=Новый HTTPЗапрос("api/v1/reestr_partners/filter");
								          HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
								
												//	Иначе
												//	HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.document_id+"");
											/////			
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
												//	КонецЕсли;
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
											HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
											Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
											ЗаписатьКонтрагента(Текст1);
											
											
												ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
											
																						
						
					Конеццикла;

														  //ОработатьДокументы(Стр,Результат,Ошибка)

														
														//ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
																									//Исключение
											//	КонецПопытки;
											 Конеццикла;

					
								//Конеццикла;
				
				Если Страница*СколькоНаСтранице>Тотал Тогда
					Прервать;
				КонецЕсли;
				
			 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("start_from");	
	Чтен.ЗаписатьЗначение(Страница*СколькоНаСтранице);
	Чтен.ЗаписатьИмяСвойства("count");
	Чтен.ЗаписатьЗначение(СколькоНаСтранице);
	Чтен.ЗаписатьИмяСвойства("filter");
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("doc_type");
	Чтен.ЗаписатьЗначение("601");
	           Чтен.ЗаписатьКонецОбъекта();
	
	//Чтен.ЗаписатьЗначение("{}");
				       Чтен.ЗаписатьКонецОбъекта();
				
				Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
	Тело=СтрЗаменить(Тело,Символы.ПС,"");
	Тело=СтрЗаменить(Тело,Символы.ВК,"");
	
		
				HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/income");
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
	HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
	//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
							
	
	

	Если Ответ.КодСостояния<>202 И Ответ.КодСостояния<>200  Тогда
		//Если УжеОтправили=Истина Тогда
				Сообщить("Не удалось загрузить приходы с ЦРПТ, отсутствует доступ.");
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		//		Возврат;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
		//		ЗагрузитьИзЦРПТ(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	
	Конеццикла;	
				
				
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
//			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
//			Иначе
//				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
//				ЗагрузитьИзЦРПТ(Команда,Истина)			
//			КонецЕсли
	Иначе
					Попытка
						//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							
						Исключение
							Попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								
								Если Найти(Текст1,"Billing contract")>0 И
									Найти(Текст1,"not signed by participant")>0 Тогда
									Сообщить("Договор биллинга для выбранной группы товаров не подписан участником");
								КонецЕсли;
								
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	Элементы.Приемкасписок.Обновить();
			  Возврат;
		КонецЕсли;
		
		

	
		
		
		
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;                                                       
			
			
 			что=Thumbprint_1.что;
			
			
									
  			что=Thumbprint_1.что;
	
								
						
						HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+РР+"/body?pg="+что+"&limit=2147483647");
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
						//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
						///Константин     
						Попытка
							Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
							
							Если Ответ.КодСостояния<>200 Тогда
								ВызватьИсключение "Не получилось получить запрос по документу"
							КонецЕсли
							
						Исключение
							
							HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+РР+"/body?pg="+что+"&limit=11");
							HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
							HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
							
							Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
						КонецПопытки;
						Если Ответ.КодСостояния<>200 Тогда
							Сообщить("Не удалось загрузить документ с № "+РР);
							Возврат;
						Конецесли;
						Текст1=Ответ.ПолучитьТелоКакСтроку();
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						МассивУп=Новый Массив;
						
						МассивКМ=Новый Массив;
						ЗаполненаТабличнаяЧастьПриемки=ЛожЬ;
						Принять_1=ЛожЬ;
						ДокумПриемки=ОбновитьСтатусДокумента_Приемка(NNN_1,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа,,,,МассивКМ,ЗагрузатьНаименованиеПриПриемке,ЗаполненаТабличнаяЧастьПриемки,Принять_1);	
												Если Принять_1=Истина Тогда
							Попытка
								
								Форм=ПолучитьФорму("Документ.Приемка_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
								"Ключ",ДокумПриемки));
								Форм.Принять("");
								

							Исключение
							КонецПопытки;
						КонецЕсли;
						
						Если ПриЗагрузкеПриемкиЗаполнятьПроверкаПоКМ=Истина И ЗаполненаТабличнаяЧастьПриемки<>Истина тОгда
							Форм=ОткрытьФорму("Документ.Приемка_ХамелеонЦРПТ.Форма.ФормаДокумента",
							Новый Структура("Ключ",ДокумПриемки));
							Форм.ЗакачатьДетальнуюИнформацию("");
							Форм.Записать();
							Форм.Закрыть();
						КонецЕсли;
						Если МассивКМ.Количество()>0 Тогда
							
							СписокОбнТовара=Новый Массив;
							
							
							ЗаполненаТабличнаяЧастьПриемки=ложь;
							дкоументФарм=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьИнформациюНаСервереДЛяПриемки(Thumbprint_1,МассивКМ,СписокОбнТовара,ЗаполненаТабличнаяЧастьПриемки);
							Если ПриЗагрузкеПриемкиЗаполнятьПроверкаПоКМ=Истина И ЗаполненаТабличнаяЧастьПриемки<>Истина тОгда
								Форм=ОткрытьФорму("Документ.Приемка_ХамелеонЦРПТ.Форма.ФормаДокумента",
								Новый Структура("Ключ",дкоументФарм));
								Форм.ЗакачатьДетальнуюИнформацию("");
								Форм.Записать();
								Форм.Закрыть();
							КонецЕсли;
							
							
									Для Каждого Стр_1 Из СписокОбнТовара Цикл
										ОповеститьОбИзменении(Стр_1);
									КонецЦиклА;
									МассивКМ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСледющийМассив(ДокумПриемки);
									СписокОбнТовара.Очистить();

										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
														Прокси_20=Новый ИнтернетПрокси;
														Прокси_20.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
													
														HTTPСервисЗапрос_20=Новый HTTPСоединение("xn--80aqu.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,Прокси_20,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
													Иначе
														HTTPСервисЗапрос_20=Новый HTTPСоединение("xn--80aqu.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
													КонецЕсли;
													
												МассивСтруктур=Новый Массив;	
										Для Каждого Стр_1 из МассивКМ Цикл

											GTINНаименованиеТовара=Сред(Стр_1.Марка,3,14);
											HTTPЗапрос_20=Новый HTTPЗапрос("v3/product?gtin="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ДополнитьСтроку(Формат(GTINНаименованиеТовара,"ЧГ="))+"&apikey=l10k3203w65mbngr");
											HTTPЗапрос_20.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded; charset=UTF-8");
											//HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//Тело="task=getItemByGTIN&lng=ru&keyValue="+ДополнитьСтроку(Формат(Стр_1.GTINНаименованиеТовара,"ЧГ="));
									//		HTTPЗапрос.УстановитьТелоИзСтроки();
											//Тело);
											Ответ_20=HTTPСервисЗапрос_20.ОтправитьДляОбработки(HTTPЗапрос_20);
												Если Ответ_20.КодСостояния=200 Тогда
									Текст1_20=Ответ_20.ПолучитьТелоКакСтроку();
												NNN_20=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1_20);//ПрочитатьJSON(ЧтениеJSON);
											Название=неопределено;
											Попытка
												Название=NNN_20.result[0].good_name; 
											Исключение
											КонецПопытки;
											Если Название=Неопределено Тогда
												
									//			http://gepir.gs1ru.org/GEPIR40/index.jsp?p=gtin&lng=ru
											КонецЕсли;
											Если ЗначениеЗаполнено(Название) Тогда
												МассивСтруктур.Добавить(Новый Структура("gtin,Название",GTINНаименованиеТовара,Название));
												
											КонецЕсли;
											КонецЕсли;
										Конеццикла;
										
										МММ=Новый Массив;
										Если МассивСтруктур.Количество()>0 тогда
											МММ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагрузитьПродукции(МассивСтруктур);
											
										КонецЕсли;
										Для Каждого Стр_1 Из МММ Цикл
											ОповеститьОбИзменении(Стр_1);
										КонецЦиклА;
										
										МассивКМ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСледющийМассив(ДокумПриемки);
										СписокОбнТовара.Очистить();
										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
												Прокси_20=Новый ИнтернетПрокси;
															Прокси_20.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
														
															HTTPСервисЗапрос_20=Новый HTTPСоединение("gepir.gs1ru.org",,,,Прокси_20,Thumbprint_1.Таймаут);
														Иначе
															HTTPСервисЗапрос_20=Новый HTTPСоединение("gepir.gs1ru.org",,,,,Thumbprint_1.Таймаут);
														КонецЕсли;
														
														
														
													МассивСтруктур.Очистить();	
												
											Для Каждого СтР_1 Из МассивКМ Цикл
												
										

GTINНаименованиеТовара=Сред(Стр_1.Марка,3,14);

												HTTPЗапрос=Новый HTTPЗапрос("GEPIR40/getItem");
												HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded; charset=UTF-8");
												//HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
												//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
												///Константин           
												Тело="task=getItemByGTIN&lng=ru&keyValue="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ДополнитьСтроку(Формат(GTINНаименованиеТовара,"ЧГ="));
												HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
												Ответ=HTTPСервисЗапрос_20.ОтправитьДляОбработки(HTTPЗапрос);
													Если Ответ.КодСостояния=200 Тогда
									
												Текст1=Ответ.ПолучитьТелоКакСтроку();
												NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
												Название=неопределено;
												Попытка
													Название=NNN.gepirItem.itemDataLine[0].itemName; 
												Исключение
												КонецПопытки;
												Если Название=Неопределено Тогда
													
										//			http://gepir.gs1ru.org/GEPIR40/index.jsp?p=gtin&lng=ru
												КонецЕсли;
												Если ЗначениеЗаполнено(Название) Тогда
													МассивСтруктур.Добавить(Новый Структура("gtin,Название",Стр_1.GTINНаименованиеТовара,Название));
													
												КонецЕсли;
												КонецЕсли;
											Конеццикла;
											
										МММ=Новый Массив;
										Если МассивСтруктур.Количество()>0 тогда
											МММ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагрузитьПродукции(МассивСтруктур);
											
										КонецЕсли;
										Для Каждого Стр_1 Из МММ Цикл
											ОповеститьОбИзменении(Стр_1);
										КонецЦиклА;

									
							
						КонецЕсли;
						
					КонецЕсли;


//	ЗагрузитьОтветыПоОтгрузкам(Команда,,Thumbprint_1,СРегистра);


	Элементы.Приемкасписок.Обновить();
		
		
КонецЕсли;
КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическоийПодсчетСуммыПоКМИзКоробаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	АвтоматическоийПодсчетСуммыПоКМИзКоробаПриИзмененииНаСервере();
КонецПроцедуры

Процедура АвтоматическоийПодсчетСуммыПоКМИзКоробаПриИзмененииНаСервере()
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.АвтоматическоийПодсчетСуммыПоКМИзКороба=АвтоматическоийПодсчетСуммыПоКМИзКороба;
	РегДв.Записать(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ВыгружатьЭДОЛайтЧерезXMLПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ВыгружатьЭДОЛайтЧерезXML=ВыгружатьЭДОЛайтЧерезXML;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьЭДОЛайтЧерезXMLПриИзменении(Элемент)
	ВыгружатьЭДОЛайтЧерезXMLПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Процедура ЭДОЗаписыватьИныеСведенияВКомментарийПриемкаПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ЭДОЗаписыватьИныеСведенияВКомментарийПриемка=ЭДОЗаписыватьИныеСведенияВКомментарийПриемка;
	РегДв.Записать(Истина);
КонецПроцедуры


&НаКлиенте
Процедура ЭДОЗаписыватьИныеСведенияВКомментарийПриемкаПриИзменении(Элемент)
	ЭДОЗаписыватьИныеСведенияВКомментарийПриемкаПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура СоздатьВводВОборотJSON(Команда)
	// Вставить содержимое обработчика.
	
	
	Перем Файл;
	ВклЗаг = 0;
	//ДанныеЛиста.Очистить();
	Режим=РежимДиалогаВыбораФайла.Открытие;
	нДиалог= НОвый ДиалогВыбораФайла(Режим);
	//Фильтр="Файл xls/txt/xml|*.xls;*.xlsx;*.txt;*.xml|Файл txt|*.txt|Файл xls|*.xls;*.xlsx|Файл xml|*.xml";
	Фильтр="Файл *|*.*";
	нДиалог.МножественныйВыбор=Истина;
	нДиалог.Фильтр=Фильтр;
	нДиалог.Заголовок="Выберите файл для загрузки..." ;
	нДиалог.Показать(Новый ОписаниеОповещения("ПослеВыбораФайла_ВводВОБОРОТ_ХамелеонЦРПТJSON",ЭтаФорма,Ложь));
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайла_ВводВОБОРОТ_ХамелеонЦРПТJSON(РР,ДД) Экспорт
	МассивАгрегация=Новый Массив;
	МассивАгрегация.Очистить();
	Если РР<>Неопределено тогда
		Для Каждого Стр_Ф Из РР Цикл
			
			ДвоичнДанные=Новый ДвоичныеДанные(Стр_Ф);
			СоздатьАгрегацииПоФайлуJSON(ДвоичнДанные,МассивАгрегация);
			
			
			
		Конеццикла;
		
		Если дД=Истина Тогда
			
			Для Каждого Стр_1 Из МассивАгрегация Цикл
				Форм=ПолучитьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
				"Ключ",Стр_1));
				Форм.ОтправитьЗаявку(ДД);
				
			Конеццикла;
			
		КонецЕслИ;
		Элементы.ВводВОборотТаблица.Обновить();
	КонецЕсли;
	
	
	
КонецПроцедуры
Процедура СоздатьАгрегацииПоФайлуJSON(ДвоичнДанные,МассивАгрегация)
	
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагрузитьВводВоборотJSON(ДвоичнДанные,МассивАгрегация,Пользователь);
	
КонецПроцедуры


&НаСервере
Процедура Использовать15ШаблонДляАльтернативногоТабакаСУказаниемМРЦПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.Использовать15ШаблонДляАльтернативногоТабакаСУказаниемМРЦ=Использовать15ШаблонДляАльтернативногоТабакаСУказаниемМРЦ;
	РегДв.Записать(Истина);
КонецПроцедуры


&НаКлиенте
Процедура Использовать15ШаблонДляАльтернативногоТабакаСУказаниемМРЦПриИзменении(Элемент)
	Использовать15ШаблонДляАльтернативногоТабакаСУказаниемМРЦПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Процедура ПриФормированииXMLДобавлятьКМПоКоробамПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ПриФормированииXMLДобавлятьКМПоКоробам=ПриФормированииXMLДобавлятьКМПоКоробам;
	РегДв.Записать(Истина);
КонецПроцедуры


&НаКлиенте
Процедура ПриФормированииXMLДобавлятьКМПоКоробамПриИзменении(Элемент)
	ПриФормированииXMLДобавлятьКМПоКоробамПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Процедура ОбрезатьКМДляТабакаПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ОбрезатьКМДляТабака=ОбрезатьКМДляТабака;
	РегДв.Записать(Истина);
КонецПроцедуры


&НаКлиенте
Процедура ОбрезатьКМДляТабакаПриИзменении(Элемент)
	ОбрезатьКМДляТабакаПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура СоздатьИсправлениеПоОтгрузке(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Стр Из Элементы.Отгрузка_Список.ВыделенныеСтроки Цикл
		Форм=ПолучитьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
		"Ключ",Стр));
		Форм.ТекущийПользователь=Пользователь;
		Форм.СоздатьИсправлениеДляОтгрузки(Команда);
	КонецциклА;
	Элементы.Отгрузка_Список.Обновить();
	
	
КонецПроцедуры


Функция СозздатьПеремаркировкуНаОснованииЗаказаНаСервере(Докум)
	Если Докум.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.Перемаркировка Тогда
		ДокумВ=Документы.Перемаркировка_ХамелеонЦРПТ.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(ДокумВ,Докум,,"Номер,Дата,Статус,_Order_ID");
		ДокумВ.ТипДокумента=ДокумВ.ТекущийПользователь.ТипПеремаркировки;
		ДокумВ.Дата=Текущаядата();
		Если Не ЗначениеЗАполнено(ДокумВ.ТипДокумента) тогда
			ДокумВ.ТипДокумента=Перечисления.ТипДокументаПеремаркировки_ХамелеонЦРПТ.REMOTE_SALE_RETURN
		Конецесли;
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТ.СерийныйНомер,
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТ.Продукция
		|ИЗ
		|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ КАК ОстаткиКМЭмитированые_ХамелеонЦРПТ
		|ГДЕ
		|	ОстаткиКМЭмитированые_ХамелеонЦРПТ.Регистратор = &Регистратор";
	
	Запрос.УстановитьПараметр("Регистратор", Докум);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СерийныйНомер)
			И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Продукция) Тогда
			Добав=ДокумВ.СерийныеНомера.Добавить();
			Добав.НовыйКМ=ВыборкаДетальныеЗаписи.СерийныйНомер;
			Добав.НаименованиеТовара=ВыборкаДетальныеЗаписи.Продукция;
			Добав.Сертификат=ВернутьДокументСД(ВыборкаДетальныеЗаписи.Продукция,Текущаядата());
			Добав.КодТНВЭД=Добав.НаименованиеТовара.КодТНВЭД;
		КонецЕсли;
		
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	    ДокумВ.Записать();
		Возврат ДокумВ.Ссылка;
			
		//Для Каждого Стр Из Докум.
		
	Иначе
		Сообщить("Документ перемаркировки можно вводить только на основании заказа на КМ с типом <Перемаркировка>");
	КонецЕсли;
	
	Возврат НеопределенО;
КонецФункции

Функция ВернутьДокументСД(Пр,Дата1)  
	Возврат Регистрысведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(
	Дата1,Новый Структура("Продукция",Пр)).Документ
КонецФункции
  

&НаКлиенте
Процедура СозздатьПеремаркировкуНаОснованииЗаказа(Команда)
	
	Если Элементы.ЗаказыТаблица.ТекущиеДанные<>Неопределено Тогда
		ДД=СозздатьПеремаркировкуНаОснованииЗаказаНаСервере(Элементы.ЗаказыТаблица.ТекущиеДанные.Ссылка);
		Если ЗначениеЗаполнено(ДД) Тогда
			ОткрытьФорму("Документ.Перемаркировка_ХамелеонЦРПТ.Форма.ФормаДокумента",
			Новый Структура("Ключ",ДД));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СкоироватьДокументПриемки(Команда)
	// Вставить содержимое обработчика.
	Если Элементы.Приемкасписок.ТекущиеДанные<>Неопределено тогда
		ПараметрыФормы = Новый Структура("ЗначениеКопирования", Элементы.Приемкасписок.ТекущиеДанные.Ссылка);
		ОткрытьФорму("Документ.Приемка_ХамелеонЦРПТ.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузкаОбратногоАкцепта(Команда,УжеОтправили=Ложь)
	// Вставить содержимое обработчика.
	Thumbprint_1=Неопределено;
	Если НаКлиенте(Thumbprint_1) Тогда
		
		Попытка
			ЛицензияОпределить_Просто(Thumbprint_1);
		Исключение
		КонецПопытки;
		
		СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			Попытка
				СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
			исключение
				СРегистра=Неопределено;
			КонецПопытки;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			ПоказатьПредупреждение(,"Не удалось получить токен по организации");
			Возврат;
		Конецесли;
		
 	Если Ложь И ОбработкаWEBНаСервере Тогда
		Если НЕ ЗагрузканаСерверИзЦРПТ(Thumbprint_1,СРегистра,УжеОтправили) Тогда
				Если УжеОтправили=Истина Тогда
				//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ЗагрузитьИзЦРПТ(Команда,Истина)			
		КонецЕсли
		
		КонецЕсли;
		
		
	Иначе
		
		
Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
			
	СРегистра="";
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
		//АдресКАПИ=СтрЗаменить(Thumbprint_1.АдресКАПИ,"api.","");
		  АдресКАПИ=Thumbprint_1.АдресКАПИ;
		

			
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;   
			
				Куки="lk-auth-token="+Срегистра ;
				
				
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("start_from");	
	Чтен.ЗаписатьЗначение(0);
	Чтен.ЗаписатьИмяСвойства("count");
	Чтен.ЗаписатьЗначение(СколькоНаСтранице);
	Чтен.ЗаписатьИмяСвойства("filter");
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("doc_type");
	Чтен.ЗаписатьЗначение("602");
	
	
   Чтен.ЗаписатьКонецОбъекта();
   Чтен.ЗаписатьКонецОбъекта();

	Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
	Тело=СтрЗаменить(Тело,Символы.ПС,"");
	Тело=СтрЗаменить(Тело,Символы.ВК,"");
	
				
			
	HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/income");
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
	HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
	//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
							
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				//ЧтениеJSON = Новый ЧтениеJSON;
			Страница=0;
			Тотал=1;
			Пока Страница*СколькоНаСтранице<=Тотал Цикл
				
 					страница=Страница+1;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Тотал=NNN.total;
				
				Если СколькоНаСтранице>NNN.documents.Количество() Тогда
					 Тотал=NNN.documents.Количество()
				КонецЕсли;
				
				did="";
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				docDate="";
				Для Каждого Стр Из  NNN.documents Цикл
					
					
												Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
														HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/download/"+Стр.document_id+"");
													Иначе
														HTTPЗапрос=Новый HTTPЗапрос("documents/download/"+Стр.document_id+"");
											/////			
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
												КонецЕсли;
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
											Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
											
											
Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
																							
											NNN_2_Ы=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
											
											Попытка
												Сайт_1=NNN_2_Ы.link;
											Исключение
												Продолжить;
											КонецПопытки;
											Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
											Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
											
											

																
											
														HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
								//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
								///Константин           
								//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
								Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
								Текст1=Ответ.ПолучитьТелоКакСтроку();
								
										КонецЕсли;													ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
											
																						
											
			//Попытка
				
				
				МассивПроудкций=Новый Массив;
				МассивКонтрагентов=Новый Массив;
				Попытка
					ЗаполненаТабличнаяЧастьПриемки=Ложь;
					дкоументФарм=ДобавитОтгрузка(Текст1,Стр,МассивПроудкций,МассивКонтрагентов,ЗаполненаТабличнаяЧастьПриемки);
					//Если ПриЗагрузкеПриемкиЗаполнятьПроверкаПоКМ=Истина И ЗаполненаТабличнаяЧастьПриемки<>Истина тОгда
					//	Форм=ОткрытьФорму("Документ.Приемка_ХамелеонЦРПТ.Форма.ФормаДокумента",
					//	Новый Структура("Ключ",дкоументФарм));
					//	Форм.ЗакачатьДетальнуюИнформацию("");
					//	Форм.Записать();
					//	Форм.Закрыть();
					//КонецЕсли;
				Исключение
					   Инфо = ИнформацияОбОшибке();
    Сообщить("Описание='" + Инфо.Описание + "'");
    Сообщить("ИмяМодуля='" + Инфо.ИмяМодуля + "'");
    Сообщить("НомерСтроки=" + Инфо.НомерСтроки);
    Сообщить("ИсходнаяСтрока='" + Инфо.ИсходнаяСтрока + "'");

					Сообщить(Стр.document_id);
					Сообщить(Текст1);
				КонецПопытки;
					Для Каждого Стр_1 Из МассивПроудкций Цикл
						
						Попытка
									Чтен=Новый  ЗаписьJSON;
										Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
										Чтен.ЗаписатьНачалоОбъекта();
										Чтен.ЗаписатьИмяСвойства("start_from");	
										Чтен.ЗаписатьЗначение(0);
										Чтен.ЗаписатьИмяСвойства("count");
										Чтен.ЗаписатьЗначение(СколькоНаСтранице);
										Чтен.ЗаписатьИмяСвойства("filter");
										Чтен.ЗаписатьНачалоОбъекта();
										
										Чтен.ЗаписатьИмяСвойства("gtin");
										Чтен.ЗаписатьЗначение(Стр_1);
										
										
													       Чтен.ЗаписатьКонецОбъекта();
										
										//Чтен.ЗаписатьЗначение("{}");
													       Чтен.ЗаписатьКонецОбъекта();
													
													Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
										Тело=СтрЗаменить(Тело,Символы.ПС,"");
										Тело=СтрЗаменить(Тело,Символы.ВК,"");
										
						
						
								HTTPЗапрос=Новый HTTPЗапрос("api/v1/reestr/med_products/public/filter");
								          HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
								
												//	Иначе
												//	HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.document_id+"");
											/////			
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
												//	КонецЕсли;
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
											HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
											Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
											ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьПродукцию(Текст1);
											
											
												ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
											
																						
											Исключение
											КонецПопытки;
					Конеццикла;
					
					
					Для Каждого Стр_1 Из МассивКонтрагентов Цикл
						
						Попытка
									Чтен=Новый  ЗаписьJSON;
										Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
										Чтен.ЗаписатьНачалоОбъекта();
										Чтен.ЗаписатьИмяСвойства("start_from");	
										Чтен.ЗаписатьЗначение(0);
										Чтен.ЗаписатьИмяСвойства("count");
										Чтен.ЗаписатьЗначение(СколькоНаСтранице);
										Чтен.ЗаписатьИмяСвойства("filter");
										Чтен.ЗаписатьНачалоОбъекта();
										
										Чтен.ЗаписатьИмяСвойства("system_subj_id");
										Чтен.ЗаписатьЗначение(Стр_1);
										
										Чтен.ЗаписатьИмяСвойства("reg_entity_type");
										Чтен.ЗаписатьЗначение("1");
										
													       Чтен.ЗаписатьКонецОбъекта();
										
										//Чтен.ЗаписатьЗначение("{}");
													       Чтен.ЗаписатьКонецОбъекта();
													
													Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
										Тело=СтрЗаменить(Тело,Символы.ПС,"");
										Тело=СтрЗаменить(Тело,Символы.ВК,"");
										
						
						
								HTTPЗапрос=Новый HTTPЗапрос("api/v1/reestr_partners/filter");
								          HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
								
												//	Иначе
												//	HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.document_id+"");
											/////			
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
												//	КонецЕсли;
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
											HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
											Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
											ЗаписатьКонтрагента(Текст1);
											
											
												ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
											
																						
				Исключение
					КонецПопытки;
						
					Конеццикла;

					
														  //ОработатьДокументы(Стр,Результат,Ошибка)

														
														//ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
																									//Исключение
											//	КонецПопытки;
											 Конеццикла;

					
								//Конеццикла;
				
				Если Страница*СколькоНаСтранице>Тотал Тогда
					Прервать;
				КонецЕсли;
				
			 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("start_from");	
	Чтен.ЗаписатьЗначение(Страница*СколькоНаСтранице);
	Чтен.ЗаписатьИмяСвойства("count");
	Чтен.ЗаписатьЗначение(СколькоНаСтранице);
	Чтен.ЗаписатьИмяСвойства("filter");
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("doc_type");
	Чтен.ЗаписатьЗначение("602");
	Чтен.ЗаписатьКонецОбъекта();
	
	Чтен.ЗаписатьКонецОбъекта();
				
	Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
	Тело=СтрЗаменить(Тело,Символы.ПС,"");
	Тело=СтрЗаменить(Тело,Символы.ВК,"");
	
		
				HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/income");
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
	HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
	//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
							
	
	

	Если Ответ.КодСостояния<>202 И Ответ.КодСостояния<>200  Тогда
		Если УжеОтправили=Истина Тогда
				Сообщить("Не удалось загрузить приходы с ЦРПТ, отсутствует доступ.");
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Возврат;
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ЗагрузкаОбратногоАкцепта(Команда,Истина)			
			КонецЕсли
	КонецЕсли;
	
	Конеццикла;	
				
				
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ЗагрузкаОбратногоАкцепта(Команда,Истина)			
			КонецЕсли
	Иначе
					Попытка
						//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							
						Исключение
							Попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								
								Если Найти(Текст1,"Billing contract")>0 И
									Найти(Текст1,"not signed by participant")>0 Тогда
									Сообщить("Договор биллинга для выбранной группы товаров не подписан участником");
								КонецЕсли;
								
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	Элементы.Отгрузка_Список.Обновить();
			  Возврат;
		КонецЕсли;
		КонецЕсли;
		КонецЕсли;
		

КонецПроцедуры

Функция   ДобавитОтгрузка(Знач Текст1,Стр,МассивПроудцкий,МассивКонтрагентов,ЗаполненаТабличнаяЧастьПриемки);
									 												          Чтен=Новый ЧтениеXML;
										    Чтен.УстановитьСтроку(Текст1);
	ОтветСтруктура = ФабрикаXDTO.ПрочитатьXML(Чтен).receive_order_notification;	
	
	ИдДокумента=Стр.document_id;
	
	ДокументПриемки=Документы.Отгрузка_ХамелеонЦРПТ.НайтиПоРеквизиту("_Order_ID",ИдДокумента);
	Если ЗначениеЗаполнено(ДокументПриемки) тогда
		ДокументПриемки=ДокументПриемки.ПолучитьОбъект();
		Если ДокументПриемки.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан 
			ИЛИ ДокументПриемки.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен 
			
		ИЛИ ДокументПриемки.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик")
		ИЛИ ДокументПриемки.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ЧастичноПринят")
		ИЛИ ДокументПриемки.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ЧерновикОбработан")
			
			Тогда
			//ЗаполненаТабличнаяЧастьПриемки=ДокументПриемки.ПроверкаПоНомерамКМ.Количество()>0;
			Возврат ДокументПриемки.Ссылка
		КонецЕсли;
	Иначе
		
		ДокументПриемки=Документы.Отгрузка_ХамелеонЦРПТ.СоздатьДокумент();
	КонецЕслИ;
	
	ДокументПриемки._Order_ID=ИдДокумента;
ДокументПриемки.Организация=Пользователь.Организация;                
ДокументПриемки.ТекущийПользователь=Пользователь;
ДатаВыдачи=Стр.date;
ДокументПриемки.Дата=Дата(Сред(ДатаВыдачи,1,4),Сред(ДатаВыдачи,6,2),Сред(ДатаВыдачи,9,2),Сред(ДатаВыдачи,12,2),Сред(ДатаВыдачи,15,2),Сред(ДатаВыдачи,18,2));

ДатаВыдачи=ОтветСтруктура.doc_date;
ДокументПриемки.ДатаДокумента=	Дата(Сред(ДатаВыдачи,7,4),Сред(ДатаВыдачи,4,2),Сред(ДатаВыдачи,1,2));
ДокументПриемки.НомерДокумента=ОтветСтруктура.doc_num;
ДокументПриемки.НомерПервичногоДокумента=ОтветСтруктура.doc_num;
ДокументПриемки.ДатаПервичногоДокумента=ДокументПриемки.ДатаДокумента;
Если ОтветСтруктура.contract_type="1"	Тогда
	ДокументПриемки.ТипОтгрузкиФармацевтика=Перечисления.ТипыОперацииОтгрузкиСоСкладаФармацевтика_ХамелеонЦРПТ.Продажа
КонецЕсли;
Если ОтветСтруктура.Свойства().Получить("contract_num")<>Неопределено Тогда
	ДокументПриемки.НомерГосКонтракта=ОтветСтруктура.contract_num
КонецЕсли;




ДокументПриемки.ДоговорОрганизации=Справочники.Договора_ХамелеонЦРПТ.НайтиПоРеквизиту("РегистрационныйНомер",Стр.receiver,,ДокументПриемки.Организация);
Если Не ЗначениеЗаполнено(ДокументПриемки.ДоговорОрганизации) Тогда
спрК=Справочники.Договора_ХамелеонЦРПТ.СоздатьЭлемент();
СпрК.РегистрационныйНомер=Стр.receiver;
//СпрК.Рег=Стр.sender_sys_id;
СпрК.Наименование=СпрК.subjectIdФармацевтика;
СпрК.Владелец=ДокументПриемки.Организация;
СпрК.Записать();
ДокументПриемки.ДоговорОрганизации=СпрК.Ссылка;
КонецЕсли;
//Если Не ЗначениеЗАполнено(ДокументПриемки.ОрганизацияОтправитьль_Лекарства.ИНН) Тогда
//	МассивКонтрагентов.Добавить(Стр.sender_sys_id);
//КонецЕсли;	
//ДокументПриемки.Контрагент=ДокументПриемки.ОрганизацияОтправитьль_Лекарства;



	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Договора_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Договора_ХамелеонЦРПТ КАК Договора_ХамелеонЦРПТ
		|ГДЕ
		|	Договора_ХамелеонЦРПТ.РегистрационныйНомер = &РегистрационныйНомер";
	
	Запрос.УстановитьПараметр("РегистрационныйНомер", Стр.sender);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ДоговорПокупатель=Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ДоговорПокупатель=ВыборкаДетальныеЗаписи.Ссылка;
		Если ТипЗнч(ДоговорПокупатель.Владелец)=Тип("СправочникСсылка.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ") 
			И ЗначениеЗАполнено(ДоговорПокупатель.Владелец)
			Тогда
			
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Если ЗначениеЗаполнено(ДоговорПокупатель) тогда

		ДокументПриемки.Договор=ДоговорПокупатель;
		ДокументПриемки.Контрагент=ДокументПриемки.Договор.Владелец;
	Иначе
		
		СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("subjectIdФармацевтика",Стр.sender);
		Если Не ЗначениеЗАполненО(СпрК) тогда
			
			спрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрК.subjectIdФармацевтика=Стр.sender;
			СпрК.subjectId_sys_Фармацевтика=Стр.sender_sys_id;
			СпрК.Наименование=СпрК.subjectIdФармацевтика;
			СпрК.Записать();
		КонецЕсли;
		ДокументПриемки.Контрагент=СпрК.Ссылка;
		
		СпрДоговор=Справочники.Договора_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрДоговор.РегистрационныйНомер=Стр.sender;
		СпрДоговор.Наименование=СпрДоговор.РегистрационныйНомер;
		СпрДоговор.Владелец=СпрК.Ссылка;
		СпрДоговор.Записать();
		ДокументПриемки.Договор=СпрДоговор.Ссылка;
	КонецЕсли;
//Если Не ЗначениеЗАполнено(ДокументПриемки.ОрганизацияПолучатель_Лекарства.ИНН) Тогда
//	МассивКонтрагентов.Добавить(Стр.request_id);
//КонецЕсли;	

		Если Не ЗначениеЗаполнено(ДокументПриемки.Контрагент.Инн) Тогда
				МассивКонтрагентов.Добавить(Стр.sender_sys_id);
		Конецесли;
		


ДокументПриемки.Товары.Очистить();
ДокументПриемки.СерийныеНомера.Очистить();
//ДокументПриемки.Короба.Очистить();
Если ТипЗнч(ОтветСтруктура.order_details.union)=Тип("ОбъектXDTO") тогда
	
	   Стр_1=ОтветСтруктура.order_details.union;
	
		Добав=Документприемки.СерийныеНомера.Добавить();
		Если Стр_1.Свойства().Получить("sgtin")=Неопределено Тогда
			
			//Сообщить(Текст1);
			
			// Сообщить("Есть упаковки");
			//Сообщить(Стр_1.sscc_detail.sscc);
			Добав.cis=Стр_1.sscc_detail.sscc;
			
			detail=Неопределено;
			если  Стр_1.sscc_detail.Свойства().Получить("detail")<>Неопределено Тогда
				  detail=Стр_1.sscc_detail.detail;
			////Для Каждого Стр_222 Из     detail Цикл
				Добав.GTIN=detail.gtin;
				Добав.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(Добав.GTIN));
				Если не ЗначениеЗаполнено(Добав.НаименованиеТовара) Тогда
					СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
					СпрПр.GTIN=число(Сред(Добав.cis,1,14));
					СпрПр.Наименование=xmlString(СпрПр.GTIN);
					СпрПр.НаименованиеТовара=xmlString(СпрПр.GTIN);
					СпрПр.Записать();
					Добав.НаименованиеТовара=СпрПр.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			
			//Добав.GTIN=Сред(Добав.cis,1,14);
			//Добав.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(Добав.GTIN));
			//Если не ЗначениеЗаполнено(Добав.НаименованиеТовара) Тогда
			//	СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
			//	СпрПр.GTIN=число(Сред(Добав.cis,1,14));
			//	СпрПр.Наименование=xmlString(СпрПр.GTIN);
			//	СпрПр.Записать();
			//	Добав.НаименованиеТовара=СпрПр.Ссылка;
			//КонецЕсли;
							
			//Конеццикла;
			//КонецЕсли;
			Цена=Стр_1.cost;
			Нстр=ДокументПриемки.Товары.НайтиСтроки(Новый Структура("GTIN,Цена",Добав.НаименованиеТовара,Цена));
			Если НСтр.Количество()=0 Тогда
				НСтр=ДокументПриемки.Товары.Добавить();
				НСтр.GTIN=Добав.НаименованиеТовара;
				НСтр.НомерСтрокиСвязи=НСтр.НомерСтроки;
				Попытка
					Если Число(НСтр.GTIN.GTIN)=Число(НСтр.GTIN.Наименование) тогда
						МассивПроудцкий.Добавить(Добав.GTIN);
						
					КонецЕсли;
				Исключение
				КонецПопытки;
			Иначе
				НСтр=Нстр[0]
			КонецЕсли;
			//Добав.НДС=Стр_1.vat_value;
			Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
			НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
			НСтр.Сумма=НСтр.Сумма+Стр_1.cost;
			НСтр.НДС=НСтр.НДС+Стр_1.vat_value;
			Нстр.Цена=НСтр.Сумма/НСтр.КоличествоКМ;
			 
			 
		Иначе
			Добав.cis=Стр_1.sgtin;
			Добав.GTIN=Сред(Добав.cis,1,14);
			Цена=Стр_1.cost;
			Добав.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(Добав.GTIN));
			Если не ЗначениеЗаполнено(Добав.НаименованиеТовара) Тогда
				СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
				СпрПр.GTIN=число(Сред(Добав.cis,1,14));
				СпрПр.Наименование=xmlString(СпрПр.GTIN);
				СпрПр.НаименованиеТовара=xmlString(СпрПр.GTIN);
				СпрПр.Записать();
				Добав.НаименованиеТовара=СпрПр.Ссылка;
			КонецЕсли;
			//Нстр=ДокументПриемки.Товары.Найти(Добав.НаименованиеТовара,"GTIN");
			Нстр=ДокументПриемки.Товары.НайтиСтроки(Новый Структура("GTIN,Цена",Добав.НаименованиеТовара,Цена));
			Если НСтр.Количество()=0 Тогда
				НСтр=ДокументПриемки.Товары.Добавить();
				НСтр.GTIN=Добав.НаименованиеТовара;
				НСтр.НомерСтрокиСвязи=НСтр.НомерСтроки;
				Попытка
					Если Число(НСтр.GTIN.GTIN)=Число(НСтр.GTIN.Наименование) тогда
						МассивПроудцкий.Добавить(Добав.GTIN);
						
					КонецЕсли;
				Исключение
				КонецПопытки;
			Иначе
				НСтр=НСтр[0]
			КонецЕсли;
			//Добав.НДС=Стр_1.vat_value;
			Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
			НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
			НСтр.Сумма=НСтр.Сумма+Стр_1.cost;
			НСтр.НДС=НСтр.НДС+Стр_1.vat_value;
			Нстр.Цена=НСтр.Сумма/НСтр.КоличествоКМ;
						
		КонецЕсли;
		
	
Иначе
	Для Каждого Стр_1 Из ОтветСтруктура.order_details.union Цикл
		//Добав=ДокументПриемки.Товары.Добавить();
		//Добав.GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",
		Добав=Документприемки.СерийныеНомера.Добавить();
		Если Стр_1.Свойства().Получить("sgtin")=Неопределено Тогда
			
			//Сообщить(Текст1);
			
			// Сообщить("Есть упаковки");
			//Сообщить(Стр_1.sscc_detail.sscc);
			Добав.cis=Стр_1.sscc_detail.sscc;
			
			detail=Неопределено;
			если  Стр_1.sscc_detail.Свойства().Получить("detail")<>Неопределено Тогда
				  detail=Стр_1.sscc_detail.detail;
			////Для Каждого Стр_222 Из     detail Цикл
				Добав.GTIN=detail.gtin;
				
				Добав.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(Добав.GTIN));
				Если не ЗначениеЗаполнено(Добав.НаименованиеТовара) Тогда
					СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
					СпрПр.GTIN=число(Сред(Добав.cis,1,14));
					СпрПр.Наименование=xmlString(СпрПр.GTIN);
					СпрПр.НаименованиеТовара=xmlString(СпрПр.GTIN);
					СпрПр.Записать();
					Добав.НаименованиеТовара=СпрПр.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			
			//Добав.GTIN=Сред(Добав.cis,1,14);
			//Добав.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(Добав.GTIN));
			//Если не ЗначениеЗаполнено(Добав.НаименованиеТовара) Тогда
			//	СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
			//	СпрПр.GTIN=число(Сред(Добав.cis,1,14));
			//	СпрПр.Наименование=xmlString(СпрПр.GTIN);
			//	СпрПр.Записать();
			//	Добав.НаименованиеТовара=СпрПр.Ссылка;
			//КонецЕсли;
							
			//Конеццикла;
			//КонецЕсли;
			Цена=Стр_1.cost;
			Нстр=ДокументПриемки.Товары.НайтиСтроки(Новый Структура("GTIN,Цена",Добав.НаименованиеТовара,Цена));
			Если НСтр.Количество()=0 Тогда
				НСтр=ДокументПриемки.Товары.Добавить();
				НСтр.НомерСтрокиСвязи=НСтр.НомерСтроки;
				НСтр.GTIN=Добав.НаименованиеТовара;
				Попытка
					Если Число(НСтр.GTIN.GTIN)=Число(НСтр.GTIN.Наименование) тогда
						МассивПроудцкий.Добавить(Добав.GTIN);
						
					КонецЕсли;
				Исключение
				КонецПопытки;
			Иначе                       
				Нстр=Нстр[0];
			КонецЕсли;
			НДС=Стр_1.vat_value;
			
			Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
			НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
			НСтр.Сумма=НСтр.Сумма+Стр_1.cost;
			НСтр.НДС=НСтр.НДС+Стр_1.vat_value;
			Нстр.Цена=НСтр.Сумма/НСтр.КоличествоКМ;
			 
			 
		Иначе
			Добав.cis=Стр_1.sgtin;
			Добав.GTIN=Сред(Добав.cis,1,14);
			Цена=Число(Стр_1.cost);
			Добав.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(Добав.GTIN));
			Если не ЗначениеЗаполнено(Добав.НаименованиеТовара) Тогда
				СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
				СпрПр.GTIN=число(Сред(Добав.cis,1,14));
				СпрПр.Наименование=xmlString(СпрПр.GTIN);
				СпрПр.НаименованиеТовара=xmlString(СпрПр.GTIN);
				СпрПр.Записать();
				Добав.НаименованиеТовара=СпрПр.Ссылка;
			КонецЕсли;
			Нстр=ДокументПриемки.Товары.НайтиСтроки(Новый Структура("GTIN,Цена",Добав.НаименованиеТовара,Цена));
			Если НСтр.Количество()=0 Тогда
				НСтр=ДокументПриемки.Товары.Добавить();
				НСтр.НомерСтрокиСвязи=НСтр.НомерСтроки;
				НСтр.GTIN=Добав.НаименованиеТовара;
				Попытка
					Если Число(НСтр.GTIN.GTIN)=Число(НСтр.GTIN.Наименование) тогда
						Если МассивПроудцкий.Найти(Добав.GTIN)=Неопределено Тогда
							МассивПроудцкий.Добавить(Добав.GTIN);
						КонецЕсли;
						
					КонецЕсли;
				Исключение
				КонецПопытки;
			Иначе
				НСтр=НСтр[0];
			КонецЕсли;
			Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
			НДС=Стр_1.vat_value;
			
			НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
			НСтр.Сумма=НСтр.Сумма+Стр_1.cost;
			НСтр.НДС=НСтр.НДС+Стр_1.vat_value;
			Нстр.Цена=НСтр.Сумма/НСтр.КоличествоКМ;
						
		КонецЕсли;
		
		
		
		 
		
	Конеццикла;
	
Конецесли;
ДокументПриемки.ОбратныйАкцепт=Истина;
ДокументПриемки.Записать();

						Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
					 ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапистьПриемкку(ДокументПриемки.Ссылка,Текст1);
					
				Конецесли;
	//		ЗаполненаТабличнаяЧастьПриемки=Ложь;
				
	//			Возврат документПриемки.Ссылка;
КонецФункции


&НаСервере
Процедура ПриЗагрузкеИзЭДООбновлятьНазваниеПродукцииПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ПриЗагрузкеИзЭДООбновлятьНазваниеПродукции=ПриЗагрузкеИзЭДООбновлятьНазваниеПродукции;
	РегДв.Записать(Истина);
КонецПроцедуры


&НаКлиенте
Процедура ПриЗагрузкеИзЭДООбновлятьНазваниеПродукцииПриИзменении(Элемент)
	ПриЗагрузкеИзЭДООбновлятьНазваниеПродукцииПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Процедура ПроверятьПередОтправкойНомерКоробаИСоздаватьНовыйПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ПроверятьПередОтправкойНомерКоробаИСоздаватьНовый=ПроверятьПередОтправкойНомерКоробаИСоздаватьНовый;
	РегДв.Записать(Истина);
КонецПроцедуры


&НаКлиенте
Процедура ПроверятьПередОтправкойНомерКоробаИСоздаватьНовыйПриИзменении(Элемент)
	ПроверятьПередОтправкойНомерКоробаИСоздаватьНовыйПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Функция ПечатьУКДНаСервере(ТабДокумент,Ссылка,КМ=Ложь) Экспорт
	
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПечатьУКДНаСервере(ТабДокумент,Ссылка,КМ,КодТовараВУПД);
	
КонецФункции


&НаКлиенте
Процедура ПечатьУКД(Команда)
	// Вставить содержимое обработчика.
	
		Печать=Новый ТабличныйДокумент;
	Для Каждого Стр_1 Из Элементы.Отгрузка_Список.ВыделенныеСтроки Цикл
	ПечатьУКДНаСервере(печать,Стр_1);
	
	Конеццикла;
	Печать.АвтоМасштаб=Истина;
	Печать.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	
	Печать.ИмяПараметровПечати="Печать_УПД";
	Печать.Показать();
	
КонецПроцедуры


&НаКлиенте
Процедура ГрузитьФармацевтикуСНачала(Команда)
	// Вставить содержимое обработчика.
	ОчиститьПриемкуНаСервере();
	ЗагрузитьИзЦРПТ("");
КонецПроцедуры


&НаСервере
Процедура НеДобавлятьКМПриФормированииXMLПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.НеДобавлятьКМПриФормированииXML=НеДобавлятьКМПриФормированииXML;
	РегДв.Записать(Истина);
КонецПроцедуры


&НаКлиенте
Процедура НеДобавлятьКМПриФормированииXMLПриИзменении(Элемент)
	НеДобавлятьКМПриФормированииXMLПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ФормироватьАгрегатПоНовомуПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если не ЗначениеЗаполнено(КоличествоЗнаковВКМАгрегата) тогда
		КоличествоЗнаковВКМАгрегата=18;
		КоличествоЗнаковВКМАгрегатаПриИзмененииНаСервере()
	КонецЕсли;
	
	
ПриИзмененииФормироватьПоНовому()	
КонецПроцедуры

Процедура ПриИзмененииФормироватьПоНовому()
		РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ФормироватьАгрегатПоНовому=ФормироватьАгрегатПоНовому;
	РегДв.Записать(Истина);

	
КонецПроцедуры


&НаСервере
Процедура КачатьСЭДОЗаПоследниеДниПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.КачатьСЭДОЗаПоследниеДни=КачатьСЭДОЗаПоследниеДни;
	РегДв.Записать(Истина);
КонецПроцедуры


&НаКлиенте
Процедура КачатьСЭДОЗаПоследниеДниПриИзменении(Элемент)
	КачатьСЭДОЗаПоследниеДниПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Процедура ОтправлятьВЭДООткрепленнуюПодписьПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ОтправлятьВЭДООткрепленнуюПодпись=ОтправлятьВЭДООткрепленнуюПодпись;
	РегДв.Записать(Истина);
КонецПроцедуры


&НаКлиенте
Процедура ОтправлятьВЭДООткрепленнуюПодписьПриИзменении(Элемент)
	ОтправлятьВЭДООткрепленнуюПодписьПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Процедура КоличествоЗнаковВКМАгрегатаПриИзмененииНаСервере()
		РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.КоличествоЗнаковВКМАгрегата=КоличествоЗнаковВКМАгрегата;
	РегДв.Записать(Истина);

	
КонецПроцедуры


&НаКлиенте
Процедура КоличествоЗнаковВКМАгрегатаПриИзменении(Элемент)
	КоличествоЗнаковВКМАгрегатаПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура СоздатьОтчетОНанесенииИзXML(Команда)
	// Вставить содержимое обработчика.
		
	Перем Файл;
	ВклЗаг = 0;
	//ДанныеЛиста.Очистить();
	Режим=РежимДиалогаВыбораФайла.Открытие;
	нДиалог= НОвый ДиалогВыбораФайла(Режим);
	//Фильтр="Файл xls/txt/xml|*.xls;*.xlsx;*.txt;*.xml|Файл txt|*.txt|Файл xls|*.xls;*.xlsx|Файл xml|*.xml";
	Фильтр="Файл xml|*.xml";
	нДиалог.МножественныйВыбор=Истина;
	нДиалог.Фильтр=Фильтр;
	нДиалог.Заголовок="Выберите файл для загрузки..." ;
	нДиалог.Показать(Новый ОписаниеОповещения("ПослеВыбораФайла_ОтчетНанесения_ХамелеонЦРПТ",ЭтаФорма,Ложь));
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайла_ОтчетНанесения_ХамелеонЦРПТ(РР,ДД) Экспорт
	МассивАгрегация=Новый Массив;
	МассивАгрегация.Очистить();
	Если РР<>Неопределено тогда
		Для Каждого Стр_Ф Из РР Цикл
			
			ДвоичнДанные=Новый ДвоичныеДанные(Стр_Ф);
			СоздатьОтчетОНанесении(ДвоичнДанные,МассивАгрегация);
			
			
			
		Конеццикла;
		
		Если дД=Истина Тогда
			
			Для Каждого Стр_1 Из МассивАгрегация Цикл
				Форм=ПолучитьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
				"Ключ",Стр_1));
				Форм.ОтправитьЗаявку(ДД);
				
			Конеццикла;
			
		КонецЕслИ;
		Элементы.ВводВОборотТаблица.Обновить();
	КонецЕсли;
	
	
	
КонецПроцедуры

Процедура СоздатьОтчетОНанесении(ДвоичнДанные,МассивАгрегация)
	
	
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СоздатьОтчетОНанесении(ДвоичнДанные,МассивАгрегация);
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьОтчетОНанесенииИзXMLИОтправить(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Перем Файл;
	ВклЗаг = 0;
	//ДанныеЛиста.Очистить();
	Режим=РежимДиалогаВыбораФайла.Открытие;
	нДиалог= НОвый ДиалогВыбораФайла(Режим);
	//Фильтр="Файл xls/txt/xml|*.xls;*.xlsx;*.txt;*.xml|Файл txt|*.txt|Файл xls|*.xls;*.xlsx|Файл xml|*.xml";
	Фильтр="Файл xml|*.xml";
	нДиалог.МножественныйВыбор=Истина;
	нДиалог.Фильтр=Фильтр;
	нДиалог.Заголовок="Выберите файл для загрузки..." ;
	нДиалог.Показать(Новый ОписаниеОповещения("ПослеВыбораФайла_ОтчетНанесения_ХамелеонЦРПТ",ЭтаФорма,Истина));
	
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьСписаниеИзXML(Команда)
	// Вставить содержимое обработчика.
		
	Перем Файл;
	ВклЗаг = 0;
	//ДанныеЛиста.Очистить();
	Режим=РежимДиалогаВыбораФайла.Открытие;
	нДиалог= НОвый ДиалогВыбораФайла(Режим);
	//Фильтр="Файл xls/txt/xml|*.xls;*.xlsx;*.txt;*.xml|Файл txt|*.txt|Файл xls|*.xls;*.xlsx|Файл xml|*.xml";
	Фильтр="Файл xml|*.xml";
	нДиалог.МножественныйВыбор=Истина;
	нДиалог.Фильтр=Фильтр;
	нДиалог.Заголовок="Выберите файл для загрузки..." ;
	нДиалог.Показать(Новый ОписаниеОповещения("ПослеВыбораФайла_Списание_ХамелеонЦРПТ",ЭтаФорма,Ложь));
	
	
КонецПроцедуры



Процедура СоздатьСписаниеПоФайлу(ДвоичнДанные,МассивАгрегация)
	
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СоздатьСписаниеПоФайлу(ДвоичнДанные,МассивАгрегация);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайла_Списание_ХамелеонЦРПТ(РР,ДД) Экспорт
	МассивАгрегация=Новый Массив;
	МассивАгрегация.Очистить();
	Если РР<>Неопределено тогда
		Для Каждого Стр_Ф Из РР Цикл
			
			ДвоичнДанные=Новый ДвоичныеДанные(Стр_Ф);
			СоздатьСписаниеПоФайлу(ДвоичнДанные,МассивАгрегация);
			
			
			
		Конеццикла;
		
		Если дД=Истина Тогда
			
			Для Каждого Стр_1 Из МассивАгрегация Цикл
				Форм=ПолучитьФорму("Документ.СписаниеКМНанесенныхНеНанесенныхНаТовар_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
				"Ключ",Стр_1));
				Форм.ОтправитьЗаявку(ДД);
				
			Конеццикла;
			
		КонецЕслИ;
		Элементы.Списание.Обновить();
	КонецЕсли;
	
	
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузкаСписанияИзXMLИОтправить(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
		
	Перем Файл;
	ВклЗаг = 0;
	//ДанныеЛиста.Очистить();
	Режим=РежимДиалогаВыбораФайла.Открытие;
	нДиалог= НОвый ДиалогВыбораФайла(Режим);
	//Фильтр="Файл xls/txt/xml|*.xls;*.xlsx;*.txt;*.xml|Файл txt|*.txt|Файл xls|*.xls;*.xlsx|Файл xml|*.xml";
	Фильтр="Файл xml|*.xml";
	нДиалог.МножественныйВыбор=Истина;
	нДиалог.Фильтр=Фильтр;
	нДиалог.Заголовок="Выберите файл для загрузки..." ;
	нДиалог.Показать(Новый ОписаниеОповещения("ПослеВыбораФайла_Списание_ХамелеонЦРПТ",ЭтаФорма,Истина));
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьОдинВводВОборотПоВыделеннымОтчетамОНанесении(Команда)
	// Вставить содержимое обработчика.
	МассивЗаказов=Новый массив;
	Для Каждого Стр_1 Из Элементы.ВводВОборотТаблица.ВыделенныеСтроки Цикл
		МассивЗаказов.Добавить(Стр_1);
	Конеццикла;
	
	ВводВоборот_1=СоздатьВводВОборотПоВыделеннымНаСервереОтчетОНанесении(МассивЗаказов);
	ОткрытьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаДокумента",
	Новый Структура("Ключ",ВводВоборот_1));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьВводВОборотПоВыделеннымНаСервереОтчетОНанесении(МассивЗаказов)
	// Вставить содержимое обработчика.
	Если МассивЗаказов.Количество()>0 Тогда
		ВводВоборот=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
			Документоснование=МассивЗаказов[0];
			ВводВоборот.ДокОснование=Документоснование;
			ЗаполнитьЗначенияСвойств(ВводВоборот,ВводВоборот.ДокОснование,,"Номер,Дата,_Order_ID,Статус");
					ВводВоборот.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборот;
		Для Каждого Документоснование ИЗ МассивЗаказов Цикл
			Если Документоснование.ТипДокумента<>Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании Тогда
				Продолжить
			КонецЕсли;
			
			Для Каждого Стр_1_Д Из Документоснование.Товары Цикл
				Стр_1=ВводВоборот.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(Стр_1,Стр_1_Д,,"order_ID,Статус,ОшибкаОтправки,СтатусСтроки");
			Конеццикла;
			
		
			
			Для Каждого Стр_1_Д Из Документоснование.СерийныеНомера Цикл
				Стр_1=ВводВОборот.СерийныеНомера.Добавить();
				ЗаполнитьЗначенияСвойств(Стр_1,Стр_1_Д,,"Статус,Отправлена");
				
			cis=Стр_1.cis;
			Если Найти(cis,"%1D")>0 ТОгда
				cis=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьКороткийНомерКМ_Сайт(
				cis,ВводВоборот.ТекущийПользователь.СайтыВходаВСистему.Наименование);
				
			Иначе
				//ИЛИ ВводВОборот.ТекущийПользователь.СайтыВходаВСистему.Наименование="Молоко" Тогда
				  cis=СтрЗаменить(cis,Символ(29),"");
					Если ВводВоборот.ТекущийПользователь.СайтыВходаВСистему.Наименование="Молоко" Тогда
															  Если Сред(cis,32,4)="7003" Тогда	
												 	cis=Сред(cis,1,45);
																									ИначеЕсли Сред(cis,32,2)="17" Тогда
												 	cis=Сред(cis,1,39);
													
													ИначеЕсли СтрДлина(cis)<=30 Тогда
														cis=Сред(cis,1,24);
												Иначе
													cis=Сред(cis,1,31);
													
												КонецЕсли;
												
						КонецЕсли;
											
				КонецЕсли;
				Стр_1.cis=cis;
		Конеццикла;
		КонецЦикла
		
	КонецЕслИ;
	ВводВоборот.Дата=Текущаядата();
	
	ВводВоборот.Записать(РежимЗаписиДокумента.Запись);
	
	//Для Каждого Стр_1 Из МассивЗаказов Цикл
	//	ПолучОб=Стр_1.ПолучитьОбъект();
	//	ПолучОб.ВводВОборот=ВводВоборот.Ссылка;
	//	ПолучОб.Записать();
	//конеццикла;
	
							Сообщить("Создан документ "+Строка(ВводВоборот.Ссылка));
	Возврат 	ВводВоборот.Ссылка
Конецфункции


&НаКлиенте
Процедура СоздатьВводВОборотПоКаждомуОтчету(Команда)
	
	// Вставить содержимое обработчика.
	МассивЗаказов=Новый массив;
	Для Каждого Стр_1 Из Элементы.ВводВОборотТаблица.ВыделенныеСтроки Цикл
		МассивЗаказов.Добавить(Стр_1);
	Конеццикла;
	
	СоздатьВводВОборотПоВыделеннымНаСервереОтчетОНанесенииКаждый(МассивЗаказов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьВводВОборотПоВыделеннымНаСервереОтчетОНанесенииКаждый(МассивЗаказов)
	// Вставить содержимое обработчика.
	Если МассивЗаказов.Количество()>0 Тогда
		Для Каждого Документоснование ИЗ МассивЗаказов Цикл
			Если Документоснование.ТипДокумента<>Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании Тогда
				Продолжить
			КонецЕсли;
		ВводВоборот=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
			//Документоснование=МассивЗаказов[0];
			ВводВоборот.ДокОснование=Документоснование;
			ЗаполнитьЗначенияСвойств(ВводВоборот,ВводВоборот.ДокОснование,,"Номер,Дата,_Order_ID,Статус");
					ВводВоборот.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборот;
			
			Для Каждого Стр_1_Д Из Документоснование.Товары Цикл
				Стр_1=ВводВоборот.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(Стр_1,Стр_1_Д,,"order_ID,Статус,ОшибкаОтправки,СтатусСтроки");
			Конеццикла;
			
		
			
			Для Каждого Стр_1_Д Из Документоснование.СерийныеНомера Цикл
				Стр_1=ВводВОборот.СерийныеНомера.Добавить();
				ЗаполнитьЗначенияСвойств(Стр_1,Стр_1_Д,,"Статус,Отправлена");
				
			cis=Стр_1.cis;
			Если Найти(cis,"%1D")>0  Тогда
				cis=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьКороткийНомерКМ_Сайт(
				cis,ВводВОборот.ТекущийПользователь.СайтыВходаВСистему.Наименование)
			Иначе
				  cis=СтрЗаменить(cis,Символ(29),"");
					Если ВводВоборот.ТекущийПользователь.СайтыВходаВСистему.Наименование="Молоко" Тогда
															  Если Сред(cis,32,4)="7003" Тогда	
												 	cis=Сред(cis,1,45);
																									ИначеЕсли Сред(cis,32,2)="17" Тогда
												 	cis=Сред(cis,1,39);
													
												ИначеЕсли СтрДлина(cis)<=30 Тогда
														cis=Сред(cis,1,24);
												Иначе
													cis=Сред(cis,1,31);
													
												КонецЕсли;
												
						КонецЕсли;
											
				КонецЕсли;
					Стр_1.cis=cis;
			Конеццикла;
										
	ВводВоборот.Дата=Текущаядата();
	
	ВводВоборот.Записать(РежимЗаписиДокумента.Запись);
							Сообщить("Создан документ "+Строка(ВводВоборот.Ссылка));
										
		КонецЦикла
		
	КонецЕслИ;
	
	//Для Каждого Стр_1 Из МассивЗаказов Цикл
	//	ПолучОб=Стр_1.ПолучитьОбъект();
	//	ПолучОб.ВводВОборот=ВводВоборот.Ссылка;
	//	ПолучОб.Записать();
	//конеццикла;
	
//	Возврат 	ВводВоборот.Ссылка
КонецПроцедуры

&НаСервере
Процедура ПроверятьНаДубльПозицийВОтгрузкеПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ПроверятьНаДубльПозицийВОтгрузке=ПроверятьНаДубльПозицийВОтгрузке;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьНаДубльПозицийВОтгрузкеПриИзменении(Элемент)
	ПроверятьНаДубльПозицийВОтгрузкеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура УбиратьСкобкиПриСканированииПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.УбиратьСкобкиПриСканировании=УбиратьСкобкиПриСканировании;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура УбиратьСкобкиПриСканированииПриИзменении(Элемент)
	УбиратьСкобкиПриСканированииПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновлятьСтатусыЗаказовКМСДатыПриИзмененииНаСервере()
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ОбновлятьСтатусыЗаказовКМСДаты=ОбновлятьСтатусыЗаказовКМСДаты;
	РегДв.Записать(Истина);
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьСтатусыЗаказовКМСДатыПриИзменении(Элемент)
	ОбновлятьСтатусыЗаказовКМСДатыПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Функция СоздатьВыводИзОборотаВСтраныЕЭАСНаСервере(Ссылка)
	// Вставить содержимое обработчика.
	
	ДокумВв=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
	
			ДокОснование=Ссылка;
			ЗаполнитьЗначенияСвойств(ДокумВв,ДокОснование,,"Номер,Дата,_Order_ID,Статус");
			ДокумВВ.Дата=Текущаядата();
			
				ДокумВв.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота;
				ДокумВВ.ПричинаВыводаИзОборота=Перечисления.ПричинаВыводаИзОборота_ХамлеонЦРПТ.EEC_EXPORT;
							
				Для Каждого Стр_1 Из ДокОснование.СерийныеНомера    Цикл
					
					Добав=ДокумВв.СерийныеНомера.Добавить();
					ЗаполнитьЗначенияСвойств(Добав,Стр_1);
					
					КонецЦикла;;
					
					Для Каждого Стр_1 Из ДокОснование.Товары    Цикл
					
					Добав=ДокумВВ.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(Добав,Стр_1);
					
					Если Стр_1.КоличествоКМ<>0 Тогда
						Добав.СуммаНДС=Стр_1.НДС/Стр_1.КоличествоКМ;
					КонецЕсли;
				КонецЦикла;;
				ДокумВВ.Записать();
				Возврат ДокумВВ.Ссылка
	
КонецФункции

&НаКлиенте
Процедура СоздатьВыводИзОборотаВСтраныЕЭАС(Команда)
	Если Элементы.Приемкасписок.ТекущиеДанные<>Неопределено Тогда
		Докум=СоздатьВыводИзОборотаВСтраныЕЭАСНаСервере(Элементы.Приемкасписок.ТекущиеДанные.Ссылка);
		ОткрытьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаДокумента",
		Новый Структура("Ключ",Докум));
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура ПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка=Ложь;
	Форм=ОткрытьФорму("Справочник.Пользователи_ХамелеонЦРПТ.Форма.ФормаВыбора",,Элемент);
	СписокП=ОбщийМодуль_ОграничениеПользователей_ХамелеонЦРПТ.ВернутьСписокПользователей();
	Если СписокП<>Неопределено Тогда
		СписокЗначС=Новый СписокЗначений;
		Для каждого Стр Из СписокП Цикл
			СписокЗначС.Добавить(Стр);
		КонецЦикла;
			ДД=Форм.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ДД.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке;
			ДД.Использование=Истина;
			ДД.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Ссылка");
			ДД.ПравоеЗначение=СписокЗначС;
			ДД.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИздаватьЗвукПрИНеправильнойКМПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ИздаватьЗвукПрИНеправильнойКМ=ИздаватьЗвукПрИНеправильнойКМ;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИздаватьЗвукПрИНеправильнойКМПриИзменении(Элемент)
	ИздаватьЗвукПрИНеправильнойКМПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеИнформацииПоЭДОПриемкаВКоличествоПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ПриЗагрузкеИнформацииПоЭДОПриемкаВКоличество=ПриЗагрузкеИнформацииПоЭДОПриемкаВКоличество;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗагрузкеИнформацииПоЭДОПриемкаВКоличествоПриИзменении(Элемент)
	ПриЗагрузкеИнформацииПоЭДОПриемкаВКоличествоПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтменаВводВВоборот(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Для Каждого Стр Из Элементы.ВводВОборотТаблица.ВыделенныеСтроки Цикл
		Форм=ПолучитьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
		"Ключ",Стр));
		Форм.ТекущийПользователь=Пользователь;
		Форм.Отмена(Команда);
	КонецциклА;
	Элементы.ВводВОборотТаблица.Обновить();
КонецПроцедуры

&НаСервереБезКонтекста
Функция Аннулирование(Докум,Идентификатор)
	
	Идентификатор=Докум.Order_ID_УПД;
	Возврат "<?xml version=""1.0"" encoding=""utf-8""?>
|
|<DocumentActions>
|
|<Document InternalId="""+Докум.Order_ID_УПД+""" Action=""AcceptCancellationOffer"">
|
|</Document>
|
|</DocumentActions>";
	
Конецфункции


&НаКлиенте
Процедура ПодтверждениеПредложенияАннулированияТакском(Команда)
	// Вставить содержимое обработчика.
	
	// Вставить содержимое обработчика.
		МассивНакладных=Новый Массив;
	
	Для Каждого Стр_1 Из Элементы.Отгрузка_Список.ВыделенныеСтроки Цикл
		МассивНакладных.Добавить(Стр_1);
	Конеццикла;
	Если МассивНакладных.Количество()>0 тогда
		Форм=ПолучитьФорму("Документ.Отгрузка_ХамелеонЦРПТ.Форма.ФормаДокумента",
		Новый структура("Ключ",МассивНакладных[0]));
		Форм.ПодтверждениеПредложенияАннулирования_Массив(МассивНакладных);
	КонецЕсли;
	Элементы.Отгрузка_Список.Обновить();
	
	
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзJSON(Команда)
	// Вставить содержимое обработчика.
	
	// Вставить содержимое обработчика.
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Фильтр="Файл *|*.*";
	Диалог.Заголовок = НСтр("ru='Выберите файл для загрузки'", "ru");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлJSON", ЭтаФорма);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте 
Процедура ЗагрузитьФайлJSON(ВыбранныйФайл,ДД) Экспорт
	Thumbprint_1=ПолучитьИзПользователя();	
	
	Если ВыбранныйФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	ДД = Новый ДвоичныеДанные(ВыбранныйФайл[0]);
	Файл=Новый Файл(ВыбранныйФайл[0]);
	
	ДД = Новый ДвоичныеДанные(ВыбранныйФайл[0]);
	
	МассивУппешно=Новый Массив;
	ОшибкаЗагрузки=Ложь;
	
		Текст1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(ДД);
		NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);
		
		МассивУп=Новый Массив;
		Принять_1=Ложь;
		МассивКМ=Новый Массив;
		ЗаполненаТабличнаяЧастьПриемки=Ложь;
		
		ДокумПриемки=ОбновитьСтатусДокумента_Приемка(NNN,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа,,,,МассивКМ,ЗагрузатьНаименованиеПриПриемке,ЗаполненаТабличнаяЧастьПриемки,Принять_1);	
		
		Если ЗначениеЗаполненО(ДокумПриемки) тогда
			Сообщить("Создан документ "+Строка(докумПриемки));
		Конецесли;
			Если ПриЗагрузкеПриемкиЗаполнятьПроверкаПоКМ=Истина И ЗаполненаТабличнаяЧастьПриемки<>Истина тОгда
							Форм=ОткрытьФорму("Документ.Приемка_ХамелеонЦРПТ.Форма.ФормаДокумента",
							Новый Структура("Ключ",ДокумПриемки));
							Форм.ЗакачатьДетальнуюИнформацию("");
							Форм.Записать();
							Форм.Закрыть();
						КонецЕсли;
						Если МассивКМ.Количество()>0 Тогда
							
							СписокОбнТовара=Новый Массив;
							
							
							ЗаполненаТабличнаяЧастьПриемки=ложь;
							дкоументФарм=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьИнформациюНаСервереДЛяПриемки(Thumbprint_1,МассивКМ,СписокОбнТовара,ЗаполненаТабличнаяЧастьПриемки);
							
							
							
							Если ПриЗагрузкеПриемкиЗаполнятьПроверкаПоКМ=Истина И ЗаполненаТабличнаяЧастьПриемки<>Истина тОгда
								Форм=ОткрытьФорму("Документ.Приемка_ХамелеонЦРПТ.Форма.ФормаДокумента",
								Новый Структура("Ключ",дкоументФарм));
								Форм.ЗакачатьДетальнуюИнформацию("");
								Форм.Записать();
								Форм.Закрыть();
							КонецЕсли;
							
							
									Для Каждого Стр_1 Из СписокОбнТовара Цикл
										ОповеститьОбИзменении(Стр_1);
									КонецЦиклА;
									МассивКМ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСледющийМассив(ДокумПриемки);
									СписокОбнТовара.Очистить();

										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
														Прокси_20=Новый ИнтернетПрокси;
														Прокси_20.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
													
														HTTPСервисЗапрос_20=Новый HTTPСоединение("xn--80aqu.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,Прокси_20,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
													Иначе
														HTTPСервисЗапрос_20=Новый HTTPСоединение("xn--80aqu.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
													КонецЕсли;
													
												МассивСтруктур=Новый Массив;	
										Для Каждого Стр_1 из МассивКМ Цикл

											GTINНаименованиеТовара=Сред(Стр_1.Марка,3,14);
											HTTPЗапрос_20=Новый HTTPЗапрос("v3/product?gtin="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ДополнитьСтроку(Формат(GTINНаименованиеТовара,"ЧГ="))+"&apikey=l10k3203w65mbngr");
											HTTPЗапрос_20.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded; charset=UTF-8");
											//HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//Тело="task=getItemByGTIN&lng=ru&keyValue="+ДополнитьСтроку(Формат(Стр_1.GTINНаименованиеТовара,"ЧГ="));
									//		HTTPЗапрос.УстановитьТелоИзСтроки();
											//Тело);
											Ответ_20=HTTPСервисЗапрос_20.ОтправитьДляОбработки(HTTPЗапрос_20);
												Если Ответ_20.КодСостояния=200 Тогда
									Текст1_20=Ответ_20.ПолучитьТелоКакСтроку();
												NNN_20=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1_20);//ПрочитатьJSON(ЧтениеJSON);
											Название=неопределено;
											Попытка
												Название=NNN_20.result[0].good_name; 
											Исключение
											КонецПопытки;
											Если Название=Неопределено Тогда
												
									//			http://gepir.gs1ru.org/GEPIR40/index.jsp?p=gtin&lng=ru
											КонецЕсли;
											Если ЗначениеЗаполнено(Название) Тогда
												МассивСтруктур.Добавить(Новый Структура("gtin,Название",GTINНаименованиеТовара,Название));
												
											КонецЕсли;
											КонецЕсли;
										Конеццикла;
										
										МММ=Новый Массив;
										Если МассивСтруктур.Количество()>0 тогда
											МММ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагрузитьПродукции(МассивСтруктур);
											
										КонецЕсли;
										Для Каждого Стр_1 Из МММ Цикл
											ОповеститьОбИзменении(Стр_1);
										КонецЦиклА;
										
										МассивКМ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСледющийМассив(ДокумПриемки);
										СписокОбнТовара.Очистить();
										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
												Прокси_20=Новый ИнтернетПрокси;
															Прокси_20.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
														
															HTTPСервисЗапрос_20=Новый HTTPСоединение("gepir.gs1ru.org",,,,Прокси_20,Thumbprint_1.Таймаут);
														Иначе
															HTTPСервисЗапрос_20=Новый HTTPСоединение("gepir.gs1ru.org",,,,,Thumbprint_1.Таймаут);
														КонецЕсли;
														
														
														
													МассивСтруктур.Очистить();	
												
											Для Каждого СтР_1 Из МассивКМ Цикл
												
										

GTINНаименованиеТовара=Сред(Стр_1.Марка,3,14);

												HTTPЗапрос=Новый HTTPЗапрос("GEPIR40/getItem");
												HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded; charset=UTF-8");
												//HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
												//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
												///Константин           
												Тело="task=getItemByGTIN&lng=ru&keyValue="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ДополнитьСтроку(Формат(GTINНаименованиеТовара,"ЧГ="));
												HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
												Ответ=HTTPСервисЗапрос_20.ОтправитьДляОбработки(HTTPЗапрос);
													Если Ответ.КодСостояния=200 Тогда
									
												Текст1=Ответ.ПолучитьТелоКакСтроку();
												NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
												Название=неопределено;
												Попытка
													Название=NNN.gepirItem.itemDataLine[0].itemName; 
												Исключение
												КонецПопытки;
												Если Название=Неопределено Тогда
													
										//			http://gepir.gs1ru.org/GEPIR40/index.jsp?p=gtin&lng=ru
												КонецЕсли;
												Если ЗначениеЗаполнено(Название) Тогда
													МассивСтруктур.Добавить(Новый Структура("gtin,Название",Стр_1.GTINНаименованиеТовара,Название));
													
												КонецЕсли;
												КонецЕсли;
											Конеццикла;
											
										МММ=Новый Массив;
										Если МассивСтруктур.Количество()>0 тогда
											МММ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагрузитьПродукции(МассивСтруктур);
											
										КонецЕсли;
										Для Каждого Стр_1 Из МММ Цикл
											ОповеститьОбИзменении(Стр_1);
										КонецЦиклА;

									
							
						КонецЕсли;		 
	
	
//	МассивФайлов.Добавить(Новый Структура("Имя,Дв",Файл.Имя,ПоместитьВоВременноеХранилище(ДД)));
	
	Элементы.Приемкасписок.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ОбновлятьКодВУчетнойСистемеПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ОбновлятьКодВУчетнойСистеме=ОбновлятьКодВУчетнойСистеме;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьКодВУчетнойСистемеПриИзменении(Элемент)
	ОбновлятьКодВУчетнойСистемеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура КодВУчетнойСистемеИзXMLПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.КодВУчетнойСистемеИзXML=КодВУчетнойСистемеИзXML;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КодВУчетнойСистемеИзXMLПриИзменении(Элемент)
	КодВУчетнойСистемеИзXMLПриИзмененииНаСервере();
КонецПроцедуры

Функция ПолучитьНазванияГС1(СписокОБновленных)
	СписокВернуть=Новый СписокЗначений;
	Для Каждого Стр ИЗ СписокОБновленных Цикл
		Если ЗначениеЗаполнено(Стр.НазваниеДокумента) тогда
			СписокВернуть.Добавить(Стр.НазваниеДокумента);
		Конецесли;
		Если ЗначениеЗаполнено(Стр.ИмяФайла) тогда
			СписокВернуть.Добавить(Стр.ИмяФайла);
		Конецесли
	Конеццикла;
	
	Возврат СписокВернуть
	
Конецфункции

&НаКлиенте
Процедура ОбновитьВыделенныеДокументы_GS1(Команда)
	// Вставить содержимое обработчика.
	
	
	//Подключиться(Команда);
	
	//Если Подключились Тогда
	Если Организации.Количество()=0 Тогда
		Подключиться(Команда);
	КонецЕсли;
	Если Организации.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокОБновленных=Новый Массив;
	
	Для Каждого Стр_1 Из Элементы.ТаблицаДокументы.ВыделенныеСтроки Цикл
		СписокОБновленных.Добавить(Стр_1);
	Конеццикла;
	
	СписокНазваний=ПолучитьНазванияГС1(СписокОБновленных);
	
	ПараметрыДлякилента=Неопределено;
	Если НаКлиенте(ПараметрыДлякилента) Тогда
		
	Если ИспользоватьСайтGS1ПоМаркировке ИЛИ ПараметрыДлякилента.НаименованиеСтенда="Шины" Тогда

			Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение("srs.gs1ru.org",,,,Прокси,30);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение("srs.gs1ru.org",,,,,30);
			КонецЕсли;
			
			HTTPЗапрос = Новый HTTPЗапрос("io/");
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			ВсеКУки=Ответ.Заголовки["Set-Cookie"];
			Если   ВсеКУки=неопределено тогда
			ВсеКУки=Ответ.Заголовки["set-cookie"];
				
			Конецесли;
			
			ВсеКуки=СтрЗаменитЬ(ВсеКуки,",",Символы.ПС);
 			
			
		//	Oracle="717d81046d26723fb1eeb82b13dca94babe8ee96";
		    Oracle="";
		
			Кэш_3="";
			JSESSIONID="";
			Если ЗначениеЗАполнено(ВсеКУки) тогда
				Для Сч_1=1 По СтрЧислоСтрок(ВсеКуки) Цикл
					
					ПолучитьСтроку=СтрПолучитьСтроку(ВсеКуки,Сч_1);
					//Если Найти(ПолучитьСтроку,"Set-Cookie")=1 
					//	Тогда
					Если ЗначениеЗаполнено(Кэш_3) Тогда
						Кэш_3=Кэш_3+";";
					Конецесли;
						//КэшТ=КэшТ+ПолучитьСтроку;
						Коок=ПолучитьСтроку;
						Коок=Сред(Коок,1,Найти(Коок,";")-1);
						Кэш_3=Кэш_3+Коок;
						Если Найти(ПолучитьСтроку,"X-Oracle-BMC-LBS-Route")>0 Тогда
							//ПродолжитЬ;
							Oracle=Коок;
						Конецесли;
						Если Найти(КооК,"JSESSIONID")>0 Тогда
							JSESSIONID=Коок;
						Конецесли;
					
				КонецЦикла;
			
				
			КонецЕсли;
			
			

			
			

			
			
//			HTTPСервисЗапрос.Open("POST", "http://srs.gs1ru.org/login", 0);
			//Обработки._Запуск_ХамелеонЦРПТ.УстановитьПрокси(HTTPСервисЗапрос);
			HTTPЗапрос = Новый HTTPЗапрос("io/login/perform_login");
			HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_3);
		
			HTTPЗапрос.Заголовки.Вставить("Accept", " text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
			//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
			HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
			HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
//			Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko");
			//HTTPСервисЗапрос.SetRequestHeader("Connection" ,"Keep-Alive");
			//HTTPСервисЗапрос.SetRequestHeader("Host" ,"mercury.vetrf.ru");
			//HTTPЗапрос = Новый HTTPЗапрос("hs/",Заголовки);
//			Ответ=HTTPСервисЗапрос_Merc.Получить(HTTPЗапрос);
			Тело="j_character_encoding=UTF-8&username="+ПараметрыДлякилента.Пользователь+"&password="+ПараметрыДлякилента.Пароль;
			HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
			//Кэш_Т=Ответ.Заголовки["Set-Cookie"];
			
			
			ВсеКуки=Ответ.Заголовки["Set-Cookie"];
			Если   ВсеКуки=Неопределено тогда
			ВсеКуки=Ответ.Заголовки["set-cookie"];
				
			Конецесли;
			
			ВсеКуки=СтрЗаменитЬ(ВсеКуки,",",Символы.ПС);
			
			//СтруктураКук=СтрРазделить(ВсеКуки,";") ;
			
			Кэш_Т=Oracle;
			
			Если Найти(ВсеКуки,"JSESSIONID")>0 Тогда
				JSESSIONID="";
			Конецесли;
			Если ЗначениеЗАполнено(ВсеКУки) тогда
				Для Сч_1=1 По СтрЧислоСтрок(ВсеКуки) Цикл
					
					ПолучитьСтроку=СтрПолучитьСтроку(ВсеКуки,Сч_1);
					
					Если Найти(ПолучитьСтроку,"=")=0 Тогда
						Продолжить;
					Конецесли;
					
						Если Найти(ПолучитьСтроку,"X-Oracle-BMC-LBS-Route")>0 Тогда
							Продолжить;
						Конецесли;
					
					//Если Найти(ПолучитьСтроку,"Set-Cookie")=1 
					//	Тогда
					Если ЗначениеЗаполнено(Кэш_Т) Тогда
						Кэш_Т=Кэш_Т+";";
					Конецесли;
						//КэшТ=КэшТ+ПолучитьСтроку;
						Коок=ПолучитьСтроку;
						Коок=Сред(Коок,1,Найти(Коок,";")-1);
						Кэш_Т=Кэш_Т+Коок;
						Если Найти(КооК,"JSESSIONID")>0 Тогда
							JSESSIONID=Коок;
						Конецесли;
						
						
						//Request.SetRequestHeader("Cookie",Коок);
					//КонецЕсли;
				КонецЦикла;
			
				
			КонецЕсли;


			
			
			
			

			
			
			
			
			
			HTTPЗапрос = Новый HTTPЗапрос("io/");
			HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
			
			HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
			//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
			HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
			HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
			
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			
		//	ВсеКуки=Ответ.Заголовки["Set-Cookie"];
		//		//		
		////		//СтруктураКук=СтрРазделить(ВсеКуки,";") ;
		////	
		//
		//			Кэш_Т=Oracle+";"+JSESSIONID;
		//
		//		Если ЗначениеЗАполнено(ВсеКУки) тогда
		//			Для Сч_1=1 По СтрЧислоСтрок(ВсеКуки) Цикл
		//				Если Найти(ПолучитьСтроку,"=")=0 Тогда
		//					Продолжить;
		//				Конецесли;
		//			    Если Найти(ПолучитьСтроку,"X-Oracle-BMC-LBS-Route")>0 Тогда
		//					Продолжить;
		//				Конецесли;
		//				

		//				Если Найти(ПолучитьСтроку,"JSESSIONID")>0 Тогда
		//					Продолжить;
		//				Конецесли;
		//				
		//				ПолучитьСтроку=СтрПолучитьСтроку(ВсеКуки,Сч_1);
		//				//Если Найти(ПолучитьСтроку,"Set-Cookie")=1 
		//				//	Тогда
		//				Если ЗначениеЗаполнено(Кэш_Т) Тогда
		//					Кэш_Т=Кэш_Т+";";
		//				Конецесли;
		//					//КэшТ=КэшТ+ПолучитьСтроку;
		//					Коок=ПолучитьСтроку;
		//					Коок=Сред(Коок,1,Найти(Коок,";")-1);
		//					Кэш_Т=Кэш_Т+Коок;
		//					//Если Найти(КооК,"JSESSIONID")>0 Тогда
		//					//	JSESSIONID=Коок;
		//					//Конецесли;
		//					
		//					//Request.SetRequestHeader("Cookie",Коок);
		//				//КонецЕсли;
		//			КонецЦикла;
		////		
		////			
		//		КонецЕсли;
		////
		//		Кэш_Т=Кэш_Т+";"+JSESSIONID; 

				
			
			
			//Кэш_Т=Ответ.Заголовки["Set-Cookie"];
			Ответ=Ответ.ПолучитьТелоКакСтроку();
			
			НайтиТаблицы=Сред(Ответ,Найти(Ответ,"import_table"));
			НайтиТаблицы=Сред(НайтиТаблицы,1,Найти(НайтиТаблицы,"""")-1);
			
			HTTPЗапрос = Новый HTTPЗапрос("io/ui/"+НайтиТаблицы);
			HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
			
			HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
			//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
			HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
			HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			
			
			Чтение=Новый ЧтениеHTML;
			Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			ПостроительDOM = Новый ПостроительDOM;
			ДокументHTML = ПостроительDOM.Прочитать(Чтение);
			
			ПервуюПропускаем=Истина;
			Для Каждого Стр Из ДокументHTML.ПолучитьЭлементыПоИмени("tr") Цикл
				Если ПервуюПропускаем Тогда
					ПервуюПропускаем=ложь;
					Продолжить;
				КонецЕсли;
				ТипДокумента=СокрЛП(Стр.Ячейки[0].ТекстовоеСодержимое);
				Попытка
					НазнваниеДОкумента=СокрЛП(Стр.Ячейки[1].ДочерниеУзлы[1].Гиперссылка);
				Исключение
					Продолжить;
				КонецПопытки;
				Дата1=СокрЛП(Стр.Ячейки[2].ТекстовоеСодержимое);
				Дата2=СокрЛП(Стр.Ячейки[3].ТекстовоеСодержимое);
				Статус=СокрЛП(Стр.Ячейки[4].ТекстовоеСодержимое);
				
				
					
				HTTPЗапрос = Новый HTTPЗапрос(НазнваниеДОкумента);
				HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
				
				HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
				//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
				HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
				HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
				HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
				HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
				HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
				HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
				HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
 				HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
				HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
				
				Имяекселя=СокрЛП(Стр.Ячейки[1].ТекстовоеСодержимое);
				Имяекселя=Сред(Имяекселя,1,Найти(Имяекселя,Символы.ПС)-1);
				
				ПервыйФ=1;
			//	ИмяФ=КаталогВременныхФайлов+xmlString(ПервыйФ);
			//	ФФФ=Новый Файл(ИмяФ);
			//	Пока ФФФ.Существует() Цикл
			//		ПервыйФ=ПервыйФ+1;
			//		ИмяФ=КаталогВременныхФайлов+xmlString(ПервыйФ);
			//		ФФФ=Новый Файл(ИмяФ);
			//	КонецЦикла;
				//Имяекселя=КаталогВременныхФайлов+Имяекселя;
				
	Каталог = КаталогВременныхФайловНаКлиенте;
	ИмяФайла = Строка(Новый УникальныйИдентификатор) + ".xlsx";
	Имяекселя_1= Каталог+ИмяФайла;
				
				//Имяекселя_1=ПолучитьИмяВременногоФайла("xlsx");
				HTTPСервисЗапрос.Получить(HTTPЗапрос,Имяекселя_1);
				
				Данн=Новый ДвоичныеДанные(Имяекселя_1);
				Адр=ПоместитьВоВременноеХранилище(Данн);
				УдалитьФайлы(Имяекселя_1);
				
				Если СписокНазваний.НайтиПоЗначению(НазнваниеДОкумента)<>Неопределено Тогда
					СоздатьДокумент(НазнваниеДОкумента,Дата1,Дата2,Статус,Адр,Имяекселя,ТипДокумента);
				Иначе
					
					
					Если Найти(НазнваниеДОкумента,"%24")>0 Тогда
						Имяекселя=Сред(НазнваниеДОкумента,Найти(НазнваниеДОкумента,"%24")+3);
					Иначе
						Имяекселя=НазнваниеДОкумента;
					КонецЕсли;
					Если СписокНазваний.НайтиПоЗначению(Имяекселя)<>Неопределено Тогда
						СоздатьДокумент(НазнваниеДОкумента,Дата1,Дата2,Статус,Адр,Имяекселя,ТипДокумента);
						
						
				    КонецеслИ;
					
					
				Конецесли;
				
				
				
			Конеццикла;
			
	НайтиТаблицы="export_table";
			
				HTTPЗапрос = Новый HTTPЗапрос("io/ui/"+НайтиТаблицы);
			HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
			
			HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
			//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
			HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
			HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			
			
			Чтение=Новый ЧтениеHTML;
			Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			ПостроительDOM = Новый ПостроительDOM;
			ДокументHTML = ПостроительDOM.Прочитать(Чтение);
			
			ПервуюПропускаем=Истина;
			Для Каждого Стр Из ДокументHTML.ПолучитьЭлементыПоИмени("tr") Цикл
				Если ПервуюПропускаем Тогда
					ПервуюПропускаем=ложь;
					Продолжить;
				КонецЕсли;
				ТипДокумента=СокрЛП(Стр.Ячейки[0].ТекстовоеСодержимое);
				НазнваниеДОкумента=СокрЛП(Стр.Ячейки[1].ДочерниеУзлы[1].Гиперссылка);
				Дата1=СокрЛП(Стр.Ячейки[2].ТекстовоеСодержимое);
				Дата2=СокрЛП(Стр.Ячейки[3].ТекстовоеСодержимое);
				Статус=СокрЛП(Стр.Ячейки[4].ТекстовоеСодержимое);
				
				
					
				HTTPЗапрос = Новый HTTPЗапрос(НазнваниеДОкумента);
				HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
				
				HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
				//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
				HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
				HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
				HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
				HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
				HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
				HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
				HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
 				HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
				HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
				
				Имяекселя=СокрЛП(Стр.Ячейки[1].ТекстовоеСодержимое);
				Имяекселя=Сред(Имяекселя,1,Найти(Имяекселя,Символы.ПС)-1);
				
				ПервыйФ=1;
			//	ИмяФ=КаталогВременныхФайлов+xmlString(ПервыйФ);
			//	ФФФ=Новый Файл(ИмяФ);
			//	Пока ФФФ.Существует() Цикл
			//		ПервыйФ=ПервыйФ+1;
			//		ИмяФ=КаталогВременныхФайлов+xmlString(ПервыйФ);
			//		ФФФ=Новый Файл(ИмяФ);
			//	КонецЦикла;
				//Имяекселя=КаталогВременныхФайлов+Имяекселя;
				
	Каталог = КаталогВременныхФайловНаКлиенте;
	ИмяФайла = Строка(Новый УникальныйИдентификатор) + ".xlsx";
	Имяекселя_1= Каталог+ИмяФайла;
				
				//Имяекселя_1=ПолучитьИмяВременногоФайла("xlsx");
				HTTPСервисЗапрос.Получить(HTTPЗапрос,Имяекселя_1);
				
				Данн=Новый ДвоичныеДанные(Имяекселя_1);
				Адр=ПоместитьВоВременноеХранилище(Данн);
				УдалитьФайлы(Имяекселя_1);
				
				Если СписокНазваний.НайтиПоЗначению(НазнваниеДОкумента)<>Неопределено Тогда
					СоздатьДокумент(НазнваниеДОкумента,Дата1,Дата2,Статус,Адр,Имяекселя,ТипДокумента);
				Иначе
					
					
					Если Найти(НазнваниеДОкумента,"%24")>0 Тогда
						Имяекселя=Сред(НазнваниеДОкумента,Найти(НазнваниеДОкумента,"%24")+3);
					Иначе
						Имяекселя=НазнваниеДОкумента;
					КонецЕсли;
					Если СписокНазваний.НайтиПоЗначению(Имяекселя)<>Неопределено Тогда
						СоздатьДокумент(НазнваниеДОкумента,Дата1,Дата2,Статус,Адр,Имяекселя,ТипДокумента);
						
						
				    КонецеслИ;
					
					
				Конецесли;
				
				
				
			Конеццикла;
			
			
	Иначе
			
			Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение("srs.gs1ru.org",,,,Прокси,30);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение("srs.gs1ru.org",,,,,30);
			КонецЕсли;
			
			HTTPЗапрос = Новый HTTPЗапрос(ТекСайт+"/");
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			ВсеКУки=Ответ.Заголовки["Set-Cookie"];
			Если   ВсеКУки=Неопределено тогда
			ВсеКУки=Ответ.Заголовки["set-cookie"];
				
			КонецЕсли;
			ВсеКуки=СтрЗаменитЬ(ВсеКуки,",",Символы.ПС);
 			
			
		//	Oracle="717d81046d26723fb1eeb82b13dca94babe8ee96";
		    Oracle="";
		
			Кэш_3="";
			JSESSIONID="";
			Если ЗначениеЗАполнено(ВсеКУки) тогда
				Для Сч_1=1 По СтрЧислоСтрок(ВсеКуки) Цикл
					
					ПолучитьСтроку=СтрПолучитьСтроку(ВсеКуки,Сч_1);
					//Если Найти(ПолучитьСтроку,"Set-Cookie")=1 
					//	Тогда
					Если ЗначениеЗаполнено(Кэш_3) Тогда
						Кэш_3=Кэш_3+";";
					Конецесли;
						//КэшТ=КэшТ+ПолучитьСтроку;
						Коок=ПолучитьСтроку;
						Коок=Сред(Коок,1,Найти(Коок,";")-1);
						Кэш_3=Кэш_3+Коок;
						Если Найти(ПолучитьСтроку,"X-Oracle-BMC-LBS-Route")>0 Тогда
							//ПродолжитЬ;
							Oracle=Коок;
						Конецесли;
						Если Найти(КооК,"JSESSIONID")>0 Тогда
							JSESSIONID=Коок;
						Конецесли;
					
				КонецЦикла;
			
				
			КонецЕсли;
			
			
			
			HTTPЗапрос = Новый HTTPЗапрос(ТекСайт+"/j_security_check");
			HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_3);
		
			HTTPЗапрос.Заголовки.Вставить("Accept", " text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
			//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
			HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
			HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
//			Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko");
			//HTTPСервисЗапрос.SetRequestHeader("Connection" ,"Keep-Alive");
			//HTTPСервисЗапрос.SetRequestHeader("Host" ,"mercury.vetrf.ru");
			//HTTPЗапрос = Новый HTTPЗапрос("hs/",Заголовки);
//			Ответ=HTTPСервисЗапрос_Merc.Получить(HTTPЗапрос);
			Тело="j_character_encoding=UTF-8&j_username="+ПараметрыДлякилента.Пользователь+"&j_password="+ПараметрыДлякилента.Пароль;
			HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
			//Кэш_Т=Ответ.Заголовки["Set-Cookie"];
			
			ВсеКуки=Ответ.Заголовки["Set-Cookie"];
			Если   ВсеКуки=Неопределено тогда
			ВсеКуки=Ответ.Заголовки["set-cookie"];
				
			Конецесли;
			
			ВсеКуки=СтрЗаменитЬ(ВсеКуки,",",Символы.ПС);
			
			//СтруктураКук=СтрРазделить(ВсеКуки,";") ;
			
			Кэш_Т=Oracle;
			
			Если Найти(ВсеКуки,"JSESSIONID")>0 Тогда
				JSESSIONID="";
			Конецесли;
			Если ЗначениеЗАполнено(ВсеКУки) тогда
				Для Сч_1=1 По СтрЧислоСтрок(ВсеКуки) Цикл
					
					ПолучитьСтроку=СтрПолучитьСтроку(ВсеКуки,Сч_1);
					
					Если Найти(ПолучитьСтроку,"=")=0 Тогда
						Продолжить;
					Конецесли;
					
						Если Найти(ПолучитьСтроку,"X-Oracle-BMC-LBS-Route")>0 Тогда
							Продолжить;
						Конецесли;
					
					//Если Найти(ПолучитьСтроку,"Set-Cookie")=1 
					//	Тогда
					Если ЗначениеЗаполнено(Кэш_Т) Тогда
						Кэш_Т=Кэш_Т+";";
					Конецесли;
						//КэшТ=КэшТ+ПолучитьСтроку;
						Коок=ПолучитьСтроку;
						Коок=Сред(Коок,1,Найти(Коок,";")-1);
						Кэш_Т=Кэш_Т+Коок;
						Если Найти(КооК,"JSESSIONID")>0 Тогда
							JSESSIONID=Коок;
						Конецесли;
						
						
						//Request.SetRequestHeader("Cookie",Коок);
					//КонецЕсли;
				КонецЦикла;
			
				
			КонецЕсли;


			
			
			
			
			
			HTTPЗапрос = Новый HTTPЗапрос(ТекСайт+"/");
			HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
			
			HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
			//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
			HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
			HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
			
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			//Кэш_Т=Ответ.Заголовки["Set-Cookie"];
			Ответ=Ответ.ПолучитьТелоКакСтроку();
			
			
			
			
			
			
			НайтиТаблицы=Сред(Ответ,Найти(Ответ,"import_table"));
			НайтиТаблицы=Сред(НайтиТаблицы,1,Найти(НайтиТаблицы,"""")-1);
			
			HTTPЗапрос = Новый HTTPЗапрос(ТекСайт+"/"+НайтиТаблицы);
			HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
			
			HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
			//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
			HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
			HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
			HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
			HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			
			
			Чтение=Новый ЧтениеHTML;
			Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			ПостроительDOM = Новый ПостроительDOM;
			ДокументHTML = ПостроительDOM.Прочитать(Чтение);
			
			ПервуюПропускаем=Истина;
			Для Каждого Стр Из ДокументHTML.ПолучитьЭлементыПоИмени("tr") Цикл
				Если ПервуюПропускаем Тогда
					ПервуюПропускаем=ложь;
					Продолжить;
				КонецЕсли;
				НазнваниеДОкумента=СокрЛП(Стр.Ячейки[0].ДочерниеУзлы[1].Гиперссылка);
				Дата1=СокрЛП(Стр.Ячейки[1].ТекстовоеСодержимое);
				Дата2=СокрЛП(Стр.Ячейки[2].ТекстовоеСодержимое);
				Статус=СокрЛП(Стр.Ячейки[3].ТекстовоеСодержимое);
				
				
					
				HTTPЗапрос = Новый HTTPЗапрос(ТекСайт+"/"+НазнваниеДОкумента);
				HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
				
				HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
				//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
				HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
				HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
				HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
				HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
				HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
				HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
				HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
 				HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
				HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
				
				Имяекселя=СокрЛП(Стр.Ячейки[0].ТекстовоеСодержимое);
				Имяекселя=Сред(Имяекселя,1,Найти(Имяекселя,Символы.ПС)-1);
				
				ПервыйФ=1;
			//	ИмяФ=КаталогВременныхФайлов+xmlString(ПервыйФ);
			//	ФФФ=Новый Файл(ИмяФ);
			//	Пока ФФФ.Существует() Цикл
			//		ПервыйФ=ПервыйФ+1;
			//		ИмяФ=КаталогВременныхФайлов+xmlString(ПервыйФ);
			//		ФФФ=Новый Файл(ИмяФ);
			//	КонецЦикла;
				//Имяекселя=КаталогВременныхФайлов+Имяекселя;
				
	Каталог = КаталогВременныхФайловНаКлиенте;
	ИмяФайла = Строка(Новый УникальныйИдентификатор) + ".xlsx";
	Имяекселя_1= Каталог+ИмяФайла;
				
				//Имяекселя_1=ПолучитьИмяВременногоФайла("xlsx");
				HTTPСервисЗапрос.Получить(HTTPЗапрос,Имяекселя_1);
				
				Данн=Новый ДвоичныеДанные(Имяекселя_1);
				Адр=ПоместитьВоВременноеХранилище(Данн);
				НачатьУдалениеФайлов(Новый ОписаниеОповещения("УдаленияФайла",ЭтаФорма),Имяекселя_1);
				
				Если СписокНазваний.НайтиПоЗначению(НазнваниеДОкумента)<>Неопределено Тогда
					СоздатьДокумент(НазнваниеДОкумента,Дата1,Дата2,Статус,Адр,Имяекселя,ТипДокумента);
				Иначе
					
					
					Если Найти(НазнваниеДОкумента,"%24")>0 Тогда
						Имяекселя=Сред(НазнваниеДОкумента,Найти(НазнваниеДОкумента,"%24")+3);
					Иначе
						Имяекселя=НазнваниеДОкумента;
					КонецЕсли;
					Если СписокНазваний.НайтиПоЗначению(Имяекселя)<>Неопределено Тогда
						СоздатьДокумент(НазнваниеДОкумента,Дата1,Дата2,Статус,Адр,Имяекселя,ТипДокумента);
						
						
				    КонецеслИ;
					
					
				Конецесли;
				
				
			Конеццикла;
			//Если Все Тогда
				Гиперссылка=ДокументHTML.ПолучитьЭлементыПоИмени("p")[1].ДочерниеУзлы[0].Гиперссылка;
				HTTPЗапрос = Новый HTTPЗапрос(ТекСайт+"/"+Гиперссылка);
				HTTPЗапрос.Заголовки.Вставить("Cookie", Кэш_Т);
				
				HTTPЗапрос.Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
				//HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
				HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7");
				HTTPЗапрос.Заголовки.Вставить("Cache-Control", "max-age=0");
				HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
				HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
				HTTPЗапрос.Заголовки.Вставить("Host", "srs.gs1ru.org");
				HTTPЗапрос.Заголовки.Вставить("Origin", "http://srs.gs1ru.org");
				HTTPЗапрос.Заголовки.Вставить("Referer", "http://srs.gs1ru.org/login?error=true");
				HTTPЗапрос.Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
				HTTPЗапрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36");
				
					Каталог = КаталогВременныхФайловНаКлиенте;
	ИмяФайла = Строка(Новый УникальныйИдентификатор) + ".zip";
	ИмяВр= Каталог+ИмяФайла;

				//ИмяВр=ПолучитьИмяВременногоФайла("zip");
				HTTPСервисЗапрос.Получить(HTTPЗапрос,ИмяВр);
				
				
				НачатьУдалениеФайлов(Новый описаниеОповещения("ПослеРаспаковать",ЭтаФорма,ИмяВр),КаталогВременныхФайлов+"ZIP_M\","*.*");
				
				
				
				
			//КонецЕсли;	
				
			КонецЕсли;
		
	КонецЕсли;
	
	
	Элементы.ТаблицаДокументы.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ЗапрещатьРедактироватьПриемкуЕслиОнаОтправленаИлиОбработанаПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ЗапрещатьРедактироватьПриемкуЕслиОнаОтправленаИлиОбработана=ЗапрещатьРедактироватьПриемкуЕслиОнаОтправленаИлиОбработана;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗапрещатьРедактироватьПриемкуЕслиОнаОтправленаИлиОбработанаПриИзменении(Элемент)
	ЗапрещатьРедактироватьПриемкуЕслиОнаОтправленаИлиОбработанаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузтьИзЦРПТЭДООшибочные(Команда,УжеОтправили=Ложь)
		Thumbprint_1=Неопределено;
	Если НаКлиенте(Thumbprint_1) Тогда
		
		
		СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			Попытка
				СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
			исключение
				СРегистра=Неопределено;
			КонецПопытки;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			ПоказатьПредупреждение(,"Не удалось получить токен по организации");
			Возврат;
		Конецесли;
		
 	Если Ложь Тогда
		
		
	Иначе
		    Что=
Thumbprint_1.Что;		
		

Если Thumbprint_1.НаименованиеСтенда="Табак" ИЛИ  Thumbprint_1.НаименованиеСтенда="Альтернативный табак" Тогда
	
						//СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак;
						
						
						ЗагружаемТабакЭДО(Thumbprint_1,Срегистра);
						
						
				Возврат;		
				КонецЕсли;


		
		
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;                                                       
			
			 //   docum
			 
	ДатаНачала=НачалоДня(ТекущаяДата())-КачатьСЭДОЗаПоследниеДни*24*60*60;
			 
	
	
	
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/listV2?inputFormat=true&documentFormat=UPD&documentStatus=CHECKED_NOT_OK%2CPARSE_ERROR&dateFrom="+
	Формат(Датаначала,"ДФ=""гггг-ММ-дд""")+"T03:00:00.000Z"+"&limit="+
	Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=docDate&pageDir=NEXT&pg="+Что);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
							
	
	
	Если Истина И (Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200) Тогда
				//ЧтениеJSON = Новый ЧтениеJSON;
			Страница=0;
			Тотал=1;
			Пока Страница*СколькоНаСтранице<=Тотал Цикл
				
 					страница=Страница+1;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Тотал=NNN.total;
				
				Если СколькоНаСтранице>NNN.results.Количество() Тогда
					 Тотал=NNN.results.Количество()
				КонецЕсли;
				
				did="";
				docDate="";
				
				МассивФайлов=Новый массив;
				МассивФайлов	.Очистить();
				Для Каждого Стр Из  NNN.results 
					Цикл
					//Если Стр.status<>"CHECKED_OK" Тогда
					//	Продолжить;
					//Конецесли;
					did=Стр.number;
					docDate=Стр.docDate;
					Если Стр.input=true 
						Тогда
						
						HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.number+"/body");
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
						//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
						///Константин           
						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
						Текст1=Ответ.ПолучитьТелоКакСтроку();
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						МассивУп=Новый Массив;
						
						МассивФайлов.Очистить();
						ДД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(NNN_1.content,"windows-1251",ЛОжь);
	МассивФайлов.Добавить(Новый Структура("Имя,Дв",NNN_1.number+".xml",ПоместитьВоВременноеХранилище(ДД)));
	
			Если Стр.Status="CHECKED_OK" Тогда
							ЗагрузитьНаСервере(МассивФайлов);
							
						Иначе
							ЗагрузитьНаСервере(МассивФайлов,ПредопределенноеЗначение("Перечисление.СтатусыУПД_ХамелеонЦРПТ.ОшибкаВЦРПТ"));
						Конецесли;
						
						
					КонецЕсли;
				Конеццикла;
				
				
				
				
				
				
				
				Если Страница*СколькоНаСтранице>Тотал Тогда
					Прервать;
				КонецЕсли;
					
	//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/listV2?inputFormat=true&documentFormat=UPD&documentStatus=CHECKED_NOT_OK%2CPARSE_ERROR&dateFrom="+
	//Формат(Датаначала,"ДФ=""гггг-ММ-дд""")+"T03:00:00.000Z"+"&limit="+
	//Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=docDate&pageDir=NEXT&pg="+Что);
				 HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/listV2?inputFormat=true&documentFormat=UPD&documentStatus=CHECKED_NOT_OK%2CPARSE_ERROR&dateFrom="+
	Формат(СколькоНаСтранице,"ЧГ=")+
	"&order=DESC&orderColumn=docDate&did="+did+"&orderedColumnValue="+docDate+"&pageDir=NEXT&pg="+ЧТо);
//					Формат(Датаначала,"ДФ=""гггг-ММ-дд""")+"T03:00:00.000Z"+"&limit="+Формат(СколькоНаСтранице,"ЧГ=")+
//					"&order=DESC&orderColumn=docDate&did="+did+"&orderedColumnValue="+docDate+"&pageDir=NEXT&pg="+ЧТо);
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	Если Ответ.КодСостояния<>202 И Ответ.КодСостояния<>200  Тогда
		Если УжеОтправили=Истина Тогда
				Сообщить("Не удалось загрузить приходы с ЦРПТ, отсутствует доступ.");
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Возврат;
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ЗагрузтьИзЦРПТЭДООшибочные(Команда,Истина)			
			КонецЕсли
	КонецЕсли;
	
	Конеццикла;	
				
				
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				ЗагрузтьИзЦРПТЭДООшибочные(Команда,Истина)			
			КонецЕсли
	Иначе
					Попытка
						//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							
						Исключение
							Попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								
								Если Найти(Текст1,"Billing contract")>0 И
									Найти(Текст1,"not signed by participant")>0 Тогда
									Сообщить("Договор биллинга для выбранной группы товаров не подписан участником");
								КонецЕсли;
								
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
КонецЕсли
КонецЕсли
	 

;
Элементы.Приемкасписок.Обновить();




КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКарточкиИзНК(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Стр Из Элементы.ВводВОборотТаблица.ВыделенныеСтроки цикл
		
		Форм=ПолучитьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаДокумента",
		Новый Структура("Ключ",Стр));
		Форм.ОбновитьИзНК(Команда);
		
	Конеццикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаМодерацию(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Стр Из Элементы.ВводВОборотТаблица.ВыделенныеСтроки цикл
		
		Форм=ПолучитьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаДокумента",
		Новый Структура("Ключ",Стр));
		Форм.ОтправитьНаМодерацию(Команда);
		
	Конеццикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОпубликовать(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Стр Из Элементы.ВводВОборотТаблица.ВыделенныеСтроки цикл
		
		Форм=ПолучитьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаДокумента",
		Новый Структура("Ключ",Стр));
		Форм.ПодписатьИОпубликовать(Команда);
		
	Конеццикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВНК(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Стр Из Элементы.ВводВОборотТаблица.ВыделенныеСтроки цикл
		
		Форм=ПолучитьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаДокумента",
		Новый Структура("Ключ",Стр));
		Форм.ОтправитьДаныеВНК(Команда);
		
	Конеццикла;
	
КонецПроцедуры

&НаКлиенте
Процедура GS1ОтправитьВGS1(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Стр_1 Из Элементы.ТаблицаДокументы.ВыделенныеСтроки Цикл
		Форм=ПолучитьФорму("Документ.GS1_Обувь_ХамелеонЦРПТ.Форма.ФормаДокумента",
		Новый Структура("Ключ",Стр_1));
		Форм.ОтправитьВGS46(Команда);
		
	Конеццикла;
КонецПроцедуры

&НаКлиенте
Процедура GS1ОтправитьВНК(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Стр_1 Из Элементы.ТаблицаДокументы.ВыделенныеСтроки Цикл
		Форм=ПолучитьФорму("Документ.GS1_Обувь_ХамелеонЦРПТ.Форма.ФормаДокумента",
		Новый Структура("Ключ",Стр_1));
		Форм.ОтправитьВНК(Команда);
		
	Конеццикла;
КонецПроцедуры

&НаКлиенте
Процедура GS1ПодписатьИОтправить(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Стр_1 Из Элементы.ТаблицаДокументы.ВыделенныеСтроки Цикл
		Форм=ПолучитьФорму("Документ.GS1_Обувь_ХамелеонЦРПТ.Форма.ФормаДокумента",
		Новый Структура("Ключ",Стр_1));
		Форм.ПодписатьИОпубликоватьВНК(Команда);
	Конеццикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьНомерКороткиНомерДлинный(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	ДилогВыбора=Новый ДиалогВыбораФайла(РежимдиалогаВыбораФайла.ВыборКаталога);
	ДилогВыбора.Заголовок="Выберите каталог для сохранения файлов с номерами КМ";
	Если ДилогВыбора.Выбрать() Тогда
		Каталог=ДилогВыбора.Каталог;
//		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СохранитьВcsvВыделенныеЗаказы(Элементы.ЗаказыТаблица.ВыделенныеСтроки,Каталог+"\");
//		Возврат;
		Для Каждого Стр_1 Из Элементы.ЗаказыТаблица.ВыделенныеСтроки Цикл
			
			Номер="";
			ДвоичнД=СохранитьФайлНаДИскеXLS(Стр_1,Номер);
			
			ИмяФ=Каталог+"\"+СокрЛП(Номер)+".xls";
			ДвоичнД.Записать(ИмяФ);
		Конеццикла;
		
		
	КонецЕсли;
	
	
отказ=Истина;
	
КонецПроцедуры



Функция СохранитьФайлНаДИскеXLS(Ссылка,Номер)
	
	ТекстД=Новый табличныйДокумент;
	Макет=Документы.ЗаказМарок_ХамелеонЦРПТ.ПолучитьМакет("НомерКороткийНомерДлинный");
	ОблС=Макет.ПолучитьОбласть("Строка");
	
	Номер=Ссылка.Номер;
	//ТекстД.ДобавитьСтроку(Ссылка.Номер);
	
	
//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ КАК НомерКМ,
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий
		|ИЗ
		|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
		|ГДЕ
		|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа";
	
	Запрос.УстановитьПараметр("ДокументЗаказа", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДД = РезультатЗапроса.Выбрать();
	
	Если ДД.Количество()=0 Тогда
	
	
	
		Для Каждого ДД ИЗ Ссылка.КМИзAPI Цикл
			РР=РаскодироватьСтроку(ДД.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			ОблС.Параметры.НомерКМ=ДД.НомерКМ_Короткий;
			ОблС.Параметры.НомерДлинный=РР;
			ТекстД.Вывести(ОблС);
			//ТекстД.ДобавитьСтроку(РР);
		Конеццикла;
	Иначе
		Пока ДД.Следующий() Цикл
			РР=РаскодироватьСтроку(ДД.НомерКМ,СпособКодированияСтроки.КодировкаURL);
			ОблС.Параметры.НомерКМ=ДД.НомерКМ_Короткий;
			ОблС.Параметры.НомерДлинный=РР;
			ТекстД.Вывести(ОблС);
			
		КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	КонецеслИ;
	
	ИмяТекст=ПолучитьИмяВременногоФайла("xls");
	ТекстД.Записать(ИмяТекст,ТипФайлаТабличногоДокумента.XLS);
	ДвоичнД=Новый ДвоичныеДанные(ИмяТекст);
    //Строка64=Base64Строка(ДвоичнД);
    //Строка64=Прав(Строка64,СтрДлина(Строка64)-4);
    //ДвоичнД=Base64Значение(Строка64);
	УдалитьФайлы(ИмяТекст);
	Возврат ДвоичнД 
	
КонецФункции

&НаСервере
Процедура ПриОтправкеВCSVУмножатьСуммыНа100ПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ПриОтправкеВCSVУмножатьСуммыНа100=ПриОтправкеВCSVУмножатьСуммыНа100;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПриОтправкеВCSVУмножатьСуммыНа100ПриИзменении(Элемент)
	ПриОтправкеВCSVУмножатьСуммыНа100ПриИзмененииНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриОтправкеВЦРТИЭДОПроверятьСтатусКМПриИзмененииНаСервере(ПриОтправкеВЦРТИЭДОПроверятьСтатусКМ)
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ПриОтправкеВЦРТИЭДОПроверятьСтатусКМ=ПриОтправкеВЦРТИЭДОПроверятьСтатусКМ;
	РегДв.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПриОтправкеВЦРТИЭДОПроверятьСтатусКМПриИзменении(Элемент)
	ПриОтправкеВЦРТИЭДОПроверятьСтатусКМПриИзмененииНаСервере(ПриОтправкеВЦРТИЭДОПроверятьСтатусКМ);
КонецПроцедуры

&НаСервере
Процедура ПоказыватьВкладкуТСДПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ПоказыватьВкладкуТСД=ПоказыватьВкладкуТСД;
	РегДв.Записать(Истина);
	ВидимостьОплатаЗаЗаказКМ();
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьВкладкуТСДПриИзменении(Элемент)
	ПоказыватьВкладкуТСДПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьНаТСД(Команда)
	// Вставить содержимое обработчика.
	СписокДокументов=Новый Массив;
	Для Каждого Стр_1 Из Элементы.Отгрузка_Список.ВыделенныеСтроки Цикл
		СписокДокументов.Добавить(Стр_1);
	Конеццикла;
	//Текст=
	ПолучитьТекстовыйДокумент(СписокДокументов);
	
	//ДиалогФыбораФайла								=	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	//ДиалогФыбораФайла.Фильтр="Файл txt (*.txt)|*.txt";
	//ДиалогФыбораФайла.Заголовок						=	"Выберите файл для записи";
	//ДиалогФыбораФайла.ПредварительныйПросмотр		=	Ложь;
	//ДиалогФыбораФайла.Расширение					=	"txt";
	//ДиалогФыбораФайла.ИндексФильтра					=	0;
	//ДиалогФыбораФайла.ПолноеИмяФайла				=	"";
	//ДиалогФыбораФайла.ПроверятьСуществованиеФайла	=	Истина;
	
	//Подразделение=НеопределенО;
	//ДиалогФыбораФайла.Показать(Новый ОписаниеОповещения("ВыборКаталогаДляСохранения",ЭтаФорма));
	
КонецПроцедуры

Функция ПолучитьТекстовыйДокумент(СписокДокументов)
	Текстов=Новый ТекстовыйДокумент;
	Для Каждого Стр Из СписокДокументов Цикл
		Текстов.ДобавитьСтроку(Стр.Номер+Символы.Таб+Стр.Дата+Символы.Таб+Стр.Контрагент.Наименование
		);
		
		Для Каждого Стр_2 Из Стр.Товары Цикл
			Текстов.ДобавитьСтроку(xmlString(Стр_2.GTIN.GTIN)+Символы.Таб+
			Стр_2.GTIN.Наименование+Символы.Таб+xmlString(Стр_2.КоличествоКМ));
			
		Конеццикла;
		
		
	Конеццикла;
	ИмяВремен=ПолучитьИмяВременногоФайла("txt");
	Текстов.Записать(ИмяВремен);
	
		WinHTTP_Экспорт=Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
	//
	//	WinHTTP_Экспорт.Open("POST", "https://mail.ru");
	//	WinHTTP_Экспорт.setRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; rv:55.0) Gecko/20100101 Firefox/55.0");
	//	//WinHTTP_Экспорт.setRequestHeader("Referer", "https://account.mail.ru/login/");
	//	WinHTTP_Экспорт.Send();
	//	Ответ=WinHTTP_Экспорт.ResponseText;
	//	Если Найти(Ответ,"CSRF = ")>0 Тогда
	//		
	//		Токен=Сред(Ответ,Найти(Ответ,"CSRF = ")+8);
	//		Токен=Сред(Токен,1,Найти(Токен,"""")-1);
	//	Иначе
	//		Токен=Сред(Ответ,Найти(Ответ,"CSRF:")+6);
	//		Токен=Сред(Токен,1,Найти(Токен,"""")-1);
	//		
	//	КонецЕсли;
	//	
	ЛОГИН=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ТекстUnicodeToUTF8(ТСД.ПользовательMail);
		//WinHTTP_Экспорт.Open("POST", "https://auth.mail.ru/jsapi/auth");
		WinHTTP_Экспорт.Open("POST", "https://auth.mail.ru/cgi-bin/auth?from=splash");
		///ПараметрыПОСТ = "login="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ТекстUnicodeToUTF8(ТСД.ПользовательMail)+"&password="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ТекстUnicodeToUTF8(ТСД.ПарольMail)+"&saveauth=0&token="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ТекстUnicodeToUTF8(Токен)+"&project=e.mail.ru";
		ПараметрыПОСТ ="Password="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ТекстUnicodeToUTF8(ТСД.ПарольMail)+"&new_auth_form=1"+"&Login="
		+ЛОГИН+"&FailPage=&Domain=mail.ru";
		//WinHTTP_Экспорт.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
		//WinHTTP_Экспорт.setRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; rv:55.0) Gecko/20100101 Firefox/55.0");
		//WinHTTP_Экспорт.setRequestHeader("Referer", "https://mail.ru/");
		//WinHTTP_Экспорт.setRequestHeader("Sec-Fetch-Mode", "cors ");
		WinHTTP_Экспорт.Send(ПараметрыПОСТ );
		//WinHTTP_Экспорт.setRequestHeader("Referer", "https://account.mail.ru/login/");
		Ответ=WinHTTP_Экспорт.ResponseText;
	
		WinHTTP_Экспорт.Open("GET", ТСД.СсылкаНаПапкуОбмена);
		WinHTTP_Экспорт.Send();
		
		Ответ=WinHTTP_Экспорт.ResponseText;
		Если Найти(Ответ,"""csrf"":")=0 Тогда
			Сообщить("Не удалось подключиться к ящику mail.ru!! Не правильный логин или пароль");
			
			Возврат Неопределено;
		Конецесли;
		
		Токен=Сред(Ответ,Найти(Ответ,"""csrf"":")+9);
		Токен=Сред(Токен,1,Найти(Токен,"""")-1);
		
		xpageid=Сред(Ответ,Найти(Ответ,"""x-page-id"":")+14);
		xpageid=Сред(xpageid,1,Найти(xpageid,"""")-1);
		
		BUILD=Сред(Ответ,Найти(Ответ,"""BUILD"":")+10);
		BUILD=Сред(BUILD,1,Найти(BUILD,"""")-1);
		
		TimeStamp = 1000 * (CurrentDate() - Date(1970,1,1) - 3 * 3600);
		
		
		ПараметрыПОСТ_1 ="api=2&build="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ТекстUnicodeToUTF8(BUILD)+"&x-page-id="
		+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ТекстUnicodeToUTF8(xpageid)+"&email="+ЛОГИН
		+"&x-email="+ЛОГИН+"_"+TimeStamp
		
		;
		
		WinHTTP_Экспорт.Open("POST", "https://cloud.mail.ru/api/v2/dispatcher?"+ПараметрыПОСТ_1);
		WinHTTP_Экспорт.setRequestHeader("X-CSRF-Token", Токен);
		WinHTTP_Экспорт.Send();
		
		NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(WinHTTP_Экспорт.ResponseText);//ПрочитатьJSON(ЧтениеJSON);
		
		
		
//	Возврат Текстов
КонецФункции

&НаСервере
Процедура ПолучатьКМВФонеПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ПолучатьКМВФоне=ПолучатьКМВФоне;
	РегДв.Записать(Истина);
	ВидимостьОплатаЗаЗаказКМ();
КонецПроцедуры

&НаКлиенте
Процедура ПолучатьКМВФонеПриИзменении(Элемент)
	ПолучатьКМВФонеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВыводИзОборотаДляВельберис(Команда)
	// Вставить содержимое обработчика.
	Перем Файл;
	ВклЗаг = 0;
	//ДанныеЛиста.Очистить();
	Режим=РежимДиалогаВыбораФайла.Открытие;
	нДиалог= НОвый ДиалогВыбораФайла(Режим);
	//Фильтр="Файл xls/txt/xml|*.xls;*.xlsx;*.txt;*.xml|Файл txt|*.txt|Файл xls|*.xls;*.xlsx|Файл xml|*.xml";
	Фильтр="Файл xlsx|*.xlsx";
	нДиалог.МножественныйВыбор=Истина;
	нДиалог.Фильтр=Фильтр;
	нДиалог.Заголовок="Выберите файл для загрузки..." ;
	нДиалог.Показать(Новый ОписаниеОповещения("ПослеВыбораФайла_ВыводИзОборотаВельерис",ЭтаФорма,Ложь));
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВводВОробВальерес(ДвоичныеДанные,МассивАгрегаций,Пользователь)
	
	
	ИмяФ=ПолучитьимяВременногоФайла("xlsx");
	
	ДвоичныеДанные.Записать(ИмяФ);
	
	
		ОбластьФайла = Новый ТабличныйДокумент;
		Попытка
			// Выполняется долго на больших файлах.
			ОбластьФайла.Прочитать(ИмяФ, СпособЧтенияЗначенийТабличногоДокумента.Значение);
			УдалитьФайлы(ИмяФ);
		Исключение
			//Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
			УдалитьФайлы(ИмяФ);
			Возврат;
		КонецПопытки;
		
		
		
		КолСтр = ОбластьФайла.ВысотаТаблицы;
		КолКолонок = ОбластьФайла.ШиринаТаблицы;
		
		ТаблицаРезультат = Новый ТаблицаЗначений;
		
		ТаблицаРезультат.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"), "№", 4);
		ТаблицаРезультат.Колонки.Добавить("Сопоставлено", Новый ОписаниеТипов("Булево"), "Сопоставлено", 1);
		
		Для Сч = 1 ПО КолКолонок Цикл
			нКолонка = СтрЗаменить(Сч, Символы.НПП, "");
			ИмяКолонки = "N" + нКолонка;
			ТаблицаРезультат.Колонки.Добавить(ИмяКолонки);
		КонецЦикла;
		
		// 1-я строка. Заголовки.
		НоваяСтрокаТФ = ТаблицаРезультат.Добавить();
		НоваяСтрокаТФ.НомерСтроки = 1;
		Для Сч=1 ПО КолКолонок Цикл
			нКолонка = СтрЗаменить(Сч, Символы.НПП, "");
			ИмяКолонки = "N" + нКолонка;
			НоваяСтрокаТФ[ИмяКолонки] = ОбластьФайла.ПолучитьОбласть("R1" + "C"+нКолонка).ТекущаяОбласть.Текст;
			
			// Используется при формировании таблицы на форме обработки.
			ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
			ДлинаСтроки    = СтрДлина(СокрЛП(НоваяСтрокаТФ[ИмяКолонки]));
			ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
		КонецЦикла;
		
		НачСтрока = ?(Не ЗначениеЗаполнено(НачСтрока), 2, НачСтрока);
		КонСтрока = ?(Не ЗначениеЗаполнено(КонСтрока), КолСтр, КонСтрока);
		
		
		
		
		Для нСтрокаТФ = НачСтрока ПО КонСтрока Цикл
			НоваяСтрокаТФ = ТаблицаРезультат.Добавить();
			НоваяСтрокаТФ[0] = нСтрокаТФ;
			нСтрока = СтрЗаменить(нСтрокаТФ, Символы.НПП, "");
			Для Колонка = 1 ПО КолКолонок Цикл
				нКолонка = СтрЗаменить(Колонка, Символы.НПП, "");
				Область = ОбластьФайла.ПолучитьОбласть("R"+нСтрока+"C"+нКолонка);
				ТекущаяОбласть = Область.ТекущаяОбласть;
				Если Колонка=2 Или Колонка=5 Тогда
					ЗначениеЯчейки = xmlstring(сокрЛП(ТекущаяОбласть.Текст));    // Строка, Булево. (Булево как строка "ИСТИНА"/"ЛОЖЬ")
					Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
						ЗначениеЯчейки = СокрЛП(ЗначениеЯчейки);
					Иначе
						ЗначениеЯчейки = Неопределено;
					КонецЕсли;
				Иначе
					Попытка
						ЗначениеЯчейки = xmlString(ТекущаяОбласть.Значение);        // Число, Дата.
					Исключение
						ЗначениеЯчейки = xmlstring(сокрЛП(ТекущаяОбласть.Текст));    // Строка, Булево. (Булево как строка "ИСТИНА"/"ЛОЖЬ")
						Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
							ЗначениеЯчейки = СокрЛП(ЗначениеЯчейки);
						Иначе
							ЗначениеЯчейки = Неопределено;
						КонецЕсли;
					КонецПопытки;
				КонецЕсли;
				ИмяКолонки = "N" + нКолонка;
				НоваяСтрокаТФ[ИмяКолонки] = ЗначениеЯчейки;
				
				// Используется при формировании таблицы на форме обработки.
				ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
				ДлинаСтроки    = СтрДлина(СокрЛП(НоваяСтрокаТФ[ИмяКолонки]));
				ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
			КонецЦикла;
		КонецЦикла;
		
		
		ПерваСтрока=Истина;
		Для Каждого Стр Из ТаблицаРезультат Цикл
			//Если ПерваСтрока=Истина Тогда
			//	ПерваСтрока=ложь;
			//	Продолжить;
			//Конецесли;
				cis=Стр.N6;
				Если Сред(cis,1,2)<>"01" Тогда
					cis="01"+cis;
				Конецесли;
				cis=Сред(cis,1,31);
				//Добав.cis=cis;
				ШтрихКод=cis;
				Если КМДляУдаления.НайтиСтроки(Новый Структура("КМ",ШтрихКод)).Количество()>0 Тогда
					Продолжить;
				Конецесли;
				//Добав_1=КМДляУдаления.Добавить();
				
			Если Стр.N1="Вывод из оборота" Тогда
					Добав_1=КМДляУдаления.Добавить();
					Добав_1.КМ=ШтрихКод;

				Попытка
					ДатаПервичногоДокумента=Стр.N3;
					ДатаПервичногоДокумента=Дата(Число(Сред(ДатаПервичногоДокумента,1,4)),
					Число(Сред(ДатаПервичногоДокумента,6,2)),
					Число(Сред(ДатаПервичногоДокумента,9,2))
					
					);
					
				Исключение
					Продолжить;
				КонецПопытки;
				
				
				//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ВводВОборот_ХамелеонЦРПТ.Ссылка
					|ИЗ
					|	Документ.ВводВОборот_ХамелеонЦРПТ КАК ВводВОборот_ХамелеонЦРПТ
					|ГДЕ
					|	ВводВОборот_ХамелеонЦРПТ.ТипДокумента = &ТипДокумента
					|	И ПОДСТРОКА(ВводВОборот_ХамелеонЦРПТ.НомерПервичногоДокумента, 1, 1000) = &НомерПервичногоДокумента
					|	И ВводВОборот_ХамелеонЦРПТ.ДатаПервичногоДокумента = &ДатаПервичногоДокумента
					|	И (ВводВОборот_ХамелеонЦРПТ.Статус = &Статус
					|			ИЛИ ВводВОборот_ХамелеонЦРПТ.Статус = &Статус1)
					|	И ВводВОборот_ХамелеонЦРПТ.РегистрационныйНомерККТ ПОДОБНО &РегистрационныйНомерККТ";
				
				Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПустаяСсылка());
				Запрос.УстановитьПараметр("Статус1", Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПодготовленКОтправке);
				Запрос.УстановитьПараметр("ДатаПервичногоДокумента", ДатаПервичногоДокумента);
				Запрос.УстановитьПараметр("НомерПервичногоДокумента", xmlString(Стр.N2));
				Запрос.УстановитьПараметр("ТипДокумента", Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота);
				Запрос.УстановитьПараметр("РегистрационныйНомерККТ", Стр.N4);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					ВводВоборот_1=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				Иначе
					ВводВоборот_1=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
					
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

					
					
					ВводВоборот_1.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота;
					ВводВоборот_1.ВидПервичногоДокумента=Перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ.RECEIPT;
					ВводВоборот_1.Дата=ТекущаяДата();
					ВводВоборот_1.ОплаченПокупателем=Истина;
					ВводВоборот_1.Организация=Пользователь.Организация;
					ВводВоборот_1.ПричинаВыводаИзОборота=Перечисления.ПричинаВыводаИзОборота_ХамлеонЦРПТ.REMOTE_SALE;
					ВводВоборот_1.ТекущийПользователь=Пользователь;
					ВводВоборот_1.ТипПервичногоДокумента=Перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ.RECEIPT;
					ВводВоборот_1.НомерПервичногоДокумента=xmlString(Стр.N2);
					ВводВоборот_1.РегистрационныйНомерККТ=Стр.N4;
				
				
					ВводВоборот_1.ДатаПервичногоДокумента=ДатаПервичногоДокумента;
				Конецесли;
				//Добав=ВводВоборот_1.СерийныеНомера.Добавить();
				попытка
					Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
					Число(Сред(ШтрихКод,3,14)));;
					Если Не ЗначениеЗаполнено(Продукция) Тогда
						Продукция=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
						Продукция.GTIN=Число(Сред(ШтрихКод,3,14));
						Продукция.Наименование=xmlString(Продукция.GTIN);
						Продукция.НаименованиеТовара=xmlString(Продукция.GTIN);
						Продукция.Записать();;
						Продукция=Продукция.Ссылка;
					КонецЕсли;
				
				
			Исключение
				Продукция=Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка();
			КонецПопытки;
				Если ВводВоборот_1.СерийныеНомера.Найти(ШтрихКод,"cis")=Неопределено Тогда
					
				
					Добав=ВводВоборот_1.СерийныеНомера.Добавить();
					
					
					
					
					Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
					Добав.НаименованиеТовара=Продукция;
					Добав.cis=ШтрихКод;
					
					ППП=ВводВоборот_1.Товары.НайтиСтроки(Новый структура("gtin",Продукция));
					Если ППП.Количество()=0 Тогда
						Добав_1=ВводВоборот_1.Товары.Добавить();
						//Добав_1.Годендо=Сведения.expDate;
						//Добав_1.НомерВСД=Сведения.accompanyingDocument;
						//Добав_1.ЧасыДо=Сведения.expDate72;
						
						Добав_1.GTIN=Продукция;
						//Добав_1.ГоденДо=ДатаГоденДо;
						//Добав_1.КодТНВЭД=Стр_1.КодТНВЭД;
						Добав_1.СпособВыпускаТоваров="Производство в РФ";
						Добав_1.НомерСтрокиСвязи=Добав_1.НомерСтроки;
						Добав_1.КоличествоКМ=1;
						//Добав_1.ДекларацияИлиСертификатСоответствия=Стр_1.Сертификат;
					Иначе
						Добав_1=ППП[0];
						Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
						
					КонецЕсли;
					Добав_1.Цена=Стр.N7;
					Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
					 ВводВоборот_1.Записать();
					 Если МассивАгрегаций.Найти(ВводВоборот_1.Ссылка)=Неопределено Тогда
						 МассивАгрегаций.Добавить(ВводВоборот_1.Ссылка);
						 
						 Сообщить("Создан документ "+Строка(ВводВоборот_1.Ссылка));
					Конецесли;
			
				Конецесли;
			ИначеЕсли Стр.N1="Возврат в оборот" Тогда
				Нстр=КМДляУдаления.НайтиСтроки(Новый Структура("КМ",ШтрихКод));
				Для Каждого Стр_Уд Из НСТр Цикл
					КМДляудаления.Удалить(Стр_Уд);
				Конеццикла;
				Попытка
					ДатаПервичногоДокумента=Стр.N3;
					ДатаПервичногоДокумента=Дата(Число(Сред(ДатаПервичногоДокумента,1,4)),
					Число(Сред(ДатаПервичногоДокумента,6,2)),
					Число(Сред(ДатаПервичногоДокумента,9,2))
					
					);
					
				Исключение
					Продолжить;
				КонецПопытки;
				
				
				//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ВводВОборот_ХамелеонЦРПТ.Ссылка
					|ИЗ
					|	Документ.ВводВОборот_ХамелеонЦРПТ КАК ВводВОборот_ХамелеонЦРПТ
					|ГДЕ
					|	ВводВОборот_ХамелеонЦРПТ.ТипДокумента = &ТипДокумента
					|	И ПОДСТРОКА(ВводВОборот_ХамелеонЦРПТ.НомерПервичногоДокумента, 1, 1000) = &НомерПервичногоДокумента
					|	И ВводВОборот_ХамелеонЦРПТ.ДатаПервичногоДокумента = &ДатаПервичногоДокумента
					|	И (ВводВОборот_ХамелеонЦРПТ.Статус = &Статус
					|			ИЛИ ВводВОборот_ХамелеонЦРПТ.Статус = &Статус1)
					|	И ВводВОборот_ХамелеонЦРПТ.РегистрационныйНомерККТ ПОДОБНО &РегистрационныйНомерККТ";
				
				Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПустаяСсылка());
				Запрос.УстановитьПараметр("Статус1", Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПодготовленКОтправке);
				Запрос.УстановитьПараметр("ДатаПервичногоДокумента", ДатаПервичногоДокумента);
				Запрос.УстановитьПараметр("НомерПервичногоДокумента", xmlString(Стр.N2));
				Запрос.УстановитьПараметр("ТипДокумента", Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота);
				Запрос.УстановитьПараметр("РегистрационныйНомерККТ", Стр.N4);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					ВводВоборот_1=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				Иначе
					ВводВоборот_1=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
					
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

					

				//ВводВоборот_1=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
				ВводВоборот_1.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНужд;
				ВводВоборот_1.ВидПервичногоДокумента=Перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ.RECEIPT;
				ВводВоборот_1.Дата=ТекущаяДата();
				ВводВоборот_1.ОплаченПокупателем=Истина;
				ВводВоборот_1.Организация=Пользователь.Организация;
				ВводВоборот_1.ПричинаВыводаИзОборота=Перечисления.ПричинаВыводаИзОборота_ХамлеонЦРПТ.REMOTE_SALE;
				ВводВоборот_1.ТекущийПользователь=Пользователь;
				ВводВоборот_1.ТипПервичногоДокумента=Перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ.RECEIPT;
				ВводВоборот_1.НомерПервичногоДокумента=xmlString(Стр.N2);
				ВводВоборот_1.РегистрационныйНомерККТ=Стр.N4;
				
				ВводВоборот_1.ДатаПервичногоДокумента=ДатаПервичногоДокумента;
				Конецесли;
				//Добав=ВводВоборот_1.СерийныеНомера.Добавить();
			попытка
					Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
					Число(Сред(ШтрихКод,3,14)));;
					Если Не ЗначениеЗаполнено(Продукция) Тогда
						Продукция=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
						Продукция.GTIN=Число(Сред(ШтрихКод,3,14));
						Продукция.Наименование=xmlString(Продукция.GTIN);
						Продукция.НаименованиеТовара=xmlString(Продукция.GTIN);
						Продукция.Записать();;
						Продукция=Продукция.Ссылка;
					КонецЕсли;
				
				
			Исключение
				Продукция=Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка();
			КонецПопытки;
				Если ВводВоборот_1.СерийныеНомера.Найти(ШтрихКод,"cis")=Неопределено Тогда
			
				Добав=ВводВоборот_1.СерийныеНомера.Добавить();
				
				
				
				
				
				Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
				Добав.НаименованиеТовара=Продукция;
				Добав.cis=ШтрихКод;
				
				ППП=ВводВоборот_1.Товары.НайтиСтроки(Новый структура("gtin",Продукция));
				Если ППП.Количество()=0 Тогда
					Добав_1=ВводВоборот_1.Товары.Добавить();
					//Добав_1.Годендо=Сведения.expDate;
					//Добав_1.НомерВСД=Сведения.accompanyingDocument;
					//Добав_1.ЧасыДо=Сведения.expDate72;
					
					Добав_1.GTIN=Продукция;
					//Добав_1.ГоденДо=ДатаГоденДо;
					//Добав_1.КодТНВЭД=Стр_1.КодТНВЭД;
					Добав_1.СпособВыпускаТоваров="Производство в РФ";
					Добав_1.НомерСтрокиСвязи=Добав_1.НомерСтроки;
					Добав_1.КоличествоКМ=1;
					//Добав_1.ДекларацияИлиСертификатСоответствия=Стр_1.Сертификат;
				Иначе
					Добав_1=ППП[0];
					Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
					
				КонецЕсли;
				Добав_1.Цена=Стр.N7;
				Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
				 ВводВоборот_1.Записать();
				 
					 Если МассивАгрегаций.Найти(ВводВоборот_1.Ссылка)=Неопределено Тогда
						 МассивАгрегаций.Добавить(ВводВоборот_1.Ссылка);
						 
						 Сообщить("Создан документ "+Строка(ВводВоборот_1.Ссылка));
					Конецесли;

				   Конецесли;
			конецесли;
			
			
			
			//ВводВоборот.Дата=ТекущаяДата();
			
			
		Конеццикла;
	
	
КонецПроцедуры

Процедура СчитаемКМСФайлаСначала(ДвоичныеДанные,МассивКМДляПолученияСтатусов)
	
	
	ИмяФ=ПолучитьимяВременногоФайла("xlsx");
	
	ДвоичныеДанные.Записать(ИмяФ);
	
	
		ОбластьФайла = Новый ТабличныйДокумент;
		Попытка
			// Выполняется долго на больших файлах.
			ОбластьФайла.Прочитать(ИмяФ, СпособЧтенияЗначенийТабличногоДокумента.Значение);
			УдалитьФайлы(ИмяФ);
		Исключение
			//Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
			УдалитьФайлы(ИмяФ);
			Возврат;
		КонецПопытки;
		
		
		
		КолСтр = ОбластьФайла.ВысотаТаблицы;
		КолКолонок = ОбластьФайла.ШиринаТаблицы;
		
		ТаблицаРезультат = Новый ТаблицаЗначений;
		
		ТаблицаРезультат.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"), "№", 4);
		ТаблицаРезультат.Колонки.Добавить("Сопоставлено", Новый ОписаниеТипов("Булево"), "Сопоставлено", 1);
		
		Для Сч = 1 ПО КолКолонок Цикл
			нКолонка = СтрЗаменить(Сч, Символы.НПП, "");
			ИмяКолонки = "N" + нКолонка;
			ТаблицаРезультат.Колонки.Добавить(ИмяКолонки);
		КонецЦикла;
		
		// 1-я строка. Заголовки.
		НоваяСтрокаТФ = ТаблицаРезультат.Добавить();
		НоваяСтрокаТФ.НомерСтроки = 1;
		Для Сч=1 ПО КолКолонок Цикл
			нКолонка = СтрЗаменить(Сч, Символы.НПП, "");
			ИмяКолонки = "N" + нКолонка;
			НоваяСтрокаТФ[ИмяКолонки] = ОбластьФайла.ПолучитьОбласть("R1" + "C"+нКолонка).ТекущаяОбласть.Текст;
			
			// Используется при формировании таблицы на форме обработки.
			ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
			ДлинаСтроки    = СтрДлина(СокрЛП(НоваяСтрокаТФ[ИмяКолонки]));
			ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
		КонецЦикла;
		
		НачСтрока = ?(Не ЗначениеЗаполнено(НачСтрока), 2, НачСтрока);
		КонСтрока = ?(Не ЗначениеЗаполнено(КонСтрока), КолСтр, КонСтрока);
		
		
		
		
		Для нСтрокаТФ = НачСтрока ПО КонСтрока Цикл
			НоваяСтрокаТФ = ТаблицаРезультат.Добавить();
			НоваяСтрокаТФ[0] = нСтрокаТФ;
			нСтрока = СтрЗаменить(нСтрокаТФ, Символы.НПП, "");
			Для Колонка = 1 ПО КолКолонок Цикл
				нКолонка = СтрЗаменить(Колонка, Символы.НПП, "");
				Область = ОбластьФайла.ПолучитьОбласть("R"+нСтрока+"C"+нКолонка);
				ТекущаяОбласть = Область.ТекущаяОбласть;
				Если Колонка=2 Или Колонка=5 Тогда
					ЗначениеЯчейки = xmlstring(сокрЛП(ТекущаяОбласть.Текст));    // Строка, Булево. (Булево как строка "ИСТИНА"/"ЛОЖЬ")
					Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
						ЗначениеЯчейки = СокрЛП(ЗначениеЯчейки);
					Иначе
						ЗначениеЯчейки = Неопределено;
					КонецЕсли;
				Иначе
					Попытка
						ЗначениеЯчейки = xmlString(ТекущаяОбласть.Значение);        // Число, Дата.
					Исключение
						ЗначениеЯчейки = xmlstring(сокрЛП(ТекущаяОбласть.Текст));    // Строка, Булево. (Булево как строка "ИСТИНА"/"ЛОЖЬ")
						Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
							ЗначениеЯчейки = СокрЛП(ЗначениеЯчейки);
						Иначе
							ЗначениеЯчейки = Неопределено;
						КонецЕсли;
					КонецПопытки;
				КонецЕсли;
				ИмяКолонки = "N" + нКолонка;
				НоваяСтрокаТФ[ИмяКолонки] = ЗначениеЯчейки;
				
				// Используется при формировании таблицы на форме обработки.
				ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
				ДлинаСтроки    = СтрДлина(СокрЛП(НоваяСтрокаТФ[ИмяКолонки]));
				ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
			КонецЦикла;
		КонецЦикла;
		
		
		ПерваСтрока=Истина;
		Для Каждого Стр Из ТаблицаРезультат Цикл
			//Если ПерваСтрока=Истина Тогда
			//	ПерваСтрока=ложь;
			//	Продолжить;
			//Конецесли;
			cis=Стр.N6;
			Если Сред(cis,1,2)<>"01" Тогда
				cis="01"+cis;
			Конецесли;
			cis=Сред(cis,1,31);
		

			Если Стр.N1="Вывод из оборота" Тогда
				Если КМДляУдаления.НайтиСтроки(Новый Структура("КМ",cis)).Количество()=0 Тогда
					Добав=КМДляУдаления.Добавить();
					Добав.КМ=cis;
					Добав.Проверять=Истина;
					МассивКМДляПолученияСтатусов.Добавить(cis);
				Иначе
					//Сообщить("Дубль "+cis);
					
				Конецесли;
				
				
				
			ИначеЕсли Стр.N1="Возврат в оборот" Тогда
		//		Если КМДляУдаления.НайтиСтроки(Новый Структура("КМ",cis)).Количество()=0 Тогда
		//			Добав=КМДляУдаления.Добавить();
		//			Добав.КМ=cis;
		//			Добав.Проверять=Ложь;
		//		Конецесли;
				
			Конецесли;
							
		Конеццикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайла_ВыводИзОборотаВельерис(РР,ДД) Экспорт
	МассивАгрегация=Новый Массив;
	МассивАгрегация.Очистить();
	Если РР<>Неопределено тогда
		Для Каждого Стр_Ф Из РР Цикл
			
			ДвоичнДанные=Новый ДвоичныеДанные(Стр_Ф);
			КМДляУдаления.Очистить();
			МассивКМДляПолученияСтатусов=Новый Массив;
			СчитаемКМСФайлаСначала(ДвоичнДанные,МассивКМДляПолученияСтатусов);
			
			
			Если МассивКМДляПолученияСтатусов.Количество()>0 Тогда
				
				Thumbprint_1=ПолучитьИзПользователя();	

				СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
				СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
				СерийныйНомер=СтруктураНастроек.СерийныйНомер;
				
				Если Не ЗначениеЗаполнено(СРегистра) Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				Иначе
				   
						Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
							Прокси=Новый ИнтернетПрокси;
							Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
						
							HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
						Иначе
						
							HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
						КонецЕсли;
						
						HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
						//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
						///Константин           
						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
						//Текст1=Ответ.ПолучитьТелоКакСтроку();
						Если Ответ.КодСостояния<>200 Тогда
							СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
						КонецЕсли;
							
				КонецЕсли;


			//	 Сообщить(МассивКМДляПолученияСтатусов.Количество());
			
			
					Пока МассивКМДляПолученияСтатусов.Количество()>0 Цикл
							 	МассивОпределям=Новый Массив;
								МассивОпределям.Очистить();
								КоличествоПр=Мин(50,МассивКМДляПолученияСтатусов.Количество());
								Для Сч=1 По КоличествоПр Цикл
									Если Thumbprint_1.НаименованиеСтенда="Табак"
										ИЛИ 
										Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
										Тогда
										НомерКМ=        МассивКМДляПолученияСтатусов[0];
										Если Сред(НомеркМ,1,3)="010" Тогда
											НомерКМ="("+Сред(НомерКМ,1,2)+")"+Сред(НомерКМ,3,14)+"("+Сред(НомерКМ,17,2)+")"+Сред(НомерКМ,19);
											
										КонецЕсли;
										
										МассивОпределям.Добавить(НомерКМ);
										
									Иначе
									
										МассивОпределям.Добавить(МассивКМДляПолученияСтатусов[0]);
									КонецЕсли;
									МассивКМДляПолученияСтатусов.Удалить(0);
								Конеццикла;
							 	ВернутьСтатусы=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьСтатусыПоМассивуКМ(Thumbprint_1,Срегистра,МассивОпределям);
								
				
								Для Каждого Стр_22 Из ВернутьСтатусы Цикл
										//Сообщить(Стр_22.Статус);
										Если Стр_22.Статус="INTRODUCED" Тогда

											Нстр_1=КМДляУдаления.НайтиСтроки(Новый Структура("КМ",Стр_22.cis));
											Для Каждого Стр_НСТР_1 Из НСтр_1 Цикл
												КМДляУдаления.Удалить(Стр_НСТР_1);
												
											Конеццикла;
										Конецесли;
									Конеццикла;
									
									
								
								
							Конеццикла;
							
			
			Конецесли;
			
			
			
			
			
			СоздатьВводВОробВальерес(ДвоичнДанные,МассивАгрегация,Пользователь);
			
			
			
		Конеццикла;
		
		Для Каждого Стр_22 Из КМДляУдаления Цикл	
			Сообщить("Не добавлена КМ "+Стр_22.КМ);
		КонецЦикла;
		
		Если дД=Истина Тогда
			
			Для Каждого Стр_1 Из МассивАгрегация Цикл
				Форм=ПолучитьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
				"Ключ",Стр_1));
				Форм.ОтправитьЗаявку(ДД);
				
			Конеццикла;
			
		КонецЕслИ;
		Элементы.ВводВОборотТаблица.Обновить();
	КонецЕсли;
	
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИОтправитьВводВОборотВальберис(Команда)
	// Вставить содержимое обработчика.
	Перем Файл;
	ВклЗаг = 0;
	//ДанныеЛиста.Очистить();
	Режим=РежимДиалогаВыбораФайла.Открытие;
	нДиалог= НОвый ДиалогВыбораФайла(Режим);
	//Фильтр="Файл xls/txt/xml|*.xls;*.xlsx;*.txt;*.xml|Файл txt|*.txt|Файл xls|*.xls;*.xlsx|Файл xml|*.xml";
	Фильтр="Файл xlsx|*.xlsx";
	нДиалог.МножественныйВыбор=Истина;
	нДиалог.Фильтр=Фильтр;
	нДиалог.Заголовок="Выберите файл для загрузки..." ;
	нДиалог.Показать(Новый ОписаниеОповещения("ПослеВыбораФайла_ВыводИзОборотаВельерис",ЭтаФорма,Истина));
	
	
КонецПроцедуры

&НаСервере
Процедура ПриПроведенииПриемкиПриходоватьКМВоВложенииПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	РегДв=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Прочитать();
	Если РегДв.Количество()>0 Тогда
		СтрТ=РегДв[0];
	Иначе
		СтрТ=РегДв.Добавить();
	КонецЕсли;
	СтрТ.ПриПроведенииПриемкиПриходоватьКМВоВложении=ПриПроведенииПриемкиПриходоватьКМВоВложении;
	РегДв.Записать(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПроведенииПриемкиПриходоватьКМВоВложенииПриИзменении(Элемент)
	ПриПроведенииПриемкиПриходоватьКМВоВложенииПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВводВОборотXMLСтандарт(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
		// Вставить содержимое обработчика.
		
	Перем Файл;
	ВклЗаг = 0;
	//ДанныеЛиста.Очистить();
	Режим=РежимДиалогаВыбораФайла.Открытие;
	нДиалог= НОвый ДиалогВыбораФайла(Режим);
	//Фильтр="Файл xls/txt/xml|*.xls;*.xlsx;*.txt;*.xml|Файл txt|*.txt|Файл xls|*.xls;*.xlsx|Файл xml|*.xml";
	Фильтр="Файл xml|*.xml";
	нДиалог.МножественныйВыбор=Истина;
	нДиалог.Фильтр=Фильтр;
	нДиалог.Заголовок="Выберите файл для загрузки..." ;
	нДиалог.Показать(Новый ОписаниеОповещения("ПослеВыбораФайла_ВводВОБОРОТ_ХамелеонЦРПТСтандарт",ЭтаФорма,Ложь));
	
		
КонецПроцедуры




&НаКлиенте
Процедура ПослеВыбораФайла_ВводВОБОРОТ_ХамелеонЦРПТСтандарт(РР,ДД) Экспорт
	МассивАгрегация=Новый Массив;
	МассивАгрегация.Очистить();
	Если РР<>Неопределено тогда
		Для Каждого Стр_Ф Из РР Цикл
			
			ДвоичнДанные=Новый ДвоичныеДанные(Стр_Ф);
			создатьАгрегацииПоФайлуСтандарт(ДвоичнДанные,МассивАгрегация);
			
			
			
		Конеццикла;
		
		Если дД=Истина Тогда
			
			Для Каждого Стр_1 Из МассивАгрегация Цикл
				Форм=ПолучитьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
				"Ключ",Стр_1));
				Форм.ОтправитьЗаявку(ДД);
				
			Конеццикла;
			
		КонецЕслИ;
		Элементы.ВводВОборотТаблица.Обновить();
	КонецЕсли;
	
	
	
КонецПроцедуры

Процедура создатьАгрегацииПоФайлуСтандарт(ДвоичнДанные,МассивАгрегация)
	
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СоздатьВводВОборотПоФайлуСтандарт(ДвоичнДанные,МассивАгрегация);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьВводВОборотXMLСтандартОтправить(Команда)
		// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
		// Вставить содержимое обработчика.
		
	Перем Файл;
	ВклЗаг = 0;
	//ДанныеЛиста.Очистить();
	Режим=РежимДиалогаВыбораФайла.Открытие;
	нДиалог= НОвый ДиалогВыбораФайла(Режим);
	//Фильтр="Файл xls/txt/xml|*.xls;*.xlsx;*.txt;*.xml|Файл txt|*.txt|Файл xls|*.xls;*.xlsx|Файл xml|*.xml";
	Фильтр="Файл xml|*.xml";
	нДиалог.МножественныйВыбор=Истина;
	нДиалог.Фильтр=Фильтр;
	нДиалог.Заголовок="Выберите файл для загрузки..." ;
	нДиалог.Показать(Новый ОписаниеОповещения("ПослеВыбораФайла_ВводВОБОРОТ_ХамелеонЦРПТСтандарт",ЭтаФорма,Истина));
	
		
КонецПроцедуры
