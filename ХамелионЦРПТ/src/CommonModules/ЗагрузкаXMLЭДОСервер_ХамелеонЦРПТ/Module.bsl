

Function JSONValue(Val String) Экспорт
	
	Reader = New JSONReader;
	Reader.SetString(String);
	Result = ReadJSON(Reader);
	Reader.Close();
	Return Result;

EndFunction

Function JSONString(Val Object) Экспорт
	
	Writer = New JSONWriter;
	//  Writer.SetString(New JSONWriterSettings(JSONLineBreak.None,,,ЭкранированиеСимволовJSON.СимволыВнеASCII ));
	Writer.SetString(New JSONWriterSettings(JSONLineBreak.None ));
	WriteJSON(Writer, Object);
	Body = Writer.Close();
	Return Body;

EndFunction




Функция ВернутьСтатусДокументаКонтВЕБ(Статус) Экспорт
	Если Статус="Требуется подпись" Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.ТребуетсяПодпись;
	ИначеЕсли Статус="Отказано в подписи контрагенту" Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отклонен;
	ИначеЕсли Статус="Подписан" Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан;
	ИначеЕсли Статус="Аннулирован" Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отозван;
	ИначеЕсли Статус="Требуется подписать и отправить" Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Черновик
	ИначеЕсли Статус="Ожидается подпись контрагента. Ожидается извещение о получении" 
		ИЛИ Статус="Ожидается подпись контрагента. Требуется подписать извещение"
		Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отправлен
		
	ИначеЕсли Статус="Подписан. Требуется подписать извещение" Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан
	ИначеЕсли Статус="Требуется подпись. Требуется подписать извещение" Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.ТребуетсяПодпись
	ИначеЕсли Статус="Документооборот завершен" Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан;
		
	ИначеЕсли Статус="Подписан контрагентом" Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан;
		
	ИначеЕсли Статус="Подписан. Отказано в аннулировании" Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан;
		
	ИначеЕсли статус="Ожидается подпись контрагента" Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отправлен
	ИначеЕсли статус="Требуется подписать извещение" Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.ЗапросНаУточнениеПросмотренОжидаетсяУточнение;
		
	//ИначеЕсли Статус="Документ" 
	//	ИЛИ Статус="Ожидается подпись контрагента. Требуется подписать извещение"
	//	Тогда
	//	Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отправлен
	Иначе
		
		Сообщить("Для Диадок неизвестный статус документа "+Статус);
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.ОжидаетсяОтправка;
	КонецЕсли;
	
Конецфункции

Функция ЗначениеВСтрокуВнутрСервер(ЗначениеРеквизита) Экспорт
	Возврат ЗначениеВСтрокуВнутр(ЗначениеРеквизита)
Конецфункции

Процедура ПоменятьСтатус(Докум,Статус) Экспорт
	Если Докум.СтатусУПД<>Статус Тогда
		Добб=Докум.ПолучитЬОбъект();
		Добб.СтатусУПД=Статус;
		Добб.Записать();
		Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
			ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ЧастичноПринят
			ИЛИ Добб.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан
			Тогда
			Попытка
				Добб.ПометкаУдаления=Ложь;
				Добб.Записать(РежимЗаписиДокумента.Проведение) 
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

функция ЗаписатьОтветОтПриемки(Ссылка,Ошибка) Экспорт
	ДопПр=Ссылка.ПолучитьОбъект();
	ДопПр.ОшибкаОтправки=Ошибка;
	ДопПр.Записать();
КонецФункции


Функция СтатусыАнулированияДокументовДиадок() Экспорт
	
	
	СтатусыАнулированияДокументовДиадок= Новый Соответствие;
	
	СтатусыАнулированияДокументовДиадок.Вставить("RevocationIsRequestedByMe", Перечисления.СтатусыУПД_ХамелеонЦРПТ.ОжидаетсяУточнение);
	СтатусыАнулированияДокументовДиадок.Вставить("RequestsMyRevocation"		, Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отклонен);
	СтатусыАнулированияДокументовДиадок.Вставить("RevocationRejected"		, Перечисления.СтатусыУПД_ХамелеонЦРПТ.ОжидаетсяУточнение);
	СтатусыАнулированияДокументовДиадок.Вставить("RevocationAccepted"		, Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отклонен);
	
	Возврат СтатусыАнулированияДокументовДиадок;
	
КонецФункции


Функция СтатусыДокументовДиадокВходящие() Экспорт
	
	СоответствиеСтатусов= Новый Соответствие;
	
	СоответствиеСтатусов.Вставить("InboundNotFinished"						, Перечисления.СтатусыУПД_ХамелеонЦРПТ.Черновик);
	СоответствиеСтатусов.Вставить("InboundFinished"							, Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан);
	СоответствиеСтатусов.Вставить("InboundWaitingForRecipientSignature"		, Перечисления.СтатусыУПД_ХамелеонЦРПТ.ТребуетсяПодпись);
	СоответствиеСтатусов.Вставить("InboundWithRecipientSignature"			, Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан);
	СоответствиеСтатусов.Вставить("InboundRecipientSignatureRequestRejected", Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отозван);
	СоответствиеСтатусов.Вставить("InboundInvalidRecipientSignature"		, Перечисления.СтатусыУПД_ХамелеонЦРПТ.ОшибкаВПодписи);
	СоответствиеСтатусов.Вставить("InboundNoRecipientSignatureRequest"		, Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отправлен);
	СоответствиеСтатусов.Вставить("Inbound"									, Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отправлен);

	Возврат СоответствиеСтатусов;
	
КонецФункции


Функция ПолучитьОписаниеКонфигурацииДляДиадок()  Экспорт
	Возврат Метаданные.Синоним + " ("+Метаданные.Версия+")";
КонецФункции

функция сбФайлВBASE64(ПолноеИмяФайла) экспорт
	ДвоичныеДанныеXML = Новый ДвоичныеДанные(ПолноеИмяФайла);
	ТекстXMLBase64 = СтрЗаменить(СтрЗаменить(Base64Строка(ДвоичныеДанныеXML),Символы.ПС,""),Символы.ВК,"");  
	Возврат ТекстXMLBase64;
КонецФункции

функция сбСтрокаВBASE64(строка, кодировка = "windows-1251") экспорт
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(строка);
	ИмяВрФ = КаталогВременныхФайлов()+"sbisTemp.xml";
	ТекстДок.Записать(ИмяВрФ, кодировка);
	ТекстXMLBase64 = сбФайлВBASE64(ИмяВрФ);  
	Попытка 
		УдалитьФайлы(ИмяВрФ); 
	Исключение 
	КонецПопытки;	
	Возврат ТекстXMLBase64;
КонецФункции

Функция  ЗарегистрироватьСертификаВСБИС(Сертификат) Экспорт
	Джсон=Новый ЗаписьJson;
				Джсон.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,ЭкранированиеСимволовJSON.СимволыВнеASCII));
				Джсон.ЗаписатьНачалоОбъекта();
				
				Джсон.ЗаписатьИмяСвойства("jsonrpc");
				Джсон.ЗаписатьЗначение("2.0");
				
				Джсон.ЗаписатьИмяСвойства("method");
				Джсон.ЗаписатьЗначение("СБИС.ДобавитьПользователя");
				
				
				Джсон.ЗаписатьИмяСвойства("params");
				Джсон.ЗаписатьНачалоОбъекта();
				Джсон.ЗаписатьИмяСвойства("Параметр");
				
				Джсон.ЗаписатьНачалоОбъекта();
				
				Джсон.ЗаписатьИмяСвойства("Сертификат");
				Джсон.ЗаписатьНачалоОбъекта();
				Джсон.ЗаписатьИмяСвойства("ДвоичныеДанные");
				Джсон.ЗаписатьЗначение(Сертификат);
				
				Джсон.ЗаписатьКонецОбъекта();
				Джсон.ЗаписатьКонецОбъекта();
				Джсон.ЗаписатьКонецОбъекта();
				
				Джсон.ЗаписатьИмяСвойства("id");
				Джсон.ЗаписатьЗначение("0");
				
				Джсон.ЗаписатьКонецОбъекта();;
				Тело=Джсон.Закрыть();
				
				Возврат тело
КонецФункции
Функция ДокументОтгрузки(ИД) Экспорт
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,ЭкранированиеСимволовJSON.СимволыВнеASCII));
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("jsonrpc");
	Чтен.ЗаписатьЗначение("2.0");
	Чтен.ЗаписатьИмяСвойства("method");
	Чтен.ЗаписатьЗначение("СБИС.ПрочитатьДокумент");
	Чтен.ЗаписатьИмяСвойства("params");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Документ");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Идентификатор");
	Чтен.ЗаписатьЗначение(ИД);
	
	Чтен.ЗаписатьКонецОбъекта();
	
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьИмяСвойства("id");
	Чтен.ЗаписатьЗначение(0);
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();
	
	Возврат Тело;
	
Конецфункции


Функция ВернутьСтатусДокументаСБ(Код) Экспорт
	Если Код="0" Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Черновик 
	ИначеЕсли Код="1" Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отправлен
	ИначеЕсли Код="2" Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.ОшибкаДоставки;
	ИначеЕсли Код="3" Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.ОжидаетсяОтправка
	ИначеЕсли Код="4" Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отправлен
	ИначеЕсли Код="6" Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отклонен
	ИначеЕсли Код="7" Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан
	ИначеЕсли Код="9" Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.ОжидаетсяУточнение
	ИначеЕсли Код="10" Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отправлен
	ИначеЕсли Код="19" Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отозван
	ИначеЕсли Код="20" Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отозван
	ИначеЕсли Код="22" Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отклонен
	ИначеЕсли Код="23" Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.ТребуетсяПодпись	
	ИначеЕсли Код="27" Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.ОжидаетсяУточнение
	КонецЕсли;
Конецфункции


Функция НаСервереОпределимЧтоНамГрузитьСБ(ПолучитьСписокНакладных) Экспорт
	МассивДокум=Новый Массив;
	ДЛя Каждого Стр_1 Из ПолучитьСписокНакладных.result.Документ Цикл
		
		ДокументНайти=Документы.Приемка_ХамелеонЦРПТ.НайтиПоРеквизиту("_Order_ID",Стр_1.Идентификатор);
		Если ЗначениеЗаполнено(ДокументНайти) тогда
			
			СтатусПоСБ=ВернутьСтатусДокументаСБ(Стр_1.Состояние.Код);
			Если ДокументНайти.СтатусУПД<>СтатусПоСБ Тогда
				ДобП=Документнайти.ПолучитьОбъект();
				ДобП.СтатусУПД=СтатусПоСБ;
				Если ДобП.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан Тогда
					ДобП.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ДобП.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			МассивДокум.Добавить(Стр_1);
		КонецЕсли;
		
	Конеццикла;
	
	Возврат МассивДокум
Конецфункции

Функция ТелоОтправить(Ид,Thumbprint_1,ПодписанныеДанные,ТТТ_Ответ,ИмяФайла) Экспорт
	

			Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,ЭкранированиеСимволовJSON.СимволыВнеASCII));
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("jsonrpc");
	Чтен.ЗаписатьЗначение("2.0");
	Чтен.ЗаписатьИмяСвойства("method");
	Чтен.ЗаписатьЗначение("СБИС.ВыполнитьДействие");
	Чтен.ЗаписатьИмяСвойства("params");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Документ");
	
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("Идентификатор");
	Чтен.ЗаписатьЗначение(Ид);
	
	Чтен.ЗаписатьИмяСвойства("Этап");
	
	
	
	Чтен.ЗаписатьНачалоОбъекта();   //+++
	
	Чтен.ЗаписатьИмяСвойства("Вложение");
	
	Чтен.ЗаписатьНачалоМассива();   //++++
	
	Чтен.ЗаписатьНачалоОбъекта();     //++++
	
	Чтен.ЗаписатьИмяСвойства("Идентификатор");
	Чтен.ЗаписатьЗначение(ТТТ_Ответ.result.Вложение[0].Идентификатор);
	Чтен.ЗаписатьИмяСвойства("Подпись");
	
	Чтен.ЗаписатьНачалоМассива();     ///+++
	
	Чтен.ЗаписатьНачалоОбъекта();     ///+++
	
	Чтен.ЗаписатьИмяСвойства("Файл");
	
	Чтен.ЗаписатьНачалоОбъекта();///++
	
	Чтен.ЗаписатьИмяСвойства("ДвоичныеДанные");
	Чтен.ЗаписатьЗначение(ПодписанныеДанные);
	
	Чтен.ЗаписатьИмяСвойства("Имя");
	Чтен.ЗаписатьЗначение(ИмяФайла+".sign");
	
	Чтен.ЗаписатьКонецОбъекта();//++++
	
	

	Чтен.ЗаписатьКонецОбъекта();//+++
	
//	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецМассива(); ///+++
	Чтен.ЗаписатьКонецОбъекта();   //+++
	Чтен.ЗаписатьКонецМассива();  //+++
	
//	Чтен.ЗаписатьКонецОбъекта();  //+++
	
	
	Чтен.ЗаписатьИмяСвойства("Действие");
	
	Чтен.ЗаписатьНачалоМассива();
	
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("Название");
	Чтен.ЗаписатьЗначение("Отправить");
	Чтен.ЗаписатьИмяСвойства("Сертификат");
	Чтен.ЗаписатьНачалоМассива();///+++
	Чтен.ЗаписатьНачалоОбъекта();//+++
	Чтен.ЗаписатьИмяСвойства("Отпечаток");
	Чтен.ЗаписатьЗначение(Thumbprint_1);
	
	Чтен.ЗаписатьКонецОбъекта();///+++
	Чтен.ЗаписатьКонецМассива();///+++
	
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьИмяСвойства("Название");
	Чтен.ЗаписатьЗначение("Отправка");
	Чтен.ЗаписатьКонецОбъекта();
	
	//Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецОбъекта();
	
	
	
	Чтен.ЗаписатьИмяСвойства("id");
	Чтен.ЗаписатьЗначение("0");
	
	Чтен.ЗаписатьКонецОбъекта();
	
	
	Тело=Чтен.Закрыть();
	
	///Возврат Тело;
	
	
		Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,ЭкранированиеСимволовJSON.СимволыВнеASCII));
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("jsonrpc");
	Чтен.ЗаписатьЗначение("2.0");
	Чтен.ЗаписатьИмяСвойства("method");
	Чтен.ЗаписатьЗначение("СБИС.ПодготовитьДействие");
	Чтен.ЗаписатьИмяСвойства("params");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Документ");
	
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("Идентификатор");
	Чтен.ЗаписатьЗначение(Ид);
	
	Чтен.ЗаписатьИмяСвойства("Этап");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Действие");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Название");
	Чтен.ЗаписатьЗначение("Отправить");
	Чтен.ЗаписатьИмяСвойства("Сертификат");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Отпечаток");
	Чтен.ЗаписатьЗначение(Thumbprint_1);
	Чтен.ЗаписатьКонецОбъекта();
	
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьИмяСвойства("Название");
	Чтен.ЗаписатьЗначение("Отправка");
	Чтен.ЗаписатьКонецОбъекта();
	
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецОбъекта();
	
	
	
	Чтен.ЗаписатьИмяСвойства("id");
	Чтен.ЗаписатьЗначение("0");
	
	Чтен.ЗаписатьКонецОбъекта();
	
	
	Тело=Чтен.Закрыть();
	
	Возврат Тело;
	
Конецфункции

Функция ТелоОтправитьПодпись(Ид,Thumbprint_1,ПодписанныеДанные,ИмяФайла,ТТТ_Ответ) Экспорт

			Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,ЭкранированиеСимволовJSON.СимволыВнеASCII));
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("jsonrpc");
	Чтен.ЗаписатьЗначение("2.0");
	Чтен.ЗаписатьИмяСвойства("method");
	Чтен.ЗаписатьЗначение("СБИС.ВыполнитьДействие");
	Чтен.ЗаписатьИмяСвойства("params");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Документ");
	
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("Идентификатор");
	Чтен.ЗаписатьЗначение(Ид);
	
	Чтен.ЗаписатьИмяСвойства("Этап");
	
	
	
	Чтен.ЗаписатьНачалоОбъекта();   //+++
	
	Чтен.ЗаписатьИмяСвойства("Вложение");
	
	Чтен.ЗаписатьНачалоМассива();   //++++
	
	Чтен.ЗаписатьНачалоОбъекта();     //++++
	
	Чтен.ЗаписатьИмяСвойства("Идентификатор");
	Чтен.ЗаписатьЗначение(ТТТ_Ответ.result.Этап[0].Вложение[0].Идентификатор);
	Чтен.ЗаписатьИмяСвойства("Подпись");
	
	Чтен.ЗаписатьНачалоМассива();     ///+++
	
	Чтен.ЗаписатьНачалоОбъекта();     ///+++
	
	Чтен.ЗаписатьИмяСвойства("Файл");
	
	Чтен.ЗаписатьНачалоОбъекта();///++
	
	Чтен.ЗаписатьИмяСвойства("ДвоичныеДанные");
	Чтен.ЗаписатьЗначение(ПодписанныеДанные);
	
	Чтен.ЗаписатьИмяСвойства("Имя");
	Чтен.ЗаписатьЗначение(ИмяФайла+".p7s");
	
	Чтен.ЗаписатьКонецОбъекта();//++++
	
	

	Чтен.ЗаписатьКонецОбъекта();//+++
	
//	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецМассива(); ///+++
	Чтен.ЗаписатьКонецОбъекта();   //+++
	Чтен.ЗаписатьКонецМассива();  //+++
	
//	Чтен.ЗаписатьКонецОбъекта();  //+++
	
	
	Чтен.ЗаписатьИмяСвойства("Действие");
	
	Чтен.ЗаписатьНачалоМассива();
	
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("Название");
	Чтен.ЗаписатьЗначение("Отправить");
	Чтен.ЗаписатьИмяСвойства("Сертификат");
	Чтен.ЗаписатьНачалоМассива();///+++
	Чтен.ЗаписатьНачалоОбъекта();//+++
	Чтен.ЗаписатьИмяСвойства("Отпечаток");
	Чтен.ЗаписатьЗначение(Thumbprint_1);
	
	Чтен.ЗаписатьКонецОбъекта();///+++
	Чтен.ЗаписатьКонецМассива();///+++
	
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьИмяСвойства("Название");
	Чтен.ЗаписатьЗначение("Отправка");
	Чтен.ЗаписатьКонецОбъекта();
	
	//Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецОбъекта();
	
	
	
	Чтен.ЗаписатьИмяСвойства("id");
	Чтен.ЗаписатьЗначение("0");
	
	Чтен.ЗаписатьКонецОбъекта();
	
	
	Тело=Чтен.Закрыть();
	
	Возврат Тело;
	
	
	
	
			Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,ЭкранированиеСимволовJSON.СимволыВнеASCII));
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("jsonrpc");
	Чтен.ЗаписатьЗначение("2.0");
	Чтен.ЗаписатьИмяСвойства("method");
	Чтен.ЗаписатьЗначение("СБИС.ВыполнитьДействие");
	Чтен.ЗаписатьИмяСвойства("params");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Документ");
	
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("Идентификатор");
	Чтен.ЗаписатьЗначение(Ид);
	
	Чтен.ЗаписатьИмяСвойства("Этап");
	Чтен.ЗаписатьНачалоМассива();
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Действие");
	Чтен.ЗаписатьНачалоМассива();
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Название");
	Чтен.ЗаписатьЗначение("Отправить");
	Чтен.ЗаписатьИмяСвойства("Сертификат");
	Чтен.ЗаписатьНачалоМассива();
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Отпечаток");
	Чтен.ЗаписатьЗначение(Thumbprint_1);
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецМассива();
	
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьИмяСвойства("Название");
	Чтен.ЗаписатьЗначение("Отправка");
	Чтен.ЗаписатьКонецОбъекта();
	
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецОбъекта();
	
	
	
	Чтен.ЗаписатьИмяСвойства("id");
	Чтен.ЗаписатьЗначение("0");
	
	Чтен.ЗаписатьКонецОбъекта();
	
	
	Тело=Чтен.Закрыть();
	
	Возврат Тело;

	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,ЭкранированиеСимволовJSON.СимволыВнеASCII));
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("jsonrpc");
	Чтен.ЗаписатьЗначение("2.0");
	Чтен.ЗаписатьИмяСвойства("method");
	Чтен.ЗаписатьЗначение("СБИС.ВыполнитьДействие");
	Чтен.ЗаписатьИмяСвойства("params");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Документ");
	
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("Идентификатор");
	Чтен.ЗаписатьЗначение(Ид);
	
	Чтен.ЗаписатьИмяСвойства("Этап");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Вложение");
	Чтен.ЗаписатьНачалоМассива();
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Идентификатор");
	Чтен.ЗаписатьЗначение(ТТТ_Ответ.result.Этап[0].Вложение[0].Идентификатор);
	Чтен.ЗаписатьИмяСвойства("Подпись");
	Чтен.ЗаписатьНачалоМассива();
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Файл");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("ДвоичныеДанные");
	Чтен.ЗаписатьЗначение(ПодписанныеДанные);
	
	Чтен.ЗаписатьИмяСвойства("Имя");
	Чтен.ЗаписатьЗначение(ИмяФайла+".sign");
	
	Чтен.ЗаписатьКонецОбъекта();
	
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецМассива();
	
	
	Чтен.ЗаписатьИмяСвойства("Действие");
	Чтен.ЗаписатьНачалоМассива();	
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Название");
	Чтен.ЗаписатьЗначение("Отправить");
	Чтен.ЗаписатьИмяСвойства("Сертификат");
	Чтен.ЗаписатьНачалоМассива();
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Отпечаток");
	Чтен.ЗаписатьЗначение(Thumbprint_1);
	Чтен.ЗаписатьКонецОбъекта();
	
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьИмяСвойства("Идентификатор");
	Чтен.ЗаписатьЗначение("");
	Чтен.ЗаписатьИмяСвойства("Название");
	Чтен.ЗаписатьЗначение("Отправка");
	Чтен.ЗаписатьИмяСвойства("Служебный");
	Чтен.ЗаписатьЗначение("Нет");
	Чтен.ЗаписатьКонецОбъекта();
	
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецОбъекта();
	
	
	
	Чтен.ЗаписатьИмяСвойства("id");
	Чтен.ЗаписатьЗначение("0");
	
	Чтен.ЗаписатьКонецОбъекта();
	
	
	Тело=Чтен.Закрыть();
	
	Возврат Тело;
	
Конецфункции

Функция  ЗапросДокументовИзменения(Thumbprint_1,Страница,РазмерСтраницы,КачатьСЭДОЗаПоследниеДни) Экспорт
		Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,ЭкранированиеСимволовJSON.СимволыВнеASCII));
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("jsonrpc");
	Чтен.ЗаписатьЗначение("2.0");
	Чтен.ЗаписатьИмяСвойства("method");
	Чтен.ЗаписатьЗначение("СБИС.СписокДокументов");
	Чтен.ЗаписатьИмяСвойства("params");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Фильтр");
	
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("ДатаС");
	ДатаНачала=НачалоДня(ТекущаяДата())-КачатьСЭДОЗаПоследниеДни*24*60*60;
	Чтен.ЗаписатьЗначение(Формат(ДатаНачала,"дд.ММ.гггг ЧЧ.мм.сс"));
	
	Чтен.ЗаписатьИмяСвойства("Тип");
	Чтен.ЗаписатьЗначение("ДокОтгрВх");
		
	
	//Чтен.ЗаписатьИмяСвойства("НашаОрганизация");
	//
	//Чтен.ЗаписатьНачалоОбъекта();
	//
	//
	//
	//Если ЗначениеЗаполнено(Thumbprint_1.КПП) Тогда
	//	Чтен.ЗаписатьИмяСвойства("СвЮЛ");
	//	
	//	Чтен.ЗаписатьНачалоОбъекта();
	//	Чтен.ЗаписатьИмяСвойства("ИНН");
	//	Чтен.ЗаписатьЗначение(Thumbprint_1.ИНН);
	//	
	//	Чтен.ЗаписатьИмяСвойства("КПП");
	//	Чтен.ЗаписатьЗначение(Thumbprint_1.КПП);
	//	Чтен.ЗаписатьКонецОбъекта();
	//	
	//Иначе
	//	Чтен.ЗаписатьИмяСвойства("СвФЛ");
	//	
	//	Чтен.ЗаписатьНачалоОбъекта();
	//	
	//	Чтен.ЗаписатьИмяСвойства("ИНН");
	//	Чтен.ЗаписатьЗначение(Thumbprint_1.ИНН);
	//	Чтен.ЗаписатьКонецОбъекта();
	//	
	//КонецЕсли;
	//Чтен.ЗаписатьКонецОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("Навигация");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("РазмерСтраницы");
	Чтен.ЗаписатьЗначение(xmlString(РазмерСтраницы));
	
	Чтен.ЗаписатьИмяСвойства("Страница");
	Чтен.ЗаписатьЗначение(xmlString(Страница));
	Чтен.ЗаписатьКонецОбъекта();
	
	
	Чтен.ЗаписатьКонецОбъекта();
	//Чтен.ЗаписатьИмяСвойства("ПолныйСертификатЭП");
	//Чтен.ЗаписатьЗначение("Нет");
	
	Чтен.ЗаписатьКонецОбъекта();
//	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьИмяСвойства("id");
	Чтен.ЗаписатьЗначение("0");
	
	Чтен.ЗаписатьКонецОбъекта();
	
	
	Тело=Чтен.Закрыть();
	
	Возврат Тело;
КонецФункции


Функция РазбейУидТакКакХочетСб(UUID)
	
	Возврат Прав(UUID, 8) + "-" + Сред(UUID, 21, 4) + "-" + Сред(UUID, 17, 4) + "-" + Лев(UUID, 4) + "-" + Сред(UUID, 5, 12);
	
КонецФункции 

Функция ЗаписьДокумента(Документ,РеквизитыДокумента_1,ДанныеФайла) Экспорт

	
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,ЭкранированиеСимволовJSON.СимволыВнеASCII));
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("jsonrpc");
	Чтен.ЗаписатьЗначение("2.0");
	Чтен.ЗаписатьИмяСвойства("method");
	Чтен.ЗаписатьЗначение("СБИС.ЗаписатьДокумент");
	Чтен.ЗаписатьИмяСвойства("params");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Документ");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Тип");
	Чтен.ЗаписатьЗначение("ДокОтгрИсх");
	Чтен.ЗаписатьИмяСвойства("Идентификатор");
	Уникум=xmlString(Документ.УникальныйИдентификатор());
	//софт Силантьев +++
	// ʕ•ᴥ•ʔ Изменение внесено: 10.10.2019 12:59
	Уникум = СтрЗаменить(Уникум,"-",""); 	
	Уникум = РазбейУидТакКакХочетСб(Уникум);
	//ссофт Силантьев ---
	
	
	Чтен.ЗаписатьЗначение(Уникум);
	
	Чтен.ЗаписатьИмяСвойства("Редакция");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("ИдентификаторИС");
	
	Чтен.ЗаписатьЗначение("СчетФактураВыданный:"+Уникум);
	Чтен.ЗаписатьКонецОбъекта();;
	
	Чтен.ЗаписатьИмяСвойства("Вложение");
	
	
	Чтен.ЗаписатьНачалоМассива();
	
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Тип");
	Чтен.ЗаписатьЗначение("УпдСчфДоп");
	Чтен.ЗаписатьКонецОбъекта();
	
	
	
	Чтен.ЗаписатьНачалоОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("Файл");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Имя");
	Чтен.ЗаписатьЗначение(РеквизитыДокумента_1.ИмяФайлаЭД);
	
	
	
	Чтен.ЗаписатьИмяСвойства("ДвоичныеДанные");
	Чтен.ЗаписатьЗначение(base64Строка(ДанныеФайла));
	Чтен.ЗаписатьКонецОбъекта();;
	
	Чтен.ЗаписатьИмяСвойства("Идентификатор");
	
	Если ЗначениеЗаполнено(Документ.Order_ID_УПД) Тогда
		Чтен.ЗаписатьЗначение(Документ.Order_ID_УПД);
		
	Иначе
		ИдентификаторВложения = xmlString(Документ.УникальныйИдентификатор());
		ИдентификаторВложения = СтрЗаменить(ИдентификаторВложения,"-","");
		ИдентификаторВложения = РазбейУидТакКакХочетСб(ИдентификаторВложения);	
		Чтен.ЗаписатьЗначение(ИдентификаторВложения);
	КонецЕсли;
	//Чтен.ЗаписатьЗначение("9e9ac113-8e79-44f1-8273-531fa899f178");
	
	
	Чтен.ЗаписатьКонецОбъекта();;
	
	
	
	чтен.ЗаписатьКонецМассива();;
	
	Чтен.ЗаписатьИмяСвойства("НашаОрганизация");
	Чтен.ЗаписатьНачалоОбъекта();
	//
	Организация=Документ.Организация;
	Если СтрДлина(СокрЛП(Организация.ИНН))=12 Тогда
	//	
		Чтен.ЗаписатьИмяСвойства("СвФЛ");
		Чтен.ЗаписатьНачалоОбъекта();
	//	
		Чтен.ЗаписатьИмяСвойства("ИНН");
		Чтен.ЗаписатьЗначение(Организация.ИНН);
	//	
	//	
	//	
		ФИО=Организация.Наименование;
		Если Сред(ФИО,1,3)="ИП " Тогда
			ФИО=СокрЛП(Сред(Организация.Наименование,3));
		КонецЕслИ;
		Фамилия=Сред(ФИО,1,Найти(ФИО," ")-1);
	//	
		Чтен.ЗаписатьИмяСвойства("Фамилия");
		Чтен.ЗаписатьЗначение(Фамилия);
	//	
		ФИО=Сред(ФИО,Найти(ФИО," ")+1);
		Имя=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		Чтен.ЗаписатьИмяСвойства("Имя");
		Чтен.ЗаписатьЗначение(Имя);
		
		ФИО=Сред(ФИО,Найти(ФИО," ")+1);
		Отчетство=Сред(ФИО,1,Найти(ФИО," ")-1);
		Чтен.ЗаписатьИмяСвойства("Отчество");
		Чтен.ЗаписатьЗначение(Отчетство);
	//	
	//	
	//	
	//	
	//	
		Чтен.ЗаписатьКонецОбъекта();
	Иначе
	//		
	//	
	//	
		Чтен.ЗаписатьИмяСвойства("СвЮЛ");
		Чтен.ЗаписатьНачалоОбъекта();
	//	
		Чтен.ЗаписатьИмяСвойства("ИНН");
		Чтен.ЗаписатьЗначение(Организация.ИНН);
		
		Чтен.ЗаписатьИмяСвойства("КПП");
		Чтен.ЗаписатьЗначение(Организация.КПП);
	//	
		Чтен.ЗаписатьКонецОбъекта();
		КонецЕсли;	
	Чтен.ЗаписатьКонецОбъекта();
	
	Контрагент=Документ.Контрагент;
		
	
	Чтен.ЗаписатьИмяСвойства("Контрагент");
	Чтен.ЗаписатьНачалоОбъекта();
	Если ЗначениеЗАполнено(Контрагент.КПП) 
		тогда
		Чтен.ЗаписатьИмяСвойства("СвЮЛ");
		Чтен.ЗаписатьНачалоОбъекта();
		
		Чтен.ЗаписатьИмяСвойства("ИНН");
		Чтен.ЗаписатьЗначение(Контрагент.ИНН);
		
		Чтен.ЗаписатьИмяСвойства("КПП");
		Чтен.ЗаписатьЗначение(Контрагент.КПП);
		
		
		Если ЗначениеЗаполнено(Контрагент.КодФилиала) Тогда
			
			Чтен.ЗаписатьИмяСвойства("КодФилиала");
			Чтен.ЗаписатьЗначение(Контрагент.КодФилиала);
			
		Конецесли;
		
		Чтен.ЗаписатьИмяСвойства("Название");
		Чтен.ЗаписатьЗначение(Контрагент.НаименованиеПолное);
		
		Чтен.ЗаписатьКонецОбъекта();
		
	Иначе
		Чтен.ЗаписатьИмяСвойства("СвФЛ");
		Чтен.ЗаписатьНачалоОбъекта();
		
		Чтен.ЗаписатьИмяСвойства("ИНН");
		Чтен.ЗаписатьЗначение(Контрагент.ИНН);
		
		Если ЗначениеЗаполнено(Контрагент.КодФилиала) Тогда
			
			Чтен.ЗаписатьИмяСвойства("КодФилиала");
			Чтен.ЗаписатьЗначение(Контрагент.КодФилиала);
			
		Конецесли;
		
		
		ФИО=Контрагент.НаименованиеПолное;
		Если Сред(Контрагент.НаименованиеПолное,1,3)="ИП " Тогда
			ФИО=СокрЛП(Сред(Контрагент.НаименованиеПолное,3));
		КонецЕслИ;
		Фамилия=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		Чтен.ЗаписатьИмяСвойства("Фамилия");
		Чтен.ЗаписатьЗначение(Фамилия);
		
		ФИО=Сред(ФИО,Найти(ФИО," ")+1);
		Имя=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		Чтен.ЗаписатьИмяСвойства("Имя");
		Чтен.ЗаписатьЗначение(Имя);
		
		ФИО=Сред(ФИО,Найти(ФИО," ")+1);
		Отчетство=Сред(ФИО,1,Найти(ФИО," ")-1);
		Чтен.ЗаписатьИмяСвойства("Отчество");
		Чтен.ЗаписатьЗначение(Отчетство);
		
		
		
		
		
		Чтен.ЗаписатьКонецОбъекта();
		
	КонецЕсли;
	
	
	Чтен.ЗаписатьКонецОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("Регламент");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Название");
	Чтен.ЗаписатьЗначение("Реализация");
	
	Чтен.ЗаписатьКонецОбъекта();
	
	
	Чтен.ЗаписатьКонецОбъекта();
	
	
	
	Чтен.ЗаписатьКонецОбъекта();
	
	
	
	Чтен.ЗаписатьИмяСвойства("id");
	Чтен.ЗаписатьЗначение(0);
	Чтен.ЗаписатьКонецОбъекта();;
	
	ТТТ=Чтен.Закрыть();
	ТТТ=СтрЗаменить(ТТТ,Символы.ПС,"");
	ТТТ=СтрЗаменить(ТТТ,Символы.ВК,"");
	
	Возврат ТТТ;
	//	Возврат Ложь;
	//HTTPЗапрос=Новый HTTPЗапрос("service/?srv=1");
	
	//HTTPЗапрос.Заголовки.Вставить("X-SBISSessionID",	ТТТ_Ответ.result);
	//HTTPЗапрос.Заголовки.Вставить("Content-Type",	"application/json; charset=utf-8");
	//HTTPЗапрос.Заголовки.Вставить("User-Agent",	"1C8.3.10.2772_VO2.0.35.1");
	//HTTPЗапрос.Заголовки.Вставить("X-API-Version",	"2.3.1");
	
	
	//HTTPЗапрос.УстановитьТелоИзСтроки(ТТТ,"UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
	///Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(	          HTTPЗапрос);
	//ТТТ_Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());	
	
		
Конецфункции

Функция ЧтениеМаркера(Текст)       Экспорт
		ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Текст);
			Попытка
				NNN=ПрочитатьJSON(ЧтениеJSON);
				
				Возврат NNN.result
				
			Исключение
				Возврат ""
			КонецПопытки;
	

Конецфункции

Функция JSONПоСертификату(Сертификат,Thumbprint_1) Экспорт
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,ЭкранированиеСимволовJSON.СимволыВнеASCII));
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("jsonrpc");
	Чтен.ЗаписатьЗначение("2.0");
	Чтен.ЗаписатьИмяСвойства("method");
	Чтен.ЗаписатьЗначение("СБИС.Аутентифицировать");
	Чтен.ЗаписатьИмяСвойства("params");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Параметр");
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("Логин");
	Чтен.ЗаписатьЗначение(Thumbprint_1.ЛогинСБ);
	
	Чтен.ЗаписатьИмяСвойства("Пароль");
	Чтен.ЗаписатьЗначение(Thumbprint_1.ПарольСБ);
	
	//Чтен.ЗаписатьИмяСвойства("НомерАккаунта");
	//Чтен.ЗаписатьЗначение("5300534");
	
	Чтен.ЗаписатьКонецОбъекта();
	
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьИмяСвойства("id");
	Чтен.ЗаписатьЗначение(0);
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();
	
	Возврат Тело;
	
	Джсон=Новый ЗаписьJson;
				Джсон.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,ЭкранированиеСимволовJSON.СимволыВнеASCII));
				Джсон.ЗаписатьНачалоОбъекта();
				
				Джсон.ЗаписатьИмяСвойства("jsonrpc");
				Джсон.ЗаписатьЗначение("2.0");
				
				Джсон.ЗаписатьИмяСвойства("method");
				Джсон.ЗаписатьЗначение("СБИС.АутентифицироватьПоСертификату");
				
				
				Джсон.ЗаписатьИмяСвойства("params");
				
				Джсон.ЗаписатьНачалоОбъекта();
				
				Джсон.ЗаписатьИмяСвойства("Сертификат");
				Джсон.ЗаписатьНачалоОбъекта();
				Джсон.ЗаписатьИмяСвойства("ДвоичныеДанные");
				Джсон.ЗаписатьЗначение(Сертификат);
				
				Джсон.ЗаписатьКонецОбъекта();
				Джсон.ЗаписатьКонецОбъекта();
				
				Джсон.ЗаписатьИмяСвойства("id");
				Джсон.ЗаписатьЗначение("0");
				
				Джсон.ЗаписатьКонецОбъекта();;
				Тело=Джсон.Закрыть();
				
				Возврат тело
Конецфункции


Функция ПодставитьПараметрыВСтроку(Знач ШаблонСтроки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ЕстьПараметрыСПроцентом = Найти(Параметр1, "%")
		Или Найти(Параметр2, "%")
		Или Найти(Параметр3, "%")
		Или Найти(Параметр4, "%")
		Или Найти(Параметр5, "%")
		Или Найти(Параметр6, "%")
		Или Найти(Параметр7, "%")
		Или Найти(Параметр8, "%")
		Или Найти(Параметр9, "%");
		
	Если ЕстьПараметрыСПроцентом Тогда
		Возврат ПодставитьПараметрыСПроцентом(ШаблонСтроки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	КонецЕсли;
	
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%1", Параметр1);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%2", Параметр2);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%3", Параметр3);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%4", Параметр4);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%5", Параметр5);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%6", Параметр6);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%7", Параметр7);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%8", Параметр8);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%9", Параметр9);
	Возврат ШаблонСтроки;
	
КонецФункции

Функция ПодставитьПараметрыСПроцентом(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = Неопределено;
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр = Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр = Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр = Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр = Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр = Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр = Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр = Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр = Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр = Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = Неопределено Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

Функция СтрРазделить_Х(Строка_1,Разделитель,пУСТЫЕ=Истина)        Экспорт
	Массив=Новый Массив;
	
	Строка_р=Строка_1;
	Пока Найти(Строка_р,Разделитель)>0 Цикл
		СтрокаДЛяДобавления=Сред(Строка_р,1,Найти(Строка_Р,Разделитель)-1);
		Если пУСТЫЕ=Истина ИЛИ ЗначениеЗаполнено(СтрокаДЛяДобавления) тогда
			Массив.Добавить(СтрокаДЛяДобавления);
		КонецЕсли;
		
		Строка_Р=Сред(Строка_Р,Найти(Строка_Р,Разделитель)+СтрДлина(Разделитель));
	Конеццикла;
	Если пустые=Истина ИЛИ ЗначениеЗаполнено(Строка_Р) тогда
		Массив.Добавить(Строка_Р);
	Конецесли;
	
	
Конецфункции





Функция СтрШаблон_Х(Знач Шаблон,_1,_2="",_3="",_4="",_5="",_6="",_7="",_8="",_9="",_10="") Экспорт
	
	Для сч=1 По 10 Цикл
		Имя="_"+xmlString(сч);
		Если сч=1 Тогда
			Значен=_1;
		ИначеЕсли сч=2 Тогда
			Значен=_2;
		ИначеЕсли сч=33 Тогда
			Значен=_3;
		ИначеЕсли сч=4 Тогда
			Значен=_4;
		ИначеЕсли сч=5 Тогда
			Значен=_5;
		ИначеЕсли сч=6 Тогда
			Значен=_6;
		ИначеЕсли сч=7 Тогда
			Значен=_7;
		ИначеЕсли сч=8 Тогда
			Значен=_8;
		ИначеЕсли сч=9 Тогда
			Значен=_9;
		ИначеЕсли сч=10 Тогда
			Значен=_10;
		Конецесли;
		
		Если ЗначениеЗаполнено(Значен) Тогда
			Шаблон=СтрЗаменить(Шаблон,"%"+xmlString(сч),xmlString(Значен));
		Конецесли;
	Конеццикла;
	
	
	
Конецфункции


Функция РеквизитыЭлектронногоДокумента(Знач ПутьКДокументу, ИнформацияОбОшибке = Неопределено) Экспорт
	
	Если ЭтоАдресВременногоХранилища(ПутьКДокументу) Тогда 
		ПутьКДокументу = ПолучитьИзВременногоХранилища(ПутьКДокументу);
	КонецЕсли;
	
	Попытка
		
		//Если ТипЗнч(ПутьКДокументу) = Тип("ДвоичныеДанные") Тогда
		//	Поток = ПутьКДокументу.ОткрытьПотокДляЧтения();
		//Иначе
		//	Поток = ФайловыеПотоки.ОткрытьДляЧтения(ПутьКДокументу);
		//КонецЕсли;
		//
		//ЧтениеДанных = Новый ЧтениеДанных(Поток, "windows-1251");
		//СтрокаКодировка = ЧтениеДанных.ПрочитатьСтроку();
		//Поток.Закрыть();
		//ЧтениеДанных.Закрыть();
		//
		//Если ТипЗнч(ПутьКДокументу) = Тип("ДвоичныеДанные") Тогда
		//	Поток = ПутьКДокументу.ОткрытьПотокДляЧтения();
		//Иначе
		//	Поток = ФайловыеПотоки.ОткрытьДляЧтения(ПутьКДокументу);
		//КонецЕсли;
		//
		//Если Найти(НРег(СтрокаКодировка), "encoding=""utf-8""") Тогда
		//	ЧтениеДанных = Новый ЧтениеДанных(Поток, "utf-8");
		//	ТекстФайла = ЧтениеДанных.ПрочитатьСимволы();
		//Иначе
		//	ЧтениеДанных = Новый ЧтениеДанных(Поток, "windows-1251");
		//	ТекстФайла = ЧтениеДанных.ПрочитатьСимволы();
		//КонецЕсли; 
		//Поток.Закрыть();
		//ЧтениеДанных.Закрыть();
		
	Если ТипЗнч(ПутьКДокументу) = Тип("ДвоичныеДанные") Тогда
			
			СтрокаКодировка=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(
			ПутьКДокументу);
			//Поток = ПутьКДокументу.ОткрытьПотокДляЧтения();
		Иначе
			ПутьКДокументу_1=Новый ДвоичныеДанные(ПутьКДокументу);
			СтрокаКодировка=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(
			ПутьКДокументу_1);
			
			
			//Поток = ФайловыеПотоки.ОткрытьДляЧтения(ПутьКДокументу);
		КонецЕсли;

		
		//Если ТипЗнч(ПутьКДокументу) = Тип("ДвоичныеДанные") Тогда
		//	Поток = ПутьКДокументу.ОткрытьПотокДляЧтения();
		//Иначе
		//	Поток = ФайловыеПотоки.ОткрытьДляЧтения(ПутьКДокументу);
		//КонецЕсли;
		//
		//ЧтениеДанных = Новый ЧтениеДанных(Поток, "windows-1251");
		//СтрокаКодировка = ЧтениеДанных.ПрочитатьСтроку();
		//Поток.Закрыть();
		//ЧтениеДанных.Закрыть();
		//
		//Если ТипЗнч(ПутьКДокументу) = Тип("ДвоичныеДанные") Тогда
		//	Поток = ПутьКДокументу.ОткрытьПотокДляЧтения();
		//Иначе
		//	Поток = ФайловыеПотоки.ОткрытьДляЧтения(ПутьКДокументу);
		//КонецЕсли;
		
		//Если Найти(НРег(СтрокаКодировка), "encoding=""utf-8""") Тогда
		//	ЧтениеДанных = Новый ЧтениеДанных(Поток, "utf-8");
		//	ТекстФайла = ЧтениеДанных.ПрочитатьСимволы();
		//Иначе
		//	ЧтениеДанных = Новый ЧтениеДанных(Поток, "windows-1251");
		//	ТекстФайла = ЧтениеДанных.ПрочитатьСимволы();
		//КонецЕсли; 
		
		
		//Поток.Закрыть();
		//ЧтениеДанных.Закрыть();
		
		Если Найти(НРег(СтрокаКодировка), "encoding=""utf-8""") Тогда
			КодировкаТекста_1="utf-8";
		Иначе
////			ЧтениеДанных = Новый ЧтениеДанных(Поток, "windows-1251");
	//		ТекстФайла = ЧтениеДанных.ПрочитатьСимволы();
			КодировкаТекста_1="windows-1251";
		КонецЕсли; 
		
		
		
		
		
		Если ТипЗнч(ПутьКДокументу) = Тип("ДвоичныеДанные") Тогда
			
			ТекстФайла=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(
			ПутьКДокументу,КодировкаТекста_1);
			//Поток = ПутьКДокументу.ОткрытьПотокДляЧтения();
		Иначе
			ПутьКДокументу_1=Новый ДвоичныеДанные(ПутьКДокументу);
			ТекстФайла=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(
			ПутьКДокументу_1,КодировкаТекста_1);
			
			
			//Поток = ФайловыеПотоки.ОткрытьДляЧтения(ПутьКДокументу);
		КонецЕсли;
		
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстФайла);
			
		ДанныеФайла = Новый Структура;
		
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Файл" Тогда
				Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
					Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
						Если ЧтениеXML.Имя = "ИдФайл" Тогда
							ДанныеФайла.Вставить("ФорматЭлектронногоДокумента", "ФНС");
							ДанныеФайла.Вставить("ИдФайл", ЧтениеXML.Значение);
						КонецЕсли; 
						Если ЧтениеXML.Имя = "ВерсФорм" Тогда
							ДанныеФайла.Вставить("ВерсФорм", ЧтениеXML.Значение);
						КонецЕсли; 
					КонецЦикла;
				КонецЕсли; 
				Прервать;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Card" Тогда 
				ДанныеФайла.Вставить("ФорматЭлектронногоДокумента", "КарточкаТХЦ");
				Прервать;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "ЭДПФР" Тогда 
				ДанныеФайла.Вставить("ФорматЭлектронногоДокумента", "ПФР");
				ЕстьОДВ1 = Ложь;
				Пока ЧтениеXML.Прочитать() Цикл
					Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
						Продолжить;
					КонецЕсли; 
					Если ЧтениеXML.Имя = "СЗВ-М" Тогда
						ДанныеФайла.Вставить("ФорматПФР", "СЗВ-М");
						Прервать;
					КонецЕсли; 
					Если ЧтениеXML.Имя = "СЗВ-СТАЖ" Тогда
						ДанныеФайла.Вставить("ФорматПФР", "СЗВ-СТАЖ");
						Прервать;
					КонецЕсли; 
					Если ЧтениеXML.Имя = "СЗВ-КОРР" Тогда
						ДанныеФайла.Вставить("ФорматПФР", "СЗВ-КОРР");
						Прервать;
					КонецЕсли; 
					Если ЧтениеXML.Имя = "СЗВ-ИСХ" Тогда
						ДанныеФайла.Вставить("ФорматПФР", "СЗВ-ИСХ");
						Прервать;
					КонецЕсли; 
					Если ЧтениеXML.Имя = "ОДВ-1" Тогда
						ЕстьОДВ1 = Истина;
					КонецЕсли; 
				КонецЦикла;
				Если НЕ ДанныеФайла.Свойство("ФорматПФР") и ЕстьОДВ1 Тогда
					ДанныеФайла.Вставить("ФорматПФР", "ОДВ-1");
				КонецЕсли; 
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		ЧтениеXML.Закрыть();
		
	Исключение
		РеквизитыДокумента=Новый Структура;
		РеквизитыДокумента.Вставить("НаименованиеПервичногоДокумента","");
		РеквизитыДокумента.Вставить("ТекстФайла",ТекстФайла);
		РеквизитыДокумента.Вставить("Загружать",Ложь);
		
		Возврат РеквизитыДокумента;
	КонецПопытки;
	
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("НаименованиеПервичногоДокумента","");
	
	
	Загружать=Ложь;
	// Чтение форматов ФНС.
	Если ДанныеФайла.Свойство("ИдФайл") Тогда
		
		//Если Найти(ДанныеФайла.ИдФайл, "ON_SCHFDOPPR") > 0 Тогда
		//
		//	ЗаполнитьРеквизитыУПД(РеквизитыДокумента, ТекстФайла);
		//
		Если Найти(ДанныеФайла.ИдФайл, "ON_KORSCHFDOPPR") > 0 Тогда
		//	
			ЗаполнитьРеквизитыУКД(РеквизитыДокумента, ТекстФайла);
			Загружать=Истина;
		//
		//ИначеЕсли Найти(ДанныеФайла.ИдФайл, "ON_SFAKT") > 0 Тогда
		//	
		//	ЗаполнитьРеквизитыСчетаФактуры(РеквизитыДокумента, ТекстФайла, ДанныеФайла.ВерсФорм);
		//	
		//ИначеЕсли Найти(ДанныеФайла.ИдФайл, "ON_KORSFAKT") > 0 Тогда 
		//	
		//	ЗаполнитьРеквизитыКорСчетаФактуры(РеквизитыДокумента, ТекстФайла);
		//	
		//ИначеЕсли Найти(ДанныеФайла.ИдФайл, "DP_TOVTORGPR") > 0 Тогда 
		//	
		//	ЗаполнитьРеквизитыПередачиТоваров(РеквизитыДокумента, ТекстФайла);
		//	
		//ИначеЕсли Найти(ДанныеФайла.ИдФайл, "DP_REZRUISP") > 0 Тогда 
		//	
		//	ЗаполнитьРеквизитыПередачиРабот(РеквизитыДокумента, ТекстФайла);
		//	
		//ИначеЕсли Найти(ДанныеФайла.ИдФайл, "OTORG12") > 0 Тогда 
		//	
		//	ЗаполнитьРеквизитыТорг12(РеквизитыДокумента, ТекстФайла);
		//	
		//ИначеЕсли Найти(ДанныеФайла.ИдФайл, "IAKTPRM") > 0 Тогда 
		//	
		//	ЗаполнитьРеквизитыАкт501(РеквизитыДокумента, ТекстФайла);
		//	
		//ИначеЕсли Найти(ДанныеФайла.ИдФайл, "DP_ZAKTPRM") > 0 Тогда
		//	
		//	ЗаполнитьРеквизитыТитулаЗаказчикаАкт501(РеквизитыДокумента, ТекстФайла);
		//	
		//ИначеЕсли Найти(ДанныеФайла.ИдФайл, "DP_PTORG12") > 0 Тогда
		//	
		//	ЗаполнитьРеквизитыТитулаПокупателяТорг12(РеквизитыДокумента, ТекстФайла);
		//	
		//ИначеЕсли Найти(ДанныеФайла.ИдФайл, "ON_SCHFDOPPOK") > 0 Тогда
		//	
		//	ЗаполнитьРеквизитыТитулаПокупателяУПД(РеквизитыДокумента, ТекстФайла);
		//	
		//Если Найти(ДанныеФайла.ИдФайл, "ON_KORSCHFDOPPOK") > 0 Тогда
		//	
		//	ЗаполнитьРеквизитыТитулаПокупателяУКД(РеквизитыДокумента, ТекстФайла);
		//	
		//ИначеЕсли Найти(ДанныеФайла.ИдФайл, "DP_TOVTORGPOK") > 0 Тогда
		//	
		//	 ЗаполнитьРеквизитыТитулаПокупателяПередачиТоваров(РеквизитыДокумента, ТекстФайла);
		//	
		//ИначеЕсли Найти(ДанныеФайла.ИдФайл, "DP_REZRUZAK") > 0 Тогда
		//
		//	ЗаполнитьРеквизитыТитулаЗаказчикаПередачиРабот(РеквизитыДокумента, ТекстФайла);
			
		ИначеЕсли Найти(ДанныеФайла.ИдФайл, "ON_NSCHFDOPPR") > 0 Тогда
		
			ЗаполнитьРеквизитыУПД2019(РеквизитыДокумента, ТекстФайла);
			
			Загружать=Истина;
	//	ИначеЕсли Найти(ДанныеФайла.ИдФайл, "ON_NSCHFDOPPOK") > 0 Тогда
	//	
	//		ЗаполнитьРеквизитыТитулаПокупателяУПД2019(РеквизитыДокумента, ТекстФайла);
	//
	//	ИначеЕсли Лев(ДанныеФайла.ИдФайл, 7) = "1115102" Тогда // Книга покупок
	//		
	//		ЗаполнитьРеквизитыКнигиПокупок(РеквизитыДокумента, ТекстФайла);
	//		
	//	ИначеЕсли Лев(ДанныеФайла.ИдФайл, 7) = "1115103" Тогда // Книга продаж
	//		
	//		ЗаполнитьРеквизитыКнигиПродаж(РеквизитыДокумента, ТекстФайла);
	//		
	//	ИначеЕсли Лев(ДанныеФайла.ИдФайл, 7) = "1115104" Тогда // Журнал счетов-фактур
	//		
	//		ЗаполнитьРеквизитыЖурналаСчетовФактур(РеквизитыДокумента, ТекстФайла);
	//		
	//	ИначеЕсли Лев(ДанныеФайла.ИдФайл, 7) = "1115105" Тогда // Дополнительный лист книги покупок
	//		
	//		ЗаполнитьРеквизитыДополнительногоЛистаКнигиПокупок(РеквизитыДокумента, ТекстФайла);
	//		
	//	ИначеЕсли Лев(ДанныеФайла.ИдФайл, 7) = "1115106" Тогда // Дополнительный лист книги продаж

	//		ЗаполнитьРеквизитыДополнительногоЛистаКнигиПродаж(РеквизитыДокумента, ТекстФайла);
	//		
	//	ИначеЕсли Найти(ДанныеФайла.ИдФайл, "DP_PDPOL") > 0 Тогда
	//		
	//		ЗаполнитьРеквизитыТранзакции_ПДП(РеквизитыДокумента, ТекстФайла);
	//		
	//	ИначеЕсли Найти(ДанныеФайла.ИдФайл, "DP_IZVPOL") > 0 Тогда
	//		
	//		ЗаполнитьРеквизитыТранзакции_ИОП(РеквизитыДокумента, ТекстФайла);
	//		
	//	ИначеЕсли Найти(ДанныеФайла.ИдФайл, "DP_UVUTOCH") > 0 Тогда
	//		
	//		ЗаполнитьРеквизитыТранзакции_УОУ(РеквизитыДокумента, ТекстФайла);
	//		
	//	ИначеЕсли Найти(ДанныеФайла.ИдФайл, "DP_PDOTPR") > 0 Тогда
	//		
	//		ЗаполнитьРеквизитыТранзакции_ПДО(РеквизитыДокумента, ТекстФайла);
	//		
	//	ИначеЕсли Найти(ДанныеФайла.ИдФайл, "DP_PRANNUL") > 0 Тогда
	//		
	//		ЗаполнитьРеквизитыТранзакции_ПОА(РеквизитыДокумента, ТекстФайла);
	//		
	//	ИначеЕсли Найти(ДанныеФайла.ИдФайл, "KV_TRC") > 0 Тогда
	//		
	//		ЗаполнитьРеквизитыКвитанцииПриемаМОТП(РеквизитыДокумента, ТекстФайла);
	//		
	//	ИначеЕсли Найти(ДанныеФайла.ИдФайл, "UO_TRC") > 0 Тогда
	//		
	//		ЗаполнитьРеквизитыКвитанцииОтказаМОТП(РеквизитыДокумента, ТекстФайла);
	//		
	//	ИначеЕсли Найти(ДанныеФайла.ИдФайл, "NO_RASCHSV") > 0 Тогда
	//		
	//		ЗаполнитьРеквизитыРасчетаПоСтраховымВзносам(РеквизитыДокумента, ТекстФайла);
	//		
	//	ИначеЕсли Найти(ДанныеФайла.ИдФайл, "NO_NDFL6") > 0 Тогда
	//		
	//		ЗаполнитьРеквизиты6НДФЛ(РеквизитыДокумента, ТекстФайла);
	//		
	//	ИначеЕсли Найти(ДанныеФайла.ИдФайл, "NO_NDFL2") > 0 Тогда
	//		
	//		ЗаполнитьРеквизиты2НДФЛ(РеквизитыДокумента, ТекстФайла);

		КонецЕсли;
		
	ИначеЕсли ДанныеФайла.Свойство("ФорматЭлектронногоДокумента") И ДанныеФайла.ФорматЭлектронногоДокумента = "КарточкаТХЦ" Тогда

		ЗаполнитьРеквизитыКарточкиДокументаТХЦ(РеквизитыДокумента, ТекстФайла);
		
	ИначеЕсли ДанныеФайла.Свойство("ФорматЭлектронногоДокумента") И ДанныеФайла.ФорматЭлектронногоДокумента = "ПФР" Тогда
		
		Если ДанныеФайла.ФорматПФР = "СЗВ-М" Тогда
			
			ЗаполнитьРеквизитыФорматаСведенийОЗастрахованныхЛицах(РеквизитыДокумента, ТекстФайла);
			
		ИначеЕсли ДанныеФайла.ФорматПФР = "СЗВ-СТАЖ" Тогда
			
			ЗаполнитьРеквизитыФорматаСведенийОСтраховомСтаже(РеквизитыДокумента, ТекстФайла);
			
		ИначеЕсли ДанныеФайла.ФорматПФР = "СЗВ-КОРР" Тогда
			
			
		ИначеЕсли ДанныеФайла.ФорматПФР = "СЗВ-ИСХ" Тогда
			
			
		КонецЕсли; 
		
	КонецЕсли; 
	РеквизитыДокумента.Вставить("ТекстФайла",ТекстФайла);
	РеквизитыДокумента.Вставить("Загружать",Загружать);

	Возврат РеквизитыДокумента;
	
КонецФункции


// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыУПД(РеквизитыДокумента, ТекстФайла) 
	
	РеквизитыДокумента = СтруктураРеквизитовДокумента(); 
	
	ПространствоИмен = "http://api-invoice.taxcom.ru/ON_SCHFDOPPR_05_01";
	ФайлXDTO = ПрочитатьXMLФайл(ТекстФайла, ПространствоИмен, "Файл");
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД", 
		ФайлXDTO.ИдФайл, ФайлXDTO.ВерсФорм, ФайлXDTO.ВерсПрог, ФайлXDTO.Документ.КНД);
	РеквизитыДокумента.ФорматДокумента = ФорматДокумента;
	
	РеквизитыДокумента.Вставить("Функция", ФайлXDTO.Документ.Функция);
	Если ФайлXDTO.Документ.Свойства().Получить("ПоФактХЖ")<>Неопределено тогда
		РеквизитыДокумента.Вставить("НаименованиеДокумента", ФайлXDTO.Документ.ПоФактХЖ);
	КонецЕсли;
	Если ФайлXDTO.Документ.Свойства().Получить("НаимДокОпр")<>Неопределено тогда
		РеквизитыДокумента.Вставить("НаименованиеПервичногоДокумента", ФайлXDTO.Документ.НаимДокОпр);
	КонецЕслИ;
	РеквизитыДокумента.Вставить("ДатаИнформацииПродавца", ФайлXDTO.Документ.ДатаИнфПр);
	РеквизитыДокумента.Вставить("ВремяИнформацииПродавца", ФайлXDTO.Документ.ВремИнфПр);
	
	РеквизитыДокумента.Номер = ФайлXDTO.Документ.СвСчФакт.НомерСчФ;
	РеквизитыДокумента.Дата = ДатаИзСтрокиЭД(ФайлXDTO.Документ.СвСчФакт.ДатаСчФ);
	РеквизитыДокумента.КодВалюты = ФайлXDTO.Документ.СвСчФакт.КодОКВ;
	
	ЗаполнитьСведенияОбУчастникахЭДО(ФайлXDTO.СвУчДокОбор, РеквизитыДокумента);
	ЗаполнитьДополнительныеСведенияОбУчастниках(ФайлXDTO.Документ.СвСчФакт.ДопСвФХЖ1, РеквизитыДокумента);
	ЗаполнитьИнформационноеПолеФактаХозяйственнойЖизни(ФайлXDTO.Документ.СвСчФакт.ИнфПолФХЖ1, РеквизитыДокумента);
	
	Если ФайлXDTO.Документ.СвСчФакт.ИспрСчФ <> Неопределено Тогда
		Исправление = Новый Структура;
		Исправление.Вставить("Номер", ФайлXDTO.Документ.СвСчФакт.ИспрСчФ.НомИспрСчФ);
		Исправление.Вставить("Дата", ДатаИзСтрокиЭД(ФайлXDTO.Документ.СвСчФакт.ИспрСчФ.ДатаИспрСчФ));
		РеквизитыДокумента.Вставить("Исправление", Исправление);
	КонецЕсли;
	РеквизитыДокумента.Вставить("СоставительДокумента", ФайлXDTO.Документ.НаимЭконСубСост);	
	РеквизитыДокумента.Вставить("Продавец", УчастникУПД(ФайлXDTO.Документ.СвСчФакт.СвПрод));
	
	Если ФайлXDTO.Документ.СвСчФакт.ГрузОт <> Неопределено Тогда
		Если ФайлXDTO.Документ.СвСчФакт.ГрузОт.ГрузОтпр <> Неопределено Тогда
			РеквизитыДокумента.Вставить("Грузоотправитель", УчастникУПД(ФайлXDTO.Документ.СвСчФакт.ГрузОт.ГрузОтпр));
		ИначеЕсли ФайлXDTO.Документ.СвСчФакт.ГрузОт.ОнЖе <> Неопределено Тогда
			РеквизитыДокумента.Вставить("Грузоотправитель", НСтр("ru ='он же'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ФайлXDTO.Документ.СвСчФакт.ГрузПолуч <> Неопределено Тогда
		РеквизитыДокумента.Вставить("Грузополучатель", УчастникУПД(ФайлXDTO.Документ.СвСчФакт.ГрузПолуч));
	КонецЕсли;
	
	Если ФайлXDTO.Документ.СвСчФакт.СвПРД <> Неопределено Тогда
		ПлатежноРасчетныеДокументы = Новый Массив;
		Для Каждого Сведения Из ФайлXDTO.Документ.СвСчФакт.СвПРД Цикл
			СтруктураПРД = Новый Структура;
			СтруктураПРД.Вставить("Номер", Сведения.НомерПРД);
			СтруктураПРД.Вставить("Дата", ДатаИзСтрокиЭД(Сведения.ДатаПРД));
			ПлатежноРасчетныеДокументы.Добавить(СтруктураПРД);
		КонецЦикла;
		РеквизитыДокумента.Вставить("ПлатежноРасчетныеДокументы", ПлатежноРасчетныеДокументы);
	КонецЕсли;
	
	РеквизитыДокумента.Вставить("Покупатель", УчастникУПД(ФайлXDTO.Документ.СвСчФакт.СвПокуп));
	
	Если ФайлXDTO.Документ.ТаблСчФакт <> Неопределено Тогда
		
		СведенияОТоварах = ФайлXDTO.Документ.ТаблСчФакт;
		РеквизитыДокумента.СуммаДокумента = СведенияОТоварах.ВсегоОпл.СтТовУчНалВсего;
		РеквизитыДокумента.СуммаНДСДокумента = СуммаНДСУПД(СведенияОТоварах.ВсегоОпл.СумНалВсего);
		РеквизитыДокумента.Вставить("КоличествоВсего", СведенияОТоварах.ВсегоОпл.НеттоВс);
		РеквизитыДокумента.Вставить("СуммаБезНДСДокумента", СведенияОТоварах.ВсегоОпл.СтТовБезНДСВсего);
		
		СведенияОТоварахМассив = Новый Массив;
		Для Каждого СтрокаТовара Из СведенияОТоварах.СведТов Цикл
			СтрокаТовараУПД = СтрокаТовараУПД(СтрокаТовара);
			ТекстоваяИнформация = Неопределено;
			Если СтрокаТовараУПД.Свойство("ТекстоваяИнформация", ТекстоваяИнформация) Тогда
				КодыМаркировки = Новый Массив;
				Для Каждого СтрокаТекстовойИнформации Из ТекстоваяИнформация Цикл
					Если СтрокаТекстовойИнформации.Идентификатор = "sscc" 
						ИЛИ СтрокаТекстовойИнформации.Идентификатор = "cis" Тогда
						МассивСтрок = СтрРазделить_Х(СтрокаТекстовойИнформации.Значение, " ", Ложь);
						Для Каждого ТекущаяСтрока Из МассивСтрок Цикл
							СтрокаКодовМаркировки = Новый Структура;
							СтрокаКодовМаркировки.Вставить("ВидУпаковки", СтрокаТекстовойИнформации.Идентификатор);
							СтрокаКодовМаркировки.Вставить("СерийныйНомер", СокрЛП(ТекущаяСтрока));
							КодыМаркировки.Добавить(СтрокаКодовМаркировки);
						КонецЦикла;
					КонецЕсли; 
				КонецЦикла; 
				Если КодыМаркировки.Количество() > 0 Тогда
					СтрокаТовараУПД.Вставить("КодыМаркировки", КодыМаркировки);
					РеквизитыДокумента.Вставить("УказаныКодыМаркировки");
				КонецЕсли; 
			КонецЕсли; 
			СведенияОТоварахМассив.Добавить(СтрокаТовараУПД);
		КонецЦикла;
		РеквизитыДокумента.Вставить("СведенияОТоварахУслугах", СведенияОТоварахМассив);
		
	КонецЕсли; 
	
	Если ФайлXDTO.Документ.СвПродПер <> Неопределено Тогда
		
		ЗаполнитьСвойство(РеквизитыДокумента, "СодержаниеОперации", ФайлXDTO.Документ.СвПродПер.СвПер, "СодОпер");
		ЗаполнитьСвойство(РеквизитыДокумента, "ВидОперации", ФайлXDTO.Документ.СвПродПер.СвПер, "ВидОпер");
		
		Если ФайлXDTO.Документ.СвПродПер.СвПер.ДатаПер <> Неопределено Тогда
			ДатаОтгрузкиТоваров = ДатаИзСтрокиЭД(ФайлXDTO.Документ.СвПродПер.СвПер.ДатаПер);
			РеквизитыДокумента.Вставить("ДатаПередачи", ДатаОтгрузкиТоваров);
		КонецЕсли;
		
		ОснованияОтгрузки = Новый Массив;
		Для Каждого Основание Из ФайлXDTO.Документ.СвПродПер.СвПер.ОснПер Цикл
			Структура = СтруктураОснования();
			Структура.Вставить("Наименование", Основание.НаимОсн);
			ЗаполнитьСвойство(Структура, "Номер", Основание, "НомОсн");
			ЗаполнитьСвойство(Структура, "ДополнительныеСведения", Основание, "ДопСвОсн");
			Если Основание.ДатаОсн <> Неопределено Тогда
				Структура.Вставить("Дата", ДатаИзСтрокиЭД(Основание.ДатаОсн));
			КонецЕсли; 
			ОснованияОтгрузки.Добавить(Структура);
		КонецЦикла;
		РеквизитыДокумента.Вставить("Основания", ОснованияОтгрузки);
		
		Если ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер <> Неопределено Тогда
			СведенияОЛицеПередавшемТовар = Новый Структура("Вид, Сведения");
			
			Если ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод <> Неопределено Тогда
				
				РаботникОрганизацииПродавца = Новый Структура;
				РаботникОрганизацииПродавца.Вставить("Должность", ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.Должность);
				РаботникОрганизацииПродавца.Вставить("ИныеСведения", ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.ИныеСвед);
				РаботникОрганизацииПродавца.Вставить("ОснованиеПолномочий", ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.ОснПолн);
				ЗаполнитьФИО(РаботникОрганизацииПродавца, ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.ФИО);
				СведенияОЛицеПередавшемТовар.Вид = "РаботникОрганизацииПродавца";
				СведенияОЛицеПередавшемТовар.Сведения = РаботникОрганизацииПродавца;
				
			ИначеЕсли ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо <> Неопределено Тогда
				
				Если ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер <> Неопределено Тогда
					
					ИноеЛицо = Новый Структура;
					ИноеЛицо.Вставить("Должность", ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.Должность);
					ИноеЛицо.Вставить("ИныеСведения", ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.ИныеСвед);
					ИноеЛицо.Вставить("НаименованиеОрганизации", ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.НаимОргПер);
					ИноеЛицо.Вставить("ДоверенностьНаОтгрузку", ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.ОснДоверОргПер);
					ИноеЛицо.Вставить("ОснованиеПолномочий", ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.ОснПолнПредПер);
					ЗаполнитьФИО(ИноеЛицо, ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.ФИО);
					СведенияОЛицеПередавшемТовар.Вид = "ИноеЛицоПредставительОрганизации";
					СведенияОЛицеПередавшемТовар.Сведения =  ИноеЛицо;
					
				ИначеЕсли ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер <> Неопределено Тогда
					
					ИноеЛицо = Новый Структура;
					Если ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер.Свойства().Получить("ИныеСвед")<>Неопределено Тогда
						ИноеЛицо.Вставить("ИныеСведения", ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер.ИныеСвед);
					Иначе
						ИноеЛицо.Вставить("ИныеСведения", "");
						
					КонецЕсли;
					ИноеЛицо.Вставить("ДоверенностьНаОтгрузку", ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер.ОснДоверФЛ);
					ЗаполнитьФИО(ИноеЛицо, ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер.ФИО);
					СведенияОЛицеПередавшемТовар.Вид = "ИноеФизическоеЛицо";
					СведенияОЛицеПередавшемТовар.Сведения =  ИноеЛицо;
					
				КонецЕсли;
				
			КонецЕсли;
			РеквизитыДокумента.Вставить("СведенияОЛицеПередавшемТовар", СведенияОЛицеПередавшемТовар);
		КонецЕсли;
		
		Если ФайлXDTO.Документ.СвПродПер.СвПер.ТранГруз <> Неопределено Тогда
			
			РеквизитыДокумента.Вставить("СведенияОТранспортировке", ФайлXDTO.Документ.СвПродПер.СвПер.ТранГруз.СвТранГруз);
			
			Если ФайлXDTO.Документ.СвПродПер.СвПер.ТранГруз.ТранНакл <> Неопределено Тогда
				ТранспортныеНакладные = Новый Массив;
				Для Каждого Накладная Из ФайлXDTO.Документ.СвПродПер.СвПер.ТранГруз.ТранНакл Цикл
					Структура = Новый Структура;
					Структура.Вставить("Номер", Накладная.НомТранНакл);
					Структура.Вставить("Дата", ДатаИзСтрокиЭД(Накладная.ДатаТранНакл));
					ТранспортныеНакладные.Добавить(Структура);
				КонецЦикла;
				РеквизитыДокумента.Вставить("ТранспортныеНакладные", ТранспортныеНакладные);
			КонецЕсли;
			
			Если ФайлXDTO.Документ.СвПродПер.СвПер.ТранГруз.Перевозчик <> Неопределено Тогда
				РеквизитыДокумента.Вставить("Перевозчик", 
					УчастникУПД(ФайлXDTO.Документ.СвПродПер.СвПер.ТранГруз.Перевозчик));
			КонецЕсли;
				
		КонецЕсли;
		
		Если ФайлXDTO.Документ.СвПродПер.СвПер.СвПерВещи <> Неопределено Тогда
			
			СведенияОПередачеВещи = Новый Структура;
			Если ФайлXDTO.Документ.СвПродПер.СвПер.СвПерВещи.ДатаПерВещ <> Неопределено Тогда
				СведенияОПередачеВещи.Вставить("Дата", ДатаИзСтрокиЭД(ФайлXDTO.Документ.СвПродПер.СвПер.СвПерВещи.ДатаПерВещ));
			КонецЕсли;
			ЗаполнитьСвойство(СведенияОПередачеВещи, "Сведения", ФайлXDTO.Документ.СвПродПер.СвПер.СвПерВещи, "СвПерВещ");
			РеквизитыДокумента.Вставить("СведенияОПередачеВещи", СведенияОПередачеВещи);

		КонецЕсли;
	КонецЕсли;
	
	Если ФайлXDTO.Документ.Свойства().Получить("Подписант") <> Неопределено Тогда
		Подписанты = ПодписантыУПД(ФайлXDTO.Документ.Подписант);
		РеквизитыДокумента.Вставить("Подписанты", Подписанты);
	КонецЕсли;

КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыУПД2019(РеквизитыДокумента, ТекстФайла) 
	
	РеквизитыДокумента = СтруктураРеквизитовДокумента(); 
	
	ПространствоИмен = "ON_NSCHFDOPPR_1_997_01_05_01_01";
	ФайлXDTO = ПрочитатьXMLФайл(ТекстФайла, ПространствоИмен, "Файл");
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД", 
		ФайлXDTO.ИдФайл, ФайлXDTO.ВерсФорм, ФайлXDTO.ВерсПрог, ФайлXDTO.Документ.КНД);
	РеквизитыДокумента.ФорматДокумента = ФорматДокумента;
	РеквизитыДокумента.Вставить("ИдентификаторДокументооборота", ФорматДокумента.Идентификатор);
	
	
	
	РеквизитыДокумента.Вставить("Функция", ФайлXDTO.Документ.Функция);
	Если ФайлXDTO.Документ.Свойства().Получить("ПоФактХЖ")<>Неопределено тогда
		РеквизитыДокумента.Вставить("НаименованиеДокумента", ФайлXDTO.Документ.ПоФактХЖ);
	КонецЕсли;
	Если ФайлXDTO.Документ.Свойства().Получить("НаимДокОпр")<>Неопределено тогда
		РеквизитыДокумента.Вставить("НаименованиеПервичногоДокумента", ФайлXDTO.Документ.НаимДокОпр);
	КонецЕслИ;
	РеквизитыДокумента.Вставить("ДатаИнформацииПродавца", ФайлXDTO.Документ.ДатаИнфПр);
	РеквизитыДокумента.Вставить("ВремяИнформацииПродавца", ФайлXDTO.Документ.ВремИнфПр);
	
	РеквизитыДокумента.Номер = ФайлXDTO.Документ.СвСчФакт.НомерСчФ;
	РеквизитыДокумента.Дата = ДатаИзСтрокиЭД(ФайлXDTO.Документ.СвСчФакт.ДатаСчФ);
	РеквизитыДокумента.КодВалюты = ФайлXDTO.Документ.СвСчФакт.КодОКВ;
	
	ЗаполнитьСведенияОбУчастникахЭДО(ФайлXDTO.СвУчДокОбор, РеквизитыДокумента);
	Если ФайлXDTO.Документ.СвСчФакт.Свойства().Получить("ДопСвФХЖ1")<>Неопределено Тогда
		ЗаполнитьДополнительныеСведенияОбУчастниках(ФайлXDTO.Документ.СвСчФакт.ДопСвФХЖ1, РеквизитыДокумента);
	Конецесли;
	Если ФайлXDTO.Документ.СвСчФакт.Свойства().Получить("ИнфПолФХЖ1")<>Неопределено Тогда
		ЗаполнитьИнформационноеПолеФактаХозяйственнойЖизни(ФайлXDTO.Документ.СвСчФакт.ИнфПолФХЖ1, РеквизитыДокумента);
	КонецЕсли;
	
	Если ФайлXDTO.Документ.СвСчФакт.Свойства().Получить("ИспрСчФ") <> Неопределено Тогда
		Если ЕстьСвойство(ФайлXDTO.Документ.СвСчФакт.ИспрСчФ, "ДефНомИспрСчФ")
				И ФайлXDTO.Документ.СвСчФакт.ИспрСчФ.ДефНомИспрСчФ = "-"
				И ЕстьСвойство(ФайлXDTO.Документ.СвСчФакт.ИспрСчФ, "ДефДатаИспрСчФ")
				И ФайлXDTO.Документ.СвСчФакт.ИспрСчФ.ДефДатаИспрСчФ = "-" Тогда
				// это обычный счф.
		Иначе
			Исправление = Новый Структура;
			Исправление.Вставить("Номер", ФайлXDTO.Документ.СвСчФакт.ИспрСчФ.НомИспрСчФ);
			Исправление.Вставить("Дата", ДатаИзСтрокиЭД(ФайлXDTO.Документ.СвСчФакт.ИспрСчФ.ДатаИспрСчФ));
			РеквизитыДокумента.Вставить("Исправление", Исправление);
		КонецЕсли; 
	КонецЕсли; 	
	
	РеквизитыДокумента.Вставить("СоставительДокумента", ФайлXDTO.Документ.НаимЭконСубСост);	
	
	Если ТипЗнч(ФайлXDTO.Документ.СвСчФакт.СвПрод)=Тип("ОбъектXDTO") Тогда
		РеквизитыДокумента.Вставить("Продавец", УчастникУПД(ФайлXDTO.Документ.СвСчФакт.СвПрод));
	Иначе
		РеквизитыДокумента.Вставить("Продавец", УчастникУПД(ФайлXDTO.Документ.СвСчФакт.СвПрод[0]));
	КонецЕсли;
	
	
	Если ФайлXDTO.Документ.СвСчФакт.Свойства().Получить("ГрузОт")<>Неопределено Тогда 
		Если ТипЗнч(ФайлXDTO.Документ.СвСчФакт.ГрузОт)=Тип("ОбъектXDTO") тогда
				Если ФайлXDTO.Документ.СвСчФакт.ГрузОт.Свойства().Получить("ГрузОтпр") <> Неопределено Тогда
					РеквизитыДокумента.Вставить("Грузоотправитель", УчастникУПД(ФайлXDTO.Документ.СвСчФакт.ГрузОт.ГрузОтпр));
				ИначеЕсли ФайлXDTO.Документ.СвСчФакт.ГрузОт.Свойства().Получить("ОнЖе") <> Неопределено Тогда
					РеквизитыДокумента.Вставить("Грузоотправитель", НСтр("ru ='он же'"));
				КонецЕсли;
		Иначе
			
			Если ФайлXDTO.Документ.СвСчФакт.ГрузОт.Количество() > 0 Тогда
				Если ФайлXDTO.Документ.СвСчФакт.ГрузОт[0].Свойства().Получить("ГрузОтпр") <> Неопределено Тогда
					РеквизитыДокумента.Вставить("Грузоотправитель", УчастникУПД(ФайлXDTO.Документ.СвСчФакт.ГрузОт[0].ГрузОтпр));
				ИначеЕсли ФайлXDTO.Документ.СвСчФакт.ГрузОт[0].Свойства().Получить("ОнЖе") <> Неопределено Тогда
					РеквизитыДокумента.Вставить("Грузоотправитель", НСтр("ru ='он же'"));
				КонецЕсли;
			КонецЕсли;
		Конецесли;
	КонецЕсли;
		
	Если ФайлXDTO.Документ.СвСчФакт.Свойства().Получить("ГрузПолуч")<>Неопределено Тогда 
		Если ТипЗнч(ФайлXDTO.Документ.СвСчФакт.ГрузПолуч)=Тип("ОбъектXDTO") тогда
			РеквизитыДокумента.Вставить("Грузополучатель", УчастникУПД(ФайлXDTO.Документ.СвСчФакт.ГрузПолуч));
			
		Иначе
			Если ФайлXDTO.Документ.СвСчФакт.ГрузПолуч.Количество() > 0 Тогда
				РеквизитыДокумента.Вставить("Грузополучатель", УчастникУПД(ФайлXDTO.Документ.СвСчФакт.ГрузПолуч[0]));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ФайлXDTO.Документ.СвСчФакт.Свойства().Получить("СвПРД") <> Неопределено Тогда
		ПлатежноРасчетныеДокументы = Новый Массив;
		Если ФайлXDTO.Документ.СвСчФакт.Свойства().Получить("СвПРД")<>Неопределено Тогда
			Если ТипЗнч(ФайлXDTO.Документ.СвСчФакт.СвПРД)=Тип("ОбъектXDTO") Тогда
				Сведения=ФайлXDTO.Документ.СвСчФакт.СвПРД;
					СтруктураПРД = Новый Структура;
					СтруктураПРД.Вставить("Номер", Сведения.НомерПРД);
					СтруктураПРД.Вставить("Дата", ДатаИзСтрокиЭД(Сведения.ДатаПРД));
					ПлатежноРасчетныеДокументы.Добавить(СтруктураПРД);
			Иначе
				Для Каждого Сведения Из ФайлXDTO.Документ.СвСчФакт.СвПРД Цикл
					СтруктураПРД = Новый Структура;
					СтруктураПРД.Вставить("Номер", Сведения.НомерПРД);
					СтруктураПРД.Вставить("Дата", ДатаИзСтрокиЭД(Сведения.ДатаПРД));
					ПлатежноРасчетныеДокументы.Добавить(СтруктураПРД);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		РеквизитыДокумента.Вставить("ПлатежноРасчетныеДокументы", ПлатежноРасчетныеДокументы);
	КонецЕсли;
	
	Если ФайлXDTO.Документ.СвСчФакт.Свойства().Получить("СвПокуп")<>Неопределено Тогда
		Если ТипЗнч(ФайлXDTO.Документ.СвСчФакт.СвПокуп)=Тип("ОбъектXDTO") Тогда
			РеквизитыДокумента.Вставить("Покупатель", УчастникУПД(ФайлXDTO.Документ.СвСчФакт.СвПокуп));
		Иначе
			РеквизитыДокумента.Вставить("Покупатель", УчастникУПД(ФайлXDTO.Документ.СвСчФакт.СвПокуп[0]));
		КонецЕсли;
	КонецЕсли;
	
	Если ФайлXDTO.Документ.Свойства().Получить("ТаблСчФакт") <> Неопределено Тогда
		
		СведенияОТоварах = ФайлXDTO.Документ.ТаблСчФакт;
		РеквизитыДокумента.СуммаДокумента = СведенияОТоварах.ВсегоОпл.СтТовУчНалВсего;
		РеквизитыДокумента.СуммаНДСДокумента = СуммаНДСУПД(СведенияОТоварах.ВсегоОпл.СумНалВсего);
		Если СведенияОТоварах.ВсегоОпл.Свойства().Получить("КолНеттоВс")<>Неопределено Тогда
			РеквизитыДокумента.Вставить("КоличествоВсего", СведенияОТоварах.ВсегоОпл.КолНеттоВс);
		Конецесли;
		Если СведенияОТоварах.ВсегоОпл.Свойства().Получить("СтТовБезНДСВсего")<>Неопределено Тогда
			РеквизитыДокумента.Вставить("СуммаБезНДСДокумента", СведенияОТоварах.ВсегоОпл.СтТовБезНДСВсего);
		КонецЕсли;
		
		СведенияОТоварахМассив = Новый Массив;
		
		Если СведенияОТоварах.Свойства().Получить("СведТов")<>неопределено Тогда
			Если ТипЗнч(СведенияОТоварах.СведТов)=Тип("ОбъектXDTO") Тогда
				СтрокаТовара=СведенияОТоварах.СведТов;
				СведенияОТоварахМассив.Добавить(СтрокаТовараУПД2019(СтрокаТовара))
			Иначе
				Для Каждого СтрокаТовара Из СведенияОТоварах.СведТов Цикл
					СведенияОТоварахМассив.Добавить(СтрокаТовараУПД2019(СтрокаТовара))
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		РеквизитыДокумента.Вставить("СведенияОТоварахУслугах", СведенияОТоварахМассив);
		
	КонецЕсли; 
	
	Если ФайлXDTO.Документ.Свойства().Получить("СвПродПер") <> Неопределено Тогда
		
		ЗаполнитьСвойство(РеквизитыДокумента, "СодержаниеОперации", ФайлXDTO.Документ.СвПродПер.СвПер, "СодОпер");
		ЗаполнитьСвойство(РеквизитыДокумента, "ВидОперации", ФайлXDTO.Документ.СвПродПер.СвПер, "ВидОпер");
		
		Если ФайлXDTO.Документ.СвПродПер.СвПер.Свойства().Получить("ДатаПер") <> Неопределено Тогда
			ДатаОтгрузкиТоваров = ДатаИзСтрокиЭД(ФайлXDTO.Документ.СвПродПер.СвПер.ДатаПер);
			РеквизитыДокумента.Вставить("ДатаПередачи", ДатаОтгрузкиТоваров);
		КонецЕсли;
		
		ОснованияОтгрузки = Новый Массив;
		
		Если ФайлXDTO.Документ.СвПродПер.СвПер.Свойства().Получить("ОснПер")<>Неопределено тогда
			Если ТипЗнч(ФайлXDTO.Документ.СвПродПер.СвПер.ОснПер)=Тип("ОбъектXDTO") Тогда
				Основание=ФайлXDTO.Документ.СвПродПер.СвПер.ОснПер;
					Структура = СтруктураОснования();
					Структура.Вставить("Наименование", Основание.НаимОсн);
					ЗаполнитьСвойство(Структура, "Номер", Основание, "НомОсн");
					ЗаполнитьСвойство(Структура, "ДополнительныеСведения", Основание, "ДопСвОсн");
					Если Основание.Свойства().Получить("ДатаОсн") <> Неопределено Тогда
						Структура.Вставить("Дата", ДатаИзСтрокиЭД(Основание.ДатаОсн));
					КонецЕсли; 
					ОснованияОтгрузки.Добавить(Структура);
			Иначе
				Для Каждого Основание Из ФайлXDTO.Документ.СвПродПер.СвПер.ОснПер Цикл
					Структура = СтруктураОснования();
					Структура.Вставить("Наименование", Основание.НаимОсн);
					ЗаполнитьСвойство(Структура, "Номер", Основание, "НомОсн");
					ЗаполнитьСвойство(Структура, "ДополнительныеСведения", Основание, "ДопСвОсн");
					Если Основание.Свойства().Получить("ДатаОсн") <> Неопределено Тогда
						Структура.Вставить("Дата", ДатаИзСтрокиЭД(Основание.ДатаОсн));
					КонецЕсли; 
					ОснованияОтгрузки.Добавить(Структура);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		РеквизитыДокумента.Вставить("Основания", ОснованияОтгрузки);
		
		Если ФайлXDTO.Документ.СвПродПер.СвПер.Свойства().Получить("СвЛицПер") <> Неопределено Тогда
			СведенияОЛицеПередавшемТовар = Новый Структура("Вид, Сведения");
			
			Если ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.Свойства().Получить("РабОргПрод") <> Неопределено Тогда
				
				РаботникОрганизацииПродавца = Новый Структура;
				РаботникОрганизацииПродавца.Вставить("Должность", ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.Должность);
				Если ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.Свойства().Получить("ИныеСвед")<>Неопределено Тогда
					РаботникОрганизацииПродавца.Вставить("ИныеСведения", ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.ИныеСвед);
				КонецЕсли;
				Если ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.Свойства().Получить("ОснПолн")<>Неопределено Тогда
					РаботникОрганизацииПродавца.Вставить("ОснованиеПолномочий", ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.ОснПолн);
				КонецЕсли;
				ЗаполнитьФИО(РаботникОрганизацииПродавца, ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.ФИО);
				СведенияОЛицеПередавшемТовар.Вид = "РаботникОрганизацииПродавца";
				СведенияОЛицеПередавшемТовар.Сведения = РаботникОрганизацииПродавца;
				
			ИначеЕсли ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.Свойства().Получить("ИнЛицо") <> Неопределено Тогда
				
				Если ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.Свойства().Получить("ПредОргПер") <> Неопределено Тогда
					
					ИноеЛицо = Новый Структура;
					ИноеЛицо.Вставить("Должность", ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.Должность);
					ИноеЛицо.Вставить("ИныеСведения", ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.ИныеСвед);
					ИноеЛицо.Вставить("НаименованиеОрганизации", ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.НаимОргПер);
					ИноеЛицо.Вставить("ДоверенностьНаОтгрузку", ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.ОснДоверОргПер);
					ИноеЛицо.Вставить("ОснованиеПолномочий", ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.ОснПолнПредПер);
					ЗаполнитьФИО(ИноеЛицо, ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.ФИО);
					СведенияОЛицеПередавшемТовар.Вид = "ИноеЛицоПредставительОрганизации";
					СведенияОЛицеПередавшемТовар.Сведения =  ИноеЛицо;
					
				ИначеЕсли ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.Свойства().Получить("ФЛПер") <> Неопределено Тогда
					
					ИноеЛицо = Новый Структура;
					Если ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер.Свойства().Получить("ИныеСвед")<>Неопределено Тогда
						ИноеЛицо.Вставить("ИныеСведения", ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер.ИныеСвед);
					Иначе
						ИноеЛицо.Вставить("ИныеСведения", "");
						
					КонецЕсли;
					
					Если ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер.Свойства().Получить("ОснДоверФЛ")<>Неопределено Тогда
						ИноеЛицо.Вставить("ДоверенностьНаОтгрузку", ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер.ОснДоверФЛ);
					Иначе
						ИноеЛицо.Вставить("ДоверенностьНаОтгрузку", "");
						
					КонецЕсли;
					
					ЗаполнитьФИО(ИноеЛицо, ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер.ФИО);
					СведенияОЛицеПередавшемТовар.Вид = "ИноеФизическоеЛицо";
					СведенияОЛицеПередавшемТовар.Сведения =  ИноеЛицо;
					
				КонецЕсли;
				
			КонецЕсли;
			РеквизитыДокумента.Вставить("СведенияОЛицеПередавшемТовар", СведенияОЛицеПередавшемТовар);
		КонецЕсли;
		
		Если ФайлXDTO.Документ.СвПродПер.СвПер.Свойства().Получить("ТранГруз") <> Неопределено Тогда
			
			Если ФайлXDTO.Документ.СвПродПер.СвПер.ТранГруз.Свойства().Получить("СвТранГруз")<>Неопределено тогда
				РеквизитыДокумента.Вставить("СведенияОТранспортировке", ФайлXDTO.Документ.СвПродПер.СвПер.ТранГруз.СвТранГруз);
			КонецЕсли;
			
			Если ФайлXDTO.Документ.СвПродПер.СвПер.ТранГруз.Свойства().Получить("ТранНакл") <> Неопределено Тогда
				ТранспортныеНакладные = Новый Массив;
				Если ТипЗнч(ФайлXDTO.Документ.СвПродПер.СвПер.ТранГруз.ТранНакл)=Тип("СписокXDTO") тогда
					Для Каждого Накладная Из ФайлXDTO.Документ.СвПродПер.СвПер.ТранГруз.ТранНакл Цикл
						Структура = Новый Структура;
						Структура.Вставить("Номер", Накладная.НомТранНакл);
						Структура.Вставить("Дата", ДатаИзСтрокиЭД(Накладная.ДатаТранНакл));
						ТранспортныеНакладные.Добавить(Структура);
					КонецЦикла;
				Иначе
					Накладная=ФайлXDTO.Документ.СвПродПер.СвПер.ТранГруз.ТранНакл;
						Структура = Новый Структура;
						Структура.Вставить("Номер", Накладная.НомТранНакл);
						Структура.Вставить("Дата", ДатаИзСтрокиЭД(Накладная.ДатаТранНакл));
						ТранспортныеНакладные.Добавить(Структура);
				КонецЕсли;
				РеквизитыДокумента.Вставить("ТранспортныеНакладные", ТранспортныеНакладные);
			КонецЕсли;
			
			Если ФайлXDTO.Документ.СвПродПер.СвПер.ТранГруз.Свойства().Получить("Перевозчик") <> Неопределено Тогда
				РеквизитыДокумента.Вставить("Перевозчик", 
					УчастникУПД(ФайлXDTO.Документ.СвПродПер.СвПер.ТранГруз.Перевозчик));
			КонецЕсли;
				
		КонецЕсли;
		
		Если ФайлXDTO.Документ.СвПродПер.СвПер.Свойства().Получить("СвПерВещи") <> Неопределено Тогда
			
			СведенияОПередачеВещи = Новый Структура;
			Если ФайлXDTO.Документ.СвПродПер.СвПер.СвПерВещи.Свойства().Получить("ДатаПерВещ") <> Неопределено Тогда
				СведенияОПередачеВещи.Вставить("Дата", ДатаИзСтрокиЭД(ФайлXDTO.Документ.СвПродПер.СвПер.СвПерВещи.ДатаПерВещ));
			КонецЕсли;
			ЗаполнитьСвойство(СведенияОПередачеВещи, "Сведения", ФайлXDTO.Документ.СвПродПер.СвПер.СвПерВещи, "СвПерВещ");
			РеквизитыДокумента.Вставить("СведенияОПередачеВещи", СведенияОПередачеВещи);

		КонецЕсли;
	КонецЕсли;
	
	Если ФайлXDTO.Документ.Свойства().Получить("Подписант") <> Неопределено Тогда
		Подписанты = ПодписантыУПД(ФайлXDTO.Документ.Подписант);
		РеквизитыДокумента.Вставить("Подписанты", Подписанты);
	КонецЕсли;

КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыУКД(РеквизитыДокумента, ТекстФайла) 
	
	РеквизитыДокумента = СтруктураРеквизитовДокумента();
	
	//ПространствоИмен = "http://api-invoice.taxcom.ru/ON_KORSCHFDOPPR_05_01";
	//ФайлXDTO = ПрочитатьXMLФайл(ТекстФайла, ПространствоИмен, "Файл");
	
	
	ПространствоИмен = "ON_KORSCHFDOPPR_05_01";
	ФайлXDTO = ПрочитатьXMLФайл(ТекстФайла, ПространствоИмен, "Файл");

	Если ФайлXDTO.Свойства().Получить("ВерсПрог")=неопределено Тогда
		ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД", 
			ФайлXDTO.ИдФайл, ФайлXDTO.ВерсФорм, "" , ФайлXDTO.Документ.КНД);
		
	Иначе
		ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД", 
			ФайлXDTO.ИдФайл, ФайлXDTO.ВерсФорм, ФайлXDTO.ВерсПрог, ФайлXDTO.Документ.КНД);
	Конецесли;
	РеквизитыДокумента.ФорматДокумента = ФорматДокумента;
	
	РеквизитыДокумента.Вставить("Функция", ФайлXDTO.Документ.Функция);
	Если ФайлXDTO.Документ.Свойства().Получить("ПоФактХЖ")<>Неопределено тогда
		РеквизитыДокумента.Вставить("НаименованиеДокумента", ФайлXDTO.Документ.ПоФактХЖ);
	КонецЕсли;
	Если ФайлXDTO.Документ.Свойства().Получить("НаимДокОпр")<>Неопределено тогда
		РеквизитыДокумента.Вставить("НаименованиеПервичногоДокумента", ФайлXDTO.Документ.НаимДокОпр);
	КонецЕслИ;
	РеквизитыДокумента.Вставить("ДатаИнформацииПродавца", ФайлXDTO.Документ.ДатаИнфПр);
	РеквизитыДокумента.Вставить("ВремяИнформацииПродавца", ФайлXDTO.Документ.ВремИнфПр);
	
	РеквизитыДокумента.Номер = ФайлXDTO.Документ.СвКСчФ.НомерКСчФ;
	РеквизитыДокумента.Дата = ДатаИзСтрокиЭД(ФайлXDTO.Документ.СвКСчФ.ДатаКСчФ);
	РеквизитыДокумента.КодВалюты = ФайлXDTO.Документ.СвКСчФ.КодОКВ;
	
	ЗаполнитьСведенияОбУчастникахЭДО(ФайлXDTO.СвУчДокОбор, РеквизитыДокумента);
	Если ФайлXDTO.Документ.СвКСчФ.Свойства().Получить("ДопСвФХЖ1")<>Неопределено Тогда
		ЗаполнитьДополнительныеСведенияОбУчастниках(ФайлXDTO.Документ.СвКСчФ.ДопСвФХЖ1, РеквизитыДокумента);
	Конецесли; 
	
	Если ФайлXDTO.Документ.СвКСчФ.Свойства().Получить("ИнфПолФХЖ1")<>Неопределено Тогда
		ЗаполнитьИнформационноеПолеФактаХозяйственнойЖизни(ФайлXDTO.Документ.СвКСчФ.ИнфПолФХЖ1, РеквизитыДокумента);
	КонецеслИ;
	
	ЗаполнитьИсправленныеСчетаФактуры(ФайлXDTO.Документ.СвКСчФ.СчФ, РеквизитыДокумента);
	
	РеквизитыДокумента.Вставить("СоставительДокумента", ФайлXDTO.Документ.НаимЭконСубСост);	

	
	Если ФайлXDTO.Документ.СвКСчФ.Свойства().Получить("ИспрКСчФ ")<>Неопределено И ФайлXDTO.Документ.СвКСчФ.ИспрКСчФ <> Неопределено Тогда
		Исправление = Новый Структура;
		Исправление.Вставить("Номер", ФайлXDTO.Документ.СвКСчФ.ИспрКСчФ.НомИспрКСчФ);
		Исправление.Вставить("Дата", ДатаИзСтрокиЭД(ФайлXDTO.Документ.СвКСчФ.ИспрКСчФ.ДатаИспрКСчФ));
		РеквизитыДокумента.Вставить("Исправление", Исправление);
	КонецЕсли; 
	
	РеквизитыДокумента.Вставить("Продавец", УчастникУПД(ФайлXDTO.Документ.СвКСчФ.СвПрод));
	РеквизитыДокумента.Вставить("Покупатель", УчастникУПД(ФайлXDTO.Документ.СвКСчФ.СвПокуп));
	
	ИтогиПоДокументу = Новый Структура("СуммаДокумента, СуммаНДСДокумента, 
										|СуммаБезНДСУвеличение, СуммаБезНДСУменьшение, 
										|СуммаНДСУвеличение, СуммаНДСУменьшение,
										|СуммаУвеличение, СуммаУменьшение", 
										0, 0, 0, 0, 0, 0, 0, 0);

	Если ФайлXDTO.Документ.ТаблКСчФ <> Неопределено Тогда
		
		СведенияОТоварах = ФайлXDTO.Документ.ТаблКСчФ;
		
		СведенияОТоварахМассив = Новый Массив;
		Для Каждого СтрокаТовара Из СведенияОТоварах.СведТов Цикл
			СведенияОТоварахМассив.Добавить(СтрокаТовараУКД(СтрокаТовара, ИтогиПоДокументу))
		КонецЦикла;
		
		Если СведенияОТоварах.ВсегоУвел <> Неопределено Тогда
			ИтогиПоДокументу.Вставить("СуммаБезНДСУвеличение", СведенияОТоварах.ВсегоУвел.СтТовБезНДСВсего);
			ИтогиПоДокументу.Вставить("СуммаВсегоУвеличение", СведенияОТоварах.ВсегоУвел.СтТовУчНалВсего);
			СуммаНДС = СуммаНДСУПД(СведенияОТоварах.ВсегоУвел.СумНал, "СумНДС");
			ИтогиПоДокументу.Вставить("СуммаНДСУвеличение", СуммаНДС);
		КонецЕсли;
		
		Если СведенияОТоварах.ВсегоУм <> Неопределено Тогда
			ИтогиПоДокументу.Вставить("СуммаБезНДСУменьшение", СведенияОТоварах.ВсегоУм.СтТовБезНДСВсего);
			ИтогиПоДокументу.Вставить("СуммаВсегоУменьшение", СведенияОТоварах.ВсегоУм.СтТовУчНалВсего);
			СуммаНДС = СуммаНДСУПД(СведенияОТоварах.ВсегоУм.СумНал, "СумНДС");
			ИтогиПоДокументу.Вставить("СуммаНДСУменьшение", СуммаНДС);
		КонецЕсли; 
		
	КонецЕсли; 
	
	РеквизитыДокумента.Вставить("СведенияОТоварахУслугах", СведенияОТоварахМассив);
	РеквизитыДокумента.СуммаДокумента = ИтогиПоДокументу.СуммаДокумента;
	РеквизитыДокумента.СуммаНДСДокумента = ИтогиПоДокументу.СуммаНДСДокумента;
	
	РеквизитыДокумента.Вставить("СуммаБезНДСУвеличение", ИтогиПоДокументу.СуммаБезНДСУвеличение);
	РеквизитыДокумента.Вставить("СуммаБезНДСУменьшение", ИтогиПоДокументу.СуммаБезНДСУменьшение);
	РеквизитыДокумента.Вставить("СуммаНДСУвеличение", ИтогиПоДокументу.СуммаНДСУвеличение);
	РеквизитыДокумента.Вставить("СуммаНДСУменьшение", ИтогиПоДокументу.СуммаНДСУменьшение);
	РеквизитыДокумента.Вставить("СуммаУвеличение", ИтогиПоДокументу.СуммаУвеличение);
	РеквизитыДокумента.Вставить("СуммаУменьшение", ИтогиПоДокументу.СуммаУменьшение);
	
	Если ФайлXDTO.Документ.СодФХЖ3 <> Неопределено Тогда
		
		ЗаполнитьСвойство(РеквизитыДокумента, "СодержаниеОперации", ФайлXDTO.Документ.СодФХЖ3, "СодОпер");
		
		СведенияОФактеСогласования = Новый Структура;
		СведенияОФактеСогласования.Вставить("РеквизитыПередаточныхДокументов", ФайлXDTO.Документ.СодФХЖ3.ПередатДокум);
		Если ФайлXDTO.Документ.СодФХЖ3.Свойства().Получить("ДатаНапр")<>Неопределено И ФайлXDTO.Документ.СодФХЖ3.ДатаНапр <> Неопределено Тогда
			СведенияОФактеСогласования.Вставить("ДатаНаправленияНаСогласование", ДатаИзСтрокиЭД(ФайлXDTO.Документ.СодФХЖ3.ДатаНапр));
		КонецЕсли;
		
		ЗаполнитьСвойство(СведенияОФактеСогласования, "ИныеСведенияОбИзмененииСтоимости", ФайлXDTO.Документ.СодФХЖ3, "ИныеСвИзмСтоим");
		
		Основания = Новый Массив;
		Если ТипЗнч(ФайлXDTO.Документ.СодФХЖ3.ОснКор)=Тип("ОбъектXDTO") тогда
			Основание=ФайлXDTO.Документ.СодФХЖ3.ОснКор;
			Структура = СтруктураОснования();
			Структура.Вставить("Наименование", Основание.НаимОсн);
			ЗаполнитьСвойство(Структура, "Номер", Основание, "НомОсн");
			ЗаполнитьСвойство(Структура, "ДополнительныеСведения", Основание, "ДопСвОсн");
			Если Основание.ДатаОсн <> Неопределено Тогда
				Структура.Вставить("Дата", ДатаИзСтрокиЭД(Основание.ДатаОсн));
			КонецЕсли; 
			Основания.Добавить(Структура);
		Иначе
			Для Каждого Основание Из ФайлXDTO.Документ.СодФХЖ3.ОснКор Цикл
				Структура = СтруктураОснования();
				Структура.Вставить("Наименование", Основание.НаимОсн);
				ЗаполнитьСвойство(Структура, "Номер", Основание, "НомОсн");
				ЗаполнитьСвойство(Структура, "ДополнительныеСведения", Основание, "ДопСвОсн");
				Если Основание.ДатаОсн <> Неопределено Тогда
					Структура.Вставить("Дата", ДатаИзСтрокиЭД(Основание.ДатаОсн));
				КонецЕсли; 
				Основания.Добавить(Структура);
			КонецЦикла;
		Конецесли;
		СведенияОФактеСогласования.Вставить("ОснованиеКорректировки", Основания);
		РеквизитыДокумента.Вставить("СведенияОФактеСогласования", СведенияОФактеСогласования);

	КонецЕсли;
	
	Если ФайлXDTO.Документ.Подписант <> Неопределено Тогда
		Подписанты = ПодписантыУПД(ФайлXDTO.Документ.Подписант);
		РеквизитыДокумента.Вставить("Подписанты", Подписанты);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыКорСчетаФактуры(РеквизитыДокумента, ТекстФайла) 
	
	РеквизитыДокумента = СтруктураРеквизитовДокумента();
	
	ПространствоИмен = "http://api-invoice.taxcom.ru/ON_KORSFAKT_5_02";
	ФайлXDTO = ПрочитатьXMLФайл(ТекстФайла, ПространствоИмен, "Файл");
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД", 
		ФайлXDTO.ИдФайл, ФайлXDTO.ВерсФорм, ФайлXDTO.ВерсПрог, ФайлXDTO.Документ.КНД);
	РеквизитыДокумента.ФорматДокумента = ФорматДокумента;
	
	РеквизитыДокумента.Номер = ФайлXDTO.Документ.СвКСчФ.НомерКСчФ;
	РеквизитыДокумента.Дата = ДатаИзСтрокиЭД(ФайлXDTO.Документ.СвКСчФ.ДатаКСчФ);
	РеквизитыДокумента.КодВалюты = ФайлXDTO.Документ.СвКСчФ.КодОКВ;
	
	РеквизитыДокумента.Продавец = УчастникСчетаФактуры(ФайлXDTO.Документ.СвКСчФ.СвПрод);
	РеквизитыДокумента.Покупатель = УчастникСчетаФактуры(ФайлXDTO.Документ.СвКСчФ.СвПокуп);
	ЗаполнитьСведенияОбУчастникахЭДО(ФайлXDTO.СвУчДокОбор, РеквизитыДокумента);

	ЗаполнитьИсправленныеСчетаФактуры(ФайлXDTO.Документ.СвКСчФ.СчФ, РеквизитыДокумента);

	ИспрКСчФ = ФайлXDTO.Документ.СвКСчФ.ИспрКСчФ;
	Если ИспрКСчФ <> Неопределено Тогда
		Исправление = Новый Структура;
		Исправление.Вставить("Номер", ИспрКСчФ.НомИспрКСчФ);
		Исправление.Вставить("Дата", ДатаИзСтрокиЭД(ИспрКСчФ.ДатаИспрКСчФ));
		РеквизитыДокумента.Вставить("Исправление", Исправление);
	КонецЕсли; 
	
	Если ФайлXDTO.Документ.ТаблКСчФ <> Неопределено Тогда
		
		СведенияОТоварах = ФайлXDTO.Документ.ТаблКСчФ;
		
		Если СведенияОТоварах.ВсегоУвел <> Неопределено Тогда
			РеквизитыДокумента.Вставить("СуммаБезНДСУвеличение", СведенияОТоварах.ВсегоУвел.СтТовБезНДСВсего);
			РеквизитыДокумента.Вставить("СуммаВсегоУвеличение", СведенияОТоварах.ВсегоУвел.СтТовУчНалВсего);
			СуммаНДС = СуммаНДСУПД(СведенияОТоварах.ВсегоУвел.СумНал, "СумНДС");
			РеквизитыДокумента.Вставить("СуммаНДСУвеличение", СуммаНДС);
		КонецЕсли;
		
		Если СведенияОТоварах.ВсегоУм <> Неопределено Тогда
			РеквизитыДокумента.Вставить("СуммаБезНДСУменьшение", СведенияОТоварах.ВсегоУм.СтТовБезНДСВсего);
			РеквизитыДокумента.Вставить("СуммаВсегоУменьшение", СведенияОТоварах.ВсегоУм.СтТовУчНалВсего);
			СуммаНДС = СуммаНДСУПД(СведенияОТоварах.ВсегоУм.СумНал, "СумНДС");
			РеквизитыДокумента.Вставить("СуммаНДСУменьшение", СуммаНДС);
		КонецЕсли; 
		
		СуммаДокумента = 0; 
		СуммаНДСДокумента = 0;

		СведенияОТоварахМассив = Новый Массив;
		Если ТипЗнч(СведенияОТоварах.СведТов) = Тип("СписокXDTO") Тогда
			Для Каждого СтрокаТовара Из СведенияОТоварах.СведТов Цикл
				СведенияОТоварахМассив.Добавить(СтрокаТовараКорСчетаФактуры(СтрокаТовара, СуммаДокумента, СуммаНДСДокумента));
			КонецЦикла;
		Иначе
			СведенияОТоварахМассив.Добавить(СтрокаТовараКорСчетаФактуры(СведенияОТоварах.СведТов, СуммаДокумента, СуммаНДСДокумента));
		КонецЕсли; 
		РеквизитыДокумента.Вставить("СведенияОТоварахУслугах", СведенияОТоварахМассив);
		РеквизитыДокумента.СуммаДокумента = СуммаДокумента;
		РеквизитыДокумента.СуммаНДСДокумента = СуммаНДСДокумента;
		
	КонецЕсли; 
	
	ЗаполнитьИнформационноеПолеФактаХозяйственнойЖизни(ФайлXDTO.Документ.СвКСчФ.ИнфПол, РеквизитыДокумента);
	
	Если ФайлXDTO.Документ.Подписант <> Неопределено Тогда
		РеквизитыДокумента.Вставить("Подписанты", ПодписантыСчетаФактуры(ФайлXDTO.Документ.Подписант));
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//  ВерсияФормата - Версия формата электронного документа. Принимает значения 5.01 и 5.02.
//
Процедура ЗаполнитьРеквизитыСчетаФактуры(РеквизитыДокумента, ТекстФайла, ВерсияФормата) 
	
	РеквизитыДокумента = СтруктураРеквизитовДокумента();
	
	Если ВерсияФормата = "5.01" Тогда
		ПространствоИмен = "http://api-invoice.taxcom.ru/ON_SFAKT_5_01";
	Иначе
		ПространствоИмен = "http://api-invoice.taxcom.ru/ON_SFAKT_5_02";
	КонецЕсли;
	
	ФайлXDTO = ПрочитатьXMLФайл(ТекстФайла, ПространствоИмен, "Файл");
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД", 
		ФайлXDTO.ИдФайл, ФайлXDTO.ВерсФорм, ФайлXDTO.ВерсПрог, ФайлXDTO.Документ.КНД);
	РеквизитыДокумента.ФорматДокумента = ФорматДокумента;
	
	РеквизитыДокумента.Номер = ФайлXDTO.Документ.СвСчФакт.НомерСчФ;
	РеквизитыДокумента.Дата = ДатаИзСтрокиЭД(ФайлXDTO.Документ.СвСчФакт.ДатаСчФ);
	РеквизитыДокумента.КодВалюты = ФайлXDTO.Документ.СвСчФакт.КодОКВ;
	
	РеквизитыДокумента.Продавец = УчастникСчетаФактуры(ФайлXDTO.Документ.СвСчФакт.СвПрод);
	РеквизитыДокумента.Покупатель = УчастникСчетаФактуры(ФайлXDTO.Документ.СвСчФакт.СвПокуп);
	ЗаполнитьСведенияОбУчастникахЭДО(ФайлXDTO.СвУчДокОбор, РеквизитыДокумента);

	Если ФайлXDTO.Документ.СвСчФакт.ИспрСчФ <> Неопределено Тогда
		Исправление = Новый Структура;
		Исправление.Вставить("Номер", ФайлXDTO.Документ.СвСчФакт.ИспрСчФ.НомИспрСчФ);
		Исправление.Вставить("Дата", ДатаИзСтрокиЭД(ФайлXDTO.Документ.СвСчФакт.ИспрСчФ.ДатаИспрСчФ));
		РеквизитыДокумента.Вставить("Исправление", Исправление);
	КонецЕсли; 
	
	Если ФайлXDTO.Документ.СвСчФакт.ГрузОт <> Неопределено Тогда
		Если ФайлXDTO.Документ.СвСчФакт.ГрузОт.ГрузОтпр <> Неопределено Тогда
			РеквизитыДокумента.Вставить("Грузоотправитель", ГрузоотправительГрузополучательСчетаФактуры(ФайлXDTO.Документ.СвСчФакт.ГрузОт.ГрузОтпр));
		ИначеЕсли ФайлXDTO.Документ.СвСчФакт.ГрузОт.ОнЖе <> Неопределено Тогда
			РеквизитыДокумента.Вставить("Грузоотправитель", НСтр("ru ='он же'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ФайлXDTO.Документ.СвСчФакт.ГрузПолуч <> Неопределено Тогда
		РеквизитыДокумента.Вставить("Грузополучатель", ГрузоотправительГрузополучательСчетаФактуры(ФайлXDTO.Документ.СвСчФакт.ГрузПолуч));
	КонецЕсли;
	
	Если ФайлXDTO.Документ.СвСчФакт.СвПРД <> Неопределено Тогда
		ПлатежноРасчетныеДокументы = Новый Массив;
		Для Каждого Сведения Из ФайлXDTO.Документ.СвСчФакт.СвПРД Цикл
			СтруктураПРД = Новый Структура;
			СтруктураПРД.Вставить("Номер", Сведения.НомерПРД);
			СтруктураПРД.Вставить("Дата", ДатаИзСтрокиЭД(Сведения.ДатаПРД));
			ПлатежноРасчетныеДокументы.Добавить(СтруктураПРД);
		КонецЦикла;
		РеквизитыДокумента.Вставить("ПлатежноРасчетныеДокументы", ПлатежноРасчетныеДокументы);
	КонецЕсли;
	
	Если ФайлXDTO.Документ.ТаблСчФакт <> Неопределено Тогда
		
		СведенияОТоварах = ФайлXDTO.Документ.ТаблСчФакт;
		РеквизитыДокумента.СуммаДокумента = СведенияОТоварах.ВсегоОпл.СтТовУчНалВсего;
		РеквизитыДокумента.СуммаНДСДокумента = СведенияОТоварах.ВсегоОпл.СумНалВсего.СумНДС;
		РеквизитыДокумента.Вставить("СуммаБезНДСДокумента", СведенияОТоварах.ВсегоОпл.СтТовБезНДСВсего);
		
		СведенияОТоварахМассив = Новый Массив;
		Для Каждого СтрокаТовара Из СведенияОТоварах.СведТов Цикл
			СведенияОТоварахМассив.Добавить(СтрокаТовараСчетаФактуры(СтрокаТовара, ВерсияФормата));
		КонецЦикла;
		РеквизитыДокумента.Вставить("СведенияОТоварахУслугах", СведенияОТоварахМассив);
		
	КонецЕсли; 
	
	ЗаполнитьИнформационноеПолеФактаХозяйственнойЖизни(ФайлXDTO.Документ.СвСчФакт.ИнфПол, РеквизитыДокумента);
	
	Если ФайлXDTO.Документ.Подписант <> Неопределено Тогда
		РеквизитыДокумента.Вставить("Подписанты", ПодписантыСчетаФактуры(ФайлXDTO.Документ.Подписант));
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыПередачиТоваров(РеквизитыДокумента, ТекстФайла) 
	
	РеквизитыДокумента = СтруктураРеквизитовДокумента();
	
	ПространствоИмен = "http://api-invoice.taxcom.ru/DP_TOVTORGPR_05_01";
	ФайлXDTO = ПрочитатьXMLФайл(ТекстФайла, ПространствоИмен, "Файл");
	
	Если ФайлXDTO.Свойства().Получить("ВерсПрог")=Неопределено Тогда
		ВерсПрог="";
	Иначе
		ВерсПрог=ФайлXDTO.ВерсПрог;
		
	КонецЕсли;
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД", 
		ФайлXDTO.ИдФайл, ФайлXDTO.ВерсФорм, ВерсПрог, ФайлXDTO.Документ.КНД);
	РеквизитыДокумента.ФорматДокумента = ФорматДокумента;
	
	ЗаполнитьСведенияОбУчастникахЭДО(ФайлXDTO.СвУчДокОбор, РеквизитыДокумента);
	
	РеквизитыДокумента.Вставить("НаименованиеДокумента", ФайлXDTO.Документ.СвДокПТПрКроме.СвДокПТПр.НаимДок.ПоФактХЖ);
	РеквизитыДокумента.Вставить("НаименованиеПервичногоДокумента", ФайлXDTO.Документ.СвДокПТПрКроме.СвДокПТПр.НаимДок.НаимДокОпр);
	РеквизитыДокумента.Вставить("ДатаИнформацииПродавца", ФайлXDTO.Документ.ДатаИнфПр);
	РеквизитыДокумента.Вставить("ВремяИнформацииПродавца", ФайлXDTO.Документ.ВремИнфПр);
	
	РеквизитыДокумента.Номер = ФайлXDTO.Документ.СвДокПТПрКроме.СвДокПТПр.ИдентДок.НомДокПТ;
	РеквизитыДокумента.Дата = ДатаИзСтрокиЭД(ФайлXDTO.Документ.СвДокПТПрКроме.СвДокПТПр.ИдентДок.ДатаДокПТ);
	РеквизитыДокумента.КодВалюты = ФайлXDTO.Документ.СвДокПТПрКроме.СвДокПТПр.ДенИзм.КодОКВ;
	ЗаполнитьСвойство(РеквизитыДокумента, "ИдентификаторГосударственногоКонтракта", ФайлXDTO.Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1, "ИдГосКон");
	ЗаполнитьСвойство(РеквизитыДокумента, "НаименованиеВалюты", ФайлXDTO.Документ.СвДокПТПрКроме.СвДокПТПр.ДенИзм, "НаимОКВ");
	ЗаполнитьСвойство(РеквизитыДокумента, "КурсВалюты", ФайлXDTO.Документ.СвДокПТПрКроме.СвДокПТПр.ДенИзм, "КурсВал");
	
	РеквизитыДокумента.Вставить("Продавец", УчастникДокументаОПередаче(ФайлXDTO.Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.Продавец));
	РеквизитыДокумента.Вставить("Покупатель", УчастникДокументаОПередаче(ФайлXDTO.Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.Покупатель));
	
	Если ФайлXDTO.Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.ГрузОтпр <> Неопределено Тогда
		РеквизитыДокумента.Вставить("Грузоотправитель", УчастникДокументаОПередаче(ФайлXDTO.Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.ГрузОтпр));
	КонецЕсли;
	Если ФайлXDTO.Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.ГрузПолуч <> Неопределено Тогда
		РеквизитыДокумента.Вставить("Грузополучатель", УчастникДокументаОПередаче(ФайлXDTO.Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.ГрузПолуч));
	КонецЕсли;
	Если ФайлXDTO.Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.Свойства().Получить("Перевозчик") <> Неопределено Тогда
		РеквизитыДокумента.Вставить("Перевозчик", УчастникДокументаОПередаче(ФайлXDTO.Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.Перевозчик));
	КонецЕсли;
	
	Если ФайлXDTO.Документ.СвДокПТПрКроме.СвДокПТПр.Свойства().ПолучитЬ("ИспрДокПТ")<>Неопределено Тогда
		Исправление = ФайлXDTO.Документ.СвДокПТПрКроме.СвДокПТПр.ИспрДокПТ;
		Если Исправление <> Неопределено Тогда
			ИсправлениеСтруктура = Новый Структура;
			ИсправлениеСтруктура.Вставить("Номер", Исправление.НомИспрДокПТ);
			ИсправлениеСтруктура.Вставить("Дата", ДатаИзСтрокиЭД(Исправление.ДатаИспрДокПТ));
			РеквизитыДокумента.Вставить("Исправление", ИсправлениеСтруктура);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ФайлXDTO.Документ.СвДокПТПрКроме.СодФХЖ2.Всего = Неопределено Тогда
		
		Итоги = ФайлXDTO.Документ.СвДокПТПрКроме.СодФХЖ2.Всего;
		ЗаполнитьСвойство(РеквизитыДокумента, "МассаБрутто", Итоги, "БруттоВс");
		ЗаполнитьСвойство(РеквизитыДокумента, "КоличествоВсего", Итоги, "КолМестВс");
		ЗаполнитьСвойство(РеквизитыДокумента, "МассаНетто", Итоги, "НеттоВс");
		ЗаполнитьСвойство(РеквизитыДокумента, "СуммаБезНДС", Итоги, "СтБезНДСВс");
		ЗаполнитьСвойство(РеквизитыДокумента, "СуммаНДСДокумента", Итоги, "СумНДСВс");
		ЗаполнитьСвойство(РеквизитыДокумента, "СуммаДокумента", Итоги, "СтУчНДСВс");
		
	КонецЕсли;
	
	ОснованияОтгрузки = Новый Массив;
	Для Каждого Основание Из ФайлXDTO.Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.Основание Цикл
		
		Структура = СтруктураОснования();
		Структура.Вставить("Наименование", Основание.НаимОсн);
		ЗаполнитьСвойство(Структура, "Номер", Основание, "НомОсн");
		ЗаполнитьСвойство(Структура, "ДополнительныеСведения", Основание, "ДопСвОсн");
		Если Основание.ДатаОсн <> Неопределено Тогда
			Структура.Вставить("Дата", ДатаИзСтрокиЭД(Основание.ДатаОсн));
		КонецЕсли; 
		ОснованияОтгрузки.Добавить(Структура);
		
	КонецЦикла;
	РеквизитыДокумента.Вставить("Основания", ОснованияОтгрузки);
	
	СведенияОТоварах = ФайлXDTO.Документ.СвДокПТПрКроме.СодФХЖ2.СвТов;
	Если СведенияОТоварах <> Неопределено Тогда
		СведенияОТоварахМассив = Новый Массив;
		Для Каждого СтрокаТовара Из СведенияОТоварах Цикл
			СведенияОТоварахМассив.Добавить(СтрокаТовараДокументаОПередачеТоваров(СтрокаТовара));
		КонецЦикла;
		РеквизитыДокумента.Вставить("СведенияОТоварахУслугах", СведенияОТоварахМассив);
	КонецЕсли;
	
	Если ФайлXDTO.Документ.СодФХЖ3 <> Неопределено  Тогда
		Если ФайлXDTO.Документ.СодФХЖ3.ДатаОтпуск <> Неопределено Тогда
			РеквизитыДокумента.Вставить("ДатаОтгрузкиТоваров",  ФайлXDTO.Документ.СодФХЖ3.ДатаОтпуск);
		КонецЕсли; 
	КонецЕсли;
	
	Если ФайлXDTO.Документ.СодФХЖ3.СвЛицОтпГруз <> Неопределено Тогда
		СведенияОЛицеПередавшемТовар = Новый Структура("Вид, Сведения");
		
		Если ФайлXDTO.Документ.СодФХЖ3.СвЛицОтпГруз.РабОргПрод <> Неопределено Тогда
			
			РаботникОрганизацииПродавца = Новый Структура;
			РаботникОрганизацииПродавца.Вставить("Должность", ФайлXDTO.Документ.СодФХЖ3.СвЛицОтпГруз.РабОргПрод.Должность);
			РаботникОрганизацииПродавца.Вставить("ИныеСведения", ФайлXDTO.Документ.СодФХЖ3.СвЛицОтпГруз.РабОргПрод.ИныеСвед);
			РаботникОрганизацииПродавца.Вставить("ОснованиеПолномочий", ФайлXDTO.Документ.СодФХЖ3.СвЛицОтпГруз.РабОргПрод.ОснПолн);
			ЗаполнитьФИО(РаботникОрганизацииПродавца, ФайлXDTO.Документ.СодФХЖ3.СвЛицОтпГруз.РабОргПрод.ФИО);
			СведенияОЛицеПередавшемТовар.Вид = "РаботникОрганизацииПродавца";
			СведенияОЛицеПередавшемТовар.Сведения = РаботникОрганизацииПродавца;
			
		ИначеЕсли ФайлXDTO.Документ.СодФХЖ3.СвЛицОтпГруз.ИнЛицо <> Неопределено Тогда
			
			Если ФайлXDTO.Документ.СодФХЖ3.СвЛицОтпГруз.ИнЛицо.ПредОргПер <> Неопределено Тогда
				
				ИноеЛицо = Новый Структура;
				ИноеЛицо.Вставить("Должность", ФайлXDTO.Документ.СодФХЖ3.СвЛицОтпГруз.ИнЛицо.ПредОргПер.Должность);
				
				ИноеЛицо.Вставить("ИныеСведения", ФайлXDTO.Документ.СодФХЖ3.СвЛицОтпГруз.ИнЛицо.ПредОргПер.ИныеСвед);
				ИноеЛицо.Вставить("НаименованиеОрганизации", ФайлXDTO.Документ.СодФХЖ3.СвЛицОтпГруз.ИнЛицо.ПредОргПер.НаимОргПер);
				ИноеЛицо.Вставить("ДоверенностьНаОтгрузку", ФайлXDTO.Документ.СодФХЖ3.СвЛицОтпГруз.ИнЛицо.ПредОргПер.ОснДоверОргПер);
				ИноеЛицо.Вставить("ОснованиеПолномочий", ФайлXDTO.Документ.СодФХЖ3.СвЛицОтпГруз.ИнЛицо.ПредОргПер.ОснПолнПредПер);
				ЗаполнитьФИО(ИноеЛицо, ФайлXDTO.Документ.СодФХЖ3.СвЛицОтпГруз.ИнЛицо.ПредОргПер.ФИО);
				СведенияОЛицеПередавшемТовар.Вид = "ИноеЛицоПредставительОрганизации";
				СведенияОЛицеПередавшемТовар.Сведения = ИноеЛицо;
				
			ИначеЕсли ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛ <> Неопределено Тогда
				
				ИноеЛицо = Новый Структура;
				ИноеЛицо.Вставить("ИныеСведения", ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛ.ИныеСвед);
				ИноеЛицо.Вставить("ДоверенностьНаОтгрузку", ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛ.ОснДоверФЛ);
				ЗаполнитьФИО(ИноеЛицо, ФайлXDTO.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛ.ФИО);
				СведенияОЛицеПередавшемТовар.Вид = "ИноеФизическоеЛицо";
				СведенияОЛицеПередавшемТовар.Сведения = ИноеЛицо;
				
			КонецЕсли;
			
		КонецЕсли;
		РеквизитыДокумента.Вставить("СведенияОЛицеПередавшемТовар", СведенияОЛицеПередавшемТовар);
	КонецЕсли;
	
	Если ФайлXDTO.Документ.СодФХЖ3.ТранНакл <> Неопределено И ФайлXDTO.Документ.СодФХЖ3.ТранНакл.Количество() > 0 Тогда
		ТранспортныеНакладные = Новый Массив;
		Для Каждого Накладная Из ФайлXDTO.Документ.СодФХЖ3.ТранНакл Цикл
			Структура = Новый Структура;
			Структура.Вставить("Номер", Накладная.НомТранНакл);
			Структура.Вставить("Дата", ДатаИзСтрокиЭД(Накладная.ДатаТранНакл));
			ТранспортныеНакладные.Добавить(Структура);
		КонецЦикла;
		РеквизитыДокумента.Вставить("ТранспортныеНакладные", ТранспортныеНакладные);
	КонецЕсли;
	
	ЗаполнитьСвойство(РеквизитыДокумента, "СодержаниеОперации", ФайлXDTO.Документ.СодФХЖ3, "СодОпер");
	
	ЗаполнитьТекстовуюИнформацию(РеквизитыДокумента, "ТекстоваяИнформация", ФайлXDTO.Документ.СодФХЖ3.ИнфПолФХЖ3);
	
	Если ФайлXDTO.Документ.Подписант <> Неопределено Тогда
		Подписанты = ПодписантыДокументаОПередаче(ФайлXDTO.Документ.Подписант, Ложь);
		РеквизитыДокумента.Вставить("Подписанты", Подписанты);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыПередачиРабот(РеквизитыДокумента, ТекстФайла) 
	
	РеквизитыДокумента = СтруктураРеквизитовДокумента();
	
	ПространствоИмен = "http://api-invoice.taxcom.ru/DP_REZRUISP_05_01";
	ФайлXDTO = ПрочитатьXMLФайл(ТекстФайла, ПространствоИмен, "Файл");
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД", 
		ФайлXDTO.ИдФайл, ФайлXDTO.ВерсФорм, ФайлXDTO.ВерсПрог, ФайлXDTO.Документ.КНД);
	РеквизитыДокумента.ФорматДокумента = ФорматДокумента;
	
	ЗаполнитьСведенияОбУчастникахЭДО(ФайлXDTO.СвУчДокОбор, РеквизитыДокумента);
	
	РеквизитыДокумента.Вставить("НаименованиеДокумента", ФайлXDTO.Документ.СвДокПРУ.НаимДок.ПоФактХЖ);
	РеквизитыДокумента.Вставить("НаименованиеПервичногоДокумента", ФайлXDTO.Документ.СвДокПРУ.НаимДок.НаимДокОпр);
	РеквизитыДокумента.Вставить("ДатаИнформацииПродавца", ФайлXDTO.Документ.ДатаИнфИсп);
	РеквизитыДокумента.Вставить("ВремяИнформацииПродавца", ФайлXDTO.Документ.ВремИнфИсп);
	
	РеквизитыДокумента.Номер = ФайлXDTO.Документ.СвДокПРУ.ИдентДок.НомДокПРУ;
	РеквизитыДокумента.Дата = ДатаИзСтрокиЭД(ФайлXDTO.Документ.СвДокПРУ.ИдентДок.ДатаДокПРУ);
	РеквизитыДокумента.КодВалюты = ФайлXDTO.Документ.СвДокПРУ.ДенИзм.КодОКВ;
	
	ЗаполнитьСвойство(РеквизитыДокумента, "ИдентификаторГосударственногоКонтракта", ФайлXDTO.Документ.СвДокПРУ.СодФХЖ1, "ИдГосКон");
	ЗаполнитьСвойство(РеквизитыДокумента, "НаименованиеВалюты", ФайлXDTO.Документ.СвДокПРУ.ДенИзм, "НаимОКВ");
	ЗаполнитьСвойство(РеквизитыДокумента, "КурсВалюты", ФайлXDTO.Документ.СвДокПРУ.ДенИзм, "КурсВал");
	
	РеквизитыДокумента.Вставить("Продавец", УчастникДокументаОПередаче(ФайлXDTO.Документ.СвДокПРУ.СодФХЖ1.Исполнитель));
	РеквизитыДокумента.Вставить("Покупатель", УчастникДокументаОПередаче(ФайлXDTO.Документ.СвДокПРУ.СодФХЖ1.Заказчик));
	
	Исправление = ФайлXDTO.Документ.СвДокПРУ.ИспрДокПРУ;
	Если Исправление <> Неопределено Тогда
		Исправление = Новый Структура;
		Исправление.Вставить("Номер", Исправление.НомИспрДокПТ);
		Исправление.Вставить("Дата", ДатаИзСтрокиЭД(Исправление.ДатаИспрДокПТ));
		РеквизитыДокумента.Вставить("Исправление", Исправление);
	КонецЕсли;
	
	ОснованияОтгрузки = Новый Массив;
	Для Каждого Основание Из ФайлXDTO.Документ.СвДокПРУ.СодФХЖ1.Основание Цикл
		
		Структура = СтруктураОснования();
		Структура.Вставить("Наименование", Основание.НаимОсн);
		ЗаполнитьСвойство(Структура, "Номер", Основание, "НомОсн");
		ЗаполнитьСвойство(Структура, "ДополнительныеСведения", Основание, "ДопСвОсн");
		Если Основание.ДатаОсн <> Неопределено Тогда
			Структура.Вставить("Дата", ДатаИзСтрокиЭД(Основание.ДатаОсн));
		КонецЕсли; 
		ОснованияОтгрузки.Добавить(Структура);
		
	КонецЦикла;
	
	РеквизитыДокумента.Вставить("Основания", ОснованияОтгрузки);
	
	СуммаДокумента = 0; 
	СуммаНДСДокумента = 0;
	
	СведенияОРаботах = ФайлXDTO.Документ.СвДокПРУ.СодФХЖ1.ОписРабот;
	
	Если СведенияОРаботах <> Неопределено Тогда
		СведенияОРаботахМассив = Новый Массив;
		Для Каждого СтрокаОписанияРабот Из СведенияОРаботах Цикл
			
			Если СтрокаОписанияРабот.СумНДСИт <> Неопределено Тогда
				СуммаНДСДокумента = СуммаНДСДокумента + СтрокаОписанияРабот.СумНДСИт;
			КонецЕсли;
			
			СуммаДокумента = СуммаДокумента + СтрокаОписанияРабот.СтУчНДСИт;
			
			Для Каждого СтрокаРабота Из СтрокаОписанияРабот.Работа Цикл
				СведенияОРаботе = СтруктураСтрокиТоваровУслуг();
				СведенияОРаботе.НомерСтроки = СтрокаРабота.Номер;
				СведенияОРаботе.Наименование = СтрокаРабота.НаимРабот;
				СведенияОРаботе.ОКЕИ = СтрокаРабота.ОКЕИ;
				СведенияОРаботе.Цена = СтрокаРабота.Цена;
				СведенияОРаботе.Количество = СтрокаРабота.Количество;
				СведенияОРаботе.СуммаБезНДС = СтрокаРабота.СтоимБезНДС;
				СведенияОРаботе.СтавкаНДС = СтрокаРабота.НалСт;
				СведенияОРаботе.Сумма = СтрокаРабота.СтоимУчНДС;
				СведенияОРаботе.СуммаНДС = СтрокаРабота.СумНДС;
				
				Если СтрокаОписанияРабот.СумНДСИт = Неопределено И СтрокаРабота.СумНДС <> Неопределено Тогда
					СуммаНДСДокумента = СуммаНДСДокумента + СтрокаРабота.СумНДС;
				КонецЕсли;
				
				Если СтрокаРабота.Описание <> Неопределено Тогда
					СведенияОРаботе.Вставить("Описание", СтрокаРабота.Описание);
					Если СведенияОРаботе.Наименование = Неопределено Тогда
						СведенияОРаботе.Вставить("Наименование", СтрокаРабота.Описание);
					КонецЕсли; 
				КонецЕсли; 
				
				ЗаполнитьТекстовуюИнформацию(СведенияОРаботе, "ТекстоваяИнформация", СтрокаРабота.ИнфПолеОписРабот);
				
				ЗаполнитьСвойство(СведенияОРаботе, "НаименованиеЕдиницыИзмерения", СтрокаРабота, "НаимЕдИзм");
				ЗаполнитьСвойство(СведенияОРаботе, "КорСчДебет", СтрокаРабота, "КорСчДебет");
				ЗаполнитьСвойство(СведенияОРаботе, "КорСчКредит", СтрокаРабота, "КорСчКредит");
				
				СведенияОРаботе.Вставить("НачалоПериодаРабот", СтрокаОписанияРабот.НачРабот);
				СведенияОРаботе.Вставить("ОкончаниеПериодаРабот", СтрокаОписанияРабот.КонРабот);
				СведенияОРаботахМассив.Добавить(СведенияОРаботе);
				
			КонецЦикла; 
		КонецЦикла;
		РеквизитыДокумента.Вставить("СведенияОТоварахУслугах", СведенияОРаботахМассив);
	КонецЕсли;
	
	РеквизитыДокумента.СуммаДокумента = СуммаДокумента;
	РеквизитыДокумента.СуммаНДСДокумента = СуммаНДСДокумента;
	
	Если ФайлXDTO.Документ.СодФХЖ2.ДатаПер <> Неопределено Тогда
		РеквизитыДокумента.Вставить("ДатаПередачи", ДатаИзСтрокиЭД(ФайлXDTO.Документ.СодФХЖ2.ДатаПер));
	КонецЕсли; 
	
	ЗаполнитьСвойство(РеквизитыДокумента, "СодержаниеОперации", ФайлXDTO.Документ.СодФХЖ2, "СодОпер");
	ЗаполнитьТекстовуюИнформацию(РеквизитыДокумента, "ТекстоваяИнформация", ФайлXDTO.Документ.СодФХЖ2.ИнфПолФХЖ2);
	
	Если ФайлXDTO.Документ.Подписант <> Неопределено Тогда
		Подписанты = ПодписантыДокументаОПередаче(ФайлXDTO.Документ.Подписант);
		РеквизитыДокумента.Вставить("Подписанты", Подписанты);
	КонецЕсли;
	
	РеквизитыДокумента.Вставить("ТолькоУслуги", Истина);

КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыТорг12(РеквизитыДокумента, ТекстФайла) 
	
	РеквизитыДокумента = СтруктураРеквизитовДокумента();
	
	ПространствоИмен = "http://api-invoice.taxcom.ru/DP_OTORG12_5_01_02";
	ФайлXDTO = ПрочитатьXMLФайл(ТекстФайла, ПространствоИмен, "Файл");
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД", 
		ФайлXDTO.ИдФайл, ФайлXDTO.ВерсФорм, ФайлXDTO.ВерсПрог, ФайлXDTO.Документ.КНД);
	РеквизитыДокумента.ФорматДокумента = ФорматДокумента;
	
	РеквизитыДокумента.Вставить("НаименованиеДокумента", ФайлXDTO.Документ.СвТНО.НаимПервДок);
	РеквизитыДокумента.Вставить("НаименованиеПервичногоДокумента", ФайлXDTO.Документ.СвТНО.НомФорм);
	
	РеквизитыДокумента.Номер = ФайлXDTO.Документ.СвТНО.ТН.НомТН;
	РеквизитыДокумента.Дата = ДатаИзСтрокиЭД(ФайлXDTO.Документ.СвТНО.ТН.ДатаТН);
	
	ЗаполнитьСведенияОбУчастникахЭДО(ФайлXDTO.СвУчДокОбор, РеквизитыДокумента);
	РеквизитыДокумента.Вставить("ОКУД", ФайлXDTO.Документ.СвТНО.ОКУДПервДок);
	Если ФайлXDTO.Документ.СвТНО.ОтпускГруз.ДатаОтпуск <> Неопределено Тогда
		РеквизитыДокумента.Вставить("ДатаОтгрузкиТоваров", ДатаИзСтрокиЭД(ФайлXDTO.Документ.СвТНО.ОтпускГруз.ДатаОтпуск));
	КонецЕсли; 

	Грузоотправитель = Неопределено;
	Поставщик = ФайлXDTO.Документ.СвТНО.Поставщик;
	
	Если ФайлXDTO.Документ.СвТНО.ГрузОт <> Неопределено И ФайлXDTO.Документ.СвТНО.ГрузОт.ГрузОтпр <> Неопределено Тогда
		Грузоотправитель = ФайлXDTO.Документ.СвТНО.ГрузОт.ГрузОтпр;
		РеквизитыДокумента.Вставить("Грузоотправитель", УчастникСчетаФактуры(Грузоотправитель));
		ЗаполнитьСвойство(РеквизитыДокумента.Грузоотправитель, "ОКДП",  ФайлXDTO.Документ.СвТНО.ГрузОт, "ОКДП");
		ЗаполнитьСвойство(РеквизитыДокумента.Грузоотправитель, "СтруктурноеПодразделение",  ФайлXDTO.Документ.СвТНО.ГрузОт, "СтруктПодр");
	ИначеЕсли Поставщик <> Неопределено Тогда
		Грузоотправитель = Поставщик;
		РеквизитыДокумента.Вставить("Грузоотправитель", УчастникСчетаФактуры(Грузоотправитель));
	КонецЕсли;
	
	Если Поставщик = Неопределено Тогда
		РеквизитыДокумента.Продавец = РеквизитыДокумента.Грузоотправитель;
	Иначе
		РеквизитыДокумента.Продавец = УчастникСчетаФактуры(Поставщик);
	КонецЕсли; 
	
	Плательщик = ФайлXDTO.Документ.СвТНО.Плательщик;
	Грузополучатель = ФайлXDTO.Документ.СвТНО.ГрузПолуч;
	Если Грузополучатель <> Неопределено Тогда
		РеквизитыДокумента.Вставить("Грузополучатель", УчастникСчетаФактуры(Грузополучатель));
	КонецЕсли;
	
	Если Плательщик <> Неопределено Тогда
		РеквизитыДокумента.Покупатель = УчастникСчетаФактуры(Плательщик);
	ИначеЕсли Грузополучатель <> Неопределено Тогда 
		РеквизитыДокумента.Покупатель = РеквизитыДокумента.Грузополучатель;
	КонецЕсли;
	
	Основание = ФайлXDTO.Документ.СвТНО.Основание;
	Если ФайлXDTO.Документ.СвТНО.Основание <> Неопределено Тогда
		Основания = Новый Массив;
		Структура = СтруктураОснования();
		Структура.Вставить("Наименование", Основание.НаимОсн);
		ЗаполнитьСвойство(Структура, "Номер", Основание, "НомОсн");
		ЗаполнитьСвойство(Структура, "ДополнительныеСведения", Основание, "ДопСвОсн");
		Если Основание.ДатаОсн <> Неопределено Тогда
			Структура.Вставить("Дата", ДатаИзСтрокиЭД(Основание.ДатаОсн));
		КонецЕсли; 
		Основания.Добавить(Структура);
		РеквизитыДокумента.Вставить("Основания", Основания);
	КонецЕсли;
	
	Если ФайлXDTO.Документ.СвТНО.ТН.ТНОбщ <> Неопределено Тогда
		ОбщиеСведенияТоварнойНакладной = Новый Структура;
		ЗаполнитьСвойство(ОбщиеСведенияТоварнойНакладной, "КоличествоЗаписей", ФайлXDTO.Документ.СвТНО.ТН.ТНОбщ, "КолНомЗап");
		ЗаполнитьСвойство(ОбщиеСведенияТоварнойНакладной, "КоличествоЗаписейПрописью", ФайлXDTO.Документ.СвТНО.ТН.ТНОбщ, "КолНомЗапПр");
		ЗаполнитьСвойство(ОбщиеСведенияТоварнойНакладной, "КоличествоМест", ФайлXDTO.Документ.СвТНО.ТН.ТНОбщ, "ВсМест");
		ЗаполнитьСвойство(ОбщиеСведенияТоварнойНакладной, "КоличествоМестПрописью", ФайлXDTO.Документ.СвТНО.ТН.ТНОбщ, "ВсМестПр");
		ЗаполнитьСвойство(ОбщиеСведенияТоварнойНакладной, "МассаГруза", ФайлXDTO.Документ.СвТНО.ТН.ТНОбщ, "Брутто");
		ЗаполнитьСвойство(ОбщиеСведенияТоварнойНакладной, "МассаГрузаПрописью", ФайлXDTO.Документ.СвТНО.ТН.ТНОбщ, "БруттоПр");
		ЗаполнитьСвойство(ОбщиеСведенияТоварнойНакладной, "МассаГрузаНетто", ФайлXDTO.Документ.СвТНО.ТН.ТНОбщ, "Нетто");
		ЗаполнитьСвойство(ОбщиеСведенияТоварнойНакладной, "МассаГрузаНеттоПрописью", ФайлXDTO.Документ.СвТНО.ТН.ТНОбщ, "НеттоПр");
		РеквизитыДокумента.Вставить("ОбщиеСведенияТоварнойНакладной", ОбщиеСведенияТоварнойНакладной);
	КонецЕсли;
	
	СуммаДокумента = 0;
	Если ФайлXDTO.Документ.СвТНО.ТН.Таблица.ВсегоНакл <> Неопределено
		И ЗначениеЗаполнено(ФайлXDTO.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс) Тогда
		СуммаДокумента = ФайлXDTO.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс;
	ИначеЕсли ФайлXDTO.Документ.СвТНО.ОтпускГруз <> Неопределено
		И ЗначениеЗаполнено(ФайлXDTO.Документ.СвТНО.ОтпускГруз.СумОтпуск) Тогда
		СуммаДокумента = ФайлXDTO.Документ.СвТНО.ОтпускГруз.СумОтпуск;
	КонецЕсли;
	
	СведенияОТоварах = ФайлXDTO.Документ.СвТНО.ТН.Таблица;
	РеквизитыДокумента.СуммаДокумента = СуммаДокумента;
	РеквизитыДокумента.СуммаНДСДокумента = СведенияОТоварах.ВсегоНакл.СумНДСВс;
	
	ЗаполнитьСвойство(РеквизитыДокумента, "КоличествоМестВсегоПоНакладной", СведенияОТоварах.ВсегоНакл, "КолМестВс");
	ЗаполнитьСвойство(РеквизитыДокумента, "МассаБруттоВсегоПоНакладной", СведенияОТоварах.ВсегоНакл, "БруттоВс");
	ЗаполнитьСвойство(РеквизитыДокумента, "МассаНеттоВсегоПоНакладной", СведенияОТоварах.ВсегоНакл, "НеттоВс");
	ЗаполнитьСвойство(РеквизитыДокумента, "СуммаБезНДСДокумента", СведенияОТоварах.ВсегоНакл, "СумБезНДСВс");
	
	СведенияОТоварахМассив = Новый Массив;
	Для Каждого СтрокаТовара Из СведенияОТоварах.СвТов Цикл
		СведенияОТоварахМассив.Добавить(СтрокаТовараТорг12(СтрокаТовара));
	КонецЦикла;
	РеквизитыДокумента.Вставить("СведенияОТоварахУслугах", СведенияОТоварахМассив);
	
	ЗаполнитьИнформационноеПолеФактаХозяйственнойЖизни(ФайлXDTO.Документ.СвТНО.ИнфПол, РеквизитыДокумента);
	
	Если ФайлXDTO.Документ.Подписант <> Неопределено Тогда
		РеквизитыДокумента.Вставить("Подписанты", ПодписантыСчетаФактуры(ФайлXDTO.Документ.Подписант));
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыАкт501(РеквизитыДокумента, ТекстФайла) 
	
	РеквизитыДокумента = СтруктураРеквизитовДокумента();
	
	ПространствоИмен = "http://api-invoice.taxcom.ru/DP_IAKTPRM_5_01_02";
	ФайлXDTO = ПрочитатьXMLФайл(ТекстФайла, ПространствоИмен, "Файл");
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД", 
		ФайлXDTO.ИдФайл, ФайлXDTO.ВерсФорм, ФайлXDTO.ВерсПрог, ФайлXDTO.Документ.КНД);
	РеквизитыДокумента.ФорматДокумента = ФорматДокумента;
	
	РеквизитыДокумента.Вставить("НаименованиеДокумента", ФайлXDTO.Документ.СвАктИ.НаимПервДок);
	РеквизитыДокумента.Вставить("Заголовок", ФайлXDTO.Документ.СвАктИ.Заголовок);
	
	РеквизитыДокумента.Номер = ФайлXDTO.Документ.СвАктИ.НомАкт;
	РеквизитыДокумента.Дата = ДатаИзСтрокиЭД(ФайлXDTO.Документ.СвАктИ.ДатаАкт);
	
	ЗаполнитьСведенияОбУчастникахЭДО(ФайлXDTO.СвУчДокОбор, РеквизитыДокумента);
	РеквизитыДокумента.Продавец = УчастникСчетаФактуры(ФайлXDTO.Документ.СвАктИ.Исполнитель);
	
	Если ФайлXDTO.Документ.СвАктИ.Сдал <> Неопределено Тогда
		
		Если ФайлXDTO.Документ.СвАктИ.Сдал.ДатаИсполн <> Неопределено Тогда
			РеквизитыДокумента.Вставить("ДатаИсполнения", ДатаИзСтрокиЭД(ФайлXDTO.Документ.СвАктИ.Сдал.ДатаИсполн));
		КонецЕсли; 
		
		ИнформацияОбИсполнителе = Новый Структура;
		Если ФайлXDTO.Документ.СвАктИ.Сдал.ПодписьИсполн <> Неопределено Тогда
			ЗаполнитьСвойство(ИнформацияОбИсполнителе, "Должность", ФайлXDTO.Документ.СвАктИ.Сдал.ПодписьИсполн, "Должность");
			ЗаполнитьФИО(ИнформацияОбИсполнителе, ФайлXDTO.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО);
		КонецЕсли;
		
		Если ФайлXDTO.Документ.СвАктИ.Сдал.ДоверенИсполн  <> Неопределено Тогда
			ЗаполнитьСвойство(ИнформацияОбИсполнителе, "НомерДоверенности", ФайлXDTO.Документ.СвАктИ.Сдал.ДоверенИсполн, "НомДоверен");
			Если ФайлXDTO.Документ.СвАктИ.Сдал.ДоверенИсполн.ДатаДоверен <> Неопределено Тогда
				ИнформацияОбИсполнителе.Вставить("ДатаДоверенности", ДатаИзСтрокиЭД(ФайлXDTO.Документ.СвАктИ.Сдал.ДоверенИсполн.ДатаДоверен));
			КонецЕсли; 
			ЗаполнитьСвойство(ИнформацияОбИсполнителе, "ВыданаКем", ФайлXDTO.Документ.СвАктИ.Сдал.ДоверенИсполн, "ВыданаКем");
			ЗаполнитьСвойство(ИнформацияОбИсполнителе, "ВыданаКому", ФайлXDTO.Документ.СвАктИ.Сдал.ДоверенИсполн, "ВыданаКому");
		КонецЕсли; 
		РеквизитыДокумента.Вставить("ИнформацияОбИсполнителе", ИнформацияОбИсполнителе);

	КонецЕсли; 
	
	СуммаДокумента = 0;
	СуммаНДСДокумента = 0;
	
	СведенияОРаботах = ФайлXDTO.Документ.СвАктИ.ОписРабот;
	
	СведенияОРаботахМассив = Новый Массив;
	Для Каждого СтрокаОписанияРабот Из СведенияОРаботах Цикл
		
		СуммаДокумента = СуммаДокумента + СтрокаОписанияРабот.СумУчНДСИт;
		
		Если СтрокаОписанияРабот.СумНДСИт <> Неопределено Тогда
			СуммаНДСДокумента = СуммаНДСДокумента + СтрокаОписанияРабот.СумНДСИт;
		КонецЕсли;
		
		Для Каждого СтрокаРабота Из СтрокаОписанияРабот.Работа Цикл
			
			СведенияОРаботе = СтруктураСтрокиТоваровУслуг();
			СведенияОРаботе.НомерСтроки = СтрокаРабота.Номер;
			СведенияОРаботе.Наименование = СтрокаРабота.НаимРабот;
			СведенияОРаботе.ОКЕИ = СтрокаРабота.ОКЕИ;
			СведенияОРаботе.Цена = СтрокаРабота.Цена;
			СведенияОРаботе.Количество = СтрокаРабота.Количество;
			СведенияОРаботе.СуммаБезНДС = СтрокаРабота.СумБезНДС;
			СведенияОРаботе.Сумма = СтрокаРабота.СумУчНДС;
			СведенияОРаботе.СуммаНДС = СтрокаРабота.СумНДС;
			
			Если СтрокаОписанияРабот.СумНДСИт = Неопределено Тогда
				СуммаНДСДокумента = СуммаНДСДокумента + СтрокаРабота.СумНДС;
			КонецЕсли;
			
			Если СтрокаРабота.Описание <> Неопределено Тогда
				СведенияОРаботе.Вставить("Описание", СтрокаРабота.Описание);
				Если СведенияОРаботе.Наименование = Неопределено Тогда
					СведенияОРаботе.Вставить("Наименование", СтрокаРабота.Описание);
				КонецЕсли; 
			КонецЕсли; 
			
			Если СтрокаРабота.СумНДС = Неопределено Тогда
				СведенияОРаботе.СтавкаНДС = "без НДС";
			ИначеЕсли СтрокаРабота.СумНДС = 0 Тогда
				СведенияОРаботе.СтавкаНДС = "0%";
			ИначеЕсли ЗначениеЗаполнено(СтрокаРабота.СумБезНДС) Тогда
				СтавкаНДС = Окр(СтрокаРабота.СумНДС * 100 / СтрокаРабота.СумБезНДС);
				СведенияОРаботе.СтавкаНДС = СтавкаНДС;
			Иначе
				СведенияОРаботе.СтавкаНДС = "20%";
			КонецЕсли;
			
			ЗаполнитьСвойство(СведенияОРаботе, "ИнформационноеПолеСобытия", СтрокаРабота, "ИнфПолСтр");
			ЗаполнитьСвойство(СведенияОРаботе, "НаименованиеЕдиницыИзмерения", СтрокаРабота, "НаимЕдИзм");
			СведенияОРаботе.Вставить("НачалоПериодаРабот", СтрокаОписанияРабот.НачРабот);
			СведенияОРаботе.Вставить("ОкончаниеПериодаРабот", СтрокаОписанияРабот.КонРабот);

			СведенияОРаботахМассив.Добавить(СведенияОРаботе);
			
		КонецЦикла; 
	КонецЦикла;
	
	РеквизитыДокумента.Вставить("СведенияОТоварахУслугах", СведенияОРаботахМассив);
		
	РеквизитыДокумента.СуммаДокумента = СуммаДокумента;
	РеквизитыДокумента.СуммаНДСДокумента = СуммаНДСДокумента;
	
	Если ФайлXDTO.Документ.Подписант <> Неопределено Тогда
		РеквизитыДокумента.Вставить("Подписанты", ПодписантыСчетаФактуры(ФайлXDTO.Документ.Подписант));
	КонецЕсли;
	
	ЗаполнитьИнформационноеПолеФактаХозяйственнойЖизни(ФайлXDTO.Документ.СвАктИ.ИнфПол, РеквизитыДокумента);
	
	РеквизитыДокумента.Вставить("ТолькоУслуги", Истина);
КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыТитулаЗаказчикаАкт501(РеквизитыДокумента, ТекстФайла) 
	
	РеквизитыДокумента = СтруктураРеквизитовТитула();
	ПространствоИмен = "http://api-invoice.taxcom.ru/DP_ZAKTPRM_5_01_02";
	ФайлXDTO = ПрочитатьXMLФайл(ТекстФайла, ПространствоИмен, "Файл");
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД", 
		ФайлXDTO.ИдФайл, ФайлXDTO.ВерсФорм, ФайлXDTO.ВерсПрог, ФайлXDTO.Документ.КНД);
	РеквизитыДокумента.ФорматДокумента = ФорматДокумента;
	
	РеквизитыДокумента.Дата = ДатаИзСтрокиЭД(ФайлXDTO.Документ.ДатаДок);
	ЗаполнитьСведенияОбУчастникахЭДО(ФайлXDTO.СвУчДокОбор, РеквизитыДокумента);
	
	РеквизитыДокумента.ИдентификаторФайлаПродавца = ФайлXDTO.Документ.СвАктИ.ИдАктИ.ИдФайлАктИ;
	
	Если ФайлXDTO.Документ.Подписант <> Неопределено Тогда
		РеквизитыДокумента.Вставить("Подписанты", ПодписантыСчетаФактуры(ФайлXDTO.Документ.Подписант));
	КонецЕсли;

КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыТитулаПокупателяТорг12(РеквизитыДокумента, ТекстФайла) 
	
	РеквизитыДокумента = СтруктураРеквизитовТитула();
	ПространствоИмен = "http://api-invoice.taxcom.ru/DP_PTORG12";
	ФайлXDTO = ПрочитатьXMLФайл(ТекстФайла, ПространствоИмен, "Файл");
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД", 
		ФайлXDTO.ИдФайл, ФайлXDTO.ВерсФорм, ФайлXDTO.ВерсПрог, ФайлXDTO.Документ.КНД);
	РеквизитыДокумента.ФорматДокумента = ФорматДокумента;
	
	РеквизитыДокумента.Дата = ДатаИзСтрокиЭД(ФайлXDTO.Документ.ДатаДок);
	ЗаполнитьСведенияОбУчастникахЭДО(ФайлXDTO.СвУчДокОбор, РеквизитыДокумента);
	
	РеквизитыДокумента.ИдентификаторФайлаПродавца = ФайлXDTO.Документ.ИдТНО.ИдФайлТН;
	
	Если ФайлXDTO.Документ.Подписант <> Неопределено Тогда
		РеквизитыДокумента.Вставить("Подписанты", ПодписантыСчетаФактуры(ФайлXDTO.Документ.Подписант));
	КонецЕсли;

КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыТитулаПокупателяУПД(РеквизитыДокумента, ТекстФайла) 
	
	РеквизитыДокумента = СтруктураРеквизитовТитула();
	ПространствоИмен = "http://api-invoice.taxcom.ru/ON_SCHFDOPPOK_05_01";
	ФайлXDTO = ПрочитатьXMLФайл(ТекстФайла, ПространствоИмен, "Файл");
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД", 
		ФайлXDTO.ИдФайл, ФайлXDTO.ВерсФорм, ФайлXDTO.ВерсПрог, ФайлXDTO.ИнфПок.КНД);
	РеквизитыДокумента.ФорматДокумента = ФорматДокумента;
	
	РеквизитыДокумента.Дата = ДатаИзСтрокиЭД(ФайлXDTO.ИнфПок.ДатаИнфПок);
	ЗаполнитьСведенияОбУчастникахЭДО(ФайлXDTO.СвУчДокОбор, РеквизитыДокумента);
	
	РеквизитыДокумента.ИдентификаторФайлаПродавца = ФайлXDTO.ИнфПок.ИдИнфПрод.ИдФайлИнфПр;
	РеквизитыДокумента.СоставительДокумента = ФайлXDTO.ИнфПок.НаимЭконСубСост;	
	Если ФайлXDTO.ИнфПок.Подписант <> Неопределено Тогда
		Подписанты = ПодписантыУПД(ФайлXDTO.ИнфПок.Подписант);
		РеквизитыДокумента.Вставить("Подписанты", Подписанты);
	КонецЕсли;
	
	Если ФайлXDTO.ИнфПок.СодФХЖ4 <> Неопределено Тогда
		
		Если ЕстьСвойство(ФайлXDTO.ИнфПок.СодФХЖ4, "НомСчФИнфПр") Тогда
			РеквизитыДокумента.НомерФайлаПродавца= ФайлXDTO.ИнфПок.СодФХЖ4.НомСчФИнфПр;
		КонецЕсли;
		
		РеквизитыДокумента.ДатаФайлаПродавца     = ДатаИзСтрокиЭД(ФайлXDTO.ИнфПок.СодФХЖ4.ДатаСчФИнфПр);

		Если ФайлXDTO.ИнфПок.СодФХЖ4.СвПрин <> Неопределено Тогда
			СведенияПринимающейСтороны = РеквизитыДокумента.СведенияПринимающейСтороны;
			Если ЕстьСвойство(ФайлXDTO.ИнфПок.СодФХЖ4.СвПрин, "ДатаПрин") Тогда
				СведенияПринимающейСтороны.ДатаПолучения = ДатаИзСтрокиЭД(ФайлXDTO.ИнфПок.СодФХЖ4.СвПрин.ДатаПрин);	
			КонецЕсли;
			Если ЕстьСвойство(ФайлXDTO.ИнфПок.СодФХЖ4.СвПрин, "СвЛицПрин") Тогда
				СведенияПолучателя = ФайлXDTO.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин;
				Если СведенияПолучателя <> Неопределено Тогда
					Если ЕстьСвойство(СведенияПолучателя, "РабОргПок")
						И СведенияПолучателя.РабОргПок <> Неопределено Тогда			
						ЗаполнитьФИО(СведенияПринимающейСтороны, СведенияПолучателя.РабОргПок.ФИО);
						СведенияПринимающейСтороны.Должность = СведенияПолучателя.РабОргПок.Должность;
						СведенияПринимающейСтороны.ОснованиеПолномочий = СведенияПолучателя.РабОргПок.ОснПолн;
					Иначе
						Если ЕстьСвойство(СведенияПолучателя.ИнЛицо, "ПредОргПрин")
							И СведенияПолучателя.ИнЛицо.ПредОргПрин <> Неопределено Тогда
							ЗаполнитьФИО(СведенияПринимающейСтороны, СведенияПолучателя.ИнЛицо.ПредОргПрин.ФИО);
							СведенияПринимающейСтороны.Должность = СведенияПолучателя.ИнЛицо.ПредОргПрин.Должность;
							Если ЕстьСвойство(СведенияПолучателя.ИнЛицо.ПредОргПрин, "ОснПолнПредПрин") Тогда
								СведенияПринимающейСтороны.ОснованиеПолномочий = СведенияПолучателя.ИнЛицо.ПредОргПрин.ОснПолнПредПрин;
							КонецЕсли;	
						Иначе
							ЗаполнитьФИО(СведенияПринимающейСтороны, СведенияПолучателя.ИнЛицо.ФЛПрин.ФИО);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыТитулаПокупателяУПД2019(РеквизитыДокумента, ТекстФайла) 
	
	РеквизитыДокумента = СтруктураРеквизитовТитула();
	ПространствоИмен = "ON_NSCHFDOPPOK_1_997_02_05_01_01";
	ФайлXDTO = ПрочитатьXMLФайл(ТекстФайла, ПространствоИмен, "Файл");
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД", 
		ФайлXDTO.ИдФайл, ФайлXDTO.ВерсФорм, ФайлXDTO.ВерсПрог, ФайлXDTO.ИнфПок.КНД);
	РеквизитыДокумента.ФорматДокумента = ФорматДокумента;
	
	РеквизитыДокумента.Дата = ДатаИзСтрокиЭД(ФайлXDTO.ИнфПок.ДатаИнфПок);
	ЗаполнитьСведенияОбУчастникахЭДО(ФайлXDTO.СвУчДокОбор, РеквизитыДокумента);
	
	РеквизитыДокумента.ИдентификаторФайлаПродавца = ФайлXDTO.ИнфПок.ИдИнфПрод.ИдФайлИнфПр;
	РеквизитыДокумента.СоставительДокумента = ФайлXDTO.ИнфПок.НаимЭконСубСост;	
	Если ФайлXDTO.ИнфПок.Подписант <> Неопределено Тогда
		Подписанты = ПодписантыУПД(ФайлXDTO.ИнфПок.Подписант);
		РеквизитыДокумента.Вставить("Подписанты", Подписанты);
	КонецЕсли;
	
	Если ФайлXDTO.ИнфПок.СодФХЖ4 <> Неопределено Тогда
		
		Если ЕстьСвойство(ФайлXDTO.ИнфПок.СодФХЖ4, "НомСчФИнфПр") Тогда
			РеквизитыДокумента.НомерФайлаПродавца= ФайлXDTO.ИнфПок.СодФХЖ4.НомСчФИнфПр;
		КонецЕсли;
		
		РеквизитыДокумента.ДатаФайлаПродавца     = ДатаИзСтрокиЭД(ФайлXDTO.ИнфПок.СодФХЖ4.ДатаСчФИнфПр);

		Если ФайлXDTO.ИнфПок.СодФХЖ4.СвПрин <> Неопределено Тогда
			СведенияПринимающейСтороны = РеквизитыДокумента.СведенияПринимающейСтороны;
			Если ЕстьСвойство(ФайлXDTO.ИнфПок.СодФХЖ4.СвПрин, "ДатаПрин") Тогда
				СведенияПринимающейСтороны.ДатаПолучения = ДатаИзСтрокиЭД(ФайлXDTO.ИнфПок.СодФХЖ4.СвПрин.ДатаПрин);	
			КонецЕсли;
			Если ЕстьСвойство(ФайлXDTO.ИнфПок.СодФХЖ4.СвПрин, "СвЛицПрин") Тогда
				СведенияПолучателя = ФайлXDTO.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин;
				Если СведенияПолучателя <> Неопределено Тогда
					Если ЕстьСвойство(СведенияПолучателя, "РабОргПок")
						И СведенияПолучателя.РабОргПок <> Неопределено Тогда			
						ЗаполнитьФИО(СведенияПринимающейСтороны, СведенияПолучателя.РабОргПок.ФИО);
						СведенияПринимающейСтороны.Должность = СведенияПолучателя.РабОргПок.Должность;
						СведенияПринимающейСтороны.ОснованиеПолномочий = СведенияПолучателя.РабОргПок.ОснПолн;
					Иначе
						Если ЕстьСвойство(СведенияПолучателя.ИнЛицо, "ПредОргПрин")
							И СведенияПолучателя.ИнЛицо.ПредОргПрин <> Неопределено Тогда
							ЗаполнитьФИО(СведенияПринимающейСтороны, СведенияПолучателя.ИнЛицо.ПредОргПрин.ФИО);
							СведенияПринимающейСтороны.Должность = СведенияПолучателя.ИнЛицо.ПредОргПрин.Должность;
							Если ЕстьСвойство(СведенияПолучателя.ИнЛицо.ПредОргПрин, "ОснПолнПредПрин") Тогда
								СведенияПринимающейСтороны.ОснованиеПолномочий = СведенияПолучателя.ИнЛицо.ПредОргПрин.ОснПолнПредПрин;
							КонецЕсли;	
						Иначе
							ЗаполнитьФИО(СведенияПринимающейСтороны, СведенияПолучателя.ИнЛицо.ФЛПрин.ФИО);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыТитулаПокупателяУКД(РеквизитыДокумента, ТекстФайла) 
	
	РеквизитыДокумента = СтруктураРеквизитовТитула();
	ПространствоИмен = "http://api-invoice.taxcom.ru/ON_KORSCHFDOPPOK_05_01";
	ФайлXDTO = ПрочитатьXMLФайл(ТекстФайла, ПространствоИмен, "Файл");
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД", 
		ФайлXDTO.ИдФайл, ФайлXDTO.ВерсФорм, ФайлXDTO.ВерсПрог, ФайлXDTO.ИнфПок.КНД);
	РеквизитыДокумента.ФорматДокумента = ФорматДокумента;
	
	РеквизитыДокумента.Дата = ДатаИзСтрокиЭД(ФайлXDTO.ИнфПок.ДатаИнфПок);
	ЗаполнитьСведенияОбУчастникахЭДО(ФайлXDTO.СвУчДокОбор, РеквизитыДокумента);
	
	РеквизитыДокумента.ИдентификаторФайлаПродавца = ФайлXDTO.ИнфПок.ИдИнфПрод.ИдФайлИнфПр;
	
	РеквизитыДокумента.СоставительДокумента = ФайлXDTO.ИнфПок.НаимЭконСубСост;	

	Если ФайлXDTO.ИнфПок.Подписант <> Неопределено Тогда
		Подписанты = ПодписантыУПД(ФайлXDTO.ИнфПок.Подписант);
		РеквизитыДокумента.Вставить("Подписанты", Подписанты);
	КонецЕсли;
	
	Если ФайлXDTO.ИнфПок.СодФХЖ4 <> Неопределено Тогда
		
		Если ЕстьСвойство(ФайлXDTO.ИнфПок.СодФХЖ4, "НомДокИнфПр") Тогда
			РеквизитыДокумента.НомерФайлаПродавца = ФайлXDTO.ИнфПок.СодФХЖ4.НомДокИнфПр;
		КонецЕсли;
		
		РеквизитыДокумента.ДатаФайлаПродавца     = ДатаИзСтрокиЭД(ФайлXDTO.ИнфПок.СодФХЖ4.ДатаДокИнфПр);

		РеквизитыДокумента.СведенияПринимающейСтороны.Вставить("СодержаниеОперации", ФайлXDTO.ИнфПок.СодФХЖ4.СвСоглас.СодОпер);
		
		Если ЕстьСвойство(ФайлXDTO.ИнфПок.СодФХЖ4.СвСоглас, "ДатаСоглас") Тогда
			РеквизитыДокумента.СведенияПринимающейСтороны.ДатаПолучения = ДатаИзСтрокиЭД(ФайлXDTO.ИнфПок.СодФХЖ4.СвСоглас.ДатаСоглас);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыТитулаПокупателяПередачиТоваров(РеквизитыДокумента, ТекстФайла) 
	
	РеквизитыДокумента = СтруктураРеквизитовТитула();
	ПространствоИмен = "http://api-invoice.taxcom.ru/DP_TOVTORGPOK_05_01";
	ФайлXDTO = ПрочитатьXMLФайл(ТекстФайла, ПространствоИмен, "Файл");
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД", 
		ФайлXDTO.ИдФайл, ФайлXDTO.ВерсФорм, ФайлXDTO.ВерсПрог, ФайлXDTO.Документ.КНД);
	РеквизитыДокумента.ФорматДокумента = ФорматДокумента;
	
	РеквизитыДокумента.Дата = ДатаИзСтрокиЭД(ФайлXDTO.Документ.ДатаИнфПок);
	ЗаполнитьСведенияОбУчастникахЭДО(ФайлXDTO.СвУчДокОбор, РеквизитыДокумента);
	
	РеквизитыДокумента.ИдентификаторФайлаПродавца = ФайлXDTO.Документ.ИдДокПТПр.ИдФайлИнфПр;

КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыТитулаЗаказчикаПередачиРабот(РеквизитыДокумента, ТекстФайла) 
	
	РеквизитыДокумента = СтруктураРеквизитовТитула();
	ПространствоИмен = "http://api-invoice.taxcom.ru/DP_REZRUZAK_05_01";
	ФайлXDTO = ПрочитатьXMLФайл(ТекстФайла, ПространствоИмен, "Файл");
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД", 
		ФайлXDTO.ИдФайл, ФайлXDTO.ВерсФорм, ФайлXDTO.ВерсПрог, ФайлXDTO.Документ.КНД);
	РеквизитыДокумента.ФорматДокумента = ФорматДокумента;
	
	РеквизитыДокумента.Дата = ДатаИзСтрокиЭД(ФайлXDTO.Документ.ДатаИнфЗак);
	ЗаполнитьСведенияОбУчастникахЭДО(ФайлXDTO.СвУчДокОбор, РеквизитыДокумента);
	
	РеквизитыДокумента.ИдентификаторФайлаПродавца = ФайлXDTO.Документ.ИдДокПРУИсп.ИдФайлИнфИсп;
	
	Если ФайлXDTO.Документ.Подписант <> Неопределено Тогда
		Подписанты = ПодписантыУПД(ФайлXDTO.Документ.Подписант);
		РеквизитыДокумента.Вставить("Подписанты", Подписанты);
	КонецЕсли;

КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыКарточкиДокументаТХЦ(РеквизитыДокумента, ТекстФайла) 
	
	РеквизитыДокумента = СтруктураРеквизитовКарточкиДокументаТХЦ();
	ПространствоИмен = "http://api-invoice.taxcom.ru/card";
	ФайлXDTO = ПрочитатьXMLФайл(ТекстФайла, ПространствоИмен, "Card");
	
	Если ФайлXDTO.Свойства().Получить("Description") <> Неопределено Тогда
		Если ФайлXDTO.Description.Свойства().Получить("Comment")<>Неопределено Тогда
			РеквизитыДокумента.Комментарий = ФайлXDTO.Description.Comment;
		Конецесли;
		РеквизитыДокумента.Дата = ДатаИзСтрокиТХЦ(ФайлXDTO.Description.Date);
		
		Если ФайлXDTO.Description.Свойства().Получить("Title") <>Неопределено тогда
		
			РеквизитыДокумента.Заголовок = ФайлXDTO.Description.Title;
		КонецЕсли;		
		Если ФайлXDTO.Description.Свойства().Получить("AdditionalData") <> Неопределено Тогда
			ДополнительныеСведения = Новый Массив;
			Если ТипЗнч(ФайлXDTO.Description.AdditionalData.AdditionalParameter)=Тип("СписокXDTO") Тогда
				Для Каждого Элемент Из ФайлXDTO.Description.AdditionalData.AdditionalParameter Цикл
					ДополнительныеСведения.Добавить(Новый Структура("Имя, Значение", Элемент.Name, Элемент.Value));
				КонецЦикла;
			Иначе
				Элемент=ФайлXDTO.Description.AdditionalData.AdditionalParameter;
					ДополнительныеСведения.Добавить(Новый Структура("Имя, Значение", Элемент.Name, Элемент.Value));
				
			КонецЕсли;
			РеквизитыДокумента.ДополнительныеСведения = ДополнительныеСведения;
		КонецЕсли; 
	КонецЕсли;
	
	Если ФайлXDTO.Свойства().Получить("Identifiers") <> Неопределено Тогда
		Если ФайлXDTO.Identifiers.Свойства().Получить("ExternalDocumentGroupIdentifier")<>Неопределено тогда
			РеквизитыДокумента.Идентификаторы.ExternalDocumentGroupIdentifier = ФайлXDTO.Identifiers.ExternalDocumentGroupIdentifier;
		КонецЕсли;
		Если ФайлXDTO.Identifiers.Свойства().Получить("ExternalIdentifier")<>Неопределено тогда
			РеквизитыДокумента.Идентификаторы.ExternalIdentifier = ФайлXDTO.Identifiers.ExternalIdentifier;
		КонецЕсли;
		Если ФайлXDTO.Identifiers.Свойства().Получить("InternalDocumentGroupId")<>Неопределено тогда
			РеквизитыДокумента.Идентификаторы.InternalDocumentGroupId = ФайлXDTO.Identifiers.InternalDocumentGroupId;
		КонецЕсли;
		Если ФайлXDTO.Identifiers.Свойства().Получить("InternalId")<>Неопределено тогда
			РеквизитыДокумента.Идентификаторы.InternalId = ФайлXDTO.Identifiers.InternalId;
		КонецЕсли;
		Если ФайлXDTO.Identifiers.Свойства().Получить("ParentDocumentExternalIdentifier")<>Неопределено тогда
			РеквизитыДокумента.Идентификаторы.ParentDocumentExternalIdentifier = ФайлXDTO.Identifiers.ParentDocumentExternalIdentifier;
		КонецЕсли;
		Если ФайлXDTO.Identifiers.Свойства().Получить("ParentDocumentInternalId")<>Неопределено тогда
			РеквизитыДокумента.Идентификаторы.ParentDocumentInternalId = ФайлXDTO.Identifiers.ParentDocumentInternalId;
		КонецЕсли;
	КонецЕсли;
	
	Если ФайлXDTO.Свойства().Получить("Type") <> Неопределено Тогда
		 РеквизитыДокумента.ТипДокумента = ФайлXDTO.Type.Name;
		 РеквизитыДокумента.ЗапрошенаОтветнаяПодпись = ФайлXDTO.Type.ResignRequired;
	КонецЕсли;
	
	Если ФайлXDTO.Свойства().Получить("Sender") <> Неопределено Тогда
		Если ФайлXDTO.Sender.Свойства().Получить("Отправитель") <> Неопределено Тогда
			Отправитель = ФайлXDTO.Sender.Abonent;
			РеквизитыДокумента.Отправитель.АбонентИдентификатор = Отправитель.Id;
			РеквизитыДокумента.Отправитель.АбонентНаименование = Отправитель.Name;
			РеквизитыДокумента.Отправитель.АбонентИНН = Отправитель.Inn;
			РеквизитыДокумента.Отправитель.АбонентКПП = Отправитель.Kpp;
			РеквизитыДокумента.Отправитель.АбонентНомерДоговора = Отправитель.ContractNumber;
		КонецЕсли; 
		
		Если ФайлXDTO.Sender.Свойства().Получить("Organization") <> Неопределено Тогда
			РеквизитыДокумента.Отправитель.ОрганизацияНаименование = ФайлXDTO.Sender.Organization.Name;
			РеквизитыДокумента.Отправитель.ОрганизацияТип = ФайлXDTO.Sender.Organization.Type;
		КонецЕсли; 
	КонецЕсли;
	
	Если ФайлXDTO.Свойства().Получить("Receiver") <> Неопределено Тогда
		Если ФайлXDTO.Receiver.Свойства().ПолучитЬ("Получатель") <> Неопределено Тогда
			Получатель = ФайлXDTO.Receiver.Abonent;
			РеквизитыДокумента.Получатель.АбонентИдентификатор = Получатель.Id;
			РеквизитыДокумента.Получатель.АбонентНаименование = Получатель.Name;
			РеквизитыДокумента.Получатель.АбонентИНН = Получатель.Inn;
			РеквизитыДокумента.Получатель.АбонентКПП = Получатель.Kpp;
			РеквизитыДокумента.Получатель.АбонентНомерДоговора = Получатель.ContractNumber;
		КонецЕсли; 
		
		Если ФайлXDTO.Receiver.Свойства().Получить("Organization") <> Неопределено Тогда
			РеквизитыДокумента.Получатель.ОрганизацияНаименование = ФайлXDTO.Receiver.Organization.Name;
			РеквизитыДокумента.Получатель.ОрганизацияТип = ФайлXDTO.Receiver.Organization.Type;
		КонецЕсли; 
	КонецЕсли;
	
	Если ФайлXDTO.Свойства().Получить("Signers") <> Неопределено Тогда
		Если ФайлXDTO.Signers.Свойства().Получить("Signer") <> Неопределено Тогда
			Если ФайлXDTO.Signers.Signer.Свойства().Получить("Person") <> Неопределено Тогда
				РеквизитыДокумента.Подписант.Имя = ФайлXDTO.Signers.Signer.Person.FirstName;
				РеквизитыДокумента.Подписант.Фамилия = ФайлXDTO.Signers.Signer.Person.LastName;
				
				Patronimic="";
				Если ФайлXDTO.Signers.Signer.Person.Свойства().Получить("Patronimic")<>Неопределено Тогда
					//Участник.ИдСв.СвИП.ФИО.Отчество;
					Patronimic=ФайлXDTO.Signers.Signer.Person.Patronimic;
				конецЕсли;
				

				РеквизитыДокумента.Подписант.Отчество = Patronimic;
				РеквизитыДокумента.Подписант.ИНН = ФайлXDTO.Signers.Signer.Person.Inn;
			КонецЕсли; 
			Если ФайлXDTO.Signers.Signer.Свойства().Получить("Certificate") <> Неопределено Тогда
				РеквизитыДокумента.Подписант.ОтпечатокСертификата = ФайлXDTO.Signers.Signer.Certificate.Thumbprint;
				РеквизитыДокумента.Подписант.СерийныйНомер = ФайлXDTO.Signers.Signer.Certificate.SerialNumber;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыКнигиПокупок(РеквизитыДокумента, ТекстФайла) Экспорт
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД");
	РеквизитыДокумента.Вставить("ФорматДокумента", ФорматДокумента);
	
	СведенияОПокупках = ТаблицаСведенияОПокупках();

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстФайла);
	
	Пока Истина Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧитатьСледующий = Ложь;
		Иначе
			ЧитатьСледующий = Истина;
		КонецЕсли;
		
		Если ЧитатьСледующий Тогда
			Если ЧтениеXML.Прочитать() = Ложь Тогда
				Прервать;
			КонецЕсли; 
		КонецЕсли; 
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "СвПокупка" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			НоваяСтрока = СведенияОПокупках.Добавить();
			ЗаполнитьСведенияОПокупке(НоваяСтрока, ОбъектXDTO);
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "СвПокуп" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			Если ЕстьСвойство(ОбъектXDTO, "СведЮЛ") Тогда
				ЗаполнитьСвойство(РеквизитыДокумента, "НаименованиеОрганизации", ОбъектXDTO.СведЮЛ, "НаимОрг");
				ЗаполнитьСвойство(РеквизитыДокумента, "ИННОрганизации", ОбъектXDTO.СведЮЛ, "ИННЮЛ");
				ЗаполнитьСвойство(РеквизитыДокумента, "КППОрганизации", ОбъектXDTO.СведЮЛ, "КПП");
			ИначеЕсли ЕстьСвойство(ОбъектXDTO, "СведИП") Тогда
				ЗаполнитьСвойство(РеквизитыДокумента, "ИННФЛ", ОбъектXDTO.СведИП, "ИННФЛ");
				ЗаполнитьСвойство(РеквизитыДокумента, "Свидетельство", ОбъектXDTO.СведИП, "СвГосРегИП");
				Если ЕстьСвойство(ОбъектXDTO.СведИП, "ФИОИП") Тогда
					ЗаполнитьСвойство(РеквизитыДокумента, "Фамилия", ОбъектXDTO.СведИП.ФИОИП, "Фамилия");
					ЗаполнитьСвойство(РеквизитыДокумента, "Имя", ОбъектXDTO.СведИП.ФИОИП, "Имя");
					ЗаполнитьСвойство(РеквизитыДокумента, "Отчество", ОбъектXDTO.СведИП.ФИОИП, "Отчество");
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Файл" Тогда
			Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ЧтениеXML.Имя = "ИдФайл" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("Идентификатор", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "ВерсФорм" Тогда
						Версия = ЧтениеXML.Значение;
						Версия = СтрЗаменить(Версия, ",", ".");
						РеквизитыДокумента.ФорматДокумента.Вставить("Версия", Версия);
					ИначеЕсли ЧтениеXML.Имя = "ВерсПрог" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("ВерсияПрограммы", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "ИдФайлИсх" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("ИдентификаторИсходногоФайла", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "ИдФайлПерв" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("ИдентификаторПервогоФайла", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "КолФайл" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("КоличествоФайлов", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "НомФайл" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("НомерТекущегоФайла", ЧтениеXML.Значение);
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли; 
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Документ" Тогда
			Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ЧтениеXML.Имя = "КНД" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("КодПоКНД", ЧтениеXML.Значение);
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли; 
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "СвКнПок" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаполнитьСвойство(РеквизитыДокумента, "Период", ОбъектXDTO, "Период");
			ЗаполнитьСвойство(РеквизитыДокумента, "ОтчетГод", ОбъектXDTO, "ОтчетГод");
			Если ЕстьСвойство(ОбъектXDTO, "Всего") Тогда
				ЗаполнитьСвойство(РеквизитыДокумента, "Всего", ОбъектXDTO.Всего, "СумНДСВыч");
			КонецЕсли; 
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Подписант" Тогда
			Подписант = Новый Структура;
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаполнитьСвойство(Подписант, "ПризнакЛицаПодписывающегоДокумент", ОбъектXDTO, "ПрПодп");
			Если ЕстьСвойство(ОбъектXDTO, "ФИО") Тогда
				ЗаполнитьСвойство(Подписант, "Фамилия", ОбъектXDTO.ФИО, "Фамилия");
				ЗаполнитьСвойство(Подписант, "Имя", ОбъектXDTO.ФИО, "Имя");
				ЗаполнитьСвойство(Подписант, "Отчество", ОбъектXDTO.ФИО, "Отчество");
			КонецЕсли; 
			Если ЕстьСвойство(ОбъектXDTO, "СвПред") Тогда
				ЗаполнитьСвойство(Подписант, "НаименованиеДокументаПодтверждающегоПолномочия", ОбъектXDTO.СвПред, "НаимДок");
			КонецЕсли; 
			РеквизитыДокумента.Вставить("Подписант", Подписант);
		КонецЕсли; 
	КонецЦикла;
	ЧтениеXML.Закрыть();
	РеквизитыДокумента.Вставить("СведенияОПокупках", СведенияОПокупках);

КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыКнигиПродаж(РеквизитыДокумента, ТекстФайла) Экспорт
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД");
	РеквизитыДокумента.Вставить("ФорматДокумента", ФорматДокумента);
	
	СведенияОПродажах = ТаблицаСведенияОПродажах();

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстФайла);
	
	Пока Истина Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧитатьСледующий = Ложь;
		Иначе
			ЧитатьСледующий = Истина;
		КонецЕсли;
		
		Если ЧитатьСледующий Тогда
			Если ЧтениеXML.Прочитать() = Ложь Тогда
				Прервать;
			КонецЕсли; 
		КонецЕсли; 
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "СвПродаж" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			НоваяСтрока = СведенияОПродажах.Добавить();
			ЗаполнитьСведенияОПродаже(НоваяСтрока, ОбъектXDTO);
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "СвПродав" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			Если ЕстьСвойство(ОбъектXDTO, "СведЮЛ") Тогда
				ЗаполнитьСвойство(РеквизитыДокумента, "НаименованиеОрганизации", ОбъектXDTO.СведЮЛ, "НаимОрг");
				ЗаполнитьСвойство(РеквизитыДокумента, "ИННОрганизации", ОбъектXDTO.СведЮЛ, "ИННЮЛ");
				ЗаполнитьСвойство(РеквизитыДокумента, "КППОрганизации", ОбъектXDTO.СведЮЛ, "КПП");
			ИначеЕсли ЕстьСвойство(ОбъектXDTO, "СведИП") Тогда
				ЗаполнитьСвойство(РеквизитыДокумента, "ИННФЛ", ОбъектXDTO.СведИП, "ИННФЛ");
				ЗаполнитьСвойство(РеквизитыДокумента, "Свидетельство", ОбъектXDTO.СведИП, "СвГосРегИП");
				Если ЕстьСвойство(ОбъектXDTO.СведИП, "ФИОИП") Тогда
					ЗаполнитьСвойство(РеквизитыДокумента, "Фамилия", ОбъектXDTO.СведИП.ФИОИП, "Фамилия");
					ЗаполнитьСвойство(РеквизитыДокумента, "Имя", ОбъектXDTO.СведИП.ФИОИП, "Имя");
					ЗаполнитьСвойство(РеквизитыДокумента, "Отчество", ОбъектXDTO.СведИП.ФИОИП, "Отчество");
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Файл" Тогда
			Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ЧтениеXML.Имя = "ИдФайл" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("Идентификатор", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "ВерсФорм" Тогда
						Версия = ЧтениеXML.Значение;
						Версия = СтрЗаменить(Версия, ",", ".");
						РеквизитыДокумента.ФорматДокумента.Вставить("Версия", Версия);
					ИначеЕсли ЧтениеXML.Имя = "ВерсПрог" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("ВерсияПрограммы", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "ИдФайлИсх" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("ИдентификаторИсходногоФайла", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "ИдФайлПерв" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("ИдентификаторПервогоФайла", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "КолФайл" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("КоличествоФайлов", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "НомФайл" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("НомерТекущегоФайла", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "ВерсПрог" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("ВерсияПрограммы", ЧтениеXML.Значение);
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли; 
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Документ" Тогда
			Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ЧтениеXML.Имя = "КНД" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("КодПоКНД", ЧтениеXML.Значение);
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли; 
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "СвКнПрод" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаполнитьСвойство(РеквизитыДокумента, "Период", ОбъектXDTO, "Период");
			ЗаполнитьСвойство(РеквизитыДокумента, "ОтчетГод", ОбъектXDTO, "ОтчетГод");
			Если ЕстьСвойство(ОбъектXDTO, "Всего") Тогда
				ЗаполнитьСвойство(РеквизитыДокумента, "ВсегоПоСтавке18", ОбъектXDTO.Всего, "СтТовРубКоп18");
				ЗаполнитьСвойство(РеквизитыДокумента, "ВсегоПоСтавке10", ОбъектXDTO.Всего, "СтТовРубКоп10");
				ЗаполнитьСвойство(РеквизитыДокумента, "ВсегоПоСтавке0", ОбъектXDTO.Всего, "СтТовРубКоп0");
				ЗаполнитьСвойство(РеквизитыДокумента, "ВсегоНДСПоСтавке18", ОбъектXDTO.Всего, "СумНДСРубКоп18");
				ЗаполнитьСвойство(РеквизитыДокумента, "ВсегоНДСПоСтавке10", ОбъектXDTO.Всего, "СумНДСРубКоп10");
				ЗаполнитьСвойство(РеквизитыДокумента, "ВсегоБезНДС", ОбъектXDTO.Всего, "СтПродОсвНДСРубКоп");
			КонецЕсли; 
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Подписант" Тогда
			Подписант = Новый Структура;
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаполнитьСвойство(Подписант, "ПризнакЛицаПодписывающегоДокумент", ОбъектXDTO, "ПрПодп");
			Если ЕстьСвойство(ОбъектXDTO, "ФИО") Тогда
				ЗаполнитьСвойство(Подписант, "Фамилия", ОбъектXDTO.ФИО, "Фамилия");
				ЗаполнитьСвойство(Подписант, "Имя", ОбъектXDTO.ФИО, "Имя");
				ЗаполнитьСвойство(Подписант, "Отчество", ОбъектXDTO.ФИО, "Отчество");
			КонецЕсли; 
			Если ЕстьСвойство(ОбъектXDTO, "СвПред") Тогда
				ЗаполнитьСвойство(Подписант, "НаименованиеДокументаПодтверждающегоПолномочия", ОбъектXDTO.СвПред, "НаимДок");
			КонецЕсли; 
			РеквизитыДокумента.Вставить("Подписант", Подписант);
		КонецЕсли; 
	КонецЦикла;
	ЧтениеXML.Закрыть();
	РеквизитыДокумента.Вставить("СведенияОПродажах", СведенияОПродажах);

КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыДополнительногоЛистаКнигиПокупок(РеквизитыДокумента, ТекстФайла) Экспорт
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД");
	РеквизитыДокумента.Вставить("ФорматДокумента", ФорматДокумента);
	РеквизитыДокумента.ФорматДокумента.Вставить("КодПоКНД", "1115105");
	
	РеквизитыДокумента.Вставить("ДополнительныеЛисты", Новый Массив);
	
	СведенияОПокупках = ТаблицаСведенияОПокупках();
	ДополнительныйЛист = Новый Структура;

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстФайла);
	
	Пока Истина Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧитатьСледующий = Ложь;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "Документ" Тогда
			ДополнительныйЛист.Вставить("СведенияОПокупках", СведенияОПокупках);
			РеквизитыДокумента.ДополнительныеЛисты.Добавить(ДополнительныйЛист);
			ДополнительныйЛист = Новый Структура;
			СведенияОПокупках = ТаблицаСведенияОПокупках();
			ЧитатьСледующий = Истина;
		Иначе
			ЧитатьСледующий = Истина;
		КонецЕсли;
		
		Если ЧитатьСледующий Тогда
			Если ЧтениеXML.Прочитать() = Ложь Тогда
				Прервать;
			КонецЕсли; 
		КонецЕсли; 
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "СвПокупка" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			НоваяСтрока = СведенияОПокупках.Добавить();
			ЗаполнитьСведенияОПокупке(НоваяСтрока, ОбъектXDTO);
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "СвПокуп" Тогда
			
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			Если ЕстьСвойство(ОбъектXDTO, "СведЮЛ") Тогда
				ЗаполнитьСвойство(ДополнительныйЛист, "НаименованиеОрганизации", ОбъектXDTO.СведЮЛ, "НаимОрг");
				ЗаполнитьСвойство(ДополнительныйЛист, "ИННОрганизации", ОбъектXDTO.СведЮЛ, "ИННЮЛ");
				ЗаполнитьСвойство(ДополнительныйЛист, "КППОрганизации", ОбъектXDTO.СведЮЛ, "КПП");
			ИначеЕсли ЕстьСвойство(ОбъектXDTO, "СведИП") Тогда
				ЗаполнитьСвойство(ДополнительныйЛист, "ИННФЛ", ОбъектXDTO.СведИП, "ИННФЛ");
				ЗаполнитьСвойство(ДополнительныйЛист, "Свидетельство", ОбъектXDTO.СведИП, "СвГосРегИП");
				Если ЕстьСвойство(ОбъектXDTO.СведИП, "ФИОИП") Тогда
					ЗаполнитьСвойство(ДополнительныйЛист, "Фамилия", ОбъектXDTO.СведИП.ФИОИП, "Фамилия");
					ЗаполнитьСвойство(ДополнительныйЛист, "Имя", ОбъектXDTO.СведИП.ФИОИП, "Имя");
					ЗаполнитьСвойство(ДополнительныйЛист, "Отчество", ОбъектXDTO.СведИП.ФИОИП, "Отчество");
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Файл" Тогда
			Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ЧтениеXML.Имя = "ИдФайл" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("Идентификатор", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "ВерсФорм" Тогда
						Версия = ЧтениеXML.Значение;
						Версия = СтрЗаменить(Версия, ",", ".");
						РеквизитыДокумента.ФорматДокумента.Вставить("Версия", Версия);
					ИначеЕсли ЧтениеXML.Имя = "ВерсПрог" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("ВерсияПрограммы", ЧтениеXML.Значение);
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли; 
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Документ" Тогда
			Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ЧтениеXML.Имя = "КНД" Тогда
						ДополнительныйЛист.Вставить("КодПоКНД", ЧтениеXML.Значение);
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли; 
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "СвДопЛКнПок" Тогда
			
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаполнитьСвойство(ДополнительныйЛист, "НомерДополнительногоЛиста", ОбъектXDTO, "НомерДопЛКнПок");
			ЗаполнитьСвойство(ДополнительныйЛист, "ДатаДополнительногоЛиста", ОбъектXDTO, "ДатаДопЛКнПок");
			ЗаполнитьСвойство(ДополнительныйЛист, "Период", ОбъектXDTO, "Период");
			ЗаполнитьСвойство(ДополнительныйЛист, "ОтчетГод", ОбъектXDTO, "ОтчетГод");
			
			Если ЕстьСвойство(ОбъектXDTO, "Всего") Тогда
				ЗаполнитьСвойство(ДополнительныйЛист, "Всего", ОбъектXDTO.Всего, "СумНДСВыч");
			КонецЕсли; 
			Если ЕстьСвойство(ОбъектXDTO, "Итого") Тогда
				ЗаполнитьСвойство(ДополнительныйЛист, "Итого", ОбъектXDTO.Итого, "СумНДСВыч");
			КонецЕсли; 
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Подписант" Тогда
			
			Подписант = Новый Структура;
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаполнитьСвойство(Подписант, "ПризнакЛицаПодписывающегоДокумент", ОбъектXDTO, "ПрПодп");
			Если ЕстьСвойство(ОбъектXDTO, "ФИО") Тогда
				ЗаполнитьСвойство(Подписант, "Фамилия", ОбъектXDTO.ФИО, "Фамилия");
				ЗаполнитьСвойство(Подписант, "Имя", ОбъектXDTO.ФИО, "Имя");
				ЗаполнитьСвойство(Подписант, "Отчество", ОбъектXDTO.ФИО, "Отчество");
			КонецЕсли; 
			Если ЕстьСвойство(ОбъектXDTO, "СвПред") Тогда
				ЗаполнитьСвойство(Подписант, "НаименованиеДокументаПодтверждающегоПолномочия", ОбъектXDTO.СвПред, "НаимДок");
			КонецЕсли; 
			ДополнительныйЛист.Вставить("Подписант", Подписант);
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "Документ" Тогда
			ДополнительныйЛист.Вставить("СведенияОПокупках", СведенияОПокупках);
			РеквизитыДокумента.ДополнительныеЛисты.Добавить(ДополнительныйЛист);
			ДополнительныйЛист = Новый Структура;
			СведенияОПокупках = ТаблицаСведенияОПокупках();
		КонецЕсли; 
	КонецЦикла;
	ЧтениеXML.Закрыть();

КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыДополнительногоЛистаКнигиПродаж(РеквизитыДокумента, ТекстФайла) Экспорт
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД");
	РеквизитыДокумента.Вставить("ФорматДокумента", ФорматДокумента);
	РеквизитыДокумента.ФорматДокумента.Вставить("КодПоКНД", "1115106");
	
	РеквизитыДокумента.Вставить("ДополнительныеЛисты", Новый Массив);
	
	СведенияОПродажах = ТаблицаСведенияОПродажах();
	ДополнительныйЛист = Новый Структура;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстФайла);
		
	Пока Истина Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧитатьСледующий = Ложь;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "Документ" Тогда
			ДополнительныйЛист.Вставить("СведенияОПродажах", СведенияОПродажах);
			РеквизитыДокумента.ДополнительныеЛисты.Добавить(ДополнительныйЛист);
			ДополнительныйЛист = Новый Структура;
			СведенияОПродажах = ТаблицаСведенияОПродажах();
			ЧитатьСледующий = Истина;
		Иначе
			ЧитатьСледующий = Истина;
		КонецЕсли;
		
		Если ЧитатьСледующий Тогда
			Если ЧтениеXML.Прочитать() = Ложь Тогда
				Прервать;
			КонецЕсли; 
		КонецЕсли; 
			
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "СвПродаж" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			НоваяСтрока = СведенияОПродажах.Добавить();
			ЗаполнитьСведенияОПродаже(НоваяСтрока, ОбъектXDTO);
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "СвПродав" Тогда
			
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			Если ЕстьСвойство(ОбъектXDTO, "СведЮЛ") Тогда
				ЗаполнитьСвойство(ДополнительныйЛист, "НаименованиеОрганизации", ОбъектXDTO.СведЮЛ, "НаимОрг");
				ЗаполнитьСвойство(ДополнительныйЛист, "ИННОрганизации", ОбъектXDTO.СведЮЛ, "ИННЮЛ");
				ЗаполнитьСвойство(ДополнительныйЛист, "КППОрганизации", ОбъектXDTO.СведЮЛ, "КПП");
			ИначеЕсли ЕстьСвойство(ОбъектXDTO, "СведИП") Тогда
				ЗаполнитьСвойство(ДополнительныйЛист, "ИННФЛ", ОбъектXDTO.СведИП, "ИННФЛ");
				ЗаполнитьСвойство(ДополнительныйЛист, "Свидетельство", ОбъектXDTO.СведИП, "СвГосРегИП");
				Если ЕстьСвойство(ОбъектXDTO.СведИП, "ФИОИП") Тогда
					ЗаполнитьСвойство(ДополнительныйЛист, "Фамилия", ОбъектXDTO.СведИП.ФИОИП, "Фамилия");
					ЗаполнитьСвойство(ДополнительныйЛист, "Имя", ОбъектXDTO.СведИП.ФИОИП, "Имя");
					ЗаполнитьСвойство(ДополнительныйЛист, "Отчество", ОбъектXDTO.СведИП.ФИОИП, "Отчество");
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Файл" Тогда
			Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ЧтениеXML.Имя = "ИдФайл" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("Идентификатор", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "ВерсФорм" Тогда
						Версия = ЧтениеXML.Значение;
						Версия = СтрЗаменить(Версия, ",", ".");
						РеквизитыДокумента.ФорматДокумента.Вставить("Версия", Версия);
					ИначеЕсли ЧтениеXML.Имя = "ВерсПрог" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("ВерсияПрограммы", ЧтениеXML.Значение);
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли; 
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Документ" Тогда
			Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ЧтениеXML.Имя = "КНД" Тогда
						ДополнительныйЛист.Вставить("КодПоКНД", ЧтениеXML.Значение);
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли; 
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "СвДопЛКнПрод" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаполнитьСвойство(ДополнительныйЛист, "НомерДополнительногоЛиста", ОбъектXDTO, "НомерДопЛКнПрод");
			ЗаполнитьСвойство(ДополнительныйЛист, "ДатаДополнительногоЛиста", ОбъектXDTO, "ДатаДопЛКнПрод");
			ЗаполнитьСвойство(ДополнительныйЛист, "Период", ОбъектXDTO, "Период");
			ЗаполнитьСвойство(ДополнительныйЛист, "ОтчетГод", ОбъектXDTO, "ОтчетГод");
			
			Если ЕстьСвойство(ОбъектXDTO, "Всего") Тогда
				ЗаполнитьСвойство(ДополнительныйЛист, "ВсегоПоСтавке18", ОбъектXDTO.Всего, "СтТовРубКоп18");
				ЗаполнитьСвойство(ДополнительныйЛист, "ВсегоПоСтавке10", ОбъектXDTO.Всего, "СтТовРубКоп10");
				ЗаполнитьСвойство(ДополнительныйЛист, "ВсегоПоСтавке0", ОбъектXDTO.Всего, "СтТовРубКоп0");
				ЗаполнитьСвойство(ДополнительныйЛист, "ВсегоНДСПоСтавке18", ОбъектXDTO.Всего, "СумНДСРубКоп18");
				ЗаполнитьСвойство(ДополнительныйЛист, "ВсегоНДСПоСтавке10", ОбъектXDTO.Всего, "СумНДСРубКоп10");
				ЗаполнитьСвойство(ДополнительныйЛист, "ВсегоБезНДС", ОбъектXDTO.Всего, "СтПродОсвНДСРубКоп");
			КонецЕсли; 
			
			Если ЕстьСвойство(ОбъектXDTO, "Итого") Тогда
				ЗаполнитьСвойство(ДополнительныйЛист, "ИтогоПоСтавке18", ОбъектXDTO.Итого, "СтТовРубКоп18");
				ЗаполнитьСвойство(ДополнительныйЛист, "ИтогоПоСтавке10", ОбъектXDTO.Итого, "СтТовРубКоп10");
				ЗаполнитьСвойство(ДополнительныйЛист, "ИтогоПоСтавке0", ОбъектXDTO.Итого, "СтТовРубКоп0");
				ЗаполнитьСвойство(ДополнительныйЛист, "ИтогоНДСПоСтавке18", ОбъектXDTO.Итого, "СумНДСРубКоп18");
				ЗаполнитьСвойство(ДополнительныйЛист, "ИтогоНДСПоСтавке10", ОбъектXDTO.Итого, "СумНДСРубКоп10");
				ЗаполнитьСвойство(ДополнительныйЛист, "ИтогоВсегоБезНДС", ОбъектXDTO.Итого, "СтПродОсвНДСРубКоп");
			КонецЕсли; 

		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Подписант" Тогда
			Подписант = Новый Структура;
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаполнитьСвойство(Подписант, "ПризнакЛицаПодписывающегоДокумент", ОбъектXDTO, "ПрПодп");
			Если ЕстьСвойство(ОбъектXDTO, "ФИО") Тогда
				ЗаполнитьСвойство(Подписант, "Фамилия", ОбъектXDTO.ФИО, "Фамилия");
				ЗаполнитьСвойство(Подписант, "Имя", ОбъектXDTO.ФИО, "Имя");
				ЗаполнитьСвойство(Подписант, "Отчество", ОбъектXDTO.ФИО, "Отчество");
			КонецЕсли; 
			Если ЕстьСвойство(ОбъектXDTO, "СвПред") Тогда
				ЗаполнитьСвойство(Подписант, "НаименованиеДокументаПодтверждающегоПолномочия", ОбъектXDTO.СвПред, "НаимДок");
			КонецЕсли; 
			ДополнительныйЛист.Вставить("Подписант", Подписант);
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "Документ" Тогда
			ДополнительныйЛист.Вставить("СведенияОПродажах", СведенияОПродажах);
			РеквизитыДокумента.ДополнительныеЛисты.Добавить(ДополнительныйЛист);
			ДополнительныйЛист = Новый Структура;
			СведенияОПродажах = ТаблицаСведенияОПродажах();
		КонецЕсли; 
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыЖурналаСчетовФактур(РеквизитыДокумента, ТекстФайла) Экспорт
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД");
	РеквизитыДокумента.Вставить("ФорматДокумента", ФорматДокумента);
		
	СведенияОПродажах = ТаблицаСведенияОПродажах();
	СведенияОПродажах.Колонки.Добавить("СведенияГраф10_19");
	СведенияОПродажах.Колонки.Добавить("КодСпособаВыставления");
		
	СведенияОПокупках = ТаблицаСведенияОПокупках();
	СведенияОПокупках.Колонки.Добавить("КодСпособаВыставления");
	СведенияОПокупках.Колонки.Добавить("ВТомЧислеСуммаНДС");
	СведенияОПокупках.Колонки.Добавить("УменьшениеСтоимостиСУчетомНДСПоКоррСчф");
	СведенияОПокупках.Колонки.Добавить("УвеличениеСтоимостиСУчетомНДСПоКоррСчф");
	СведенияОПокупках.Колонки.Добавить("УменьшениеНДСПоКоррСчф");
	СведенияОПокупках.Колонки.Добавить("УвеличениеНДСПоКоррСчф");
	СведенияОПокупках.Колонки.Добавить("НомераИДатыСчетовФактур");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстФайла);
		
	Пока Истина Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧитатьСледующий = Ложь;
		Иначе
			ЧитатьСледующий = Истина;
		КонецЕсли;
		
		Если ЧитатьСледующий Тогда
			Если ЧтениеXML.Прочитать() = Ложь Тогда
				Прервать;
			КонецЕсли; 
		КонецЕсли; 
			
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "СвЧ1" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			НоваяСтрока = СведенияОПродажах.Добавить();
			ЗаполнитьСведенияОПродажеВЖурналеСчетовФактур(НоваяСтрока, ОбъектXDTO);
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "СвЧ2" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			НоваяСтрока = СведенияОПокупках.Добавить();
			ЗаполнитьСведенияОПокупкеВЖурналеСчетовФактур(НоваяСтрока, ОбъектXDTO);
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "СвНП" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			Если ЕстьСвойство(ОбъектXDTO, "СведЮЛ") Тогда
				ЗаполнитьСвойство(РеквизитыДокумента, "НаименованиеОрганизации", ОбъектXDTO.СведЮЛ, "НаимОрг");
				ЗаполнитьСвойство(РеквизитыДокумента, "ИННОрганизации", ОбъектXDTO.СведЮЛ, "ИННЮЛ");
				ЗаполнитьСвойство(РеквизитыДокумента, "КППОрганизации", ОбъектXDTO.СведЮЛ, "КПП");
			ИначеЕсли ЕстьСвойство(ОбъектXDTO, "СведИП") Тогда
				ЗаполнитьСвойство(РеквизитыДокумента, "ИННФЛ", ОбъектXDTO.СведИП, "ИННФЛ");
				ЗаполнитьСвойство(РеквизитыДокумента, "Свидетельство", ОбъектXDTO.СведИП, "СвГосРегИП");
				Если ЕстьСвойство(ОбъектXDTO.СведИП, "ФИОИП") Тогда
					ЗаполнитьСвойство(РеквизитыДокумента, "Фамилия", ОбъектXDTO.СведИП.ФИОИП, "Фамилия");
					ЗаполнитьСвойство(РеквизитыДокумента, "Имя", ОбъектXDTO.СведИП.ФИОИП, "Имя");
					ЗаполнитьСвойство(РеквизитыДокумента, "Отчество", ОбъектXDTO.СведИП.ФИОИП, "Отчество");
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Файл" Тогда
			Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ЧтениеXML.Имя = "ИдФайл" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("Идентификатор", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "ВерсФорм" Тогда
						Версия = ЧтениеXML.Значение;
						Версия = СтрЗаменить(Версия, ",", ".");
						РеквизитыДокумента.ФорматДокумента.Вставить("Версия", Версия);
					ИначеЕсли ЧтениеXML.Имя = "ВерсПрог" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("ВерсияПрограммы", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "ИдФайлИсх" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("ИдентификаторИсходногоФайла", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "ИдФайлПерв" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("ИдентификаторПервогоФайла", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "КолФайл" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("КоличествоФайлов", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "НомФайл" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("НомерТекущегоФайла", ЧтениеXML.Значение);
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли; 
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Документ" Тогда
			Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ЧтениеXML.Имя = "КНД" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("КодПоКНД", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "Период" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("Период", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "ОтчетГод" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("ОтчетГод", ЧтениеXML.Значение);
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли; 
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Подписант" Тогда
			Подписант = Новый Структура;
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаполнитьСвойство(Подписант, "ПризнакЛицаПодписывающегоДокумент", ОбъектXDTO, "ПрПодп");
			Если ЕстьСвойство(ОбъектXDTO, "ФИО") Тогда
				ЗаполнитьСвойство(Подписант, "Фамилия", ОбъектXDTO.ФИО, "Фамилия");
				ЗаполнитьСвойство(Подписант, "Имя", ОбъектXDTO.ФИО, "Имя");
				ЗаполнитьСвойство(Подписант, "Отчество", ОбъектXDTO.ФИО, "Отчество");
			КонецЕсли; 
			Если ЕстьСвойство(ОбъектXDTO, "СвПред") Тогда
				ЗаполнитьСвойство(Подписант, "НаименованиеДокументаПодтверждающегоПолномочия", ОбъектXDTO.СвПред, "НаимДок");
			КонецЕсли; 
			РеквизитыДокумента.Вставить("Подписант", Подписант);
		КонецЕсли; 
	КонецЦикла;
	РеквизитыДокумента.Вставить("СведенияОПокупках", СведенияОПокупках);
	РеквизитыДокумента.Вставить("СведенияОПродажах", СведенияОПродажах);
	
	ЧтениеXML.Закрыть();

КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыТранзакции_ПДП(РеквизитыДокумента, ТекстФайла) Экспорт
			
	РеквизитыДокумента = СтруктураУведомленияОПолучении();
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТекстФайла);
    ФайлXDTO = ФабрикаXDTO.ПрочитатьXML(Чтение);
	Документ = ФайлXDTO.Документ;
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы", 
		ФайлXDTO.ИдФайл, ФайлXDTO.ВерсФорм, ФайлXDTO.ВерсПрог);
	РеквизитыДокумента.ФорматДокумента = ФорматДокумента;

	// Отправитель
	Если ЕстьСвойство(Документ.ОтпрДок, "ЮЛ")  Тогда
		РеквизитыДокумента.Отправитель = СтрШаблон_Х(НСтр("ru='%1 ИНН/КПП %2/%3'", "ru"),
			Документ.ОтпрДок.ЮЛ.НаимОрг,
			Документ.ОтпрДок.ЮЛ.ИННЮЛ,
			Документ.ОтпрДок.ЮЛ.КПП);
	ИначеЕсли ЕстьСвойство(Документ.ОтпрДок, "ИП")  Тогда	
		РеквизитыДокумента.Отправитель = СтрШаблон_Х(НСтр("ru='%1 ИНН %2'", "ru"),
			ПолучитьПредставлениеФИО(Документ.ОтпрДок.ИП.ФИО),
			Документ.ОтпрДок.ИП.ИННФЛ);
	КонецЕсли;
	
	// Получатель
	Если ЕстьСвойство(Документ.ПолДок, "ЮЛ")  Тогда
		РеквизитыДокумента.Получатель = СтрШаблон_Х(НСтр("ru='%1 ИНН/КПП %2/%3'", "ru"),
			Документ.ПолДок.ЮЛ.НаимОрг,
			Документ.ПолДок.ЮЛ.ИННЮЛ,
			Документ.ПолДок.ЮЛ.КПП);
	ИначеЕсли ЕстьСвойство(Документ.ПолДок, "ИП")  Тогда	
		РеквизитыДокумента.Получатель = СтрШаблон_Х(НСтр("ru='%1 ИНН %2'", "ru"),
			ПолучитьПредставлениеФИО(Документ.ПолДок.ИП.ФИО),
			Документ.ПолДок.ИП.ИННФЛ);
	КонецЕсли;
						
	РеквизитыДокумента.ИдентификаторОтправителя	= Документ.ОтпрДок.ИдУчастЭДО;
	РеквизитыДокумента.ИдентификаторПолучателя	= Документ.ПолДок.ИдУчастЭДО;					
	РеквизитыДокумента.ДатаПолучения            = Документ.СведПодтв.ДатаОтпр;
	РеквизитыДокумента.ВремяПолучения           = СтрЗаменить(Документ.СведПодтв.ВремяОтпр, ".", ":");	
	РеквизитыДокумента.ИмяФайла		            = ВРег(Документ.СведПодтв.СведОтпрФайл.ИмяПостФайла);
	РеквизитыДокумента.Подписант		        = ПолучитьПредставлениеФИО(Документ.Подписант.ФИО);

КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыТранзакции_ИОП(РеквизитыДокумента, ТекстФайла) Экспорт
			
	РеквизитыДокумента = СтруктураУведомленияОПолучении();
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТекстФайла);
	ФайлXDTO = ФабрикаXDTO.ПрочитатьXML(Чтение);
	Документ = ФайлXDTO.Документ;
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы", 
		ФайлXDTO.ИдФайл, ФайлXDTO.ВерсФорм, ФайлXDTO.ВерсПрог);
	РеквизитыДокумента.ФорматДокумента = ФорматДокумента;
	
	// Получатель
	Если ЕстьСвойство(Документ.УчастЭДО, "ЮЛ") Тогда
		РеквизитыДокумента.Получатель = СтрШаблон_Х(НСтр("ru='%1, ИНН/КПП %2/%3'", "ru"),
			Документ.УчастЭДО.ЮЛ.НаимОрг,
			Документ.УчастЭДО.ЮЛ.ИННЮЛ,
			Документ.УчастЭДО.ЮЛ.КПП);
	ИначеЕсли ЕстьСвойство(Документ.УчастЭДО, "ИП") Тогда		
		РеквизитыДокумента.Получатель = СтрШаблон_Х(НСтр("ru='%1, ИНН %2'", "ru"),
			ПолучитьПредставлениеФИО(Документ.УчастЭДО.ИП.ФИО),
			Документ.УчастЭДО.ИП.ИННФЛ);
	КонецЕсли;
	
	// Отправитель
	Если ЕстьСвойство(Документ.ОтпрДок, "ЮЛ") Тогда
		РеквизитыДокумента.Отправитель = СтрШаблон_Х(НСтр("ru='%1, ИНН/КПП %2/%3'", "ru"),
			Документ.ОтпрДок.ЮЛ.НаимОрг,
			Документ.ОтпрДок.ЮЛ.ИННЮЛ,
			Документ.ОтпрДок.ЮЛ.КПП);
	ИначеЕсли ЕстьСвойство(Документ.ОтпрДок, "ИП") Тогда		
		РеквизитыДокумента.Отправитель = СтрШаблон_Х(НСтр("ru='%1, ИНН %2'", "ru"),
			ПолучитьПредставлениеФИО(Документ.ОтпрДок.ИП.ФИО),
			Документ.ОтпрДок.ИП.ИННФЛ);
	ИначеЕсли ЕстьСвойство(Документ.ОтпрДок, "ОперЭДО") Тогда
		РеквизитыДокумента.Отправитель = СтрШаблон_Х(НСтр("ru='%1, ИНН %2'", "ru"),
			Документ.ОтпрДок.ОперЭДО.НаимОрг,
			Документ.ОтпрДок.ОперЭДО.ИННЮЛ);
	КонецЕсли;
	
	РеквизитыДокумента.ИдентификаторПолучателя  = Документ.УчастЭДО.ИдУчастЭДО;
	РеквизитыДокумента.ИдентификаторОтправителя = Документ.ОтпрДок.ИдУчастЭДО;
	
	РеквизитыДокумента.ДатаПолучения  = Документ.СвИзвПолуч.ДатаПол;
	РеквизитыДокумента.ВремяПолучения = СтрЗаменить(Документ.СвИзвПолуч.ВремяПол, ".", ":");
	РеквизитыДокумента.ИмяФайла		  = ВРег(Документ.СвИзвПолуч.СведПолФайл.ИмяПостФайла);

КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыТранзакции_УОУ(РеквизитыДокумента, ТекстФайла) Экспорт
	
	РеквизитыДокумента = СтруктураУведомленияОбУточнении();
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТекстФайла);
    ФайлXDTO = ФабрикаXDTO.ПрочитатьXML(Чтение);
	Документ = ФайлXDTO.Документ;
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы", 
		ФайлXDTO.ИдФайл, ФайлXDTO.ВерсФорм, ФайлXDTO.ВерсПрог);
	РеквизитыДокумента.ФорматДокумента = ФорматДокумента;
	
	// Отправитель
	Если ЕстьСвойство(Документ.УчастЭДО, "ЮЛ") Тогда
		Если ЕстьСвойство(Документ.УчастЭДО.ЮЛ, "КПП") Тогда
			РеквизитыДокумента.Отправитель = ПодставитьПараметрыВСтроку(
												НСтр("ru='%1 ИНН/КПП %2/%3'", "ru"),
												Документ.УчастЭДО.ЮЛ.НаимОрг,
												Документ.УчастЭДО.ЮЛ.ИННЮЛ,
												Документ.УчастЭДО.ЮЛ.КПП);	
		Иначе 
			РеквизитыДокумента.Отправитель = ПодставитьПараметрыВСтроку(
												НСтр("ru='%1 ИНН %2'", "ru"),
												Документ.УчастЭДО.ЮЛ.НаимОрг,
												Документ.УчастЭДО.ЮЛ.ИННЮЛ);
		КонецЕсли;
	ИначеЕсли ЕстьСвойство(Документ.УчастЭДО, "ИП") Тогда	
		РеквизитыДокумента.Отправитель = ПодставитьПараметрыВСтроку(
							НСтр("ru='%1 ИНН %2'", "ru"),
							ПолучитьПредставлениеФИО(Документ.УчастЭДО.ИП.ФИО),
							Документ.УчастЭДО.ИП.ИННФЛ);
	КонецЕсли;
	
	// Получатель
	Если ЕстьСвойство(Документ.ОтпрДок, "ЮЛ") Тогда
		Если ЕстьСвойство(Документ.ОтпрДок.ЮЛ, "КПП") Тогда 
			РеквизитыДокумента.Получатель = ПодставитьПараметрыВСтроку(
								НСтр("ru='%1 ИНН/КПП %2/%3'", "ru"),
								Документ.ОтпрДок.ЮЛ.НаимОрг,
								Документ.ОтпрДок.ЮЛ.ИННЮЛ,
								Документ.ОтпрДок.ЮЛ.КПП);
		Иначе
			РеквизитыДокумента.Получатель = ПодставитьПараметрыВСтроку(
											НСтр("ru='%1 ИНН %2'", "ru"),
											Документ.ОтпрДок.ЮЛ.НаимОрг,
											Документ.ОтпрДок.ЮЛ.ИННЮЛ);
		КонецЕсли;						
								
	ИначеЕсли ЕстьСвойство(Документ.ОтпрДок, "ИП") Тогда	
		РеквизитыДокумента.Получатель = ПодставитьПараметрыВСтроку(
							НСтр("ru='%1 ИНН %2'", "ru"),
							ПолучитьПредставлениеФИО(Документ.ОтпрДок.ИП.ФИО),
							Документ.ОтпрДок.ИП.ИННФЛ);
	КонецЕсли;
	
	РеквизитыДокумента.ИдентификаторОтправителя = Документ.УчастЭДО.ИдУчастЭДО;
	РеквизитыДокумента.ИдентификаторПолучателя = Документ.ОтпрДок.ИдУчастЭДО;
	
	РеквизитыДокумента.ДатаОтправления	= Документ.СвУведУточ.ДатаПол;
	РеквизитыДокумента.ВремяОтправления	= СтрЗаменить(Документ.СвУведУточ.ВремяПол, ".", ":");

	РеквизитыДокумента.ИмяФайла	= ВРег(Документ.СвУведУточ.СведПолФайл.ИмяПостФайла);
	РеквизитыДокумента.ТекстУведомления = Документ.СвУведУточ.ТекстУведУточ;
	
	РеквизитыДокумента.Подписант	= ПолучитьПредставлениеФИО(Документ.Подписант.ФИО);
	
КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыТранзакции_ПДО(РеквизитыДокумента, ТекстФайла) Экспорт
	
	РеквизитыДокумента = СтруктураУведомленияОПолучении();
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТекстФайла);
    ФайлXDTO = ФабрикаXDTO.ПрочитатьXML(Чтение);
	Документ = ФайлXDTO.Документ;
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы", 
		ФайлXDTO.ИдФайл, ФайлXDTO.ВерсФорм, ФайлXDTO.ВерсПрог);
	РеквизитыДокумента.ФорматДокумента = ФорматДокумента;
	
	// Отправитель
	Если ЕстьСвойство(Документ.СвОтпрДок, "ОтпрЮЛ") Тогда 	
		РеквизитыДокумента.Отправитель = СтрШаблон_Х(НСтр("ru='%1 ИНН/КПП %2/%3'", "ru"),
			Документ.СвОтпрДок.ОтпрЮЛ.НаимОрг,
			Документ.СвОтпрДок.ОтпрЮЛ.ИННЮЛ,
			Документ.СвОтпрДок.ОтпрЮЛ.КПП);
	ИначеЕсли ЕстьСвойство(Документ.СвОтпрДок, "ОтпрИП") Тогда 
		РеквизитыДокумента.Отправитель = СтрШаблон_Х(НСтр("ru='%1 ИНН %2'", "ru"),
			ПолучитьПредставлениеФИО(Документ.СвОтпрДок.ОтпрИП.ФИО),
			Документ.СвОтпрДок.ОтпрИП.ИННФЛ);
	КонецЕсли;
	
	// Получатель
	Если ЕстьСвойство(Документ.СвПолДок, "ОтпрЮЛ") Тогда 	
		РеквизитыДокумента.Получатель = СтрШаблон_Х(НСтр("ru='%1 ИНН/КПП %2/%3'", "ru"),
			Документ.СвПолДок.ОтпрЮЛ.НаимОрг,
			Документ.СвПолДок.ОтпрЮЛ.ИННЮЛ,
			Документ.СвПолДок.ОтпрЮЛ.КПП);
	ИначеЕсли ЕстьСвойство(Документ.СвПолДок, "ОтпрИП") Тогда 
		РеквизитыДокумента.Получатель = СтрШаблон_Х(НСтр("ru='%1 ИНН %2'", "ru"),
			ПолучитьПредставлениеФИО(Документ.СвПолДок.ОтпрИП.ФИО),
			Документ.СвПолДок.ОтпрИП.ИННФЛ);
	КонецЕсли;
	
	РеквизитыДокумента.ИдентификаторОтправителя = Документ.СвОтпрДок.ИдУчастЭДО;
	РеквизитыДокумента.ИдентификаторПолучателя  = Документ.СвПолДок.ИдУчастЭДО;
	
	РеквизитыДокумента.ДатаПолучения  = Документ.СведПодтв.ДатаОтпр;
	РеквизитыДокумента.ВремяПолучения = СтрЗаменить(Документ.СведПодтв.ВремяОтпр, ".", ":");
	РеквизитыДокумента.ИмяФайла		  = ВРег(Документ.СведПодтв.СведОтпрФайл.ИмяПостФайла);
	
КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыТранзакции_ПОА(РеквизитыДокумента, ТекстФайла) Экспорт
	
	РеквизитыДокумента = СтруктураПотвержденияОБАннулировании();
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТекстФайла);
    ФайлXDTO = ФабрикаXDTO.ПрочитатьXML(Чтение);
	Документ = ФайлXDTO.Документ;
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы", 
		ФайлXDTO.ИдФайл, ФайлXDTO.ВерсФорм, ФайлXDTO.ВерсПрог);
	РеквизитыДокумента.ФорматДокумента = ФорматДокумента;
	
	// Отправитель ПОА
	Если ЕстьСвойство(Документ.УчастЭДО, "ЮЛ") Тогда 
		РеквизитыДокумента.ОтправительПОА = СтрШаблон_Х(НСтр("ru='%1 ИНН/КПП %2/%3'", "ru"),
			Документ.УчастЭДО.ЮЛ.НаимОрг,
			Документ.УчастЭДО.ЮЛ.ИННЮЛ,
			Документ.УчастЭДО.ЮЛ.КПП);
	ИначеЕсли ЕстьСвойство(Документ.УчастЭДО, "ИП") Тогда
		РеквизитыДокумента.ОтправительПОА = СтрШаблон_Х(НСтр("ru='%1 ИНН %2'", "ru"),
			ПолучитьПредставлениеФИО(Документ.УчастЭДО.ИП.ФИО),
			Документ.УчастЭДО.ИП.ИННФЛ);
	КонецЕсли;
	
	// Получатель ПОА
	Если ЕстьСвойство(Документ.НапрПредАн, "ЮЛ") Тогда 
		РеквизитыДокумента.ПолучательПОА = СтрШаблон_Х(НСтр("ru='%1 ИНН/КПП %2/%3'", "ru"),
			Документ.НапрПредАн.ЮЛ.НаимОрг,
			Документ.НапрПредАн.ЮЛ.ИННЮЛ,
			Документ.НапрПредАн.ЮЛ.КПП);
	ИначеЕсли ЕстьСвойство(Документ.НапрПредАн, "ИП") Тогда
		РеквизитыДокумента.ПолучательПОА = СтрШаблон_Х(НСтр("ru='%1 ИНН %2'", "ru"),
			ПолучитьПредставлениеФИО(Документ.НапрПредАн.ИП.ФИО),
			Документ.НапрПредАн.ИП.ИННФЛ);
	КонецЕсли;
	
	РеквизитыДокумента.ИдентификаторОтправителяПОА  = Документ.УчастЭДО.ИдУчастЭДО;
	РеквизитыДокумента.ИдентификаторПолучателяПОА	= Документ.НапрПредАн.ИдУчастЭДО;
	
	РеквизитыДокумента.ТекстПОА	 = Документ.СвПредАн.ТекстПредАн;
	РеквизитыДокумента.ИмяФайла	 = ВРег(Документ.СвПредАн.СведАнФайл.ИмяАнФайла);
	РеквизитыДокумента.Подписант = ПолучитьПредставлениеФИО(Документ.Подписант.ФИО);

КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыКвитанцииПриемаМОТП(РеквизитыДокумента, ТекстФайла) Экспорт
	
	РеквизитыДокумента = СтруктураКвитанцииМОТП();
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТекстФайла);
    ФайлXDTO = ФабрикаXDTO.ПрочитатьXML(Чтение);
	Документ = ФайлXDTO.Документ;
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы", 
		ФайлXDTO.ИдФайл, ФайлXDTO.ВерсФорм, ФайлXDTO.ВерсПрог);
	РеквизитыДокумента.ФорматДокумента = ФорматДокумента;
	
	РеквизитыДокумента.НаименованиеПрограммногоКомплекса = Документ.ПрогрКомпл;
	РеквизитыДокумента.ВремяОтпр = Документ.СведПодтв.ВремяОтпр;
	РеквизитыДокумента.ДатаОтпр  = Документ.СведПодтв.ДатаОтпр;
	РеквизитыДокумента.ИмяФайла1 = Документ.СведПодтв.СведОтпрФайл[0].ИмяПостФайла;
	РеквизитыДокумента.ИмяФайла2 = Документ.СведПодтв.СведОтпрФайл[1].ИмяПостФайла;
	
КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыКвитанцииОтказаМОТП(РеквизитыДокумента, ТекстФайла) Экспорт
	
	РеквизитыДокумента = СтруктураКвитанцииМОТП();
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТекстФайла);
    ФайлXDTO = ФабрикаXDTO.ПрочитатьXML(Чтение);
	Документ = ФайлXDTO.Документ;
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы", 
		ФайлXDTO.ИдФайл, ФайлXDTO.ВерсФорм, ФайлXDTO.ВерсПрог);
	РеквизитыДокумента.ФорматДокумента = ФорматДокумента;
	
	РеквизитыДокумента.НаименованиеПрограммногоКомплекса = Документ.ПрогрКомпл;
	РеквизитыДокумента.ВремяОтпр    = Документ.СведПодтв.ВремяОтпр;
	РеквизитыДокумента.ДатаОтпр     = Документ.СведПодтв.ДатаОтпр;
	РеквизитыДокумента.ИмяФайла1    = Документ.СведПодтв.СведОтпрФайл[0].ИмяПостФайла;
	РеквизитыДокумента.ИмяФайла2    = Документ.СведПодтв.СведОтпрФайл[1].ИмяПостФайла;
	РеквизитыДокумента.СписокОшибок = Документ.ПеречВыявНар;

КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыРасчетаПоСтраховымВзносам(РеквизитыДокумента, ТекстФайла) Экспорт
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД");
	РеквизитыДокумента.Вставить("ФорматДокумента", ФорматДокумента);
	РеквизитыДокумента.Вставить("ПерсонифицированныеСведения", Новый Массив);
	РеквизитыДокумента.Вставить("ПерсонифицированныеСведенияИностранныхГраждан", Новый Массив);
	РеквизитыДокумента.Вставить("НаименованиеДокумента","Расчет по страховым взносам");
	//ТипДокумент = ФабрикаXDTO.Тип("NO_RASCHSV_1_162_00_05_01_10", "ФайлТип").Свойства.Получить("Документ").Тип;
	//ТипПерсонифицированныеСведения = ТипДокумент.Свойства.Получить("РасчетСВ").Тип.Свойства.Получить("ПерсСвСтрахЛиц").Тип;

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстФайла);
	
	Пока Истина Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧитатьСледующий = Ложь;
		Иначе
			ЧитатьСледующий = Истина;
		КонецЕсли;
		
		Если ЧитатьСледующий Тогда
			Если ЧтениеXML.Прочитать() = Ложь Тогда
				Прервать;
			КонецЕсли; 
		КонецЕсли; 
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "ПерсСвСтрахЛиц" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			//ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипПерсонифицированныеСведения);
			РеквизитыДокумента.ПерсонифицированныеСведения.Добавить(ПерсонифицированныеСведения(ОбъектXDTO, РеквизитыДокумента.ФорматДокумента.Версия));
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Файл" Тогда
			Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ЧтениеXML.Имя = "ИдФайл" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("Идентификатор", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "ВерсФорм" Тогда
						Версия = ЧтениеXML.Значение;
						Версия = СтрЗаменить(Версия, ",", ".");
						РеквизитыДокумента.ФорматДокумента.Вставить("Версия", Версия);
					ИначеЕсли ЧтениеXML.Имя = "ВерсПрог" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("ВерсияПрограммы", ЧтениеXML.Значение);
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли; 
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Документ" Тогда
			Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ЧтениеXML.Имя = "КНД" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("КодПоКНД", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "ДатаДок" Тогда
						РеквизитыДокумента.Вставить("ДатаДокумента", ДатаИзСтрокиЭД(ЧтениеXML.Значение));
					ИначеЕсли ЧтениеXML.Имя = "НомКорр" Тогда
						РеквизитыДокумента.Вставить("НомерКорректировки", СтрокаВЧисло(ЧтениеXML.Значение));
					ИначеЕсли ЧтениеXML.Имя = "Период" Тогда
						РеквизитыДокумента.Вставить("Период", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "ОтчетГод" Тогда
						РеквизитыДокумента.Вставить("ОтчетГод", СтрокаВЧисло(ЧтениеXML.Значение));
					ИначеЕсли ЧтениеXML.Имя = "КодНО" Тогда
						РеквизитыДокумента.Вставить("КодНалоговогоОргана", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "ПоМесту" Тогда
						РеквизитыДокумента.Вставить("ПоМесту", ЧтениеXML.Значение);
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "РасчетСВ" Тогда
			ЧтениеXML.Прочитать();
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "СвНП" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаполнитьСвойство(РеквизитыДокумента, "ОКВЭД", ОбъектXDTO, "ОКВЭД");
			ЗаполнитьСвойство(РеквизитыДокумента, "Телефон", ОбъектXDTO, "Тлф");
			Если ЕстьСвойство(ОбъектXDTO, "НПЮЛ") Тогда
				ЗаполнитьСвойство(РеквизитыДокумента, "НаименованиеОрганизации", ОбъектXDTO.НПЮЛ, "НаимОрг");
				ЗаполнитьСвойство(РеквизитыДокумента, "ИННОрганизации", ОбъектXDTO.НПЮЛ, "ИННЮЛ");
				ЗаполнитьСвойство(РеквизитыДокумента, "КППОрганизации", ОбъектXDTO.НПЮЛ, "КПП");
				Если ЕстьСвойство(ОбъектXDTO.НПЮЛ, "СвРеоргЮЛ") Тогда
					Реорганизация = Новый Структура;
					ЗаполнитьСвойство(Реорганизация, "КодФормыРеорганизации", ОбъектXDTO.НПЮЛ.СвРеоргЮЛ, "ФормРеорг");
					ЗаполнитьСвойство(Реорганизация, "ИННОрганизации", ОбъектXDTO.НПЮЛ.СвРеоргЮЛ, "ИННЮЛ");
					ЗаполнитьСвойство(Реорганизация, "КППОрганизации", ОбъектXDTO.НПЮЛ.СвРеоргЮЛ, "КПП");
					РеквизитыДокумента.Вставить("Реорганизация", Реорганизация);
				КонецЕсли; 
			ИначеЕсли ЕстьСвойство(ОбъектXDTO, "НПИП") Тогда
				ЗаполнитьСвойство(РеквизитыДокумента, "ИННФЛ", ОбъектXDTO.НПИП, "ИННФЛ");
				ЗаполнитьСвойство(РеквизитыДокумента, "Фамилия", ОбъектXDTO.НПИП.ФИОИП, "Фамилия");
				ЗаполнитьСвойство(РеквизитыДокумента, "Имя", ОбъектXDTO.НПИП.ФИОИП, "Имя");
				ЗаполнитьСвойство(РеквизитыДокумента, "Отчество", ОбъектXDTO.НПИП.ФИОИП, "Отчество");
			ИначеЕсли ЕстьСвойство(ОбъектXDTO, "НПФЛ") Тогда
				ЗаполнитьСвойство(РеквизитыДокумента, "ИННФЛ", ОбъектXDTO.НПФЛ, "ИННФЛ");
				ЗаполнитьСвойство(РеквизитыДокумента, "Фамилия", ОбъектXDTO.НПФЛ.ФИО, "Фамилия");
				ЗаполнитьСвойство(РеквизитыДокумента, "Имя", ОбъектXDTO.НПФЛ.ФИО, "Имя");
				ЗаполнитьСвойство(РеквизитыДокумента, "Отчество", ОбъектXDTO.НПФЛ.ФИО, "Отчество");
				СведенияОФизЛице = Новый Структура;
				ЗаполнитьСвойство(СведенияОФизЛице, "ДатаРождения", ОбъектXDTO.НПФЛ.СвНПФЛ, "ДатаРожд");
				ЗаполнитьСвойство(СведенияОФизЛице, "МестоРождения", ОбъектXDTO.НПФЛ.СвНПФЛ, "МестоРожд");
				ЗаполнитьСвойство(СведенияОФизЛице, "КодСтраныГражданства", ОбъектXDTO.НПФЛ.СвНПФЛ, "Гражд");
				СведенияОФизЛице.Вставить("Адрес", АдресРФ(ОбъектXDTO.НПФЛ.СвНПФЛ.АдрМЖРФ));
				УдостоверениеЛичности = Новый Структура; 
				ЗаполнитьСвойство(СведенияОФизЛице, "КодВидаДокумента", ОбъектXDTO.НПФЛ.СвНПФЛ.УдЛичнФЛ, "КодВидДок");
				ЗаполнитьСвойство(СведенияОФизЛице, "СерияИНомерДокумента", ОбъектXDTO.НПФЛ.СвНПФЛ.УдЛичнФЛ, "СерНомДок");
				ЗаполнитьСвойство(СведенияОФизЛице, "КемВыдан", ОбъектXDTO.НПФЛ.СвНПФЛ.УдЛичнФЛ, "ВыдДок");
				ЗаполнитьСвойство(СведенияОФизЛице, "ДатаВыдачи", ОбъектXDTO.НПФЛ.СвНПФЛ.УдЛичнФЛ, "ДатаДок");
				СведенияОФизЛице.Вставить("УдостоверениеЛичности", УдостоверениеЛичности);
				РеквизитыДокумента.Вставить("СведенияОФизЛице", СведенияОФизЛице);
			КонецЕсли; 
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "ОбязПлатСВ" Тогда
			ЧтениеXML.Прочитать();
			//ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "СвИноГражд" Тогда
			
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			РеквизитыДокумента.ПерсонифицированныеСведенияИностранныхГраждан.Добавить(
				ПерсонифицированныеСведенияИностранногоГражданина(ОбъектXDTO, РеквизитыДокумента.ФорматДокумента.Версия));
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "ОбязПлатСВ_КФХ" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Подписант" Тогда
			Подписант = Новый Структура;
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаполнитьСвойство(Подписант, "ПризнакЛицаПодписывающегоДокумент", ОбъектXDTO, "ПрПодп");
			Если ЕстьСвойство(ОбъектXDTO, "ФИО") Тогда
				ЗаполнитьСвойство(Подписант, "Фамилия", ОбъектXDTO.ФИО, "Фамилия");
				ЗаполнитьСвойство(Подписант, "Имя", ОбъектXDTO.ФИО, "Имя");
				ЗаполнитьСвойство(Подписант, "Отчество", ОбъектXDTO.ФИО, "Отчество");
			КонецЕсли; 
			Если ЕстьСвойство(ОбъектXDTO, "СвПред") Тогда
				ЗаполнитьСвойство(Подписант, "НаименованиеДокументаПодтверждающегоПолномочия", ОбъектXDTO.СвПред, "НаимДок");
				ЗаполнитьСвойство(Подписант, "НаименованиеОрганизацииПредставителя", ОбъектXDTO.СвПред, "НаимОрг");
			КонецЕсли; 
			РеквизитыДокумента.Вставить("Подписант", Подписант);
		Иначе
			ЧтениеXML.Прочитать();
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизиты6НДФЛ(РеквизитыДокумента, ТекстФайла) Экспорт
	
	ПространствоИмен = "NO_NDFL6_1_152_00_05_02_02";
	ФайлXDTO = ПрочитатьXMLФайл(ТекстФайла, ПространствоИмен, "Файл");
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД", 
		ФайлXDTO.ИдФайл, ФайлXDTO.ВерсФорм, ФайлXDTO.ВерсПрог, ФайлXDTO.Документ.КНД);
	РеквизитыДокумента.Вставить("ФорматДокумента", ФорматДокумента);
	РеквизитыДокумента.Вставить("НаименованиеДокумента","6-НДФЛ");
	РеквизитыДокумента.Вставить("ДатаДокумента", ДатаИзСтрокиЭД(ФайлXDTO.Документ.ДатаДок));
	РеквизитыДокумента.Вставить("Период", ФайлXDTO.Документ.Период);
	РеквизитыДокумента.Вставить("ОтчетГод", СтрокаВЧисло(ФайлXDTO.Документ.ОтчетГод));
	РеквизитыДокумента.Вставить("КодНалоговогоОргана", ФайлXDTO.Документ.КодНО);
	РеквизитыДокумента.Вставить("НомерКорректировки", СтрокаВЧисло(ФайлXDTO.Документ.НомКорр));
	РеквизитыДокумента.Вставить("ПоМесту", ФайлXDTO.Документ.ПоМесту);
	
	НДФЛ6 = ФайлXDTO.Документ.НДФЛ6;
	
	РеквизитыДокумента.Вставить("Количество", СтрокаВЧисло(НДФЛ6.ОбобщПоказ.КолФЛДоход));
	РеквизитыДокумента.Вставить("СуммаУдержанногоНалогаИтого", СтрокаВЧисло(НДФЛ6.ОбобщПоказ.УдержНалИт));
	РеквизитыДокумента.Вставить("СуммаНеУдержанногоНалогаИтого", СтрокаВЧисло(НДФЛ6.ОбобщПоказ.НеУдержНалИт));
	РеквизитыДокумента.Вставить("СуммаНалогаВозвращеннаяИтого", СтрокаВЧисло(НДФЛ6.ОбобщПоказ.ВозврНалИт));
	
	CведенияПоСтавкам = Новый Массив;
	Если НДФЛ6.ОбобщПоказ <> Неопределено Тогда
		Для Каждого ТекущийЭлемент Из НДФЛ6.ОбобщПоказ.СумСтавка  Цикл
			СуммаПоСтавке = Новый Структура;
			СуммаПоСтавке.Вставить("Ставка", СтрокаВЧисло(ТекущийЭлемент.Ставка));
			СуммаПоСтавке.Вставить("НачисленныйДоход", СтрокаВЧисло(ТекущийЭлемент.НачислДох));
			СуммаПоСтавке.Вставить("НачисленныеДивиденды", СтрокаВЧисло(ТекущийЭлемент.НачислДохДив));
			СуммаПоСтавке.Вставить("НалоговыйВычет", СтрокаВЧисло(ТекущийЭлемент.ВычетНал));
			СуммаПоСтавке.Вставить("ИсчисленныйНалог", СтрокаВЧисло(ТекущийЭлемент.ИсчислНал));
			СуммаПоСтавке.Вставить("ИсчисленныйНалогДивиденды", СтрокаВЧисло(ТекущийЭлемент.ИсчислНалДив));
			СуммаПоСтавке.Вставить("АвансовыйПлатеж", СтрокаВЧисло(ТекущийЭлемент.АвансПлат));
			CведенияПоСтавкам.Добавить(СуммаПоСтавке);
		КонецЦикла;
	КонецЕсли;
	РеквизитыДокумента.Вставить("CведенияПоСтавкам", CведенияПоСтавкам);
	
	СведенияПоДатам = Новый Массив;
	Если НДФЛ6.ДохНал <> Неопределено Тогда
		Для Каждого ТекущийЭлемент Из НДФЛ6.ДохНал.СумДата Цикл
			СуммаПоДате = Новый Структура;
			СуммаПоДате.Вставить("ДатаФактическогоПолученияДохода", ДатаИзСтрокиЭД(ТекущийЭлемент.ДатаФактДох));
			СуммаПоДате.Вставить("ДатаУдержанияНалога", ДатаИзСтрокиЭД(ТекущийЭлемент.ДатаУдержНал));
			СуммаПоДате.Вставить("СрокПеречисленияНалога", ДатаИзСтрокиЭД(ТекущийЭлемент.СрокПрчслНал));
			СуммаПоДате.Вставить("СуммаФактическиПолученногоДохода", СтрокаВЧисло(ТекущийЭлемент.ФактДоход));
			СуммаПоДате.Вставить("СуммаУдержанногоНалога", СтрокаВЧисло(ТекущийЭлемент.УдержНал));
			СведенияПоДатам.Добавить(СуммаПоДате);
		КонецЦикла; 
	КонецЕсли;
	РеквизитыДокумента.Вставить("СведенияПоДатам", СведенияПоДатам);
	
	РеквизитыДокумента.Вставить("ОКТМО", ФайлXDTO.Документ.СвНП.ОКТМО);
	РеквизитыДокумента.Вставить("Телефон", ФайлXDTO.Документ.СвНП.Тлф);
	Если ФайлXDTO.Документ.СвНП.НПЮЛ <> Неопределено Тогда
		РеквизитыДокумента.Вставить("НаименованиеОрганизации", ФайлXDTO.Документ.СвНП.НПЮЛ.НаимОрг);
		РеквизитыДокумента.Вставить("ИННОрганизации", ФайлXDTO.Документ.СвНП.НПЮЛ.ИННЮЛ);
		РеквизитыДокумента.Вставить("КППОрганизации", ФайлXDTO.Документ.СвНП.НПЮЛ.КПП);
		Если ФайлXDTO.Документ.СвНП.НПЮЛ.СвРеоргЮЛ <> Неопределено Тогда
			Реорганизация = Новый Структура;
			Реорганизация.Вставить("КодФормыРеорганизации", ФайлXDTO.Документ.СвНП.НПЮЛ.СвРеоргЮЛ.ФормРеорг);
			Реорганизация.Вставить("ИННОрганизации", ФайлXDTO.Документ.СвНП.НПЮЛ.СвРеоргЮЛ.ИННЮЛ);
			Реорганизация.Вставить("КППОрганизации", ФайлXDTO.Документ.СвНП.НПЮЛ.СвРеоргЮЛ.КПП);
			РеквизитыДокумента.Вставить("Реорганизация", Реорганизация);
		КонецЕсли;
	Иначе
		РеквизитыДокумента.Вставить("ИННФЛ", ФайлXDTO.Документ.СвНП.НПФЛ.ИННФЛ);
		РеквизитыДокумента.Вставить("Фамилия", ФайлXDTO.Документ.СвНП.НПФЛ.ФИО.Фамилия);
		РеквизитыДокумента.Вставить("Имя", ФайлXDTO.Документ.СвНП.НПФЛ.ФИО.Имя);
		РеквизитыДокумента.Вставить("Отчество", ФайлXDTO.Документ.СвНП.НПФЛ.ФИО.Отчество);
	КонецЕсли;

	Подписант = Новый Структура;
	Подписант.Вставить("ПризнакЛицаПодписывающегоДокумент", ФайлXDTO.Документ.Подписант.ПрПодп);
	Если ФайлXDTO.Документ.Подписант.ФИО <> Неопределено Тогда
		Подписант.Вставить("Фамилия", ФайлXDTO.Документ.Подписант.ФИО.Фамилия);
		Подписант.Вставить("Имя", ФайлXDTO.Документ.Подписант.ФИО.Имя);
		Подписант.Вставить("Отчество", ФайлXDTO.Документ.Подписант.ФИО.Отчество);
	КонецЕсли; 
	Если ФайлXDTO.Документ.Подписант.СвПред <> Неопределено Тогда
		Подписант.Вставить("НаименованиеДокументаПодтверждающегоПолномочия", ФайлXDTO.Документ.Подписант.СвПред.НаимДок);
		Подписант.Вставить("НаименованиеОрганизацииПредставителя", ФайлXDTO.Документ.Подписант.СвПред.НаимОрг);
	КонецЕсли; 
	РеквизитыДокумента.Вставить("Подписант", Подписант);
	
КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизиты2НДФЛ(РеквизитыДокумента, ТекстФайла) Экспорт
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД");
	РеквизитыДокумента.Вставить("ФорматДокумента", ФорматДокумента);
	РеквизитыДокумента.Вставить("ПерсонифицированныеСведения", Новый Массив);
	РеквизитыДокумента.Вставить("НаименованиеДокумента","2-НДФЛ");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстФайла);
	
	Пока Истина Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧитатьСледующий = Ложь;
		Иначе
			ЧитатьСледующий = Истина;
		КонецЕсли;
		
		Если ЧитатьСледующий Тогда
			Если ЧтениеXML.Прочитать() = Ложь Тогда
				Прервать;
			КонецЕсли; 
		КонецЕсли; 
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "НДФЛ-2" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			РеквизитыДокумента.ПерсонифицированныеСведения.Добавить(СведенияНДФЛ2(ОбъектXDTO));
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Файл" Тогда
			Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ЧтениеXML.Имя = "ИдФайл" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("Идентификатор", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "ВерсФорм" Тогда
						Версия = ЧтениеXML.Значение;
						Версия = СтрЗаменить(Версия, ",", ".");
						РеквизитыДокумента.ФорматДокумента.Вставить("Версия", Версия);
					ИначеЕсли ЧтениеXML.Имя = "ВерсПрог" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("ВерсияПрограммы", ЧтениеXML.Значение);
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли; 
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Документ" Тогда
			Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ЧтениеXML.Имя = "КНД" Тогда
						РеквизитыДокумента.ФорматДокумента.Вставить("КодПоКНД", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "ДатаДок" Тогда
						РеквизитыДокумента.Вставить("ДатаДокумента", ДатаИзСтрокиЭД(ЧтениеXML.Значение));
					ИначеЕсли ЧтениеXML.Имя = "Период" Тогда
						РеквизитыДокумента.Вставить("Период", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "ОтчетГод" Тогда
						РеквизитыДокумента.Вставить("ОтчетГод", СтрокаВЧисло(ЧтениеXML.Значение));
					ИначеЕсли ЧтениеXML.Имя = "КодНО" Тогда
						РеквизитыДокумента.Вставить("КодНалоговогоОргана", ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "Признак" Тогда
						РеквизитыДокумента.Вставить("Признак", ЧтениеXML.Значение);
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "СвНА" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаполнитьСвойство(РеквизитыДокумента, "ОКТМО", ОбъектXDTO, "ОКТМО");
			ЗаполнитьСвойство(РеквизитыДокумента, "Телефон", ОбъектXDTO, "Тлф");
			Если ЕстьСвойство(ОбъектXDTO, "СвНАЮЛ") Тогда
				ЗаполнитьСвойство(РеквизитыДокумента, "НаименованиеОрганизации", ОбъектXDTO.СвНАЮЛ, "НаимОрг");
				ЗаполнитьСвойство(РеквизитыДокумента, "ИННОрганизации", ОбъектXDTO.СвНАЮЛ, "ИННЮЛ");
				ЗаполнитьСвойство(РеквизитыДокумента, "КППОрганизации", ОбъектXDTO.СвНАЮЛ, "КПП");
				Если ЕстьСвойство(ОбъектXDTO.СвНАЮЛ, "СвРеоргЮЛ") Тогда
					Реорганизация = Новый Структура;
					ЗаполнитьСвойство(Реорганизация, "КодФормыРеорганизации", ОбъектXDTO.СвНАЮЛ.СвРеоргЮЛ, "ФормРеорг");
					ЗаполнитьСвойство(Реорганизация, "ИННОрганизации", ОбъектXDTO.СвНАЮЛ.СвРеоргЮЛ, "ИННЮЛ");
					ЗаполнитьСвойство(Реорганизация, "КППОрганизации", ОбъектXDTO.СвНАЮЛ.СвРеоргЮЛ, "КПП");
					РеквизитыДокумента.Вставить("Реорганизация", Реорганизация);
				КонецЕсли; 
			ИначеЕсли ЕстьСвойство(ОбъектXDTO, "СвНАФЛ") Тогда
				ЗаполнитьСвойство(РеквизитыДокумента, "ИННФЛ", ОбъектXDTO.СвНАФЛ, "ИННФЛ");
				ЗаполнитьСвойство(РеквизитыДокумента, "Фамилия", ОбъектXDTO.СвНАФЛ.ФИО, "Фамилия");
				ЗаполнитьСвойство(РеквизитыДокумента, "Имя", ОбъектXDTO.СвНАФЛ.ФИО, "Имя");
				ЗаполнитьСвойство(РеквизитыДокумента, "Отчество", ОбъектXDTO.СвНАФЛ.ФИО, "Отчество");
			КонецЕсли; 
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Подписант" Тогда
			Подписант = Новый Структура;
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаполнитьСвойство(Подписант, "ПризнакЛицаПодписывающегоДокумент", ОбъектXDTO, "ПрПодп");
			Если ЕстьСвойство(ОбъектXDTO, "ФИО") Тогда
				ЗаполнитьСвойство(Подписант, "Фамилия", ОбъектXDTO.ФИО, "Фамилия");
				ЗаполнитьСвойство(Подписант, "Имя", ОбъектXDTO.ФИО, "Имя");
				ЗаполнитьСвойство(Подписант, "Отчество", ОбъектXDTO.ФИО, "Отчество");
			КонецЕсли; 
			Если ЕстьСвойство(ОбъектXDTO, "СвПред") Тогда
				ЗаполнитьСвойство(Подписант, "НаименованиеДокументаПодтверждающегоПолномочия", ОбъектXDTO.СвПред, "НаимДок");
				ЗаполнитьСвойство(Подписант, "НаименованиеОрганизацииПредставителя", ОбъектXDTO.СвПред, "НаимОрг");
			КонецЕсли; 
			РеквизитыДокумента.Вставить("Подписант", Подписант);
		КонецЕсли;	
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыФорматаСведенийОЗастрахованныхЛицах(РеквизитыДокумента, ТекстФайла) Экспорт
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД");
	РеквизитыДокумента.Вставить("ФорматДокумента", ФорматДокумента);
	
	РеквизитыДокумента.Вставить("Формат", "ПФР");
	РеквизитыДокумента.Вставить("НаименованиеДокумента", "СЗВ-М");
	РеквизитыДокумента.Вставить("ПерсонифицированныеСведения", Новый Массив);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстФайла);
	
	Пока Истина Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧитатьСледующий = Ложь;
		Иначе
			ЧитатьСледующий = Истина;
		КонецЕсли;
		
		Если ЧитатьСледующий Тогда
			Если ЧтениеXML.Прочитать() = Ложь Тогда
				Прервать;
			КонецЕсли; 
		КонецЕсли; 
		
		Если  ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "ЗЛ" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			Структура = Новый Структура;
			Структура.Вставить("НомерПП", ОбъектXDTO.НомерПП);
			Структура.Вставить("СНИЛС", ОбъектXDTO.СНИЛС);
			ЗаполнитьСвойство(Структура,"ИНН", ОбъектXDTO,"ИНН"); 
			ЗаполнитьСвойство(Структура,"Фамилия", ОбъектXDTO.ФИО,"Фамилия"); 
			ЗаполнитьСвойство(Структура,"Имя", ОбъектXDTO.ФИО,"Имя"); 
			ЗаполнитьСвойство(Структура,"Отчество", ОбъектXDTO.ФИО,"Отчество"); 
			РеквизитыДокумента.ПерсонифицированныеСведения.Добавить(Структура);
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "ЭДПФР" Тогда
			ЧтениеXML.Прочитать();
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "СЗВ-М" Тогда
			ЧтениеXML.Прочитать();
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "ТипФормы" Тогда	
			ЧтениеXML.Прочитать();
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
				РеквизитыДокумента.Вставить("ТипФормы", СтрокаВЧисло(ЧтениеXML.Значение));
			КонецЕсли; 
		ИначеЕсли  ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Страхователь" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			Если СтрДлина(ОбъектXDTO.ИНН) = 12 Тогда
				РеквизитыДокумента.Вставить("ИННФЛ", ОбъектXDTO.ИНН);
			Иначе
				РеквизитыДокумента.Вставить("ИННОрганизации", ОбъектXDTO.ИНН);
				Если ЕстьСвойство(ОбъектXDTO, "КПП") Тогда
					РеквизитыДокумента.Вставить("КППОрганизации", ОбъектXDTO.КПП);
				Иначе
					РеквизитыДокумента.Вставить("КППОрганизации", "");
				КонецЕсли; 
			КонецЕсли; 
			РеквизитыДокумента.Вставить("СтраховательНаименование", ОбъектXDTO.НаименованиеКраткое);
			РеквизитыДокумента.Вставить("СтраховательРегНомер", ОбъектXDTO.РегНомер);
		ИначеЕсли  ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "СписокЗЛ" Тогда
			ЧтениеXML.Прочитать();
		ИначеЕсли  ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "СлужебнаяИнформация" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			РеквизитыДокумента.ФорматДокумента.Идентификатор = ОбъектXDTO.GUID;
			РеквизитыДокумента.Вставить("ДатаВремя", ОбъектXDTO.ДатаВремя);
			РеквизитыДокумента.ФорматДокумента.ВерсияПрограммы = ОбъектXDTO.ПрограммаПодготовки;
		ИначеЕсли  ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "ДатаЗаполнения" Тогда
			ЧтениеXML.Прочитать();
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
				РеквизитыДокумента.Вставить("ДатаЗаполнения", ДатаИзСтрокиПФР(ЧтениеXML.Значение));
			КонецЕсли; 
		ИначеЕсли  ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "ОтчетныйПериод" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			РеквизитыДокумента.Вставить("ОтчетГод", Число(ОбъектXDTO.КалендарныйГод));
			РеквизитыДокумента.Вставить("Период", Число(ОбъектXDTO.Месяц));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет структуру реквизитов электронного документа.
// 
// Параметры:
//  РеквизитыДокумента - Структура - структура реквизитов для разбора электронного документа.
//  ТекстФайла - Строка.
//
Процедура ЗаполнитьРеквизитыФорматаСведенийОСтраховомСтаже(РеквизитыДокумента, ТекстФайла) Экспорт
	
	ФорматДокумента = Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД");
	РеквизитыДокумента.Вставить("ФорматДокумента", ФорматДокумента);
	РеквизитыДокумента.Вставить("Формат", "ПФР");
	РеквизитыДокумента.Вставить("НаименованиеДокумента", "СЗВ-СТАЖ");
	РеквизитыДокумента.Вставить("ПерсонифицированныеСведения", Новый Массив);
	РеквизитыДокумента.Вставить("Уплата", Новый Массив);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстФайла);
	
	Пока Истина Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧитатьСледующий = Ложь;
		Иначе
			ЧитатьСледующий = Истина;
		КонецЕсли;
		
		Если ЧитатьСледующий Тогда
			Если ЧтениеXML.Прочитать() = Ложь Тогда
				Прервать;
			КонецЕсли; 
		КонецЕсли; 
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "ЗЛ" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			Структура = Новый Структура;
			Структура.Вставить("СНИЛС", ОбъектXDTO.СНИЛС);
			ЗаполнитьСвойство(Структура,"Фамилия", ОбъектXDTO.ФИО,"Фамилия"); 
			ЗаполнитьСвойство(Структура,"Имя", ОбъектXDTO.ФИО,"Имя"); 
			ЗаполнитьСвойство(Структура,"Отчество", ОбъектXDTO.ФИО,"Отчество"); 
			
			Если ЕстьСвойство(ОбъектXDTO, "ДатаУвольнения") Тогда
				Структура.Вставить("ДатаУвольнения", ДатаИзСтрокиПФР(ОбъектXDTO.ДатаУвольнения));
			КонецЕсли; 
			
			СтажевыеПериоды = Новый Массив;
			Если ТипЗнч(ОбъектXDTO.СтажевыйПериод) = Тип("СписокXDTO") Тогда
				Для Каждого ТекущийЭлемент Из ОбъектXDTO.СтажевыйПериод Цикл
					СтажевыеПериоды.Добавить(СтажевыйПериод(ТекущийЭлемент));
				КонецЦикла;
			ИначеЕсли ТипЗнч(ОбъектXDTO.СтажевыйПериод) = Тип("ОбъектXDTO") Тогда
				СтажевыеПериоды.Добавить(СтажевыйПериод(ОбъектXDTO.СтажевыйПериод));
			КонецЕсли; 
			Структура.Вставить("СтажевыеПериоды", СтажевыеПериоды);
			РеквизитыДокумента.ПерсонифицированныеСведения.Добавить(Структура);
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "ОДВ-1" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			РеквизитыДокумента.Вставить("ДатаЗаполнения", ДатаИзСтрокиПФР(ОбъектXDTO.ДатаЗаполнения));
			РеквизитыДокумента.Вставить("КоличествоЗастрахованныхЛиц", ОбъектXDTO.КоличествоЗЛ);
			РеквизитыДокумента.Вставить("ОтчетныйПериодГодОДВ", ОбъектXDTO.ОтчетныйПериод.Год);
			РеквизитыДокумента.Вставить("ОтчетныйПериодКодОДВ", ОбъектXDTO.ОтчетныйПериод.Код);
			РеквизитыДокумента.Вставить("ТипСведенийОДВ", ОбъектXDTO.Тип);
			РеквизитыДокумента.Вставить("СтраховательИННОДВ", ОбъектXDTO.Страхователь.ИНН);
			ЗаполнитьСвойство(РеквизитыДокумента,"СтраховательКППОДВ", ОбъектXDTO.Страхователь,"КПП"); 
			РеквизитыДокумента.Вставить("СтраховательНаименованиеОДВ", ОбъектXDTO.Страхователь.Наименование);
			РеквизитыДокумента.Вставить("СтраховательРегНомерОДВ", ОбъектXDTO.Страхователь.РегНомер);
			//ОснованияДНП пропустим
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "ЭДПФР" Тогда
			ЧтениеXML.Прочитать();
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "СВ" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаполнитьСвойство(РеквизитыДокумента,"НачисленыНаОбязательноеПенсионноеСтрахование", ОбъектXDTO, "НачисленыНаОПС");
			ЗаполнитьСвойство(РеквизитыДокумента,"НачисленыПоДополнительномуТарифуТ", ОбъектXDTO, "НачисленыПоДТ");
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Уплата" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			Структура = Новый Структура;
			Структура.Вставить("Уплата", ОбъектXDTO.Уплата); 
			Структура.Вставить("ПериодС", ДатаИзСтрокиПФР(ОбъектXDTO.Период.С)); 
			Структура.Вставить("ПериодПо", ДатаИзСтрокиПФР(ОбъектXDTO.Период.По)); 
			РеквизитыДокумента.Уплата.Добавить(Структура);
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Тип" Тогда
			ЧтениеXML.Прочитать();
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
				РеквизитыДокумента.Вставить("ТипФормы", СтрокаВЧисло(ЧтениеXML.Значение));
			КонецЕсли; 
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Страхователь" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			Если СтрДлина(ОбъектXDTO.ИНН) = 12 Тогда
				РеквизитыДокумента.Вставить("ИННФЛ", ОбъектXDTO.ИНН);
			Иначе
				РеквизитыДокумента.Вставить("ИННОрганизации", ОбъектXDTO.ИНН);
				Если ЕстьСвойство(ОбъектXDTO, "КПП") Тогда
					РеквизитыДокумента.Вставить("КППОрганизации", ОбъектXDTO.КПП);
				Иначе
					РеквизитыДокумента.Вставить("КППОрганизации", "");
				КонецЕсли; 
			КонецЕсли; 
			РеквизитыДокумента.Вставить("СтраховательНаименование", ОбъектXDTO.Наименование);
			РеквизитыДокумента.Вставить("СтраховательРегНомер", ОбъектXDTO.РегНомер);
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "СлужебнаяИнформация" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			РеквизитыДокумента.ФорматДокумента.Идентификатор = ОбъектXDTO.GUID;
			РеквизитыДокумента.Вставить("ДатаВремя", ОбъектXDTO.ДатаВремя);
			РеквизитыДокумента.ФорматДокумента.ВерсияПрограммы = ОбъектXDTO.ПрограммаПодготовки;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "ОтчетныйПериод" Тогда
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			РеквизитыДокумента.Вставить("ОтчетГод", Число(ОбъектXDTO.Год));
			РеквизитыДокумента.Вставить("Период", Число(ОбъектXDTO.Код));
		Иначе
			ЧтениеXML.Прочитать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


Функция СтажевыйПериод(ОбъектXDTO)
	
	Структура = Новый Структура;
	Структура.Вставить("ПериодС", ДатаИзСтрокиПФР(ОбъектXDTO.Период.С)); 
	Структура.Вставить("ПериодПо", ДатаИзСтрокиПФР(ОбъектXDTO.Период.По)); 
	
	Если ЕстьСвойство(ОбъектXDTO, "ЛьготныйСтаж") Тогда
		ЛьготныйСтаж = Новый Массив;
		Если ТипЗнч(ОбъектXDTO.ЛьготныйСтаж) = Тип("СписокXDTO") Тогда
			Для Каждого ТекущийЭлемент Из ОбъектXDTO.ЛьготныйСтаж Цикл
				ЛьготныйСтаж.Добавить(ЛьготныйСтаж(ТекущийЭлемент));
			КонецЦикла;
		ИначеЕсли ТипЗнч(ОбъектXDTO.ЛьготныйСтаж) = Тип("ОбъектXDTO") Тогда
			ЛьготныйСтаж.Добавить(ЛьготныйСтаж(ОбъектXDTO.ЛьготныйСтаж));
		КонецЕсли; 
		Структура.Вставить("ЛьготныйСтаж", ЛьготныйСтаж);
	КонецЕсли; 
	
	Возврат Структура;
	
КонецФункции

Функция ЛьготныйСтаж(ОбъектXDTO)
	
	Структура = Новый Структура;
	Если ЕстьСвойство(ОбъектXDTO, "ТУ") Тогда
		ЗаполнитьСвойство(Структура, "ТерриториальныеУсловияОснование", ОбъектXDTO.ТУ, "Основание");
		ЗаполнитьСвойство(Структура, "ТерриториальныеУсловияКоэффициент", ОбъектXDTO.ТУ, "Коэффициент");
	КонецЕсли; 
	Если ЕстьСвойство(ОбъектXDTO, "ОУТ") Тогда
		ЗаполнитьСвойство(Структура, "КодОсобыхУсловийТруда", ОбъектXDTO.ОУТ, "Код");
		ЗаполнитьСвойство(Структура, "КодПрофессии", ОбъектXDTO.ОУТ, "ПозицияСписка");
	КонецЕсли; 
	Если ЕстьСвойство(ОбъектXDTO, "ИС") Тогда
		ИсчисляемыйСтаж = Новый Структура;
		ЗаполнитьСвойство(ИсчисляемыйСтаж, "Основание", ОбъектXDTO.ИС, "Основание");
		ДобавитьВыработку(ИсчисляемыйСтаж, ОбъектXDTO.ИС);
		Структура.Вставить("ИсчисляемыйСтаж", ИсчисляемыйСтаж);
	КонецЕсли;
	Если ЕстьСвойство(ОбъектXDTO, "ДопСведенияИС") Тогда
		Структура.Вставить("КодыДопСведенийИсчисленияСтраховогоСтажа", ОбъектXDTO.ДопСведенияИС);
	КонецЕсли; 
	Если ЕстьСвойство(ОбъектXDTO, "ВЛ") Тогда
		ДосрочнаяПенсия = Новый Структура;
		ЗаполнитьСвойство(ДосрочнаяПенсия, "Основание", ОбъектXDTO.ВЛ, "Основание");
		ДобавитьВыработку(ДосрочнаяПенсия, ОбъектXDTO.ВЛ);
		Структура.Вставить("ДосрочнаяПенсия", ДосрочнаяПенсия);
	КонецЕсли;
	Если ЕстьСвойство(ОбъектXDTO, "ДоляСтавки") Тогда
		ЗаполнитьСвойство(Структура, "ДоляСтавки", ОбъектXDTO, "ДоляСтавки");
	КонецЕсли; 

	Возврат Структура;
	
КонецФункции

Процедура ДобавитьВыработку(Структура, ОбъектXDTO)
	Если ЕстьСвойство(ОбъектXDTO, "ВыработкаВчасах") Тогда
		ЗаполнитьСвойство(Структура, "ВыработкаЧасы", ОбъектXDTO.ВыработкаВчасах, "Часы");
		ЗаполнитьСвойство(Структура, "ВыработкаМинуты", ОбъектXDTO.ВыработкаВчасах, "Минуты");
	ИначеЕсли ЕстьСвойство(ОбъектXDTO, "ВыработкаКалендарная") Тогда
		ЗаполнитьСвойство(Структура, "ВыработкаМесяцы", ОбъектXDTO.ВыработкаКалендарная, "Месяцы");
		ЗаполнитьСвойство(Структура, "ВыработкаДни", ОбъектXDTO.ВыработкаКалендарная, "Дни");
	КонецЕсли; 
КонецПроцедуры

Функция СведенияНДФЛ2(ОбъектXDTO)
	
	СведенияНДФЛ2 = Новый Структура;
	СведенияНДФЛ2.Вставить("НомерСправки", ОбъектXDTO.НомСпр);
	СведенияНДФЛ2.Вставить("НомерКорректировки", ОбъектXDTO.НомКорр);
	
	СведенияНДФЛ2.Вставить("ДатаРождения", ДатаИзСтрокиЭД(ОбъектXDTO.ПолучДох.ДатаРожд));
	СведенияНДФЛ2.Вставить("КодСтраныГражданства", ОбъектXDTO.ПолучДох.Гражд);
	ЗаполнитьСвойство(СведенияНДФЛ2, "СтатусНалогоплательщика", ОбъектXDTO.ПолучДох, "Статус");
	ЗаполнитьСвойство(СведенияНДФЛ2, "ИНН", ОбъектXDTO.ПолучДох, "ИННФЛ");
	ЗаполнитьСвойство(СведенияНДФЛ2, "Фамилия", ОбъектXDTO.ПолучДох.ФИО, "Фамилия");
	ЗаполнитьСвойство(СведенияНДФЛ2, "Имя", ОбъектXDTO.ПолучДох.ФИО, "Имя");
	ЗаполнитьСвойство(СведенияНДФЛ2, "Отчество", ОбъектXDTO.ПолучДох.ФИО, "Отчество");
	СведенияНДФЛ2.Вставить("КодВидаДокумента", ОбъектXDTO.ПолучДох.УдЛичнФЛ.КодУдЛичн);
	СведенияНДФЛ2.Вставить("СерияИНомерДокумента", ОбъектXDTO.ПолучДох.УдЛичнФЛ.СерНомДок);
	СведенияНДФЛ2.Вставить("СведенияОДоходах", Новый Массив);
	
	Если ЕстьСвойство(ОбъектXDTO, "СведДох") Тогда
		Если ТипЗнч(ОбъектXDTO.СведДох) = Тип("СписокXDTO") Тогда
			Для Каждого ТекущийЭлемент Из ОбъектXDTO.СведДох Цикл
				СведенияНДФЛ2.СведенияОДоходах.Добавить(СведенияОДоходах(ТекущийЭлемент));
			КонецЦикла; 
		ИначеЕсли ТипЗнч(ОбъектXDTO.СведДох) = Тип("ОбъектXDTO") Тогда
			СведенияНДФЛ2.СведенияОДоходах.Добавить(СведенияОДоходах(ОбъектXDTO.СведДох));
		КонецЕсли; 
	КонецЕсли; 

	Возврат СведенияНДФЛ2;
	
КонецФункции

Функция СведенияОДоходах(ОбъектXDTO)
	
	СведенияОДоходах = Новый Структура;
	
	СведенияОДоходах.Вставить("Ставка", СтрокаВЧисло(ОбъектXDTO.Ставка));
	
	СведенияОДоходах.Вставить("ОбщаяСуммаДохода", СтрокаВЧисло(ОбъектXDTO.СумИтНалПер.СумДохОбщ));
	СведенияОДоходах.Вставить("НалоговаяБаза", СтрокаВЧисло(ОбъектXDTO.СумИтНалПер.НалБаза));
	СведенияОДоходах.Вставить("СуммаНалогаИсчисленная", СтрокаВЧисло(ОбъектXDTO.СумИтНалПер.НалИсчисл));
	СведенияОДоходах.Вставить("СуммаНалогаУдержанная", СтрокаВЧисло(ОбъектXDTO.СумИтНалПер.НалУдерж));
	СведенияОДоходах.Вставить("СуммаФиксированныхАвансовыхПлатежей", СтрокаВЧисло(ОбъектXDTO.СумИтНалПер.АвансПлатФикс));
	СведенияОДоходах.Вставить("СуммаНалогаПеречисленная", СтрокаВЧисло(ОбъектXDTO.СумИтНалПер.НалПеречисл));
	СведенияОДоходах.Вставить("СуммаНалогаИзлишнеУдержанная", СтрокаВЧисло(ОбъектXDTO.СумИтНалПер.НалУдержЛиш));
	СведенияОДоходах.Вставить("СуммаНалогаНеУдержанная", СтрокаВЧисло(ОбъектXDTO.СумИтНалПер.НалНеУдерж));
	СведенияОДоходах.Вставить("СведенияОДоходахИВычетахПоМесяцам", Новый Массив);
	СведенияОДоходах.Вставить("ПредоставленныеВычеты", Новый Массив);
	СведенияОДоходах.Вставить("Уведомления", Новый Массив);
	
	Если ТипЗнч(ОбъектXDTO.ДохВыч.СвСумДох) = Тип("СписокXDTO") Тогда
		Для Каждого ТекущийЭлемент Из ОбъектXDTO.ДохВыч.СвСумДох Цикл
			СведенияОДоходах.СведенияОДоходахИВычетахПоМесяцам.Добавить(СведенияОДоходахИВычетахПоМесяцам(ТекущийЭлемент));
		КонецЦикла; 
	ИначеЕсли ТипЗнч(ОбъектXDTO.ДохВыч.СвСумДох) = Тип("ОбъектXDTO") Тогда
		СведенияОДоходах.СведенияОДоходахИВычетахПоМесяцам.Добавить(СведенияОДоходахИВычетахПоМесяцам(ОбъектXDTO.ДохВыч.СвСумДох));
	КонецЕсли; 
	
	Если ЕстьСвойство(ОбъектXDTO, "НалВычССИ") Тогда
		НалВычССИ = ОбъектXDTO.НалВычССИ;
		Если ЕстьСвойство(НалВычССИ, "ПредВычССИ") Тогда
			Если ТипЗнч(НалВычССИ.ПредВычССИ) = Тип("СписокXDTO") Тогда
				Для Каждого ТекущийЭлемент Из НалВычССИ.ПредВычССИ Цикл
					СведенияОДоходах.ПредоставленныеВычеты.Добавить(
						Новый Структура("КодВычета, СуммаВычета", ТекущийЭлемент.КодВычет, СтрокаВЧисло(ТекущийЭлемент.СумВычет)));
				КонецЦикла; 
			ИначеЕсли ТипЗнч(НалВычССИ.ПредВычССИ) = Тип("ОбъектXDTO") Тогда
				СведенияОДоходах.ПредоставленныеВычеты.Добавить(
					Новый Структура("КодВычета, СуммаВычета", НалВычССИ.ПредВычССИ.КодВычет, СтрокаВЧисло(НалВычССИ.ПредВычССИ.СумВычет)));
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьСвойство(НалВычССИ, "УведВыч") Тогда
			Если ТипЗнч(НалВычССИ.УведВыч) = Тип("СписокXDTO") Тогда
				Для Каждого ТекущийЭлемент Из НалВычССИ.УведВыч Цикл
					СведенияОДоходах.Уведомления.Добавить(
						Новый Структура("КодВидаУведомления, НомерУведомления, ДатаУведомления, КодНалоговогоОргана", 
						ТекущийЭлемент.КодВидУвед, ТекущийЭлемент.НомерУвед, ДатаИзСтрокиЭД(ТекущийЭлемент.ДатаУвед), ТекущийЭлемент.НОУвед));
				КонецЦикла; 
			ИначеЕсли ТипЗнч(НалВычССИ.УведВыч) = Тип("ОбъектXDTO") Тогда
				СведенияОДоходах.Уведомления.Добавить(
						Новый Структура("КодВидаУведомления, НомерУведомления, ДатаУведомления, КодНалоговогоОргана", 
						НалВычССИ.УведВыч.КодВидУвед, НалВычССИ.УведВыч.НомерУвед, ДатаИзСтрокиЭД(НалВычССИ.УведВыч.ДатаУвед), НалВычССИ.УведВыч.НОУвед));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Возврат СведенияОДоходах;
	
КонецФункции

Функция СведенияОДоходахИВычетахПоМесяцам(ОбъектXDTO)
	
	СведенияОДоходахПоМесяцу = Новый Структура;
	СведенияОДоходахПоМесяцу.Вставить("Месяц", ОбъектXDTO.Месяц);
	СведенияОДоходахПоМесяцу.Вставить("КодДохода", ОбъектXDTO.КодДоход);
	СведенияОДоходахПоМесяцу.Вставить("СуммаДохода", СтрокаВЧисло(ОбъектXDTO.СумДоход));
	СведенияОДоходахПоМесяцу.Вставить("СведенияОВычетах", Новый Массив);
	
	Если ЕстьСвойство(ОбъектXDTO, "СвСумВыч") Тогда
		Если ТипЗнч(ОбъектXDTO.СвСумВыч) = Тип("СписокXDTO") Тогда
			Для Каждого ТекущийЭлемент Из ОбъектXDTO.СвСумВыч Цикл
				СведенияОДоходахПоМесяцу.СведенияОВычетах.Добавить(
					Новый Структура("КодВычета, СуммаВычета", ТекущийЭлемент.КодВычет, СтрокаВЧисло(ТекущийЭлемент.СумВычет)));
			КонецЦикла; 
		ИначеЕсли ТипЗнч(ОбъектXDTO.СвСумВыч) = Тип("ОбъектXDTO") Тогда
			СведенияОДоходахПоМесяцу.СведенияОВычетах.Добавить(
				Новый Структура("КодВычета, СуммаВычета", ОбъектXDTO.СвСумВыч.КодВычет, СтрокаВЧисло(ОбъектXDTO.СвСумВыч.СумВычет)));
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат СведенияОДоходахПоМесяцу;
	
КонецФункции

Функция ПерсонифицированныеСведения(ОбъектXDTO, Версия)
	
	ПерсонифицированныеСведения = Новый Структура;
	Если Версия = "5.01" Тогда
		ПерсонифицированныеСведения.Вставить("НомерКорректировки", ОбъектXDTO.НомКорр);
		ПерсонифицированныеСведения.Вставить("Период", ОбъектXDTO.Период);
		ПерсонифицированныеСведения.Вставить("ОтчетГод", ОбъектXDTO.ОтчетГод);
		ПерсонифицированныеСведения.Вставить("Номер", ОбъектXDTO.Номер);
		ПерсонифицированныеСведения.Вставить("Дата", ОбъектXDTO.Дата);
		ПерсонифицированныеСведения.Вставить("ПризнакОПС", ОбъектXDTO.ДанФЛПолуч.ПризОПС);
		ПерсонифицированныеСведения.Вставить("ПризнакОМС", ОбъектXDTO.ДанФЛПолуч.ПризОМС);
		ПерсонифицированныеСведения.Вставить("ПризнакОСС", ОбъектXDTO.ДанФЛПолуч.ПризОСС);
	Иначе
		Если ЕстьСвойство(ОбъектXDTO, "ПрАннулир") Тогда
			ПерсонифицированныеСведения.Вставить("ПризнакАннулирования", ОбъектXDTO.ПрАннулир);
		КонецЕсли; 
	КонецЕсли; 
	
	ЗаполнитьСвойство(ПерсонифицированныеСведения, "ИНН", ОбъектXDTO.ДанФЛПолуч, "ИННФЛ");
	ЗаполнитьСвойство(ПерсонифицированныеСведения, "КодВидаДокумента", ОбъектXDTO.ДанФЛПолуч, "КодВидДок");
	ЗаполнитьСвойство(ПерсонифицированныеСведения, "СерияИНомерДокумента", ОбъектXDTO.ДанФЛПолуч, "СерНомДок");
	ЗаполнитьСвойство(ПерсонифицированныеСведения, "Пол", ОбъектXDTO.ДанФЛПолуч, "Пол");
	
	ПерсонифицированныеСведения.Вставить("СНИЛС", ОбъектXDTO.ДанФЛПолуч.СНИЛС);
	ПерсонифицированныеСведения.Вставить("ДатаРождения", ДатаИзСтрокиЭД(ОбъектXDTO.ДанФЛПолуч.ДатаРожд));
	ПерсонифицированныеСведения.Вставить("КодСтраныГражданства", ОбъектXDTO.ДанФЛПолуч.Гражд);
			
	ЗаполнитьСвойство(ПерсонифицированныеСведения, "Фамилия", ОбъектXDTO.ДанФЛПолуч.ФИО, "Фамилия");
	ЗаполнитьСвойство(ПерсонифицированныеСведения, "Имя", ОбъектXDTO.ДанФЛПолуч.ФИО, "Имя");
	ЗаполнитьСвойство(ПерсонифицированныеСведения, "Отчество", ОбъектXDTO.ДанФЛПолуч.ФИО, "Отчество");
	
	СведенияПоМесяцам = Новый Массив;
	ДополнительныйТарифСведенияПоМесяцам = Новый Массив;
	
	Если ЕстьСвойство(ОбъектXDTO, "СвВыплСВОПС") Тогда
		
		Если Версия = "5.01" Тогда
			
			ПерсонифицированныеСведения.Вставить("СуммаВыплатЗа3Месяца", ОбъектXDTO.СвВыплСВОПС.СвВыпл.СумВыплВс3);
			ПерсонифицированныеСведения.Вставить("БазаОПСза3Месяца", ОбъектXDTO.СвВыплСВОПС.СвВыпл.ВыплОПСВс3);
			ПерсонифицированныеСведения.Вставить("БазаОПСпоДоговорамЗа3Месяца", ОбъектXDTO.СвВыплСВОПС.СвВыпл.ВыплОПСДогВс3);
			ПерсонифицированныеСведения.Вставить("НачисленоСтраховыхВзносовЗа3Месяца", ОбъектXDTO.СвВыплСВОПС.СвВыпл.НачислСВВс3);
			
		КонецЕсли; 
		
		Если ТипЗнч(ОбъектXDTO.СвВыплСВОПС.СвВыпл.СвВыплМК) = Тип("СписокXDTO") Тогда
			Для Каждого ТекущийЭлемент Из ОбъектXDTO.СвВыплСВОПС.СвВыпл.СвВыплМК Цикл
				СведенияПоМесяцам.Добавить(СведенияПоМесяцуСтруктура(ТекущийЭлемент));
			КонецЦикла;
		ИначеЕсли ТипЗнч(ОбъектXDTO.СвВыплСВОПС.СвВыпл.СвВыплМК) = Тип("ОбъектXDTO") Тогда
			СведенияПоМесяцам.Добавить(СведенияПоМесяцуСтруктура(ОбъектXDTO.СвВыплСВОПС.СвВыпл.СвВыплМК));
		КонецЕсли;
		
		Если ЕстьСвойство(ОбъектXDTO.СвВыплСВОПС, "ВыплСВДоп") Тогда
			
			Если Версия = "5.01" Тогда
				ПерсонифицированныеСведения.Вставить("ДополнительныйТарифСуммаВыплатЗа3Месяца", ОбъектXDTO.СвВыплСВОПС.ВыплСВДоп.ВыплСВВс3);
				ПерсонифицированныеСведения.Вставить("ДополнительныйТарифНачисленоСтраховыхВзносовЗа3Месяца", ОбъектXDTO.СвВыплСВОПС.ВыплСВДоп.НачислСВВс3);
			КонецЕсли;
			
			Если ТипЗнч(ОбъектXDTO.СвВыплСВОПС.ВыплСВДоп.ВыплСВДопМТ) = Тип("СписокXDTO") Тогда
				Для Каждого ТекущийЭлемент Из ОбъектXDTO.СвВыплСВОПС.ВыплСВДоп.ВыплСВДопМТ Цикл
					ДополнительныйТарифСведенияПоМесяцам.Добавить(ДопСведенияПоМесяцуСтруктура(ТекущийЭлемент));
				КонецЦикла;
			ИначеЕсли ТипЗнч(ОбъектXDTO.СвВыплСВОПС.ВыплСВДоп.ВыплСВДопМТ) = Тип("ОбъектXDTO") Тогда
				ДополнительныйТарифСведенияПоМесяцам.Добавить(ДопСведенияПоМесяцуСтруктура(ОбъектXDTO.СвВыплСВОПС.ВыплСВДоп.ВыплСВДопМТ));
			КонецЕсли;
			
		КонецЕсли; 
			
	КонецЕсли; 
	
	ПерсонифицированныеСведения.Вставить("СведенияПоМесяцам", СведенияПоМесяцам);
	ПерсонифицированныеСведения.Вставить("ДополнительныйТарифСведенияПоМесяцам", ДополнительныйТарифСведенияПоМесяцам);
	
	Возврат ПерсонифицированныеСведения;
	
КонецФункции

Функция ПерсонифицированныеСведенияИностранногоГражданина(ОбъектXDTO, Версия)
	
	ПерсонифицированныеСведения = Новый Структура;
	
	ЗаполнитьСвойство(ПерсонифицированныеСведения, "ИНН", ОбъектXDTO, "ИННФЛ");
	ЗаполнитьСвойство(ПерсонифицированныеСведения, "СНИЛС", ОбъектXDTO, "СНИЛС");
	ПерсонифицированныеСведения.Вставить("КодСтраныГражданства", ОбъектXDTO.Гражд);
	ПерсонифицированныеСведения.Вставить("Фамилия", ОбъектXDTO.ФИО.Фамилия);
	ПерсонифицированныеСведения.Вставить("Имя", ОбъектXDTO.ФИО.Имя);
	ЗаполнитьСвойство(ПерсонифицированныеСведения, "Отчество", ОбъектXDTO.ФИО, "Отчество");
	СведенияПоСуммам(ПерсонифицированныеСведения, ОбъектXDTO.СумВыплат);
	
	Возврат ПерсонифицированныеСведения;
	
КонецФункции

Процедура СведенияПоСуммам(Структура, ОбъектXDTO)
	
	Структура.Вставить("ВсегоСНачалаРасчетногоПериода", ОбъектXDTO.СумВсегоПер);
	Структура.Вставить("ПервыйМесяц", ОбъектXDTO.Сум1Посл3М);
	Структура.Вставить("ВторойМесяц", ОбъектXDTO.Сум2Посл3М);
	Структура.Вставить("ТретийМесяц", ОбъектXDTO.Сум3Посл3М);
	
КонецПроцедуры

Функция ДопСведенияПоМесяцуСтруктура(ОбъектXDTO)
	
	ДопСведенияПоМесяцу = Новый Структура;
	ДопСведенияПоМесяцу.Вставить("Месяц", СтрокаВЧисло(ОбъектXDTO.Месяц));
	//ЗаполнитьСвойство(ДопСведенияПоМесяцу, "КодЗастрахованногоЛица", ОбъектXDTO, "КодСтрахЛиц");
	ЗаполнитьСвойство(ДопСведенияПоМесяцу, "КодТарифа", ОбъектXDTO, "Тариф");
	ДопСведенияПоМесяцу.Вставить("СуммаВыплатПоДопТарифу", ОбъектXDTO.ВыплСВ);
	ДопСведенияПоМесяцу.Вставить("НачисленоСтраховыхВзносовПоДопТарифу", ОбъектXDTO.НачислСВ);
	
	Возврат ДопСведенияПоМесяцу;
	
КонецФункции

Функция СведенияПоМесяцуСтруктура(ОбъектXDTO)
	
	СведенияПоМесяцу = Новый Структура;
	СведенияПоМесяцу.Вставить("Месяц", СтрокаВЧисло(ОбъектXDTO.Месяц));
	СведенияПоМесяцу.Вставить("КодКатегорииЛица", ОбъектXDTO.КодКатЛиц);
	СведенияПоМесяцу.Вставить("СуммаВыплат", ОбъектXDTO.СумВыпл);
	ЗаполнитьСвойство(СведенияПоМесяцу, "БазаОПС", ОбъектXDTO, "ВыплОПС");
	ЗаполнитьСвойство(СведенияПоМесяцу, "БазаОПСпоДоговорам", ОбъектXDTO, "ВыплОПСДог");
	ЗаполнитьСвойство(СведенияПоМесяцу, "НачисленоСтраховыхВзносов", ОбъектXDTO, "НачислСВ");
	
	Возврат СведенияПоМесяцу;
	
КонецФункции

Процедура ЗаполнитьСведенияОПокупке(СтрокаТаблицыЗначений, ОбъектXDTO)
	
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "НомерПоПорядку", ОбъектXDTO, "НомПП");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "НомерСчФ", ОбъектXDTO, "НомерСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "КодСпособаВыставления", ОбъектXDTO, "КодСпосВыст");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ДатаСчФ", ОбъектXDTO, "ДатаСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "НомерИсправленияСчФ", ОбъектXDTO, "НомИспрСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ДатаИсправленияСчФ", ОбъектXDTO, "ДатаИспрСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "НомерКорСчФ", ОбъектXDTO, "НомерКСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ДатаКорСчФ", ОбъектXDTO, "ДатаКСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "НомерИсправленияКорСчФ", ОбъектXDTO, "НомИспрКСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ДатаИсправленияКорСчФ", ОбъектXDTO, "ДатаИспрКСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "НаименованиеПродавца", ОбъектXDTO, "НаимПрод");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ИННПродавцаОрганизации", ОбъектXDTO, "ИННЮЛ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "КПППродавца", ОбъектXDTO, "КПП");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ИННПродавцаИП", ОбъектXDTO, "ИННФЛ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "КодВалюты", ОбъектXDTO, "КодОКВ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "СтоимостьПокупокПоСчФ", ОбъектXDTO, "СтТовУчНалВсего");
	
	Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.ИННПродавцаОрганизации) Тогда
		СтрокаТаблицыЗначений.ИННКонтрагента = СокрЛП(СтрокаТаблицыЗначений.ИННПродавцаОрганизации);
		СтрокаТаблицыЗначений.КППКонтрагента = СокрЛП(СтрокаТаблицыЗначений.КПППродавца);
	Иначе
		СтрокаТаблицыЗначений.ИННКонтрагента = СокрЛП(СтрокаТаблицыЗначений.ИННПродавцаИП);
		СтрокаТаблицыЗначений.КППКонтрагента ="";
	КонецЕсли; 
	
	СтрокаТаблицыЗначений.СуммаНДСПоСчФ = СуммаНДС(ОбъектXDTO.СумНДСВыч, "СумНДС");
	Если СтрокаТаблицыЗначений.СуммаНДСПоСчФ = "без НДС" Тогда
		 СтрокаТаблицыЗначений.СуммаНДСПоСчФЧисло = 0;
	Иначе
		 СтрокаТаблицыЗначений.СуммаНДСПоСчФЧисло = Число(СтрокаТаблицыЗначений.СуммаНДСПоСчФ);
	КонецЕсли; 
		
	Если ЕстьСвойство(ОбъектXDTO, "СвПосредн") Тогда
		СведенияОПосреднике = Новый Структура;
		Если ЕстьСвойство(ОбъектXDTO.СвПосредн, "СведЮЛ") Тогда
			ЗаполнитьСвойство(СведенияОПосреднике, "НаименованиеОрганизации", ОбъектXDTO.СвПосредн.СведЮЛ, "НаимОрг");
			ЗаполнитьСвойство(СведенияОПосреднике, "ИННОрганизации", ОбъектXDTO.СвПосредн.СведЮЛ, "ИННЮЛ");
			ЗаполнитьСвойство(СведенияОПосреднике, "КППОрганизации", ОбъектXDTO.СвПосредн.СведЮЛ, "КПП");
		ИначеЕсли ЕстьСвойство(ОбъектXDTO.СвПосредн, "СведИП") Тогда
			ЗаполнитьСвойство(СведенияОПосреднике, "ИННФЛ", ОбъектXDTO.СвПосредн.СведИП, "ИННФЛ");
			Если ЕстьСвойство(ОбъектXDTO.СвПосредн.СведИП, "ФИОИП") Тогда
				ЗаполнитьСвойство(СведенияОПосреднике, "Фамилия", ОбъектXDTO.СвПосредн.СведИП.ФИОИП, "Фамилия");
				ЗаполнитьСвойство(СведенияОПосреднике, "Имя", ОбъектXDTO.СвПосредн.СведИП.ФИОИП, "Имя");
				ЗаполнитьСвойство(СведенияОПосреднике, "Отчество", ОбъектXDTO.СвПосредн.СведИП.ФИОИП, "Отчество");
			КонецЕсли; 
		КонецЕсли;
		СтрокаТаблицыЗначений.СведенияОПосреднике = СведенияОПосреднике;
	КонецЕсли;
	
	Если ЕстьСвойство(ОбъектXDTO, "КодВидОпер") Тогда
		СтрокаТаблицыЗначений.КодВидаОперации = Новый Массив;
		Если ТипЗнч(ОбъектXDTO.КодВидОпер) = Тип("СписокXDTO") Тогда
			Для Каждого ТекущееЗначение Из ОбъектXDTO.КодВидОпер Цикл
				СтрокаТаблицыЗначений.КодВидаОперации.Добавить(ТекущееЗначение);
			КонецЦикла;
		Иначе
			СтрокаТаблицыЗначений.КодВидаОперации.Добавить( ОбъектXDTO.КодВидОпер);
		КонецЕсли; 
	КонецЕсли; 
	Если ЕстьСвойство(ОбъектXDTO, "СвДокУплНал") Тогда
		СтрокаТаблицыЗначений.СведенияОДокументеПодтверждающемУплатуНалога = Новый Массив;
		Если ТипЗнч(ОбъектXDTO.СвДокУплНал) = Тип("СписокXDTO") Тогда
			Для Каждого ТекущееЗначение Из ОбъектXDTO.СвДокУплНал Цикл
				Структура = Новый Структура("Номер, Дата");
				Если ЕстьСвойство(ТекущееЗначение, "НомерДокУплНал") Тогда
					Структура.Вставить("Номер", ТекущееЗначение.НомерДокУплНал);
				КонецЕсли; 
				Если ЕстьСвойство(ТекущееЗначение, "ДатаДокУплНал") Тогда
					Структура.Вставить("Дата", ТекущееЗначение.ДатаДокУплНал);
				КонецЕсли; 	
				СтрокаТаблицыЗначений.СведенияОДокументеПодтверждающемУплатуНалога.Добавить(Структура);
			КонецЦикла;
		Иначе
			ТекущееЗначение = ОбъектXDTO.СвДокУплНал;
			Структура = Новый Структура("Номер, Дата");
				Если ЕстьСвойство(ТекущееЗначение, "НомерДокУплНал") Тогда
					Структура.Вставить("Номер", ТекущееЗначение.НомерДокУплНал);
				КонецЕсли; 
				Если ЕстьСвойство(ТекущееЗначение, "ДатаДокУплНал") Тогда
					Структура.Вставить("Дата", ТекущееЗначение.ДатаДокУплНал);
				КонецЕсли; 	
			СтрокаТаблицыЗначений.СведенияОДокументеПодтверждающемУплатуНалога.Добавить(Структура);
		КонецЕсли; 
	КонецЕсли; 
	Если ЕстьСвойство(ОбъектXDTO, "ДатаПринУчет") Тогда
		СтрокаТаблицыЗначений.ДатаПринятияНаУчетТоваров = Новый Массив;
		Если ТипЗнч(ОбъектXDTO.ДатаПринУчет) = Тип("СписокXDTO") Тогда
			Для Каждого ТекущееЗначение Из ОбъектXDTO.ДатаПринУчет Цикл
				СтрокаТаблицыЗначений.ДатаПринятияНаУчетТоваров.Добавить(ТекущееЗначение);
			КонецЦикла;
		Иначе
			СтрокаТаблицыЗначений.ДатаПринятияНаУчетТоваров.Добавить(ОбъектXDTO.ДатаПринУчет);
		КонецЕсли; 
	КонецЕсли; 
	Если ЕстьСвойство(ОбъектXDTO, "НомерТД") Тогда
		СтрокаТаблицыЗначений.НомерТаможеннойДекларации = Новый Массив;
		Если ТипЗнч(ОбъектXDTO.НомерТД) = Тип("СписокXDTO") Тогда
			Для Каждого ТекущееЗначение Из ОбъектXDTO.НомерТД Цикл
				СтрокаТаблицыЗначений.НомерТаможеннойДекларации.Добавить(ТекущееЗначение);
			КонецЦикла;
		Иначе
			СтрокаТаблицыЗначений.НомерТаможеннойДекларации.Добавить(ОбъектXDTO.НомерТД);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПродаже(СтрокаТаблицыЗначений, ОбъектXDTO)
	
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "НомерПоПорядку", ОбъектXDTO, "НомПП");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "НомерСчФ", ОбъектXDTO, "НомерСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ДатаСчФ", ОбъектXDTO, "ДатаСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "НомерИсправленияСчФ", ОбъектXDTO, "НомИспрСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ДатаИсправленияСчФ", ОбъектXDTO, "ДатаИспрСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "НомерКорСчФ", ОбъектXDTO, "НомерКСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ДатаКорСчФ", ОбъектXDTO, "ДатаКСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "НомерИсправленияКорСчФ", ОбъектXDTO, "НомИспрКСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ДатаИсправленияКорСчФ", ОбъектXDTO, "ДатаИспрКСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "НаименованиеПокупателя", ОбъектXDTO, "НаимПок");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ИННПокупателяОрганизации", ОбъектXDTO, "ИННЮЛ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "КПППокупателя", ОбъектXDTO, "КПП");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ИННПокупателяИП", ОбъектXDTO, "ИННФЛ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "КодВалюты", ОбъектXDTO, "КодОКВ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "СтоимостьПродажПоСчФВВалюте", ОбъектXDTO, "СтТовУчНалВсего");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "СтоимостьПродажПоСчФ", ОбъектXDTO, "СтТовУчНалРубКоп");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "СтоимостьПродажПоСчфПоСтавке18", ОбъектXDTO, "СтТовРубКоп18");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "СтоимостьПродажПоСчфПоСтавке10", ОбъектXDTO, "СтТовРубКоп10");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "СтоимостьПродажПоСчфПоСтавке0", ОбъектXDTO, "СтТовРубКоп0");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "СуммаНДСПоСтавке18", ОбъектXDTO, "СумНДСРубКоп18");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "СуммаНДСПоСтавке10", ОбъектXDTO, "СумНДСРубКоп10");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "СтоимостьПродажПоСчфБезНДС", ОбъектXDTO, "СтПродОсвНДСРубКоп");
	
	Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.ИННПокупателяОрганизации) Тогда
		СтрокаТаблицыЗначений.ИННКонтрагента = СокрЛП(СтрокаТаблицыЗначений.ИННПокупателяОрганизации);
		СтрокаТаблицыЗначений.КППКонтрагента = СокрЛП(СтрокаТаблицыЗначений.КПППокупателя);
	Иначе
		СтрокаТаблицыЗначений.ИННКонтрагента = СокрЛП(СтрокаТаблицыЗначений.ИННПокупателяИП);
		СтрокаТаблицыЗначений.КППКонтрагента ="";
	КонецЕсли; 
	
	Если ЕстьСвойство(ОбъектXDTO, "КодВидОпер") Тогда
		СтрокаТаблицыЗначений.КодВидаОперации = Новый Массив;
		Если ТипЗнч(ОбъектXDTO.КодВидОпер) = Тип("СписокXDTO") Тогда
			Для Каждого ТекущееЗначение Из ОбъектXDTO.КодВидОпер Цикл
				СтрокаТаблицыЗначений.КодВидаОперации.Добавить(ТекущееЗначение);
			КонецЦикла;
		Иначе
			СтрокаТаблицыЗначений.КодВидаОперации.Добавить( ОбъектXDTO.КодВидОпер);
		КонецЕсли; 
	КонецЕсли; 
	
	Если ЕстьСвойство(ОбъектXDTO, "НомерТД") Тогда
		СтрокаТаблицыЗначений.НомерТаможеннойДекларации = Новый Массив;
		Если ТипЗнч(ОбъектXDTO.НомерТД) = Тип("СписокXDTO") Тогда
			Для Каждого ТекущееЗначение Из ОбъектXDTO.НомерТД Цикл
				СтрокаТаблицыЗначений.НомерТаможеннойДекларации.Добавить(ТекущееЗначение);
			КонецЦикла;
		Иначе
			СтрокаТаблицыЗначений.НомерТаможеннойДекларации.Добавить(ОбъектXDTO.НомерТД);
		КонецЕсли; 
	КонецЕсли;
	
	Если ЕстьСвойство(ОбъектXDTO, "ВидТов") Тогда
		СтрокаТаблицыЗначений.КодВидаТовара = Новый Массив;
		Если ТипЗнч(ОбъектXDTO.ВидТов) = Тип("СписокXDTO") Тогда
			Для Каждого ТекущееЗначение Из ОбъектXDTO.ВидТов Цикл
				СтрокаТаблицыЗначений.КодВидаТовара.Добавить(ТекущееЗначение);
			КонецЦикла;
		Иначе
			СтрокаТаблицыЗначений.КодВидаТовара.Добавить(ОбъектXDTO.ВидТов);
		КонецЕсли; 
	КонецЕсли;

	Если ЕстьСвойство(ОбъектXDTO, "СвПосредн") Тогда
		СведенияОПосреднике = Новый Структура;
		Если ЕстьСвойство(ОбъектXDTO.СвПосредн, "СведЮЛ") Тогда
			ЗаполнитьСвойство(СведенияОПосреднике, "НаименованиеОрганизации", ОбъектXDTO.СвПосредн.СведЮЛ, "НаимОрг");
			ЗаполнитьСвойство(СведенияОПосреднике, "ИННОрганизации", ОбъектXDTO.СвПосредн.СведЮЛ, "ИННЮЛ");
			ЗаполнитьСвойство(СведенияОПосреднике, "КППОрганизации", ОбъектXDTO.СвПосредн.СведЮЛ, "КПП");
		ИначеЕсли ЕстьСвойство(ОбъектXDTO.СвПосредн, "СведИП") Тогда
			ЗаполнитьСвойство(СведенияОПосреднике, "ИННФЛ", ОбъектXDTO.СвПосредн.СведИП, "ИННФЛ");
			Если ЕстьСвойство(ОбъектXDTO.СвПосредн.СведИП, "ФИОИП") Тогда
				ЗаполнитьСвойство(СведенияОПосреднике, "Фамилия", ОбъектXDTO.СвПосредн.СведИП.ФИОИП, "Фамилия");
				ЗаполнитьСвойство(СведенияОПосреднике, "Имя", ОбъектXDTO.СвПосредн.СведИП.ФИОИП, "Имя");
				ЗаполнитьСвойство(СведенияОПосреднике, "Отчество", ОбъектXDTO.СвПосредн.СведИП.ФИОИП, "Отчество");
			КонецЕсли; 
		КонецЕсли;
		СтрокаТаблицыЗначений.СведенияОПосреднике = СведенияОПосреднике;
	КонецЕсли;
	
	Если ЕстьСвойство(ОбъектXDTO, "СвДокПдтвОпл") Тогда
		СтрокаТаблицыЗначений.СведенияОДокументеПодтверждающемОплату = Новый Массив;
		Если ТипЗнч(ОбъектXDTO.СвДокПдтвОпл) = Тип("СписокXDTO") Тогда
			Для Каждого ТекущееЗначение Из ОбъектXDTO.СвДокПдтвОпл Цикл
				Структура = Новый Структура("Номер, Дата");
				Если ЕстьСвойство(ТекущееЗначение, "НомерДокПдтвОпл") Тогда
					Структура.Вставить("Номер", ТекущееЗначение.НомерДокПдтвОпл);
				КонецЕсли; 
				Если ЕстьСвойство(ТекущееЗначение, "ДатаДокПдтвОпл") Тогда
					Структура.Вставить("Дата", ТекущееЗначение.ДатаДокПдтвОпл);
				КонецЕсли; 	
				СтрокаТаблицыЗначений.СведенияОДокументеПодтверждающемОплату.Добавить(Структура);
			КонецЦикла;
		Иначе
			ТекущееЗначение = ОбъектXDTO.СвДокПдтвОпл;
			Структура = Новый Структура("Номер, Дата");
				Если ЕстьСвойство(ТекущееЗначение, "НомерДокПдтвОпл") Тогда
					Структура.Вставить("Номер", ТекущееЗначение.НомерДокПдтвОпл);
				КонецЕсли; 
				Если ЕстьСвойство(ТекущееЗначение, "ДатаДокПдтвОпл") Тогда
					Структура.Вставить("Дата", ТекущееЗначение.ДатаДокПдтвОпл);
				КонецЕсли; 	
			СтрокаТаблицыЗначений.СведенияОДокументеПодтверждающемОплату.Добавить(Структура);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДобавитьСведенияГраф10_19(СтрокаТаблицыЗначений, ОбъектXDTO)
	
	СведенияГраф10_19 = Новый Структура;
	ЗаполнитьСвойство(СведенияГраф10_19, "КодВалюты", ОбъектXDTO, "КодОКВ");
	ЗаполнитьСвойство(СведенияГраф10_19, "СтоимостьПродажПоСчФВсего", ОбъектXDTO, "СтТовУчНалВсего");
	Если ЕстьСвойство(ОбъектXDTO, "ВтчСумНДС")  Тогда
		СведенияГраф10_19.Вставить("ВТомЧислеСуммаНДС", СуммаНДС(ОбъектXDTO.ВтчСумНДС, "СумНДС"));
	КонецЕсли; 
	
	Если ЕстьСвойство(ОбъектXDTO, "РазнСтоимКСчФ") Тогда
		ЗаполнитьСвойство(СведенияГраф10_19, "УменьшениеСтоимостиСУчетомНДСПоКоррСчф", ОбъектXDTO.РазнСтоимКСчФ, "Ум");
		ЗаполнитьСвойство(СведенияГраф10_19, "УвеличениеСтоимостиСУчетомНДСПоКоррСчф", ОбъектXDTO.РазнСтоимКСчФ, "Увел");
	КонецЕсли; 
	
	Если ЕстьСвойство(ОбъектXDTO, "РазнНДСКСчФ") Тогда
		Если ЕстьСвойство(ОбъектXDTO.РазнНДСКСчФ, "Ум") Тогда
			СведенияГраф10_19.Вставить("УменьшениеНДСПоКоррСчф", СуммаНДС(ОбъектXDTO.РазнНДСКСчФ.Ум, "СумНДС"));
		КонецЕсли; 
		Если ЕстьСвойство(ОбъектXDTO.РазнНДСКСчФ, "Увел") Тогда
			СведенияГраф10_19.Вставить("УвеличениеНДСПоКоррСчф", СуммаНДС(ОбъектXDTO.РазнНДСКСчФ.Увел, "СумНДС"));
		КонецЕсли; 
	КонецЕсли; 
	
	Если ЕстьСвойство(ОбъектXDTO, "СвПосредн") Тогда
		СведенияОПосреднике = Новый Структура;
		Если ЕстьСвойство(ОбъектXDTO.СвПосредн, "СведЮЛ") Тогда
			ЗаполнитьСвойство(СведенияОПосреднике, "НаименованиеОрганизации", ОбъектXDTO.СвПосредн.СведЮЛ, "НаимОрг");
			ЗаполнитьСвойство(СведенияОПосреднике, "ИННОрганизации", ОбъектXDTO.СвПосредн.СведЮЛ, "ИННЮЛ");
			ЗаполнитьСвойство(СведенияОПосреднике, "КППОрганизации", ОбъектXDTO.СвПосредн.СведЮЛ, "КПП");
			ЗаполнитьСвойство(СведенияОПосреднике, "НомерСчФПродавца", ОбъектXDTO.СвПосредн.СведЮЛ, "НомерСчФпрод");
			ЗаполнитьСвойство(СведенияОПосреднике, "ДатаСчФПродавца", ОбъектXDTO.СвПосредн.СведЮЛ, "ДатаСчФпрод");
		ИначеЕсли ЕстьСвойство(ОбъектXDTO.СвПосредн, "СведИП") Тогда
			ЗаполнитьСвойство(СведенияОПосреднике, "ИННФЛ", ОбъектXDTO.СвПосредн.СведИП, "ИННФЛ");
			ЗаполнитьСвойство(СведенияОПосреднике, "НомерСчФПродавца", ОбъектXDTO.СвПосредн.СведИП, "НомерСчФпрод");
			ЗаполнитьСвойство(СведенияОПосреднике, "ДатаСчФПродавца", ОбъектXDTO.СвПосредн.СведИП, "ДатаСчФпрод");
			Если ЕстьСвойство(ОбъектXDTO.СвПосредн.СведИП, "ФИОИП") Тогда
				ЗаполнитьСвойство(СведенияОПосреднике, "Фамилия", ОбъектXDTO.СвПосредн.СведИП.ФИОИП, "Фамилия");
				ЗаполнитьСвойство(СведенияОПосреднике, "Имя", ОбъектXDTO.СвПосредн.СведИП.ФИОИП, "Имя");
				ЗаполнитьСвойство(СведенияОПосреднике, "Отчество", ОбъектXDTO.СвПосредн.СведИП.ФИОИП, "Отчество");
			КонецЕсли; 
		КонецЕсли;
		СведенияГраф10_19.Вставить("СведенияОПосреднике", СведенияОПосреднике);
	КонецЕсли;
	СтрокаТаблицыЗначений.СведенияГраф10_19.Добавить(СведенияГраф10_19);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПродажеВЖурналеСчетовФактур(СтрокаТаблицыЗначений, ОбъектXDTO)
	
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "НомерПоПорядку", ОбъектXDTO, "НомПП");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "НомерСчФ", ОбъектXDTO, "НомерСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ДатаСчФ", ОбъектXDTO, "ДатаСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "НомерИсправленияСчФ", ОбъектXDTO, "НомерИспрСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ДатаИсправленияСчФ", ОбъектXDTO, "ДатаИспрСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "НомерКорСчФ", ОбъектXDTO, "НомерКСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ДатаКорСчФ", ОбъектXDTO, "ДатаКСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "НомерИсправленияКорСчФ", ОбъектXDTO, "НомерИспрКСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ДатаИсправленияКорСчФ", ОбъектXDTO, "ДатаИспрКСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "НаименованиеПокупателя", ОбъектXDTO, "НаимПок");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ИННПокупателяОрганизации", ОбъектXDTO, "ИННЮЛ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "КПППокупателя", ОбъектXDTO, "КПП");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ИННПокупателяИП", ОбъектXDTO, "ИННФЛ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ДатаВыставленияСчФ", ОбъектXDTO, "ДатаВыстСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "КодСпособаВыставления", ОбъектXDTO, "КодСпосВыст");

	Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.ИННПокупателяОрганизации) Тогда
		СтрокаТаблицыЗначений.ИННКонтрагента = СокрЛП(СтрокаТаблицыЗначений.ИННПокупателяОрганизации);
		СтрокаТаблицыЗначений.КППКонтрагента = СокрЛП(СтрокаТаблицыЗначений.КПППокупателя);
	Иначе
		СтрокаТаблицыЗначений.ИННКонтрагента = СокрЛП(СтрокаТаблицыЗначений.ИННПокупателяИП);
		СтрокаТаблицыЗначений.КППКонтрагента ="";
	КонецЕсли; 
	
	Если ЕстьСвойство(ОбъектXDTO, "КодВидОпер") Тогда
		СтрокаТаблицыЗначений.КодВидаОперации = Новый Массив;
		Если ТипЗнч(ОбъектXDTO.КодВидОпер) = Тип("СписокXDTO") Тогда
			Для Каждого ТекущееЗначение Из ОбъектXDTO.КодВидОпер Цикл
				СтрокаТаблицыЗначений.КодВидаОперации.Добавить(ТекущееЗначение);
			КонецЦикла;
		Иначе
			СтрокаТаблицыЗначений.КодВидаОперации.Добавить(ОбъектXDTO.КодВидОпер);
		КонецЕсли; 
	КонецЕсли; 
	
	СтрокаТаблицыЗначений.СведенияГраф10_19 = Новый Массив; 
	
	Если ЕстьСвойство(ОбъектXDTO, "СвГр10_19") Тогда // 5.03
		
		Если ТипЗнч(ОбъектXDTO.СвГр10_19) = Тип("СписокXDTO") Тогда
			Для Каждого ТекущееЗначение Из ОбъектXDTO.СвГр10_19 Цикл
				ДобавитьСведенияГраф10_19(СтрокаТаблицыЗначений, ТекущееЗначение);
			КонецЦикла;
		Иначе
			ДобавитьСведенияГраф10_19(СтрокаТаблицыЗначений, ОбъектXDTO.СвГр10_19);
		КонецЕсли; 
		
	Иначе // 5.02
		
		СведенияГраф10_19 = Новый Структура; // 5.02
		
		Если ЕстьСвойство(ОбъектXDTO, "СвПосредн") Тогда
			СведенияОПосреднике = Новый Структура;
			Если ЕстьСвойство(ОбъектXDTO.СвПосредн, "СведЮЛ") Тогда
				ЗаполнитьСвойство(СведенияОПосреднике, "НаименованиеОрганизации", ОбъектXDTO.СвПосредн.СведЮЛ, "НаимОрг");
				ЗаполнитьСвойство(СведенияОПосреднике, "ИННОрганизации", ОбъектXDTO.СвПосредн.СведЮЛ, "ИННЮЛ");
				ЗаполнитьСвойство(СведенияОПосреднике, "КППОрганизации", ОбъектXDTO.СвПосредн.СведЮЛ, "КПП");
				ЗаполнитьСвойство(СведенияОПосреднике, "НомерСчФПродавца", ОбъектXDTO.СвПосредн.СведЮЛ, "НомерСчФпрод");
				ЗаполнитьСвойство(СведенияОПосреднике, "ДатаСчФПродавца", ОбъектXDTO.СвПосредн.СведЮЛ, "ДатаСчФпрод");
			ИначеЕсли ЕстьСвойство(ОбъектXDTO.СвПосредн, "СведИП") Тогда
				ЗаполнитьСвойство(СведенияОПосреднике, "ИННФЛ", ОбъектXDTO.СвПосредн.СведИП, "ИННФЛ");
				ЗаполнитьСвойство(СведенияОПосреднике, "НомерСчФПродавца", ОбъектXDTO.СвПосредн.СведИП, "НомерСчФпрод");
				ЗаполнитьСвойство(СведенияОПосреднике, "ДатаСчФПродавца", ОбъектXDTO.СвПосредн.СведИП, "ДатаСчФпрод");
				Если ЕстьСвойство(ОбъектXDTO.СвПосредн.СведИП, "ФИОИП") Тогда
					ЗаполнитьСвойство(СведенияОПосреднике, "Фамилия", ОбъектXDTO.СвПосредн.СведИП.ФИОИП, "Фамилия");
					ЗаполнитьСвойство(СведенияОПосреднике, "Имя", ОбъектXDTO.СвПосредн.СведИП.ФИОИП, "Имя");
					ЗаполнитьСвойство(СведенияОПосреднике, "Отчество", ОбъектXDTO.СвПосредн.СведИП.ФИОИП, "Отчество");
				КонецЕсли; 
			КонецЕсли;
			СведенияГраф10_19.Вставить("СведенияОПосреднике", СведенияОПосреднике);
		КонецЕсли;
		
		Если ЕстьСвойство(ОбъектXDTO, "ВтчСумНДС") Тогда // 5.02
			СведенияГраф10_19.Вставить("ВТомЧислеСуммаНДС", СуммаНДС(ОбъектXDTO.ВтчСумНДС, "СумНДС"));
		КонецЕсли; 
		
		ЗаполнитьСвойство(СведенияГраф10_19, "КодВалюты", ОбъектXDTO, "КодОКВ");
		Если ЕстьСвойство(ОбъектXDTO, "РазнСтоимКСчФ") Тогда // 5.02
			ЗаполнитьСвойство(СведенияГраф10_19, "УменьшениеСтоимостиСУчетомНДСПоКоррСчф", ОбъектXDTO.РазнСтоимКСчФ, "Ум");
			ЗаполнитьСвойство(СведенияГраф10_19, "УвеличениеСтоимостиСУчетомНДСПоКоррСчф", ОбъектXDTO.РазнСтоимКСчФ, "Увел");
		КонецЕсли; 
		
		Если ЕстьСвойство(ОбъектXDTO, "РазнНДСКСчФ") Тогда  // 5.02
			Если ЕстьСвойство(ОбъектXDTO.РазнНДСКСчФ, "Ум") Тогда
				СведенияГраф10_19.Вставить("УменьшениеНДСПоКоррСчф", СуммаНДС(ОбъектXDTO.РазнНДСКСчФ.Ум, "СумНДС"));
			КонецЕсли; 
			Если ЕстьСвойство(ОбъектXDTO.РазнНДСКСчФ, "Увел") Тогда
				СведенияГраф10_19.Вставить("УвеличениеНДСПоКоррСчф", СуммаНДС(ОбъектXDTO.РазнНДСКСчФ.Увел, "СумНДС"));
			КонецЕсли; 
		КонецЕсли; 
		
		ЗаполнитьСвойство(СведенияГраф10_19, "СтоимостьПродажПоСчФВсего", ОбъектXDTO, "СтТовУчНалВсего");
		СтрокаТаблицыЗначений.СведенияГраф10_19.Добавить(СведенияГраф10_19);
		
	КонецЕсли; 

КонецПроцедуры

Процедура ДобавитьНомерИДатуСчетФактуры(Массив, ОбъектXDTO)
	Структура = Новый Структура;
	ЗаполнитьСвойство(Структура, "НомерСчФ", ОбъектXDTO, "НомерСчФ");
	ЗаполнитьСвойство(Структура, "ДатаСчФ", ОбъектXDTO, "ДатаСчФ");
	Массив.Добавить(Структура);
КонецПроцедуры

Процедура ЗаполнитьСведенияОПокупкеВЖурналеСчетовФактур(СтрокаТаблицыЗначений, ОбъектXDTO)
	
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "НомерПоПорядку", ОбъектXDTO, "НомПП");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "НомерИсправленияСчФ", ОбъектXDTO, "НомерИспрСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ДатаИсправленияСчФ", ОбъектXDTO, "ДатаИспрСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "НомерКорСчФ", ОбъектXDTO, "НомерКСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ДатаКорСчФ", ОбъектXDTO, "ДатаКСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "НомерИсправленияКорСчФ", ОбъектXDTO, "НомерИспрКСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ДатаИсправленияКорСчФ", ОбъектXDTO, "ДатаИспрКСчФ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "НаименованиеПродавца", ОбъектXDTO, "НаимПрод");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ИННПродавцаОрганизации", ОбъектXDTO, "ИННЮЛ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "КПППродавца", ОбъектXDTO, "КПП");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ИННПродавцаИП", ОбъектXDTO, "ИННФЛ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "КодВалюты", ОбъектXDTO, "КодОКВ");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "СтоимостьПокупокПоСчФ", ОбъектXDTO, "СтТовУчНалВсего");
	ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ДатаПолученияСчФ", ОбъектXDTO, "ДатаПолСчФ");
	
	Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.ИННПродавцаОрганизации) Тогда
		СтрокаТаблицыЗначений.ИННКонтрагента = СокрЛП(СтрокаТаблицыЗначений.ИННПродавцаОрганизации);
		СтрокаТаблицыЗначений.КППКонтрагента = СокрЛП(СтрокаТаблицыЗначений.КПППродавца);
	Иначе
		СтрокаТаблицыЗначений.ИННКонтрагента = СокрЛП(СтрокаТаблицыЗначений.ИННПродавцаИП);
		СтрокаТаблицыЗначений.КППКонтрагента ="";
	КонецЕсли; 
	
	Если ЕстьСвойство(ОбъектXDTO, "ВтчСумНДС") Тогда
		СтрокаТаблицыЗначений.СуммаНДСПоСчФ = СуммаНДС(ОбъектXDTO.ВтчСумНДС, "СумНДС");
	КонецЕсли;
	
	СтрокаТаблицыЗначений.НомераИДатыСчетовФактур = Новый Массив;
	Если ЕстьСвойство(ОбъектXDTO, "НомДатаСчФ") Тогда //5.03
		Если ТипЗнч(ОбъектXDTO.НомДатаСчФ) =  Тип("СписокXDTO") Тогда
			Для Каждого ТекущееЗначение Из ОбъектXDTO.НомДатаСчФ Цикл
				ДобавитьНомерИДатуСчетФактуры(СтрокаТаблицыЗначений.НомераИДатыСчетовФактур, ТекущееЗначение);
			КонецЦикла;
			// заполним одним из значений.
			ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "НомерСчФ", ТекущееЗначение, "НомерСчФ");
			ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ДатаСчФ", ТекущееЗначение, "ДатаСчФ");
		Иначе
			ДобавитьНомерИДатуСчетФактуры(СтрокаТаблицыЗначений.НомераИДатыСчетовФактур, ОбъектXDTO.НомДатаСчФ);
			ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "НомерСчФ", ОбъектXDTO.НомДатаСчФ, "НомерСчФ");
			ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ДатаСчФ", ОбъектXDTO.НомДатаСчФ, "ДатаСчФ");
		КонецЕсли; 
	Иначе
		ДобавитьНомерИДатуСчетФактуры(СтрокаТаблицыЗначений.НомераИДатыСчетовФактур, ОбъектXDTO);
		ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "НомерСчФ", ОбъектXDTO, "НомерСчФ");
		ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "ДатаСчФ", ОбъектXDTO, "ДатаСчФ");
	КонецЕсли; 
	
	Если ЕстьСвойство(ОбъектXDTO, "РазнСтоимКСчФ") Тогда 
		ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "УменьшениеСтоимостиСУчетомНДСПоКоррСчф", ОбъектXDTO.РазнСтоимКСчФ, "Ум");
		ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицыЗначений, "УвеличениеСтоимостиСУчетомНДСПоКоррСчф", ОбъектXDTO.РазнСтоимКСчФ, "Увел");
	КонецЕсли; 
	
	Если ЕстьСвойство(ОбъектXDTO, "РазнНДСКСчФ") Тогда  
		Если ЕстьСвойство(ОбъектXDTO.РазнНДСКСчФ, "Ум") Тогда
			СтрокаТаблицыЗначений.УменьшениеНДСПоКоррСчф = СуммаНДС(ОбъектXDTO.РазнНДСКСчФ.Ум, "СумНДС");
		КонецЕсли; 
		Если ЕстьСвойство(ОбъектXDTO.РазнНДСКСчФ, "Увел") Тогда
			СтрокаТаблицыЗначений.УвеличениеНДСПоКоррСчф = СуммаНДС(ОбъектXDTO.РазнНДСКСчФ.Увел, "СумНДС");
		КонецЕсли; 
	КонецЕсли; 

	Если ЕстьСвойство(ОбъектXDTO, "СвПосредн") Тогда //5.03
		СведенияОПосреднике = Новый Структура;
		ЗаполнитьСвойство(СведенияОПосреднике, "КодВидаСделки", ОбъектXDTO.СвПосредн, "КодВидСдел");
		
		Если ЕстьСвойство(ОбъектXDTO.СвПосредн, "СведЮЛ") Тогда
			
			ЗаполнитьСвойство(СведенияОПосреднике, "НаименованиеОрганизации", ОбъектXDTO.СвПосредн.СведЮЛ, "НаимСубКом");
			ЗаполнитьСвойство(СведенияОПосреднике, "ИННОрганизации", ОбъектXDTO.СвПосредн.СведЮЛ, "ИННЮЛСубКом"); 
			ЗаполнитьСвойство(СведенияОПосреднике, "КППОрганизации", ОбъектXDTO.СвПосредн.СведЮЛ, "КППСубКом"); 
			ЗаполнитьСвойство(СведенияОПосреднике, "КодВидаСделкиЮЛ", ОбъектXDTO.СвПосредн.СведЮЛ, "КодВидСдел"); 
			
		ИначеЕсли ЕстьСвойство(ОбъектXDTO.СвПосредн, "СведИП") Тогда
			
			ЗаполнитьСвойство(СведенияОПосреднике, "ИННФЛ", ОбъектXDTO.СвПосредн.СведИП, "ИННФЛСубКом");
			Если ЕстьСвойство(ОбъектXDTO.СвПосредн.СведИП, "ФИОИП") Тогда
				ЗаполнитьСвойство(СведенияОПосреднике, "Фамилия", ОбъектXDTO.СвПосредн.СведИП.ФИОИП, "Фамилия");
				ЗаполнитьСвойство(СведенияОПосреднике, "Имя", ОбъектXDTO.СвПосредн.СведИП.ФИОИП, "Имя");
				ЗаполнитьСвойство(СведенияОПосреднике, "Отчество", ОбъектXDTO.СвПосредн.СведИП.ФИОИП, "Отчество");
			КонецЕсли; 
			ЗаполнитьСвойство(СведенияОПосреднике, "КодВидаСделкиФЛ", ОбъектXDTO.СвПосредн.СведИП, "КодВидСдел"); 
			
		КонецЕсли;
		СтрокаТаблицыЗначений.СведенияОПосреднике = СведенияОПосреднике;
	КонецЕсли;
	
	Если ЕстьСвойство(ОбъектXDTO, "КодВидОпер") Тогда
		СтрокаТаблицыЗначений.КодВидаОперации = Новый Массив;
		Если ТипЗнч(ОбъектXDTO.КодВидОпер) = Тип("СписокXDTO") Тогда
			Для Каждого ТекущееЗначение Из ОбъектXDTO.КодВидОпер Цикл
				СтрокаТаблицыЗначений.КодВидаОперации.Добавить(ТекущееЗначение);
			КонецЦикла;
		Иначе
			СтрокаТаблицыЗначений.КодВидаОперации.Добавить(ОбъектXDTO.КодВидОпер);
		КонецЕсли; 
	КонецЕсли; 
		
КонецПроцедуры

// Читает XML-файл указанного типа. При необходимости в содержимое файла добавляется используемое пространство имен.
//
// Параметры:
//	СодержимоеФайла		- Строка - текст XML-файла.
//	ПространствоИмен	- Строка - пространство имен, к которому принадлежит тип данных файла.
//	ИмяТипа				- Строка - имя типа данных из указанного пространства имен.
//
// Возвращаемое значение:
//	ОбъектXDTO - объект, полученный при чтении файла фабрикой XDTO.
//
Функция ПрочитатьXMLФайл(СодержимоеФайла, ПространствоИмен, ИмяТипа) 
	
	ПозицияПространстваИмен = Найти(СодержимоеФайла, ПространствоИмен);
    
    // Даже если XML валиден, фабрика не сможет его прочитать без пространства имен
    Если ПозицияПространстваИмен = 0 Тогда
        
        ПозицияСхемы = Найти(СодержимоеФайла, "http://www.w3.org/2001/XMLSchema");
        
        Если ПозицияСхемы = 0 Тогда 
            СтрокаПространстваИмен = ПодставитьПараметрыВСтроку(
                "xmlns=""%1"" xmlns:xs=""%2"" xmlns:xsi=""%3""",
                ПространствоИмен, 
				"http://www.w3.org/2001/XMLSchema",
				"http://www.w3.org/2001/XMLSchema-instance");
        Иначе
             СтрокаПространстваИмен = ПодставитьПараметрыВСтроку(
                "xmlns=""%1""", ПространствоИмен);
        КонецЕсли;
            
        ПозицияЭлемента = Найти(СодержимоеФайла, ИмяТипа);
		ДлинаИмени = СтрДлина(ИмяТипа);
            
        СодержимоеФайла = Лев(СодержимоеФайла, ПозицияЭлемента + ДлинаИмени - 1) 
			+ " "
            + СтрокаПространстваИмен 
			+ " "
            + Сред(СодержимоеФайла, ПозицияЭлемента + ДлинаИмени);
        
    КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СодержимоеФайла);
	
	//Пакет = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен);
	//ТипОбъекта = Пакет.КорневыеСвойства.Получить(ИмяТипа).Тип;
	
	Возврат ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
КонецФункции

Функция ЕстьСвойство(Объект, ИмяСвойства)
	
	Если Объект = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ОбъектXDTO") Тогда 
		Возврат Объект.Свойства().Получить(ИмяСвойства) <> Неопределено;
	Иначе
		Возврат Объект.Получить(ИмяСвойства) <> Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьСвойство(Структура, ИмяСвойства, ОбъектXDTO, ИмяСвойстваОбъектаXDTO)
	Если ОбъектXDTO.Свойства().Получить(ИмяСвойстваОбъектаXDTO) <> Неопределено Тогда
		Если ОбъектXDTO[ИмяСвойстваОбъектаXDTO] <> Неопределено Тогда
			Если ТипЗнч(ОбъектXDTO[ИмяСвойстваОбъектаXDTO]) = Тип("ОбъектXDTO") Тогда
				Структура.Вставить(ИмяСвойства, "");
			Иначе
				Структура.Вставить(ИмяСвойства, ОбъектXDTO[ИмяСвойстваОбъектаXDTO]);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

Процедура ЗаполнитьЗначениеВСтрокеТаблицыЗначений(СтрокаТаблицы, ИмяКолонки, ОбъектXDTO, ИмяСвойстваОбъектаXDTO)
	Если ОбъектXDTO.Свойства().Получить(ИмяСвойстваОбъектаXDTO) <> Неопределено Тогда
		Если ОбъектXDTO[ИмяСвойстваОбъектаXDTO] <> Неопределено Тогда
			СтрокаТаблицы[ИмяКолонки] = ОбъектXDTO[ИмяСвойстваОбъектаXDTO];
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

Функция ТаблицаСведенияОПродажах()
	
	СведенияОПродажах = Новый ТаблицаЗначений;
	СведенияОПродажах.Колонки.Добавить("НомерПоПорядку");
	СведенияОПродажах.Колонки.Добавить("НомерСчФ");
	СведенияОПродажах.Колонки.Добавить("ДатаСчФ");
	СведенияОПродажах.Колонки.Добавить("ДатаВыставленияСчФ");
	СведенияОПродажах.Колонки.Добавить("НомерИсправленияСчФ");
	СведенияОПродажах.Колонки.Добавить("ДатаИсправленияСчФ");
	СведенияОПродажах.Колонки.Добавить("НомерКорСчФ");
	СведенияОПродажах.Колонки.Добавить("ДатаКорСчФ");
	СведенияОПродажах.Колонки.Добавить("НомерИсправленияКорСчФ");
	СведенияОПродажах.Колонки.Добавить("ДатаИсправленияКорСчФ");
	СведенияОПродажах.Колонки.Добавить("НаименованиеПокупателя");
	СведенияОПродажах.Колонки.Добавить("ИННПокупателяОрганизации");
	СведенияОПродажах.Колонки.Добавить("КПППокупателя");
	СведенияОПродажах.Колонки.Добавить("ИННПокупателяИП");
	СведенияОПродажах.Колонки.Добавить("КодВалюты");
	СведенияОПродажах.Колонки.Добавить("СтоимостьПродажПоСчФВВалюте");
	СведенияОПродажах.Колонки.Добавить("СтоимостьПродажПоСчФ");
	СведенияОПродажах.Колонки.Добавить("СтоимостьПродажПоСчфПоСтавке18");
	СведенияОПродажах.Колонки.Добавить("СтоимостьПродажПоСчфПоСтавке10");
	СведенияОПродажах.Колонки.Добавить("СтоимостьПродажПоСчфПоСтавке0");
	СведенияОПродажах.Колонки.Добавить("СуммаНДСПоСтавке18");
	СведенияОПродажах.Колонки.Добавить("СуммаНДСПоСтавке10");
	СведенияОПродажах.Колонки.Добавить("СтоимостьПродажПоСчфБезНДС");
	СведенияОПродажах.Колонки.Добавить("КодВидаОперации");
	СведенияОПродажах.Колонки.Добавить("НомерТаможеннойДекларации");
	СведенияОПродажах.Колонки.Добавить("КодВидаТовара");
	СведенияОПродажах.Колонки.Добавить("СведенияОПосреднике");
	СведенияОПродажах.Колонки.Добавить("СведенияОДокументеПодтверждающемОплату");
	// Для поиска.
	СведенияОПродажах.Колонки.Добавить("ИННКонтрагента");
	СведенияОПродажах.Колонки.Добавить("КППКонтрагента");

	Возврат  СведенияОПродажах;
	
КонецФункции

Функция ТаблицаСведенияОПокупках()

	СведенияОПокупках = Новый ТаблицаЗначений;
	СведенияОПокупках.Колонки.Добавить("НомерПоПорядку");
	СведенияОПокупках.Колонки.Добавить("НомерСчФ");
	СведенияОПокупках.Колонки.Добавить("ДатаСчФ");
	СведенияОПокупках.Колонки.Добавить("ДатаПолученияСчФ");
	СведенияОПокупках.Колонки.Добавить("НомерИсправленияСчФ");
	СведенияОПокупках.Колонки.Добавить("ДатаИсправленияСчФ");
	СведенияОПокупках.Колонки.Добавить("НомерКорСчФ");
	СведенияОПокупках.Колонки.Добавить("ДатаКорСчФ");
	СведенияОПокупках.Колонки.Добавить("НомерИсправленияКорСчФ");
	СведенияОПокупках.Колонки.Добавить("ДатаИсправленияКорСчФ");
	СведенияОПокупках.Колонки.Добавить("НаименованиеПродавца");
	СведенияОПокупках.Колонки.Добавить("ИННПродавцаОрганизации");
	СведенияОПокупках.Колонки.Добавить("КПППродавца");
	СведенияОПокупках.Колонки.Добавить("ИННПродавцаИП");
	СведенияОПокупках.Колонки.Добавить("КодВалюты");
	СведенияОПокупках.Колонки.Добавить("СтоимостьПокупокПоСчФ");
	СведенияОПокупках.Колонки.Добавить("КодВидаОперации");
	СведенияОПокупках.Колонки.Добавить("СведенияОДокументеПодтверждающемУплатуНалога");
	СведенияОПокупках.Колонки.Добавить("ДатаПринятияНаУчетТоваров");
	СведенияОПокупках.Колонки.Добавить("СведенияОПосреднике");
	СведенияОПокупках.Колонки.Добавить("НомерТаможеннойДекларации");
	СведенияОПокупках.Колонки.Добавить("СуммаНДСПоСчФ");
	СведенияОПокупках.Колонки.Добавить("СуммаНДСПоСчФЧисло");
	// Для поиска.
	СведенияОПокупках.Колонки.Добавить("ИННКонтрагента");
	СведенияОПокупках.Колонки.Добавить("КППКонтрагента");
	Возврат  СведенияОПокупках;
	
КонецФункции

Функция АдресРФ(ЭлементАдрес)
	
	Адрес = Новый Структура;
	ЗаполнитьСвойство(Адрес, "Индекс", ЭлементАдрес, "Индекс");
	ЗаполнитьСвойство(Адрес, "КодРегиона", ЭлементАдрес, "КодРегион");
	ЗаполнитьСвойство(Адрес, "Район", ЭлементАдрес, "Район");
	ЗаполнитьСвойство(Адрес, "Город", ЭлементАдрес, "Город");
	ЗаполнитьСвойство(Адрес, "НаселенныйПункт", ЭлементАдрес, "НаселПункт");
	ЗаполнитьСвойство(Адрес, "Улица", ЭлементАдрес, "Улица");
	ЗаполнитьСвойство(Адрес, "Дом", ЭлементАдрес, "Дом");
	ЗаполнитьСвойство(Адрес, "Корпус", ЭлементАдрес, "Корпус");
	ЗаполнитьСвойство(Адрес, "Квартира", ЭлементАдрес, "Кварт");
	
	Возврат Адрес;
	
КонецФункции

Функция АдресИнф(ЭлементАдрес)
	
	Адрес = Новый Структура;
	Адрес.Вставить("КодСтраны", ЭлементАдрес.КодСтр);
	Адрес.Вставить("АдресТекст", ЭлементАдрес.АдрТекст);
	Возврат Адрес;
	
КонецФункции

Функция УчастникУПД(Участник)
	
	СведенияОбУчастнике = СтруктураУчастника();
	
	НаименованиеКонтрагента = "";
	
	Если Участник.ИдСв.Свойства().Получить("СвИП") <> Неопределено Тогда
		СведенияОбУчастнике.Вставить("ВидКонтрагента", "ИП");
		
		Отчество="";
		Если Участник.ИдСв.СвИП.ФИО.Свойства().Получить("Отчество")<>Неопределено Тогда
			//Участник.ИдСв.СвИП.ФИО.Отчество;
			Отчество=Участник.ИдСв.СвИП.ФИО.Отчество;
		конецЕсли;
		
		НаименованиеКонтрагента = Участник.ИдСв.СвИП.ФИО.Фамилия
			+ " " + Участник.ИдСв.СвИП.ФИО.Имя
			+ ?(ЗначениеЗаполнено(Отчество), " " + Отчество, "");
			
		РеквизитыКонтрагента = СтруктураУчастникаФЛ();
		ЗаполнитьФИО(РеквизитыКонтрагента, Участник.ИдСв.СвИП.ФИО);
		РеквизитыКонтрагента.Вставить("ИНН", Участник.ИдСв.СвИП.ИННФЛ);
		
		Если Участник.ИдСв.СвИП.Свойства().Получить("СвГосРегИП")<>Неопределено Тогда
			РеквизитыКонтрагента.Вставить("Свидетельство", Участник.ИдСв.СвИП.СвГосРегИП);
		КонецЕсли;
		Если Участник.ИдСв.СвИП.Свойства().Получить("ИныеСвед")<>Неопределено Тогда
			РеквизитыКонтрагента.Вставить("ИныеСведения", Участник.ИдСв.СвИП.ИныеСвед);
		КонецЕсли;
		
	ИначеЕсли Участник.ИдСв.Свойства().Получить("СвЮЛУч") <> Неопределено Тогда
		СведенияОбУчастнике.Вставить("ВидКонтрагента", "ЮЛ");
		НаименованиеКонтрагента = Участник.ИдСв.СвЮЛУч.НаимОрг;
		РеквизитыКонтрагента = СтруктураУчастникаЮЛ();
		Если Участник.ИдСв.СвЮЛУч.Свойства().Получить("ИННЮЛ")<>Неопределено Тогда
			РеквизитыКонтрагента.Вставить("ИНН", Участник.ИдСв.СвЮЛУч.ИННЮЛ);
		КонецЕсли;
		Если Участник.ИдСв.СвЮЛУч.Свойства().Получить("КПП")<>Неопределено Тогда
			РеквизитыКонтрагента.Вставить("КПП", Участник.ИдСв.СвЮЛУч.КПП);
		КонецЕсли;
	ИначеЕсли ЕстьСвойство(Участник.ИдСв, "СвИнНеУч") И Участник.ИдСв.Свойства().Получить("СвИнНеУч") <> Неопределено Тогда
		СведенияОбУчастнике.Вставить("ВидКонтрагента", "ИЛ");
		НаименованиеКонтрагента = Участник.ИдСв.СвИнНеУч.НаимОрг;
		РеквизитыКонтрагента = СтруктураУчастникаИЛ();
		РеквизитыКонтрагента.Вставить("ИныеСведения", Участник.ИдСв.СвИнНеУч.ИныеСвед);
		
	ИначеЕсли ЕстьСвойство(Участник.ИдСв, "СвЮлНеУч") И Участник.ИдСв.Свойства().Получить("СвЮлНеУч") <> Неопределено Тогда
		СведенияОбУчастнике.Вставить("ВидКонтрагента", "ИЛ");
		НаименованиеКонтрагента = Участник.ИдСв.СвЮлНеУч.НаимОрг;
		РеквизитыКонтрагента = СтруктураУчастникаИЛ();
		РеквизитыКонтрагента.Вставить("ИныеСведения", Участник.ИдСв.СвЮлНеУч.ИныеСвед);
		
	ИначеЕсли ЕстьСвойство(Участник.ИдСв, "СвФЛУчастФХЖ") И Участник.ИдСв.Свойства().Получить("СвФЛУчастФХЖ") <> Неопределено Тогда
		СведенияОбУчастнике.Вставить("ВидКонтрагента", "ФЛ");
		
		Отчество="";
		Если Участник.ИдСв.СвФЛУчастФХЖ.ФИО.Свойства().Получить("Отчество")<>Неопределено тогда
			Отчество=Участник.ИдСв.СвФЛУчастФХЖ.ФИО.Отчество;
		КонецЕсли;
		
		
		НаименованиеКонтрагента = Участник.ИдСв.СвФЛУчастФХЖ.ФИО.Фамилия
			+ " " + Участник.ИдСв.СвФЛУчастФХЖ.ФИО.Имя
			+ ?(ЗначениеЗаполнено(Отчество), " " + Отчество, "");
			
		РеквизитыКонтрагента = СтруктураУчастникаФЛ();
		ЗаполнитьФИО(РеквизитыКонтрагента, Участник.ИдСв.СвФЛУчастФХЖ.ФИО);
		РеквизитыКонтрагента.Вставить("ИНН", Участник.ИдСв.СвФЛУчастФХЖ.ИННФЛ);
		Если Участник.ИдСв.СвФЛУчастФХЖ.свойства().Получить("ИныеСвед")<>Неопределено Тогда
			РеквизитыКонтрагента.Вставить("ИныеСведения", Участник.ИдСв.СвФЛУчастФХЖ.ИныеСвед);
		иначе
			РеквизитыКонтрагента.Вставить("ИныеСведения", "");
			
		Конецесли;
	КонецЕсли;
	
	СведенияОбУчастнике.Вставить("НаименованиеКонтрагента", НаименованиеКонтрагента);
	СведенияОбУчастнике.Вставить("РеквизитыКонтрагента", РеквизитыКонтрагента);
	
	Если Участник.Свойства().Получить("ОКПО")<>Неопределено Тогда
		СведенияОбУчастнике.Вставить("ОКПО", Участник.ОКПО);
	Конецесли;
	
	Если Участник.Свойства().Получить("СтруктПодр")<>Неопределено Тогда
		СведенияОбУчастнике.Вставить("СтруктурноеПодразделение", Участник.СтруктПодр);
	КонецЕсли;
	Если Участник.Свойства().Получить("ИнфДляУчаст")<>Неопределено Тогда
		СведенияОбУчастнике.Вставить("ИнформацияДляУчастникаДокументооборота", Участник.ИнфДляУчаст);
	КонецЕсли;
	Если Участник.Свойства().Получить("Адрес") <> Неопределено Тогда
		Если Участник.Адрес.Свойства().Получить("АдрРФ") <> Неопределено Тогда
			СведенияОбУчастнике.СведенияОбАдресе.ВидАдреса = "АдрРФ";
			СведенияОбУчастнике.СведенияОбАдресе.Адрес = АдресРФ(Участник.Адрес.АдрРФ);
		ИначеЕсли Участник.Адрес.Свойства().Получить("АдрИнф") <> Неопределено Тогда
			СведенияОбУчастнике.СведенияОбАдресе.ВидАдреса = "АдрИнф";
			СведенияОбУчастнике.СведенияОбАдресе.Адрес = АдресИнф(Участник.Адрес.АдрИнф);
		Иначе
			СведенияОбУчастнике.СведенияОбАдресе.ВидАдреса = "КодГАР";
			СведенияОбУчастнике.СведенияОбАдресе.Адрес = Новый Структура("КодГАР", Участник.Адрес.КодГАР);
		КонецЕсли;
	КонецЕсли;
	
	Если Участник.Свойства().Получить("Контакт") <> Неопределено Тогда
		Если Участник.Контакт.Свойства().Получить("Тлф")<>Неопределено тогда
			СведенияОбУчастнике.Телефон = Участник.Контакт.Тлф;
		КонецЕсли;
		Если Участник.Контакт.Свойства().Получить("ЭлПочта")<>Неопределено тогда
		
			СведенияОбУчастнике.ЭлектроннаяПочта = Участник.Контакт.ЭлПочта;
		КонецЕсли;
	КонецЕсли; 
		
	Если Участник.Свойства().Получить("БанкРекв") <> Неопределено Тогда
		Если Участник.БанкРекв.Свойства().Получить("НомерСчета")<>Неопределено тогда
			СведенияОбУчастнике.БанковскиеРеквизиты.НомерСчета = Участник.БанкРекв.НомерСчета;
		КонецЕсли;
		Если Участник.БанкРекв.Свойства().Получить("СвБанк") <> Неопределено Тогда
			Если Участник.БанкРекв.СвБанк.Свойства().Получить("НаимБанк")<>Неопределено тогда
				СведенияОбУчастнике.БанковскиеРеквизиты.НаименованиеБанка = Участник.БанкРекв.СвБанк.НаимБанк;
			Конецесли;
			Если Участник.БанкРекв.СвБанк.Свойства().Получить("БИК")<>Неопределено тогда
				СведенияОбУчастнике.БанковскиеРеквизиты.БИКБанка = Участник.БанкРекв.СвБанк.БИК;
			КонецЕсли;	
			Если Участник.БанкРекв.СвБанк.Свойства().Получить("КорСчет")<>Неопределено Тогда
				СведенияОбУчастнике.БанковскиеРеквизиты.КорреспондентскийСчетБанка = Участник.БанкРекв.СвБанк.КорСчет;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Возврат СведенияОбУчастнике;
	
КонецФункции

Функция УчастникДокументаОПередаче(Участник)
	
	СведенияОбУчастнике = СтруктураУчастника();
	
	НаименованиеКонтрагента = "";
	
	Если Участник.ИдСв.Свойства().Получить("СвИП") <> Неопределено Тогда
		СведенияОбУчастнике.Вставить("ВидКонтрагента", "ИП");
		
		Отчество="";
		Если Участник.ИдСв.СвИП.ФИО.Свойства().Получить("Отчество")<>Неопределено Тогда
			//Участник.ИдСв.СвИП.ФИО.Отчество;
			Отчество=Участник.ИдСв.СвИП.ФИО.Отчество;
		конецЕсли;
		
		
		НаименованиеКонтрагента = Участник.ИдСв.СвИП.ФИО.Фамилия
			+ " " + Участник.ИдСв.СвИП.ФИО.Имя
			+ ?(ЗначениеЗаполнено(Отчество), " " + Отчество, "");
			
		РеквизитыКонтрагента = СтруктураУчастникаФЛ();
		ЗаполнитьФИО(РеквизитыКонтрагента, Участник.ИдСв.СвИП.ФИО);
		РеквизитыКонтрагента.Вставить("ИНН", Участник.ИдСв.СвИП.ИННФЛ);
		Если Участник.ИдСв.СвИП.Свойства().Получить("СвГосРегИП")=Неопределено Тогда
			РеквизитыКонтрагента.Вставить("Свидетельство", Неопределено);
		Иначе
			РеквизитыКонтрагента.Вставить("Свидетельство", Участник.ИдСв.СвИП.СвГосРегИП);
		КонецЕсли;
		Если Участник.ИдСв.СвИП.Свойства().Получить("ИныеСвед")=Неопределено Тогда
			РеквизитыКонтрагента.Вставить("ИныеСведения", Неопределено);
		Иначе
			РеквизитыКонтрагента.Вставить("ИныеСведения", Участник.ИдСв.СвИП.ИныеСвед);
		КонецЕсли;
		
	ИначеЕсли Участник.ИдСв.Свойства().Получить("СвОрг") <> Неопределено Тогда
		
		Если Участник.ИдСв.СвОрг.СвЮЛ <> Неопределено Тогда
			СведенияОбУчастнике.Вставить("ВидКонтрагента", "ЮЛ");
			НаименованиеКонтрагента = Участник.ИдСв.СвОрг.СвЮЛ.НаимОрг;
			РеквизитыКонтрагента = СтруктураУчастникаЮЛ();
			РеквизитыКонтрагента.Вставить("ИНН", Участник.ИдСв.СвОрг.СвЮЛ.ИННЮЛ);
			РеквизитыКонтрагента.Вставить("КПП",Участник.ИдСв.СвОрг.СвЮЛ.КПП);
		Иначе
			СведенияОбУчастнике.Вставить("ВидКонтрагента", "ИЛ");
			НаименованиеКонтрагента = Участник.ИдСв.СвОрг.ИнОрг.НаимОрг;
			РеквизитыКонтрагента = СтруктураУчастникаИЛ(); 
			РеквизитыКонтрагента.ИныеСведения = Участник.ИдСв.СвОрг.ИнОрг.ИныеСвед;
			РеквизитыКонтрагента.Страна = Участник.ИдСв.СвОрг.ИнОрг.Страна;
		КонецЕсли;
		
	Иначе
		СведенияОбУчастнике.Вставить("ВидКонтрагента", "ФЛ");
		
		
		Отчество="";
		Если Участник.ИдСв.СвФЛ.ФИО.Свойства().Получить("Отчество")<>Неопределено Тогда
			//Участник.ИдСв.СвИП.ФИО.Отчество;
			Отчество=Участник.ИдСв.СвФЛ.ФИО.Отчество;
		конецЕсли;
		
		НаименованиеКонтрагента = Участник.ИдСв.СвФЛ.ФИО.Фамилия
			+ " " + Участник.ИдСв.СвФЛ.ФИО.Имя
			+ ?(ЗначениеЗаполнено(Отчество), " " + Отчество, "");
		РеквизитыКонтрагента = СтруктураУчастникаФЛ();
		ЗаполнитьФИО(РеквизитыКонтрагента, Участник.ИдСв.СвФЛ.ФИО);
		РеквизитыКонтрагента.Вставить("ИНН", Участник.ИдСв.СвФЛ.ИННФЛ);
		РеквизитыКонтрагента.Вставить("ИныеСведения", Участник.ИдСв.СвФЛ.ИныеСвед);
	КонецЕсли;
	
	СведенияОбУчастнике.Вставить("НаименованиеКонтрагента", НаименованиеКонтрагента);
	СведенияОбУчастнике.Вставить("РеквизитыКонтрагента", РеквизитыКонтрагента);
	
	Если Участник.Свойства().Получить("ОКПО")=Неопределено Тогда
		СведенияОбУчастнике.Вставить("ОКПО", Неопределено);
	Иначе
		СведенияОбУчастнике.Вставить("ОКПО", Участник.ОКПО);
	КонецЕсли;
	Если Участник.Свойства().Получить("СтруктПодр")=Неопределено Тогда
		СведенияОбУчастнике.Вставить("СтруктурноеПодразделение", Неопределено);
	Иначе
		СведенияОбУчастнике.Вставить("СтруктурноеПодразделение", Участник.СтруктПодр);
	КонецЕсли;
	Если Участник.Свойства().Получить("Участник")<>Неопределено Тогда
		СведенияОбУчастнике.Вставить("ИнформацияДляУчастникаДокументооборота", Участник.ИнфДляУчаст);
	КонецЕсли;
	
	Если Участник.Свойства().Получить("Адрес") <> Неопределено Тогда
		Если Участник.Адрес.Свойства().Получить("АдрРФ") <> Неопределено Тогда
			СведенияОбУчастнике.СведенияОбАдресе.ВидАдреса = "АдрРФ";
			СведенияОбУчастнике.СведенияОбАдресе.Адрес = АдресРФ(Участник.Адрес.АдрРФ);
		ИначеЕсли ЕстьСвойство(Участник.Адрес, "АдрИнф") И Участник.Адрес.АдрИнф <> Неопределено Тогда
			СведенияОбУчастнике.СведенияОбАдресе.ВидАдреса = "АдрИнф";
			СведенияОбУчастнике.СведенияОбАдресе.Адрес = АдресИнф(Участник.Адрес.АдрИнф);
		ИначеЕсли ЕстьСвойство(Участник.Адрес, "АдрИно") И Участник.Адрес.АдрИно <> Неопределено Тогда
			СведенияОбУчастнике.СведенияОбАдресе.ВидАдреса = "АдрИнф";
			СведенияОбУчастнике.СведенияОбАдресе.Адрес = АдресИнф(Участник.Адрес.АдрИно);
		Иначе
			СведенияОбУчастнике.СведенияОбАдресе.ВидАдреса = "КодГАР";
			СведенияОбУчастнике.СведенияОбАдресе.Адрес = Новый Структура("КодГАР", Участник.Адрес.КодГАР);
		КонецЕсли;
	КонецЕсли;
	
	Если Участник.Свойства().Получить("Контакт") <> Неопределено Тогда
		Если Участник.Контакт.Свойства().Получить("Тлф")<>Неопределено Тогда
			СведенияОбУчастнике.Телефон = Участник.Контакт.Тлф;
		КонецЕсли;
		Если Участник.Контакт.Свойства().Получить("ЭлПочта")<>Неопределено Тогда
			СведенияОбУчастнике.ЭлектроннаяПочта = Участник.Контакт.ЭлПочта;
		КонецЕсли;
	КонецЕсли; 
		
	Если Участник.Свойства().Получить("БанкРекв") <> Неопределено Тогда
		Если Участник.БанкРекв.Свойства().Получить("НомерСчета")<>Неопределено Тогда
			СведенияОбУчастнике.БанковскиеРеквизиты.НомерСчета = Участник.БанкРекв.НомерСчета;
		КонецЕсли;
		Если Участник.БанкРекв.Свойства().Получить("СвБанк") <> Неопределено Тогда
			Если Участник.БанкРекв.СвБанк.Свойства().Получить("НаимБанк")<>Неопределено Тогда
				СведенияОбУчастнике.БанковскиеРеквизиты.НаименованиеБанка = Участник.БанкРекв.СвБанк.НаимБанк;
			КонецЕсли;
			Если Участник.БанкРекв.СвБанк.Свойства().Получить("БИК")<>Неопределено Тогда
			
				СведенияОбУчастнике.БанковскиеРеквизиты.БИКБанка = Участник.БанкРекв.СвБанк.БИК;
			КонецЕсли;
			Если Участник.БанкРекв.СвБанк.Свойства().Получить("КорСчет")<>Неопределено Тогда
				СведенияОбУчастнике.БанковскиеРеквизиты.КорреспондентскийСчетБанка = Участник.БанкРекв.СвБанк.КорСчет;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат СведенияОбУчастнике;
	
КонецФункции

Функция УчастникСчетаФактуры(Участник)
	
	СведенияОбУчастнике = СтруктураУчастника();
	
	Если Участник.ИдСв.СвЮЛ <> Неопределено Тогда
		
		СведенияОбУчастнике.Вставить("ВидКонтрагента", "ЮЛ");
		НаименованиеКонтрагента = Участник.ИдСв.СвЮЛ.НаимОрг;
		
		РеквизитыКонтрагента = СтруктураУчастникаЮЛ();
		РеквизитыКонтрагента.Вставить("ИНН", Участник.ИдСв.СвЮЛ.ИННЮЛ);
		РеквизитыКонтрагента.Вставить("КПП", Участник.ИдСв.СвЮЛ.КПП);
		СведенияОбУчастнике.Вставить("РеквизитыКонтрагента", РеквизитыКонтрагента);
		
	ИначеЕсли Участник.ИдСв.СвФЛ <> Неопределено Тогда
		
		СведенияОбУчастнике.Вставить("ВидКонтрагента", "ИП");
		
		Отчество="";
		Если Участник.ИдСв.СвФЛ.ФИОИП.Свойства().Получить("Отчество")<>Неопределено Тогда
			//Участник.ИдСв.СвИП.ФИО.Отчество;
			Отчество=Участник.ИдСв.СвФЛ.ФИОИП.Отчество;
		конецЕсли;
		
		НаименованиеКонтрагента = Участник.ИдСв.СвФЛ.ФИОИП.Фамилия
			+ " " + Участник.ИдСв.СвФЛ.ФИОИП.Имя
			+ ?(ЗначениеЗаполнено(Отчество), " " + Отчество, "");
			
		РеквизитыКонтрагента = СтруктураУчастникаФЛ();
		ЗаполнитьФИО(РеквизитыКонтрагента, Участник.ИдСв.СвФЛ.ФИОИП);
		РеквизитыКонтрагента.Вставить("ИНН", Участник.ИдСв.СвФЛ.ИННФЛ);
		СведенияОбУчастнике.Вставить("РеквизитыКонтрагента", РеквизитыКонтрагента);
		
	КонецЕсли;
	
	СведенияОбУчастнике.Вставить("НаименованиеКонтрагента", НаименованиеКонтрагента);
	
	Если Участник.Адрес.АдрРФ <> Неопределено Тогда
		СведенияОбУчастнике.СведенияОбАдресе.ВидАдреса = "АдрРФ";
		СведенияОбУчастнике.СведенияОбАдресе.Адрес = АдресРФ(Участник.Адрес.АдрРФ);
	ИначеЕсли Участник.Адрес.АдрИно <> Неопределено Тогда
		СведенияОбУчастнике.СведенияОбАдресе.ВидАдреса = "АдрИнф";
		СведенияОбУчастнике.СведенияОбАдресе.Адрес = АдресИнф(Участник.Адрес.АдрИно);
	КонецЕсли;
	
	Возврат СведенияОбУчастнике;
	
КонецФункции

Функция ГрузоотправительГрузополучательСчетаФактуры(Участник)
	
	СведенияОбУчастнике = СтруктураУчастника();
	
	НаименованиеКонтрагента = "";
	
	Если Участник.НаимГОП <> Неопределено Тогда
		Если Участник.НаимГОП.ФИОИП <> Неопределено Тогда
			
			Отчество="";
			Если Участник.НаимГОП.ФИОИП.Свойства().Получить("Отчество")<>Неопределено Тогда
				//Участник.ИдСв.СвИП.ФИО.Отчество;
				Отчество=Участник.НаимГОП.ФИОИП.Отчество;
			конецЕсли;
			
			
			
			
			СведенияОбУчастнике.Вставить("ВидКонтрагента", "ИП");
			НаименованиеКонтрагента = Участник.НаимГОП.ФИОИП.Фамилия
			+ " " + Участник.НаимГОП.ФИОИП.Имя
			+ ?(ЗначениеЗаполнено(Отчество), " " + Отчество, "");
			
			РеквизитыКонтрагента = СтруктураУчастникаФЛ();
			ЗаполнитьФИО(РеквизитыКонтрагента, Участник.НаимГОП.ФИОИП);
			СведенияОбУчастнике.Вставить("РеквизитыКонтрагента", РеквизитыКонтрагента);
			
		ИначеЕсли Участник.НаимГОП.НаимОрг <> Неопределено Тогда
			
			СведенияОбУчастнике.Вставить("ВидКонтрагента", "ЮЛ");
			НаименованиеКонтрагента = Участник.НаимГОП.НаимОрг;
			РеквизитыКонтрагента = СтруктураУчастникаЮЛ();
			СведенияОбУчастнике.Вставить("РеквизитыКонтрагента", РеквизитыКонтрагента);
			
		КонецЕсли;
	КонецЕсли; 
	
	СведенияОбУчастнике.Вставить("НаименованиеКонтрагента", НаименованиеКонтрагента);
	
	Если Участник.Адрес.АдрРФ <> Неопределено Тогда
		СведенияОбУчастнике.СведенияОбАдресе.ВидАдреса = "АдрРФ";
		СведенияОбУчастнике.СведенияОбАдресе.Адрес = АдресРФ(Участник.Адрес.АдрРФ);
	ИначеЕсли Участник.Адрес.АдрИно <> Неопределено Тогда
		СведенияОбУчастнике.СведенияОбАдресе.ВидАдреса = "АдрИнф";
		СведенияОбУчастнике.СведенияОбАдресе.Адрес = АдресИнф(Участник.Адрес.АдрИно);
	КонецЕсли;

	Возврат СведенияОбУчастнике;

КонецФункции

Процедура ЗаполнитьАкцизВСтрокеТовара(СтрокаТовараАкциз, СведенияОТоваре, ИмяРеквизита)
	Акциз = 0;
	Если СтрокаТовараАкциз.свойства().Получить("СумАкциз") <> Неопределено Тогда
		Акциз = СтрокаТовараАкциз.СумАкциз;
	ИначеЕсли СтрокаТовараАкциз.Свойства().Получить("БезАкциз") <> Неопределено Тогда
		Акциз = НСтр("ru ='без акциза'");
	КонецЕсли; 
	СведенияОТоваре.Вставить(ИмяРеквизита, Акциз);
КонецПроцедуры

Функция СтрокаТовараУПД(СтрокаТовара)
	
	СведенияОТоваре = СтруктураСтрокиТоваровУслуг();
	СведенияОТоваре.НомерСтроки = СтрокаТовара.НомСтр;
	СведенияОТоваре.Наименование = СтрокаТовара.НаимТов;
	СведенияОТоваре.ОКЕИ = СтрокаТовара.ОКЕИ_Тов;
	СведенияОТоваре.Количество = СтрокаТовара.КолТов;
	СведенияОТоваре.Цена = СтрокаТовара.ЦенаТов;
	СведенияОТоваре.СуммаБезНДС = СтрокаТовара.СтТовБезНДС;
	СведенияОТоваре.СтавкаНДС = СтрокаТовара.НалСт;
	СведенияОТоваре.Сумма = СтрокаТовара.СтТовУчНал;
	ЗаполнитьАкцизВСтрокеТовара(СтрокаТовара.Акциз, СведенияОТоваре, "Акциз");
	
	СведенияОТоваре.СуммаНДС = СуммаНДСУПД(СтрокаТовара.СумНал);
	
	Если СтрокаТовара.СвТД <> Неопределено И СтрокаТовара.СвТД.Количество() > 0 Тогда
		ТаможенныеДекларации = Новый Массив;
		Для Каждого Сведения Из СтрокаТовара.СвТД Цикл
			ТаможенныеДекларации.Добавить(Новый Структура("КодСтраныПроисхождения, НомерТаможеннойДекларации", 
				Сведения.КодПроисх, Сведения.НомерТД));
		КонецЦикла;
		СведенияОТоваре.Вставить("ТаможенныеДекларации", ТаможенныеДекларации);
	КонецЕсли;
	
	ЗаполнитьТекстовуюИнформацию(СведенияОТоваре, "ТекстоваяИнформация", СтрокаТовара.ИнфПолФХЖ2);

	Если СтрокаТовара.Получить("ДопСведТов") <> Неопределено Тогда
		ЗаполнитьСвойство(СведенияОТоваре, "ПризнакТоварРаботаИное", СтрокаТовара.ДопСведТов, "ПрТовРаб");
		ЗаполнитьСвойство(СведенияОТоваре, "ДополнительнаяИнформацияОПризнаке", СтрокаТовара.ДопСведТов, "ДопПризн");
		ЗаполнитьСвойство(СведенияОТоваре, "Артикул", СтрокаТовара.ДопСведТов, "КодТов");
		ЗаполнитьСвойство(СведенияОТоваре, "НаименованиеЕдиницыИзмерения", СтрокаТовара.ДопСведТов, "НаимЕдИзм");
		ЗаполнитьСвойство(СведенияОТоваре, "КраткоеНаименованиеСтраныПроисхождения", СтрокаТовара.ДопСведТов, "КрНаимСтрПр");
		ЗаполнитьСвойство(СведенияОТоваре, "КоличествоНадлежитОтпустить", СтрокаТовара.ДопСведТов, "НадлОтп");
		ЗаполнитьСвойство(СведенияОТоваре, "КорСчДебет", СтрокаТовара.ДопСведТов, "КорСчДебет");
		ЗаполнитьСвойство(СведенияОТоваре, "КорСчКредит", СтрокаТовара.ДопСведТов, "КорСчКредит");
	КонецЕсли;
	
	Возврат СведенияОТоваре;
	
КонецФункции

Функция СтрокаТовараУПД2019(СтрокаТовара)
	
	СведенияОТоваре = СтруктураСтрокиТоваровУслуг();
	СведенияОТоваре.НомерСтроки = СтрокаТовара.НомСтр;
	Если СтрокаТовара.Свойства().Получить("НаимТов")<>Неопределено тогда
		СведенияОТоваре.Наименование = СтрокаТовара.НаимТов;
	КонецЕсли;
	Если СтрокаТовара.Свойства().Получить("ОКЕИ_Тов")<>неопределено Тогда
		СведенияОТоваре.ОКЕИ = СтрокаТовара.ОКЕИ_Тов;
	КонецЕсли;
	Если СтрокаТовара.Свойства().Получить("КолТов")<>Неопределено Тогда
		СведенияОТоваре.Количество = СтрокаТовара.КолТов;
	КонецЕсли;
	Если СтрокаТовара.Свойства().ПолучитЬ("ЦенаТов")<>Неопределено тогда
		СведенияОТоваре.Цена = СтрокаТовара.ЦенаТов;
	КонецЕсли;
	Если СтрокаТовара.Свойства().ПолучитЬ("СтТовБезНДС")<>Неопределено тогда
		СведенияОТоваре.СуммаБезНДС = СтрокаТовара.СтТовБезНДС;
	КонецЕсли;
	Если СтрокаТовара.Свойства().ПолучитЬ("НалСт")<>Неопределено тогда
		СведенияОТоваре.СтавкаНДС = СтрокаТовара.НалСт;
	КонецЕсли;
	Если СтрокаТовара.Свойства().ПолучитЬ("СтТовУчНал")<>Неопределено тогда
		СведенияОТоваре.Сумма = СтрокаТовара.СтТовУчНал;
	КонецЕсли;
	ЗаполнитьАкцизВСтрокеТовара(СтрокаТовара.Акциз, СведенияОТоваре, "Акциз");
	
	СведенияОТоваре.СуммаНДС = СуммаНДСУПД(СтрокаТовара.СумНал);
	
	Если СтрокаТовара.Свойства().ПолучитЬ("СвТД") <> Неопределено Тогда
		ТаможенныеДекларации = Новый Массив;
		Если ТипЗнч(СтрокаТовара.СвТД)=Тип("ОбъектXDTO") Тогда
			Сведения=СтрокаТовара.СвТД;
			СтруктураСведений=Новый Структура("КодСтраныПроисхождения, НомерТаможеннойДекларации");
			Если Сведения.Свойства().Получить("КодПроисх")<>Неопределено тогда
				СтруктураСведений.КодСтраныПроисхождения=Сведения.КодПроисх;
			Конецесли;
			Если Сведения.Свойства().Получить("НомерТД")<>Неопределено тогда
				СтруктураСведений.НомерТаможеннойДекларации=Сведения.НомерТД;
			Конецесли;
			ТаможенныеДекларации.Добавить(СтруктураСведений);
				//ТаможенныеДекларации.Добавить(Новый Структура("КодСтраныПроисхождения, НомерТаможеннойДекларации", 
				//	Сведения.КодПроисх, Сведения.НомерТД));
		Иначе
			Для Каждого Сведения Из СтрокаТовара.СвТД Цикл
				СтруктураСведений=Новый Структура("КодСтраныПроисхождения, НомерТаможеннойДекларации");
				Если Сведения.Свойства().Получить("КодПроисх")<>Неопределено тогда
					СтруктураСведений.КодСтраныПроисхождения=Сведения.КодПроисх;
				Конецесли;
				Если Сведения.Свойства().Получить("НомерТД")<>Неопределено тогда
					СтруктураСведений.НомерТаможеннойДекларации=Сведения.НомерТД;
				Конецесли;
				ТаможенныеДекларации.Добавить(СтруктураСведений);
				
				//ТаможенныеДекларации.Добавить(Новый Структура("КодСтраныПроисхождения, НомерТаможеннойДекларации", 
				//	Сведения.КодПроисх, Сведения.НомерТД));
			КонецЦикла;
		Конецесли;
		
		СведенияОТоваре.Вставить("ТаможенныеДекларации", ТаможенныеДекларации);
	КонецЕсли;
	
	Если СтрокаТовара.Свойства().Получить("ИнфПолФХЖ2")<>Неопределено Тогда
		ЗаполнитьТекстовуюИнформацию(СведенияОТоваре, "ТекстоваяИнформация", СтрокаТовара.ИнфПолФХЖ2);
	КонецЕсли;

	Если СтрокаТовара.Свойства().Получить("ДопСведТов") <> Неопределено Тогда
		ЗаполнитьСвойство(СведенияОТоваре, "ПризнакТоварРаботаИное", СтрокаТовара.ДопСведТов, "ПрТовРаб");
		ЗаполнитьСвойство(СведенияОТоваре, "ДополнительнаяИнформацияОПризнаке", СтрокаТовара.ДопСведТов, "ДопПризн");
		ЗаполнитьСвойство(СведенияОТоваре, "Артикул", СтрокаТовара.ДопСведТов, "АртикулТов");
		ЗаполнитьСвойство(СведенияОТоваре, "КодТовара", СтрокаТовара.ДопСведТов, "КодТов");
		ЗаполнитьСвойство(СведенияОТоваре, "КодВидаТовара", СтрокаТовара.ДопСведТов, "КодВидТов");
		ЗаполнитьСвойство(СведенияОТоваре, "НаименованиеЕдиницыИзмерения", СтрокаТовара.ДопСведТов, "НаимЕдИзм");
		ЗаполнитьСвойство(СведенияОТоваре, "КраткоеНаименованиеСтраныПроисхождения", СтрокаТовара.ДопСведТов, "КрНаимСтрПр");
		ЗаполнитьСвойство(СведенияОТоваре, "КоличествоНадлежитОтпустить", СтрокаТовара.ДопСведТов, "НадлОтп");
		ЗаполнитьСвойство(СведенияОТоваре, "ХарактеристикаТовара", СтрокаТовара.ДопСведТов, "ХарактерТов");
		ЗаполнитьСвойство(СведенияОТоваре, "КорСчДебет", СтрокаТовара.ДопСведТов, "КорСчДебет");
		ЗаполнитьСвойство(СведенияОТоваре, "КорСчКредит", СтрокаТовара.ДопСведТов, "КорСчКредит");
		Если СтрокаТовара.ДопСведТов.Свойства().Получить("НомСредИдентТов")<>Неопределено Тогда
			ЗаполнитьИнформациюОМаркировке(СведенияОТоваре, "КодыМаркировки", СтрокаТовара.ДопСведТов.НомСредИдентТов);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СведенияОТоваре;
	
КонецФункции

Функция СтрокаТовараДокументаОПередачеТоваров(СтрокаТовара)
	
	СведенияОТоваре = СтруктураСтрокиТоваровУслуг();
	
	СведенияОТоваре.НомерСтроки = СтрокаТовара.НомТов;
	СведенияОТоваре.Наименование = СтрокаТовара.НаимТов;
	СведенияОТоваре.ОКЕИ = СтрокаТовара.ОКЕИ_Тов;
	
	КоличествоМест = СтрокаТовара.КолМест;
	Если Не ЗначениеЗаполнено(КоличествоМест) Тогда
		КоличествоМест = СтрокаТовара.НеттоПередано;
	КонецЕсли;
	СведенияОТоваре.Количество = КоличествоМест;
	
	СведенияОТоваре.Цена = СтрокаТовара.Цена;
	СведенияОТоваре.СуммаБезНДС = СтрокаТовара.СтБезНДС;
	СведенияОТоваре.СтавкаНДС = СтрокаТовара.НалСт;
	СведенияОТоваре.Сумма = СтрокаТовара.СтУчНДС;
	СведенияОТоваре.СуммаНДС = СтрокаТовара.СумНДС;
	
	ЗаполнитьТекстовуюИнформацию(СведенияОТоваре, "ТекстоваяИнформация", СтрокаТовара.ИнфПолФХЖ2);
	
	ЗаполнитьСвойство(СведенияОТоваре, "Брутто", СтрокаТовара, "Брутто");
	ЗаполнитьСвойство(СведенияОТоваре, "НеттоПередано", СтрокаТовара, "НеттоПередано");
	ЗаполнитьСвойство(СведенияОТоваре, "ХарактеристикаТовара", СтрокаТовара, "ХарактерТов");
	ЗаполнитьСвойство(СведенияОТоваре, "СортТовара", СтрокаТовара, "СортТов");
	ЗаполнитьСвойство(СведенияОТоваре, "Артикул", СтрокаТовара, "АртикулТов");
	ЗаполнитьСвойство(СведенияОТоваре, "ВидУпаковки", СтрокаТовара, "ВидУпак");
	ЗаполнитьСвойство(СведенияОТоваре, "КоличествоВОдномМесте", СтрокаТовара, "Место");
	ЗаполнитьСвойство(СведенияОТоваре, "Код", СтрокаТовара, "КодТов");
	ЗаполнитьСвойство(СведенияОТоваре, "НаименованиеЕдиницыИзмерения", СтрокаТовара, "НаимЕдИзм");
	ЗаполнитьСвойство(СведенияОТоваре, "КоличествоНадлежитОтпустить", СтрокаТовара, "НадлОтп");
	ЗаполнитьСвойство(СведенияОТоваре, "КорСчДебет", СтрокаТовара, "КорСчДебет");
	ЗаполнитьСвойство(СведенияОТоваре, "КорСчКредит", СтрокаТовара, "КорСчКредит");
	
	Возврат СведенияОТоваре;
КонецФункции

Функция СтрокаТовараСчетаФактуры(СтрокаТовара, ВерсияФормата = "5.02")
	
	СведенияОТоваре = СтруктураСтрокиТоваровУслуг();
	
	СведенияОТоваре.НомерСтроки = СтрокаТовара.НомСтр;
	СведенияОТоваре.Наименование = СтрокаТовара.НаимТов;
	СведенияОТоваре.ОКЕИ = СтрокаТовара.ОКЕИ_Тов;
	СведенияОТоваре.Количество = СтрокаТовара.КолТов;
	СведенияОТоваре.Цена = СтрокаТовара.ЦенаТов;
	СведенияОТоваре.СуммаБезНДС = СтрокаТовара.СтТовБезНДС;
	
	Если ВерсияФормата = "5.01" Тогда
		СведенияОТоваре.СтавкаНДС = СтрокаТовара.НалСт.НалСтВел;
		СведенияОТоваре.Вставить("ТипСтавкиНДС", СтрокаТовара.НалСт.НалСтТип);
	Иначе
		СведенияОТоваре.СтавкаНДС = СтрокаТовара.НалСт;
	КонецЕсли; 
	
	СведенияОТоваре.Сумма = СтрокаТовара.СтТовУчНал;
	ЗаполнитьАкцизВСтрокеТовара(СтрокаТовара.Акциз, СведенияОТоваре, "Акциз");
	
	СведенияОТоваре.СуммаНДС = СуммаНДСУПД(СтрокаТовара.СумНал, "СумНДС");
	
	Если ЕстьСвойство(СтрокаТовара, "СвТД") И СтрокаТовара.СвТД.Количество() > 0 Тогда
		ТаможенныеДекларации = Новый Массив;
		Для Каждого Сведения Из СтрокаТовара.СвТД Цикл
			ТаможенныеДекларации.Добавить(Новый Структура("КодСтраныПроисхождения, НомерТаможеннойДекларации", 
				Сведения.КодПроисх, Сведения.НомерТД));
		КонецЦикла;
		СведенияОТоваре.Вставить("ТаможенныеДекларации", ТаможенныеДекларации);
	КонецЕсли; 
			
	ЗаполнитьТекстовуюИнформацию(СведенияОТоваре, "ТекстоваяИнформация", СтрокаТовара.ИнфПолСтр);

	Возврат СведенияОТоваре;
	
КонецФункции

Функция СтрокаТовараТорг12(СтрокаТовара)
	
	СведенияОТоваре = СтруктураСтрокиТоваровУслуг();
	
	СведенияОТоваре.НомерСтроки = СтрокаТовара.НомТов;
	СведенияОТоваре.Наименование = СтрокаТовара.НаимТов;
	СведенияОТоваре.ОКЕИ = СтрокаТовара.ОКЕИ_Тов;
	
	КоличествоМест = СтрокаТовара.КолМест;
	Если Не ЗначениеЗаполнено(КоличествоМест) Тогда
		КоличествоМест = СтрокаТовара.Нетто;
	КонецЕсли;
	СведенияОТоваре.Количество = КоличествоМест;
	
	СведенияОТоваре.Цена = СтрокаТовара.Цена;
	СведенияОТоваре.СуммаБезНДС = СтрокаТовара.СумБезНДС;
	СведенияОТоваре.СтавкаНДС = СтрокаТовара.СтавкаНДС;
	СведенияОТоваре.Сумма = СтрокаТовара.СумУчНДС;
	СведенияОТоваре.СуммаНДС = СтрокаТовара.СумНДС;
	
	ЗаполнитьСвойство(СведенияОТоваре, "ХарактеристикаТовара", СтрокаТовара, "ХарактерТов");
	ЗаполнитьСвойство(СведенияОТоваре, "МассаБрутто", СтрокаТовара, "Брутто");
	ЗаполнитьСвойство(СведенияОТоваре, "МассаНетто", СтрокаТовара, "Нетто");
	ЗаполнитьСвойство(СведенияОТоваре, "СортТовара", СтрокаТовара, "СортТов");
	ЗаполнитьСвойство(СведенияОТоваре, "Артикул", СтрокаТовара, "АртикулТов");
	ЗаполнитьСвойство(СведенияОТоваре, "ВидУпаковки", СтрокаТовара, "ВидУпак");
	ЗаполнитьСвойство(СведенияОТоваре, "КоличествоВОдномМесте", СтрокаТовара, "Место");
	ЗаполнитьСвойство(СведенияОТоваре, "Код", СтрокаТовара, "КодТов");
	ЗаполнитьСвойство(СведенияОТоваре, "НаименованиеЕдиницыИзмерения", СтрокаТовара, "НаимЕдИзм");
	ЗаполнитьСвойство(СведенияОТоваре, "КоличествоНадлежитОтпустить", СтрокаТовара, "НадлОтп");
	ЗаполнитьСвойство(СведенияОТоваре, "КорСчДебет", СтрокаТовара, "КорСчДебет");
	ЗаполнитьСвойство(СведенияОТоваре, "КорСчКредит", СтрокаТовара, "КорСчКредит");
	ЗаполнитьСвойство(СведенияОТоваре, "ИнформационноеПолеСобытия", СтрокаТовара, "ИнфПолСтр");

	Возврат СведенияОТоваре;
	
КонецФункции

Функция СтрокаТовараКорСчетаФактуры(СтрокаТовара, СуммаДокумента, СуммаНДСДокумента)
	
	СведенияОТоваре = СтруктураСтрокиТоваровКорректировочногоДокумента();
	СведенияОТоваре.НомерСтроки = СтрокаТовара.НомСтр;
	СведенияОТоваре.Наименование = СтрокаТовара.НаимТов;
	СведенияОТоваре.ОКЕИ = СтрокаТовара.ОКЕИ_ТовПосле;
	СведенияОТоваре.Количество = СтрокаТовара.КолТовПосле;
	СведенияОТоваре.Цена = СтрокаТовара.ЦенаТовПосле;
	
	Если СтрокаТовара.СтТовБезНДС <> Неопределено Тогда
		СведенияОТоваре.СуммаБезНДС = СтрокаТовара.СтТовБезНДС.СтоимПослеИзм;
	КонецЕсли;

	СведенияОТоваре.СтавкаНДС = СтрокаТовара.НалСтПосле;
	СведенияОТоваре.СуммаНДС = СуммаНДСУПД(СтрокаТовара.СумНалПосле, "СумНДС");
	СведенияОТоваре.Сумма = СтрокаТовара.СтТовУчНал.СтоимПослеИзм;
	
	СуммаДокумента = СуммаДокумента + СведенияОТоваре.Сумма;
	СуммаНДСДокумента = СуммаНДСДокумента + СведенияОТоваре.СуммаНДС;
	
	СведенияОТоваре.ОКЕИДоКорректировки = СтрокаТовара.ОКЕИ_ТовДо;
	
	СведенияОТоваре.КоличествоДоКорректировки = СтрокаТовара.КолТовДо;
	СведенияОТоваре.ЦенаДоКорректировки = СтрокаТовара.ЦенаТовДо;
		
	Если СтрокаТовара.СтТовБезНДС <> Неопределено Тогда
		СведенияОТоваре.СуммаБезНДСДоКорректировки = СтрокаТовара.СтТовБезНДС.СтоимДоИзм;
		СведенияОТоваре.СуммаБезНДСУвеличение = СтрокаТовара.СтТовБезНДС.СтоимУвел;
		СведенияОТоваре.СуммаБезНДСУменьшение = СтрокаТовара.СтТовБезНДС.СтоимУм;
	КонецЕсли;
		
	СведенияОТоваре.СтавкаНДСДоКорректировки = СтрокаТовара.НалСтДо;
	СведенияОТоваре.СуммаНДСДоКорректировки = СуммаНДСУПД(СтрокаТовара.СумНалДо, "СумНДС");
	СведенияОТоваре.СуммаНДСУвеличение = СтрокаТовара.СумНалРазн.СумУвел;
	СведенияОТоваре.СуммаНДСУменьшение = СтрокаТовара.СумНалРазн.СумУм;
	
	ЗаполнитьАкцизВСтрокеТовара(СтрокаТовара.АкцизДо, СведенияОТоваре, "АкцизДоКорректировки");
	ЗаполнитьАкцизВСтрокеТовара(СтрокаТовара.АкцизПосле, СведенияОТоваре, "Акциз");
	СведенияОТоваре.Вставить("АкцизУвеличение", СтрокаТовара.АкцизРазн.СумУвел);
	СведенияОТоваре.Вставить("АкцизУменьшение", СтрокаТовара.АкцизРазн.СумУм);
	
	СведенияОТоваре.СуммаДоКорректировки = СтрокаТовара.СтТовУчНал.СтоимДоИзм;
	СведенияОТоваре.СуммаУвеличение = СтрокаТовара.СтТовУчНал.СтоимУвел;
	СведенияОТоваре.СуммаУменьшение = СтрокаТовара.СтТовУчНал.СтоимУм;
	
	ЗаполнитьТекстовуюИнформацию(СведенияОТоваре, "ТекстоваяИнформация", СтрокаТовара.ИнфПолСтр);
	
	Возврат СведенияОТоваре;
	
КонецФункции

Функция СтрокаТовараУКД(СтрокаТовара, ИтогиПоДокументу)
	
	СведенияОТоваре = СтруктураСтрокиТоваровКорректировочногоДокумента();
	СведенияОТоваре.НомерСтроки = СтрокаТовара.НомСтр;
	СведенияОТоваре.Наименование = СтрокаТовара.НаимТов;
	СведенияОТоваре.ОКЕИ = СтрокаТовара.ОКЕИ_ТовПосле;
	Если СтрокаТовара.Свойства().Получить("КолТовПосле")=Неопределено Тогда
		СведенияОТоваре.Количество = 0;
	Иначе
		СведенияОТоваре.Количество = СтрокаТовара.КолТовПосле;
	КонецеслИ;
	СведенияОТоваре.Цена = СтрокаТовара.ЦенаТовПосле;
	Если СтрокаТовара.СтТовБезНДС <> Неопределено Тогда
		СведенияОТоваре.СуммаБезНДС = СтрокаТовара.СтТовБезНДС.СтоимПослеИзм;
	КонецЕсли;
	СведенияОТоваре.СтавкаНДС = СтрокаТовара.НалСтПосле;
	СведенияОТоваре.СуммаНДС = СуммаНДСУПД(СтрокаТовара.СумНалПосле, "СумНДС");
	СведенияОТоваре.Сумма = СтрокаТовара.СтТовУчНал.СтоимПослеИзм;
	
	ИтогиПоДокументу.СуммаДокумента = ИтогиПоДокументу.СуммаДокумента + СведенияОТоваре.Сумма;
	
	Если СведенияОТоваре.СуммаНДС <> "без НДС" Тогда
		ИтогиПоДокументу.СуммаНДСДокумента = ИтогиПоДокументу.СуммаНДСДокумента + СведенияОТоваре.СуммаНДС;
	КонецЕсли; 
		
	СведенияОТоваре.ОКЕИДоКорректировки = СтрокаТовара.ОКЕИ_ТовДо;
	СведенияОТоваре.КоличествоДоКорректировки = СтрокаТовара.КолТовДо;
	СведенияОТоваре.ЦенаДоКорректировки = СтрокаТовара.ЦенаТовДо;
		
	Если СтрокаТовара.СтТовБезНДС <> Неопределено Тогда
		СведенияОТоваре.СуммаБезНДСДоКорректировки = СтрокаТовара.СтТовБезНДС.СтоимДоИзм;
		Если СтрокаТовара.СтТовБезНДС.Свойства().Получить("СтоимУвел")<>Неопределено и СтрокаТовара.СтТовБезНДС.СтоимУвел <> Неопределено Тогда
			СведенияОТоваре.СуммаБезНДСУвеличение = СтрокаТовара.СтТовБезНДС.СтоимУвел;
			ИтогиПоДокументу.СуммаБезНДСУвеличение = ИтогиПоДокументу.СуммаБезНДСУвеличение + СведенияОТоваре.СуммаБезНДСУвеличение;
		КонецЕсли; 
		Если  СтрокаТовара.СтТовБезНДС.СтоимУм <> Неопределено Тогда
			СведенияОТоваре.СуммаБезНДСУменьшение = СтрокаТовара.СтТовБезНДС.СтоимУм;
			ИтогиПоДокументу.СуммаБезНДСУменьшение = ИтогиПоДокументу.СуммаБезНДСУменьшение + СведенияОТоваре.СуммаБезНДСУменьшение;
		КонецЕсли; 
	КонецЕсли;
	
	СведенияОТоваре.СтавкаНДСДоКорректировки = СтрокаТовара.НалСтДо;
		
	СведенияОТоваре.СуммаНДСДоКорректировки = СуммаНДСУПД(СтрокаТовара.СумНалДо, "СумНДС");
	Если СтрокаТовара.СумНалРазн.Свойства().Получить("СумУвел")<>Неопределено И  СтрокаТовара.СумНалРазн.СумУвел <> Неопределено Тогда
		СведенияОТоваре.СуммаНДСУвеличение = СтрокаТовара.СумНалРазн.СумУвел;
 		ИтогиПоДокументу.СуммаНДСУвеличение = ИтогиПоДокументу.СуммаНДСУвеличение + СведенияОТоваре.СуммаНДСУвеличение;
	КонецЕсли; 
	
	Если СтрокаТовара.СумНалРазн.СумУм <> Неопределено Тогда
		СведенияОТоваре.СуммаНДСУменьшение = СтрокаТовара.СумНалРазн.СумУм;
		ИтогиПоДокументу.СуммаНДСУменьшение = ИтогиПоДокументу.СуммаНДСУменьшение + СведенияОТоваре.СуммаНДСУменьшение;
	КонецЕсли; 
	
	ЗаполнитьАкцизВСтрокеТовара(СтрокаТовара.АкцизДо, СведенияОТоваре, "АкцизДоКорректировки");
	ЗаполнитьАкцизВСтрокеТовара(СтрокаТовара.АкцизПосле, СведенияОТоваре, "Акциз");
	Если СтрокаТовара.АкцизРазн.Свойства().Получить("СумУвел")=Неопределено тогда
		СведенияОТоваре.Вставить("АкцизУвеличение", 0);
	Иначе
		СведенияОТоваре.Вставить("АкцизУвеличение", СтрокаТовара.АкцизРазн.СумУвел);
	Конецесли;
	Если СтрокаТовара.АкцизРазн.Свойства().Получить("СумУм")=Неопределено Тогда
		СведенияОТоваре.Вставить("АкцизУменьшение", 0);
	Иначе
		СведенияОТоваре.Вставить("АкцизУменьшение", СтрокаТовара.АкцизРазн.СумУм);
	Конецесли;

	СведенияОТоваре.СуммаДоКорректировки = СтрокаТовара.СтТовУчНал.СтоимДоИзм;
	Если СтрокаТовара.СтТовУчНал.Свойства().Получить("СтоимУвел")<>Неопределено И СтрокаТовара.СтТовУчНал.СтоимУвел <> Неопределено Тогда
		СведенияОТоваре.СуммаУвеличение = СтрокаТовара.СтТовУчНал.СтоимУвел;
		ИтогиПоДокументу.СуммаУвеличение = ИтогиПоДокументу.СуммаУвеличение + СведенияОТоваре.СуммаУвеличение;
	КонецЕсли; 
	
	Если СтрокаТовара.СтТовУчНал.СтоимУм <> Неопределено Тогда
		СведенияОТоваре.СуммаУменьшение = СтрокаТовара.СтТовУчНал.СтоимУм;
		ИтогиПоДокументу.СуммаУменьшение = ИтогиПоДокументу.СуммаУменьшение + СведенияОТоваре.СуммаУменьшение;
	КонецЕсли; 
	
	ЗаполнитьТекстовуюИнформацию(СведенияОТоваре, "ТекстоваяИнформация", СтрокаТовара.ИнфПолФХЖ2);

	Если СтрокаТовара.Свойства().Получить("ДопСведТов") <> Неопределено Тогда
		ЗаполнитьСвойство(СведенияОТоваре, "КорСчДебет", СтрокаТовара.ДопСведТов, "КорСчДебет ");
		ЗаполнитьСвойство(СведенияОТоваре, "КорСчКредит", СтрокаТовара.ДопСведТов, "КорСчКредит");
	КонецЕсли;
	
	Возврат СведенияОТоваре;
	
КонецФункции

Процедура ЗаполнитьТекстовуюИнформацию(Структура, ИмяСвойства, ТекстоваяИнформация)
	
	Если ТипЗнч(ТекстоваяИнформация) = Тип("СписокXDTO") И ТекстоваяИнформация.Количество() > 0 Тогда
		Массив = Новый Массив;
		Для Каждого ТекущаяСтрока Из ТекстоваяИнформация Цикл
			Массив.Добавить(Новый Структура("Идентификатор, Значение", 
				ТекущаяСтрока.Идентиф, ТекущаяСтрока.Значен));
		КонецЦикла;
		Структура.Вставить(ИмяСвойства, Массив);
	ИначеЕсли ТипЗнч(ТекстоваяИнформация)=Тип("ОбъектXDTO") Тогда
		
	
		Массив = Новый Массив;
		ТекущаяСтрока =ТекстоваяИнформация;
			Массив.Добавить(Новый Структура("Идентификатор, Значение", 
				ТекущаяСтрока.Идентиф, ТекущаяСтрока.Значен));
		//КонецЦикла;
		Структура.Вставить(ИмяСвойства, Массив);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОМаркировкеУдалить(Структура, ИмяСвойства, КодыМаркировки)
	
	Если ТипЗнч(КодыМаркировки) = Тип("СписокXDTO") И КодыМаркировки.Количество() > 0 Тогда
		Массив = Новый Массив;
		Для Каждого ТекущаяСтрока Из КодыМаркировки Цикл
			ИдентификаторТранспортнойУпаковки = ТекущаяСтрока.ИдентТрансУпак;
			
			Для Каждого КодМаркировки Из ТекущаяСтрока.КИЗ Цикл
				Массив.Добавить(Новый Структура("ИдентификаторТранспортнойУпаковки, ВидУпаковки, СерийныйНомер", 
					ИдентификаторТранспортнойУпаковки, "cis", КодМаркировки));
			КонецЦикла;
			Для Каждого КодМаркировки Из ТекущаяСтрока.НомУпак Цикл
				Массив.Добавить(Новый Структура("ИдентификаторТранспортнойУпаковки, ВидУпаковки, СерийныйНомер", 
					ИдентификаторТранспортнойУпаковки, "sscc", КодМаркировки));
			КонецЦикла;
				
		КонецЦикла;
		Структура.Вставить(ИмяСвойства, Массив);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОМаркировке(Структура, ИмяСвойства, НомераСредствИдентификацииТоваров)
	
	Если ТипЗнч(НомераСредствИдентификацииТоваров) = Тип("ОбъектXDTO") Тогда
		Массив = Новый Массив;
		ТекущаяСтрока=НомераСредствИдентификацииТоваров;
		//Для Каждого ТекущаяСтрока Из НомераСредствИдентификацииТоваров Цикл
			НомерСредствИдентификацииТоваров = НовыйНомерСредствИдентификацииТоваров();
			Если ТекущаяСтрока.Свойства().Получить("ИдентТрансУпак")<>Неопределено Тогда
				НомерСредствИдентификацииТоваров.ИдентификаторТранспортнойУпаковки = ТекущаяСтрока.ИдентТрансУпак;
			КонецЕсли;
			Если ТекущаяСтрока.Свойства().Получить("КИЗ")<>Неопределено Тогда
				Если ТипЗнч(ТекущаяСтрока.КИЗ)=Тип("СписокXDTO") Тогда
					Для Каждого КодМаркировки Из ТекущаяСтрока.КИЗ Цикл
						НомерСредствИдентификацииТоваров.КонтрольныеИдентификационныеЗнаки.Добавить(КодМаркировки);
					КонецЦикла;
				Иначе
					НомерСредствИдентификацииТоваров.КонтрольныеИдентификационныеЗнаки.Добавить(ТекущаяСтрока.КИЗ);
				КонецЕсли;
			КонецЕсли;
			Если ТекущаяСтрока.Свойства().Получить("НомУпак")<>Неопределено Тогда
				Если ТипЗнч(ТекущаяСтрока.НомУпак)=Тип("СписокXDTO") Тогда
					Для Каждого КодМаркировки Из ТекущаяСтрока.НомУпак Цикл
						НомерСредствИдентификацииТоваров.ИндивидуальныеУпаковки.Добавить(КодМаркировки);
					КонецЦикла;
				Иначе
						НомерСредствИдентификацииТоваров.ИндивидуальныеУпаковки.Добавить(ТекущаяСтрока.НомУпак);
					
				КонецЕсли;
			Конецесли;
			Массив.Добавить(НомерСредствИдентификацииТоваров);
		//КонецЦикла;
		Структура.Вставить(ИмяСвойства, Массив);
	
	ИначеЕсли ТипЗнч(НомераСредствИдентификацииТоваров) = Тип("СписокXDTO") И НомераСредствИдентификацииТоваров.Количество() > 0 Тогда
		Массив = Новый Массив;
		Для Каждого ТекущаяСтрока Из НомераСредствИдентификацииТоваров Цикл
			НомерСредствИдентификацииТоваров = НовыйНомерСредствИдентификацииТоваров();
			Если ТекущаяСтрока.Свойства().Получить("ИдентТрансУпак")<>Неопределено Тогда
				НомерСредствИдентификацииТоваров.ИдентификаторТранспортнойУпаковки = ТекущаяСтрока.ИдентТрансУпак;
			КонецЕсли;
			Если ТекущаяСтрока.Свойства().Получить("КИЗ")<>Неопределено Тогда
				Если ТипЗнч(ТекущаяСтрока.КИЗ)=Тип("СписокXDTO") Тогда
					Для Каждого КодМаркировки Из ТекущаяСтрока.КИЗ Цикл
						НомерСредствИдентификацииТоваров.КонтрольныеИдентификационныеЗнаки.Добавить(КодМаркировки);
					КонецЦикла;
				Иначе
					НомерСредствИдентификацииТоваров.КонтрольныеИдентификационныеЗнаки.Добавить(ТекущаяСтрока.КИЗ);
				КонецЕсли;
			КонецЕсли;
			Если ТекущаяСтрока.Свойства().Получить("НомУпак")<>Неопределено Тогда
				Если ТипЗнч(ТекущаяСтрока.НомУпак)=Тип("СписокXDTO") Тогда
					Для Каждого КодМаркировки Из ТекущаяСтрока.НомУпак Цикл
						НомерСредствИдентификацииТоваров.ИндивидуальныеУпаковки.Добавить(КодМаркировки);
					КонецЦикла;
				Иначе
						НомерСредствИдентификацииТоваров.ИндивидуальныеУпаковки.Добавить(ТекущаяСтрока.НомУпак);
					
				КонецЕсли;
			Конецесли;
			Массив.Добавить(НомерСредствИдентификацииТоваров);
		КонецЦикла;
		Структура.Вставить(ИмяСвойства, Массив);
	КонецЕсли; 
	
КонецПроцедуры

Функция НовыйНомерСредствИдентификацииТоваров()
	
	Структура = Новый Структура;
	Структура.Вставить("ИдентификаторТранспортнойУпаковки");
	Структура.Вставить("ИндивидуальныеУпаковки", Новый Массив);
	Структура.Вставить("КонтрольныеИдентификационныеЗнаки", Новый Массив);

	Возврат Структура;
КонецФункции

Процедура ЗаполнитьФИО(Структура, Элемент)
	
	Структура.Вставить("Фамилия", Элемент.Фамилия);
	Структура.Вставить("Имя", Элемент.Имя);
	ЗаполнитьСвойство(Структура, "Отчество", Элемент, "Отчество");
	
КонецПроцедуры

Функция СуммаНДСУПД(ЭлементНДС, ИмяРеквизитаСуммыНалога = "СумНал")
	
	Если ЭлементНДС.Свойства().Получить(ИмяРеквизитаСуммыНалога) <> Неопределено Тогда
		Возврат ЭлементНДС[ИмяРеквизитаСуммыНалога];
	ИначеЕсли ЭлементНДС.Свойства().Получить("БезНДС") <> Неопределено Тогда
		Возврат "без НДС";
	КонецЕсли; 
	
	Возврат 0;
	
КонецФункции

Функция СуммаНДС(ЭлементНДС, ИмяРеквизитаСуммыНалога = "СумНал")
	
	Если ЕстьСвойство(ЭлементНДС, ИмяРеквизитаСуммыНалога) Тогда
		Возврат ЭлементНДС[ИмяРеквизитаСуммыНалога];
	ИначеЕсли ЕстьСвойство(ЭлементНДС, "БезНДС") Тогда
		Возврат "без НДС";
	КонецЕсли; 
	
	Возврат 0;
	
КонецФункции

Функция ДатаИзСтрокиЭД(ЭлементДата)
	
	ВозвращаемаяДата = Неопределено;
	
	Если ЗначениеЗаполнено(ЭлементДата) Тогда	
		ВозвращаемаяДата = Дата(Сред(ЭлементДата, 7, 4), Сред(ЭлементДата, 4, 2), Сред(ЭлементДата, 1, 2));
	КонецЕсли;
	
	Возврат ВозвращаемаяДата;
	
КонецФункции

Функция ДатаИзСтрокиПФР(ЭлементДата)
	
	ВозвращаемаяДата = Неопределено;
	
	Если ЗначениеЗаполнено(ЭлементДата) Тогда	
		ВозвращаемаяДата = Дата(Сред(ЭлементДата, 1, 4), Сред(ЭлементДата, 6, 2), Сред(ЭлементДата, 9, 2));
	КонецЕсли;
	
	Возврат ВозвращаемаяДата;
	
КонецФункции

Функция СтрокаВЧисло(Знач Значение) 
	
	Значение = СтрЗаменить(Значение, " ", "");
	Если Найти(Значение, "(")=1 Тогда
		Значение = СтрЗаменить(Значение, "(", "-");
		Значение = СтрЗаменить(Значение, ")", "");
	КонецЕсли;
	
	СтрокаБезНулей = СтрЗаменить(Значение, "0", "");
	Если ПустаяСтрока(СтрокаБезНулей) Или СтрокаБезНулей = "-" Тогда
		Возврат 0;
	КонецЕсли;
	
	ТипЧисло  = Новый ОписаниеТипов("Число");
	Результат = ТипЧисло.ПривестиЗначение(Значение);
	
	Возврат ?(Результат <> 0 И Не ПустаяСтрока(СтрокаБезНулей), Результат, Неопределено);
	
КонецФункции

Функция ОписаниеТипаДата(ЧастиДаты) Экспорт

	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));

	КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты);

	Возврат Новый ОписаниеТипов(Массив, , , КвалификаторДаты);

КонецФункции


Функция ДатаИзСтрокиТХЦ(СтрокаДатыТХЦ)
	
	ПозицияТочки = Найти(СтрокаДатыТХЦ, ".");
	
	Если ПозицияТочки = 0 Тогда
		СтрокаДаты = СтрокаДатыТХЦ;
		ДлинаСтроки = СтрДлина(СтрокаДаты);
		ОбработаннаяСтрока = "";
		
		Для НомерСимвола = 1 По ДлинаСтроки Цикл
			Символ = Сред(СтрокаДаты, НомерСимвола, 1);
			Если Символ >= "0" И Символ <= "9" Тогда
				ОбработаннаяСтрока = ОбработаннаяСтрока + Символ;
			КонецЕсли;
		КонецЦикла;
		ТипДата = ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
		Результат = ТипДата.ПривестиЗначение(ОбработаннаяСтрока);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда;
		
		ПозицияПробела = Найти(СтрокаДатыТХЦ, " ");
		Если ПозицияПробела > 0 Тогда
			СтрокаДатыТХЦ = Лев(СтрокаДатыТХЦ, ПозицияПробела - 1);
		КонецЕсли;
		ОбработаннаяСтрока = СтрЗаменить(СтрокаДатыТХЦ, " ", "");
		ОбработаннаяСтрока = СокрЛП(СтрЗаменить(ОбработаннаяСтрока, ".", ""));
		ОбработаннаяСтрока = СокрЛП(СтрЗаменить(ОбработаннаяСтрока, "/", ""));
		ОбработаннаяСтрока = СокрЛП(СтрЗаменить(ОбработаннаяСтрока, "-", ""));
		ОбработаннаяСтрока = Сред(ОбработаннаяСтрока, 5) + Сред(ОбработаннаяСтрока, 3, 2) + Лев(ОбработаннаяСтрока, 2);
		Если СтрДлина(ОбработаннаяСтрока) = 6 Тогда
			Год = СтрокаВЧисло(Лев(ОбработаннаяСтрока, 2));
			ОбработаннаяСтрока = ?(Год > 29, "19", "20") + ОбработаннаяСтрока;
		КонецЕсли;
		
		ТипДата = ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
		Результат = ТипДата.ПривестиЗначение(ОбработаннаяСтрока);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


Функция ПодписантыУПД(ЭлементПодписанты)
	
	Подписанты = Новый Массив;
	Если ТипЗнч(ЭлементПодписанты)=Тип("ОбъектXDTO") Тогда
		Подписант=ЭлементПодписанты;
			ПодписантСтруктура = СтруктураПодписанта();
			
			ПодписантСтруктура.ОбластьПолномочий = Подписант.ОблПолн;
			ПодписантСтруктура.Статус = Подписант.Статус;
			ПодписантСтруктура.ОснованиеПолномочий = Подписант.ОснПолн;
			Если Подписант.свойства().Получить("ОснПолнОрг")<>Неопределено Тогда
				ПодписантСтруктура.ОснованиеПолномочийОрганизации = Подписант.ОснПолнОрг;
			Конецесли;
			
			Если Подписант.Свойства().Получить("ФЛ") <> Неопределено Тогда
				
				ПодписантСтруктура.ТипПодписанта = "ФЛ";
				СведенияОПодписанте = СтруктураПодписантаФЛ();
				ЗаполнитьФИО(СведенияОПодписанте, Подписант.ФЛ.ФИО);
				
				Если ЕстьСвойство(Подписант.ФЛ, "ГосРегИППодп") Тогда
					СведенияОПодписанте.Вставить("Свидетельство", Подписант.ФЛ.ГосРегИППодп);
				ИначеЕсли ЕстьСвойство(Подписант.ФЛ, "ГосРегИПВыдДов") Тогда
					СведенияОПодписанте.Вставить("Свидетельство", Подписант.ФЛ.ГосРегИПВыдДов);
				КонецЕсли; 
				
				Если Подписант.ФЛ.Свойства().Получить("ИННФЛ")<>Неопределено Тогда
					СведенияОПодписанте.Вставить("ИНН", Подписант.ФЛ.ИННФЛ);
				Иначе
					СведенияОПодписанте.Вставить("ИНН", "");

				КонецЕсли;
				
				Если Подписант.ФЛ.Свойства().Получить("ИныеСвед")<>Неопределено Тогда
					СведенияОПодписанте.Вставить("ИныеСведения", Подписант.ФЛ.ИныеСвед);
				Иначе
					СведенияОПодписанте.Вставить("ИныеСведения", "");
					
				КонецЕсли;
				ПодписантСтруктура.СведенияОПодписанте = СведенияОПодписанте;
				
			ИначеЕсли Подписант.Свойства().Получить("ИП") <> Неопределено Тогда
				
				ПодписантСтруктура.ТипПодписанта = "ИП";
				
				СведенияОПодписанте = СтруктураПодписантаФЛ();
				ЗаполнитьФИО(СведенияОПодписанте, Подписант.ИП.ФИО);
				Если ЕстьСвойство(Подписант.ИП, "СвГосРегИП") Тогда
					СведенияОПодписанте.Вставить("Свидетельство", Подписант.ИП.СвГосРегИП);
				ИначеЕсли ЕстьСвойство(Подписант.ИП, "ГосРегИПВыдДов") Тогда
					СведенияОПодписанте.Вставить("Свидетельство", Подписант.ИП.ГосРегИПВыдДов);
				КонецЕсли; 
				СведенияОПодписанте.Вставить("ИНН", Подписант.ИП.ИННФЛ);
				
				Если ЕстьСвойство(Подписант.ИП, "ИныеСвед") Тогда
					СведенияОПодписанте.Вставить("ИныеСведения", Подписант.ИП.ИныеСвед);
				КонецЕсли;
				ПодписантСтруктура.СведенияОПодписанте = СведенияОПодписанте;
					
			ИначеЕсли Подписант.Свойства().Получить("ЮЛ") <> Неопределено Тогда
				
				ПодписантСтруктура.ТипПодписанта = "ЮЛ";
				
				СведенияОПодписанте = СтруктураПодписантаЮЛ();
				ЗаполнитьФИО(СведенияОПодписанте, Подписант.ЮЛ.ФИО);
				
				Если ЕстьСвойство(Подписант.ЮЛ, "ГосРегИППодп") Тогда
					СведенияОПодписанте.Вставить("Свидетельство", Подписант.ЮЛ.ГосРегИППодп);
				ИначеЕсли ЕстьСвойство(Подписант.ЮЛ, "ГосРегИПВыдДов") Тогда
					СведенияОПодписанте.Вставить("Свидетельство", Подписант.ЮЛ.ГосРегИПВыдДов);
				КонецЕсли;
				
				СведенияОПодписанте.Вставить("ИНН", Подписант.ЮЛ.ИННЮЛ);
				Если Подписант.ЮЛ.Свойства().Получить("НаимОрг")<>Неопределено Тогда
					СведенияОПодписанте.Вставить("Наименование", Подписант.ЮЛ.НаимОрг);
				Конецесли;
				СведенияОПодписанте.Вставить("Должность", Подписант.ЮЛ.Должн);
				
				Если ЕстьСвойство(Подписант.ЮЛ, "ИныеСвед") Тогда
					СведенияОПодписанте.Вставить("ИныеСведения", Подписант.ЮЛ.ИныеСвед);
				КонецЕсли;
				ПодписантСтруктура.СведенияОПодписанте = СведенияОПодписанте;
				
			КонецЕсли;
			
			Подписанты.Добавить(ПодписантСтруктура);
		
	Иначе
		Для Каждого Подписант Из ЭлементПодписанты Цикл
			ПодписантСтруктура = СтруктураПодписанта();
			
			ПодписантСтруктура.ОбластьПолномочий = Подписант.ОблПолн;
			ПодписантСтруктура.Статус = Подписант.Статус;
			ПодписантСтруктура.ОснованиеПолномочий = Подписант.ОснПолн;
			Если Подписант.свойства().Получить("ОснПолнОрг")<>Неопределено Тогда
				ПодписантСтруктура.ОснованиеПолномочийОрганизации = Подписант.ОснПолнОрг;
			Конецесли;
			
			Если Подписант.Свойства().Получить("ФЛ") <> Неопределено Тогда
				
				ПодписантСтруктура.ТипПодписанта = "ФЛ";
				СведенияОПодписанте = СтруктураПодписантаФЛ();
				ЗаполнитьФИО(СведенияОПодписанте, Подписант.ФЛ.ФИО);
				
				Если ЕстьСвойство(Подписант.ФЛ, "ГосРегИППодп") Тогда
					СведенияОПодписанте.Вставить("Свидетельство", Подписант.ФЛ.ГосРегИППодп);
				ИначеЕсли ЕстьСвойство(Подписант.ФЛ, "ГосРегИПВыдДов") Тогда
					СведенияОПодписанте.Вставить("Свидетельство", Подписант.ФЛ.ГосРегИПВыдДов);
				КонецЕсли; 
				
				СведенияОПодписанте.Вставить("ИНН", Подписант.ФЛ.ИННФЛ);
				СведенияОПодписанте.Вставить("ИныеСведения", Подписант.ФЛ.ИныеСвед);
				ПодписантСтруктура.СведенияОПодписанте = СведенияОПодписанте;
				
			ИначеЕсли Подписант.Свойства().Получить("ИП") <> Неопределено Тогда
				
				ПодписантСтруктура.ТипПодписанта = "ИП";
				
				СведенияОПодписанте = СтруктураПодписантаФЛ();
				ЗаполнитьФИО(СведенияОПодписанте, Подписант.ИП.ФИО);
				Если ЕстьСвойство(Подписант.ИП, "СвГосРегИП") Тогда
					СведенияОПодписанте.Вставить("Свидетельство", Подписант.ИП.СвГосРегИП);
				ИначеЕсли ЕстьСвойство(Подписант.ИП, "ГосРегИПВыдДов") Тогда
					СведенияОПодписанте.Вставить("Свидетельство", Подписант.ИП.ГосРегИПВыдДов);
				КонецЕсли; 
				СведенияОПодписанте.Вставить("ИНН", Подписант.ИП.ИННФЛ);
				
				Если ЕстьСвойство(Подписант.ИП, "ИныеСвед") Тогда
					СведенияОПодписанте.Вставить("ИныеСведения", Подписант.ИП.ИныеСвед);
				КонецЕсли;
				ПодписантСтруктура.СведенияОПодписанте = СведенияОПодписанте;
					
			ИначеЕсли Подписант.Свойства().Получить("ЮЛ") <> Неопределено Тогда
				
				ПодписантСтруктура.ТипПодписанта = "ЮЛ";
				
				СведенияОПодписанте = СтруктураПодписантаЮЛ();
				ЗаполнитьФИО(СведенияОПодписанте, Подписант.ЮЛ.ФИО);
				
				Если ЕстьСвойство(Подписант.ЮЛ, "ГосРегИППодп") Тогда
					СведенияОПодписанте.Вставить("Свидетельство", Подписант.ЮЛ.ГосРегИППодп);
				ИначеЕсли ЕстьСвойство(Подписант.ЮЛ, "ГосРегИПВыдДов") Тогда
					СведенияОПодписанте.Вставить("Свидетельство", Подписант.ЮЛ.ГосРегИПВыдДов);
				КонецЕсли;
				
				СведенияОПодписанте.Вставить("ИНН", Подписант.ЮЛ.ИННЮЛ);
				Если Подписант.ЮЛ.Свойства().Получить("НаимОрг")<>Неопределено Тогда
					СведенияОПодписанте.Вставить("Наименование", Подписант.ЮЛ.НаимОрг);
				Конецесли;
				СведенияОПодписанте.Вставить("Должность", Подписант.ЮЛ.Должн);
				
				Если ЕстьСвойство(Подписант.ЮЛ, "ИныеСвед") Тогда
					СведенияОПодписанте.Вставить("ИныеСведения", Подписант.ЮЛ.ИныеСвед);
				КонецЕсли;
				ПодписантСтруктура.СведенияОПодписанте = СведенияОПодписанте;
				
			КонецЕсли;
			
			Подписанты.Добавить(ПодписантСтруктура);


		КонецЦикла; 
	КонецЕсли;
	Возврат Подписанты

КонецФункции

Функция ПодписантыДокументаОПередаче(ЭлементПодписанты, ПередачаУслуг = Истина)
	
	Подписанты = Новый Массив;
	
	Для Каждого Подписант Из ЭлементПодписанты Цикл
		ПодписантСтруктура = СтруктураПодписанта();
		
		ПодписантСтруктура.ОбластьПолномочий = Подписант.ОблПолн;
		ПодписантСтруктура.Статус = Подписант.Статус;
		Если ПередачаУслуг Тогда
			ПодписантСтруктура.ОснованиеПолномочий = Подписант.ОснПолнПодп;
		Иначе
			ПодписантСтруктура.ОснованиеПолномочий = Подписант.ОснПолн;
		КонецЕсли; 
		
		ПодписантСтруктура.ОснованиеПолномочийОрганизации = Подписант.ОснПолнОрг;
		
		Если Подписант.ФЛ <> Неопределено Тогда
			
			ПодписантСтруктура.ТипПодписанта = "ФЛ";
			СведенияОПодписанте = СтруктураПодписантаФЛ();
			ЗаполнитьФИО(СведенияОПодписанте, Подписант.ФЛ.ФИО);
			СведенияОПодписанте.Вставить("ИНН", Подписант.ФЛ.ИННФЛ);
			СведенияОПодписанте.Вставить("ИныеСведения", Подписант.ФЛ.ИныеСвед);
			ПодписантСтруктура.СведенияОПодписанте = СведенияОПодписанте;
			
		ИначеЕсли Подписант.ИП <> Неопределено Тогда
			
			ПодписантСтруктура.ТипПодписанта = "ИП";
			СведенияОПодписанте = СтруктураПодписантаФЛ();
			ЗаполнитьФИО(СведенияОПодписанте, Подписант.ИП.ФИО);
			СведенияОПодписанте.Вставить("Свидетельство", Подписант.ИП.СвГосРегИП);
			СведенияОПодписанте.Вставить("ИНН", Подписант.ИП.ИННФЛ);
			СведенияОПодписанте.Вставить("ИныеСведения", Подписант.ИП.ИныеСвед);
			ПодписантСтруктура.СведенияОПодписанте = СведенияОПодписанте;
			
		ИначеЕсли Подписант.ЮЛ <> Неопределено Тогда
			
			ПодписантСтруктура.ТипПодписанта = "ЮЛ";
			
			СведенияОПодписанте = СтруктураПодписантаЮЛ();
			ЗаполнитьФИО(СведенияОПодписанте, Подписант.ЮЛ.ФИО);
			СведенияОПодписанте.Вставить("ИНН", Подписант.ЮЛ.ИННЮЛ);
			Если Подписант.ЮЛ.Свойства().Получить("НаимОрг")<>Неопределено Тогда
				СведенияОПодписанте.Вставить("Наименование", Подписант.ЮЛ.НаимОрг);
			Конецесли;
			СведенияОПодписанте.Вставить("Должность", Подписант.ЮЛ.Должн);
			СведенияОПодписанте.Вставить("ИныеСведения", Подписант.ЮЛ.ИныеСвед);
			ПодписантСтруктура.СведенияОПодписанте = СведенияОПодписанте;
			
		КонецЕсли;
		
		Подписанты.Добавить(ПодписантСтруктура);
	КонецЦикла; 
	
	Возврат Подписанты

КонецФункции

Функция ПодписантыСчетаФактуры(Подписант)
	
	Подписанты = Новый Массив;
	
	ПодписантСтруктура = СтруктураПодписанта();
	
	Если Подписант.ИП <> Неопределено Тогда
		
		ПодписантСтруктура.ТипПодписанта = "ФЛ";
		СведенияОПодписанте = СтруктураПодписантаФЛ();
		ЗаполнитьФИО(СведенияОПодписанте, Подписант.ИП.ФИО);
		СведенияОПодписанте.Вставить("ИНН", Подписант.ИП.ИННФЛ);
		СведенияОПодписанте.Вставить("Свидетельство", Подписант.ИП.СвГосРегИП);
		ПодписантСтруктура.СведенияОПодписанте = СведенияОПодписанте;
		
	ИначеЕсли Подписант.ЮЛ <> Неопределено Тогда
		
		ПодписантСтруктура.ТипПодписанта = "ЮЛ";
		
		СведенияОПодписанте = СтруктураПодписантаЮЛ();
		ЗаполнитьФИО(СведенияОПодписанте, Подписант.ЮЛ.ФИО);
		СведенияОПодписанте.Вставить("ИНН", Подписант.ЮЛ.ИННЮЛ);
		СведенияОПодписанте.Вставить("Должность", Подписант.ЮЛ.Должн);
		ПодписантСтруктура.СведенияОПодписанте = СведенияОПодписанте;
		
	КонецЕсли;
	
	Подписанты.Добавить(ПодписантСтруктура);
	
	Возврат Подписанты;
	
КонецФункции
 
Функция СведенияОСчетеФактуре(Элемент)
	
	СведенияОСчетеФактуре = Новый Структура;
	СведенияОСчетеФактуре.Вставить("Номер", Элемент.НомерСчФ);
	СведенияОСчетеФактуре.Вставить("Дата", ДатаИзСтрокиЭД(Элемент.ДатаСчФ));
	
	Если Элемент.Свойства().Получить("ИспрСчФ")<>Неопределено тогда
		ИспрСчФ = Элемент.ИспрСчФ;
		Если ИспрСчФ <> Неопределено Тогда
			СУчетомИсправленияСчетовФактур = Новый Массив;
			
			Если ТипЗнч(ИспрСчФ) = Тип("СписокXDTO") Тогда
				Для Каждого ИсправленныйСчетФактура Из Элемент.ИспрСчФ Цикл
					СведенияОСчетеФактуреСУчетомИсправления = Новый Структура;
					СведенияОСчетеФактуреСУчетомИсправления.Вставить("Номер", ИсправленныйСчетФактура.НомИспрСчФ);
					СведенияОСчетеФактуреСУчетомИсправления.Вставить("Дата", ДатаИзСтрокиЭД(ИсправленныйСчетФактура.ДатаИспрСчФ));
					СУчетомИсправленияСчетовФактур.Добавить(СведенияОСчетеФактуреСУчетомИсправления);
				КонецЦикла; 
			Иначе
				СведенияОСчетеФактуреСУчетомИсправления = Новый Структура;
				СведенияОСчетеФактуреСУчетомИсправления.Вставить("Номер", ИспрСчФ.НомИспрСчФ);
				СведенияОСчетеФактуреСУчетомИсправления.Вставить("Дата", ДатаИзСтрокиЭД(ИспрСчФ.ДатаИспрСчФ));
				СУчетомИсправленияСчетовФактур.Добавить(СведенияОСчетеФактуреСУчетомИсправления);
			КонецЕсли;
			СведенияОСчетеФактуре.Вставить("СУчетомИсправленияСчетовФактур", СУчетомИсправленияСчетовФактур);
		КонецЕсли;
	Конецесли;
	Возврат СведенияОСчетеФактуре;
	
КонецФункции

Функция ПолучитьПредставлениеФИО(ФиоXDTO)
	
	Представление = ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 %2 %3'", "ru"), 
						ФиоXDTO.Фамилия,
						ФиоXDTO.Имя,
						?(ЕстьСвойство(ФиоXDTO, "Отчество"), ФиоXDTO.Отчество, ""));
						
	Возврат СокрЛП(Представление);
	
КонецФункции

Процедура ЗаполнитьИсправленныеСчетаФактуры(Элемент, РеквизитыДокумента)
	
	Если Элемент <> Неопределено Тогда
		ИсправленныеСчетаФактуры = Новый Массив;
		Если ТипЗнч(Элемент) = Тип("СписокXDTO") Тогда
			Для Каждого ТекущийСчетФактура Из Элемент Цикл
				ИсправленныеСчетаФактуры.Добавить(СведенияОСчетеФактуре(ТекущийСчетФактура));
			КонецЦикла; 
		Иначе
			ИсправленныеСчетаФактуры.Добавить(СведенияОСчетеФактуре(Элемент));
		КонецЕсли; 
		РеквизитыДокумента.Вставить("ИсправленныеСчетаФактуры", ИсправленныеСчетаФактуры);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбУчастникахЭДО(ЭлементСведения, РеквизитыДокумента)
	
	Если ЭлементСведения <> Неопределено Тогда
		Структура = Новый Структура;
		Структура.Вставить("ИдентификаторОтправителя", ЭлементСведения.ИдОтпр);
		
		Если ЭлементСведения.Свойства().Получить("ИдПол") <> Неопределено Тогда
			Структура.Вставить("ИдентификаторПолучателя", ЭлементСведения.ИдПол);
		Иначе
			Структура.Вставить("ИдентификаторПолучателя", ЭлементСведения.ИдПок);
		КонецЕсли; 
		
		Если ЭлементСведения.Свойства().Получить("СвОЭДОтпр") <> Неопределено Тогда
			Если ЭлементСведения.СвОЭДОтпр <> Неопределено Тогда
				СтруктураОператор = Новый Структура;
				СтруктураОператор.Вставить("Наименование", ЭлементСведения.СвОЭДОтпр.НаимОрг);
				СтруктураОператор.Вставить("ИНН", ЭлементСведения.СвОЭДОтпр.ИННЮЛ);
				СтруктураОператор.Вставить("Идентификатор", ЭлементСведения.СвОЭДОтпр.ИдЭДО);
				Структура.Вставить("ОператорЭДО", СтруктураОператор);
			КонецЕсли; 
		Иначе
			Если ЭлементСведения.Свойства().Получить("СвОЭДОтпрСФ") <> Неопределено Тогда
				СтруктураОператор = Новый Структура;
				СтруктураОператор.Вставить("Наименование", ЭлементСведения.СвОЭДОтпрСФ.НаимОрг);
				СтруктураОператор.Вставить("ИНН", ЭлементСведения.СвОЭДОтпрСФ.ИННЮЛ);
				СтруктураОператор.Вставить("Идентификатор", ЭлементСведения.СвОЭДОтпрСФ.ИдЭДОСФ);
				Структура.Вставить("ОператорЭДО", СтруктураОператор);
			КонецЕсли; 
			РеквизитыДокумента.Вставить("СведенияОбУчастникахЭДО", Структура);
		КонецЕсли; 
		РеквизитыДокумента.Вставить("СведенияОбУчастникахЭДО", Структура);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеСведенияОбУчастниках(ЭлементСведения, РеквизитыДокумента)
	
	Если ЭлементСведения <> Неопределено Тогда
		ЗаполнитьСвойство(РеквизитыДокумента, "ИдентификаторГосударственногоКонтракта", ЭлементСведения, "ИдГосКон");
		ЗаполнитьСвойство(РеквизитыДокумента, "НаименованиеВалюты", ЭлементСведения, "НаимОКВ");
		ЗаполнитьСвойство(РеквизитыДокумента, "КурсВалюты", ЭлементСведения, "КурсВал");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформационноеПолеФактаХозяйственнойЖизни(ЭлементПоля, РеквизитыДокумента)
	
	Если ЭлементПоля <> Неопределено Тогда
			Массив = Новый Массив;
		ЗаполнитьСвойство(РеквизитыДокумента, "ИдентификаторФайлаИнформационногоПоля", ЭлементПоля, "ИдФайлИнфПол");
		Если ЭлементПоля.Свойства().Получить("ТекстИнф")<>Неопределено Тогда 
			Если ТипЗнч(ЭлементПоля.ТекстИнф) = Тип("СписокXDTO") И ЭлементПоля.ТекстИнф.Количество() > 0 Тогда
				Для Каждого ТекущаяСтрока Из ЭлементПоля.ТекстИнф Цикл
					Массив.Добавить(Новый Структура("Идентификатор, Значение", 
						ТекущаяСтрока.Идентиф, ТекущаяСтрока.Значен));
					Если ТекущаяСтрока.Идентиф = "ТолькоУслуги" И НРег(ТекущаяСтрока.Значен) = "true" Тогда
						РеквизитыДокумента.Вставить("ТолькоУслуги", Истина);
					КонецЕсли;
				КонецЦикла;
				РеквизитыДокумента.Вставить("ТекстоваяИнформация", Массив);
			Иначе
				ТекущаяСтрока=ЭлементПоля.ТекстИнф;
					Массив.Добавить(Новый Структура("Идентификатор, Значение", 
						ТекущаяСтрока.Идентиф, ТекущаяСтрока.Значен));
					Если ТекущаяСтрока.Идентиф = "ТолькоУслуги" И НРег(ТекущаяСтрока.Значен) = "true" Тогда
						РеквизитыДокумента.Вставить("ТолькоУслуги", Истина);
					КонецЕсли;
				
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураРеквизитовДокумента()
	
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("ВидДокумента", "Документ");
	РеквизитыДокумента.Вставить("НаименованиеДокумента", "Документ");
	РеквизитыДокумента.Вставить("НаименованиеПервичногоДокумента", "");
	РеквизитыДокумента.Вставить("ФорматДокумента", 
		Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД"));
	РеквизитыДокумента.Вставить("Номер");
	РеквизитыДокумента.Вставить("Дата");
	РеквизитыДокумента.Вставить("Продавец"); //Структура
	РеквизитыДокумента.Вставить("Покупатель"); //Структура
	РеквизитыДокумента.Вставить("КодВалюты");
	РеквизитыДокумента.Вставить("СуммаДокумента");
	РеквизитыДокумента.Вставить("СуммаНДСДокумента");
	РеквизитыДокумента.Вставить("СведенияОТоварахУслугах"); // Массив
	РеквизитыДокумента.Вставить("Основания"); // Массив
	РеквизитыДокумента.Вставить("Подписанты"); // Массив
	РеквизитыДокумента.Вставить("СоставительДокумента");	
	Возврат РеквизитыДокумента
	
КонецФункции

Функция СтруктураРеквизитовТитула()
	
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("ВидДокумента", "ОтветныйТитул");
	РеквизитыДокумента.Вставить("ФорматДокумента", 
		Новый Структура("Идентификатор, Версия, ВерсияПрограммы, КодПоКНД"));
	РеквизитыДокумента.Вставить("Дата");
	
	РеквизитыДокумента.Вставить("ИдентификаторФайлаПродавца");
	РеквизитыДокумента.Вставить("НомерФайлаПродавца");
	РеквизитыДокумента.Вставить("ДатаФайлаПродавца");
	РеквизитыДокумента.Вставить("СоставительДокумента");	
	РеквизитыДокумента.Вставить("Подписанты");
	РеквизитыДокумента.Вставить("СведенияПринимающейСтороны", 
		Новый Структура("ДатаПолучения, Фамилия, Имя, Отчество, Должность, ОснованиеПолномочий"));
		
	Возврат РеквизитыДокумента
	
КонецФункции

Функция СтруктураУчастникаКарточкиТХЦ()
	
	СтруктураУчастника = Новый Структура;
	СтруктураУчастника.Вставить("АбонентИдентификатор");
	СтруктураУчастника.Вставить("АбонентНаименование");
	СтруктураУчастника.Вставить("АбонентИНН");
	СтруктураУчастника.Вставить("АбонентКПП");
	СтруктураУчастника.Вставить("АбонентНомерДоговора");
	СтруктураУчастника.Вставить("ОрганизацияНаименование");
	СтруктураУчастника.Вставить("ОрганизацияТип");

	Возврат СтруктураУчастника;
	
КонецФункции

Функция СтруктураРеквизитовКарточкиДокументаТХЦ()
		
	СтруктураПодписанта = Новый Структура;
	СтруктураПодписанта.Вставить("Имя");
	СтруктураПодписанта.Вставить("Фамилия");
	СтруктураПодписанта.Вставить("Отчество");
	СтруктураПодписанта.Вставить("ИНН");
	СтруктураПодписанта.Вставить("ОтпечатокСертификата");
	СтруктураПодписанта.Вставить("СерийныйНомер");
	
	СтруктураИдентификаторы = Новый Структура;
	СтруктураИдентификаторы.Вставить("ExternalDocumentGroupIdentifier");
	СтруктураИдентификаторы.Вставить("ExternalIdentifier");
	СтруктураИдентификаторы.Вставить("InternalDocumentGroupId");
	СтруктураИдентификаторы.Вставить("InternalId");
	СтруктураИдентификаторы.Вставить("ParentDocumentExternalIdentifier");
	СтруктураИдентификаторы.Вставить("ParentDocumentInternalId");
	
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("ВидДокумента", "КарточкаТХЦ");
	РеквизитыДокумента.Вставить("Отправитель", СтруктураУчастникаКарточкиТХЦ());
	РеквизитыДокумента.Вставить("Получатель", СтруктураУчастникаКарточкиТХЦ());
	РеквизитыДокумента.Вставить("Заголовок");
	РеквизитыДокумента.Вставить("ТипДокумента");
	РеквизитыДокумента.Вставить("ЗапрошенаОтветнаяПодпись", Ложь);
	РеквизитыДокумента.Вставить("Дата");
	РеквизитыДокумента.Вставить("Комментарий");
	РеквизитыДокумента.Вставить("ИмяФайла");
	РеквизитыДокумента.Вставить("ПутьКФайлу");
	РеквизитыДокумента.Вставить("ДополнительныеСведения");
	РеквизитыДокумента.Вставить("Подписант", СтруктураПодписанта);
	РеквизитыДокумента.Вставить("Идентификаторы", СтруктураИдентификаторы);
	
	Возврат РеквизитыДокумента
	
КонецФункции

Функция СтруктураСтрокиТоваровУслуг()
	
	СведенияОТовареУслуге = Новый Структура;
	СведенияОТовареУслуге.Вставить("НомерСтроки");
	СведенияОТовареУслуге.Вставить("Наименование", "");
	СведенияОТовареУслуге.Вставить("ХарактеристикаТовара", "");
	СведенияОТовареУслуге.Вставить("ОКЕИ", "");
	СведенияОТовареУслуге.Вставить("Количество");
	СведенияОТовареУслуге.Вставить("Цена");
	СведенияОТовареУслуге.Вставить("СуммаБезНДС");
	СведенияОТовареУслуге.Вставить("СтавкаНДС");
	СведенияОТовареУслуге.Вставить("СуммаНДС");
	СведенияОТовареУслуге.Вставить("Сумма");
	
	Возврат СведенияОТовареУслуге
	
КонецФункции

Функция СтруктураСтрокиТоваровКорректировочногоДокумента()
	
	СведенияОТовареУслуге = СтруктураСтрокиТоваровУслуг();
	
	СведенияОТовареУслуге.Вставить("ОКЕИДоКорректировки");
	СведенияОТовареУслуге.Вставить("КоличествоДоКорректировки");
	СведенияОТовареУслуге.Вставить("ЦенаДоКорректировки");
	СведенияОТовареУслуге.Вставить("СтавкаНДСДоКорректировки");
	СведенияОТовареУслуге.Вставить("СуммаНДСДоКорректировки", 0);
	
	СведенияОТовареУслуге.Вставить("СуммаНДСУвеличение", 0);
	СведенияОТовареУслуге.Вставить("СуммаНДСУменьшение", 0);
	
	СведенияОТовареУслуге.Вставить("СуммаБезНДСДоКорректировки", 0);
	СведенияОТовареУслуге.Вставить("СуммаБезНДСУвеличение", 0);
	СведенияОТовареУслуге.Вставить("СуммаБезНДСУменьшение", 0);
	
	СведенияОТовареУслуге.Вставить("АкцизДоКорректировки");
	СведенияОТовареУслуге.Вставить("Акциз");
	СведенияОТовареУслуге.Вставить("АкцизУвеличение");
	СведенияОТовареУслуге.Вставить("АкцизУменьшение");
	
	СведенияОТовареУслуге.Вставить("СуммаДоКорректировки", 0);
	СведенияОТовареУслуге.Вставить("СуммаУвеличение", 0);
	СведенияОТовареУслуге.Вставить("СуммаУменьшение", 0);

	Возврат СведенияОТовареУслуге
	
КонецФункции

Функция СтруктураОснования()
	
	Структура = Новый Структура;
	Структура.Вставить("Наименование");
	Структура.Вставить("Номер");
	Структура.Вставить("Дата");
	Структура.Вставить("ДополнительныеСведения");
	Возврат  Структура;
	
КонецФункции

Функция СтруктураПодписанта()
	
	Структура = Новый Структура;
	Структура.Вставить("ОбластьПолномочий");
	Структура.Вставить("Статус");
	Структура.Вставить("ОснованиеПолномочий");
	Структура.Вставить("ОснованиеПолномочийОрганизации");
	Структура.Вставить("ТипПодписанта"); // "ФЛ", "ИП", "ЮЛ"
	Структура.Вставить("СведенияОПодписанте");
	Возврат Структура;
	
КонецФункции

Функция СтруктураПодписантаФЛ()

	Структура = Новый Структура;
	Структура.Вставить("Фамилия");
	Структура.Вставить("Имя");
	Структура.Вставить("Отчество");
	Структура.Вставить("Свидетельство");
	Структура.Вставить("ИНН");
	Структура.Вставить("ИныеСведения");
	Возврат Структура;

КонецФункции

Функция СтруктураПодписантаЮЛ()

	Структура = Новый Структура;
	Структура.Вставить("Фамилия");
	Структура.Вставить("Имя");
	Структура.Вставить("Отчество");
	Структура.Вставить("Свидетельство");
	Структура.Вставить("ИНН");
	Структура.Вставить("Наименование");
	Структура.Вставить("Должность");
	Структура.Вставить("ИныеСведения");
	Возврат Структура;

КонецФункции

Функция СтруктураБанковскихРеквизитов()
	
	Структура = Новый Структура;
	Структура.Вставить("НомерСчета");
	Структура.Вставить("НаименованиеБанка");
	Структура.Вставить("БИКБанка");
	Структура.Вставить("КорреспондентскийСчетБанка");

	Возврат Структура;
	
КонецФункции

Функция СтруктураУчастника()
	
	Структура = Новый Структура;
	Структура.Вставить("ВидКонтрагента"); // "ИП", "ЮЛ", "ИЛ"
	Структура.Вставить("НаименованиеКонтрагента");
	Структура.Вставить("ОКПО");
	Структура.Вставить("СтруктурноеПодразделение");
	Структура.Вставить("ИнформацияДляУчастникаДокументооборота");
	Структура.Вставить("СведенияОбАдресе", Новый Структура("ВидАдреса, Адрес")); // "АдрРФ", "АдрИнф", "КодГАР"
	Структура.Вставить("Телефон");
	Структура.Вставить("ЭлектроннаяПочта");
	Структура.Вставить("БанковскиеРеквизиты", СтруктураБанковскихРеквизитов());
	Структура.Вставить("РеквизитыКонтрагента", Новый Структура("ИНН, КПП"));
	
	Возврат Структура;
	
КонецФункции

Функция СтруктураУчастникаФЛ()
	
	Структура = Новый Структура;
	Структура.Вставить("Фамилия");
	Структура.Вставить("Имя");
	Структура.Вставить("Отчество");
	Структура.Вставить("Свидетельство");
	Структура.Вставить("ИНН");
	Структура.Вставить("ИныеСведения");
	Возврат Структура;
	
КонецФункции

Функция СтруктураУчастникаЮЛ()
	
	Структура = Новый Структура;
	Структура.Вставить("ИНН");
	Структура.Вставить("КПП");
	Структура.Вставить("ИныеСведения");
	Возврат Структура;
	
КонецФункции

Функция СтруктураУчастникаИЛ()
	
	Структура = Новый Структура;
	Структура.Вставить("ИныеСведения");
	Структура.Вставить("Страна");
	Возврат Структура;
	
КонецФункции

Функция СтруктураУведомленияОПолучении()
	        
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("ВремяПолучения");
	РеквизитыДокумента.Вставить("ДатаПолучения");
	РеквизитыДокумента.Вставить("ИдентификаторОтправителя");
	РеквизитыДокумента.Вставить("ИдентификаторПолучателя");
	РеквизитыДокумента.Вставить("ИмяФайла");
	РеквизитыДокумента.Вставить("Отправитель");
	РеквизитыДокумента.Вставить("Подписант");
	РеквизитыДокумента.Вставить("Получатель");
	РеквизитыДокумента.Вставить("ФорматДокумента");
	
	Возврат РеквизитыДокумента
	
КонецФункции

Функция СтруктураУведомленияОбУточнении()
	
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("Отправитель");
	РеквизитыДокумента.Вставить("ИдентификаторОтправителя");
	РеквизитыДокумента.Вставить("ДатаОтправления");
	РеквизитыДокумента.Вставить("ВремяОтправления");
	РеквизитыДокумента.Вставить("НаименованиеДокумента");
	РеквизитыДокумента.Вставить("ИмяФайла");
	РеквизитыДокумента.Вставить("Получатель");
	РеквизитыДокумента.Вставить("ИдентификаторПолучателя");
	РеквизитыДокумента.Вставить("ТекстУведомления");
	РеквизитыДокумента.Вставить("Подписант");
	РеквизитыДокумента.Вставить("ФорматДокумента");
	
	Возврат РеквизитыДокумента;
	
КонецФункции

Функция СтруктураПотвержденияОБАннулировании()
				
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("ОтправительПОА");
	РеквизитыДокумента.Вставить("ПолучательПОА");
	РеквизитыДокумента.Вставить("ИдентификаторОтправителяПОА");
	РеквизитыДокумента.Вставить("ИдентификаторПолучателяПОА");
	РеквизитыДокумента.Вставить("ТекстПОА");
	РеквизитыДокумента.Вставить("ИмяФайла");
	РеквизитыДокумента.Вставить("Подписант");
	РеквизитыДокумента.Вставить("ПредставлениеЭП");
	РеквизитыДокумента.Вставить("ФорматДокумента");
	
	Возврат РеквизитыДокумента;
	
КонецФункции

Функция СтруктураКвитанцииМОТП()
				
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("НаименованиеПрограммногоКомплекса");
	РеквизитыДокумента.Вставить("ВремяОтпр");
	РеквизитыДокумента.Вставить("ДатаОтпр");
	РеквизитыДокумента.Вставить("ИмяФайла1");
	РеквизитыДокумента.Вставить("ИмяФайла2");
	РеквизитыДокумента.Вставить("ИдентификаторФайлаДоклайнз");
	РеквизитыДокумента.Вставить("СписокОшибок");
	РеквизитыДокумента.Вставить("ФорматДокумента");
	
	Возврат РеквизитыДокумента;
	
КонецФункции


Функция СоздатьНайтиПр_УПД(Знач ШтрихКод,Стр_ыЗ,КодСтраны) Экспорт
	
	ПерезаписыватьПроудкцию=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ПриЗагрузкеИзЭДООбновлятьНазваниеПродукции;
	Если СтрДлина(Штрихкод)>=2
		
		Тогда
		
		Попытка
			Если Сред(ШтрихКод,1,2)="01" Тогда	
				ШтрихКод=Сред(ШтрихКод,3);
			КонецЕсли;
			СпрПр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(Сред(ШтрихКод,1,14)));
			
		Исключение
			
			   	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	Продукция_ХамелеонЦРПТ.Ссылка
					|ИЗ
					|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
					|ГДЕ
					|	Продукция_ХамелеонЦРПТ.Наименование = &Наименование
					|	И (Продукция_ХамелеонЦРПТ.СтранаПроизводства.Код = &Код ИЛИ &Код="""")";
				
				Запрос.УстановитьПараметр("Код", КодСтраны);
				Запрос.УстановитьПараметр("Наименование", Стр_ыЗ.Наименование);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					Возврат ВыборкаДетальныеЗаписи.Ссылка;
				КонецЦикла;
				
					СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
					НаименованиеЕдиницыИзмерения="";
					Если Стр_ыЗ.Свойство("НаименованиеЕдиницыИзмерения",НаименованиеЕдиницыИзмерения) тогда
						ЕдИзм=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоНаименованию(НаименованиеЕдиницыИзмерения);
						Если Не ЗначениеЗаполнено(ЕдИзм) тогда
							Ед=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
							Ед.Код=Стр_ыЗ.ОКЕИ;
							Ед.Наименование=НаименованиеЕдиницыИзмерения;
							Ед.Записать();
							ЕдИзМ=Ед.ссылка;
							
						КонецЕсли;
					Иначе
						ЕдИзм=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.ПустаяСсылка();
					КонецЕсли;
					Если ЗначениеЗаполнено(КодСтраны) Тогда
						СпрПр.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду(КодСтраны);
					КонецЕсли;
					СпрПр.ЕдиницаИзмерения_УПД=ЕдИзм.Ссылка;
					СпрПр.Наименование=Стр_ыЗ.Наименование;
					СпрПр.НаименованиеТовара=Стр_ыЗ.Наименование;
					СпрПр.Записать();
					Возврат СпрПр.Ссылка;
	
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

			
			//Возврат Неопределено;
		КонецПопытки;
		СоздатьСпр=Истина;
		Если ЗначениеЗаполнено(СпрПр) И (Не ЗначениеЗАполнено(КодСтраны) 
			ИЛИ КодСтраны=СпрПр.СтранаПроизводства.Код)
			тогда
			Если ПерезаписыватьПроудкцию=Истина Тогда
				СоздатьСпр=ложь;
			Иначе

				Возврат СпрПр;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СпрПр) Тогда
			СпрПр=СпрПр.ПолучитьОбъект();
			СпрПр.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду(КодСтраны);
			СпрПр.Записать();
			Если ПерезаписыватьПроудкцию=Истина Тогда
				СоздатьСпр=ложь;
			Иначе
				Возврат СпрПр.Ссылка;
			Конецесли;
		КонецЕсли;
		Если СоздатьСпр Тогда
			СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
		Иначе
			СпрПр=СпрПр.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
		СпрПр.GTIN=Сред(ШтрихКод,1,14);
		
		НаименованиеЕдиницыИзмерения="";
		Если Стр_ыЗ.Свойство("НаименованиеЕдиницыИзмерения",НаименованиеЕдиницыИзмерения) тогда
			ЕдИзм=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоНаименованию(НаименованиеЕдиницыИзмерения);
			Если Не ЗначениеЗаполнено(ЕдИзм) тогда
				Ед=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
				Ед.Код=Стр_ыЗ.ОКЕИ;
				Ед.Наименование=НаименованиеЕдиницыИзмерения;
				Ед.Записать();
				ЕдИзМ=Ед.ссылка;
				
			КонецЕсли;
		Иначе
			ЕдИзм=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.ПустаяСсылка();
		КонецЕсли;
		Если ЗначениеЗаполнено(КодСтраны) Тогда
			СпрПр.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду(КодСтраны);
		КонецЕсли;
		СпрПр.ЕдиницаИзмерения_УПД=ЕдИзм.Ссылка;
		СпрПр.Наименование=Стр_ыЗ.Наименование;
		СпрПр.НаименованиеТовара=Стр_ыЗ.Наименование;
		СпрПр.Записать();
		Возврат СпрПр.Ссылка;
		
	КонецЕсли;
	
	
		
			   	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	Продукция_ХамелеонЦРПТ.Ссылка
					|ИЗ
					|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
					|ГДЕ
					|	Продукция_ХамелеонЦРПТ.Наименование = &Наименование
					|	И (Продукция_ХамелеонЦРПТ.СтранаПроизводства.Код = &Код ИЛИ &Код="""")";
				
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
						Запрос.УстановитьПараметр("Код", КодСтраны);
				Запрос.УстановитьПараметр("Наименование", Стр_ыЗ.Наименование);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					Возврат ВыборкаДетальныеЗаписи.Ссылка;
				КонецЦикла;
				
					СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
					
		НаименованиеЕдиницыИзмерения="";
		Если Стр_ыЗ.Свойство("НаименованиеЕдиницыИзмерения",НаименованиеЕдиницыИзмерения) тогда
					ЕдИзм=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоНаименованию(НаименованиеЕдиницыИзмерения);
					Если Не ЗначениеЗаполнено(ЕдИзм) тогда
						Ед=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
						Ед.Код=Стр_ыЗ.ОКЕИ;
						Ед.Наименование=НаименованиеЕдиницыИзмерения;
						Ед.Записать();
						ЕдИзМ=Ед.ссылка;
						
					КонецЕсли;
				Иначе
					ЕдИзм=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.ПустаяСсылка();
				КонецЕсли;
					Если ЗначениеЗаполнено(КодСтраны) Тогда
						СпрПр.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду(КодСтраны);
					КонецЕсли;
					СпрПр.ЕдиницаИзмерения_УПД=ЕдИзм.Ссылка;
					СпрПр.Наименование=Стр_ыЗ.Наименование;
					СпрПр.НаименованиеТовара=Стр_ыЗ.Наименование;
					СпрПр.Записать();
					Возврат СпрПр.Ссылка;
	
	
	//Возврат Неопределено
Конецфункции

Функция СоздатьНайтиКонтрагента_Приемка_УПД(ЗЗ) Экспорт
	ИНН=ЗЗ.Продавец.РеквизитыКонтрагента.ИНН;
	КПП="";
	ЗЗ.Продавец.РеквизитыКонтрагента.Свойство("КПП",КПП);
	
	Если не ЗначениеЗаполнено(КПП) Тогда
		КПП="";
	КонецЕсли;	

	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ КАК ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ
		|ГДЕ
		|	ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.ИНН = &ИНН
		|	И ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.КПП = &КПП
		|	И НЕ ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СпрК=Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		СпрК=ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	Если ЗначениеЗАполнено(СпрК) И СпрК.Ид_ЭДО_ЦРПТ=ЗЗ.СведенияОбУчастникахЭДО.ИдентификаторОтправителя тогда
		Возврат СпрК.Ссылка;
	ИначеЕсли ЗначениеЗаполнено(СпрК) Тогда
		СпрК=СпрК.ПолучитьОбъект();
	Иначе
		СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрК.Наименование=ЗЗ.Продавец.НаименованиеКонтрагента;
	КонецЕсли;
	СпрК.ИНН=ЗЗ.Продавец.РеквизитыКонтрагента.ИНН;
	СпрК.КПП=КПП;
	СпрК.Ид_ЭДО_ЦРПТ=ЗЗ.СведенияОбУчастникахЭДО.ИдентификаторОтправителя;
	СпрК.Записать();
	Возврат СпрК.Ссылка
КонецФункции


Функция СоздатьНайтиКонтрагента_Приемка_УПД_Перевозчик(ЗЗ) Экспорт
	ИНН=ЗЗ.Перевозчик.РеквизитыКонтрагента.ИНН;
	КПП="";
	ЗЗ.Перевозчик.РеквизитыКонтрагента.Свойство("КПП",КПП);
	
	Если Не ЗначениеЗаполнено(КПП) Тогда
		КПП="";
	КонецЕслИ;
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ КАК ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ
		|ГДЕ
		|	ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.ИНН = &ИНН
		|	И ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.КПП = &КПП
		|	И НЕ ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СпрК=Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		СпрК=ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	Если ЗначениеЗАполнено(СпрК) 
		//И СпрК.Ид_ЭДО_ЦРПТ=ЗЗ.СведенияОбУчастникахЭДО.ИдентификаторОтправителя 
		тогда
		Возврат СпрК.Ссылка;
	ИначеЕсли ЗначениеЗаполнено(СпрК) Тогда
		СпрК=СпрК.ПолучитьОбъект();
	Иначе
		СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрК.Наименование=ЗЗ.Перевозчик.НаименованиеКонтрагента;
	КонецЕсли;
	СпрК.ИНН=ЗЗ.Перевозчик.РеквизитыКонтрагента.ИНН;
	СпрК.КПП=КПП;
	//СпрК.Ид_ЭДО_ЦРПТ=ЗЗ.СведенияОбУчастникахЭДО.ИдентификаторОтправителя;
	СпрК.Записать();
	Возврат СпрК.Ссылка
	
	//СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",
	//ЗЗ.Продавец.РеквизитыКонтрагента.ИНН);
	//Если ЗначениеЗАполнено(СпрК) И СпрК.Ид_ЭДО_ЦРПТ=ЗЗ.СведенияОбУчастникахЭДО.ИдентификаторОтправителя тогда
	//	Возврат СпрК.Ссылка;
	//	//СпрК=СпрК.ПолучитьОбъект();
	//ИначеЕсли ЗначениеЗаполнено(СпрК) Тогда
	//	СпрК=СпрК.ПолучитьОбъект();
	//Иначе
	//	СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
	//	СпрК.Наименование=ЗЗ.Продавец.НаименованиеКонтрагента;
	//КонецЕсли;
	//СпрК.ИНН=ЗЗ.Продавец.РеквизитыКонтрагента.ИНН;
	//СпрК.Ид_ЭДО_ЦРПТ=ЗЗ.СведенияОбУчастникахЭДО.ИдентификаторОтправителя;
	//СпрК.Записать();
	//Возврат СпрК.Ссылка
КонецФункции


Функция СоздатьНайтиКонтрагента_Приемка_УПД_Гр(ЗЗ,Поставщик) Экспорт
	ИНН=ЗЗ.Грузоотправитель.РеквизитыКонтрагента.ИНН;
	КПП="";
	ЗЗ.Грузоотправитель.РеквизитыКонтрагента.Свойство("КПП",КПП);
	
	Если Не ЗначениеЗаполненО(ИНН) тогда
		Возврат Поставщик;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КПП) Тогда
		КПП="";
	КонецЕслИ;


	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ КАК ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ
		|ГДЕ
		|	ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.ИНН = &ИНН
		|	И ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.КПП = &КПП
		|	И НЕ ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СпрК=Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		СпрК=ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	Если ЗначениеЗАполнено(СпрК) 
		//И СпрК.Ид_ЭДО_ЦРПТ=ЗЗ.СведенияОбУчастникахЭДО.ИдентификаторОтправителя 
		тогда
		Возврат СпрК.Ссылка;
	ИначеЕсли ЗначениеЗаполнено(СпрК) Тогда
		СпрК=СпрК.ПолучитьОбъект();
	Иначе
		СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрК.Наименование=ЗЗ.Грузоотправитель.НаименованиеКонтрагента;
	КонецЕсли;
	СпрК.ИНН=ЗЗ.Грузоотправитель.РеквизитыКонтрагента.ИНН;
	СпрК.КПП=КПП;
	//СпрК.Ид_ЭДО_ЦРПТ=ЗЗ.СведенияОбУчастникахЭДО.ИдентификаторОтправителя;
	СпрК.Записать();
	Возврат СпрК.Ссылка
	
	//СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",
	//ЗЗ.Продавец.РеквизитыКонтрагента.ИНН);
	//Если ЗначениеЗАполнено(СпрК) И СпрК.Ид_ЭДО_ЦРПТ=ЗЗ.СведенияОбУчастникахЭДО.ИдентификаторОтправителя тогда
	//	Возврат СпрК.Ссылка;
	//	//СпрК=СпрК.ПолучитьОбъект();
	//ИначеЕсли ЗначениеЗаполнено(СпрК) Тогда
	//	СпрК=СпрК.ПолучитьОбъект();
	//Иначе
	//	СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
	//	СпрК.Наименование=ЗЗ.Продавец.НаименованиеКонтрагента;
	//КонецЕсли;
	//СпрК.ИНН=ЗЗ.Продавец.РеквизитыКонтрагента.ИНН;
	//СпрК.Ид_ЭДО_ЦРПТ=ЗЗ.СведенияОбУчастникахЭДО.ИдентификаторОтправителя;
	//СпрК.Записать();
	//Возврат СпрК.Ссылка
КонецФункции


Функция СоздатьНайтиКонтрагента_Приемка_УПД_Грузополучатель(ЗЗ,Адрес) Экспорт
	ИНН=ЗЗ.Грузополучатель.РеквизитыКонтрагента.ИНН;
	КПП="";
	ЗЗ.Грузополучатель.РеквизитыКонтрагента.Свойство("КПП",КПП);
	
//	Если Не ЗначениеЗаполненО(ИНН) тогда
//		Возврат Поставщик;
//	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КПП) Тогда
		КПП="";
	КонецЕслИ;


	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ КАК ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ
		|ГДЕ
		|	ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.ИНН = &ИНН
		|	И ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.КПП = &КПП
		|	И НЕ ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.ПометкаУдаления";
	
	Если Не ЗначениеЗаполнено(ИНН) тогда
		Запрос.Текст=Запрос.Текст+"
		|И ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.Наименование=&Наименование";
		Запрос.УстановитьПараметр("Наименование", ЗЗ.Грузополучатель.НаименованиеКонтрагента);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СпрК=Неопределено;
	
	
	АдресТекст="";
	Адрес.Свойство("АдресТекст",АдресТекст);
	
	Индекс="";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		
		Если Не ЗначениеЗаполнено(КПП) Тогда
			Если ЗначениеЗаполнено(АдресТекст) Тогда
				
				Если ВыборкаДетальныеЗаписи.Ссылка.ФактическийАдрес<>АдресТекст Тогда
					Продолжить;
				Конецесли;
				
			ИначеЕсли Адрес.Свойство("Индекс",Индекс) Тогда
				
				АдресИз1с=РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("Объект,ТИП",
				ВыборкаДетальныеЗаписи.Ссылка,Перечисления.ТипАдреса_ХамелеонЦРПТ.Фактический));
				
				Если АдресИз1с.Индекс<>Адрес.Индекс Тогда
					Продолжить;
				Конецесли;
				
				
			//	Если АдресИз1с.Индекс<>Адрес.Индекс Тогда
			//		Продолжить;
			//	Конецесли;
				
				Если АдресИз1с.КодРегиона<>Адрес.КодРегиона Тогда
					Продолжить;
				Конецесли;
				Если АдресИз1с.Район<>Адрес.Район Тогда
					Продолжить;
				Конецесли;
				Если АдресИз1с.Город<>Адрес.Город Тогда
					Продолжить;
				Конецесли;
				Если АдресИз1с.НаселенныйПункт<>Адрес.НаселенныйПункт Тогда
					Продолжить;
				Конецесли;
				Если АдресИз1с.Улица<>Адрес.Улица Тогда
					Продолжить;
				Конецесли;
				
				Если АдресИз1с.Дом<>Адрес.Дом Тогда
					Продолжить;
				Конецесли;
				Если АдресИз1с.Корпус<>Адрес.Корпус Тогда
					Продолжить;
				Конецесли;
				Если АдресИз1с.Квартира<>Адрес.Квартира Тогда
					Продолжить;
				Конецесли;
				
			Конецесли;
		КонецЕсли;
		
		СпрК=ВыборкаДетальныеЗаписи.Ссылка;
		
		Если Не ЗначениеЗаполнено(СпрК.ФактическийАдрес) 
			И Адрес.Свойство("Индекс",Индекс) Тогда
			
			СпрК=СпрК.ПолучитьОбъект();
			СпрК.ФактическийАдрес=Адрес.Индекс+", "+Адрес.КодРегиона+", "+Адрес.Район+", "+
			Адрес.Город+", "+Адрес.НаселенныйПункт+", "+Адрес.Улица+", "+Адрес.Дом+", "+Адрес.Корпус
			+", "+Адрес.Квартира;
			СпрК.Записать();
			СПрК=СпрК.Ссылка;
			
		КонецЕсли;
		
		
		Прервать;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	Если ЗначениеЗАполнено(СпрК) 
		//И СпрК.Ид_ЭДО_ЦРПТ=ЗЗ.СведенияОбУчастникахЭДО.ИдентификаторОтправителя 
		тогда
		Возврат СпрК.Ссылка;
	ИначеЕсли ЗначениеЗаполнено(СпрК) Тогда
		СпрК=СпрК.ПолучитьОбъект();
	Иначе
		СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрК.Наименование=ЗЗ.Грузополучатель.НаименованиеКонтрагента;
	КонецЕсли;
	СпрК.ИНН=ЗЗ.Грузополучатель.РеквизитыКонтрагента.ИНН;
	СпрК.КПП=КПП;
	//СпрК.Ид_ЭДО_ЦРПТ=ЗЗ.СведенияОбУчастникахЭДО.ИдентификаторОтправителя;
	Если ЗначениеЗаполненО(АдресТекст) Тогда
		СпрК.ФактическийАдрес=АдресТекст;
		
	ИначеЕсли Адрес.Свойство("Индекс",Индекс) 
		Тогда
		
			СпрК.ФактическийАдрес=Адрес.Индекс+", "+Адрес.КодРегиона+", "+Адрес.Район+", "+
			Адрес.Город+", "+Адрес.НаселенныйПункт+", "+Адрес.Улица+", "+Адрес.Дом+", "+Адрес.Корпус
			+", "+Адрес.Квартира;
		
	Конецесли;
	СпрК.Записать();
	
	Если Адрес.Свойство("Индекс",Индекс) Тогда
				РегДвиж=РегистрыСведений.Адрес_ХамелеонЦРПТ.СоздатьНаборЗаписей();
				РегДвиж.Отбор.Объект.Установить(СпрК.Ссылка);
				РегДвиж.Отбор.Тип.Установить(Перечисления.ТипАдреса_ХамелеонЦРПТ.Фактический);
				Добав=РегДвиж.Добавить();
				Добав.Объект=СпрК.Ссылка;
				Добав.Тип=Перечисления.ТипАдреса_ХамелеонЦРПТ.Фактический;
				АдресРФ=Адрес;
				АдресРФ.Свойство("Индекс",Добав.Индекс);
		
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
				АдресРФ.Свойство("КодРегиона",Добав.КодРегиона);
			
		    	АдресРФ.Свойство("Район",Добав.Район);
			
		    	АдресРФ.Свойство("Город",Добав.Город);
		    	АдресРФ.Свойство("НаселПункт",Добав.НаселенныйПункт);
		    	АдресРФ.Свойство("Улица",Добав.Улица);
		    	АдресРФ.Свойство("Дом",Добав.Дом);
		    	АдресРФ.Свойство("Корпус",Добав.Корпус);
		    	АдресРФ.Свойство("Кварт",Добав.Квартира);
				РегДвиж.Записать(Истина);		
		
	Конецесли;
	
	Возврат СпрК.Ссылка
	
	//СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",
	//ЗЗ.Продавец.РеквизитыКонтрагента.ИНН);
	//Если ЗначениеЗАполнено(СпрК) И СпрК.Ид_ЭДО_ЦРПТ=ЗЗ.СведенияОбУчастникахЭДО.ИдентификаторОтправителя тогда
	//	Возврат СпрК.Ссылка;
	//	//СпрК=СпрК.ПолучитьОбъект();
	//ИначеЕсли ЗначениеЗаполнено(СпрК) Тогда
	//	СпрК=СпрК.ПолучитьОбъект();
	//Иначе
	//	СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
	//	СпрК.Наименование=ЗЗ.Продавец.НаименованиеКонтрагента;
	//КонецЕсли;
	//СпрК.ИНН=ЗЗ.Продавец.РеквизитыКонтрагента.ИНН;
	//СпрК.Ид_ЭДО_ЦРПТ=ЗЗ.СведенияОбУчастникахЭДО.ИдентификаторОтправителя;
	//СпрК.Записать();
	//Возврат СпрК.Ссылка
КонецФункции

Функция СоздатьДокументУКД(РеквизитыЭлектронногоДокумента,МассивУп,ЗаписыватьДанныеПриОтправкеЗаказа,Пользователь,АдресРеквизитов,ТипЭДО,ОшибкаЗагрузки,Обновлять)
	
	
	НастройкиПр=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить();
	КодВУчетнойСистемеИзXML=НастройкиПр.КодВУчетнойСистемеИзXML;
	ОбновлятьКодВУчетнойСистеме=НастройкиПр.ОбновлятьКодВУчетнойСистеме;
	
	
	
	
		trade_recipient_inn="";
		
		
			
			Организация=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",
			РеквизитыЭлектронногоДокумента.Покупатель.РеквизитыКонтрагента.ИНН);
			
 			Если Не ЗначениеЗаполнено(Организация) Тогда
				
				СпрОрг=Справочники.Организации_ХамелеонЦРПТ.СоздатьЭлемент();
				СпрОрг.ИНН=РеквизитыЭлектронногоДокумента.Покупатель.РеквизитыКонтрагента.ИНН;
				РеквизитыЭлектронногоДокумента.Покупатель.РеквизитыКонтрагента.Свойство("КПП",СпрОрг.КПП);
				РеквизитыЭлектронногоДокумента.Покупатель.Свойство("НаименованиеКонтрагента",СпрОрг.Наименование);
				СпрОрг.Записать();
				Организация=СпрОрг.Ссылка;
			КонецЕсли;
			
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	Приемка_ХамелеонЦРПТ.Ссылка
					|ИЗ
					|	Документ.Приемка_ХамелеонЦРПТ КАК Приемка_ХамелеонЦРПТ
					|ГДЕ
					|	Приемка_ХамелеонЦРПТ.Организация = &Организация
					|	И Приемка_ХамелеонЦРПТ.ДокументОтгрузки = &ДокументОтгрузки";
				
				
	ИдСамогоДокумента="";
				РеквизитыЭлектронногоДокумента.Свойство("ИдСамогоДокумента",ИдСамогоДокумента);
				Если ЗначениеЗаполнено(ИдСамогоДокумента) Тогда
					
					Запрос.Текст=Запрос.Текст+"
					|И  Приемка_ХамелеонЦРПТ._Order_ID = &ИДСамогодокумента";
					
					Запрос.УстановитьПараметр("ИДСамогодокумента", ИдСамогоДокумента );
					
				Конецесли;
				
				
				Запрос.УстановитьПараметр("ДокументОтгрузки", РеквизитыЭлектронногоДокумента.ИдентификаторДокументооборота);
				Запрос.УстановитьПараметр("Организация", Организация);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				
				Если НЕ  ВыборкаДетальныеЗаписи.Следующий() Тогда
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		      
					Добб_1=ДОкументы.Приемка_ХамелеонЦРПТ.СоздатьДокумент();
					
					//Добб_1.УстановитьСсылкуНового(Добб);
					Добб=Добб_1;
					Добб.Дата=ТекущаяДата();

				Иначе
					Если НЕ Обновлять Тогда
						
						Добб=	ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
							Добб.УПД=Истина;
							Добб.ТипЭДО=ТипЭДО;
							Если ТипЭДО=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОФайл Тогда
								Добб.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан;
							ИначеЕсли ТипЭДО=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОЛайт 
								ИЛИ ТипЭДО=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОТензор
								ИЛИ ТипЭДО=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОКонтур
								Тогда
								Добб.СтатусУПД=АдресРеквизитов.Статус;
							
							КонецЕсли;
							
							Добб.Записать();
							Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
								ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ЧастичноПринят
								ИЛИ Добб.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан
								Тогда
								Попытка
									Добб.ПометкаУдаления=Ложь;
									Добб.Записать(РежимЗаписиДокумента.Проведение) 
								Исключение
								КонецПопытки;
							КонецЕсли;
						МассивУп.Добавить(Новый Структура("Статус,документ",АдресРеквизитов.Статус,ВыборкаДетальныеЗаписи.Ссылка));
						Возврат Неопределено;
					Конецесли;
					Добб=	ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				//	Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
				//	ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ЧастичноПринят
				//	Тогда
				//	
				//	//Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				//	//	 ЗапистьПриемкку(Добб.Ссылка,Текст1);
				//		
				//	//Конецесли;
				//
				//	Если Добб.Товары.Количество()>0 Тогда
				//		//Если ОбновлятьВсе=Истина Тогда
				//			Добб=Добб.Ссылка.ПолучитьОбъект();
				//		//Иначе
				//		//	Возврат Добб.Ссылка;
				//		//КонецЕсли;
				//	Иначе
				//		Добб=Добб.Ссылка.ПолучитьОбъект();
				//	КонецЕсли;
				КонецЕсли;
				//Иначе
				//	Добб=Добб.ПолучитьОбъект();
				//КонецЕсли;
				
ИмяФайлаЭД="";
				Если РеквизитыЭлектронногоДокумента.Свойство("ИмяФайлаЭД",ИмяФайлаЭД) Тогда
					Добб.ИмяФайлаЭД=ИмяФайлаЭД;
				Иначе
					Добб.ИмяФайлаЭД=РеквизитыЭлектронногоДокумента.ИдентификаторДокументооборота;
					
					КонецЕсли;
					Добб.ДокументОтгрузки=РеквизитыЭлектронногоДокумента.ИдентификаторДокументооборота;
					
					РеквизитыЭлектронногоДокумента.Свойство("ИдСамогоДокумента",Добб._Order_ID);
					
					
					
					
					
			Добб.Организация=Организация;
			//Добб.СтатусУПД=перечисления.СтатусыУПД_ХамелеонЦРПТ[Заказ.status];
			Добб.НомерВходящий=РеквизитыЭлектронногоДокумента.Номер;
			Добб.ТекущийПользователь=Пользователь;
			
			Добб.УПД=Истина;
			//ДатаДокумента=Заказ.content.date;
			Добб.ДатаВходящий=РеквизитыЭлектронногоДокумента.Дата;
			//Дата(Сред(ДатаДокумента,1,4),Сред(ДатаДокумента,6,2),Сред(ДатаДокумента,9,2),Сред(ДатаДокумента,12,2),Сред(ДатаДокумента,15,2),Сред(ДатаДокумента,18,2));
			
			Добб.Поставщик=СоздатьНайтиКонтрагента_Приемка_УПД(РеквизитыЭлектронногоДокумента);
			//Добб.НомерВходящий=Заказ.body.document_number;
			
			Добб.Грузоотправитель=Неопределено;
			Грузоотправитель=Неопределено;
			Если РеквизитыЭлектронногоДокумента.Свойство("Грузоотправитель",Грузоотправитель) Тогда
				Если ТипЗнч(Грузоотправитель)=Тип("Структура") тогда
					Добб.Грузоотправитель=СоздатьНайтиКонтрагента_Приемка_УПД_Гр(РеквизитыЭлектронногоДокумента,Добб.Поставщик)
				КонецЕсли;
			КонецЕсли;
			
			ТекстоваяИнформация="";
			Если РеквизитыЭлектронногоДокумента.Свойство("ТекстоваяИнформация",ТекстоваяИнформация) Тогда
				
				Добб.ДополнительныеЗначения_ЭДО.Очистить();
				Для Каждого Стр_11 Из ТекстоваяИнформация Цикл
					Добав_11=Добб.ДополнительныеЗначения_ЭДО.Добавить();
					ЗаполнитьЗначенияСвойств(Добав_11,Стр_11);
					
				Конеццикла;
			Конецесли;
			
			
			Добб.Грузополучатель=Неопределено;
			Грузополучатель=Неопределено;
			Если РеквизитыЭлектронногоДокумента.Свойство("Грузополучатель",Грузополучатель) Тогда
				Если ТипЗнч(Грузополучатель)=Тип("Структура") тогда
					
					АдресДляОрганизации=Грузополучатель.СведенияОбАдресе.Адрес;
					Если АдресДляОрганизации=Неопределено тогда
						Добав=Новый Структура;
						Добав.Вставить("АдресТекст","");
						
							   Добав.Вставить("Индекс","");
								// Вставить обработку выборки ВыборкаДетальныеЗаписи
							Добав.Вставить("КодРегиона","");
						
							
							Добав.Вставить("Район","");
						
							Добав.Вставить("Город","");
							
							
							Добав.Вставить("НаселенныйПункт","");
							
							Добав.Вставить("Улица","");
							Добав.Вставить("Дом","");
							Добав.Вставить("Корпус","");
							
							Добав.Вставить("Квартира","");
							
						
						
					Иначе
						АдресТекст="";
						Добав=Новый Структура;
						Если 	АдресДляОрганизации.Свойство("АдресТекст",АдресТекст) 
							
							Тогда
							   Добав.Вставить("АдресТекст",АдресТекст);
							   Добав.Вставить("Индекс","");
								// Вставить обработку выборки ВыборкаДетальныеЗаписи
							Добав.Вставить("КодРегиона","");
						
							
							Добав.Вставить("Район","");
						
							Добав.Вставить("Город","");
							
							
							Добав.Вставить("НаселенныйПункт","");
							
							Добав.Вставить("Улица","");
							Добав.Вставить("Дом","");
							Добав.Вставить("Корпус","");
							
							Добав.Вставить("Квартира","");
						   

						Иначе
							АдресРФ=АдресДляОрганизации;
							Добав.Вставить("Индекс","");
							//АдресРФ.Свойство("Индекс",Добав.Индекс);
							Если НЕ АдресРФ.Свойство("Индекс",Добав.Индекс) Тогда
								Добав.Индекс="";
								
							КонецЕсли;
								// Вставить обработку выборки ВыборкаДетальныеЗаписи
							Добав.Вставить("КодРегиона","");
							Если НЕ АдресРФ.Свойство("КодРегиона",Добав.КодРегиона) Тогда
								Добав.КодРегиона="";
							Конецесли;
						
							
							Добав.Вставить("Район","");
							Если НЕ АдресРФ.Свойство("Район",Добав.Район) Тогда
								Добав.Район="";
							Конецесли;
						
							Добав.Вставить("Город","");
							Если НЕ АдресРФ.Свойство("Город",Добав.Город) Тогда
								Добав.Город="";
							Конецесли;
							
							
							Добав.Вставить("НаселенныйПункт","");
							Если НЕ АдресРФ.Свойство("НаселПункт",Добав.НаселенныйПункт) Тогда
								Добав.НаселенныйПункт="";
								
							КонецЕсли;
							
							Добав.Вставить("Улица","");
							Если НЕ АдресРФ.Свойство("Улица",Добав.Улица) Тогда
								Добав.Улица="";
							Конецесли;
							
							Добав.Вставить("Дом","");
							Если НЕ АдресРФ.Свойство("Дом",Добав.Дом) Тогда
Добав.Дом="";								
							Конецесли;
							
							Добав.Вставить("Корпус","");
							Если НЕ АдресРФ.Свойство("Корпус",Добав.Корпус) Тогда
								Добав.Корпус="";
							Конецесли;
							
							
							Добав.Вставить("Квартира","");
							Если НЕ АдресРФ.Свойство("Кварт",Добав.Квартира) Тогда
								Добав.Квартира="";
							КонецЕсли
							
						
							
						КонецЕслИ;
						
					  Конецесли;
						
					
					Добб.Грузополучатель=СоздатьНайтиКонтрагента_Приемка_УПД_Грузополучатель(РеквизитыЭлектронногоДокумента,Добав)
				КонецЕсли;
			КонецЕсли;
			
			
			Добб.ТипЭДО=ТипЭдо;
			//Добб.ТекущийПользователь=Пользователь;
			
			//ДатаДокумента=Заказ.body.transfer_date;;
			//Добб.ДатаПолуччения=Дата(Сред(ДатаДокумента,1,4),Сред(ДатаДокумента,6,2),Сред(ДатаДокумента,9,2),Сред(ДатаДокумента,12,2),Сред(ДатаДокумента,15,2),Сред(ДатаДокумента,18,2));
			РеквизитыЭлектронногоДокумента.Свойство("ДатаПередачи",Добб.ДатаПолуччения) ;
			//=РеквизитыЭлектронногоДокумента.ДатаПередачи;
			
			
			Если 
	НастройкиПр.ЭДОЗаписыватьИныеСведенияВКомментарийПриемка 
	Тогда
	
	Текстоваяинформация="";
	Если РеквизитыЭлектронногоДокумента.Свойство("Текстоваяинформация",Текстоваяинформация) Тогда
		
		Добб.Комментарий="";
		Для Каждого Стр_Ктекст Из Текстоваяинформация Цикл
			Если ЗначениеЗаполнено(Добб.Комментарий) Тогда
				Добб.Комментарий=Добб.Комментарий+", ";
			КонецЕсли;
			Добб.Комментарий=Добб.Комментарий+Стр_Ктекст.Идентификатор+": "+Стр_Ктекст.Значение;
		Конеццикла;
		
	КонецЕсли;
	
КонецЕсли;

			Добб.Товары1.Очистить();
			Добб.СерийныеНомера1.Очистить();
			
			
			Добб.Товары.Очистить();
			Добб.СерийныеНомера.Очистить();
			
			//Добб.Короба.Очистить();
			
			Сч=0;
			
			
			
			
	//	Если   Заказ.type="LP_SHIP_GOODS_CSV" Тогда

	КодСтраны="";
	Для Каждого Стр_з из РеквизитыЭлектронногоДокумента.СведенияОТоварахУслугах Цикл
		ТаможенныеДекларации=Новый массив;
		НомерГТДЗаписываем=Неопределено;
		Если Стр_З.Свойство("ТаможенныеДекларации",ТаможенныеДекларации) Тогда
			
			Если ТаможенныеДекларации.Количество()=1 Тогда
				
				Стр_1=ТаможенныеДекларации[0];
				//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				
				НомерГТДЗаписываем=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.НайтиГТД(Стр_1.НомерТаможеннойДекларации,Стр_1.КодСтраныПроисхождения);
				КодСтраны=Стр_1.КодСтраныПроисхождения;
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

			ИначеЕсли ТаможенныеДекларации.Количество()>1 Тогда
				
					СпрГТД=Справочники.НомераГТД_ХамелеонЦРПТ.СоздатьЭлемент();
					Для Каждого Стр_1 ИЗ  ТаможенныеДекларации Цикл
						Добав=СпрГТД.НомераГТДНесколько.Добавить();
						Добав.КодСтраны=Стр_1.КодСтраныПроисхождения;
						КодСтраны=Добав.КодСтраны;
						
						Добав.НомерГТД=Стр_1.НомерТаможеннойДекларации;
					Конеццикла;
					Попытка
						СпрГТД.Записать();
						НомерГТДЗаписываем=СпрГТД.Ссылка;
					Исключение
					КонецПопытки;
			
				
				
			КонецЕсли;
			
			
		КонецЕсли;
		
		
			
			Нстр=Добб.Товары.Добавить();
			НСтр.НомерСтрокиСвязи=НСтр.НомерСтроки;
			НСтр.НомерГТД=НомерГТДЗаписываем;
			
			Нстр.НаименованиеТовара=Стр_З.Наименование;
			ОКЕИ="";
			Если Стр_З.Свойство("ОКЕИ",ОКЕИ) Тогда
				Нстр.ЕдиницаИзмерения=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоКоду(Стр_З.ОКЕИ)
			Конецесли;
						
			//ЕдИзм=Нстр.ЕдиницаИзмерения;
			
			Текстоваяинформация=Неопределено;
			Продукция=Неопределено;
			
			
			Стр_З.Свойство("Количество",Нстр.КоличествоКМ);
			Единиц=Неопределено;
			Стр_З.Свойство("СуммаНДС",Нстр.НДС);
			Стр_З.Свойство("Сумма",Нстр.Сумма);
			Если НСтр.КоличествоКМ<>0 Тогда
				НСтр.Цена=НСтр.Сумма/НСтр.КоличествоКМ;
			КонецЕсли;
			
			
			Нстр_До=Добб.Товары1.Добавить();
			ЗаполнитьЗначенияСвойств(Нстр_До,Нстр);
			
			
			
			Стр_З.Свойство("КоличествоДоКорректировки",Нстр_До.КоличествоКМ);
			Единиц=Неопределено;
			Стр_З.Свойство("СуммаНДСДоКорректировки",Нстр_До.НДС);
			Стр_З.Свойство("СуммаДоКорректировки",Нстр_До.Сумма);
			Если Нстр_До.КоличествоКМ<>0 Тогда
				Нстр_До.Цена=Нстр_До.Сумма/Нстр_До.КоличествоКМ;
			КонецЕсли;
			
			
			
			ОКЕИ="";
			Если Стр_З.Свойство("ОКЕИДоКорректировки",ОКЕИ) Тогда
				Нстр_До.ЕдиницаИзмерения=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоКоду(Стр_З.ОКЕИ)
			Конецесли;

			

			Если Стр_З.Свойство("ТекстоваяИнформация",Текстоваяинформация) Тогда
				//МассивБыло=Новый Массив;
				//МассивСтало=Новый Массив;
				
				///Проудкция плюс КМы
				Для Каждого Стр_КМ из Текстоваяинформация Цикл
					Если стр_КМ.Идентификатор="cis_до" Тогда
						//МассивБыло.Добавить(Стр_КМ.Значение);
						
						ШтрихКод=Стр_КМ.Значение;
							
						Если ШтрихКод="-"	 Тогда
							Продолжить;
						Конецесли;
							
							Если Сред(ШтрихКод,1,1)="(" Тогда
								ШтрихКод=Сред(ШтрихКод,2);
								Если сред(ШтрихКод,3,1)=")" Тогда
									ШтрихКод=Сред(ШтрихКод,1,2)+Сред(ШтрихКод,4);
								КонецЕсли;
								Если Сред(ШтрихКод,17,1)="(" Тогда
									ШтрихКод=Сред(ШтрихКод,1,16)+ Сред(ШтрихКод,18);
								КонецЕсли;
								Если Сред(ШтрихКод,19,1)=")" Тогда
									ШтрихКод=Сред(ШтрихКод,1,18)+ Сред(ШтрихКод,20);
								КонецЕсли;
								Если Сред(ШтрихКод,26,6)="(8005)" Тогда
									ШтрихКод=Сред(ШтрихКод,1,25)+ Сред(ШтрихКод,27,4)+Сред(ШтрихКод,32);
								КонецЕсли;
								
								
							КонецЕсли;
							
							Если Добб.СерийныеНомера1.Найти(ШтрихКод,"cis")<>Неопределено Тогда
								Продолжить;
							Конецесли;
							
							product_description="";
							
							
							Продукция=СоздатьНайтиПр_УПД(ШтрихКод,Стр_З,КодСтраны);
							Если ЗначениеЗАполнено(Продукция) тогда
								product_description=Строка(Продукция);
									Нстр_До.GTIN=Продукция;
								//	НСТР1.НомерСтрокиСвязи=НСТР.НомерСтроки;
								Нстр_До.НаименованиеТовара=Продукция.Наименование;
								ДобавилиПр=Истина;
							Иначе
								
								
		
								СпрН=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_З.Наименование);
								Если Не ЗначениеЗаполнено(СпрН) Тогда
								
									СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
									СпрПр.ЕдиницаИзмерения_УПД=Нстр_До.ЕдиницаИзмерения;
									СпрПр.Наименование=Стр_З.Наименование;
									СпрПр.НаименованиеТовара=Стр_З.Наименование;
									СпрПр.Записать();
									СпрН= СпрПр.Ссылка;
								КонецЕсли;
								Продукция=СпрН;
								product_description=Строка(Продукция);
									Нстр_До.GTIN=Продукция;
//									Нстр_До.НомерСтрокиСвязи=Нстр_До.НомерСтроки;
								Нстр_До.НаименованиеТовара=Продукция.Наименование;
								ДобавилиПр=Истина;
								
								
								КонецЕсли;
								
							КоличествоКМ=0;
									//children="";
									//еСЛИ                        Стр_з.Свойство("children",children) Тогда
									//	Для Каждого Стр_children Из children Цикл
									//		ДобавК=Добб.Короба.Добавить();
									//		ДобавК.НомерКороба=Стр_З.uitu_code;
									//		ШтрихКод="";
									//		Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
									//			ШтрихКод=Стр_children.uit_code;
									//			КоличествоКМ=КоличествоКМ+1;
									//			НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
									//		Иначе
									//			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.РекурсияУпаковки_Приход(Стр_children,НСтр,Добб,КоличествоКМ);
									//		КонецЕсли;
									//		//ДобавК.КоличестоКМ=НСтр.КоличествоНомеровКМ;
									//		ДобавК.ШтрихКод=ШтрихКод;
									//		
									//	КонецЦикла;
									//Иначе
										НСтр_до.КоличествоНомеровКМ=НСтр_до.КоличествоНомеровКМ+1;
										КоличествоКМ=1;
									//КонецЕсли;

							
								Добав=Добб.СерийныеНомера1.Добавить();
								Добав.КоличествоКМ=КоличествоКМ;
								Добав.НомерСтрокиСвязи=Нстр_До.НомерСтрокиСвязи;
								//стр_З.Свойство("Цена",Добав.Цена);
								//Добав.Цена=Стр_з.product_cost;
								//=Стр_з.product_tax;
																
								
								//стр_З.Свойство("product_tax",Добав.НДС);
								Добав.НаименованиеТовараСтрокой=НСТр_До.НаименованиеТовара;
								uit_code="";
									Добав.cis=ШтрихКод;
									
									
									еСЛИ Сред(Добав.cis,1,2)="01" Тогда
										Добав.GTIN=Сред(Добав.cis,3,14);
									Иначе
										Добав.GTIN=Сред(Добав.cis,1,14);
									КонецЕсли;
									Попытка
										Числ=Число(Добав.GTIN);
									Исключение
										Добав.GTIN="";
									КонецПопытки;
									
								Добав.НаименованиеТовара=Продукция;
								Если ЗначениеЗаполнено(Продукция)   Тогда
									Добав.GTIN=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(Добав.НаименованиеТовара.GTIN),14,"0");
								КонецЕсли;
								Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан Тогда
									Добав.Принят=Истина;
								Иначе
									Добав.Принят=Ложь;
								КонецЕсли;
								Попытка
								//Если NNN_2<>Неопределено Тогда
								//	accepted=Неопределено;
								//	Если NNN_2.products[Сч].Свойство("accepted",accepted) Тогда
								//		Если accepted="true" Тогда
								//			Добав.Принят=Истина;
								//		Иначе
								//			Добав.Принят=Ложь;
								//			
								//		КонецЕсли;
								//	Иначе
								//		Добав.Принят=Ложь;
								//	Конецесли;
								//	Сч=Сч+1;
								//Конецесли;
							Исключение
								КонецПопытки;
							//	НСтр1.КоличествоКМ=НСтр.КоличествоКМ+1;
								

						
						
						
								
								
					ИначеЕсли стр_КМ.Идентификатор="cis" Тогда
						//Массивстало.Добавить(Стр_КМ.Значение);
												
						
						
							
						ШтрихКод=Стр_КМ.Значение;
						Если ШтрихКод="-"	 Тогда
							Продолжить;
						Конецесли;
							
							Если Сред(ШтрихКод,1,1)="(" Тогда
								ШтрихКод=Сред(ШтрихКод,2);
								Если сред(ШтрихКод,3,1)=")" Тогда
									ШтрихКод=Сред(ШтрихКод,1,2)+Сред(ШтрихКод,4);
								КонецЕсли;
								Если Сред(ШтрихКод,17,1)="(" Тогда
									ШтрихКод=Сред(ШтрихКод,1,16)+ Сред(ШтрихКод,18);
								КонецЕсли;
								Если Сред(ШтрихКод,19,1)=")" Тогда
									ШтрихКод=Сред(ШтрихКод,1,18)+ Сред(ШтрихКод,20);
								КонецЕсли;
								Если Сред(ШтрихКод,26,6)="(8005)" Тогда
									ШтрихКод=Сред(ШтрихКод,1,25)+ Сред(ШтрихКод,27,4)+Сред(ШтрихКод,32);
								КонецЕсли;
								
								
							КонецЕсли;
							
							Если Добб.СерийныеНомера.Найти(ШтрихКод,"cis")<>Неопределено Тогда
								Продолжить;
							Конецесли;
							
							product_description="";
							
							
							Продукция=СоздатьНайтиПр_УПД(ШтрихКод,Стр_З,КодСтраны);
							Если ЗначениеЗАполнено(Продукция) тогда
								product_description=Строка(Продукция);
									Нстр.GTIN=Продукция;
								//	НСТР1.НомерСтрокиСвязи=НСТР.НомерСтроки;
								Нстр.НаименованиеТовара=Продукция.Наименование;
								ДобавилиПр=Истина;
							Иначе
								
								
		
								СпрН=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_З.Наименование);
								Если Не ЗначениеЗаполнено(СпрН) Тогда
								
									СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
									СпрПр.ЕдиницаИзмерения_УПД=Нстр_До.ЕдиницаИзмерения;
									СпрПр.Наименование=Стр_З.Наименование;
									СпрПр.НаименованиеТовара=Стр_З.Наименование;
									СпрПр.Записать();
									СпрН= СпрПр.Ссылка;
								КонецЕсли;
								Продукция=СпрН;
								product_description=Строка(Продукция);
									Нстр.GTIN=Продукция;
//									Нстр_До.НомерСтрокиСвязи=Нстр_До.НомерСтроки;
								Нстр.НаименованиеТовара=Продукция.Наименование;
								ДобавилиПр=Истина;
								
								
								КонецЕсли;
								
							КоличествоКМ=0;
									//children="";
									//еСЛИ                        Стр_з.Свойство("children",children) Тогда
									//	Для Каждого Стр_children Из children Цикл
									//		ДобавК=Добб.Короба.Добавить();
									//		ДобавК.НомерКороба=Стр_З.uitu_code;
									//		ШтрихКод="";
									//		Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
									//			ШтрихКод=Стр_children.uit_code;
									//			КоличествоКМ=КоличествоКМ+1;
									//			НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
									//		Иначе
									//			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.РекурсияУпаковки_Приход(Стр_children,НСтр,Добб,КоличествоКМ);
									//		КонецЕсли;
									//		//ДобавК.КоличестоКМ=НСтр.КоличествоНомеровКМ;
									//		ДобавК.ШтрихКод=ШтрихКод;
									//		
									//	КонецЦикла;
									//Иначе
										НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
										КоличествоКМ=1;
									//КонецЕсли;

							
								Добав=Добб.СерийныеНомера.Добавить();
								Добав.КоличествоКМ=КоличествоКМ;
								Добав.НомерСтрокиСвязи=Нстр_До.НомерСтрокиСвязи;
								//стр_З.Свойство("Цена",Добав.Цена);
								//Добав.Цена=Стр_з.product_cost;
								//=Стр_з.product_tax;
																
								
								//стр_З.Свойство("product_tax",Добав.НДС);
								Добав.НаименованиеТовараСтрокой=НСТр.НаименованиеТовара;
								uit_code="";
									Добав.cis=ШтрихКод;
									
									
									еСЛИ Сред(Добав.cis,1,2)="01" Тогда
										Добав.GTIN=Сред(Добав.cis,3,14);
									Иначе
										Добав.GTIN=Сред(Добав.cis,1,14);
									КонецЕсли;
									Попытка
										Числ=Число(Добав.GTIN);
									Исключение
										Добав.GTIN="";
									КонецПопытки;
									
								Добав.НаименованиеТовара=Продукция;
								Если ЗначениеЗаполнено(Продукция)   Тогда
									Добав.GTIN=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(Добав.НаименованиеТовара.GTIN),14,"0");
								КонецЕсли;
								Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан Тогда
									Добав.Принят=Истина;
								Иначе
									Добав.Принят=Ложь;
								КонецЕсли;
								Попытка
								//Если NNN_2<>Неопределено Тогда
								//	accepted=Неопределено;
								//	Если NNN_2.products[Сч].Свойство("accepted",accepted) Тогда
								//		Если accepted="true" Тогда
								//			Добав.Принят=Истина;
								//		Иначе
								//			Добав.Принят=Ложь;
								//			
								//		КонецЕсли;
								//	Иначе
								//		Добав.Принят=Ложь;
								//	Конецесли;
								//	Сч=Сч+1;
								//Конецесли;
							Исключение
								КонецПопытки;
							//	НСтр1.КоличествоКМ=НСтр.КоличествоКМ+1;
								

						
						
						
						
					Конецесли;
				Конеццикла;
				
				
			Конецесли;
			
			
			Если Не ЗначениеЗаполнено(НСтр_до.GTIN)  И ЗначениеЗаполнено(НСтр.GTIN) Тогда
				НСтр_до.GTIN=НСтр.GTIN;
			Конецесли;
			
			Если ЗначениеЗаполнено(НСтр_до.GTIN)  И НЕ ЗначениеЗаполнено(НСтр.GTIN) Тогда
				НСтр.GTIN=НСтр_до.GTIN;
			Конецесли;
			Если Не Значениезаполнено(НСтр.GTIN) тогда
				НСтр.GTIN=СоздатьНайтиПр_УПД("",Стр_З,КодСтраны);
				НСтр_до.GTIN=НСтр.GTIN;
				
			Конецесли;
						
			
		//	ОшибкаЗагрузки=Истина;
			
		//	Сообщить("В документе: пропущена строка с номенклатурой :"+Стр_з.Наименование+" так как в ней не указаны коды маркировки");
			
			
	Конеццикла;
		
	Если НастройкиПр.ГрузитьПоступленияТолькоСМаркировкойПоЭДО=Истина И Добб.СерийныеНомера.Количество()=0 
		Тогда
		Возврат Неопределено;
	КонецЕсли;
	
		
			
		Добб.УПД=Истина;
		Добб.УКД=Истина;
		
		Добб.ТипЭДО=ТипЭДО;
		Если ТипЭДО=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОФайл Тогда
			Добб.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан;
		ИначеЕсли ТипЭДО=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОЛайт 
			ИЛИ ТипЭДО=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОТензор
			ИЛИ ТипЭДО=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОКонтур
			Тогда
			Добб.СтатусУПД=АдресРеквизитов.Статус;
		
		КонецЕсли;
		
		Добб.Записать();
		Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
			ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ЧастичноПринят
			ИЛИ Добб.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан
			Тогда
			Попытка
				Добб.ПометкаУдаления=Ложь;
				Добб.Записать(РежимЗаписиДокумента.Проведение) 
			Исключение
			КонецПопытки;
		КонецЕсли;
					//МассивУп.Добавить(Добб.Ссылка);
		  					МассивУп.Добавить(Новый Структура("Статус,документ",АдресРеквизитов.Статус,Добб.Ссылка));

					Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
						 ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапистьПриемкку(Добб.Ссылка,РеквизитыЭлектронногоДокумента.ТекстФайла);
						
					Конецесли;
				Возврат Добб.Ссылка;
		
//					Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
//					 ЗапистьПриемкку(Добб.Ссылка,Текст1);
					
//				Конецесли;

							//Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
						 ///ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапистьПриемкку(Добб.Ссылка,Текст1);
						
//					Конецесли;

	
КонецФункции

Функция ЗагрузкаПриемкиИзXML(РеквизитыЭлектронногоДокумента,МассивУп,ЗаписыватьДанныеПриОтправкеЗаказа,Пользователь,АдресРеквизитов,ТипЭДО,ОшибкаЗагрузки=Ложь,Обновлять=Ложь) Экспорт
	
	Если  Найти(ВРЕГ(РеквизитыЭлектронногоДокумента.НаименованиеПервичногоДокумента),"КОРРЕКТИРОВОЧНЫЙ")>0 
		//РеквизитыЭлектронногоДокумента.НаименованиеПервичногоДокумента="Универсальный корректировочный документ" 
		//ИЛИ РеквизитыЭлектронногоДокумента.НаименованиеПервичногоДокумента=""
		Тогда
		Возврат СоздатьДокументУКД(РеквизитыЭлектронногоДокумента,МассивУп,ЗаписыватьДанныеПриОтправкеЗаказа,Пользователь,АдресРеквизитов,ТипЭДО,ОшибкаЗагрузки,Обновлять);
	Конецесли;
	
	НастройкиПр=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить();
	КодВУчетнойСистемеИзXML=НастройкиПр.КодВУчетнойСистемеИзXML;
	ОбновлятьКодВУчетнойСистеме=НастройкиПр.ОбновлятьКодВУчетнойСистеме;
	
	
	
	
		trade_recipient_inn="";
		
		
			
			Организация=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",
			РеквизитыЭлектронногоДокумента.Покупатель.РеквизитыКонтрагента.ИНН);
			
 			Если Не ЗначениеЗаполнено(Организация) Тогда
				
				СпрОрг=Справочники.Организации_ХамелеонЦРПТ.СоздатьЭлемент();
				СпрОрг.ИНН=РеквизитыЭлектронногоДокумента.Покупатель.РеквизитыКонтрагента.ИНН;
				РеквизитыЭлектронногоДокумента.Покупатель.РеквизитыКонтрагента.Свойство("КПП",СпрОрг.КПП);
				РеквизитыЭлектронногоДокумента.Покупатель.Свойство("НаименованиеКонтрагента",СпрОрг.Наименование);
				СпрОрг.Записать();
				Организация=СпрОрг.Ссылка;
			КонецЕсли;
			
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	Приемка_ХамелеонЦРПТ.Ссылка
					|ИЗ
					|	Документ.Приемка_ХамелеонЦРПТ КАК Приемка_ХамелеонЦРПТ
					|ГДЕ
					|	Приемка_ХамелеонЦРПТ.Организация = &Организация
					|	И Приемка_ХамелеонЦРПТ.ДокументОтгрузки = &ДокументОтгрузки";
				
				
	ИдСамогоДокумента="";
				РеквизитыЭлектронногоДокумента.Свойство("ИдСамогоДокумента",ИдСамогоДокумента);
				Если ЗначениеЗаполнено(ИдСамогоДокумента) Тогда
					
					Запрос.Текст=Запрос.Текст+"
					|И  Приемка_ХамелеонЦРПТ._Order_ID = &ИДСамогодокумента";
					
					Запрос.УстановитьПараметр("ИДСамогодокумента", ИдСамогоДокумента );
					
				Конецесли;
				
				
				Запрос.УстановитьПараметр("ДокументОтгрузки", РеквизитыЭлектронногоДокумента.ИдентификаторДокументооборота);
				Запрос.УстановитьПараметр("Организация", Организация);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				
				Если НЕ  ВыборкаДетальныеЗаписи.Следующий() Тогда
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		      
					Добб_1=ДОкументы.Приемка_ХамелеонЦРПТ.СоздатьДокумент();
					
					//Добб_1.УстановитьСсылкуНового(Добб);
					Добб=Добб_1;
					Добб.Дата=ТекущаяДата();

				Иначе
					Если НЕ Обновлять Тогда
						
						Добб=	ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
							Добб.УПД=Истина;
							Добб.ТипЭДО=ТипЭДО;
							Если ТипЭДО=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОФайл Тогда
								Добб.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан;
							ИначеЕсли ТипЭДО=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОЛайт 
								ИЛИ ТипЭДО=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОТензор
								ИЛИ ТипЭДО=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОКонтур
								Тогда
								Добб.СтатусУПД=АдресРеквизитов.Статус;
							
							КонецЕсли;
							
							Добб.Записать();
							Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
								ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ЧастичноПринят
								ИЛИ Добб.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан
								Тогда
								Попытка
									Добб.ПометкаУдаления=Ложь;
									Добб.Записать(РежимЗаписиДокумента.Проведение) 
								Исключение
								КонецПопытки;
							КонецЕсли;
						МассивУп.Добавить(Новый Структура("Статус,документ",АдресРеквизитов.Статус,ВыборкаДетальныеЗаписи.Ссылка));
						Возврат Неопределено;
					Конецесли;
					Добб=	ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				//	Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
				//	ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ЧастичноПринят
				//	Тогда
				//	
				//	//Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				//	//	 ЗапистьПриемкку(Добб.Ссылка,Текст1);
				//		
				//	//Конецесли;
				//
				//	Если Добб.Товары.Количество()>0 Тогда
				//		//Если ОбновлятьВсе=Истина Тогда
				//			Добб=Добб.Ссылка.ПолучитьОбъект();
				//		//Иначе
				//		//	Возврат Добб.Ссылка;
				//		//КонецЕсли;
				//	Иначе
				//		Добб=Добб.Ссылка.ПолучитьОбъект();
				//	КонецЕсли;
				КонецЕсли;
				//Иначе
				//	Добб=Добб.ПолучитьОбъект();
				//КонецЕсли;
				
ИмяФайлаЭД="";
				Если РеквизитыЭлектронногоДокумента.Свойство("ИмяФайлаЭД",ИмяФайлаЭД) Тогда
					Добб.ИмяФайлаЭД=ИмяФайлаЭД;
				Иначе
					Добб.ИмяФайлаЭД=РеквизитыЭлектронногоДокумента.ИдентификаторДокументооборота;
					
					КонецЕсли;
					Добб.ДокументОтгрузки=РеквизитыЭлектронногоДокумента.ИдентификаторДокументооборота;
					
					РеквизитыЭлектронногоДокумента.Свойство("ИдСамогоДокумента",Добб._Order_ID);
					
					
					
					
					
			Добб.Организация=Организация;
			//Добб.СтатусУПД=перечисления.СтатусыУПД_ХамелеонЦРПТ[Заказ.status];
			Добб.НомерВходящий=РеквизитыЭлектронногоДокумента.Номер;
			Добб.ТекущийПользователь=Пользователь;
			
			Добб.УПД=Истина;
			//ДатаДокумента=Заказ.content.date;
			Добб.ДатаВходящий=РеквизитыЭлектронногоДокумента.Дата;
			//Дата(Сред(ДатаДокумента,1,4),Сред(ДатаДокумента,6,2),Сред(ДатаДокумента,9,2),Сред(ДатаДокумента,12,2),Сред(ДатаДокумента,15,2),Сред(ДатаДокумента,18,2));
			
			Добб.Поставщик=СоздатьНайтиКонтрагента_Приемка_УПД(РеквизитыЭлектронногоДокумента);
			//Добб.НомерВходящий=Заказ.body.document_number;
			
			Добб.Грузоотправитель=Неопределено;
			Грузоотправитель=Неопределено;
			Если РеквизитыЭлектронногоДокумента.Свойство("Грузоотправитель",Грузоотправитель) Тогда
				Если ТипЗнч(Грузоотправитель)=Тип("Структура") тогда
					Добб.Грузоотправитель=СоздатьНайтиКонтрагента_Приемка_УПД_Гр(РеквизитыЭлектронногоДокумента,Добб.Поставщик)
				КонецЕсли;
			КонецЕсли;
			
			ТекстоваяИнформация="";
			Если РеквизитыЭлектронногоДокумента.Свойство("ТекстоваяИнформация",ТекстоваяИнформация) Тогда
				
				Добб.ДополнительныеЗначения_ЭДО.Очистить();
				Для Каждого Стр_11 Из ТекстоваяИнформация Цикл
					Добав_11=Добб.ДополнительныеЗначения_ЭДО.Добавить();
					ЗаполнитьЗначенияСвойств(Добав_11,Стр_11);
					
				Конеццикла;
			Конецесли;
			
			
			Добб.Грузополучатель=Неопределено;
			Грузополучатель=Неопределено;
			Если РеквизитыЭлектронногоДокумента.Свойство("Грузополучатель",Грузополучатель) Тогда
				Если ТипЗнч(Грузополучатель)=Тип("Структура") тогда
					
					АдресДляОрганизации=Грузополучатель.СведенияОбАдресе.Адрес;
					Если АдресДляОрганизации=Неопределено тогда
						Добав=Новый Структура;
						Добав.Вставить("АдресТекст","");
						
							   Добав.Вставить("Индекс","");
								// Вставить обработку выборки ВыборкаДетальныеЗаписи
							Добав.Вставить("КодРегиона","");
						
							
							Добав.Вставить("Район","");
						
							Добав.Вставить("Город","");
							
							
							Добав.Вставить("НаселенныйПункт","");
							
							Добав.Вставить("Улица","");
							Добав.Вставить("Дом","");
							Добав.Вставить("Корпус","");
							
							Добав.Вставить("Квартира","");
							
						
						
					Иначе
						АдресТекст="";
						Добав=Новый Структура;
						Если 	АдресДляОрганизации.Свойство("АдресТекст",АдресТекст) 
							
							Тогда
							   Добав.Вставить("АдресТекст",АдресТекст);
							   Добав.Вставить("Индекс","");
								// Вставить обработку выборки ВыборкаДетальныеЗаписи
							Добав.Вставить("КодРегиона","");
						
							
							Добав.Вставить("Район","");
						
							Добав.Вставить("Город","");
							
							
							Добав.Вставить("НаселенныйПункт","");
							
							Добав.Вставить("Улица","");
							Добав.Вставить("Дом","");
							Добав.Вставить("Корпус","");
							
							Добав.Вставить("Квартира","");
						   

						Иначе
							АдресРФ=АдресДляОрганизации;
							Добав.Вставить("Индекс","");
							//АдресРФ.Свойство("Индекс",Добав.Индекс);
							Если НЕ АдресРФ.Свойство("Индекс",Добав.Индекс) Тогда
								Добав.Индекс="";
								
							КонецЕсли;
								// Вставить обработку выборки ВыборкаДетальныеЗаписи
							Добав.Вставить("КодРегиона","");
							Если НЕ АдресРФ.Свойство("КодРегиона",Добав.КодРегиона) Тогда
								Добав.КодРегиона="";
							Конецесли;
						
							
							Добав.Вставить("Район","");
							Если НЕ АдресРФ.Свойство("Район",Добав.Район) Тогда
								Добав.Район="";
							Конецесли;
						
							Добав.Вставить("Город","");
							Если НЕ АдресРФ.Свойство("Город",Добав.Город) Тогда
								Добав.Город="";
							Конецесли;
							
							
							Добав.Вставить("НаселенныйПункт","");
							Если НЕ АдресРФ.Свойство("НаселПункт",Добав.НаселенныйПункт) Тогда
								Добав.НаселенныйПункт="";
								
							КонецЕсли;
							
							Добав.Вставить("Улица","");
							Если НЕ АдресРФ.Свойство("Улица",Добав.Улица) Тогда
								Добав.Улица="";
							Конецесли;
							
							Добав.Вставить("Дом","");
							Если НЕ АдресРФ.Свойство("Дом",Добав.Дом) Тогда
Добав.Дом="";								
							Конецесли;
							
							Добав.Вставить("Корпус","");
							Если НЕ АдресРФ.Свойство("Корпус",Добав.Корпус) Тогда
								Добав.Корпус="";
							Конецесли;
							
							
							Добав.Вставить("Квартира","");
							Если НЕ АдресРФ.Свойство("Кварт",Добав.Квартира) Тогда
								Добав.Квартира="";
							КонецЕсли
							
						
							
						КонецЕслИ;
						
					  Конецесли;
						
					
					Добб.Грузополучатель=СоздатьНайтиКонтрагента_Приемка_УПД_Грузополучатель(РеквизитыЭлектронногоДокумента,Добав)
				КонецЕсли;
			КонецЕсли;
			
			
			Добб.ТипЭДО=ТипЭдо;
			//Добб.ТекущийПользователь=Пользователь;
			
			//ДатаДокумента=Заказ.body.transfer_date;;
			//Добб.ДатаПолуччения=Дата(Сред(ДатаДокумента,1,4),Сред(ДатаДокумента,6,2),Сред(ДатаДокумента,9,2),Сред(ДатаДокумента,12,2),Сред(ДатаДокумента,15,2),Сред(ДатаДокумента,18,2));
			РеквизитыЭлектронногоДокумента.Свойство("ДатаПередачи",Добб.ДатаПолуччения) ;
			//=РеквизитыЭлектронногоДокумента.ДатаПередачи;
			
			
			Если 
	НастройкиПр.ЭДОЗаписыватьИныеСведенияВКомментарийПриемка 
	Тогда
	
	Текстоваяинформация="";
	Если РеквизитыЭлектронногоДокумента.Свойство("Текстоваяинформация",Текстоваяинформация) Тогда
		
		Добб.Комментарий="";
		Для Каждого Стр_Ктекст Из Текстоваяинформация Цикл
			Если ЗначениеЗаполнено(Добб.Комментарий) Тогда
				Добб.Комментарий=Добб.Комментарий+", ";
			КонецЕсли;
			Добб.Комментарий=Добб.Комментарий+Стр_Ктекст.Идентификатор+": "+Стр_Ктекст.Значение;
		Конеццикла;
		
	КонецЕсли;
	
КонецЕсли;

			
			
			Добб.Товары.Очистить();
			Добб.СерийныеНомера.Очистить();
			
			//Добб.Короба.Очистить();
			
			Сч=0;
			
			
			
			
	//	Если   Заказ.type="LP_SHIP_GOODS_CSV" Тогда

	КодСтраны="";
	Для Каждого Стр_з из РеквизитыЭлектронногоДокумента.СведенияОТоварахУслугах Цикл
		ТаможенныеДекларации=Новый массив;
		НомерГТДЗаписываем=Неопределено;
		Если Стр_З.Свойство("ТаможенныеДекларации",ТаможенныеДекларации) Тогда
			
			Если ТаможенныеДекларации.Количество()=1 Тогда
				
				Стр_1=ТаможенныеДекларации[0];
				//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				
				НомерГТДЗаписываем=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.НайтиГТД(Стр_1.НомерТаможеннойДекларации,Стр_1.КодСтраныПроисхождения);
				КодСтраны=Стр_1.КодСтраныПроисхождения;
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

			ИначеЕсли ТаможенныеДекларации.Количество()>1 Тогда
				
					СпрГТД=Справочники.НомераГТД_ХамелеонЦРПТ.СоздатьЭлемент();
					Для Каждого Стр_1 ИЗ  ТаможенныеДекларации Цикл
						Добав=СпрГТД.НомераГТДНесколько.Добавить();
						Добав.КодСтраны=Стр_1.КодСтраныПроисхождения;
						КодСтраны=Добав.КодСтраны;
						
						Добав.НомерГТД=Стр_1.НомерТаможеннойДекларации;
					Конеццикла;
					Попытка
						СпрГТД.Записать();
						НомерГТДЗаписываем=СпрГТД.Ссылка;
					Исключение
					КонецПопытки;
			
				
				
			КонецЕсли;
			
			
		КонецЕсли;
		
		
		good_identification_numbers=Неопределено;
		Если Стр_з.Свойство("КодыМаркировки",good_identification_numbers) Тогда
			Нстр=Добб.Товары.Добавить();
			НСтр.НомерСтрокиСвязи=Нстр.НомерСтроки;
			НСтр.НомерГТД=НомерГТДЗаписываем;
			Нстр.НаименованиеТовара=Стр_З.Наименование;
			НаименованиеЕдиницыИзмерения="";
			Если Стр_З.Свойство("НаименованиеЕдиницыИзмерения",НаименованиеЕдиницыИзмерения) тогда
			
				ЕдИзм=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоНаименованию(НаименованиеЕдиницыИзмерения);
				Если Не ЗначениеЗаполнено(ЕдИзм) тогда
					Ед=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
					Ед.Код=Стр_З.ОКЕИ;
					Ед.Наименование=НаименованиеЕдиницыИзмерения;
					Ед.Записать();
					ЕдИзМ=Ед.ссылка;
					
				КонецЕсли;
				НСтр.ЕдиницаИзмерения=ЕдИзМ;
			КонецЕсли;
				
			
			ИндивидуальнаяУпаковка=ложь;
			НомерСредИдент="";
		  	Для Каждого Стр_1 Из good_identification_numbers Цикл
				
				
				Если ИндивидуальнаяУпаковка=ложь Тогда
					
					Для Каждого Стр_Уп Из Стр_1.ИндивидуальныеУпаковки Цикл
						
						
							ШтрихКод=Стр_Уп;
							
							
							Если Сред(ШтрихКод,1,1)="(" Тогда
								ШтрихКод=Сред(ШтрихКод,2);
								Если сред(ШтрихКод,3,1)=")" Тогда
									ШтрихКод=Сред(ШтрихКод,1,2)+Сред(ШтрихКод,4);
								КонецЕсли;
								Если Сред(ШтрихКод,17,1)="(" Тогда
									ШтрихКод=Сред(ШтрихКод,1,16)+ Сред(ШтрихКод,18);
								КонецЕсли;
								Если Сред(ШтрихКод,19,1)=")" Тогда
									ШтрихКод=Сред(ШтрихКод,1,18)+ Сред(ШтрихКод,20);
								КонецЕсли;
								Если Сред(ШтрихКод,26,6)="(8005)" Тогда
									ШтрихКод=Сред(ШтрихКод,1,25)+ Сред(ШтрихКод,27,4)+Сред(ШтрихКод,32);
								КонецЕсли;
								
								
							КонецЕсли;
							
							Если Добб.СерийныеНомера.Найти(ШтрихКод,"cis")<>Неопределено Тогда
								Продолжить;
							Конецесли;
							
							product_description="";
							
							
							Продукция=СоздатьНайтиПр_УПД(ШтрихКод,Стр_З,КодСтраны);
							Если ЗначениеЗАполнено(Продукция) тогда
								product_description=Строка(Продукция);
									НСтр.GTIN=Продукция;
									НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
								//НСТр.НаименованиеТовара=Продукция.Наименование;
								ДобавилиПр=Истина;
							Иначе
								
								
		
								СпрН=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_З.Наименование);
								Если Не ЗначениеЗаполнено(СпрН) Тогда
								
									СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
									СпрПр.ЕдиницаИзмерения_УПД=ЕдИзм.Ссылка;
									СпрПр.Наименование=Стр_З.Наименование;
									СпрПр.НаименованиеТовара=Стр_З.Наименование;
									СпрПр.Записать();
									СпрН= СпрПр.Ссылка;
								КонецЕсли;
								Продукция=СпрН;
								product_description=Строка(Продукция);
									НСтр.GTIN=Продукция;
									НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
								//НСТр.НаименованиеТовара=Продукция.Наименование;
								ДобавилиПр=Истина;
								
								
								//product_description=Стр_З;
								//еСЛИ                        Стр_з.Свойство("product_description",product_description) Тогда
									
								//Иначе
								//	children="";
								//	еСЛИ                        Стр_з.Свойство("children",children) Тогда
								//		Для Каждого Стр_children Из children Цикл
								//			                                                                       product_description="";
								//				еСЛИ                   Стр_children.Свойство("product_description",product_description) Тогда
												//	НСТр=Добб.Товары.Добавить();
												//	НСТр.НаименованиеТовара=product_description;
								//				//	НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
								//					Прервать;
								//				КонецЕсли;
											
								//		КонецЦикла;
										
								//	КонецЕсли;
									
									
								КонецЕсли;
								
	//								НСТр.НаименованиеТовара=product_description;
									НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
								
							//КонецЕслИ;
							КоличествоКМ=0;
									//children="";
									//еСЛИ                        Стр_з.Свойство("children",children) Тогда
									//	Для Каждого Стр_children Из children Цикл
									//		ДобавК=Добб.Короба.Добавить();
									//		ДобавК.НомерКороба=Стр_З.uitu_code;
									//		ШтрихКод="";
									//		Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
									//			ШтрихКод=Стр_children.uit_code;
									//			КоличествоКМ=КоличествоКМ+1;
									//			НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
									//		Иначе
									//			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.РекурсияУпаковки_Приход(Стр_children,НСтр,Добб,КоличествоКМ);
									//		КонецЕсли;
									//		//ДобавК.КоличестоКМ=НСтр.КоличествоНомеровКМ;
									//		ДобавК.ШтрихКод=ШтрихКод;
									//		
									//	КонецЦикла;
									//Иначе
										НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
										КоличествоКМ=1;
									//КонецЕсли;

							
								Добав=Добб.СерийныеНомера.Добавить();
								Добав.КоличествоКМ=КоличествоКМ;
								Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
								//стр_З.Свойство("Цена",Добав.Цена);
								//Добав.Цена=Стр_з.product_cost;
								//=Стр_з.product_tax;
								ЦенаБезНДС=0;
								//стр_З.Свойство("price",ЦенаБезНДС);
								СуммаНДС="";
								Попытка
									Если стр_З.Свойство("СуммаНДС",СуммаНДС) И ЗначениеЗаполнено(стр_З.СуммаНДС) Тогда
										Добав.НДС=стр_З.СуммаНДС/стр_З.Количество;//Добав.Цена-ЦенаБезНДС;
									Иначе
										Добав.НДС=0
									КонецЕсли;
								Исключение
									Добав.НДС=0
								КонецПопытки;
								
								
								Попытка
									Сумма=0;
									Если стр_З.Свойство("Сумма",Сумма) И ЗначениеЗаполнено(стр_З.Сумма) Тогда
										Добав.Цена=стр_З.Сумма/стр_З.Количество;//Добав.Цена-ЦенаБезНДС;
									Иначе
										Добав.Цена=0
									КонецЕсли;
								Исключение
									Добав.Цена=0
								КонецПопытки;
								
								
								//стр_З.Свойство("product_tax",Добав.НДС);
								Добав.НаименованиеТовараСтрокой=НСТр.НаименованиеТовара;
								uit_code="";
									Добав.cis=ШтрихКод;
									
									
									еСЛИ Сред(Добав.cis,1,2)="01" Тогда
										Добав.GTIN=Сред(Добав.cis,3,14);
									Иначе
										Добав.GTIN=Сред(Добав.cis,1,14);
									КонецЕсли;
									Попытка
										Числ=Число(Добав.GTIN);
									Исключение
										Добав.GTIN="";
									КонецПопытки;
									
								Добав.НаименованиеТовара=Продукция;
								Если ЗначениеЗаполнено(Продукция)   Тогда
									Добав.GTIN=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(Добав.НаименованиеТовара.GTIN),14,"0");
								КонецЕсли;
								Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан Тогда
									Добав.Принят=Истина;
								Иначе
									Добав.Принят=Ложь;
								КонецЕсли;
								Попытка
								//Если NNN_2<>Неопределено Тогда
								//	accepted=Неопределено;
								//	Если NNN_2.products[Сч].Свойство("accepted",accepted) Тогда
								//		Если accepted="true" Тогда
								//			Добав.Принят=Истина;
								//		Иначе
								//			Добав.Принят=Ложь;
								//			
								//		КонецЕсли;
								//	Иначе
								//		Добав.Принят=Ложь;
								//	Конецесли;
								//	Сч=Сч+1;
								//Конецесли;
							Исключение
								КонецПопытки;
								НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
								НСтр.Сумма=НСтр.Сумма+Добав.цена;
								НСтр.НДС=НСтр.НДС+Добав.НДС;
								НСтр.Цена=НСТР.Сумма/НСтр.КОличествоКМ;
								
								
								
							Конеццикла;
					   // КонецЕсли;
						
					   
					   Для Каждого Стр_Уп Из Стр_1.КонтрольныеИдентификационныеЗнаки Цикл
						
						
							ШтрихКод=Стр_Уп;
							
							Если Сред(ШтрихКод,1,1)="(" Тогда
								ШтрихКод=Сред(ШтрихКод,2);
								Если сред(ШтрихКод,3,1)=")" Тогда
									ШтрихКод=Сред(ШтрихКод,1,2)+Сред(ШтрихКод,4);
								КонецЕсли;
								Если Сред(ШтрихКод,17,1)="(" Тогда
									ШтрихКод=Сред(ШтрихКод,1,16)+ Сред(ШтрихКод,18);
								КонецЕсли;
								Если Сред(ШтрихКод,19,1)=")" Тогда
									ШтрихКод=Сред(ШтрихКод,1,18)+ Сред(ШтрихКод,20);
								КонецЕсли;
								Если Сред(ШтрихКод,26,6)="(8005)" Тогда
									ШтрихКод=Сред(ШтрихКод,1,25)+ Сред(ШтрихКод,27,4)+Сред(ШтрихКод,32);
								КонецЕсли;
								
								
							КонецЕсли;
							

							Если Добб.СерийныеНомера.Найти(ШтрихКод,"cis")<>Неопределено Тогда
								Продолжить;
							Конецесли;
							


							
							product_description="";
							Продукция=СоздатьНайтиПр_УПД(ШтрихКод,Стр_З,КодСтраны);
							Если ЗначениеЗАполнено(Продукция) тогда
								product_description=Строка(Продукция);
									НСтр.GTIN=Продукция;
									НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
								//НСТр.НаименованиеТовара=Продукция.Наименование;
								ДобавилиПр=Истина;
							Иначе
								
								СпрН=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_З.Наименование);
								Если Не ЗначениеЗаполнено(СпрН) Тогда
								
									СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
				НаименованиеЕдиницыИзмерения="";
				Если Стр_З.Свойство("НаименованиеЕдиницыИзмерения",НаименованиеЕдиницыИзмерения) тогда
									
									ЕдИзм=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоНаименованию(НаименованиеЕдиницыИзмерения);
									Если Не ЗначениеЗаполнено(ЕдИзм) тогда
										Ед=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
										Ед.Код=Стр_З.ОКЕИ;
										Ед.Наименование=НаименованиеЕдиницыИзмерения;
										Ед.Записать();
										ЕдИзМ=Ед.ссылка;
										
									КонецЕсли;
									СпрПр.ЕдиницаИзмерения_УПД=ЕдИзм.Ссылка;
								КонецЕсли;
									СпрПр.Наименование=Стр_З.Наименование;
									СпрПр.НаименованиеТовара=Стр_З.Наименование;
									СпрПр.Записать();
									СпрН= СпрПр.Ссылка;
								КонецЕсли;
								Продукция=СпрН;
								product_description=Строка(Продукция);
									НСтр.GTIN=Продукция;
									НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
								//НСТр.НаименованиеТовара=Продукция.Наименование;
								ДобавилиПр=Истина;
								

								//product_description=Стр_З;
								//еСЛИ                        Стр_з.Свойство("product_description",product_description) Тогда
									
								//Иначе
								//	children="";
								//	еСЛИ                        Стр_з.Свойство("children",children) Тогда
								//		Для Каждого Стр_children Из children Цикл
								//			                                                                       product_description="";
								//				еСЛИ                   Стр_children.Свойство("product_description",product_description) Тогда
												//	НСТр=Добб.Товары.Добавить();
												//	НСТр.НаименованиеТовара=product_description;
								//				//	НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
								//					Прервать;
								//				КонецЕсли;
											
								//		КонецЦикла;
										
								//	КонецЕсли;
									
									
								КонецЕсли;
								
									//НСТр.НаименованиеТовара=product_description;
									НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
								
							//КонецЕслИ;
							КоличествоКМ=0;
									//children="";
									//еСЛИ                        Стр_з.Свойство("children",children) Тогда
									//	Для Каждого Стр_children Из children Цикл
									//		ДобавК=Добб.Короба.Добавить();
									//		ДобавК.НомерКороба=Стр_З.uitu_code;
									//		ШтрихКод="";
									//		Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
									//			ШтрихКод=Стр_children.uit_code;
									//			КоличествоКМ=КоличествоКМ+1;
									//			НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
									//		Иначе
									//			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.РекурсияУпаковки_Приход(Стр_children,НСтр,Добб,КоличествоКМ);
									//		КонецЕсли;
									//		//ДобавК.КоличестоКМ=НСтр.КоличествоНомеровКМ;
									//		ДобавК.ШтрихКод=ШтрихКод;
									//		
									//	КонецЦикла;
									//Иначе
										НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
										КоличествоКМ=1;
									//КонецЕсли;

							
								Добав=Добб.СерийныеНомера.Добавить();
								Добав.КоличествоКМ=КоличествоКМ;
								Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
								стр_З.Свойство("Цена",Добав.Цена);
								//Добав.Цена=Стр_з.product_cost;
								//=Стр_з.product_tax;
								ЦенаБезНДС=0;
								//стр_З.Свойство("price",ЦенаБезНДС);
								
								Если ЗначениеЗаполнено(стр_З.СуммаБезНДС) Тогда
									Добав.НДС=стр_З.СуммаБезНДС/стр_З.Количество;//Добав.Цена-ЦенаБезНДС;
								Иначе
									Добав.НДС=0;
								КонецЕсли;	
								//стр_З.Свойство("product_tax",Добав.НДС);
								Добав.НаименованиеТовараСтрокой=НСТр.НаименованиеТовара;
								uit_code="";
									Добав.cis=ШтрихКод;
									еСЛИ Сред(Добав.cis,1,2)="01" Тогда
										Добав.GTIN=Сред(Добав.cis,3,14);
									Иначе
										Добав.GTIN=Сред(Добав.cis,1,14);
									КонецЕсли;
									
									Попытка
										Числ=Число(Добав.GTIN);
									Исключение
										Добав.GTIN="";
									КонецПопытки;

									//Добав.GTIN=Сред(Добав.cis,3,14);
									
									
								Добав.НаименованиеТовара=Продукция;
								Если ЗначениеЗаполнено(Продукция)   Тогда
									Добав.GTIN=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(Добав.НаименованиеТовара.GTIN),14,"0");
								КонецЕсли;
								Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан Тогда
									Добав.Принят=Истина;
								Иначе
									Добав.Принят=Ложь;
								КонецЕсли;
								Попытка
								//Если NNN_2<>Неопределено Тогда
								//	accepted=Неопределено;
								//	Если NNN_2.products[Сч].Свойство("accepted",accepted) Тогда
								//		Если accepted="true" Тогда
								//			Добав.Принят=Истина;
								//		Иначе
								//			Добав.Принят=Ложь;
								//			
								//		КонецЕсли;
								//	Иначе
								//		Добав.Принят=Ложь;
								//	Конецесли;
								//	Сч=Сч+1;
								//Конецесли;
							Исключение
								КонецПопытки;
								НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
								НСтр.Сумма=НСтр.Сумма+Добав.цена;
								НСтр.НДС=НСтр.НДС+Добав.НДС;
								НСтр.Цена=НСТР.Сумма/НСтр.КОличествоКМ;
								
								
								
							Конеццикла;
							
							
						Иначе
							
							
												Для Каждого Стр_Уп Из Стр_1.ИндивидуальныеУпаковки Цикл
						
						
							ШтрихКод=Стр_Уп;
							
							
							Если Сред(ШтрихКод,1,1)="(" Тогда
								ШтрихКод=Сред(ШтрихКод,2);
								Если сред(ШтрихКод,3,1)=")" Тогда
									ШтрихКод=Сред(ШтрихКод,1,2)+Сред(ШтрихКод,4);
								КонецЕсли;
								Если Сред(ШтрихКод,17,1)="(" Тогда
									ШтрихКод=Сред(ШтрихКод,1,16)+ Сред(ШтрихКод,18);
								КонецЕсли;
								Если Сред(ШтрихКод,19,1)=")" Тогда
									ШтрихКод=Сред(ШтрихКод,1,18)+ Сред(ШтрихКод,20);
								КонецЕсли;
								Если Сред(ШтрихКод,26,6)="(8005)" Тогда
									ШтрихКод=Сред(ШтрихКод,1,25)+ Сред(ШтрихКод,27,4)+Сред(ШтрихКод,32);
								КонецЕсли;
								
								
							КонецЕсли;
							
														Добав_Короба=Добб.Короба.Добавить();
							Добав_Короба.НомерКороба=НомерСредИдент;
							Добав_Короба.ШтрихКод=ШтрихКод;

								
							Конеццикла;
					   // КонецЕсли;
						
					   
					   Для Каждого Стр_Уп Из Стр_1.КонтрольныеИдентификационныеЗнаки Цикл
						
						
							ШтрихКод=Стр_Уп;
							
							Если Сред(ШтрихКод,1,1)="(" Тогда
								ШтрихКод=Сред(ШтрихКод,2);
								Если сред(ШтрихКод,3,1)=")" Тогда
									ШтрихКод=Сред(ШтрихКод,1,2)+Сред(ШтрихКод,4);
								КонецЕсли;
								Если Сред(ШтрихКод,17,1)="(" Тогда
									ШтрихКод=Сред(ШтрихКод,1,16)+ Сред(ШтрихКод,18);
								КонецЕсли;
								Если Сред(ШтрихКод,19,1)=")" Тогда
									ШтрихКод=Сред(ШтрихКод,1,18)+ Сред(ШтрихКод,20);
								КонецЕсли;
								Если Сред(ШтрихКод,26,6)="(8005)" Тогда
									ШтрихКод=Сред(ШтрихКод,1,25)+ Сред(ШтрихКод,27,4)+Сред(ШтрихКод,32);
								КонецЕсли;
								
								
							КонецЕсли;
							
							Добав_Короба=Добб.Короба.Добавить();
							Добав_Короба.НомерКороба=НомерСредИдент;
							Добав_Короба.ШтрихКод=ШтрихКод;
							



							Конеццикла;
							
							
							
							
							ИндивидуальнаяУпаковка=ложь;
					
				    КонецЕсли;
					

					
				
				Если ЗначениеЗаполнено(Стр_1.ИдентификаторТранспортнойУпаковки) Тогда
					
						
						ШтрихКод=Стр_1.ИдентификаторТранспортнойУпаковки;
						
						Если Сред(ШтрихКод,1,1)="(" Тогда
							ШтрихКод=Сред(ШтрихКод,2);
							Если сред(ШтрихКод,3,1)=")" Тогда
								ШтрихКод=Сред(ШтрихКод,1,2)+Сред(ШтрихКод,4);
							КонецЕсли;
							Если Сред(ШтрихКод,17,1)="(" Тогда
								ШтрихКод=Сред(ШтрихКод,1,16)+ Сред(ШтрихКод,18);
							КонецЕсли;
							Если Сред(ШтрихКод,19,1)=")" Тогда
								ШтрихКод=Сред(ШтрихКод,1,18)+ Сред(ШтрихКод,20);
							КонецЕсли;
							Если Сред(ШтрихКод,26,6)="(8005)" Тогда
								ШтрихКод=Сред(ШтрихКод,1,25)+ Сред(ШтрихКод,27,4)+Сред(ШтрихКод,32);
							КонецЕсли;
							
							
						КонецЕсли;
						
						Если Добб.СерийныеНомера.Найти(ШтрихКод,"cis")<>Неопределено Тогда
							Продолжить;
						Конецесли;
						
						ИндивидуальнаяУпаковка=Истина;
						НомерСредИдент=ШтрихКод;
	
		

						
						product_description="";
						Продукция=СоздатьНайтиПр_УПД(ШтрихКод,Стр_З,КодСтраны);
						Если ЗначениеЗАполнено(Продукция) тогда
							product_description=Строка(Продукция);
								НСтр.GTIN=Продукция;
								НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
							//НСТр.НаименованиеТовара=Продукция.Наименование;
							ДобавилиПр=Истина;
						Иначе
							
							СпрН=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_З.Наименование);
							Если Не ЗначениеЗаполнено(СпрН) Тогда
							
								СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
			НаименованиеЕдиницыИзмерения="";
			Если Стр_З.Свойство("НаименованиеЕдиницыИзмерения",НаименованиеЕдиницыИзмерения) тогда
								
								ЕдИзм=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоНаименованию(НаименованиеЕдиницыИзмерения);
								Если Не ЗначениеЗаполнено(ЕдИзм) тогда
									Ед=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
									Ед.Код=Стр_З.ОКЕИ;
									Ед.Наименование=НаименованиеЕдиницыИзмерения;
									Ед.Записать();
									ЕдИзМ=Ед.ссылка;
									
								КонецЕсли;
								СпрПр.ЕдиницаИзмерения_УПД=ЕдИзм.Ссылка;
							КонецЕсли;
								СпрПр.Наименование=Стр_З.Наименование;
								СпрПр.НаименованиеТовара=Стр_З.Наименование;
								СпрПр.Записать();
								СпрН= СпрПр.Ссылка;
							КонецЕсли;
							Продукция=СпрН;
							product_description=Строка(Продукция);
								НСтр.GTIN=Продукция;
								НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
							//НСТр.НаименованиеТовара=Продукция.Наименование;
							ДобавилиПр=Истина;
							

							//product_description=Стр_З;
							//еСЛИ                        Стр_з.Свойство("product_description",product_description) Тогда
								
							//Иначе
							//	children="";
							//	еСЛИ                        Стр_з.Свойство("children",children) Тогда
							//		Для Каждого Стр_children Из children Цикл
							//			                                                                       product_description="";
							//				еСЛИ                   Стр_children.Свойство("product_description",product_description) Тогда
											//	НСТр=Добб.Товары.Добавить();
											//	НСТр.НаименованиеТовара=product_description;
							//				//	НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
							//					Прервать;
							//				КонецЕсли;
										
							//		КонецЦикла;
									
							//	КонецЕсли;
								
								
							КонецЕсли;
							
								//НСТр.НаименованиеТовара=product_description;
								НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
							
						//КонецЕслИ;
						КоличествоКМ=0;
								//children="";
								//еСЛИ                        Стр_з.Свойство("children",children) Тогда
								//	Для Каждого Стр_children Из children Цикл
								//		ДобавК=Добб.Короба.Добавить();
								//		ДобавК.НомерКороба=Стр_З.uitu_code;
								//		ШтрихКод="";
								//		Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
								//			ШтрихКод=Стр_children.uit_code;
								//			КоличествоКМ=КоличествоКМ+1;
								//			НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
								//		Иначе
								//			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.РекурсияУпаковки_Приход(Стр_children,НСтр,Добб,КоличествоКМ);
								//		КонецЕсли;
								//		//ДобавК.КоличестоКМ=НСтр.КоличествоНомеровКМ;
								//		ДобавК.ШтрихКод=ШтрихКод;
								//		
								//	КонецЦикла;
								//Иначе
									НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
									КоличествоКМ=1;
								//КонецЕсли;

						
							Добав=Добб.СерийныеНомера.Добавить();
							Добав.КоличествоКМ=КоличествоКМ;
							Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
							стр_З.Свойство("Цена",Добав.Цена);
							//Добав.Цена=Стр_з.product_cost;
							//=Стр_з.product_tax;
							ЦенаБезНДС=0;
							//стр_З.Свойство("price",ЦенаБезНДС);
							
							Если Значениезаполнено(стр_З.СуммаБезНДС) Тогда
								Добав.НДС=стр_З.СуммаБезНДС/стр_З.Количество;//Добав.Цена-ЦенаБезНДС;
							Иначе
								Добав.НДС=0;
							КонецЕсли;
							//стр_З.Свойство("product_tax",Добав.НДС);
							Добав.НаименованиеТовараСтрокой=НСТр.НаименованиеТовара;
							uit_code="";
								Добав.cis=ШтрихКод;
								еСЛИ Сред(Добав.cis,1,2)="01" Тогда
									Добав.GTIN=Сред(Добав.cis,3,14);
								Иначе
									Добав.GTIN=Сред(Добав.cis,1,14);
								КонецЕсли;
								
								Попытка
									Числ=Число(Добав.GTIN);
								Исключение
									Добав.GTIN="";
								КонецПопытки;

								//Добав.GTIN=Сред(Добав.cis,3,14);
								
								
							Добав.НаименованиеТовара=Продукция;
							Если ЗначениеЗаполнено(Продукция)   Тогда
								Добав.GTIN=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(Добав.НаименованиеТовара.GTIN),14,"0");
							КонецЕсли;
							Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан Тогда
								Добав.Принят=Истина;
							Иначе
								Добав.Принят=Ложь;
							КонецЕсли;
							Попытка
							//Если NNN_2<>Неопределено Тогда
							//	accepted=Неопределено;
							//	Если NNN_2.products[Сч].Свойство("accepted",accepted) Тогда
							//		Если accepted="true" Тогда
							//			Добав.Принят=Истина;
							//		Иначе
							//			Добав.Принят=Ложь;
							//			
							//		КонецЕсли;
							//	Иначе
							//		Добав.Принят=Ложь;
							//	Конецесли;
							//	Сч=Сч+1;
							//Конецесли;
						Исключение
							КонецПопытки;
							НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
							НСтр.Сумма=НСтр.Сумма+Добав.цена;
							НСтр.НДС=НСтр.НДС+Добав.НДС;
							НСтр.Цена=НСТР.Сумма/НСтр.КОличествоКМ;
							
							
							
//						Конеццикла;
				   // КонецЕсли;
					

					
					
					
				КонецЕсли;
				
				
				КонецЦикла;
				Если Не ЗначениеЗаполнено(НСтр.GTIN) Тогда	
					
					СпрН=СоздатьНайтиПр_УПД("",Стр_З,КодСтраны);
					Продукция=СпрН;
							product_description=Строка(Продукция);
								НСтр.GTIN=Продукция;
								НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
							//НСТр.НаименованиеТовара=Продукция.Наименование;
							//					СпрН=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_З.Наименование);
							//Если Не ЗначениеЗаполнено(СпрН) Тогда
							//
							//	СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
							//	ЕдИзм=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_З.НаименованиеЕдиницыИзмерения);
							//	Если Не ЗначениеЗаполнено(ЕдИзм) тогда
							//		Ед=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
							//		Ед.Код=Стр_З.ОКЕИ;
							//		Ед.Наименование=Стр_З.НаименованиеЕдиницыИзмерения;
							//		Ед.Записать();
							//		ЕдИзМ=Ед.ссылка;
							//		
							//	КонецЕсли;
							//	СпрПр.ЕдиницаИзмерения_УПД=ЕдИзм.Ссылка;
							//	СпрПр.Наименование=Стр_З.Наименование;
							//	СпрПр.НаименованиеТовара=Стр_З.Наименование;
							//	СпрПр.Записать();
							//	СпрН= СпрПр.Ссылка;
							//КонецЕсли;
							//Продукция=СпрН;
							//product_description=Строка(Продукция);
							//	НСтр.GTIN=Продукция;
							//	НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
							//НСТр.НаименованиеТовара=Продукция.Наименование;
							ДобавилиПр=Истина;
							
КонецЕсли;
			
			Стр_З.Свойство("Количество",Нстр.КоличествоКМ);
			Единиц=Неопределено;
			Стр_З.Свойство("НаименованиеЕдиницыИзмерения",Единиц);
			Если ЗначениеЗаполнено(Единиц) тогда
				Единица=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоНаименованию(Единиц);
				Если Не ЗначениеЗАполнено(Единица) тогда
					Единица=справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
					Единица.Код=Стр_З.ОКЕИ;
					Единица.Наименование=Единиц;
				КонецЕсли;
				НСтр.ЕдиницаИзмерения=Единица.Ссылка;
			КонецЕсли;
			Стр_З.Свойство("СуммаНДС",Нстр.НДС);
			Стр_З.Свойство("Сумма",Нстр.Сумма);
			Если НСтр.КоличествоКМ<>0 Тогда
				НСтр.Цена=НСтр.Сумма/НСтр.КоличествоКМ;
			КонецЕсли;
			
			
			Если ЗначениеЗаполнено(КодВУчетнойСистемеИзXML) тогда
				
				ИщемШтрих="";
				ТекстоваяИнформация=Неопределено;;
				Если Стр_З.Свойство("ТекстоваяИнформация",ТекстоваяИнформация)=Истина Тогда
					Для каждого Стр_1 Из ТекстоваяИнформация Цикл
						Если ВРЕГ(Стр_1.Идентификатор)=Врег(КодВУчетнойСистемеИзXML) ТОгда
							ИщемШтрих=Стр_1.Значение;
							Прервать;
						КонецЕсли;
	 				Конеццикла;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИщемШтрих) 
					И (Не ЗначениеЗаполнено(Нстр.GTIN.КодВУчетнойСистеме)
					
					ИЛИ ОбновлятьКодВУчетнойСистеме)
					Тогда
					
					ПолОб=Нстр.GTIN.ПолучитьОбъект();
					ПолОб.КодВУчетнойСистеме=ИщемШтрих;
					ПолОб.ЗаписатЬ();
					СпрН=Нстр.GTIN.Ссылка;
					
				Конецесли;
				
				
			Иначе
				КодТовара="";
				Если Стр_З.Свойство("КодТовара",КодТовара) И ЗначениеЗаполнено(КодТовара)
					И (Не ЗначениеЗаполнено(Нстр.GTIN.КодВУчетнойСистеме)
					
					ИЛИ ОбновлятьКодВУчетнойСистеме
					)
					тогда
					ПолОб=Нстр.GTIN.ПолучитьОбъект();
					ПолОб.КодВУчетнойСистеме=КодТовара;
					ПолОб.ЗаписатЬ();
					СпрН=Нстр.GTIN.Ссылка;
					
					
				КонецЕсли;
			Конецесли;
			
			
		Иначе
			
			Нстр=Добб.Товары.Добавить();
			НСтр.НомерСтрокиСвязи=НСтр.НомерСтроки;
			НСтр.НомерГТД=НомерГТДЗаписываем;
			
			Нстр.НаименованиеТовара=Стр_З.Наименование;
			
			НаименованиеЕдиницыИзмерения="";
			Если Стр_З.Свойство("НаименованиеЕдиницыИзмерения",НаименованиеЕдиницыИзмерения) Тогда
				ЕдИзм=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоНаименованию(НаименованиеЕдиницыИзмерения);
				Если Не ЗначениеЗаполнено(ЕдИзм) тогда
					Ед=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
					Ед.Код=Стр_З.ОКЕИ;
					Ед.Наименование=НаименованиеЕдиницыИзмерения;
					Ед.Записать();
					ЕдИзМ=Ед.ссылка;
					
				КонецЕсли;
				НСтр.ЕдиницаИзмерения=ЕдИзМ;
			КонецЕсли;

			//Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоНаименованию(");
			
			
			//Если СтрДлина(Штрихкод)>=31
			//	
			//	Тогда
			//	
			//	Попытка
			//		Если Сред(ШтрихКод,2)="01" Тогда	
			//			ШтрихКод=Сред(ШтрихКод,3);
			//		КонецЕсли;
			//		СпрПр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(Сред(ШтрихКод,1,14)));

			//	Исключение

			//		Возврат Неопределено;
			//	КонецПопытки;
			//	Если ЗначениеЗаполнено(СпрПр) тогда
			//		Возврат СпрПр;
			//	КонецЕсли;
			//	СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
			//	СпрПр.GTIN=Сред(ШтрихКод,1,14);
			//	ЕдИзм=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_ыЗ.НаименованиеЕдиницыИзмерения);
			//	Если Не ЗначениеЗаполнено(ЕдИзм) тогда
			//		Ед=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
			//		Ед.Код=Стр_ыЗ.ОКЕИ;
			//		Ед.Наименование=Стр_ыЗ.НаименованиеЕдиницыИзмерения;
			//		Ед.Записать();
			//		ЕдИзМ=Ед.ссылка;
			//		
			//	КонецЕсли;
			//	СпрПр.ЕдиницаИзмерения_УПД=ЕдИзм.Ссылка;
			//	СпрПр.Наименование=Стр_ыЗ.Наименование;
			//	СпрПр.НаименованиеТовара=Стр_ыЗ.Наименование;
			//	СпрПр.Записать();
			//	Возврат СпрПр.Ссылка;
			//	
			//КонецЕсли;
			
						
			Идентификатор_Щ=Врег(КодВУчетнойСистемеИзXML);
			Если Не ЗначениеЗаполненО(Идентификатор_Щ) тогда
				Идентификатор_Щ="ШТРИХКОД";
			Конецесли;
			
			ИщемШтрих="";
			ТекстоваяИнформация=Неопределено;;
			Если Стр_З.Свойство("ТекстоваяИнформация",ТекстоваяИнформация)=Истина Тогда
				Для каждого Стр_1 Из ТекстоваяИнформация Цикл
					Если ВРЕГ(Стр_1.Идентификатор)=Идентификатор_Щ ТОгда
						ИщемШтрих=Стр_1.Значение;
						Прервать;
					КонецЕсли;
 				Конеццикла;
			КонецЕсли;
			
			
			
			//СпрН=СоздатьНайтиПр_УПД("",Стр_З,КодСтраны);
			СпрН=Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка();
			Если ЗначениеЗаполнено(ИщемШтрих) Тогда
				СпрН=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("КодВУчетнойСистеме",ИщемШтрих);
				Если ЗначениеЗаполнено(СпрН) И СпрН.СтранаПроизводства.Код<>КодСтраны И ЗначениеЗАполнено(КодСтраны) Тогда
					СпрНовый=СпрН.ПолучитьОбъект();
					СпрНовый.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду(КодСтраны);;
					СпрНовый.Записать();
					СпрН=СпрНовый.Ссылка;
					
				ИначеЕсли Не ЗначениеЗаполнено(СпрН) Тогда
					СпрНовый=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
					СпрНовый.КодВУчетнойСистеме=ИщемШтрих;
					СпрНовый.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду(КодСтраны);
					
					НаименованиеЕдиницыИзмерения="";
					Если Стр_З.Свойство("НаименованиеЕдиницыИзмерения",НаименованиеЕдиницыИзмерения) Тогда
					
						ЕдИзм=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоНаименованию(НаименованиеЕдиницыИзмерения);
						Если Не ЗначениеЗаполнено(ЕдИзм) тогда
							Ед=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
							Ед.Код=Стр_З.ОКЕИ;
							Ед.Наименование=НаименованиеЕдиницыИзмерения;
							Ед.Записать();
							ЕдИзМ=Ед.ссылка;
							
						КонецЕсли;
					КонецЕслИ;
					СпрНовый.ЕдиницаИзмерения_УПД=ЕдИзм.Ссылка;
					СпрНовый.Наименование=Стр_З.Наименование;
					СпрНовый.НаименованиеТовара=Стр_З.Наименование;
					СпрНовый.Записать();
					СпрН=СпрНовый.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СпрН) Тогда
				спрН=СоздатьНайтиПр_УПД("",Стр_З,КодСтраны);
				//Справочники.Продукция_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_З.Наименование);
				//Если Не ЗначениеЗаполнено(СпрН) Тогда
				//	
				//	СпрНовый=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
				//	//СпрНовый.КодВУчетнойСистеме=ИщемШтрих;
				//	ЕдИзм=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_З.НаименованиеЕдиницыИзмерения);
				//	Если Не ЗначениеЗаполнено(ЕдИзм) тогда
				//		Ед=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
				//		Ед.Код=Стр_З.ОКЕИ;
				//		Ед.Наименование=Стр_З.НаименованиеЕдиницыИзмерения;
				//		Ед.Записать();
				//		ЕдИзМ=Ед.ссылка;
				//		
				//	КонецЕсли;
				//	СпрНовый.ЕдиницаИзмерения_УПД=ЕдИзм.Ссылка;
				//	СпрНовый.Наименование=Стр_З.Наименование;
				//	СпрНовый.НаименованиеТовара=Стр_З.Наименование;
				//	СпрНовый.Записать();
				//	СпрН=СпрНовый.Ссылка;
				//	
				//КонецЕсли;
				
			КонецЕсли;
			
			КодТовара="";
			Если Стр_З.Свойство("КодТовара",КодТовара) И ЗначениеЗаполнено(КодТовара)
				И Не ЗначениеЗаполнено(СпрН.КодВУчетнойСистеме) тогда
				ПолОб=СпрН.ПолучитьОбъект();
				ПолОб.КодВУчетнойСистеме=КодТовара;
				ПолОб.ЗаписатЬ();
				СпрН=ПолОб.Ссылка;
				
				
			КонецЕсли;
			
			НСтр.GTIN=СпрН;
			
			Стр_З.Свойство("Количество",Нстр.КоличествоКМ);
			Единиц=Неопределено;
			Стр_З.Свойство("НаименованиеЕдиницыИзмерения",Единиц);
			Если ЗначениеЗаполнено(Единиц) тогда
				Единица=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоНаименованию(Единиц);
				Если Не ЗначениеЗАполнено(Единица) тогда
					Единица=справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
					Единица.Код=Стр_З.ОКЕИ;
					Единица.Наименование=Единиц;
				КонецЕсли;
				НСтр.ЕдиницаИзмерения=Единица.Ссылка;
			КонецЕсли;
			Стр_З.Свойство("СуммаНДС",Нстр.НДС);
			Стр_З.Свойство("Сумма",Нстр.Сумма);
			Если НСтр.КоличествоКМ<>0 Тогда
				НСтр.Цена=НСтр.Сумма/НСтр.КоличествоКМ;
			КонецЕсли;
			
			
		//	ОшибкаЗагрузки=Истина;
			
		//	Сообщить("В документе: пропущена строка с номенклатурой :"+Стр_з.Наименование+" так как в ней не указаны коды маркировки");
		КонецЕсли;
			
			
	Конеццикла;
		
	Если НастройкиПр.ГрузитьПоступленияТолькоСМаркировкойПоЭДО=Истина И Добб.СерийныеНомера.Количество()=0 
		Тогда
		Возврат Неопределено;
	КонецЕсли;
	
		
			
		Добб.УПД=Истина;
		Добб.ТипЭДО=ТипЭДО;
		Если ТипЭДО=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОФайл Тогда
			Добб.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан;
		ИначеЕсли ТипЭДО=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОЛайт 
			ИЛИ ТипЭДО=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОТензор
			ИЛИ ТипЭДО=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОКонтур
			Тогда
			Добб.СтатусУПД=АдресРеквизитов.Статус;
		
		КонецЕсли;
		
		Добб.Записать();
		Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
			ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ЧастичноПринят
			ИЛИ Добб.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан
			Тогда
			Попытка
				Добб.ПометкаУдаления=Ложь;
				Добб.Записать(РежимЗаписиДокумента.Проведение) 
			Исключение
			КонецПопытки;
		КонецЕсли;
					//МассивУп.Добавить(Добб.Ссылка);
		  					МассивУп.Добавить(Новый Структура("Статус,документ",АдресРеквизитов.Статус,Добб.Ссылка));

					Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
						 ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапистьПриемкку(Добб.Ссылка,РеквизитыЭлектронногоДокумента.ТекстФайла);
						
					Конецесли;
				Возврат Добб.Ссылка;
		
//					Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
//					 ЗапистьПриемкку(Добб.Ссылка,Текст1);
					
//				Конецесли;

							//Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
						 ///ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапистьПриемкку(Добб.Ссылка,Текст1);
						
//					Конецесли;

		
КонецФункции

Функция ЗагрузкаОтгуркзкиИзXML(РеквизитыЭлектронногоДокумента,МассивУп,ЗаписыватьДанныеПриОтправкеЗаказа,Пользователь,АдресРеквизитов,ТипЭДО,ОшибкаЗагрузки=Ложь,Обновлять=Ложь) Экспорт
	
		
		
		trade_recipient_inn="";
		
		
			
			Организация=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",
			РеквизитыЭлектронногоДокумента.Продавец.РеквизитыКонтрагента.ИНН);
			
			Если Не ЗначениеЗаполнено(Организация) Тогда
				
				СпрОрг=Справочники.Организации_ХамелеонЦРПТ.СоздатьЭлемент();
				СпрОрг.ИНН=РеквизитыЭлектронногоДокумента.Продавец.РеквизитыКонтрагента.ИНН;
				РеквизитыЭлектронногоДокумента.Продавец.РеквизитыКонтрагента.Свойство("КПП",СпрОрг.КПП);
				РеквизитыЭлектронногоДокумента.Продавец.Свойство("НаименованиеКонтрагента",СпрОрг.Наименование);
				СпрОрг.ИД_ЭДО=РеквизитыЭлектронногоДокумента.СведенияОбУчастникахЭДО.ИдентификаторОтправителя;
				СпрОрг.Записать();
				Организация=СпрОрг.Ссылка;
			КонецЕсли;
			Если Организация.ИД_ЭДО<>РеквизитыЭлектронногоДокумента.СведенияОбУчастникахЭДО.ИдентификаторОтправителя Тогда
				ПолОб=Организация.ПолучитьОбъект();
				ПолОб.ИД_ЭДО=РеквизитыЭлектронногоДокумента.СведенияОбУчастникахЭДО.ИдентификаторОтправителя;
				ПолОб.Записать();
				Организация=ПолОб.Ссылка;
			КонецЕсли;

				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	Отгрузка_ХамелеонЦРПТ.Ссылка
					|ИЗ
					|	Документ.Отгрузка_ХамелеонЦРПТ КАК Отгрузка_ХамелеонЦРПТ
					|ГДЕ
					|	Отгрузка_ХамелеонЦРПТ.Организация = &Организация
					|	И Отгрузка_ХамелеонЦРПТ.Order_ID_УПД = &ДокументОтгрузки";
				
				Запрос.УстановитьПараметр("ДокументОтгрузки", Сред(РеквизитыЭлектронногоДокумента.ИдентификаторДокументооборота,1,36));
				Запрос.УстановитьПараметр("Организация", Организация);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				
				Если НЕ  ВыборкаДетальныеЗаписи.Следующий() Тогда
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		      
					Добб_1=ДОкументы.Отгрузка_ХамелеонЦРПТ.СоздатьДокумент();
					
					//Добб_1.УстановитьСсылкуНового(Добб);
					Добб=Добб_1;
					Добб.Дата=ТекущаяДата();

				Иначе
					Если НЕ Обновлять Тогда
						МассивУп.Добавить(Новый Структура("Статус,документ",АдресРеквизитов.Статус,ВыборкаДетальныеЗаписи.Ссылка));
						Возврат Неопределено;
					Конецесли;
					Добб=	ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				КонецЕсли;
				//Иначе
				//	Добб=Добб.ПолучитьОбъект();
				//КонецЕсли;
				
ИмяФайлаЭД="";
				Если РеквизитыЭлектронногоДокумента.Свойство("ИмяФайлаЭД",ИмяФайлаЭД) Тогда
					Добб.ИмяФайлаЭД=ИмяФайлаЭД;
				Иначе
					Добб.ИмяФайлаЭД=РеквизитыЭлектронногоДокумента.ИдентификаторДокументооборота;
					
					КонецЕсли;
					Добб.Order_ID_УПД=РеквизитыЭлектронногоДокумента.ИдентификаторДокументооборота;
					
					//РеквизитыЭлектронногоДокумента.Свойство("ИдСамогоДокумента",Добб._Order_ID);
					
					
					
					
					
			Добб.Организация=Организация;
			
			
			АдресДляОрганизации=РеквизитыЭлектронногоДокумента.Продавец.СведенияОбАдресе.Адрес;
			ВидАдреса="";
			//Если АдресДляОрганизации.Свойство("ВидАдреса",ВидАдреса) Тогда
				
				
			//Иначе
			Если АдресДляОрганизации<>Неопределено тогда
				АдресТекст="";
				Если 	АдресДляОрганизации.Свойство("АдресТекст",АдресТекст) Тогда
					Если Организация.АдресМестонахождения<>АдресТекст Тогда
						ПолОб=Организация.ПолучитьОбъект();
						ПолОб.АдресМестонахождения=АдресТекст;
						ПолОб.ЗаписатЬ();
					КонецЕсли;
				Иначе
					АдресРФ=АдресДляОрганизации;
					РегДвиж=РегистрыСведений.Адрес_ХамелеонЦРПТ.СоздатьНаборЗаписей();
					РегДвиж.Отбор.Объект.Установить(Организация);
					РегДвиж.Отбор.Тип.Установить(Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический);
					Добав=РегДвиж.Добавить();
					Добав.Объект=Организация;
					Добав.Тип=Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический;
					АдресРФ=АдресДляОрганизации;
					АдресРФ.Свойство("Индекс",Добав.Индекс);
					
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
					АдресРФ.Свойство("КодРегиона",Добав.КодРегиона);
				
			    	АдресРФ.Свойство("Район",Добав.Район);
				
			    	АдресРФ.Свойство("Город",Добав.Город);
			    	АдресРФ.Свойство("НаселПункт",Добав.НаселенныйПункт);
			    	АдресРФ.Свойство("Улица",Добав.Улица);
			    	АдресРФ.Свойство("Дом",Добав.Дом);
			    	АдресРФ.Свойство("Корпус",Добав.Корпус);
			    	АдресРФ.Свойство("Кварт",Добав.Квартира);
					РегДвиж.Записать(Истина);		
					
				
					
				КонецЕслИ;
			Конецесли;	
			
			
			//Добб.СтатусУПД=перечисления.СтатусыУПД_ХамелеонЦРПТ[Заказ.status];
			//Добб.Номер=РеквизитыЭлектронногоДокумента.Номер;
			Добб.НомерПервичногоДокумента=РеквизитыЭлектронногоДокумента.Номер;
			
			Добб.ТекущийПользователь=Пользователь;
			
			Добб.статусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан;
			//ДатаДокумента=Заказ.content.date;
			Добб.Дата=РеквизитыЭлектронногоДокумента.Дата;
			//Дата(Сред(ДатаДокумента,1,4),Сред(ДатаДокумента,6,2),Сред(ДатаДокумента,9,2),Сред(ДатаДокумента,12,2),Сред(ДатаДокумента,15,2),Сред(ДатаДокумента,18,2));
			
			Добб.Контрагент=СоздатьНайтиКонтрагента_Отгрузка_УПД(РеквизитыЭлектронногоДокумента);
			
	
			АдресДляОрганизации=РеквизитыЭлектронногоДокумента.Покупатель.СведенияОбАдресе.Адрес;
			
			Если АдресДляОрганизации<>Неопределено тогда
				АдресТекст="";
				Если 	АдресДляОрганизации.Свойство("АдресТекст",АдресТекст) Тогда
					Если Добб.Контрагент.АдресМестонахождения<>АдресТекст Тогда
						ПолОб=Добб.Контрагент.ПолучитьОбъект();
						ПолОб.ЮридическийАдрес=АдресТекст;
						ПолОб.ЗаписатЬ();
					КонецЕсли;
				Иначе
					АдресРФ=АдресДляОрганизации;
					РегДвиж=РегистрыСведений.Адрес_ХамелеонЦРПТ.СоздатьНаборЗаписей();
					РегДвиж.Отбор.Объект.Установить(Добб.Контрагент);
					РегДвиж.Отбор.Тип.Установить(Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический);
					Добав=РегДвиж.Добавить();
					Добав.Объект=Добб.Контрагент;
					Добав.Тип=Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический;
					АдресРФ=АдресДляОрганизации;
					АдресРФ.Свойство("Индекс",Добав.Индекс);
			
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
					АдресРФ.Свойство("КодРегиона",Добав.КодРегиона);
				
			    	АдресРФ.Свойство("Район",Добав.Район);
				
			    	АдресРФ.Свойство("Город",Добав.Город);
			    	АдресРФ.Свойство("НаселПункт",Добав.НаселенныйПункт);
			    	АдресРФ.Свойство("Улица",Добав.Улица);
			    	АдресРФ.Свойство("Дом",Добав.Дом);
			    	АдресРФ.Свойство("Корпус",Добав.Корпус);
			    	АдресРФ.Свойство("Кварт",Добав.Квартира);
					РегДвиж.Записать(Истина);		
					
				
				Конецесли;	
			КонецЕслИ;
			

			
			
			
			
			//Добб.НомерВходящий=Заказ.body.document_number;
			
			Добб.Грузополучатель=Неопределено;
			Грузоотправитель=Неопределено;
			Если РеквизитыЭлектронногоДокумента.Свойство("Грузополучатель",Грузоотправитель) Тогда
				Если ТипЗнч(Грузоотправитель)=Тип("Структура") тогда
					Добб.Грузополучатель=СоздатьНайтиКонтрагента_Отгрузка_УПД_Гр(РеквизитыЭлектронногоДокумента,Добб.Контрагент)  ;
					
				АдресДляОрганизации=Грузоотправитель.СведенияОбАдресе.Адрес;
				
				
				Если 	АдресДляОрганизации<>Неопределено Тогда
					АдресТекст="";
					Если 	АдресДляОрганизации.Свойство("АдресТекст",АдресТекст) Тогда
						Если Добб.Грузополучатель.ФактическийАдрес<>АдресТекст Тогда
							ПолОб=Добб.Грузополучатель.ПолучитьОбъект();
							ПолОб.ФактическийАдрес=АдресТекст;
							ПолОб.ЗаписатЬ();
						КонецЕсли;
					Иначе
						АдресРФ=АдресДляОрганизации;
						РегДвиж=РегистрыСведений.Адрес_ХамелеонЦРПТ.СоздатьНаборЗаписей();
						РегДвиж.Отбор.Объект.Установить(Добб.Грузополучатель);
						РегДвиж.Отбор.Тип.Установить(Перечисления.ТипАдреса_ХамелеонЦРПТ.Фактический);
						Добав=РегДвиж.Добавить();
						Добав.Объект=Добб.Грузополучатель;
						Добав.Тип=Перечисления.ТипАдреса_ХамелеонЦРПТ.Фактический;
						АдресРФ=АдресДляОрганизации;
						АдресРФ.Свойство("Индекс",Добав.Индекс);
				
							// Вставить обработку выборки ВыборкаДетальныеЗаписи
						АдресРФ.Свойство("КодРегиона",Добав.КодРегиона);
					
				    	АдресРФ.Свойство("Район",Добав.Район);
					
				    	АдресРФ.Свойство("Город",Добав.Город);
				    	АдресРФ.Свойство("НаселПункт",Добав.НаселенныйПункт);
				    	АдресРФ.Свойство("Улица",Добав.Улица);
				    	АдресРФ.Свойство("Дом",Добав.Дом);
				    	АдресРФ.Свойство("Корпус",Добав.Корпус);
				    	АдресРФ.Свойство("Кварт",Добав.Квартира);
						РегДвиж.Записать(Истина);		
						
					
						
					КонецЕслИ;
				
	
				  Конецесли;
						
								
					
					
				КонецЕсли;
			КонецЕсли;
			
			
			Добб.Грузоотправитель=Неопределено;
			Грузоотправитель=Неопределено;
			Если РеквизитыЭлектронногоДокумента.Свойство("Грузоотправитель",Грузоотправитель) Тогда
				Если ТипЗнч(Грузоотправитель)=Тип("Структура") тогда
					Добб.Грузоотправитель=СоздатьНайтиКонтрагента_Приемка_УПД_Гр(РеквизитыЭлектронногоДокумента,Добб.Организация) ;
					
					   АдресДляОрганизации=Грузоотправитель.СведенияОбАдресе.Адрес;
				
					  Если АдресДляОрганизации<>Неопределено тогда
					
						АдресТекст="";
						Если 	АдресДляОрганизации.Свойство("АдресТекст",АдресТекст) Тогда
							Если Добб.Грузоотправитель.ФактическийАдрес<>АдресТекст Тогда
								ПолОб=Добб.Грузоотправитель.ПолучитьОбъект();
								ПолОб.ФактическийАдрес=АдресТекст;
								ПолОб.ЗаписатЬ();
							КонецЕсли;
						Иначе
							АдресРФ=АдресДляОрганизации;
							РегДвиж=РегистрыСведений.Адрес_ХамелеонЦРПТ.СоздатьНаборЗаписей();
							РегДвиж.Отбор.Объект.Установить(Добб.Грузоотправитель);
							РегДвиж.Отбор.Тип.Установить(Перечисления.ТипАдреса_ХамелеонЦРПТ.Фактический);
							Добав=РегДвиж.Добавить();
							Добав.Объект=Добб.Грузоотправитель;
							Добав.Тип=Перечисления.ТипАдреса_ХамелеонЦРПТ.Фактический;
							АдресРФ=АдресДляОрганизации;
							АдресРФ.Свойство("Индекс",Добав.Индекс);
					
								// Вставить обработку выборки ВыборкаДетальныеЗаписи
							АдресРФ.Свойство("КодРегиона",Добав.КодРегиона);
						
					    	АдресРФ.Свойство("Район",Добав.Район);
						
					    	АдресРФ.Свойство("Город",Добав.Город);
					    	АдресРФ.Свойство("НаселПункт",Добав.НаселенныйПункт);
					    	АдресРФ.Свойство("Улица",Добав.Улица);
					    	АдресРФ.Свойство("Дом",Добав.Дом);
					    	АдресРФ.Свойство("Корпус",Добав.Корпус);
					    	АдресРФ.Свойство("Кварт",Добав.Квартира);
							РегДвиж.Записать(Истина);		
							
						
							
						КонецЕслИ;
						
					Конецесли;
					
				КонецЕсли;
			КонецЕсли;
			
			
			
				Добб.Перевозчик=Неопределено;
			Грузоотправитель=Неопределено;
			Если РеквизитыЭлектронногоДокумента.Свойство("Перевозчик",Грузоотправитель) Тогда
				Если ТипЗнч(Грузоотправитель)=Тип("Структура") тогда
					Добб.Перевозчик=СоздатьНайтиКонтрагента_Приемка_УПД_Перевозчик(РеквизитыЭлектронногоДокумента) ;
					
					
					   АдресДляОрганизации=Грузоотправитель.СведенияОбАдресе.Адрес;
								
					 Если АдресДляОрганизации<>Неопределено тогда
						АдресТекст="";
						Если 	АдресДляОрганизации.Свойство("АдресТекст",АдресТекст) Тогда
							Если Добб.Перевозчик.Юридическийдрес<>АдресТекст Тогда
								ПолОб=Добб.Перевозчик.ПолучитьОбъект();
								ПолОб.Юридическийдрес=АдресТекст;
								ПолОб.ЗаписатЬ();
							КонецЕсли;
						Иначе
							АдресРФ=АдресДляОрганизации;
							РегДвиж=РегистрыСведений.Адрес_ХамелеонЦРПТ.СоздатьНаборЗаписей();
							РегДвиж.Отбор.Объект.Установить(Добб.Перевозчик);
							РегДвиж.Отбор.Тип.Установить(Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический);
							Добав=РегДвиж.Добавить();
							Добав.Объект=Добб.Перевозчик;
							Добав.Тип=Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический;
							АдресРФ=АдресДляОрганизации;
							АдресРФ.Свойство("Индекс",Добав.Индекс);
					
								// Вставить обработку выборки ВыборкаДетальныеЗаписи
							АдресРФ.Свойство("КодРегиона",Добав.КодРегиона);
						
					    	АдресРФ.Свойство("Район",Добав.Район);
						
					    	АдресРФ.Свойство("Город",Добав.Город);
					    	АдресРФ.Свойство("НаселПункт",Добав.НаселенныйПункт);
					    	АдресРФ.Свойство("Улица",Добав.Улица);
					    	АдресРФ.Свойство("Дом",Добав.Дом);
					    	АдресРФ.Свойство("Корпус",Добав.Корпус);
					    	АдресРФ.Свойство("Кварт",Добав.Квартира);
							РегДвиж.Записать(Истина);		
							
						
							
						КонецЕслИ;
					Конецесли;

					
				КонецЕсли;
			КонецЕсли;

			
			
			Добб.ТипЭДООтправки=ТипЭдо;
			//Добб.ТекущийПользователь=Пользователь;
			
			//ДатаДокумента=Заказ.body.transfer_date;;
			//Добб.ДатаПолуччения=Дата(Сред(ДатаДокумента,1,4),Сред(ДатаДокумента,6,2),Сред(ДатаДокумента,9,2),Сред(ДатаДокумента,12,2),Сред(ДатаДокумента,15,2),Сред(ДатаДокумента,18,2));
			РеквизитыЭлектронногоДокумента.Свойство("ДатаПередачи",Добб.ДатаПередачиТовара) ;
			//=РеквизитыЭлектронногоДокумента.ДатаПередачи;
			
			Добб.ОснованиеОтгрузкиТоваров.очистить();
			Основания="";
			Если РеквизитыЭлектронногоДокумента.Свойство("Основания",Основания) Тогда
				
				Для Каждого Стр_1 Из Основания Цикл
					Добав=Добб.ОснованиеОтгрузкиТоваров.Добавить();
					Добав.НаименованиеДокумента=Стр_1.Наименование;
					Добав.НомерДокумента=Стр_1.Номер;
					Добав.ДатаОтгрузки=Стр_1.Дата;
					Добав.ДополнительыеСведения=Стр_1.ДополнительныеСведения;
					
				Конеццикла;
				
			КонецЕсли;
			
			
			Добб.КПлатежныйДокументам.Очистить();
			
			Основания="";
			Если РеквизитыЭлектронногоДокумента.Свойство("ПлатежноРасчетныеДокументы",Основания) Тогда
				
				Для Каждого Стр_1 Из Основания Цикл
					Добав=Добб.КПлатежныйДокументам.Добавить();
					Добав.НомерДокумента=Стр_1.Номер;
					Добав.ДатаДокумента=Стр_1.Дата;
					Стр_1.Свойство("Сумма",Добав.Сумма);
				Конеццикла;
				
			КонецЕсли;
			
			
			Добб.ДополнительныеЗначения_ЭДО.Очистить();
			
			Основания="";
			Если РеквизитыЭлектронногоДокумента.Свойство("ТекстоваяИнформация",Основания) Тогда
				
				Для Каждого Стр_1 Из Основания Цикл
					Добав=Добб.ДополнительныеЗначения_ЭДО.Добавить();
					Добав.Идентификатор=Стр_1.Идентификатор;
					Добав.Значение=Стр_1.Значение;
				Конеццикла;
				
			КонецЕсли;
			
			Добб.ТранспортныеНакладные.Очистить();
			Основания="";
			Если РеквизитыЭлектронногоДокумента.Свойство("ТранспортныеНакладные",Основания) Тогда
				
				Для Каждого Стр_1 Из Основания Цикл
					Добав=Добб.ТранспортныеНакладные.Добавить();
					Добав.НомерДокумента=Стр_1.Номер;
					Добав.ДатаТрансопртнойНакладной=Стр_1.Дата
				Конеццикла;
				
			КонецЕсли;

			РеквизитыЭлектронногоДокумента.Свойство("СведенияОТранспортировке",Добб.СведенияОТранспортировкеИГрузе);
			
			Добб.Товары.Очистить();
			Добб.СерийныеНомера.Очистить();
			
			//Добб.Короба.Очистить();
			
			Сч=0;
			
			
			
			
	//	Если   Заказ.type="LP_SHIP_GOODS_CSV" Тогда

	КодСтраны="";
	Для Каждого Стр_з из РеквизитыЭлектронногоДокумента.СведенияОТоварахУслугах Цикл
		ТаможенныеДекларации=Новый массив;
		НомерГТДЗаписываем=Неопределено;
		Если Стр_З.Свойство("ТаможенныеДекларации",ТаможенныеДекларации) Тогда
			
			Если ТаможенныеДекларации.Количество()=1 Тогда
				
				Стр_1=ТаможенныеДекларации[0];
				//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				
				НомерГТДЗаписываем=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.НайтиГТД(Стр_1.НомерТаможеннойДекларации,Стр_1.КодСтраныПроисхождения);
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

			ИначеЕсли ТаможенныеДекларации.Количество()>1 Тогда
				
					СпрГТД=Справочники.НомераГТД_ХамелеонЦРПТ.СоздатьЭлемент();
					Для Каждого Стр_1 ИЗ  ТаможенныеДекларации Цикл
						Добав=СпрГТД.НомераГТДНесколько.Добавить();
						Добав.КодСтраны=Стр_1.КодСтраныПроисхождения;
						КодСтраны=Добав.КодСтраны;
						
						Добав.НомерГТД=Стр_1.НомерТаможеннойДекларации;
					Конеццикла;
					
					Попытка
						СпрГТД.Записать();
						НомерГТДЗаписываем=СпрГТД.Ссылка;
					Исключение
					КонецПопытки;
			
				
				
			КонецЕсли;
			
			
		КонецЕсли;
		
		
		good_identification_numbers=Неопределено;
		Если Стр_з.Свойство("КодыМаркировки",good_identification_numbers) Тогда
			Нстр=Добб.Товары.Добавить();
			Нстр.НомерСтрокиСвязи=Нстр.НомерСтроки;
			НСтр.НомерГТД=НомерГТДЗаписываем;
			
			Стр_З.Свойство("Наименование",Нстр.НаименованиеВУПД);

			НаименованиеЕдиницыИзмерения="";
			Если Стр_З.Свойство("НаименованиеЕдиницыИзмерения",НаименованиеЕдиницыИзмерения) Тогда
				ЕдИзм=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоНаименованию(НаименованиеЕдиницыИзмерения);
				Если Не ЗначениеЗаполнено(ЕдИзм) тогда
					Ед=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
					Ед.Код=Стр_З.ОКЕИ;
					Ед.Наименование=НаименованиеЕдиницыИзмерения;
					Ед.Записать();
					ЕдИзМ=Ед.ссылка;
					
				КонецЕсли;
				НСтр.ЕдиницаИзмерения=ЕдИзМ;
			КонецЕсли;
			
			ИндивидуальнаяУпаковка=ложь;
			НомерСредИдент="";
			
		  	Для Каждого Стр_1 Из good_identification_numbers Цикл
				
				Если ИндивидуальнаяУпаковка=Ложь Тогда
				Для Каждого Стр_Уп Из Стр_1.ИндивидуальныеУпаковки Цикл
					
					
						ШтрихКод=Стр_Уп;
						
						
						Если Сред(ШтрихКод,1,1)="(" Тогда
							ШтрихКод=Сред(ШтрихКод,2);
							Если сред(ШтрихКод,3,1)=")" Тогда
								ШтрихКод=Сред(ШтрихКод,1,2)+Сред(ШтрихКод,4);
							КонецЕсли;
							Если Сред(ШтрихКод,17,1)="(" Тогда
								ШтрихКод=Сред(ШтрихКод,1,16)+ Сред(ШтрихКод,18);
							КонецЕсли;
							Если Сред(ШтрихКод,19,1)=")" Тогда
								ШтрихКод=Сред(ШтрихКод,1,18)+ Сред(ШтрихКод,20);
							КонецЕсли;
							Если Сред(ШтрихКод,26,6)="(8005)" Тогда
								ШтрихКод=Сред(ШтрихКод,1,25)+ Сред(ШтрихКод,27,4)+Сред(ШтрихКод,32);
							КонецЕсли;
							
							
						КонецЕсли;
						
						product_description="";
						
						
						Продукция=СоздатьНайтиПр_УПД(ШтрихКод,Стр_З,КодСтраны);
						Если ЗначениеЗАполнено(Продукция) тогда
							product_description=Строка(Продукция);
								НСтр.GTIN=Продукция;
								НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
						//	НСТр.НаименованиеТовара=Продукция.Наименование;
							ДобавилиПр=Истина;
						Иначе
							
							
	
							СпрН=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_З.Наименование);
							Если Не ЗначениеЗаполнено(СпрН) Тогда
							
								СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
								СпрПр.ЕдиницаИзмерения_УПД=ЕдИзм.Ссылка;
								СпрПр.Наименование=Стр_З.Наименование;
								СпрПр.НаименованиеТовара=Стр_З.Наименование;
								СпрПр.Записать();
								СпрН= СпрПр.Ссылка;
							КонецЕсли;
							Продукция=СпрН;
							product_description=Строка(Продукция);
								НСтр.GTIN=Продукция;
								НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
							НСТр.НаименованиеТовара=Продукция.Наименование;
							ДобавилиПр=Истина;
							
							
							//product_description=Стр_З;
							//еСЛИ                        Стр_з.Свойство("product_description",product_description) Тогда
								
							//Иначе
							//	children="";
							//	еСЛИ                        Стр_з.Свойство("children",children) Тогда
							//		Для Каждого Стр_children Из children Цикл
							//			                                                                       product_description="";
							//				еСЛИ                   Стр_children.Свойство("product_description",product_description) Тогда
											//	НСТр=Добб.Товары.Добавить();
											//	НСТр.НаименованиеТовара=product_description;
							//				//	НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
							//					Прервать;
							//				КонецЕсли;
										
							//		КонецЦикла;
									
							//	КонецЕсли;
								
								
							КонецЕсли;
							
								//НСТр.НаименованиеТовара=product_description;
								НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
							
						//КонецЕслИ;
						КоличествоКМ=0;
								//children="";
								//еСЛИ                        Стр_з.Свойство("children",children) Тогда
								//	Для Каждого Стр_children Из children Цикл
								//		ДобавК=Добб.Короба.Добавить();
								//		ДобавК.НомерКороба=Стр_З.uitu_code;
								//		ШтрихКод="";
								//		Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
								//			ШтрихКод=Стр_children.uit_code;
								//			КоличествоКМ=КоличествоКМ+1;
								//			НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
								//		Иначе
								//			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.РекурсияУпаковки_Приход(Стр_children,НСтр,Добб,КоличествоКМ);
								//		КонецЕсли;
								//		//ДобавК.КоличестоКМ=НСтр.КоличествоНомеровКМ;
								//		ДобавК.ШтрихКод=ШтрихКод;
								//		
								//	КонецЦикла;
								//Иначе
									НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
									КоличествоКМ=1;
								//КонецЕсли;

						
							Добав=Добб.СерийныеНомера.Добавить();
							//Добав.КоличествоКМ=КоличествоКМ;
							Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
							Цена=0;
							стр_З.Свойство("Цена",Цена);
							//Добав.Цена=Стр_з.product_cost;
							//=Стр_з.product_tax;
							ЦенаБезНДС=0;
							//стр_З.Свойство("price",ЦенаБезНДС);
							
							НДС=стр_З.СуммаБезНДС/стр_З.Количество;//Добав.Цена-ЦенаБезНДС;
							//стр_З.Свойство("product_tax",Добав.НДС);
							//Добав.НаименованиеТовараСтрокой=НСТр.НаименованиеТовара;
							uit_code="";
								Добав.cis=ШтрихКод;
								
								
								еСЛИ Сред(Добав.cis,1,2)="01" Тогда
									Добав.GTIN=Сред(Добав.cis,3,14);
								Иначе
									Добав.GTIN=Сред(Добав.cis,1,14);
								КонецЕсли;
								Попытка
									Числ=Число(Добав.GTIN);
								Исключение
									Добав.GTIN="";
								КонецПопытки;
								
							Добав.НаименованиеТовара=Продукция;
							Если ЗначениеЗаполнено(Продукция)   Тогда
								Добав.GTIN=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(Добав.НаименованиеТовара.GTIN),14,"0");
							КонецЕсли;
							Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан Тогда
								Добав.Отказано=Ложь;
							Иначе
								Добав.Отказано=Истина;
							КонецЕсли;
							Попытка
							//Если NNN_2<>Неопределено Тогда
							//	accepted=Неопределено;
							//	Если NNN_2.products[Сч].Свойство("accepted",accepted) Тогда
							//		Если accepted="true" Тогда
							//			Добав.Принят=Истина;
							//		Иначе
							//			Добав.Принят=Ложь;
							//			
							//		КонецЕсли;
							//	Иначе
							//		Добав.Принят=Ложь;
							//	Конецесли;
							//	Сч=Сч+1;
							//Конецесли;
						Исключение
							КонецПопытки;
							НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
							НСтр.Сумма=НСтр.Сумма+цена;
							НСтр.НДС=НСтр.НДС+НДС;
							НСтр.Цена=НСТР.Сумма/НСтр.КОличествоКМ;
							
							
							
						Конеццикла;
				   // КонецЕсли;
					
				   
				   Для Каждого Стр_Уп Из Стр_1.КонтрольныеИдентификационныеЗнаки Цикл
					
					
						ШтрихКод=Стр_Уп;
						
						Если Сред(ШтрихКод,1,1)="(" Тогда
							ШтрихКод=Сред(ШтрихКод,2);
							Если сред(ШтрихКод,3,1)=")" Тогда
								ШтрихКод=Сред(ШтрихКод,1,2)+Сред(ШтрихКод,4);
							КонецЕсли;
							Если Сред(ШтрихКод,17,1)="(" Тогда
								ШтрихКод=Сред(ШтрихКод,1,16)+ Сред(ШтрихКод,18);
							КонецЕсли;
							Если Сред(ШтрихКод,19,1)=")" Тогда
								ШтрихКод=Сред(ШтрихКод,1,18)+ Сред(ШтрихКод,20);
							КонецЕсли;
							Если Сред(ШтрихКод,26,6)="(8005)" Тогда
								ШтрихКод=Сред(ШтрихКод,1,25)+ Сред(ШтрихКод,27,4)+Сред(ШтрихКод,32);
							КонецЕсли;
							
							
						КонецЕсли;
						



						
						product_description="";
						Продукция=СоздатьНайтиПр_УПД(ШтрихКод,Стр_З,КодСтраны);
						Если ЗначениеЗАполнено(Продукция) тогда
							product_description=Строка(Продукция);
								НСтр.GTIN=Продукция;
								НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
							//НСТр.НаименованиеТовара=Продукция.Наименование;
							ДобавилиПр=Истина;
						Иначе
							
							СпрН=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_З.Наименование);
							Если Не ЗначениеЗаполнено(СпрН) Тогда
							
								СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
								НаименованиеЕдиницыИзмерения="";
								Если Стр_З.Свойство("НаименованиеЕдиницыИзмерения",НаименованиеЕдиницыИзмерения) Тогда
								
									ЕдИзм=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоНаименованию(НаименованиеЕдиницыИзмерения);
									Если Не ЗначениеЗаполнено(ЕдИзм) тогда
										Ед=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
										Ед.Код=Стр_З.ОКЕИ;
										Ед.Наименование=НаименованиеЕдиницыИзмерения;
										Ед.Записать();
										ЕдИзМ=Ед.ссылка;
										
									КонецЕсли;
									СпрПр.ЕдиницаИзмерения_УПД=ЕдИзм.Ссылка;
								КонецЕсли;
								СпрПр.Наименование=Стр_З.Наименование;
								СпрПр.НаименованиеТовара=Стр_З.Наименование;
								СпрПр.Записать();
								СпрН= СпрПр.Ссылка;
							КонецЕсли;
							Продукция=СпрН;
							product_description=Строка(Продукция);
								НСтр.GTIN=Продукция;
								НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
							НСТр.НаименованиеТовара=Продукция.Наименование;
							ДобавилиПр=Истина;
							

							//product_description=Стр_З;
							//еСЛИ                        Стр_з.Свойство("product_description",product_description) Тогда
								
							//Иначе
							//	children="";
							//	еСЛИ                        Стр_з.Свойство("children",children) Тогда
							//		Для Каждого Стр_children Из children Цикл
							//			                                                                       product_description="";
							//				еСЛИ                   Стр_children.Свойство("product_description",product_description) Тогда
											//	НСТр=Добб.Товары.Добавить();
											//	НСТр.НаименованиеТовара=product_description;
							//				//	НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
							//					Прервать;
							//				КонецЕсли;
										
							//		КонецЦикла;
									
							//	КонецЕсли;
								
								
							КонецЕсли;
							
								//НСТр.НаименованиеТовара=product_description;
								НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
							
						//КонецЕслИ;
						КоличествоКМ=0;
								//children="";
								//еСЛИ                        Стр_з.Свойство("children",children) Тогда
								//	Для Каждого Стр_children Из children Цикл
								//		ДобавК=Добб.Короба.Добавить();
								//		ДобавК.НомерКороба=Стр_З.uitu_code;
								//		ШтрихКод="";
								//		Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
								//			ШтрихКод=Стр_children.uit_code;
								//			КоличествоКМ=КоличествоКМ+1;
								//			НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
								//		Иначе
								//			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.РекурсияУпаковки_Приход(Стр_children,НСтр,Добб,КоличествоКМ);
								//		КонецЕсли;
								//		//ДобавК.КоличестоКМ=НСтр.КоличествоНомеровКМ;
								//		ДобавК.ШтрихКод=ШтрихКод;
								//		
								//	КонецЦикла;
								//Иначе
									НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
									КоличествоКМ=1;
								//КонецЕсли;

						
							Добав=Добб.СерийныеНомера.Добавить();
							//Добав.КоличествоКМ=КоличествоКМ;
							Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
							Цена=0;
							стр_З.Свойство("Цена",Цена);
							//Добав.Цена=Стр_з.product_cost;
							//=Стр_з.product_tax;
							ЦенаБезНДС=0;
							//стр_З.Свойство("price",ЦенаБезНДС);
							
							НДС=стр_З.СуммаБезНДС/стр_З.Количество;//Добав.Цена-ЦенаБезНДС;
							//стр_З.Свойство("product_tax",Добав.НДС);
							//Добав.НаименованиеТовараСтрокой=НСТр.НаименованиеТовара;
							uit_code="";
								Добав.cis=ШтрихКод;
								еСЛИ Сред(Добав.cis,1,2)="01" Тогда
									Добав.GTIN=Сред(Добав.cis,3,14);
								Иначе
									Добав.GTIN=Сред(Добав.cis,1,14);
								КонецЕсли;
								
								Попытка
									Числ=Число(Добав.GTIN);
								Исключение
									Добав.GTIN="";
								КонецПопытки;

								//Добав.GTIN=Сред(Добав.cis,3,14);
								
								
							Добав.НаименованиеТовара=Продукция;
							Если ЗначениеЗаполнено(Продукция)   Тогда
								Добав.GTIN=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(Добав.НаименованиеТовара.GTIN),14,"0");
							КонецЕсли;
							Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан Тогда
								Добав.Отказано=Ложь;
							Иначе
								Добав.Отказано=Истина;
							КонецЕсли;
							Попытка
							//Если NNN_2<>Неопределено Тогда
							//	accepted=Неопределено;
							//	Если NNN_2.products[Сч].Свойство("accepted",accepted) Тогда
							//		Если accepted="true" Тогда
							//			Добав.Принят=Истина;
							//		Иначе
							//			Добав.Принят=Ложь;
							//			
							//		КонецЕсли;
							//	Иначе
							//		Добав.Принят=Ложь;
							//	Конецесли;
							//	Сч=Сч+1;
							//Конецесли;
						Исключение
							КонецПопытки;
							НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
							НСтр.Сумма=НСтр.Сумма+цена;
							НСтр.НДС=НСтр.НДС+НДС;
							НСтр.Цена=НСТР.Сумма/НСтр.КОличествоКМ;
							
							
							
						Конеццикла;
					Иначе
						
						
						
	
							
						Для Каждого Стр_Уп Из Стр_1.ИндивидуальныеУпаковки Цикл
						
						
							ШтрихКод=Стр_Уп;
							
							
							Если Сред(ШтрихКод,1,1)="(" Тогда
								ШтрихКод=Сред(ШтрихКод,2);
								Если сред(ШтрихКод,3,1)=")" Тогда
									ШтрихКод=Сред(ШтрихКод,1,2)+Сред(ШтрихКод,4);
								КонецЕсли;
								Если Сред(ШтрихКод,17,1)="(" Тогда
									ШтрихКод=Сред(ШтрихКод,1,16)+ Сред(ШтрихКод,18);
								КонецЕсли;
								Если Сред(ШтрихКод,19,1)=")" Тогда
									ШтрихКод=Сред(ШтрихКод,1,18)+ Сред(ШтрихКод,20);
								КонецЕсли;
								Если Сред(ШтрихКод,26,6)="(8005)" Тогда
									ШтрихКод=Сред(ШтрихКод,1,25)+ Сред(ШтрихКод,27,4)+Сред(ШтрихКод,32);
								КонецЕсли;
								
								
							КонецЕсли;
							
							Добав_Короба=Добб.СтарыеКоробки.Добавить();
							Добав_Короба.НомерКороба=НомерСредИдент;
							Добав_Короба.НомерКМ=ШтрихКод;
							Добав_Короба.НомерСтрокиСвязи=Нстр.НомерСтроки;
							Добав_Короба.НаименованиеТовара=Продукция;
								
								
							Конеццикла;
					   // КонецЕсли;
						
					   
					   Для Каждого Стр_Уп Из Стр_1.КонтрольныеИдентификационныеЗнаки Цикл
						
						
							ШтрихКод=Стр_Уп;
							
							Если Сред(ШтрихКод,1,1)="(" Тогда
								ШтрихКод=Сред(ШтрихКод,2);
								Если сред(ШтрихКод,3,1)=")" Тогда
									ШтрихКод=Сред(ШтрихКод,1,2)+Сред(ШтрихКод,4);
								КонецЕсли;
								Если Сред(ШтрихКод,17,1)="(" Тогда
									ШтрихКод=Сред(ШтрихКод,1,16)+ Сред(ШтрихКод,18);
								КонецЕсли;
								Если Сред(ШтрихКод,19,1)=")" Тогда
									ШтрихКод=Сред(ШтрихКод,1,18)+ Сред(ШтрихКод,20);
								КонецЕсли;
								Если Сред(ШтрихКод,26,6)="(8005)" Тогда
									ШтрихКод=Сред(ШтрихКод,1,25)+ Сред(ШтрихКод,27,4)+Сред(ШтрихКод,32);
								КонецЕсли;
								
								
							КонецЕсли;
							
														Добав_Короба=Добб.СтарыеКоробки.Добавить();
							Добав_Короба.НомерКороба=НомерСредИдент;
							Добав_Короба.НомерКМ=ШтрихКод;
							Добав_Короба.НомерСтрокиСвязи=Нстр.НомерСтроки;
							Добав_Короба.НаименованиеТовара=Продукция;




							Конеццикла;
							
							
							

						ИндивидуальнаяУпаковка=Ложь;
				   КонецЕсли;
					
				
					
				
				Если ЗначениеЗаполнено(Стр_1.ИдентификаторТранспортнойУпаковки) Тогда
					
						ШтрихКод=Стр_1.ИдентификаторТранспортнойУпаковки;
						
						Если Сред(ШтрихКод,1,1)="(" Тогда
							ШтрихКод=Сред(ШтрихКод,2);
							Если сред(ШтрихКод,3,1)=")" Тогда
								ШтрихКод=Сред(ШтрихКод,1,2)+Сред(ШтрихКод,4);
							КонецЕсли;
							Если Сред(ШтрихКод,17,1)="(" Тогда
								ШтрихКод=Сред(ШтрихКод,1,16)+ Сред(ШтрихКод,18);
							КонецЕсли;
							Если Сред(ШтрихКод,19,1)=")" Тогда
								ШтрихКод=Сред(ШтрихКод,1,18)+ Сред(ШтрихКод,20);
							КонецЕсли;
							Если Сред(ШтрихКод,26,6)="(8005)" Тогда
								ШтрихКод=Сред(ШтрихКод,1,25)+ Сред(ШтрихКод,27,4)+Сред(ШтрихКод,32);
							КонецЕсли;
							
							
						КонецЕсли;
						
						ИндивидуальнаяУпаковка=Истина;
						НомерСредИдент=ШтрихКод;
						

						
						product_description="";
						Продукция=СоздатьНайтиПр_УПД(ШтрихКод,Стр_З,КодСтраны);
						Если ЗначениеЗАполнено(Продукция) тогда
							product_description=Строка(Продукция);
								НСтр.GTIN=Продукция;
								НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
							//	НСТр.НаименованиеТовара=Продукция.Наименование;
							ДобавилиПр=Истина;
						Иначе
							
							СпрН=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_З.Наименование);
							Если Не ЗначениеЗаполнено(СпрН) Тогда
							
								СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
								Если Стр_З.Свойство("НаименованиеЕдиницыИзмерения",НаименованиеЕдиницыИзмерения) Тогда
								
									ЕдИзм=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоНаименованию(НаименованиеЕдиницыИзмерения);
									Если Не ЗначениеЗаполнено(ЕдИзм) тогда
										Ед=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
										Ед.Код=Стр_З.ОКЕИ;
										Ед.Наименование=НаименованиеЕдиницыИзмерения;
										Ед.Записать();
										ЕдИзМ=Ед.ссылка;
										
									КонецЕсли;
									СпрПр.ЕдиницаИзмерения_УПД=ЕдИзм.Ссылка;
								КонецЕслИ;
								СпрПр.Наименование=Стр_З.Наименование;
								СпрПр.НаименованиеТовара=Стр_З.Наименование;
								СпрПр.Записать();
								СпрН= СпрПр.Ссылка;
							КонецЕсли;
							Продукция=СпрН;
							product_description=Строка(Продукция);
								НСтр.GTIN=Продукция;
								НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
							НСТр.НаименованиеТовара=Продукция.Наименование;
							ДобавилиПр=Истина;
							

							//product_description=Стр_З;
							//еСЛИ                        Стр_з.Свойство("product_description",product_description) Тогда
								
							//Иначе
							//	children="";
							//	еСЛИ                        Стр_з.Свойство("children",children) Тогда
							//		Для Каждого Стр_children Из children Цикл
							//			                                                                       product_description="";
							//				еСЛИ                   Стр_children.Свойство("product_description",product_description) Тогда
											//	НСТр=Добб.Товары.Добавить();
											//	НСТр.НаименованиеТовара=product_description;
							//				//	НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
							//					Прервать;
							//				КонецЕсли;
										
							//		КонецЦикла;
									
							//	КонецЕсли;
								
								
							КонецЕсли;
							
//								НСТр.НаименованиеТовара=product_description;
								НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
							
						//КонецЕслИ;
						КоличествоКМ=0;
								//children="";
								//еСЛИ                        Стр_з.Свойство("children",children) Тогда
								//	Для Каждого Стр_children Из children Цикл
								//		ДобавК=Добб.Короба.Добавить();
								//		ДобавК.НомерКороба=Стр_З.uitu_code;
								//		ШтрихКод="";
								//		Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
								//			ШтрихКод=Стр_children.uit_code;
								//			КоличествоКМ=КоличествоКМ+1;
								//			НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
								//		Иначе
								//			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.РекурсияУпаковки_Приход(Стр_children,НСтр,Добб,КоличествоКМ);
								//		КонецЕсли;
								//		//ДобавК.КоличестоКМ=НСтр.КоличествоНомеровКМ;
								//		ДобавК.ШтрихКод=ШтрихКод;
								//		
								//	КонецЦикла;
								//Иначе
									НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
									КоличествоКМ=1;
								//КонецЕсли;

						
							Добав=Добб.СерийныеНомера.Добавить();
							//Добав.КоличествоКМ=КоличествоКМ;
							Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
							Цена=0;
							стр_З.Свойство("Цена",Цена);
							//Добав.Цена=Стр_з.product_cost;
							//=Стр_з.product_tax;
							ЦенаБезНДС=0;
							//стр_З.Свойство("price",ЦенаБезНДС);
							
							НДС=стр_З.СуммаБезНДС/стр_З.Количество;//Добав.Цена-ЦенаБезНДС;
							//стр_З.Свойство("product_tax",Добав.НДС);
//							Добав.НаименованиеТовараСтрокой=НСТр.НаименованиеТовара;
						uit_code="";
								Добав.cis=ШтрихКод;
								еСЛИ Сред(Добав.cis,1,2)="01" Тогда
									Добав.GTIN=Сред(Добав.cis,3,14);
								Иначе
									Добав.GTIN=Сред(Добав.cis,1,14);
								КонецЕсли;
								
								Попытка
									Числ=Число(Добав.GTIN);
								Исключение
									Добав.GTIN="";
								КонецПопытки;

								//Добав.GTIN=Сред(Добав.cis,3,14);
								
								
							Добав.НаименованиеТовара=Продукция;
							Если ЗначениеЗаполнено(Продукция)   Тогда
								Добав.GTIN=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(Добав.НаименованиеТовара.GTIN),14,"0");
							КонецЕсли;
							Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан Тогда
								Добав.Отказано=Ложь;
							Иначе
								Добав.Отказано=Истина;
							КонецЕсли;
							Попытка
							//Если NNN_2<>Неопределено Тогда
							//	accepted=Неопределено;
							//	Если NNN_2.products[Сч].Свойство("accepted",accepted) Тогда
							//		Если accepted="true" Тогда
							//			Добав.Принят=Истина;
							//		Иначе
							//			Добав.Принят=Ложь;
							//			
							//		КонецЕсли;
							//	Иначе
							//		Добав.Принят=Ложь;
							//	Конецесли;
							//	Сч=Сч+1;
							//Конецесли;
						Исключение
							КонецПопытки;
							НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
							НСтр.Сумма=НСтр.Сумма+цена;
							НСтр.НДС=НСтр.НДС+НДС;
							НСтр.Цена=НСТР.Сумма/НСтр.КОличествоКМ;
							
							
							
//						Конеццикла;
				   // КонецЕсли;
					

					
					
					
				КонецЕсли;
				
				
				КонецЦикла;
				Если Не ЗначениеЗаполнено(НСтр.GTIN) Тогда	
					
					СпрН=СоздатьНайтиПр_УПД("",Стр_З,КодСтраны);
					Продукция=СпрН;
							product_description=Строка(Продукция);
								НСтр.GTIN=Продукция;
								НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
							НСТр.НаименованиеТовара=Продукция.Наименование;
							//					СпрН=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_З.Наименование);
							//Если Не ЗначениеЗаполнено(СпрН) Тогда
							//
							//	СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
							//	ЕдИзм=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_З.НаименованиеЕдиницыИзмерения);
							//	Если Не ЗначениеЗаполнено(ЕдИзм) тогда
							//		Ед=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
							//		Ед.Код=Стр_З.ОКЕИ;
							//		Ед.Наименование=Стр_З.НаименованиеЕдиницыИзмерения;
							//		Ед.Записать();
							//		ЕдИзМ=Ед.ссылка;
							//		
							//	КонецЕсли;
							//	СпрПр.ЕдиницаИзмерения_УПД=ЕдИзм.Ссылка;
							//	СпрПр.Наименование=Стр_З.Наименование;
							//	СпрПр.НаименованиеТовара=Стр_З.Наименование;
							//	СпрПр.Записать();
							//	СпрН= СпрПр.Ссылка;
							//КонецЕсли;
							//Продукция=СпрН;
							//product_description=Строка(Продукция);
							//	НСтр.GTIN=Продукция;
							//	НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
							//НСТр.НаименованиеТовара=Продукция.Наименование;
							ДобавилиПр=Истина;
							
КонецЕсли;
			
			Стр_З.Свойство("Количество",Нстр.КоличествоКМ);
			Единиц=Неопределено;
			Стр_З.Свойство("НаименованиеЕдиницыИзмерения",Единиц);
			Если ЗначениеЗаполнено(Единиц) тогда
				Единица=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоНаименованию(Единиц);
				Если Не ЗначениеЗАполнено(Единица) тогда
					Единица=справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
					Единица.Код=Стр_З.ОКЕИ;
					Единица.Наименование=Единиц;
				КонецЕсли;
				НСтр.ЕдиницаИзмерения=Единица.Ссылка;
			КонецЕсли;
			Стр_З.Свойство("СуммаНДС",Нстр.НДС);
			Стр_З.Свойство("Сумма",Нстр.Сумма);
			Если НСтр.КоличествоКМ<>0 Тогда
				НСтр.Цена=НСтр.Сумма/НСтр.КоличествоКМ;
			КонецЕсли;
		Иначе
			
			Нстр=Добб.Товары.Добавить();
			Нстр.НомерСтрокиСвязи=Нстр.НомерСтроки;
			НСтр.НомерГТД=НомерГТДЗаписываем;
			
			//Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоНаименованию(");
			
			
			//Если СтрДлина(Штрихкод)>=31
			//	
			//	Тогда
			//	
			//	Попытка
			//		Если Сред(ШтрихКод,2)="01" Тогда	
			//			ШтрихКод=Сред(ШтрихКод,3);
			//		КонецЕсли;
			//		СпрПр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(Сред(ШтрихКод,1,14)));

			//	Исключение

			//		Возврат Неопределено;
			//	КонецПопытки;
			//	Если ЗначениеЗаполнено(СпрПр) тогда
			//		Возврат СпрПр;
			//	КонецЕсли;
			//	СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
			//	СпрПр.GTIN=Сред(ШтрихКод,1,14);
			//	ЕдИзм=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_ыЗ.НаименованиеЕдиницыИзмерения);
			//	Если Не ЗначениеЗаполнено(ЕдИзм) тогда
			//		Ед=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
			//		Ед.Код=Стр_ыЗ.ОКЕИ;
			//		Ед.Наименование=Стр_ыЗ.НаименованиеЕдиницыИзмерения;
			//		Ед.Записать();
			//		ЕдИзМ=Ед.ссылка;
			//		
			//	КонецЕсли;
			//	СпрПр.ЕдиницаИзмерения_УПД=ЕдИзм.Ссылка;
			//	СпрПр.Наименование=Стр_ыЗ.Наименование;
			//	СпрПр.НаименованиеТовара=Стр_ыЗ.Наименование;
			//	СпрПр.Записать();
			//	Возврат СпрПр.Ссылка;
			//	
			//КонецЕсли;
			
			ИщемШтрих="";
			ТекстоваяИнформация=Неопределено;;
			Если Стр_З.Свойство("ТекстоваяИнформация",ТекстоваяИнформация)=Истина Тогда
				Для каждого Стр_1 Из ТекстоваяИнформация Цикл
					Если ВРЕГ(Стр_1.Идентификатор)="ШТРИХКОД" ТОгда
						ИщемШтрих=Стр_1.Значение;
						Прервать;
					КонецЕсли;
 				Конеццикла;
			КонецЕсли;
			
			//СпрН=СоздатьНайтиПр_УПД("",Стр_З,КодСтраны);
			СпрН=Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка();
			Если ЗначениеЗаполнено(ИщемШтрих) Тогда
				СпрН=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("КодВУчетнойСистеме",ИщемШтрих);
				Если ЗначениеЗаполнено(СпрН) И СпрН.СтранаПроизводства.Код<>КодСтраны И ЗначениеЗАполнено(КодСтраны) Тогда
					СпрНовый=СпрН.ПолучитьОбъект();
					СпрНовый.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду(КодСтраны);;
					СпрНовый.Записать();
					СпрН=СпрНовый.Ссылка;
					
				ИначеЕсли Не ЗначениеЗаполнено(СпрН) Тогда
					СпрНовый=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
					СпрНовый.КодВУчетнойСистеме=ИщемШтрих;
					СпрНовый.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду(КодСтраны);
					
					
					
					
			НаименованиеЕдиницыИзмерения="";
			Если Стр_З.Свойство("НаименованиеЕдиницыИзмерения",НаименованиеЕдиницыИзмерения) тогда
					ЕдИзм=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоНаименованию(НаименованиеЕдиницыИзмерения);
					Если Не ЗначениеЗаполнено(ЕдИзм) тогда
						Ед=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
						Ед.Код=Стр_З.ОКЕИ;
						Ед.Наименование=НаименованиеЕдиницыИзмерения;
						Ед.Записать();
						ЕдИзМ=Ед.ссылка;
						
					КонецЕсли;
				
					СпрНовый.ЕдиницаИзмерения_УПД=ЕдИзм.Ссылка;
				КонецЕсли;
					СпрНовый.Наименование=Стр_З.Наименование;
					СпрНовый.НаименованиеТовара=Стр_З.Наименование;
					СпрНовый.Записать();
					СпрН=СпрНовый.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			
			Если Не ЗначениеЗаполнено(СпрН) Тогда
				спрН=СоздатьНайтиПр_УПД("",Стр_З,КодСтраны);
				//Справочники.Продукция_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_З.Наименование);
				//Если Не ЗначениеЗаполнено(СпрН) Тогда
				//	
				//	СпрНовый=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
				//	//СпрНовый.КодВУчетнойСистеме=ИщемШтрих;
				//	ЕдИзм=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_З.НаименованиеЕдиницыИзмерения);
				//	Если Не ЗначениеЗаполнено(ЕдИзм) тогда
				//		Ед=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
				//		Ед.Код=Стр_З.ОКЕИ;
				//		Ед.Наименование=Стр_З.НаименованиеЕдиницыИзмерения;
				//		Ед.Записать();
				//		ЕдИзМ=Ед.ссылка;
				//		
				//	КонецЕсли;
				//	СпрНовый.ЕдиницаИзмерения_УПД=ЕдИзм.Ссылка;
				//	СпрНовый.Наименование=Стр_З.Наименование;
				//	СпрНовый.НаименованиеТовара=Стр_З.Наименование;
				//	СпрНовый.Записать();
				//	СпрН=СпрНовый.Ссылка;
				//	
				//КонецЕсли;
				
			КонецЕсли;
			
			Стр_З.Свойство("Наименование",Нстр.НаименованиеВУПД);
			
			НСтр.GTIN=СпрН;
			
			Стр_З.Свойство("Количество",Нстр.КоличествоКМ);
			Единиц=Неопределено;
			Стр_З.Свойство("НаименованиеЕдиницыИзмерения",Единиц);
			Если ЗначениеЗаполнено(Единиц) тогда
				Единица=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоНаименованию(Единиц);
				Если Не ЗначениеЗАполнено(Единица) тогда
					Единица=справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
					Единица.Код=Стр_З.ОКЕИ;
					Единица.Наименование=Единиц;
				КонецЕсли;
				НСтр.ЕдиницаИзмерения=Единица.Ссылка;
			КонецЕсли;
			Стр_З.Свойство("СуммаНДС",Нстр.НДС);
			Стр_З.Свойство("Сумма",Нстр.Сумма);
			Если НСтр.КоличествоКМ<>0 Тогда
				НСтр.Цена=НСтр.Сумма/НСтр.КоличествоКМ;
			КонецЕсли;
			
			
		//	ОшибкаЗагрузки=Истина;
			
		//	Сообщить("В документе: пропущена строка с номенклатурой :"+Стр_з.Наименование+" так как в ней не указаны коды маркировки");
		КонецЕсли;
			
			
	Конеццикла;
		
	Если РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ГрузитьПоступленияТолькоСМаркировкойПоЭДО=Истина И Добб.СерийныеНомера.Количество()=0 
		Тогда
		Возврат Неопределено;
	КонецЕсли;
	
		
			
		Добб.УПД=Истина;
		Добб.ТипЭДООтправки=ТипЭДО;
		Если ТипЭДО=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОФайл Тогда
			Добб.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан;
		ИначеЕсли ТипЭДО=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОЛайт 
			ИЛИ ТипЭДО=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОТензор
			ИЛИ ТипЭДО=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОКонтур
			Тогда
			Добб.СтатусУПД=АдресРеквизитов.Статус;
		
		КонецЕсли;
		
		Добб.Записать();
		Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
			ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ЧастичноПринят
			ИЛИ Добб.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан
			Тогда
			Попытка
				Добб.ПометкаУдаления=Ложь;
				Добб.Записать(РежимЗаписиДокумента.Проведение) 
			Исключение
			КонецПопытки;
		КонецЕсли;
					//МассивУп.Добавить(Добб.Ссылка);
		  					МассивУп.Добавить(Новый Структура("Статус,документ",АдресРеквизитов.Статус,Добб.Ссылка));

					Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
						 ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапистьПриемкку(Добб.Ссылка,РеквизитыЭлектронногоДокумента.ТекстФайла);
						
					Конецесли;
				Возврат Добб.Ссылка;
		
//					Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
//					 ЗапистьПриемкку(Добб.Ссылка,Текст1);
					
//				Конецесли;

							//Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
						 ///ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапистьПриемкку(Добб.Ссылка,Текст1);
						
//					Конецесли;

		
КонецФункции

Функция СоздатьНайтиКонтрагента_Отгрузка_УПД(ЗЗ) Экспорт
	ИНН=ЗЗ.Покупатель.РеквизитыКонтрагента.ИНН;
	КПП="";
	ЗЗ.Покупатель.РеквизитыКонтрагента.Свойство("КПП",КПП);
	
	Если не ЗначениеЗаполнено(КПП) Тогда
		КПП="";
	КонецЕсли;
	

	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ КАК ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ
		|ГДЕ
		|	ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.ИНН = &ИНН
		|	И ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.КПП = &КПП
		|	И НЕ ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СпрК=Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		СпрК=ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	Если ЗначениеЗАполнено(СпрК) И СпрК.Ид_ЭДО_ЦРПТ=ЗЗ.СведенияОбУчастникахЭДО.ИдентификаторОтправителя тогда
		Возврат СпрК.Ссылка;
	ИначеЕсли ЗначениеЗаполнено(СпрК) Тогда
		СпрК=СпрК.ПолучитьОбъект();
	Иначе
		СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрК.Наименование=ЗЗ.Покупатель.НаименованиеКонтрагента;
	КонецЕсли;
	СпрК.ИНН=ИНН;
	СпрК.КПП=КПП;
	СпрК.Ид_ЭДО_ЦРПТ=ЗЗ.СведенияОбУчастникахЭДО.ИдентификаторПолучателя;
	СпрК.Записать();
	Возврат СпрК.Ссылка
КонецФункции



Функция СоздатьНайтиКонтрагента_Отгрузка_УПД_Гр(ЗЗ,Поставщик) Экспорт
	ИНН=ЗЗ.Грузополучатель.РеквизитыКонтрагента.ИНН;
	КПП="";
	ЗЗ.Грузополучатель.РеквизитыКонтрагента.Свойство("КПП",КПП);
	
	Если Не ЗначениеЗаполненО(ИНН) тогда
		Возврат Поставщик;
	КонецЕсли;
	

	Если не ЗначениеЗаполнено(КПП) Тогда
		КПП="";
	КонецЕсли;	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ КАК ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ
		|ГДЕ
		|	ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.ИНН = &ИНН
		|	И ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.КПП = &КПП
		|	И НЕ ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СпрК=Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		СпрК=ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	Если ЗначениеЗАполнено(СпрК) 
		//И СпрК.Ид_ЭДО_ЦРПТ=ЗЗ.СведенияОбУчастникахЭДО.ИдентификаторОтправителя 
		тогда
		Возврат СпрК.Ссылка;
	ИначеЕсли ЗначениеЗаполнено(СпрК) Тогда
		СпрК=СпрК.ПолучитьОбъект();
	Иначе
		СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрК.Наименование=ЗЗ.Грузополучатель.НаименованиеКонтрагента;
	КонецЕсли;
	СпрК.ИНН=ЗЗ.Грузополучатель.РеквизитыКонтрагента.ИНН;
	СпрК.КПП=КПП;
	//СпрК.Ид_ЭДО_ЦРПТ=ЗЗ.СведенияОбУчастникахЭДО.ИдентификаторОтправителя;
	СпрК.Записать();
	Возврат СпрК.Ссылка
	
	//СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",
	//ЗЗ.Продавец.РеквизитыКонтрагента.ИНН);
	//Если ЗначениеЗАполнено(СпрК) И СпрК.Ид_ЭДО_ЦРПТ=ЗЗ.СведенияОбУчастникахЭДО.ИдентификаторОтправителя тогда
	//	Возврат СпрК.Ссылка;
	//	//СпрК=СпрК.ПолучитьОбъект();
	//ИначеЕсли ЗначениеЗаполнено(СпрК) Тогда
	//	СпрК=СпрК.ПолучитьОбъект();
	//Иначе
	//	СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
	//	СпрК.Наименование=ЗЗ.Продавец.НаименованиеКонтрагента;
	//КонецЕсли;
	//СпрК.ИНН=ЗЗ.Продавец.РеквизитыКонтрагента.ИНН;
	//СпрК.Ид_ЭДО_ЦРПТ=ЗЗ.СведенияОбУчастникахЭДО.ИдентификаторОтправителя;
	//СпрК.Записать();
	//Возврат СпрК.Ссылка
КонецФункции

