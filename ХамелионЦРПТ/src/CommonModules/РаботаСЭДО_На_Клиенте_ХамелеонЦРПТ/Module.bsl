&НаКлиенте
Function ValueFromHeaders(ValueName,Request)
	
	Result = "";	
	ResponseHeaders = Request.GetAllResponseHeaders();
	For Line = 1 To StrLineCount(ResponseHeaders) Do
		CurLine = StrGetLine(ResponseHeaders, Line);
		If Find(CurLine, ValueName) > 0 Then
			BeginPos = Find(CurLine, "=") + 1;
			EndPos = Find(CurLine, ";");
			Result = Mid(CurLine, BeginPos, EndPos - BeginPos);
			Break;
		EndIf;
	EndDo;
	Return Result;

EndFunction

&НаКлиенте
Функция ПодключениеПоКонтурДиадок(Request,Thumbprint_1,boxId,BoxUrl,PortalUserId,VerificationToken) Экспорт
	#Если ВебКлиент Тогда
		Возврат Ложь;
	#Иначе
	
	Request = New COMObject("WinHttp.WinHttpRequest.5.1");
	
	Request.Open("GET", "https://auth.kontur.ru", 0);
	Request.Send();
	Request.WaitForResponse();
	
	AntiForgery = ValueFromHeaders("AntiForgery",Request); 
	
	Если ЗначениеЗаполнено(Thumbprint_1.ЛогинКонтур) Тогда
	
		Params = New Structure("Login,Password,Remember", Thumbprint_1.ЛогинКонтур, Thumbprint_1.ПарольКонтур, False);	
		Body = ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.JSONString(Params);	
		
		Request.Open("POST", "https://auth.kontur.ru/api/authentication/password/auth-by-password", 0);
		Request.SetRequestHeader("Content-Length", XMLString(StrLen(Body)));
		Request.SetRequestHeader("Content-Type", "application/json;charset=UTF-8");
		Request.SetRequestHeader("X-Csrf-Token", AntiForgery);	
		Request.Send(Body);
		Request.WaitForResponse();
		
		PortalUserId = ValueFromHeaders("portaluserid",Request);
	Иначе
	
			CAPICOM_CURRENT_USER_STORE=2;
			CAPICOM_MY_STORE="My";
			CAPICOM_OTHER_STORE="AddressBook";
			CAPICOM_STORE_OPEN_READ_ONLY=0;
			CAPICOM_CERTIFICATE_FIND_TIME_VALID=9;
			CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED = 2;

			
			Попытка
				// формируем список наших сертификатов
				ТекЭлемент=Неопределено;
				СписокНашихСертификатов=Новый СписокЗначений;
				
				
				Store=Новый COMОбъект("CAPICOM.Store");
				Store.Open(CAPICOM_CURRENT_USER_STORE,CAPICOM_MY_STORE,CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);
				Certs=Store.Certificates;
				ValidCerts=Certs;//.Find(CAPICOM_CERTIFICATE_FIND_TIME_VALID,ТекДата,-1);
				Для CertNum=1 По ValidCerts.Count Цикл
					
					CurCert=ValidCerts.Item(CertNum);
					Thumbprint_2=CurCert.Thumbprint;
					СерийныйНомер=CurCert.SerialNumber;
					Если Thumbprint_2=Thumbprint_1.Thumbprint_1 Тогда
						ВыбСертификат=CurCert;
						Прервать;
					Конецесли;
				КонецЦикла;
			Исключение
				ТекстОшибки=СтрЗаменить(ОписаниеОшибки(),"'","");
				Сообщить(NStr("ru = 'Ошибка при работе с хранилищем сертификатов! (Возможно, не установлен модуль CAPICOM)"+Символы.ПС+"Описание ошибки: "+ТекстОшибки+"'", "ru"));
				Возврат Ложь;
			КонецПопытки;
			
		СтрокаСертификата=ВЫбСертификат.Export();
		ДанныеСертификата = Base64Значение(СтрокаСертификата);
			
		
		
		
		//Body=
		Request.Open("POST", "https://auth.kontur.ru/api/authentication/certificate/get-token.ashx?version=v5&ignoreUntrustedHeuristicError=false&registerIfNotExist=true", 0);
		Request.SetRequestHeader("Content-Length", XMLString(StrLen(ДанныеСертификата)));
		Request.SetRequestHeader("Content-Type", "application/json;charset=UTF-8");
		Request.SetRequestHeader("X-Csrf-Token", AntiForgery);	
		Request.Send(ДанныеСертификата);
		Request.WaitForResponse();
		
	КонецЕсли;
	
	Request.Open("GET", "https://diadoc.kontur.ru/api/boxes", 0);
	Request.Send();
	Request.WaitForResponse();
	
	Попытка
		Result = ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.JSONValue(Request.ResponseText);	
	Исключение
		Сообщить("Не удалось подключиться к Диадок. Проверьте логин и пароль пользователя");
		Возврат Ложь;
	КонецПопытки;
	
	
	НашлиОрганизацию=ЛОжь;
	Для Каждого Стр_1 Из Result.boxes.active Цикл
		Если Thumbprint_1.ИНН=Стр_1.organization.inn Тогда
			boxId=Стр_1.organization.boxId;
			BoxUrl = "https://diadoc.kontur.ru/" + Стр_1.organization.boxId;
			НашлиОрганизацию=Истина;
			Прервать;
		КонецЕсли;
	Конеццикла;
	Если НашлиОрганизацию=Ложь Тогда
		Сообщить("Не нашли в дидадок активную организацию с ИНН " +Thumbprint_1.ИНН);
		Возврат Ложь;
	КонецЕсли;
	
	
	Request.Open("GET", "https://diadoc.kontur.ru/AuthScript/Token", 0);
	Request.Send();
	Request.WaitForResponse();
	VerificationToken = Request.ResponseText;
	
	
	
	Возврат Истина;
	#КонецЕсли
КонецФункции

&НаКлиенте
Функция ПреобразоватьЗначениеВJSON(ЗначениеПреобразовать, ПараметрыКонвертации=Неопределено) Экспорт
	
	Режим = "Стандарт";
	Если Не ПараметрыКонвертации = Неопределено Тогда
		Режим = ПараметрыКонвертации.Режим;
	КонецЕсли;
	СтрокаJSON = ЗначениеВJSON(ЗначениеПреобразовать, Режим);
	Возврат СтрокаJSON;
	
КонецФункции

//AU переделан конвертер в json для универсальной сериализации
&НаКлиенте
Функция ЗначениеВJSON(ЗначениеПреобразовать, Режим, ПервыйУровень=Истина) 
	
	ТекстРезультат	= "";
	_ТипЗначения	= ТипЗнч(ЗначениеПреобразовать);
	Если		ЗначениеПреобразовать = Неопределено	Тогда	//Неопределено
		ТекстРезультат = "null";
		Если Режим = "API" Тогда
			ТекстРезультат = ЗначениеВJSON("", Режим, ПервыйУровень);
		КонецЕсли;
	ИначеЕсли	ЗначениеПреобразовать = Null			Тогда	//Null
		ТекстРезультат = "null";
		Если Режим= "ExtSDK" Тогда
			ТекстРезультат = ЗначениеВJSON(Новый Структура, Режим, ПервыйУровень);//При формировании сообщения, идёт как dict
		КонецЕсли;	
	ИначеЕсли	_ТипЗначения = Тип("Структура")			Тогда	//Структура
		ТекстРезультат = "{";
		Для Каждого КлючИЗначение Из ЗначениеПреобразовать Цикл
			ТекстРезультат = ТекстРезультат+""""+КлючИЗначение.Ключ+""":"+ ЗначениеВJSON(КлючИЗначение.Значение, Режим, Ложь)+",";
		КонецЦикла;
		Если Прав(ТекстРезультат, 1) = "," Тогда
			ТекстРезультат = Лев(ТекстРезультат, СтрДлина(ТекстРезультат)-1);
		КонецЕсли;		
		ТекстРезультат = ТекстРезультат + "}";
	ИначеЕсли	_ТипЗначения = Тип("Массив")			Тогда	//Массив
		ТекстРезультат = ТекстРезультат + "[";
		Для Каждого Элемент Из ЗначениеПреобразовать Цикл
			ТекстРезультат = ТекстРезультат+ЗначениеВJSON(Элемент, Режим, Ложь)+",";
		КонецЦикла;
		Если Прав(ТекстРезультат, 1) = "," Тогда
			ТекстРезультат = Лев(ТекстРезультат, СтрДлина(ТекстРезультат)-1);
		КонецЕсли;		
		ТекстРезультат = ТекстРезультат + "]";
	ИначеЕсли	_ТипЗначения = Тип("Число")				Тогда	//Число 
		ТекстРезультат = Формат(ЗначениеПреобразовать, "ЧН=0; ЧГ=0;");
		Если Режим = "API" Тогда//Для АПИ оборачиваем числа как строку
			ТекстРезультат = ЗначениеВJSON(ТекстРезультат, Режим, ПервыйУровень);
		КонецЕсли;
	ИначеЕсли	_ТипЗначения = Тип("Булево")			Тогда	//Булево
		ТекстРезультат = Формат(ЗначениеПреобразовать, "БЛ=false; БИ=true");
	Иначе
		Если	_ТипЗначения = Тип("Дата")				Тогда	//Дата
			ТекстРезультат = Строка(ЗначениеПреобразовать);
		Иначе													//Строка
			ТекстРезультат = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Строка(ЗначениеПреобразовать), 
							"\",								"\\"),// Перемаскирование последовательности.
							//"/",								"\/"),// x2f//AU правый слеш не оборачиваем.
							Символ(008),						"\b"),// x08
							Символы.Таб,						"\t"),// x09
							Символы.ПС,							"\n"),// x0a
							Символы.ПФ,							"\f"),// x0c
							Символы.ВК,							"\r"),// x0d
							Символ(34),							"\""");//кавычки
		КонецЕсли;
		Если Не ПервыйУровень Тогда//Для 1 уровня не оборачиваем кавычками строку
			ТекстРезультат = """"+ТекстРезультат+"""";
		КонецЕсли;
	КонецЕсли;
	Возврат ТекстРезультат;
	
КонецФункции

&НаКлиенте
Функция ВключитьExtSDK(Отказ,РезультатExtSdk,ОбъектПлагин,ДанныеИнтеграции )
	ОжиданиеОтвета		= 10;//На время включения, ответ от плагина должен приходить быстро
	
	
		Попытка
			ОбъектПлагин = Новый COMОбъект("Tensor.SbisPluginClientCOM");
			
		Исключение
			Отказ = Истина;
			Возврат Новый Структура("code, message, details", 767, "Ошибка при создании COM-объекта", "Не зарегистрирована компонента Tensor.SbisPluginClientCOM.");
		КонецПопытки;
		
		Попытка
			ОбъектПлагин.ReadAllObjects();
		Исключение
			Отказ = Истина;
			Возврат Новый Структура("code, message, details", 762, "Версия системы не поддерживается", "Обновите СБИС плагин.");
		КонецПопытки;
		
		//Попытка
			
			РезультатЗапроса = Плагин_GetModule("ExtSdk", Отказ,ОбъектПлагин,ДанныеИнтеграции);
			
	Если Отказ Тогда
		Если		РезультатЗапроса.code = 762 Тогда
			Возврат РезультатЗапроса;
		ИначеЕсли	РезультатЗапроса.code = 775 Тогда
			РезультатЗапроса.details = РезультатЗапроса.details + " Возможно СБИС плагин не запущен.";
		КонецЕсли;
		//На новом плагине метода закрытия соединения нет и он перезапускается автоматом
		Возврат РезультатЗапроса;
	КонецЕсли;
	ExtSDK1_ID = Строка(Новый УникальныйИдентификатор);
	Парам				= Новый Структура("id", ExtSDK1_ID);
	ДопПараметры_EXT	= Новый Структура("ЕстьРезультат,ВернутьОшибку,СообщатьПриОшибке,ВремяОжиданияОтвета", Истина, Истина, Ложь, ОжиданиеОтвета);
	
	РезультатЗапроса = ОтправитьИОбработатьКоманду("getConnectionID", Парам, ДопПараметры_EXT, Отказ,ДанныеИнтеграции,ОбъектПлагин);
	Если Отказ Тогда
		Если РезультатЗапроса.code = 775 Тогда
			РезультатЗапроса.details = "Не удалось получить расширение ExtSdk. Возможно, СБИС плагин не запущен.";
		КонецЕсли;
		Возврат РезультатЗапроса;
	КонецЕсли;
	ExtSDK1_ID = РезультатЗапроса;
	РезультатЗапроса = ОтправитьИОбработатьКоманду("getVersion", , ДопПараметры_EXT, Отказ,ДанныеИнтеграции,ОбъектПлагин);
	Если Отказ Тогда                                                                                       	
		Если РезультатЗапроса.code = 775 Тогда
			РезультатЗапроса.details = "Не удалось получить расширение ExtSdk. Возможно, СБИС плагин не запущен.";
		КонецЕсли;
		Возврат РезультатЗапроса;
	КонецЕсли;
	ДанныеИнтеграции.Вставить("ExtSdk1", ExtSDK1_ID);	
	
	
КонецФункции

&НаКлиенте
Функция СериализоватьObjectВСтруктуру(ComJsonObject) Экспорт
	
	Объект_Имя = ComJsonObject.ReadFirst();
	СтруктураРезультата	= Новый Структура();
	Пока Не Объект_Имя = "" Цикл
		Объект_Значение	= Неопределено;
		Объект_Тип		= ComJsonObject.TypeOf(Объект_Имя);	
		Если		Объект_Тип = "JsonString" Тогда
			Объект_Значение = ComJsonObject.Read(Объект_Имя);
			Если	Сред(Объект_Значение,3,1) = "."
				И	Сред(Объект_Значение,6,1) = "." Тогда//Возможно, это дата
				//Переопределим значение как дату, если это действительно она
				Если		СтрДлина(Объект_Значение) = 10 Тогда
					Попытка
						Объект_Значение = Дата(Сред(Объект_Значение,7,4), Сред(Объект_Значение,4,2), Лев(Объект_Значение, 2));
					Исключение
						//В случае исключения, ничего не делаем. Это не дата, значение не меняется
					КонецПопытки;
				ИначеЕсли	СтрДлина(Объект_Значение) = 19 Тогда 
					Попытка
						Объект_Значение = Дата(Сред(Объект_Значение,7,4), Сред(Объект_Значение,4,2), Лев(Объект_Значение, 2), Сред(Объект_Значение,12, 2), Сред(Объект_Значение,15, 2), Сред(Объект_Значение,18, 2))
					Исключение
						//В случае исключения, ничего не делаем. Это не дата, значение не меняется
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли	Объект_Тип = "JsonBoolean" Тогда
			Объект_Значение		= Булево(ComJsonObject.Read(Объект_Имя));
		ИначеЕсли	Объект_Тип = "JsonNumber" Тогда
			Объект_Значение		= ComJsonObject.Read(Объект_Имя);
		ИначеЕсли	Объект_Тип = "JsonObject" Тогда
			ComJsonSubObject	= ComJsonObject.ReadObject(Объект_Имя);
			Объект_Значение		= СериализоватьObjectВСтруктуру(ComJsonSubObject);
		ИначеЕсли	Объект_Тип = "JsonArray" Тогда
			ComJsonSubArray		= ComJsonObject.ReadObjectList(Объект_Имя);
			Объект_Значение		= Новый Массив;
			ComJsonSubArrayInd	= ComJsonSubArray.Count() - 1;
			Для ИндексПодМассива = 0 По ComJsonSubArrayInd Цикл
				ComJsonSubObject = ComJsonSubArray.At(ИндексПодМассива);
				Объект_Значение.Добавить(СериализоватьObjectВСтруктуру(ComJsonSubObject));
			КонецЦикла;
		ИначеЕсли	Объект_Тип = "JsonNull" Тогда
			Объект_Значение		= Неопределено;
		Иначе
			ВызватьИсключение("Неизвестный тип ответа " + Объект_Тип + ". Обратитесь в техническую поддержку.");
		КонецЕсли;
		
		Попытка
			СтруктураРезультата.Вставить(Объект_Имя, Объект_Значение);
		Исключение
			//Значения с не корректными ключами не обрабатываем.
		КонецПопытки;
		Объект_Имя = ComJsonObject.ReadNext();
	КонецЦикла;	
	Возврат СтруктураРезультата;
КонецФункции

&НаКлиенте
Функция Плагин_ReadAllObjects(ПараметрыЗапроса, сбисДополнительныеПараметры=Неопределено, Отказ,ОбъектПлагин)
	
	НеобработанныеСобытия=Новый Массив;
	НеобработанныеСобытия.Очистить();
	НеобработанныеОтветы=Новый Структура;
	Результат = Новый Массив;
	Попытка
		SbisPluginClientCOMObjects	= ОбъектПлагин.ReadAllObjects();
		ВсегоСообщений				= SbisPluginClientCOMObjects.GetUpperBound(0);
		ИндексПервогоСообщения		= SbisPluginClientCOMObjects.GetLowerBound(0);
	Исключение
		Отказ = Истина;
		Возврат "{""code"":700, ""message"":""Неизвестная ошибка подключения"",""detail"": ""Ошибка обработки ответа от плагина. Детально: " + ОписаниеОшибки() + """}";
	КонецПопытки;
	
	Для ИндексСообщения = ИндексПервогоСообщения По ВсегоСообщений Цикл
		РезультатЗапроса = Неопределено;
		Попытка
			SbisPluginClientCOMObject	= SbisPluginClientCOMObjects.GetValue(ИндексСообщения);
			ExtendedJsonObject			= SbisPluginClientCOMObject.GetExtendedJsonObject();
			РезультатЗапроса			= СериализоватьObjectВСтруктуру(ExtendedJsonObject);
		Исключение
			Отказ = Истина;
			Возврат "{""code"":700, ""message"":""Неизвестная ошибка подключения"",""detail"": ""Ошибка обработки ответа от метода плагина " + ПараметрыЗапроса.Метод + ". Детально: " + ОписаниеОшибки() + """}";
		КонецПопытки;
		//Проверим, что пришёл правильный результат
		ИдентификаторКоманды = Неопределено;
		Если Не РезультатЗапроса.Свойство("queryID", ИдентификаторКоманды) Тогда
			Отказ = Истина;
			Возврат "{""code"":700, ""message"":""Неизвестная ошибка подключения"",""detail"": ""Неизвестный формат ответа от плагина""}";
		ИначеЕсли ПустаяСтрока(ИдентификаторКоманды) Тогда//Пустой ИД запроса означает ошибку транспорта, либо пришедшее событие.
			Если РезультатЗапроса.type = "Error" Тогда//Ошибка COM транспорта. Проверим, что не отвалился плагин
				ПолучитьВсе		= Ложь;
				Отказ			= Истина;
				РезультатОшибка	= "";
				Если Не сбисДополнительныеПараметры = Неопределено
					И	сбисДополнительныеПараметры.Свойство("ПолучитьВсе") Тогда
					ПолучитьВсе = сбисДополнительныеПараметры.ПолучитьВсе;
				КонецЕсли;
				//Проверим ошибку, которая произошла в процессе работы. Если что-то критичное, то принудительно отключаем обмен.
				СтрокаОшибка = Неопределено;
				Если Не РезультатЗапроса.Свойство("result", СтрокаОшибка)
					Или	СтрокаОшибка = "Not connected"
					Или	СтрокаОшибка = "Server not found" Тогда//Отвалился плагин.
					//Кэш.СБИС.ОбменВключен = Ложь;
				ИначеЕсли Лев(СтрокаОшибка, 17) = "System.Exception:" Тогда//Вернулось системное исключение, проверим сообщение.
					СтрокаОшибка = СокрЛП(Сред(СтрокаОшибка, 18));
					Если СтрокаОшибка = "Ошибка при отправке сообщения. Подробности в файле логирования" Тогда//Отвалился плагин.
					//	Кэш.СБИС.ОбменВключен = Ложь;
					Иначе
						РезультатОшибка = "{""code"":700, ""message"":""Неизвестная ошибка подключения"",""detail"": """ + СтрокаОшибка +"""}";
					КонецЕсли;
				Иначе//Произошла неизвестная ошибка в процессе работы плагина (Не SbisException).
					РезультатОшибка = "{""code"":700, ""message"":""Неизвестная ошибка подключения"",""detail"": """ + СтрокаОшибка +"""}";
				КонецЕсли;
				Если ПустаяСтрока(РезультатОшибка) Тогда
					//Если сбисОбменВключен Тогда
					//	РезультатОшибка = "{""code"":756, ""message"":""Подключение недоступно"",""detail"": ""Работа СБИС плагина была остановлена. Перезапустите СБИС Плагин и обработку для дальнейшей работы.""}";
					//Иначе
						РезультатОшибка = "{""code"":775, ""message"":""Не получен ответ от плагина"",""detail"": """ + СтрокаОшибка + """}";
					//КонецЕсли;
				КонецЕсли;
				Если ПолучитьВсе Тогда
					Результат.Добавить(РезультатОшибка);
					Продолжить;
				КонецЕсли;
				Возврат РезультатОшибка;
			ИначеЕсли	РезультатЗапроса.type = "Closed" Тогда
				//Кэш.СБИС.ОбменВключен = Ложь;				
				Возврат "{""code"":756, ""message"":""Подключение недоступно"",""detail"": ""Работа СБИС плагина была остановлена. Перезапустите СБИС Плагин и обработку для дальнейшей работы.""}";
			ИначеЕсли	РезультатЗапроса.result.Свойство("eventName")
					И	сбисДополнительныеПараметры.Свойство("ЧитатьСобытия")
					И	сбисДополнительныеПараметры.ЧитатьСобытия Тогда//Это событие. Берем, если указана необходимость получения
				НеобработанныеСобытия.Добавить(РезультатЗапроса.result);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		ВыполненнаяКоманда = СтрПолучитьСтроку(СтрЗаменить(ИдентификаторКоманды, "@", Символы.ПС),1);
		
		Если ВыполненнаяКоманда = ПараметрыЗапроса.Метод Тогда
			Результат.Добавить(РезультатЗапроса);
		ИначеЕсли ВыполненнаяКоманда = "WriteDocumentEx2" Тогда//Отправка документов оцениваниеся после отправки всех пакетов
			Если Не НеобработанныеОтветы.Свойство(ВыполненнаяКоманда) Тогда
				НеобработанныеОтветы.Вставить(ВыполненнаяКоманда, Новый Массив);
			КонецЕсли;
			НеобработанныеОтветы[ВыполненнаяКоманда].Добавить(РезультатЗапроса);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции


&НаКлиенте
Функция Плагин_GetModule(ИмяМодуля, Отказ,ОбъектПлагин,ДанныеИнтеграции)
	//Проверим наличие подключенного модуля.
	Попытка
		РезультатЗапроса = ОбъектПлагин.GetModule(ИмяМодуля);
	Исключение
		Отказ = Истина;//Если падает метод COM, значит его нет в модуле и это старый плагин
		Возврат Новый Структура("code, message, details", 762, "Версия системы не поддерживается", "Обновите СБИС плагин.");
	КонецПопытки;
	
	//Проверим, что модуль получен
	Если РезультатЗапроса = "" Тогда
		Ответы	= Плагин_ReadAllObjects(Новый Структура("Метод", ""), Новый Структура("ПолучитьВсе", Истина), Отказ,ОбъектПлагин);
		Отказ	= Истина;
		//Смотрим вернувшиеся ошибки и обрабатываем в порядке приоритета:
		//1. Ошибка 756 о завершении работы плагина
		//2. Ошибка 775 о отсутствии запущенного плагина
		//3. Последняя ошибка в списке, которая должна относиться к GetModule()
		СтруктураОшибки = Неопределено;
		Для Каждого ОтветРезультат Из Ответы Цикл
			СтруктураОшибки = ПолучитьСтруктуруОшибки(ОтветРезультат);
			Если		СтруктураОшибки.code = 756 Тогда
				Прервать;
			ИначеЕсли   СтруктураОшибки.code = 775 Тогда
				СтруктураОшибки.details = "Не удалось получить расширение " + ИмяМодуля + ".";
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЗначениеЗаполнено(СтруктураОшибки) Тогда
			СтруктураОшибки = Новый Структура("code, message, details", 775, "Не получен ответ от плагина", "Не удалось получить расширение " + ИмяМодуля + ".");
		КонецЕсли;
		Возврат СтруктураОшибки;
	КонецЕсли;
	Если Не Отказ Тогда
		ДанныеИнтеграции.Вставить(ИмяМодуля, РезультатЗапроса);
	КонецЕсли;
	Возврат РезультатЗапроса;
	
КонецФункции


Функция ПолучитьСтруктуруОшибки(Error) Экспорт
	Перем dump, methodName;
	Попытка
		Если Лев(Error,1) = "{" Тогда
			Ошибка = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Error);
			Если Ошибка.Свойство("message") и Ошибка.Свойство("detail") Тогда
				ТекстОшибки = Ошибка.message;
				ОписаниеРасширенное = Ошибка.detail;
				КодОшибки = Ошибка.code;
				Ошибка.Свойство("dump", dump);
				Ошибка.Свойство("methodName", methodName);
			Иначе
				ТекстОшибки = Ошибка.error.message;
				ОписаниеРасширенное = Ошибка.error.details;
				КодОшибки = Ошибка.error.code;
				Ошибка.error.Свойство("dump", dump);
				Ошибка.error.Свойство("methodName", methodName);
			КонецЕсли;
		ИначеЕсли Лев(Error,35) = "callBLObject(): Метод бизнес логики" и Найти(Error,"вернул ошибку")>0 Тогда
			ErrorJson = Сред(Error, Найти(Error,"{"));
			ErrorJson = Лев(ErrorJson, СтрДлина(ErrorJson)-1);
			Ошибка = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ErrorJson);
			Попытка
				ТекстОшибки = Ошибка.message;
				ОписаниеРасширенное = Ошибка.details;
				КодОшибки = Ошибка.code;
				Ошибка.Свойство("dump", dump);
			Исключение
				ТекстОшибки = Error;
				ОписаниеРасширенное = Error;
				КодОшибки = 100;
			КонецПопытки;
		ИначеЕсли Найти(Error,"{""jsonrpc"":") >0 Тогда
			ErrorJson = Сред(Error, Найти(Error,"{""jsonrpc"":"));
			Пока Прав(ErrorJson,1) <> "}" Цикл
				ErrorJson = Лев(ErrorJson, СтрДлина(ErrorJson)-1);		
			КонецЦикла;
			Ошибка = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ErrorJson);
			Попытка
				ТекстОшибки = Ошибка.message;
				ОписаниеРасширенное = Ошибка.details; 
				КодОшибки = Ошибка.code;
				Ошибка.Свойство("dump", dump);
			Исключение
				Попытка
					ТекстОшибки = Ошибка.Error.message;
					ОписаниеРасширенное = Ошибка.Error.details; 
					КодОшибки = Ошибка.Error.code;
					Ошибка.Error.Свойство("dump", dump);
				Исключение
					ТекстОшибки = Error;
					ОписаниеРасширенное = Error;
					КодОшибки = 100;
				КонецПопытки;
			КонецПопытки;
		Иначе
			ТекстОшибки = Error;
			ОписаниеРасширенное = Error;
			КодОшибки = 100;
		КонецЕсли;
	Исключение
		ТекстОшибки = Error;
		ОписаниеРасширенное = Error;
		КодОшибки = 100;
	КонецПопытки;

	Ошибка = Новый Структура("message,details,code",ТекстОшибки,ОписаниеРасширенное,КодОшибки);
	Если ЗначениеЗаполнено(dump) Тогда
		Ошибка.Вставить("dump", dump);
	КонецЕсли;
	Если ЗначениеЗаполнено(methodName) Тогда
		Ошибка.Вставить("methodName", methodName);
	КонецЕсли;
	Возврат Ошибка;
КонецФункции





&НаКлиенте
Функция Плагин_ВыполнитьМетод(ПараметрыВызова, сбисДополнительныеПараметры, Отказ,ДанныеИнтеграции,ОбъектПлагин) Экспорт
	
	Идентификатор	= Неопределено;
	ПараметрПроверка= Неопределено;
	Object_ID		= "";
	Connection_ID	= "";
	
	Call_Ext		= Ложь;
	Call_method		= Неопределено;
	Call_param		= Неопределено;
	Method_param	= Неопределено;
	
	//Для возможности запуска в отдельном потоке, передаем objectID вызываемого объекта и IDConnection на случай, если вызов делаем через callMethod
	//Если IDConnection не указан, то модуль вызывается напрямую
	//Если	Не сбисДополнительныеПараметры.Свойство("Поток", ПараметрПроверка)
	//	И	Не ДанныеИнтеграции.Свойство("Объекты", ПараметрПроверка) Тогда
	//	Отказ = Истина;
	//	Возврат "{""message"":""Неизвестная ошибка подключения"",""detail"": ""Не подключена подсистема взаимодействия со СБИС плагин"",""code"":700}";
	//КонецЕсли;
	Если Не ДанныеИнтеграции.Свойство("ExtSdk1", Connection_ID) Тогда
		Connection_ID = "";
	ИначеЕсли ЗначениеЗаполнено(Connection_ID) Тогда
		Call_Ext = Истина;
	КонецЕсли;
	
	//Для методов без аргументов передаём пустой JSON объект
	Если	Не ПараметрыВызова.Свойство("Параметры", Method_param)
		Или		Method_param = Неопределено Тогда
		Method_param = Новый Структура;
	КонецЕсли;
	Если Call_Ext Тогда
		Call_method	= "callMethod";
		Call_param = Новый Структура;
		Call_param.Вставить("idConnection",	Connection_ID);
		Call_param.Вставить("method",		ПараметрыВызова.Метод);
		Call_param.Вставить("param",		Method_param);
	Иначе
		Call_method	= ПараметрыВызова.Метод;
		Call_param	= Новый Структура("param", Method_param);
	КонецЕсли;
	Возврат Плагин_CallMethod( "ExtSdk", Call_method, ПараметрыВызова.Метод, Call_param, сбисДополнительныеПараметры, Отказ,ОбъектПлагин,ДанныеИнтеграции);
	
КонецФункции


&НаКлиенте
Функция Плагин_CallMethod(сбисМодуль, сбисМетод, сбисИдКоманды, ПараметрыМетода, сбисДополнительныеПараметры, Отказ,ОбъектПлагин,ДанныеИнтеграции)
	Перем Object_ID, Call_ID, Acc_ID;
	
	Если Не ДанныеИнтеграции.Свойство(сбисМодуль, Object_ID) Тогда
		//Такого модуля ещё нет, пробуем получить.
		Object_ID = Плагин_GetModule( сбисМодуль, Отказ,ОбъектПлагин,ДанныеИнтеграции);
		Если Отказ Тогда
			Возврат Object_ID;
		КонецЕсли;
	КонецЕсли;
	
	Если Не сбисДополнительныеПараметры.Свойство("Идентификатор", Call_ID) Тогда
		Call_ID = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	сбисДополнительныеПараметры.Свойство("ИдентификаторАккаунта", Acc_ID);
	Call_ID		= сбисИдКоманды + "@" + Object_ID + "@" + Call_ID;
	Call_param	= ПреобразоватьЗначениеВJSON(ПараметрыМетода, Новый Структура("Режим", "ExtSDK"));
	Попытка
		//TODO38 убрать условие на ид аккаунта
		Если ЗначениеЗаполнено(Acc_ID) Тогда
			ОбъектПлагин.CallMethod(Call_ID, Object_ID, сбисМодуль + "." + сбисМетод, Call_param, Acc_ID);
		Иначе
			ОбъектПлагин.CallMethod(Call_ID, Object_ID, сбисМодуль + "." + сбисМетод, Call_param);
		КонецЕсли;
	Исключение
		Отказ = Истина;
		Возврат("{""code"":700,""methodName"":""" + сбисМетод + """,""message"":""Неизвестная ошибка подключения"",""detail"": ""Ошибка вызова метода плагина " + сбисМетод + ". Детально: " + ОписаниеОшибки() + """}");
	КонецПопытки;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция сбисПолучитьСтруктуруОшибки(Error) Экспорт
	Перем dump, methodName;
	Попытка
		Если Лев(Error,1) = "{" Тогда
			Ошибка = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Error);
			Если Ошибка.Свойство("message") и Ошибка.Свойство("detail") Тогда
				ТекстОшибки = Ошибка.message;
				ОписаниеРасширенное = Ошибка.detail;
				КодОшибки = Ошибка.code;
				Ошибка.Свойство("dump", dump);
				Ошибка.Свойство("methodName", methodName);
			Иначе
				ТекстОшибки = Ошибка.error.message;
				ОписаниеРасширенное = Ошибка.error.details;
				КодОшибки = Ошибка.error.code;
				Ошибка.error.Свойство("dump", dump);
				Ошибка.error.Свойство("methodName", methodName);
			КонецЕсли;
		ИначеЕсли Лев(Error,35) = "callBLObject(): Метод бизнес логики" и Найти(Error,"вернул ошибку")>0 Тогда
			ErrorJson = Сред(Error, Найти(Error,"{"));
			ErrorJson = Лев(ErrorJson, СтрДлина(ErrorJson)-1);
			Ошибка = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ErrorJson);
			Попытка
				ТекстОшибки = Ошибка.message;
				ОписаниеРасширенное = Ошибка.details;
				КодОшибки = Ошибка.code;
				Ошибка.Свойство("dump", dump);
			Исключение
				ТекстОшибки = Error;
				ОписаниеРасширенное = Error;
				КодОшибки = 100;
			КонецПопытки;
		ИначеЕсли Найти(Error,"{""jsonrpc"":") >0 Тогда
			ErrorJson = Сред(Error, Найти(Error,"{""jsonrpc"":"));
			Пока Прав(ErrorJson,1) <> "}" Цикл
				ErrorJson = Лев(ErrorJson, СтрДлина(ErrorJson)-1);		
			КонецЦикла;
			Ошибка = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ErrorJson);
			Попытка
				ТекстОшибки = Ошибка.message;
				ОписаниеРасширенное = Ошибка.details; 
				КодОшибки = Ошибка.code;
				Ошибка.Свойство("dump", dump);
			Исключение
				Попытка
					ТекстОшибки = Ошибка.Error.message;
					ОписаниеРасширенное = Ошибка.Error.details; 
					КодОшибки = Ошибка.Error.code;
					Ошибка.Error.Свойство("dump", dump);
				Исключение
					ТекстОшибки = Error;
					ОписаниеРасширенное = Error;
					КодОшибки = 100;
				КонецПопытки;
			КонецПопытки;
		Иначе
			ТекстОшибки = Error;
			ОписаниеРасширенное = Error;
			КодОшибки = 100;
		КонецЕсли;
	Исключение
		ТекстОшибки = Error;
		ОписаниеРасширенное = Error;
		КодОшибки = 100;
	КонецПопытки;

	Ошибка = Новый Структура("message,details,code",ТекстОшибки,ОписаниеРасширенное,КодОшибки);
	Если ЗначениеЗаполнено(dump) Тогда
		Ошибка.Вставить("dump", dump);
	КонецЕсли;
	Если ЗначениеЗаполнено(methodName) Тогда
		Ошибка.Вставить("methodName", methodName);
	КонецЕсли;
	Возврат Ошибка;
КонецФункции


&НаКлиенте
Функция ОбработатьОтвет(сбисПараметрыВызова, сбисРезультат, сбисДополнительныеПараметры, Отказ)
	
	checkparam		= Неопределено;
	message_type	= Неопределено;
	message_result	= Неопределено;
	
	Если Отказ Тогда
		message_result = сбисРезультат;
	ИначеЕсли Не сбисРезультат.Количество() Тогда
		message_result = "{""methodName"":""" + сбисПараметрыВызова.Метод + """,""message"":""Не получен ответ от плагина"",""detail"": """ + сбисПараметрыВызова.Метод + "() не вернул ответ за разумное время"",""code"":775}";
		Отказ = Истина;
	ИначеЕсли	Не сбисРезультат[0].Свойство("result",	message_result)
			Или	Не сбисРезультат[0].Свойство("type",	message_type)	Тогда
		//Метод не вернул результат. Проверить, должно ли так быть. (Для метода, у которого однозначно должен быть ответ это ошибка)
		Если	сбисДополнительныеПараметры.Свойство("ЕстьРезультат", checkparam)
			И	checkparam Тогда
			message_result = "{""methodName"":""" + сбисПараметрыВызова.Метод + """, ""message"": ""Неизвестная ошибка СБИС Плагина"",""detail"":""Отсутствует результат выполнения метода " + сбисПараметрыВызова.Метод + "()"", ""code"":400}";
			Отказ = Истина;
		Иначе
			message_result = сбисРезультат[0];
		КонецЕсли;
	ИначеЕсли message_type = "Error" Тогда
		//В ответе строка ошибки.
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Ошибка = ПолучитьСтруктуруОшибки(message_result);
		Ошибка = Исключение_1(Ошибка, "ExtSDK.сбисОбработатьОтвет");
		Если Не сбисДополнительныеПараметры.Свойство("СообщатьПриОшибке", checkparam)
			Или	checkparam Тогда
			Сообщить(Ошибка.details);
			
			
			Если Ошибка.code=300 Тогда
				Сообщить("Необходимо изменить тариф в СБИС для отправки в ЭДО");
			КонецЕсли;
			
			
		КонецЕсли;
		Если 	сбисДополнительныеПараметры.Свойство("ВернутьОшибку", checkparam)
			И	checkparam Тогда
			Возврат Ошибка; 
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат	message_result;	
	
КонецФункции

&НаКлиенте
Функция Исключение_1(	сбисОсновнаяОшибка=Неопределено, сбисИмяКоманды="ОбщиеФункции.сбисИсключение", 
						сбисКод=100, сбисСообщение="Неизвестная ошибка системы", сбисДетализация="Неизвестная ошибка системы", 
						сбисДамп=Неопределено) Экспорт
	Перем сбисСтек;
	сбисИсключение = Новый Структура("code, message, details, methodName, dump, base", сбисКод, сбисСообщение, сбисДетализация, сбисИмяКоманды, сбисДамп);
	Если сбисОсновнаяОшибка = Неопределено Тогда
		Возврат сбисИсключение;
	ИначеЕсли Не сбисОсновнаяОшибка.Свойство("base", сбисИсключение.base) Тогда
		сбисИсключение.base = сбисОсновнаяОшибка;
	КонецЕсли;
	//Для неизвестной ошибки поставим параметры от текущей
	Если	сбисИсключение.code = 100
		И	сбисИсключение.message = "Неизвестная ошибка системы" Тогда
		ЗаполнитьЗначенияСвойств(сбисИсключение, сбисОсновнаяОшибка, "code, message");
		Если сбисОсновнаяОшибка.Свойство("details") Тогда
			сбисИсключение.details = сбисОсновнаяОшибка.details;
		КонецЕсли;
	КонецЕсли;
	//Добавим основную ошибку в стек
	Если Не сбисОсновнаяОшибка.Свойство("stack", сбисСтек) Тогда
		сбисСтек = Новый Массив;
		сбисЗаписьВСтек = Новый Структура("methodName, code, message, dump");
		ЗаполнитьЗначенияСвойств(сбисЗаписьВСтек, сбисОсновнаяОшибка);
		сбисСтек.Добавить(сбисЗаписьВСтек);
	КонецЕсли;
	//Добавим обрабатываемую ошибку в стек
	сбисСтек.Вставить(0, Новый Структура("methodName, code, message, dump", сбисИмяКоманды, сбисКод, сбисСообщение, сбисДамп));
	сбисИсключение.Вставить("stack", сбисСтек);
	Если сбисОсновнаяОшибка.Свойство("data") Тогда
		сбисИсключение.Вставить("data", сбисОсновнаяОшибка.data);
	КонецЕсли;
	//пробросим дамп в основную ошибку, чтоб не потерять
	Если сбисДамп = Неопределено Тогда
		сбисОсновнаяОшибка.Свойство("dump", сбисИсключение.dump);
	КонецЕсли;
	Возврат сбисИсключение;
	
КонецФункции



&НаКлиенте
Функция Плагин_ПолучитьОтветы(ПараметрыЗапроса, ДопПараметры, Отказ,ОбъектПлагин) Экспорт
	ВремяНачала		= ТекущаяДата();
	ВремяОжидания	= Неопределено;//
	Если Не ДопПараметры.Свойство("ВремяОжиданияОтвета", ВремяОжидания) Тогда
		ВремяОжидания = 120;
	КонецЕсли;
	
	Результат = Новый Массив;
	Пока ТекущаяДата() - ВремяОжидания < ВремяНачала Или Не ВремяОжидания Цикл
		РезультатПолучения = Плагин_ReadAllObjects(ПараметрыЗапроса, ДопПараметры, Отказ,ОбъектПлагин);
		Если Отказ Тогда
			Возврат РезультатПолучения;
		КонецЕсли;	
		Для Каждого СтрокаРезультат Из РезультатПолучения Цикл
			Результат.Добавить(СтрокаРезультат);
		КонецЦикла;
		Если	Не	ВремяОжидания//Если время ожидания = 0 то делаем один проход и прерываемся
			Или	(	Результат.Количество() И Не РезультатПолучения.Количество()) Тогда// в предыдущий проход получили ответы, а в текущий уже нет - прерываемся
			Прервать;	
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции




&НаКлиенте
Функция ОтправитьИОбработатьКоманду(Метод,ПараметрыМетода=Неопределено,ДопПараметры,Отказ,ДанныеИнтеграции,ОбъектПлагин) Экспорт
	
	ПараметрыВызова = Новый Структура("Метод, Параметры", Метод, ПараметрыМетода);
	РезультатМетода = Плагин_ВыполнитьМетод(ПараметрыВызова, ДопПараметры, Отказ,ДанныеИнтеграции,ОбъектПлагин);
	Если Не Отказ Тогда
		Если	Не	ДопПараметры.Свойство("ПолучитьОтвет")
			Или		ДопПараметры.ПолучитьОтвет Тогда
			РезультатМетода = Плагин_ПолучитьОтветы(ПараметрыВызова, ДопПараметры, Отказ,ОбъектПлагин);
		Иначе//Просто вызываем метод плагина, чтение ответов не требуется. Результат будет только если явно указано и упал вызов метода плагина. Проверка по флагу Отказ
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	//Проверим ответ на наличие ошибок
	Возврат ОбработатьОтвет(ПараметрыВызова, РезультатМетода, ДопПараметры, Отказ);
	
КонецФункции


&НаКлиенте
Функция СформироватьНастройкиПодключения(ИдентификаторСессии = "", ДополнительныеПараметрыЗапроса=Неопределено, Отказ=Ложь,Thumbprint_1,ДанныеИнтеграции,ОбъектПлагин) Экспорт
	Параметр = Новый Структура("host", "https://"+Thumbprint_1.СБ);
	Если ЗначениеЗаполнено(ИдентификаторСессии) Тогда
		Параметр.Вставить("sid",ИдентификаторСессии);
	КонецЕсли;
	Если ДополнительныеПараметрыЗапроса = Неопределено Тогда
		ДополнительныеПараметрыЗапроса = Новый Структура;	
	КонецЕсли;
	Возврат ОтправитьИОбработатьКоманду("setConnectionInfo",Параметр, ДополнительныеПараметрыЗапроса,Отказ,ДанныеИнтеграции,ОбъектПлагин);	
КонецФункции	


&НаКлиенте
Функция РезультатАвторизации( ПараметрыРезультата, Отказ) Экспорт
	РезультатАвторизации = ПараметрыРезультата.Результат;
	Если Не Отказ Тогда
		Возврат РезультатАвторизации;
	КонецЕсли;
	Если РезультатАвторизации.code = 303 Тогда
		//Если код ошибки - 303, значит ожидается подтверждение аутентификации. Разбираем строку в details ошибки для выборки данных формирования СМС и последующей авторизации.
		addInfo = Новый Структура;
		addInfo.Вставить("Идентификатор",		РезультатАвторизации.dump.data.addinfo.ResourceID);
		addInfo.Вставить("ИдентификаторСессии",	РезультатАвторизации.dump.data.addinfo.SessionID);
		addInfo.Вставить("МетодВалидации",		РезультатАвторизации.dump.data.addinfo.MethodToValidate);
		addInfo.Вставить("ПоСертификату",		ПараметрыРезультата.ДополнительныеПараметры.ПоСертификату);
		РезультатАвторизации.Вставить("data", Новый Структура("addinfo", addinfo));
	//Плагин сам переключает домен.	
	//ИначеЕсли РезультатАвторизации.code = 759 Тогда
	//	РезультатАвторизации = Кэш.ОбщиеФункции.сбисПереключитьДомен(Кэш, ПараметрыРезультата, Отказ)
	КонецЕсли;
	Возврат РезультатАвторизации;
КонецФункции


&НаКлиенте
Функция ПодключитьсяКЭДОСб_Новый(Thumbprint_1,Идентификатор,HTTPСервисЗапрос,СерийныйНомер="",ДанныеИнтеграции,ОбъектПлагин) Экспорт
	
	Отказ=ложь;
	РезультатExtSdk="";
	ОбъектПлагин=Неопределено;
	ДанныеИнтеграции=Новый Структура;
	Результат=ВключитьExtSDK(Отказ,РезультатExtSdk,ОбъектПлагин,ДанныеИнтеграции );
	Если Отказ=Истина Тогда
					Если Результат.code = 762 Тогда
						сбисОткрытьПредупреждение = Истина;
						ТекстПредупреждение = Результат.message + " (" + Результат.details + ")" + Символы.ПС + "Переустановите плагин в режиме полной установки и перезапустите 1С для дальнейшей работы.";
						
						ПараметрыСообщения = Новый Структура;
						ПараметрыСообщения.Вставить("АдресСсылка",	"http://update.sbis.ru/SbisPlugin/master/SbisPlugin.exe");
						ПараметрыСообщения.Вставить("ТекстСсылка",	"Скачать последнюю версию СБИС плагина");
						ПараметрыСообщения.Вставить("Текст",		ТекстПредупреждение);
					ИначеЕсли Результат.code = 767 Тогда
						сбисОткрытьПредупреждение = Истина;
						
						ПараметрыСообщения = Новый Структура;
						ПараметрыСообщения.Вставить("АдресСсылка",	"https://sbis.ru/help/integration/1C_set/modul/typical_errors/activex_component");
						ПараметрыСообщения.Вставить("ТекстСсылка",	"Решение проблемы регистрации Tensor.SbisPluginClientCOM");
						ПараметрыСообщения.Вставить("Текст",		Результат.message + " (" + Результат.details + ")");
					ИначеЕсли Результат.code = 775 Тогда
						сбисОткрытьПредупреждение = Истина;
						
						ПараметрыСообщения = Новый Структура("АдресСсылка");
						ПараметрыСообщения.Вставить("ТекстСсылка",	"Решение проблемы запуска СБИС{0} плагина");
						ПараметрыСообщения.Вставить("Текст",		Результат.message + " (" + Результат.details + ")");
						//Если Кэш.СБИС.ПараметрыИнтеграции.ТипПлагина = "SBIS3" Тогда
							ПараметрыСообщения.ТекстСсылка = СтрЗаменить(ПараметрыСообщения.ТекстСсылка, "{0}", "3");
							ПараметрыСообщения.АдресСсылка = "https://sbis.ru/test?check=ExtSDK";
						//Иначе
						//	ПараметрыСообщения.ТекстСсылка = СтрЗаменить(ПараметрыСообщения.ТекстСсылка, "{0}", "");
						//	ПараметрыСообщения.АдресСсылка = "https://sbis.ru/help/integration/1C_set/modul/typical_errors/plugin_answer/";
						//КонецЕсли;
					КонецЕсли;
					Если сбисОткрытьПредупреждение Тогда
						ФормаПредупреждение=ОткрытьФорму("Справочник.ЭДО_ХамелеонЦРПТ.Форма.ФормаПредупреждения");
						ФормаПредупреждение.Показать(ПараметрыСообщения);
					//Иначе
					//	Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Результат, ДопПараметры);			
					КонецЕсли;
					//Возврат Результат.message + "(" + Результат.details + ")";

			Возврат Неопределено;
			
		КонецЕсли;
		
	ДопПараметры = Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ПоСертификату", Ложь, Истина, Истина);
	Отказ=ложь;
	РезультатЗапроса = СформироватьНастройкиПодключения(,ДопПараметры,Отказ,Thumbprint_1,ДанныеИнтеграции,ОбъектПлагин);	
	
	ПараметрыРезультат = Новый Структура(	"Метод,							Параметры,							ДополнительныеПараметры", 
											"AuthenticateByCertificate2",	Новый Структура("id", Thumbprint_1.Thumbprint_1),	ДопПараметры);
	ПараметрыРезультат.Вставить("Результат", ОтправитьИОбработатьКоманду(ПараметрыРезультат.Метод, ПараметрыРезультат.Параметры, ДопПараметры, Отказ,ДанныеИнтеграции,ОбъектПлагин));
	Возврат РезультатАвторизации(ПараметрыРезультат, Отказ);	
	
	
	Возврат Неопределено;
	
	
	CAPICOM_CURRENT_USER_STORE=2;
	CAPICOM_MY_STORE="My";
	CAPICOM_OTHER_STORE="AddressBook";
	CAPICOM_STORE_OPEN_READ_ONLY=0;
	CAPICOM_CERTIFICATE_FIND_TIME_VALID=9;
	CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED = 2;

	
	Попытка
		// формируем список наших сертификатов
		ТекЭлемент=Неопределено;
		СписокНашихСертификатов=Новый СписокЗначений;
		
		
		Store=Новый COMОбъект("CAPICOM.Store");
		Store.Open(CAPICOM_CURRENT_USER_STORE,CAPICOM_MY_STORE,CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);
		Certs=Store.Certificates;
		ValidCerts=Certs;//.Find(CAPICOM_CERTIFICATE_FIND_TIME_VALID,ТекДата,-1);
		Для CertNum=1 По ValidCerts.Count Цикл
			
			CurCert=ValidCerts.Item(CertNum);
			Thumbprint_2=CurCert.Thumbprint;
			СерийныйНомер=CurCert.SerialNumber;
			Если Thumbprint_2=Thumbprint_1.Thumbprint_1 Тогда
				ВыбСертификат=CurCert;
				Прервать;
			Конецесли;
		КонецЦикла;
	Исключение
		ТекстОшибки=СтрЗаменить(ОписаниеОшибки(),"'","");
		Сообщить(NStr("ru = 'Ошибка при работе с хранилищем сертификатов! (Возможно, не установлен модуль CAPICOM)"+Символы.ПС+"Описание ошибки: "+ТекстОшибки+"'", "ru"));
		Возврат Неопределено;
	КонецПопытки;
	
	
	ПараметрыЗапроса="auth/service/";
	
	
	HTTPЗапрос=Новый HTTPЗапрос(ПараметрыЗапроса);
	
	СтрокаСертификата=ВЫбСертификат.Export();
	//ДанныеСертификата = Base64Значение(СтрокаСертификата);
	
	ТелоПодключить=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.JSONПоСертификату(СтрокаСертификата,Thumbprint_1);

	
	
			#Если ВебКлиент Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоПодключить,КодировкаТекста.UTF8);
			#Иначе
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоПодключить,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
		
	Ответ = HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	
	
	Если Ответ.КодСостояния<>200 Тогда
		Возврат Неопределено;
	Иначе
		КриптоМаркер = Ответ.ПолучитьТелоКакСтроку();
		
	КонецЕсли;
	ЗашифрованныеДанныеСтрокой=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ЧтениеМаркера(КриптоМаркер);
	
	Возврат ЗашифрованныеДанныеСтрокой;
	
	//ЗашифрованныеДанныеСтрокой = base64Строка(КриптоМаркер);
//	ЗашифрованныеДанныеСтрокой=СтрЗаменить(ЗашифрованныеДанныеСтрокой,Символы.ПС,"");
//	ЗашифрованныеДанныеСтрокой=СтрЗаменить(ЗашифрованныеДанныеСтрокой,Символы.ВК,"");
	
	//КомпД=НовыйEncryptedData
	EncryptedData=Новый COMОбъект("CAPICOM.EnvelopedData");
	//EncryptedData
	EncryptedData.Recipients.Add(ВыбСертификат);

	EncryptedData.Decrypt(ЗашифрованныеДанныеСтрокой);
	
	
	
	ДвоичнД=EncryptedData.Content;
	
	
	//ДвоичнДанные=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ДвоичнД,КодировкаТекста.UTF16,Ложь);
	ДвоичнДанные=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ДвоичнД,КодировкаТекста.UTF16,Ложь);
	
	//Возврат ПолучитьСтрокуИзДвоичныхДанных(ДвоичнДанные,КодировкаТекста.OEM);
	Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(ДвоичнДанные,КодировкаТекста.OEM);
Конецфункции

Функция ВключитьSDK(Отказ,РезультатExtSdk,ОбъектПлагин,ДанныеИнтеграции )
	ОжиданиеОтвета		= 10;//На время включения, ответ от плагина должен приходить быстро
	
	
		Попытка
			ОбъектПлагин = Новый COMОбъект("SBIS.Docflow");
			
		Исключение
			Отказ = Истина;
			Возврат Новый Структура("code, message, details", 767, "Ошибка при создании COM-объекта", "Не зарегистрирована компонента Tensor.SbisPluginClientCOM.");
		КонецПопытки;
		
	
	
КонецФункции


&НаКлиенте
Функция ПодключитьсяКЭДОСб_SDK(Thumbprint_1,Идентификатор,HTTPСервисЗапрос,СерийныйНомер="",ДанныеИнтеграции,ОбъектПлагин,СайтДляПодключенияПоТакскму) Экспорт
	
	Отказ=ложь;
	РезультатExtSdk="";
	ОбъектПлагин=Неопределено;
	ДанныеИнтеграции=Новый Структура;
	Результат=ВключитьSDK(Отказ,РезультатExtSdk,ОбъектПлагин,ДанныеИнтеграции);
	Если Отказ=Истина Тогда
					Если Результат.code = 762 Тогда
						сбисОткрытьПредупреждение = Истина;
			ПараметрыСообщения = Новый Структура;
			ПараметрыСообщения.Вставить("АдресСсылка", "https://sbis.ru/help/integration/sdk/");
			ПараметрыСообщения.Вставить("ТекстСсылка", "Скачать СБИС SDK");
			ПараметрыСообщения.Вставить("Текст",	"Не зарегистрирована новая версия ActiveX компоненты СБИС SDK."+Символы.ПС+
													//"Необходима версия компоненты не ниже "+Символы.ПС+
													//"Текущая версия "+ВерсияSDK+Символы.ПС+
													"Для корректной работы установите компоненту и перезапустите 1С.");
					ИначеЕсли Результат.code = 767 Тогда
						сбисОткрытьПредупреждение = Истина;
						
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("АдресСсылка", "https://sbis.ru/help/integration/sdk/");
		ПараметрыСообщения.Вставить("ТекстСсылка", "Скачать СБИС SDK");
		ПараметрыСообщения.Вставить("Текст",	"Не зарегистрирована ActiveX компонента СБИС SDK."+Символы.ПС+
												"Для корректной работы необходимо установить компоненту и перезапустить 1С.");
					ИначеЕсли Результат.code = 775 Тогда
						сбисОткрытьПредупреждение = Истина;
						
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("АдресСсылка", "https://sbis.ru/help/integration/sdk/");
		ПараметрыСообщения.Вставить("ТекстСсылка", "Скачать СБИС SDK");
		ПараметрыСообщения.Вставить("Текст",	"Не зарегистрирована ActiveX компонента СБИС SDK."+Символы.ПС+
												"Для корректной работы необходимо установить компоненту и перезапустить 1С.");
					КонецЕсли;
					Если сбисОткрытьПредупреждение Тогда
						ФормаПредупреждение=ОткрытьФорму("Справочник.ЭДО_ХамелеонЦРПТ.Форма.ФормаПредупреждения");
						ФормаПредупреждение.Показать(ПараметрыСообщения);
					//Иначе
					//	Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Результат, ДопПараметры);			
					КонецЕсли;
					//Возврат Результат.message + "(" + Результат.details + ")";

			Возврат Неопределено;
			
		КонецЕсли;
		
	//МестныйКэш	= Кэш;
	сбисПараметрыВызова = Новый Структура("Отпечаток", Thumbprint_1.Thumbprint_1);
	
	ДопПараметры = Новый Структура("СообщатьПриОшибке, ВернутьОшибку, МетодВалидации, ПараметрВалидации", Ложь, Истина, "ConfirmAuthByCertificate", сбисПараметрыВызова);
	
	СтрокаВерсии = "ХамелеонЦРПТ" ; 	
	ConnectionInfo = ОбъектПлагин.CreateSimpleObject();
	ConnectionInfo.Write("АдресСервера", "https://"+СайтДляПодключенияПоТакскму+"/");
	ConnectionInfo.Write("ИнформацияОПриложении",	СтрокаВерсии);
	//Если Кэш.Парам.ТипПрокси = "Вручную" Тогда
	//	ConnectionInfo.Write("ОпределятьПроксиАвтоматически", "Нет");
	//	ConnectionInfo.Write("АдресПроксиСервера", Кэш.Парам.ПроксиСервер+":"+МестныйКэш.Парам.ПроксиПорт);
	//	ConnectionInfo.Write("ЛогинПроксиСервера", Кэш.Парам.ПроксиЛогин);
	//	ConnectionInfo.Write("ПарольПроксиСервера", Кэш.Парам.ПроксиПароль);
		
	//ИначеЕсли Кэш.Парам.ТипПрокси = "Автоматически" Тогда 
		ConnectionInfo.Write("ОпределятьПроксиАвтоматически", "Да");
		
	//ИначеЕсли Кэш.Парам.ТипПрокси = "НеИспользовать" Тогда 
	//	ConnectionInfo.Write("ОпределятьПроксиАвтоматически", "Нет");
//	КонецЕсли;
	//Если ЗначениеЗаполнено(ИдентификаторСессии) Тогда
	//	ConnectionInfo.Write("ИдентификаторСессии", ИдентификаторСессии);	
	//КонецЕсли;
	
	ОбъектПлагин.WriteConnectionInfo(ConnectionInfo);
	
	ПараметрыРезультат	= Новый Структура(	"Метод,						ДополнительныеПараметры", 
											"AuthenticateByCertificate",ДопПараметры);
	ПараметрыРезультат.Вставить("Результат", ОбъектПлагин.AuthenticateByCertificate(СериализоватьСтруктуруВObject(сбисПараметрыВызова,ОбъектПлагин)));
	
//BEEBBB3C35609A19100CD51D24536A34CB955385	
	Возврат РезультатАвторизацииSDK(ПараметрыРезультат, Отказ,ОбъектПлагин);
	
Конецфункции

Функция СериализоватьСтруктуруВObject(Структура,Кэш) Экспорт
	// сериализует  com-объект в структуру	
	Object = Кэш.CreateSimpleObject();
	Для Каждого Элемент Из Структура Цикл	
		Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			ObjectList = Кэш.CreateSimpleObjectList(); 
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				ObjectList.add(СериализоватьСтруктуруВObject(ЭлементМассива,Кэш));	
			КонецЦикла;
			Object.WriteObjectList(Элемент.Ключ, ObjectList);	
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			Object.WriteObject(Элемент.Ключ, СериализоватьСтруктуруВObject(Элемент.Значение,Кэш));
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			Object.Write(Элемент.Ключ,формат(Элемент.Значение, "ДФ='дд.ММ.гггг ЧЧ.мм.сс'"));
		Иначе
			Object.Write(Элемент.Ключ,Элемент.Значение);
		КонецЕсли;
	КонецЦикла;	
	Возврат Object;
КонецФункции



Функция РезультатАвторизацииSDK(ПараметрыРезультата, Отказ,ОбъектПлагин) Экспорт
	РезультатАвторизации = ПараметрыРезультата.Результат;
	Если РезультатАвторизации = 0 Тогда
		Отказ = Истина;
		РезультатАвторизации = ПолучитьСтруктуруОшибки(ОбъектПлагин);
		Попытка
			Сообщить(РезультатАвторизации.message+": "+РезультатАвторизации.details);
		Исключение
			Сообщить("Не удалось подключиться к СБИС!!");
		КонецПопытки;
	КонецЕсли;
	Если Не Отказ Тогда	
		Возврат ПолучитьИдентификаторСессии(ОбъектПлагин);
	КонецЕсли;

	Возврат "";
КонецФункции

Функция ПолучитьИдентификаторСессии(Кэш) Экспорт
	// получает идентификатор текущей сессии	
	ConnectionInfo = Кэш.ReadConnectionInfo();
	ИдентификаторСессии = ConnectionInfo.Read("ИдентификаторСессии");
	Возврат ИдентификаторСессии;
КонецФункции




&НаКлиенте
Функция ЗарегистрироватьСертификатПоПользователю(Thumbprint_1) Экспорт

	CAPICOM_CURRENT_USER_STORE=2;
	CAPICOM_MY_STORE="My";
	CAPICOM_OTHER_STORE="AddressBook";
	CAPICOM_STORE_OPEN_READ_ONLY=0;
	CAPICOM_CERTIFICATE_FIND_TIME_VALID=9;
	CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED = 2;

	
	Попытка
		// формируем список наших сертификатов
		ТекЭлемент=Неопределено;
		СписокНашихСертификатов=Новый СписокЗначений;
		
		
		Store=Новый COMОбъект("CAPICOM.Store");
		Store.Open(CAPICOM_CURRENT_USER_STORE,CAPICOM_MY_STORE,CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);
		Certs=Store.Certificates;
		ValidCerts=Certs;//.Find(CAPICOM_CERTIFICATE_FIND_TIME_VALID,ТекДата,-1);
		Для CertNum=1 По ValidCerts.Count Цикл
			
			CurCert=ValidCerts.Item(CertNum);
			Thumbprint_2=CurCert.Thumbprint;
			СерийныйНомер=CurCert.SerialNumber;
			Если Thumbprint_2=Thumbprint_1.Thumbprint_1 Тогда
				ВыбСертификат=CurCert;
				Прервать;
			Конецесли;
		КонецЦикла;
	Исключение
		ТекстОшибки=СтрЗаменить(ОписаниеОшибки(),"'","");
		Сообщить(NStr("ru = 'Ошибка при работе с хранилищем сертификатов! (Возможно, не установлен модуль CAPICOM)"+Символы.ПС+"Описание ошибки: "+ТекстОшибки+"'", "ru"));
		Возврат Неопределено;
	КонецПопытки;
	
СайтДляПодключенияПоТакскму=Thumbprint_1.СБ;
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
						
				HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
						
				HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			СерийныйНомер="";
			Результат=РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОСб(Thumbprint_1,"",HTTPСервисЗапрос_ТХЦ,СерийныйНомер);
			
			Если Не ЗначениеЗаполнено(Результат) Тогда
				ПоказатьПредупреждение(,"Не удалось подключиться к ЭДО по логину и паролю");
				Возврат Неопределено;
			КонецЕсли;
			
	 
	
	//HTTPЗапрос=Новый HTTPЗапрос();
	
	СтрокаСертификата=ВЫбСертификат.Export();
	//ДанныеСертификата = Base64Значение(СтрокаСертификата);
	
	ТелоПодключить=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ЗарегистрироватьСертификаВСБИС(СтрокаСертификата);

	
			HTTPЗапрос=Новый HTTPЗапрос("service/?srv=1");
			
			HTTPЗапрос.Заголовки.Вставить("X-SBISSessionID",	Результат);
			HTTPЗапрос.Заголовки.Вставить("Content-Type",	"application/json; charset=utf-8");
		//	HTTPЗапрос.Заголовки.Вставить("User-Agent",	"1C8.3.10.2772_VO2.0.35.1");
		//	HTTPЗапрос.Заголовки.Вставить("X-API-Version",	"2.3.1");
			
			
			#Если ВебКлиент Тогда
					HTTPЗапрос.УстановитьТелоИзСтроки(ТелоПодключить,"UTF-8");
					#Иначе
					HTTPЗапрос.УстановитьТелоИзСтроки(ТелоПодключить,"UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
				#КонецЕсли
				
			
			Ответ=HTTPСервисЗапрос_ТХЦ.ОтправитьДляОбработки(HTTPЗапрос);
			ТТТ_Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());	
			
		Возврат ТТТ_Ответ
КонецФункции

&НаКлиенте
Функция СписокВходящихДокументовСБ(Thumbprint_1,Маркер,Страница,РазмерСтраницы,КачатьСЭДОЗаПоследниеДни) Экспорт
	
	СайтДляПодключенияПоТакскму=Thumbprint_1.СБ;
	
	ТелоJSON	=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ЗапросДокументовИзменения(Thumbprint_1,Страница,РазмерСтраницы,КачатьСЭДОЗаПоследниеДни);
	
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
		Прокси=Новый ИнтернетПрокси;
		Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
		HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	Иначе
				
		HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	КонецЕсли;
	
	

	HTTPЗапрос=Новый HTTPЗапрос("service/?srv=1");

	HTTPЗапрос.Заголовки.Вставить("X-SBISSessionID",	Маркер );
	HTTPЗапрос.Заголовки.Вставить("Content-Type",	"application/json; charset=utf-8");
	//	HTTPЗапрос.Заголовки.Вставить("User-Agent",	"1C8.3.10.2772_VO2.0.35.1");
	//	HTTPЗапрос.Заголовки.Вставить("X-API-Version",	"2.3.1");


	#Если ВебКлиент Тогда
			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоJSON,"UTF-8");
			#Иначе
			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоJSON,"UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
		#КонецЕсли
		

	Ответ=HTTPСервисЗапрос_ТХЦ.ОтправитьДляОбработки(HTTPЗапрос);
	ТТТ_Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());	
	
	
	Если Ответ.КодСостояния=200 Тогда
		Возврат ТТТ_Ответ;
	Иначе
		Попытка
			Сообщить("Не удалось получить список входящих документов по ЭДО. Ошибка "+ТТТ_Ответ.error.details);
		Исключение
			Сообщить("Не удалось получить список входящих документов по ЭДО. Ошибка "+Ответ.ПолучитьТелоКакСтроку());
		КонецПопытки;
		Возврат Неопределено;
	КонецЕсли;
КонецФункции


&НаКлиенте
Функция ПодключитьсяКЭДОСб(Thumbprint_1,Идентификатор,HTTPСервисЗапрос,СерийныйНомер="") Экспорт
	
	CAPICOM_CURRENT_USER_STORE=2;
	CAPICOM_MY_STORE="My";
	CAPICOM_OTHER_STORE="AddressBook";
	CAPICOM_STORE_OPEN_READ_ONLY=0;
	CAPICOM_CERTIFICATE_FIND_TIME_VALID=9;
	CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED = 2;

	
	Попытка
		// формируем список наших сертификатов
		ТекЭлемент=Неопределено;
		СписокНашихСертификатов=Новый СписокЗначений;
		
		
		Store=Новый COMОбъект("CAPICOM.Store");
		Store.Open(CAPICOM_CURRENT_USER_STORE,CAPICOM_MY_STORE,CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);
		Certs=Store.Certificates;
		ValidCerts=Certs;//.Find(CAPICOM_CERTIFICATE_FIND_TIME_VALID,ТекДата,-1);
		Для CertNum=1 По ValidCerts.Count Цикл
			
			CurCert=ValidCerts.Item(CertNum);
			Thumbprint_2=CurCert.Thumbprint;
			СерийныйНомер=CurCert.SerialNumber;
			Если Thumbprint_2=Thumbprint_1.Thumbprint_1 Тогда
				ВыбСертификат=CurCert;
				Прервать;
			Конецесли;
		КонецЦикла;
	Исключение
		ТекстОшибки=СтрЗаменить(ОписаниеОшибки(),"'","");
		Сообщить(NStr("ru = 'Ошибка при работе с хранилищем сертификатов! (Возможно, не установлен модуль CAPICOM)"+Символы.ПС+"Описание ошибки: "+ТекстОшибки+"'", "ru"));
		Возврат Неопределено;
	КонецПопытки;
	
	
	ПараметрыЗапроса="auth/service/";
	
	
	HTTPЗапрос=Новый HTTPЗапрос(ПараметрыЗапроса);
	
	СтрокаСертификата=ВЫбСертификат.Export();
	//ДанныеСертификата = Base64Значение(СтрокаСертификата);
	
	ТелоПодключить=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.JSONПоСертификату(СтрокаСертификата,Thumbprint_1);

	
	
			#Если ВебКлиент Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоПодключить,КодировкаТекста.UTF8);
			#Иначе
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоПодключить,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
		
	Ответ = HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	
	
	Если Ответ.КодСостояния<>200 Тогда
		Возврат Неопределено;
	Иначе
		КриптоМаркер = Ответ.ПолучитьТелоКакСтроку();
		
	КонецЕсли;
	ЗашифрованныеДанныеСтрокой=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ЧтениеМаркера(КриптоМаркер);
	
	Возврат ЗашифрованныеДанныеСтрокой;
	
	//ЗашифрованныеДанныеСтрокой = base64Строка(КриптоМаркер);
//	ЗашифрованныеДанныеСтрокой=СтрЗаменить(ЗашифрованныеДанныеСтрокой,Символы.ПС,"");
//	ЗашифрованныеДанныеСтрокой=СтрЗаменить(ЗашифрованныеДанныеСтрокой,Символы.ВК,"");
	
	//КомпД=НовыйEncryptedData
	EncryptedData=Новый COMОбъект("CAPICOM.EnvelopedData");
	//EncryptedData
	EncryptedData.Recipients.Add(ВыбСертификат);

	EncryptedData.Decrypt(ЗашифрованныеДанныеСтрокой);
	
	
	
	ДвоичнД=EncryptedData.Content;
	
	
	//ДвоичнДанные=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ДвоичнД,КодировкаТекста.UTF16,Ложь);
	ДвоичнДанные=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ДвоичнД,КодировкаТекста.UTF16,Ложь);
	
	//Возврат ПолучитьСтрокуИзДвоичныхДанных(ДвоичнДанные,КодировкаТекста.OEM);
	Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(ДвоичнДанные,КодировкаТекста.OEM);
Конецфункции
