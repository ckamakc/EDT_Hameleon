

Функция ЧислоDecToHex(Знач Исходное, Знач НужноЦифр = 2)
	ЧислаБайтHex = "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF";
	
	Если НужноЦифр = 2 Тогда
		Возврат Сред(ЧислаБайтHex, Исходное * 2 + 1, 2);
	КонецЕсли; 
	
	ЧислаHex = "0123456789ABCDEF";
	Результат = "";
	Для Цифр = 1 По НужноЦифр Цикл
		ТекЦифра = Исходное % 16;
		Исходное = Цел(Исходное / 16);
		Результат = Сред(ЧислаHex, ТекЦифра + 1, 1) + Результат;
	КонецЦикла; 
	Возврат Результат;
КонецФункции // ЧислоDecToHex()



Функция ТекстUnicodeToUTF8(Стр)
	ЧислаБайтHex = "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF";
	БезопасныеСимволы = "-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~";
	ИтогСтр = "";
	
	Для й = 1 По СтрДлина(Стр) Цикл
		ТекСимв = Сред(Стр, й, 1);
		
		Если ТекСимв = " " Тогда
			ИтогСтр = ИтогСтр + "+";
			Продолжить;
		КонецЕсли; 
		Если Найти(БезопасныеСимволы, ТекСимв) > 0 Тогда
			ИтогСтр = ИтогСтр + ТекСимв;
			Продолжить;
		КонецЕсли; 
		
		Код = КодСимвола(ТекСимв);
		Если Код < 128 Тогда
			ИтогСтр = ИтогСтр + "%" + ЧислоDecToHex(Код);
		Иначе
			///////		Конвертация Unicode в UTF-8 в полном соответствии со спецификацией!  (http://ru.wikipedia.org/wiki/UTF-8)
			Делитель = 32;	Нашлёпка = 8;	КодХекс = "";
			Пока Делитель > 4 Цикл
				//////	Установка следующих за первым байтов
				ТекБайт = Код % 64;
				КодХекс = "%" + ЧислоDecToHex(128 + ТекБайт) + КодХекс;
				
				Код		= Цел(Код / 64);
				//////	Проверка на закрывающий байт
				Если Код < Делитель Тогда
					КодХекс = "%" + ЧислоDecToHex((Нашлёпка-2) * Делитель + Код) + КодХекс;
					Прервать;
				КонецЕсли;
				//////	Переход к следующему уровню закрытия
				Делитель = Делитель / 2;
				Нашлёпка = Нашлёпка * 2;
			КонецЦикла; 
			ИтогСтр = ИтогСтр + КодХекс;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ИтогСтр;
КонецФункции // ТекстUnicodeToUTF8()
 


Функция ВернутьЗаданияИВремяВыполнения(ВремяПоследнегоВыполнения) Экспорт
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Регламенты_ХамелеонЦРПТТипЗапросаОбработки.Тип,
		|	Регламенты_ХамелеонЦРПТТипЗапросаОбработки.Время КАК Время,
		|	Регламенты_ХамелеонЦРПТТипЗапросаОбработки.Тип.Алгоритм КАК Алгоритм,
		|	Регламенты_ХамелеонЦРПТТипЗапросаОбработки.Тип.ВыполнитьНаКлиенте КАК ВыполнитьНаКлиенте,
		|	Регламенты_ХамелеонЦРПТТипЗапросаОбработки.Тип.Наименование КАК Наименование
		|ИЗ
		|	Документ.Регламенты_ХамелеонЦРПТ.ТипЗапросаОбработки КАК Регламенты_ХамелеонЦРПТТипЗапросаОбработки
		|ГДЕ
		|	Регламенты_ХамелеонЦРПТТипЗапросаОбработки.Выполнять
		|	И Регламенты_ХамелеонЦРПТТипЗапросаОбработки.Ссылка.ВыполнятьРегламент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Время";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивСтруктурВыполненияЗапросов=Новый Массив;
	МассивАлгоритмаЕсть=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		МассивСтруктурВыполненияЗапросов.Добавить(Новый Структура("Тип,Время,Алгоритм,НаКлиенте,Наименование",ВыборкаДетальныеЗаписи.Тип,ВыборкаДетальныеЗаписи.Время,ВыборкаДетальныеЗаписи.Алгоритм,ВыборкаДетальныеЗаписи.ВыполнитьНаКлиенте,ВыборкаДетальныеЗаписи.Наименование));
	КонецЦикла;
	ВремяПоследнегоВыполнения=Константы.ВремяПоследнегоВыполненияРегламента_ХамелеонЦРПТ.Получить();
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	Возврат МассивСтруктурВыполненияЗапросов;
	
КонецФункции


Процедура УстановитьДатуВремя(ТекДата)  Экспорт
	Попытка
		Константы.ВремяПоследнегоВыполненияРегламента_ХамелеонЦРПТ.Установить(ТекДата);
	исключение
	КонецПопытки;
КонецПроцедуры
	
	
Процедура ВыполнитьНаСервере(Алгоритм) Экспорт
//	Попытка
//		Выполнить(Алгоритм.Алгоритм);
	Попытка
		ОбщийМодуль_ВЫПОЛНИТЬ_ВЫЗОВОМ_СЕРВЕРА_ХамелеонЦРПТ.ЗаписатьВЖурналРегламент(Алгоритм.Наименование,Предопределенноезначение("Перечисление.ТипЗапускаРегламентногоЗадания_ХамелеонЦРПТ.Запуск"),"");
		
		Выполнить(Алгоритм.Алгоритм);
		ОбщийМодуль_ВЫПОЛНИТЬ_ВЫЗОВОМ_СЕРВЕРА_ХамелеонЦРПТ.ЗаписатьВЖурналРегламент(Алгоритм.Наименование,Предопределенноезначение("Перечисление.ТипЗапускаРегламентногоЗадания_ХамелеонЦРПТ.Остановка"),"");
	Исключение
		ОбщийМодуль_ВЫПОЛНИТЬ_ВЫЗОВОМ_СЕРВЕРА_ХамелеонЦРПТ.ЗаписатьВЖурналРегламент(Алгоритм.Наименование,Предопределенноезначение("Перечисление.ТипЗапускаРегламентногоЗадания_ХамелеонЦРПТ.Ошибка"),ОписаниеОшибки());
	КонецПопытки;
		
		//	Исключение
//	КонецПопытки;
КонецПроцедуры



Процедура ЗаписатьВЖурналРегламент(Наименование,ТипЗапуска,Ошибка) Экспорт
	Если не РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().НеПисатьВЖурналРегламентныеЗадания Тогда
		ТекДата=ТекущаяДата();
		РегСвНабор=РегистрыСведений.ЗапускРегламентыхЗаданий_ХамелеонЦРПТ.СоздатьНаборЗаписей();
		РегСвНабор.Отбор.Период.Установить(текДата);
		РегсвНабор.Отбор.НазваниеАлгоритма.Установить(Наименование);
		РегСвНабор.Отбор.ТипЗапуска.Установить(типЗапуска);
		Доб=РегСвНабор.Добавить();
		доб.НазваниеАлгоритма=Наименование;
		Доб.Ошибка=Ошибка;
		Доб.Период=ТекДата;
		Доб.ТипЗапуска=ТипЗапуска;
		РегСвНабор.Записать(Истина);
	КонецЕсли;
КонецПроцедуры


