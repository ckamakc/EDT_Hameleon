Процедура ЗагрузитьВводВоборотJSON(ДвоичнДанные,МассивАгрегация,Пользователь) Экспорт
	Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(ДвоичнДанные,"UTF-8");
	//ЧтениеJSON = Новый ЧтениеJSON;
	//ЧтениеJSON.УстановитьСтроку(Текст1);
	Сведения=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);//ПрочитатьJSON(ЧтениеJSON);
	
	
	МассивКМ=Новый ТаблицаЗначений;
	МассивКМ.Колонки.Добавить("СертификатДата");
	МассивКМ.Колонки.Добавить("СертификатНомер");
	МассивКМ.Колонки.Добавить("СертификатТип");
	МассивКМ.Колонки.Добавить("Сертификат");
	МассивКМ.Колонки.Добавить("kit");
	МассивКМ.Колонки.Добавить("ДатаПроизводства");
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.КодТНВЭД_ХамелеонЦРПТ"));
	МассивКМ.Колонки.Добавить("КодТНВЭД",Новый ОписаниеТипов(МассивТипов));
	
			Для Каждого Стр Из Сведения.sntins Цикл
			Добав=МассивКМ.Добавить();
			//ДатаД=Сведения.certificate_date;
			//Добав.СертификатДата=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
			//Добав.СертификатНомер=Стр.certificate_number;
			
			Добав.kit=КодироватьСтроку(Стр,СпособКодированияСтроки.КодировкаURL);	
			
		Конеццикла;
		
	//МассивКМ.Сортировать("ДатаПроизводства");
	
		ТипВвода=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании;
	
	//ИНН=Сведения.owner_inn;
	Организация=Пользователь.Организация;
	Если Не ЗначениеЗаполнено(Организация) тогда
	//	Сообщить("Не удалось загрузить агрегации из файла, так как нет организации с данным ИНН "+ИНН);
		Возврат;
	КонецЕсли;
	ТекущийПользователь=Пользователь;
	Если Не ЗначениеЗаполнено(ТекущийПользователь) тогда
	//	Сообщить("Нет пользователя для подключения к организации по ИНН "+ИНН);
		Возврат;
	КонецЕсли;
		
	СоздатьВводВоборот=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
	СоздатьВводВоборот.Дата=ТекущаяДата();
	//ДатаД=Сведения.product_date;
	//СоздатьВводВоборот.ДатаПроизводства=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
	СоздатьВводВоборот.Организация=Организация;
	СоздатьВводВоборот.ТекущийПользователь=ТекущийПользователь;
	СоздатьВводВоборот.ТипДокумента=типВвода;;
	Сведения.Свойство("accompanyingDocument",СоздатьВводВоборот.НомерВСД);
	
	
	
	Для Каждого Стр_1 Из МассивКМ ЦИкл
		
		ШтрихКод=Стр_1.kit;
	Если СтрДлина(ШтрихКод)=20 Тогда
		ШтрихКод=Сред(ШтрихКод,3);
	КонецЕсли;
	ШтрихКод_1=(ШтрихКод);
	
		Если СоздатьВводВоборот.СерийныеНомера.НайтиСтроки(Новый Структура("cis",ШтрихКод)).Количество()>0 Тогда
			Сообщить("CiS "+ШтрихКод+" уже присутсвует в документе");
			Возврат;
		КонецЕсли;
	//КонецЕсли;	
	
	
	
			
			попытка
				Если Сред(ШтрихКод,1,2)="01" Тогда
					Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
					Число(Сред(ШтрихКод,3,14)));;
					Если Не ЗначениеЗаполнено(Продукция) Тогда
						Продукция=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
						Продукция.GTIN=Число(Сред(ШтрихКод,3,14));
						Продукция.Наименование=xmlString(Продукция.GTIN);
						Продукция.НаименованиеТовара=xmlString(Продукция.GTIN);
						Продукция.Записать();;
						Продукция=Продукция.Ссылка;
					КонецЕсли;
				Иначе
					Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
					Число(Сред(ШтрихКод,1,14)));;
					Если Не ЗначениеЗаполнено(Продукция) Тогда
						Продукция=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
						Продукция.GTIN=Число(Сред(ШтрихКод,1,14));
						Продукция.Наименование=xmlString(Продукция.GTIN);
						Продукция.НаименованиеТовара=xmlString(Продукция.GTIN);
						Продукция.Записать();;
						Продукция=Продукция.Ссылка;
					КонецЕсли;
				КонецЕсли;
				
				
			Исключение
				Продукция=Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка();
			КонецПопытки;
				Добав=СоздатьВводВоборот.СерийныеНомера.Добавить();
				
				
				
				
				Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
				Добав.НаименованиеТовара=Продукция;
				Добав.cis=ШтрихКод;
				
				ППП=СоздатьВводВоборот.Товары.НайтиСтроки(Новый структура("gtin,КодТНВЭД",Продукция,Стр_1.КодТНВЭД));
				Если ППП.Количество()=0 Тогда
					Добав_1=СоздатьВводВоборот.Товары.Добавить();
					Сведения.Свойство("expDate",Добав_1.Годендо);
					Сведения.Свойство("accompanyingDocument",Добав_1.НомерВСД);
					Сведения.Свойство("expDate72",Добав_1.ЧасыДо);
					Добав_1.GTIN=Продукция;
					//Добав_1.ГоденДо=ДатаГоденДо;
					Добав_1.КодТНВЭД=Стр_1.КодТНВЭД;
					Добав_1.СпособВыпускаТоваров="Производство в РФ";
					Добав_1.НомерСтрокиСвязи=Добав_1.НомерСтроки;
					Добав_1.КоличествоКМ=1;
					Добав_1.ДекларацияИлиСертификатСоответствия=Стр_1.Сертификат;
				Иначе
					Добав_1=ППП[0];
					Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
					
				КонецЕсли;
				Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
				
			
		;
			
		
		
	Конеццикла;
	СоздатьВводВоборот.Записать();
	Сообщить("Создан документ "+Строка(СоздатьВводВоборот.Ссылка));
	МассивАгрегация.Добавить(СоздатьВводВоборот.Ссылка);
			
КонецПроцедуры

Функция ВернутьСтруктуройКодИНОКПД(ОКПД2)
	
	Возврат Новый Структура("Код,Наименование",ОКПД2.Код,
	ОКПД2.Наименование);
	
Конецфункции

Функция ВернутьКод(Т)
	Возврат Т.Код
КонецФункции

Функция ПолучитьИнфуПоХСИПл(ХСПроизводитель)
	
	Возврат Новый Структура("ГУИД,Наименование",ХСПроизводитель.Код,ХСПроизводитель.Наименование)
	
КонецФункции


Функция Альфа2(Стр)
	Возврат Стр.Альфа2
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 


Функция СформироватьАгрегациюЛекарства_XSD(Thumbprint_1,session_ui,Объект)
			ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;

	Если Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.Формирование Тогда
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("documents");
	Чтение.ЗаписатьАтрибут("version","1.35");
 	
	Чтение.ЗаписатьНачалоЭлемента("unit_pack");
	Чтение.ЗаписатьАтрибут("action_id","911");
	
	
	Если ЗначениеЗАполнено(Объект.ДоговорЛекарства) Тогда
		Чтение.ЗаписатьНачалоЭлемента("subject_id");
		Чтение.ЗаписатьТекст(Объект.ДоговорЛекарства.РегистрационныйНомер);
		Чтение.ЗаписатьКонецЭлемента();
	Иначе
		
		Чтение.ЗаписатьНачалоЭлемента("subject_id");
		Чтение.ЗаписатьТекст(Объект.Организация.subjectIdФармацевтика);
		Чтение.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	Чтение.ЗаписатьНачалоЭлемента("sscc");
	Чтение.ЗаписатьТекст(Объект.НомерКороба);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("operation_date");
	//Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
		
		//Время=ПолучитьЧасовойПоясИнформационнойБазы();
		
	Прибавка="Z";
		Если ЗначениеЗаполнено(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств) тогда
			Прибавка=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств,2,"0");
			Если Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств>0 Тогда
				     Прибавка="+"+Прибавка+":00";
			Иначе
				     Прибавка="-"+Прибавка+":00";
			Конецесли;
		Конецесли;
		
		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+Прибавка);
//	Иначе
//		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"Z");
	
//	конецесли;
	Чтение.ЗаписатьКонецЭлемента();
	
		Чтение.ЗаписатьНачалоЭлемента("content");
Для Каждого Стр_1 Из Объект.Марки Цикл
	
	//Чтение.ЗаписатьНачалоЭлемента("signs");
//	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));
//	Для Каждого Стр_c Из НСтрок Цикл
		//Чтение.ЗаписатьНачалоЭлемента("union");
		Штрих=СокрЛП(Стр_1.марка);
		Если СтрДлина(Штрих)=18 Тогда
			
				Чтение.ЗаписатьНачалоЭлемента("sscc");
			Иначе
				Чтение.ЗаписатьНачалоЭлемента("sgtin");
		
		
		Если СтрДлина(Штрих)>27 Тогда
			Штрих=Сред(Штрих,3,14)+Сред(Штрих,19);
		КонецЕсли;
		
		КонецЕсли;
		Чтение.ЗаписатьТекст(Штрих);
		
		Чтение.ЗаписатьКонецЭлемента();
	////s	Чтение.ЗаписатьКонецЭлемента();
		
// 	Чтение.ЗаписатьКонецЭлемента();
		
//	Конеццикла;
Конеццикла;
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Текст=Чтение.Закрыть();	
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;

	
	Возврат Текст;
	
ИначеЕсли Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.Расформирование Тогда
	
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("documents");
	Чтение.ЗаписатьАтрибут("version","1.35");
 	
	Чтение.ЗаписатьНачалоЭлемента("unit_unpack");
	Чтение.ЗаписатьАтрибут("action_id","912");
	
		Если ЗначениеЗАполнено(Объект.ДоговорЛекарства) Тогда
		Чтение.ЗаписатьНачалоЭлемента("subject_id");
		Чтение.ЗаписатьТекст(Объект.ДоговорЛекарства.РегистрационныйНомер);
		Чтение.ЗаписатьКонецЭлемента();
	Иначе
		Чтение.ЗаписатьНачалоЭлемента("subject_id");
		Чтение.ЗаписатьТекст(Объект.Организация.subjectIdФармацевтика);
		Чтение.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	
	Чтение.ЗаписатьНачалоЭлемента("operation_date");
	//Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
		
		//Время=ПолучитьЧасовойПоясИнформационнойБазы();
		
			Прибавка="Z";
		Если ЗначениеЗаполнено(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств) тогда
			Прибавка=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств,2,"0");
			Если Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств>0 Тогда
				     Прибавка="+"+Прибавка+":00";
			Иначе
				     Прибавка="-"+Прибавка+":00";
			Конецесли;
		Конецесли;

		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+ПРибавка);
//	Иначе
//		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"Z");
	
//	конецесли;
	Чтение.ЗаписатьКонецЭлемента();
	Для Каждого Стр_1 Из Объект.Марки Цикл
		
		Чтение.ЗаписатьНачалоЭлемента("sscc");
		Чтение.ЗаписатьТекст(Стр_1.Марка);
		Чтение.ЗаписатьКонецЭлемента();
	Конеццикла;
	
	
	//Чтение.ЗаписатьКонецЭлемента();
	
	
	
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Текст=Чтение.Закрыть();	
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;

	
	Возврат Текст;
	
		
	
	
	ИначеЕсли Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.ИзъятиеИзУпаковки Тогда
	
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("documents");
	Чтение.ЗаписатьАтрибут("version","1.35");
 	
	Чтение.ЗаписатьНачалоЭлемента("unit_extract");
	Чтение.ЗаписатьАтрибут("action_id","913");
	
	
	Если ЗначениеЗАполнено(Объект.ДоговорЛекарства) Тогда
		Чтение.ЗаписатьНачалоЭлемента("subject_id");
		Чтение.ЗаписатьТекст(Объект.ДоговорЛекарства.РегистрационныйНомер);
		Чтение.ЗаписатьКонецЭлемента();
	Иначе
		
		Чтение.ЗаписатьНачалоЭлемента("subject_id");
		Чтение.ЗаписатьТекст(Объект.Организация.subjectIdФармацевтика);
		Чтение.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	//Чтение.ЗаписатьНачалоЭлемента("sscc");
	//Чтение.ЗаписатьТекст(Объект.НомерКороба);
	//Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("operation_date");
	//Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
		
		//Время=ПолучитьЧасовойПоясИнформационнойБазы();
		 	Прибавка="Z";
		Если ЗначениеЗаполнено(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств) тогда
			Прибавка=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств,2,"0");
			Если Объект.ТекущийПользователь.ПлюсЧасовойПоясДляЛекарств>0 Тогда
				     Прибавка="+"+Прибавка+":00";
			Иначе
				     Прибавка="-"+Прибавка+":00";
			Конецесли;
		Конецесли;

		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+Прибавка);
//	Иначе
//		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"Z");
	
//	конецесли;
	Чтение.ЗаписатьКонецЭлемента();
	
		Чтение.ЗаписатьНачалоЭлемента("content");
Для Каждого Стр_1 Из Объект.Марки Цикл
	
	//Чтение.ЗаписатьНачалоЭлемента("signs");
//	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));
//	Для Каждого Стр_c Из НСтрок Цикл
		//Чтение.ЗаписатьНачалоЭлемента("union");
		Если Стр_1.ИзъятьИзУпаковки=Истина Тогда
			Штрих=Стр_1.марка;
			Если СтрДлина(Штрих)=18 Тогда
				
					Чтение.ЗаписатьНачалоЭлемента("sscc");
				Иначе
					Чтение.ЗаписатьНачалоЭлемента("sgtin");
			
			
			Если СтрДлина(Штрих)>27 Тогда
				Штрих=Сред(Штрих,3,14)+Сред(Штрих,19);
			КонецЕсли;
			
			КонецЕсли;
			Чтение.ЗаписатьТекст(Штрих);
			
			Чтение.ЗаписатьКонецЭлемента();
		КонецЕсли;
	////s	Чтение.ЗаписатьКонецЭлемента();
		
// 	Чтение.ЗаписатьКонецЭлемента();
		
//	Конеццикла;
Конеццикла;
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Текст=Чтение.Закрыть();	
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;

	
	Возврат Текст;

		
	

	
	
	
	
	
	
	
	
	
	
	
	
	

	КонецЕсли;
	
	
	
	Возврат "";
//	ТипОбъекта911 = ФабрикаXDTO.Тип("911",);
//	Объект911 = ФабрикаXDTO.Создать(ТипОбъекта911);

	СообщениеКПередаче = СтруктураСообщенияКПередаче();
                    

	ИмяТипа   = "documents";
	ИмяПакета = "unit_pack";
	УстановленныеДаты = Новый Соответствие;


	ПространствоИмен ="http://nalog.ru/MarkInfo/med/1.32";
	
	ПередачаДанных = ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ПередачаДанных.version = 1.34;
	ПередачаДанных.session_ui = session_ui;

	
	Уведомление = ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;

	Уведомление.action_id =911;

	//ЗаполнитьСвойствоXDTO(Уведомление, "subject_id" , Объект.Организация.subjectIdФармацевтика, СообщениеКПередаче);
	ЗаполнитьСвойствоXDTO(Уведомление, "subject_id" , Строка(Объект.Организация.subjectIdФармацевтика));
	ЗаполнитьСвойствоXDTO(Уведомление, "sscc", Объект.НомерКороба, СообщениеКПередаче);
	//"2019-11-25T13:52:54.265+03:00"УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Объект.Дата, УстановленныеДаты, СообщениеКПередаче);
	
	ЗаполнитьСвойствоXDTO(Уведомление,"operation_date", Формат(Объект.Дата, "ДФ=yyyy-MM-ddTЧЧ:мм:сс") + "Z");	
	
	
	Уведомление.content = ОбъектXDTOПоИмениСвойства(Уведомление, "content");
	Для Каждого Стр_c Из Объект.Марки Цикл
		
		ЗаполнитьСвойствоXDTO(Уведомление.content, "sgtin", Прав(Стр_c.Марка,27));
		Сообщить("!");


	Конеццикла;                       
	                     
	ПередачаДанных.Проверить();
	Возврат ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);



//	
//	
//	ТипОбъекта_ЮнитПак = ФабрикаXDTO.Тип("http://nalog.ru/MarkInfo/med/1.32","unit_pack");
//	ОбъектЮнитПак = ФабрикаXDTO.Создать(ТипОбъекта_ЮнитПак);
//	
//	
//	

//	
//	ОбъектЮнитПак.action_id = 911;
//	ОбъектЮнитПак.subject_id = Объект.Организация.subjectIdФармацевтика;
//	ОбъектЮнитПак.sscc = Объект.НомерКороба;
//	ОбъектЮнитПак.operation_date = Объект.Дата;
//	ОбъектЮнитПак.content = "";

//	
//	
//	//Объект911.Добавить(ОбъектЮнитПак);
//	
//	Запись = Новый ЗаписьXML;
//	Запись.УстановитьСтроку(); // запись в строку
//	
//	ФабрикаXDTO.Записать(Запись, ОбъектЮнитПак);
//	ДанныеXML = Запись.Закрыть(); // документ готов!
//	
//	Возврат ДанныеXML;
	
	

КонецФункции // СформироватьАгрегациюЛекарства_XSD()


Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Экспорт
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции


Процедура ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, ЗначениеСвойства = Неопределено, КэшОшибок = Неопределено, Глубина = Неопределено) Экспорт
	
	Если Не ЕстьРеквизитИлиСвойствоОбъекта(ОбъектXDTO, ИмяСвойства) Тогда
		Возврат;
	КонецЕсли;
	
	РазрешеноНеЗаполнять = ОбъектXDTO.Тип().Свойства.Получить(ИмяСвойства).НижняяГраница = 0;
	Если Не ЗначениеЗаполнено(ЗначениеСвойства) И РазрешеноНеЗаполнять Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Если ТипЗнч(ОбъектXDTO[ИмяСвойства]) = Тип("СписокXDTO") Тогда
			ОбъектXDTO[ИмяСвойства].Добавить(ЗначениеСвойства);
		Иначе
			ОбъектXDTO[ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли;
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());		
	КонецПопытки;
	
КонецПроцедуры


Функция ОбъектXDTOВXML(ОбъектXDTO, ИмяТипа, URIПространстваИмен) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	temp = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML.УстановитьСтроку(ПараметрыФорматированияXML(Ложь));
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO, ИмяТипа);
	ТекстXML = ЗаписьXML.Закрыть();
	
	ТекстXML = СтрЗаменить(ТекстXML, "xmlns:d2p1=""" + URIПространстваИмен + """", "");
	ТекстXML = СтрЗаменить(ТекстXML, URIПространстваИмен, "");
	ТекстXML = СтрЗаменить(ТекстXML, "xmlns=""""", "");
	
	Возврат ТекстXML;
	
КонецФункции

Функция ПараметрыФорматированияXML(ИспользоватьОтступы = Истина, СимволОтступа = "  ") Экспорт
	
	ПараметрыЗаписи = Новый ПараметрыЗаписиXML(
		"UTF-8",
		"1.0",
		ИспользоватьОтступы,
		ИспользоватьОтступы,
		СимволОтступа);
	
	Возврат ПараметрыЗаписи;
	
КонецФункции
 


Функция ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1) Экспорт
	Если    Thumbprint_1.СУЗПоНовомуДинамическийТокен=Истина Тогда
		///ПОДКЛЮЧАЕММСЯ ПО НОВОМУ
		
		СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			СРегистра=Получение_Токена(Thumbprint_1);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=Получение_Токена(Thumbprint_1);	
				КонецЕсли;
					
		КонецЕсли;
		
		
		
		Если Не ЗначениеЗаполнено(Thumbprint_1.ИдентификаторСоединения) Тогда
			
			Сообщить("Для подключения по динамическому токену необходимо заполнить <Идентификатор устройства для подключения> в пользователе");
			Возврат "";
		КонецеслИ;
		
		
		ПараметрыСтарыеДляПодключения=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьНовыеПараметрыДляПодключенияКСУЗ_ХамелоенЦРПТ(Thumbprint_1);
		Если ЗначениеЗаполнено(ПараметрыСтарыеДляПодключения.Токен) И ЗначениеЗаполнено(ПараметрыСтарыеДляПодключения.ДатаВремя) Тогда
			Если ТекущаяДата()-ПараметрыСтарыеДляПодключения.ДатаВремя<=9.8*60*60 Тогда
				Возврат ПараметрыСтарыеДляПодключения.Токен
			Конецесли;
			
		Конецесли;
		
		
		
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
			Прокси=Новый ИнтернетПрокси;
			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		Иначе
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,, Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		
		
			Запрос=Новый HTTPЗапрос("/api/v3/auth/cert/key");
				Запрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				Запрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		
			Ответ=HTTPСервисЗапрос.Получить(Запрос);
		Если Ответ.КодСостояния=200 Тогда 	
			ОтветСтруктура =ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
			Подписываем=ОтветСтруктура.data;
			Имя_вр_1="";
			СерийныйНомер="";
			ПодписатьФайл(Thumbprint_1.Внешняя,Подписываем,Thumbprint_1,Имя_вр_1,,,СерийныйНомер);
			
			Добав=Имя_вр_1;
			//Добав=ПолучитьСтрокуИздвоичныхДанных(РР);
			//Добав=КодСтрСервер(Добав);
			Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
			Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
			Добав=СтрЗаменить(Добав,"\r\n","");

			Тело = "{
			|""uuid"": """+ОтветСтруктура.uuid+""",
			|""data"": """+Добав+"""
			|}";
			
			
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/auth/cert/"+Thumbprint_1.ИдентификаторСоединения);
			//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer " +СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин           
			HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
			
			
			
			//ЧтениеJSON = Новый ЧтениеJSON;
			//ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			Попытка
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());//ПрочитатьJSON(ЧтениеJSON);
			Исключение
//				Сообщить("Текстовая строка "+ТекстJSON+" не соответствует шаблону JSON");
				Сообщить(Описаниеошибки());
				Возврат Неопределено;
			КонецПопытки;
			Ош="";
			Если     NNN.Свойство("error_message",Ош) Тогда
				Сообщить(Ош);
				Возврат "";
			КонецЕсли;
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьДинамическийТокенВРегистр(Thumbprint_1.ТекущийПользователь,NNN.token);
			
			Возврат NNN.token
		
		Конецесли;	
		
	Иначе
		Возврат Thumbprint_1.ТокенСУЗ
	Конецесли;
	Возврат "";
КонецФункции



Процедура ЗаписатьДинамическийТокенВРегистр(ТТ,Р,Минуты=540) Экспорт
	РегД=регистрысведений.ТокенДинамичкийДляСУЗ_По_Идентификатору_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегД.Отбор.Пользователь.Установить(ТТ.ИдентификаторСоединения);
	
	Добав=РегД.Добавить();
	Добав.Пользователь=ТТ.ИдентификаторСоединения;
	Добав.Токен=Р;
	Добав.ВремяПолучения=Текущаядата()+Минуты*60-10;
	
	РегД.Записать(Истина);
	
КонецПроцедуры


Функция ПолучитьНовыеПараметрыДляПодключенияКСУЗ_ХамелоенЦРПТ(Thumbprint_1) Экспорт
	Получитьд=РегистрыСведений.ТокенДинамичкийДляСУЗ_По_Идентификатору_ХамелеонЦРПТ.Получить(Новый Структура("Пользователь",Thumbprint_1.ТекущийПользователь.ИдентификаторСоединения));
	Возврат Новый Структура("Токен,ДатаВремя",Получитьд.Токен,Получитьд.ВремяПолучения)
Конецфункции

Функция ВернутьИзxlsСтандартно(АдресВр,ВыборЗагрExcel) Экспорт
	Если НРег(Прав(ВыборЗагрExcel,4))="xlsx" Тогда
		Имяекселя_1=ПолучитьИмяВременногоФайла("xlsx");
	Иначе
		Имяекселя_1=ПолучитьИмяВременногоФайла("xls");
	КонецеслИ;
		
		Дан=ПолучитьИзВременногоХранилища(АдресВр);
		Дан.Записать(Имяекселя_1);
		ОбластьФайла = Новый ТабличныйДокумент;
		Попытка
			// Выполняется долго на больших файлах.
			ОбластьФайла.Прочитать(Имяекселя_1, СпособЧтенияЗначенийТабличногоДокумента.Значение);
			УдалитьФайлы(Имяекселя_1);
		Исключение
			Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
			УдалитьФайлы(Имяекселя_1);
			Возврат Новый Массив;
		КонецПопытки;
		
		
		
		КолСтр = ОбластьФайла.ВысотаТаблицы;
		КолКолонок = ОбластьФайла.ШиринаТаблицы;
		
		ТаблицаРезультат = Новый ТаблицаЗначений;
		
		ТаблицаРезультат.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"), "№", 4);
		ТаблицаРезультат.Колонки.Добавить("Сопоставлено", Новый ОписаниеТипов("Булево"), "Сопоставлено", 1);
		
		Для Сч = 1 ПО КолКолонок Цикл
			нКолонка = СтрЗаменить(Сч, Символы.НПП, "");
			ИмяКолонки = "N" + нКолонка;
			ТаблицаРезультат.Колонки.Добавить(ИмяКолонки);
		КонецЦикла;
		
		// 1-я строка. Заголовки.
		НоваяСтрокаТФ = ТаблицаРезультат.Добавить();
		НоваяСтрокаТФ.НомерСтроки = 1;
		Для Сч=1 ПО КолКолонок Цикл
			нКолонка = СтрЗаменить(Сч, Символы.НПП, "");
			ИмяКолонки = "N" + нКолонка;
			НоваяСтрокаТФ[ИмяКолонки] = ОбластьФайла.ПолучитьОбласть("R1" + "C"+нКолонка).ТекущаяОбласть.Текст;
			
			// Используется при формировании таблицы на форме обработки.
			ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
			ДлинаСтроки    = СтрДлина(СокрЛП(НоваяСтрокаТФ[ИмяКолонки]));
			ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
		КонецЦикла;
		
		НачСтрока = ?(Не ЗначениеЗаполнено(НачСтрока), 2, НачСтрока);
		КонСтрока = ?(Не ЗначениеЗаполнено(КонСтрока), КолСтр, КонСтрока);
		
		
		
		
		Для нСтрокаТФ = НачСтрока ПО КонСтрока Цикл
			НоваяСтрокаТФ = ТаблицаРезультат.Добавить();
			НоваяСтрокаТФ[0] = нСтрокаТФ;
			нСтрока = СтрЗаменить(нСтрокаТФ, Символы.НПП, "");
			Для Колонка = 1 ПО КолКолонок Цикл
				нКолонка = СтрЗаменить(Колонка, Символы.НПП, "");
				Область = ОбластьФайла.ПолучитьОбласть("R"+нСтрока+"C"+нКолонка);
				ТекущаяОбласть = Область.ТекущаяОбласть;
				Если Колонка=2 Или Колонка=5 Тогда
					ЗначениеЯчейки = xmlstring(сокрЛП(ТекущаяОбласть.Текст));    // Строка, Булево. (Булево как строка "ИСТИНА"/"ЛОЖЬ")
					Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
						ЗначениеЯчейки = СокрЛП(ЗначениеЯчейки);
					Иначе
						ЗначениеЯчейки = Неопределено;
					КонецЕсли;
				Иначе
					Попытка
						ЗначениеЯчейки = xmlString(ТекущаяОбласть.Значение);        // Число, Дата.
					Исключение
						ЗначениеЯчейки = xmlstring(сокрЛП(ТекущаяОбласть.Текст));    // Строка, Булево. (Булево как строка "ИСТИНА"/"ЛОЖЬ")
						Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
							ЗначениеЯчейки = СокрЛП(ЗначениеЯчейки);
						Иначе
							ЗначениеЯчейки = Неопределено;
						КонецЕсли;
					КонецПопытки;
				КонецЕсли;
				ИмяКолонки = "N" + нКолонка;
				НоваяСтрокаТФ[ИмяКолонки] = ЗначениеЯчейки;
				
				// Используется при формировании таблицы на форме обработки.
				ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
				ДлинаСтроки    = СтрДлина(СокрЛП(НоваяСтрокаТФ[ИмяКолонки]));
				ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
			КонецЦикла;
		КонецЦикла;
		
		МассивКм=Новый Массив;
	Для каждого Стр_1 Из ТаблицаРезультат Цикл
		Если ЗначениеЗаполненО(Стр_1.N1) Тогда
			КМ=СтрЗаменитЬ(Стр_1.N1,Символ(29),"");
			Если ЗначениеЗаполнено(КМ) Тогда
				МассивКМ.Добавить(Стр_1.N1);
			Конецесли;
		Конецесли;
	Конеццикла;
	Возврат МассивКМ;
	
	
Конецфункции

Функция ПолучитьКороткийНомерКМ_Сайт(cis_1,ТипПродукции) Экспорт
  cis=РаскодироватьСтроку(cis_1,СпособКодированияСтроки.КодировкаURL);

  Если      ТипПродукции="Молоко" Тогда
	  ОбратныйПорядок="";
	  
	  сч=СтрДлина(cis);
	  Пока Сч>=1 Цикл
	  	  ОбратныйПорядок=ОбратныйПорядок+Сред(cis,сч,1);
		  Сч=сч-1;
	 Конеццикла;
	  ПервыйСимвол29=Найти(ОбратныйПорядок,Символ(29));
	  ОбратныйПорядок_1=Сред(ОбратныйПорядок,ПервыйСимвол29+1);
	  Если Сред(ОбратныйПорядок,ПервыйСимвол29-2,2)="39" Тогда
		  
		  ОбратныйПорядок_1=СтрЗаменить(ОбратныйПорядок_1,Символ(29),"");
		  
		  Сч=СтрДлина(ОбратныйПорядок_1);
		  cis="";
		  Пока Сч>=1 Цикл
			  cis=cis+Сред(ОбратныйПорядок_1,Сч,1);
			  сч=сч-1;
		Конеццикла;
		  
		  
		  
	  Иначе
		  cis=СтрЗаменить(cis,Символ(29),"");
		  cis=Сред(cis,1,39);
		  
		Конецесли;
	ИначеЕсли ТипПродукции="Табак"
		ИЛИ ТипПродукции="Альтернативный табак"
		Тогда
		
		cis=СтрЗаменить(cis,Символ(29),"");
	ИначеЕсли ТипПродукции="Фото"
		Тогда
		
		cis=СтрЗаменить(cis,Символ(29),"");
		cis=Сред(cis,1,38);
	иначе
		
		ПозицияСимвол29=Найти(cis,Символ(29));
		
		Если сред(cis,ПозицияСимвол29+1,3)="240" Тогда
			
			cis=СтрЗаменить(cis,Символ(29),"");
		  	cis=Сред(cis,1,38);
								  	
			
		Иначе
		
		  	cis=СтрЗаменить(cis,Символ(29),"");
		  	cis=Сред(cis,1,31);
		Конецесли;
	
		
	 
	Конецесли;
	
	
	Возврат cis
					
Конецфункции



Функция ПолучитьКороткийНомерКМ(cis_1,ТипПродукции) Экспорт
  cis=РаскодироватьСтроку(cis_1,СпособКодированияСтроки.КодировкаURL);

  Если      ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Молоко Тогда
	  ОбратныйПорядок="";
	  
	  сч=СтрДлина(cis);
	  Пока Сч>=1 Цикл
	  	  ОбратныйПорядок=ОбратныйПорядок+Сред(cis,сч,1);
		  Сч=сч-1;
	 Конеццикла;
	  ПервыйСимвол29=Найти(ОбратныйПорядок,Символ(29));
	  ОбратныйПорядок_1=Сред(ОбратныйПорядок,ПервыйСимвол29+1);
	  Если Сред(ОбратныйПорядок,ПервыйСимвол29-2,2)="39" Тогда
		  
		  ОбратныйПорядок_1=СтрЗаменить(ОбратныйПорядок_1,Символ(29),"");
		  
		  Сч=СтрДлина(ОбратныйПорядок_1);
		  cis="";
		  Пока Сч>=1 Цикл
			  cis=cis+Сред(ОбратныйПорядок_1,Сч,1);
			  сч=сч-1;
		Конеццикла;
		  
		  
		  
	  Иначе
		  cis=СтрЗаменить(cis,Символ(29),"");
		  cis=Сред(cis,1,39);
		  
		Конецесли;
	ИначеЕсли ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак 
		ИЛИ ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак
		Тогда
		
		cis=СтрЗаменить(cis,Символ(29),"");
	ИначеЕсли ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Фото
		Тогда
		
		cis=СтрЗаменить(cis,Символ(29),"");
		cis=Сред(cis,1,38);
	иначе
		
		ПозицияСимвол29=Найти(cis,Символ(29));
		
		Если сред(cis,ПозицияСимвол29+1,3)="240" Тогда
			
			cis=СтрЗаменить(cis,Символ(29),"");
		  	cis=Сред(cis,1,38);
								  	
			
		Иначе
		
		  	cis=СтрЗаменить(cis,Символ(29),"");
		  	cis=Сред(cis,1,31);
		Конецесли;
	
		
	 
	Конецесли;
	
	
	Возврат cis
					
Конецфункции


Функция ПроверитьСтроку(Текст, Шаблон) Экспорт
    Чтение = Новый ЧтениеXML;
    Чтение.УстановитьСтроку(
                "<Model xmlns=""http://v8.1c.ru/8.1/xdto"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Model"">
                |<package targetNamespace=""shablon_packet"">
                |<valueType name=""shablont"" base=""xs:string"">
                |<pattern>" + Шаблон + "</pattern>
                |</valueType>
                |<objectType name=""shablonob"">
                |<property xmlns:dmy=""shablon_packet"" name=""shablonitme"" type=""dmy:shablont""/>
                |</objectType>
                |</package>
                |</Model>");

    Модель = ФабрикаXDTO.ПрочитатьXML(Чтение);
    МояФабрикаXDTO = Новый ФабрикаXDTO(Модель);
    Пакет = МояФабрикаXDTO.Пакеты.Получить("shablon_packet");
    Тест = МояФабрикаXDTO.Создать(Пакет.Получить("shablonob"));

    Попытка
        Тест.shablonitme = Текст;
        Возврат Истина
    Исключение
    	Возврат Ложь
    КонецПопытки;
    
КонецФункции
  

//Функция ВернутьИнформациюОКМ_НаСервере(КМ,Thumbprint_1) Экспорт
//	
//	
//	Если СтрДлина(КМ)<31 Тогда
//		Возврат Истина;
//	ИначеЕсли СтрДлина(КМ)>74 тогда
//		Возврат Ложь;
//	Иначе ////считываем с регистра, если нет, то делаем запрос в ЦРПТ для определния
//		
//				
//		
//		ПолучитьДанныеСРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.вернутьТипУпаковкиПоКМНаСервере(КМ);
//		
//		Если ПолучитьДанныеСРегистра=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка") тогда
//			Возврат Истина;
//		ИначеЕсли ПолучитьДанныеСРегистра=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Штука") тогда
//			Возврат Ложь;
//		КонецЕсли;
//		
//		//Если Thumbprint_1=Неопределено тогда
//		//	Возврат Ложь;
//		//КонецЕсли;
//		Если 	               Thumbprint_1<>Неопределено Тогда
//			
//			Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" 
//				ИЛИ Thumbprint_1.НаименованиеСтенда="Табак"  
//				ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"  
//				Тогда
//				
//				Возврат Неопределено
//				
//			КонецЕсли;
//			Попытка
//		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
//			Прокси=Новый ИнтернетПрокси;
//			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
//		
//			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
//		Иначе
//			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
//		КонецЕсли;
//		
//		СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
//		СерийныйНомер="";
//			Если Не ЗначениеЗаполнено(СРегистра)  тогда
//				СРегистра=Получение_Токена(Thumbprint_1,СерийныйНомер);	
//			Иначе
//			   
//					Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
//						Прокси=Новый ИнтернетПрокси;
//						Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
//					
//						HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
//					Иначе
//					
//						HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
//					КонецЕсли;
//					
//					HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
//					HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
//					HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
//					//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
//					///Константин           
//					Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
//					//Текст1=Ответ.ПолучитьТелоКакСтроку();
//					Если Ответ.КодСостояния<>200 Тогда
//						СРегистра=Получение_Токена(Thumbprint_1,СерийныйНомер);	
//					КонецЕсли;
//						
//			КонецЕсли;
//		
//					Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
//						Прокси=Новый ИнтернетПрокси;
//						Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
//					
//			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
//					Иначе
//			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
//		КонецЕсли;          	
//		
//			что=Thumbprint_1.что;
//				МассивКМ=Новый Массив;
//				МассивКМ.Очистить();
//				МассивКМ.Добавить(КМ);
//			Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьтелоПоcis(МассивКМ);
//			HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/cis/cis_list?pg="+Что);
//			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
//			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
//				#Если ВебКлиент Тогда
//					HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
//				#Иначе
//					HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
//				#КонецЕсли
//			
//			
//			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);

//		
//		Если Ответ.КодСостояния=200 Тогда
//			
//				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Ответ.ПолучитьТелоКакСтроку());//ПрочитатьJSON(ЧтениеJSON);
//				Если NNN[КМ]["children"]<>Неопределено 
//					ИЛИ NNN[КМ]["status"]="DISAGGREGATION"
//					Тогда
//			        ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапишемТип_КМ_ХамелеонЦРПТ(КМ,ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка"));
//										
//					Возврат Истина
//				Иначе
//			        ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапишемТип_КМ_ХамелеонЦРПТ(КМ,ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Штука"));
//					Возврат ложь;
//				КонецЕсли;
//				//Возврат Неопределено;
//			КонецЕсли;
//		Исключение
//		КонецПопытки;
//	КонецЕсли;
//	
//				/////СТАРЫЙ АЛГОРИТМ ВРЕМЕННО ПОТОМ НЕОБХОДИМО УБРАТЬ!!!!
//				Если  СтрДлина(КМ)=18 Тогда
//					Возврат Истина
//				Иначе
//					Возврат ложь;
//				КонецЕсли;
//	
//		
//		///
//		
//	Конецесли;
//КонецФункции

Функция ЗапишемТип_КМ_Из_Массива(списокКМов) Экспорт
	
	//СписокКМ=Новый СписокЗначений;
	Для Каждого Стр_1 Из списокКМов Цикл
		
		РегДв=РегистрыСведений.ТипКМ_ХамелеонЦРПТ.СоздатьНаборЗаписей();
		РегДв.Отбор.cis.Установить(Стр_1.КМ);
		Добав=РегДв.Добавить();
		Добав.cis=Стр_1.КМ;
		Добав.Тип=Стр_1.Тип;
		РегДв.Записать(ИстинА);
	Конеццикла;
КонецФункции

Функция вернутьТипУпаковкиПоКМНаСервере(КМ) Экспорт
	
	Возврат Регистрысведений.ТипКМ_ХамелеонЦРПТ.Получить(Новый структура("cis",КМ)).Тип;	
	
КонецФункции


Функция ЗапишемТип_КМ_ХамелеонЦРПТ(КМ,Тип) Экспорт
	
	РегДв=РегистрыСведений.ТипКМ_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.cis.Установить(КМ);
	Добав=РегДв.Добавить();
	Добав.cis=КМ;
	Добав.Тип=Тип;
	РегДв.Записать(ИстинА);
	
КонецФункции

Функция СоздатьНайтиGTIN_Cnhjrf(ГТИН) Экспорт
	
	Попытка
		Спр_1=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(ГТИН));
	Исключение
		Спр_1=Неопределено
		
	КонецПопытки;
	Если Не ЗначениеЗаполнено(Спр_1) Тогда
		Спр_1=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
			Спр_1.GTIN=ГТИН;
			Спр_1.Наименование=ГТИН;
			Спр_1.НаименованиеТовара=ГТИН;
			Спр_1.Записать();;
		КонецЕсли;
		
	Возврат Спр_1.Ссылка
КонецФункции



Функция ВернутьГТИН(Н)	
	Возврат xmlString(Н.GTIN)
КонецФункции


Процедура ОбновимСтатсыПострчокам(ПараметрыДлякилента,СРегистра,Объект_1) Экспорт
	Объект=Объект_1.ПолучитьОБъект();
	//Если Не ЗначениеЗаполнено(Объект._Order_ID) Тогда
	//	Возврат;                       
	//КонецЕслИ;
	
		
	
	//Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	//Текст=Форм.Пользователь;
//	Форм.Пользователь=Объект.ТекущийПользователь;
//	ПараметрыДлякилента=Неопределено;
//	Если Форм.НаКлиенте(ПараметрыДлякилента) Тогда
//		Форм.Пользователь=Текст;
		Если Не ЗначениеЗаполнено(ПараметрыДлякилента) Тогда
			Возврат;
		КонецЕслИ;
		
		
		
				АдресРаздробить=ПараметрыДлякилента.АдресСУЗ;
				Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
				Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
				Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
				Порт=Сред(Порт,Найти(Порт,":")+1);
				Попытка
					Порт=число(Порт);
				Исключение
					Порт=Неопределено;
				КонецПопытки;
				
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			Сообщить("В пользователе не заполнен адрес СУЗ");
			Возврат;
			
		КонецЕсли;
		
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
				
				
					Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
					
						HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,,Защищ);
					Иначе
						HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,,Защищ);
					КонецЕсли;
					
					
					НомерПП=0;
					
					Для Каждого Стр Из Объект.Товары Цикл
							НомерПП=НомерПП+1;
							Стр.СтатусСтроки="";
							Стр.ОшибкаПолучения="";
							//Если НЕ ЗначениеЗаполнено(Стр.ИДСУЗ)  Тогда
							//	Продолжить;
							//КонецЕсли;
						//		Иначе
								
							//Если ОБъект.СУЗОбувь Тогда
								HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/status?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Объект,Стр.GTIN)+
								"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
						//		Конецесли;
							//Иначе
							//	HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
							//	Формат(Получить,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								
							//КонецЕслИ;
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
								ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
								nnn=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);
								
								Если Ответ.КодСостояния=200 Тогда
									
									Стр.СтатусСтроки=nnn.bufferStatus;
									
									
									Если nnn.bufferStatus="ACTIVE" Тогда
										Стр.СтатусСтроки="В процессе";
										Стр.КоличествоПолучено=nnn.totalPassed;
									ИначеЕсли 	nnn.bufferStatus="EXHAUSTED" Тогда
										Стр.СтатусСтроки="Получено";
										Стр.КоличествоПолучено=nnn.totalPassed;
									ИначеЕсли nnn.bufferStatus="CLOSED" Тогда
										Стр.СтатусСтроки="Получено";
										Стр.КоличествоПолучено=nnn.totalPassed;
									КонецЕсли;
									Если nnn.bufferStatus<>"PENDING" Тогда
										Стр.КоличествоКМ=nnn.totalCodes;
									КонецЕсли;
								ИначеЕсли Ответ.КодСостояния=404 Тогда
									//Стр.СтатусСтроки="Получено";
									//Если Стр.КоличествоКМ=0 Тогда
										//Стр.КоличествоПолучено=Стр.КоличествоКМ;
									//КонецЕслИ;
									
									СерийныйНомер="";
	  						Куки=ПолучитькукиВСУЗ(ПараметрыДлякилента,,Срегистра,СерийныйНомер);
									
		//														
								HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/orders/history/"+Объект._Order_ID);
								//"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/history/status?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+
															//"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
													//		Конецесли;
														//Иначе
														//	HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
														//	Формат(Получить,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
															
														//КонецЕслИ;
																					куки=СтрЗаменить(куки,"Path=/, ","");
							куки=СтрЗаменить(куки,"path=/,","");
		Куки=Куки+"certSerial="+СерийныйНомер+"; tokenPart1="+Сред(СРегистра,1,4000)+"; "+
					"tokenPart2="+Сред(СРегистра,4001) ;

														HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
															//HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
															HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
															Попытка
																Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
														
															ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
															nnn=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(ТекстДокумента);
															Для Каждого Стр_nnn Из nnn["products"] Цикл
																Для Каждого ИщемПродукцию Из Объект.Товары ЦИкл
																	Если число(ВернутьгТИН(ИщемПродукцию.GTIN))=Число(Стр_nnn["gtin"]) Тогда
																		
																		Статус=Стр_nnn["bufferStatus"];
																		   Стр.СтатусСтроки=Статус;
																			
																		Если Статус="ACTIVE" Тогда
																			Стр.СтатусСтроки="В процессе";
																			Стр.КоличествоПолучено=Стр_nnn["totalPassed"];
																		ИначеЕсли 	Статус="EXHAUSTED" Тогда
																			Стр.СтатусСтроки="Получено";
																			Стр.КоличествоПолучено=Стр_nnn["totalPassed"];
																		ИначеЕсли Статус="CLOSED" Тогда
																			Стр.СтатусСтроки="Получено";
																			Стр.КоличествоПолучено=Стр_nnn["totalPassed"];
																		КонецЕсли;

																		
																		
																	КонецЕсли;
																КонецциклА;
															Конеццикла;
															
															
															Прервать;
														Исключение
									//Стр.СтатусСтроки="Получено";
															
														КонецПопытки;
																							
									
									
								КонецЕсли;
								//Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
								//	ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП,Объект);
								//КонецЕсли;
								//Стр.КоличествоПолучено=Получить;
						
					КонецЦикла;
				//КонецЕсли;
			
	Объект.Записать();			
		
	
КонецПроцедуры


Функция НайдемЗаказыПоСервисПрайду(ТекущийПользователь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказМарок_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Документ.ЗаказМарок_ХамелеонЦРПТ.Товары КАК ЗаказМарок_ХамелеонЦРПТ
		|ГДЕ
		|	ЗаказМарок_ХамелеонЦРПТ.Ссылка.Организация = &Организация
		|	И ЗаказМарок_ХамелеонЦРПТ.Ссылка.ТекущийПользователь.СайтыВходаВСистему = &СайтыВходаВСистему
		|	И ЗаказМарок_ХамелеонЦРПТ.Ссылка.СервисПровайдер <> ЗНАЧЕНИЕ(Справочник.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.ПустаяСсылка)
		|	И НЕ ЗаказМарок_ХамелеонЦРПТ.Ссылка.СервисПровайдер ЕСТЬ NULL
		|	И ЗаказМарок_ХамелеонЦРПТ.Ссылка.Статус В(&Статус)
		|	И ПОДСТРОКА(ЗаказМарок_ХамелеонЦРПТ.СтатусСтроки, 1, 1000) <> ""Получено""";
	
	Запрос.УстановитьПараметр("СайтыВходаВСистему",	ТекущийПользователь.СайтыВходаВСистему); 
	
	
	Запрос.УстановитьПараметр("Организация",	ТекущийПользователь.Организация); 
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивВ=Новый Массив;
	Сч=0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		МассивВ.Добавить(Новый Структура("Ссылка,order_ID,Сч",ВыборкаДетальныеЗаписи.Ссылка,ВыборкаДетальныеЗаписи.Ссылка._Order_ID,Сч));
		Сч=Сч+1;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Возврат    МассивВ
	

КонецФункции


Функция ПечатьУКДНаСервере(ТабДокумент,Ссылка,КМ=Ложь,КодТовараВУПД) Экспорт
	
	БратьКоличествоИзТабличойЧасти=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().БратьКоличествоИзТабличойЧасти;
	
		
	
	// Вставить содержимое обработчика.
	Таб=Новый ТабличныйДОкумент;
	Макет=Документы.Отгрузка_ХамелеонЦРПТ.ПолучитьМакет("Страны");
	ОбластьМакета=Макет.ПолучитьОбласть("Страны");
	Таб.Вывести(ОбластьМакета);
	СтраныКоды=Новый Таблицазначений;
	СтраныКоды.Колонки.Добавить("Код");
	СтраныКоды.Колонки.Добавить("КодАльфа");
	
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		Сссс=СтраныКоды.Добавить();
		СССС.Код=Таб.Область(Сч,2).Текст;
		СССС.КодАльфа=Таб.Область(Сч,4).Текст;
			
	КонецЦикла;
	

	
	
		ТоварКод = "Код";
		
		
		
		
		
		
		
		
		
		
		
	Ссылк=Ссылка;
	ДатаУПД = Ссылк.Дата;
	НомерУПД=Ссылк.НомерПервичногоДокумента;
	Контрагент=Ссылк.Контрагент;
	Организация=Ссылк.Организация;
	
	
	Макет=Документы.Отгрузка_ХамелеонЦРПТ.ПолучитьМакет("УКД");
	
	ОблШапки=Макет.ПолучитьОбласть("Шапка");
	ОблШапки.Параметры.НомерДок=Ссылк.НомерПервичногоДокумента;
	ОблШапки.Параметры.ДатаДок = Формат(Ссылка.ДатаПервичногоДокумента, "ДФ='дд ММММ гггг'") + " г.";
	
	НомерУПД=Ссылк.ПервичныйДокумент.НомерУПД;
	Если Не ЗначениеЗАполнено(НомерУПД) Тогда
		НомерУПД=Ссылк.ПервичныйДокумент.НомерПервичногоДокумента;
	КонецЕсли;
	
	ОблШапки.Параметры.СчФ=НомерУПД;
	ДатаУПД=Ссылк.ПервичныйДокумент.ДатаУПД;
	Если Не ЗначениеЗаполнено(ДатаУПД) Тогда
		ДатаУПД=Ссылк.ПервичныйДокумент.ДатаПервичногоДОкумента;
	КонецЕсли;
	
	
	ОблШапки.Параметры.ДатаСчФ = Формат(ДатаУПД, "ДФ='дд ММММ гггг'") + " г.";
	
	СведенияОПоставщике       = 
	Ссылка.Организация.Наименование;
	ОблШапки.Параметры.ПредставлениеПоставщика=СведенияОПоставщике;
				ОблШапки.Параметры.АдресПоставщика = СокрЛП(Ссылка.Организация.АдресМестонахождения);
			
			Если ЗначениеЗаполнено(Ссылка.Организация.Телефон) Тогда
				ОблШапки.Параметры.АдресПоставщика = ОблШапки.Параметры.АдресПоставщика +", телефон: "+
				Ссылка.Организация.Телефон;
			КонецЕсли;
			
				ОблШапки.Параметры.ИННПоставщика=Ссылка.Организация.ИНН+"/"+Ссылка.организация.КПП;
		
		ОблШапки.Параметры.ПредставлениеПокупателя=Ссылка.Контрагент.Наименование;
					ОблШапки.Параметры.АдресПокупателя=Ссылка.Контрагент.ЮридическийАдрес;
			
			
					
			Если ЗначениеЗаполнено(Ссылка.Контрагент.Телефон) Тогда
				ОблШапки.Параметры.АдресПокупателя = ОблШапки.Параметры.АдресПокупателя+", телефон: "+
				Ссылка.Контрагент.Телефон;
			КонецЕсли;
	
		ОблШапки.Параметры.ИННПокупателя=Ссылка.Контрагент.ИНН+"/"+Ссылка.Контрагент.КПП;

		ТабДокумент.Вывести(ОблШапки);

	НомСтр=0;
	
	ОшибкаПоКм=Ложь;
	
	ТаблицаИсправлений=Новый ТаблицаЗначений;
	ТаблицаИсправлений.Колонки.Добавить("ГТИН");
	ТаблицаИсправлений.Колонки.Добавить("НаименованиеВУПД");
	ТаблицаИсправлений.Колонки.Добавить("КоличествоБыло");
	ТаблицаИсправлений.Колонки.Добавить("КоличествоСтало");
	ТаблицаИсправлений.Колонки.Добавить("СуммаНДСБыло");
	ТаблицаИсправлений.Колонки.Добавить("СуммаНДССтало");
	ТаблицаИсправлений.Колонки.Добавить("СуммаБыло");
	ТаблицаИсправлений.Колонки.Добавить("СуммаСтало");
	ТаблицаИсправлений.Колонки.Добавить("СуммаАкцизБыло");
	ТаблицаИсправлений.Колонки.Добавить("СуммаАкцизСтало");
	ТаблицаИсправлений.Колонки.Добавить("ЕдИзмБыло");
	ТаблицаИсправлений.Колонки.Добавить("ЕдИзмСтало");
	//ТаблицаИсправлений.Колонки.Добавить("ЦенаБыло");
	//ТаблицаИсправлений.Колонки.Добавить("ЦенаСтало");
	ТаблицаИсправлений.Колонки.Добавить("СтавкаНДСБыло");
	ТаблицаИсправлений.Колонки.Добавить("СтавкаНДССтало");
	//ТаблицаИсправлений.Колонки.Добавить("СтоимостьБезНДСБыло");
	//ТаблицаИсправлений.Колонки.Добавить("СтоимостьБезНДССтало");
	
	ТаблицаИсправлений.Колонки.Добавить("МаркировкаБыло");
	ТаблицаИсправлений.Колонки.Добавить("МаркировкаСтало");
	ТаблицаИсправлений.Колонки.Добавить("ЕстьУжеИсправление");
	
	ТаблицаИсправлений.Очистить();
	Для Каждого Стр_1 Из Ссылк.ПервичныйДокумент.Товары Цикл
		ТаблицаПродукций=Новый ТаблицаЗначений;
		ТаблицаПродукций.Колонки.Добавить("Номенклатура");
		ТаблицаПродукций.Колонки.Добавить("Количество");
		ТаблицаПродукций.Колонки.Добавить("КоличествоВУпаковке");
		ТаблицаПродукций.Колонки.Добавить("НомерКороба");
		ТаблицаПродукций.Колонки.Добавить("cis");
		ТаблицаПродукций.Колонки.Добавить("ТипУпаковки");
		ТаблицаПродукций.Очистить();
		
		НСТР=Ссылк.ПервичныйДокумент.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
		
		
		МассивКМ=Новый СписокЗначений;
		МассивКМ.Очистить();
		cisГТИН="";
		Для Каждого Стр_М Из НСТР Цикл
			
			МаркаКМ=Стр_М.cis;
			Если СтрДлина(МаркаКМ)>31 
				И Сред(МаркаКМ,1,4)="0104" Тогда
				  cisГТИН=МаркаКМ
				
				
			КонецЕсли;
					Если МассивКМ.НайтиПоЗначению(МаркаКМ)=Неопределено Тогда
						МассивКМ.Добавить(МаркаКМ);
						//Нстрок=Объект.ТоварыКМ.НайтИСтроки(Новый Структура("НомерКороба",Стр_2.СерийныйНомер));
						//Для Каждого Стр_КМ из Нстрок Цикл
						//	Если МассивКМ.НайтиПоЗначению(Стр_КМ.cis)=Неопределено Тогда
						//		МассивКМ.Добавить(Стр_КМ.cis);
						//		
						//	КонецЕсли;
							
						//Конеццикла;
						
					КонецЕсли;
				//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ИсторияПоCIS_ХамелеонЦРПТ.НомерКороба КАК НомерКороба,
					|	ИсторияПоCIS_ХамелеонЦРПТ.cis КАК cis
					|ИЗ
					|	РегистрСведений.ИсторияПоCIS_ХамелеонЦРПТ КАК ИсторияПоCIS_ХамелеонЦРПТ
					|ГДЕ
					|	ИсторияПоCIS_ХамелеонЦРПТ.Документ = &Документ
					|	И ИсторияПоCIS_ХамелеонЦРПТ.cis = &cis
					|ИТОГИ ПО
					|	cis,
					|	НомерКороба";
				
				Запрос.УстановитьПараметр("Документ", Ссылк.ПервичныйДокумент);
				Запрос.УстановитьПараметр("cis", МаркаКМ);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Выборкаcis = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				
				Пока Выборкаcis.Следующий() Цикл
					// Вставить обработку выборки Выборкаcis
				  
					ВыборкаНомерКороба = Выборкаcis.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
					Пока ВыборкаНомерКороба.Следующий() Цикл
						// Вставить обработку выборки ВыборкаНомерКороба
						Если Сред(ВыборкаНомерКороба.НомерКороба,1,2)="01" Тогда
							Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Сред(ВыборкаНомерКороба.НомерКороба,3,14)));
						ИначеЕсли сред(ВыборкаНомерКороба.НомерКороба,1,4)="(01)" Тогда
							Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Сред(ВыборкаНомерКороба.НомерКороба,5,14)));
						Иначе
							Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Сред(ВыборкаНомерКороба.НомерКороба,1,14)));
							
						КонецЕсли;
						Если МаркаКМ<>ВыборкаНомерКороба.НомерКороба Тогда

						Добав=ТаблицаПродукций.Добавить();
						Добав.Номенклатура=Продукция;
						Добав.Количество=1;
						Добав.КоличествоВУпаковке=ВыборкаНомерКороба.Количество();
						Добав.НомерКороба=МаркаКМ;
						Добав.cis=ВыборкаНомерКороба.НомерКороба;
						
						Если СтрДлина(Добав.cis)>30  Тогда
							  cisГТИН=Добав.cis
						КонецЕсли;
						
						
					Если МассивКМ.НайтиПоЗначению(Добав.cis)=Неопределено Тогда
						МассивКМ.Добавить(Добав.cis);
					КонецЕсли;
						Конецесли;
						
					КонецЦикла;
				КонецЦикла;
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

			
			
			
		Конеццикла;
		ТаблицаПродукций.Свернуть("НомерКороба,cis");
		
		

		НомСтр=НомСтр+1;
		КоличествоКМ=0;
		НСТР=Ссылк.ПервичныйДокумент.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
		Если НСтр.Количество()>0
			И БратьКоличествоИзТабличойЧасти=Ложь Тогда
			Для Каждого Стр_2 Из НСТР ЦИкл
				
				
				НСтрокиТ=ТаблицаПродукций.НайтиСтроки(Новый Структура("НомерКороба",Стр_2.cis));
				
				Если НСтрокиТ.Количество()>0 Тогда
					КоличествоКМ=КоличествоКМ+НСтрокиТ.Количество();
				Иначе
					КоличествоКМ=КоличествоКМ+1;
				КонецЕсли;
				
			Конеццикла;
		Иначе
			Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) ТОгда
				КоличествоКМ=Стр_1.КоличествоНомеровКМ;
			Иначе
				КоличествоКМ=Стр_1.КоличествоКМ;
			Конецесли;
		КонецЕсли;
		
		
		Добав=ТаблицаИсправлений.Добавить();
		Добав.ГТИН=Стр_1.GTIN;
		
		Добав.НаименованиеВУПД=Стр_1.НаименованиеВУПД;
		//Добав.ГТИН=Стр_1.GTIN;
		Добав.ЕдИзмБыло=Стр_1.ЕдиницаИзмерения;
		Добав.ЕдИзмСтало="";
		
		
		Добав.КоличествоБыло=КоличествоКМ;
		Добав.КоличествоСтало=0;
		
		СуммаПоСтроке=Стр_1.Сумма;
		
		Если Не ЗначениеЗаполнено(СуммаПоСтроке) Тогда
			СуммаПоСтроке=Стр_1.Цена*Стр_1.КоличествоКМ;
		КонецЕсли;
		
		Добав.СуммаБыло=СуммаПоСтроке;
		Добав.СуммаСтало=0;
		
		Добав.СуммаНДСБыло=Стр_1.НДС;
		Добав.СуммаНДССтало=0;
		
		Добав.СтавкаНДСБыло=Стр_1.СтавкаНДС;
		Добав.СтавкаНДССтало="";
		
		Добав.СуммаАкцизБыло=Стр_1.СуммаАкциза;
		Добав.СуммаАкцизСтало=0;
		
		
		
		НСТР=Ссылк.ПервичныйДокумент.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
		
		КИЗИдет=Ложь;
		Упаковкиидут=ложь;
	СписокБылоМаркировка=Новый ТаблицаЗначений;
		СписокБылоМаркировка.Колонки.Добавить("КМ");
		СписокБылоМаркировка.Колонки.Добавить("ТипУпаковки");
			СписокБылоМаркировка.Очистить();
		
		Если НСтр.Количество()>0 Тогда
			Для Каждого Стр_2 Из НСТР ЦИкл
				
				
				
				
				
				Если Ссылк.ПервичныйДокумент.ОтправлятьКМВместоАгрегаций Тогда
					
					
					Если Стр_2.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
					
							НСтрокиТ=ТаблицаПродукций.НайтиСтроки(Новый Структура("НомерКороба",Стр_2.cis));
							Если НСтрокиТ.Количество()>0 Тогда
								Для Каждого Стр_ТТТ Из НСтрокиТ Цикл
									
									
									Добав_Т=СписокБылоМаркировка.Добавить();
									Добав_Т.КМ=Стр_ТТТ.cis;
									Добав_Т.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука;
									
									//СписокБылоМаркировка.Добавить(Стр_ТТТ.cis);
									
									
									

									
								//	
								//	надоЗакрытьИОткры
								//	Если Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Обувь" Тогда
								//		Если СтрДлина(Стр_ТТТ.cis)>20  Тогда
								//			
								//		Иначе
								//			XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
								//		КонецЕсли;
								//	ИначеЕсли Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак"
								//		ИЛИ Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак"
								//		Тогда
								//		
								//		Если Сред(Стр_ТТТ.cis,1,2)<>"01" Тогда
								//			XML_DOM.ЗаписатьНачалоЭлемента("КИЗ");
								//		Иначе
								//			XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
								//		КонецЕсли;
								//	Иначе		
								//		XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
								//	КонецЕсли;
								//	
								//	
								//	
								//	Если Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Обувь" Тогда
								//		Если СтрДлина(Стр_ТТТ.cis)>20  Тогда
								//			XML_DOM.ЗаписатьНачалоЭлемента("КИЗ");
								//		Иначе
								//			XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
								//		КонецЕсли;
								//	ИначеЕсли Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак"
								//		ИЛИ Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак"
								//		Тогда
								//		
								//		Если Сред(Стр_ТТТ.cis,1,2)<>"01" Тогда
								//			XML_DOM.ЗаписатьНачалоЭлемента("КИЗ");
								//		Иначе
								//			XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
								//		КонецЕсли;
								//	Иначе		
								//		XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
								//	КонецЕсли;
								//	//XML_DOM.ЗаписатьАтрибут("Идентиф", "cis");
								// 			
								//	
								//	Значен=Стр_ТТТ.cis;
								//	Если Не ЗначениеЗаполнено(Значен) тогда
								//		Сообщить("В строке № "+xmlString(Стр_ТТТ.НомерСтроки)+") табличной части серийные номера не заполнен cis ("+Символы.ПС+"
								//		|товар "+Строка(Стр_1.GTIN)+", ГТИН "+Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Стр_1.GTIN.GTIN,14,"0"));
								//		ОшибкаПоКм=Истина;
								//	КонецЕсли;
								//	XML_DOM.ЗаписатьТекст(xmlString(Значен));
								//	//XML_DOM.ЗаписатьАтрибут("Значен", Значен);
								//	XML_DOM.ЗаписатьКонецЭлемента();
								//	
							Конеццикла;
						Иначе
									Добав_Т=СписокБылоМаркировка.Добавить();
									Добав_Т.КМ=Стр_2.cis;
									Добав_Т.ТипУпаковки=Стр_2.ТипУпаковки;
							
							//СписокБылоМаркировка.Добавить(Стр_2.cis);

						КонецЕсли;
					Иначе
									Добав_Т=СписокБылоМаркировка.Добавить();
									Добав_Т.КМ=Стр_2.cis;
									Добав_Т.ТипУпаковки=Стр_2.ТипУпаковки;
							
							//СписокБылоМаркировка.Добавить(Стр_2.cis);
								
					КонецЕсли;		
				
				Иначе
									Добав_Т=СписокБылоМаркировка.Добавить();
									Добав_Т.КМ=Стр_2.cis;
									Добав_Т.ТипУпаковки=Стр_2.ТипУпаковки;
					
					//СписокБылоМаркировка.Добавить(Стр_2.cis);
	
				
						
				КонецЕсли;
			Конеццикла;
			
		КонецЕсли;
		Добав.МаркировкаБыло=СписокБылоМаркировка;

		Добав.ЕстьУжеИсправление=ложь;
	Конеццикла;

	Для Каждого Стр_1 Из Ссылк.Товары Цикл
		ТаблицаПродукций=Новый ТаблицаЗначений;
		ТаблицаПродукций.Колонки.Добавить("Номенклатура");
		ТаблицаПродукций.Колонки.Добавить("Количество");
		ТаблицаПродукций.Колонки.Добавить("КоличествоВУпаковке");
		ТаблицаПродукций.Колонки.Добавить("НомерКороба");
		ТаблицаПродукций.Колонки.Добавить("cis");
		ТаблицаПродукций.Колонки.Добавить("ТипУпаковки");
		ТаблицаПродукций.Очистить();
		
		НСТР=Ссылк.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
		
		
		МассивКМ=Новый СписокЗначений;
		МассивКМ.Очистить();
		cisГТИН="";
		Для Каждого Стр_М Из НСТР Цикл
			
			МаркаКМ=Стр_М.cis;
			Если Стр_М.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука Тогда
				  cisГТИН=МаркаКМ
				
				
			КонецЕсли;
					Если МассивКМ.НайтиПоЗначению(МаркаКМ)=Неопределено Тогда
						МассивКМ.Добавить(МаркаКМ);
						//Нстрок=Объект.ТоварыКМ.НайтИСтроки(Новый Структура("НомерКороба",Стр_2.СерийныйНомер));
						//Для Каждого Стр_КМ из Нстрок Цикл
						//	Если МассивКМ.НайтиПоЗначению(Стр_КМ.cis)=Неопределено Тогда
						//		МассивКМ.Добавить(Стр_КМ.cis);
						//		
						//	КонецЕсли;
							
						//Конеццикла;
						
					КонецЕсли;
				//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ИсторияПоCIS_ХамелеонЦРПТ.НомерКороба КАК НомерКороба,
					|	ИсторияПоCIS_ХамелеонЦРПТ.cis КАК cis
					|ИЗ
					|	РегистрСведений.ИсторияПоCIS_ХамелеонЦРПТ КАК ИсторияПоCIS_ХамелеонЦРПТ
					|ГДЕ
					|	ИсторияПоCIS_ХамелеонЦРПТ.Документ = &Документ
					|	И ИсторияПоCIS_ХамелеонЦРПТ.cis = &cis
					|ИТОГИ ПО
					|	cis,
					|	НомерКороба";
				
				Запрос.УстановитьПараметр("Документ", Ссылк);
				Запрос.УстановитьПараметр("cis", МаркаКМ);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Выборкаcis = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Если Стр_М.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка И Выборкаcis.Количество()=0 Тогда
					
					
					Сообщить("Для короба "+Строка(МаркаКМ)+" продукции "+Строка(Стр_1.GTIN.Наименование)+" не удалось получить информацию о КМ, входящих в короб");
					
				КонецЕсли;	
				
				Пока Выборкаcis.Следующий() Цикл
					// Вставить обработку выборки Выборкаcis
				
					ВыборкаНомерКороба = Выборкаcis.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
					Пока ВыборкаНомерКороба.Следующий() Цикл
						// Вставить обработку выборки ВыборкаНомерКороба
						Если Сред(ВыборкаНомерКороба.НомерКороба,1,2)="01" Тогда
							Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Сред(ВыборкаНомерКороба.НомерКороба,3,14)));
						ИначеЕсли сред(ВыборкаНомерКороба.НомерКороба,1,4)="(01)" Тогда
							Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Сред(ВыборкаНомерКороба.НомерКороба,5,14)));
						Иначе
							Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Сред(ВыборкаНомерКороба.НомерКороба,1,14)));
							
						КонецЕсли;
						Если МаркаКМ<>ВыборкаНомерКороба.НомерКороба Тогда

						Добав=ТаблицаПродукций.Добавить();
						Добав.Номенклатура=Продукция;
						Добав.Количество=1;
						Добав.КоличествоВУпаковке=ВыборкаНомерКороба.Количество();
						Добав.НомерКороба=МаркаКМ;
						Добав.cis=ВыборкаНомерКороба.НомерКороба;
						
			//Если ОбщийМодуль_НаСервере_ХамелеонЦРПТ.вернутьТипУпаковкиПоКМ(Добав.cis)=Ложь Тогда
			//	  cisГТИН=Добав.cis
				
				
			//КонецЕсли;
						
						
					Если МассивКМ.НайтиПоЗначению(Добав.cis)=Неопределено Тогда
						МассивКМ.Добавить(Добав.cis);
						//Нстрок=Объект.ТоварыКМ.НайтИСтроки(Новый Структура("НомерКороба",Стр_2.СерийныйНомер));
						//Для Каждого Стр_КМ из Нстрок Цикл
						//	Если МассивКМ.НайтиПоЗначению(Стр_КМ.cis)=Неопределено Тогда
						//		МассивКМ.Добавить(Стр_КМ.cis);
						//		
						//	КонецЕсли;
							
						//Конеццикла;
						
					КонецЕсли;
						
						Конецесли;
					КонецЦикла;
				КонецЦикла;
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

			
			
			
		Конеццикла;
		ТаблицаПродукций.Свернуть("НомерКороба,cis");
		
		

		НомСтр=НомСтр+1;
		КоличествоКМ=0;
		НСТР=Ссылк.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
		Если НСтр.Количество()>0
			И БратьКоличествоИзТабличойЧасти=Ложь Тогда
			Для Каждого Стр_2 Из НСТР ЦИкл
				
				
				НСтрокиТ=ТаблицаПродукций.НайтиСтроки(Новый Структура("НомерКороба",Стр_2.cis));
				
				Если НСтрокиТ.Количество()>0 Тогда
					КоличествоКМ=КоличествоКМ+НСтрокиТ.Количество();
				Иначе
					КоличествоКМ=КоличествоКМ+1;
				КонецЕсли;
				
			Конеццикла;
		Иначе
			Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) ТОгда
				КоличествоКМ=Стр_1.КоличествоНомеровКМ;
			Иначе
				КоличествоКМ=Стр_1.КоличествоКМ;
			Конецесли;
		КонецЕсли;
		
		
		НСтрокиИсправлений=ТаблицаИсправлений.НайтиСтроки(
		Новый Структура("ГТИН,ЕстьУжеИсправление",Стр_1.GTIN,Ложь));
		Если НСтрокиИсправлений.Количество()=0 Тогда
			Добав=ТаблицаИсправлений.Добавить();
			Добав.НаименованиеВУПД=Стр_1.НаименованиеВУПД;
			Добав.ГТИН=Стр_1.GTIN;
			Добав.КоличествоБыло=0;
			Добав.КоличествоСтало=0;
			
			Добав.СуммаБыло=0;
			Добав.СуммаСтало=0;
			
			
			Добав.СуммаАкцизБыло=0;
			Добав.СуммаАкцизСтало=0;

			
			Добав.СуммаНДСБыло=0;
			Добав.СуммаНДССтало=0;
			Добав.ГТИН=Стр_1.GTIN;
			

		Иначе
			Добав=НСтрокиИсправлений[0];
		КонецЕслИ;
		Добав.ГТИН=Стр_1.GTIN;
		
		Добав.ЕдИзмСтало=Стр_1.ЕдиницаИзмерения;
		
		
		Добав.КоличествоСтало=КоличествоКМ;
		
		СуммаПоСтроке=Стр_1.Сумма;
		
		Если Не ЗначениеЗаполнено(СуммаПоСтроке) Тогда
			СуммаПоСтроке=Стр_1.Цена*Стр_1.КоличествоКМ;
		КонецЕсли;
		
		Добав.СуммаСтало=СуммаПоСтроке;
		
		Добав.СуммаНДССтало=Стр_1.НДС;
		
		Добав.СтавкаНДССтало=Стр_1.СтавкаНДС;
		
		Добав.СуммаАкцизСтало=Стр_1.СуммаАкциза;
		
		
		
		НСТР=Ссылк.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
		
		КИЗИдет=Ложь;
		Упаковкиидут=ложь;
		//СписокБылоМаркировка=Новый СписокЗначений;
	СписокБылоМаркировка=Новый ТаблицаЗначений;
		СписокБылоМаркировка.Колонки.Добавить("КМ");
		СписокБылоМаркировка.Колонки.Добавить("ТипУпаковки");
			СписокБылоМаркировка.Очистить();
		
		Если НСтр.Количество()>0 Тогда
			Для Каждого Стр_2 Из НСТР ЦИкл
				
				
				
				
				
			Если Ссылк.ОтправлятьКМВместоАгрегаций Тогда
					Если Стр_2.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
					
							НСтрокиТ=ТаблицаПродукций.НайтиСтроки(Новый Структура("НомерКороба",Стр_2.cis));
							Если НСтрокиТ.Количество()>0 Тогда
								Для Каждого Стр_ТТТ Из НСтрокиТ Цикл
									
									
									
									
									Добав_Т=СписокБылоМаркировка.Добавить();
									Добав_Т.КМ=Стр_ТТТ.cis;
									Добав_Т.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука;
					
									
									//СписокБылоМаркировка.Добавить(Стр_ТТТ.cis);
									
									
									

									
								//	
								//	надоЗакрытьИОткры
								//	Если Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Обувь" Тогда
								//		Если СтрДлина(Стр_ТТТ.cis)>20  Тогда
								//			
								//		Иначе
								//			XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
								//		КонецЕсли;
								//	ИначеЕсли Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак"
								//		ИЛИ Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак"
								//		Тогда
								//		
								//		Если Сред(Стр_ТТТ.cis,1,2)<>"01" Тогда
								//			XML_DOM.ЗаписатьНачалоЭлемента("КИЗ");
								//		Иначе
								//			XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
								//		КонецЕсли;
								//	Иначе		
								//		XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
								//	КонецЕсли;
								//	
								//	
								//	
								//	Если Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Обувь" Тогда
								//		Если СтрДлина(Стр_ТТТ.cis)>20  Тогда
								//			XML_DOM.ЗаписатьНачалоЭлемента("КИЗ");
								//		Иначе
								//			XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
								//		КонецЕсли;
								//	ИначеЕсли Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак"
								//		ИЛИ Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак"
								//		Тогда
								//		
								//		Если Сред(Стр_ТТТ.cis,1,2)<>"01" Тогда
								//			XML_DOM.ЗаписатьНачалоЭлемента("КИЗ");
								//		Иначе
								//			XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
								//		КонецЕсли;
								//	Иначе		
								//		XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
								//	КонецЕсли;
								//	//XML_DOM.ЗаписатьАтрибут("Идентиф", "cis");
								// 			
								//	
								//	Значен=Стр_ТТТ.cis;
								//	Если Не ЗначениеЗаполнено(Значен) тогда
								//		Сообщить("В строке № "+xmlString(Стр_ТТТ.НомерСтроки)+") табличной части серийные номера не заполнен cis ("+Символы.ПС+"
								//		|товар "+Строка(Стр_1.GTIN)+", ГТИН "+Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Стр_1.GTIN.GTIN,14,"0"));
								//		ОшибкаПоКм=Истина;
								//	КонецЕсли;
								//	XML_DOM.ЗаписатьТекст(xmlString(Значен));
								//	//XML_DOM.ЗаписатьАтрибут("Значен", Значен);
								//	XML_DOM.ЗаписатьКонецЭлемента();
								//	
							Конеццикла;
						Иначе
							//СписокБылоМаркировка.Добавить(Стр_2.cis);
									Добав_Т=СписокБылоМаркировка.Добавить();
									Добав_Т.КМ=Стр_ТТТ.cis;
									Добав_Т.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука;

						КонецЕсли;
					Иначе
							
							//СписокБылоМаркировка.Добавить(Стр_2.cis);
									Добав_Т=СписокБылоМаркировка.Добавить();
									Добав_Т.КМ=Стр_2.cis;
									Добав_Т.ТипУпаковки=Стр_2.ТипУпаковки;
								
					КонецЕсли;		
				
				Иначе
					
					//СписокБылоМаркировка.Добавить(Стр_2.cis);
									Добав_Т=СписокБылоМаркировка.Добавить();
									Добав_Т.КМ=Стр_2.cis;
									Добав_Т.ТипУпаковки=Стр_2.ТипУпаковки;
	
				
						
				КонецЕсли;
			Конеццикла;
			
		КонецЕсли;
		Добав.МаркировкаСтало=СписокБылоМаркировка;

		Добав.ЕстьУжеИсправление=Истина;
	Конеццикла;
	
	
	
	СуммаИтогПлюс=0;
	СуммаИтогМинус=0;
	СуммаИтогБезНДСПлюс=0;
	СуммаИтогБезНДСМинус=0;
	СуммаНДСПлюс=0;
	СуммаНДСМинус=0;

//	
ОблСтрока=Макет.ПолучитьОбласть("Строка");
	НомСтр=0;
	Для Каждого Стр_1 Из ТаблицаИсправлений Цикл
//		
		НомСтр=НомСтр+1;
		
		ОблСтрока.Параметры.НомерСтроки=НомСтр;
КодТовара="";

 			Если КодТовараВУПД=1 Тогда
				КодТовара=xmlString(Стр_1.ГТИН.МодельПроизводителяАртикул);
			ИначеЕсли КодТовараВУПД=2 Тогда
				КодТовара=xmlString(Стр_1.ГТИН.КодВУчетнойСистеме);
			ИначеЕсли КодТовараВУПД=3 Тогда
				КодТовара=xmlString(Стр_1.ГТИН.Код);
				
			Иначе
				КодТовара=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(Стр_1.ГТИН.GTIN),14,"0");
			КонецЕслИ;
			
			Если не ЗначениеЗаполненО(КодТовара) Тогда
				КодТовара="-";
			КонецЕсли;
			ОблСтрока.Параметры.ТоварКод = СокрЛП(КодТовара) ;
			
			Если ЗначениеЗаполненО(Стр_1.НаименованиеВУПД) тогда
				ОблСтрока.Параметры.ТоварНаименование= СокрЛП(Стр_1.НаименованиеВУПД) ;
			Иначе
				ОблСтрока.Параметры.ТоварНаименование= СокрЛП(Стр_1.ГТИН.Наименование) ;
			КонецЕсли;
			Если ЗначениеЗаполнено(Стр_1.ЕдИзмБыло) Тогда
				ОблСтрока.Параметры.КодЕдИзмБыло= СокрЛП(Стр_1.ЕдИзмБыло.Код) ;
				ОблСтрока.Параметры.ЕдИзмБыло=СокрЛП(Стр_1.ЕдИзмБыло);
			Иначе
				ОблСтрока.Параметры.КодЕдИзмБыло= СокрЛП("--") ;
				ОблСтрока.Параметры.ЕдИзмБыло=СокрЛП("--");
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Стр_1.ЕдИзмСтало) Тогда
				ОблСтрока.Параметры.КодЕдИзмСтало= СокрЛП(Стр_1.ЕдИзмСтало.Код) ;
				ОблСтрока.Параметры.ЕдИзмСтало=СокрЛП(Стр_1.ЕдИзмСтало);
			Иначе
				ОблСтрока.Параметры.КодЕдИзмСтало= СокрЛП(Стр_1.ЕдИзмБыло.Код) ;
				ОблСтрока.Параметры.ЕдИзмСтало=СокрЛП(Стр_1.ЕдИзмБыло);
			КонецЕсли;
			ОблСтрока.Параметры.КоличествоБыло=Стр_1.Количествобыло;
			ОблСтрока.Параметры.КоличествоСтало=Стр_1.КоличествоСтало;
			
			СуммаПоСтроке=Стр_1.СуммаБыло;
			
			Если Стр_1.Количествобыло=0 Тогда
				Цена=СуммаПоСтроке-Стр_1.СуммаНДСБыло
			Иначе
				Цена=Окр((СуммаПоСтроке-Стр_1.СуммаНДСБыло)/Стр_1.Количествобыло,2);
			КонецЕсли;
			ОблСтрока.Параметры.ЦенаДо=Цена;
			СуммаПоСтроке=Стр_1.СуммаСтало;
			
			Если Стр_1.Количествобыло=0 Тогда
				Цена=СуммаПоСтроке-Стр_1.СуммаНДССтало
			Иначе
				Цена=Окр((СуммаПоСтроке-Стр_1.СуммаНДССтало)/Стр_1.Количествобыло,2);
			КонецЕсли;
			ОблСтрока.Параметры.ЦенаСтало=Цена;
			
			СуммаПоСтрокеБыло=Стр_1.СуммаБыло;
			СуммаПоСтрокеСтало=Стр_1.СуммаСтало;
			
			СуммаБезНДСБыло=СуммаПоСтрокеБыло-Стр_1.СуммаНДСБыло;
			СуммаБезНДССтало=СуммаПоСтрокеСтало-Стр_1.СуммаНДССтало;
			ОблСтрока.Параметры.СуммаБезНДСБыло=СуммаБезНДСБыло;
			ОблСтрока.Параметры.СуммаБезНДССтало=СуммаБезНДССтало;
			
			СтавкаНДС_1="без НДС";
			Если Стр_1.СуммаНДСБыло<>0 Тогда
				Если СуммаПоСтрокеБыло-Стр_1.СуммаНДСБыло<>0 Тогда
					СтавкаНДС=Стр_1.СуммаНДСБыло*100/(СуммаПоСтрокеБыло-Стр_1.СуммаНДСБыло);
					Если СтавкаНДС<5 Тогда
						СтавкаНДС_1="без НДС";
					ИначеЕсли СтавкаНДС<17 Тогда
						СтавкаНДС_1="10%"
					Иначе
						СтавкаНДС_1="20%"
						
					КонецЕслИ;
				КонецЕсли;
			КонецЕсли;
			ОблСтрока.Параметры.СтавкаНДСБыло=СтавкаНДС_1;
			
			СтавкаНДС_1="без НДС";
			Если Стр_1.СуммаНДССтало<>0 Тогда
				Если СуммаПоСтрокеСтало-Стр_1.СуммаНДССтало<>0 Тогда
					СтавкаНДС=Стр_1.СуммаНДССтало*100/(СуммаПоСтрокеСтало-Стр_1.СуммаНДССтало);
					Если СтавкаНДС<5 Тогда
						СтавкаНДС_1="без НДС";
					ИначеЕсли СтавкаНДС<17 Тогда
						СтавкаНДС_1="10%"
					Иначе
						СтавкаНДС_1="20%"
						
					КонецЕслИ;
				КонецЕсли;
			КонецЕсли;
			
			ОблСтрока.Параметры.СтавкаНДССтало=СтавкаНДС_1;
			
			Разница=СуммаБезНДССтало-СуммаБезНДСБыло;
		
			Если Разница>=0  Тогда
				СуммаИтогБезНДСПлюс=СуммаИтогБезНДСПлюс+Разница;
				ОблСтрока.Параметры.СуммаБезНДСУвеличение=СуммаИтогБезНДСПлюс;
			Иначе
				ОблСтрока.Параметры.СуммаБезНДСУвеличение=0;
				
			КонецЕсли;
			Если Разница<=0  Тогда
				СуммаИтогБезНДСМинус=СуммаИтогБезНДСМинус-Разница;
				ОблСтрока.Параметры.СуммаБезНДСУменьшение=-Разница;
			Иначе
				ОблСтрока.Параметры.СуммаБезНДСУменьшение=0;
			КонецЕсли;
			
			
			Если Стр_1.СуммаАкцизБыло=0 Тогда
				ОблСтрока.Параметры.СуммаАкцизБыло="Без акциза";
			Иначе
				ОблСтрока.Параметры.СуммаАкцизБыло=Стр_1.СуммаАкцизБыло;
			КонецЕсли;
				
			Если Стр_1.СуммаАкцизСтало=0 Тогда
				ОблСтрока.Параметры.СуммаАкцизСтало="Без акциза";
			Иначе
				ОблСтрока.Параметры.СуммаАкцизСтало=Стр_1.СуммаАкцизСтало;
			КонецЕсли;
			
			ОблСтрока.Параметры.СуммаНДСБыло=Стр_1.СуммаНДСБыло;
					
			ОблСтрока.Параметры.СуммаНДССтало=Стр_1.СуммаНДССтало;
			
			разница=Стр_1.СуммаНДССтало-Стр_1.СуммаНДСБыло;
			
			Если Разница>=0 Тогда
				СуммаНДСПлюс=СуммаНДСПлюс+Разница;
				ОблСтрока.Параметры.СуммаНДСУвеличение=Разница;
				ОблСтрока.Параметры.СуммаНДСУменьшение=0;
				
			Иначе
				ОблСтрока.Параметры.СуммаНДСУвеличение=0;
				СуммаНДСМинус=СуммаНДСМинус-Разница;
				ОблСтрока.Параметры.СуммаНДСУменьшение=-Разница;
				
			КонецЕсли;
			ОблСтрока.Параметры.СуммаБыло=СуммаПоСтрокеБыло;
					
			ОблСтрока.Параметры.СуммаСтало=СуммаПоСтрокеСтало;
						
			Разница=СуммаПоСтрокеСтало-СуммаПоСтрокеБыло;
			
			
			Если Разница>=0  Тогда
				ОблСтрока.Параметры.СуммаУвеличение=Разница;
				СуммаИтогПлюс=СуммаИтогПлюс+Разница;
			Иначе
				ОблСтрока.Параметры.СуммаУвеличение=0;
			КонецЕсли;
			
			
			
			Если Разница<=0  Тогда
				СуммаИтогМинус=СуммаИтогМинус-Разница;
				ОблСтрока.Параметры.СуммаУменьшение=-Разница;
			Иначе
				ОблСтрока.Параметры.СуммаУменьшение=0;
					
			КонецЕсли;
		ТабДокумент.Вывести(ОблСтрока);		
			
	КонецЦикла;
	
	ОблПодвал=Макет.ПолучитьОбласть("Подвал");
	ОблПодвал.Параметры.СуммаБезНДСУвеличение=СуммаИтогБезНДСПлюс;
	ОблПодвал.Параметры.СуммаУвеличение=СуммаИтогПлюс;
	ОблПодвал.Параметры.СуммаНДСУвеличение=СуммаНДСПлюс;
	
	ОблПодвал.Параметры.СуммаБезНДСУменьшение=СуммаИтогБезНДСМинус;
	ОблПодвал.Параметры.СуммаУменьшение=СуммаИтогМинус;
	ОблПодвал.Параметры.СуммаНДСУменьшение=СуммаНДСМинус;
	
	ОблПодвал.Параметры.ПередаточныйДокумент="УПД "+НомерУПД+" от "+Формат(ДатаУПД,"ДЛФ=Д");
	
	
	ОблПодвал.Параметры.ПредставлениеОрганизации=Ссылка.Организация.Наименование+", ИНН/КПП: "+Ссылка.Организация.ИНН+"/"+Ссылка.Организация.КПП;
	ОблПодвал.Параметры.ПредставлениеКонтрагента=Ссылка.Контрагент.Наименование+", ИНН/КПП: "+Ссылка.Контрагент.ИНН+"/"+Ссылка.Контрагент.КПП;
	
	
	ТабДокумент.Вывести(ОблПодвал);		
				
		Возврат ТабДокумент;
		
КонецФункции
Функция НеПрошлаПроверкаУКД(Файл_1,документ=Ложь, Ссылка = Неопределено,ОткрытьФорму_1,Сообщения) Экспорт
	
	Попытка
		
		//Файл_1=СтрЗаменить(Файл_1,"&","&amp;");
		
		//Если РегистрыСведений.НастройкиПрограммы_ХамелеонМеркурий.Получить().НеПроверятьXSDСхемы Тогда
		//	Возврат Ложь;
		//КонецЕсли;
		
		КаталогВременногоФайла=КаталогВременныхФайлов()+"new_maket\";
		СоздатьКаталог(КаталогВременногоФайла);
		
		
		Файл=ПолучитьИмяВременногоФайла("xml");
		Файл=СтрЗаменить(Файл,КаталогВременныхФайлов(),КаталогВременногоФайла);
		
		
		Файл_2=Новый ТекстовыйДокумент;
		Файл_2.ДобавитьСтроку(Файл_1);
		Файл_2.Записать(Файл,"windows-1251");
		//Файл_1.ЗаписатЬ(Файл);
		
		//	dictionary_v20=ПолучитьИмяВременногоФайла("xml");
		dictionary_v20=ПолучитьИмяВременногоФайла("xsd");
		dictionary_v20=СтрЗаменить(dictionary_v20,КаталогВременныхФайлов(),КаталогВременногоФайла);
		
		
		
		//dictionary_v20=КаталогВременногоФайла+"dictionary_v20.xsd";
		Текст=Документы.Отгрузка_ХамелеонЦРПТ.ПолучитьМакет("XML_Корректриовочная_ЭДО");
		Текст.Записать(dictionary_v20,"windows-1251");
		
		
		XMLDoc = New COMObject("Msxml2.DOMDocument.6.0");
		XMLDoc.Async = false;
		XMLDoc.ValidateOnParse = true;
		SchemaCache = New COMObject("Msxml2.XMLSchemaCache.6.0");
		
		//SchemaCache.Add("http://www.w3.org/2001/XMLSchema",dictionary_v20);
		SchemaCache.Add("",dictionary_v20);
		
		XMLDoc.Schemas = SchemaCache;
		XMLDoc.SetProperty("MultipleErrorMessages", true);
		XMLDoc.Load(Файл);
		ErrObj = XMLDoc.ParseError;
		Ошибка="";
		If ErrObj.ErrorCode <> 0 Then
			Сообщения = Новый Массив;
			For Each ErrItem In ErrObj.AllErrors Do 
				//Message("Ошибка : " + ErrItem.Reason + " " + ErrItem.SrcText);
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "В строке № "+Erritem.line+" в колонке № "+Erritem.linepos+" ошибка: "+ErrItem.Reason+" "+ErrItem.SrcText;
				Сообщение.ПутьКДанным = "Объект";
				Если Найти(ErrItem.Reason,"Не удалось проанализировать атрибут ""КрНаимСтрПр""") Тогда
					Для Каждого Стр_1 Из Ссылка.Товары Цикл
						Если Стр_1.НомерГТД.НомераГТДНесколько.Количество()>0 Тогда
							Для Каждого Стр_2 ИЗ Стр_1.НомерГТД.НомераГТДНесколько Цикл
									 Если НЕ ЗначениеЗаполнено(Стр_2.НомерГТД) ИЛИ Не ЗначениеЗаполнено(Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду(Стр_2.КодСтраны)) Тогда
											Сообщение.КлючДанных = Стр_1.НомерГТД;
											Прервать;
											//Если нЕ ЗначениеЗаполнено(Стр_1.НомерГТД.Код) Тогда
											//	Сообщение.Поле = "Наименование";
											//КонецЕсли;
												
										Конецесли;
								
							Конеццикла;
						Иначе
						 Если ЗначениеЗаполнено(Стр_1.НомерГТД) И Не ЗначениеЗаполнено(Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду(Стр_1.НомерГТД.Наименование)) Тогда
								Сообщение.КлючДанных = Стр_1.НомерГТД;
								//Если нЕ ЗначениеЗаполнено(Стр_1.НомерГТД.Код) Тогда
									Сообщение.Поле = "Наименование";
								//КонецЕсли;
									
							Конецесли;
						КонецЕсли;
					Конеццикла;
					//Сообщение.КлючДанных = Ссылка.Организация;
					//Сообщение.Поле = "ИД_ЭДО";
					
				ИначеЕсли Найти(ErrItem.Reason, "ИдОтпр") > 0 Тогда
					Сообщение.КлючДанных = Ссылка.Организация;
					Сообщение.Поле = "ИД_ЭДО";
				ИначеЕсли Найти(ErrItem.Reason, "ИдПол") > 0 Тогда
					Сообщение.КлючДанных = Ссылка.Контрагент;
					Сообщение.Поле = "ИД_ЭДО";
				ИначеЕсли Найти(ErrItem.Reason, "Отсутствует необходимый атрибут ''КодРегион''") > 0 					
					ИЛИ Найти(ErrItem.Reason, "Не удалось проанализировать атрибут ""КодРегион"" со значением") > 0 
					Тогда

					Если НЕ ЗначениеЗаполнено(РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("ОБъект,Тип",Ссылка.Организация,
						Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический)).КодРегиона) Тогда
						Сообщение.КлючДанных = Ссылка.Организация;
						Сообщение.Поле = "АдресДляОткрытия";
					ИначеЕсли НЕ ЗначениеЗаполнено(РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("ОБъект,Тип",Ссылка.Организация,
						Перечисления.ТипАдреса_ХамелеонЦРПТ.Фактический)).КодРегиона) Тогда
						Сообщение.КлючДанных = Ссылка.Организация;
						Сообщение.Поле = "АдресФакт";
					ИначеЕсли НЕ ЗначениеЗаполнено(РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("ОБъект,Тип",Ссылка.Контрагент,
						Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический)).КодРегиона) Тогда
						Сообщение.КлючДанных = Ссылка.Контрагент;
						Сообщение.Поле = "АдресДляОткрытия";
					ИначеЕсли НЕ ЗначениеЗаполнено(РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("ОБъект,Тип",Ссылка.Контрагент,
						Перечисления.ТипАдреса_ХамелеонЦРПТ.Фактический)).КодРегиона) Тогда
						Сообщение.КлючДанных = Ссылка.Контрагент;
						Сообщение.Поле = "АдресФакт";
						
						
					ИначеЕсли ЗначениеЗаполнено(Ссылка.Грузополучатель) И НЕ ЗначениеЗаполнено(РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("ОБъект,Тип",Ссылка.Грузополучатель,
						Перечисления.ТипАдреса_ХамелеонЦРПТ.Фактический)).КодРегиона) Тогда
						Сообщение.КлючДанных = Ссылка.Грузополучатель;
						Сообщение.Поле = "АдресФакт";
					ИначеЕсли ЗначениеЗаполнено(Ссылка.Грузоотправитель) И НЕ ЗначениеЗаполнено(РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("ОБъект,Тип",Ссылка.Грузоотправитель,
						Перечисления.ТипАдреса_ХамелеонЦРПТ.Фактический)).КодРегиона) Тогда
						Сообщение.КлючДанных = Ссылка.Грузоотправитель;
						Сообщение.Поле = "АдресФакт";
						
					КонецЕсли;
					
				ИначеЕсли Найти(ErrItem.Reason,"Не удалось проанализировать атрибут ""КПП""")>0  Тогда
					Если Найти(ErrItem.Reason,"нарушает ограничение length для ""9""")>0  Тогда
						Если ЗначениеЗаполнено(Ссылка.Организация.КПП) И СтрДлина(Ссылка.Организация.КПП)<>9 Тогда
							Сообщение.КлючДанных = Ссылка.Организация;
							Сообщение.Поле = "КПП";
						Иначе
							
							Сообщение.КлючДанных = Ссылка.Контрагент;
							Сообщение.Поле = "КПП";
						Конецесли;
						
					КонецЕсли;
					
				ИначеЕсли Найти(ErrItem.Reason,"Не удалось проанализировать атрибут ""ИННФЛ""")>0 
					И Найти(ErrItem.Reason,"нарушает ограничение length для ""12""")>0 Тогда
					Если СтрДлина(Ссылка.Организация.ИНН)<>12  И Не ЗначениеЗаполнено(Ссылка.Организация.КПП) Тогда
						Сообщение.КлючДанных = Ссылка.Организация;
						Сообщение.Поле = "КПП";
					ИначеЕсли СтрДлина(Ссылка.Контрагент.ИНН)<>12 И  Не ЗначениеЗаполнено(Ссылка.Контрагент.КПП) Тогда
						Сообщение.КлючДанных = Ссылка.Контрагент;
						Сообщение.Поле = "КПП";
					ИначеЕсли ЗначениеЗАполнено(Ссылка.Грузополучатель) И СтрДлина(Ссылка.Грузополучатель.ИНН)<>12
						 И  Не ЗначениеЗаполнено(Ссылка.Грузополучатель.КПП)  Тогда
						Сообщение.КлючДанных = Ссылка.Грузополучатель;
						Сообщение.Поле = "КПП";
						
					Иначе
						Сообщение.КлючДанных = Ссылка.Грузоотправитель;
						Сообщение.Поле = "КПП";
					КонецЕсли;
                    //<СвИП ИННФЛ="6829028425">
				ИначеЕсли Найти(ErrItem.SrcText, "Идентиф=""ОснованиеНомер""") > 0 Тогда
					Сообщение.КлючДанных = Ссылка;
					Сообщение.Поле = "НомерПервичногоДокумента";

				ИначеЕсли Найти(ErrItem.SrcText, "НомерСчФ") > 0 Тогда
					Сообщение.КлючДанных = Ссылка;
					Сообщение.Поле = "НомерПервичногоДокумента";
					
				КонецЕсли;
				Сообщения.Добавить(Сообщение);
//				Сообщение.Сообщить();
				//Ошибка=Ошибка+"В строке № "+Erritem.line+" в колонке № "++Erritem.linepos+" ошибка: "+ErrItem.Reason+" "+ErrItem.SrcText+Символы.ПС+Символы.ПС;
			EndDo;
			//Инфа=();
			#Если ТолстыйКлиентОбычноеПриложение Тогда
					ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ФормаСообщенийПользователю", Новый Структура("Сообщения", Сообщения));
			//		ОткрытьФорму=Истина;
		#Иначе
			Если ТекущийРежимЗапуска()=РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
				Для каждого Сообщение Из Сообщения Цикл
					Сообщение.Сообщить();
				КонецЦикла;				
			Иначе
				ОткрытьФорму_1=Истина;
			КонецЕсли;
			#КонецЕсли
			//		УдалитьФайлы(ИмяВремен);
			//Сообщить(Ошибка);			
			Возврат Истина;
		EndIf;
		УдалитьФайлы(Файл);
		УдалитьФайлы(dictionary_v20);
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		Сообщить("Описание='" + Инфо.Описание + "'");
		Сообщить("ИмяМодуля='" + Инфо.ИмяМодуля + "'");
		Сообщить("НомерСтроки=" + Инфо.НомерСтроки);
		Сообщить("ИсходнаяСтрока='" + Инфо.ИсходнаяСтрока + "'");
		
	КонецПопытки;
	Возврат Ложь;
	
КонецФункции


Процедура СохранитьВcsvВыделенныеЗаказы(Знач МассивЗаказов,КаталогНаСервере)    Экспорт
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
		ТекстД=Новый ТекстовыйДокумент;
			
		Для Каждого Ссылка Из МассивЗаказов Цикл
			Номер=Ссылка.Номер;
			//Для Каждого Стр_2 Из Ссылка Цикл
				//ТекстД.ДобавитьСтроку(Ссылка.Номер);
				
				ТаблицаКМов=Новый ТаблицаЗначений;
				ТаблицаКМов.Колонки.Добавить("ГТИН");
				
				ТаблицаКМов.Колонки.Добавить("КМ");
				
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	НомераКМ_ХамелеонЦРПТ.НомерКМ КАК НомерКМ
					|ИЗ
					|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
					|ГДЕ
					|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа";
				
				Запрос.УстановитьПараметр("ДокументЗаказа", Ссылка);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ДД = РезультатЗапроса.Выбрать();
				
				Если ДД.Количество()=0 Тогда
				
				
				
					Для Каждого ДД ИЗ Ссылка.КМИзAPI Цикл
						
						Добав=ТаблицаКМов.Добавить();
						РР=РаскодироватьСтроку(ДД.НомерКМ,СпособКодированияСтроки.КодировкаURL);
						Добав.ГТИН=Сред(РР,3,14);
						Добав.КМ=РР;
						//РР=РаскодироватьСтроку(ДД.НомерКМ,СпособКодированияСтроки.КодировкаURL);
						//ТекстД.ДобавитьСтроку(РР);
					Конеццикла;
				Иначе
					Пока ДД.Следующий() Цикл
						РР=РаскодироватьСтроку(ДД.НомерКМ,СпособКодированияСтроки.КодировкаURL);
						Добав=ТаблицаКМов.Добавить();
						РР=РаскодироватьСтроку(ДД.НомерКМ,СпособКодированияСтроки.КодировкаURL);
						Добав.ГТИН=Сред(РР,3,14);
						Добав.КМ=РР;
						//ТекстД.ДобавитьСтроку(РР);
						
					КонецЦикла;
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				КонецеслИ;
				
				
				ТаблицаКМов.Сортировать("ГТИН");
				ГТИН="ыфвавыфафывавыф";
				Для Каждого Стр_1 Из ТаблицаКМов Цикл
					Если ГТИН<>Стр_1.ГТИН Тогда
						Если ГТИН<>"ыфвавыфафывавыф" Тогда
							ТекстД.Записать(КаталогНаСервере+СокрЛП(Номер)+"_"+ГТИН+".csv");
							
						КонецЕсли;
						ГТИН=Стр_1.ГТИН;
	ТекстД.Очистить();
											КонецЕсли;
						
					ТекстД.ДобавитьСтроку(Стр_1.КМ);
						
				КонецЦикла;
						Если ГТИН<>"ыфвавыфафывавыф" Тогда
							ТекстД.Записать(КаталогНаСервере+СокрЛП(Номер)+"_"+ГТИН+".csv");
							
						КонецЕсли;
				
				//ИмяТекст=ПолучитьИмяВременногоФайла();
				
				
				//ИмяФ=Каталог+"\"+Номер+".csv";
				//ДвоичнД.Записать(ИмяФ);
			//КонецЕсли;
		Конеццикла;
		
		
	//КонецЕсли;
	
	
КонецПроцедуры



Процедура ПолучитьКМИзAPIЗаказНаКМНаСервере(Объект_1,Пользователь,ТокенСУЗ=неопределено) Экспорт
	Объект=объект_1.Получитьобъект();
	РаботатьНаV1=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().РаботатьНаV1;
	ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	
	Если Ложь Тогда
				
	Иначе
			
			Если ОБъект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Молоко") Тогда
				
				//Если 	Объект.ИспользоватьОтчетОбИспользовании=Истина Тогда
					ПолучитьКМИзAPI_Шины(Объект,Пользователь,ТокенСУЗ);
				//Иначе
				//	ПолучитьКМИзAPI_Молоко_CSV(Объект,Пользователь);
				//КонецЕсли;
				
				Возврат;
				
			КонецЕсли;
			
		Если 								НЕ РаботатьНаV1 Тогда
			ПолучитьКМИзAPI_Шины(Объект,Пользователь,ТокенСУЗ);
			
		Иначе
			
			
		//	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
		//	Текст=Форм.Пользователь;
		//	Форм.Пользователь=Объект.ТекущийПользователь;
		//	ПараметрыДлякилента=Неопределено;
		//	Если Форм.НаКлиенте(ПараметрыДлякилента) Тогда
		//		Форм.Пользователь=Текст;
					ПараметрыДлякилента=ПолучитьИзПользователя(Пользователь);
				Если Не ЗначениеЗаполнено(ПараметрыДлякилента) Тогда
					Возврат;
				КонецЕслИ;
			
				
				
				АдресРаздробить=ПараметрыДлякилента.АдресСУЗ;
				Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
				Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
				Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
				Порт=Сред(Порт,Найти(Порт,":")+1);
				Попытка
					Порт=число(Порт);
				Исключение
					Порт=Неопределено;
				КонецПопытки;
				Если Не ЗначениеЗаполнено(Адрес) Тогда
					
					Сообщить("В пользователе не заполнен адрес СУЗ");
					Возврат;
					
				КонецЕсли;
					Если Найти(АдресРаздробить,"https")=1 Тогда
						Защищ=Новый ЗащищенноеСоединениеopenSSL();
					Иначе
						Защищ=Неопределено;
					КонецЕсли;
						
				
				
							Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
					
						HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,,Защищ);
					Иначе
						HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,,Защищ);
					КонецЕсли;
					
					КоличествоОгранчений=0;
					ВРегистре=Вргеистре(КоличествоОгранчений,ОБъект);
					Если НЕ ВРегистре И Объект.Товары.Итог("КоличествоКМ")>КоличествоОгранчений Тогда
						 //Состояние("Получение "+Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
//						 0);
						
						НомерПП=0;
						Для Каждого Стр Из Объект.Товары Цикл
							НомерПП=НомерПП+1;
							Пока Стр.КоличествоКМ-Стр.КоличествоПолучено>0 Цикл
								
								Получить=Мин(Стр.КоличествоКМ-Стр.КоличествоПолучено,10000);
								
								HTTPЗапрос = Новый HTTPЗапрос("api/codes?orderId="+Объект._Order_ID+"&orderLineId="+СокрЛП(Стр.ИДСУЗ)+"&quantity="+Формат(Получить,"ЧГ="));
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
								ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
								Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
									ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП,Объект);
								КонецЕсли;
								//Стр.КоличествоПолучено=Получить;
								 Попытка
									//ЧтениеJSON = Новый ЧтениеJSON;
									//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
									Если Ответ.КодСостояния=200 Тогда
										НаСервереСДобавлениемРегистра(ТекстДокумента,Стр.ID,Объект);
			                            
									   	// ЭтаФорма.Прочитать();
									        	 Стр.КоличествоПолучено=Стр.КоличествоПолучено+Получить; 
											Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
								
								КонецЕсли;
												 
					Объект.Записать(РежимЗаписиДокумента.Проведение);
//												 Состояние("Получено "+Формат(Объект.Товары.Итог("КоличествоПолучено"),"ЧГ=")+" из "+
//												 Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
//												 Окр(Объект.Товары.Итог("КоличествоПолучено")*100/Объект.Товары.Итог("КоличествоКМ")));
										//НайтиВсеOrderlineПоНомеркуКМ();
									Иначе
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
										
										Если NNN.success=Ложь Тогда
										globalErrors="";
										Для Каждого Стр_1 Из NNN.globalErrors Цикл
											globalErrors=globalErrors+Стр_1+"
											|"
										Конеццикла;
												Если Найти(globalErrors,"Not enough balance")>0 Тогда
													Сообщить("Необходимо пополнить баланс в ЦРПТ");
												Конецесли;
										
										Сообщить("Не удалось обработать документ: "+globalErrors);
										Если Найти(globalErrors,"Требуемое количество ")>0 Тогда
											ЧислоОсталось=Число(СокрЛП(Сред(globalErrors,Найти(globalErrors,"осталось использовать ")+22)));
											Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
											Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
								
								КонецЕсли;
					Объект.Записать(РежимЗаписиДокумента.Проведение);
												 НеНадоОбновлятьСтатус=Истина;
										ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше,чем размер буфера")>0 Тогда
											НеНадоОбновлятьСтатус=Истина;
											ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
											ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
											Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
					Объект.Записать(РежимЗаписиДокумента.Проведение);
										ИначеЕсли Найти(globalErrors,"DELETE")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ ; 
											Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
								
								КонецЕсли;
											
					Объект.Записать(РежимЗаписиДокумента.Проведение);
				ИначеЕСЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Табак")
					ИЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак")
					Тогда
										 	Сообщить("Возможно указано заказанное количество меньше 2 штук!!");
										Конецесли;
										
									ИначеЕсли NNN.success=Истина Тогда
										   Прервать;
										
									КонецЕсли;
									  КонецЕсли; 
								Исключение
									
									Сообщить("Ошибка "+Ответ.ПолучитьТелоКакСтроку());
								 КонецПопытки;
								
								
							Конеццикла;
						КонецциклА;
						
					Иначе
//						Состояние("Получение "+Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
//						 0);
					
						НомерПП=0;
						Для Каждого Стр Из Объект.Товары Цикл
						НомерПП=НомерПП+1;
						HTTPЗапрос = Новый HTTPЗапрос("api/codes?orderId="+Объект._Order_ID+"&orderLineId="+СокрЛП(Стр.ИДСУЗ)+"&quantity="+Формат(Стр.КоличествоКМ-стр.КоличествоПолучено,"ЧГ="));
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
						Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
							ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП,Объект);
						КонецЕсли;
						
						Попытка
							//ЧтениеJSON = Новый ЧтениеJSON;
							//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
							Если Ответ.КодСостояния=200 Тогда
								НеобходимоВсеНаСервереДелать(ТекстДокумента,Стр.ID,Объект);
						
								Стр.КоличествоПолучено=Стр.КоличествоКМ;
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
					Объект.Записать(РежимЗаписиДокумента.Проведение);
//												 Состояние("Получено "+Формат(Объект.Товары.Итог("КоличествоПолучено"),"ЧГ=")+" из "+
//												 Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
//												 Окр(Объект.Товары.Итог("КоличествоПолучено")*100/Объект.Товары.Итог("КоличествоКМ")));
									
								//НайтиВсеOrderlineПоНомеркуКМ();
							Иначе
								NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
						
								Если NNN.success=Ложь Тогда
								globalErrors="";
								Для Каждого Стр_1 Из NNN.globalErrors Цикл
									globalErrors=globalErrors+Стр_1+"
									|"
								Конеццикла;
												Если Найти(globalErrors,"Not enough balance")>0 Тогда
													Сообщить("Необходимо пополнить баланс в ЦРПТ");
												Конецесли;
								
								Сообщить("Не удалось обработать документ: "+globalErrors);
								Если Найти(globalErrors,"Требуемое количество ")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=Число(СокрЛП(Сред(globalErrors,Найти(globalErrors,"осталось использовать ")+22)));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
		КонецЕслИ;								
									
					Объект.Записать(РежимЗаписиДокумента.Проведение);
										ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше,чем размер буфера")>0 Тогда
											НеНадоОбновлятьСтатус=Истина;
											ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
											ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
											Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
								ИначеЕсли Найти(globalErrors,"DELETE")>0 Тогда
									Стр.КоличествоПолучено=Стр.КоличествоКМ ; 
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
									
					Объект.Записать(РежимЗаписиДокумента.Проведение);
				ИначеЕСЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Табак") 
					ИЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак") 
					Тогда
										 	Сообщить("Возможно указано заказанное количество меньше 2 штук!!");
								Конецесли;
							ИначеЕсли NNN.success=Истина Тогда
								
								
							КонецЕсли;
		КонецЕсли;
							
							
						Исключение
							
							Сообщить("Ошибка "+Ответ.ПолучитьТелоКакСтроку());
						КонецПопытки;
						
					КонецЦикла;
				КонецЕсли;
			//Иначе
			///	Форм.Пользователь=Текст;
		//	КонецЕсли;			
		
			
		КонецЕсли;	 
	КонецЕсли;
КонецПроцедуры
 

Функция РежимРаботы()
	Константы.РежимРаботыХамелеонЦРПТ.Получить()
КонецФункции

Функция Автомат(ТекущийПОльзователь)
	Возврат ТекущийПОльзователь.СоздаватьИОтправлятьВводВОборотПослеЭмитирования
Конецфункции
Функция ПроверкаЗаполнения_1_Заказ(Объект)
	ИспользоватьОтчетОбИспользовании=Истина;
	//РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ИспользоватьОтчетОбИспользованияДлМолока;
	Если ЗначениеЗАполнено(ОБъект.Ссылка) Тогда	
		
		Для Каждого Стр_1 Из ОБъект.Товары Цикл
			
			ГТИН=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Стр_1.GTIN.GTIN,14,"0");
			Попытка
				Если Число(ГТИН)=0 Тогда
					Сообщить("В документе "+Строка(ОБъект.Ссылка)+" не заполнено поле GTIN в продукции "+Строка(Стр_1.GTIN));
					Возврат ложь;
				КонецЕсли;
			Исключение
					Сообщить("В документе "+Строка(ОБъект.Ссылка)+" не заполнено поле GTIN в продукции "+Строка(Стр_1.GTIN));
				Возврат Ложь;
			КонецПопытки;
				
			
			Если Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Молоко Тогда
				Если не ЗначениеЗаполнено(Стр_1.НомерВСД) И ИспользоватьОтчетОбИспользовании=ЛОжь тогда
					
					Сообщить("В документе "+Строка(ОБъект.Ссылка)+" не заполнено поле номер ВСД в продукции "+Строка(Стр_1.GTIN));
					Возврат Ложь;
					
				Конецесли;
			КонецЕсли;
			
			
		Конеццикла;
		
		
		Возврат Объект.Ссылка.ПолучитьОбъект().ПроверитьЗаполнение()
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Процедура ПриИзмененияПользователя(Объект)
	ИспользоватьОтчетОбИспользовании=Истина;
	//РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ИспользоватьОтчетОбИспользованияДлМолока;
	
	
	
	если не значениезаполнено(объект.СпособВыпускаТоваров) тогда
		если объект.ТекущийПользователь.ТипВводаВОборот=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.МаркировкаОстатков Тогда
			ОБъект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.МаркировкаОстатков;
		ИначеЕсли Объект.ТекущийПользователь.ТипВводаВОборот=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотИмпорт Тогда
			Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ВвезенВРФ;
		Иначе
			Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ПроизведенВРФ
		КонецЕсли;
	КонецЕсли;
	Объект.Организация=Объект.ТекущийПользователь.Организация;
	
	Если Не ЗначениеЗаполнено(Объект.ШаблонКМ) Тогда
		Объект.ШаблонКМ=Объект.ТекущийПользователь.ШаблонКМПоУмолчанию;
	конецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ШаблонКМ_Табак) Тогда
		Объект.ШаблонКМ_Табак=Объект.ТекущийПользователь.ШаблонКМТабакПоУмолчанию;
	конецЕсли;
	
	
	АвтоСерийные=Объект.ТекущийПользователь.ФормироватьСерийныеНомераАвтоматически;
//	Если Не ЗначениеЗаполнено(Объект.СпособИзготовленияСИ) Тогда
//		Объект.СпособИзготовленияСИ=Объект.ТекущийПользователь.СпособИзготовленияСИ;
//	КонецЕсли;
НаСервереОпределеяемТипСпособа(Объект);
	Если Не ЗначениеЗАполнено(Объект.ТипОплаты) Тогда
		Объект.ТипОплаты=Объект.ТекущийПользователь.ТипОплаты;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ШаблонЭтикетки) Тогда
		Объект.ШаблонЭтикетки=Объект.ТекущийПользователь.ШаблонЭтикетки;
	КонецЕсли;
	Если Не ЗначениеЗАполнено(Объект.НомерДоговораСОператором) ТОгда
		Объект.НомерДоговораСОператором=Объект.ТекущийПользователь.НомерДоговораСОператором;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ДатаДоговораСОператором) Тогда
		ОБъект.ДатаДоговораСОператором=ОБъект.ТекущийПользователь.ДатаДоговораСОператором;
	КонецЕсли;
	Если не ЗначениеЗаполнено(Объект.ШаблонЭтикетки) тогда
		Объект.ШаблонЭтикетки=Объект.ТекущийПользователь.ШаблонЭтикетки;
	КонецЕсли;
	Для Каждого Стр Из Объект.Товары Цикл
		Если Не ЗначениеЗаполнено(Стр.СпособФормированияСН) Тогда
			Стр.СпособФормированияСН=ОБъект.ТекущийПользователь.СпособФормированияСН;
			
		КонецЕслИ;
		Если Не ЗначениеЗаполнено(Стр.ВидСИ) Тогда
			Стр.ВидСИ=ОБъект.ТекущийПользователь.ВидСИ;
			
		КонецЕслИ;
		Если Не ЗначениеЗаполнено(Стр.ВидМаркировки) Тогда
			Стр.ВидМаркировки=ОБъект.ТекущийПользователь.ВидМаркировки;
		КонецЕслИ;
	Конеццикла;
	Если Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Шины" Тогда
		Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Шины;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Молоко" Тогда
		Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Молоко;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Одежда" Тогда
		Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Одежда;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак" Тогда
		Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак" Тогда
		Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Фармацевтика" Тогда
		Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Фармацевтика;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Фото" Тогда
		Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Фото;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Парфюм" Тогда
		Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Парфюм;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Велосипеды" Тогда
		Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Велосипеды;
		
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Питьевая вода" Тогда
		Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.ПитьеваяВода;
		
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Кресла-коляски" Тогда
		Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.КреслаКоляски;
	ИначеЕсли Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Пиво" Тогда
		Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Пиво;
		
	Иначе
		Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь
	КонецЕсли;
	
	
	
КонецПроцедуры

Процедура ОтправитьВЦРПТЗаказНаКМНаСервере(Объект_1,Пользователь) Экспорт
	ИспользоватьОтчетОбИспользовании=Истина;
	//РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ИспользоватьОтчетОбИспользованияДлМолока;
	Объект=Объект_1.ПолучитьОбъект();
	Если Не ЗначениеЗаполнено(Объект.ТипПродукции) Тогда
			ПриИзмененияПользователя(Объект)
	КонецЕслИ;
	
	Объект.Записать();
	Если НЕ ПроверкаЗаполнения_1_Заказ(Объект) Тогда
		Сообщить("Не заполнены все поля в документе "+Строка(Объект.Ссылка));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект._Order_ID) Тогда
		Сообщить("Отправка не возможно. Документ "+Строка(Объект.Ссылка)+" уже отправлен в ЦРПТ");
		Возврат;
	КонецЕсли;
	

	
	Если 
	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен")
	
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован") Тогда
		
		Возврат
		
	КонецЕсли;
	
	Thumbprint_1=ПолучитьИзПользователя(Пользователь);	
		Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
			Возврат;
		КонецЕслИ;
	
		
		
	Если Объект.Товары.Количество()>10 Тогда
		Сообщить("При отправке в ЦРПТ максимальное количество строк 10. У вас "+
		Строка(объект.Товары.Количество())+". Отправка отменена для документа "+Строка(Объект.Ссылка));
		Возврат;
	КонецЕсли;
	
	Автомат=Автомат(Объект.ТекущийПользователь);
	Объект.ВвестиВОборотПослеЭмитирования=Автомат;
	
	Если Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Молоко") Тогда
		Объект.ИспользоватьОтчетОбИспользовании=ИспользоватьОтчетОбИспользовании
	КонецЕсли;
	
	Объект.Записать();
		
		ОтпрваитьШины(Thumbprint_1,ОБъект);
КонецПроцедуры



Процедура ЗагрузитьСБКонтурНаСервере(Пользователь,ЗаписыватьДанныеПриОтправкеЗаказа)  Экспорт
	// Вставить содержимое обработчика. ъ
	#Если ВебКлиент Тогда
		
	#Иначе
	Thumbprint_1=ПолучитьИзПользователя(Пользователь);
	
	Если Не ЗначениеЗаполнено(Thumbprint_1.ЛогинКонтур) ИЛИ 
		Не ЗначениеЗаполнено(Thumbprint_1.ПарольКонтур) Тогда
		Сообщить("Не заполнены данные по подключению к Диадок(логин+пароль)");
		Возврат;
	КонецЕсли;
	
			Request="";
			boxId="";
			
			BoxUrl="";
			PortalUserId="";
			VerificationToken="";
			Если НЕ ПодключениеПоКонтурДиадок(Request,Thumbprint_1,boxId,BoxUrl,PortalUserId,VerificationToken) Тогда
				Сообщить("Не удалось подключиться к Диадок");
				возврат;
			КонецЕсли;

			
			
			
			
	///ПОЛУЧАЕМ 		
	//https://diadoc.kontur.ru/api/boxes/36ff2fd2-6a90-45e5-b5bc-bec8aed29260/documents/pending-receipts?batchKey=0i%2F%2FNpBq5UW1vL7IrtKSYJJ5osuhjt9Js9XK6Nl8ibDtTWfwGDUQRI9kkZvmuPNb0i%2F%2FNpBq5UW1vL7IrtKSYAAPAAAAKQEI2E9lOD%2BEGazseTtZILJJlczVxmF40rInbLG6U2zhT71dSBC2S%2FCc&thumbprint=B2EAC24A4BF2E224C272CE23109203E696C68249
			
			
			
	ДатаК=КонецДня(Текущаядата());
	ДатаК1=ДатаК+1*24*60*60;
	ДатаН=НачалоДня(ДатаК-14*24*60*60);
	ДатаН1=ДатаН-1*24*60*60;
//	Request.Open("GET", BoxUrl + "/Folder/Inbox?DateRange.Custom.FromDate="+Формат(ДатаН,"ДФ=""гггг-ММ-дд""")+"&DateRange.Custom.ToDate="+Формат(ДатаК,"ДФ=""гггг-ММ-дд""")+"&DateRange.Mode=Custom&DateRangeKind=LetterDate&DateTimeRange.FromDateTime="+Формат(ДатаН1,"ДФ=""гггг-ММ-дд""")+"T21:00:00.000Z&DateTimeRange.ToDateTime="+Формат(ДатаК1,"ДФ=""гггг-ММ-дд""")+"T21:00:00.000Z&IsFilterActive=true&LetterCategory=Incoming&TimezoneOffsetInMinutes=180", 0);
	Request.Open("POST", BoxUrl + "/ExportDocumentList/PutExportTask?IsFilterActive=true&Mode=Default&LetterCategory=Incoming&IncludeChildDepartments=false&DocumentType=Any&DocumentStatus=Any&DateRangeKind=LetterDate&DateTimeRange.FromDateTime="+Формат(ДатаН1,"ДФ=""гггг-ММ-дд""")+"T21:00:00.000Z&DateTimeRange.ToDateTime="+Формат(ДатаК1,"ДФ=""гггг-ММ-дд""")+"T21:00:00.000Z&DateTimeRange.IsEmpty=false&TimezoneOffsetInMinutes=240&DateRange.Mode=Custom&DateRange.Custom.FromDate="+Формат(ДатаН,"ДФ=""гггг-ММ-дд""")+"&DateRange.Custom.ToDate="+Формат(ДатаК,"ДФ=""гггг-ММ-дд""")+"&IsEmpty=false&NextPage=false&PrevPage=false&ShowAll=false&PageNumber=0", 0);
	//Request.SetRequestHeader("Content-Length", Формат(StrLen(Body),"ЧГ="));
	Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
	Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
	Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");
	Request.Send();
	Request.WaitForResponse();
	
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Request.ResponseText);
	
	Задача=NNN.TaskId;
	
	Тысячу=0;
	NNN_1=Неопределено;
	Пока Истина Цикл
		
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(2);
		TimeStamp = Формат(1000 * (CurrentDate() - Date(1970,1,1) - 3 * 3600),"ЧГ=");

		Request.Open("GET", BoxUrl + "/ExportDocumentList/GetTaskStatus?taskId="+Задача+"&_="+TimeStamp, 0);
		//Request.SetRequestHeader("Content-Length", Формат(StrLen(Body),"ЧГ="));
		//Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
		//Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
		//Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");
		Request.Send();
		Request.WaitForResponse();
		
		NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Request.ResponseText);
		Тысячу=Тысячу+1;
		Если NNN_1.status="Success"
			ИЛИ      Тысячу>1000
			Тогда
			
			Прервать;
		КонецЕслИ;
		
		
		
	Конеццикла;
	Если   ЗначениеЗаполнено(NNN_1) И NNN_1.status="Success" Тогда
		
		Request.Open("GET",  "https://diadoc.kontur.ru/ShelfDownload?nameOnShelf=__userId__/docList/"+Задача+
		"&originalFileName="+КодСтр(NNN.ResultFileName), 0);
		
		
		//Request.SetRequestHeader("Content-Length", Формат(StrLen(Body),"ЧГ="));
		//Request.SetRequestHeader("Content-Type", "application/json; charset=UTF-8");
		//Request.SetRequestHeader("X-Request-Verification-Token", VerificationToken);
		//Request.SetRequestHeader("X-Requested-With", "XMLHttpRequest");
		Request.Send();
		Request.WaitForResponse();
		текст=Новый ТекстовыйДокумент;
		текст.ДобавитьСтроку(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Request.ResponseText,"ISO-8859-1")));
		Если Текст.КоличествоСтрок()<=1 Тогда
			Возврат
		КонецЕсли;
		Для Сч=2 По Текст.КоличествоСтрок() Цикл
			Строк=Текст.ПолучитьСтроку(Сч);
			Если Не ЗначениеЗаполнено(Строк) Тогда
				Продолжить;
			КонецЕсли;
			ИсходнаяСтрока=Строк;
			
			мПодстроки = Новый Массив;
			//определяем позицию первого разделителя
			позРазделителя = Найти(ИсходнаяСтрока, ";");
			Пока позРазделителя > 0 Цикл
				//добавляем первую подстроку
				мПодстроки.Добавить(Лев(ИсходнаяСтрока, позРазделителя - 1));
				//обрезаем исходную строку до места окончания разделителя
				ИсходнаяСтрока = Сред(ИсходнаяСтрока, позРазделителя + 1);
				//обновляем позицию разделителя
				позРазделителя = Найти(ИсходнаяСтрока, ";");
			КонецЦикла;
			//оставшуюся строку тоже добавляем в массив
			мПодстроки.Добавить(ИсходнаяСтрока);
			//МассивМ=СтрРазделить(Строк,";");
			Сайт=мПодстроки[19];
			
			letterid=Сред(Сайт,Найти(Сайт,"letterId=")+9);
			letterid=Сред(letterid,1,Найти(letterid,"&")-1);
			entityid=Сред(Сайт,Найти(Сайт,"documentId=")+11);
			//entityid=Сред(entityid,1,найти(entityid);
			Статус=мПодстроки[13];
			Request.Open("GET", BoxUrl+"/Download/Attachment?letterId="+letterid+"&attachmentId="+entityid);
			Request.SetRequestHeader("Content-Type", "application/json;charset=UTF-8");
			Request.Send();
			Request.WaitForResponse();
			
			
			 //Возврат;
			
			//Статус=СокрЛП(Anchor.РодительскийУзел.СледующийСоседний.СледующийСоседний.ТекстовоеСодержимое);
			
			СообщениеОбОшибке="";
			Попытка
							РеквизитыЭлектр=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.РеквизитыЭлектронногоДокумента(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Request.ResponseText,"ISO-8859-1"),СообщениеОбОшибке);
						Исключение
							Продолжить;
						КонецПопытки;
							Если РеквизитыЭлектр.Загружать=Ложь Тогда
								Продолжить;
							КонецЕсли;
							Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
								Сообщить("Не удалось загрузить файл по документу "+Строка(letterid)+" Ошибка: "+СообщениеОбОшибке);
								ОшибкаЗагрузки=Истина;
								Продолжить;
							КонецЕсли;
							//РеквизитыЭлектр.Вставить("ТекстФайла",);
							
							РеквизитыЭлектр.ВставитЬ("ИдентификаторДокументооборота",letterid);
							РеквизитыЭлектр.ВставитЬ("ИдСамогоДокумента",entityid);
							МассивУп=Новый Массив;
							
							АдресРеквизитов=Новый Структура;
							//РеквизитыЭлектронногоДокумента.Вставить("ИдентификаторДокументооборота", ДанныеДокументооборота.ИдентификаторДокументооборота);
							АдресРеквизитов.Вставить("Статус",ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ВернутьСтатусДокументаКонтВЕБ(Статус));
							ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ЗагрузкаПриемкиИзXML(РеквизитыЭлектр,МассивУп,ЗаписыватьДанныеПриОтправкеЗаказа,Пользователь,АдресРеквизитов,ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОКонтур"),ОшибкаЗагрузки,Истина);
							     
			
		Конеццикла;
		
		
		
	КонецЕсли;
	
	
	
	Возврат;
	Reader = New HTMLReader;
	Reader.SetString(Request.ResponseText);
	
	Builder = Новый DOMBuilder;
    DocHTML = Builder.Read(Reader);
	
	
	Страница=0;	
	letterid="";
	documentid="";
	previndexkey="";
	nextindexkey="";
	
	Пока Истина Цикл
	//Inbox.Clear();
	Были=ложь;
	For each Anchor In DocHTML.Anchors Do
		If Anchor.Title = "" Then
			Continue;
		EndIf;
			Doc = New Structure;
			For each Attr In Anchor.Attributes Do
				If Find(Attr.ИмяУзла, "-") = 0 Then
					Doc.Insert(Attr.ИмяУзла, Attr.Value);
				EndIf;
			EndDo;
			Doc.Insert("entityid", Doc.documentid);
			
			Если Были=Ложь Тогда
				letterid=Doc.letterid;
				documentid=Doc.documentid;
				Если ЗначениеЗаполнено(Doc.prevIndexKey) Тогда
					previndexkey=Doc.prevIndexKey;
				Иначе
					previndexkey=Doc.nextindexkey;
				КонецЕсли;
				nextindexkey=Doc.nextindexkey;
								
			КонецЕсли;
		      Были=Истина;
			
			
			
			Request.Open("GET", BoxUrl+"/Download/Attachment?letterId="+Doc.letterid+"&attachmentId="+Doc.entityid);
			Request.SetRequestHeader("Content-Type", "application/json;charset=UTF-8");
			Request.Send();
			Request.WaitForResponse();
			
			Статус=СокрЛП(Anchor.РодительскийУзел.СледующийСоседний.СледующийСоседний.ТекстовоеСодержимое);
			
			СообщениеОбОшибке="";
			Попытка
							РеквизитыЭлектр=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.РеквизитыЭлектронногоДокумента(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Request.ResponseText,"ISO-8859-1"),СообщениеОбОшибке);
						Исключение
							Продолжить;
						КонецПопытки;
							Если РеквизитыЭлектр.Загружать=Ложь Тогда
								Продолжить;
							КонецЕсли;
							Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
								Сообщить("Не удалось загрузить файл по документу "+Строка(Doc.letterid)+" Ошибка: "+СообщениеОбОшибке);
								ОшибкаЗагрузки=Истина;
								Продолжить;
							КонецЕсли;
							//РеквизитыЭлектр.Вставить("ТекстФайла",);
							
							РеквизитыЭлектр.ВставитЬ("ИдентификаторДокументооборота",Doc.letterid);
							РеквизитыЭлектр.ВставитЬ("ИдСамогоДокумента",Doc.entityid);
							МассивУп=Новый Массив;
							
							АдресРеквизитов=Новый Структура;
							//РеквизитыЭлектронногоДокумента.Вставить("ИдентификаторДокументооборота", ДанныеДокументооборота.ИдентификаторДокументооборота);
							АдресРеквизитов.Вставить("Статус",ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ВернутьСтатусДокументаКонтВЕБ(Статус));
							ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ЗагрузкаПриемкиИзXML(РеквизитыЭлектр,МассивУп,ЗаписыватьДанныеПриОтправкеЗаказа,Пользователь,АдресРеквизитов,ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОКонтур"),ОшибкаЗагрузки,Истина);
							           	
			
			
		
	//	NewRow = Inbox.Add();
	//	FillPropertyValues(NewRow, Anchor, , "Attributes");
	//	For each Attr In Anchor.Attributes Do
	//		If Attr.Name = "needsfnsregmessage" Then
	//			AttrValue = Attr.Value;
	//		ElsIf Attr.Value = "true" Then
	//			AttrValue = True;
	//		ElsIf Attr.Value = "false" Then
	//			AttrValue = False;
	//		Else
	//			AttrValue = Attr.Value;
	//		EndIf;
	//		NewRow.Attributes.Add(AttrValue, Attr.Name);
	//	EndDo;
EndDo;
Если Были=Ложь тогда
	Прервать;
КонецЕсли;

Страница=Страница+1;

	

	Request.Open("GET", BoxUrl + "/Folder/Inbox?DateRange.Custom.FromDate="+Формат(ДатаН,"ДФ=""гггг-ММ-дд""")+"&DateRange.Custom.ToDate="+Формат(ДатаК,"ДФ=""гггг-ММ-дд""")+"&DateRange.Mode=Custom&DateRangeKind=LetterDate&DateTimeRange.FromDateTime="+Формат(ДатаН1,"ДФ=""гггг-ММ-дд""")+"T21:00:00.000Z&DateTimeRange.ToDateTime="+Формат(ДатаК1,"ДФ=""гггг-ММ-дд""")+"T21:00:00.000Z&IsFilterActive=true&LetterCategory=Incoming&TimezoneOffsetInMinutes=180"+
	"&NextPage=true&ShowAll=true&Count=50&PageNumber="+xmlString(Страница)+"&FirstDocumentkey.letterid="+letterid+
	"&FirstDocumentKey.documentId="+documentid+"&FirstDocumentKey.indexKey"+previndexkey+"&LastDocumentkey.letterid="+letterid+
	"&LastDocumentKey.documentId="+documentid+"&LastDocumentKey.indexKey"+nextindexkey, 0);
	Request.Send();
	Request.WaitForResponse();
	
	Reader = New HTMLReader;
	Reader.SetString(Request.ResponseText);
	
	Builder = Новый DOMBuilder;
    DocHTML = Builder.Read(Reader);

//Запрос	GET /05c3b28f-9f9b-42b1-8fed-9908d6e111df/Folder/Inbox?IsFilterActive=true&Mode=Default&LetterCategory=Incoming&IncludeChildDepartments=false&DocumentType=Any&DocumentStatus=Any&DateRangeKind=LetterDate&DateTimeRange.FromDateTime=2020-08-30T20%3A00%3A00Z&DateTimeRange.ToDateTime=2020-09-16T20%3A00%3A00Z&DateTimeRange.IsEmpty=false&FirstDocumentKey.letterId=abbd8444-c019-481c-9a33-bad85993338e&FirstDocumentKey.documentId=7cdcdfbc-6bf8-4a79-a10d-fe781de2f80d&LastDocumentKey.letterId=abbd8444-c019-481c-9a33-bad85993338e&LastDocumentKey.documentId=7cdcdfbc-6bf8-4a79-a10d-fe781de2f80d&LastDocumentKey.indexKey=eyJRdWVyeUhhc2giOiJaQ0RBaVN3dTJpYWV3WFJTNjFuRGFBPT0iLCJJbmRleEtleSI6Imo3TERCWnVmc1VLUDdaa0kxdUVSMzVKNW9zdWhqdDlKczlYSzZObDhpYkR0VFdmd0dEVVFSSTlra1p2bXVQTmJqN0xEQlp1ZnNVS1A3WmtJMXVFUjN3QS9BQUFBS1FFSTJGWmJ5cE1yUDdJTmtaRFRtMTVHaW9aaVZZWDNhZlpDSDBuclRhMUdRbzlKMlJ6TklNQkgiLCJQYWdlRGlyZWN0aW9uIjoxfQ%3D%3D&TimezoneOffsetInMinutes=240&DateRange.Mode=Custom&DateRange.Custom.FromDate=2020-08-31&DateRange.Custom.ToDate=2020-09-16&IsEmpty=false&NextPage=true&ShowAll=true&Count=50&PageNumber=1 HTTP/1.1


	Конеццикла;
	
	#КонецЕсли
	
	//Возврат;
	
	//РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.
КонецПроцедуры

Процедура ЗагрузитьСБЭДОнаСервере(Пользователь,ЗаписыватьДанныеПриОтправкеЗаказа)  Экспорт
	// Вставить содержимое обработчика.
Thumbprint_1=ПолучитьИзПользователя(Пользователь);	
	
	СайтДляПодключенияПоТакскму=Thumbprint_1.СБ;
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
		Прокси=Новый ИнтернетПрокси;
		Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
		HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	Иначе
				
		HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	КонецЕсли;
	
	СерийныйНомер="";
	ДанныеАгрегации="";
	ОбъектПлагин=Неопределено;
	
	Если Thumbprint_1.ТипПодключения=ПредопределенноеЗначение("Перечисление.ТипыПодключенияКЭДОСБ_ХамелеонЦРПТ.SDK") Тогда
		//Маркер=РаботаСЭДО_На_Клиенте_ХамелеонЦРПТ.ПодключитьсяКЭДОСб_SDK(Thumbprint_1,ПолучитьИдЭд(Пользователь),HTTPСервисЗапрос_ТХЦ,СерийныйНомер,ДанныеАгрегации,ОбъектПлагин);
		Маркер=ПодключитьсяКЭДОСб_SDK(Thumbprint_1,ПолучитьИдЭд(Пользователь),HTTPСервисЗапрос_ТХЦ,СерийныйНомер,ДанныеАгрегации,ОбъектПлагин,СайтДляПодключенияПоТакскму);
		
	Иначе
		Маркер=ПодключитьсяКЭДОСб_Новый(Thumbprint_1,ПолучитьИдЭд(Пользователь),HTTPСервисЗапрос_ТХЦ,СерийныйНомер,ДанныеАгрегации,ОбъектПлагин);
	КонецЕсли;
	
	
	
	//Возврат;
	
	Если  ЗначениеЗаполнено(Маркер) тогда
		
		
		
		РазмерСтраницы=500;
		Страница=0;
		//Тотал=1;
		Пока Истина Цикл
		
		
			ПолучитьСписокНакладных=СписокВходящихДокументовсб(Thumbprint_1,Маркер,Страница,РазмерСтраницы);
			Если  ПолучитьСписокНакладных<>Неопределено тогда
				
				СписокДляЗагрузкиВПрограмму=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.НаСервереОпределимЧтоНамГрузитьСБ(ПолучитьСписокНакладных);
				
				Для Каждого Стр_12 Из СписокДляЗагрузкиВПрограмму Цикл
					Вложение=Неопределено;
					Если НЕ Стр_12.Свойство("Вложение",Вложение) Тогда
						Продолжить;
					КонецЕслИ;
					
					Для Каждого Стр_11 Из Вложение Цикл
						
						АдресЗапроса=СтрЗаменить(Стр_11.Файл.Ссылка,"https://"+СайтДляПодключенияПоТакскму+"","");
						HTTPЗапрос=Новый HTTPЗапрос(АдресЗапроса);

						HTTPЗапрос.Заголовки.Вставить("X-SBISSessionID",	Маркер );
						HTTPЗапрос.Заголовки.Вставить("Content-Type",	"application/json; charset=utf-8");
						Ответ=HTTPСервисЗапрос_ТХЦ.Получить(HTTPЗапрос);
						Если Ответ.КодСостояния=200 Тогда
												
								//Попытка
								//	ДанныеДокументооборота = ДанныеДокументооборота(ТекущаяСтрока.ИдентификаторДокументооборота,HTTPСервисЗапрос_ТХЦ,Маркер );
								//Исключение
								//	//ЕстьОшибки = Истина;
								//	Продолжить;
								//КонецПопытки;
								//Если ДанныеДокументооборота =Неопределено Тогда
								//	Продолжить;
								//КонецЕсли;
								
								
							СообщениеОбОшибке="";
							Попытка
								РеквизитыЭлектр=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.РеквизитыЭлектронногоДокумента(Ответ.ПолучитьТелоКакДвоичныеДанные(),СообщениеОбОшибке);
							Исключение
								Продолжить;
							КонецПопытки;
							Если РеквизитыЭлектр.Загружать=Ложь Тогда
								Продолжить;
							КонецЕсли;
							Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
								Сообщить("Не удалось загрузить файл по документу "+Строка(Стр_12.Идентификатор)+" Ошибка: "+СообщениеОбОшибке);
								ОшибкаЗагрузки=Истина;
								Продолжить;
							КонецЕсли;
							//РеквизитыЭлектр.Вставить("ТекстФайла",);
							
							РеквизитыЭлектр.ВставитЬ("ИдентификаторДокументооборота",Стр_12.Идентификатор);
							МассивУп=Новый Массив;
							
							АдресРеквизитов=Новый Структура;
							//РеквизитыЭлектронногоДокумента.Вставить("ИдентификаторДокументооборота", ДанныеДокументооборота.ИдентификаторДокументооборота);
							АдресРеквизитов.Вставить("Статус",ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ВернутьСтатусДокументаСБ(Стр_12.Состояние.Код));
							ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ЗагрузкаПриемкиИзXML(РеквизитыЭлектр,МассивУп,ЗаписыватьДанныеПриОтправкеЗаказа,Пользователь,АдресРеквизитов,ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОТензор"),ОшибкаЗагрузки,Истина);
							           	
							
						
						
					КонецЕсли;
					Конеццикла;
				Конеццикла;
				
				Если ПолучитьСписокНакладных.result.Навигация.ЕстьЕще="Нет" Тогда
					Прервать;
				Иначе
					
					Страница=Страница+1;
				КонецЕсли;
			Иначе
//				Элементы.Приемкасписок.Обновить();
				Возврат;
			//ОбработатьПолученныеНаСервере(ПолучитьСписокНакладных);			
			//ЗагрузитьПолученные(HTTPСервисЗапрос_ТХЦ,Маркер);
			//ПолучитьПричинуОтказа=Новый Массив;
			
			//ОбработатьСтатусыНаСервереПоНакладным_Приемка();
			
			КонецЕсли;
		Конеццикла;
			//Запрос.УстановитьТелоИзДвоичныхДанных(ПакетЭДО);
		//Попытка 
			//Ответ = HTTPСервисЗапрос_ТХЦ.Получить(Запрос);
		//Исключение
			
			//Продолжить;
		//КонецПопытки;		
		
	КонецЕсли;
	// Вставить содержимое обработчика.
	
//				Элементы.Приемкасписок.Обновить();
	
КонецПроцедуры



Процедура ЗагрукаПриемкиТХЦНаСервере(Пользователь) Экспорт
	// Вставить содержимое обработчика.
Thumbprint_1=ПолучитьИзПользователя(Пользователь);	
	
	СайтДляПодключенияПоТакскму=Thumbprint_1.ТХЦ;
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
		Прокси=Новый ИнтернетПрокси;
		Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
		HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	Иначе
				
		HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	КонецЕсли;
	
	СерийныйНомер="";
	Маркер=ПодключитьсяКЭДОТХЦ(Thumbprint_1,ПолучитьИдЭд(Пользователь),HTTPСервисЗапрос_ТХЦ,СерийныйНомер);
	Если  ЗначениеЗаполнено(Маркер) тогда
		
	//	Если Текущаядата()-ВремяAutoSendReceive>60 Тогда
			
			Компонента = Новый COMОбъект("CryptoAX.Encryptor");
			УникальныйИ="";
			ТелоПолучитьAutoSendReceive=ТелоПолучитьAutoSendReceive(Thumbprint_1,СерийныйНомер,УникальныйИ);
			
			//ЗапросСпискаДокументов = Новый HTTPЗапрос;
			АдресРесурса = "API/AutoSendReceive";
			
			Запрос = Новый HTTPЗапрос;
			Запрос.АдресРесурса = АдресРесурса;
			Запрос.Заголовки.Вставить("Integrator-Id", "Kartoteka_9AFE5408-C930-47FA-9CE4-FAE615EED09E");
			Запрос.Заголовки.Вставить("Assistant-Key", Маркер);
			Запрос.Заголовки.Вставить("API-Version", "1.8.0");
			Запрос.Заголовки.Вставить("Content-Type", "text/xml;charset=UTF-8");
			Запрос.УстановитьТелоИзСтроки(ТелоПолучитьAutoSendReceive);
			Ответ = HTTPСервисЗапрос_ТХЦ.ОтправитьДляОбработки(Запрос);
			ОтветAutoSendRecieve=ПолучитьОтветнасервереПОAutoSendReceive(Ответ.ПолучитьТелоКакСтроку());
			
			Если ОтветAutoSendRecieve <> Неопределено Тогда
				Для Каждого ДанныеФайла Из ОтветAutoSendRecieve Цикл
				//	Если Не ПустаяСтрока(ДанныеФайла.ДанныеФайлаСтрокой) Тогда
						Если ПустаяСтрока(ДанныеФайла.ДанныеФайлаСтрокой) Тогда
							ДанныеПодписиСтрокой=Неопределено;
						Иначе
							//ДанныеПодписиСтрокой=Компонента.MrSignByHash(
							//base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ДанныеФайла.ДанныеФайлаСтрокой,КодировкаТекста.ANSI,Ложь)),
							//Thumbprint_1.Thumbprint_1);
							ДанныеПодписиСтрокой=Компонента.MrSignByHash(
							ДанныеФайла.ДанныеФайлаСтрокой,
							Thumbprint_1.Thumbprint_1);
							
						КонецЕсли;
						
						//ДанныеПодписиСтрокой = БиблиотекаКриптографии().SignHash(ДанныеФайла.ДанныеФайлаСтрокой, 
						//ПараметрыСоединения.ОтпечатокСертификата, ПараметрыСоединения.ПарольСертификата);
						
						ТекстКриптооперации = ЗаполнитьТекстКриптооперацииНаСервере(Маркер, ДанныеФайла, ДанныеПодписиСтрокой);
						АдресРесурса = "API/AutoSendReceive";
						
						Запрос = Новый HTTPЗапрос;
						Запрос.АдресРесурса = АдресРесурса;
						Запрос.Заголовки.Вставить("Integrator-Id", "Kartoteka_9AFE5408-C930-47FA-9CE4-FAE615EED09E");
						Запрос.Заголовки.Вставить("Assistant-Key", Маркер);
						Запрос.Заголовки.Вставить("API-Version", "1.8.0");
						Запрос.Заголовки.Вставить("Content-Type", "text/xml;charset=UTF-8");
						Запрос.УстановитьТелоИзСтроки(ТекстКриптооперации);
						Ответ = HTTPСервисЗапрос_ТХЦ.ОтправитьДляОбработки(Запрос);
						Результ=ПолучитьОтветнасервереПОAutoSendReceive(Ответ.ПолучитьТелоКакСтроку());
						
						
						
						//Результат = ОтправитьВДоклайнзAutoSendRecieve("API/AutoSendReceive", ПараметрыСоединения, ТекстКриптооперации);
					//КонецЕсли;
				КонецЦикла; 
			КонецЕсли;
			ВремяAutoSendReceive=Текущаядата();
		//КонецЕсли;	
			
		
		ПолучитьСписокНакладных=СписокВходящихДокументов(Thumbprint_1,Маркер);
		Если  ПолучитьСписокНакладных.Количество()>0 Тогда
			
			
			ПолученныеСтраница=Новый ТаблицаЗначений;
			ПолученныеСтраница.Колонки.Добавить("ИдентификаторДокументооборота");
			ПолученныеСтраница.Колонки.Добавить("Документ");
			ПолученныеСтраница.Колонки.Добавить("Номер");
			ПолученныеСтраница.Колонки.Добавить("Дата");
			ПолученныеСтраница.Колонки.Добавить("ВидДокумента");
			ПолученныеСтраница.Колонки.Добавить("СуммаДокумента");
			ПолученныеСтраница.Колонки.Добавить("Контрагент");
			ПолученныеСтраница.Колонки.Добавить("Статус");
			ПолученныеСтраница.Колонки.Добавить("Выбран");
			ПолученныеСтраница.Колонки.Добавить("ДатаЭД");
			ПолученныеСтраница.Колонки.Добавить("PackageChainId");
			ПолученныеСтраница.Колонки.Добавить("НомерСтроки");
			ПолученныеСтраница.Колонки.Добавить("ФункцияДокумента");
			ОбработатьПолученныеНаСервере(ПолучитьСписокНакладных,ПолученныеСтраница);			
			ЗагрузитьПолученные(HTTPСервисЗапрос_ТХЦ,Маркер,ПолученныеСтраница,Пользователь);
			//ПолучитьПричинуОтказа=Новый Массив;
			
			//ОбработатьСтатусыНаСервереПоНакладным_Приемка();
			
		КонецЕсли;
			//Запрос.УстановитьТелоИзДвоичныхДанных(ПакетЭДО);
		//Попытка 
			//Ответ = HTTPСервисЗапрос_ТХЦ.Получить(Запрос);
		//Исключение
			
			//Продолжить;
		//КонецПопытки;		
		
	КонецЕсли;
		
	
КонецПроцедуры

Функция ЗагрузкаНаСервереИзЦРПТПриемка(Пользователь,СколькоНаСтранице=100,ЗаписыватьДанныеПриОтправкеЗаказа=Ложь) Экспорт
	Thumbprint_1=ПолучитьИзПользователя(Пользователь);
	
	
СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
							СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
									СерийныйНомер=СтруктураНастроек.СерийныйНомер;
							
								Если Не ЗначениеЗаполнено(СРегистра)  Тогда
									СРегистра=Получение_Токена(Thumbprint_1,СерийныйНомер);	
								Иначе
								   
										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
											Прокси=Новый ИнтернетПрокси;
											Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										Иначе
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										КонецЕсли;
										
										HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
										HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
										HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
										//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
										///Константин           
										Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
										//Текст1=Ответ.ПолучитьТелоКакСтроку();
										Если Ответ.КодСостояния<>200 Тогда
											СРегистра=Получение_Токена(Thumbprint_1,СерийныйНомер);	
										КонецЕсли;
											
								КонецЕсли;
							
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		Сообщить("Не удалось получить токен по организации");
		Возврат ложь;
	Конецесли;

Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			
 			что=Thumbprint_1.что;
		
		
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/listV2?inputFormat=true&documentType=LP_SHIP_GOODS_CSV&documentType=LP_SHIP_GOODS_XML&documentType=LP_SHIP_GOODS&limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=docDate&pageDir=NEXT&pg="+Что);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
							
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				//ЧтениеJSON = Новый ЧтениеJSON;
			Страница=0;
			Тотал=1;
			Пока Страница*СколькоНаСтранице<=Тотал Цикл
 					страница=Страница+1;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Тотал=NNN.total;
				did="";
				docDate="";
				Для Каждого Стр Из  NNN.results Цикл
					did=Стр.number;
					docDate=Стр.docDate;
					Если Стр.input=true 
						И Найти(Стр.type,"LP_SHIP_GOODS")=1
						Тогда
						
						
 			что=Thumbprint_1.что;
	
								

						HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.number+"/body?pg="+что+"&limit=2147483647");
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
						//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
						///Константин           
						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
						Текст1=Ответ.ПолучитьТелоКакСтроку();
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						МассивУп=Новый Массив;
						
						ЗаполненаТабличнаяЧастьПриемки=Ложь;
						ДокумПриемки=ОбновитьСтатусДокумента_Приемка(NNN_1,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа,,,,,,ЗаполненаТабличнаяЧастьПриемки);	
					КонецЕсли;
				Конеццикла;
				
				Если Страница*СколькоНаСтранице>Тотал Тогда
					Прервать;
				КонецЕсли;
				
 			что=Thumbprint_1.что;
	
				
				 HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/listV2?inputFormat=true&documentType=LP_SHIP_GOODS_CSV&documentType=LP_SHIP_GOODS_XML&documentType=LP_SHIP_GOODS&limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=docDate&did="+did+"&orderedColumnValue="+docDate+"&pageDir=NEXT&pg="+Что);
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();  
	Если Ответ.КодСостояния<>202 И Ответ.КодСостояния<>200  Тогда
		//	Если УжеОтправили=Истина Тогда
		//		Сообщить("Не удалось загрузить приходы с ЦРПТ, отсутствует доступ.");
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		//		Возврат Истина;
		//	Иначе
				Возврат Ложь;
		//	КонецЕсли;
	КонецЕсли;
	Конеццикла;	
				

				
				
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			//Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
			//Иначе
				Возврат Ложь;
			//КонецЕсли
	Иначе
					Попытка
						//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							
						Исключение
							Попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	
	Возврат Истина
КонецФункции


Процедура ЗагрузкаУПДЭдоЛайтНаСервере(Пользователь,ЗаписыватьДанныеПриОтправкеЗаказа=Ложь)    Экспорт
	СколькоНаСтранице=10;
	Thumbprint_1=ПолучитьИзПользователя(Пользователь); 

СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
							СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
									СерийныйНомер=СтруктураНастроек.СерийныйНомер;
							
								Если Не ЗначениеЗаполнено(СРегистра)  Тогда
									СРегистра=Получение_Токена(Thumbprint_1,СерийныйНомер);	
								Иначе
								   
										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
											Прокси=Новый ИнтернетПрокси;
											Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										Иначе
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										КонецЕсли;
										
										HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
										HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
										HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
										//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
										///Константин           
										Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
										//Текст1=Ответ.ПолучитьТелоКакСтроку();
										Если Ответ.КодСостояния<>200 Тогда
											СРегистра=Получение_Токена(Thumbprint_1,СерийныйНомер);	
										КонецЕсли;
											
								КонецЕсли;
							
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		Сообщить("Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;                                                       
			
//	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/listV2?inputFormat=true&documentType=UNIVERSAL_TRANSFER_DOCUMENT&limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=docDate&pageDir=NEXT");


	HTTPЗапрос=Новый HTTPЗапрос("edo-api/incoming-documents?limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&offset=0&sortBy=created_at&asc=false&folder=0");
	
	
	
	
	
//	HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
	HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
	HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
	HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
	HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
	//HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ +"/documents/incoming/list");
	
	
	
	HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");
	
	//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
	HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
	HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
	
	
	
//	Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
	Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
	"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


	HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	
	//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
							
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				//ЧтениеJSON = Новый ЧтениеJSON;
			Страница=0;
			Тотал=1;
			Пока Страница*СколькоНаСтранице<=Тотал Цикл
				
 					страница=Страница+1;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Тотал=NNN.count;
				
				Если СколькоНаСтранице>NNN.items.Количество() Тогда
					 Тотал=NNN.items.Количество()
				КонецЕсли;
				
				did="";
				docDate="";
				Для Каждого Стр Из  NNN.items Цикл
					did=Стр.id;
					//docDate=Стр.docDate;
					////Если Стр.input=true 
					//	И Найти(Стр.type,"LP_SHIP_GOODS")=1
					//	Тогда
					
					ПолучитьИнформациюОбУПДПриемка(
					Стр.id,ЗаписыватьДанныеПриОтправкеЗаказа,Пользователь,HTTPСервисЗапрос,СерийныйНомер,СРегистра,Thumbprint_1);
//						
//						HTTPЗапрос=Новый HTTPЗапрос("edo-api/incoming-documents/"+Стр.id);
//	
//						
//						
//					//	HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
//						HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
//						HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
//						HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
//						HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
//						HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ +"/documents/incoming/list");
//						
//						
//						
//						HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");
//						
//						//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
//						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
//						HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
//						HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
//						HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
//						
//						
//						
//					//	Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
//						Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
//						"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


//						HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
//						
//						///Константин           
//						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
//						Текст1=Ответ.ПолучитьТелоКакСтроку();
//						//ЧтениеJSON = Новый ЧтениеJSON;
//						//ЧтениеJSON.УстановитьСтроку(Текст1);
//						NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
//						МассивУп=Новый Массив;
//						
//						МассивКМ=Новый Массив;
//						ДокумПриемки=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусДокумента_Приемка_УПД(NNN_1,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа,,,,МассивКМ,ЗагрузатьНаименованиеПриПриемке);	
//						Если МассивКМ.Количество()>0 Тогда
//							
//							СписокОбнТовара=Новый Массив;
//							
//							ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьИнформациюНаСервереДЛяПриемки(Thumbprint_1,МассивКМ,СписокОбнТовара);
//							
//									Для Каждого Стр_1 Из СписокОбнТовара Цикл
//										ОповеститьОбИзменении(Стр_1);
//									КонецЦиклА;
//									МассивКМ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСледющийМассив(ДокумПриемки);
//									СписокОбнТовара.Очистить();

//										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
//														Прокси_20=Новый ИнтернетПрокси;
//														Прокси_20.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
//													
//														HTTPСервисЗапрос_20=Новый HTTPСоединение("xn--80aqu.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,Прокси_20,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
//													Иначе
//														HTTPСервисЗапрос_20=Новый HTTPСоединение("xn--80aqu.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
//													КонецЕсли;
//													
//												МассивСтруктур=Новый Массив;	
//										Для Каждого Стр_1 из МассивКМ Цикл

//											GTINНаименованиеТовара=Сред(Стр_1.Марка,3,14);
//											HTTPЗапрос_20=Новый HTTPЗапрос("v3/product?gtin="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ДополнитьСтроку(Формат(GTINНаименованиеТовара,"ЧГ="))+"&apikey=l10k3203w65mbngr");
//											HTTPЗапрос_20.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded; charset=UTF-8");
//											//HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
//											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
//											///Константин           
//											//Тело="task=getItemByGTIN&lng=ru&keyValue="+ДополнитьСтроку(Формат(Стр_1.GTINНаименованиеТовара,"ЧГ="));
//									//		HTTPЗапрос.УстановитьТелоИзСтроки();
//											//Тело);
//											Ответ_20=HTTPСервисЗапрос_20.ОтправитьДляОбработки(HTTPЗапрос_20);
//												Если Ответ_20.КодСостояния=200 Тогда
//									Текст1_20=Ответ_20.ПолучитьТелоКакСтроку();
//												NNN_20=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1_20);//ПрочитатьJSON(ЧтениеJSON);
//											Название=неопределено;
//											Попытка
//												Название=NNN_20.result[0].good_name; 
//											Исключение
//											КонецПопытки;
//											Если Название=Неопределено Тогда
//												
//									//			http://gepir.gs1ru.org/GEPIR40/index.jsp?p=gtin&lng=ru
//											КонецЕсли;
//											Если ЗначениеЗаполнено(Название) Тогда
//												МассивСтруктур.Добавить(Новый Структура("gtin,Название",GTINНаименованиеТовара,Название));
//												
//											КонецЕсли;
//											КонецЕсли;
//										Конеццикла;
//										
//										МММ=Новый Массив;
//										Если МассивСтруктур.Количество()>0 тогда
//											МММ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагрузитьПродукции(МассивСтруктур);
//											
//										КонецЕсли;
//										Для Каждого Стр_1 Из МММ Цикл
//											ОповеститьОбИзменении(Стр_1);
//										КонецЦиклА;
//										
//										МассивКМ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСледющийМассив(ДокумПриемки);
//										СписокОбнТовара.Очистить();
//										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
//												Прокси_20=Новый ИнтернетПрокси;
//															Прокси_20.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
//														
//															HTTPСервисЗапрос_20=Новый HTTPСоединение("gepir.gs1ru.org",,,,Прокси_20,Thumbprint_1.Таймаут);
//														Иначе
//															HTTPСервисЗапрос_20=Новый HTTPСоединение("gepir.gs1ru.org",,,,,Thumbprint_1.Таймаут);
//														КонецЕсли;
//														
//														
//														
//													МассивСтруктур.Очистить();	
//												
//											Для Каждого СтР_1 Из МассивКМ Цикл
//												
//										

//GTINНаименованиеТовара=Сред(Стр_1.Марка,3,14);

//												HTTPЗапрос=Новый HTTPЗапрос("GEPIR40/getItem");
//												HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded; charset=UTF-8");
//												//HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
//												//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
//												///Константин           
//												Тело="task=getItemByGTIN&lng=ru&keyValue="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ДополнитьСтроку(Формат(GTINНаименованиеТовара,"ЧГ="));
//												HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
//												Ответ=HTTPСервисЗапрос_20.ОтправитьДляОбработки(HTTPЗапрос);
//													Если Ответ.КодСостояния=200 Тогда
//									
//												Текст1=Ответ.ПолучитьТелоКакСтроку();
//												NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
//												Название=неопределено;
//												Попытка
//													Название=NNN.gepirItem.itemDataLine[0].itemName; 
//												Исключение
//												КонецПопытки;
//												Если Название=Неопределено Тогда
//													
//										//			http://gepir.gs1ru.org/GEPIR40/index.jsp?p=gtin&lng=ru
//												КонецЕсли;
//												Если ЗначениеЗаполнено(Название) Тогда
//													МассивСтруктур.Добавить(Новый Структура("gtin,Название",Стр_1.GTINНаименованиеТовара,Название));
//													
//												КонецЕсли;
//												КонецЕсли;
//											Конеццикла;
//											
//										МММ=Новый Массив;
//										Если МассивСтруктур.Количество()>0 тогда
//											МММ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагрузитьПродукции(МассивСтруктур);
//											
//										КонецЕсли;
//										Для Каждого Стр_1 Из МММ Цикл
//											ОповеститьОбИзменении(Стр_1);
//										КонецЦиклА;

//									
//							
//						КонецЕсли;
						
				//	КонецЕсли;
				Конеццикла;
				
				Если Страница*СколькоНаСтранице>Тотал Тогда
					Прервать;
				КонецЕсли;
					
	HTTPЗапрос=Новый HTTPЗапрос("edo-api/incoming-documents?limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&offset="+Формат(Страница*СколькоНаСтранице,"ЧГ=")+"&sortBy=created_at&asc=false&folder=0");
	
	
	
	
	
//	HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
	HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
	HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
	HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
	HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
	HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ +"/documents/incoming/list");
	
	
	
	HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");
	
	//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
	HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
	HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
	
	
	
//	Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
	Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
	"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


	HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	
	//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
							
	
	
	Если Ответ.КодСостояния<>202 И Ответ.КодСостояния<>200  Тогда
				Сообщить("Не удалось загрузить приходы с ЦРПТ, отсутствует доступ.");
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Возврат;
	КонецЕсли;
	
	Конеццикла;	
				
				
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
	Иначе
					Попытка
						//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							
						Исключение
							Попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								
								Если Найти(Текст1,"Billing contract")>0 И
									Найти(Текст1,"not signed by participant")>0 Тогда
									Сообщить("Договор биллинга для выбранной группы товаров не подписан участником");
								КонецЕсли;
								
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	
	
	
	
КонецПроцедуры


Процедура ОбновитьСтатусыДокументовСерверПоПользователю(Пользователь) Экспорт
	
	Thumbprint_1=Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(Пользователь);
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
		ОбновитьСтатусыДокументовЛекарстваСервер(Thumbprint_1);
		Возврат;
	Конецесли;

			
	   
		СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
							СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
									СерийныйНомер=СтруктураНастроек.СерийныйНомер;
							
								Если Не ЗначениеЗаполнено(СРегистра) ИЛИ Не ЗначениеЗаполнено(СерийныйНомер) Тогда
									СРегистра=Получение_Токена(Thumbprint_1);	
								Иначе
								   
										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
											Прокси=Новый ИнтернетПрокси;
											Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										Иначе
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										КонецЕсли;
										
										HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
										HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
										HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
										//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
										///Константин           
										Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
										//Текст1=Ответ.ПолучитьТелоКакСтроку();
										Если Ответ.КодСостояния<>200 Тогда
											СРегистра=Получение_Токена(Thumbprint_1);	
										КонецЕсли;
											
								КонецЕсли;

				Если НЕ ЗначениеЗАполнено(СРегистра) тогда
					Сообщить("Не удалось подключиться к ЦРПТ");
					Возврат
				КонецЕсли;
				
		ОбновитьСтатусыДокументовСервер(Thumbprint_1,Пользователь,СерийныйНомер)		
	   
КонецПроцедуры



Процедура ОбновитьСтатусыДокументовСервер(Команда,Пользователь,СерийныйНомер,Что_1=0) Экспорт
	
	Thumbprint_1=Команда;	
	Настройки=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить();
	ЗаписыватьДанныеПриОтправкеЗаказа=Настройки.ЗаписыватьДанныеПриОтправкеЗаказа;
	НеЭмитировать=Настройки.НеЭмитировать;
	ЗагрузатьНаименованиеПриПриемке=Настройки.ЗагрузатьНаименованиеПриПриемке;
	
	
	
	
			Если Что_1=0 ИЛИ Что_1=2 Тогда
	
							
							АдресРаздробить=Thumbprint_1.АдресСУЗ;
							Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
							Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
							Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
							Порт=Сред(Порт,Найти(Порт,":")+1);
							Попытка
								Порт=число(Порт);
							Исключение
								Порт=Неопределено;
							КонецПопытки;
							
								Если Найти(АдресРаздробить ,"https")=1 Тогда
									Защищ=Новый ЗащищенноеСоединениеopenSSL();
								Иначе
									Защищ=Неопределено;
								КонецЕсли;
								
								
							Если ЗначениеЗаполнено(Адрес) Тогда
								Количество=0;	
						ВернутьДокументы_ОтчтетОбИспользовании=ВернутьСтатусыДокументовПоТабличнойЧасти_ОтчетОбИспользовании(Неопределено,Пользователь);
								
					Для Каждого Стр Из ВернутьДокументы_ОтчтетОбИспользовании Цикл
						
						
						
							Количество=Количество+1;
							Попытка
								Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
									Прокси=Новый ИнтернетПрокси;
									Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
								
									HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
								Иначе
									HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
								КонецЕсли;
								
								
							HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/report/info?reportId="+Стр.order_id+"&omsId="+Thumbprint_1.ИдентификаторСУЗ);
							HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
							
							ТокенСУЗ=ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);
							
							HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
							//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
							///Константин           
							Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
								Текст1=Ответ.ПолучитьТелоКакСтроку();
								//Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
									 //ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
									
								//Конецесли;
								
								
								Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
										//ЧтениеJSON = Новый ЧтениеJSON;
										//ЧтениеJSON.УстановитьСтроку(Текст1);
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
										Если NNN.reportStatus="ERROR" ИЛИ NNN.reportStatus="REJECTED"  Тогда
											Стр_1=Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"));

											ОбработаноМассив_статусы(Стр_1);
									ИначеЕсли 	NNN.reportStatus="READY_TO_SEND" Тогда
											Стр_1=Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета"));
										ОбработаноМассив_статусы(Стр_1)
											//ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета"),Неопределено);
										ИначеЕсли 	NNN.reportStatus="UNPROCESSED" Тогда
											Стр_1=Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВПроцессе"));
											ОбработаноМассив_статусы(Стр_1)
											//ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВПроцессе"),Неопределено);
										ИначеЕсли 	NNN.reportStatus="COMPLETE" 
											ИЛИ NNN.reportStatus="SENT" 
											Тогда
											Стр_1=Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"));
											ОбработаноМассив_статусы(Стр_1)
											//ОбновитьСтатусДокумента_Списания(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
											
											
											
											
										КонецЕсли;
									
									//ОбработаноМассив.Добавить(Стр);
							ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
									
								ИначеЕсли Ответ.КодСостояния=301 Тогда
									
									    ОшибкаОтправки="";
								//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
									Попытка
										//ЧтениеJSON = Новый ЧтениеJSON;
										//ЧтениеJSON.УстановитьСтроку(Текст1);
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
										ОшибкаОтправки=NNN.error_message;
										
									Исключение
									КонецПопытки;
								//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
							      

							КонецЕсли;
							Исключение
							КонецПопытки;
							
						Конеццикла;
									
							КонецЕсли;	
						
						
						ВернутьДокументы_ОтчтетОбИспользовании=ОбновитьСтатусыДокументовНаСервереВвод_Использование(Неопределено,Пользователь);
						
						
			Если ЗначениеЗаполнено(Адрес) Тогда
								Количество=0;	
					Для Каждого Стр Из ВернутьДокументы_ОтчтетОбИспользовании Цикл
						
						
						
								Количество=Количество+1;

						Попытка
								Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
									Прокси=Новый ИнтернетПрокси;
									Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
								
									HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
								Иначе
									HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
								КонецЕсли;
								
								
								//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body+"&limit=2147483647"");
							HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/report/info?reportId="+Стр.order_id+"&omsId="+Thumbprint_1.ИдентификаторСУЗ);
							HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
														ТокенСУЗ=ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);

							HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
							//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
							///Константин           
							Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
								Текст1=Ответ.ПолучитьТелоКакСтроку();
								Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
									 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
									
								Конецесли;
								
								
								Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
										//ЧтениеJSON = Новый ЧтениеJSON;
										//ЧтениеJSON.УстановитьСтроку(Текст1);
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
										Если NNN.reportStatus="ERROR" ИЛИ NNN.reportStatus="REJECTED"  Тогда
											ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),Неопределено);
										ИначеЕсли 	NNN.reportStatus="READY_TO_SEND" Тогда
											ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета"),Неопределено);
										ИначеЕсли 	NNN.reportStatus="UNPROCESSED" Тогда
											ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВПроцессе"),Неопределено);
										ИначеЕсли 	NNN.reportStatus="COMPLETE" 
											ИЛИ NNN.reportStatus="SENT" 
											Тогда
											ОбновитьСтатусДокумента_Списания(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
											
											
											
											
										КонецЕсли;
									
							ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
									
								ИначеЕсли Ответ.КодСостояния=301 Тогда
									
									    ОшибкаОтправки="";
								//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
									Попытка
										//ЧтениеJSON = Новый ЧтениеJSON;
										//ЧтениеJSON.УстановитьСтроку(Текст1);
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
										ОшибкаОтправки=NNN.error_message;
										
									Исключение
									КонецПопытки;
								//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
							      

							КонецЕсли;
							Исключение
							КонецПопытки;
							
						Конеццикла;
									
										
						
						
					 //Если АвтоматОтчетОбИспользовании(Пользователь) Тогда
					 //   	
					 //   	ДокументыЗаказы_1=ОбновитьСтатусыДокументовНаСервере_ВводВоборотОтчет();
					 //   	Для Каждого Стр_ЗаказКМ ИЗ ДокументыЗаказы_1 Цикл
					 //   		
					 //   		Форм=ПолучитьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
					 //   		"Ключ",Стр_ЗаказКМ.Ссылка));
					 //   		Форм.ОтправитьЗаявку(Команда);
					 //   	
					 //   		
					 //   		
					 //   		
					 //   	Конеццикла;
					 //   	Элементы.ВводВОборотТаблица.Обновить();
					 //   	
					 //   Конецесли;
						
						
						
						       	
						
	КонецЕсли;				
	
КонецЕсли;
			Если Что_1=0 Тогда

	
						 ПолучитьДокументы=ПолучитьДокументыПоСУЗ(Thumbprint_1);
							АдресРаздробить=Thumbprint_1.АдресСУЗ;
							Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
							Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
							Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
							Порт=Сред(Порт,Найти(Порт,":")+1);
							Попытка
								Порт=число(Порт);
							Исключение
								Порт=Неопределено;
							КонецПопытки;
							
								Если Найти(АдресРаздробить ,"https")=1 Тогда
									Защищ=Новый ЗащищенноеСоединениеopenSSL();
								Иначе
									Защищ=Неопределено;
								КонецЕсли;

								Количество=0;
		
	      Для Каждого Стр Из ПолучитьДокументы Цикл
	
									Количество=Количество+1;
							
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;
			
	
		HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/report/info?reportId="+Стр.order_id+"&omsId="+Thumbprint_1.ИдентификаторСУЗ);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
								ТокенСУЗ=ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);

	HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
	
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.reportStatus="READY_TO_SEND" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета"),"");
						
					ИначеЕсли 	NNN.reportStatus="SENT" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
						

					КонецЕсли;
				
			Иначе				    ОшибкаОтправки="";
				Попытка
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
					ОшибкаОтправки=Текст1;
				КонецПопытки;
			ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),ОшибкаОтправки);
		

		КонецЕсли;
		
	        Конеццикла;
	   
	

	
	ТолькоСтатус=Ложь;
	СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
	
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Возврат;
	КонецЕсли;
	
	
	
	Если Что_1=0 тогда
		НайдемЗаказыПоСервисПрайду=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.НайдемЗаказыПоСервисПрайду(Пользователь);
		
		Для Каждого Стр_1 Из НайдемЗаказыПоСервисПрайду Цикл
			//Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",
			//Новый Структура("Ключ",Стр_1.Ссылка));
			ОбновимСтатсыПострчокам(Thumbprint_1,СРегистра,Стр_1.ССылка);
		Конеццикла;
		
	КонецЕсли;
				

	
	
	
	Если НЕ НеЭмитировать тогда
		
		//ДокументыЗаказы=ОбновитьСтатусыДокументовНаСервере_ЗазкаыКМ(Пользователь);
		//Для Каждого Стр_ЗаказКМ ИЗ ДокументыЗаказы Цикл
		//	
		//	Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
		//	"Ключ",Стр_ЗаказКМ.Ссылка));
		//	Форм.ПолучитьКМИзAPI(Команда);
		//
		//	
		//	
		//	
		//Конеццикла;
		//Элементы.ЗаказыТаблица.Обновить();
		
	Конецесли;
	
		ВернутьДокументы=ОбновитьСтатусыДокументовНаСервере(,Пользователь);
		Количество=0;
		Для Каждого Стр Из ВернутьДокументы Цикл
	
			Попытка
				Количество=Количество+1;
				
				
				
			
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/order/"+Стр.order_id+"/details");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
			
			
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				НаСервереОБновляемСтатусыВСЕЗаказы(Текст1,Стр.Ссылка,ТолькоСтатус);
			ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Возврат;
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				ОшибкаОтправки="";
				Попытка
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
				КонецПопытки;
			//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
		

		КонецЕсли;
	Исключение
		КонецПопытки;	 
	Конеццикла;
	
КонецЕсли;

			Если Что_1=0 ИЛИ Что_1=2 Тогда

			ВернутьДокументы=ОбновитьСтатусыДокументовНаСервереВвод(Неопределено,Пользователь);
						Количество=0;
						Для Каждого Стр Из ВернутьДокументы Цикл
							
								
							Количество=Количество+1;
	
							Попытка
								Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
									Прокси=Новый ИнтернетПрокси;
									Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
								
									HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
								Иначе
									HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
								КонецЕсли;
 			что=Thumbprint_1.что;
	
								
								
								HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body"+"?pg="+что+"&limit=2147483647");
							HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
							HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
							//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
							///Константин           
							Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
								Текст1=Ответ.ПолучитьТелоКакСтроку();
								Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
									 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
									
								Конецесли;
								
								
								Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
										//ЧтениеJSON = Новый ЧтениеJSON;
										//ЧтениеJSON.УстановитьСтроку(Текст1);
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
										Если NNN.status="CHECKED_NOT_OK" ИЛИ NNN.status="PARSE_ERROR"  Тогда
											ОбновитьСтатусДокумента_ВводВОборот(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
											
											//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ЧерновикОбработан"),"");
										ИначеЕсли NNN.status="CHECKED_OK" Тогда
											ОбновитьСтатусДокумента_ВводВОборот(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"",NNN.body);
											
										КонецЕсли;
									
							ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
										ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
										Возврат;
							ИначеЕсли Ответ.КодСостояния=301 Тогда
									
									ОшибкаОтправки="";
									Попытка
										//ЧтениеJSON = Новый ЧтениеJSON;
										//ЧтениеJSON.УстановитьСтроку(Текст1);
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
										ОшибкаОтправки=NNN.error_message;
										
									Исключение
									КонецПопытки;
								//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
							

							КонецЕсли;
						Исключение
							КонецПопытки;
							
						Конеццикла;
						
					КонецЕсли;
	   Если Не ЗначениеЗаполнено(Thumbprint_1.АдресКАПИ) Тогда
		Возврат;
	КонецЕсли;
	
	
	
			Если Что_1=0 Тогда
			   
	СправочникиОбновить=ПолучитьСписоскПродукцииОстаток();
	
	
	
	
	
	Если СправочникиОбновить.Количество()>0 Тогда
		Количество=0;
		
		Для Каждого Стр Из СправочникиОбновить Цикл
			
			
											Количество=Количество+1;
	
		
	Попытка
			
				
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
 			что=Thumbprint_1.что;
	
								
				
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.ГУИД+"/body?pg="+что+"&limit=2147483647");
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин           
			
			Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				Текст1=Ответ.ПолучитьТелоКакСтроку();
				
				
				Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					ГТИН="";
					ПолучимГТИНПродукции(Текст1,Стр.Ссылка,ГТИН);
					Если ЗначениеЗаполнено(ГТИН) Тогда
						
						
						Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
	HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
	HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
//			ИНН=ВернутьИНН(Обр.Организации[0].Организация );
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?gtin="+ГТИН);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	Если Ответ.КодСостояния=200 Тогда
		//ЗагружаемШаблоныНасервере(Текст1,Обр.Пользователь);
		ЗагружаемГТИН(Текст1,,,,Thumbprint_1);
		
		
	КонецЕсли;
			Конецесли;		
					
			ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
						ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
						Возврат;
				КонецЕсли;
			Исключение
				КонецПопытки;
		Конеццикла;

	КонецЕсли;
	
			   
		КонецЕсли;
	//Если ОбработкаWEBНаСервере Тогда
	//	ЗагрузканаСервереОтправитьСписание_Шины(Thumbprint_1,"",Адрес,Порт,ПолучитьДокументы,Защищ);
		
		
	//Иначе
	
	
	   НадоЗагружатьОтвет=Ложь;
	
	  Если Что_1=0 Тогда
	
	
		ВернутьДокументы_Отгрузка=ОбновитьСтатусыДокументовНаСервереОтгрузка(,Пользователь);
	
	Количество=0;
	
СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаемРегистрациюУчастникавИСМП"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"));
	
	

		
	Для Каждого Стр Из ВернутьДокументы_Отгрузка Цикл
		
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
		
		
		
									Количество=Количество+1;
							
							
							//Если ЗначениеЗаполнено(Стр.ТипУточненияУПД) Тогда
							//	Если ЗначениеЗаполнено(Стр.Order_ID_КорректировачнаяУПД) Тогда
									
									
									//ПолучитьИнформациюОбУПДОтгрузка(Стр.Order_ID_КорректировачнаяУПД,Пользователь,HTTPСервисЗапрос,СерийныйНомер,Срегистра,Thumbprint_1,Стр.Ссылка);
									
							//	КонецЕсли;
								
							//Иначе
							//	Если ЗначениеЗаполнено(Стр.Order_ID_УПД) Тогда
									
									
									//ПолучитьИнформациюОбУПДОтгрузка(Стр.Order_ID_УПД,Пользователь,HTTPСервисЗапрос,СерийныйНомер,Срегистра,Thumbprint_1,Стр.Ссылка);
									
							//	КонецЕсли;
							//КонецЕсли;
							
							
							
							Если СписокСтатусов.НайтиПоЗначению(Стр.Статус)=Неопределено тогда
								Если Стр.НадоПринять<>Ложь Тогда
							//ПолучитьИПринятьПриход(Стр.Ссылка,Стр);
						КонецЕсли;
								
			Продолжить;
		КонецЕсли;
							
		
 			что=Thumbprint_1.что;
			Если Не ЗначениеЗаполнено(Стр.order_id) Тогда
				Продолжить;
			КонецЕсли;
	
								
		
										HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body?pg="+Что+"&limit=2147483647");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
			
			
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.status="CHECKED_NOT_OK" ИЛИ NNN.status="PARSE_ERROR"  Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
						
						
					ИначеЕсли 	NNN.status="WAIT_ACCEPTANCE" Тогда
						НадоПринять=Ложь;
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"",,НадоПринять);
						
						Если НадоПринять<>Ложь Тогда
							//ПолучитьИПринятьПриход(Стр.Ссылка,НадоПринять);
						КонецЕсли;
						
						
					ИначеЕсли 	NNN.status="CANCELLED" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);

						
					ИначеЕсли NNN.Status="WAIT_PARTICIPANT_REGISTRATION" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаемРегистрациюУчастникавИСМП"),"");
						
					ИначеЕсли NNN.Status="ACCEPTED" Тогда
							   НадоЗагружатьОтвет=Истина;

						//ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"",NNN);
					ИначеЕсли NNN.Status="CHECKED_OK" Тогда
						//ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"",NNN);
												Если Стр.ОтгрузкаНеУчастника И Стр.ВыводИзОборота Тогда
								ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),NNN);
Иначе	   НадоЗагружатьОтвет=Истина;
	КонецЕсли;					
					КонецЕсли;
				
		ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
					Возврат;
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				    ОшибкаОтправки="";
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Попытка
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
				КонецПопытки;
			//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
		

		КонецЕсли;
		
		
	Конеццикла;
	

	

	
		ВернутьДокументы_Списание=ОбновитьСтатусыДокументовНаСервереСписание(Пользователь);
	Количество=0;
	Для Каждого Стр Из ВернутьДокументы_Списание Цикл
	
							Количество=Количество+1;
				
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
 			что=Thumbprint_1.что;
	
								
			
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body?pg="+что+"&limit=2147483647");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
			
			
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.status="CHECKED_NOT_OK" ИЛИ NNN.status="PARSE_ERROR"  Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
					ИначеЕсли 	NNN.status="WAIT_ACCEPTANCE" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"");
					ИначеЕсли 	NNN.status="CANCELLED" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
					ИначеЕсли 	NNN.status="CHECKED_OK" Тогда
						
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
					
					КонецЕсли;
				
		ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
					Возврат;
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				    ОшибкаОтправки="";
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Попытка
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
				КонецПопытки;
			//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
		

		КонецЕсли;
		
		
	Конеццикла;
	
	
	
	
	  КонецЕсли;
	
	
	
	
	
Если Что_1=0 ИЛИ Что_1=1 Тогда	
	
	
		ВернутьДокументы_Приемка=ОбновитьСтатусыДокументовНаСервереПРИХОДЫОТВЕТЫ(Пользователь);

	Количество=0;
	Для Каждого Стр Из ВернутьДокументы_Приемка Цикл
	
									Количество=Количество+1;
							
							
							
							
						Если Стр.УПД=Истина Тогда
							//ПолучитьИнформациюОбУПДПриемка(Стр.Ссылка,ЗагрузатьНаименованиеПриПриемке,ЗаписыватьДанныеПриОтправкеЗаказа,Пользователь,HTTPСервисЗапрос,СерийныйНомер,СРегистра,Thumbprint_1) ;

							Продолжить;
						КОнецЕсли;
							
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
 			что=Thumbprint_1.что;
	
								
			
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body?pg="+Что+"&limit=2147483647");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				// ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
			
			
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.status="CHECKED_NOT_OK" ИЛИ NNN.status="PARSE_ERROR"  Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),NNN.downloadDesc);
					ИначеЕсли 	NNN.status="WAIT_ACCEPTANCE" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"");
					ИначеЕсли 	NNN.status="CANCELLED" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"");
					ИначеЕсли 	NNN.status="CHECKED_OK" Тогда
						МассивУп=Новый Массив;
	
		 			что=Thumbprint_1.что;
	
								
	
						HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+NNN.body.release_order_number+"/body?pg="+Что+"&limit=2147483647");
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
						//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
						///Константин           
						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
						Текст1=Ответ.ПолучитьТелоКакСтроку();
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						
						NNN=NNN.body;
						//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(NNN.content);
						ОбновитьСтатусДокумента_Приемка(NNN_1,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа,,Стр.Ссылка,NNN,,,Ложь);	
						ОбновитьИнформациюОПродукции(Стр.Ссылка);
						
						//ОбновитьСтатусДокумента_Приемка_АКТ_1(Стр.Ссылка,NNN_1,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа,NNN);	
						
//						ОбновитьСтатусДокумента_Приемка_АКТ(Стр.Ссылка,NNN_1 ,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа);	
						//ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
					
					КонецЕсли;
				
		ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
					Возврат;
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				    ОшибкаОтправки="";
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Попытка
					ЧтениеJSON = Новый ЧтениеJSON;
					ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
				КонецПопытки;
			//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
		

		КонецЕсли;
		
		
	Конеццикла;
	
	
	
	
					
						
						
						
						
						
						
	
	
	Конецесли;
	
	
	Если Что_1=0 ИЛИ Что_1=3 ТОгда
	
	
	
	
	
	ВернутьДокументы_3=ОбновитьСтатусыДокументовНаСервереСозданиеНовогоШкНаКороба_ХамелеонЦРПТСУЗ(Неопределено,Пользователь);
	
	
	
	
							АдресРаздробить=Thumbprint_1.АдресСУЗ;
							Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
							Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
							Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
							Порт=Сред(Порт,Найти(Порт,":")+1);
							Попытка
								Порт=число(Порт);
							Исключение
								Порт=Неопределено;
							КонецПопытки;
							
								Если Найти(АдресРаздробить ,"https")=1 Тогда
									Защищ=Новый ЗащищенноеСоединениеopenSSL();
								Иначе
									Защищ=Неопределено;
								КонецЕсли;


Количество=0;	
	 	
	Для Каждого Стр Из ВернутьДокументы_3 Цикл
		
	
								Количество=Количество+1;
		
			    Попытка
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;
			
			
			//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body+"&limit=2147483647"");
		HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/report/info?reportId="+Стр.order_id+"&omsId="+Thumbprint_1.ИдентификаторСУЗ);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
									ТокенСУЗ=ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);

		HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
			
			
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.reportStatus="ERROR" 
						ИЛИ NNN.reportStatus="REJECTED" 
						Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),Неопределено);
					ИначеЕсли 	NNN.reportStatus="READY_TO_SEND" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета"),Неопределено);
					ИначеЕсли 	NNN.reportStatus="UNPROCESSED" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВПроцессе"),Неопределено);
					ИначеЕсли 	NNN.reportStatus="COMPLETE" 
						ИЛИ NNN.reportStatus="SENT" 
						Тогда
						ОбновитьСтатусДокумента_Списания(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
					КонецЕсли;
				
		ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
				
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				    ОшибкаОтправки="";
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Попытка
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
				КонецПопытки;
			//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
		      

		КонецЕсли;
		Исключение
		КонецПопытки;
		
	Конеццикла;

	
	
	
			//Если УжеОтправили=Ложь Тогда	
		ВернутьДокументы_Агр=ОбновитьСтатусыДокументовНаСервереСозданиеНовогоШкНаКороба_ХамелеонЦРПТ(Неопределено,Пользователь);
	Количество=0;
	Для Каждого Стр Из ВернутьДокументы_Агр Цикл
	
										Количество=Количество+1;
		
		
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
 			что=Thumbprint_1.что;
	
								
			
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body?pg="+Что+"&limit=2147483647");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
			
			
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					
					//еррор="";
					//Если NNN.свойство("errors",еррор) Тогда
					//	ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
						
					Если NNN.status="CHECKED_NOT_OK" ИЛИ NNN.status="PARSE_ERROR"  Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
					ИначеЕсли 	NNN.status="WAIT_ACCEPTANCE" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"");
					ИначеЕсли 	NNN.status="CANCELLED" Тогда
						ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
					ИначеЕсли 	NNN.status="CHECKED_OK" Тогда
						ОбновитьСтатусДокумента_Списания(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
					КонецЕсли;
				
		ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
					Возврат;
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				    ОшибкаОтправки="";
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Попытка
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
				КонецПопытки;
			//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
		

		КонецЕсли;
		
		
	Конеццикла;
	
КонецЕсли;

	Если Что_1=0 ТОгда

	
		ВернутьДокументы_Агр=ОбновитьСтатусыДокументовНаСервереПеремаркировка_ХамелеонЦРПТ(Неопределено,Пользователь);
		//КонецЕсли;
		Количество=0;
		Для Каждого Стр Из ВернутьДокументы_Агр Цикл
		
											Количество=Количество+1;
			
			
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
 			что=Thumbprint_1.что;
	
								

				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/doc/"+Стр.order_id+"/body?pg="+Что+"&limit=2147483647");
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин           
			Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
					 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
					
				Конецесли;
				
				
				Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						Если NNN.status="CHECKED_NOT_OK" ИЛИ NNN.status="PARSE_ERROR"  Тогда
							ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
						ИначеЕсли 	NNN.status="WAIT_ACCEPTANCE" Тогда
							ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"");
						ИначеЕсли 	NNN.status="CANCELLED" Тогда
							ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.downloadDesc);
						ИначеЕсли 	NNN.status="CHECKED_OK" Тогда
							ОбновитьСтатусДокумента_Списания(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
						КонецЕсли;
					
			ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
						ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
						Возврат;
				ИначеЕсли Ответ.КодСостояния=301 Тогда
					
					    ОшибкаОтправки="";
				//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
						ОшибкаОтправки=NNN.error_message;
						
					Исключение
					КонецПопытки;
				//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
			

			КонецЕсли;
			
			
		Конеццикла;
	
	      КонецЕсли;
	
	
	Если НадоЗагружатьОтвет=Истина Тогда
		//ЗагрузитьОтветыПоОтгрузкам(Команда);
	КонецЕслИ;
	
	
	   
	   
	// Если (НЕ ЗначениеЗаполнено(ДокументПроверки)) И АвтоматОтчетОбИспользовании(Пользователь) Тогда
	//	
	//	ДокументыЗаказы_1=ОбновитьСтатусыДокументовНаСервере_ВводВоборотОтчет();
	//	Для Каждого Стр_ЗаказКМ ИЗ ДокументыЗаказы_1 Цикл
	//		
	//		Форм=ПолучитьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
	//		"Ключ",Стр_ЗаказКМ.Ссылка));
	//		Форм.ОтправитьЗаявку(Команда);
	//	
	//		
	//		
	//		
	//	Конеццикла;
	//	Элементы.ВводВОборотТаблица.Обновить();
	//	
	//Конецесли;
	
	   
КонецПроцедуры




Функция ПолучитьСписокПользователей_ХамелеонЦРПТ()  Экспорт
	МассивН=Новый Массив;
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Пользователи_ХамелеонЦРПТ КАК Пользователи_ХамелеонЦРПТ
		|ГДЕ
		|	НЕ Пользователи_ХамелеонЦРПТ.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		МассивН.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Возврат МассивН
	
Конецфункции

Функция ПолучитькукиВСУЗ(Thumbprint_1,УжеОтправили=Ложь,Срегистра,СерийныйНомер) Экспорт
		АдресРаздробить=Thumbprint_1.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
		
	
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
			
			
	   
		СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
							СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
									СерийныйНомер=СтруктураНастроек.СерийныйНомер;
							
								Если Не ЗначениеЗаполнено(СРегистра) ИЛИ Не ЗначениеЗаполнено(СерийныйНомер) Тогда
									СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
								Иначе
								   
										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
											Прокси=Новый ИнтернетПрокси;
											Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										Иначе
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										КонецЕсли;
										
										HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
										HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
										HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
										//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
										///Константин           
										Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
										//Текст1=Ответ.ПолучитьТелоКакСтроку();
										Если Ответ.КодСостояния<>200 Тогда
											СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
										КонецЕсли;
											
								КонецЕсли;

				Если НЕ ЗначениеЗАполнено(СРегистра) тогда
					Сообщить("Не удалось подключиться к ЦРПТ");
					Возврат "";
				КонецЕсли;
			
				
				
				
				
				
				
								Если Thumbprint_1.ПараметрРаботы="Тестовый" Тогда
					
							Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
									Прокси=Новый ИнтернетПрокси;
									Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
								
									HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,7080,,,Прокси,Thumbprint_1.Таймаут,Защищ);
								Иначе
									HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,7080,,,,Thumbprint_1.Таймаут,Защищ);
								КонецЕсли;
												
				Иначе


					
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение("suz-sso.crpt.ru",,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение("suz-sso.crpt.ru",,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;
			
			КонецЕсли;
			
		
			
		HTTPЗапрос=Новый HTTPЗапрос("signin");
	//	HTTPЗапрос=Новый HTTPЗапрос("api/orders");
	
	
	
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0");
	
	Чтен_Подкл=Новый  ЗаписьJSON;
	
	
			#Если ВебКлиент Тогда
				ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON();
			#Иначе
				ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, "	", Истина);
			#КонецЕсли
	
	
	Чтен_Подкл.УстановитьСтроку(ПараметрыЗаписиJSON);
	Чтен_Подкл.ЗаписатьНачалоОбъекта();
	Чтен_Подкл.ЗаписатьИмяСвойства("token");
	Чтен_Подкл.ЗаписатьЗначение(СРегистра);
	Чтен_Подкл.ЗаписатьКонецОбъекта();
	Текст_Подкл=Чтен_Подкл.Закрыть();
	Текст_Подкл=СтрЗаменить(Текст_Подкл,Символы.ПС,"");
	Текст_Подкл=СтрЗаменить(Текст_Подкл,Символы.ВК,"");
	
	HTTPЗапрос.Заголовки.Вставить("content-length",Формат(СтрДлина(Текст_Подкл),"ЧГ="));

			#Если ВебКлиент Тогда
	HTTPЗапрос.УстановитьТелоИзСтроки(Текст_Подкл,КодировкаТекста.UTF8);
	
				#Иначе
	HTTPЗапрос.УстановитьТелоИзСтроки(Текст_Подкл,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
	
	Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("PUT",HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния<>200 Тогда
		Сообщить("Станция управления заказами недоступна, получите доступ support@crpt.ru");
	КонецЕсли;
	
	
			
		//НСтр=Сред(Текст1,Найти(Текст1,"?sid=")+5);
		//НСтр=Сред(НСтр,1,Найти(НСтр,"""")-1);
			
		НСтр=Текст1;


		Куки="certSerial="+Thumbprint_1.Thumbprint_1+"; org.springframework.web.servlet.i18n.CookieLocaleResolver.LOCALE=ru; count=2; JSESSIONID="+НСтр+"; tokenPart1="+Сред(СРегистра,1,4000)+"; "+
		"tokenPart2="+Сред(СРегистра,4001) ;
		
		
		
		
		
					Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;

			Если Защищ<>Неопределено Тогда
				Адрес_1="https://"
			Иначе
				Адрес_1="http://"
			КонецЕсли;
			Адрес_1=Адрес_1+Адрес;
			Если ЗначениеЗаполнено(Порт) тогда
				Адрес_1=Адрес_1+":"+Формат(Порт,"ЧГ=");
			КонецЕсли;
			Адрес_1=Адрес_1+"/";
			
			HTTPЗапрос = Новый HTTPЗапрос(СтрЗаменить(НСтр,Адрес_1,"")); //"static/1555676332000/js/main/preload.js");
			
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
		
			
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
			
		Куки=Ответ.Заголовки["Set-Cookie"];
		Если Куки=Неопределено тогда
			Куки=Ответ.Заголовки["set-cookie"];
			
		Конецесли;
			
		Если Найти(Куки,"omsId=") =0 Тогда
			
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(Thumbprint_1.Thumbprint_1,"");
			Если УжеОтправили<>Истина Тогда
				 Возврат ПолучитькукиВСУЗ(Thumbprint_1,Истина,Срегистра,СерийныйНомер)
			КонецЕсли;
			Возврат "";
			
		КонецЕсли;
		
									куки=СтрЗаменить(куки,"Path=/, ","");
							куки=СтрЗаменить(куки,"path=/,","");
		Куки=Куки+"certSerial="+СерийныйНомер+"; tokenPart1="+Сред(СРегистра,1,4000)+"; "+
					"tokenPart2="+Сред(СРегистра,4001) ;

		Возврат куки
	
КонецФункции


Процедура ПодписатьФайл_ЛДМП(Знач ИмяВр,Текущийпользователь,Имя_вр_1,Открепленная=Ложь,Уже64=Ложь)	Экспорт
	cadesplugin=Новый Структура();
	cadesplugin.Вставить("CAPICOM_LOCAL_MACHINE_STORE", 1);
	cadesplugin.Вставить("CAPICOM_CURRENT_USER_STORE", 2);
	cadesplugin.Вставить("CADESCOM_LOCAL_MACHINE_STORE", 1);
	cadesplugin.Вставить("CADESCOM_CURRENT_USER_STORE", 2);
	cadesplugin.Вставить("CADESCOM_CONTAINER_STORE", 100);
	
	cadesplugin.Вставить("CAPICOM_MY_STORE", "My");
	
	cadesplugin.Вставить("CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED", 2);
	
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME", 1);
	
	cadesplugin.Вставить("CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED", 0);
	cadesplugin.Вставить("CADESCOM_XML_SIGNATURE_TYPE_ENVELOPING", 1);
	cadesplugin.Вставить("CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE", 2);
	
	cadesplugin.Вставить("XmlDsigGost3410UrlObsolete", "http://www.Вставить(""w3.Вставить(""org/2001/04/xmldsig-more#gostr34102001-gostr3411");
	cadesplugin.Вставить("XmlDsigGost3411UrlObsolete", "http://www.Вставить(""w3.Вставить(""org/2001/04/xmldsig-more#gostr3411");
	cadesplugin.Вставить("XmlDsigGost3410Url", "urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102001-gostr3411");
	cadesplugin.Вставить("XmlDsigGost3411Url", "urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr3411");
	
	cadesplugin.Вставить("CADESCOM_CADES_DEFAULT", 0);
	cadesplugin.Вставить("CADESCOM_CADES_BES", 1);
	cadesplugin.Вставить("CADESCOM_CADES_T", 5);
	cadesplugin.Вставить("CADESCOM_CADES_X_LONG_TYPE_1", 93);
	
	cadesplugin.Вставить("CADESCOM_ENCODE_BASE64", 0);
	cadesplugin.Вставить("CADESCOM_ENCODE_BINARY", 1);
	cadesplugin.Вставить("CADESCOM_ENCODE_ANY", -1);
	
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_INCLUDE_CHAIN_EXCEPT_ROOT", 0);
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN", 1);
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY", 2);
	
	cadesplugin.Вставить("CAPICOM_CERT_INFO_SUBJECT_SIMPLE_NAME", 0);
	cadesplugin.Вставить("CAPICOM_CERT_INFO_ISSUER_SIMPLE_NAME", 1);
	
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_SHA1_HASH", 0);                              
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME", 1);
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_ISSUER_NAME", 2);
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_ROOT_NAME", 3);
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_TEMPLATE_NAME", 4);
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_EXTENSION", 5);
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY", 6);
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_APPLICATION_POLICY", 7);
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_CERTIFICATE_POLICY", 8);
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_TIME_VALID", 9);
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_TIME_NOT_YET_VALID", 10);
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_TIME_EXPIRED", 11);
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_KEY_USAGE", 12);
	
	cadesplugin.Вставить("CAPICOM_DIGITAL_SIGNATURE_KEY_USAGE", 128);
	
	cadesplugin.Вставить("CAPICOM_PROPID_ENHKEY_USAGE", 9);
	
	cadesplugin.Вставить("CAPICOM_OID_OTHER", 0);
	cadesplugin.Вставить("CAPICOM_OID_KEY_USAGE_EXTENSION", 10);
	
	cadesplugin.Вставить("CAPICOM_EKU_CLIENT_AUTH", 2);
	cadesplugin.Вставить("CAPICOM_EKU_SMARTCARD_LOGON", 5);
	cadesplugin.Вставить("CAPICOM_EKU_OTHER", 0);
	
	cadesplugin.Вставить("CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME", 0);
	cadesplugin.Вставить("CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME", 1);
	cadesplugin.Вставить("CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION", 2);
	cadesplugin.Вставить("CADESCOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME", 0);
	cadesplugin.Вставить("CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME", 1);
	cadesplugin.Вставить("CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION", 2);
	cadesplugin.Вставить("CADESCOM_ATTRIBUTE_OTHER", -1);
	
	cadesplugin.Вставить("CADESCOM_STRING_TO_UCS2LE", 0);
	cadesplugin.Вставить("CADESCOM_BASE64_TO_BINARY", 1);
	
	cadesplugin.Вставить("CADESCOM_DISPLAY_DATA_NONE", 0);
	cadesplugin.Вставить("CADESCOM_DISPLAY_DATA_CONTENT", 1);
	cadesplugin.Вставить("CADESCOM_DISPLAY_DATA_ATTRIBUTE", 2);
	
	cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_RC2", 0);
	cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_RC4", 1);
	cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_DES", 2);
	cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_3DES", 3);
	cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_AES", 4);
	cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_GOST_28147_89", 25);
	
	cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_SHA1", 0);
	cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_MD2", 1);
	cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_MD4", 2);
	cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_MD5", 3);
	cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_SHA_256", 4);
	cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_SHA_384", 5);
	cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_SHA_512", 6);
	cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_CP_GOST_3411", 100);
	cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256", 101);
	cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512", 102);
	
	cadesplugin.Вставить("LOG_LEVEL_DEBUG", 4);
	cadesplugin.Вставить("LOG_LEVEL_INFO", 2);
	cadesplugin.Вставить("LOG_LEVEL_ERROR", 1);
	
	cadesplugin.Вставить("CADESCOM_AllowNone", 0);
	cadesplugin.Вставить("CADESCOM_AllowNoOutstandingRequest", "0x1");
	cadesplugin.Вставить("CADESCOM_AllowUntrustedCertificate", "0x2");
	cadesplugin.Вставить("CADESCOM_AllowUntrustedRoot", "0x4");
	cadesplugin.Вставить("CADESCOM_SkipInstallToStore", "0x10000000");
	
	
	
	CAPICOM_CURRENT_USER_STORE=2;
	CAPICOM_MY_STORE="My";
	CAPICOM_OTHER_STORE="AddressBook";
	CAPICOM_STORE_OPEN_READ_ONLY=0;
	CAPICOM_CERTIFICATE_FIND_TIME_VALID=9;
	CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED = 2;
	
	
	ТекДата=ТекущаяДата();
	
	СохранённыйОтпечатокДекларанта=Неопределено;
	СохранённыеОтпечаткиПолучателей=Новый Массив;
	// восстанавливаем настройки
	НашлиСертификат=Ложь;
	Попытка
		// формируем список наших сертификатов
		ТекЭлемент=Неопределено;
		СписокНашихСертификатов=Новый СписокЗначений;
		
		Store=Новый COMОбъект("CAPICOM.Store");
		Store.Open(CAPICOM_CURRENT_USER_STORE,CAPICOM_MY_STORE,CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);
		Certs=Store.Certificates;
		ValidCerts=Certs;//.Find(CAPICOM_CERTIFICATE_FIND_TIME_VALID,ТекДата,-1);
		Для CertNum=1 По ValidCerts.Count Цикл
			CurCert=ValidCerts.Item(CertNum);
			Thumbprint=CurCert.Thumbprint;
			Если Thumbprint=Текущийпользователь Тогда
				НашлиСертификат=Истина;
				ВыбСертификат=CurCert;
				Прервать;
			Конецесли;
		КонецЦикла;
	Исключение
		ТекстОшибки=СтрЗаменить(ОписаниеОшибки(),"'","");
		Сообщить(NStr("ru = 'Ошибка при работе с хранилищем сертификатов! (Возможно, не установлен модуль CAPICOM)"+Символы.ПС+"Описание ошибки: "+ТекстОшибки+"'", "ru"));
		Возврат;
	КонецПопытки;
	Если НашлиСертификат=Ложь Тогда
		Сообщить("В системе нет сертификата!!");
		Возврат;
	КонецЕсли;
	
	
	//Если     Открепленная=Истина  ТОгда
	////Ф=ПолучитьИмяВременногоФайла();
	//Текст=Новый ТекстовыйДокумент;
	//Текст.ДобавитьСтроку(ИмяВр);
	////Текст.Записать(Ф);
	////ИмяФ_1=ПолучитьИмяВременногоФайла();
	//
	//КонецЕсли;
	
	
	
	Signer=Новый COMОбъект("CAPICOM.Signer");
	Signer.Certificate=ВыбСертификат;
	  Signer.Options=2; // CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY
	  SignedData=Новый COMОбъект("CAPICOM.SignedData");
	  SignedData.Content=ИмяВр;
	   Имя_вр_1=SignedData.Sign(Signer,0,0);
	   
	   Возврат;
	oSigner = Новый COMОбъект("CAdESCOM.CPSigner"); // Объект, задающий параметры создания и содержащий информацию об усовершенствованной подписи. 
	
	oSigningTimeAttr=Новый COMОбъект("CADESCOM.CPAttribute");
	
	//oSigningTimeAttr.propset_Name(cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME);
	oSigningTimeAttr.Name=cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME;
	oTimeNow = Текущаядата();
	oSigningTimeAttr.Value=oTimeNow;
	attr = oSigner.AuthenticatedAttributes2;
	attr.Add(oSigningTimeAttr);
	oDocumentNameAttr = Новый COMОбъект("CADESCOM.CPAttribute");
	oDocumentNameAttr.Name=cadesplugin.CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME;
	oDocumentNameAttr.Value="CRPT";
	attr.Add(oDocumentNameAttr);
	oSigner.Certificate=ВыбСертификат;
	
	oSignedData = Новый COMОбъект("CAdESCOM.CadesSignedData");
	// Данные на подпись ввели
	oSigner.Options=cadesplugin.CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY;
//	oSigner.TSAAddress = "http://cryptopro.ru/tsp/";
	//oSigner.OCSPAddress = "http://cryptopro.ru/ocsp/";
	Если Уже64=Истина Тогда
		oSignedData.ContentEncoding=cadesplugin.CADESCOM_BASE64_TO_BINARY; //
		ИмяВр=ИмяВр;
		
	ИначеЕсли   Открепленная=Истина Тогда
		oSignedData.ContentEncoding=cadesplugin.CADESCOM_BASE64_TO_BINARY; //
		//ИмяВр=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ИмяВр));
		ИмяВр=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ИмяВр));
		
		
	Иначе
		oSignedData.ContentEncoding=cadesplugin.CADESCOM_STRING_TO_UCS2LE; //
	КонецЕсли;
	oSignedData.Content=
	ИмяВр;
	
	
//	Если Открепленная=Истина Тогда
		Имя_вр_1 = oSignedData.SignCades(oSigner,1,true);
		
	
	
	
	Возврат;
	
	oSigner = Новый COMОбъект("CAdESCOM.CPSigner"); // Объект, задающий параметры создания и содержащий информацию об усовершенствованной подписи. 
	
	oSigningTimeAttr=Новый COMОбъект("CADESCOM.CPAttribute");
	
	//oSigningTimeAttr.propset_Name(cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME);
	oSigningTimeAttr.Name=cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME;
	oTimeNow = Текущаядата();
	oSigningTimeAttr.Value=oTimeNow;
	attr = oSigner.AuthenticatedAttributes2;
	attr.Add(oSigningTimeAttr);
	oDocumentNameAttr = Новый COMОбъект("CADESCOM.CPAttribute");
	oDocumentNameAttr.Name=cadesplugin.CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME;
	oDocumentNameAttr.Value="CRPT";
	attr.Add(oDocumentNameAttr);
	oSigner.Certificate=ВыбСертификат;
	
	oSignedData = Новый COMОбъект("CAdESCOM.CadesSignedData");
	// Данные на подпись ввели
	oSigner.Options=cadesplugin.CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY;
//	oSigner.TSAAddress = "http://cryptopro.ru/tsp/";
	//oSigner.OCSPAddress = "http://cryptopro.ru/ocsp/";
	Если Уже64=Истина Тогда
		oSignedData.ContentEncoding=cadesplugin.CADESCOM_BASE64_TO_BINARY; //
		ИмяВр=ИмяВр;
		
	ИначеЕсли   Открепленная=Истина Тогда
		oSignedData.ContentEncoding=cadesplugin.CADESCOM_BASE64_TO_BINARY; //
		//ИмяВр=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ИмяВр));
		ИмяВр=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ИмяВр));
	Иначе
		oSignedData.ContentEncoding=cadesplugin.CADESCOM_STRING_TO_UCS2LE; //
	КонецЕсли;
	oSignedData.Content=
	ИмяВр;
	
	
//	Если Открепленная=Истина Тогда
		Имя_вр_1 = oSignedData.SignCades(oSigner,1,true);
		//Имя_вр_1 =Base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Имя_вр_1));
//	Иначе
//		Имя_вр_1 = oSignedData.SignCades(oSigner, cadesplugin.CADESCOM_CADES_BES);
//	КонецЕсли;
	
//	Имя_вр_1 = oSignedData.SignCades(oSigner, cadesplugin.CADESCOM_CADES_BES);
	
	
	//    ПолучитьСписокСертификатов(2, Истина,ОповещенияПослеВыполения,ИмяВр,Текущийпользователь,ЭтаФорма,ОтветСтруктура);
	
	
КонецПроцедуры		

Функция НаСервереФормируемвыводизОборот(Thumbprint_1,session_ui,Объект)
		ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	
	
	Если Объект.СерийныеНомера.Количество()=0 Тогда
		Возврат "";
	КонецЕсли;
	//МассивФайлов=Новый Массив;
//Для Каждого Стр Из Объект.Товары Цикл
	

		Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();
		
		Чтен.ЗаписатьИмяСвойства("inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		
		
		Чтен.ЗаписатьИмяСвойства("participantInn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		
		
		Чтен.ЗаписатьИмяСвойства("participant_inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		
		Чтен.ЗаписатьИмяСвойства("trade_participant_inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
			
		Чтен.ЗаписатьИмяСвойства("action_date");
		Чтен.ЗаписатьЗначение(Формат(Объект.Дата,"ДФ=""гггг-ММ-дд"""));
		
		Чтен.ЗаписатьИмяСвойства("action");
	//	Если Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота Тогда
	//		Чтен.ЗаписатьЗначение("RETAIL");
	//	ИначеЕсли Объект.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНужд Тогда
	//		Чтен.ЗаписатьЗначение("ENTERPRISE_USE");
	//	Иначе
	//		Чтен.ЗаписатьЗначение("NO_RETAIL_USE");
			Чтен.ЗаписатьЗначение(xmlString(Объект.ПричинаВыводаИзОборота));
			
	//	КонецЕсли;
		
		
		Чтен.ЗаписатьИмяСвойства("document_type");
		Чтен.ЗаписатьЗначение(xmlString(Объект.ВидПервичногоДокумента));
		
		Чтен.ЗаписатьИмяСвойства("document_number");
		Чтен.ЗаписатьЗначение(Формат(Объект.НомерПервичногоДокумента,"ДФ=""гггг-ММ-дд"""));
		
		Чтен.ЗаписатьИмяСвойства("document_date");
		Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПервичногоДокумента,"ДФ=""гггг-ММ-дд"""));
		
		Если ЗначениеЗаполнено(Объект.НаименованиеПервичногоДокумента) тогда
			Чтен.ЗаписатьИмяСвойства("primary_document_custom_name");
			Чтен.ЗаписатьЗначение(Объект.НаименованиеПервичногоДокумента);
		КонецЕсли;
		
		
		
		Чтен.ЗаписатьИмяСвойства("products");
	
              		Чтен.ЗаписатьНачалоМассива();
		Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		
			Если ЗначениеЗаполнено(Стр_1.cis) Тогда
									Чтен.ЗаписатьНачалоОбъекта();
				//	Чтен.ЗаписатьИмяСвойства("uitu");
				///	чтен.ЗаписатьЗначение(Стр_1.cis);
				
					Чтен.ЗаписатьИмяСвойства("cis");
					чтен.ЗаписатьЗначение(Стр_1.cis);
					
					Чтен.ЗаписатьИмяСвойства("document_type");
					Чтен.ЗаписатьЗначение(xmlString(Объект.ВидПервичногоДокумента));
			 		Чтен.ЗаписатьИмяСвойства("document_date");
					Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПервичногоДокумента,"ДФ=""гггг-ММ-дд"""));
					Чтен.ЗаписатьИмяСвойства("document_number");
					Чтен.ЗаписатьЗначение(Формат(Объект.НомерПервичногоДокумента,"ДФ=""гггг-ММ-дд"""));
					
					НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
					
								Чтен.ЗаписатьИмяСвойства("product_cost");
								чтен.ЗаписатьЗначение(НСтр[0].Цена*100);
					
					
					Чтен.ЗаписатьКонецОбъекта();
				//	КонецЕсли;
			КонецЕсли;
		//	Конеццикла;
			
	      Конеццикла;
		
			    чтен.ЗаписатьКонецМассива();
		Чтен.ЗаписатьКонецОбъекта();
				
			Текст=Чтен.Закрыть();
//	     МассивФайлов.Добавить(Новый Структура("Текст,Идентификатор",Текст,Стр.ПолучитьИдентификатор()));
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;
	
	// Конеццикла;
	 //КонецЕсли;
	
	Возврат Текст;
	
	
КонецФункции

Функция СформироватьОтчетОбИспользованииМассив(Thumbprint_1,Объект)
			ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	
	МассивТекстов=Новый Массив;
	
	Для Каждого Стр_1 Из Объект.Товары Цикл
		Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();
		
		НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));

	
	Чтен.ЗаписатьИмяСвойства("sntins");
	Чтен.ЗаписатьНачалоМассива();
//	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));

	Для Каждого Стр_c Из НСтрок Цикл
		
		   	cis=Стр_c.cis;

		
		НомерКМ="";	
	
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	НомераКМ_ХамелеонЦРПТ.НомерКМ,
					|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий
					|ИЗ
					|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
					|ГДЕ
					|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий = &НомерКМ_Короткий";
				
				Запрос.УстановитьПараметр("НомерКМ_Короткий", cis);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					Если ВыборкаДетальныеЗаписи.НомерКМ_Короткий=cis Тогда
						НомерКМ=ВыборкаДетальныеЗаписи.НомерКМ
					Конецесли;
					
				КонецЦикла;
				Если Не ЗначениеЗАполнено(НомерКМ) Тогда
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
						
						
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОбороты.Регистратор
					|ИЗ
					|	РегистрНакопления.ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТ.Обороты(, , Регистратор, СерийныйНомер = &cis) КАК ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОбороты
					|ГДЕ
					|	ОстаткиКМНеобходимоВвестиОтчетомОбИспользовании_ХамелеонЦРПТОбороты.Регистратор ССЫЛКА Документ.ЗаказМарок_ХамелеонЦРПТ";
				
				Запрос.УстановитьПараметр("cis", cis);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				РРР=КодироватьСтроку(cis,СпособКодированияСТроки.КодировкаURL);
				НомерКМ="";
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				
				//Сообщить(Стр.cis);

				//Сообщить(РРР);
				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					Для Каждого Стр_111 Из  ВыборкаДетальныеЗаписи.Регистратор.КМИзAPI Цикл
						Если Стр_111.НомерКМ_Короткий=cis Тогда
							//Найти(Стр_111.НомерКМ,РРР)=1 Тогда
							НомерКМ=Стр_111.НомерКМ;
							
						КонецЕсли;
						
					Конеццикла;
					
					
				КонецЕсли;
				КонецЕсли ;
				

				Если ЗначениеЗаполнено(НомерКМ) тогда
					cis=РаскодироватьСтроку(НомерКМ,СпособКодированияСтроки.КодировкаURL);
				Иначе
					cis=РаскодироватьСтроку(Стр_c.cis,СпособКодированияСтроки.КодировкаURL);
				КонецЕсли;
					
				Если Найти(cis,Символ(29))=0 тогда
					
					Если ЗначениеЗаполнено(НомерКМ) тогда
						cis=НомерКМ;
					Иначе
						cis=Стр_c.cis;
					КонецЕсли;
					
					Если Thumbprint_1.НаименованиеСтенда="Молоко" Тогда
						Если СтрДлина(cis)<=30 Тогда
							cis=Сред(cis,1,24)+Символ(29)+Сред(cis,25);
						Иначе
							cis=Сред(cis,1,31)+Символ(29)+Сред(cis,32);
						Конецесли;
						
					Иначе
						cis=Сред(cis,1,31)+Символ(29)+Сред(cis,32);
					Конецесли;
				Конецесли;
	
		
		
		Чтен.ЗаписатьЗначение(cis);
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	
		//Чтен.ЗаписатьЗначение("VERIFIED");
		
		
		
		
		Если 				Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
	Чтен.ЗаписатьИмяСвойства("usageType");
		Чтен.ЗаписатьЗначение("VERIFIED");
	
			Чтен.ЗаписатьИмяСвойства("expirationDate");
					Чтен.ЗаписатьЗначение(Формат(Стр_1.Годендо,"ДФ=""дд.ММ.гггг"""));
					
				//Иначе
					//Чтен.ЗаписатьИмяСвойства("expirationDate");
					//Чтен.ЗаписатьЗначение("010101");
						
					
				//КонецЕсли;
				
					Чтен.ЗаписатьИмяСвойства("orderType");
					Чтен.ЗаписатьЗначение(1);
					
					
					//Чтен.ЗаписатьИмяСвойства("ownerId");
					//Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
					Чтен.ЗаписатьИмяСвойства("seriesNumber");
					Чтен.ЗаписатьЗначение(Объект.НомерПартии);
					Чтен.ЗаписатьИмяСвойства("subjectId");
					Чтен.ЗаписатьЗначение(Объект.Договор.РегистрационныйНомер);
					//Чтен.ЗаписатьЗначение(Объект.ТекущийПользователь.ТокенКСУЗ);
			Иначе
		
		    	Чтен.ЗаписатьИмяСвойства("usageType");
		Чтен.ЗаписатьЗначение("VERIFIED");
	
		Если ЗначениеЗаполнено(Стр_1.ГоденДо) Тогда
			Если Стр_1.ЧасыДо Тогда
				
				Чтен.ЗаписатьИмяСвойства("expDate72");
				Чтен.ЗаписатьЗначение(Формат(Стр_1.ГоденДо,"ДФ=""ггММддЧЧмм"""));
				
			Иначе
				Чтен.ЗаписатьИмяСвойства("expDate");
				Чтен.ЗаписатьЗначение(Формат(Стр_1.ГоденДо,"ДФ=""ггММдд"""));
			КонецЕсли;
		КонецЕсли;
	//	Чтен.ЗаписатьИмяСвойства("expDate72");
	//	Чтен.ЗаписатьЗначение(Формат(Стр_1.ГоденДо,"ДФ=""ггММдд"""));
//	Если ЗначениеЗАполнено(Стр_1.НомерВСД) Тогда
//		Чтен.ЗаписатьИмяСвойства("accompanyingDocument");
//		Чтен.ЗаписатьЗначение(Стр_1.НомерВСД);
//	Конецесли;
	
		Чтен.ЗаписатьИмяСвойства("cisType");
		Чтен.ЗаписатьЗначение("UNIT");
	
		Чтен.ЗаписатьИмяСвойства("usedInProduction");
		Чтен.ЗаписатьЗначение(0);
		           Конецесли;
	
	Чтен.ЗаписатьКонецОбъекта();
	
	
	Текст=Чтен.Закрыть();
	МассивТекстов.Добавить(Новый Структура("Текст,Идентификатор",Текст,Стр_1.НомерСтроки-1));
	 	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр(Объект.Ссылка,Текст);
		КонецЕсли;
		
	Конеццикла;	
	
	Возврат МассивТекстов

Конецфункции


Функция ПроверкаЗаполнения_1(Объект)
	Если ЗначениеЗАполнено(ОБъект.Ссылка) Тогда	
		Возврат Объект.Ссылка.ПолучитьОбъект().ПроверитьЗаполнение()
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ОтправитьВыводИзОборота(Объект,Thumbprint_1)
	
		ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;

		
		
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
		
	СформироватьФайлДляОтправки_1=НаСервереФормируемвыводизОборот(Thumbprint_1,"",Объект);
	
	Если Не ЗначениеЗаполненО(СформироватьФайлДляОтправки_1) Тогда
		 Возврат Неопределено;
	КонецЕсли;
	
	СформироватьФайлДляОтправки_3=СформироватьФайлДляОтправки_1;
//	НеПрошлаПроверка21(СформироватьФайлДляОтправки);
//Для Каждого СформироватьФайлДляОтправки_3 ИЗ СформироватьФайлДляОтправки_1 Цикл
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки_3,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
	
	//Подписанный="";
	//ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
	//			Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
	//		Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
	//		Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	
	
	//Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
	//			Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
	//		Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
	//		Добав=СтрЗаменить(Добав,"\r\n","");

	Тело=СформироватьФайлДляОтправки;
		АдресРаздробить=Thumbprint_1.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
		
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
			
			
			
			Подписанный="";
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
		
		
		//Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

				
		ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1,Подписанный,Истина);
		
		//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//Подписанный,КодировкаТекста.UTF8,Ложь));
		
					Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
				Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
				 Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				
		Тело="{
		|""product_document"":"""+Добав+""",
		|""document_format"": ""MANUAL"",";
		
		//Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота") Тогда	
			Тело=Тело+"
			|""type"":""LK_RECEIPT"",";
	//		Тело=Тело+"
	//		|""ProductGroup"":""shoes"",";
			
			//|}";
			
		//КонецЕсли;
		Тело=Тело+"
		|""signature"":"""+Подписанный+"""}";
		
		      //ЗапишемВРегистр(Тело);
		
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
		Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотИмпорт") Тогда
			что=Thumbprint_1.что;
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/import/send?pg="+Что);
			//HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/import/send");
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборот") Тогда
			что=Thumbprint_1.что;
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/send?pg="+Что);
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота") 
			ИЛИ Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНужд") 
		//	ИЛИ Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНуждПокупателем")
			Тогда
			что=Thumbprint_1.что;
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/receipt/send?pg="+Что);
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.МаркировкаОстатков") Тогда
			
			
			что=Thumbprint_1.что;

			
			//Если	 Thumbprint_1.НаименованиеСтенда="Обувь" Тогда
			//	HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg=shoes");
			//Иначе
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg="+Что);
				
			//КонецЕсли;
		
		КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		
		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Ответ(Объект,Текст1);
		КонецЕсли;
			
		
	
	
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
		ИЛИ Ответ.КодСостояния=201 
		Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			Объект._Order_ID=Текст1;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
				Возврат "ПЕРЕПОДКЛЮЧЕНИЕ";			

	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	Объект.Записать();

	
Конецфункции

Процедура ОтправитьОтчетОбИспользовании(Объект_11,Thumbprint_1,ТокенСУЗ=Неопределено) Экспорт
	Объект=Объект_11.ПолучитЬобъект();
	
	ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;

	
	
	
	Если Thumbprint_1.НаименованиеСтенда="Молоко"
		ИЛИ Thumbprint_1.НаименованиеСтенда="Фармацевтика"
		Тогда
		Объект.Статус=Неопределено;
		МассивФайлов=СформироватьОтчетОбИспользованииМассив(Thumbprint_1,Объект);
		Сч=0;
		
		АдресРаздробить=Thumbprint_1.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
		
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
			
			
		
		
	Для Каждого СформироватьФайлДляОтправки_3 ИЗ МассивФайлов Цикл
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки_3.Текст,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
	
		Тело=СформироватьФайлДляОтправки;
			
			
			
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			Сообщить("В пользователе не заполнен адрес СУЗ");
			Возврат;
			
		КонецЕсли;
	
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;
			
	Подписанный="";
	Попытка
	ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1,Подписанный,Истина);
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
			Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	Исключение
КонецПопытки;
	
			
			
//			Если РаботатьНаV1 Тогда
//		HTTPЗапрос=Новый HTTPЗапрос("api/utilisation");
//			Иначе
		HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/utilisation?omsId="+Thumbprint_1.ИдентификаторСУЗ);
//		КонецЕсли;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	Если не ЗначениеЗаполненО(ТокенСУЗ) тогда
								ТокенСУЗ=ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);
							Конецесли;
								
	HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
	
	Если ЗначениеЗаполнено(Подписанный) тогда
		HTTPЗапрос.Заголовки.Вставить("X-Signature",Подписанный);
	КонецЕсли;
	
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
					Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Объект,Текст1);
	КонецЕсли;
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				НСтр=Объект.Товары[СформироватьФайлДляОтправки_3.Идентификатор];
			НСтр.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
				НСтр.order_ID=NNN.reportId;
				
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			
			Объект.Записать();
						
			
			//Объект._Order_ID=NNN.order_id;
	
//	ИначеЕсли Ответ.КодСостояния=200 Тогда
//				НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
//			НСтр.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
//						Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");

//				//ЧтениеJSON = Новый ЧтениеJSON;
//				//ЧтениеJSON.УстановитьСтроку(Текст1);
//				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
////				Если РаботатьнаV1 Тогда
////			Объект._Order_ID=NNN;
////				Иначе
//			//Объект._Order_ID=NNN.reportId;
////			Конецесли;
//				НСтр.order_ID=NNN.reportId;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
	Иначе
		//	Если УжеОтправили=Истина Тогда
						НСтр=Объект.Товары[СформироватьФайлДляОтправки_3.Идентификатор];
					НСтр.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							НСтр.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								НСтр.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	//Если Ответ.КодСостояния<>200 Тогда
	//	
	//	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
	//	  Текст1=Ответ.ПолучитьТелоКакСтроку();
	//		Попытка
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//			Объект.ОшибкаОтправки=NNN.error_message;
	//			
	//		Исключение
	//		КонецПопытки;
	//	Иначе
	//		Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета");
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//		Объект._Order_ID=NNN.order_id;
	//КонецЕсли;
Конеццикла;
	Объект.Записать();
Возврат;
КонецЕсли;	
	
	
КонецПроцедуры

Функция СформироватьXmlФайлИмпорт(Объект)
	
		ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("doc_type");
	Чтен.ЗаписатьЗначение("GOODSIMPORT");
	
	
	//Чтен.ЗаписатьИмяСвойства("document_description");
	//Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("participant_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	Чтен.ЗаписатьИмяСвойства("declaration_date");
	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаДекларацииТовара,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
	Чтен.ЗаписатьИмяСвойства("declaration_number");
	Чтен.ЗаписатьЗначение(СокрЛП(Объект.НомерДекларацииТовара));
	Чтен.ЗаписатьИмяСвойства("customs_code");
	Чтен.ЗаписатьЗначение(Объект.КодТаможенногоОргана);
	Чтен.ЗаписатьИмяСвойства("decision_code");
	Чтен.ЗаписатьЗначение(Число(Объект.КодПринятогоРешения.Код));
	//Чтен.ЗаписатьКонецОбъекта();

	Чтен.ЗаписатьИмяСвойства("products");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;		
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		Если Стр.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
			Чтен.ЗаписатьИмяСвойства("uitu_code");
		Иначе
			Чтен.ЗаписатьИмяСвойства("uit_code");
		КонецЕсли;
		Чтен.ЗаписатьЗначение(Стр.cis);
		Чтен.ЗаписатьИмяСвойства("tnved_code");
		Чтен.ЗаписатьЗначение(НСТР.КодТНВЭД.Код);
		Чтен.ЗаписатьИмяСвойства("certificate_document");
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Чтен.ЗаписатьЗначение("CONFORMITY_CERT");
		Иначе
			Чтен.ЗаписатьЗначение("CONFORMITY_DECLAR");
		КонецЕсли;
		Чтен.ЗаписатьИмяСвойства("certificate_document_number");
		Чтен.ЗаписатьЗначение(НСтр.ДекларацияИлиСертификатСоответствия.Наименование);
		Чтен.ЗаписатьИмяСвойства("certificate_document_date");
		Чтен.ЗаписатьЗначение(Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд"""));
		Чтен.ЗаписатьКонецОбъекта();;
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;

	Возврат Текст;
//		Текст="<Vvod action_id=""05"">
//	|<DocType>Promotion_Inform_Selfmade</DocType>  
//	|<Participant_INN>"+Объект.Организация.ИНН+"</Participant_INN>  
//	|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//	|<Producer_INN>"+Объект.Организация.ИНН+"</Producer_INN>  
//	|<INNOwner>"+Объект.Организация.ИНН+"</INNOwner>  
//	|<Production_Order>2</Production_Order>  
//	|<Marking_Type>1</Marking_Type>  
////	|<Declaration_Date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</Declaration_Date>  
////	|<Declaration_Number>"+Объект.НомерДекларацииТовара+"</Declaration_Number>  
////	|<Customs_Code>"+Объект.КодТаможенногоОргана+"</Customs_Code>  
////	|<Decision_Code>"+Объект.КодПринятогоРешения.Код+"</Decision_Code>  
//	|<Products_List>";
//	Для Каждого Стр Из Объект.СерийныеНомера Цикл
//		
//		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
//		НСтр=НСтр[0];
//		
//	    Текст=Текст+"
//		|<PRODUCT>  
//		|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//		|<UIT>"+Стр.cis+"</UIT>
//		|<CodeTNVED>"+НСТР.КодТНВЭД.Код+"</CodeTNVED>
//		|<MarkingType>"+"3"+"</MarkingType>";
//		
//		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
//			Текст=Текст+"
//			|<Certificate_Doc>1</Certificate_Doc>";
//		Иначе
//			Текст=Текст+"
//			|<Certificate_Doc>2</Certificate_Doc>"
//		КонецЕсли;
//		
//		Текст=Текст+"
//		|<Certificate_Doc_Number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</Certificate_Doc_Number>
//		|<Certificate_Doc_Date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</Certificate_Doc_Date>
//		|</PRODUCT> ";
//		
//		
//		
//	КонецЦикла;
//	    Текст=Текст+"
//		|</Products_List>
//		|</Vvod>
//		|";
		

	
	Текст="<vvod_import action_id=""5.1"" version=""3"">
	//|<DocType>GOODSIMPORT</DocType>  
	|<trade_participant_inn>"+Объект.Организация.ИНН+"</trade_participant_inn>  
	//|<Marking_Type>2</Marking_Type>  
	|<declaration_date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</declaration_date>  
	|<declaration_number>"+СокрЛП(Объект.НомерДекларацииТовара)+"</declaration_number>  
	|<customs_code>"+Объект.КодТаможенногоОргана+"</customs_code>  
	|<decision_code>"+Объект.КодПринятогоРешения.Код+"</decision_code>  
	|<products_list>";
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		
	    Текст=Текст+"
		|<product>  
		|<kit>"+Стр.cis+"</kit>";
//		Если ЗначениеЗАполнено(Стр.НомерКороба) Тогда
//		    Текст=Текст+"
//			|<UITU>"+Стр.НомерКороба+"</UITU>";
//		КонецЕсли;
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERTIFICATE</certificate_type>";
		Иначе
			Текст=Текст+"
			|<Certificate_Doc>CONFORMITY_CERTIFICATE</Certificate_Doc>"
		КонецЕсли;
		
		Текст=Текст+"
		|<certificate_number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</certificate_number>
		|<certificate_date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""дд.ММ.гггг""")+"</certificate_date>
		|<tnved_code>"+НСТР.КодТНВЭД.Код+"</tnved_code>";
		
		
		Текст=Текст+"
		|</product> ";
		
		
		
	КонецЦикла;
	    Текст=Текст+"
		|</products_list>
		|</vvod_import>
		|";
//		
				
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;
	
Возврат Текст 	
КонецФункции

Процедура ОтправитьВводВОборотФармацевтика(Thumbprint_1,Объект)
	
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Записать();
	
	
	
КонецПроцедуры

Функция СформироватьXmlФайлВвод(Объект)
			ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;

	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
//	Чтен.ЗаписатьИмяСвойства("document_description");
//	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("participant_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	Если ЗначениеЗаполнено(Объект.ДатаПроизводства) Тогда
		Чтен.ЗаписатьИмяСвойства("production_date");
		Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд"""));
	КонецЕсли;
	Чтен.ЗаписатьИмяСвойства("producer_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	Чтен.ЗаписатьИмяСвойства("owner_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	
	Чтен.ЗаписатьИмяСвойства("production_type");
	Чтен.ЗаписатьЗначение("OWN_PRODUCTION");
	
//	Чтен.ЗаписатьКонецОбъекта();
	
	Чтен.ЗаписатьИмяСвойства("doc_type");
	Чтен.ЗаписатьЗначение("Promotion_Inform_Selfmade");
	Чтен.ЗаписатьИмяСвойства("products");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		Если ЗначениеЗаполнено(Объект.ДатаПроизводства) Тогда
		
			Чтен.ЗаписатьИмяСвойства("production_date");
			Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд"""));
		КонецЕсли;
		
		Если Стр.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
			Чтен.ЗаписатьИмяСвойства("uitu_code");
		Иначе
			Чтен.ЗаписатьИмяСвойства("uit_code");
		КонецЕсли;
		Чтен.ЗаписатьЗначение(Стр.cis);
		Чтен.ЗаписатьИмяСвойства("tnved_code");
		Чтен.ЗаписатьЗначение(НСТР.КодТНВЭД.Код);
		Чтен.ЗаписатьИмяСвойства("producer_inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		
		
		//Если ЗначениеЗаполнено(Объект.ДатаПроизводства) Тогда
		//	Чтен.ЗаписатьИмяСвойства("production_date");
		//	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд"""));
		//КонецЕсли;
		
		Чтен.ЗаписатьИмяСвойства("owner_inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		Чтен.ЗаписатьИмяСвойства("certificate_document");
		
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Чтен.ЗаписатьЗначение("CONFORMITY_CERT");
		Иначе
			Чтен.ЗаписатьЗначение("CONFORMITY_DECLAR");
		КонецЕсли;
		Чтен.ЗаписатьИмяСвойства("certificate_document_number");
		Чтен.ЗаписатьЗначение(НСтр.ДекларацияИлиСертификатСоответствия.Наименование);
		Чтен.ЗаписатьИмяСвойства("certificate_document_date");
		Чтен.ЗаписатьЗначение(Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд"""));
		
		Чтен.ЗаписатьИмяСвойства("vsd_number");
		Чтен.ЗаписатьЗначение(НСтр.НомерВСД);
		Чтен.ЗаписатьКонецОбъекта();;
		
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;
	Возврат Текст;
	
	
//		Текст="<Vvod action_id=""05"">
//	|<DocType>Promotion_Inform_Selfmade</DocType>  
//	|<Participant_INN>"+Объект.Организация.ИНН+"</Participant_INN>  
//	|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//	|<Producer_INN>"+Объект.Организация.ИНН+"</Producer_INN>  
//	|<INNOwner>"+Объект.Организация.ИНН+"</INNOwner>  
//	|<Production_Order>2</Production_Order>  
//	|<Marking_Type>1</Marking_Type>  
////	|<Declaration_Date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</Declaration_Date>  
////	|<Declaration_Number>"+Объект.НомерДекларацииТовара+"</Declaration_Number>  
////	|<Customs_Code>"+Объект.КодТаможенногоОргана+"</Customs_Code>  
////	|<Decision_Code>"+Объект.КодПринятогоРешения.Код+"</Decision_Code>  
//	|<Products_List>";
//	Для Каждого Стр Из Объект.СерийныеНомера Цикл
//		
//		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
//		НСтр=НСтр[0];
//		
//	    Текст=Текст+"
//		|<PRODUCT>  
//		|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//		|<UIT>"+Стр.cis+"</UIT>
//		|<CodeTNVED>"+НСТР.КодТНВЭД.Код+"</CodeTNVED>
//		|<MarkingType>"+"3"+"</MarkingType>";
//		
//		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
//			Текст=Текст+"
//			|<Certificate_Doc>1</Certificate_Doc>";
//		Иначе
//			Текст=Текст+"
//			|<Certificate_Doc>2</Certificate_Doc>"
//		КонецЕсли;
//		
//		Текст=Текст+"
//		|<Certificate_Doc_Number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</Certificate_Doc_Number>
//		|<Certificate_Doc_Date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</Certificate_Doc_Date>
//		|</PRODUCT> ";
//		
//		
//		
//	КонецЦикла;
//	    Текст=Текст+"
//		|</Products_List>
//		|</Vvod>
//		|";
		

	
	Текст="<vvod action_id=""05""  version=""5"">
	|<trade_participant_inn>"+Объект.Организация.ИНН+"</trade_participant_inn>  
	|<producer_inn>"+Объект.Организация.ИНН+"</producer_inn>  
	|<owner_inn>"+Объект.Организация.ИНН+"</owner_inn>  
	|<product_date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_date>  
	|<production_order>"+"OWN_PRODUCTION"+"</production_order> ";
	
//	    Текст=Текст+"
//		|<MarkingType>"+"1 "+"</MarkingType>  ";
	    Текст=Текст+"
	|<products_list>";
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		
	    Текст=Текст+"
		|<product>  
		|<kit>"+Стр.cis+"</kit>
		|<product_Date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_Date>";
//		Если ЗначениеЗАполнено(Стр.НомерКороба) Тогда
//		    Текст=Текст+"
//			|<UITU>"+Стр.НомерКороба+"</UITU>";
//		КонецЕсли;
		   Текст=Текст+"
		|<tnved_code>"+НСТР.КодТНВЭД.Код+"</tnved_code>";
		
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>";
		Иначе
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>"
		КонецЕсли;
		
		Текст=Текст+"
		|<certificate_number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</certificate_number>
		|<certificate_date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</certificate_date>";
		
		
		Текст=Текст+"
		|</product> ";
		
		
		
	КонецЦикла;
	    Текст=Текст+"
		|</products_list>
		|</vvod>
		|";
//		
				
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;
	
Возврат Текст 	
КонецФункции

Функция СформироватьXmlФайлВводКонтракт(Объект)
	
		ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	
	
	Если Объект.Собственник.ИНН=Объект.Организация.ИНН Тогда
		Собственник=0;
	Иначе
		Собственник=1;
	Конецесли;
	
	Если Собственник=0 Тогда
		Чтен.ЗаписатьИмяСвойства("producer_inn");
		Чтен.ЗаписатьЗначение(Объект.Производитель.ИНН);
		Чтен.ЗаписатьИмяСвойства("owner");
		Чтен.ЗаписатьЗначение(Ложь);
		Чтен.ЗаписатьИмяСвойства("producer");
		Чтен.ЗаписатьЗначение(Истина);
	Иначе
		Чтен.ЗаписатьИмяСвойства("producer_inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		Чтен.ЗаписатьИмяСвойства("owner");
		Чтен.ЗаписатьЗначение(Истина);
		Чтен.ЗаписатьИмяСвойства("producer");
		Чтен.ЗаписатьЗначение(Ложь);
		
	КонецЕсли;
		Чтен.ЗаписатьИмяСвойства("owner_inn");
		Чтен.ЗаписатьЗначение(Объект.Собственник.ИНН);
		
	Если ЗначениеЗаполнено(Объект.ДатаПроизводства) Тогда
		Чтен.ЗаписатьИмяСвойства("production_date");
		Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд"""));
	КонецЕсли;
	
	Чтен.ЗаписатьИмяСвойства("production_order");
	Чтен.ЗаписатьЗначение("CONTRACT_PRODUCTION");
	
	
	Чтен.ЗаписатьИмяСвойства("products_list");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		Если ЗначениеЗаполнено(Объект.ДатаПроизводства) Тогда
			Чтен.ЗаписатьИмяСвойства("production_date");
			Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд"""));
		КонецЕсли;
		
		Если Стр.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
			Чтен.ЗаписатьИмяСвойства("uitu");
		Иначе
			Чтен.ЗаписатьИмяСвойства("uit");
		КонецЕсли;
		Чтен.ЗаписатьЗначение(Стр.cis);
		Чтен.ЗаписатьИмяСвойства("tnved_code");
		Чтен.ЗаписатьЗначение(НСТР.КодТНВЭД.Код);
		Чтен.ЗаписатьИмяСвойства("producer_inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		
//		Если ЗначениеЗаполнено(Объект.ДатаПроизводства) Тогда

//			Чтен.ЗаписатьИмяСвойства("production_date");
//			Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд"""));
//		КонецЕсли;
			
	//	Чтен.ЗаписатьИмяСвойства("owner_inn");
	//	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		Чтен.ЗаписатьИмяСвойства("certificate_doc_type");
		
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Чтен.ЗаписатьЗначение("CONFORMITY_CERT");
		Иначе
			Чтен.ЗаписатьЗначение("CONFORMITY_DECLAR");
		КонецЕсли;
		Чтен.ЗаписатьИмяСвойства("certificate_doc_number");
		Чтен.ЗаписатьЗначение(НСтр.ДекларацияИлиСертификатСоответствия.Наименование);
		Чтен.ЗаписатьИмяСвойства("certificate_doc_date");
		Чтен.ЗаписатьЗначение(Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
		Чтен.ЗаписатьКонецОбъекта();;
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;
	Возврат Текст;
	

Конецфункции

Функция СформироватьXmlФайлостатков(Объект)
	
			ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
//	Чтен.ЗаписатьИмяСвойства("document_description");
//	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("trade_participant_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	
	Чтен.ЗаписатьИмяСвойства("products_list");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		
		Если ЗначениеЗаполнено(НСтр.ДекларацияИлиСертификатСоответствия) тогда
			Чтен.ЗаписатьИмяСвойства("certificate_type");
			
			Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
				Чтен.ЗаписатьЗначение("CONFORMITY_CERTIFICATE");
			Иначе
				Чтен.ЗаписатьЗначение("CONFORMITY_DECLARATION");
			КонецЕсли;
			Чтен.ЗаписатьИмяСвойства("certificate_number");
			Чтен.ЗаписатьЗначение(НСтр.ДекларацияИлиСертификатСоответствия.Наименование);
			Чтен.ЗаписатьИмяСвойства("certificate_date");
			Чтен.ЗаписатьЗначение(Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
			//Чтен.ЗаписатьКонецОбъекта();;

		КонецЕсли;
		
		Если СтрДлина(Стр.cis)<19 Тогда
			Чтен.ЗаписатьИмяСвойства("kitu");
		Иначе
			Чтен.ЗаписатьИмяСвойства("ki");
		КонецЕсли;
		Чтен.ЗаписатьЗначение(Стр.cis);
		Чтен.ЗаписатьКонецОбъекта();;
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;
	Возврат Текст;
	
	
//		Текст="<Vvod action_id=""05"">
//	|<DocType>Promotion_Inform_Selfmade</DocType>  
//	|<Participant_INN>"+Объект.Организация.ИНН+"</Participant_INN>  
//	|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//	|<Producer_INN>"+Объект.Организация.ИНН+"</Producer_INN>  
//	|<INNOwner>"+Объект.Организация.ИНН+"</INNOwner>  
//	|<Production_Order>2</Production_Order>  
//	|<Marking_Type>1</Marking_Type>  
////	|<Declaration_Date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</Declaration_Date>  
////	|<Declaration_Number>"+Объект.НомерДекларацииТовара+"</Declaration_Number>  
////	|<Customs_Code>"+Объект.КодТаможенногоОргана+"</Customs_Code>  
////	|<Decision_Code>"+Объект.КодПринятогоРешения.Код+"</Decision_Code>  
//	|<Products_List>";
//	Для Каждого Стр Из Объект.СерийныеНомера Цикл
//		
//		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
//		НСтр=НСтр[0];
//		
//	    Текст=Текст+"
//		|<PRODUCT>  
//		|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//		|<UIT>"+Стр.cis+"</UIT>
//		|<CodeTNVED>"+НСТР.КодТНВЭД.Код+"</CodeTNVED>
//		|<MarkingType>"+"3"+"</MarkingType>";
//		
//		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
//			Текст=Текст+"
//			|<Certificate_Doc>1</Certificate_Doc>";
//		Иначе
//			Текст=Текст+"
//			|<Certificate_Doc>2</Certificate_Doc>"
//		КонецЕсли;
//		
//		Текст=Текст+"
//		|<Certificate_Doc_Number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</Certificate_Doc_Number>
//		|<Certificate_Doc_Date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</Certificate_Doc_Date>
//		|</PRODUCT> ";
//		
//		
//		
//	КонецЦикла;
//	    Текст=Текст+"
//		|</Products_List>
//		|</Vvod>
//		|";
		

	
	Текст="<vvod action_id=""05""  version=""5"">
	|<trade_participant_inn>"+Объект.Организация.ИНН+"</trade_participant_inn>  
	|<producer_inn>"+Объект.Организация.ИНН+"</producer_inn>  
	|<owner_inn>"+Объект.Организация.ИНН+"</owner_inn>  
	|<product_date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_date>  
	|<production_order>"+"OWN_PRODUCTION"+"</production_order> ";
	
//	    Текст=Текст+"
//		|<MarkingType>"+"1 "+"</MarkingType>  ";
	    Текст=Текст+"
	|<products_list>";
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		
	    Текст=Текст+"
		|<product>  
		|<kit>"+Стр.cis+"</kit>
		|<product_Date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_Date>";
//		Если ЗначениеЗАполнено(Стр.НомерКороба) Тогда
//		    Текст=Текст+"
//			|<UITU>"+Стр.НомерКороба+"</UITU>";
//		КонецЕсли;
		   Текст=Текст+"
		|<tnved_code>"+НСТР.КодТНВЭД.Код+"</tnved_code>";
		
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>";
		Иначе
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>"
		КонецЕсли;
		
		Текст=Текст+"
		|<certificate_number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</certificate_number>
		|<certificate_date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</certificate_date>";
		
		
		Текст=Текст+"
		|</product> ";
		
		
		
	КонецЦикла;
	    Текст=Текст+"
		|</products_list>
		|</vvod>
		|";
//		
				
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;
	
Возврат Текст 	
КонецФункции

Функция СформироватьТС(Объект)
		ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	Чтен=Новый  ЗаписьJSON;
	
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("documentType");
	Чтен.ЗаписатьЗначение("CROSSBORDER");
	Чтен.ЗаписатьИмяСвойства("trade_participant_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	
	
	
	Чтен.ЗаписатьИмяСвойства("exporter_name");
	Чтен.ЗаписатьЗначение(Объект.НаименованиеЭкспортера);
	
	Чтен.ЗаписатьИмяСвойства("country_oksm");
	Чтен.ЗаписатьЗначение(Объект.СтранаТС.Код);
	Чтен.ЗаписатьИмяСвойства("primary_document_number");
	Чтен.ЗаписатьЗначение(Объект.НомерПервичногоДокумента);
	
	Чтен.ЗаписатьИмяСвойства("sender_tax_number");
	Чтен.ЗаписатьЗначение(Объект.НомерНалогоплательщикаОтправителя);
	Чтен.ЗаписатьИмяСвойства("import_date");
	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаИмпорта,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
	Чтен.ЗаписатьИмяСвойства("primary_document_date");
	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПервичногоДокумента,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
	
	Чтен.ЗаписатьИмяСвойства("products_list");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		Чтен.ЗаписатьИмяСвойства("tnved_code");
		Чтен.ЗаписатьЗначение(НСТР.КодТНВЭД.Код);
		
		Если ЗначениеЗаполнено(НСтр.ДекларацияИлиСертификатСоответствия) тогда
			Чтен.ЗаписатьИмяСвойства("certificate_type");
			
			Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
				Чтен.ЗаписатьЗначение("CONFORMITY_CERTIFICATE");
			Иначе
				Чтен.ЗаписатьЗначение("CONFORMITY_DECLARATION");
			КонецЕсли;
			Чтен.ЗаписатьИмяСвойства("certificate_number");
			Чтен.ЗаписатьЗначение(НСтр.ДекларацияИлиСертификатСоответствия.Наименование);
			Чтен.ЗаписатьИмяСвойства("certificate_date");
			Чтен.ЗаписатьЗначение(Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
			//Чтен.ЗаписатьКонецОбъекта();;

		КонецЕсли;
		Чтен.ЗаписатьИмяСвойства("cost");
		чтен.ЗаписатьЗначение(НСтр.Цена);
		Чтен.ЗаписатьИмяСвойства("vat_value");
		чтен.ЗаписатьЗначение(НСтр.суммаНДС);
		
		Если СтрДлина(Стр.cis)<19 Тогда
			Чтен.ЗаписатьИмяСвойства("kitu");
		Иначе
			Чтен.ЗаписатьИмяСвойства("ki");
		КонецЕсли;
		Чтен.ЗаписатьЗначение(Стр.cis);
		Чтен.ЗаписатьКонецОбъекта();;
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;
	Возврат Текст;
	
	
//		Текст="<Vvod action_id=""05"">
//	|<DocType>Promotion_Inform_Selfmade</DocType>  
//	|<Participant_INN>"+Объект.Организация.ИНН+"</Participant_INN>  
//	|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//	|<Producer_INN>"+Объект.Организация.ИНН+"</Producer_INN>  
//	|<INNOwner>"+Объект.Организация.ИНН+"</INNOwner>  
//	|<Production_Order>2</Production_Order>  
//	|<Marking_Type>1</Marking_Type>  
////	|<Declaration_Date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</Declaration_Date>  
////	|<Declaration_Number>"+Объект.НомерДекларацииТовара+"</Declaration_Number>  
////	|<Customs_Code>"+Объект.КодТаможенногоОргана+"</Customs_Code>  
////	|<Decision_Code>"+Объект.КодПринятогоРешения.Код+"</Decision_Code>  
//	|<Products_List>";
//	Для Каждого Стр Из Объект.СерийныеНомера Цикл
//		
//		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
//		НСтр=НСтр[0];
//		
//	    Текст=Текст+"
//		|<PRODUCT>  
//		|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//		|<UIT>"+Стр.cis+"</UIT>
//		|<CodeTNVED>"+НСТР.КодТНВЭД.Код+"</CodeTNVED>
//		|<MarkingType>"+"3"+"</MarkingType>";
//		
//		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
//			Текст=Текст+"
//			|<Certificate_Doc>1</Certificate_Doc>";
//		Иначе
//			Текст=Текст+"
//			|<Certificate_Doc>2</Certificate_Doc>"
//		КонецЕсли;
//		
//		Текст=Текст+"
//		|<Certificate_Doc_Number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</Certificate_Doc_Number>
//		|<Certificate_Doc_Date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</Certificate_Doc_Date>
//		|</PRODUCT> ";
//		
//		
//		
//	КонецЦикла;
//	    Текст=Текст+"
//		|</Products_List>
//		|</Vvod>
//		|";
		

	
	Текст="<vvod action_id=""05""  version=""5"">
	|<trade_participant_inn>"+Объект.Организация.ИНН+"</trade_participant_inn>  
	|<producer_inn>"+Объект.Организация.ИНН+"</producer_inn>  
	|<owner_inn>"+Объект.Организация.ИНН+"</owner_inn>  
	|<product_date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_date>  
	|<production_order>"+"OWN_PRODUCTION"+"</production_order> ";
	
//	    Текст=Текст+"
//		|<MarkingType>"+"1 "+"</MarkingType>  ";
	    Текст=Текст+"
	|<products_list>";
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		
	    Текст=Текст+"
		|<product>  
		|<kit>"+Стр.cis+"</kit>
		|<product_Date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_Date>";
//		Если ЗначениеЗАполнено(Стр.НомерКороба) Тогда
//		    Текст=Текст+"
//			|<UITU>"+Стр.НомерКороба+"</UITU>";
//		КонецЕсли;
		   Текст=Текст+"
		|<tnved_code>"+НСТР.КодТНВЭД.Код+"</tnved_code>";
		
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>";
		Иначе
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>"
		КонецЕсли;
		
		Текст=Текст+"
		|<certificate_number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</certificate_number>
		|<certificate_date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</certificate_date>";
		
		
		Текст=Текст+"
		|</product> ";
		
		
		
	КонецЦикла;
	    Текст=Текст+"
		|</products_list>
		|</vvod>
		|";
//		
				
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;
	
Возврат Текст 	
КонецФункции

Функция СформироватьТС_Контракт(Объект)
		ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;

	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("trade_participant_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	Чтен.ЗаписатьИмяСвойства("country_oksm");
	Чтен.ЗаписатьЗначение(Объект.СтранаТС.Код);
	Чтен.ЗаписатьИмяСвойства("exporter_name");
	Чтен.ЗаписатьЗначение(Объект.НаименованиеЭкспортера);
	
	
	Чтен.ЗаписатьИмяСвойства("import_date");
	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаИмпорта,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
	
	Чтен.ЗаписатьИмяСвойства("primary_document_date");
	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПервичногоДокумента,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
	
	
	Чтен.ЗаписатьИмяСвойства("primary_document_number");
	Чтен.ЗаписатьЗначение(Объект.НомерПервичногоДокумента);
	
	
	Чтен.ЗаписатьИмяСвойства("vsd_number");
	Чтен.ЗаписатьЗначение(Объект.НомерВСД);
	
	Чтен.ЗаписатьИмяСвойства("sender_tax_number");
	Чтен.ЗаписатьЗначение(Объект.НомерНалогоплательщикаОтправителя);
	
	Чтен.ЗаписатьИмяСвойства("products_list");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		Чтен.ЗаписатьИмяСвойства("tnved_code");
		Чтен.ЗаписатьЗначение(НСТР.КодТНВЭД.Код);
		
		Если ЗначениеЗаполнено(НСтр.ДекларацияИлиСертификатСоответствия) тогда
			Чтен.ЗаписатьИмяСвойства("certificate_type");
			
			Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
				Чтен.ЗаписатьЗначение("CONFORMITY_CERTIFICATE");
			Иначе
				Чтен.ЗаписатьЗначение("CONFORMITY_DECLARATION");
			КонецЕсли;
			Чтен.ЗаписатьИмяСвойства("certificate_number");
			Чтен.ЗаписатьЗначение(НСтр.ДекларацияИлиСертификатСоответствия.Наименование);
			Чтен.ЗаписатьИмяСвойства("certificate_date");
			Чтен.ЗаписатьЗначение(Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
			//Чтен.ЗаписатьКонецОбъекта();;

		КонецЕсли;
		Если ЗначениеЗАполнено(НСтр.Цена) тогда
			Чтен.ЗаписатьИмяСвойства("cost");
			чтен.ЗаписатьЗначение(НСтр.Цена);
		КонецЕсли;
		Если ЗначениеЗаполнено(НСтр.суммаНДС) Тогда
			Чтен.ЗаписатьИмяСвойства("vat_value");
			чтен.ЗаписатьЗначение(НСтр.суммаНДС);
		КонецЕсли;	
		
		Если СтрДлина(Стр.cis)<19 Тогда
			Чтен.ЗаписатьИмяСвойства("kitu");
		Иначе
			Чтен.ЗаписатьИмяСвойства("ki");
		КонецЕсли;
		Чтен.ЗаписатьЗначение(Стр.cis);
		Чтен.ЗаписатьКонецОбъекта();;
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;
	Возврат Текст;
	
	
//		Текст="<Vvod action_id=""05"">
//	|<DocType>Promotion_Inform_Selfmade</DocType>  
//	|<Participant_INN>"+Объект.Организация.ИНН+"</Participant_INN>  
//	|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//	|<Producer_INN>"+Объект.Организация.ИНН+"</Producer_INN>  
//	|<INNOwner>"+Объект.Организация.ИНН+"</INNOwner>  
//	|<Production_Order>2</Production_Order>  
//	|<Marking_Type>1</Marking_Type>  
////	|<Declaration_Date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</Declaration_Date>  
////	|<Declaration_Number>"+Объект.НомерДекларацииТовара+"</Declaration_Number>  
////	|<Customs_Code>"+Объект.КодТаможенногоОргана+"</Customs_Code>  
////	|<Decision_Code>"+Объект.КодПринятогоРешения.Код+"</Decision_Code>  
//	|<Products_List>";
//	Для Каждого Стр Из Объект.СерийныеНомера Цикл
//		
//		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
//		НСтр=НСтр[0];
//		
//	    Текст=Текст+"
//		|<PRODUCT>  
//		|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//		|<UIT>"+Стр.cis+"</UIT>
//		|<CodeTNVED>"+НСТР.КодТНВЭД.Код+"</CodeTNVED>
//		|<MarkingType>"+"3"+"</MarkingType>";
//		
//		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
//			Текст=Текст+"
//			|<Certificate_Doc>1</Certificate_Doc>";
//		Иначе
//			Текст=Текст+"
//			|<Certificate_Doc>2</Certificate_Doc>"
//		КонецЕсли;
//		
//		Текст=Текст+"
//		|<Certificate_Doc_Number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</Certificate_Doc_Number>
//		|<Certificate_Doc_Date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</Certificate_Doc_Date>
//		|</PRODUCT> ";
//		
//		
//		
//	КонецЦикла;
//	    Текст=Текст+"
//		|</Products_List>
//		|</Vvod>
//		|";
		

	
	Текст="<vvod action_id=""05""  version=""5"">
	|<trade_participant_inn>"+Объект.Организация.ИНН+"</trade_participant_inn>  
	|<producer_inn>"+Объект.Организация.ИНН+"</producer_inn>  
	|<owner_inn>"+Объект.Организация.ИНН+"</owner_inn>  
	|<product_date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_date>  
	|<production_order>"+"OWN_PRODUCTION"+"</production_order> ";
	
//	    Текст=Текст+"
//		|<MarkingType>"+"1 "+"</MarkingType>  ";
	    Текст=Текст+"
	|<products_list>";
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		
	    Текст=Текст+"
		|<product>  
		|<kit>"+Стр.cis+"</kit>
		|<product_Date>"+Формат(Объект.ДатаПроизводства,"ДФ=""гггг-ММ-дд""")+"</product_Date>";
//		Если ЗначениеЗАполнено(Стр.НомерКороба) Тогда
//		    Текст=Текст+"
//			|<UITU>"+Стр.НомерКороба+"</UITU>";
//		КонецЕсли;
		   Текст=Текст+"
		|<tnved_code>"+НСТР.КодТНВЭД.Код+"</tnved_code>";
		
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>";
		Иначе
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERT</certificate_type>"
		КонецЕсли;
		
		Текст=Текст+"
		|<certificate_number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</certificate_number>
		|<certificate_date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</certificate_date>";
		
		
		Текст=Текст+"
		|</product> ";
		
		
		
	КонецЦикла;
	    Текст=Текст+"
		|</products_list>
		|</vvod>
		|";
//		
				
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;
	
Возврат Текст 	
КонецФункции

Функция СформироватьВозвратИзРозницы(Объект)
		ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;

	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("documentType");
	Чтен.ЗаписатьЗначение("RETAIL_RETURN");
	Чтен.ЗаписатьИмяСвойства("return_type");
	Чтен.ЗаписатьЗначение("RETAIL_RETURN");
	Чтен.ЗаписатьИмяСвойства("trade_participant_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	
	
	
	Если ЗначениеЗаполнено(Объект.ДокументПодтверждения) Тогда
		Чтен.ЗаписатьИмяСвойства("certificate_date");
		Чтен.ЗаписатьЗначение(Формат(Объект.ДокументПодтверждения.ДатаНачалаДействия,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
		
		Чтен.ЗаписатьИмяСвойства("certificate_number");
		Чтен.ЗаписатьЗначение(Объект.ДокументПодтверждения.Наименование);
		
		Чтен.ЗаписатьИмяСвойства("certificate_type");
		Если Объект.ДокументПодтверждения.ЭтоСертификат Тогда
			Чтен.ЗаписатьЗначение("CONFORMITY_CERTIFICATE");
		Иначе
			Чтен.ЗаписатьЗначение("CONFORMITY_DECLARATION");
			
		КонецЕсли;
	КонецЕсли;
	
	Чтен.ЗаписатьИмяСвойства("primary_document_date");
	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПервичногоДокумента,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
	
	
	Чтен.ЗаписатьИмяСвойства("primary_document_number");
	Чтен.ЗаписатьЗначение(Объект.НомерПервичногоДокумента);
	
	Чтен.ЗаписатьИмяСвойства("primary_document_type");
		Чтен.ЗаписатьЗначение(xmlString(Объект.ВидПервичногоДокумента));
		
	Чтен.ЗаписатьИмяСвойства("products_list");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		Чтен.ЗаписатьИмяСвойства("tnved_code");
		Чтен.ЗаписатьЗначение(НСТР.КодТНВЭД.Код);
		
		Если ЗначениеЗаполнено(НСтр.ДекларацияИлиСертификатСоответствия) тогда
			Чтен.ЗаписатьИмяСвойства("certificate_type");
			
			Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
				Чтен.ЗаписатьЗначение("CONFORMITY_CERTIFICATE");
			Иначе
				Чтен.ЗаписатьЗначение("CONFORMITY_DECLARATION");
			КонецЕсли;
			Чтен.ЗаписатьИмяСвойства("certificate_number");
			Чтен.ЗаписатьЗначение(НСтр.ДекларацияИлиСертификатСоответствия.Наименование);
			Чтен.ЗаписатьИмяСвойства("certificate_date");
			Чтен.ЗаписатьЗначение(Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
			//Чтен.ЗаписатьКонецОбъекта();;

			//Чтен.ЗаписатьИмяСвойства("primary_document_custom_name");
			
			//Чтен.ЗаписатьЗначение("Кассовый чек");
			
	Чтен.ЗаписатьИмяСвойства("primary_document_type");
		Чтен.ЗаписатьЗначение(xmlString(Объект.ВидПервичногоДокумента));
			
			Чтен.ЗаписатьИмяСвойства("primary_document_number");
			Чтен.ЗаписатьЗначение(Объект.НомерПервичногоДокумента);
			Чтен.ЗаписатьИмяСвойства("primary_document_date");
			Чтен.ЗаписатьЗначение(Формат(Объект.ДатаПервичногоДокумента,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
			
			
		КонецЕсли;
		//Чтен.ЗаписатьИмяСвойства("cost");
		//чтен.ЗаписатьЗначение(НСтр.Цена);
		//Чтен.ЗаписатьИмяСвойства("vat_value");
		//чтен.ЗаписатьЗначение(НСтр.суммаНДС);
		
		Если СтрДлина(Стр.cis)<19 Тогда
			Чтен.ЗаписатьИмяСвойства("kitu");
		Иначе
			Чтен.ЗаписатьИмяСвойства("ki");
		КонецЕсли;
		Чтен.ЗаписатьЗначение(Стр.cis);
		Чтен.ЗаписатьКонецОбъекта();;
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;
	Возврат Текст;
	
КонецФункции

Функция СформироватьXmlФайлИмпортФТС(Объект)
	
		ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;

	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	//Чтен.ЗаписатьИмяСвойства("doc_type");
	//Чтен.ЗаписатьЗначение("GOODSIMPORT");
	
	
	//Чтен.ЗаписатьИмяСвойства("document_description");
	//Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("trade_participant_inn");
	Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
	Чтен.ЗаписатьИмяСвойства("declaration_date");
	Чтен.ЗаписатьЗначение(Формат(Объект.ДатаДекларацииТовара,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+".000Z");
	Чтен.ЗаписатьИмяСвойства("declaration_number");
	Чтен.ЗаписатьЗначение(СокрЛП(Объект.НомерДекларацииТовара));
	//Чтен.ЗаписатьИмяСвойства("customs_code");
	//Чтен.ЗаписатьЗначение(Объект.КодТаможенногоОргана);
	//Чтен.ЗаписатьИмяСвойства("decision_code");
	//Чтен.ЗаписатьЗначение(Число(Объект.КодПринятогоРешения.Код));
	//Чтен.ЗаписатьКонецОбъекта();

	Чтен.ЗаписатьИмяСвойства("products_list");	
	Чтен.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;		
		НСтр=НСтр[0];
		Чтен.ЗаписатьНачалоОбъекта();
		
		Если Стр.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
			Чтен.ЗаписатьИмяСвойства("cis");
			Чтен.ЗаписатьЗначение(Стр.cis);
			Чтен.ЗаписатьИмяСвойства("kitu");
			Чтен.ЗаписатьЗначение(Стр.cis);
			Чтен.ЗаписатьИмяСвойства("packType");
			Чтен.ЗаписатьЗначение("LEVEL1");
		Иначе
			Чтен.ЗаписатьИмяСвойства("cis");
			Чтен.ЗаписатьЗначение(Стр.cis);
			Чтен.ЗаписатьИмяСвойства("packType");
			Чтен.ЗаписатьЗначение("UNIT");
		КонецЕсли;
		
		
		
		Если ЗначениеЗаполнено(НСтр.GTIN.Цвет) Тогда
			
			Чтен.ЗаписатьИмяСвойства("color");
			Чтен.ЗаписатьЗначение(НСтр.GTIN.Цвет);
			
		КонецЕсли;
		Если ЗначениеЗаполнено(НСтр.GTIN.Размер) Тогда
			
			Чтен.ЗаписатьИмяСвойства("productSize");
			Чтен.ЗаписатьЗначение(xmlString(НСтр.GTIN.Размер.Наименование));
			
		КонецЕсли;
		
		//Чтен.ЗаписатьИмяСвойства("tnved_code");
		//Чтен.ЗаписатьЗначение(НСТР.КодТНВЭД.Код);
		//Чтен.ЗаписатьИмяСвойства("certificate_document");
		//Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
		//	Чтен.ЗаписатьЗначение("CONFORMITY_CERT");
		//Иначе
		//	Чтен.ЗаписатьЗначение("CONFORMITY_DECLAR");
		//КонецЕсли;
		//Чтен.ЗаписатьИмяСвойства("certificate_document_number");
		//Чтен.ЗаписатьЗначение(НСтр.ДекларацияИлиСертификатСоответствия.Наименование);
		//Чтен.ЗаписатьИмяСвойства("certificate_document_date");
		//Чтен.ЗаписатьЗначение(Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд"""));
		Чтен.ЗаписатьКонецОбъекта();;
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	
	Текст=Чтен.Закрыть();
	
		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;

	Возврат Текст;
//		Текст="<Vvod action_id=""05"">
//	|<DocType>Promotion_Inform_Selfmade</DocType>  
//	|<Participant_INN>"+Объект.Организация.ИНН+"</Participant_INN>  
//	|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//	|<Producer_INN>"+Объект.Организация.ИНН+"</Producer_INN>  
//	|<INNOwner>"+Объект.Организация.ИНН+"</INNOwner>  
//	|<Production_Order>2</Production_Order>  
//	|<Marking_Type>1</Marking_Type>  
////	|<Declaration_Date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</Declaration_Date>  
////	|<Declaration_Number>"+Объект.НомерДекларацииТовара+"</Declaration_Number>  
////	|<Customs_Code>"+Объект.КодТаможенногоОргана+"</Customs_Code>  
////	|<Decision_Code>"+Объект.КодПринятогоРешения.Код+"</Decision_Code>  
//	|<Products_List>";
//	Для Каждого Стр Из Объект.СерийныеНомера Цикл
//		
//		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
//		НСтр=НСтр[0];
//		
//	    Текст=Текст+"
//		|<PRODUCT>  
//		|<Product_Date>"+Формат(Объект.Дата,"ДФ=""гггг-ММ-дд""")+"</Product_Date>  
//		|<UIT>"+Стр.cis+"</UIT>
//		|<CodeTNVED>"+НСТР.КодТНВЭД.Код+"</CodeTNVED>
//		|<MarkingType>"+"3"+"</MarkingType>";
//		
//		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
//			Текст=Текст+"
//			|<Certificate_Doc>1</Certificate_Doc>";
//		Иначе
//			Текст=Текст+"
//			|<Certificate_Doc>2</Certificate_Doc>"
//		КонецЕсли;
//		
//		Текст=Текст+"
//		|<Certificate_Doc_Number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</Certificate_Doc_Number>
//		|<Certificate_Doc_Date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""гггг-ММ-дд""")+"</Certificate_Doc_Date>
//		|</PRODUCT> ";
//		
//		
//		
//	КонецЦикла;
//	    Текст=Текст+"
//		|</Products_List>
//		|</Vvod>
//		|";
		

	
	Текст="<vvod_import action_id=""5.1"" version=""3"">
	//|<DocType>GOODSIMPORT</DocType>  
	|<trade_participant_inn>"+Объект.Организация.ИНН+"</trade_participant_inn>  
	//|<Marking_Type>2</Marking_Type>  
	|<declaration_date>"+Формат(Объект.ДатаДекларацииТовара,"ДФ=""дд.ММ.гггг""")+"</declaration_date>  
	|<declaration_number>"+СокрЛП(Объект.НомерДекларацииТовара)+"</declaration_number>  
	|<customs_code>"+Объект.КодТаможенногоОргана+"</customs_code>  
	|<decision_code>"+Объект.КодПринятогоРешения.Код+"</decision_code>  
	|<products_list>";
	Для Каждого Стр Из Объект.СерийныеНомера Цикл
		
		НСтр=Объект.Товары.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
		Если НСтр.Количество()=0 Тогда
			Продолжить;
		Конецесли;
		НСтр=НСтр[0];
		
	    Текст=Текст+"
		|<product>  
		|<kit>"+Стр.cis+"</kit>";
//		Если ЗначениеЗАполнено(Стр.НомерКороба) Тогда
//		    Текст=Текст+"
//			|<UITU>"+Стр.НомерКороба+"</UITU>";
//		КонецЕсли;
		Если НСтр.ДекларацияИлиСертификатСоответствия. ЭтоСертификат Тогда
			Текст=Текст+"
			|<certificate_type>CONFORMITY_CERTIFICATE</certificate_type>";
		Иначе
			Текст=Текст+"
			|<Certificate_Doc>CONFORMITY_CERTIFICATE</Certificate_Doc>"
		КонецЕсли;
		
		Текст=Текст+"
		|<certificate_number>"+НСтр.ДекларацияИлиСертификатСоответствия.Наименование+"</certificate_number>
		|<certificate_date>"+Формат(НСтр.ДекларацияИлиСертификатСоответствия.ДатаНачалаДействия,"ДФ=""дд.ММ.гггг""")+"</certificate_date>
		|<tnved_code>"+НСТР.КодТНВЭД.Код+"</tnved_code>";
		
		
		Текст=Текст+"
		|</product> ";
		
		
		
	КонецЦикла;
	    Текст=Текст+"
		|</products_list>
		|</vvod_import>
		|";
//		
				
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;
	
Возврат Текст 	
КонецФункции

Функция ОтправкаВводВОБорот(ВводВОБорот,Пользователь) Экспорт
	
	Объект=ВводВОборот.ПолучитьОбъект();
	ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	
	
//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОтправкаОтчетаОНанесении_ХамелеонЦРПТ(Объект.ТекущийПользователь,Объект.Ссылка);
	
//	Возврат;
	
	Если Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован") 
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан") Тогда
		
		Возврат Неопределено
	КонецЕсли;
	
	

	Объект.Записать();
	
	Если НЕ ПроверкаЗаполнения_1(Объект) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.МаркировкаОстатков") ТОгда
	//	ОтправитьМаркировкуОстатков();
	//	Возврат;
	//Конецесли;

	
	Thumbprint_1=ПолучитьИзПользователя(Пользователь);	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат Неопределено;
	КонецЕслИ;
	Объект.Записать();
	
	
	Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота")
		ИЛИ Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНужд")
		//ИЛИ Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОБоротаДляСобственныхНуждПокупателем")
		
		ТОгда
		ОтправитьВыводИзОборота(Объект,Thumbprint_1);
		Возврат Истина;
	Конецесли;
	
	
	
	Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании") ТОгда
		ОтправитьОтчетОбИспользовании(Объект,Thumbprint_1);
		Возврат Истина;
	Конецесли;
	
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		Сообщить("Не удалось получить токен по организации");
		Возврат Неопределено;
	Конецесли;
	
	
	Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотИмпорт") Тогда
		СформироватьФайлДляОтправки=СформироватьXmlФайлИмпорт(Объект);
	Попытка
				//Если НеПрошлаПроверкаИмпорт(СформироватьФайлДляОтправки) Тогда
				//	Объект.Статус="Отказ";
				//	Объект.ОшибкаОтправки="Проверка документа не прошла по схеме xsd";
				//	ЭтаФорма.Записать();
					//ПоказатьПредупреждение("");
				//	Возврат;
					
				//КонецЕсли;
				
				
			Исключение
			КонецПопытки;                                                                 
	ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборот") Тогда
		Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
			ОтправитьВводВОборотФармацевтика(Thumbprint_1,Объект);
			Возврат Истина;
		КонецЕсли;
			
			
		СформироватьФайлДляОтправки=СформироватьXmlФайлВвод(Объект);
	ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотКонтракт") Тогда
		СформироватьФайлДляОтправки=СформироватьXmlФайлВводКонтракт(Объект);
	ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.МаркировкаОстатков") Тогда	
		СформироватьФайлДляОтправки=СформироватьXmlФайлОстатков(Объект);
	ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВоборотТрансграничнаяТорговля") Тогда	
		СформироватьФайлДляОтправки=СформироватьТС(Объект);
	ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.НаТерриторииСтранЕАЭСКонтрактноеПроизводство") Тогда	
		СформироватьФайлДляОтправки=СформироватьТС_Контракт(Объект);
	ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотВозвратВРозницу") Тогда	
		СформироватьФайлДляОтправки=СформироватьВозвратИзРозницы(Объект);
	ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ИмпортСФТС") Тогда
		СформироватьФайлДляОтправки=СформироватьXmlФайлИмпортФТС(Объект);
	
	//Попытка
	//			Если НеПрошлаПроверкаВвод(СформироватьФайлДляОтправки) Тогда
	//				Объект.Статус="Отказ";
	//				Объект.ОшибкаОтправки="Проверка документа не прошла по схеме xsd";
	//				ЭтаФорма.Записать();
	//				//ПоказатьПредупреждение("");
	//				Возврат;
	//				
	//			КонецЕсли;
				
				
	//		Исключение
	//		КонецПопытки;
	КонецЕсли;			
		Подписанный="";
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
		
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

				
		ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1,Подписанный,Истина);
		
		//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//Подписанный,КодировкаТекста.UTF8,Ложь));
		
					Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
				Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
				 Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				
		Тело="{
		|""product_document"":"""+Добав+""",
		|""document_format"": ""MANUAL"",";
		
		Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборот") Тогда	
			Тело=Тело+"
			|""type"":""LP_INTRODUCE_GOODS"",";
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.МаркировкаОстатков") Тогда	
			Тело=Тело+"
			|""type"":""LP_INTRODUCE_OST"",";
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВоборотТрансграничнаяТорговля") Тогда	
			Тело=Тело+"
			|""type"":""CROSSBORDER"",";
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.НаТерриторииСтранЕАЭСКонтрактноеПроизводство") Тогда	
			Тело=Тело+"
			|""type"":""LP_INTRODUCE_GOODS_CROSSBORDER_CSD"",";
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотВозвратВРозницу") Тогда	
			Тело=Тело+"
			|""type"":""LP_RETURN"",";
			
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотКонтракт") Тогда	

			Тело=Тело+"
			|""type"":""LK_CONTRACT_COMMISSIONING"",";
			
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ИмпортСФТС") Тогда	

			Тело=Тело+"
			|""type"":""LP_FTS_INTRODUCE"",";
			
		КонецЕсли;
		Тело=Тело+"
		|""signature"":"""+Подписанный+"""}";
		
		      //ЗапишемВРегистр(Тело);
		
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
		Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотИмпорт") Тогда
			что=Thumbprint_1.что;
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/import/send?pg="+Что);
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборот") Тогда
			
			что=Thumbprint_1.что;

			
			//Если	 Thumbprint_1.НаименованиеСтенда="Обувь" Тогда
			//	HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg=shoes");
			//Иначе
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg="+Что);
				

			
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВоборотТрансграничнаяТорговля") 
			ИЛИ Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотВозвратВРозницу") 
			ИЛИ Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.НаТерриторииСтранЕАЭСКонтрактноеПроизводство") 
			
			Тогда
			что=Thumbprint_1.что;

			
			//Если	 Thumbprint_1.НаименованиеСтенда="Обувь" Тогда
			//	HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg=shoes");
			//Иначе
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg="+Что);
				
		ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.МаркировкаОстатков") Тогда
			
			
			что=Thumbprint_1.что;

			
			//Если	 Thumbprint_1.НаименованиеСтенда="Обувь" Тогда
			//	HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg=shoes");
			//Иначе
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg="+Что);
			Иначе
			что=Thumbprint_1.что;

			
			//Если	 Thumbprint_1.НаименованиеСтенда="Обувь" Тогда
			//	HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg=shoes");
			//Иначе
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg="+Что);
				
				
			//КонецЕсли;
		
		КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		
		
		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Ответ(ВводВОБорот,Текст1);
		КонецЕсли;
			
		
	
	
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
		ИЛИ Ответ.КодСостояния=201 
		Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			Объект._Order_ID=Текст1;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
				Возврат "ПЕРЕПОДКЛЮЧЕНИЕ";			
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	   КонецЕсли;
	Объект.Записать();
	
	
Конецфункции

Процедура ЗагружаемШаблоныНасервере(Текст1,Пользователь)
	
	
	Попытка
	
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Текст1);
	//Попытка
	
	//Попытка
	
	
			NNN=ПрочитатьJSON(ЧтениеJSON);
			
			
			
		
	Исключение
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Текст1);
			NNN=ПрочитатьJSON(ЧтениеJSON,Истина);
						
		
	//Исключение
	КонецПопытки;
	
	
Конецпроцедуры

Функция ЗаписатьСтрокуВОЫЩТ(Знач Стр)
	НомерКМ_1=Стрзаменить(Стр,символы.Таб+"<GS>",Символ(29));
	Запись = Новый ЗаписьJSON;	
	//ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, "", Истина,ЭкранированиеСимволовJson.СимволыВнеASCII);
	Запись.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,ЭкранированиеСимволовJSON.СимволыВнеASCII));
	ЗаписатьJSON(Запись, Новый Структура("code,codeType",НомерКМ_1, "datamatrix")); //"" : "ean8" : "ean13" : "qr" : "datamatrix"
	Возврат Запись.Закрыть()
Конецфункции

Функция ВозвратСтатусКМАльтернативный_ХамелеонЦРПТ(Пользователь,НомерКМ) Экспорт
	// Вставить содержимое обработчика.
			Thumbprint_1=ПолучитьИзПользователя(Пользователь);
			
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение("mobile.api.crpt.ru",,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение("mobile.api.crpt.ru",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
		НомерКМ=Стрзаменить(НомерКМ,Символ(29),символы.Таб+"<GS>");
				Тело=ЗаписатьСтрокуВОЫЩТ(НомерКМ);
	


					HTTPЗапрос=Новый HTTPЗапрос("mobile/check");
					HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("User-agent",ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(СтрЗаменить(Thumbprint_1.ТекущийПользователь.Организация.Наименование,"""","")+
	Thumbprint_1.ТекущийПользователь.Организация.ИНН));
					
					//HTTPЗапрос.Заголовки.Вставить("User-agent","Mozilla/5.0 (Windows NT 10.0 Win64x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36");					
					HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
					//HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
					//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
					///Константин           
					//Тело="task=getItemByGTIN&lng=ru&keyValue="+ДополнитьСтроку(Формат(Стр_1.GTINНаименованиеТовара,"ЧГ="));
			//		HTTPЗапрос.УстановитьТелоИзСтроки();
					//Тело);
					Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
					Если Ответ.КодСостояния=200 Тогда
						Текст1=Ответ.ПолучитьТелоКакСтроку();
						ЗагружаемШаблоныНасервере(Текст1,Пользователь);
					Иначе
						Возврат Неопределено						
							
						//КонецЕсли;
					КонецЕсли;
	
Конецфункции

Функция ПолучитьСтруктуруПВСД(UUID_ТВСД) Экспорт
УИД=UUID_ТВСД;


Если Не ЗначениеЗаполнено(УИД) Тогда
	Возврат ""
Конецесли;

				
		Сайт="mercury.vetrf.ru";
				

	Соединение = Новый HTTPСоединение(Сайт, , , , ,60, Новый ЗащищенноеСоединениеOpenSSL);   
	//Обработки._Запуск_ХамелеонМеркурий.УстановитьПрокси(Соединение,Истина);
	
	
	Запр=Новый HTTPЗапрос("pub/operatorui?_action=findVetDocumentFormByUuid&uuid="+УИД);
	//Запр.УстановитьТелоИзСтроки(ЗапросТекст,КодировкаТекста.UTF8);
//	Соединение.Send(ЗапрЙосТекст);
	//Возврат   Соединение;
	Результат = Соединение.ОтправитьДляОбработки(Запр);
	
				
	//НомерВ=Сред(Результат.ПолучитьТелоКакСтроку(),Найти(Результат.ПолучитьТелоКакСтроку(),"Номер ВСД</div><div class=""profile-info-value""><span class="""">")+62);
				ПолучСтр_1=Результат.ПолучитьТелоКакСтроку();
				
				
			//КонецЕсли;
	Чтение=Новый ЧтениеHTML;
	Чтение.УстановитьСтроку(ПолучСтр_1);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(Чтение);
			
	
	
	Для Каждого Стр_1 Из ДокументHTML.ПолучитьЭлементыПоИмени("a") Цикл
		Если найти(Стр_1.ТекстовоеСодержимое,"№")=1 Тогда
			СтруктураПВСД = Новый Структура;				
			Гиперссылка=Стр_1.Гиперссылка;
			Запр=Новый HTTPЗапрос("pub/"+Гиперссылка);
			Результат = Соединение.ОтправитьДляОбработки(Запр);
			ПолучСтр_1=Результат.ПолучитьТелоКакСтроку();
			
			
			
			Чтение=Новый ЧтениеHTML;
			Чтение.УстановитьСтроку(ПолучСтр_1);
			ПостроительDOM = Новый ПостроительDOM;
			ДокументHTML_1 = ПостроительDOM.Прочитать(Чтение);
			
			
			ПараметрВСД="";
			Значение="";
			
			Для Каждого Стр_П Из ДокументHTML_1.ПолучитьЭлементыПоИмени("div") Цикл
				Если Стр_П.Имякласса="profile-info-name" Тогда
					ПараметрВСД=СокрЛП(Стр_П.ТекстовоеСодержимое);
					Продолжить;
				КонецЕсли;
				Если Стр_П.Имякласса="profile-info-value" И ЗначениеЗаполнено(ПараметрВСД) Тогда
					Попытка
						СтруктураПВСД.Вставить(СтрЗаменить(ПараметрВСД," ","_"),СокрЛП(Стр_П.ТекстовоеСодержимое));
						
						
					Исключение
					КонецПопытки;

					ПараметрВСД="";
					Продолжить;
				КонецЕсли;
				ПараметрВСД="";
				
				
			Конеццикла;
			Если Найти(СтруктураПВСД.Наименование_и_форма_ВСД,"Производственный сертификат")>1 Тогда
				Возврат СтруктураПВСД;
			КонецЕсли;
			
			
		КонецЕсли;
		
	Конеццикла;
				
    Возврат СтруктураПВСД
КонецФункции



Функция ОпределениеГУИДВСДПоЗаписиЖурнала(ЗаписиЖурнала,Пользователь) Экспорт

	МассивСопоставления=Новый ТаблицаЗначений;
	МассивСопоставления.Колонки.Добавить("НомерЗаписи");
	МассивСопоставления.Колонки.Добавить("УИДВСД");

	Для Каждого Стр Из ЗаписиЖурнала Цикл
		Добав=МассивСопоставления.Добавить();
		Добав.НомерЗаписи=Стр;
		Добав.УИДВСД="";
		
	Конеццикла;
	
	
	HTTPСервисЗапрос=New COMObject("WinHttp.WinHttpRequest.5.1");
	Если НЕ ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПодключитьсяКМеркурию_ПОСТОЯННО(HTTPСервисЗапрос,Пользователь.Инициатор,Пользователь.ПарольМеркурий,Пользователь) Тогда
		Возврат МассивСопоставления;
	Конецесли;
	
	
	Для Каждого Стр_1 Из МассивСопоставления Цикл
		ГУИДЗаписиЖурнала=Стр_1.НомерЗаписи;
		
		Тело="recipient.commonEnterpriseNumber="+Пользователь.ИД_ВЭБ_Меркурий+"&number=&guidWithoutCheck="+ГУИДЗаписиЖурнала+"&inputProduction=null&productType=null&cargoVU.product.guid=null&cargoVU.subProduct.guid=null&qualityType=1&perishable=&originCountry=null&inputVetDocument=&_language=ru&_action=showRealTrafficVUForm&preview=true&listAction=listAllRealTrafficVU";
		
		Сайт=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСайт();
		HTTPСервисЗапрос.Open("POST", Сайт+"/operatorui", 0);
	//	Обработки._Запуск_ХамелеонМеркурий.УстановитьПрокси(HTTPСервисЗапрос);
		HTTPСервисЗапрос.SetRequestHeader("Content-Type","application/x-www-form-urlencoded");
		HTTPСервисЗапрос.Send(Тело);

		Чтение=Новый ЧтениеHTML;
		Чтение.УстановитьСтроку(HTTPСервисЗапрос.ResponseText);
		ПостроительDOM = Новый ПостроительDOM;
		ДокументHTML = ПостроительDOM.Прочитать(Чтение);

		Для Каждого Стр_20 Из ДокументHTML.ПолучитьЭлементыПоИмени("a") Цикл
			Если найти(СокрЛП(Стр_20.ТекстовоеСодержимое),"№")=1 Тогда
	 			СтруктураПВСД = Новый Структура;				
				//Гиперссылка=Стр_1.Гиперссылка;
				
				
				HTTPСервисЗапрос.Open("GET", Сайт+"/"+Стр_20.Гиперссылка, 0);
			//	Обработки._Запуск_ХамелеонМеркурий.УстановитьПрокси(HTTPСервисЗапрос);
				HTTPСервисЗапрос.SetRequestHeader("Content-Type","application/x-www-form-urlencoded");
				HTTPСервисЗапрос.Send();

				ПолучСтр_1=HTTPСервисЗапрос.ResponseText;
				
				Чтение=Новый ЧтениеHTML;
				Чтение.УстановитьСтроку(ПолучСтр_1);
				ПостроительDOM = Новый ПостроительDOM;
				ДокументHTML_1 = ПостроительDOM.Прочитать(Чтение);
				//
				//
				ПараметрВСД="";
				Значение="";
				
				НомерВСД="";
			//	Для Каждого Стр_П Из ДокументHTML_1.ПолучитьЭлементыПоИмени("input") Цикл
			//		//Если Стр_П.Имякласса="profile-info-value" И ЗначениеЗаполнено(ПараметрВСД) Тогда
			//			Попытка
			//				//СтруктураПВСД.Вставить(СтрЗаменить(ПараметрВСД," ","_"),СокрЛП(Стр_П.ТекстовоеСодержимое));
			//				
			//				Добав=ИнформацияОВСД.Добавить();
			//				Добав.Параметр=СтрЗаменить(Стр_П.Имя," ","_");
			//				Добав.Значение=СокрЛП(Стр_П.Значение);
			//				Если Добав.Параметр="printPk" Тогда
			//					НомерВСД= Добав.Значение;
			//					
			//				КонецЕсли;
			//			Исключение
			//			КонецПопытки;

			//	//		ПараметрВСД="";
			//	//		Продолжить;
			//	//	КонецЕсли;
			//	//	ПараметрВСД="";
			//		
			//		
			//Конеццикла;
			
			УИД="";
			    Для Каждого Стр_П Из ДокументHTML_1.ПолучитьЭлементыПоИмени("td") Цикл
					Если Стр_П.Имякласса="label" Тогда
						ПараметрВСД=СокрЛП(Стр_П.ТекстовоеСодержимое);
						Продолжить;
					КонецЕсли;
					Если Стр_П.Имякласса="value" И ЗначениеЗаполнено(ПараметрВСД) Тогда
						Попытка
							//СтруктураПВСД.Вставить(СтрЗаменить(ПараметрВСД," ","_"),СокрЛП(Стр_П.ТекстовоеСодержимое));
							
							//Добав=ИнформацияОВСД.Добавить();
							//Добав.Параметр=СтрЗаменить(ПараметрВСД," ","_");
							//Добав.Значение=СокрЛП(Стр_П.ТекстовоеСодержимое);
							ПараметрВСД=СтрЗаменить(ПараметрВСД," ","_");
							Если ПараметрВСД="Уникальный_идентификатор_ВСД:" Тогда
								УИД=Стр_П.ТекстовоеСодержимое;
								УИД=НРег(СтрЗаменить(УИД,"-",""));
								
								УИД=Сред(УИД,1,8)+"-"+Сред(УИД,9,4)+"-"+Сред(УИД,13,4)+"-"+Сред(УИД,17,4)+"-"+Сред(УИД,21);
								Прервать;
							КонецЕсли;
						Исключение
						КонецПопытки;

						ПараметрВСД="";
						Продолжить;
					КонецЕсли;
					ПараметрВСД="";
					
					
				Конеццикла;
				
				
				//Элементы.ИнформацияОВСД.Заголовок="Информация о ВСД № "+НомерВСД+", UUID "+УИД
				
			
	//			Если Найти(СтруктураПВСД.Наименование_и_форма_ВСД,"Производственный сертификат")>1 Тогда
	//				Возврат СтруктураПВСД;
	//			КонецЕсли;
				
				
			КонецЕсли;
		
		Конеццикла;
		Стр_1.УИДВСД=УИД
	Конеццикла;
	
	Возврат МассивСопоставления;
КонецФункции

Процедура ПолучитьСимволыСКапчи(КапчаИД,КлючАнтиКапчи,ТекстСКартинки)
	СерверАнтиКапчи="rucaptcha.com";
	АдресРесурса = "/res.php?key="+КлючАнтиКапчи+"&action=get&id=" + КапчаИД;
	Попытка
		ТекП=ХранилищеСистемныхНастроек.Загрузить("ТекущийПользователь","ТекущийПользователь");	

		Если ЗначениеЗАполнено(ТекП.АдресПрокси) Тогда
			ИнтернетПрокси =Новый ИнтернетПрокси;
			ИнтернетПрокси .Установить("http",ТекП.АдресПрокси,ТекП.ПортПрокси,ТекП.ПользовательПрокси,ТекП.ПарольПрокси);
			///ИнтернетПрокси = Новый ИнтернетПрокси;
			//ИнтернетПрокси.Пользователь = Прокси.ПользовательПрокси;
			//ИнтернетПрокси.Пароль		= Прокси.ПарольПрокси;
			//ИнтернетПрокси.Установить("HTTP", Прокси.АдресПрокси, Прокси.ПортПрокси,Прокси.ПользовательПрокси,Прокси.ПарольПрокси);

			HTTP =  Новый HTTPСоединение(СерверАнтиКапчи,,,,ИнтернетПрокси);
		Иначе
			HTTP =  Новый HTTPСоединение(СерверАнтиКапчи);
		КонецЕсли;	
		
		//HTTP =  Новый HTTPСоединение(СерверАнтиКапчи);
		ФайлРезультатаКапчиИД = ПолучитьИмяВременногоФайла("TXT");
		
		HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
		
		ОтветКапчиИД = HTTP.Получить(HTTPЗапрос,ФайлРезультатаКапчиИД);
		ОтветКапчиИД = Новый ТекстовыйДокумент();
		ОтветКапчиИД.Прочитать(ФайлРезультатаКапчиИД, КодировкаТекста.UTF8);
		
		ТекстОтветаСимволыСКапчи = ОтветКапчиИД.ПолучитьТекст();
		
		Если Лев(ТекстОтветаСимволыСКапчи,3) = "OK|" Тогда
			ТекстСКартинки = СокрЛП(СтрЗаменить(ТекстОтветаСимволыСКапчи,"OK|",""));
			//Сообщение = Новый СообщениеПользователю;
			//Сообщение.Текст = СимволыСКапчи + " - символы с капчи";
			//Сообщение.Сообщить(); 
		ИначеЕсли СокрЛП(ТекстОтветаСимволыСКапчи) = "CAPCHA_NOT_READY" Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "" + ТекстОтветаСимволыСКапчи + Символы.ПС + "Ждем еще 5 секунд";
			Сообщение.Сообщить(); 
			
			Задержка_Номральная(5);
			ПолучитьСимволыСКапчи(КапчаИД,КЛючАнтиКапчи,ТекстСКартинки);
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Капча не распознана. Код ошибки: " + ТекстОтветаСимволыСКапчи;
			Сообщение.Сообщить();	
		КонецЕсли;		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось установить соединение и получить символы с капчи. " + ОписаниеОшибки();
		Сообщение.Сообщить(); 	
	КонецПопытки;
КонецПроцедуры

Процедура ОтправитьКапчуИПолучитьИДКапчи(ФайлРезультатаКапчи,КлючАнтиКапчи,ТекстСКартинки,русские=Ложь)
	//КлючАнтиКапчи=ВернутьКонстанту();
	СерверАнтиКапчи="rucaptcha.com";
	АдресРесурса = "/in.php";
	
	Попытка
		ТекП=ХранилищеСистемныхНастроек.Загрузить("ТекущийПользователь","ТекущийПользователь");	

		Если ЗначениеЗАполнено(ТекП.АдресПрокси) Тогда
			ИнтернетПрокси =Новый ИнтернетПрокси;
			ИнтернетПрокси .Установить("http",ТекП.АдресПрокси,ТекП.ПортПрокси,ТекП.ПользовательПрокси,ТекП.ПарольПрокси);

			HTTP =  Новый HTTPСоединение(СерверАнтиКапчи,,,,ИнтернетПрокси);
		Иначе
			HTTP =  Новый HTTPСоединение(СерверАнтиКапчи);
		КонецЕсли;	

		
		
		ФайлЗапроса = Новый Файл(ПолучитьИмяВременногоФайла("TXT"));
		
		Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
		
		ФайлОтправки = Новый ЗаписьТекста(ФайлЗапроса.ПолноеИмя, КодировкаТекста.UTF8, Символы.ПС, Ложь); 

		ФайлОтправки.ЗаписатьСтроку("Content-Disposition: form-data; name=""method""" + Символы.ПС); 				
		ФайлОтправки.ЗаписатьСтроку("post");
		
		ФайлОтправки.ЗаписатьСтроку("--" + Boundary); 
		ФайлОтправки.ЗаписатьСтроку("Content-Disposition: form-data; name=""key""" + Символы.ПС); 				
		ФайлОтправки.ЗаписатьСтроку(XMLСтрока(СокрЛП(КлючАнтиКапчи)));
		
		Если Русские ТОгда
			ФайлОтправки.ЗаписатьСтроку("--" + Boundary); 
			ФайлОтправки.ЗаписатьСтроку("Content-Disposition: form-data; name=""language""" + Символы.ПС); 				
			ФайлОтправки.ЗаписатьСтроку(XMLСтрока("1"));
		КонецЕсли;
		
		ФайлОтправки.ЗаписатьСтроку("--" + Boundary); 
		ФайлОтправки.ЗаписатьСтроку("Content-Disposition: form-data; name=""file""; filename=""" + ФайлРезультатаКапчи + """");		
		ФайлОтправки.ЗаписатьСтроку("Content-Type: image/png" + Символы.ПС); 
		
		ФайлОтправки.Закрыть(); 
		
		МассивФайловДляОбъединения = Новый Массив;
		МассивФайловДляОбъединения.Добавить(ФайлЗапроса.ПолноеИмя);		
		МассивФайловДляОбъединения.Добавить(ФайлРезультатаКапчи);
		
		ИмяФайлаОтправкиКонец = ПолучитьИмяВременногоФайла("txt"); 
    	ФайлОтправкиКонец = Новый ЗаписьТекста(ИмяФайлаОтправкиКонец, КодировкаТекста.UTF8, Символы.ПС, Ложь);
		ФайлОтправкиКонец.ЗаписатьСтроку(Символы.ПС + "--" + Boundary + "--");
		ФайлОтправкиКонец.Закрыть();
		
		ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("txt");
		МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиКонец);
    	ОбъединитьФайлы(МассивФайловДляОбъединения, ИмяФайлаОтправки);
		
		ЗаголовокHTTP = Новый Соответствие(); 
	    ЗаголовокHTTP.Вставить("Content-Type", "multipart/form-data; boundary=" + Boundary);
		ЗаголовокHTTP.Вставить("Accept-Language", "ru");
		
		HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, ЗаголовокHTTP) ;
		HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаОтправки);
		
	        ФайлРезультата = ПолучитьИмяВременногоФайла("TXT");
		
		Ответ = HTTP.ОтправитьДляОбработки(HTTPЗапрос,ФайлРезультата);
		Ответ = Новый ТекстовыйДокумент();
		Ответ.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
		
		ТекстОтвета = Ответ.ПолучитьТекст();
		//Сообщение = Новый СообщениеПользователю;
		//Сообщение.Текст = ТекстОтвета + " После передачи капчи ";
		//Сообщение.Сообщить(); 
		Если Лев(ТекстОтвета,3) = "OK|" Тогда
			КапчаИД = СокрЛП(СтрЗаменить(ТекстОтвета,"OK|",""));
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ждем 10 секунд...запущен процесс автоматического распознавания капчи";
			Сообщение.Сообщить(); 
			
			Задержка_Номральная(10);
			
			ПолучитьСимволыСКапчи(КапчаИД,КЛючАнтиКапчи,ТекстСКартинки);
		ИначеЕсли ТекстОтвета = "ERROR_NO_SLOT_AVAILABLE" Тогда
			Задержка_Номральная(10);
			ОтправитьКапчуИПолучитьИДКапчи(ФайлРезультатаКапчи,КлючАнтиКапчи,ТекстСКартинки,русские);	
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Капча отправлена, но есть ошибки. Код ошибки: " + ТекстОтвета;
			Сообщение.Сообщить();	
		КонецЕсли; 
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось установить соединение и получить картинку капчи. " + ОписаниеОшибки();
		Сообщение.Сообщить(); 
	КонецПопытки;
	
КонецПроцедуры

Функция ЧислоDecToHex(Знач Исходное, Знач НужноЦифр = 2)
	ЧислаБайтHex = "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF";
	
	Если НужноЦифр = 2 Тогда
		Возврат Сред(ЧислаБайтHex, Исходное * 2 + 1, 2);
	КонецЕсли; 
	
	ЧислаHex = "0123456789ABCDEF";
	Результат = "";
	Для Цифр = 1 По НужноЦифр Цикл
		ТекЦифра = Исходное % 16;
		Исходное = Цел(Исходное / 16);
		Результат = Сред(ЧислаHex, ТекЦифра + 1, 1) + Результат;
	КонецЦикла; 
	Возврат Результат;
КонецФункции // ЧислоDecToHex()

Функция   ОбновитьКапчу_xml(Request_HTTP,ИмяПользователя,Пароль,СайтИДП) Экспорт
	ОтветXML=Request_HTTP.ResponseText;
	Пока Найти(ОтветXML,"Подтвердите что вы не робот")>0 Цикл
		КлючАнтиКапча=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КлюКапчи;
		Если СокрЛП(КлючАнтиКапча)="" Тогда
			Сообщить("Для продолжения работы в ВЕБ необходимо заполнить поле Ключ для определения капчи в обработке ЗапускМеркурия-вкладка настройки");
			Возврат "";
		КонецЕсли;
		Картинка=Сред(ОтветXML,Найти(ОтветXML,"url(data:image/png;base64"));
		Картинка=Сред(Картинка,Найти(Картинка,"(")+1);
		Картинка=Сред(Картинка,1,Найти(Картинка,")")-1);
		ДвоичныеД=Base64Значение(Сред(Картинка,23));
		
		TempFile = ПолучитьИмяВременногоФайла("png"); //GetTempFileName("png");
		ДвоичныеД.Записать(TempFile);
		
		ТексСКартинки="";
		ОтправитьКапчуИПолучитьИДКапчи(TempFile,КлючАнтиКапча,ТексСКартинки);
		Если ТексСКартинки="" Тогда
			Возврат Ложь;
			
		Иначе
			
			Локатион=ОтветXML;
			Локатион=Сред(Локатион,Найти(Локатион,"form action=")+13);
			Локатион=Сред(Локатион,1,Найти(Локатион,"""")-1);
			
			//Ответ.getResponseHeader("Location");
	//		Локатион=Сред(Локатион,Найти(Локатион,"idp/profile/"));
			
			
			Если СокрЛП(Локатион)="" Тогда
				Возврат Ложь;
			КонецЕсли;
			//КэшТ_1=Ответ.Заголовки["Set-Cookie"];
			
			//Заголовки.Вставить("Cookie", КэшТ_1);
			
	//		HTTPЗапрос = Новый HTTPЗапрос(Локатион);
			//HTTPСервисЗапрос.Send();
			//HTTPСервисЗапрос.WaitForResponse();
			

			
			//Ответ=HTTPСервисЗапрос;
			Request_HTTP.Open("POST", СайтИДП+Локатион, 0);
//			Обработки._Запуск_ХамелеонМеркурий.УстановитьПрокси(Request_HTTP);
			
			Request_HTTP.SetRequestHeader("Content-Type","application/x-www-form-urlencoded; charset=UTF-8");
			Request_HTTP.Send("captcha="+ТексСКартинки+"&_eventId_proceed=");
			Request_HTTP.WaitForResponse();
			
			ОтветXML=Request_HTTP.ResponseText;
		КонецЕсли;
	Конеццикла;;
	
		Чтение=Новый ЧтениеXML;
		Чтение.УстановитьСтроку(ОтветXML);
		SAM="";
		Если Найти(ОтветXML,"Вход в систему")>0 Тогда
			Сообщить("Не правильный логин или пароль");
			Возврат Ложь;
		КонецЕсли;
		Пока Чтение.Прочитать() Цикл
			Если ВРЕГ(Чтение.Имя)="INPUT" И Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ВРЕГ(Чтение.ЗначениеАтрибута("name"))="SAMLRESPONSE" Тогда
					SAM=Чтение.ЗначениеАтрибута("value");
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦиклА;
	Возврат 		SAM

	
	//ЗаголовокHTTP = Новый Соответствие(); 
	//ЗаголовокHTTP.Вставить("Accept", "image/png, image/svg+xml, image/*;q=0.8, */*;q=0.5");
	////ЗаголовокHTTP.Вставить("Cookie", Статус_Ntr.Заголовки["Set-Cookie"]);
	//ЗаголовокHTTP.Вставить("Connection", "Keep-Alive");
	////
	////НовыйКапча=Request_HTTP.Получить(Новый HTTPЗапрос("",ЗаголовокHTTP));
	////
	////
	/////ТекстINSTANCE = ЗаполнитьСтруктуруИзОтветаJSON(НовыйКапча.ПолучитьТелоКакСтроку())["instance"];

	//
	//
	//TempFile = TempFilesDir() + "Captcha.png"; //GetTempFileName("png");
	//
	//
	//ЗаголовокHTTP = Новый Соответствие(); 
	//ЗаголовокHTTP.Вставить("Accept", "image/png, image/svg+xml, image/*;q=0.8, */*;q=0.5");
	//ЗаголовокHTTP.Вставить("Cookie", Статус_Ntr.Заголовки["Set-Cookie"]);
	//ЗаголовокHTTP.Вставить("Connection", "Keep-Alive");
	//
	//НовыйКапча=Request_HTTP.Получить(Новый HTTPЗапрос("1/botdetect.php?get=image&c=FsrarCaptcha&t="+ТекстINSTANCE,ЗаголовокHTTP),TempFile);
	//
	//
	////Request.Open("GET", "https://service.fsrar.ru/captcha/link", 0);
	////Request.SetRequestHeader("Accept", "text/html, application/xhtml+xml, */*");
	////Request.Send();
	////Request.WaitForResponse();
	////ТекстINSTANCE = ЗаполнитьСтруктуруИзОтветаJSON(Request.responseText)["instance"];
	////
	//////Pos = Найти(Request.ResponseText, "BotDetect.Init('SampleCaptcha', '");
	//////Текст=Сред(Request.ResponseText,Pos+33);
	//////Текст_INSTANCEDID=Сред(Текст,1,Найти(Текст,"'")-1);
	////

	////Request.Open("GET","https://service.fsrar.ru/captcha/botdetect.php?get=image&c=FsrarCaptcha&t="+ТекстINSTANCE, 0);
	////Request.SetRequestHeader("Accept", "image/png, image/svg+xml, image/*;q=0.8, */*;q=0.5");
	////Request.Send();
	////Request.WaitForResponse();	
	////
	////Stream = New COMObject("ADODB.Stream");
	////Stream.Mode = 3;
	////Stream.Type = 1;
	////Stream.Open();
	////Stream.Write(Request.ResponseBody);	
	////Stream.SaveToFile(TempFile, 2);
	////Stream.Close();
	//
	//АдресКапчи = PutToTempStorage(New Picture(TempFile, True), UUID);
	////DeleteFiles(TempFile);
	//ТекстСКартинки = "";
	//
	//Если ЗначениеЗаполнено(КлючАнтиКапчи) Тогда
	//	ОтправитьКапчуИПолучитьИДКапчи(TempFile,КлючАнтиКапчи,ТекстСКартинки,Истина);
	//КонецЕсли;
КонецФункции

Функция ТекстUnicodeToUTF8(Стр) ЭКспорт
	ЧислаБайтHex = "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF";
	БезопасныеСимволы = "-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~";
	ИтогСтр = "";
	
	Для й = 1 По СтрДлина(Стр) Цикл
		ТекСимв = Сред(Стр, й, 1);
		
		Если ТекСимв = " " Тогда
			ИтогСтр = ИтогСтр + "+";
			Продолжить;
		КонецЕсли; 
		Если Найти(БезопасныеСимволы, ТекСимв) > 0 Тогда
			ИтогСтр = ИтогСтр + ТекСимв;
			Продолжить;
		КонецЕсли; 
		
		Код = КодСимвола(ТекСимв);
		Если Код < 128 Тогда
			ИтогСтр = ИтогСтр + "%" + ЧислоDecToHex(Код);
		Иначе
			///////		Конвертация Unicode в UTF-8 в полном соответствии со спецификацией!  (http://ru.wikipedia.org/wiki/UTF-8)
			Делитель = 32;	Нашлёпка = 8;	КодХекс = "";
			Пока Делитель > 4 Цикл
				//////	Установка следующих за первым байтов
				ТекБайт = Код % 64;
				КодХекс = "%" + ЧислоDecToHex(128 + ТекБайт) + КодХекс;
				
				Код		= Цел(Код / 64);
				//////	Проверка на закрывающий байт
				Если Код < Делитель Тогда
					КодХекс = "%" + ЧислоDecToHex((Нашлёпка-2) * Делитель + Код) + КодХекс;
					Прервать;
				КонецЕсли;
				//////	Переход к следующему уровню закрытия
				Делитель = Делитель / 2;
				Нашлёпка = Нашлёпка * 2;
			КонецЦикла; 
			ИтогСтр = ИтогСтр + КодХекс;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ИтогСтр;
КонецФункции // ТекстUnicodeToUTF8()

Функция ПолучитьСайт() Экспорт
		Сайт="https://mercury.vetrf.ru/hs";

	Возврат Сайт;
КонецФункции


Функция ПодключитьсяКМеркурию_ПОСТОЯННО(HTTPСервисЗапрос,Знач ИмяП,Знач Пароль,Пользователь=Неопределено) Экспорт           
	
	Попытка
		
	//ТекПольз=ХранилищеСистемныхНастроек.Загрузить("ТекущийПользователь","ТекущийПользователь");	
	СтрП=Новый  Структура("ИмяП,Пароль",ИмяП,Пароль);
	Если СтрП=Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	ИмяПользователя=СтрП.ИмяП;
	Пароль=ТекстUnicodeToUTF8(СтрП.Пароль);
	
	Попытка
		СледующийЭтап="";
		
			
		СайтОбщий="mercury.vetrf.ru";
		Сайт="https://mercury.vetrf.ru/hs";
			СайтИДП="https://idp.vetrf.ru";
		HTTPСервисЗапрос.Open("GET", Сайт+"/", 0);
//		Обработки._Запуск_ХамелеонМеркурий.УстановитьПрокси(HTTPСервисЗапрос);
			Коок="";
		
		Для сч=1 По 10 Цикл
			
			HTTPСервисЗапрос.SetRequestHeader("Content-Type","application/x-www-form-urlencoded");
			HTTPСервисЗапрос.SetRequestHeader("Accept", "text/html, application/xhtml+xml, */*");
			HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
			HTTPСервисЗапрос.SetRequestHeader("Accept-Language", "ru-RU");
//			Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko");
			HTTPСервисЗапрос.SetRequestHeader("Connection" ,"Keep-Alive");
		//	HTTPСервисЗапрос.SetRequestHeader("Host" ,"mercury.vetrf.ru");
			//HTTPЗапрос = Новый HTTPЗапрос("hs/",Заголовки);
//			Ответ=HTTPСервисЗапрос_Merc.Получить(HTTPЗапрос);
			HTTPСервисЗапрос.Send();
			HTTPСервисЗапрос.WaitForResponse();
			Ответ=HTTPСервисЗапрос;
			ВсеКуки=HTTPСервисЗапрос.getAllResponseHeaders();
			
			Для Сч_1=1 По СтрЧислоСтрок(ВсеКуки) Цикл
				
				ПолучитьСтроку=СтрПолучитьСтроку(ВсеКуки,Сч_1);
				Если (Найти(ПолучитьСтроку,"Set-Cookie")=1 
					И Найти(ПолучитьСтроку,"JSESSIONID=")>0)
					ИЛИ (Найти(ПолучитьСтроку,"set-cookie")=1 
					И Найти(ПолучитьСтроку,"JSESSIONID=")>0)
					Тогда
					Коок=Сред(ПолучитьСтроку,13);
					Коок=Сред(Коок,1,Найти(Коок,";")-1);
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Ответ.Status=302 Тогда
				СледующийЭтап=истина;
				Прервать;
			КонецЕсли;
		КонецЦиклА;
		Если Не СледующийЭтап Тогда
			Возврат Ложь;
		КонецЕсли;
		
		
		
		HTTPСервисЗапрос.Open("GET", Сайт+"/operatorui?_action=login&_language=ru", 0);
//		Обработки._Запуск_ХамелеонМеркурий.УстановитьПрокси(HTTPСервисЗапрос);
		HTTPСервисЗапрос.SetRequestHeader("Cookie",Коок);
		
		HTTPСервисЗапрос.SetRequestHeader("Accept", "text/html, application/xhtml+xml, */*");
		HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding","gzip, deflate");
		HTTPСервисЗапрос.SetRequestHeader("Accept-Language", "ru-RU");
//		Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko");
		HTTPСервисЗапрос.SetRequestHeader("Connection" ,"Keep-Alive");
		//HTTPСервисЗапрос.SetRequestHeader("Host" ,"mercury.vetrf.ru");
		//HTTPСервисЗапрос.SetRequestHeader("Cookie" ,КэшТ);
//		HTTPЗапрос = Новый HTTPЗапрос("/operatorui?_action=login&_language=ru",Заголовки);
		HTTPСервисЗапрос.Send();
		HTTPСервисЗапрос.WaitForResponse();
		
		Ответ=HTTPСервисЗапрос;
		Если Ответ.status<>200 Тогда
			Возврат Ложь;
		КонецЕсли;
		ОтветXML=Ответ.Responsetext;
		//Кэш_3=Ответ.Заголовки["Set-Cookie"];
		Чтение=Новый ЧтениеXML;
		Чтение.УстановитьСтроку(ОтветXML);
		SAM="";
		Пока Чтение.Прочитать() Цикл
			Если Врег(Чтение.Имя)="INPUT" И Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если Чтение.ЗначениеАтрибута("NAME")="SAMLRequest" Тогда
					SAM=Чтение.ЗначениеАтрибута("VALUE");
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦиклА;
		
		Если Не ЗначениеЗаполнено(SAM) ТОгда
			Возврат Ложь;
		КонецЕсли;
		
		HTTPСервисЗапрос_1=New COMObject("WinHttp.WinHttpRequest.5.1");
	Попытка
		// ************************** Начало блока по отключению защищенного соединения **********
		Скрипт= Новый COMОбъект("MSScriptControl.ScriptControl");
		Скрипт.language="javascript";
		Скрипт.AddObject("WinHttp",HTTPСервисЗапрос);
		
		Скрипт.Eval("WinHttp.Option(4)=13056");//intSslErrorIgnoreFlags Игноировать ошбибки при SSL соединении
		//Скрипт.Eval("WinHttp.Option(6)=true");//blnEnableRedirects Разрешить перенаправления
		//Скрипт.Eval("WinHttp.Option(12)=true");//blnEnableHttpsToHttpRedirects Разрешить перенаправления с защищенного на не защиещенное соединение
		// ************************** Конец блока по отключению защищенного соединения **********	
	Исключение
	КонецПопытки;
		
		
		
	Попытка
			Скрипт= Новый COMОбъект("MSScriptControl.ScriptControl");
    Скрипт.language="javascript";
    
    Скрипт.AddObject("HTTPСервисЗапрос_1",HTTPСервисЗапрос_1);
    Скрипт.Eval("HTTPСервисЗапрос_1.Option(4)=13056");//intSslErrorIgnoreFlags
    
    Скрипт.Eval("HTTPСервисЗапрос_1.Option(6)=true");//blnEnableRedirects
    
    Скрипт.Eval("HTTPСервисЗапрос_1.Option(12)=true");//blnEnableHttpsToHttpRedirects
	Исключение
	КонецПопытки;
		
		HTTPСервисЗапрос_1.Open("POST", СайтИДП+"/idp/profile/SAML2/POST/SSO", 0);
//		Обработки._Запуск_ХамелеонМеркурий.УстановитьПрокси(HTTPСервисЗапрос_1);
		
		//Заголовки.Вставить("Cookie",КэшТ);
		//Заголовки=Новый Соответствие;
		HTTPСервисЗапрос_1.SetRequestHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
	//	HTTPСервисЗапрос.SetRequestHeader("Accept-Encoding", "gzip, deflate, br");
	//	HTTPСервисЗапрос.SetRequestHeader("Accept-Language", "ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
		HTTPСервисЗапрос_1.SetRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko");
		HTTPСервисЗапрос_1.SetRequestHeader("Content-Type","application/x-www-form-urlencoded");
	//	HTTPСервисЗапрос.SetRequestHeader("Referer", Сайт+"/operatorui?_action=login&_language=ru");
		HTTPСервисЗапрос_1.SetRequestHeader("Upgrade-Insecure-Requests", "1");
		
		HTTPСервисЗапрос_1.SetRequestHeader("Connection", "keep-alive");
		//HTTPСервисЗапрос.SetRequestHeader("Host", "idp.vetrf.ru");
//		HTTPЗапрос.УстановитьТелоИзСтроки("SAMLRequest="+КодироватьСтроку(SAM,СпособКодированияСтроки.КодировкаURL),КодировкаТекста.ANSI);
		HTTPСервисЗапрос_1.Send("SAMLRequest="+КодироватьСтроку(SAM,СпособКодированияСтроки.КодировкаURL));
		HTTPСервисЗапрос_1.WaitForResponse();
		
		Ответ=HTTPСервисЗапрос_1;
		Локатион=HTTPСервисЗапрос_1.ResponseText;
		Локатион=Сред(Локатион,Найти(Локатион,"form action=")+13);
		Локатион=Сред(Локатион,1,Найти(Локатион,"""")-1);
		
		//Ответ.getResponseHeader("Location");
//		Локатион=Сред(Локатион,Найти(Локатион,"idp/profile/"));
		
		
		Если СокрЛП(Локатион)="" Тогда
			Возврат Ложь;
		КонецЕсли;
		//КэшТ_1=Ответ.Заголовки["Set-Cookie"];
		
		//Заголовки.Вставить("Cookie", КэшТ_1);
		
//		HTTPЗапрос = Новый HTTPЗапрос(Локатион);
		HTTPСервисЗапрос_1.Open("GET", СайтИДП+""+Локатион, 0);
//		Обработки._Запуск_ХамелеонМеркурий.УстановитьПрокси(HTTPСервисЗапрос_1);
		HTTPСервисЗапрос_1.Send();
		HTTPСервисЗапрос_1.WaitForResponse();
		Если Найти(HTTPСервисЗапрос_1.ResponseText,"Подтвердите что вы не робот")>0 Тогда
			Если СокрЛП(РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КлюКапчи) Тогда
				
				
				
			Иначе
				Сообщить("Для продоолжения работы в Меркурии необходимо получить ключ для определения КАПЧИ и вбить в настройки");
				Возврат Ложь;
				
			КонецЕсли;
			
			
			
		КонецЕсли;
		
		
		Ответ=HTTPСервисЗапрос_1;
		HTTPСервисЗапрос_1.Open("POST", СайтИДП+Локатион, 0);
//		Обработки._Запуск_ХамелеонМеркурий.УстановитьПрокси(HTTPСервисЗапрос_1);
		
		HTTPСервисЗапрос_1.SetRequestHeader("Content-Type","application/x-www-form-urlencoded; charset=UTF-8");
		HTTPСервисЗапрос_1.Send("j_username="+ИмяПользователя+"&j_password="+Пароль+"&_eventId_proceed=");
		HTTPСервисЗапрос_1.WaitForResponse();
		
		SAM=ОбновитьКапчу_xml(HTTPСервисЗапрос_1,ИмяПользователя,Пароль,СайтИДП);
		
		Если Не ЗначениеЗаполнено(SAM) ТОгда
			Возврат Ложь;
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	//Если ТекущийРежим=3 ИЛИ ТекПольз.ВетеринарныйВрач Тогда
	//	HTTPСервисЗапрос.Open("POST", Сайт+"/saml/SSO/alias/gve", 0);
	//Иначе
		HTTPСервисЗапрос.Open("POST", Сайт+"/saml/SSO/alias/hs", 0);		
	//КонецЕсли;
//	Обработки._Запуск_ХамелеонМеркурий.УстановитьПрокси(HTTPСервисЗапрос);
	HTTPСервисЗапрос.SetRequestHeader("Content-Type","application/x-www-form-urlencoded");
//	HTTPСервисЗапрос.SetRequestHeader("Cookie",Коок);
	HTTPСервисЗапрос.SetRequestHeader("Accept","text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8");
	HTTPСервисЗапрос.SetRequestHeader("Cache-Control","max-age=0");
	HTTPСервисЗапрос.SetRequestHeader("Connection","keep-alive");
	//HTTPСервисЗапрос.SetRequestHeader("Content-Type","application/x-www-form-urlencoded");
	HTTPСервисЗапрос.SetRequestHeader("Host",СайтОбщий);
	HTTPСервисЗапрос.SetRequestHeader("Referer",СайтИДП+""+Локатион);
	HTTPСервисЗапрос.SetRequestHeader("Upgrade-Insecure-Requests","1");
	
	//Заголовки.Вставить("Content-Type","application/octet-stream");
	//Заголовки.Вставить("X-Requested-With", "XMLHttpRequest");
	
	//Заголовки.Вставить("Connection", "Keep-Alive");
//	Заголовки.Вставить("Host", "idp.vetrf.ru");
//	Заголовки.Вставить("Cookie",КэшТ);
	
	//HTTPЗапрос = Новый HTTPЗапрос("hs/saml/SSO/alias",Заголовки);
		HTTPСервисЗапрос.Send("SAMLResponse="+ТекстUnicodeToUTF8(SAM));
	HTTPСервисЗапрос.WaitForResponse();
	
		ВсеКуки=HTTPСервисЗапрос.getAllResponseHeaders();
		
		Для Сч=1 По СтрЧислоСтрок(ВсеКуки) Цикл
			
			ПолучитьСтроку=СтрПолучитьСтроку(ВсеКуки,Сч);
			Если (Найти(ПолучитьСтроку,"Set-Cookie")=1 
				И Найти(ПолучитьСтроку,"JSESSIONID=")>0)
				ИЛИ (Найти(ПолучитьСтроку,"set-cookie")=1 
				И Найти(ПолучитьСтроку,"JSESSIONID=")>0)
				
				Тогда
				Коок=Сред(ПолучитьСтроку,13);
				Коок=Сред(Коок,1,Найти(Коок,";")-1);
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
	
//	ОтчетОт=HTTPСервисЗапрос.ResponseText;
	
	  	ХранилищеСистемныхНастроек.Сохранить("КЭШ_ХАМЕЛЕОН_МЕРКУРИЙ","КЭШ_ХАМЕЛЕОН_МЕРКУРИЙ",Коок);	
	
// 	HTTPЗапрос.УстановитьТелоИзСтроки("SAMLResponse="+ТекстUnicodeToUTF8(SAM),КодировкаТекста.ANSI);
	
	//Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Если HTTPСервисЗапрос.Status<>302 
		И HTTPСервисЗапрос.Status<>200
		Тогда
		Возврат Ложь;
	КонецЕсли;
	
	HTTPСервисЗапрос.Open("GET", Сайт+"/operatorui?_action=login&_language=ru", 0);
//	Обработки._Запуск_ХамелеонМеркурий.УстановитьПрокси(HTTPСервисЗапрос);
	//HTTPСервисЗапрос.SetRequestHeader("Cookie",Коок);
	
	
	
//	Заголовки=Новый Соответствие;
	//Заголовки.Вставить("Cache-Control", "no-cache");
	//Заголовки.Вставить("Accept", "text/html, application/xhtml+xml, */*");
	//Заголовки.Вставить("Accept-Encoding", "gzip,deflate");
	//Заголовки.Вставить("Accept-Language", "ru-RU");
	//Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko");
	HTTPСервисЗапрос.SetRequestHeader("Content-Type","application/x-www-form-urlencoded");
	//Заголовки.Вставить("Content-Type","application/octet-stream");
	//Заголовки.Вставить("X-Requested-With", "XMLHttpRequest");
	
	//Заголовки.Вставить("Connection", "Keep-Alive");
//	Заголовки.Вставить("Host", "idp.vetrf.ru");
	//Заголовки.Вставить("Cookie",Кэш);
	
	//HTTPЗапрос = Новый HTTPЗапрос("hs/operatorui?_action=login&_language=ru",Заголовки);
	
	HTTPСервисЗапрос.Send();
	HTTPСервисЗапрос.WaitForResponse();
	
	
	HTTPСервисЗапрос.Open("POST", Сайт+"/operatorui?_action=login&_language=ru", 0);
//	Обработки._Запуск_ХамелеонМеркурий.УстановитьПрокси(HTTPСервисЗапрос);
	//HTTPСервисЗапрос.SetRequestHeader("Cookie",Коок);
	HTTPСервисЗапрос.Send();
	HTTPСервисЗапрос.WaitForResponse();
	КэшТ="";
//	Попытка
//		КэшТ=HTTPСервисЗапрос.getResponseHeader("Set-Cookie");
//	Исключение
//	КонецПопытки;
//	КэшТ=" "+Стрзаменить(КэшТ,"; domain=.vetrf.ru; path=/","");
//	Set-Cookie: srv_id=a257660a97141090ee3167817a8ecbe5; domain=.vetrf.ru; path=/

//	ХранилищеСистемныхНастроек.Сохранить("ТекущийИмяПЛ","ТекущийИмяПЛ",Новый Структура("ИмяП,Пароль",ИмяПользователя,Пароль));	


	Если Найти(HTTPСервисЗапрос.ResponseText,"Пользователь:")=0 ТОгда
		Возврат Ложь;
	//Иначе
	//	Возврат КэшТ
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Пользователь) И ЗначениеЗаполнено(Пользователь.ГУИД_ХС) Тогда
		HTTPСервисЗапрос.Open("GET", Сайт+"/operatorui?_action=chooseServicedFirmForm&_language=ru", 0);
////		Обработки._Запуск_ХамелеонМеркурий.УстановитьПрокси(HTTPСервисЗапрос);
		HTTPСервисЗапрос.Send();
		HTTPСервисЗапрос.WaitForResponse();
//		
//	//Если ТекущийРежим=3 ИЛИ ТекПольз.ВетеринарныйВрач Тогда
//	//	HTTPСервисЗапрос.Open("GET", Сайт+"/operatorui?_action=changeServicedEnterprise&_language=ru", 0);
////	Иначе
		HTTPСервисЗапрос.Open("GET", Сайт+"/operatorui?firmGuid="+Пользователь.ГУИД_ХС+"&_action=chooseServicedFirm&_language=ru", 0);
////	КонецЕсли;
////		HTTPСервисЗапрос.Open("GET", Сайт+"/operatorui?firmGuid="+Обработки._Запуск_ХамелеонМеркурий.xml_ЗаписатьАтрибут(ХС.GUID)+"&_action=chooseServicedFirm&_language=ru", 0);
//		Обработки._Запуск_ХамелеонМеркурий.УстановитьПрокси(HTTPСервисЗапрос);
		HTTPСервисЗапрос.SetRequestHeader("Content-Type","application/x-www-form-urlencoded");
//	//HTTPСервисЗапрос.SetRequestHeader("Cookie",Коок);
		HTTPСервисЗапрос.Send();
		HTTPСервисЗапрос.WaitForResponse();
//			
//		//Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
//		
		Если HTTPСервисЗапрос.Status<>200 Тогда
			Возврат Ложь;
		КонецЕсли;
		ПолучСтр=HTTPСервисЗапрос.ResponseText;

//		Try
//			MSScriptControl = Новый COMObject("MSScriptControl.ScriptControl");
//			MSScriptControl.Language = "javascript";
//			TimeStamp = MSScriptControl.Eval("(new Date()).valueOf()");
//		Except
//			TimeStamp = 1000 * (CurrentDate() - Date(1970,1,1) - 3 * 3600);
//		EndTry;

//		//HTTPЗапрос = Новый HTTPЗапрос("hs/operatorui?_action=downloadEnterprises&_language=ru&timestamp="+Format(TimeStamp,"ЧГ="),Заголовки);

//		//HTTPСервисЗапрос.Open("GET", Сайт+"/operatorui?_action=downloadEnterprises&_language=ru&timestamp="+Format(TimeStamp,"ЧГ="), 0);
//		//HTTPСервисЗапрос.Send();
//		//HTTPСервисЗапрос.WaitForResponse();
//		
//		//Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
//		
//		Если HTTPСервисЗапрос.Status<>200 Тогда
//			Возврат Ложь;
//		КонецЕсли;
//	Иначе
//		//Если ТекущийРежим=3 ИЛИ ТекПольз.ВетеринарныйВрач Тогда
//		//	HTTPСервисЗапрос.Open("GET", Сайт+"/operatorui?_action=changeServicedEnterprise&_language=ru", 0);
//		//КонецЕсли;
//		

//	КонецЕсли;

	Субъект_ИД=""	;
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Субъект_ИД=Пользователь.ИД_ВЭБ_Меркурий;
	КонецЕсли;
	
////	Если не ЗначениеЗаполнено(Субъект_ИД) тогда
////		Субъект_ИД=ТекПольз.ТекущееПредприятие;
////	КонецЕсли;
	Если ЗначениеЗАполнено(Субъект_ИД) Тогда
//		Если ТипЗнч(Субъект_ИД)=Тип("СправочникСсылка.Предприятия_ХамелеонМеркурий") тогда
//			Субъект_ИД=Сред(Субъект_ИД.RU,3);
//		КонецЕсли;
//		//Если ТекущийРежим=3  ИЛИ ТекПольз.ВетеринарныйВрач Тогда
//		//	HTTPСервисЗапрос.Open("GET", Сайт+"/operatorui?enterprisePk="+Субъект_ИД+"&_action=chooseServicedEnterprise&_language=ru", 0);
//		//Иначе
			HTTPСервисЗапрос.Open("GET", Сайт+"/operatorui?commonEnterpriseNumber="+Субъект_ИД+"&_action=chooseServicedEnterprise&_language=ru", 0);
//		//КонецЕсли;		
////		HTTPСервисЗапрос.Open("GET", Сайт+"/operatorui?commonEnterpriseNumber="+Субъект_ИД+"&_action=chooseServicedEnterprise&_language=ru", 0);
//		Обработки._Запуск_ХамелеонМеркурий.УстановитьПрокси(HTTPСервисЗапрос);
//		
//		
//		
//		
//		//Заголовки=Новый Соответствие;
		HTTPСервисЗапрос.SetRequestHeader("Content-Type","application/x-www-form-urlencoded");
//		//Заголовки.Вставить("Cookie",Кэш);
//		
//		//HTTPЗапрос = Новый HTTPЗапрос("/operatorui?commonEnterpriseNumber="+Субъект_ИД+"&_action=chooseServicedEnterprise&_language=ru",Заголовки);
//		
//		//Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		HTTPСервисЗапрос.Send();
		HTTPСервисЗапрос.WaitForResponse();
		ПолучСтр=HTTPСервисЗапрос.ResponseText;
//		
//		//Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
//		
		Если HTTPСервисЗапрос.Status<>200 Тогда
			Возврат Ложь;
		КонецЕсли;
//		
//		//Заголовки=Новый Соответствие;
//		
//		//Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded");
//		//Заголовки.Вставить("Cookie",Кэш);
//		
//		//HTTPЗапрос = Новый HTTPЗапрос("hs/operatorui?_action=settingsForm&_language=ru",Заголовки);
//		HTTPСервисЗапрос.Open("GET", Сайт+"/operatorui?_action=settingsForm&_language=ru", 0);
//		Обработки._Запуск_ХамелеонМеркурий.УстановитьПрокси(HTTPСервисЗапрос);
//		
//		//Ответ_КОД=HTTPСервисЗапрос.Получить(HTTPЗапрос);
//		HTTPСервисЗапрос.Send();
//		HTTPСервисЗапрос.WaitForResponse();
//		КодХС=HTTPСервисЗапрос.ResponseText;
//		
//		//КодХС=Ответ_КОД.ПолучитьТелоКакСтроку();
//		Если Найти(КодХС,"firmPk=")=0 Тогда
//			КодХС="";
//		Иначе
//			КодХС=Сред(КодХС,Найти(КодХС,"firmPk=")+7);
//			КодХС=Сред(КодХС,1,Найти(КодХС,"""")-1);
//			
//			ИНН_1=Обработки._Запуск_ХамелеонМеркурий.ОпределитьИННХС(HTTPСервисЗапрос,КодХС);
//			Если ХС.ИНН<>ИНН_1 ИЛИ ХС.Код<>КодХС Тогда
//				ХС__2=ХС.ПолучитьОбъект();
//				ХС__2.ИНН=ИНН_1;
//				ХС__2.Код=КодХС;
//				ХС__2.Записать();
//			КонецЕсли;
//			
//						
//		КонецЕсли;
//		
		КонецЕсли;	
	КонецЕсли;
	
	Возврат истина;
Исключение
	Возврат Ложь;
КонецПопытки;
	
КонецФункции



Процедура ЗапишемВРегистр_Агрегация(Объект,ТекстДокумент)
	
	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Объект.Ссылка);
	РегДв.Отбор.Вид.Установить("Отправлен заказ");
	Добав=РегДв.Добавить();
	Добав.Документ=ОБъект.Ссылка;
	Добав.Вид="Отправлен заказ";
	Добав.Файл=Новый ХранилищеЗначения(ТекстДокумент,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
КонецПроцедуры



Процедура ЗапишемВРегистр_Ответ_Агрегация(Объект,ТекстДокумент)
	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Объект.Ссылка);
	РегДв.Отбор.Вид.Установить("Получили ответ");
	Добав=РегДв.Добавить();
	Добав.Документ=ОБъект.Ссылка;
	Добав.Вид="Получили ответ";
	Добав.Файл=Новый ХранилищеЗначения(ТекстДокумент,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
КонецПроцедуры

Функция ОтправитьАгрегациюЧереСУЗ(Объект,Thumbprint_1)
	ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	
	РаботатьНаV1=Ложь;
	СформироватьФайлДляОтправки=СформироватьXmlФайлИмпорт_Агрегация(Объект);
	Если Не ЗначениеЗаполнено(СформироватьФайлДляОтправки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
	

	Тело=СформироватьФайлДляОтправки;
		АдресРаздробить=Thumbprint_1.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			Сообщить("В пользователе не заполнен адрес СУЗ");
			Возврат Ложь;
			
		КонецЕсли;
	
	
	//Если ОбработкаWEBНаСервере Тогда
	//		ЗагрузканаСервереОтправитьЗаявка_ЧерезСУЗ(Thumbprint_1,Тело,Адрес,Порт,Защищ);
		
		
	//Иначе
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;
			
			Если РаботатьНаV1=Истина Тогда
		HTTPЗапрос=Новый HTTPЗапрос("api/aggregation");
			Иначе
		HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/aggregation?omsId="+Thumbprint_1.ИдентификаторСУЗ);
		КонецЕсли;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
								ТокенСУЗ=ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);

	HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Попытка
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ_Агрегация(Объект,Текст1);
	КонецЕсли;
	
	
	Если Ответ.КодСостояния=202 ИЛИ  Ответ.КодСостояния=200 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Если РаботатьНаV1=Истина Тогда
			Объект._Order_ID=NNN;
				Иначе
			Объект._Order_ID=NNN.reportId;
		КонецЕсли;
		
		
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	//Если Ответ.КодСостояния<>200 Тогда
	//	
	//	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
	//	  Текст1=Ответ.ПолучитьТелоКакСтроку();
	//		Попытка
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//			Объект.ОшибкаОтправки=NNN.error_message;
	//			
	//		Исключение
	//		КонецПопытки;
	//	Иначе
	//		Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета");
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//		Объект._Order_ID=NNN.order_id;
	//КонецЕсли;
//	КонецЕсли;
	Объект.Записать();
	
Конецфункции

Функция СформироватьФайлИзъятия(Объект)
	ЕстьИзъятие=Ложь;
	ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("participant_inn");
	Чтен.ЗаписатьЗначение(xmlString(Объект.Организация.ИНН));
	Чтен.ЗаписатьИмяСвойства("reaggregation_type");
	Чтен.ЗаписатьЗначение("REMOVING");
	Чтен.ЗаписатьИмяСвойства("uitu");
	Чтен.ЗаписатьЗначение(Объект.НомерКороба);
	Чтен.ЗаписатьИмяСвойства("uit_uitu_list");
	Чтен.ЗаписатьНачалоМассива();
	
	
	Для Каждого Стр_1 Из Объект.Марки Цикл
		Если Стр_1.ИзъятьИзУпаковки Тогда
			Чтен.ЗаписатьНачалоОбъекта();
			Чтен.ЗаписатьИмяСвойства("uit_uitu");
			Если ЗначениеЗаполнено(Стр_1.cis) тогда
				Чтен.ЗаписатьЗначение(Стр_1.cis);
			Иначе
				Чтен.ЗаписатьЗначение(Стр_1.Марка);
				
			КонецЕсли;
			Чтен.ЗаписатьКонецОбъекта();
			ЕстьИзъятие=Истина;
			
			
			
		КонецЕсли;
	Конеццикла;
	Если ЕстьИзъятие=Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	Текст=Чтен.Закрыть();
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;
	
	Возврат Текст;
	
	
	
	
КонецФункции



Процедура ИзъятьИзУпаковки(Thumbprint_1,Объект)
	СформироватьФайлДляОтправки=СформироватьФайлИзъятия(Объект);
	Если СформироватьФайлДляОтправки=Неопределено Тогда
		Сообщить("Не выбраны строчки для изъятия");
		Возврат;
	Конецесли;
	
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		Сообщить("Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
		
	Подписанный="";
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
	Подписанный="";
	ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1,Подписанный,Истина);
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
				Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	
	
	Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
				Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
			Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
			Добав=СтрЗаменить(Добав,"\r\n","");

	Тело="{
	|""product_document"":"""+Добав+""",
	|""document_format"": ""MANUAL"",
	|""signature"":"""+Подписанный+"""}";
	
 	//Если ОбработкаWEBНаСервере Тогда
		//Если НЕ ЗагрузканаСервереОтправить(Thumbprint_1,СРегистра,УжеОтправили,Тело) Тогда
		//		Если УжеОтправили=Истина Тогда
		//		//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
		//	Иначе
		//		Получение_Токена(Thumbprint_1);
		//		ОтправитьВЦРПТ(Команда,Истина)			
		//КонецЕсли
		//
		//КонецЕсли;
		
		
	//Иначе
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			
 			что=Thumbprint_1.что;
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/reaggregation/create?pg="+Что);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
		ИЛИ Ответ.КодСостояния=201 
		Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			Объект._Order_ID=Текст1;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Возврат;
				
			Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						
						Если Найти(Текст1,"Billing contract for shoes product group not signed by participant")>0 Тогда
							Сообщить("Договор биллинга для выбранной группы не подписан участником.");
						Иначе
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
							КонецПопытки;
							
						КонецПопытки;
						КонецЕсли;
					Исключение
					КонецПопытки;
	
	КонецЕсли;
	Объект.Записать();	
	
	
КонецПроцедуры

Функция СформироватьXmlФайлИмпорт_Агрегация(Объект)
	
	ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	
	Если    Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.ДобавлениеВУпаковку Тогда
		
			Чтен=Новый  ЗаписьJSON;
			Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
			Чтен.ЗаписатьНачалоОбъекта();
			Чтен.ЗаписатьИмяСвойства("participant_inn");
			Чтен.ЗаписатьЗначение(xmlString(Объект.Организация.ИНН));
			Чтен.ЗаписатьИмяСвойства("reaggregation_type");
			Чтен.ЗаписатьЗначение("ADDING");
			Чтен.ЗаписатьИмяСвойства("uitu");
			Чтен.ЗаписатьЗначение(Объект.НомерКороба);
			Чтен.ЗаписатьИмяСвойства("uit_uitu_list");
			Чтен.ЗаписатьНачалоМассива();
			
			
			Для Каждого Стр_1 Из Объект.Марки Цикл
					Чтен.ЗаписатьНачалоОбъекта();
					Чтен.ЗаписатьИмяСвойства("uit_uitu");
					Чтен.ЗаписатьЗначение(Стр_1.Марка);
					Чтен.ЗаписатьКонецОбъекта();
					
			Конеццикла;
			Чтен.ЗаписатьКонецМассива();
			Чтен.ЗаписатьКонецОбъекта();
			Текст=Чтен.Закрыть();
			Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
				ЗапишемВРегистр(Объект,Текст);
			КонецЕсли;
			
			Возврат Текст;
			
			
			
	
	ИначеЕсли Не ЗначениеЗаполнено(Объект.ТипДокумента) ИЛИ
		Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.Формирование
	//	ИЛИ Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.ДобавлениеВУпаковку
		Тогда
		
		
		Если (Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак"
			  ИЛИ Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак")
			И Объект.НомераБлоков.Количество()>0
			Тогда
			
			Если Объект.Продукция.КоличествоВБлоке=0 Тогда
				Сообщить("В продукции не указано количество в блоке");
				Возврат НЕопределено;
			КонецЕсли;
			
			Сч_поК=Объект.Продукция.КоличествоВБлоке;
			
			Если Сч_поК*Объект.НомераБлоков.Количество()<Объект.Марки.Количество() Тогда
				Сообщить("Не хватает пачек для формирования короба!!");
				Возврат Неопределено;
			КонецеслИ;
			Смещение=0;
			Для Каждого Стр_Блк Из Объект.НомераБлоков Цикл
				Сч_Первый=Смещение;
				Для Сч_ББл=0 По Сч_ПоК-1 Цикл
					Объект.Марки[Сч_Первый+Сч_ББл].НомерБокса=Стр_Блк.НомерБлока;
					
				Конеццикла;
				Смещение=Смещение+Сч_поК;
			Конеццикла;
			
			Чтен=Новый  ЗаписьJSON;
			Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
			Чтен.ЗаписатьНачалоОбъекта();
			//Чтен.ЗаписатьИмяСвойства("document_description");
			//Чтен.ЗаписатьНачалоОбъекта();
					Чтен.ЗаписатьИмяСвойства("participantId");
				Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
			
			
					
					Чтен.ЗаписатьИмяСвойства("productionLineId");
					Чтен.ЗаписатьЗначение(xmlString(Объект.ИдПроизводственногоЗаказа));
				
			
			Чтен.ЗаписатьИмяСвойства("aggregationUnits");
			
			
			
			Чтен.ЗаписатьНачалоМассива();
			
			
			
			Чтен.ЗаписатьНачалоОбъекта();
			Чтен.ЗаписатьИмяСвойства("unitSerialNumber");
			Чтен.ЗаписатьЗначение(Объект.НомерКороба);
			
			
			Если Объект.ЧерезСУЗ 
				Тогда
			
				
				Чтен.ЗаписатьИмяСвойства("aggregatedItemsCount");
				Чтен.ЗаписатьЗначение(Объект.НомераБлоков.Количество());
				
				
			КонецЕслИ;
			
				Чтен.ЗаписатьИмяСвойства("aggregationType");
				Чтен.ЗаписатьЗначение("AGGREGATION");
			
			
				
				Чтен.ЗаписатьИмяСвойства("aggregationUnitCapacity");
				Чтен.ЗаписатьЗначение(Объект.НомераБлоков.Количество());
			
			Чтен.ЗаписатьИмяСвойства("sntins");
			Чтен.ЗаписатьНачалоМассива();
			
			Для Каждого Стр Из Объект.НомераБлоков Цикл
				Чтен.ЗаписатьЗначение(Стр.НомерБлока);
			Конеццикла;
			Чтен.ЗаписатьКонецМассива();
			Чтен.ЗаписатьКонецОбъекта();
			
			
			
			

			
			
			
			Для Каждого Стр_1_БЛ Из Объект.НомераБлоков Цикл
			
			
			Чтен.ЗаписатьНачалоОбъекта();
			Чтен.ЗаписатьИмяСвойства("unitSerialNumber");
			Чтен.ЗаписатьЗначение(Стр_1_БЛ.НомерБлока);
			
			Пачки_=Объект.Марки.НайтиСтроки(Новый Структура("НомерБокса",Стр_1_БЛ.НомерБлока));
			
			Если Объект.ЧерезСУЗ 
				//ИЛИ 	Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак"
				Тогда
			
				
				Чтен.ЗаписатьИмяСвойства("aggregatedItemsCount");
				Чтен.ЗаписатьЗначение(Пачки_.Количество());
				
				
			КонецЕслИ;
			
				Чтен.ЗаписатьИмяСвойства("aggregationType");
				Чтен.ЗаписатьЗначение("AGGREGATION");
			
			
				
				Чтен.ЗаписатьИмяСвойства("aggregationUnitCapacity");
				Чтен.ЗаписатьЗначение(Пачки_.Количество());
			
			Чтен.ЗаписатьИмяСвойства("sntins");
			Чтен.ЗаписатьНачалоМассива();
			
			Для Каждого Стр Из Пачки_ Цикл
				Чтен.ЗаписатьЗначение(Сред(Стр.Марка,1,21));
			Конеццикла;
			Чтен.ЗаписатьКонецМассива();
			Чтен.ЗаписатьКонецОбъекта();
			Конеццикла;
			
			
			
			
			
			
			
			
						
		
		
			Чтен.ЗаписатьКонецМассива();
			
			Чтен.ЗаписатьКонецОбъекта();
			
			Текст=Чтен.Закрыть();			
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;
			
			
			
			Возврат Текст;
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		КонецЕсли;
		
		
		Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();
		//Чтен.ЗаписатьИмяСвойства("document_description");
		//Чтен.ЗаписатьНачалоОбъекта();
				Чтен.ЗаписатьИмяСвойства("participantId");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		
		
		Если Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак" 
			ИЛИ Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак" 
			Тогда
				
				Чтен.ЗаписатьИмяСвойства("productionLineId");
				Чтен.ЗаписатьЗначение(xmlString(Объект.ИдПроизводственногоЗаказа));
			КонецЕсли;
			
		
		Чтен.ЗаписатьИмяСвойства("aggregationUnits");
		
		
		
		Чтен.ЗаписатьНачалоМассива();
		Чтен.ЗаписатьНачалоОбъекта();
		Чтен.ЗаписатьИмяСвойства("unitSerialNumber");
		Чтен.ЗаписатьЗначение(Объект.НомерКороба);
		Если Объект.ЧерезСУЗ 
			//ИЛИ 	Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак"
			Тогда
		
			
			Чтен.ЗаписатьИмяСвойства("aggregatedItemsCount");
			Чтен.ЗаписатьЗначение(объект.Марки.Количество());
			
			
		КонецЕслИ;
		
		Если Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.ДобавлениеВУпаковку Тогда
			Чтен.ЗаписатьИмяСвойства("reaggregation_type");
			Чтен.ЗаписатьЗначение("ADDING");
		Иначе
			Чтен.ЗаписатьИмяСвойства("aggregationType");
			Чтен.ЗаписатьЗначение("AGGREGATION");
		КонецЕслИ;
		
		
		Если Объект.ЧерезСУЗ 
			//ИЛИ 	Объект.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак" 
			Тогда
			
			Чтен.ЗаписатьИмяСвойства("aggregationUnitCapacity");
			Чтен.ЗаписатьЗначение(объект.Марки.Количество());
			
			
			
		КонецЕслИ;
		
		Чтен.ЗаписатьИмяСвойства("sntins");
		Чтен.ЗаписатьНачалоМассива();
		
		Для Каждого Стр Из Объект.Марки Цикл
			Чтен.ЗаписатьЗначение(Стр.Марка);
		Конеццикла;
		Чтен.ЗаписатьКонецМассива();
		Чтен.ЗаписатьКонецОбъекта();
		Чтен.ЗаписатьКонецМассива();
		
		Чтен.ЗаписатьКонецОбъекта();
		
		Текст=Чтен.Закрыть();
	ИначеЕсли Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.Расформирование Тогда
		Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();
		//Чтен.ЗаписатьИмяСвойства("document_description");
		//Чтен.ЗаписатьНачалоОбъекта();
		Чтен.ЗаписатьИмяСвойства("participant_inn");
		Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
		Чтен.ЗаписатьИмяСвойства("products_list");
		Чтен.ЗаписатьНачалоМассива();
		
		Для Каждого Стр Из Объект.Марки Цикл
			Чтен.ЗаписатьНачалоОбъекта();
			Чтен.ЗаписатьИмяСвойства("uitu");
			Чтен.ЗаписатьЗначение(Стр.Марка);
			Чтен.ЗаписатьКонецОбъекта();
		Конеццикла;
		Чтен.ЗаписатьКонецМассива();
		Чтен.ЗаписатьКонецОбъекта();
		
		Текст=Чтен.Закрыть();		
	
	//ИначеЕсли  Объект.ТипДокумента=Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.ИзъятиеИзУпаковки Тогда
		
	Конецесли;
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;
	Возврат Текст;

	ДатаТекущая=Формат(Текущаядата(),"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""");
	
	ДатаДокумента=Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""");
		Текст="<unit_pack document_id=""unit_pack_doc_id"" VerForm=""1.03"" file_date_time="""+ДатаТекущая+""" VerProg=""VerProg1"">
|<Document operation_date_time="""+ДатаДокумента+""" document_number="""+Объект.Номер+""">
|<organisation>
|<id_info>
|<LP_info org_name="""+Обработки._Запуск_ХамелеонЦРПТ.xml_ЗаписатьАтрибут(Объект.Организация.Наименование)+""" LP_TIN="""+Объект.Организация.ИНН+""" RRC="""+ОБъект.Организация.КПП+"""/>
|</id_info>
|<Address>
|<location_address country_code=""643"" text_address="""+Обработки._Запуск_ХамелеонЦРПТ.xml_ЗаписатьАтрибут(Объект.Организация.АдресМестонахождения)+"""/>
|</Address>
|<contacts phone_number="""" email=""""/>
|</organisation>
|<pack_content>
|<pack_code>"+Объект.НомерКороба+"</pack_code>";

Для Каждого Стр ИЗ ОБъект.Марки Цикл

	Текст=Текст+"
|<cis>"+Стр.Марка+"</cis>";
	             КонецЦикла;
	Текст=Текст+"
|</pack_content>
|</Document>
|</unit_pack>
		|";

		
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;
	
Возврат Текст 	
КонецФункции


Функция Вернутьsub(Объект)
	Возврат Объект.ДоговорЛекарства.РегистрационныйНомер
Конецфункции


Процедура ОтправитьАгрегациюЛекартсва(Thumbprint_1,Объект)
		СРегистра=Получение_Токена_ЛДМП(Thumbprint_1);	

		ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
	Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ВидДокументаУпаковок_ХамелеонЦРПТ.Расформирование") Тогда
		
		subjectIdФармацевтика=ВернутьSUB(Объект);
		
		Объект.МаркиОприходовать.Очистить();
		 
		////Ищем 
		
		МассивЗапросов=Новый ТаблицаЗначений;
		МассивЗапросов.Колонки.Добавить("ИдЗапроса");
		МассивЗапросов.Колонки.Добавить("Обработан");
		МассивЗапросов.Колонки.Добавить("Марка");
		
		МассивЗапросов.Очистить();//=Новый Массив;
		
		
		
		Для каждого Стр_1 Из Объект.Марки Цикл
			
			
			
			
			
			
			Страница=0;
			
			Чтение=Новый ЗаписьXML;
			Чтение.УстановитьСтроку("UTF-8");
			Чтение.ЗаписатьОбъявлениеXML();
			Чтение.ЗаписатьНачалоЭлемента("documents");
			Чтение.ЗаписатьАтрибут("version","1.35");
		 	
			Чтение.ЗаписатьНачалоЭлемента("query_hierarchy_info");
			Чтение.ЗаписатьАтрибут("action_id","220");
			
			Чтение.ЗаписатьНачалоЭлемента("subject_id");
			Чтение.ЗаписатьТекст(subjectIdФармацевтика);
			Чтение.ЗаписатьКонецЭлемента();
			
			Чтение.ЗаписатьНачалоЭлемента("sscc");
			Чтение.ЗаписатьТекст(Стр_1.Марка);
			Чтение.ЗаписатьКонецЭлемента();
			
			Чтение.ЗаписатьКонецЭлемента();
			Чтение.ЗаписатьКонецЭлемента();
			СформироватьФайлДляОтправки=Чтение.Закрыть();
			
			
			
			
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

				
				Подписанный="";
				ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1,Подписанный,Истина);
		
			Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
		Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("document");
	Чтен.ЗаписатьЗначение(Добав);
	Чтен.ЗаписатьИмяСвойства("sign");
	Чтен.ЗаписатьЗначение(Подписанный);
	Чтен.ЗаписатьИмяСвойства("request_id");
	Чтен.ЗаписатьЗначение(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВернутьУНИКУМ());
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();
	
				 
				 
		//Тело="{
		//|""doc_type"":""311"",
		//|""document"":"""+Добав+""",
		//|""sign"":"""+Подписанный+""",
		//|""request_id"":"""+ВернутьУНИКУМ()+"
		//|}";
			
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/send");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		
		Если Ответ.КодСостояния=200 Тогда
			
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Добав_Запрос=МассивЗапросов.Добавить();
			Добав_Запрос.ИдЗапроса=NNN.document_id;
			Добав_Запрос.Марка=Стр_1.Марка;
			Добав_Запрос.Обработан=Ложь;
			//МассивЗапросов.Добавить(Новый );
			
		КонецЕсли;
	Конеццикла;
	
	
	    ОбработаныВсе=Ложь;
	Пока ОбработаныВсе=Ложь Цикл
		ОбработаныВсе=Истина;
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
				
				Для Каждого Стр_1_З Из МассивЗапросов Цикл
					Если Стр_1_З.Обработан=Истина Тогда
						Продолжить;
					Конецесли;
					 ОбработаныВсе=Ложь;
				_Order_ID=	Стр_1_З.ИдЗапроса;
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+_Order_ID+"/ticket");
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("documents/"+_Order_ID+"/ticket");
					
				Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
					
					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
					
				КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	
		
	//	 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				 
				 
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					
					
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(NNN.link,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//
					Сайт_1=NNN.link;
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
					
					
					
					
					
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
	//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Текст1) 
		ИЛИ Найти(Текст1,"Ошибка при выполнении операции: запись не найдена"" }")>1
		тогда
					//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
						 
						 Продолжить;
					 КонецЕсли;
					 
					 МассивУп=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.МассивКмОвДляОбработки_Упаковки(Текст1);
					 Для Каждого Стр_222 Из МассивУп Цикл
						 
						Если Объект.МаркиОприходовать.НайтиСтроки(Новый Структура("НомерКороба,Марка",Стр_1_З.Марка,Стр_222.НомерКМ)).Количество()=0 Тогда
						 ДДД_Агр=Объект.МаркиОприходовать.Добавить();
						 ДДД_Агр.Марка=Стр_222.НомерКМ;
						 ДДД_Агр.НомерКороба=Стр_1_З.Марка;
						 
					 КонецЕсли;
						//Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",cis_1,Стр_1.НомерКМ)).Количество()=0 Тогда
						
						//	ДобавК=Объект.Короба.Добавить();
						//	ДобавК.НомерКороба=cis_1;
						//	ДобавК.ШтрихКод=Стр_1.НомерКМ;
						//	БылиУпаковки=Истина;
						//КонецЕсли;
						
						//Строк_1.НомерКМ=ключ;    
						//Если Стр_1.Продолжить=Истина Тогда
						//	РекурсияУпаковки_Лекарства(Строк,Количество,Thumbprint_1,Срегистра,subjectIdФармацевтика)								
						//Иначе
						  //   Количество=Количество+1;
						
						//КонецЕсли;
						 
					Конеццикла;
					 Стр_1_З.Обработан=Истина;
					 
					 Продолжить;
					 
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					    	Возврат;					
				ИначеЕсли Ответ.КодСостояния=301 Тогда
					Возврат;
					
				Иначе
				//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
						Продолжить;
				КонецЕсли;
		
				//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
				
	              
		
		
				
				
			Конеццикла;	
			Если ОбработаныВсе=Истина Тогда
				Прервать;
			КонецЕсли;
		Конеццикла;
		
		///ОтправилиЗапросНаИнформацию();
		
	//	Для каждого Стр_1 Из Объект.Марки Цикл
	//		
	//		
	//		
	//		
	//		
	//		
	//		Страница=0;
	//		
	//		Чтение=Новый ЗаписьXML;
	//		Чтение.УстановитьСтроку("UTF-8");
	//		Чтение.ЗаписатьОбъявлениеXML();
	//		Чтение.ЗаписатьНачалоЭлемента("documents");
	//		Чтение.ЗаписатьАтрибут("version","1.35");
	//	 	
	//		Чтение.ЗаписатьНачалоЭлемента("query_hierarchy_info");
	//		Чтение.ЗаписатьАтрибут("action_id","220");
	//		
	//		Чтение.ЗаписатьНачалоЭлемента("subject_id");
	//		Чтение.ЗаписатьТекст(subjectIdФармацевтика);
	//		Чтение.ЗаписатьКонецЭлемента();
	//		
	//		Чтение.ЗаписатьНачалоЭлемента("sscc");
	//		Чтение.ЗаписатьТекст(Стр_1.Марка);
	//		Чтение.ЗаписатьКонецЭлемента();
	//		
	//		Чтение.ЗаписатьКонецЭлемента();
	//		Чтение.ЗаписатьКонецЭлемента();
	//		СформироватьФайлДляОтправки=Чтение.Закрыть();
	//		
	//		
	//		
	//		
	//	Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//	СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
	//				Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
	//			Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
	//			Добав=СтрЗаменить(Добав,"\r\n","");

	//			
	//			Подписанный="";
	//			ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
	//	
	//		Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
	//	Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
	//		Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	//			
	//			 
	//Чтен=Новый  ЗаписьJSON;
	//Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	//Чтен.ЗаписатьНачалоОбъекта();
	//Чтен.ЗаписатьИмяСвойства("document");
	//Чтен.ЗаписатьЗначение(Добав);
	//Чтен.ЗаписатьИмяСвойства("sign");
	//Чтен.ЗаписатьЗначение(Подписанный);
	//Чтен.ЗаписатьИмяСвойства("request_id");
	//Чтен.ЗаписатьЗначение(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВернутьУНИКУМ());
	//Чтен.ЗаписатьКонецОбъекта();
	//Тело=Чтен.Закрыть();
	//
	//			 
	//			 
	//	//Тело="{
	//	//|""doc_type"":""311"",
	//	//|""document"":"""+Добав+""",
	//	//|""sign"":"""+Подписанный+""",
	//	//|""request_id"":"""+ВернутьУНИКУМ()+"
	//	//|}";
	//		
	//			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
	//				Прокси=Новый ИнтернетПрокси;
	//				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
	//			
	//				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	//			Иначе
	//				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	//			КонецЕсли;
	//	
	//		HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/send");
	//	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	//	HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
	//	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	//	///Константин           
	//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
	//	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	//	Текст1=Ответ.ПолучитьТелоКакСтроку();
	//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	//	
	//	
	//	Если Ответ.КодСостояния=200 Тогда
	//		
	//		NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
	//		_Order_ID=NNN.document_id;
			
			
	//		Пока Истина Цикл
	//			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	//			
	//			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
	//				Прокси=Новый ИнтернетПрокси;
	//				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
	//			
	//				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	//			Иначе
	//				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	//			КонецЕсли;
	//			Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
	//				HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+_Order_ID+"/ticket");
	//			Иначе
	//				HTTPЗапрос=Новый HTTPЗапрос("documents/"+_Order_ID+"/ticket");
	//				
	//			Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
	//				
	//				HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	//				
	//			КонецЕсли;
	//	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	//	HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
	//	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	//	///Константин           
	//	//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
	//	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	//	Текст1=Ответ.ПолучитьТелоКакСтроку();
	//		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	//
	//	
	////	 Попытка				
	//		 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
	//			 
	//			 
	//			 
	//			 
	//			Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
	//			 
	//			 
	//				//ЧтениеJSON = Новый ЧтениеJSON;
	//				//ЧтениеJSON.УстановитьСтроку(Текст1);
	//				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
	//				
	//				
	//				//Сайт="http://"+Thumbprint_1.АдресКАПИ;
	//				//Сайт_1=СтрЗаменить(NNN.link,Сайт,"");
	//				//Сайт="https://"+Thumbprint_1.АдресКАПИ;
	//				//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
	//				//
	//				Сайт_1=NNN.link;
	//				Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
	//				Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
	//				
	//				
	//				
	//				
	//				
	//							HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
	//	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	//	HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
	//	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	//	///Константин           
	//	//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
	//	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	//	Текст1=Ответ.ПолучитьТелоКакСтроку();
	//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	//	
	//КонецЕсли;
	//Если Не ЗначениеЗаполнено(Текст1) 
	//	ИЛИ Найти(Текст1,"Ошибка при выполнении операции: запись не найдена"" }")>1
	//	тогда
	//					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	//					 
	//					 Продолжить;
	//				 КонецЕсли;
	//				 
	//				 МассивУп=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.МассивКмОвДляОбработки_Упаковки(Текст1);
	//				 Для Каждого Стр_222 Из МассивУп Цикл
	//					 
	//					Если Объект.МаркиОприходовать.НайтиСтроки(Новый Структура("НомерКороба,Марка",Стр_1.Марка,Стр_222.НомерКМ)).Количество()=0 Тогда
	//					 ДДД_Агр=Объект.МаркиОприходовать.Добавить();
	//					 ДДД_Агр.Марка=Стр_222.НомерКМ;
	//					 ДДД_Агр.НомерКороба=Стр_1.Марка;
	//					 
	//					КонецЕсли;
	//					//Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",cis_1,Стр_1.НомерКМ)).Количество()=0 Тогда
	//					
	//					//	ДобавК=Объект.Короба.Добавить();
	//					//	ДобавК.НомерКороба=cis_1;
	//					//	ДобавК.ШтрихКод=Стр_1.НомерКМ;
	//					//	БылиУпаковки=Истина;
	//					//КонецЕсли;
	//					
	//					//Строк_1.НомерКМ=ключ;    
	//					//Если Стр_1.Продолжить=Истина Тогда
	//					//	РекурсияУпаковки_Лекарства(Строк,Количество,Thumbprint_1,Срегистра,subjectIdФармацевтика)								
	//					//Иначе
	//					  //   Количество=Количество+1;
	//					
	//					//КонецЕсли;
	//					 
	//				Конеццикла;
	//				 
	//				 Прервать;
	//				 
	//			ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
	//				    	Возврат;					
	//			ИначеЕсли Ответ.КодСостояния=301 Тогда
	//				Возврат;
	//				
	//			Иначе
	//				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	//					Продолжить;
	//			КонецЕсли;
	//	
	//			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	//			
	//              Прервать;
	//	
	//	
	//			
	//			
	//		Конеццикла;
						
		//Сообщить(Ответ.ПолучитьТелоКакСтроку());	
	КонецЕсли;
		//КонецЦикла;	
			
		
		
	//Конецесли;
	
	//Возврат;
	
	//СформироватьФайлДляОтправки=СформироватьАгрегациюЛекарства(СРегистра);
	СформироватьФайлДляОтправки = СформироватьАгрегациюЛекарства_XSD(Thumbprint_1,СРегистра,Объект);
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(СформироватьФайлДляОтправки);
	Чтение.Закрыть();
	
	//ВремФайл = ПолучитьИмяВременногоФайла("xml");
	//ТекстовыйДокИзФайла = Новый ТекстовыйДокумент;
	//ТекстовыйДокИзФайла.ДобавитьСтроку(СформироватьФайлДляОтправки);
	//ТекстовыйДокИзФайла.Записать(ВремФайл, КодировкаТекста.UTF8);
	
	Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
	Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
	Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
	Добав=СтрЗаменить(Добав,"\r\n","");

				
				Подписанный="";
		//ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Истина);
	//	ПодписатьФайл_ЛДМП(СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Ложь);
			Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
				ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1,Подписанный,Истина);
			Иначе
				ПодписатьФайл_ЛДМП(СформироватьФайлДляОтправки ,Thumbprint_1.Thumbprint_1,Подписанный,Ложь);
				
				
			КонецЕсли;
		
		//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//Подписанный,КодировкаТекста.UTF8,Ложь));
		
					Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
				Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
				 Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				 
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("document");
	Чтен.ЗаписатьЗначение(Добав);
	Чтен.ЗаписатьИмяСвойства("sign");
	Чтен.ЗаписатьЗначение(Подписанный);
	Чтен.ЗаписатьИмяСвойства("request_id");
	Чтен.ЗаписатьЗначение(ВернутьУНИКУМ());
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();
	
				 
				 
		//Тело="{
		//|""doc_type"":""311"",
		//|""document"":"""+Добав+""",
		//|""sign"":"""+Подписанный+""",
		//|""request_id"":"""+ВернутьУНИКУМ()+"
		//|}";
			
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/send");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		
	//	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	//	ТекстовыйДокИзФайла = Новый ТекстовыйДокумент;
	//	ТекстовыйДокИзФайла.ДобавитьСтроку(Тело);
	//	ТекстовыйДокИзФайла.Записать(ВремФайл, КодировкаТекста.UTF8);
		
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		
	
			
	
	
	Если Ответ.КодСостояния=202 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Объект._Order_ID=NNN.order_id;
	
	ИначеЕсли Ответ.КодСостояния=200 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Объект._Order_ID=NNN.document_id;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Ответ(Объект,Текст1);
		КонецЕсли;
	
	//Если Ответ.КодСостояния<>200 Тогда
	//	
	//	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
	//	  Текст1=Ответ.ПолучитьТелоКакСтроку();
	//		Попытка
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//			Объект.ОшибкаОтправки=NNN.error_message;
	//			
	//		Исключение
	//		КонецПопытки;
	//	Иначе
	//		Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета");
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//		Объект._Order_ID=NNN.order_id;
	//КонецЕсли;
	Объект.Записать();
	
КонецПроцедуры




Функция ОтправитьАгрегациюНаСервере_ХамелеонЦРПТ(ТекущийПользователь,Агрегация) Экспорт
	ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	
	объект=Агрегация.ПолучитьОбъект();
	Thumbprint_1=Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(ТекущийПользователь);
	
	Если ЗначениеЗаполнено(Объект._Order_ID) 
		И Объект.Статус<>ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ")
		Тогда
		Сообщить("Агрегация отправлена.");
		Возврат Ложь;
	КонецЕслИ;
	
	
	Если Thumbprint_1.НаименованиеСтенда="Табак"
		ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак" Тогда
		Если Объект.ЧерезСУЗ=Ложь Тогда
			Объект.ЧерезСУЗ=Истина;
		КонецЕсли;
	КонецЕсли;
	
	
	//Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
	//	ОтправитьАгрегациюЛекартсва(Thumbprint_1);
	//	Возврат;
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
		ОтправитьАгрегациюЛекартсва(Thumbprint_1,Объект);
		Возврат Истина;
		
	ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ВидДокументаУпаковок_ХамелеонЦРПТ.ИзъятиеИзУпаковки") Тогда
		
		ИзъятьИзУпаковки(Thumbprint_1,Объект);
		
		Возврат Истина;
		
		
	ИначеЕсли Объект.ЧерезСУЗ И Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ВидДокументаУпаковок_ХамелеонЦРПТ.Формирование") 
//		ИЛИ Thumbprint_1.НаименованиеСтенда="Табак"
		Тогда
		ОтправитьАгрегациюЧереСУЗ(Объект,Thumbprint_1);
		
		Возврат Истина;
	КонецЕсли;
	
	
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		Сообщить("Не удалось получить токен по организации");
		Возврат Ложь;
	Конецесли;
	
	
		СформироватьФайлДляОтправки=СформироватьXmlФайлИмпорт_Агрегация(Объект);
Если Не ЗначениеЗаполнено(СформироватьФайлДляОтправки) Тогда
		Возврат Ложь;
	КонецЕсли;		
		Попытка
//			Если НеПрошлаПроверкаИмпорт(СформироватьФайлДляОтправки) Тогда
//				Объект.ОшибкаОтправки="Проверка документа не прошла по схеме xsd";
				//ПоказатьПредупреждение("");
//				Возврат;
//				
//			КонецЕсли;
			
			
		Исключение
		КонецПопытки;
		
	Подписанный="";
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
	Подписанный="";
	ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1,Подписанный,Истина);
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
				Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	
	
	Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
				Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
			Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
			Добав=СтрЗаменить(Добав,"\r\n","");

	Тело="{
	|""product_document"":"""+Добав+""",
	|""document_format"": ""MANUAL"",";
	
	Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ВидДокументаУпаковок_ХамелеонЦРПТ.Расформирование") Тогда
			Тело=Тело+"
			|""type"":""DISAGGREGATION_DOCUMENT"",";
		КонецЕсли;
	
	Тело=Тело+"
	|""signature"":"""+Подписанный+"""}";
	
 	//Если ОбработкаWEBНаСервере Тогда
	//	Если НЕ ЗагрузканаСервереОтправить(Thumbprint_1,СРегистра,УжеОтправили,Тело) Тогда
	//			Если УжеОтправили=Истина Тогда
	//			//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
	//		Иначе
	//			Получение_Токена(Thumbprint_1);
	//			ОтправитьВЦРПТ(Команда,Истина)			
	//	КонецЕсли
		
	//	КонецЕсли;
		
		
	//Иначе
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
 			что=Thumbprint_1.что;
			
			
			Если Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ВидДокументаУпаковок_ХамелеонЦРПТ.Расформирование") Тогда
				Если Thumbprint_1.НаименованиеСтенда="Альтернативный табак" ИЛИ Thumbprint_1.НаименованиеСтенда="Табак" Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v3/true-api/lk/documents/create?pg="+что);
					
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/disaggregation/create?pg="+что);
				КонецЕсли;
			ИначеЕсли Объект.ТипДокумента=ПредопределенноеЗначение("Перечисление.ВидДокументаУпаковок_ХамелеонЦРПТ.ДобавлениеВУпаковку") Тогда
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/reaggregation/create?pg="+что);
			Иначе
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/aggregation/create?pg="+что);
			КонецЕсли;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Объект,Текст1);
	КонецЕсли;
		
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
		ИЛИ Ответ.КодСостояния=201 
		Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			Объект._Order_ID=Текст1;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			//Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Возврат Ложь;
			//Иначе
			//	Получение_Токена(Thumbprint_1);
			//	ОтправитьВЦРПТ(Команда,Истина)			
			//КонецЕсли
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						
						Если Найти(Текст1,"Billing contract for shoes product group not signed by participant")>0 Тогда
							Сообщить("Договор биллинга для выбранной группы не подписан участником.");
						Иначе
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
							КонецПопытки;
							
						КонецПопытки;
						КонецЕсли;
					Исключение
					КонецПопытки;
		//	Иначе
		//		Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	//КонецЕсли;
	
	КонецЕсли;
	Объект.Записать();

КонецФункции

Процедура ЗапишемВРегистр(Объект,ТекстДокумент)
	
	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Объект.Ссылка);
	РегДв.Отбор.Вид.Установить("Отправлен заказ");
	Добав=РегДв.Добавить();
	Добав.Документ=ОБъект.Ссылка;
	Добав.Вид="Отправлен заказ";
	Добав.Файл=Новый ХранилищеЗначения(ТекстДокумент,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
КонецПроцедуры

Процедура ЗапишемВРегистр_Ответ(Объект,ТекстДокумент)
	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Объект.Ссылка);
	РегДв.Отбор.Вид.Установить("Получили ответ");
	Добав=РегДв.Добавить();
	Добав.Документ=ОБъект.Ссылка;
	Добав.Вид="Получили ответ";
	Добав.Файл=Новый ХранилищеЗначения(ТекстДокумент,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
КонецПроцедуры

Функция НаСервереФормируемОтчетОбИспользовании(Объект,Thumbprint_1,session_ui)
	ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	
	
	Если Объект.СерийныеНомера.Количество()=0 Тогда
		Возврат "";
	КонецЕсли;
	//МассивФайлов=Новый Массив;
//Для Каждого Стр Из Объект.Товары Цикл
	
Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
	
	//МассивТекстов=Новый Массив;

		//Текст = Сформировать311_XSD(session_ui,НСтрок);
		
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("documents");
	Чтение.ЗаписатьАтрибут("version","1.35");
	
	Чтение.ЗаписатьНачалоЭлемента("register_product_emission");
	Чтение.ЗаписатьАтрибут("action_id","313");
	Чтение.ЗаписатьНачалоЭлемента("subject_id");
	Чтение.ЗаписатьТекст(Объект.Организация.subjectIdФармацевтика);
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьНачалоЭлемента("operation_date");
	Если Найти(Thumbprint_1.АдресКАПИ,"api")=1 Тогда
		
		//Время=ПолучитьЧасовойПоясИнформационнойБазы();
		
		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"+00:00");
	Иначе
		Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"+00:00");
	
	конецесли;
	
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("release_info");
	
	Чтение.ЗаписатьНачалоЭлемента("doc_date");
	Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=дд.ММ.гггг"));
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("doc_num");
	Чтение.ЗаписатьТекст(Объект.Номер);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("confirmation_num");
	Чтение.ЗаписатьТекст(Объект.Номер);
	Чтение.ЗаписатьКонецЭлемента();

	
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Чтение.ЗаписатьНачалоЭлемента("signs");
//	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));

	Для Каждого Стр_c Из Объект.СерийныеНомера Цикл
		Чтение.ЗаписатьНачалоЭлемента("sgtin");
		
		Штрих=Стр_c.cis;
		Штрих=Сред(Штрих,3,14)+Сред(Штрих,19);
		
		Чтение.ЗаписатьТекст(Штрих);
		Чтение.ЗаписатьКонецЭлемента();
		
		  
		
	Конеццикла;
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Текст=Чтение.Закрыть();
//	МассивТекстов.Добавить(Текст);
	 	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;
	
	Возврат Текст;
		
	
	
	
	
	Для Каждого Стр_1 Из Объект.Товары Цикл
		
		НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));

		//Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));

		//Текст = Сформировать311_XSD(session_ui,НСтрок);
		
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("documents");
	Чтение.ЗаписатьАтрибут("version","1.35");
	
	Чтение.ЗаписатьНачалоЭлемента("register_end_packing");
	Чтение.ЗаписатьАтрибут("action_id","313");
	Чтение.ЗаписатьНачалоЭлемента("subject_id");
	Чтение.ЗаписатьТекст(Объект.Организация.subjectIdФармацевтика);
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьНачалоЭлемента("operation_date");
	Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"00:00");
	Чтение.ЗаписатьКонецЭлемента();
	
	
	
	
	
	Чтение.ЗаписатьНачалоЭлемента("signs");
//	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));

	Для Каждого Стр_c Из НСтрок Цикл
		Чтение.ЗаписатьНачалоЭлемента("sgtin");
		
		Штрих=Стр_c.cis;
		Штрих=Сред(Штрих,3,14)+Сред(Штрих,19);
		
		Чтение.ЗаписатьТекст(Штрих);
		Чтение.ЗаписатьКонецЭлемента();
		
		  
		
	Конеццикла;
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Текст=Чтение.Закрыть();
	//МассивТекстов.Добавить(Текст);
	 	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;
		
		
		
		Продолжить;
		
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("documents");
	Чтение.ЗаписатьАтрибут("version","1.35");
	
	Чтение.ЗаписатьНачалоЭлемента("register_end_packing");
	Чтение.ЗаписатьАтрибут("action_id","311");
	Чтение.ЗаписатьНачалоЭлемента("subject_id");
	Чтение.ЗаписатьТекст(Объект.Организация.subjectIdФармацевтика);
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьНачалоЭлемента("operation_date");
	Чтение.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"00:00");
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьНачалоЭлемента("order_type");
	Чтение.ЗаписатьТекст("1");
	Чтение.ЗаписатьКонецЭлемента();
	//
	Чтение.ЗаписатьНачалоЭлемента("series_number");
	Чтение.ЗаписатьТекст("1");
	Чтение.ЗаписатьКонецЭлемента();
	//
	Чтение.ЗаписатьНачалоЭлемента("expiration_date");
	Чтение.ЗаписатьТекст(Формат(Стр_1.Годендо,"ДФ=""дд.ММ.гггг"""));
	Чтение.ЗаписатьКонецЭлемента();
	//
	Чтение.ЗаписатьНачалоЭлемента("gtin");
	Чтение.ЗаписатьТекст(ДополнитьСтроку(xmlString(Стр_1.gtin.gtin)));
	Чтение.ЗаписатьКонецЭлемента();
	//
	Чтение.ЗаписатьНачалоЭлемента("signs");
//	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));

	Для Каждого Стр_c Из НСтрок Цикл
		Чтение.ЗаписатьНачалоЭлемента("sgtin");
		
		Штрих=Стр_c.cis;
		Штрих=Сред(Штрих,3,14)+Сред(Штрих,19);
		
		Чтение.ЗаписатьТекст(Штрих);
		Чтение.ЗаписатьКонецЭлемента();
		
		  
		
	Конеццикла;
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Текст=Чтение.Закрыть();
	//МассивТекстов.Добавить(Текст);
	 	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;
Конеццикла;
	//Возврат МассивТекстов
ИначеЕсли Thumbprint_1.НаименованиеСтенда="Табак"
	ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
	Тогда
	Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();
				Чтен.ЗаписатьИмяСвойства("sntins");
		
              		Чтен.ЗаписатьНачалоМассива();
					cisRjhjn="";
		Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		
			Если ЗначениеЗаполнено(Стр_1.cis) Тогда
					cisRjhjn=Стр_1.cis;
				//	Сообщить(cisRjhjn);	
				Если Сред(Стр_1.cis,1,2)="01" Тогда /////ВВОД В ОБОРОТ!!!!
												//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
							// Данный фрагмент построен конструктором.
							// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
							
							Запрос = Новый Запрос;
							Запрос.Текст = 
								"ВЫБРАТЬ
								|	ЗаказМарок_ХамелеонЦРПТКМИзAPI.НомерКМ,
								|	ЗаказМарок_ХамелеонЦРПТКМИзAPI.НомерКМ_Короткий
								|ИЗ
								|	Документ.ЗаказМарок_ХамелеонЦРПТ.КМИзAPI КАК ЗаказМарок_ХамелеонЦРПТКМИзAPI
								|ГДЕ
								|	ЗаказМарок_ХамелеонЦРПТКМИзAPI.НомерКМ_Короткий = &НомерКМ_Короткий";
							
							Запрос.УстановитьПараметр("НомерКМ_Короткий", Сред(Стр_1.cis,1,25));
							
							РезультатЗапроса = Запрос.Выполнить();
							
							ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
							сшы=Стр_1.cis;
							Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
								Если ВыборкаДетальныеЗаписи.НомерКМ_Короткий=Сред(Стр_1.cis,1,25) Тогда
									сшы=РаскодироватьСтроку(ВыборкаДетальныеЗаписи.НомерКМ,СпособКодированияСтроки.КодировкаURL);
									Прервать;
								КонецЕсли;
							конеццикла;
							//Если ВыборкаДетальныеЗаписи.Следующий() И ЗначениеЗАполнено(ВыборкаДетальныеЗаписи.НомерКМ) Тогда
								// Вставить обработку выборки ВыборкаДетальныеЗаписи
							//	чтен.ЗаписатьЗначение(РаскодироватьСтроку(ВыборкаДетальныеЗаписи.НомерКМ,СпособКодированияСтроки.КодировкаURL))
								
							//Иначе
								чтен.ЗаписатьЗначение(сшы)
								
							//КонецЕсли;;
							
							//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

					
				Иначе
					чтен.ЗаписатьЗначение(Стр_1.cis)
				КонецЕсли;
					
				КонецЕсли;
		//	Конеццикла;
			
	         Конеццикла;
			    чтен.ЗаписатьКонецМассива();
				
				Чтен.ЗаписатьИмяСвойства("usageType");
				
				Чтен.ЗаписатьЗначение("USED_FOR_PRODUCTION");
				
				//Если ЗначениеЗаполнено(Стр_1.Годендо) тогда
//					Чтен.ЗаписатьИмяСвойства("expirationDate");
//					Чтен.ЗаписатьЗначение(Формат(Стр_1.Годендо,"ДФ=""дд.ММ.гггг"""));
					
					
				//Иначе
					//Чтен.ЗаписатьИмяСвойства("expirationDate");
					//Чтен.ЗаписатьЗначение("010101");
						
					
				//КонецЕсли;
				
//					Чтен.ЗаписатьИмяСвойства("orderType");
//					Чтен.ЗаписатьЗначение(Объект.OrderType);
					
					
					//Чтен.ЗаписатьИмяСвойства("ownerId");
					//Чтен.ЗаписатьЗначение(Объект.ТекущийПользователь.ИдентификаторСУЗ);
					Чтен.ЗаписатьИмяСвойства("productionLineId");
					Если ЗначениеЗаполнено(Объект.НомерПартии) Тогда
						Чтен.ЗаписатьЗначение(Объект.НомерПартии);
					Иначе
						Чтен.ЗаписатьЗначение("1");
					КонецЕсли;
					
					  Если ЗначениеЗаполнено(cisRjhjn) Тогда
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа._Order_ID КАК _Order_ID
						|ИЗ
						|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
						|ГДЕ
						|	(НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий = &НомерКМ_Короткий
						|			)
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ
						|	ЗаказМарок_ХамелеонЦРПТКМИзAPI.Ссылка._Order_ID
						|ИЗ
						|	Документ.ЗаказМарок_ХамелеонЦРПТ.КМИзAPI КАК ЗаказМарок_ХамелеонЦРПТКМИзAPI
						|ГДЕ
						|	(ЗаказМарок_ХамелеонЦРПТКМИзAPI.НомерКМ_Короткий = &НомерКМ_Короткий
						|			)";
					
					Запрос.УстановитьПараметр("НомерКМ_Короткий", cisRjhjn);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						НомерЗ=ВыборкаДетальныеЗаписи._Order_ID
						
						
					КонецЦикла;
					
					Если Не ЗначениеЗаполнено(НомерЗ) тогда
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
						НомерЗ=xmlString(Объект.Ссылка.УникальныйИдентификатор());
					КонецЕсли;
	
				Иначе
					
					НомерЗ=xmlString(Объект.Ссылка.УникальныйИдентификатор());
				КонецЕсли;
					
					
					Чтен.ЗаписатьИмяСвойства("productionOrderId");
					Чтен.ЗаписатьЗначение(НомерЗ);
					
	
			Чтен.ЗаписатьКонецОбъекта();
					
		
		
		Текст=Чтен.Закрыть();
//	     МассивФайлов.Добавить(Новый Структура("Текст,Идентификатор",Текст,Стр.ПолучитьИдентификатор()));
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;
	
	
Иначе


		Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();
				Чтен.ЗаписатьИмяСвойства("sntins");
		
              		Чтен.ЗаписатьНачалоМассива();
		Для Каждого Стр_1 Из Объект.СерийныеНомера Цикл
		
			Если ЗначениеЗаполнено(Стр_1.cis) Тогда
				
				
				Если Thumbprint_1.НаименованиеСтенда="Обувь" Тогда
					
								
				НомерКМ="";		
				
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	НомераКМ_ХамелеонЦРПТ.НомерКМ
					|ИЗ
					|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
					|ГДЕ
					|	НомераКМ_ХамелеонЦРПТ.НомерКМ_Короткий = &НомерКМ_Короткий";
				
				Запрос.УстановитьПараметр("НомерКМ_Короткий", Стр_1.cis);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					НомерКМ=ВыборкаДетальныеЗаписи.НомерКМ;
					НомерКМ=РаскодироватьСтроку(НомерКМ,СпособКодированияСтроки.КодировкаURL);
			
					
				КонецЦикла;
				Если Не ЗначениеЗАполнено(НомерКМ) Тогда
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
						
						
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты.Регистратор
					|ИЗ
					|	РегистрНакопления.ОстаткиКМЭмитированые_ХамелеонЦРПТ.Обороты(, , Регистратор, СерийныйНомер = &cis) КАК ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты
					|ГДЕ
					|	ОстаткиКМЭмитированые_ХамелеонЦРПТОбороты.Регистратор ССЫЛКА Документ.ЗаказМарок_ХамелеонЦРПТ";
				
				Запрос.УстановитьПараметр("cis", Стр_1.cis);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				РРР=КодироватьСтроку(Стр_1.cis,СпособКодированияСТроки.КодировкаURL);
				НомерКМ=Стр_1.cis;
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				

				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					Для Каждого Стр_111 Из  ВыборкаДетальныеЗаписи.Регистратор.КМИзAPI Цикл
						Если Найти(Стр_111.НомерКМ,РРР)=1 Тогда
							НомерКМ=Стр_111.НомерКМ;
							НомерКМ=РаскодироватьСтроку(НомерКМ,СпособКодированияСтроки.КодировкаURL);
			
							
							Прервать;
						КонецЕсли;
						
					Конеццикла;
					
					
				КонецЕсли;
				КонецЕсли ;
				
					
					
					cis=НомерКМ;
					
					
				Иначе
					cis=РаскодироватьСтроку(Стр_1.cis,СпособКодированияСтроки.КодировкаURL);
				КонецЕсли;
				
					чтен.ЗаписатьЗначение(cis)
					
				КонецЕсли;
		//	Конеццикла;
			
	         Конеццикла;
			    чтен.ЗаписатьКонецМассива();
				
				Чтен.ЗаписатьИмяСвойства("usageType");
				
				Чтен.ЗаписатьЗначение("USED_FOR_PRODUCTION");
				
				Если ЗначениеЗаполнено(Стр_1.Годендо) тогда
					Чтен.ЗаписатьИмяСвойства("expirationDate");
					Чтен.ЗаписатьЗначение(Формат(Стр_1.Годендо,"ДФ=""дд.ММ.гггг"""));
					
				КонецЕсли;	
				//Иначе
					//Чтен.ЗаписатьИмяСвойства("expirationDate");
					//Чтен.ЗаписатьЗначение("010101");
						
					
				//КонецЕсли;
				
					Чтен.ЗаписатьИмяСвойства("orderType");
					Чтен.ЗаписатьЗначение(Объект.OrderType);
					
					
					Чтен.ЗаписатьИмяСвойства("ownerId");
					Чтен.ЗаписатьЗначение(Объект.ТекущийПользователь.ИдентификаторСУЗ);
					Чтен.ЗаписатьИмяСвойства("seriesNumber");
					Чтен.ЗаписатьЗначение("1");
					Чтен.ЗаписатьИмяСвойства("subjectId");
					Чтен.ЗаписатьЗначение(Объект.ТекущийПользователь.ИдентификаторСУЗ);
					
	
			Чтен.ЗаписатьКонецОбъекта();
					
		
		
		Текст=Чтен.Закрыть();
	
	// Конеццикла;
	 КонецЕсли;
	
	Возврат Текст;
	
	
КонецФункции

Функция СформироватьОтчетОбИспользованииМассив_Молоко(Объект) Экспорт
	ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	
	МассивТекстов=Новый Массив;
	
	Для Каждого Стр_1 Из Объект.Товары Цикл
		Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();
		
		НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));

	
	Чтен.ЗаписатьИмяСвойства("sntins");
	Чтен.ЗаписатьНачалоМассива();
//	НСтрок=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("gtin",ДополнитьСтроку(xmlString(Стр_1.gtin.gtin))));

	Для Каждого Стр_c Из НСтрок Цикл
		cis=РаскодироватьСтроку(Стр_c.cis,СпособКодированияСтроки.КодировкаURL);
		
		Чтен.ЗаписатьЗначение(cis);
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	
		Чтен.ЗаписатьИмяСвойства("usageType");
		Чтен.ЗаписатьЗначение("USED_FOR_PRODUCTION");
		Если Стр_1.ЧасыДо Тогда
			
			Чтен.ЗаписатьИмяСвойства("expDate72");
			Чтен.ЗаписатьЗначение(Формат(Стр_1.ГоденДо,"ДФ=""ггММддЧЧмм"""));
			
		Иначе
			Чтен.ЗаписатьИмяСвойства("expDate");
			Чтен.ЗаписатьЗначение(Формат(Стр_1.ГоденДо,"ДФ=""ггММдд"""));
		КонецЕсли;
	//	Чтен.ЗаписатьИмяСвойства("expDate72");
	//	Чтен.ЗаписатьЗначение(Формат(Стр_1.ГоденДо,"ДФ=""ггММдд"""));
		Чтен.ЗаписатьИмяСвойства("accompanyingDocument");
		Чтен.ЗаписатьЗначение(Стр_1.НомерВСД);
		Чтен.ЗаписатьИмяСвойства("usedInProduction");
		Чтен.ЗаписатьЗначение("0");
		
	
	Чтен.ЗаписатьКонецОбъекта();
	
	
	Текст=Чтен.Закрыть();
	МассивТекстов.Добавить(Новый Структура("Текст,Идентификатор",Текст,Стр_1.НомерСтроки));
	 	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр(Объект,Текст);
		КонецЕсли;
		
	Конеццикла;	
	
	Возврат МассивТекстов

Конецфункции


//////Срегиятра - необходимо получить из регистра подключения
///ТекщийПользователь - пользователь, который будет отправлять отчет о нанесении
///Возвращает Ложь - не удалось отправить отчет, Истина - удалось отправить отчет.
Функция ОтправкаОтчетаОНанесении_ХамелеонЦРПТ(ТекущийПользователь,ОтчетОНанесении) Экспорт
	ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	Thumbprint_1=Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(ТекущийПользователь);
	СтруктураНастроек=Неопределено;
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
	Если ЗначениеЗаполнено(Срегистра) тогда
		
		Если ОтчетОНанесении.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен")
			ИЛИ ОтчетОНанесении.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус")
			ИЛИ ОтчетОНанесении.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство")
			ИЛИ ОтчетОНанесении.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы")
			ИЛИ ОтчетОНанесении.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован") 
			ИЛИ ОтчетОНанесении.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан") Тогда
			
			Сообщить(Строка(ОтчетОНанесении)+" уже обработан");
			Возврат Ложь;
		КонецЕсли;
		
		
		Если ОтчетОНанесении.ТипДокумента=ПредопределенноеЗначение("Перечисление.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании") ТОгда
				Объект=ОтчетОНанесении.Ссылка.Получитьобъект();

					Если Thumbprint_1.НаименованиеСтенда="Молоко" Тогда
						Объект.Статус=Неопределено;
						МассивФайлов=СформироватьОтчетОбИспользованииМассив_Молоко(ОтчетОНанесении);
						Сч=0;
						
						АдресРаздробить=Thumbprint_1.АдресСУЗ;
						Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
						Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
						Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
						Порт=Сред(Порт,Найти(Порт,":")+1);
						Попытка
							Порт=число(Порт);
						Исключение
							Порт=Неопределено;
						КонецПопытки;
						
							Если Найти(АдресРаздробить,"https")=1 Тогда
								Защищ=Новый ЗащищенноеСоединениеopenSSL();
							Иначе
								Защищ=Неопределено;
							КонецЕсли;
							
							
						
						
					Для Каждого СформироватьФайлДляОтправки_3 ИЗ МассивФайлов Цикл
						СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки_3.Текст,Символы.ПС,"");
						СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
					
						Тело=СформироватьФайлДляОтправки;
							
							
							
						Если Не ЗначениеЗаполнено(Адрес) Тогда
							
							Сообщить("В пользователе не заполнен адрес СУЗ");
							Возврат Ложь;
							
						КонецЕсли;
					
							Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
								Прокси=Новый ИнтернетПрокси;
								Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
							
								HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
							Иначе
								HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
							КонецЕсли;
							
					
							
							
				//			Если РаботатьНаV1 Тогда
				//		HTTPЗапрос=Новый HTTPЗапрос("api/utilisation");
				//			Иначе
						HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/utilisation?omsId="+Thumbprint_1.ИдентификаторСУЗ);
				//		КонецЕсли;
					HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
												ТокенСУЗ=ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);

					HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
					
					//Если ЗначениеЗаполнено(Подписанный) тогда
						//HTTPЗапрос.Заголовки.Вставить("X-Signature",Подписанный);
					//КонецЕсли;
					
					HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
					Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
					Текст1=Ответ.ПолучитьТелоКакСтроку();
					
					
									Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
						ЗапишемВРегистр_Ответ(Объект,Текст1);
					КонецЕсли;
					
					
					Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
								//ЧтениеJSON = Новый ЧтениеJSON;
								//ЧтениеJSON.УстановитьСтроку(Текст1);
								NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
								НСтр=Объект.Товары[СформироватьФайлДляОтправки_3.Идентификатор-1];//.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
							НСтр.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
								НСтр.order_ID=NNN.reportId;
								
							Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
								
																	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
					Иначе
						//	Если УжеОтправили=Истина Тогда
										НСтр=Объект.Товары[СформироватьФайлДляОтправки_3.Идентификатор];//.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
									НСтр.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
									Попытка
										//ЧтениеJSON = Новый ЧтениеJSON;
										//ЧтениеJSON.УстановитьСтроку(Текст1);
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
										попытка
											
											НСтр.ОшибкаОтправки=NNN.error_message;
										Исключение
											Попытка
												НСтр.ОшибкаОтправки=NNN.error_description;
												Если NNN.error="access_denied" Тогда
													Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
												КонецЕсли;
											Исключение
												Сообщить(Текст1);
											КонецПопытки;
											
										КонецПопытки;
										
									Исключение
									КонецПопытки;
						//	Иначе
						//		Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
						//		ОтправитьЗаявку(Команда,Истина)			
						//	КонецЕсли
					КонецЕсли;
					Объект.ЗаписатЬ();
					//Если Ответ.КодСостояния<>200 Тогда
					//	
					//	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					//	  Текст1=Ответ.ПолучитьТелоКакСтроку();
					//		Попытка
					//			ЧтениеJSON = Новый ЧтениеJSON;
					//			ЧтениеJSON.УстановитьСтроку(Текст1);
					//			NNN=ПрочитатьJSON(ЧтениеJSON);
					//			Объект.ОшибкаОтправки=NNN.error_message;
					//			
					//		Исключение
					//		КонецПопытки;
					//	Иначе
					//		Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета");
					//			ЧтениеJSON = Новый ЧтениеJSON;
					//			ЧтениеJSON.УстановитьСтроку(Текст1);
					//			NNN=ПрочитатьJSON(ЧтениеJSON);
					//		Объект._Order_ID=NNN.order_id;
					//КонецЕсли;
					//КонецеслИ;
				Конеццикла;
				
				Возврат Истина;
			КонецЕсли;	
	СформироватьФайлДляОтправки_1=НаСервереФормируемОтчетОбИспользовании(ОтчетОНанесении,Thumbprint_1,"");
	
	
	
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
	//ТипЗнч(СформироватьФайлДляОтправки_1)=Тип("Массив") тогда
		//СРегистра=Получение_Токена_ЛДМП(Thumbprint_1);	
		//СформироватьФайлДляОтправки_1=НаСервереФормируемОтчетОбИспользовании(Thumbprint_1,СРегистра);
		
		//Сч=0;
		//Для Каждого Стр_1 Из Объект.Товары Цикл
			
			СформироватьФайлДляОтправки=СформироватьФайлДляОтправки_1;
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
		
		
		//Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

				
				
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("document");
	Чтен.ЗаписатьЗначение(Добав);
	//Чтен.ЗаписатьИмяСвойства("sign");
	//Чтен.ЗаписатьЗначение(Подписанный);
	Чтен.ЗаписатьИмяСвойства("request_id");
	Чтен.ЗаписатьЗначение(ВернутьУНИКУМ());
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();
	
				 
				 
		//Тело="{
		//|""doc_type"":""311"",
		//|""document"":"""+Добав+""",
		//|""sign"":"""+Подписанный+""",
		//|""request_id"":"""+ВернутьУНИКУМ()+"
		//|}";
			
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/send");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		
	Если Ответ.КодСостояния=200 ИЛИ Ответ.КодСостояния=200  Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			Объект._Order_ID=NNN.document_id;
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
				//НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
//				Объект._Order_ID=NNN.orderId;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Объект.ОшибкаОтправки=Текст1;
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;

		Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
			ЗапишемВРегистр_Ответ(Объект,Текст1);
		КонецЕсли;
			
		
		
		
			
			
		///Конеццикла;
		
		 Объект.Записать();
		
		Возврат Истина;
	КонецЕсли;
	
	
	СформироватьФайлДляОтправки_3=СформироватьФайлДляОтправки_1;
//	НеПрошлаПроверка21(СформироватьФайлДляОтправки);
//Для Каждого СформироватьФайлДляОтправки_3 ИЗ СформироватьФайлДляОтправки_1 Цикл
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки_3,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
	
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
	//			Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
	//		Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
	//		Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	
	
	//Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
	//			Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
	//		Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
	//		Добав=СтрЗаменить(Добав,"\r\n","");

	Тело=СформироватьФайлДляОтправки;
		АдресРаздробить=Thumbprint_1.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
		
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
			
			
			
			
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			Сообщить("В пользователе не заполнен адрес СУЗ");
			Возврат Ложь; 
			
		КонецЕсли;
	
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;
			
			
//			Если РаботатьНаV1 Тогда
//		HTTPЗапрос=Новый HTTPЗапрос("api/utilisation");
//			Иначе
		HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/utilisation?omsId="+Thumbprint_1.ИдентификаторСУЗ);
//		КонецЕсли;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
								ТокенСУЗ=ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);

	HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
					Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Объект,Текст1);
	КонецЕсли;
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
//				НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
//				Если РаботатьнаV1 Тогда
//			Объект._Order_ID=NNN;
//				Иначе
			Объект._Order_ID=NNN.reportId;
//			Конецесли;
								


			//Объект._Order_ID=NNN.order_id;
	
//	ИначеЕсли Ответ.КодСостояния=200 Тогда
//			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик");
//				//ЧтениеJSON = Новый ЧтениеJSON;
//				//ЧтениеJSON.УстановитьСтроку(Текст1);
//				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
////				Если РаботатьнаV1 Тогда
////			Объект._Order_ID=NNN;
////				Иначе
//			Объект._Order_ID=NNN.reportId;
////			Конецесли;
//				//НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
////				Объект._Order_ID=NNN.orderId;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	//Если Ответ.КодСостояния<>200 Тогда
	//	
	//	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
	//	  Текст1=Ответ.ПолучитьТелоКакСтроку();
	//		Попытка
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//			Объект.ОшибкаОтправки=NNN.error_message;
	//			
	//		Исключение
	//		КонецПопытки;
	//	Иначе
	//		Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета");
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//		Объект._Order_ID=NNN.order_id;
	//КонецЕсли;
	Объект.Записать();
	

			
			//ОтправитьОтчетОбИспользовании();
		Иначе
			Сообщить("По данной функции можно отправить только отчет о нанесении");
			Возврат ложь;
		Конецесли;
		
		
		
	Иначе
		
		Возврат ложь;
		Сообщить("Не подключено к ЦРПТ");
	КонецЕсли;
Конецфункции




Функция ЗагружаемГТИН_ПоМарке_Соответвтвие(Текст,ИНН,Тотал,числоЗагрузили,Thumbprint_1,СпрПррр=Неопределено,ОбновитьВсе=Ложь) Экспорт

	
	числоЗагрузили=0;
	
	Если ТипЗнч(Текст)=Тип("Строка") Тогда
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Текст);
		
		//Попытка
				NNN=ПрочитатьJSON(ЧтениеJSON,Истина);
			Иначе
				NNN=Текст;
			КонецЕсли;	
		Попытка
				
				Для Каждого Стр_1 Из NNN Цикл
					Стр=Стр_1.Значение;
				//Стр=NNN[];
				//Тотал=NNN.total;
				
				//Для Каждого Стр Из NNN.results Цикл
				//	Если ИНН<>Стр.INN Тогда
				//		Продолжить;
				//	КонецЕсли;
					//Если     Массив.Найти(Число(Стр.gtin))=Неопределено Тогда
					//	Продолжить;
					//КонецЕсли;
					
					числоЗагрузили=числоЗагрузили+1;
					СпрД=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Стр["gtin"]));
					//СпрПррр=Число(Стр["gtin"]);
					Если СпрД<>Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка() Тогда
						СпрПррр=СпрД.Ссылка;
						Возврат СпрД.Ссылка;
						СпрД=СпрД.ПолучитьОбъект();
						
					Иначе
						СпрД=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
					КонецЕсли;
					Если Не ЗначениеЗаполнено(СпрД.Тип) Тогда
						Если Thumbprint_1.НаименованиеСтенда="Обувь" Тогда
							СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
						ИначеЕсли Thumbprint_1.НаименованиеСтенда="Табак"
	Тогда
							СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак;
							ИначеЕсли Thumbprint_1.НаименованиеСтенда="Альтернативный табак" Тогда
							СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак;
								
								
						КонецЕсли;
					Конецесли;
						
					СпрД.БрендТорговаяМарка=Стр["brand"];
					country="";
					
					country=Стр["country"];
					Если ЗначениеЗАполнено(country) Тогда
						
						Если country="РОССИЙСКАЯ ФЕДЕРАЦИЯ" Тогда
							СпрД.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
						Иначе
							СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(country);
						КонецЕсли;	
						
						//СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(Стр.country);
					//ИначеЕсли Не ЗначениеЗаполнено(	СпрД.СтранаПроизводства) Тогда
					//	СпрД.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
					КонецЕсли;
					СпрД.GTIN=Число(Стр["gtin"]);
					//СпрД.id=Стр.id;
					СпрД.ИННПроизводителяИмпортёра=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",Стр["producerInn"]);
					Если Не ЗначениеЗАполнено(СпрД.ИННПроизводителяИмпортёра) Тогда
						Спр_К=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
						Спр_К.ИНН=Стр["producerInn"];
						Спр_К.Наименование=Стр["producerName"];
						Спр_К.Записать();
						СпрД.ИННПроизводителяИмпортёра=Спр_К.Ссылка;
						
					Конецесли;
					СпрД.МатериалНиза=Стр["materialDown"];
					СпрД.МатериалПодкладки=Стр["materialLining"];
					СпрД.МатериалВерха=Стр["materialUpper"];
					СпрД.Цвет=Стр["color"];
					
					СпрД.МодельПроизводителяАртикул=Стр["model"];
					СпрД.КодТНВЭДКороткий=Стр["tnVedCode"];
					СпрД.Цвет=Стр["color"];
					
					
					
					tnvd="";
					tnvd=Стр["tnvd"];
					Если ЗначениеЗаполнено(tnvd) Тогда
						СпрД.КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(tnvd);
						
						Если Не ЗначениеЗаполнено(СпрД.КодТНВЭД) Тогда
							СпрК=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
							СпрК.Код=tnvd;
							СпрК.Наименование=tnvd;
							СпрК.Записать();
							СпрД.КодТНВЭД=СпрК.Ссылка;
						КонецЕсли;
						
						
					КонецЕсли;
					
					
					СпрД.Наименование=Стр["productName"];
					Если Не ЗначениеЗаполнено(СпрД.Наименование) тогда
						СпрД.Наименование=xmlString(СпрД.GTIN);
						СпрД.НаименованиеТовара=xmlString(СпрД.GTIN);
					Иначе
						СпрД.НаименованиеТовара=Стр["productName"];
					КонецЕсли;
					
					productSize=Неопределено;
				    productSize=Стр["productSize"];
					Если ЗначениеЗаполнено(productSize) тогда
						productSize=СтрЗаменить(productSize,".",",");
						СпрД.Размер=Справочники.РазмерВШтихмассовойСистеме_ХамелеонЦРПТ.НайтиПоНаименованию(productSize,Истина);
					КонецЕсли;
					
										КодПр="";
					КодПр=Стр["productTypeDesc"];
					Если ЗначениеЗаполнено(КодПр) Тогда
					СпрД.ВидОбуви=Справочники.ВидОбуви_ХамелеонЦРПТ.НайтиПоНаименованию(КодПр,Истина);
					Если Не ЗначениеЗаполнено(СпрД.ВидОбуви) тогда
						СпрВ=Справочники.ВидОбуви_ХамелеонЦРПТ.СоздатьЭлемент();
						//СпрВ.Код=Стр.productType;
						СпрВ.Наименование=КодПр;
						СпрВ.Записать();
						СпрД.ВидОбуви=СпрВ.Ссылка;
					КонецЕсли;
				КонецЕсли;
				publicationDate=Неопределено;
				    publicationDate=Стр["publicationDate"];
					Если ЗначениеЗаполнено(publicationDate) тогда
						СпрД.ДатаПубликации=Дата(1970,1,1)+Стр.publicationDate/1000;					
					Конецесли;
					////То была обувь теперь сигареты
				packageType=Неопределено;
				    packageType=Стр["packageType"];
					//Если ЗначениеЗАполнено(packageType) тогда
					//	СПрд.ТипУпаковкиСигарет=Перечисления.ТипУпаковкиСигареты_ХамелеонЦРПТ[packageType];
					//КонецЕсли;
				Если ЗначениеЗаполнено(Стр["innerUnitCount"]) Тогда
					СпрД.КоличествоВГруппе=Стр["innerUnitCount"];
				Конецесли;
				productGroup=Неопределено;
				    productGroup=Стр["productGroup"];
					Если ЗначениеЗаполнено(productGroup) тогда
						СпрГр=Справочники.ГруппаСигарет_ХамелеонЦРПТ.НайтиПоНаименованию(productGroup);
						Если Не ЗначениеЗаполнено(СпрГр) Тогда
							СпрГр=Справочники.ГруппаСигарет_ХамелеонЦРПТ.СоздатьЭлемент();
							СпрГр.Наименование=productGroup;
							СпрГр.Записать();
						КонецЕсли;
						СпрД.ГруппаСигарет=СпрГр.Ссылка;
						
					КонецЕсли;
					
					
					
					
					СпрД.Записать();
					
					Сертификат=Неопределено;
					Сертификат=Стр["certDoc"];
					Если ЗначениеЗаполнено(Сертификат) Тогда
						ДатаВыдачи=Сертификат["date"];
						ДатаНачалаДействия=Дата(Сред(ДатаВыдачи,1,4),Сред(ДатаВыдачи,6,2),Сред(ДатаВыдачи,9,2));
						НаимСерт=Сертификат["number"];
						Тип=Сертификат["type"];
						Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.НайтиПоНаименованию(
						 НаимСерт);
						 Если НЕ ЗначениеЗаполнено(Сертификат) тогда
							 //Сертификат=Сертификат.ПолучитьОбъект();
							 Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.СоздатьЭлемент();
						Сертификат.Наименование=НаимСерт;
						Сертификат.ДатаНачалаДействия=ДатаНачалаДействия;
						 Сертификат.Записать();
					 КонецЕсли;
						РегСв=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
						РегСв.Отбор.Продукция.Установить(СпрД.Ссылка);
						РегСв.Отбор.Период.Установить(ДатаНачалаДействия);
						Добав=РегСв.Добавить();
						Добав.Период=ДатаНачалаДействия;
						Добав.Продукция=СпрД.Ссылка;
						Добав.Документ=Сертификат;
						Регсв.Записать(Истина);
						
					Конецесли;
					СпрПррр=СпрД.Ссылка;

					Возврат СпрД.Ссылка
				Конеццикла;	
					
			//	Конеццикла;
				
			Исключение
			//	Возврат Неопределено
			
			
	Стр=NNN;
					числоЗагрузили=числоЗагрузили+1;
					
					
					Если Не ЗначениеЗаполнено(Стр["gtin"]) тогда
						
						Если Стр["children"]<>Неопределено Тогда
							Возврат РекурсияОпределнияПродукцииПервойПопавш(Стр["children"],ИНН,Тотал,числоЗагрузили,Thumbprint_1,СпрПррр);
						Иначе
							Возврат Неопределено
						КонецЕсли;
						
						
						
						
					Иначе
						
						
						СпрД=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Стр["gtin"]));
						//СпрПррр=Число(Стр["gtin"]);
						Если СпрД<>Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка() Тогда
							СпрПррр=СпрД.Ссылка;
							Если ОбновитьВсе=Ложь Тогда
								Возврат СпрД.Ссылка;
							Конецесли;
							СпрД=СпрД.ПолучитьОбъект();
							
						Иначе
							СпрД=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
						КонецЕсли;
						Если Не ЗначениеЗаполнено(СпрД.Тип) Тогда
							Если Thumbprint_1.НаименованиеСтенда="Обувь" Тогда
								СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
							ИначеЕсли Thumbprint_1.НаименованиеСтенда="Табак"
		Тогда
								СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак;
								ИначеЕсли Thumbprint_1.НаименованиеСтенда="Альтернативный табак" Тогда
								СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак;
									
									
							КонецЕсли;
						КонецЕсли;
							
						СпрД.БрендТорговаяМарка=Стр["brand"];
						country="";
						
						country=Стр["country"];
						Если ЗначениеЗАполнено(country) Тогда
							
							Если country="РОССИЙСКАЯ ФЕДЕРАЦИЯ" Тогда
								СпрД.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
							Иначе
								СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(country);
							КонецЕсли;	
							
							//СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(Стр.country);
						//ИначеЕсли Не ЗначениеЗаполнено(	СпрД.СтранаПроизводства) Тогда
						//	СпрД.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
						КонецЕсли;
						СпрД.GTIN=Число(Стр["gtin"]);
						//СпрД.id=Стр.id;
						Если Стр["producerInn"]<>Неопределено Тогда
							СпрД.ИННПроизводителяИмпортёра=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",Стр["producerInn"]);
							Если Не ЗначениеЗАполнено(СпрД.ИННПроизводителяИмпортёра) Тогда
								Спр_К=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
								Спр_К.ИНН=Стр["producerInn"];
								Спр_К.Наименование=Стр["producerName"];
								Спр_К.Записать();
								СпрД.ИННПроизводителяИмпортёра=Спр_К.Ссылка;
								
							Конецесли;
						КонецЕсли;
						Если ЗначениеЗаполнено(Стр["materialDown"]) Тогда
							СпрД.МатериалНиза=Стр["materialDown"];
						КонецЕсли;
						Если ЗначениеЗаполнено(Стр["materialLining"]) Тогда
							СпрД.МатериалПодкладки=Стр["materialLining"];
						КонецЕсли;
						Если ЗначениеЗаполнено(Стр["materialUpper"]) Тогда
							СпрД.МатериалВерха=Стр["materialUpper"];
						Конецесли;
						Если ЗначениеЗаполнено(Стр["color"]) Тогда
							СпрД.Цвет=Стр["color"];
						КонецЕсли;
						
						Если ЗначениеЗаполнено(Стр["model"]) Тогда
							СпрД.МодельПроизводителяАртикул=Стр["model"];
						КонецЕсли;
						Если ЗначениеЗаполнено(Стр["tnVedCode"]) тогда	
							СпрД.КодТНВЭДКороткий=Стр["tnVedCode"];
						КонецЕсли;
						//СпрД.Цвет=Стр["color"];
						
						
						
						tnvd="";
						tnvd=Стр["tnvd"];
						Если ЗначениеЗаполнено(tnvd) Тогда
							СпрД.КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(tnvd);
							
							Если Не ЗначениеЗаполнено(СпрД.КодТНВЭД) Тогда
								СпрК=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
								СпрК.Код=tnvd;
								СпрК.Наименование=tnvd;
								СпрК.Записать();
								СпрД.КодТНВЭД=СпрК.Ссылка;
							КонецЕсли;
							
							
						КонецЕсли;
						
						
						СпрД.Наименование=Стр["productName"];
						Если Не ЗначениеЗаполнено(СпрД.Наименование) тогда
							СпрД.Наименование=xmlString(СпрД.GTIN);
							СпрД.НаименованиеТовара=xmlString(СпрД.GTIN);
							
						Иначе
							СпрД.НаименованиеТовара=Стр["productName"];
						КонецЕсли;
						
						productSize=Неопределено;
					    productSize=Стр["productSize"];
						Если ЗначениеЗаполнено(productSize) тогда
							productSize=СтрЗаменить(productSize,".",",");
							СпрД.Размер=Справочники.РазмерВШтихмассовойСистеме_ХамелеонЦРПТ.НайтиПоНаименованию(productSize,Истина);
						КонецЕсли;
						
											КодПр="";
						КодПр=Стр["productTypeDesc"];
						Если ЗначениеЗаполнено(КодПр) Тогда
						СпрД.ВидОбуви=Справочники.ВидОбуви_ХамелеонЦРПТ.НайтиПоНаименованию(КодПр,Истина);
						Если Не ЗначениеЗаполнено(СпрД.ВидОбуви) тогда
							СпрВ=Справочники.ВидОбуви_ХамелеонЦРПТ.СоздатьЭлемент();
							//СпрВ.Код=Стр.productType;
							СпрВ.Наименование=КодПр;
							СпрВ.Записать();
							СпрД.ВидОбуви=СпрВ.Ссылка;
						КонецЕсли;
					КонецЕсли;
					publicationDate=Неопределено;
					    publicationDate=Стр["publicationDate"];
						Если ЗначениеЗаполнено(publicationDate) тогда
							СпрД.ДатаПубликации=Дата(1970,1,1)+Стр.publicationDate/1000;					
						Конецесли;
						////То была обувь теперь сигареты
					packageType=Неопределено;
					    packageType=Стр["packageType"];
						//Если ЗначениеЗАполнено(packageType) тогда
						//	СПрд.ТипУпаковкиСигарет=Перечисления.ТипУпаковкиСигареты_ХамелеонЦРПТ[packageType];
						//КонецЕсли;
					Если ЗначениеЗаполнено(Стр["innerUnitCount"]) тогда
						СпрД.КоличествоВГруппе=Стр["innerUnitCount"];
					Конецесли;
					productGroup=Неопределено;
					    productGroup=Стр["productGroup"];
						Если ЗначениеЗаполнено(productGroup) тогда
							СпрГр=Справочники.ГруппаСигарет_ХамелеонЦРПТ.НайтиПоНаименованию(productGroup);
							Если Не ЗначениеЗаполнено(СпрГр) Тогда
								СпрГр=Справочники.ГруппаСигарет_ХамелеонЦРПТ.СоздатьЭлемент();
								СпрГр.Наименование=productGroup;
								СпрГр.Записать();
							КонецЕсли;
							СпрД.ГруппаСигарет=СпрГр.Ссылка;
							
						КонецЕсли;
						
						
						
						
						СпрД.Записать();
											СпрПррр=СпрД.Ссылка;

						
						Сертификат=Неопределено;
						Сертификат=Стр["certDoc"];
						Если ЗначениеЗаполнено(Сертификат) Тогда
							ДатаВыдачи=Сертификат["date"];
							ДатаНачалаДействия=Дата(Сред(ДатаВыдачи,1,4),Сред(ДатаВыдачи,6,2),Сред(ДатаВыдачи,9,2));
							НаимСерт=Сертификат["number"];
							Тип=Сертификат["type"];
							Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.НайтиПоНаименованию(
							 НаимСерт);
							 Если НЕ ЗначениеЗаполнено(Сертификат) тогда
								 //Сертификат=Сертификат.ПолучитьОбъект();
								 Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.СоздатьЭлемент();
							Сертификат.Наименование=НаимСерт;
							Сертификат.ДатаНачалаДействия=ДатаНачалаДействия;
							 Сертификат.Записать();
						 КонецЕсли;
							РегСв=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
							РегСв.Отбор.Продукция.Установить(СпрД.Ссылка);
							РегСв.Отбор.Период.Установить(ДатаНачалаДействия);
							Добав=РегСв.Добавить();
							Добав.Период=ДатаНачалаДействия;
							Добав.Продукция=СпрД.Ссылка;
							Добав.Документ=Сертификат;
							Регсв.Записать(Истина);
							
						Конецесли;
						Возврат СпрД.Ссылка
				
				
				  КонецЕсли;
			
			
			
			
			
			
			
			
			КонецПопытки;
	
	
Конецфункции
		
Функция РекурсияОпределнияПродукцииПервойПопавш(children,ИНН,Тотал,числоЗагрузили,Thumbprint_1,СпрПррр)
	числоЗагрузили=0;
	Для Каждого Стр Из children Цикл
		
		
					числоЗагрузили=числоЗагрузили+1;
					
					
					Если Не ЗначениеЗаполнено(Стр["gtin"]) тогда
						
						Если Стр["children"]<>Неопределено Тогда
							Возврат РекурсияОпределнияПродукцииПервойПопавш(Стр["children"],ИНН,Тотал,числоЗагрузили,Thumbprint_1,СпрПррр);
						Иначе
							Возврат Неопределено
						КонецЕсли;
						
						
						
						
					Иначе
						
						
						СпрД=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Стр["gtin"]));
						//СпрПррр=Число(Стр["gtin"]);
						Если СпрД<>Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка() Тогда
							СпрПррр=СпрД.Ссылка;
							Возврат СпрД.Ссылка;
							СпрД=СпрД.ПолучитьОбъект();
							
						Иначе
							СпрД=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
						КонецЕсли;
						Если Не ЗначениеЗаполнено(СпрД.Тип) тогда
							Если Thumbprint_1.НаименованиеСтенда="Обувь" Тогда
								СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
							ИначеЕсли Thumbprint_1.НаименованиеСтенда="Табак"
		Тогда
								СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак;
								ИначеЕсли Thumbprint_1.НаименованиеСтенда="Альтернативный табак" Тогда
								СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак;
									
									
							КонецЕсли;
							
						Конецесли;
						СпрД.БрендТорговаяМарка=Стр["brand"];
						country="";
						
						country=Стр["country"];
						Если ЗначениеЗАполнено(country) Тогда
							
							Если country="РОССИЙСКАЯ ФЕДЕРАЦИЯ" Тогда
								СпрД.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
							Иначе
								СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(country);
							КонецЕсли;	
							
							//СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(Стр.country);
						//ИначеЕсли Не ЗначениеЗаполнено(	СпрД.СтранаПроизводства) Тогда
						//	СпрД.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
						КонецЕсли;
						СпрД.GTIN=Число(Стр["gtin"]);
						//СпрД.id=Стр.id;
						СпрД.ИННПроизводителяИмпортёра=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",Стр["producerInn"]);
						Если Не ЗначениеЗАполнено(СпрД.ИННПроизводителяИмпортёра) Тогда
							Спр_К=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
							Спр_К.ИНН=Стр["producerInn"];
							Спр_К.Наименование=Стр["producerName"];
							Спр_К.Записать();
							СпрД.ИННПроизводителяИмпортёра=Спр_К.Ссылка;
							
						Конецесли;
						СпрД.МатериалНиза=Стр["materialDown"];
						СпрД.МатериалПодкладки=Стр["materialLining"];
						СпрД.МатериалВерха=Стр["materialUpper"];
						СпрД.Цвет=Стр["color"];
						
						СпрД.МодельПроизводителяАртикул=Стр["model"];
						СпрД.КодТНВЭДКороткий=Стр["tnVedCode"];
						СпрД.Цвет=Стр["color"];
						
						
						
						tnvd="";
						tnvd=Стр["tnvd"];
						Если ЗначениеЗаполнено(tnvd) Тогда
							СпрД.КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(tnvd);
							
							Если Не ЗначениеЗаполнено(СпрД.КодТНВЭД) Тогда
								СпрК=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
								СпрК.Код=tnvd;
								СпрК.Наименование=tnvd;
								СпрК.Записать();
								СпрД.КодТНВЭД=СпрК.Ссылка;
							КонецЕсли;
							
							
						КонецЕсли;
						
						
						СпрД.Наименование=Стр["productName"];
						Если Не ЗначениеЗаполнено(СпрД.Наименование) тогда
							СпрД.Наименование=xmlString(СпрД.GTIN);
							СпрД.НаименованиеТовара=xmlString(СпрД.GTIN);
						Иначе
							СпрД.НаименованиеТовара=Стр["productName"];
						КонецЕсли;
						
						productSize=Неопределено;
					    productSize=Стр["productSize"];
						Если ЗначениеЗаполнено(productSize) тогда
							productSize=СтрЗаменить(productSize,".",",");
							СпрД.Размер=Справочники.РазмерВШтихмассовойСистеме_ХамелеонЦРПТ.НайтиПоНаименованию(productSize,Истина);
						КонецЕсли;
						
											КодПр="";
						КодПр=Стр["productTypeDesc"];
						Если ЗначениеЗаполнено(КодПр) Тогда
						СпрД.ВидОбуви=Справочники.ВидОбуви_ХамелеонЦРПТ.НайтиПоНаименованию(КодПр,Истина);
						Если Не ЗначениеЗаполнено(СпрД.ВидОбуви) тогда
							СпрВ=Справочники.ВидОбуви_ХамелеонЦРПТ.СоздатьЭлемент();
							//СпрВ.Код=Стр.productType;
							СпрВ.Наименование=КодПр;
							СпрВ.Записать();
							СпрД.ВидОбуви=СпрВ.Ссылка;
						КонецЕсли;
					КонецЕсли;
					publicationDate=Неопределено;
					    publicationDate=Стр["publicationDate"];
						Если ЗначениеЗаполнено(publicationDate) тогда
							СпрД.ДатаПубликации=Дата(1970,1,1)+Стр.publicationDate/1000;					
						Конецесли;
						////То была обувь теперь сигареты
					packageType=Неопределено;
					    packageType=Стр["packageType"];
						//Если ЗначениеЗАполнено(packageType) тогда
						//	СПрд.ТипУпаковкиСигарет=Перечисления.ТипУпаковкиСигареты_ХамелеонЦРПТ[packageType];
						//КонецЕсли;
					Если ЗначениеЗаполнено(Стр["innerUnitCount"]) Тогда
						СпрД.КоличествоВГруппе=Стр["innerUnitCount"];
					Конецесли;
					productGroup=Неопределено;
					    productGroup=Стр["productGroup"];
						Если ЗначениеЗаполнено(productGroup) тогда
							СпрГр=Справочники.ГруппаСигарет_ХамелеонЦРПТ.НайтиПоНаименованию(productGroup);
							Если Не ЗначениеЗаполнено(СпрГр) Тогда
								СпрГр=Справочники.ГруппаСигарет_ХамелеонЦРПТ.СоздатьЭлемент();
								СпрГр.Наименование=productGroup;
								СпрГр.Записать();
							КонецЕсли;
							СпрД.ГруппаСигарет=СпрГр.Ссылка;
							
						КонецЕсли;
						
						
						
						
						СпрД.Записать();
											СпрПррр=СпрД.Ссылка;

						
						Сертификат=Неопределено;
						Сертификат=Стр["certDoc"];
						Если ЗначениеЗаполнено(Сертификат) Тогда
							ДатаВыдачи=Сертификат["date"];
							ДатаНачалаДействия=Дата(Сред(ДатаВыдачи,1,4),Сред(ДатаВыдачи,6,2),Сред(ДатаВыдачи,9,2));
							НаимСерт=Сертификат["number"];
							Тип=Сертификат["type"];
							Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.НайтиПоНаименованию(
							 НаимСерт);
							 Если НЕ ЗначениеЗаполнено(Сертификат) тогда
								 //Сертификат=Сертификат.ПолучитьОбъект();
								 Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.СоздатьЭлемент();
							Сертификат.Наименование=НаимСерт;
							Сертификат.ДатаНачалаДействия=ДатаНачалаДействия;
							 Сертификат.Записать();
						 КонецЕсли;
							РегСв=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
							РегСв.Отбор.Продукция.Установить(СпрД.Ссылка);
							РегСв.Отбор.Период.Установить(ДатаНачалаДействия);
							Добав=РегСв.Добавить();
							Добав.Период=ДатаНачалаДействия;
							Добав.Продукция=СпрД.Ссылка;
							Добав.Документ=Сертификат;
							Регсв.Записать(Истина);
							
						Конецесли;
						Возврат СпрД.Ссылка
				
				
				  КонецЕсли;
			
			
			
			
			
			
			
		
	Конеццикла;
	
	
Конецфункции


Функция НайтиГТД(НомерДекларацииТовара,Код) Экспорт
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Если не ЗначениеЗаполненО(НомерДекларацииТовара) Тогда
		Возврат Справочники.НомераГТД_ХамелеонЦРПТ.ПустаяСсылка() 
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НомераГТД_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.НомераГТД_ХамелеонЦРПТ КАК НомераГТД_ХамелеонЦРПТ
		|ГДЕ
		|	НомераГТД_ХамелеонЦРПТ.Код = &Код
		|	И НомераГТД_ХамелеонЦРПТ.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Код", НомерДекларацииТовара);
	Запрос.УстановитьПараметр("Наименование", Код);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
							СпРГГ=Справочники.НомераГТД_ХамелеонЦРПТ.СоздатьЭлемент();
							СпРГГ.Код=НомерДекларацииТовара;
							СпРГГ.Наименование=Код;
							СпРГГ.Записать();
							СпрГТД=СпРГГ.Ссылка;
							Возврат СпрГТД.Ссылка
КонецФункции

Функция ВернутьСтатусДокументаУПД(status) Экспорт
	Если число(status)=61 Тогда
		Возврат перечисления.СтатусыУПД_ХамелеонЦРПТ.ПодписанОтправленВГИСМТ;
	Иначе
		Возврат перечисления.СтатусыУПД_ХамелеонЦРПТ[status];
	Конецесли;
КонецФункции
Функция ЗагрузитьПриемкуЭДОЛайт() Экспорт
	Возврат РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗагрузитьПриемкуЭДОЛайт;
КонецФункции

Процедура ЗаписатьИДВОрганизации(NNN) Экспорт
	ИНН=NNN.inn;
	Если ЗначениеЗаполнено(ИНН) тогда
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Организации_ХамелеонЦРПТ КАК Организации_ХамелеонЦРПТ
		|ГДЕ
		|	Организации_ХамелеонЦРПТ.ИНН = &ИНН
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ КАК ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ
		|ГДЕ
		|	ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.ИНН = &ИНН";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		GGG=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		GGG.Ид_ЭДО_ЦРПТ=xmlString(NNN.id);
		GGG.Записать();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		
	КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьСтрокуИзДвоичныхДанных_Сервер(ДвоичныеДанные,Кодировка=Неопределено) Экспорт
	//Возврат base(ДвоичныеДанные);	
//	Возврат ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные,Кодировка);

//	Запрос = Новый HTTPЗапрос;
//	Запрос.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанные);
//	Двд =  Запрос.ПолучитьТелоКакСтроку();
//	Возврат Двд ;
//	
	
	ИмяФайла=ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ИмяФайла);
	Текст=Новый ТекстовыйДокумент;
	
	Текст.Прочитать(ИмяФайла,Кодировка);
	УдалитьФайлы(ИмяФайла);
	Возврат Текст.ПолучитьТекст();
Конецфункции


Функция ПолучитьДвоичныеДанныеИзСтроки_Сервер(Текст_1,Кодировка=Неопределено,Неиспользовать=Ложь) Экспорт
	
	Если  Не ЗначениеЗаполнено(Кодировка) Тогда
		Кодировка=КодировкаТекста.UTF8;
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос;
	Запрос.УстановитьТелоИзСтроки(Текст_1, Кодировка,ИспользованиеByteOrderMark.НеИспользовать);
	Двд =  Запрос.ПолучитьТелоКакДвоичныеДанные();
	Возврат Двд ;
	
	//Возврат ПолучитьдвоичныеДанныеИзСтроки(Текст_1,Кодировка,Неиспользовать);
	//Текст=Новый Запись;
	//Текст.ДобавитьСтроку(Текст_1);
	ИмяФайла=ПолучитьИмяВременногоФайла();
	Текст = Новый ЗаписьТекста(ИмяФайла, Кодировка);
	Текст.ЗаписатьСтроку(Текст_1);
	Текст.Закрыть();	
	//Текст.Записать(ИмяФайла,Кодировка);
	//ДвоичныеДанные=новый ДвоичныеДанные(ИмяФайла);
	Если  Кодировка=КодировкаТекста.UTF8 Тогда
			    Данные=Новый ДвоичныеДанные(ИмяФайла);
			    Строка64=Base64Строка(Данные);
			    Строка64=Сред(Строка64,5,СтрДлина(Строка64)-8);
			    ДанныеНаЗапись=Base64Значение(Строка64);
//			//    ДанныеНаЗапись.Записать(ИмяФайла);
Иначе
			    ДанныеНаЗапись=Новый ДвоичныеДанные(ИмяФайла);
			КонецЕсли;
	
	
	
	
	УдалитьФайлы(ИмяФайла);
	Возврат ДанныеНаЗапись
	
	
Конецфункции

Функция ПрочитатьСведенияОбОрганизацииНаСервере(СведенияСтрокой) Экспорт
	
	СтруктураСведений = Новый Структура("ИНН, Идентификатор");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СведенияСтрокой);
	Сведения = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Если Сведения.Свойства().Получить("TaxcomId") <> Неопределено Тогда
		СтруктураСведений.Идентификатор = Сведения.TaxcomId;
	КонецЕсли;
	
	ИННОрганизации = "";
	Если Сведения.ClientData.Свойства().Получить("UL") <> Неопределено Тогда
		ИННОрганизации = Сведения.ClientData.UL.Inn;
		КППОрганизации = Сведения.ClientData.UL.Kpp;
		СтруктураСведений.Вставить("КПП", КППОрганизации);
	ИначеЕсли Сведения.ClientData.Свойства().Получить("Ip") <> Неопределено Тогда
		ИННОрганизации = Сведения.ClientData.Ip.Inn;
	КонецЕсли;
	СтруктураСведений.ИНН = ИННОрганизации;
	
	Если ПустаяСтрока(ИННОрганизации) Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось прочитать ИНН организации'");
	КонецЕсли;
	
	Возврат СтруктураСведений;
	
КонецФункции


Функция СтруктураИзJSON(СтрокаJSON) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	Возврат ПрочитатьJSON(ЧтениеJSON);
	
КонецФункции



Функция СтруктураВJSON(Структура) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, "	", Истина);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, Структура);
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция НеПрошлаПроверка(Файл_1,документ=Ложь, Ссылка = Неопределено,ОткрытьФорму_1,Сообщения) Экспорт
	
	Попытка
		
		//Файл_1=СтрЗаменить(Файл_1,"&","&amp;");
		
		//Если РегистрыСведений.НастройкиПрограммы_ХамелеонМеркурий.Получить().НеПроверятьXSDСхемы Тогда
		//	Возврат Ложь;
		//КонецЕсли;
		
		КаталогВременногоФайла=КаталогВременныхФайлов()+"new_maket\";
		СоздатьКаталог(КаталогВременногоФайла);
		
		
		Файл=ПолучитьИмяВременногоФайла("xml");
		Файл=СтрЗаменить(Файл,КаталогВременныхФайлов(),КаталогВременногоФайла);
		
		
		Файл_2=Новый ТекстовыйДокумент;
		Файл_2.ДобавитьСтроку(Файл_1);
		Файл_2.Записать(Файл,"windows-1251");
		//Файл_1.ЗаписатЬ(Файл);
		
		//	dictionary_v20=ПолучитьИмяВременногоФайла("xml");
		dictionary_v20=ПолучитьИмяВременногоФайла("xsd");
		dictionary_v20=СтрЗаменить(dictionary_v20,КаталогВременныхФайлов(),КаталогВременногоФайла);
		
		
		
		//dictionary_v20=КаталогВременногоФайла+"dictionary_v20.xsd";
		Текст=Документы.Отгрузка_ХамелеонЦРПТ.ПолучитьМакет("XML_ЭДО");
		Текст.Записать(dictionary_v20,"windows-1251");
		
		
		XMLDoc = New COMObject("Msxml2.DOMDocument.6.0");
		XMLDoc.Async = false;
		XMLDoc.ValidateOnParse = true;
		SchemaCache = New COMObject("Msxml2.XMLSchemaCache.6.0");
		
		//SchemaCache.Add("http://www.w3.org/2001/XMLSchema",dictionary_v20);
		SchemaCache.Add("",dictionary_v20);
		
		XMLDoc.Schemas = SchemaCache;
		XMLDoc.SetProperty("MultipleErrorMessages", true);
		XMLDoc.Load(Файл);
		ErrObj = XMLDoc.ParseError;
		Ошибка="";
		If ErrObj.ErrorCode <> 0 Then
			Сообщения = Новый Массив;
			For Each ErrItem In ErrObj.AllErrors Do 
				//Message("Ошибка : " + ErrItem.Reason + " " + ErrItem.SrcText);
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "В строке № "+Erritem.line+" в колонке № "+Erritem.linepos+" ошибка: "+ErrItem.Reason+" "+ErrItem.SrcText;
				Сообщение.ПутьКДанным = "Объект";
				Если Найти(ErrItem.Reason,"Не удалось проанализировать атрибут ""КрНаимСтрПр""") Тогда
					Для Каждого Стр_1 Из Ссылка.Товары Цикл
						Если Стр_1.НомерГТД.НомераГТДНесколько.Количество()>0 Тогда
							Для Каждого Стр_2 ИЗ Стр_1.НомерГТД.НомераГТДНесколько Цикл
									 Если НЕ ЗначениеЗаполнено(Стр_2.НомерГТД) ИЛИ Не ЗначениеЗаполнено(Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду(Стр_2.КодСтраны)) Тогда
											Сообщение.КлючДанных = Стр_1.НомерГТД;
											Прервать;
											//Если нЕ ЗначениеЗаполнено(Стр_1.НомерГТД.Код) Тогда
											//	Сообщение.Поле = "Наименование";
											//КонецЕсли;
												
										Конецесли;
								
							Конеццикла;
						Иначе
						 Если ЗначениеЗаполнено(Стр_1.НомерГТД) И Не ЗначениеЗаполнено(Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду(Стр_1.НомерГТД.Наименование)) Тогда
								Сообщение.КлючДанных = Стр_1.НомерГТД;
								//Если нЕ ЗначениеЗаполнено(Стр_1.НомерГТД.Код) Тогда
									Сообщение.Поле = "Наименование";
								//КонецЕсли;
									
							Конецесли;
						КонецЕсли;
					Конеццикла;
					//Сообщение.КлючДанных = Ссылка.Организация;
					//Сообщение.Поле = "ИД_ЭДО";
					
				ИначеЕсли Найти(ErrItem.Reason, "ИдОтпр") > 0 Тогда
					Сообщение.КлючДанных = Ссылка.Организация;
					Сообщение.Поле = "ИД_ЭДО";
				ИначеЕсли Найти(ErrItem.Reason, "ИдПол") > 0 Тогда
					Сообщение.КлючДанных = Ссылка.Контрагент;
					Сообщение.Поле = "ИД_ЭДО";
				ИначеЕсли Найти(ErrItem.Reason, "Отсутствует необходимый атрибут ''КодРегион''") > 0 
					ИЛИ Найти(ErrItem.Reason, "Required attribute ''КодРегион''") > 0 
					ИЛИ Найти(ErrItem.Reason, "Не удалось проанализировать атрибут ""КодРегион"" со значением") > 0 
					Тогда

					Если НЕ ЗначениеЗаполнено(РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("ОБъект,Тип",Ссылка.Организация,
						Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический)).КодРегиона) Тогда
						Сообщение.КлючДанных = Ссылка.Организация;
						Сообщение.Поле = "АдресДляОткрытия";
					ИначеЕсли НЕ ЗначениеЗаполнено(РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("ОБъект,Тип",Ссылка.Организация,
						Перечисления.ТипАдреса_ХамелеонЦРПТ.Фактический)).КодРегиона) Тогда
						Сообщение.КлючДанных = Ссылка.Организация;
						Сообщение.Поле = "АдресФакт";
					ИначеЕсли НЕ ЗначениеЗаполнено(РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("ОБъект,Тип",Ссылка.Контрагент,
						Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический)).КодРегиона) Тогда
						Сообщение.КлючДанных = Ссылка.Контрагент;
						Сообщение.Поле = "АдресДляОткрытия";
					ИначеЕсли НЕ ЗначениеЗаполнено(РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("ОБъект,Тип",Ссылка.Контрагент,
						Перечисления.ТипАдреса_ХамелеонЦРПТ.Фактический)).КодРегиона) Тогда
						Сообщение.КлючДанных = Ссылка.Контрагент;
						Сообщение.Поле = "АдресФакт";
						
						
					ИначеЕсли ЗначениеЗаполнено(Ссылка.Грузополучатель) И НЕ ЗначениеЗаполнено(РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("ОБъект,Тип",Ссылка.Грузополучатель,
						Перечисления.ТипАдреса_ХамелеонЦРПТ.Фактический)).КодРегиона) Тогда
						Сообщение.КлючДанных = Ссылка.Грузополучатель;
						Сообщение.Поле = "АдресФакт";
					ИначеЕсли ЗначениеЗаполнено(Ссылка.Грузоотправитель) И НЕ ЗначениеЗаполнено(РегистрыСведений.Адрес_ХамелеонЦРПТ.Получить(Новый Структура("ОБъект,Тип",Ссылка.Грузоотправитель,
						Перечисления.ТипАдреса_ХамелеонЦРПТ.Фактический)).КодРегиона) Тогда
						Сообщение.КлючДанных = Ссылка.Грузоотправитель;
						Сообщение.Поле = "АдресФакт";
						
					КонецЕсли;
					
				ИначеЕсли Найти(ErrItem.Reason,"Не удалось проанализировать атрибут ""КПП""")>0  Тогда
					Если Найти(ErrItem.Reason,"нарушает ограничение length для ""9""")>0  Тогда
						Если ЗначениеЗаполнено(Ссылка.Организация.КПП) И СтрДлина(Ссылка.Организация.КПП)<>9 Тогда
							Сообщение.КлючДанных = Ссылка.Организация;
							Сообщение.Поле = "КПП";
						Иначе
							
							Сообщение.КлючДанных = Ссылка.Контрагент;
							Сообщение.Поле = "КПП";
						Конецесли;
						
					КонецЕсли;
					
				ИначеЕсли Найти(ErrItem.Reason,"Не удалось проанализировать атрибут ""ИННФЛ""")>0 
					И Найти(ErrItem.Reason,"нарушает ограничение length для ""12""")>0 Тогда
					Если СтрДлина(Ссылка.Организация.ИНН)<>12  И Не ЗначениеЗаполнено(Ссылка.Организация.КПП) Тогда
						Сообщение.КлючДанных = Ссылка.Организация;
						Сообщение.Поле = "КПП";
					ИначеЕсли СтрДлина(Ссылка.Контрагент.ИНН)<>12 И  Не ЗначениеЗаполнено(Ссылка.Контрагент.КПП) Тогда
						Сообщение.КлючДанных = Ссылка.Контрагент;
						Сообщение.Поле = "КПП";
					ИначеЕсли ЗначениеЗАполнено(Ссылка.Грузополучатель) И СтрДлина(Ссылка.Грузополучатель.ИНН)<>12
						 И  Не ЗначениеЗаполнено(Ссылка.Грузополучатель.КПП)  Тогда
						Сообщение.КлючДанных = Ссылка.Грузополучатель;
						Сообщение.Поле = "КПП";
						
					Иначе
						Сообщение.КлючДанных = Ссылка.Грузоотправитель;
						Сообщение.Поле = "КПП";
					КонецЕсли;
                    //<СвИП ИННФЛ="6829028425">
				ИначеЕсли Найти(ErrItem.SrcText, "Идентиф=""ОснованиеНомер""") > 0 Тогда
					Сообщение.КлючДанных = Ссылка;
					Сообщение.Поле = "НомерПервичногоДокумента";

				ИначеЕсли Найти(ErrItem.SrcText, "НомерСчФ") > 0 Тогда
					Сообщение.КлючДанных = Ссылка;
					Сообщение.Поле = "НомерПервичногоДокумента";
					
				КонецЕсли;
				Сообщения.Добавить(Сообщение);
//				Сообщение.Сообщить();
				//Ошибка=Ошибка+"В строке № "+Erritem.line+" в колонке № "++Erritem.linepos+" ошибка: "+ErrItem.Reason+" "+ErrItem.SrcText+Символы.ПС+Символы.ПС;
			EndDo;
			//Инфа=();
			#Если ТолстыйКлиентОбычноеПриложение Тогда
					ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ФормаСообщенийПользователю", Новый Структура("Сообщения", Сообщения));
			//		ОткрытьФорму=Истина;
		#Иначе
			Если ТекущийРежимЗапуска()=РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
				Для каждого Сообщение Из Сообщения Цикл
					Сообщение.Сообщить();
				КонецЦикла;				
			Иначе
				ОткрытьФорму_1=Истина;
			КонецЕсли;
			#КонецЕсли
			//		УдалитьФайлы(ИмяВремен);
			//Сообщить(Ошибка);			
			Возврат Истина;
		EndIf;
		УдалитьФайлы(Файл);
		УдалитьФайлы(dictionary_v20);
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		Сообщить("Описание='" + Инфо.Описание + "'");
		Сообщить("ИмяМодуля='" + Инфо.ИмяМодуля + "'");
		Сообщить("НомерСтроки=" + Инфо.НомерСтроки);
		Сообщить("ИсходнаяСтрока='" + Инфо.ИсходнаяСтрока + "'");
		
	КонецПопытки;
	Возврат Ложь;
	
КонецФункции


Процедура ЗаписатьКМВФайл(XML_DOM,cis,Ссылк,Упаковкиидут,КИЗИдет,Стр_1,НомерСтроки,ОбрезатьКМДляТабака,ДобавлятьКИЗЫ=Ложь,ТаблицаПродукций,ТипУпаковки
	,ТипУпаковкиXML)
											Значен=cis;
		Если ДобавлятьКИЗЫ И ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
			
				Если КИЗИдет=Истина Тогда
					XML_DOM.ЗаписатьКонецЭлемента();
					XML_DOM.ЗаписатьНачалоЭлемента("НомСредИдентТов");
				КонецЕсли;
												
			//XML_DOM.ЗаписатьНачалоЭлемента("НомСредИдентТов");
			XML_DOM.ЗаписатьАтрибут("ИдентТрансУпак",cis);
			XML_DOM.ЗаписатьКонецЭлемента();
			
			XML_DOM.ЗаписатьНачалоЭлемента("НомСредИдентТов");
			НСтрокиТ=ТаблицаПродукций.НайтиСтроки(Новый Структура("НомерКороба",cis));
			Если НСтрокиТ.Количество()>0 Тогда
				Для Каждого Стр_ТТТ Из НСтрокиТ Цикл
					XML_DOM.ЗаписатьНачалоЭлемента("КИЗ");
					Значен=Стр_ТТТ.cis;
					Если Не ЗначениеЗаполнено(Значен) тогда
							Сообщить("В строке № "+xmlString(НомерСтроки)+") табличной части серийные номера не заполнен cis ("+Символы.ПС+"
							|товар "+Строка(Стр_1.GTIN)+", ГТИН "+Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Стр_1.GTIN.GTIN,14,"0"));
							ОшибкаПоКм=Истина;
					КонецЕсли;
						
					XML_DOM.ЗаписатьТекст(xmlString(Значен));
					
					XML_DOM.ЗаписатьКонецЭлемента();
				                        			
				КонецЦикла;
			КонецЕсли;
			
			//XML_DOM.ЗаписатьКонецЭлемента();
			Упаковкиидут=Истина;
			КИЗИдет=Истина;
									
			//XML_DOM.ЗаписатьНачалоЭлемента("НомСредИдентТов");
			
		Иначе
					Если Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Обувь" Тогда
						Если (ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука)
							ИЛИ не ЗначениеЗаполнено(ТипУпаковки) Тогда
									Если Упаковкиидут=Истина
										ИЛИ Упаковкиидут=1 Тогда
										
										XML_DOM.ЗаписатьКонецЭлемента();
				                         	XML_DOM.ЗаписатьНачалоЭлемента("НомСредИдентТов");
				
										
									КонецЕсли;
									Упаковкиидут=Ложь;
									КИЗИдет=Истина;
															
									XML_DOM.ЗаписатьНачалоЭлемента("КИЗ");
								Иначе
									
									Если ТипУпаковкиXML=Перечисления.ИспользоватьВXMLУпаковки_ХамелеонЦРПТ.НомСредИдентТов Тогда
										//Если КИЗИдет=Истина Тогда
											
										//XML_DOM.ЗаписатьКонецЭлемента();
										//КонецЕсли;
										//XML_DOM.ЗаписатьНачалоЭлемента("НомСредИдентТов");
										Если Упаковкиидут=1 
											ИЛИ КИЗИдет=Истина 
											Тогда
												XML_DOM.ЗаписатьКонецЭлемента();
					                         	XML_DOM.ЗаписатьНачалоЭлемента("НомСредИдентТов");
										Конецесли;
										XML_DOM.ЗаписатьАтрибут("ИдентТрансУпак",cis);
											//XML_DOM.ЗаписатьКонецЭлемента();
					

										Упаковкиидут=1;
										КИЗИдет=Ложь;
										Возврат;
										
									Иначе
										Если КИЗИдет=Истина Тогда
											
											XML_DOM.ЗаписатьКонецЭлемента();
					                         	XML_DOM.ЗаписатьНачалоЭлемента("НомСредИдентТов");
					
											
											КонецЕсли;
										Упаковкиидут=Истина;
										КИЗИдет=Ложь;
									
									
										XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
									КонецЕсли;
								КонецЕсли;
							ИначеЕсли Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак"
								ИЛИ Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак"
								Тогда
								
								Если Сред(cis,1,2)<>"01" 
									//ИЛИ 
									//Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак" 
									Тогда
									Если Упаковкиидут=Истина
										ИЛИ Упаковкиидут=1
										Тогда
										
										XML_DOM.ЗаписатьКонецЭлемента();
				                         	XML_DOM.ЗаписатьНачалоЭлемента("НомСредИдентТов");
				
										
									КонецЕсли;
									Упаковкиидут=Ложь;
									КИЗИдет=Истина;
									
									Если ОбрезатьКМДляТабака=Истина Тогда
										Значен=Сред(Значен,1,21);
										
									КонецЕсли;
									
									XML_DOM.ЗаписатьНачалоЭлемента("КИЗ");
								Иначе
									
									Если ОбрезатьКМДляТабака=Истина Тогда
										Если Сред(Значен,17,2)="21" 
											И Сред(Значен,1,3 )="010"
											Тогда
											Значен=Сред(Значен,1,25);
										КонецЕсли;
										
									КонецЕсли;
									

									Если ТипУпаковкиXML=Перечисления.ИспользоватьВXMLУпаковки_ХамелеонЦРПТ.НомСредИдентТов Тогда
										//Если КИЗИдет=Истина Тогда
											
										Если Упаковкиидут=1 
											ИЛИ КИЗИдет=Истина Тогда 
												XML_DOM.ЗаписатьКонецЭлемента();
					                         	XML_DOM.ЗаписатьНачалоЭлемента("НомСредИдентТов");
										Конецесли;
										XML_DOM.ЗаписатьАтрибут("ИдентТрансУпак",cis);
										//XML_DOM.ЗаписатьКонецЭлемента();
					

										Упаковкиидут=1;
										КИЗИдет=Ложь;
										Возврат;
										
									Иначе

										Если КИЗИдет=Истина Тогда
											
											XML_DOM.ЗаписатьКонецЭлемента();
					                         	XML_DOM.ЗаписатьНачалоЭлемента("НомСредИдентТов");
					
											
										КонецЕсли;
										Упаковкиидут=Истина;
										КИЗИдет=Ложь;
									
									 	XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
									КонецЕсли;
									
								КонецЕсли;
								
								
							Иначе		
								
								Если ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука  
									Или Не ЗначениеЗаполнено(ТипУпаковки)
									Тогда
									Если Упаковкиидут=Истина
										ИЛИ Упаковкиидут=1 Тогда
										
										XML_DOM.ЗаписатьКонецЭлемента();
				                         	XML_DOM.ЗаписатьНачалоЭлемента("НомСредИдентТов");
				
										
									КонецЕсли;
									Упаковкиидут=Ложь;
									КИЗИдет=Истина;
															
									XML_DOM.ЗаписатьНачалоЭлемента("КИЗ");
								Иначе
									
									Если ТипУпаковкиXML=Перечисления.ИспользоватьВXMLУпаковки_ХамелеонЦРПТ.НомСредИдентТов Тогда
										//Если КИЗИдет=Истина Тогда
											
										//XML_DOM.ЗаписатьКонецЭлемента();
										//КонецЕсли;
										//XML_DOM.ЗаписатьНачалоЭлемента("НомСредИдентТов");
										Если Упаковкиидут=1 
											ИЛИ КИЗИдет=Истина 
											Тогда
												XML_DOM.ЗаписатьКонецЭлемента();
					                         	XML_DOM.ЗаписатьНачалоЭлемента("НомСредИдентТов");
										Конецесли;
										XML_DOM.ЗаписатьАтрибут("ИдентТрансУпак",cis);
											//XML_DOM.ЗаписатьКонецЭлемента();
					

										Упаковкиидут=1;
										КИЗИдет=Ложь;
										Возврат;
										
									Иначе
										Если КИЗИдет=Истина Тогда
											
											XML_DOM.ЗаписатьКонецЭлемента();
					                         	XML_DOM.ЗаписатьНачалоЭлемента("НомСредИдентТов");
					
											
											КонецЕсли;
										Упаковкиидут=Истина;
										КИЗИдет=Ложь;
									
									
										XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
									КонецЕсли;
								КонецЕсли;

				//				
				//				Если ТипУпаковкиXML=Перечисления.ИспользоватьВXMLУпаковки_ХамелеонЦРПТ.НомСредИдентТов Тогда
				//						//Если КИЗИдет=Истина Тогда
				//							
				//						Если Упаковкиидут=1 
				//							ИЛИ КИЗИдет=Истина Тогда 
				//								XML_DOM.ЗаписатьКонецЭлемента();
				//	                         	XML_DOM.ЗаписатьНачалоЭлемента("НомСредИдентТов");
				//						Конецесли;
				//						XML_DOM.ЗаписатьАтрибут("ИдентТрансУпак",cis);
				//						//XML_DOM.ЗаписатьКонецЭлемента();
				//	

				//						Упаковкиидут=1;
				//						КИЗИдет=Ложь;
				//						Возврат;
				//						
				//				Иначе
				//					Если КИЗИдет=Истина Тогда
				//						
				//						XML_DOM.ЗаписатьКонецЭлемента();
				//                         	XML_DOM.ЗаписатьНачалоЭлемента("НомСредИдентТов");
				//
				//						
				//					КонецЕсли;
				//					Упаковкиидут=Истина;
				//					КИЗИдет=Ложь;
				//					XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
				//				КонецЕсли;
							КонецЕсли;
				//XML_DOM.ЗаписатьАтрибут("Идентиф", "cis");
					 				
							Если Не ЗначениеЗаполнено(Значен) тогда
								Сообщить("В строке № "+xmlString(НомерСтроки)+") табличной части серийные номера не заполнен cis ("+Символы.ПС+"
								|товар "+Строка(Стр_1.GTIN)+", ГТИН "+Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Стр_1.GTIN.GTIN,14,"0"));
								ОшибкаПоКм=Истина;
							КонецЕсли;
						
						XML_DOM.ЗаписатьТекст(xmlString(Значен));
						//XML_DOM.ЗаписатьАтрибут("Значен", Значен);
						XML_DOM.ЗаписатьКонецЭлемента();
		КонецЕсли;
КонецПроцедуры

Функция СформироватьУКД(Ссылк,ОткрытьФорму_1,Сообщения,ПриПроверкеСхемыПриОтгрузкеЕслиОшибкаНеФормироватьФайл,ТипЭДО=Неопределено,
	ОбрезатьКМДляТабака,БратьКоличествоИзТабличойЧасти,КодТовараВУПД,НеДобавлятьКМПриФормированииXML
	
	) Экспорт
	
	
	ДатаУПД = Ссылк.Дата;
	НомерУПД=Ссылк.НомерПервичногоДокумента;
	Контрагент=Ссылк.Контрагент;
	Организация=Ссылк.Организация;
	
	//Грузоотправитель=Ссылк.Грузоотправитель;
	//Грузополучатель=Ссылк.Грузополучатель;
	
	Если ТипЭДО=Неопределено Тогда
		ИД_ЭДО=Организация.ИД_ЭДО;
	Иначе
		Если ТипЭДО=справочники.ЭДО_ХамелеонЦРПТ.ЭДОЛайт Тогда
			ИД_ЭДО="2LT-"+xmlString(Организация.Ид_ЭДО_ЦРПТ)
		ИначеЕсли Организация.ОсновнойТипЭДО=ТипЭДО Тогда
			ИД_ЭДО=Организация.ИД_ЭДО;
		Иначе
			
			Для Каждого Стр_1 Из Организация.ЭДОВспомогательные Цикл
				Если Стр_1.ТипЭДО=ТипЭДО Тогда
					Ид_ЭДО=Стр_1.ИД_ЭДО;
					Если ЗначениеЗАполнено(Ид_ЭДО) Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			Конеццикла;
			                                      
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗАполненО(ИД_ЭДО) Тогда
		Если Не ЗначениеЗАполнено(Организация.ОсновнойТипЭДО) И ЗначениеЗаполнено(Организация.ИД_ЭДО) Тогда
			Ид_ЭДО=Организация.ИД_ЭДО;
		Иначе
			
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не нашли Идентификатор организации в ЭДО";
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.КлючДанных = Организация;
				Сообщение.Поле = "ИД_ЭДО";
				Сообщения.Добавить(Сообщение);
//				Сообщение.Сообщить();
				//Ошибка=Ошибка+"В строке № "+Erritem.line+" в колонке № "++Erritem.linepos+" ошибка: "+ErrItem.Reason+" "+ErrItem.SrcText+Символы.ПС+Символы.ПС;
			//Инфа=();
			#Если ТолстыйКлиентОбычноеПриложение Тогда
					ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ФормаСообщенийПользователю", Новый Структура("Сообщения", Сообщения));
			//		ОткрытьФорму=Истина;
		#Иначе
			Если ТекущийРежимЗапуска()=РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
				Для каждого Сообщение Из Сообщения Цикл
					Сообщение.Сообщить();
				КонецЦикла;				
			Иначе
				ОткрытьФорму_1=Истина;
			КонецЕсли;
			#КонецЕсли
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЭДО=справочники.ЭДО_ХамелеонЦРПТ.ЭДОЛайт Тогда
		КонтрагентИД_ЭДО="2LT-"+xmlString(Контрагент.Ид_ЭДО_ЦРПТ)
	Иначе
		КонтрагентИД_ЭДО=Контрагент.ИД_ЭДО;
	КонецЕсли;
	
	ИдР=xmlString(Ссылк.УникальныйИдентификатор());
	ИмяФайла = "ON_KORSCHFDOPPR_" +
				КонтрагентИД_ЭДО+ "_" + 
				ИД_ЭДО+ "_" +
				Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + "_" +
				xmlString(ИдР);

	XML_DOM=Новый ЗаписьXML;
	
	XML_DOM.УстановитьСтроку("windows-1251");
	XML_DOM.ЗаписатьОБъявлениеXML();
	XML_DOM.ЗаписатьНачалоЭлемента("Файл");
	//ИмяСчтетфакт="ON_NSCHFDOPPR_"+Формат(ТекущаяДата(),"ДФ=""ггггММдд""")+"_"+Строка(Новый УникальныйИдентификатор());
	XML_DOM.ЗаписатьАтрибут("ИдФайл", ИмяФайла);
	ИмяФайла=ИмяФайла+".xml";
	XML_DOM.ЗаписатьАтрибут("ВерсПрог", "1С 8.3");
	
	
	XML_DOM.ЗаписатьАтрибут("ВерсФорм", "5.01");
	
	XML_DOM.ЗаписатьНачалоЭлемента("СвУчДокОбор");
	XML_DOM.ЗаписатьАтрибут("ИдОтпр", ИД_ЭДО);
	XML_DOM.ЗаписатьАтрибут("ИдПол", КонтрагентИД_ЭДО);
		
	
	
	Если ТипЭДО=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОТакском Тогда
		XML_DOM.ЗаписатьНачалоЭлемента("СвОЭДОтпр");
		XML_DOM.ЗаписатьАтрибут("ИдЭДО", "2AL");
		XML_DOM.ЗаписатьАтрибут("ИННЮЛ", "7704211201");
		XML_DOM.ЗаписатьАтрибут("НаимОрг", "ООО Такском");
		
		XML_DOM.ЗаписатьКонецЭлемента();
		
		
	ИначеЕсли ТипЭДО=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОЛайт Тогда
		XML_DOM.ЗаписатьНачалоЭлемента("СвОЭДОтпр");
		XML_DOM.ЗаписатьАтрибут("ИдЭДО", "2LT");
		XML_DOM.ЗаписатьАтрибут("ИННЮЛ", "7731376812");
		XML_DOM.ЗаписатьАтрибут("НаимОрг", "ООО ""Оператор-ЦРПТ""");
		
		XML_DOM.ЗаписатьКонецЭлемента();
		
		
	КонецЕсли;
	XML_DOM.ЗаписатьКонецЭлемента();
	
	
	
	XML_DOM.ЗаписатьНачалоЭлемента("Документ");
	
	XML_DOM.ЗаписатьАтрибут("КНД", "1115127");
	Если 
		Ссылк.Товары.Итог("НДС")=0 ИЛИ
		Ссылк.ВидТоварооборота=Перечисления.ВидТоварооборота_ХамелеонЦРПТ.COMMISSION Тогда
		XML_DOM.ЗаписатьАтрибут("Функция", "ДИС");
	Иначе
		XML_DOM.ЗаписатьАтрибут("Функция", "КСЧФДИС");
	КонецЕсли;
	XML_DOM.ЗаписатьАтрибут("ДатаИнфПр", Формат(ДатаУПД,"ДФ=""дд.ММ.гггг"""));
	XML_DOM.ЗаписатьАтрибут("ВремИнфПр", Формат(ДатаУПД,"ДФ=""ЧЧ.мм.сс"""));
	XML_DOM.ЗаписатьАтрибут("НаимЭконСубСост", Ссылк.Организация.Наименование);
	XML_DOM.ЗаписатьАтрибут("ПоФактХЖ", "Документ об изменении стоимости отгруженных товаров (выполненных работ, оказанных услуг), переданных имущественных прав");

	Если Ссылк.ВидТоварооборота=Перечисления.ВидТоварооборота_ХамелеонЦРПТ.COMMISSION Тогда
		XML_DOM.ЗаписатьАтрибут("НаимДокОпр", "Документ об отгрузке товаров (выполнении работ), передаче имущественных прав (Документ об оказании услуг)");
	Иначе
		XML_DOM.ЗаписатьАтрибут("НаимДокОпр", "Корректировочный счет-фактура и документ об изменении стоимости отгруженных товаров (выполненных работ, оказанных услуг), переданных имущественных прав");
	КонецЕсли;
	
	XML_DOM.ЗаписатьНачалоЭлемента("СвКСчФ");
	XML_DOM.ЗаписатьАтрибут("КодОКВ", "643");
	XML_DOM.ЗаписатьАтрибут("ДатаКСчФ", Формат(ДатаУПД,"ДФ=""дд.ММ.гггг"""));
	XML_DOM.ЗаписатьАтрибут("НомерКСчФ", xmlString(Ссылк.НомерИсправления));
	
	
	XML_DOM.ЗаписатьНачалоЭлемента("СчФ");
	XML_DOM.ЗаписатьАтрибут("НомерСчФ", Ссылк.НомерПервичногоДокумента);
	
	XML_DOM.ЗаписатьАтрибут("ДатаСчФ", Формат(Ссылк.ДатаПервичногоДокумента,"ДФ=""дд.ММ.гггг"""));
	
	XML_DOM.ЗаписатьКонецЭлемента();
	
	XML_DOM.ЗаписатьНачалоЭлемента("СвПрод");
	Если ЗначениеЗаполнено(Организация.ОКПО) Тогда
		XML_DOM.ЗаписатьАтрибут("ОКПО", Организация.ОКПО);
	КонецЕсли;
	
	XML_DOM.ЗаписатьНачалоЭлемента("ИдСв");
	
	
	
	
	Если СтрДлина(Организация.ИНН)=12 Тогда
		XML_DOM.ЗаписатьНачалоЭлемента("СвИП");
		
		XML_DOM.ЗаписатьАтрибут("ИННФЛ", Организация.ИНН);
		
		XML_DOM.ЗаписатьНачалоЭлемента("ФИО");
		
		ФИО=Организация.Наименование;
		Если Сред(Организация.Наименование,1,3)="ИП " Тогда
			ФИО=СокрЛП(Сред(Организация.Наименование,3));
		КонецЕслИ;
		Если Найти(ВРЕГ(Организация.Наименование),"ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ")=1 Тогда
			ФИО=СокрЛП(Сред(Организация.Наименование,31));
		КонецЕслИ;
		Фамилия=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Фамилия", СокрЛП(Фамилия));
		
		ФИО=Сред(ФИО,Найти(ФИО," ")+1);
		Имя=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Имя", Имя);
		
		ФИО=Сред(ФИО,Найти(ФИО," ")+1);
		Отчетство=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Отчество", Отчетство);
		
		
		XML_DOM.ЗаписатьКонецЭлемента();
		XML_DOM.ЗаписатьКонецЭлемента();
		
		
	Иначе
		XML_DOM.ЗаписатьНачалоЭлемента("СвЮЛУч");
		
		
		XML_DOM.ЗаписатьАтрибут("НаимОрг", Организация.Наименование);
		
		
		XML_DOM.ЗаписатьАтрибут("ИННЮЛ", Организация.ИНН);
		Если ЗначениеЗаполнено(Организация.КПП) Тогда
			XML_DOM.ЗаписатьАтрибут("КПП", Организация.КПП);
		КонецЕслИ;
		XML_DOM.ЗаписатьКонецЭлемента();
	КонецЕсли;
	XML_DOM.ЗаписатьКонецЭлемента();
	
	XML_DOM.ЗаписатьНачалоЭлемента("Адрес");
	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", Организация);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический);
	//Запрос.УстановитьПараметр("Вид"   , Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	Адрес_ХамелеонЦРПТ.Индекс КАК Поле1,
	               |	Адрес_ХамелеонЦРПТ.КодРегиона КАК Поле2,
	               |	Адрес_ХамелеонЦРПТ.Район КАК Поле3,
	               |	Адрес_ХамелеонЦРПТ.Город КАК Поле4,
	               |	Адрес_ХамелеонЦРПТ.НаселенныйПункт КАК Поле5,
	               |	Адрес_ХамелеонЦРПТ.Улица КАК Поле6,
	               |	Адрес_ХамелеонЦРПТ.Дом КАК Поле7,
	               |	Адрес_ХамелеонЦРПТ.Корпус КАК Поле8,
	               |	Адрес_ХамелеонЦРПТ.Квартира КАК ПОЛе9,
	               |	Адрес_ХамелеонЦРПТ.Литера КАК Поле10
	               |ИЗ
	               |	РегистрСведений.Адрес_ХамелеонЦРПТ КАК Адрес_ХамелеонЦРПТ
	               |ГДЕ
	               |	Адрес_ХамелеонЦРПТ.Объект = &Объект
	               |	И Адрес_ХамелеонЦРПТ.Тип = &Тип";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() 
		Или Не ЗначениеЗаполнено(РезультатЗапроса.Выгрузить()[0].Поле2)
		Тогда
		
		XML_DOM.ЗаписатьНачалоЭлемента("АдрИнф");
		XML_DOM.ЗаписатьАтрибут("КодСтр", "643");
		XML_DOM.ЗаписатьАтрибут("АдрТекст", Организация.АдресМестонахождения);
				
		
		
		
	Иначе
		
		XML_DOM.ЗаписатьНачалоЭлемента("АдрРФ");

		Адрес=РезультатЗапроса.Выгрузить()[0];
		Если ЗначениеЗаполнено(Адрес.Поле1) тогда
			XML_DOM.ЗаписатьАтрибут("Индекс", Адрес.Поле1);
		КонецЕслИ;
		
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
			XML_DOM.ЗаписатьАтрибут("КодРегион", xmlString(Адрес.Поле2));
			
		
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		
		
		           
		Если ЗначениеЗаполнено(Адрес.Поле3) тогда
			XML_DOM.ЗаписатьАтрибут("Район", Адрес.Поле3);
		КонецЕслИ;
		Если ЗначениеЗаполнено(Адрес.Поле4) тогда
			XML_DOM.ЗаписатьАтрибут("Город", Адрес.Поле4);
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле5) тогда
			XML_DOM.ЗаписатьАтрибут("НаселПункт", Адрес.Поле5);
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле6) тогда
			XML_DOM.ЗаписатьАтрибут("Улица", Адрес.Поле6);
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле7) тогда
			XML_DOM.ЗаписатьАтрибут("Дом", xmlstring(Адрес.Поле7));
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле8) тогда
			XML_DOM.ЗаписатьАтрибут("Корпус", xmlstring(Адрес.Поле8));
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле9) тогда
			XML_DOM.ЗаписатьАтрибут("Кварт", Сред(xmlstring(Адрес.Поле9),1,20));
		КонецЕсли;		
		
	КонецЕсли;
	
	
	
	XML_DOM.ЗаписатьКонецЭлемента();
	XML_DOM.ЗаписатьКонецЭлемента();
	
	XML_DOM.ЗаписатьНачалоЭлемента("Контакт");
	
	Если ЗначениеЗаполнено(Организация.Телефон) тогда
			XML_DOM.ЗаписатьАтрибут("Тлф",Организация.Телефон);
			
	КонецЕсли;
	//XML_DOM.ЗаписатьКонецЭлемента();
	XML_DOM.ЗаписатьКонецЭлемента();
	
	Если ЗначениеЗаполнено(Организация.НомерСчета) Тогда
		XML_DOM.ЗаписатьНачалоЭлемента("БанкРекв");
		XML_DOM.ЗаписатьАтрибут("НомерСчета",Организация.НомерСчета);
		
		XML_DOM.ЗаписатьНачалоЭлемента("СвБанк");
		XML_DOM.ЗаписатьАтрибут("НаимБанк",Организация.НаименованиеБанка);
		XML_DOM.ЗаписатьАтрибут("БИК",Организация.БикБанка);
		XML_DOM.ЗаписатьАтрибут("КорСчет",Организация.КоррСчет);
		
		
		XML_DOM.ЗаписатьКонецЭлемента();
		XML_DOM.ЗаписатьКонецЭлемента();
	КонецЕсли;
		
	
	XML_DOM.ЗаписатьКонецЭлемента();
//	XML_DOM.ЗаписатьКонецЭлемента();
		
	
	
	XML_DOM.ЗаписатьНачалоЭлемента("СвПокуп");
	
	XML_DOM.ЗаписатьНачалоЭлемента("ИдСв");
	Если ЗначениеЗаполнено(Контрагент.КПП) Тогда
		
		XML_DOM.ЗаписатьНачалоЭлемента("СвЮЛУч");
		
		
		Если ЗначениеЗаполнено(Контрагент.НаименованиеПолное) Тогда
			XML_DOM.ЗаписатьАтрибут("НаимОрг", Контрагент.НаименованиеПолное);
		Иначе
			XML_DOM.ЗаписатьАтрибут("НаимОрг", Контрагент.Наименование);
			
		КонецЕсли;
		
		XML_DOM.ЗаписатьАтрибут("ИННЮЛ", Контрагент.ИНН);
		XML_DOM.ЗаписатьАтрибут("КПП", Контрагент.КПП);
		XML_DOM.ЗаписатьКонецЭлемента();
		
	Иначе
		
		XML_DOM.ЗаписатьНачалоЭлемента("СвИП");
		XML_DOM.ЗаписатьАтрибут("ИННФЛ", Контрагент.ИНН);
		
		XML_DOM.ЗаписатьНачалоЭлемента("ФИО");
		
		Если ЗначениеЗаполнено(Контрагент.НаименованиеПолное) Тогда
			ФИО=Контрагент.НаименованиеПолное;
			Если Сред(Контрагент.НаименованиеПолное,1,3)="ИП " Тогда
				ФИО=СокрЛП(Сред(Контрагент.НаименованиеПолное,3));
			КонецЕслИ;
		Иначе
			ФИО=Контрагент.Наименование;
			Если Сред(Контрагент.Наименование,1,3)="ИП " Тогда
				ФИО=СокрЛП(Сред(Контрагент.Наименование,3));
			КонецЕслИ;
		
		КонецЕсли;
		
		Если Найти(ВРЕГ(ФИО),"ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ")=1 Тогда
			ФИО=СокрЛП(Сред(ФИО,31));
		КонецЕслИ;
		
		Фамилия=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Фамилия", СокрЛП(Фамилия));
		
		ФИО=Сред(ФИО,Найти(ФИО," ")+1);
		Имя=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Имя", Имя);
		
		ФИО=Сред(ФИО,Найти(ФИО," ")+1);
		Отчетство=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Отчество", Отчетство);
		
		
		XML_DOM.ЗаписатьКонецЭлемента();
		XML_DOM.ЗаписатьКонецЭлемента();
		
		
	КонецЕслИ;
	XML_DOM.ЗаписатьКонецЭлемента();
	
	XML_DOM.ЗаписатьНачалоЭлемента("Адрес");
	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", Контрагент);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический);
//	Запрос.УстановитьПараметр("Вид"   , Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	Адрес_ХамелеонЦРПТ.Индекс КАК Поле1,
	               |	Адрес_ХамелеонЦРПТ.КодРегиона КАК Поле2,
	               |	Адрес_ХамелеонЦРПТ.Район КАК Поле3,
	               |	Адрес_ХамелеонЦРПТ.Город КАК Поле4,
	               |	Адрес_ХамелеонЦРПТ.НаселенныйПункт КАК Поле5,
	               |	Адрес_ХамелеонЦРПТ.Улица КАК Поле6,
	               |	Адрес_ХамелеонЦРПТ.Дом КАК Поле7,
	               |	Адрес_ХамелеонЦРПТ.Корпус КАК Поле8,
	               |	Адрес_ХамелеонЦРПТ.Квартира КАК ПОЛе9,
	               |	Адрес_ХамелеонЦРПТ.Литера КАК Поле10
	               |ИЗ
	               |	РегистрСведений.Адрес_ХамелеонЦРПТ КАК Адрес_ХамелеонЦРПТ
	               |ГДЕ
	               |	Адрес_ХамелеонЦРПТ.Объект = &Объект
	               |	И Адрес_ХамелеонЦРПТ.Тип = &Тип";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() 
		ИЛИ Не ЗначениеЗаполнено(РезультатЗапроса.Выгрузить()[0].Поле2)
		Тогда
		
		XML_DOM.ЗаписатьНачалоЭлемента("АдрИнф");
		XML_DOM.ЗаписатьАтрибут("КодСтр", "643");
		XML_DOM.ЗаписатьАтрибут("АдрТекст", Контрагент.ЮридическийАдрес);
		
	Иначе
	XML_DOM.ЗаписатьНачалоЭлемента("АдрРФ");
		
		Адрес=РезультатЗапроса.Выгрузить()[0];
		Если ЗначениеЗаполнено(Адрес.Поле1) тогда
			XML_DOM.ЗаписатьАтрибут("Индекс", Адрес.Поле1);
		КонецЕслИ;
		
				XML_DOM.ЗаписатьАтрибут("КодРегион", xmlString(Адрес.Поле2));
		
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		
		
		
		Если ЗначениеЗаполнено(Адрес.Поле3) тогда
			XML_DOM.ЗаписатьАтрибут("Район", Адрес.Поле3);
		КонецЕслИ;
		Если ЗначениеЗаполнено(Адрес.Поле4) тогда
			XML_DOM.ЗаписатьАтрибут("Город", Адрес.Поле4);
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле5) тогда
			XML_DOM.ЗаписатьАтрибут("НаселПункт", Адрес.Поле5);
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле6) тогда
			XML_DOM.ЗаписатьАтрибут("Улица", Адрес.Поле6);
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле7) тогда
			XML_DOM.ЗаписатьАтрибут("Дом", xmlstring(Адрес.Поле7));
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле8) тогда
			XML_DOM.ЗаписатьАтрибут("Корпус", xmlstring(Адрес.Поле8));
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле9) тогда
			XML_DOM.ЗаписатьАтрибут("Кварт", Сред(xmlstring(Адрес.Поле9),1,20));
		КонецЕсли;		
		
	КонецЕсли;
	
	
	
	XML_DOM.ЗаписатьКонецЭлемента();
	XML_DOM.ЗаписатьКонецЭлемента();
	XML_DOM.ЗаписатьКонецЭлемента();
	
	
	XML_DOM.ЗаписатьНачалоЭлемента("ДопСвФХЖ1");
	XML_DOM.ЗаписатьАтрибут("НаимОКВ","Российский рубль");

	
	
	
	XML_DOM.ЗаписатьКонецЭлемента();
	
	
	
	
	//СуммаАкцизаБыло=0;
	
	//СуммаАкцизаСтало=0;
	
	XML_DOM.ЗаписатьКонецЭлемента();
	
	XML_DOM.ЗаписатьНачалоЭлемента("ТаблКСчФ");			
	
	НомСтр=0;
	
	ОшибкаПоКм=Ложь;
	
	ТаблицаИсправлений=Новый ТаблицаЗначений;
	ТаблицаИсправлений.Колонки.Добавить("ГТИН");
	ТаблицаИсправлений.Колонки.Добавить("НаименованиеВУПД");
	ТаблицаИсправлений.Колонки.Добавить("КоличествоБыло");
	ТаблицаИсправлений.Колонки.Добавить("КоличествоСтало");
	ТаблицаИсправлений.Колонки.Добавить("СуммаНДСБыло");
	ТаблицаИсправлений.Колонки.Добавить("СуммаНДССтало");
	ТаблицаИсправлений.Колонки.Добавить("СуммаБыло");
	ТаблицаИсправлений.Колонки.Добавить("СуммаСтало");
	ТаблицаИсправлений.Колонки.Добавить("СуммаАкцизБыло");
	ТаблицаИсправлений.Колонки.Добавить("СуммаАкцизСтало");
	ТаблицаИсправлений.Колонки.Добавить("ЕдИзмБыло");
	ТаблицаИсправлений.Колонки.Добавить("ЕдИзмСтало");
	//ТаблицаИсправлений.Колонки.Добавить("ЦенаБыло");
	//ТаблицаИсправлений.Колонки.Добавить("ЦенаСтало");
	ТаблицаИсправлений.Колонки.Добавить("СтавкаНДСБыло");
	ТаблицаИсправлений.Колонки.Добавить("СтавкаНДССтало");
	//ТаблицаИсправлений.Колонки.Добавить("СтоимостьБезНДСБыло");
	//ТаблицаИсправлений.Колонки.Добавить("СтоимостьБезНДССтало");
	
	ТаблицаИсправлений.Колонки.Добавить("МаркировкаБыло");
	ТаблицаИсправлений.Колонки.Добавить("МаркировкаСтало");
	ТаблицаИсправлений.Колонки.Добавить("ЕстьУжеИсправление");
	
	ТаблицаИсправлений.Очистить();
	Для Каждого Стр_1 Из Ссылк.ПервичныйДокумент.Товары Цикл
		ТаблицаПродукций=Новый ТаблицаЗначений;
		ТаблицаПродукций.Колонки.Добавить("Номенклатура");
		ТаблицаПродукций.Колонки.Добавить("Количество");
		ТаблицаПродукций.Колонки.Добавить("КоличествоВУпаковке");
		ТаблицаПродукций.Колонки.Добавить("НомерКороба");
		ТаблицаПродукций.Колонки.Добавить("cis");
		ТаблицаПродукций.Очистить();
		
	Если НеДобавлятьКМПриФормированииXML<>Истина Тогда
				
		
		НСТР=Ссылк.ПервичныйДокумент.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
		
		
		МассивКМ=Новый СписокЗначений;
		МассивКМ.Очистить();
		cisГТИН="";
		Для Каждого Стр_М Из НСТР Цикл
			
			МаркаКМ=Стр_М.cis;
			Если Стр_М.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука Тогда
				  cisГТИН=МаркаКМ
			КонецЕсли;
					Если МассивКМ.НайтиПоЗначению(МаркаКМ)=Неопределено Тогда
						МассивКМ.Добавить(МаркаКМ);
						//Нстрок=Объект.ТоварыКМ.НайтИСтроки(Новый Структура("НомерКороба",Стр_2.СерийныйНомер));
						//Для Каждого Стр_КМ из Нстрок Цикл
						//	Если МассивКМ.НайтиПоЗначению(Стр_КМ.cis)=Неопределено Тогда
						//		МассивКМ.Добавить(Стр_КМ.cis);
						//		
						//	КонецЕсли;
							
						//Конеццикла;
						
					КонецЕсли;
				//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ИсторияПоCIS_ХамелеонЦРПТ.НомерКороба КАК НомерКороба,
					|	ИсторияПоCIS_ХамелеонЦРПТ.cis КАК cis
					|ИЗ
					|	РегистрСведений.ИсторияПоCIS_ХамелеонЦРПТ КАК ИсторияПоCIS_ХамелеонЦРПТ
					|ГДЕ
					|	ИсторияПоCIS_ХамелеонЦРПТ.Документ = &Документ
					|	И ИсторияПоCIS_ХамелеонЦРПТ.cis = &cis
					|ИТОГИ ПО
					|	cis,
					|	НомерКороба";
				
				Запрос.УстановитьПараметр("Документ", Ссылк.ПервичныйДокумент);
				Запрос.УстановитьПараметр("cis", МаркаКМ);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Выборкаcis = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Если Стр_м.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка И Выборкаcis.Количество()=0 Тогда
					
					
					Сообщить("Для короба "+Строка(МаркаКМ)+" продукции "+Строка(Стр_1.GTIN.Наименование)+" не удалось получить информацию о КМ, входящих в короб");
					
				КонецЕсли;	
				
				Пока Выборкаcis.Следующий() Цикл
					// Вставить обработку выборки Выборкаcis
				  
					ВыборкаНомерКороба = Выборкаcis.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
					Пока ВыборкаНомерКороба.Следующий() Цикл
						// Вставить обработку выборки ВыборкаНомерКороба
						Если Сред(ВыборкаНомерКороба.НомерКороба,1,2)="01" Тогда
							Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Сред(ВыборкаНомерКороба.НомерКороба,3,14)));
						ИначеЕсли сред(ВыборкаНомерКороба.НомерКороба,1,4)="(01)" Тогда
							Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Сред(ВыборкаНомерКороба.НомерКороба,5,14)));
						Иначе
							Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Сред(ВыборкаНомерКороба.НомерКороба,1,14)));
							
						КонецЕсли;
						Если МаркаКМ<>ВыборкаНомерКороба.НомерКороба Тогда
							Добав=ТаблицаПродукций.Добавить();
							Добав.Номенклатура=Продукция;
							Добав.Количество=1;
							Добав.КоличествоВУпаковке=ВыборкаНомерКороба.Количество();
							Добав.НомерКороба=МаркаКМ;
							Добав.cis=ВыборкаНомерКороба.НомерКороба;
			Если Стр_М.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука  Тогда
				  cisГТИН=Добав.cis
				
				
			КонецЕсли;
						
						
					Если МассивКМ.НайтиПоЗначению(Добав.cis)=Неопределено Тогда
						МассивКМ.Добавить(Добав.cis);
						//Нстрок=Объект.ТоварыКМ.НайтИСтроки(Новый Структура("НомерКороба",Стр_2.СерийныйНомер));
						//Для Каждого Стр_КМ из Нстрок Цикл
						//	Если МассивКМ.НайтиПоЗначению(Стр_КМ.cis)=Неопределено Тогда
						//		МассивКМ.Добавить(Стр_КМ.cis);
						//		
						//	КонецЕсли;
							
						//Конеццикла;
						
					КонецЕсли;
					Конецесли;	
						
					КонецЦикла;
				КонецЦикла;
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

			
			
			
		Конеццикла;
		ТаблицаПродукций.Свернуть("НомерКороба,cis");
		
		КонецЕсли;

		НомСтр=НомСтр+1;
		КоличествоКМ=0;
		НСТР=Ссылк.ПервичныйДокумент.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
		Если НСтр.Количество()>0
			И БратьКоличествоИзТабличойЧасти=Ложь Тогда
			Для Каждого Стр_2 Из НСТР ЦИкл
				
				
				НСтрокиТ=ТаблицаПродукций.НайтиСтроки(Новый Структура("НомерКороба",Стр_2.cis));
				
				Если НСтрокиТ.Количество()>0 Тогда
					КоличествоКМ=КоличествоКМ+НСтрокиТ.Количество();
				Иначе
					КоличествоКМ=КоличествоКМ+1;
				КонецЕсли;
				
			Конеццикла;
		Иначе
			Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) ТОгда
				КоличествоКМ=Стр_1.КоличествоНомеровКМ;
			Иначе
				КоличествоКМ=Стр_1.КоличествоКМ;
			Конецесли;
		КонецЕсли;
		
		
		Добав=ТаблицаИсправлений.Добавить();
		Добав.ГТИН=Стр_1.GTIN;
		
		Добав.НаименованиеВУПД=Стр_1.НаименованиеВУПД;
		//Добав.ГТИН=Стр_1.GTIN;
		Добав.ЕдИзмБыло=Стр_1.ЕдиницаИзмерения;
		Добав.ЕдИзмСтало="";
		
		
		Добав.КоличествоБыло=КоличествоКМ;
		Добав.КоличествоСтало=0;
		
		СуммаПоСтроке=Стр_1.Сумма;
		
		Если Не ЗначениеЗаполнено(СуммаПоСтроке) Тогда
			СуммаПоСтроке=Стр_1.Цена*Стр_1.КоличествоКМ;
		КонецЕсли;
		
		Добав.СуммаБыло=СуммаПоСтроке;
		Добав.СуммаСтало=0;
		
		Добав.СуммаНДСБыло=Стр_1.НДС;
		Добав.СуммаНДССтало=0;
		
		Добав.СтавкаНДСБыло=Стр_1.СтавкаНДС;
		Добав.СтавкаНДССтало="";
		
		Добав.СуммаАкцизБыло=Стр_1.СуммаАкциза;
		Добав.СуммаАкцизСтало=0;
		
	Если НеДобавлятьКМПриФормированииXML<>Истина Тогда
		
		
		НСТР=Ссылк.ПервичныйДокумент.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
		
		КИЗИдет=Ложь;
		Упаковкиидут=ложь;
	СписокБылоМаркировка=Новый ТаблицаЗначений;
		СписокБылоМаркировка.Колонки.Добавить("КМ");
		СписокБылоМаркировка.Колонки.Добавить("ТипУпаковки");
			СписокБылоМаркировка.Очистить();
		
		Если НСтр.Количество()>0 Тогда
			Для Каждого Стр_2 Из НСТР ЦИкл
				
				
				
				
				
			Если Ссылк.ПервичныйДокумент.ОтправлятьКМВместоАгрегаций Тогда
					Если Стр_2.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
					
							НСтрокиТ=ТаблицаПродукций.НайтиСтроки(Новый Структура("НомерКороба",Стр_2.cis));
							Если НСтрокиТ.Количество()>0 Тогда
								Для Каждого Стр_ТТТ Из НСтрокиТ Цикл
									
									
									
									
									
									
									Добав_Т=СписокБылоМаркировка.Добавить();
									Добав_Т.КМ=Стр_ТТТ.cis;
									Добав_Т.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука;
									

									//СписокБылоМаркировка.Добавить(Стр_ТТТ.cis);
									
									
									

									
								//	
								//	надоЗакрытьИОткры
								//	Если Ссылк.ПервичныйДокумент.ТекущийПользователь.СайтыВходаВСистему.Наименование="Обувь" Тогда
								//		Если СтрДлина(Стр_ТТТ.cis)>20  Тогда
								//			
								//		Иначе
								//			XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
								//		КонецЕсли;
								//	ИначеЕсли Ссылк.ПервичныйДокумент.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак"
								//		ИЛИ Ссылк.ПервичныйДокумент.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак"
								//		Тогда
								//		
								//		Если Сред(Стр_ТТТ.cis,1,2)<>"01" Тогда
								//			XML_DOM.ЗаписатьНачалоЭлемента("КИЗ");
								//		Иначе
								//			XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
								//		КонецЕсли;
								//	Иначе		
								//		XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
								//	КонецЕсли;
								//	
								//	
								//	
								//	Если Ссылк.ПервичныйДокумент.ТекущийПользователь.СайтыВходаВСистему.Наименование="Обувь" Тогда
								//		Если СтрДлина(Стр_ТТТ.cis)>20  Тогда
								//			XML_DOM.ЗаписатьНачалоЭлемента("КИЗ");
								//		Иначе
								//			XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
								//		КонецЕсли;
								//	ИначеЕсли Ссылк.ПервичныйДокумент.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак"
								//		ИЛИ Ссылк.ПервичныйДокумент.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак"
								//		Тогда
								//		
								//		Если Сред(Стр_ТТТ.cis,1,2)<>"01" Тогда
								//			XML_DOM.ЗаписатьНачалоЭлемента("КИЗ");
								//		Иначе
								//			XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
								//		КонецЕсли;
								//	Иначе		
								//		XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
								//	КонецЕсли;
								//	//XML_DOM.ЗаписатьАтрибут("Идентиф", "cis");
								// 			
								//	
								//	Значен=Стр_ТТТ.cis;
								//	Если Не ЗначениеЗаполнено(Значен) тогда
								//		Сообщить("В строке № "+xmlString(Стр_ТТТ.НомерСтроки)+") табличной части серийные номера не заполнен cis ("+Символы.ПС+"
								//		|товар "+Строка(Стр_1.GTIN)+", ГТИН "+Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Стр_1.GTIN.GTIN,14,"0"));
								//		ОшибкаПоКм=Истина;
								//	КонецЕсли;
								//	XML_DOM.ЗаписатьТекст(xmlString(Значен));
								//	//XML_DOM.ЗаписатьАтрибут("Значен", Значен);
								//	XML_DOM.ЗаписатьКонецЭлемента();
								//	
							Конеццикла;
						Иначе
									Добав_Т=СписокБылоМаркировка.Добавить();
									Добав_Т.КМ=Стр_2.cis;
									Добав_Т.ТипУпаковки=Стр_2.ТипУпаковки;
							//СписокБылоМаркировка.Добавить(Стр_2.cis);

						КонецЕсли;
					Иначе
							
									Добав_Т=СписокБылоМаркировка.Добавить();
									Добав_Т.КМ=Стр_2.cis;
									Добав_Т.ТипУпаковки=Стр_2.ТипУпаковки;
							//СписокБылоМаркировка.Добавить(Стр_2.cis);
								
					КонецЕсли;		
				
				Иначе
					
														Добав_Т=СписокБылоМаркировка.Добавить();
									Добав_Т.КМ=Стр_2.cis;
									Добав_Т.ТипУпаковки=Стр_2.ТипУпаковки;
//СписокБылоМаркировка.Добавить(Стр_2.cis);
	
				
						
				КонецЕсли;
			Конеццикла;
			
		КонецЕсли;
		Добав.МаркировкаБыло=СписокБылоМаркировка;
КонецЕсли;
		Добав.ЕстьУжеИсправление=ложь;
	Конеццикла;

	Для Каждого Стр_1 Из Ссылк.Товары Цикл
		ТаблицаПродукций=Новый ТаблицаЗначений;
		ТаблицаПродукций.Колонки.Добавить("Номенклатура");
		ТаблицаПродукций.Колонки.Добавить("Количество");
		ТаблицаПродукций.Колонки.Добавить("КоличествоВУпаковке");
		ТаблицаПродукций.Колонки.Добавить("НомерКороба");
		ТаблицаПродукций.Колонки.Добавить("cis");
		ТаблицаПродукций.Очистить();
		
		
		Если НеДобавлятьКМПриФормированииXML<>Истина Тогда
			НСТР=Ссылк.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
		
		
		МассивКМ=Новый СписокЗначений;
		МассивКМ.Очистить();
		cisГТИН="";
		Для Каждого Стр_М Из НСТР Цикл
			
			МаркаКМ=Стр_М.cis;
			Если Стр_М.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука Тогда
				  cisГТИН=МаркаКМ
				
				
			КонецЕсли;
					Если МассивКМ.НайтиПоЗначению(МаркаКМ)=Неопределено Тогда
						МассивКМ.Добавить(МаркаКМ);
						//Нстрок=Объект.ТоварыКМ.НайтИСтроки(Новый Структура("НомерКороба",Стр_2.СерийныйНомер));
						//Для Каждого Стр_КМ из Нстрок Цикл
						//	Если МассивКМ.НайтиПоЗначению(Стр_КМ.cis)=Неопределено Тогда
						//		МассивКМ.Добавить(Стр_КМ.cis);
						//		
						//	КонецЕсли;
							
						//Конеццикла;
						
					КонецЕсли;
				//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ИсторияПоCIS_ХамелеонЦРПТ.НомерКороба КАК НомерКороба,
					|	ИсторияПоCIS_ХамелеонЦРПТ.cis КАК cis
					|ИЗ
					|	РегистрСведений.ИсторияПоCIS_ХамелеонЦРПТ КАК ИсторияПоCIS_ХамелеонЦРПТ
					|ГДЕ
					|	ИсторияПоCIS_ХамелеонЦРПТ.Документ = &Документ
					|	И ИсторияПоCIS_ХамелеонЦРПТ.cis = &cis
					|ИТОГИ ПО
					|	cis,
					|	НомерКороба";
				
				Запрос.УстановитьПараметр("Документ", Ссылк);
				Запрос.УстановитьПараметр("cis", МаркаКМ);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Выборкаcis = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Если Стр_М.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка И Выборкаcis.Количество()=0 Тогда
					
					
					Сообщить("Для короба "+Строка(МаркаКМ)+" продукции "+Строка(Стр_1.GTIN.Наименование)+" не удалось получить информацию о КМ, входящих в короб");
					
				КонецЕсли;	
				
				Пока Выборкаcis.Следующий() Цикл
					// Вставить обработку выборки Выборкаcis
				
					ВыборкаНомерКороба = Выборкаcis.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
					Пока ВыборкаНомерКороба.Следующий() Цикл
						// Вставить обработку выборки ВыборкаНомерКороба
						Если Сред(ВыборкаНомерКороба.НомерКороба,1,2)="01" Тогда
							Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Сред(ВыборкаНомерКороба.НомерКороба,3,14)));
						ИначеЕсли сред(ВыборкаНомерКороба.НомерКороба,1,4)="(01)" Тогда
							Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Сред(ВыборкаНомерКороба.НомерКороба,5,14)));
						Иначе
							Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Сред(ВыборкаНомерКороба.НомерКороба,1,14)));
							
						КонецЕсли;
						Если МаркаКМ<>ВыборкаНомерКороба.НомерКороба Тогда
							
							Добав=ТаблицаПродукций.Добавить();
							Добав.Номенклатура=Продукция;
							Добав.Количество=1;
							Добав.КоличествоВУпаковке=ВыборкаНомерКороба.Количество();
							Добав.НомерКороба=МаркаКМ;
							Добав.cis=ВыборкаНомерКороба.НомерКороба;
				Если Стр_М.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука  Тогда
					  cisГТИН=Добав.cis
					
					
				КонецЕсли;
							
							
						Если МассивКМ.НайтиПоЗначению(Добав.cis)=Неопределено Тогда
							МассивКМ.Добавить(Добав.cis);
							//Нстрок=Объект.ТоварыКМ.НайтИСтроки(Новый Структура("НомерКороба",Стр_2.СерийныйНомер));
							//Для Каждого Стр_КМ из Нстрок Цикл
							//	Если МассивКМ.НайтиПоЗначению(Стр_КМ.cis)=Неопределено Тогда
							//		МассивКМ.Добавить(Стр_КМ.cis);
							//		
							//	КонецЕсли;
								
							//Конеццикла;
							
						КонецЕсли;
						Конецесли;	
						
					КонецЦикла;
				КонецЦикла;
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

			
			
			
		Конеццикла;
		ТаблицаПродукций.Свернуть("НомерКороба,cis");
		

КонецЕсли;
		НомСтр=НомСтр+1;
		КоличествоКМ=0;
		НСТР=Ссылк.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
		Если НСтр.Количество()>0
			И БратьКоличествоИзТабличойЧасти=Ложь Тогда
			Для Каждого Стр_2 Из НСТР ЦИкл
				
				
				НСтрокиТ=ТаблицаПродукций.НайтиСтроки(Новый Структура("НомерКороба",Стр_2.cis));
				
				Если НСтрокиТ.Количество()>0 Тогда
					КоличествоКМ=КоличествоКМ+НСтрокиТ.Количество();
				Иначе
					КоличествоКМ=КоличествоКМ+1;
				КонецЕсли;
				
			Конеццикла;
		Иначе
			Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) ТОгда
				КоличествоКМ=Стр_1.КоличествоНомеровКМ;
			Иначе
				КоличествоКМ=Стр_1.КоличествоКМ;
			Конецесли;
		КонецЕсли;
		
		
		НСтрокиИсправлений=ТаблицаИсправлений.НайтиСтроки(
		Новый Структура("ГТИН,ЕстьУжеИсправление",Стр_1.GTIN,Ложь));
		Если НСтрокиИсправлений.Количество()=0 Тогда
			Добав=ТаблицаИсправлений.Добавить();
			Добав.НаименованиеВУПД=Стр_1.НаименованиеВУПД;
			Добав.ГТИН=Стр_1.GTIN;
			Добав.КоличествоБыло=0;
			Добав.КоличествоСтало=0;
			
			Добав.СуммаБыло=0;
			Добав.СуммаСтало=0;
			
			
			Добав.СуммаАкцизБыло=0;
			Добав.СуммаАкцизСтало=0;

			
			Добав.СуммаНДСБыло=0;
			Добав.СуммаНДССтало=0;
			Добав.ГТИН=Стр_1.GTIN;
			

		Иначе
			Добав=НСтрокиИсправлений[0];
		КонецЕслИ;
		Добав.ГТИН=Стр_1.GTIN;
		
		Добав.ЕдИзмСтало=Стр_1.ЕдиницаИзмерения;
		
		
		Добав.КоличествоСтало=КоличествоКМ;
		
		СуммаПоСтроке=Стр_1.Сумма;
		
		Если Не ЗначениеЗаполнено(СуммаПоСтроке) Тогда
			СуммаПоСтроке=Стр_1.Цена*Стр_1.КоличествоКМ;
		КонецЕсли;
		
		Добав.СуммаСтало=СуммаПоСтроке;
		
		Добав.СуммаНДССтало=Стр_1.НДС;
		
		Добав.СтавкаНДССтало=Стр_1.СтавкаНДС;
		
		Добав.СуммаАкцизСтало=Стр_1.СуммаАкциза;
		
	Если НеДобавлятьКМПриФормированииXML<>Истина Тогда
		
		
		НСТР=Ссылк.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
		
		КИЗИдет=Ложь;
		Упаковкиидут=ложь;
	СписокБылоМаркировка=Новый ТаблицаЗначений;
		СписокБылоМаркировка.Колонки.Добавить("КМ");
		СписокБылоМаркировка.Колонки.Добавить("ТипУпаковки");
			СписокБылоМаркировка.Очистить();
		
		Если НСтр.Количество()>0 Тогда
			Для Каждого Стр_2 Из НСТР ЦИкл
				
				
				
				
				
			Если Ссылк.ОтправлятьКМВместоАгрегаций Тогда
					Если Стр_2.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
					
							НСтрокиТ=ТаблицаПродукций.НайтиСтроки(Новый Структура("НомерКороба",Стр_2.cis));
							Если НСтрокиТ.Количество()>0 Тогда
								Для Каждого Стр_ТТТ Из НСтрокиТ Цикл
									
				
									Добав_Т=СписокБылоМаркировка.Добавить();
									Добав_Т.КМ=Стр_ТТТ.cis;
									Добав_Т.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука;
									//СписокБылоМаркировка.Добавить(Стр_ТТТ.cis);
									
									
									

									
								//	
								//	надоЗакрытьИОткры
								//	Если Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Обувь" Тогда
								//		Если СтрДлина(Стр_ТТТ.cis)>20  Тогда
								//			
								//		Иначе
								//			XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
								//		КонецЕсли;
								//	ИначеЕсли Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак"
								//		ИЛИ Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак"
								//		Тогда
								//		
								//		Если Сред(Стр_ТТТ.cis,1,2)<>"01" Тогда
								//			XML_DOM.ЗаписатьНачалоЭлемента("КИЗ");
								//		Иначе
								//			XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
								//		КонецЕсли;
								//	Иначе		
								//		XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
								//	КонецЕсли;
								//	
								//	
								//	
								//	Если Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Обувь" Тогда
								//		Если СтрДлина(Стр_ТТТ.cis)>20  Тогда
								//			XML_DOM.ЗаписатьНачалоЭлемента("КИЗ");
								//		Иначе
								//			XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
								//		КонецЕсли;
								//	ИначеЕсли Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак"
								//		ИЛИ Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак"
								//		Тогда
								//		
								//		Если Сред(Стр_ТТТ.cis,1,2)<>"01" Тогда
								//			XML_DOM.ЗаписатьНачалоЭлемента("КИЗ");
								//		Иначе
								//			XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
								//		КонецЕсли;
								//	Иначе		
								//		XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
								//	КонецЕсли;
								//	//XML_DOM.ЗаписатьАтрибут("Идентиф", "cis");
								// 			
								//	
								//	Значен=Стр_ТТТ.cis;
								//	Если Не ЗначениеЗаполнено(Значен) тогда
								//		Сообщить("В строке № "+xmlString(Стр_ТТТ.НомерСтроки)+") табличной части серийные номера не заполнен cis ("+Символы.ПС+"
								//		|товар "+Строка(Стр_1.GTIN)+", ГТИН "+Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Стр_1.GTIN.GTIN,14,"0"));
								//		ОшибкаПоКм=Истина;
								//	КонецЕсли;
								//	XML_DOM.ЗаписатьТекст(xmlString(Значен));
								//	//XML_DOM.ЗаписатьАтрибут("Значен", Значен);
								//	XML_DOM.ЗаписатьКонецЭлемента();
								//	
							Конеццикла;
						Иначе
							//СписокБылоМаркировка.Добавить(Стр_2.cis);
									Добав_Т=СписокБылоМаркировка.Добавить();
									Добав_Т.КМ=Стр_2.cis;
									Добав_Т.ТипУпаковки=Стр_2.ТипУпаковки;

						КонецЕсли;
					Иначе
							
							//СписокБылоМаркировка.Добавить(Стр_2.cis);
															Добав_Т=СписокБылоМаркировка.Добавить();
									Добав_Т.КМ=Стр_2.cis;
									Добав_Т.ТипУпаковки=Стр_2.ТипУпаковки;
								
					КонецЕсли;		
				
				Иначе
					
					//СписокБылоМаркировка.Добавить(Стр_2.cis);
									Добав_Т=СписокБылоМаркировка.Добавить();
									Добав_Т.КМ=Стр_2.cis;
									Добав_Т.ТипУпаковки=Стр_2.ТипУпаковки;
	
				
						
				КонецЕсли;
			Конеццикла;
			
		КонецЕсли;
		Добав.МаркировкаСтало=СписокБылоМаркировка;
КонецЕсли;
		Добав.ЕстьУжеИсправление=Истина;
	Конеццикла;
	
	
	
	СуммаИтогПлюс=0;
	СуммаИтогМинус=0;
	СуммаИтогБезНДСПлюс=0;
	СуммаИтогБезНДСМинус=0;
	СуммаНДСПлюс=0;
	СуммаНДСМинус=0;

	
	НомСтр=0;
	Для Каждого Стр_1 Из ТаблицаИсправлений Цикл
		
	//	Если СокрЛП(Стр_1.ЕдИзмБыло.Код)=СокрЛП(Стр_1.ЕдИзмБыло.Код)
	//		И xmlString(Стр_1.Количествобыло)=xmlString(Стр_1.КоличествоСтало)
	//		И 
		
		
		
		
		НомСтр=НомСтр+1;
		XML_DOM.ЗаписатьНачалоЭлемента("СведТов");			
		XML_DOM.ЗаписатьАтрибут("НомСтр", xmlString(НомСтр));
		Если ЗначениеЗаполненО(Стр_1.НаименованиеВУПД) тогда
			XML_DOM.ЗаписатьАтрибут("НаимТов", Строка(Стр_1.НаименованиеВУПД));
		Иначе
			XML_DOM.ЗаписатьАтрибут("НаимТов", Стр_1.ГТИН.Наименование);
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр_1.ЕдИзмБыло) Тогда
			XML_DOM.ЗаписатьАтрибут("ОКЕИ_ТовДо", СокрЛП(Стр_1.ЕдИзмБыло.Код));
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр_1.ЕдИзмСтало) тогда
			XML_DOM.ЗаписатьАтрибут("ОКЕИ_ТовПосле", СокрЛП(Стр_1.ЕдИзмСтало.Код));
		Иначе
			XML_DOM.ЗаписатьАтрибут("ОКЕИ_ТовПосле", СокрЛП(Стр_1.ЕдИзмБыло.Код));
		КонецЕсли;
		XML_DOM.ЗаписатьАтрибут("КолТовДо", xmlString(Стр_1.Количествобыло));
		XML_DOM.ЗаписатьАтрибут("КолТовПосле", xmlString(Стр_1.КоличествоСтало));
		//СуммаПоСтроке=Стр_1.Сумма;
		
		СуммаПоСтроке=Стр_1.СуммаБыло;
		
		Если Стр_1.Количествобыло=0 Тогда
			Цена=СуммаПоСтроке-Стр_1.СуммаНДСБыло
		Иначе
			Цена=Окр((СуммаПоСтроке-Стр_1.СуммаНДСБыло)/Стр_1.Количествобыло,2);
		КонецЕсли;
		XML_DOM.ЗаписатьАтрибут("ЦенаТовДо", xmlString(Цена));
		
		СуммаПоСтроке=Стр_1.СуммаСтало;
		
		Если Стр_1.КоличествоСтало=0 Тогда
			Цена=СуммаПоСтроке-Стр_1.СуммаНДССтало
		Иначе
			Цена=Окр((СуммаПоСтроке-Стр_1.СуммаНДССтало)/Стр_1.КоличествоСтало,2);
		КонецЕсли;
		XML_DOM.ЗаписатьАтрибут("ЦенаТовПосле", xmlString(Цена));
		
		
		
	//	XML_DOM.ЗаписатьАтрибут("СтТовБезНДС", xmlString(СуммаПоСтроке-Стр_1.НДС));
		
		СуммаПоСтрокеБыло=Стр_1.СуммаБыло;
		
		СтавкаНДС_1="без НДС";
		Если Стр_1.СуммаНДСБыло<>0 Тогда
			Если СуммаПоСтрокеБыло-Стр_1.СуммаНДСБыло<>0 Тогда
				СтавкаНДС=Стр_1.СуммаНДСБыло*100/(СуммаПоСтрокеБыло-Стр_1.СуммаНДСБыло);
				Если СтавкаНДС<5 Тогда
					СтавкаНДС_1="без НДС";
				ИначеЕсли СтавкаНДС<17 Тогда
					СтавкаНДС_1="10%"
				Иначе
					СтавкаНДС_1="20%"
					
				КонецЕслИ;
			КонецЕсли;
		КонецЕсли;
		
		XML_DOM.ЗаписатьАтрибут("НалСтДо", СтавкаНДС_1);
		
		СуммаПоСтрокеСтало=Стр_1.СуммаСтало;
		
		СтавкаНДС_1="без НДС";
		Если Стр_1.СуммаНДССтало<>0 Тогда
			Если СуммаПоСтрокеСтало-Стр_1.СуммаНДССтало<>0 Тогда
				СтавкаНДС=Стр_1.СуммаНДССтало*100/(СуммаПоСтрокеСтало-Стр_1.СуммаНДССтало);
				Если СтавкаНДС<5 Тогда
					СтавкаНДС_1="без НДС";
				ИначеЕсли СтавкаНДС<17 Тогда
					СтавкаНДС_1="10%"
				Иначе
					СтавкаНДС_1="20%"
					
				КонецЕслИ;
			КонецЕсли;
		КонецЕсли;
		
		XML_DOM.ЗаписатьАтрибут("НалСтПосле", СтавкаНДС_1);
		
		
		СуммаБезНДСБыло=СуммаПоСтрокеБыло-Стр_1.СуммаНДСБыло;
		
		СуммаБезНДССтало=СуммаПоСтрокеСтало-Стр_1.СуммаНДССтало;
		
		XML_DOM.ЗаписатьНачалоЭлемента("СтТовБезНДС");			
		

		
		
		XML_DOM.ЗаписатьАтрибут("СтоимДоИзм", xmlString(СуммаБезНДСБыло));
		XML_DOM.ЗаписатьАтрибут("СтоимПослеИзм", xmlString(СуммаБезНДССтало));
		
		Разница=СуммаБезНДССтало-СуммаБезНДСБыло;
		
		

		Если Разница>=0  Тогда
			СуммаИтогБезНДСПлюс=СуммаИтогБезНДСПлюс+Разница;
			XML_DOM.ЗаписатьАтрибут("СтоимУвел", xmlString(Разница));
		Иначе
			XML_DOM.ЗаписатьАтрибут("СтоимУвел", xmlString(0));
			
			
		КонецЕсли;
		
		
		
		Если Разница<=0  Тогда
			СуммаИтогБезНДСМинус=СуммаИтогБезНДСМинус-Разница;
			XML_DOM.ЗаписатьАтрибут("СтоимУм", xmlString(-Разница));
		Иначе
			XML_DOM.ЗаписатьАтрибут("СтоимУм", xmlString(0));
			
			
		КонецЕсли;
		
		XML_DOM.ЗаписатьКонецЭлемента();
		
		
		
		XML_DOM.ЗаписатьНачалоЭлемента("АкцизДо");			
		
		XML_DOM.ЗаписатьНачалоЭлемента("СумАкциз");			
		
		XML_DOM.ЗаписатьТекст(xmlString(Стр_1.СуммаАкцизБыло));
		
		XML_DOM.ЗаписатьКонецЭлемента();
		
		XML_DOM.ЗаписатьКонецЭлемента();
		
		
		XML_DOM.ЗаписатьНачалоЭлемента("АкцизПосле");			
		
		XML_DOM.ЗаписатьНачалоЭлемента("СумАкциз");			
		
		XML_DOM.ЗаписатьТекст(xmlString(Стр_1.СуммаАкцизСтало));
		
		XML_DOM.ЗаписатьКонецЭлемента();
		
		XML_DOM.ЗаписатьКонецЭлемента();
		
		разница=Стр_1.СуммаАкцизСтало-Стр_1.СуммаАкцизБыло;
		
		
		
		XML_DOM.ЗаписатьНачалоЭлемента("АкцизРазн");			
		
		Если Разница>=0 Тогда
			XML_DOM.ЗаписатьНачалоЭлемента("СумУвел");			
			XML_DOM.ЗаписатьТекст(xmlString(Разница));
			
		Иначе
			XML_DOM.ЗаписатьНачалоЭлемента("СумУм");			
			XML_DOM.ЗаписатьТекст(xmlString(-Разница));
			
		КонецЕсли;
		
		
		XML_DOM.ЗаписатьКонецЭлемента();
		
		XML_DOM.ЗаписатьКонецЭлемента();
		
		
		
		
		
		
				
		XML_DOM.ЗаписатьНачалоЭлемента("СумНалДо");			
		
		XML_DOM.ЗаписатьНачалоЭлемента("СумНДС");			
		
		XML_DOM.ЗаписатьТекст(xmlString(Стр_1.СуммаНДСБыло));
		
		XML_DOM.ЗаписатьКонецЭлемента();
		
		XML_DOM.ЗаписатьКонецЭлемента();
		
		
		XML_DOM.ЗаписатьНачалоЭлемента("СумНалПосле");			
		
		XML_DOM.ЗаписатьНачалоЭлемента("СумНДС");			
		
		XML_DOM.ЗаписатьТекст(xmlString(Стр_1.СуммаНДССтало));
		
		XML_DOM.ЗаписатьКонецЭлемента();
		
		XML_DOM.ЗаписатьКонецЭлемента();
		
		разница=Стр_1.СуммаНДССтало-Стр_1.СуммаНДСБыло;
		
		
		
		XML_DOM.ЗаписатьНачалоЭлемента("СумНалРазн");			
		
		

		Если Разница>=0 Тогда
			СуммаНДСПлюс=СуммаНДСПлюс+Разница;
			XML_DOM.ЗаписатьНачалоЭлемента("СумУвел");			
			XML_DOM.ЗаписатьТекст(xmlString(Разница));
			
		Иначе
			СуммаНДСМинус=СуммаНДСМинус-Разница;
			XML_DOM.ЗаписатьНачалоЭлемента("СумУм");			
			XML_DOM.ЗаписатьТекст(xmlString(-Разница));
			
		КонецЕсли;
		XML_DOM.ЗаписатьКонецЭлемента();
		
		
		XML_DOM.ЗаписатьКонецЭлемента();
		
		
		
		XML_DOM.ЗаписатьНачалоЭлемента("СтТовУчНал");			
		XML_DOM.ЗаписатьАтрибут("СтоимДоИзм",xmlString(СуммаПоСтрокеБыло));
		
		XML_DOM.ЗаписатьАтрибут("СтоимПослеИзм",xmlString(СуммаПоСтрокеСтало));
		
		Разница=СуммаПоСтрокеСтало-СуммаПоСтрокеБыло;
		
		
		Если Разница>=0  Тогда
			СуммаИтогПлюс=СуммаИтогПлюс+Разница;
			XML_DOM.ЗаписатьАтрибут("СтоимУвел", xmlString(Разница));
		Иначе
			XML_DOM.ЗаписатьАтрибут("СтоимУвел", xmlString(0));
			
			
		КонецЕсли;
		
		
		
		Если Разница<=0  Тогда
			СуммаИтогМинус=СуммаИтогМинус-Разница;
			XML_DOM.ЗаписатьАтрибут("СтоимУм", xmlString(-Разница));
		Иначе
			XML_DOM.ЗаписатьАтрибут("СтоимУм", xmlString(0));
			
			
		КонецЕсли;
		

		
		
		XML_DOM.ЗаписатьКонецЭлемента();
		
		
		
		
		
		БылиКМ=Стр_1.МаркировкаБыло;
		ЕстьКМ=Ложь;
		ЕстьУпаковки=Ложь;
		Если ЗначениеЗаполнено(БылиКМ) Тогда
			Для Каждого СТр_11 Из БылиКМ Цикл
				Если Стр_11.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
					ЕстьУпаковки=Истина;
				Иначе
					ЕстьКМ=Истина;
					
				КонецЕсли;
				Если ЕстьКМ=Истина И ЕстьУпаковки=Истина Тогда
					Прервать;
				КонецЕсли;
				
			Конеццикла;
		КонецЕсли;
		
		СталоКМ=Стр_1.МаркировкаСтало;
		//ЕстьКМ=Ложь;
		//ЕстьУпаковки=Ложь;
		Если ЗначениеЗаполнено(СталоКМ) Тогда
			Для Каждого СТр_11 Из СталоКМ Цикл
				Если Стр_11.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
					ЕстьУпаковки=Истина;
				Иначе
					ЕстьКМ=Истина;
				КонецЕсли;
				Если ЕстьКМ=Истина И ЕстьУпаковки=Истина Тогда
					Прервать;
				КонецЕсли;
				
			Конеццикла;
		КонецЕсли;
		
		Если ЕстьУпаковки=Истина ИЛИ ЕстьКМ=Истина Тогда
			
			
			
			Если ЕстьКМ=Истина Тогда
				
				МаркаПопалась=Ложь;
				Если ЗначениеЗаполнено(БылиКМ) Тогда
					Для Каждого Стр_ Из  БылиКМ Цикл
						Если Стр_.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука 
							ИЛИ не ЗначениеЗаполнено(Стр_.ТипУпаковки) 
							Тогда
							
							XML_DOM.ЗаписатьНачалоЭлемента("ИнфПолФХЖ2");			
							XML_DOM.ЗаписатьАтрибут("Идентиф","cis_до");
							XML_DOM.ЗаписатьАтрибут("Значен",Стр_.КМ);
							XML_DOM.ЗаписатьКонецЭлемента();
							МаркаПопалась=Истина;
						КонецЕсли;
					Конеццикла;
				КонецЕсли;
				
				Если МаркаПопалась=Ложь Тогда
							
							XML_DOM.ЗаписатьНачалоЭлемента("ИнфПолФХЖ2");			
							XML_DOM.ЗаписатьАтрибут("Идентиф","cis_до");
							XML_DOM.ЗаписатьАтрибут("Значен","-");
							XML_DOM.ЗаписатьКонецЭлемента();
				КонецЕсли;
				
				
			Конецесли;
			
			
			Если ЕстьУпаковки=Истина Тогда
				
				МаркаПопалась=Ложь;
				Если ЗначениеЗаполнено(БылиКМ) Тогда
					Для Каждого Стр_ Из  БылиКМ Цикл
						Если Стр_.типУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
							XML_DOM.ЗаписатьНачалоЭлемента("ИнфПолФХЖ2");			
							XML_DOM.ЗаписатьАтрибут("Идентиф","sscc_до");
							XML_DOM.ЗаписатьАтрибут("Значен",Стр_.КМ);
							XML_DOM.ЗаписатьКонецЭлемента();
							МаркаПопалась=Истина;
						КонецЕсли;
					Конеццикла;
				КонецЕсли;
				
				Если МаркаПопалась=Ложь Тогда
							XML_DOM.ЗаписатьНачалоЭлемента("ИнфПолФХЖ2");			
							XML_DOM.ЗаписатьАтрибут("Идентиф","sscc_до");
							XML_DOM.ЗаписатьАтрибут("Значен","-");
							XML_DOM.ЗаписатьКонецЭлемента();
				КонецЕсли;
				
				
			Конецесли;
			

			
		КонецЕсли;		
		
		Если ЕстьКМ=Истина Тогда
			МаркаПопалась=Ложь;
			
			Если ЗначениеЗаполнено(СталоКМ) Тогда
				Для Каждого Стр_ Из  СталоКМ Цикл
					Если Стр_.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука Тогда
							XML_DOM.ЗаписатьНачалоЭлемента("ИнфПолФХЖ2");			
							XML_DOM.ЗаписатьАтрибут("Идентиф","cis");
							XML_DOM.ЗаписатьАтрибут("Значен",Стр_.КМ);
							XML_DOM.ЗаписатьКонецЭлемента();
						МаркаПопалась=Истина;
					КонецЕсли;
				Конеццикла;
			КонецЕсли;
			
			Если МаркаПопалась=Ложь Тогда
							XML_DOM.ЗаписатьНачалоЭлемента("ИнфПолФХЖ2");			
							XML_DOM.ЗаписатьАтрибут("Идентиф","cis");
							XML_DOM.ЗаписатьАтрибут("Значен","-");
							XML_DOM.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
			
		Конецесли;
		
		
		Если ЕстьУпаковки=Истина Тогда
			
			МаркаПопалась=Ложь;
			Если ЗначениеЗаполнено(СталоКМ) Тогда
				Для Каждого Стр_ Из  СталоКМ Цикл
					Если Стр_.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
							XML_DOM.ЗаписатьНачалоЭлемента("ИнфПолФХЖ2");			
							XML_DOM.ЗаписатьАтрибут("Идентиф","sscc");
							XML_DOM.ЗаписатьАтрибут("Значен",Стр_.КМ);
							XML_DOM.ЗаписатьКонецЭлемента();
						МаркаПопалась=Истина;
					КонецЕсли;
				Конеццикла;
			КонецЕсли;
			Если МаркаПопалась=Ложь Тогда
							XML_DOM.ЗаписатьНачалоЭлемента("ИнфПолФХЖ2");			
							XML_DOM.ЗаписатьАтрибут("Идентиф","sscc");
							XML_DOM.ЗаписатьАтрибут("Значен","-");
							XML_DOM.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
		Конецесли;
		
		
		
						XML_DOM.ЗаписатьКонецЭлемента();
		
		
	Конеццикла;
	XML_DOM.ЗаписатьНачалоЭлемента("ВсегоУвел");
	
	XML_DOM.ЗаписатьАтрибут("СтТовУчНалВсего",xmlString(СуммаИтогПлюс));
	XML_DOM.ЗаписатьАтрибут("СтТовБезНДСВсего",xmlString(СуммаИтогБезНДСПлюс));
	XML_DOM.ЗаписатьНачалоЭлемента("СумНал");
	
	XML_DOM.ЗаписатьНачалоЭлемента("СумНДС");
	
//	Если СуммаНДСПлюс=0 Тогда
//		XML_DOM.ЗаписатьТекст("без НДС");
//	Иначе
		XML_DOM.ЗаписатьТекст(xmlString(СуммаНДСПлюс));
		
//	КонецЕсли;
	XML_DOM.ЗаписатьКонецЭлемента();
	XML_DOM.ЗаписатьКонецЭлемента();
	XML_DOM.ЗаписатьКонецЭлемента();
	
	
	XML_DOM.ЗаписатьНачалоЭлемента("ВсегоУм");
	
	XML_DOM.ЗаписатьАтрибут("СтТовУчНалВсего",xmlString(СуммаИтогМинус));
	XML_DOM.ЗаписатьАтрибут("СтТовБезНДСВсего",xmlString(СуммаИтогБезНДСМинус));
	XML_DOM.ЗаписатьНачалоЭлемента("СумНал");
	
	XML_DOM.ЗаписатьНачалоЭлемента("СумНДС");
	
	//Если СуммаНДСМинус=0 Тогда
	//	XML_DOM.ЗаписатьТекст("без НДС");
	//Иначе
		XML_DOM.ЗаписатьТекст(xmlString(СуммаНДСМинус));
		
	//КонецЕсли;
	XML_DOM.ЗаписатьКонецЭлемента();
	XML_DOM.ЗаписатьКонецЭлемента();
	XML_DOM.ЗаписатьКонецЭлемента();
	
	XML_DOM.ЗаписатьКонецЭлемента();
	
	XML_DOM.ЗаписатьНачалоЭлемента("СодФХЖ3");			
	Если ЗначениеЗаполнено(Ссылк.ПричинаКоректировки) тогда
		XML_DOM.ЗаписатьАтрибут("СодОпер",Ссылк.ПричинаКоректировки);
		//Чтен.ЗаписатьЗначение(Объект.ПричинаКоректировки)
	Иначе
		XML_DOM.ЗаписатьАтрибут("СодОпер","Изменение стоимости товаров");
		//чтен.ЗаписатьЗначение("Изменение стоимости товаров");
	КонецЕсли;
	
	XML_DOM.ЗаписатьАтрибут("ПередатДокум","УПД № "+Ссылк.ПервичныйДокумент.НомерПервичногоДокумента+" от "+Формат(Ссылк.ПервичныйДокумент.Дата,"ДЛФ=Д"));
	XML_DOM.ЗаписатьНачалоЭлемента("ОснКор");			
	XML_DOM.ЗаписатьАтрибут("НаимОсн","отсутствует");
	
	XML_DOM.ЗаписатьКонецЭлемента();
	
	XML_DOM.ЗаписатьКонецЭлемента();
	
	
	
	
	
	
	
	
	XML_DOM.ЗаписатьНачалоЭлемента("Подписант");			
	XML_DOM.ЗаписатьАтрибут("ОблПолн", "0");
	XML_DOM.ЗаписатьАтрибут("Статус", "1");
	XML_DOM.ЗаписатьАтрибут("ОснПолн", "Должностные обязанности");
	
	Если СтрДлина(Организация.ИНН)=12 Тогда
		XML_DOM.ЗаписатьНачалоЭлемента("ИП");
		XML_DOM.ЗаписатьАтрибут("ИННФЛ", Организация.ИНН);
		
		XML_DOM.ЗаписатьНачалоЭлемента("ФИО");
		
		ФИО=Организация.Наименование;
		Если Сред(Организация.Наименование,1,3)="ИП " Тогда
			ФИО=СокрЛП(Сред(Организация.Наименование,3));
		КонецЕслИ;
		Если Найти(ВРЕГ(ФИО),"ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ")=1 Тогда
			ФИО=СокрЛП(Сред(ФИО,31));
		КонецЕслИ;
		
		Фамилия=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Фамилия", СокрЛП(Фамилия));
		
		ФИО=Сред(ФИО,Найти(ФИО," ")+1);
		Имя=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Имя", Имя);
		
		ФИО=Сред(ФИО,Найти(ФИО," ")+1);
		Отчетство=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Отчество", Отчетство);
		
		
		XML_DOM.ЗаписатьКонецЭлемента();
		XML_DOM.ЗаписатьКонецЭлемента();
		
		
	Иначе
	XML_DOM.ЗаписатьНачалоЭлемента("ЮЛ");			
	XML_DOM.ЗаписатьАтрибут("ИННЮЛ", Организация.ИНН);
	XML_DOM.ЗаписатьАтрибут("НаимОрг", Организация.Наименование);
	Если ЗначениеЗаполнено(Ссылк.ТекущийПользователь.Должность) Тогда
		XML_DOM.ЗаписатьАтрибут("Должн", Ссылк.ТекущийПользователь.Должность);
	Иначе
		XML_DOM.ЗаписатьАтрибут("Должн", "генеральный директор");
	КонецЕсли;
//	XML_DOM.ЗаписатьАтрибут("Должн", "генеральный директор");
	XML_DOM.ЗаписатьНачалоЭлемента("ФИО");			
	
	ФИО=Ссылк.ТекущийПользователь.КонтактноеЛицо;
	Фамилия=Сред(ФИО,1,Найти(ФИО," ")-1);
	
	XML_DOM.ЗаписатьАтрибут("Фамилия", СокрЛП(Фамилия));
	
	ФИО=Сред(ФИО,Найти(ФИО," ")+1);
	Имя=Сред(ФИО,1,Найти(ФИО," ")-1);
	
	XML_DOM.ЗаписатьАтрибут("Имя", Имя);
	
	ФИО=Сред(ФИО,Найти(ФИО," ")+1);
	Отчетство=Сред(ФИО,1,Найти(ФИО," ")-1);
	
	XML_DOM.ЗаписатьАтрибут("Отчество", Отчетство);
	
	XML_DOM.ЗаписатьКонецЭлемента();
	XML_DOM.ЗаписатьКонецЭлемента();
	КонецЕсли;
	XML_DOM.ЗаписатьКонецЭлемента();
	XML_DOM.ЗаписатьКонецЭлемента();
	
	XML_DOM.ЗаписатьКонецЭлемента();

	
	Текст=XML_DOM.Закрыть();
	Если ОшибкаПоКм=Истина Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ПриПроверкеСхемыПриОтгрузкеЕслиОшибкаНеФормироватьФайл=Истина Тогда
		//возврат Ложь;
		
		Сообщения=Новый Массив;
		Если НеПрошлаПроверкаУКД(Текст, , Ссылк,ОткрытьФорму_1,Сообщения) ТОгда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Текстовыйдо=Новый текстовыйДокумент;
	Текстовыйдо.ДобавитьСтроку(Текст);
		
	 

	Возврат    Новый Структура("Текстовыйдо,ИмяФайла,ИдР",Текстовыйдо,ИмяФайла,ИдР)
КонецФункции


Функция ВывестиТабличнД(Ссылк,ОткрытьФорму_1,Сообщения,ПриПроверкеСхемыПриОтгрузкеЕслиОшибкаНеФормироватьФайл,ТипЭДО=Неопределено) Экспорт
	
	
	НеДобавлятьКМПриФормированииXML=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().НеДобавлятьКМПриФормированииXML;
	
	Если Ссылк.Контрагент.НеДобавлятьКМПриФормированииXML Тогда
		НеДобавлятьКМПриФормированииXML=Истина;
	Конецесли;
	
	ОбрезатьКМДляТабака=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ОбрезатьКМДляТабака;
	ПриФормированииXMLДобавлятьКМПоКоробам=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ПриФормированииXMLДобавлятьКМПоКоробам;
	
	Если Ссылк.Контрагент.ПриФормированииXMLДобавлятьКМПоКоробам=Истина Тогда
		ПриФормированииXMLДобавлятьКМПоКоробам=истина;
	Конецесли;
	
	
	
	
	БратьКоличествоИзТабличойЧасти=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().БратьКоличествоИзТабличойЧасти;
	
	КодТовараВУПД=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КодТовараВУПД;
	
	Если Ссылк.ТипУточненияУПД=Перечисления.ТипУточненияУПД_ХамелеонЦРПТ.Корректировочная Тогда
		Возврат СформироватьУКД(Ссылк,ОткрытьФорму_1,Сообщения,ПриПроверкеСхемыПриОтгрузкеЕслиОшибкаНеФормироватьФайл,ТипЭДО,
		ОбрезатьКМДляТабака,БратьКоличествоИзТабличойЧасти,КодТовараВУПД,НеДобавлятьКМПриФормированииXML);
	КонецЕсли;
	
	      
	Если Ссылк.ТипУточненияУПД=Перечисления.ТипУточненияУПД_ХамелеонЦРПТ.Исправление Тогда
		
			ДатаУПД=Ссылк.ПервичныйДокумент.Дата;
			НомерУПД=Ссылк.ПервичныйДокумент.НомерПервичногоДокумента
	Иначе
			ДатаУПД = Ссылк.Дата;
			НомерУПД=Ссылк.НомерПервичногоДокумента;
	КонецЕсли;
	Контрагент=Ссылк.Контрагент;
	Организация=Ссылк.Организация;
	
	Грузоотправитель=Ссылк.Грузоотправитель;
	Грузополучатель=Ссылк.Грузополучатель;
	
	Если ТипЭДО=Неопределено Тогда
		ИД_ЭДО=Организация.ИД_ЭДО;
	Иначе
		Если ТипЭДО=справочники.ЭДО_ХамелеонЦРПТ.ЭДОЛайт Тогда
			ИД_ЭДО="2LT-"+xmlString(Организация.Ид_ЭДО_ЦРПТ)
		ИначеЕсли Организация.ОсновнойТипЭДО=ТипЭДО Тогда
			ИД_ЭДО=Организация.ИД_ЭДО;
		Иначе
			
			Для Каждого Стр_1 Из Организация.ЭДОВспомогательные Цикл
				Если Стр_1.ТипЭДО=ТипЭДО Тогда
					Ид_ЭДО=Стр_1.ИД_ЭДО;
					Если ЗначениеЗАполнено(Ид_ЭДО) Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			Конеццикла;
			                                      
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗАполненО(ИД_ЭДО) Тогда
		Если Не ЗначениеЗАполнено(Организация.ОсновнойТипЭДО) И ЗначениеЗаполнено(Организация.ИД_ЭДО) Тогда
			Ид_ЭДО=Организация.ИД_ЭДО;
		Иначе
			Сообщить("Не нашли Идентификатор организации в ЭДО");
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЭДО=справочники.ЭДО_ХамелеонЦРПТ.ЭДОЛайт Тогда
		КонтрагентИД_ЭДО="2LT-"+xmlString(Контрагент.Ид_ЭДО_ЦРПТ)
	Иначе
		КонтрагентИД_ЭДО=Контрагент.ИД_ЭДО;
	КонецЕсли;
	
	ИдР=xmlString(Ссылк.УникальныйИдентификатор());
	
	Если НеДобавлятьКМПриФормированииXML=Истина 
		ИЛИ Ссылк.СерийныеНомера.Количество()=0 
		Тогда
		ИмяФайла = "ON_NSCHFDOPPR_" +
				 КонтрагентИД_ЭДО+ "_" + 
				ИД_ЭДО+ "_" +
				Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + "_" +
				xmlString(ИдР);
	Иначе
	ИмяФайла = "ON_NSCHFDOPPRMARK_" +
				 КонтрагентИД_ЭДО+ "_" + 
				ИД_ЭДО+ "_" +
				Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + "_" +
				xmlString(ИдР);
	Конецесли;
	XML_DOM=Новый ЗаписьXML;
	
	XML_DOM.УстановитьСтроку("windows-1251");
	XML_DOM.ЗаписатьОБъявлениеXML();
	XML_DOM.ЗаписатьНачалоЭлемента("Файл");
	//ИмяСчтетфакт="ON_NSCHFDOPPR_"+Формат(ТекущаяДата(),"ДФ=""ггггММдд""")+"_"+Строка(Новый УникальныйИдентификатор());
	XML_DOM.ЗаписатьАтрибут("ИдФайл", ИмяФайла);
	ИмяФайла=ИмяФайла+".xml";
	XML_DOM.ЗаписатьАтрибут("ВерсПрог", "1С 8.3");
	
	
	XML_DOM.ЗаписатьАтрибут("ВерсФорм", "5.01");
	
	XML_DOM.ЗаписатьНачалоЭлемента("СвУчДокОбор");
	XML_DOM.ЗаписатьАтрибут("ИдОтпр", ИД_ЭДО);
	XML_DOM.ЗаписатьАтрибут("ИдПол", КонтрагентИД_ЭДО);
		
	
	
	Если ТипЭДО=Справочники.ЭДО_ХамелеонЦРПТ.ЭДОТакском Тогда
		XML_DOM.ЗаписатьНачалоЭлемента("СвОЭДОтпр");
		XML_DOM.ЗаписатьАтрибут("ИдЭДО", "2AL");
		XML_DOM.ЗаписатьАтрибут("ИННЮЛ", "7704211201");
		XML_DOM.ЗаписатьАтрибут("НаимОрг", "ООО Такском");
		
		XML_DOM.ЗаписатьКонецЭлемента();
		
		
		
	КонецЕсли;
	XML_DOM.ЗаписатьКонецЭлемента();
	
	
	
	XML_DOM.ЗаписатьНачалоЭлемента("Документ");
	
	XML_DOM.ЗаписатьАтрибут("КНД", "1115131");
	Если 
		Ссылк.Товары.Итог("НДС")=0 ИЛИ
		Ссылк.ВидТоварооборота=Перечисления.ВидТоварооборота_ХамелеонЦРПТ.COMMISSION Тогда
		XML_DOM.ЗаписатьАтрибут("Функция", "ДОП");
	Иначе
		XML_DOM.ЗаписатьАтрибут("Функция", "СЧФДОП");
	КонецЕсли;
	
	

		      
	Если Ссылк.ТипУточненияУПД=Перечисления.ТипУточненияУПД_ХамелеонЦРПТ.Исправление Тогда
		Если ЗначениеЗаполненО(Ссылк.ПервичныйДокумент.ДатаУПД) Тогда
			ДатаУПД_Сф=Ссылк.ПервичныйДокумент.датаУПД;
		Иначе
		
			ДатаУПД_Сф=Ссылк.ПервичныйДокумент.Дата;
		КонецЕсли;
		Если ЗначениеЗаполненО(Ссылк.ПервичныйДокумент.НомерУПД) Тогда
			НомерУПД_СФ=Ссылк.ПервичныйДокумент.НомерУПД;
		Иначе
			НомерУПД_Сф=Ссылк.ПервичныйДокумент.НомерПервичногоДокумента
		КонецЕслИ;
		
	Иначе
		Если ЗначениеЗаполнено(Ссылк.ДатаУПД) Тогда
			 ДатаУПД_СФ=Ссылк.ДатаУПД;
		Иначе
			ДатаУПД_Сф = Ссылк.Дата;
		КонецЕслИ;
		Если ЗначениеЗАполнено(Ссылк.НомерУПД) Тогда
			НомерУПД_Сф=Ссылк.НомерУПД;
		Иначе
			НомерУПД_Сф=Ссылк.НомерПервичногоДокумента;
		КонецЕсли;
	КонецЕсли;
	
	
		XML_DOM.ЗаписатьАтрибут("ДатаИнфПр", Формат(ДатаУПД,"ДФ=""дд.ММ.гггг"""));
		XML_DOM.ЗаписатьАтрибут("ВремИнфПр", Формат(ДатаУПД,"ДФ=""ЧЧ.мм.сс"""));
	XML_DOM.ЗаписатьАтрибут("НаимЭконСубСост", Ссылк.Организация.Наименование);
	XML_DOM.ЗаписатьАтрибут("ПоФактХЖ", "Документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)");

	Если Ссылк.ВидТоварооборота=Перечисления.ВидТоварооборота_ХамелеонЦРПТ.COMMISSION Тогда
		XML_DOM.ЗаписатьАтрибут("НаимДокОпр", "Документ об отгрузке товаров (выполнении работ), передаче имущественных прав (Документ об оказании услуг)");
	Иначе
		XML_DOM.ЗаписатьАтрибут("НаимДокОпр", "Счет-фактура и документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)");
	КонецЕсли;
	
	
	
	XML_DOM.ЗаписатьНачалоЭлемента("СвСчФакт");
	XML_DOM.ЗаписатьАтрибут("НомерСчФ", НомерУПД_Сф);
	
	XML_DOM.ЗаписатьАтрибут("ДатаСчФ", Формат(ДатаУПД_Сф,"ДФ=""дд.ММ.гггг"""));
	XML_DOM.ЗаписатьАтрибут("КодОКВ", "643");
	
	
	Если Ссылк.ТипУточненияУПД=Перечисления.ТипУточненияУПД_ХамелеонЦРПТ.Исправление Тогда
		XML_DOM.ЗаписатьНачалоЭлемента("ИспрСчФ");
		XML_DOM.ЗаписатьАтрибут("НомИспрСчФ", xmlString(Ссылк.НомерИсправления));
		XML_DOM.ЗаписатьАтрибут("ДатаИспрСчФ", Формат(Ссылк.Дата,"ДФ=""дд.ММ.гггг"""));
		XML_DOM.ЗаписатьКонецЭлемента();
		
				
	КонецЕсли;
	
	
	XML_DOM.ЗаписатьНачалоЭлемента("СвПрод");
	Если ЗначениеЗаполнено(Организация.ОКПО) Тогда
		XML_DOM.ЗаписатьАтрибут("ОКПО", Организация.ОКПО);
	КонецЕсли;
	
	XML_DOM.ЗаписатьНачалоЭлемента("ИдСв");
	
	
	
	
	Если СтрДлина(Организация.ИНН)=12 Тогда
		XML_DOM.ЗаписатьНачалоЭлемента("СвИП");
		
		XML_DOM.ЗаписатьАтрибут("ИННФЛ", Организация.ИНН);
		
		XML_DOM.ЗаписатьНачалоЭлемента("ФИО");
		
		ФИО=Организация.Наименование;
		Если Сред(Организация.Наименование,1,3)="ИП " Тогда
			ФИО=СокрЛП(Сред(Организация.Наименование,3));
		КонецЕслИ;
		Если Найти(ВРЕГ(ФИО),"ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ")=1 Тогда
			ФИО=СокрЛП(Сред(ФИО,31));
		КонецЕслИ;
		
		Фамилия=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Фамилия", СокрЛП(Фамилия));
		
		ФИО=Сред(ФИО,Найти(ФИО," ")+1);
		Имя=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Имя", Имя);
		
		ФИО=Сред(ФИО,Найти(ФИО," ")+1);
		Отчетство=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Отчество", Отчетство);
		
		
		XML_DOM.ЗаписатьКонецЭлемента();
		XML_DOM.ЗаписатьКонецЭлемента();
		
		
	Иначе
		XML_DOM.ЗаписатьНачалоЭлемента("СвЮЛУч");
		
		
		XML_DOM.ЗаписатьАтрибут("НаимОрг", Организация.Наименование);
		
		
		XML_DOM.ЗаписатьАтрибут("ИННЮЛ", Организация.ИНН);
		Если ЗначениеЗаполнено(Организация.КПП) Тогда
			XML_DOM.ЗаписатьАтрибут("КПП", Организация.КПП);
		КонецЕслИ;
		XML_DOM.ЗаписатьКонецЭлемента();
	КонецЕсли;
	XML_DOM.ЗаписатьКонецЭлемента();
	
	XML_DOM.ЗаписатьНачалоЭлемента("Адрес");
	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", Организация);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический);
	//Запрос.УстановитьПараметр("Вид"   , Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	Адрес_ХамелеонЦРПТ.Индекс КАК Поле1,
	               |	Адрес_ХамелеонЦРПТ.КодРегиона КАК Поле2,
	               |	Адрес_ХамелеонЦРПТ.Район КАК Поле3,
	               |	Адрес_ХамелеонЦРПТ.Город КАК Поле4,
	               |	Адрес_ХамелеонЦРПТ.НаселенныйПункт КАК Поле5,
	               |	Адрес_ХамелеонЦРПТ.Улица КАК Поле6,
	               |	Адрес_ХамелеонЦРПТ.Дом КАК Поле7,
	               |	Адрес_ХамелеонЦРПТ.Корпус КАК Поле8,
	               |	Адрес_ХамелеонЦРПТ.Квартира КАК ПОЛе9,
	               |	Адрес_ХамелеонЦРПТ.Литера КАК Поле10
	               |ИЗ
	               |	РегистрСведений.Адрес_ХамелеонЦРПТ КАК Адрес_ХамелеонЦРПТ
	               |ГДЕ
	               |	Адрес_ХамелеонЦРПТ.Объект = &Объект
	               |	И Адрес_ХамелеонЦРПТ.Тип = &Тип";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой()  
		ИЛИ не ЗначениеЗаполнено(РезультатЗапроса.Выгрузить()[0].Поле2)
		Тогда
		
		Если ЗначениеЗаполнено(Организация.АдресМестонахождения) Тогда
			XML_DOM.ЗаписатьНачалоЭлемента("АдрИнф");
			XML_DOM.ЗаписатьАтрибут("КодСтр", "643");
			XML_DOM.ЗаписатьАтрибут("АдрТекст", Организация.АдресМестонахождения);
		Иначе
			XML_DOM.ЗаписатьНачалоЭлемента("АдрРФ");
			
		Конецесли;
				
		
		
		
	Иначе
		
		XML_DOM.ЗаписатьНачалоЭлемента("АдрРФ");

		Адрес=РезультатЗапроса.Выгрузить()[0];
		Если ЗначениеЗаполнено(Адрес.Поле1) тогда
			XML_DOM.ЗаписатьАтрибут("Индекс", Адрес.Поле1);
		КонецЕслИ;
		
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
			XML_DOM.ЗаписатьАтрибут("КодРегион", xmlString(Адрес.Поле2));
			
		
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		
		
		
		Если ЗначениеЗаполнено(Адрес.Поле3) тогда
			XML_DOM.ЗаписатьАтрибут("Район", Адрес.Поле3);
		КонецЕслИ;
		Если ЗначениеЗаполнено(Адрес.Поле4) тогда
			XML_DOM.ЗаписатьАтрибут("Город", Адрес.Поле4);
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле5) тогда
			XML_DOM.ЗаписатьАтрибут("НаселПункт", Адрес.Поле5);
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле6) тогда
			XML_DOM.ЗаписатьАтрибут("Улица", Адрес.Поле6);
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле7) тогда
			XML_DOM.ЗаписатьАтрибут("Дом", xmlstring(Адрес.Поле7));
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле8) тогда
			XML_DOM.ЗаписатьАтрибут("Корпус", xmlstring(Адрес.Поле8));
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле9) тогда
			XML_DOM.ЗаписатьАтрибут("Кварт", Сред(xmlstring(Адрес.Поле9),1,20));
		КонецЕсли;		
		
	КонецЕсли;
	
	
	
	XML_DOM.ЗаписатьКонецЭлемента();
	XML_DOM.ЗаписатьКонецЭлемента();
	
	XML_DOM.ЗаписатьНачалоЭлемента("Контакт");
	
	Если ЗначениеЗаполнено(Организация.Телефон) тогда
			XML_DOM.ЗаписатьАтрибут("Тлф",Организация.Телефон);
			
	КонецЕсли;
	//XML_DOM.ЗаписатьКонецЭлемента();
	XML_DOM.ЗаписатьКонецЭлемента();
	
	Если ЗначениеЗаполнено(Организация.НомерСчета) Тогда
		XML_DOM.ЗаписатьНачалоЭлемента("БанкРекв");
		XML_DOM.ЗаписатьАтрибут("НомерСчета",Организация.НомерСчета);
		
		XML_DOM.ЗаписатьНачалоЭлемента("СвБанк");
		XML_DOM.ЗаписатьАтрибут("НаимБанк",Организация.НаименованиеБанка);
		XML_DOM.ЗаписатьАтрибут("БИК",Организация.БикБанка);
		XML_DOM.ЗаписатьАтрибут("КорСчет",Организация.КоррСчет);
		
		
		XML_DOM.ЗаписатьКонецЭлемента();
		XML_DOM.ЗаписатьКонецЭлемента();
	КонецЕсли;
		
	XML_DOM.ЗаписатьКонецЭлемента();
	
	XML_DOM.ЗаписатьНачалоЭлемента("ГрузОт");
	
	Если ЗначениеЗаполнено(Грузоотправитель) Тогда
			
		   XML_DOM.ЗаписатьНачалоЭлемента("ГрузОтпр");
		
	XML_DOM.ЗаписатьНачалоЭлемента("ИдСв");
		
		
	Если ЗначениеЗаполнено(Грузоотправитель.КПП) Тогда
		
		XML_DOM.ЗаписатьНачалоЭлемента("СвЮЛУч");
		
		
		Если ЗначениеЗаполнено(Грузоотправитель.НаименованиеПолное) Тогда	
			XML_DOM.ЗаписатьАтрибут("НаимОрг", Грузоотправитель.НаименованиеПолное);
		Иначе
			XML_DOM.ЗаписатьАтрибут("НаимОрг", Грузоотправитель.Наименование);
		КонецЕсли;
		
		XML_DOM.ЗаписатьАтрибут("ИННЮЛ", Грузоотправитель.ИНН);
		XML_DOM.ЗаписатьАтрибут("КПП", Грузоотправитель.КПП);
		XML_DOM.ЗаписатьКонецЭлемента();
		
		
		
	Иначе
		
		XML_DOM.ЗаписатьНачалоЭлемента("СвИП");
		XML_DOM.ЗаписатьАтрибут("ИННФЛ", Грузоотправитель.ИНН);
		
		XML_DOM.ЗаписатьНачалоЭлемента("ФИО");
		
		Если ЗначениеЗаполнено(Грузоотправитель.НаименованиеПолное) Тогда
			ФИО=Грузоотправитель.НаименованиеПолное;
			Если Сред(Грузоотправитель.НаименованиеПолное,1,3)="ИП " Тогда
				ФИО=СокрЛП(Сред(Грузоотправитель.НаименованиеПолное,3));
			КонецЕслИ;
		Иначе
			ФИО=Грузоотправитель.Наименование;
			Если Сред(Грузоотправитель.Наименование,1,3)="ИП " Тогда
				ФИО=СокрЛП(Сред(Грузоотправитель.Наименование,3));
			КонецЕслИ;
			
			
		КонецЕсли;
		Если Найти(ВРЕГ(ФИО),"ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ")=1 Тогда
			ФИО=СокрЛП(Сред(ФИО,31));
		КонецЕслИ;
		
		Фамилия=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Фамилия", СокрЛП(Фамилия));
		
		ФИО=Сред(ФИО,Найти(ФИО," ")+1);
		Имя=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Имя", Имя);
		
		ФИО=Сред(ФИО,Найти(ФИО," ")+1);
		Отчетство=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Отчество", Отчетство);
		
		
		XML_DOM.ЗаписатьКонецЭлемента();
		XML_DOM.ЗаписатьКонецЭлемента();
		
		
	КонецЕслИ;
	XML_DOM.ЗаписатьКонецЭлемента();
	
	XML_DOM.ЗаписатьНачалоЭлемента("Адрес");
	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", Грузоотправитель);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипАдреса_ХамелеонЦРПТ.Фактический);
	//Запрос.УстановитьПараметр("Вид"   , Справочники.ВидыКонтактнойИнформации.ФактАдресГрузоотправительа);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	Адрес_ХамелеонЦРПТ.Индекс КАК Поле1,
	               |	Адрес_ХамелеонЦРПТ.КодРегиона КАК Поле2,
	               |	Адрес_ХамелеонЦРПТ.Район КАК Поле3,
	               |	Адрес_ХамелеонЦРПТ.Город КАК Поле4,
	               |	Адрес_ХамелеонЦРПТ.НаселенныйПункт КАК Поле5,
	               |	Адрес_ХамелеонЦРПТ.Улица КАК Поле6,
	               |	Адрес_ХамелеонЦРПТ.Дом КАК Поле7,
	               |	Адрес_ХамелеонЦРПТ.Корпус КАК Поле8,
	               |	Адрес_ХамелеонЦРПТ.Квартира КАК ПОЛе9,
	               |	Адрес_ХамелеонЦРПТ.Литера КАК Поле10
	               |ИЗ
	               |	РегистрСведений.Адрес_ХамелеонЦРПТ КАК Адрес_ХамелеонЦРПТ
	               |ГДЕ
	               |	Адрес_ХамелеонЦРПТ.Объект = &Объект
	               |	И Адрес_ХамелеонЦРПТ.Тип = &Тип";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() 
		ИЛИ Не ЗначениеЗаполнено(РезультатЗапроса.Выгрузить()[0].Поле2)
		Тогда
		
		Если ЗначениеЗаполнено(Грузоотправитель.ФактическийАдрес) Тогда
			XML_DOM.ЗаписатьНачалоЭлемента("АдрИнф");
			XML_DOM.ЗаписатьАтрибут("КодСтр", "643");
			XML_DOM.ЗаписатьАтрибут("АдрТекст", Грузоотправитель.ФактическийАдрес);
		Иначе
			XML_DOM.ЗаписатьНачалоЭлемента("АдрРФ");
			
		КонецЕсли;
		
		
	Иначе
		
		XML_DOM.ЗаписатьНачалоЭлемента("АдрРФ");
		
		Адрес=РезультатЗапроса.Выгрузить()[0];
		Если ЗначениеЗаполнено(Адрес.Поле1) тогда
			XML_DOM.ЗаписатьАтрибут("Индекс", Адрес.Поле1);
		КонецЕслИ;
		
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
			XML_DOM.ЗаписатьАтрибут("КодРегион", xmlString(Адрес.Поле2));
		
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		
		
		
		Если ЗначениеЗаполнено(Адрес.Поле3) тогда
			XML_DOM.ЗаписатьАтрибут("Район", Адрес.Поле3);
		КонецЕслИ;
		Если ЗначениеЗаполнено(Адрес.Поле4) тогда
			XML_DOM.ЗаписатьАтрибут("Город", Адрес.Поле4);
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле5) тогда
			XML_DOM.ЗаписатьАтрибут("НаселПункт", Адрес.Поле5);
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле6) тогда
			XML_DOM.ЗаписатьАтрибут("Улица", Адрес.Поле6);
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле7) тогда
			XML_DOM.ЗаписатьАтрибут("Дом", xmlstring(Адрес.Поле7));
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле8) тогда
			XML_DOM.ЗаписатьАтрибут("Корпус", xmlstring(Адрес.Поле8));
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле9) тогда
			XML_DOM.ЗаписатьАтрибут("Кварт", Сред(xmlstring(Адрес.Поле9),1,20));
		КонецЕсли;		
		
		
		
	КонецЕсли;
	
	XML_DOM.ЗаписатьКонецЭлемента();
	
	XML_DOM.ЗаписатьКонецЭлемента();
		
	XML_DOM.ЗаписатьКонецЭлемента();
		
		
	Иначе
	
	  //Если ТипЭДО=Справочники.ЭДО_ХамелеонЦРПТ.
	
//		XML_DOM.ЗаписатьНачалоЭлемента("ОнЖе");
//		XML_DOM.ЗаписатьТекст("он же");
//		XML_DOM.ЗаписатьКонецЭлемента();



		   XML_DOM.ЗаписатьНачалоЭлемента("ГрузОтпр");
		
	XML_DOM.ЗаписатьНачалоЭлемента("ИдСв");
		
		Грузоотправитель=Организация;
	Если ЗначениеЗаполнено(Грузоотправитель.КПП) Тогда
		
		XML_DOM.ЗаписатьНачалоЭлемента("СвЮЛУч");
		
		
		XML_DOM.ЗаписатьАтрибут("НаимОрг", Грузоотправитель.Наименование);
		
		XML_DOM.ЗаписатьАтрибут("ИННЮЛ", Грузоотправитель.ИНН);
		XML_DOM.ЗаписатьАтрибут("КПП", Грузоотправитель.КПП);
		XML_DOM.ЗаписатьКонецЭлемента();
		
		
		
	Иначе
		
		XML_DOM.ЗаписатьНачалоЭлемента("СвИП");
		XML_DOM.ЗаписатьАтрибут("ИННФЛ", Грузоотправитель.ИНН);
		
		XML_DOM.ЗаписатьНачалоЭлемента("ФИО");
		
			ФИО=Грузоотправитель.Наименование;
			Если Сред(Грузоотправитель.Наименование,1,3)="ИП " Тогда
				ФИО=СокрЛП(Сред(Грузоотправитель.Наименование,3));
			КонецЕслИ;
		Если Найти(ВРЕГ(ФИО),"ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ")=1 Тогда
			ФИО=СокрЛП(Сред(ФИО,31));
		КонецЕслИ;
			
			
		Фамилия=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Фамилия", СокрЛП(Фамилия));
		
		ФИО=Сред(ФИО,Найти(ФИО," ")+1);
		Имя=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Имя", Имя);
		
		ФИО=Сред(ФИО,Найти(ФИО," ")+1);
		Отчетство=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Отчество", Отчетство);
		
		
		XML_DOM.ЗаписатьКонецЭлемента();
		XML_DOM.ЗаписатьКонецЭлемента();
		
		
	КонецЕслИ;
	XML_DOM.ЗаписатьКонецЭлемента();
	
	XML_DOM.ЗаписатьНачалоЭлемента("Адрес");
	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", Грузоотправитель);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический);
	//Запрос.УстановитьПараметр("Вид"   , Справочники.ВидыКонтактнойИнформации.ФактАдресГрузоотправительа);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	Адрес_ХамелеонЦРПТ.Индекс КАК Поле1,
	               |	Адрес_ХамелеонЦРПТ.КодРегиона КАК Поле2,
	               |	Адрес_ХамелеонЦРПТ.Район КАК Поле3,
	               |	Адрес_ХамелеонЦРПТ.Город КАК Поле4,
	               |	Адрес_ХамелеонЦРПТ.НаселенныйПункт КАК Поле5,
	               |	Адрес_ХамелеонЦРПТ.Улица КАК Поле6,
	               |	Адрес_ХамелеонЦРПТ.Дом КАК Поле7,
	               |	Адрес_ХамелеонЦРПТ.Корпус КАК Поле8,
	               |	Адрес_ХамелеонЦРПТ.Квартира КАК ПОЛе9,
	               |	Адрес_ХамелеонЦРПТ.Литера КАК Поле10
	               |ИЗ
	               |	РегистрСведений.Адрес_ХамелеонЦРПТ КАК Адрес_ХамелеонЦРПТ
	               |ГДЕ
	               |	Адрес_ХамелеонЦРПТ.Объект = &Объект
	               |	И Адрес_ХамелеонЦРПТ.Тип = &Тип";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() 
		ИЛИ Не ЗначениеЗаполнено(РезультатЗапроса.Выгрузить()[0].Поле2)
		Тогда
		
		Если ЗначениеЗаполнено(Грузоотправитель.АдресМестонахождения) Тогда
			XML_DOM.ЗаписатьНачалоЭлемента("АдрИнф");
			XML_DOM.ЗаписатьАтрибут("КодСтр", "643");
			XML_DOM.ЗаписатьАтрибут("АдрТекст", Грузоотправитель.АдресМестонахождения);
		Иначе
			XML_DOM.ЗаписатьНачалоЭлемента("АдрРФ");
			
		КонецЕсли;
		
		
	Иначе
		
		XML_DOM.ЗаписатьНачалоЭлемента("АдрРФ");
		
		Адрес=РезультатЗапроса.Выгрузить()[0];
		Если ЗначениеЗаполнено(Адрес.Поле1) тогда
			XML_DOM.ЗаписатьАтрибут("Индекс", Адрес.Поле1);
		КонецЕслИ;
		
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
			XML_DOM.ЗаписатьАтрибут("КодРегион", xmlString(Адрес.Поле2));
		
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		
		
		
		Если ЗначениеЗаполнено(Адрес.Поле3) тогда
			XML_DOM.ЗаписатьАтрибут("Район", Адрес.Поле3);
		КонецЕслИ;
		Если ЗначениеЗаполнено(Адрес.Поле4) тогда
			XML_DOM.ЗаписатьАтрибут("Город", Адрес.Поле4);
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле5) тогда
			XML_DOM.ЗаписатьАтрибут("НаселПункт", Адрес.Поле5);
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле6) тогда
			XML_DOM.ЗаписатьАтрибут("Улица", Адрес.Поле6);
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле7) тогда
			XML_DOM.ЗаписатьАтрибут("Дом", xmlstring(Адрес.Поле7));
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле8) тогда
			XML_DOM.ЗаписатьАтрибут("Корпус", xmlstring(Адрес.Поле8));
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле9) тогда
			XML_DOM.ЗаписатьАтрибут("Кварт", Сред(xmlstring(Адрес.Поле9),1,20));
		КонецЕсли;		
		
		
		
	КонецЕсли;
	
	XML_DOM.ЗаписатьКонецЭлемента();
	
	XML_DOM.ЗаписатьКонецЭлемента();
		
	XML_DOM.ЗаписатьКонецЭлемента();
	Грузоотправитель=Ссылк.Грузоотправитель;
		
	КонецЕсли;
		
	XML_DOM.ЗаписатьКонецЭлемента();
	
	XML_DOM.ЗаписатьНачалоЭлемента("ГрузПолуч");
	
	Если Не ЗначениеЗаполнено(Грузополучатель) тогда
		Грузополучатель=Контрагент;
	КонецЕсли;
	
	XML_DOM.ЗаписатьНачалоЭлемента("ИдСв");
	Если ЗначениеЗаполнено(Грузополучатель.КПП) Тогда
		
		XML_DOM.ЗаписатьНачалоЭлемента("СвЮЛУч");
		
		
		Если ЗначениеЗаполнено(Грузополучатель.НаименованиеПолное) Тогда	
			XML_DOM.ЗаписатьАтрибут("НаимОрг", Грузополучатель.НаименованиеПолное);
		Иначе
			XML_DOM.ЗаписатьАтрибут("НаимОрг", Грузополучатель.Наименование);
		КонецЕсли;
		
		XML_DOM.ЗаписатьАтрибут("ИННЮЛ", Грузополучатель.ИНН);
		XML_DOM.ЗаписатьАтрибут("КПП", Грузополучатель.КПП);
		XML_DOM.ЗаписатьКонецЭлемента();
		
		
		
	Иначе
		
		XML_DOM.ЗаписатьНачалоЭлемента("СвИП");
		XML_DOM.ЗаписатьАтрибут("ИННФЛ", Грузополучатель.ИНН);
		
		XML_DOM.ЗаписатьНачалоЭлемента("ФИО");
		
		Если ЗначениеЗаполнено(Грузополучатель.НаименованиеПолное) Тогда
			ФИО=Грузополучатель.НаименованиеПолное;
			Если Сред(Грузополучатель.НаименованиеПолное,1,3)="ИП " Тогда
				ФИО=СокрЛП(Сред(Грузополучатель.НаименованиеПолное,3));
			КонецЕслИ;
		Иначе
			ФИО=Грузополучатель.Наименование;
			Если Сред(Грузополучатель.Наименование,1,3)="ИП " Тогда
				ФИО=СокрЛП(Сред(Грузополучатель.Наименование,3));
				
			КонецЕслИ;
			
		КонецЕсли;
		Если Найти(ВРЕГ(ФИО),"ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ")=1 Тогда
			ФИО=СокрЛП(Сред(ФИО,31));
		КонецЕслИ;
		
		Фамилия=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Фамилия", СокрЛП(Фамилия));
		
		ФИО=Сред(ФИО,Найти(ФИО," ")+1);
		Имя=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Имя", Имя);
		
		ФИО=Сред(ФИО,Найти(ФИО," ")+1);
		Отчетство=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Отчество", Отчетство);
		
		
		XML_DOM.ЗаписатьКонецЭлемента();
		XML_DOM.ЗаписатьКонецЭлемента();
		
		
	КонецЕслИ;
	XML_DOM.ЗаписатьКонецЭлемента();
	
	XML_DOM.ЗаписатьНачалоЭлемента("Адрес");
	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", Грузополучатель);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипАдреса_ХамелеонЦРПТ.Фактический);
	//Запрос.УстановитьПараметр("Вид"   , Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	Адрес_ХамелеонЦРПТ.Индекс КАК Поле1,
	               |	Адрес_ХамелеонЦРПТ.КодРегиона КАК Поле2,
	               |	Адрес_ХамелеонЦРПТ.Район КАК Поле3,
	               |	Адрес_ХамелеонЦРПТ.Город КАК Поле4,
	               |	Адрес_ХамелеонЦРПТ.НаселенныйПункт КАК Поле5,
	               |	Адрес_ХамелеонЦРПТ.Улица КАК Поле6,
	               |	Адрес_ХамелеонЦРПТ.Дом КАК Поле7,
	               |	Адрес_ХамелеонЦРПТ.Корпус КАК Поле8,
	               |	Адрес_ХамелеонЦРПТ.Квартира КАК ПОЛе9,
	               |	Адрес_ХамелеонЦРПТ.Литера КАК Поле10
	               |ИЗ
	               |	РегистрСведений.Адрес_ХамелеонЦРПТ КАК Адрес_ХамелеонЦРПТ
	               |ГДЕ
	               |	Адрес_ХамелеонЦРПТ.Объект = &Объект
	               |	И Адрес_ХамелеонЦРПТ.Тип = &Тип";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() 
		ИЛИ Не ЗначениеЗаполнено(РезультатЗапроса.Выгрузить()[0].Поле2)
		Тогда
		
		Если ЗначениеЗаполнено(Грузополучатель.ФактическийАдрес) Тогда
			XML_DOM.ЗаписатьНачалоЭлемента("АдрИнф");
			XML_DOM.ЗаписатьАтрибут("КодСтр", "643");
			XML_DOM.ЗаписатьАтрибут("АдрТекст", Грузополучатель.ФактическийАдрес);
		Иначе
			XML_DOM.ЗаписатьНачалоЭлемента("АдрРФ");
			
		Конецесли;
		
		
	Иначе
		XML_DOM.ЗаписатьНачалоЭлемента("АдрРФ");
		Адрес=РезультатЗапроса.Выгрузить()[0];
		Если ЗначениеЗаполнено(Адрес.Поле1) тогда
			XML_DOM.ЗаписатьАтрибут("Индекс", Адрес.Поле1);
		КонецЕслИ;
		
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
			XML_DOM.ЗаписатьАтрибут("КодРегион", xmlString(Адрес.Поле2));
		
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		
		
		
		Если ЗначениеЗаполнено(Адрес.Поле3) тогда
			XML_DOM.ЗаписатьАтрибут("Район", Адрес.Поле3);
		КонецЕслИ;
		Если ЗначениеЗаполнено(Адрес.Поле4) тогда
			XML_DOM.ЗаписатьАтрибут("Город", Адрес.Поле4);
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле5) тогда
			XML_DOM.ЗаписатьАтрибут("НаселПункт", Адрес.Поле5);
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле6) тогда
			XML_DOM.ЗаписатьАтрибут("Улица", Адрес.Поле6);
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле7) тогда
			XML_DOM.ЗаписатьАтрибут("Дом", xmlstring(Адрес.Поле7));
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле8) тогда
			XML_DOM.ЗаписатьАтрибут("Корпус", xmlstring(Адрес.Поле8));
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле9) тогда
			XML_DOM.ЗаписатьАтрибут("Кварт", Сред(xmlstring(Адрес.Поле9),1,20));
		КонецЕсли;		
		
		
		
	КонецЕсли;
	
	XML_DOM.ЗаписатьКонецЭлемента();
	XML_DOM.ЗаписатьКонецЭлемента();
	XML_DOM.ЗаписатьКонецЭлемента();
		
	
	
	Для Каждого Стр_1 Из Ссылк.КПлатежныйДокументам Цикл
		
		XML_DOM.ЗаписатьНачалоЭлемента("СвПРД");
		XML_DOM.ЗаписатьАтрибут("НомерПРД", Стр_1.НомерДокумента);
		XML_DOM.ЗаписатьАтрибут("ДатаПРД",Формат(Стр_1.ДатаДокумента,"ДФ=""дд.ММ.гггг""")); //Формат(ДатаУПД,"ДФ=""дд.ММ.гггг"""));
		Если ЗначениеЗаполнено(Стр_1.Сумма) тогда
			XML_DOM.ЗаписатьАтрибут("СуммаПРД",xmlString(Стр_1.Сумма)); //Формат(ДатаУПД,"ДФ=""дд.ММ.гггг"""));
		КонецЕсли;
		
		XML_DOM.ЗаписатьКонецЭлемента();
		
		
	Конеццикла;
	
	
	
	
	XML_DOM.ЗаписатьНачалоЭлемента("СвПокуп");
	
	XML_DOM.ЗаписатьНачалоЭлемента("ИдСв");
	Если ЗначениеЗаполнено(Контрагент.КПП) Тогда
		
		XML_DOM.ЗаписатьНачалоЭлемента("СвЮЛУч");
		
		
		Если ЗначениеЗаполнено(Контрагент.НаименованиеПолное) Тогда
			XML_DOM.ЗаписатьАтрибут("НаимОрг", Контрагент.НаименованиеПолное);
		Иначе
			XML_DOM.ЗаписатьАтрибут("НаимОрг", Контрагент.Наименование);
			
		КонецЕсли;
		
		XML_DOM.ЗаписатьАтрибут("ИННЮЛ", Контрагент.ИНН);
		XML_DOM.ЗаписатьАтрибут("КПП", Контрагент.КПП);
		XML_DOM.ЗаписатьКонецЭлемента();
		
	Иначе
		
		XML_DOM.ЗаписатьНачалоЭлемента("СвИП");
		XML_DOM.ЗаписатьАтрибут("ИННФЛ", Контрагент.ИНН);
		
		XML_DOM.ЗаписатьНачалоЭлемента("ФИО");
		
		Если ЗначениеЗаполнено(Контрагент.НаименованиеПолное) Тогда
			ФИО=Контрагент.НаименованиеПолное;
			Если Сред(Контрагент.НаименованиеПолное,1,3)="ИП " Тогда
				ФИО=СокрЛП(Сред(Контрагент.НаименованиеПолное,3));
			КонецЕслИ;
		Иначе
			ФИО=Контрагент.Наименование;
			Если Сред(Контрагент.Наименование,1,3)="ИП " Тогда
				ФИО=СокрЛП(Сред(Контрагент.Наименование,3));
			КонецЕслИ;
		
		КонецЕсли;
		Если Найти(ВРЕГ(ФИО),"ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ")=1 Тогда
			ФИО=СокрЛП(Сред(ФИО,31));
		КонецЕслИ;
		
		Фамилия=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Фамилия", СокрЛП(Фамилия));
		
		ФИО=Сред(ФИО,Найти(ФИО," ")+1);
		Имя=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Имя", Имя);
		
		ФИО=Сред(ФИО,Найти(ФИО," ")+1);
		Отчетство=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Отчество", Отчетство);
		
		
		XML_DOM.ЗаписатьКонецЭлемента();
		XML_DOM.ЗаписатьКонецЭлемента();
		
		
	КонецЕслИ;
	XML_DOM.ЗаписатьКонецЭлемента();
	
	XML_DOM.ЗаписатьНачалоЭлемента("Адрес");
	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", Контрагент);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический);
//	Запрос.УстановитьПараметр("Вид"   , Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	Адрес_ХамелеонЦРПТ.Индекс КАК Поле1,
	               |	Адрес_ХамелеонЦРПТ.КодРегиона КАК Поле2,
	               |	Адрес_ХамелеонЦРПТ.Район КАК Поле3,
	               |	Адрес_ХамелеонЦРПТ.Город КАК Поле4,
	               |	Адрес_ХамелеонЦРПТ.НаселенныйПункт КАК Поле5,
	               |	Адрес_ХамелеонЦРПТ.Улица КАК Поле6,
	               |	Адрес_ХамелеонЦРПТ.Дом КАК Поле7,
	               |	Адрес_ХамелеонЦРПТ.Корпус КАК Поле8,
	               |	Адрес_ХамелеонЦРПТ.Квартира КАК ПОЛе9,
	               |	Адрес_ХамелеонЦРПТ.Литера КАК Поле10
	               |ИЗ
	               |	РегистрСведений.Адрес_ХамелеонЦРПТ КАК Адрес_ХамелеонЦРПТ
	               |ГДЕ
	               |	Адрес_ХамелеонЦРПТ.Объект = &Объект
	               |	И Адрес_ХамелеонЦРПТ.Тип = &Тип";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() 
			ИЛИ Не ЗначениеЗаполнено(РезультатЗапроса.Выгрузить()[0].Поле2) 
		Тогда
		Если ЗначениеЗаполнено(Контрагент.ЮридическийАдрес) 
			Тогда
			XML_DOM.ЗаписатьНачалоЭлемента("АдрИнф");
			XML_DOM.ЗаписатьАтрибут("КодСтр", "643");
			XML_DOM.ЗаписатьАтрибут("АдрТекст", Контрагент.ЮридическийАдрес);
		Иначе
			XML_DOM.ЗаписатьНачалоЭлемента("АдрРФ");
			
		КонецЕсли;
		
		
	Иначе
	XML_DOM.ЗаписатьНачалоЭлемента("АдрРФ");
		
		Адрес=РезультатЗапроса.Выгрузить()[0];
		Если ЗначениеЗаполнено(Адрес.Поле1) тогда
			XML_DOM.ЗаписатьАтрибут("Индекс", Адрес.Поле1);
		КонецЕслИ;
		
				XML_DOM.ЗаписатьАтрибут("КодРегион", xmlString(Адрес.Поле2));
		
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		
		
		
		Если ЗначениеЗаполнено(Адрес.Поле3) тогда
			XML_DOM.ЗаписатьАтрибут("Район", Адрес.Поле3);
		КонецЕслИ;
		Если ЗначениеЗаполнено(Адрес.Поле4) тогда
			XML_DOM.ЗаписатьАтрибут("Город", Адрес.Поле4);
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле5) тогда
			XML_DOM.ЗаписатьАтрибут("НаселПункт", Адрес.Поле5);
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле6) тогда
			XML_DOM.ЗаписатьАтрибут("Улица", Адрес.Поле6);
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле7) тогда
			XML_DOM.ЗаписатьАтрибут("Дом", xmlstring(Адрес.Поле7));
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле8) тогда
			XML_DOM.ЗаписатьАтрибут("Корпус", xmlstring(Адрес.Поле8));
		КонецЕсли;		
		Если ЗначениеЗаполнено(Адрес.Поле9) тогда
			XML_DOM.ЗаписатьАтрибут("Кварт", Сред(xmlstring(Адрес.Поле9),1,20));
		КонецЕсли;		
		
	КонецЕсли;
	
	
	
	XML_DOM.ЗаписатьКонецЭлемента();
	XML_DOM.ЗаписатьКонецЭлемента();
	XML_DOM.ЗаписатьКонецЭлемента();
	
	
	

	
	Если ЗначениеЗаполнено(Ссылк.ИдентификаторГосКонтракта) Тогда
		
		XML_DOM.ЗаписатьНачалоЭлемента("ДопСвФХЖ1");			
		XML_DOM.ЗаписатьАтрибут("ИдГосКон",Ссылк.ИдентификаторГосКонтракта);
		
		Если Ссылк.ОбстоятельстваЗакупокДляГосИМуницНужд тогда
			XML_DOM.ЗаписатьНачалоЭлемента("ИнфПродГосЗакКазн");			
			Если ЗначениеЗаполнено(Ссылк.КодТерриториальныйОрганФедерКазначейства) Тогда
				
				XML_DOM.ЗаписатьАтрибут("КодКазначПрод",Ссылк.КодТерриториальныйОрганФедерКазначейства);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Ссылк.КодЦели) Тогда
				
				XML_DOM.ЗаписатьАтрибут("КодЦелиПрод",Ссылк.КодЦели);
				
			КонецЕсли;
			
			
			Если ЗначениеЗаполнено(Ссылк.КодПоБюджетнойКлассификации) Тогда
				
				XML_DOM.ЗаписатьАтрибут("КодПродБюджКласс",Ссылк.КодПоБюджетнойКлассификации);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Ссылк.НаименованиеТерриториальныйОрганФедерКазначейства) Тогда
				
				XML_DOM.ЗаписатьАтрибут("НаимКазначПрод",Ссылк.НаименованиеТерриториальныйОрганФедерКазначейства);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Ссылк.НомерЛицевогоСчетаПродавца) Тогда
				
				XML_DOM.ЗаписатьАтрибут("ЛицСчетПрод",Ссылк.НомерЛицевогоСчетаПродавца);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Ссылк.НомерГосКонтракта) Тогда
				
				XML_DOM.ЗаписатьАтрибут("НомерГосКонт",Ссылк.НомерГосКонтракта);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Ссылк.ДатаГосКонтракта) Тогда
				
				XML_DOM.ЗаписатьАтрибут("ДатаГосКонт",Формат(Ссылк.ДатаГосКонтракта,"ДФ=""дд.ММ.гггг"""));
				
			КонецЕсли;
			XML_DOM.ЗаписатьКонецЭлемента();
					
		КонецЕсли;
						
			
			Если ЗначениеЗаполнено(Ссылк.ФакторинговаяКомпания) тогда
				
				
				
				
				       Контрагент_A=Ссылк.ФакторинговаяКомпания;
				
					
					
					XML_DOM.ЗаписатьНачалоЭлемента("СвФактор");
					
					XML_DOM.ЗаписатьНачалоЭлемента("ИдСв");
					Если ЗначениеЗаполнено(Контрагент_A.КПП) Тогда
						
						XML_DOM.ЗаписатьНачалоЭлемента("СвЮЛУч");
						
						
						Если ЗначениеЗаполнено(Контрагент_A.НаименованиеПолное) Тогда
							XML_DOM.ЗаписатьАтрибут("НаимОрг", Контрагент_A.НаименованиеПолное);
						Иначе
							XML_DOM.ЗаписатьАтрибут("НаимОрг", Контрагент_A.Наименование);
							
						КонецЕсли;
						
						XML_DOM.ЗаписатьАтрибут("ИННЮЛ", Контрагент_A.ИНН);
						XML_DOM.ЗаписатьАтрибут("КПП", Контрагент_A.КПП);
						XML_DOM.ЗаписатьКонецЭлемента();
						
					Иначе
						
						XML_DOM.ЗаписатьНачалоЭлемента("СвИП");
						XML_DOM.ЗаписатьАтрибут("ИННФЛ", Контрагент_A.ИНН);
						
						XML_DOM.ЗаписатьНачалоЭлемента("ФИО");
						
						Если ЗначениеЗаполнено(Контрагент_A.НаименованиеПолное) Тогда
							ФИО=Контрагент_A.НаименованиеПолное;
							Если Сред(Контрагент_A.НаименованиеПолное,1,3)="ИП " Тогда
								ФИО=СокрЛП(Сред(Контрагент_A.НаименованиеПолное,3));
							КонецЕслИ;
						Иначе
							ФИО=Контрагент_A.Наименование;
							Если Сред(Контрагент_A.Наименование,1,3)="ИП " Тогда
								ФИО=СокрЛП(Сред(Контрагент_A.Наименование,3));
							КонецЕслИ;
						
						КонецЕсли;
		Если Найти(ВРЕГ(ФИО),"ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ")=1 Тогда
			ФИО=СокрЛП(Сред(ФИО,31));
		КонецЕслИ;
						
						Фамилия=Сред(ФИО,1,Найти(ФИО," ")-1);
						
						XML_DOM.ЗаписатьАтрибут("Фамилия", СокрЛП(Фамилия));
						
						ФИО=Сред(ФИО,Найти(ФИО," ")+1);
						Имя=Сред(ФИО,1,Найти(ФИО," ")-1);
						
						XML_DOM.ЗаписатьАтрибут("Имя", Имя);
						
						ФИО=Сред(ФИО,Найти(ФИО," ")+1);
						Отчетство=Сред(ФИО,1,Найти(ФИО," ")-1);
						
						XML_DOM.ЗаписатьАтрибут("Отчество", Отчетство);
						
						
						XML_DOM.ЗаписатьКонецЭлемента();
						XML_DOM.ЗаписатьКонецЭлемента();
						
						
					КонецЕслИ;
					XML_DOM.ЗаписатьКонецЭлемента();
					
					XML_DOM.ЗаписатьНачалоЭлемента("Адрес");
					
					
					Запрос = Новый Запрос;
					
					Запрос.УстановитьПараметр("Объект", Контрагент_A);
					Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический);
				//	Запрос.УстановитьПараметр("Вид"   , Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагент_Aа);
					
					Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					               |	Адрес_ХамелеонЦРПТ.Индекс КАК Поле1,
					               |	Адрес_ХамелеонЦРПТ.КодРегиона КАК Поле2,
					               |	Адрес_ХамелеонЦРПТ.Район КАК Поле3,
					               |	Адрес_ХамелеонЦРПТ.Город КАК Поле4,
					               |	Адрес_ХамелеонЦРПТ.НаселенныйПункт КАК Поле5,
					               |	Адрес_ХамелеонЦРПТ.Улица КАК Поле6,
					               |	Адрес_ХамелеонЦРПТ.Дом КАК Поле7,
					               |	Адрес_ХамелеонЦРПТ.Корпус КАК Поле8,
					               |	Адрес_ХамелеонЦРПТ.Квартира КАК ПОЛе9,
					               |	Адрес_ХамелеонЦРПТ.Литера КАК Поле10
					               |ИЗ
					               |	РегистрСведений.Адрес_ХамелеонЦРПТ КАК Адрес_ХамелеонЦРПТ
					               |ГДЕ
					               |	Адрес_ХамелеонЦРПТ.Объект = &Объект
					               |	И Адрес_ХамелеонЦРПТ.Тип = &Тип";
					
					РезультатЗапроса = Запрос.Выполнить();
					
					Если РезультатЗапроса.Пустой() 
							ИЛИ Не ЗначениеЗаполнено(РезультатЗапроса.Выгрузить()[0].Поле2)
						Тогда
						Если ЗначениеЗаполненО(Контрагент_A.ЮридическийАдрес) 
							Тогда				
							XML_DOM.ЗаписатьНачалоЭлемента("АдрИнф");
							XML_DOM.ЗаписатьАтрибут("КодСтр", "643");
							XML_DOM.ЗаписатьАтрибут("АдрТекст", Контрагент_A.ЮридическийАдрес);
						Иначе
							XML_DOM.ЗаписатьНачалоЭлемента("АдрРФ");
							
						КонецЕсли;
						
					Иначе
								
						XML_DOM.ЗаписатьНачалоЭлемента("АдрРФ");
										
						Адрес=РезультатЗапроса.Выгрузить()[0];
						Если ЗначениеЗаполнено(Адрес.Поле1) тогда
							XML_DOM.ЗаписатьАтрибут("Индекс", Адрес.Поле1);
						КонецЕслИ;
						
								XML_DOM.ЗаписатьАтрибут("КодРегион", xmlString(Адрес.Поле2));
						
						//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
						
						
						
						Если ЗначениеЗаполнено(Адрес.Поле3) тогда
							XML_DOM.ЗаписатьАтрибут("Район", Адрес.Поле3);
						КонецЕслИ;
						Если ЗначениеЗаполнено(Адрес.Поле4) тогда
							XML_DOM.ЗаписатьАтрибут("Город", Адрес.Поле4);
						КонецЕсли;		
						Если ЗначениеЗаполнено(Адрес.Поле5) тогда
							XML_DOM.ЗаписатьАтрибут("НаселПункт", Адрес.Поле5);
						КонецЕсли;		
						Если ЗначениеЗаполнено(Адрес.Поле6) тогда
							XML_DOM.ЗаписатьАтрибут("Улица", Адрес.Поле6);
						КонецЕсли;		
						Если ЗначениеЗаполнено(Адрес.Поле7) тогда
							XML_DOM.ЗаписатьАтрибут("Дом", xmlstring(Адрес.Поле7));
						КонецЕсли;		
						Если ЗначениеЗаполнено(Адрес.Поле8) тогда
							XML_DOM.ЗаписатьАтрибут("Корпус", xmlstring(Адрес.Поле8));
						КонецЕсли;		
						Если ЗначениеЗаполнено(Адрес.Поле9) тогда
							XML_DOM.ЗаписатьАтрибут("Кварт", Сред(xmlstring(Адрес.Поле9),1,20));
						КонецЕсли;		
						
					КонецЕсли;
					
					
					
					XML_DOM.ЗаписатьКонецЭлемента();
					XML_DOM.ЗаписатьКонецЭлемента();
					XML_DOM.ЗаписатьКонецЭлемента();
				
				
				
			КонецЕсли;
			
		Если Ссылк.ОснованиеУступкиДенежногоТребования Тогда
			
			XML_DOM.ЗаписатьНачалоЭлемента("ОснУстДенТреб");			
			Если ЗначениеЗаполнено(Ссылк.ИдентификаторДокумента) Тогда
				
				XML_DOM.ЗаписатьАтрибут("ИдентОсн",Ссылк.ИдентификаторДокумента);
				
			КонецЕсли;
			Если ЗначениеЗаполнено(Ссылк.ДополнительныеСведения) Тогда
				
				XML_DOM.ЗаписатьАтрибут("ДопСвОсн",Ссылк.ДополнительныеСведения);
				
			КонецЕсли;
			Если ЗначениеЗаполнено(Ссылк.ДатаДокумента) Тогда
				
				XML_DOM.ЗаписатьАтрибут("ДатаОсн",Формат(Ссылк.ДатаДокумента,"ДФ=""дд.ММ.гггг"""));
				
			КонецЕсли;
			Если ЗначениеЗаполнено(Ссылк.НомерДокумента) Тогда
				
				XML_DOM.ЗаписатьАтрибут("НомОсн",Ссылк.НомерДокумента);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Ссылк.НаименованиеДокумента) Тогда
				
				XML_DOM.ЗаписатьАтрибут("НаимОсн",Ссылк.НаименованиеДокумента);
				
			КонецЕсли;
			XML_DOM.ЗаписатьКонецЭлемента();

		КонецЕсли;
			

			
		
		
		XML_DOM.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	Для каждого Стр_ДП Из Ссылк.ДокументыПодтверждающиеОтгрузку Цикл
		
		
			XML_DOM.ЗаписатьНачалоЭлемента("ДокПодтвОтгр");			
			Если ЗначениеЗаполнено(Стр_ДП.Дата) Тогда
				
				XML_DOM.ЗаписатьАтрибут("ДатаДокОтгр",Формат(Стр_ДП.Дата,"ДФ=""дд.ММ.гггг"""));
				
			КонецЕсли;
			Если ЗначениеЗаполнено(Стр_ДП.Номер) Тогда
				
				XML_DOM.ЗаписатьАтрибут("НомДокОтгр",Стр_ДП.Номер);
				
			КонецЕсли;
			Если ЗначениеЗаполнено(Стр_ДП.Наименование) Тогда
				
				XML_DOM.ЗаписатьАтрибут("НаимДокОтгр",Стр_ДП.Наименование);
				
			КонецЕсли;
			
			
			XML_DOM.ЗаписатьКонецЭлемента();


		
		
	Конеццикла;
	
	
		
	
	Если Ссылк.ДополнительныеЗначения_ЭДО.Количество()>0 Тогда
		
			XML_DOM.ЗаписатьНачалоЭлемента("ИнфПолФХЖ1");
			
			Если Ссылк.ВидТоварооборота=Перечисления.ВидТоварооборота_ХамелеонЦРПТ.COMMISSION
				ИЛИ Ссылк.ВидТоварооборота=Перечисления.ВидТоварооборота_ХамелеонЦРПТ.AGENT
				ТОгда
				
				
				
				XML_DOM.ЗаписатьНачалоЭлемента("ТекстИнф");			
				XML_DOM.ЗаписатьАтрибут("Идентиф", "ВидОборотаМАРК");
				//Если Ссылк.
				XML_DOM.ЗаписатьАтрибут("Значен", "4");
				XML_DOM.ЗаписатьКонецЭлемента();
				
				
			Конецесли;

			
		Для Каждого Стр_1 Из Ссылк.ДополнительныеЗначения_ЭДО Цикл
			Если ЗначениеЗаполнено(Стр_1.Идентификатор) И ЗначениеЗаполнено(Стр_1.Значение) тогда
				
				XML_DOM.ЗаписатьНачалоЭлемента("ТекстИнф");			
				XML_DOM.ЗаписатьАтрибут("Идентиф", Стр_1.Идентификатор);
				XML_DOM.ЗаписатьАтрибут("Значен", Стр_1.Значение);
				XML_DOM.ЗаписатьКонецЭлемента();
				
				
			КонецЕсли;
			
		Конеццикла;
		
		Если ЗначениеЗаполнено(Ссылк.НомерЗаказа) Тогда
				XML_DOM.ЗаписатьНачалоЭлемента("ТекстИнф");			
				XML_DOM.ЗаписатьАтрибут("Идентиф", "Номер_заявки");
				XML_DOM.ЗаписатьАтрибут("Значен", Ссылк.НомерЗаказа);
				XML_DOM.ЗаписатьКонецЭлемента();
				
			
			
		КонецЕсли;
		
		
				XML_DOM.ЗаписатьКонецЭлемента();
		
		
	Иначе
		
		XML_DOM.ЗаписатьНачалоЭлемента("ИнфПолФХЖ1");
		
			Если Ссылк.ВидТоварооборота=Перечисления.ВидТоварооборота_ХамелеонЦРПТ.COMMISSION
				ИЛИ Ссылк.ВидТоварооборота=Перечисления.ВидТоварооборота_ХамелеонЦРПТ.AGENT
				ТОгда
				
				
				
				XML_DOM.ЗаписатьНачалоЭлемента("ТекстИнф");			
				XML_DOM.ЗаписатьАтрибут("Идентиф", "ВидОборотаМАРК");
				//Если Ссылк.
				XML_DOM.ЗаписатьАтрибут("Значен", "4");
				XML_DOM.ЗаписатьКонецЭлемента();
				
				
			Конецесли;
		
		
		XML_DOM.ЗаписатьНачалоЭлемента("ТекстИнф");			
		XML_DOM.ЗаписатьАтрибут("Идентиф", "ИдВизуализации");
		XML_DOM.ЗаписатьАтрибут("Значен", "1С");
		XML_DOM.ЗаписатьКонецЭлемента();
	
			XML_DOM.ЗаписатьНачалоЭлемента("ТекстИнф");			
			XML_DOM.ЗаписатьАтрибут("Идентиф", "ОснованиеДата");
			XML_DOM.ЗаписатьАтрибут("Значен", Формат(ДатаУПД,"ДФ=""дд.ММ.гггг"""));
			XML_DOM.ЗаписатьКонецЭлемента();
			
			XML_DOM.ЗаписатьНачалоЭлемента("ТекстИнф");			
			XML_DOM.ЗаписатьАтрибут("Идентиф", "ОснованиеНомер");
			XML_DOM.ЗаписатьАтрибут("Значен",НомерУПД);
			XML_DOM.ЗаписатьКонецЭлемента();
			
			XML_DOM.ЗаписатьНачалоЭлемента("ТекстИнф");			
			XML_DOM.ЗаписатьАтрибут("Идентиф", "НаимПокуп");
			Если ЗначениеЗаполнено(Контрагент.НаименованиеПолное) Тогда
				XML_DOM.ЗаписатьАтрибут("Значен",Контрагент.НаименованиеПолное);
			Иначе
				XML_DOM.ЗаписатьАтрибут("Значен",Контрагент.Наименование);
				
			КонецЕсли;
			XML_DOM.ЗаписатьКонецЭлемента();
			
			
			XML_DOM.ЗаписатьНачалоЭлемента("ТекстИнф");			
			XML_DOM.ЗаписатьАтрибут("Идентиф", "НаимГрузПолуч");
			Если ЗначениеЗаполнено(Контрагент.НаименованиеПолное) Тогда
				XML_DOM.ЗаписатьАтрибут("Значен",Контрагент.НаименованиеПолное);
			Иначе
				XML_DOM.ЗаписатьАтрибут("Значен",Контрагент.Наименование);
				
			КонецЕсли;
			XML_DOM.ЗаписатьКонецЭлемента();
			
			
			XML_DOM.ЗаписатьНачалоЭлемента("ТекстИнф");			
			XML_DOM.ЗаписатьАтрибут("Идентиф", "ОтгрузкаДата");
			XML_DOM.ЗаписатьАтрибут("Значен", Формат(ДатаУПД,"ДФ=""дд.ММ.гггг"""));
			XML_DOM.ЗаписатьКонецЭлемента();
	//XML_DOM.ЗаписатьНачалоЭлемента("ТекстИнф");			
	//XML_DOM.ЗаписатьАтрибут("Идентиф", "СтавкаНДС");
	//XML_DOM.ЗаписатьАтрибут("Значен", "20");
	//XML_DOM.ЗаписатьКонецЭлемента();


			Если ЗначениеЗаполнено(Ссылк.НомерЗаказа) Тогда
				XML_DOM.ЗаписатьНачалоЭлемента("ТекстИнф");			
				XML_DOM.ЗаписатьАтрибут("Идентиф", "Номер_заявки");
				XML_DOM.ЗаписатьАтрибут("Значен", Ссылк.НомерЗаказа);
				XML_DOM.ЗаписатьКонецЭлемента();
			КонецЕсли;
				
	
	
	
			XML_DOM.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
		
	
	
	XML_DOM.ЗаписатьКонецЭлемента();
	
	
	
	СуммаИтог=0;
	СуммаНДС=0;
	СуммаАкциза=0;
	
	
	
	
	XML_DOM.ЗаписатьНачалоЭлемента("ТаблСчФакт");			
	
	НомСтр=0;
	
	ОшибкаПоКм=Ложь;
	Для Каждого Стр_1 Из Ссылк.Товары Цикл
		ТаблицаПродукций=Новый ТаблицаЗначений;
		ТаблицаПродукций.Колонки.Добавить("Номенклатура");
		ТаблицаПродукций.Колонки.Добавить("Количество");
		ТаблицаПродукций.Колонки.Добавить("КоличествоВУпаковке");
		ТаблицаПродукций.Колонки.Добавить("НомерКороба");
		ТаблицаПродукций.Колонки.Добавить("cis");
		ТаблицаПродукций.Очистить();
		
		НСТР=Ссылк.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
		
		
				МассивКМ=Новый СписокЗначений;
МассивКМ.Очистить();
cisГТИН="";
		Для Каждого Стр_М Из НСТР Цикл
			
			МаркаКМ=Стр_М.cis;
			Если Стр_М.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука  Тогда
				  cisГТИН=МаркаКМ
				
				
			КонецЕсли;
					Если МассивКМ.НайтиПоЗначению(МаркаКМ)=Неопределено Тогда
						МассивКМ.Добавить(МаркаКМ);
						//Нстрок=Объект.ТоварыКМ.НайтИСтроки(Новый Структура("НомерКороба",Стр_2.СерийныйНомер));
						//Для Каждого Стр_КМ из Нстрок Цикл
						//	Если МассивКМ.НайтиПоЗначению(Стр_КМ.cis)=Неопределено Тогда
						//		МассивКМ.Добавить(Стр_КМ.cis);
						//		
						//	КонецЕсли;
							
						//Конеццикла;
						
					КонецЕсли;
				//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ИсторияПоCIS_ХамелеонЦРПТ.НомерКороба КАК НомерКороба,
					|	ИсторияПоCIS_ХамелеонЦРПТ.cis КАК cis
					|ИЗ
					|	РегистрСведений.ИсторияПоCIS_ХамелеонЦРПТ КАК ИсторияПоCIS_ХамелеонЦРПТ
					|ГДЕ
					|	ИсторияПоCIS_ХамелеонЦРПТ.Документ = &Документ
					|	И ИсторияПоCIS_ХамелеонЦРПТ.cis = &cis
					|ИТОГИ ПО
					|	cis,
					|	НомерКороба";
				
				Запрос.УстановитьПараметр("Документ", Ссылк);
				Запрос.УстановитьПараметр("cis", МаркаКМ);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Выборкаcis = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Если Стр_М.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка И Выборкаcis.Количество()=0 Тогда
					
					
					Сообщить("Для короба "+Строка(МаркаКМ)+" продукции "+Строка(Стр_1.GTIN.Наименование)+" не удалось получить информацию о КМ, входящих в короб");
					
				КонецЕсли;	
				
				Пока Выборкаcis.Следующий() Цикл
					// Вставить обработку выборки Выборкаcis
				
					ВыборкаНомерКороба = Выборкаcis.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
					Пока ВыборкаНомерКороба.Следующий() Цикл
						// Вставить обработку выборки ВыборкаНомерКороба
						Если Сред(ВыборкаНомерКороба.НомерКороба,1,2)="01" Тогда
							Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Сред(ВыборкаНомерКороба.НомерКороба,3,14)));
						ИначеЕсли сред(ВыборкаНомерКороба.НомерКороба,1,4)="(01)" Тогда
							Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Сред(ВыборкаНомерКороба.НомерКороба,5,14)));
						Иначе
							Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Сред(ВыборкаНомерКороба.НомерКороба,1,14)));
							
						КонецЕсли;
						Если МаркаКМ<>ВыборкаНомерКороба.НомерКороба Тогда
						
						Добав=ТаблицаПродукций.Добавить();
						Добав.Номенклатура=Продукция;
						Добав.Количество=1;
						Добав.КоличествоВУпаковке=ВыборкаНомерКороба.Количество();
						Добав.НомерКороба=МаркаКМ;
						Добав.cis=ВыборкаНомерКороба.НомерКороба;
			Если Стр_М.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука  Тогда
				  cisГТИН=Добав.cis
				
				
			КонецЕсли;
						
						
					Если МассивКМ.НайтиПоЗначению(Добав.cis)=Неопределено Тогда
						МассивКМ.Добавить(Добав.cis);
						//Нстрок=Объект.ТоварыКМ.НайтИСтроки(Новый Структура("НомерКороба",Стр_2.СерийныйНомер));
						//Для Каждого Стр_КМ из Нстрок Цикл
						//	Если МассивКМ.НайтиПоЗначению(Стр_КМ.cis)=Неопределено Тогда
						//		МассивКМ.Добавить(Стр_КМ.cis);
						//		
						//	КонецЕсли;
							
						//Конеццикла;
						
					КонецЕсли;
						   Конецесли;
						
					КонецЦикла;
				КонецЦикла;
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

			
			
			
		Конеццикла;
		ТаблицаПродукций.Свернуть("НомерКороба,cis");
		
		

		
		
		
		
		
	//			Цена=Стр_1.Цена;
	//			
	////		КонецЕсли;
	//		
	//		Если ЗначениеЗаполнено(Цена) тогда
	//			Чтение.ЗаписатьТекст(xmlString(Цена));
	//		Иначе
	//			Если Стр_1.КоличествоКМ<>0 Тогда
	//				Чтение.ЗаписатьТекст(xmlString(Окр(Стр_1.Сумма/Стр_1.КоличествоКМ,2)));
	//			КонецЕсли;
	//		КонецЕсли;
	//		Чтение.ЗаписатьКонецЭлемента();
	//		
	//		Если ЗначениеЗАполнено(Стр_1.НДС) ТОгда
	//			
	//			Чтение.ЗаписатьНачалоЭлемента("vat_value");
	//			
	//			Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) Тогда
	//				КоличествоКМ=Стр_1.КоличествоНомеровКМ;
	//			Иначе
	//				КоличествоКМ=Стр_1.КоличествоКМ;
	//				
	//			КонецЕслИ;
	//			
	//			Чтение.ЗаписатьТекст(xmlString(Стр_1.НДС/КоличествоКМ));
	//			Чтение.ЗаписатьКонецЭлемента();
	//			
	//		КонецЕсли;
		
		
		//Иначе
		НомСтр=НомСтр+1;
		КоличествоКМ=0;
		НСТР=Ссылк.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
		Если НСтр.Количество()>0
			И БратьКоличествоИзТабличойЧасти=Ложь Тогда
			Для Каждого Стр_2 Из НСТР ЦИкл
				
				
				НСтрокиТ=ТаблицаПродукций.НайтиСтроки(Новый Структура("НомерКороба",Стр_2.cis));
				
				Если НСтрокиТ.Количество()>0 Тогда
					КоличествоКМ=КоличествоКМ+НСтрокиТ.Количество();
				Иначе
					КоличествоКМ=КоличествоКМ+1;
				КонецЕсли;
				
			Конеццикла;
		Иначе
			Если ЗначениеЗаполнено(Стр_1.КоличествоНомеровКМ) ТОгда
				КоличествоКМ=Стр_1.КоличествоНомеровКМ;
			Иначе
				КоличествоКМ=Стр_1.КоличествоКМ;
			Конецесли;
		КонецЕсли;
		
		XML_DOM.ЗаписатьНачалоЭлемента("СведТов");			
		XML_DOM.ЗаписатьАтрибут("НомСтр", xmlString(НомСтр));
		Если ЗначениеЗаполненО(Стр_1.НаименованиеВУПД) тогда
			XML_DOM.ЗаписатьАтрибут("НаимТов", Строка(Стр_1.НаименованиеВУПД));
		Иначе
			XML_DOM.ЗаписатьАтрибут("НаимТов", Стр_1.GTIN.Наименование);
		КонецЕсли;
		XML_DOM.ЗаписатьАтрибут("ОКЕИ_Тов", СокрЛП(Стр_1.ЕдиницаИзмерения.Код));
		XML_DOM.ЗаписатьАтрибут("КолТов", xmlString(КоличествоКМ));
		СуммаПоСтроке=Стр_1.Сумма;
		
		Если Не ЗначениеЗаполнено(СуммаПоСтроке) Тогда
			СуммаПоСтроке=Стр_1.Цена*Стр_1.КоличествоКМ;
		КонецЕсли;
		
		Если КоличествоКМ=0 Тогда
			Цена=СуммаПоСтроке-Стр_1.НДС
		Иначе
			Цена=Окр((СуммаПоСтроке-Стр_1.НДС)/КоличествоКМ,2);
		КонецЕсли;
		XML_DOM.ЗаписатьАтрибут("ЦенаТов", xmlString(Цена));
		XML_DOM.ЗаписатьАтрибут("СтТовБезНДС", xmlString(СуммаПоСтроке-Стр_1.НДС));
		
		
		СтавкаНДС_1="без НДС";
		Если Стр_1.НДС<>0 Тогда
			Если СуммаПоСтроке-Стр_1.НДС<>0 Тогда
				СтавкаНДС=Стр_1.НДС*100/(СуммаПоСтроке-Стр_1.НДС);
				Если СтавкаНДС<5 Тогда
					СтавкаНДС_1="без НДС";
				ИначеЕсли СтавкаНДС<17 Тогда
					СтавкаНДС_1="10%"
				Иначе
					СтавкаНДС_1="20%"
					
				КонецЕслИ;
			КонецЕсли;
		КонецЕсли;
		
		XML_DOM.ЗаписатьАтрибут("НалСт", СтавкаНДС_1);
		XML_DOM.ЗаписатьАтрибут("СтТовУчНал", xmlString(СуммаПоСтроке));
		СуммаИтог=СуммаИтог+СуммаПоСтроке;
		СуммаНДС=СуммаНДС+Стр_1.НДС;
		
		
		XML_DOM.ЗаписатьНачалоЭлемента("Акциз");			
		Если ЗначениеЗаполнено(Стр_1.СуммаАкциза) Тогда
			
			XML_DOM.ЗаписатьНачалоЭлемента("СумАкциз");			
			XML_DOM.ЗаписатьТекст(xmlString(Стр_1.СуммаАкциза));
			XML_DOM.ЗаписатьКонецЭлемента();
			
			
		Иначе
		
			XML_DOM.ЗаписатьНачалоЭлемента("БезАкциз");			
			XML_DOM.ЗаписатьТекст("без акциза");
			XML_DOM.ЗаписатьКонецЭлемента();
		КонецЕсли;
		XML_DOM.ЗаписатьКонецЭлемента();
		
		XML_DOM.ЗаписатьНачалоЭлемента("СумНал");			
		XML_DOM.ЗаписатьНачалоЭлемента("СумНал");			
		XML_DOM.ЗаписатьТекст(xmlString(Стр_1.НДС));
		XML_DOM.ЗаписатьКонецЭлемента();
		XML_DOM.ЗаписатьКонецЭлемента();
		
		
		Если ЗначениеЗаполнено(Стр_1.НомерГТД) Тогда
			
			Если Стр_1.НомерГТД.НомераГТДНесколько.Количество()>0 Тогда
				
				Для Каждого СТр_2 ИЗ Стр_1.НомерГТД.НомераГТДНесколько Цикл
					
					КодСтраны=Стр_2.КодСтраны;
					НомерГТД=СОкрЛП(Стр_2.НомерГТД);
					Если Не ЗначениеЗаполнено(КодСтраны) И Не ЗначениеЗАполнено(НомерГТД) Тогда
						Продолжить;
					КонецЕсли;
						XML_DOM.ЗаписатьНачалоЭлемента("СвТД");

							Если ЗначениеЗаполненО(КодСтраны) Тогда
								XML_DOM.ЗаписатьАтрибут("КодПроисх", xmlString(КодСтраны));
							Иначе
								XML_DOM.ЗаписатьАтрибут("КодПроисх", xmlString("643"));
								
							КонецЕсли;
										
										
							Если ЗначениеЗАполнено(НомерГТД) Тогда
								XML_DOM.ЗаписатьАтрибут("НомерТД", xmlString(НомерГТД));
								
								
										//			Чтен.ЗаписатьИмяСвойства("number");
										//			Чтен.ЗаписатьЗначение(НомерГТД);
													
												КонецЕсли;
										XML_DOM.ЗаписатьКонецЭлемента();
					
				Конеццикла;
			Иначе
					КодСтраны=Стр_1.НомерГТД.наименование;
					НомерГТД=СокрЛП(Стр_1.НомерГТД.Код);
					Если ЗначениеЗаполнено(КодСтраны) ИЛИ ЗначениеЗАполнено(НомерГТД) Тогда
						XML_DOM.ЗаписатьНачалоЭлемента("СвТД");

							Если ЗначениеЗаполненО(КодСтраны) Тогда
								XML_DOM.ЗаписатьАтрибут("КодПроисх", xmlString(КодСтраны));
							Иначе
								XML_DOM.ЗаписатьАтрибут("КодПроисх", xmlString("643"));
								
							КонецЕсли;
										
										
							Если ЗначениеЗАполнено(НомерГТД) Тогда
								XML_DOM.ЗаписатьАтрибут("НомерТД", xmlString(НомерГТД));
								           
								
										//			Чтен.ЗаписатьИмяСвойства("number");
										//			Чтен.ЗаписатьЗначение(НомерГТД);
													
												КонецЕсли;
										XML_DOM.ЗаписатьКонецЭлемента();
				
				       КонецЕсли;
				
			КонецЕсли;
				
			
			
		Иначе
			
			
			Если Стр_1.GTIN.Остатки=Истина Тогда
				КодСтраны="";
			Иначе
									КодСтраны=СокрЛП(Стр_1.GTIN.СтранаПроизводства.Код);
								КонецЕсли;

							Если ЗначениеЗАполнено(КодСтраны)
										И КодСтраны<>"643"
										И КодСтраны<>"112"
										И КодСтраны<>"398"
										И КодСтраны<>"051"
										Тогда
								НомерГТД="";
								Если МассивКМ.Количество()>0 Тогда
										//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
									// Данный фрагмент построен конструктором.
									// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
									
									Запрос = Новый Запрос;
									Запрос.Текст = 
										"ВЫБРАТЬ
										|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.Ссылка,
										|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.Ссылка.НомерДекларацииТовара   КАК НомерДекларацииТовара
										|ИЗ
										|	Документ.ВводВОборот_ХамелеонЦРПТ.СерийныеНомера КАК ВводВОборот_ХамелеонЦРПТСерийныеНомера
										|ГДЕ
										|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.cis В (&СерийныйНомер)
										|
										|УПОРЯДОЧИТЬ ПО
										|	ВводВОборот_ХамелеонЦРПТСерийныеНомера.Ссылка.Дата УБЫВ";
									
									Запрос.УстановитьПараметр("СерийныйНомер",МассивКМ);
									РезультатЗапроса = Запрос.Выполнить();
									
									ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
									
									Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
										// Вставить обработку выборки ВыборкаДетальныеЗаписи
										Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НомерДекларацииТовара) Тогда
											
												НомерГТД=СокрЛП(ВыборкаДетальныеЗаписи.НомерДекларацииТовара);
											Прервать;
											
										КонецЕсли;
									КонецЦикла;
									
									//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

										//		КонецЕсли;
												
												
									КонецЕсли;
								Если ЗначениеЗаполнено(НомерГТД) Тогда
										//	Чтен.ЗаписатьКонецОбъекта();;
											XML_DOM.ЗаписатьНачалоЭлемента("СвТД");

											Если ЗначениеЗаполненО(КодСтраны) Тогда
												XML_DOM.ЗаписатьАтрибут("КодПроисх", xmlString(КодСтраны));
											Иначе
												XML_DOM.ЗаписатьАтрибут("КодПроисх", xmlString("643"));
												
											КонецЕсли;
														
														
											Если ЗначениеЗАполнено(НомерГТД) Тогда
												XML_DOM.ЗаписатьАтрибут("НомерТД", xmlString(НомерГТД));
												
												
														//			Чтен.ЗаписатьИмяСвойства("number");
														//			Чтен.ЗаписатьЗначение(НомерГТД);
																	
																КонецЕсли;
														XML_DOM.ЗаписатьКонецЭлемента();
								Иначе
									
										//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
										// Данный фрагмент построен конструктором.
										// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
										
										Запрос = Новый Запрос;
										Запрос.Текст = 
											"ВЫБРАТЬ РАЗЛИЧНЫЕ
											|	Приемка_ХамелеонЦРПТТовары.НомерГТД
											|ИЗ
											|	Документ.Приемка_ХамелеонЦРПТ.Товары КАК Приемка_ХамелеонЦРПТТовары
											|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Приемка_ХамелеонЦРПТ.СерийныеНомера КАК Приемка_ХамелеонЦРПТСерийныеНомера
											|		ПО Приемка_ХамелеонЦРПТТовары.НомерСтрокиСвязи = Приемка_ХамелеонЦРПТСерийныеНомера.НомерСтрокиСвязи
											|			И (Приемка_ХамелеонЦРПТСерийныеНомера.cis В (&МассивКМ))
											|			И Приемка_ХамелеонЦРПТТовары.Ссылка = Приемка_ХамелеонЦРПТСерийныеНомера.Ссылка
											|
											|ОБЪЕДИНИТЬ ВСЕ
											|
											|ВЫБРАТЬ
											|	Приемка_ХамелеонЦРПТТовары.НомерГТД
											|ИЗ
											|	Документ.Приемка_ХамелеонЦРПТ.Товары КАК Приемка_ХамелеонЦРПТТовары
											|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Приемка_ХамелеонЦРПТ.СерийныеНомера КАК Приемка_ХамелеонЦРПТСерийныеНомера
											|		ПО Приемка_ХамелеонЦРПТТовары.НомерСтрокиСвязи = Приемка_ХамелеонЦРПТСерийныеНомера.НомерСтрокиСвязи
											|			И (Приемка_ХамелеонЦРПТСерийныеНомера.cis В
											|				(ВЫБРАТЬ
											|					НН.НомерКороба
											|				ИЗ
											|					Документ.Приемка_ХамелеонЦРПТ.Короба КАК НН
											|				ГДЕ
											|					НН.ШтрихКод В (&МассивКМ)))
											|			И Приемка_ХамелеонЦРПТТовары.Ссылка = Приемка_ХамелеонЦРПТСерийныеНомера.Ссылка";
										
										Запрос.УстановитьПараметр("МассивКМ", МассивКМ);
										
										РезультатЗапроса = Запрос.Выполнить();
										
										ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
										НашлиНомерГТД=ложь;
								
										Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
											// Вставить обработку выборки ВыборкаДетальныеЗаписи
											
											НомерГТД=ВыборкаДетальныеЗаписи.НомерГТД;
											Если ЗначениеЗаполнено(НомерГТД) Тогда
												Если НомерГТД.НомераГТДНесколько.Количество()>=1 Тогда
													Для Каждого Стр_НГТД Из НомерГТД.НомераГТДНесколько Цикл
														Если Не ЗначениеЗаполнено(Стр_НГТД.НомерГТД) И Не Значениезаполнено(Стр_НГТД.КодСтраны) Тогда
															Продолжить;
														КонецЕсли;
														
														НашлиНомерГТД=Истина;
														КодСтраны=Стр_НГТД.КодСтраны;
														НомерГТД=СокрЛП(Стр_НГТД.НомерГТД);
														XML_DOM.ЗаписатьНачалоЭлемента("СвТД");

														Если ЗначениеЗаполненО(КодСтраны) Тогда
															XML_DOM.ЗаписатьАтрибут("КодПроисх", xmlString(КодСтраны));
														Иначе
															XML_DOM.ЗаписатьАтрибут("КодПроисх", xmlString("643"));
															
														КонецЕсли;
																	
																	
														Если ЗначениеЗАполнено(НомерГТД) Тогда
															XML_DOM.ЗаписатьАтрибут("НомерТД", xmlString(НомерГТД));
														КонецЕсли;
														XML_DOM.ЗаписатьКонецЭлемента();
													Конеццикла;
												Иначе
													
													НашлиНомерГТД=Истина;
														КодСтраны=НомерГТД.Наименование;
													НомерГТД=СокрЛП(НомерГТД.Код);
														XML_DOM.ЗаписатьНачалоЭлемента("СвТД");

														Если ЗначениеЗаполненО(КодСтраны) Тогда
															XML_DOM.ЗаписатьАтрибут("КодПроисх", xmlString(КодСтраны));
														Иначе
															XML_DOM.ЗаписатьАтрибут("КодПроисх", xmlString("643"));
															
														КонецЕсли;
																	
																	
														Если ЗначениеЗАполнено(НомерГТД) Тогда
															XML_DOM.ЗаписатьАтрибут("НомерТД", xmlString(НомерГТД));
														КонецЕсли;
														XML_DOM.ЗаписатьКонецЭлемента();
													
												КонецЕсли;
												
																									
												
											КонецЕсли;
										КонецЦикла;
										
										//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
										Если Не НашлиНомерГТД Тогда
											XML_DOM.ЗаписатьНачалоЭлемента("СвТД");

											Если ЗначениеЗаполненО(КодСтраны) Тогда
												XML_DOM.ЗаписатьАтрибут("КодПроисх", xmlString(КодСтраны));
											Иначе
												XML_DOM.ЗаписатьАтрибут("КодПроисх", xmlString("643"));
												
											КонецЕсли;
											XML_DOM.ЗаписатьКонецЭлемента();											

										КонецЕсли;
									
								КонецЕсли;
										
										
					КонецЕсли;							
		 КонецЕсли;
		
		XML_DOM.ЗаписатьНачалоЭлемента("ДопСведТов");
		XML_DOM.ЗаписатьАтрибут("ПрТовРаб", "1");
		XML_DOM.ЗаписатьАтрибут("НаимЕдИзм", Стр_1.ЕдиницаИзмерения.Наименование);
		Если Значениезаполнено(КодСтраны) Тогда
			XML_DOM.ЗаписатьАтрибут("КрНаимСтрПр", Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду(КодСтраны).Наименование);
		КонецЕсли;
		
		КодТовара="";
		Если ЗначениеЗАполнено(Стр_1.ВспомогательноеПоле) Тогда
			КодТовара=xmlString(Стр_1.ВспомогательноеПоле);
			
		ИначеЕсли КодТовараВУПД=1 Тогда
			КодТовара=xmlString(Стр_1.GTIN.МодельПроизводителяАртикул);
		ИначеЕсли КодТовараВУПД=2 Тогда
			КодТовара=xmlString(Стр_1.GTIN.КодВУчетнойСистеме);
		ИначеЕсли КодТовараВУПД=3 Тогда
			КодТовара=xmlString(Стр_1.GTIN.Код);
			
		Иначе
			
			КодТовара=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(Стр_1.GTIN.GTIN),14,"0");
			Если КодТовара="00000000000000" Тогда
				
				Если ЗначениеЗаполнено(cisГТИН) Тогда
					КодТовара=Сред(cisГТИН,3,14);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕслИ;
		  
			ШтрихКодИтд=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(Стр_1.GTIN.GTIN),14,"0");
			Если ШтрихКодИтд="00000000000000" Тогда
				
				Если ЗначениеЗаполнено(cisГТИН) Тогда
					ШтрихКодИтд=Сред(cisГТИН,3,14);
				КонецЕсли;
				
			КонецЕсли;
		Если не ЗначениеЗаполненО(КодТовара) Тогда
			КодТовара="-";
		КонецЕсли;
		XML_DOM.ЗаписатьАтрибут("КодТов", КодТовара);
		
		
		Если 	СтрДлина(СокрЛП(Стр_1.КодТНВЭД.Код))=10 Тогда
			XML_DOM.ЗаписатьАтрибут("КодВидТов",СокрЛП(Стр_1.КодТНВЭД.Код));
		ИначеЕсли СтрДлина(СокрЛП(Стр_1.GTIN.КодТНВЭД.Код))=10 Тогда
			XML_DOM.ЗаписатьАтрибут("КодВидТов",СокрЛП(Стр_1.GTIN.КодТНВЭД.Код));
		КонецЕсли;
		
		Если НеДобавлятьКМПриФормированииXML<>Истина Тогда
			НСТР=Ссылк.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи));
			
			КИЗИдет=Ложь;
			Упаковкиидут=ложь;
			Если НСтр.Количество()>0 Тогда
				XML_DOM.ЗаписатьНачалоЭлемента("НомСредИдентТов");
				Для Каждого Стр_2 Из НСТР ЦИкл
					
					
					
					
					
				Если Ссылк.ОтправлятьКМВместоАгрегаций Тогда
						Если Стр_2.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка Тогда
						
								НСтрокиТ=ТаблицаПродукций.НайтиСтроки(Новый Структура("НомерКороба",Стр_2.cis));
								Если НСтрокиТ.Количество()>0 Тогда
									Для Каждого Стр_ТТТ Из НСтрокиТ Цикл
										ЗаписатьКМВФайл(XML_DOM,Стр_ТТТ.cis,Ссылк,Упаковкиидут,КИЗИдет,Стр_1,Стр_2.НомерСтроки,ОбрезатьКМДляТабака,,ТаблицаПродукций,Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука
										,Стр_1.ЕдиницаИзмерения.ТипУпаковкиВXML);

										
									//	
									//	надоЗакрытьИОткры
									//	Если Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Обувь" Тогда
									//		Если СтрДлина(Стр_ТТТ.cis)>20  Тогда
									//			
									//		Иначе
									//			XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
									//		КонецЕсли;
									//	ИначеЕсли Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак"
									//		ИЛИ Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак"
									//		Тогда
									//		
									//		Если Сред(Стр_ТТТ.cis,1,2)<>"01" Тогда
									//			XML_DOM.ЗаписатьНачалоЭлемента("КИЗ");
									//		Иначе
									//			XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
									//		КонецЕсли;
									//	Иначе		
									//		XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
									//	КонецЕсли;
									//	
									//	
									//	
									//	Если Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Обувь" Тогда
									//		Если СтрДлина(Стр_ТТТ.cis)>20  Тогда
									//			XML_DOM.ЗаписатьНачалоЭлемента("КИЗ");
									//		Иначе
									//			XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
									//		КонецЕсли;
									//	ИначеЕсли Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Табак"
									//		ИЛИ Ссылк.ТекущийПользователь.СайтыВходаВСистему.Наименование="Альтернативный табак"
									//		Тогда
									//		
									//		Если Сред(Стр_ТТТ.cis,1,2)<>"01" Тогда
									//			XML_DOM.ЗаписатьНачалоЭлемента("КИЗ");
									//		Иначе
									//			XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
									//		КонецЕсли;
									//	Иначе		
									//		XML_DOM.ЗаписатьНачалоЭлемента("НомУпак");
									//	КонецЕсли;
									//	//XML_DOM.ЗаписатьАтрибут("Идентиф", "cis");
									// 			
									//	
									//	Значен=Стр_ТТТ.cis;
									//	Если Не ЗначениеЗаполнено(Значен) тогда
									//		Сообщить("В строке № "+xmlString(Стр_ТТТ.НомерСтроки)+") табличной части серийные номера не заполнен cis ("+Символы.ПС+"
									//		|товар "+Строка(Стр_1.GTIN)+", ГТИН "+Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(Стр_1.GTIN.GTIN,14,"0"));
									//		ОшибкаПоКм=Истина;
									//	КонецЕсли;
									//	XML_DOM.ЗаписатьТекст(xmlString(Значен));
									//	//XML_DOM.ЗаписатьАтрибут("Значен", Значен);
									//	XML_DOM.ЗаписатьКонецЭлемента();
									//	  
								Конеццикла;
							Иначе
								ЗаписатьКМВФайл(XML_DOM,Стр_2.cis,Ссылк,Упаковкиидут,КИЗИдет,Стр_1,Стр_2.НомерСтроки,ОбрезатьКМДляТабака,,ТаблицаПродукций,Стр_2.ТипУпаковки,Стр_1.ЕдиницаИзмерения.ТипУпаковкиВXML);
							КонецЕсли;
						Иначе
								
							ЗаписатьКМВФайл(XML_DOM,Стр_2.cis,Ссылк,Упаковкиидут,КИЗИдет,Стр_1,Стр_2.НомерСтроки,ОбрезатьКМДляТабака,,ТаблицаПродукций,Стр_2.ТипУпаковки,Стр_1.ЕдиницаИзмерения.ТипУпаковкиВXML);
									
						КонецЕсли;		
					
					Иначе
						
						
					
						ЗаписатьКМВФайл(XML_DOM,Стр_2.cis,Ссылк,Упаковкиидут,КИЗИдет,Стр_1,Стр_2.НомерСтроки,ОбрезатьКМДляТабака,ПриФормированииXMLДобавлятьКМПоКоробам,ТаблицаПродукций,Стр_2.ТипУпаковки,Стр_1.ЕдиницаИзмерения.ТипУпаковкиВXML);
							
					КонецЕсли;
				Конеццикла;
					XML_DOM.ЗаписатьКонецЭлемента();
				
			КонецЕсли;
		КонецЕсли;

		
		XML_DOM.ЗаписатьКонецЭлемента();
		
		
		
		НСтрДопПоСтроке=Ссылк.ДопИнформацияПоСтрокеЭДО.НайтиСтроки(Новый Структура(
		"НомерСтрокиСвязи",Стр_1.НомерСтрокиСвязи)
		);
		
		
		Если НСтрДопПоСтроке.Количество()>0 Тогда
			Для Каждого Стр_11 Из НСтрДопПоСтроке Цикл
				Если ЗначениеЗАполнено(Стр_11.ИмяПараметра) И ЗначениеЗаполнено(Стр_11.ЗначениеПараметра) Тогда
					XML_DOM.ЗаписатьНачалоЭлемента("ИнфПолФХЖ2");		
					XML_DOM.ЗаписатьАтрибут("Идентиф", Стр_11.ИмяПараметра);
					XML_DOM.ЗаписатьАтрибут("Значен", Стр_11.ЗначениеПараметра);
					XML_DOM.ЗаписатьКонецЭлемента();
				КонецЕсли;
			Конеццикла;
			
		Иначе
			Если ЗначениеЗАполнено(ШтрихКодИтд) И ШтрихКодИтд<>"00000000000000" Тогда
				XML_DOM.ЗаписатьНачалоЭлемента("ИнфПолФХЖ2");		
				XML_DOM.ЗаписатьАтрибут("Идентиф", "ШК");
				XML_DOM.ЗаписатьАтрибут("Значен", ШтрихКодИтд);
				XML_DOM.ЗаписатьКонецЭлемента();
			КонецЕсли;
			Если ЗначениеЗаполненО(КодТовара) тогда
				XML_DOM.ЗаписатьНачалоЭлемента("ИнфПолФХЖ2");		
				XML_DOM.ЗаписатьАтрибут("Идентиф", "Код");
				XML_DOM.ЗаписатьАтрибут("Значен", КодТовара);
				XML_DOM.ЗаписатьКонецЭлемента();    
			КонецЕсли;
			Попытка
				
				ЧислоШтриха=Число(ШтрихКодИтд);
				Если ЗначениеЗАполнено(ШтрихКодИтд) И ШтрихКодИтд<>"00000000000000" Тогда
					
						XML_DOM.ЗаписатьНачалоЭлемента("ИнфПолФХЖ2");		
						XML_DOM.ЗаписатьАтрибут("Идентиф", "Ид");
						XML_DOM.ЗаписатьАтрибут("Значен", ШтрихКодИтд);
						XML_DOM.ЗаписатьКонецЭлемента();
						XML_DOM.ЗаписатьНачалоЭлемента("ИнфПолФХЖ2");		
						XML_DOM.ЗаписатьАтрибут("Идентиф", "КодПоставщика");
						XML_DOM.ЗаписатьАтрибут("Значен", ШтрихКодИтд);
						XML_DOM.ЗаписатьКонецЭлемента();

						XML_DOM.ЗаписатьНачалоЭлемента("ИнфПолФХЖ2");		
						XML_DOM.ЗаписатьАтрибут("Идентиф", "Штрихкод");
						
						XML_DOM.ЗаписатьАтрибут("Значен", xmlString(ЧислоШтриха));
						
						
						XML_DOM.ЗаписатьКонецЭлемента();
					КонецЕсли;
				Исключение
				КонецПопытки;
			Если ЗначениеЗАполнено(Стр_1.GTIN.Размер.Наименование) Тогда		
					XML_DOM.ЗаписатьНачалоЭлемента("ИнфПолФХЖ2");		
					XML_DOM.ЗаписатьАтрибут("Идентиф", "Размер");
					XML_DOM.ЗаписатьАтрибут("Значен", xmlString(Стр_1.GTIN.Размер.Наименование));
					XML_DOM.ЗаписатьКонецЭлемента();
				КонецЕсли;
		КонецЕсли;
		XML_DOM.ЗаписатьКонецЭлемента();
				
		//КонецЕсли;		
		
		
		
		  
			
		//XML_DOM.ЗаписатьНачалоЭлемента("ИнфПолФХЖ2");			
		//	XML_DOM.ЗаписатьАтрибут("jИдентиф", "cis");
		//	XML_DOM.ЗаписатьАтрибут("Значен", "(01)04600266011817(21)HobnJ4F");
		//	XML_DOM.ЗаписатьКонецЭлемента();
		//XML_DOM.ЗаписатьНачалоЭлемента("ИнфПолФХЖ2");			
		//	XML_DOM.ЗаписатьАтрибут("Идентиф", "cis");
		//	XML_DOM.ЗаписатьАтрибут("Значен", "123");
		//	XML_DOM.ЗаписатьКонецЭлемента();


		///XML_DOM.ЗаписатьКонецЭлемента();
		
		
		//XML_DOM.ЗаписатьАтрибут("КолТов", xmlString(Стр_1.Количество));
		
		
	Конеццикла;
	//XML_DOM.ЗаписатьНачалоЭлемента("ИнфПолФХЖ2");
//	XML_DOM.ЗаписатьКонецЭлемента();
	
	XML_DOM.ЗаписатьНачалоЭлемента("ВсегоОпл");			
	XML_DOM.ЗаписатьАтрибут("СтТовБезНДСВсего", xmlstring(СуммаИтог-СуммаНДС));
	XML_DOM.ЗаписатьАтрибут("СтТовУчНалВсего", xmlstring(СуммаИтог));
	XML_DOM.ЗаписатьНачалоЭлемента("СумНалВсего");			
	
	
	Если СуммаНДС=0 Тогда
		XML_DOM.ЗаписатьНачалоЭлемента("БезНДС");
		XML_DOM.ЗаписатьТекст("без НДС");
		XML_DOM.ЗаписатьКонецЭлемента();
	Иначе
		XML_DOM.ЗаписатьНачалоЭлемента("СумНал");
		XML_DOM.ЗаписатьТекст(xmlString(СуммаНДС));
		XML_DOM.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	XML_DOM.ЗаписатьКонецЭлемента();
	XML_DOM.ЗаписатьКонецЭлемента();
	XML_DOM.ЗаписатьКонецЭлемента();
	
	
	XML_DOM.ЗаписатьНачалоЭлемента("СвПродПер");			
	
	НомСтр=0;
	//Для Каждого Стр_1 Из Товары Цикл
	//	НомСтр=НомСтр+1;
		XML_DOM.ЗаписатьНачалоЭлемента("СвПер");			
		
		ДатаПередачи=Ссылк.ДатаОтгрузкиТовара;
		Если не ЗначениеЗаполнено(ДатаПередачи) Тогда
			ДатаПередачи=ДатаУПД;
		КонецЕсли;
		
		XML_DOM.ЗаписатьАтрибут("СодОпер", "Товары переданы");
		XML_DOM.ЗаписатьАтрибут("ДатаПер", Формат(ДатаПередачи,"ДФ=""дд.ММ.гггг"""));
		
		
		
		Если Ссылк.ОснованиеОтгрузкиТоваров.Количество()=0 Тогда
			XML_DOM.ЗаписатьНачалоЭлемента("ОснПер");			
			XML_DOM.ЗаписатьАтрибут("НаимОсн", "Без документа-основания");
		

			XML_DOM.ЗаписатьКонецЭлемента();
			
		Иначе
			
			Для Каждого Стр_ДП Из Ссылк.ОснованиеОтгрузкиТоваров Цикл
							
				XML_DOM.ЗаписатьНачалоЭлемента("ОснПер");			
				Если ЗначениеЗаполнено(Стр_ДП.ИдентификаторДокумента) Тогда
					
					XML_DOM.ЗаписатьАтрибут("ИдентОсн",Стр_ДП.ИдентификаторДокумента);
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Стр_ДП.ДополнительыеСведения) Тогда
					
					XML_DOM.ЗаписатьАтрибут("ДопСвОсн",Стр_ДП.ДополнительыеСведения);
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Стр_ДП.ДатаОтгрузки) Тогда
					
					XML_DOM.ЗаписатьАтрибут("ДатаОсн",Формат(Стр_ДП.ДатаОтгрузки,"ДФ=""дд.ММ.гггг"""));
					
				КонецЕсли;
				Если ЗначениеЗаполнено(Стр_ДП.НомерДокумента) Тогда
					
					XML_DOM.ЗаписатьАтрибут("НомОсн",Стр_ДП.НомерДокумента);
					
				КонецЕсли;
				Если ЗначениеЗаполнено(Стр_ДП.НаименованиеДокумента) Тогда
					
					XML_DOM.ЗаписатьАтрибут("НаимОсн",Стр_ДП.НаименованиеДокумента);
					
				КонецЕсли;
				
				
				XML_DOM.ЗаписатьКонецЭлемента();

				

			Конеццикла;
			
			
		КонецЕсли;

		
		Если ЗначениеЗаполнено(Ссылк.СведенияОЛицеПередавшемТовар) Тогда
			XML_DOM.ЗаписатьНачалоЭлемента("СвЛицПер");			
			XML_DOM.ЗаписатьНачалоЭлемента("РабОргПрод");			
			
			
			XML_DOM.ЗаписатьАтрибут("ОснПолн", "Доложностные обязанности");
			
			
			Если ЗначениеЗаполнено(Ссылк.ДолжностьПередавшегоТовар) тогда
					
				XML_DOM.ЗаписатьАтрибут("Должность", Ссылк.ДолжностьПередавшегоТовар);
			КонецЕсли;
			
			
			XML_DOM.ЗаписатьНачалоЭлемента("ФИО");
			
			ФИО=Ссылк.СведенияОЛицеПередавшемТовар;
			Фамилия=Сред(ФИО,1,Найти(ФИО," ")-1);
			
			XML_DOM.ЗаписатьАтрибут("Фамилия", СокрЛП(Фамилия));
			
			ФИО=Сред(ФИО,Найти(ФИО," ")+1);
			Имя=Сред(ФИО,1,Найти(ФИО," ")-1);
			
			Если ЗначениеЗАполнено(имя) Тогда
				XML_DOM.ЗаписатьАтрибут("Имя", Имя);
				
				
				ФИО=Сред(ФИО,Найти(ФИО," ")+1);
				Если Найти(ФИО," ")>0 Тогда
					Отчетство=Сред(ФИО,1,Найти(ФИО," ")-1);
				
					Если ЗначениеЗаполнено(Отчетство) тогда
						XML_DOM.ЗаписатьАтрибут("Отчество", Отчетство);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			XML_DOM.ЗаписатьКонецЭлемента();


			XML_DOM.ЗаписатьКонецЭлемента();
			XML_DOM.ЗаписатьКонецЭлемента();
			

		Конецесли;
		Если ЗначениеЗаполнено(Ссылк.СведенияОТранспортировкеИГрузе)
			ИЛИ ЗначениеЗАполнено(Ссылк.Перевозчик)
			ИЛИ Ссылк.ТранспортныеНакладные.Количество()>0  Тогда
			
			XML_DOM.ЗаписатьНачалоЭлемента("ТранГруз");			
			Если ЗначениеЗаполнено(Ссылк.СведенияОТранспортировкеИГрузе) тогда
				
				
				XML_DOM.ЗаписатьАтрибут("СвТранГруз", Ссылк.СведенияОТранспортировкеИГрузе);
				
			КонецЕсли;
			Для Каждого Стр_ДП Из Ссылк.ТранспортныеНакладные Цикл
							
				XML_DOM.ЗаписатьНачалоЭлемента("ТранНакл");			
				
				
				Если ЗначениеЗаполнено(Стр_ДП.ДатаТрансопртнойНакладной) Тогда
					
					XML_DOM.ЗаписатьАтрибут("ДатаТранНакл",Формат(Стр_ДП.ДатаТрансопртнойНакладной,"ДФ=""дд.ММ.гггг"""));
					
				КонецЕсли;
				Если ЗначениеЗаполнено(Стр_ДП.НомерДокумента) Тогда
					
					XML_DOM.ЗаписатьАтрибут("НомТранНакл",Стр_ДП.НомерДокумента);
					
				КонецЕсли;
				
				XML_DOM.ЗаписатьКонецЭлемента();

				

			Конеццикла;
			Если ЗначениеЗАполнено(Ссылк.Перевозчик) тогда
				
				       Контрагент_A=Ссылк.Перевозчик;
				
					
					
					XML_DOM.ЗаписатьНачалоЭлемента("Перевозчик");
					
					XML_DOM.ЗаписатьНачалоЭлемента("ИдСв");
					Если ЗначениеЗаполнено(Контрагент_A.КПП) Тогда
						
						XML_DOM.ЗаписатьНачалоЭлемента("СвЮЛУч");
						
						
						Если ЗначениеЗаполнено(Контрагент_A.НаименованиеПолное) Тогда
							XML_DOM.ЗаписатьАтрибут("НаимОрг", Контрагент_A.НаименованиеПолное);
						Иначе
							XML_DOM.ЗаписатьАтрибут("НаимОрг", Контрагент_A.Наименование);
							
						КонецЕсли;
						
						XML_DOM.ЗаписатьАтрибут("ИННЮЛ", Контрагент_A.ИНН);
						XML_DOM.ЗаписатьАтрибут("КПП", Контрагент_A.КПП);
						XML_DOM.ЗаписатьКонецЭлемента();
						
					Иначе
						
						XML_DOM.ЗаписатьНачалоЭлемента("СвИП");
						XML_DOM.ЗаписатьАтрибут("ИННФЛ", Контрагент_A.ИНН);
						
						XML_DOM.ЗаписатьНачалоЭлемента("ФИО");
						
						Если ЗначениеЗаполнено(Контрагент_A.НаименованиеПолное) Тогда
							ФИО=Контрагент_A.НаименованиеПолное;
							Если Сред(Контрагент_A.НаименованиеПолное,1,3)="ИП " Тогда
								ФИО=СокрЛП(Сред(Контрагент_A.НаименованиеПолное,3));
							КонецЕслИ;
						Иначе
							ФИО=Контрагент_A.Наименование;
							Если Сред(Контрагент_A.Наименование,1,3)="ИП " Тогда
								ФИО=СокрЛП(Сред(Контрагент_A.Наименование,3));
							КонецЕслИ;
						
						КонецЕсли;
								Если Найти(ВРЕГ(ФИО),"ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ")=1 Тогда
			ФИО=СокрЛП(Сред(ФИО,31));
		КонецЕслИ;

						Фамилия=Сред(ФИО,1,Найти(ФИО," ")-1);
						
						XML_DOM.ЗаписатьАтрибут("Фамилия", СокрЛП(Фамилия));
						
						ФИО=Сред(ФИО,Найти(ФИО," ")+1);
						Имя=Сред(ФИО,1,Найти(ФИО," ")-1);
						
						XML_DOM.ЗаписатьАтрибут("Имя", Имя);
						
						ФИО=Сред(ФИО,Найти(ФИО," ")+1);
						Отчетство=Сред(ФИО,1,Найти(ФИО," ")-1);
						
						XML_DOM.ЗаписатьАтрибут("Отчество", Отчетство);
						
						
						XML_DOM.ЗаписатьКонецЭлемента();
						XML_DOM.ЗаписатьКонецЭлемента();
						
						
					КонецЕслИ;
					XML_DOM.ЗаписатьКонецЭлемента();
					
					XML_DOM.ЗаписатьНачалоЭлемента("Адрес");
					
					
					Запрос = Новый Запрос;
					
					Запрос.УстановитьПараметр("Объект", Контрагент_A);
					Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипАдреса_ХамелеонЦРПТ.Юричический);
				//	Запрос.УстановитьПараметр("Вид"   , Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагент_Aа);
					
					Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					               |	Адрес_ХамелеонЦРПТ.Индекс КАК Поле1,
					               |	Адрес_ХамелеонЦРПТ.КодРегиона КАК Поле2,
					               |	Адрес_ХамелеонЦРПТ.Район КАК Поле3,
					               |	Адрес_ХамелеонЦРПТ.Город КАК Поле4,
					               |	Адрес_ХамелеонЦРПТ.НаселенныйПункт КАК Поле5,
					               |	Адрес_ХамелеонЦРПТ.Улица КАК Поле6,
					               |	Адрес_ХамелеонЦРПТ.Дом КАК Поле7,
					               |	Адрес_ХамелеонЦРПТ.Корпус КАК Поле8,
					               |	Адрес_ХамелеонЦРПТ.Квартира КАК ПОЛе9,
					               |	Адрес_ХамелеонЦРПТ.Литера КАК Поле10
					               |ИЗ
					               |	РегистрСведений.Адрес_ХамелеонЦРПТ КАК Адрес_ХамелеонЦРПТ
					               |ГДЕ
					               |	Адрес_ХамелеонЦРПТ.Объект = &Объект
					               |	И Адрес_ХамелеонЦРПТ.Тип = &Тип";
					
					РезультатЗапроса = Запрос.Выполнить();
					
					Если РезультатЗапроса.Пустой() 
						Или Не ЗначениеЗаполнено(РезультатЗапроса.Выгрузить()[0].Поле2)
						Тогда
						
						XML_DOM.ЗаписатьНачалоЭлемента("АдрИнф");
						XML_DOM.ЗаписатьАтрибут("КодСтр", "643");
						XML_DOM.ЗаписатьАтрибут("АдрТекст", Контрагент_A.ЮридическийАдрес);
						
					Иначе
							
						XML_DOM.ЗаписатьНачалоЭлемента("АдрРФ");
										
						Адрес=РезультатЗапроса.Выгрузить()[0];
						Если ЗначениеЗаполнено(Адрес.Поле1) тогда
							XML_DOM.ЗаписатьАтрибут("Индекс", Адрес.Поле1);
						КонецЕслИ;
						
								XML_DOM.ЗаписатьАтрибут("КодРегион", xmlString(Адрес.Поле2));
						
						//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
						
						
						
						Если ЗначениеЗаполнено(Адрес.Поле3) тогда
							XML_DOM.ЗаписатьАтрибут("Район", Адрес.Поле3);
						КонецЕслИ;
						Если ЗначениеЗаполнено(Адрес.Поле4) тогда
							XML_DOM.ЗаписатьАтрибут("Город", Адрес.Поле4);
						КонецЕсли;		
						Если ЗначениеЗаполнено(Адрес.Поле5) тогда
							XML_DOM.ЗаписатьАтрибут("НаселПункт", Адрес.Поле5);
						КонецЕсли;		
						Если ЗначениеЗаполнено(Адрес.Поле6) тогда
							XML_DOM.ЗаписатьАтрибут("Улица", Адрес.Поле6);
						КонецЕсли;		
						Если ЗначениеЗаполнено(Адрес.Поле7) тогда
							XML_DOM.ЗаписатьАтрибут("Дом", xmlstring(Адрес.Поле7));
						КонецЕсли;		
						Если ЗначениеЗаполнено(Адрес.Поле8) тогда
							XML_DOM.ЗаписатьАтрибут("Корпус", xmlstring(Адрес.Поле8));
						КонецЕсли;		
						Если ЗначениеЗаполнено(Адрес.Поле9) тогда
							XML_DOM.ЗаписатьАтрибут("Кварт", Сред(xmlstring(Адрес.Поле9),1,20));
						КонецЕсли;		
						
					КонецЕсли;
					
					
					
					XML_DOM.ЗаписатьКонецЭлемента();
					XML_DOM.ЗаписатьКонецЭлемента();
					XML_DOM.ЗаписатьКонецЭлемента();
				
				

			КонецЕсли;

			
			
			
			
					
			XML_DOM.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
		
		
		XML_DOM.ЗаписатьКонецЭлемента();
		
		
	//Конеццикла;
	XML_DOM.ЗаписатьКонецЭлемента();
	
	//XML_DOM.ЗаписатьКонецЭлемента();
	
	
	XML_DOM.ЗаписатьНачалоЭлемента("Подписант");			
	XML_DOM.ЗаписатьАтрибут("ОблПолн", "5");
	XML_DOM.ЗаписатьАтрибут("Статус", "1");
	XML_DOM.ЗаписатьАтрибут("ОснПолн", "Должностные обязанности");
	
	Если СтрДлина(Организация.ИНН)=12 Тогда
		XML_DOM.ЗаписатьНачалоЭлемента("ИП");
		XML_DOM.ЗаписатьАтрибут("ИННФЛ", Организация.ИНН);
		
		XML_DOM.ЗаписатьНачалоЭлемента("ФИО");
		
		ФИО=Организация.Наименование;
		Если Сред(Организация.Наименование,1,3)="ИП " Тогда
			ФИО=СокрЛП(Сред(Организация.Наименование,3));
		КонецЕслИ;
		Если Найти(ВРЕГ(ФИО),"ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ")=1 Тогда
			ФИО=СокрЛП(Сред(ФИО,31));
		КонецЕслИ;
		
		Фамилия=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Фамилия", СокрЛП(Фамилия));
		
		ФИО=Сред(ФИО,Найти(ФИО," ")+1);
		Имя=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Имя", Имя);
		
		ФИО=Сред(ФИО,Найти(ФИО," ")+1);
		Отчетство=Сред(ФИО,1,Найти(ФИО," ")-1);
		
		XML_DOM.ЗаписатьАтрибут("Отчество", Отчетство);
		
		
		XML_DOM.ЗаписатьКонецЭлемента();
		XML_DOM.ЗаписатьКонецЭлемента();
		
		
	Иначе
	XML_DOM.ЗаписатьНачалоЭлемента("ЮЛ");			
	XML_DOM.ЗаписатьАтрибут("ИННЮЛ", Организация.ИНН);
	XML_DOM.ЗаписатьАтрибут("НаимОрг", Организация.Наименование);
	Если ЗначениеЗаполнено(Ссылк.ТекущийПользователь.Должность) Тогда
		XML_DOM.ЗаписатьАтрибут("Должн", Ссылк.ТекущийПользователь.Должность);
	Иначе
		XML_DOM.ЗаписатьАтрибут("Должн", "генеральный директор");
	КонецЕсли;
	XML_DOM.ЗаписатьНачалоЭлемента("ФИО");			
	
	ФИО=Ссылк.ТекущийПользователь.КонтактноеЛицо;
	Фамилия=Сред(ФИО,1,Найти(ФИО," ")-1);
	
	XML_DOM.ЗаписатьАтрибут("Фамилия", СокрЛП(Фамилия));
	
	ФИО=Сред(ФИО,Найти(ФИО," ")+1);
	Имя=Сред(ФИО,1,Найти(ФИО," ")-1);
	
	XML_DOM.ЗаписатьАтрибут("Имя", Имя);
	
	ФИО=Сред(ФИО,Найти(ФИО," ")+1);
	Отчетство=Сред(ФИО,1,Найти(ФИО," ")-1);
	
	XML_DOM.ЗаписатьАтрибут("Отчество", Отчетство);
	
	XML_DOM.ЗаписатьКонецЭлемента();
	XML_DOM.ЗаписатьКонецЭлемента();
	КонецЕсли;
	XML_DOM.ЗаписатьКонецЭлемента();
	XML_DOM.ЗаписатьКонецЭлемента();
	
	XML_DOM.ЗаписатьКонецЭлемента();

	
	Текст=XML_DOM.Закрыть();
	Если ОшибкаПоКм=Истина Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ПриПроверкеСхемыПриОтгрузкеЕслиОшибкаНеФормироватьФайл=Истина Тогда
		//возврат Ложь;
		
		Сообщения=Новый Массив;
		Если НеПрошлаПроверка(Текст, , Ссылк,ОткрытьФорму_1,Сообщения) ТОгда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Текстовыйдо=Новый текстовыйДокумент;
	Текстовыйдо.ДобавитьСтроку(Текст);
		
	 

	Возврат    Новый Структура("Текстовыйдо,ИмяФайла,ИдР",Текстовыйдо,ИмяФайла,ИдР)
КонецФункции

Функция ЕлКоде(elkCode) Экспорт
			Джсон=Новый ЗаписьJson;
				Джсон.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,ЭкранированиеСимволовJSON.СимволыВнеASCII));
				Джсон.ЗаписатьНачалоОбъекта();
				
				Джсон.ЗаписатьИмяСвойства("elkCode");
				Джсон.ЗаписатьЗначение(elkCode);
				
				Джсон.ЗаписатьКонецОбъекта();;
				Тело=Джсон.Закрыть();
				
				Возврат тело
Конецфункции

Функция ПолучитьJONТокен(СРегистра) Экспорт
	
	Джсон=Новый ЗаписьJson;
	Джсон.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,ЭкранированиеСимволовJSON.СимволыВнеASCII));
	Джсон.ЗаписатьНачалоОбъекта();
	
	Джсон.ЗаписатьИмяСвойства("token");
	Джсон.ЗаписатьЗначение(срегистра);
	
	Джсон.ЗаписатьКонецОбъекта();;
	Тело=Джсон.Закрыть();
	
	Возврат тело
	
Конецфункции


Функция ЗагрузаемКодыТНВДНАсервере(Текст,СайтыВходаВСистему) Экспорт
	
	Если СайтыВходаВСистему="Шины" Тогда
		ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Шины;
	ИначеЕсли СайтыВходаВСистему="Молоко" Тогда
		ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Молоко;
	ИначеЕсли СайтыВходаВСистему="Одежда" Тогда
		ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Одежда;
	ИначеЕсли СайтыВходаВСистему="Табак"
		Тогда
		ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак;
		
	ИначеЕсли 		СайтыВходаВСистему="Альтернативный табак" Тогда
		ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак;

	ИначеЕсли СайтыВходаВСистему="Фармацевтика" Тогда
		ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Фармацевтика;
	ИначеЕсли СайтыВходаВСистему="Фото" Тогда
		ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Фото;
	ИначеЕсли СайтыВходаВСистему="Парфюм" Тогда
		ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Парфюм;
	ИначеЕсли СайтыВходаВСистему="Велосипеды" Тогда
		ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Велосипеды;
		
	ИначеЕсли СайтыВходаВСистему="Питьевая вода" Тогда
		ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.ПитьеваяВода;
		
	ИначеЕсли СайтыВходаВСистему="Кресла-коляски" Тогда
		ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.КреслаКоляски;
		
	ИначеЕсли СайтыВходаВСистему="Пиво" Тогда
		ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Пиво;
		
	Иначе
		ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Текст);
			Попытка
				NNN=ПрочитатьJSON(ЧтениеJSON);
				Для Каждого Стр Из NNN.records Цикл
						СпрТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(Стр.code);
						Если СпрТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.ПустаяСсылка() Тогда
							СпрТТ=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
						Иначе
							СпрТТ=СпрТНВЭД.ПолучитьОбъект()
						КонецЕсли;
						СпрТТ.Код=Стр.code;
						Если ЗначениеЗаполнено(ТипПродукции) тогда
							СпрТТ.ТипПродукции=ТипПродукции;
						КонецЕсли;
						СпрТТ.Наименование=Стр.description;
						СпрТТ.НаименованиеПолное=Стр.description;
						СпрТТ.Записать();
				
					
				Конеццикла;
				
				Возврат NNN.total
			Исключение
				Возврат 0
			КонецПопытки;
	
	
Конецфункции


		
Функция ВернутьТелоЗапросаПодключение(МассивКМ) Экспорт
	
//	МассивКодо=Новый Массив;
  //   МассивКодо.Добавить(cis);
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("ids", МассивКМ);
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, "  ");
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
	
	Возврат ЗаписьJSON.Закрыть();

КонецФункции


Функция ПолучитьтелоПоcis_Табак(МассивКМ) Экспорт
	Чтен=Новый ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,ЭкранированиеСимволовJSON.СимволыВнеASCII));
	//Чтен.ЗаписатьНачалоОбъекта();
	//Чтен.ЗаписатьИмяСвойства("cises");
	Чтен.ЗаписатьНачалоМассива();
	
	Для КаждогО Стр_1 ИЗ МассивКМ Цикл
		Чтен.ЗаписатьЗначение(Стр_1,СпособКодированияСтроки.КодировкаURL);
		
	Конеццикла;
	
	Чтен.ЗаписатьКонецМассива();
	//Чтен.ЗаписатьКонецОбъекта(); 
	Возврат Чтен.Закрыть()
	
КонецФункции


Функция ПолучитьтелоПоcis(МассивКМ) Экспорт
	Чтен=Новый ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,ЭкранированиеСимволовJSON.СимволыВнеASCII));
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("cises");
	Чтен.ЗаписатьНачалоМассива();
	
	Для КаждогО Стр_1 ИЗ МассивКМ Цикл
		Чтен.ЗаписатьЗначение(Стр_1);
		
	Конеццикла;
	
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта(); 
	Возврат Чтен.Закрыть()
	
КонецФункции

Функция ДляОтправкиОтчетаОбИспользовании(Подписанный,контент) Экспорт
		Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();
		Чтен.ЗаписатьИмяСвойства("signedReportDtos");
		Чтен.ЗаписатьНачалоМассива();
		Чтен.ЗаписатьНачалоОбъекта();
		Чтен.ЗаписатьИмяСвойства("reportId");
		Чтен.ЗаписатьЗначение(контент.reportId);
		Чтен.ЗаписатьИмяСвойства("content");
		Чтен.ЗаписатьЗначение(контент.content);
		Чтен.ЗаписатьИмяСвойства("signature");
		Чтен.ЗаписатьЗначение(Подписанный);
		Чтен.ЗаписатьКонецОбъекта();
		Чтен.ЗаписатьКонецМассива();
		Чтен.ЗаписатьКонецОбъекта(); 
		    Возврат Чтен.Закрыть()
КонецФункции

Процедура НаСервереОБновляемСтатусыВСЕЗаказы(Текст1,Ссылка,ТолькоСтатус)   Экспорт
					ЧтениеJSON = Новый ЧтениеJSON;
					ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ПрочитатьJSON(ЧтениеJSON);
					Если NNN.order_status="DRAFT" Тогда
						
						ОбновитьСтатусДокумента(Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ЧерновикОбработан"),"",,,ТолькоСтатус);
					ИначеЕсли NNN.order_status="VALIDATION_FAILED" 
						ИЛИ NNN.order_status="ERROR" 
						Тогда
						ОбновитьСтатусДокумента(Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.order_status_details,,ИСТИНА,ТолькоСтатус);
					ИначеЕсли NNN.order_status="READY_FOR_EXTERNAL_PROCESSING" Тогда
						ОбновитьСтатусДокумента(Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус"),"",,,ТолькоСтатус);
						
					ИначеЕсли NNN.order_status="PRODUCTION" 
						ИЛИ NNN.order_status="EXTERNAL_PROCESSING" 
						Тогда
						ОбновитьСтатусДокумента(Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство"),"",NNN.document_information,,ТолькоСтатус);
					ИначеЕсли NNN.order_status="PROCESSING_FAILED" Тогда
						ОбновитьСтатусДокумента(Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),NNN.order_status_details,,,ТолькоСтатус);
					ИначеЕсли NNN.order_status="MK_PARTLY_EMITTED" Тогда
						ОбновитьСтатусДокумента(Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы"),"",NNN.document_information,,ТолькоСтатус);
					ИначеЕсли NNN.order_status="MK_EMITTED" Тогда
						ОбновитьСтатусДокумента(Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован"),"",NNN.document_information,,ТолькоСтатус);
					КонецЕсли;
	
КонецПроцедуры

Функция ВернутьСтатусыДокументовПоТабличнойЧасти_ОтчетОбИспользовании(ДокументПроверки,Пользователь)  Экспорт
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводВОборот_ХамелеонЦРПТТовары.Ссылка,
		|	ВводВОборот_ХамелеонЦРПТТовары.order_ID,
		|	ВводВОборот_ХамелеонЦРПТТовары.НомерСтроки
		|ИЗ
		|	Документ.ВводВОборот_ХамелеонЦРПТ.Товары КАК ВводВОборот_ХамелеонЦРПТТовары
		|ГДЕ
		|	ПОДСТРОКА(ВводВОборот_ХамелеонЦРПТТовары.order_ID, 1, 1000) <> """"
		|	И (ВводВОборот_ХамелеонЦРПТТовары.Статус В (&Статус)
		|			ИЛИ ВводВОборот_ХамелеонЦРПТТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ПустаяСсылка))
		|	И ВводВОборот_ХамелеонЦРПТТовары.Ссылка.ТекущийПользователь.СайтыВходаВСистему = &СайтыВходаВСистему";
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	
	Запрос.УстановитьПараметр("СайтыВходаВСистему",	Пользователь.СайтыВходаВСистему);
	
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	//Запрос.УстановитьПараметр("ТипДокумента",	Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании); 
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивВ=Новый Массив;
	Сч=0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		МассивВ.Добавить(Новый Структура("Ссылка,Документ,order_ID,Сч",ВыборкаДетальныеЗаписи.Ссылка,ВыборкаДетальныеЗаписи.Ссылка,ВыборкаДетальныеЗаписи.order_ID,
		ВыборкаДетальныеЗаписи.НомерСтроки-1
		));
		Сч=Сч+1;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Возврат    МассивВ
	
	
Конецфункции

Процедура ОбработаноМассив_статусы(Стр_1)
	//Для Каждого Стр_1 Из 	ОбработаноМассив Цикл
		ДокумП=Стр_1.Докум.ПолучитьОбъект();
		//Если Стр_1.Статус="Rejected" Тогда
			ДокумП.Товары[Стр_1.Сч].Статус=Стр_1.Статус;
			//ДокумП.Товары[Стр_1.Сч].ОшибкаОтправки=Стр_1.Ошибка;
		Если Стр_1.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ Тогда
				ДокумП.Товары[Стр_1.Сч].СтатусСтроки="Отказ";
			ДокумП.Записать(РежимЗаписиДокумента.Запись);
			ИначеЕсли Стр_1.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан Тогда
				ДокумП.Товары[Стр_1.Сч].СтатусСтроки="Обработан";
			ДокумП.Записать(РежимЗаписиДокумента.Проведение);

			КонецЕсли;
			
	//Конеццикла;
	
КонецПроцедуры


Процедура ОбновитьИнформациюОПродукции(Ссылка)
//	ВернутьМассивСтрок=МассивПрод(Ссылка);
//	Для Каждого Стр Из ВернутьМассивСтрок Цикл
//				Форм=ПолучитьФорму("Справочник.Продукция_ХамелеонЦРПТ.Форма.ФормаЭлемента", Новый Структура("Ключ",Стр));
//		Форм.ОбновитьПродукциюПоКМ(Ссылка)
//Конеццикла;
	
КонецПроцедуры


Функция ОбновитьСтатусыДокументовНаСервереПеремаркировка_ХамелеонЦРПТ(ДокументПроверки,ТекущийПользователь) Экспорт
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Перемаркировка_ХамелеонЦРПТ.Ссылка,
		|	Перемаркировка_ХамелеонЦРПТ._Order_ID КАК _Order_ID
		|ИЗ
		|	Документ.Перемаркировка_ХамелеонЦРПТ КАК Перемаркировка_ХамелеонЦРПТ
		|ГДЕ
		|	Перемаркировка_ХамелеонЦРПТ.Статус В(&Статус)
		|	И Перемаркировка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему.Наименование <> ""Фармацевтика""
		|	И ПОДСТРОКА(Перемаркировка_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|	И Перемаркировка_ХамелеонЦРПТ.Организация = &Организация
		|	И Перемаркировка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему = &СайтыВходаВСистему";
	Если ЗначениеЗаполнено(ДокументПроверки) тогда
		Запрос.Текст = Запрос.Текст +"
		|  И Перемаркировка_ХамелеонЦРПТ.Ссылка=&ДокументПроверки";
		Запрос.УстановитьПараметр("ДокументПроверки",ДокументПроверки);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СайтыВходаВСистему",	ТекущийПользователь.СайтыВходаВСистему); 
	
	
	Запрос.УстановитьПараметр("Организация",	ТекущийПользователь.Организация); 
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	
Конецфункции

Функция СоздатьПродукцию(Знач Стр,Thumbprint_1=неопределено) Экспорт
					
	gtin="";
	Если НЕ Стр.Свойство("gtin",gtin) тогда
		                     Возврат Неопределено
	КонецЕсли;
					
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Продукция_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
		|ГДЕ
		|	Продукция_ХамелеонЦРПТ.GTIN = &GTIN";
	
	Запрос.УстановитьПараметр("GTIN", Число(gtin));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СпрД=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		СпрПр=ОбновитьПродукциюПоТексту(Thumbprint_1,Стр,СпрД)
	КонецЦикла;
	
	Возврат СпрПр;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	

	Иначе
	
		СпрД=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
		 Возврат ОбновитьПродукциюПоТексту(Thumbprint_1,Стр,СпрД)
	КонецЕсли;	
	
КонецФункции 


Функция ОбновитьПродукциюПоТексту(Thumbprint_1,Стр,СпрД)
	Если Thumbprint_1<>неопределено Тогда
		Если Не ЗначениеЗаполнено(СпрД.Тип) Тогда
			Если Thumbprint_1.НаименованиеСтенда="Обувь" Тогда
				СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
			ИначеЕсли Thumbprint_1.НаименованиеСтенда="Табак"

				Тогда
				СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак;
			ИначеЕсли 		Thumbprint_1.НаименованиеСтенда="Альтернативный табак" Тогда
				СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак;
			ИначеЕсли Thumbprint_1.НаименованиеСтенда="Одежда" Тогда
				СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Одежда;
			ИначеЕсли Thumbprint_1.НаименованиеСтенда="Парфюм" Тогда
				СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Парфюм;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТехническаяКарточка=Ложь;
	Стр.Свойство("isTechGtin",ТехническаяКарточка);
	
	Если Сред(Стр.gtin,1,2)="02" Тогда
		//ТехническаяКарточка=Ложь;
		//Стр.Свойство("isTechGtin",ТехническаяКарточка);
		Если ТехническаяКарточка<>Истина Тогда
			СпрД.Остатки=Истина;
		КонецЕсли;
		
	КонецЕсли;
	СпрД.ТехническаяКарточка=ТехническаяКарточка;
	СпрД.Объясненение="";
	Стр.Свойство("explain",СпрД.Объясненение);
	ТипПарфюмерии="";
	Если Стр.Свойство("perfumeryType",ТипПарфюмерии) Тогда
		
		Если Не ЗначениеЗаполнено(СпрД.Тип) Тогда
			СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Парфюм;
		КонецЕсли;
		Если ЗначениеЗаполнено(СпрД.ДополнительныйРеквизитПарфюм) тогда
			ДопРеквПарф=СпрД.ДополнительныйРеквизитПарфюм.ПолучитьОбъект();
		Иначе
			ДопРеквПарф=Справочники.ДополнительныеРеквизиты_Парфюмерия_ХамелеонЦРПТ.СоздатьЭлемент();
		КонецЕсли;
		ДопРеквПарф.ТипПарфюмерии=Справочники.ТипПарфюмерии_ХамелеонЦРПТ.НайтиПоНаименованию(ТипПарфюмерии,Истина);
		
		ТипУпаковки=неопределено;
		Если Стр.Свойство("packageType",ТипУпаковки) Тогда
			Попытка
				ДопРеквПарф.ТипУпаковкиИспользования=Справочники.ТипУпаковкиИспользования_Парфюм_ХамелеонЦРПТ.НайтиПоНаименованию(ТипУпаковки);
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		ТипМатериала=неопределено;
		Если Стр.Свойство("packMaterial",ТипМатериала) Тогда
			ДопРеквПарф.МатериалУпаковки=Справочники.МатериалУпаковки_Молоко_ХамелеонЦРПТ.НайтиПоНаименованию(ТипМатериала,Истина);
		КонецЕсли;
		
		standardNumber="";
		Стр.Свойство("standardNumber",standardNumber);
		Если ЗначениеЗаполнено(standardNumber) Тогда
			Если Найти(standardNumber,"009/2011")>0 тогда
				ДопРеквПарф.НомерРегламента009=Истина;
			ИначеЕсли Найти(standardNumber,"005/2011")>0 тогда
				ДопРеквПарф.НомерРегламента005=Истина;
			ИначеЕсли Найти(standardNumber,"029/2011")>0 тогда
				ДопРеквПарф.НомерРегламента029=Истина;
			
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка
			Объем=НеопределенО;
			Если Стр.Свойство("volume",Объем) Тогда
				Если Найти(Объем," ")>0 тогда
					
					ЕдИзм=Сред(Объем,Найти(Объем," ")+1);
					ДопРеквПарф.ЕдиницаИзмеренияОбъема=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоНаименованию(
					ЕдИзм,Истина);
					
					Объем=Сред(Объем,1,Найти(Объем," "));
					
					
					
				КонецЕсли;
				ДопРеквПарф.Объем=Число(Объем);
			КонецЕсли;
		исключение
		КонецПопытки;
		
		ДопРеквПарф.Записать();
		СпрД.ДополнительныйРеквизитПарфюм=ДопРеквПарф.Ссылка;
	КонецЕсли;
	
	Стр.Свойство("goodMarkFlag",СпрД.МожноЭмитировать);
 	Стр.Свойство("goodTurnFlag",СпрД.МожноВводитьВОборот);
	
	
	Стр.Свойство("brand",СпрД.БрендТорговаяМарка);
	country="";
	
	Стр.Свойство("country",country);
	Если ЗначениеЗАполнено(country) Тогда
		Если country="РОССИЙСКАЯ ФЕДЕРАЦИЯ" Тогда
			СпрД.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
		Иначе
			СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(country);
		КонецЕсли;	
		
		//СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(Стр.country);
	//ИначеЕсли Не ЗначениеЗаполнено(	СпрД.СтранаПроизводства) Тогда
	//	СпрД.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
	КонецЕсли;
	СпрД.GTIN=Число(Стр.gtin);
	СпрД.id=Стр.id;
	СпрД.ИННПроизводителяИмпортёра=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",Стр.inn);
	Если Не ЗначениеЗАполнено(СпрД.ИННПроизводителяИмпортёра) Тогда
		Спр_К=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
		Спр_К.ИНН=Стр.inn;
		Спр_К.Наименование=Спр_К.ИНН;
		Спр_К.Записать();
		СпрД.ИННПроизводителяИмпортёра=Спр_К.Ссылка;
		
	Конецесли;
	Стр.Свойство("materialDown",СпрД.МатериалНиза);
	Стр.Свойство("materialLining",СпрД.МатериалПодкладки);
	Стр.Свойство("materialUpper",СпрД.МатериалВерха);
	Стр.Свойство("model",СпрД.МодельПроизводителяАртикул);
	
	
	Если ЗначениеЗаполнено(СпрД.МодельПроизводителяАртикул) И (СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Шины 
		ИЛИ СпрД.ТНВЭДДляОстатка="40") И СпрД.ДополнительныйРеквизитШины.МодельШины<>СпрД.МодельПроизводителяАртикул
		Тогда
		
		Если ЗначениеЗаполненО(СпрД.ДополнительныйРеквизитШины) Тогда
			ДополнительныйРеквизитШины=СпрД.ДополнительныйРеквизитШины.ПолучитьОбъект();
		Иначе
			ДополнительныйРеквизитШины=Справочники.ДополнительныеРеквизиты_Шины_ХамелеонЦРПТ.СоздатьЭлемент();
		КонецЕсли;
		ДополнительныйРеквизитШины.МодельШины=СпрД.МодельПроизводителяАртикул;
		ДополнительныйРеквизитШины.Записать();
		СПрД.ДополнительныйРеквизитШины=ДополнительныйРеквизитШины.Ссылка;
	КонецЕслИ;
	
	
	
	Стр.Свойство("color",СпрД.Цвет);
	СпрД.Наименование=Стр.name;
	СпрД.НаименованиеТовара=Стр.name;
	
	
	Стр.Свойство("tnVedCode",СпрД.КодТНВЭДКороткий);
	Если ЗначениеЗаполнено(СпрД.КодТНВЭДКороткий) И СпрД.Остатки=Истина Тогда
		СпрД.ТНВЭДДляОстатка=СпрД.КодТНВЭДКороткий;
	КонецЕсли;
	
	
	ВидИзделия="";
	Стр.Свойство("productTypeDesc",ВидИзделия);
	
	Если ЗначениеЗаполнено(ВидИзделия) Тогда
		
		СпрД.ВидОбуви=Справочники.ВидОбуви_ХамелеонЦРПТ.НайтиПоНаименованию(ВидИзделия);
		Если Не ЗначениеЗаполнено(СпрД.ВидОбуви) тогда
			ВидОб=Справочники.ВидОбуви_ХамелеонЦРПТ.СоздатьЭлемент();
			Видоб.Наименование=ВидИзделия;
			Видоб.УстановитьНовыйКод("ДР-");
			ВидОб.Записать();
			СпрД.ВидОбуви=Видоб.Ссылка;
		Конецесли;
		
	КонецЕсли;
	
	КодПр="";
	Стр.Свойство("productType",КодПр);
	Если ЗначениеЗаполнено(КодПр) Тогда
	СпрД.ВидОбуви=Справочники.ВидОбуви_ХамелеонЦРПТ.НайтиПоКоду(Стр.productType);
	Если Не ЗначениеЗаполнено(СпрД.ВидОбуви) тогда
		СпрВ=Справочники.ВидОбуви_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрВ.Код=Стр.productType;
		СпрВ.Наименование=Стр.productTypeDesc;
		СпрВ.Записать();
		СпрД.ВидОбуви=СпрВ.Ссылка;
	КонецЕсли;
КонецЕсли;
publicationDate=Неопределено;
    Стр.Свойство("publicationDate",publicationDate);
	Если ЗначениеЗаполнено(publicationDate) тогда
		СпрД.ДатаПубликации=Дата(1970,1,1)+Стр.publicationDate/1000;					
	Конецесли;
	////То была обувь теперь сигареты
packageType=Неопределено;
    Стр.Свойство("packageType",packageType);
	Если ЗначениеЗАполнено(packageType) тогда
		Попытка
			СПрд.ТипУпаковкиСигарет=Перечисления.ТипУпаковкиСигареты_ХамелеонЦРПТ[packageType];
		Исключение
			 Если packageType="КОРОБКА/БОКС" Тогда
				СПрд.ТипУпаковкиСигарет=Перечисления.ТипУпаковкиСигареты_ХамелеонЦРПТ.box;
			КонецЕсли;
		КонецПопытки;
		
		СпрД.ТипУпаковки=Справочники.ТипУпаковкиОбщий_ХамелеонЦРПТ.НайтиПоНаименованию(packageType,Истина);
		Если Не ЗначениеЗаполнено(СпрД.ТипУпаковки) тогда
			ТипУп=Справочники.ТипУпаковкиОбщий_ХамелеонЦРПТ.СоздатьЭлемент();
			ТипУп.Наименование=packageType;
			ТипУп.Записать();
			СпрД.ТипУпаковки=ТипУп.Ссылка;
			
		Конецесли;
		
	КонецЕсли;
	КоличествоВГруппе=0;
	Если Стр.Свойство("innerUnitCount",КоличествоВГруппе) И ЗначениеЗаполнено(КоличествоВГруппе) Тогда
		СпрД.КоличествоВГруппе=КоличествоВГруппе
	Конецесли;
	productGroup=Неопределено;
    Стр.Свойство("productGroup",productGroup);
	Если ЗначениеЗаполнено(productGroup) тогда
		СпрГр=Справочники.ГруппаСигарет_ХамелеонЦРПТ.НайтиПоНаименованию(productGroup);
		Если Не ЗначениеЗаполнено(СпрГр) Тогда
			СпрГр=Справочники.ГруппаСигарет_ХамелеонЦРПТ.СоздатьЭлемент();
			СпрГр.Наименование=productGroup;
			СпрГр.Записать();
		КонецЕсли;
		СпрД.ГруппаСигарет=СпрГр.Ссылка;
		
	КонецЕсли;
	
	productSize=Неопределено;
    Стр.Свойство("productSize",productSize);
	Если ЗначениеЗаполнено(productSize) тогда
		productSize=СтрЗаменить(productSize,".",",");
		СпрД.Размер=Справочники.РазмерВШтихмассовойСистеме_ХамелеонЦРПТ.НайтиПоНаименованию(productSize,Истина);
	КонецЕсли;
	
	
	
	
	
	
	
	СпрД.Записать();
	
	Возврат СпрД.Ссылка
КонецФункции



Функция МассивКмОвДляОбработки(Текст1) Экспорт
	
	
					 	Чтен=Новый ЧтениеXML;
						 Чтен.УстановитьСтроку(Текст1);
						 
						 
						 МассивВернуть=новый Массив;
						 МассивВернуть.Очистить();
						 
						 
					ОтветСтруктура = ФабрикаXDTO.ПрочитатьXML(Чтен);
					Документ=ОтветСтруктура.kiz_info;
					Если   Документ.Свойства().Получить("sscc_down")<>Неопределено Тогда
						
						Если ТипЗнч(Документ.sscc_down.tree)=Тип("ОбъектXDTO") Тогда
							Стр_20=Документ.sscc_down.tree;
							Если Стр_20.Свойства().Получить("sscc")<>Неопределено Тогда
								
								//Строк_1=Строк.ПолучитьЭлементы().Добавить();
								ключ=Стр_20.sscc;
								//Строк_1.НомерКМ=ключ;                         	
								
								МассивВернуть.Добавить(Новый Структура("НомерКМ,Продолжить",ключ,Истина));
								
								//РекурсияУпаковки_Лекарства(Строк_1,Thumbprint_1,СРегистра,Строк_1.НомерКМ,НеПолучать,subjectIdФармацевтика)								
							Иначе
								
								//Строк_1=Строк.ПолучитьЭлементы().Добавить();
								ключ=Стр_20.sgtin.info_sgtin.sgtin;
								//Строк_1.НомерКМ=ключ;                         	
								МассивВернуть.Добавить(Новый Структура("НомерКМ,Продолжить",ключ,Ложь));
								
								//Строк_1.Проудкция=
								//РекурсияУпаковки_Лекарства(Строк_1,Thumbprint_1,СРегистра,Строк_1.НомерКМ,НеПолучать)								
								
								
							КонецЕсли;
							
						Иначе
							Для Каждого Стр_20 Из Документ.sscc_down.tree Цикл
								Если Стр_20.Свойства().Получить("sscc")<>Неопределено Тогда
									
									//Строк_1=Строк.ПолучитьЭлементы().Добавить();
									ключ=Стр_20.sscc;
									МассивВернуть.Добавить(Новый Структура("НомерКМ,Продолжить",ключ,Истина));

									//Строк_1.НомерКМ=ключ;                         	
									//РекурсияУпаковки_Лекарства(Строк_1,Thumbprint_1,СРегистра,Строк_1.НомерКМ,НеПолучать,subjectIdФармацевтика)								
								Иначе
									
									//Строк_1=Строк.ПолучитьЭлементы().Добавить();
									ключ=Стр_20.sgtin.info_sgtin.sgtin;
									//Строк_1.НомерКМ=ключ;                         	
									МассивВернуть.Добавить(Новый Структура("НомерКМ,Продолжить",ключ,Ложь));
									
									//Строк_1.Проудкция=
									//РекурсияУпаковки_Лекарства(Строк_1,Thumbprint_1,СРегистра,Строк_1.НомерКМ,НеПолучать)								
									
									
								КонецЕсли;
								
								
							Конеццикла;
							
						КонецЕсли;
						
					КонецЕсли;
					Возврат МассивВернуть
					 
КонецФункции




процедура РекурсияПоУпаковкам_(МассивВернуть,childs)
Если ТипЗнч(childs)=Тип("ОбъектXDTO") Тогда
						Стр_childs=childs;
						Если Стр_childs.Свойства().Получить("sgtin_info")<>НЕОПРЕДЕЛЕНО ТОГДА
							
							sgtin_info=Стр_childs.sgtin_info;
							Если ТипЗнч(sgtin_info)=Тип("ОбъектXDTO") Тогда
								
								Стр_sgtin_info=sgtin_info;
								series_number="";
								Если Стр_sgtin_info.Свойства().Получить("series_number")<>Неопределено тогда
									series_number= Стр_sgtin_info.series_number
								КонецЕсли;
								МассивВернуть.Добавить(Новый Структура("НомерКМ,series_number",Стр_sgtin_info.sgtin,series_number));	
								
								
							Иначе
								Для Каждого Стр_sgtin_info Из sgtin_info Цикл
									series_number="";
									Если Стр_sgtin_info.Свойства().Получить("series_number")<>Неопределено тогда
										series_number= Стр_sgtin_info.series_number
									КонецЕсли;
									МассивВернуть.Добавить(Новый Структура("НомерКМ,series_number",Стр_sgtin_info.sgtin,series_number));	
								Конеццикла;
								
								
								
							КонецЕсли;
							
							
						ИНАЧЕ
							
							sscc_info=Стр_childs.sscc_info;
							Если ТипЗнч(sscc_info)=Тип("ОбъектXDTO") Тогда
								
								Стр_sscc_info=sscc_info;
								РекурсияПоУпаковкам_(МассивВернуть,Стр_sscc_info.childs)
								//series_number="";
								//Если Стр_sscc_info.Свойства().Получить("series_number")<>Неопределено тогда
								//	series_number= Стр_sscc_info.series_number
								//КонецЕсли;
								//МассивВернуть.Добавить(Новый Структура("НомерКМ,series_number",Стр_sscc_info.sscc,series_number));	
								
								
							Иначе
								Для Каждого Стр_sscc_info Из sscc_info Цикл
									РекурсияПоУпаковкам_(МассивВернуть,Стр_sscc_info.childs)
								//	series_number="";
								//	Если Стр_sscc_info.Свойства().Получить("series_number")<>Неопределено тогда
								//		series_number= Стр_sscc_info.series_number
								//	КонецЕсли;
								//	МассивВернуть.Добавить(Новый Структура("НомерКМ,series_number",Стр_sgtin_info.sscc,series_number));	
								Конеццикла;
								
								
							КонецЕсли;
							
							
						КОНЕЦЕСЛИ;
						
						
					Иначе
						
						Для Каждого Стр_childs Из childs Цикл
							
							
							Если Стр_childs.Свойства().Получить("sgtin_info")<>НЕОПРЕДЕЛЕНО ТОГДА
								
								sgtin_info=Стр_childs.sgtin_info;
								Если ТипЗнч(sgtin_info)=Тип("ОбъектXDTO") Тогда
									
									Стр_sgtin_info=sgtin_info;
									series_number="";
									Если Стр_sgtin_info.Свойства().Получить("series_number")<>Неопределено тогда
										series_number= Стр_sgtin_info.series_number
									КонецЕсли;
									МассивВернуть.Добавить(Новый Структура("НомерКМ,series_number",Стр_sgtin_info.sgtin,series_number));	
									
									
								Иначе
									Для Каждого Стр_sgtin_info Из sgtin_info Цикл
										series_number="";
										Если Стр_sgtin_info.Свойства().Получить("series_number")<>Неопределено тогда
											series_number= Стр_sgtin_info.series_number
										КонецЕсли;
										МассивВернуть.Добавить(Новый Структура("НомерКМ,series_number",Стр_sgtin_info.sgtin,series_number));	
										
									Конеццикла;
									
									
									
								КонецЕсли;
								
								
							ИНАЧЕ
								
								sscc_info=Стр_childs.sscc_info;
								Если ТипЗнч(sscc_info)=Тип("ОбъектXDTO") Тогда
									
									Стр_sscc_info=sscc_info;
									РекурсияПоУпаковкам_(МассивВернуть,Стр_sscc_info.childs)
//								series_number="";
//								Если Стр_sscc_info.Свойства().Получить("series_number")<>Неопределено тогда
//									series_number= Стр_sscc_info.series_number
//								КонецЕсли;
//								МассивВернуть.Добавить(Новый Структура("НомерКМ,series_number",Стр_sscc_info.sscc,series_number));	
									
									
								Иначе
									Для Каждого Стр_sscc_info Из sscc_info Цикл
									РекурсияПоУпаковкам_(МассивВернуть,Стр_sscc_info.childs)
//								series_number="";
//								Если Стр_sscc_info.Свойства().Получить("series_number")<>Неопределено тогда
//									series_number= Стр_sscc_info.series_number
//								КонецЕсли;
//								МассивВернуть.Добавить(Новый Структура("НомерКМ,series_number",Стр_sscc_info.sscc,series_number));	
									Конеццикла;
									
									
								КонецЕсли;
								
								
							КОНЕЦЕСЛИ;							
							
						конеццикла;
						
					КонецЕслИ;
					
					
					
					
КонецПроцедуры
Функция МассивКмОвДляОбработки_Упаковки(Текст1) Экспорт
	
					 МассивВернуть=Новый Массив;
					 
					 	Чтен=Новый ЧтениеXML;
						 Чтен.УстановитьСтроку(Текст1);
			Попытка
						 
					ОтветСтруктура = ФабрикаXDTO.ПрочитатьXML(Чтен);
					Документ=ОтветСтруктура.hierarchy_info;
					
					childs=ОтветСтруктура.hierarchy_info.sscc_down.sscc_info.childs;
					
					
					РекурсияПоУпаковкам_(МассивВернуть,childs);
					
										
					//Если   Документ.sscc_down.sscc_info.Свойства().Получить("childs")<>Неопределено Тогда
					//	
					//	Если ТипЗнч(Документ.sscc_down.tree)=Тип("ОбъектXDTO") Тогда
					//		Стр_20=Документ.sscc_down.tree;
					//		Если Стр_20.Свойства().Получить("sscc")<>Неопределено Тогда
					//			
					//			ключ=Стр_20.sscc;
					//			МассивВернуть.Добавить(Новый Структура("НомерКМ,Продолжить",ключ,Истина));
					//			//Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",cis_1,ключ)).Количество()=0 Тогда
					//			
					//			//	ДобавК=Объект.Короба.Добавить();
					//			//	ДобавК.НомерКороба=cis_1;
					//			//	ДобавК.ШтрихКод=Ключ;
					//			//	БылиУпаковки=Истина;
					//			//КонецЕсли;
					//			
					//			//Строк_1.НомерКМ=ключ;                         	
					//			//РекурсияУпаковки_Лекарства(СРегистра,Thumbprint_1,ключ,subjectIdФармацевтика)								
					//		Иначе
					//			
					//			//Строк_1=Строк.ПолучитьЭлементы().Добавить();
					//			ключ=Стр_20.sgtin.info_sgtin.sgtin;
					//			МассивВернуть.Добавить(Новый Структура("НомерКМ,Продолжить",ключ,Ложь));
					//			
					//			
					//			
					//		КонецЕсли;
					//		
					//	Иначе
					//		Для Каждого Стр_20 Из Документ.sscc_down.tree Цикл
					//			Если Стр_20.Свойства().Получить("sscc")<>Неопределено Тогда
					//			
					//				ключ=Стр_20.sscc;
					//				МассивВернуть.Добавить(Новый Структура("НомерКМ,Продолжить",ключ,Истина));
					//				
					//				//Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",cis_1,ключ)).Количество()=0 Тогда
					//				//
					//				//	ДобавК=Объект.Короба.Добавить();
					//				//	ДобавК.НомерКороба=cis_1;
					//				//	ДобавК.ШтрихКод=Ключ;
					//				//	БылиУпаковки=Истина;
					//				//КонецЕсли;
					//				//
					//				//РекурсияУпаковки_Лекарства(СРегистра,Thumbprint_1,ключ,subjectIdФармацевтика)								
					//			Иначе
					//				
					//				//Строк_1=Строк.ПолучитьЭлементы().Добавить();
					//				ключ=Стр_20.sgtin.info_sgtin.sgtin;
					//				МассивВернуть.Добавить(Новый Структура("НомерКМ,Продолжить",ключ,Ложь));
					//				
					//				//Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",cis_1,ключ)).Количество()=0 Тогда
					//				
					//				//	ДобавК=Объект.Короба.Добавить();
					//				//	ДобавК.НомерКороба=cis_1;
					//				//	ДобавК.ШтрихКод=Ключ;
					//				//	БылиУпаковки=Истина;
					//				//КонецЕсли;
					//				
					//				
					//				
					//				

					//												
					//			КонецЕсли;

					//			
					//		Конеццикла;
					//		
					//	КонецЕсли;
					//	
					//КонецЕсли;
				Исключение
				КонецПопытки;
					 
					Возврат МассивВернуть
					 
КонецФункции



Процедура ЗаписатьПродукцию(Текст1,МассивПр=Неопределено) Экспорт
	МассивПр=Новый Массив;
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);
	entries=Неопределено;
	Если NNN.Свойство("entries",entries) Тогда
		Для Каждого Стр Из NNN.entries Цикл
			СпрПр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(Стр.gtin));
			Если ЗначениеЗАполнено(СпрПр) тогда
				СпрПр=СпрПр.ПолучитьОбъект();
			Иначе
				СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
			КонецЕсли;
			СпрПр.GTIN=Число(Стр.gtin);
			СпрПр.Наименование=Стр.prod_sell_name;
			СпрПр.НаименованиеТовара=Стр.prod_form_name;
			Стр.Свойство("prod_desc",СпрПр.Комментарий);
			Стр.Свойство("reg_number",СпрПр.МодельПроизводителяАртикул);
			стр.Свойство("prod_pack_1_name",СпрПр.БрендТорговаяМарка);
			СпрПр.Изготовитель=Справочники.Изготовители_ХамелеонЦРПТ.НайтиПоНаименованию(Стр.glf_name);
			Если Не ЗначениеЗаполнено(СпрПр.Изготовитель) Тогда
				СпрИзг=Справочники.Изготовители_ХамелеонЦРПТ.СоздатьЭлемент();
				СпрИзг.Наименование=Стр.glf_name;
				СпрИзг.Записать();
				СпрПр.Изготовитель=СпрИзг.Ссылка;
			Конецесли;
			glf_country=Неопределено;
			Если Стр.Свойство("glf_country",glf_country) Тогда
							Если glf_country="РОССИЙСКАЯ ФЕДЕРАЦИЯ" Тогда
								СпрПр.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
							Иначе
								СпрПр.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(glf_country);
							КонецЕсли;	
				//СпрПр.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(glf_country);
			КонецЕсли;
			СпрПр.Записать();
			МассивПр.Добавить(СпрПр.Ссылка);
		Конеццикла;
	КонецЕсли;
Конецпроцедуры



Функция ВернутьУНИКУМ() Экспорт
	Возврат xmlString(Новый УникальныйИдентификатор())
КонецФункции


Функция НеобходимоДелатьВводВОборот(Объект,ВводВоборот,Эмитировать) Экспорт
	Если Объект.ВвестиВОборотПослеЭмитирования=Истина И Объект.Статус<>Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован Тогда 
		Если Объект.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен
			 ИЛИ Объект.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы
			 ИЛИ Объект.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВПроцессе Тогда
			Эмитировать=1;
			Возврат Истина;
		КонецЕсли;
			
	ИначеЕсли Объект.ВвестиВОборотПослеЭмитирования=Истина И Объект.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован Тогда 
		Если Объект.ВводВОборот.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан Тогда
			Объект_1=Объект.ПолучитьОБъект();
			Объект_1.ВвестиВОборотПослеЭмитирования=ЛОжь;
			Объект_1.Записать(РежимЗаписиДокумента.Запись);
			
			Возврат Ложь;

		Конецесли;
		
		Если ЗначениеЗаполнено(Объект.ВВодВоборот) Тогда
			ВВодВоборот=Объект.ВВодВоборот
		Иначе
			
			Докум=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
			Докум.Заполнить(Объект);
			Докум.Дата=ТекущаяДата();
			Докум.Записать(РежимЗаписиДокумента.Запись);
			Объект_1=Объект.ПолучитьОБъект();
			Объект_1.ВВодВоборот=Докум.Ссылка;
			Объект_1.Записать(РежимЗаписиДокумента.Запись);
			
			ВВодВоборот=докум.Ссылка;
			
		КонецЕсли;
		
		
		Возврат Истина;
	КонецЕсли;
	
	
	Возврат Ложь;
КонецФункции

Функция СоздатьНайтиКонтрагента_Приемка(ЗЗ) Экспорт
	СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",
	ЗЗ.trade_sender_inn);
	Если ЗначениеЗАполнено(СпрК) тогда
		Возврат СпрК.Ссылка;
		//СпрК=СпрК.ПолучитьОбъект();
	Иначе
		СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрК.Наименование=ЗЗ.trade_sender_inn;
	КонецЕсли;
	СпрК.ИНН=ЗЗ.trade_sender_inn;
	СпрК.Записать();
	Возврат СпрК.Ссылка
КонецФункции

Функция СоздатьНайтиКонтрагента_Приемка_Старый(ЗЗ) Экспорт
	СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",
	ЗЗ.sender_inn);
	Если ЗначениеЗАполнено(СпрК) тогда
		//Возврат СпрК.Ссылка;
		СпрК=СпрК.ПолучитьОбъект();
	Иначе
		СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
	КонецЕсли;
	ЗЗ.Свойство("sender",СпрК.Наименование);
	
	СпрК.ИНН=ЗЗ.sender_inn;
	Если Не ЗначениеЗАполнено(СпрК.Наименование) Тогда
		СпрК.Наименование=СпрК.ИНН;
	КонецЕсли;
	СпрК.Записать();
	Возврат СпрК.Ссылка
КонецФункции

Функция РекурсияУпаковки_Приход_Продукция(Стр_children_1) Экспорт
children="";
	
					
	еСЛИ                        Стр_children_1.Свойство("children",children) Тогда
		Для Каждого Стр_children Из children Цикл
			ШтрихКод="";
			Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
				ШтрихКод=Стр_children.uit_code;
				Продукция=СоздатьНайтиGTIN(Стр_children);
				Если ЗначениеЗАполнено(Продукция) тогда
					Возврат Продукция;
				КонецЕсли;
			Иначе
				Продукция=РекурсияУпаковки_Приход_Продукция(Стр_children);
				Если ЗначениеЗАполнено(Продукция) тогда
					Возврат Продукция;
				КонецЕсли;
			КонецЕсли;
						
		КонецЦикла;
	КонецЕсли;
	
	
	
Конецфункции

Функция СоздатьНайтиGTIN_ГТИН(Стр) Экспорт
	
	//Контр=Справочники.ПроизводителиИмпортеры_ХамелеонЦРПТ.
	
	Попытка
		Если Сред(Стр,1,2)="01" Тогда
			ГТИН=Число(Сред(Стр,3,14));
		Иначе
			ГТИН=Число(Сред(Стр,1,14));
		КонецЕсли;
	Исключение
		Возврат Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка()	
	КонецПопытки;
		Спр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(ГТИН));
		Если Спр<>Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка() Тогда
			Спр_1=Спр.ПолучитьОбъект();
		Иначе
			Спр_1=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
			Спр_1.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
		
			Спр_1.GTIN=ГТИН;
			Спр_1.Наименование=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(ГТИН,14,"0");
			Спр_1.НаименованиеТовара=Спр_1.Наименование;
			Спр_1.Записать();;
		КонецЕсли;
		//КонецЕсли;
		Возврат Спр_1.Ссылка
КонецФункции

Функция ОбновитьСтатусДокумента_Приемка(Заказ,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа,ОбновлятьВсе=Ложь,Документ_1=Неопределено,NNN_2=Неопределено,МассивПродукций=Неопределено,ЗагрузатьНаименованиеПриПриемке=Ложь,ЗаполненаТабличнаяЧастьПриемки) Экспорт
	
	ЗаполненаТабличнаяЧастьПриемки=Ложь;
	//Добб.ОшибкаОтправки=Ошибка;
	//Добб.Статус=Статус;
	trade_recipient_inn="";
	Если Заказ=Неопределено тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	Код="";
	Если Заказ.Свойство("code",Код) Тогда
			Возврат Неопределено
	КонецЕсли;
	
		Если ЗначениеЗаполнено(Документ_1) Тогда
			Добб=Документ_1.ПолучитьОбъект();
		Иначе
			
		Если Заказ.body.Свойство("trade_recipient_inn",trade_recipient_inn) Тогда
		
		Организация=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",
		trade_recipient_inn);
		
		        
	Иначе
		
			Организация=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",
		Заказ.body.receiver_inn);
		
		

	КонецЕсли;
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			// Данный фрагмент построен конструктором.
			// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Приемка_ХамелеонЦРПТ.Ссылка
				|ИЗ
				|	Документ.Приемка_ХамелеонЦРПТ КАК Приемка_ХамелеонЦРПТ
				|ГДЕ
				|	Приемка_ХамелеонЦРПТ.Организация = &Организация
				|	И Приемка_ХамелеонЦРПТ.ДокументОтгрузки = &ДокументОтгрузки";
			
			Запрос.УстановитьПараметр("ДокументОтгрузки", Заказ.number);
			Запрос.УстановитьПараметр("Организация", Организация);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			
			Если НЕ  ВыборкаДетальныеЗаписи.Следующий() Тогда
				// Вставить обработку выборки ВыборкаДетальныеЗаписи
			
			//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	      
				Добб_1=ДОкументы.Приемка_ХамелеонЦРПТ.СоздатьДокумент();
				
				//Добб_1.УстановитьСсылкуНового(Добб);
				Добб=Добб_1;
				Добб.Дата=ТекущаяДата();

			Иначе
				Добб=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
				ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ЧастичноПринят
				Тогда
				
				Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
					 ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапистьПриемкку(Добб.Ссылка,Текст1);
					
				Конецесли;
			
				Если Добб.Товары.Количество()>0 Тогда
					Если ОбновлятьВсе=Истина Тогда
						Добб=Добб.Ссылка.ПолучитьОбъект();
					Иначе
						ЗаполненаТабличнаяЧастьПриемки=Добб.ПроверкаПоНомерамКМ.Количество()>0;
						Возврат Добб.Ссылка;
					КонецЕсли;
				Иначе
					Добб=Добб.Ссылка.ПолучитьОбъект();
				КонецЕсли;
			КонецЕсли;
			//Иначе
			//	Добб=Добб.ПолучитьОбъект();
			КонецЕсли;
		КонецЕсли;
		Добб.ДокументОтгрузки=Заказ.number;
		ВидТовар=Неопределено;
		Заказ.body.Свойство("turnover_type",ВидТовар);
		Если ЗначениеЗаполнено(ВидТовар) Тогда
			Добб.ВидТоварооборота=Перечисления.ВидТоварооборота_ХамелеонЦРПТ[ВидТовар];
		КонецЕсли;

		trade_recipient_inn="";
		Если Заказ.body.Свойство("trade_recipient_inn",trade_recipient_inn) Тогда
		
		Добб.Организация=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",
		trade_recipient_inn);
		
		Если Заказ.status="ACCEPTED" Тогда
			Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан;
		ИначеЕсли Заказ.status="CANCELLED" Тогда
			Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ;
		Иначе
			Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента;
		КонецЕсли;
		
		
		Добб.Поставщик=СоздатьНайтиКонтрагента_Приемка(Заказ.body);
		Добб.НомерВходящий=Заказ.body.document_number;
		
	Иначе
		
			Добб.Организация=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",
		Заказ.body.receiver_inn);
		
		Если Заказ.status="ACCEPTED" Тогда
			Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан;
		ИначеЕсли Заказ.status="CANCELLED" Тогда
			Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ;
		Иначе
			Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента;
		КонецЕсли;
		
		
		Добб.Поставщик=СоздатьНайтиКонтрагента_Приемка_Старый(Заказ.body);
		Добб.НомерВходящий=Заказ.body.document_num;
		

	КонецЕсли;
		//Добб.ДатаВходящий=Заказ.body.document_date;
		ДатаДокумента=Заказ.body.document_date;
		Попытка
			Добб.ДатаВходящий=Дата(Сред(ДатаДокумента,1,4),Сред(ДатаДокумента,6,2),Сред(ДатаДокумента,9,2),Сред(ДатаДокумента,12,2),Сред(ДатаДокумента,15,2),Сред(ДатаДокумента,18,2));
		Исключение
		КонецПопытки;
		
		Добб.ТекущийПользователь=Пользователь;
		
		ДатаДокумента=Заказ.body.transfer_date;;
		Попытка
		Добб.ДатаПолуччения=Дата(Сред(ДатаДокумента,1,4),Сред(ДатаДокумента,6,2),Сред(ДатаДокумента,9,2),Сред(ДатаДокумента,12,2),Сред(ДатаДокумента,15,2),Сред(ДатаДокумента,18,2));
	Исключение
	КонецПопытки;
		
		ПринялиВсе=ЛОжь;
		Если NNN_2<>Неопределено Тогда
			
			accept_all=Неопределено;
			Если NNN_2.Свойство("accept_all",accept_all) тогда
				Если	 accept_all=Истина Тогда
					ПринялиВсе=Истина;
					//Для Каждого Стр_1 Из Добб.СерийныеНомера Цикл
						//	Стр_1.Принят=Истина;
							
					//Конеццикла
				КонецЕсли;
			КонецЕсли;
			Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан;
		КонецЕсли;
	
		
	Если НЕ (ПринялиВсе=Истина И Добб.СерийныеНомера.Количество()>0) Тогда
	
		
		Добб.Товары.Очистить();
		Добб.СерийныеНомера.Очистить();
		
		//Добб.Короба.Очистить();
		
		Сч=0;
		
		
		
		
//	Если   Заказ.type="LP_SHIP_GOODS_CSV" Тогда

		Для Каждого Стр_з из ЗАказ.body.products Цикл
				Продукция=СоздатьНайтиGTIN(Стр_з);
				
				Если Не ЗначениеЗаполнено(Продукция) Тогда
					children="";
					еСЛИ               Стр_з.Свойство("children",children) Тогда
						Для Каждого Стр_children Из children Цикл
							ШтрихКод="";
							Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
								//ШтрихКод=Стр_children.uit_code;
								Продукция=СоздатьНайтиGTIN(Стр_children);
								Если ЗначениеЗАполнено(Продукция) тогда
									Прервать;
								КонецЕсли;
									
							Иначе
								Продукция=РекурсияУпаковки_Приход_Продукция(Стр_children);
								Если ЗначениеЗаполнено(Продукция) Тогда
									Прервать;
								КонецЕслИ;
							КонецЕсли;
							//ДобавК.КоличестоКМ=НСтр.КоличествоНомеровКМ;
							
						КонецЦикла;
					КонецЕсли;
			КонецЕсли;
			
			
Если Не ЗначениеЗаполнено(Продукция) И
				Добб.Короба.Количество() > 0 
				тогда
				
				    cis="";
				uit_code="";
				
				Упаковка=ложь;
				Если Стр_з.Свойство("uit_code",uit_code) И ЗначениеЗаполнено(uit_code) тогда
					cis=uit_code;
				Иначе
					Упаковка=Истина;
					cis=Стр_з.uitu_code;
					
				КонецЕсли;
					

				
				ГТИН="00000000000000";
				
				
				
				/////ТУТ РЕКУРСИЮ НЕОБХОДИМО СДЕЛАТЬ!!!
				
				Нстроки=Добб.Короба.НайтиСтроки(Новый Структура("НомерКороба",cis));
				Если НСтроки.Количество()=0 Тогда
					Если Упаковка=Ложь Тогда
						ГТИН=ДополнитьСтроку(Сред(cis,3,14))
					КонецЕсли;
				Иначе
					Для Каждого Стр_11_Н Из НСтроки Цикл
						Если Стр_11_Н.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука Тогда
							ГТИН=ДополнитьСтроку(Сред(Стр_11_Н.ШтрихКод,3,14));
							Прервать;
						Иначе
									
									НстрокиИщемТут=Добб.Короба.НайтиСтроки(Новый Структура("НомерКороба",Стр_11_Н.ШтрихКод));
										Если НстрокиИщемТут.Количество()=0 Тогда
										Иначе
											Для Каждого Стр_11_Н_2 Из НстрокиИщемТут Цикл
												Если Стр_11_Н_2.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука Тогда
													ГТИН=ДополнитьСтроку(Сред(Стр_11_Н_2.ШтрихКод,3,14));
													Прервать;
													
						КонецЕсли;
						
					КонецЦикла
					
				КонецЕсли;
				
										Если ГТИН<>"00000000000000" Тогда
											Прервать;
										КонецЕсли;
									
									
									
									
								КонецЕсли;
								
							КонецЦикла
							
							
							
						КонецЕсли;
				//Проудкция=Неопределено;
				Продукция=ПредопределенноеЗначение("Справочник.Продукция_ХамелеонЦРПТ.ПустаяСсылка");
				Если ГТИН<>"00000000000000" Тогда
					Продукция=СоздатьНайтиGTIN_Cnhjrf(ГТИН);
				КонецЕсли;
				
				
				
				
			КонецЕсли;
			
			ДобавилиПр=Ложь;
			   	Добав=Добб.СерийныеНомера.Добавить();
				стр_З.Свойство("product_cost",Добав.Цена);
				Если Найти(Добав.Цена,",")=0 И Найти(Добав.Цена,".")=0 Тогда
					Добав.Цена=Добав.Цена/100;
				КонецЕсли;	
			
				
			Если ЗначениеЗАполнено(Продукция) тогда
				product_description=Строка(Продукция);
				НСтр=Добб.Товары.НайтиСтроки(Новый Структура("GTIN,цена",Продукция,Добав.Цена));
				Если НСтр.Количество()=0 Тогда
					НСТр=Добб.Товары.Добавить();
					НСтр.GTIN=Продукция;
					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
				Иначе
					НСТР=НСТР[0];
					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
				КонецЕсли;
				НСТр.НаименованиеТовара=Продукция.Наименование;
				ДобавилиПр=Истина;
			Иначе
				product_description="НЕТ";
				еСЛИ                        Стр_з.Свойство("product_description",product_description) Тогда
					
				Иначе
					children="";
					еСЛИ                        Стр_з.Свойство("children",children) Тогда
						Для Каждого Стр_children Из children Цикл
							                                                                       product_description="";
								еСЛИ                   Стр_children.Свойство("product_description",product_description) Тогда
								//	НСТр=Добб.Товары.Добавить();
								//	НСТр.НаименованиеТовара=product_description;
								//	НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
									Прервать;
								КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
					
				КонецЕсли;
				
				НСтр=Добб.Товары.НайтиСтроки(Новый Структура("НаименованиеТовара,Цена",product_description,Добав.Цена));
				Если НСтр.Количество()=0 Тогда
				
					НСТр=Добб.Товары.Добавить();
					НСТр.НаименованиеТовара=product_description;
					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
				Иначе
					НСТР=НСТР[0];
					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
				КонецЕсли;
				
			КонецЕслИ;
			КоличествоКМ=0;
					children="";
					еСЛИ                        Стр_з.Свойство("children",children) Тогда
						Для Каждого Стр_children Из children Цикл
							ШтрихКод="";
							Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
								ШтрихКод=Стр_children.uit_code;
								
								Если Добб.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Стр_З.uitu_code,ШтрихКод)).Количество()=0 Тогда
								
									
									ДобавК=Добб.Короба.Добавить();
									ДобавК.НомерКороба=Стр_З.uitu_code;
									ДобавК.ШтрихКод=ШтрихКод;
									
								КонецЕсли;
								КоличествоКМ=КоличествоКМ+1;
								НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
							Иначе
								Если Добб.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Стр_З.uitu_code,ШтрихКод)).Количество()=0 Тогда
									ДобавК=Добб.Короба.Добавить();
									ДобавК.НомерКороба=Стр_З.uitu_code;
									ДобавК.ШтрихКод=ШтрихКод;
								КонецЕсли;					
								РекурсияУпаковки_Приход(Стр_children,НСтр,Добб,КоличествоКМ);
							КонецЕсли;
							
							//ДобавК.КоличестоКМ=НСтр.КоличествоНомеровКМ;
							
						КонецЦикла;
					Иначе
						НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
						КоличествоКМ=1;
					КонецЕсли;

			
				Добав.КоличествоКМ=КоличествоКМ;
				Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
				//Если Заказ.type="LP_SHIP_GOODS" Тогда
				//Добав.Цена=Стр_з.product_cost;
				//=Стр_з.product_tax;
				стр_З.Свойство("product_tax",Добав.НДС);
				//Если Заказ.type="LP_SHIP_GOODS" Тогда
				Если Найти(Добав.НДС,",")=0 И Найти(Добав.НДС,".")=0 Тогда
					Добав.НДС=Добав.НДС/100;
				КонецЕсли;
				//КонецЕсли;
				Добав.НаименованиеТовараСтрокой=НСТр.НаименованиеТовара;
				uit_code="";
				Если Стр_з.Свойство("uit_code",uit_code) И ЗначениеЗаполнено(uit_code) тогда
					Добав.cis=uit_code;
					Добав.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука;
					Добав.GTIN=Сред(Добав.cis,3,14);
				Иначе
					Добав.cis=Стр_з.uitu_code;
					Добав.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка;
					Добав.НомерКороба=Стр_з.uitu_code;
					
				КонецЕсли;
				Добав.НаименованиеТовара=Продукция;
				Если ЗначениеЗаполнено(Продукция)   Тогда
					Добав.GTIN=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(Добав.НаименованиеТовара.GTIN),14,"0");
				КонецЕсли;
				Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан Тогда
					Добав.Принят=Истина;
				Иначе
					Добав.Принят=Ложь;
				КонецЕсли;
				Попытка
				Если NNN_2<>Неопределено Тогда
					accepted=Неопределено;
					Если NNN_2.products[Сч].Свойство("accepted",accepted) Тогда
						Если accepted="true" ИЛИ accepted=Истина Тогда
							Добав.Принят=Истина;
						Иначе
							Добав.Принят=Ложь;
							
						КонецЕсли;
					Иначе
						Добав.Принят=Ложь;
					Конецесли;
					Сч=Сч+1;
				Конецесли;
			Исключение
				КонецПопытки;
				НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
				НСтр.Сумма=НСтр.Сумма+Добав.цена;
				НСтр.НДС=НСтр.НДС+Добав.НДС;
				НСтр.Цена=НСТР.Сумма/НСтр.КОличествоКМ;
				
				
				
			Конеццикла;
		
			
//		Конецесли;
		
	//КонецЕсли;

Сч=0;		

//Если ПринялиВсе=Истина И Добб.СерийныеНомера.Количество()>0 Тогда
		
Если Добб.ЧастичныйОтказ.Количество()>0 ТОгда
	Для Каждого Стр_1 Из Добб.СерийныеНомера Цикл
		Стр_1.Принят=ложь;
	Конеццикла;
	Для Каждого СТр_222 Из Добб.ЧастичныйОтказ Цикл
		НСтроку=Добб.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Стр_222.cis));
		Если НСтроку.Количество()=0 Тогда
			СтрСтарая=Добб.СерийныеНомера.Найти(Стр_222.ПервыйУровень,"cis");
			Если     СтрСтарая=Неопределено тогда
				Добаввввв=Добб.СерийныеНомера.Добавить();
				Добаввввв.cis=Стр_222.cis;
				Добаввввв.Принят=Стр_222.Принят;
				Добаввввв.ТипУпаковки=Стр_222.ТипУпаковки;
				
			Иначе
				Добаввввв=Добб.СерийныеНомера.Добавить();
				ЗаполнитьЗначенияСвойств(Добаввввв,СтрСтарая);
				Добаввввв.cis=Стр_222.cis;
				Добаввввв.Принят=Стр_222.Принят;
				Добаввввв.ТипУпаковки=Стр_222.ТипУпаковки;
			Конецесли;
		Иначе
			Для Каждого Стр_11223 Из НСтроку Цикл
				Стр_11223.Принят=Стр_222.Принят
				
			КонецЦикла;
		КонецЕслИ;
		
		
		
	Конеццикла;
	
	
	
ИначеЕсли   ложь И Заказ.type="LP_SHIP_GOODS_CSV" Тогда
		
		
		Текст=Новый ТекстовыйДокумент;
		Текст.УстановитьТекст(Заказ.content);
		
		//ГрузимКМ=Ложь;
		
		Для сч_2=5 По Текст.КоличествоСтрок() Цикл
			СтрокаТ=Текст.ПолучитьСтроку(Сч_2);
			Если Сред(СтрокаТ,1,1)="""" Тогда
				ШтрихКод=СтрЗаменить(Сред(СтрокаТ,2),"""""",Символ(29));
				ШтрихКод=Сред(ШтрихКод,1,Найти(ШтрихКод,"""")-1);
				ШтрихКод=Стрзаменить(Штрихкод,Символ(29),"""");
				СтрокаТ=СтрЗаменить(Сред(СтрокаТ,2),"""""",Символ(29));
				СтрокаТ=Сред(СтрокаТ,Найти(СтрокаТ,"""")+2);
			Иначе
				ШтрихКод=Сред(СтрокаТ,1,Найти(СтрокаТ,",")-1);
				СтрокаТ=Сред(СтрокаТ,Найти(СтрокаТ,",")+1);
			КонецЕсли;
			Марка=Неопределено;
			Если ЗначениеЗаполнено(ШтрихкОД) Тогда
				Марка=ШтрихкОД;
				
			КонецЕсли;
			
			НомерБбокса=Сред(СтрокаТ,1,Найти(СтрокаТ,",")-1);
			
			Попытка
				СтрокаТ=Сред(СтрокаТ,Найти(СтрокаТ,",")+1);
				Цена=Сред(СтрокаТ,1,Найти(СтрокаТ,",")-1);
				Цена=СтрЗаменить(Цена,"""","");
				Цена=СтрЗаменить(Цена,",",".");
				Пока Найти(Цена,".")>0 Цикл
					СуммаНДПроверка=Сред(Цена,Найти(Цена,".")+1);
					Если Найти(СуммаНДПроверка,".")=0 Тогда
						Прервать;
					КонецЕсли;
					
					СуммаНДСПроверка=Сред(Цена,1,Найти(Цена,".")-1);
					Цена=СуммаНДСПроверка+Сред(Цена,Найти(Цена,".")+1);
						
					
				Конеццикла;
				Если Найти(Цена,".")=0 И Найти(Цена,",")=0 Тогда
					Цена=Цена/100;
				КонецЕсли;
			исключение
				
				Сообщить("Не удалось получить цену");
			КонецПопытки;
			
			Если ЗначениеЗаполнено(Цена) Тогда
				Цена=Число(Цена);
			Иначе
				Цена=0;
			КонецЕсли;
			
			
			 //Цена=Число(СтрЗаменить(Сред(СтрокаТ,1,Найти(СтрокаТ,"""")-1),",","."));
			 СтрокаТ=Сред(СтрокаТ,Найти(СтрокаТ,",")+1);
			 
			 СуммаНДС=СтрокаТ;
			СуммаНДС=СтрЗаменить(СуммаНДС,"""","");
			СуммаНДС=СтрЗаменить(СуммаНДС,",",".");
			Попытка
			
			Пока Найти(СуммаНДС,".")>0 Цикл
				СуммаНДПроверка=Сред(СуммаНДС,Найти(СуммаНДС,".")+1);
				Если Найти(СуммаНДПроверка,".")=0 Тогда
					Прервать;
				КонецЕсли;
				СуммаНДСПроверка=Сред(СуммаНДС,1,Найти(СуммаНДС,".")-1);
				СуммаНДС=СуммаНДСПроверка+Сред(СуммаНДС,Найти(СуммаНДС,".")+1);

				
			Конеццикла;
			Если Найти(СуммаНДС,".")=0 И Найти(СуммаНДС,",")=0 Тогда
				СуммаНДС=СуммаНДС/100;
			КонецЕсли;
			
			
			 ЕСли ЗначениеЗаполнено(СуммаНДС) Тогда
				 
			 	СуммаНДС=Число(СуммаНДС);
			Иначе
				СуммаНДС=0;
			КонецЕсли;
			 
		Исключение
			Сообщить("Не удалось получить НДС");
		КонецПопытки;
			     Продукция=Неопределено;
			 Если ЗначениеЗаполнено(Марка) Тогда
				 Продукция=СоздатьНайтиGTIN_ГТИН(Марка);
				 ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука;
			

			 Иначе
				 Марка=НомерБбокса ;
				 		ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка;
			
						КонецЕсли;
						
						
						Строки=Добб.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Марка));
						
						Если Строки.Количество()>0 Тогда
							
							
							Добав=Строки[0];
				Попытка
				Если NNN_2<>Неопределено Тогда
					accepted=Неопределено;
					Если NNN_2.products[Сч].Свойство("accepted",accepted) Тогда
						Если accepted="true" ИЛИ accepted=Истина Тогда
							Добав.Принят=Истина;
						Иначе
							Добав.Принят=Ложь;
							
						КонецЕсли;
					Иначе
						Добав.Принят=Ложь;
					Конецесли;
					Сч=Сч+1;
				Конецесли;
			Исключение
				КонецПопытки;						
										
							
							
							Продолжить;
						КонецЕсли;
						
	Добав=Добб.СерийныеНомера.Добавить();
				Добав.Цена=Цена;
				
				Добав.ТипУпаковки=ТипУпаковки;
			Если ЗначениеЗАполнено(Продукция) тогда
				product_description=Строка(Продукция);
				НСтр=Добб.Товары.НайтиСтроки(Новый Структура("GTIN,Цена",Продукция,Добав.Цена));
				Если НСтр.Количество()=0 Тогда
					НСТр=Добб.Товары.Добавить();
					НСтр.GTIN=Продукция;
					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
				Иначе
					НСТР=НСТР[0];
					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
				КонецЕсли;
				НСТр.НаименованиеТовара=Продукция.Наименование;
				НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
									
			Иначе
				product_description="";
				//еСЛИ                        Стр_з.Свойство("product_description",product_description) Тогда
					НСТр=Добб.Товары.Добавить();
					НСТр.НаименованиеТовара=Марка;
					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
								
			КонецЕслИ;
			КоличествоКМ=0;
					children="";
						
				Добав.КоличествоКМ=КоличествоКМ;
				Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
				//Добав.Цена=Стр_з.product_cost;
				//=Стр_з.product_tax;
					Добав.НДС=СуммаНДС;
				Добав.НаименованиеТовараСтрокой=НСТр.НаименованиеТовара;
					Добав.cis=Марка;
					Добав.GTIN=Сред(Марка,3,14);
				Добав.НаименованиеТовара=Продукция;
				Если ЗначениеЗаполнено(Продукция)   Тогда
					Добав.GTIN=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(Добав.НаименованиеТовара.GTIN),14,"0");
				КонецЕсли;
				//Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан Тогда
				//	Добав.Принят=Истина;
				//Иначе
					//Добав.Принят=Ложь;
				//КонецЕсли;
				Попытка
				Если NNN_2<>Неопределено Тогда
					accepted=Неопределено;
					Если NNN_2.products[Сч].Свойство("accepted",accepted) Тогда
						Если accepted="true" ИЛИ accepted=Истина Тогда
							Добав.Принят=Истина;
						Иначе
							Добав.Принят=Ложь;
							
						КонецЕсли;
					Иначе
						Добав.Принят=Ложь;
					Конецесли;
					Сч=Сч+1;
				Конецесли;
			Исключение
				КонецПопытки;
				НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
				НСтр.Сумма=НСтр.Сумма+Добав.цена;
				НСтр.НДС=НСтр.НДС+Добав.НДС;
				НСтр.Цена=НСТР.Сумма/НСтр.КОличествоКМ;
				
				
						
		Конеццикла;
	ИначеЕсли Ложь И    Заказ.type="LP_SHIP_GOODS_XML" Тогда
		               ТипУпаковки=Неопределено;
		
				          Чтен=Новый ЧтениеXML;
					    Чтен.УстановитьСтроку(Заказ.content);
						Пока Чтен.Прочитать() Цикл
							
							Если Чтен.Имя="product" 
								И ЧТен.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
								Если ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука Тогда
				 Продукция=СоздатьНайтиGTIN_ГТИН(Марка);
				 КонецЕсли;
								
						
						Строки=Добб.СерийныеНомера.НайтиСтроки(Новый Структура("cis",Марка));
						
						Если Строки.Количество()>0 Тогда
							
							
							Добав=Строки[0];
							
				Попытка
				Если NNN_2<>Неопределено Тогда
					accepted=Неопределено;
					Если NNN_2.products[Сч].Свойство("accepted",accepted) Тогда
						Если accepted="true" ИЛИ accepted=Истина Тогда
							Добав.Принят=Истина;
						Иначе
							Добав.Принят=Ложь;
							
						КонецЕсли;
					Иначе
						Добав.Принят=Ложь;
					Конецесли;
					Сч=Сч+1;
				Конецесли;
			Исключение
				КонецПопытки;						
										
							
							
							Продолжить;
						КонецЕсли;
						
							Добав=Добб.СерийныеНомера.Добавить();
											Добав.Цена=Цена;
										
										Если ЗначениеЗАполнено(Продукция) тогда
											product_description=Строка(Продукция);
											НСтр=Добб.Товары.НайтиСтроки(Новый Структура("GTIN,Цена",Продукция,Добав.Цена));
											Если НСтр.Количество()=0 Тогда
												НСТр=Добб.Товары.Добавить();
												НСтр.GTIN=Продукция;
												НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
											Иначе
												НСТР=НСТР[0];
												НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
											КонецЕсли;
											НСТр.НаименованиеТовара=Продукция.Наименование;
											НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
																
										Иначе
											product_description="";
											//еСЛИ                        Стр_з.Свойство("product_description",product_description) Тогда
												НСТр=Добб.Товары.Добавить();
												НСТр.НаименованиеТовара=Марка;
												НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
															
										КонецЕслИ;
										КоличествоКМ=0;
												children="";
													
											Добав.КоличествоКМ=КоличествоКМ;
											Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
											
											
											
											//Добав.Цена=Стр_з.product_cost;
											//=Стр_з.product_tax;
												Добав.НДС=СуммаНДС;
											Добав.НаименованиеТовараСтрокой=НСТр.НаименованиеТовара;
												Добав.cis=Марка;
												Добав.ТипУпаковки=ТипУпаковки;
												Добав.GTIN=Сред(Марка,3,14);
											Добав.НаименованиеТовара=Продукция;
											Если ЗначениеЗаполнено(Продукция)   Тогда
												Добав.GTIN=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(Добав.НаименованиеТовара.GTIN),14,"0");
											КонецЕсли;
											//Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан Тогда
											//	Добав.Принят=Истина;
											//Иначе
												//Добав.Принят=Ложь;
											//КонецЕсли;
											Попытка
					Если NNN_2.products[Сч].Свойство("accepted",accepted) Тогда
						Если accepted="true" ИЛИ accepted=Истина Тогда
							Добав.Принят=Истина;
						Иначе
							Добав.Принят=Ложь;
							
						КонецЕсли;
					Иначе
						Добав.Принят=Ложь;
					Конецесли;
										Исключение
											КонецПопытки;
											НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
											НСтр.Сумма=НСтр.Сумма+Добав.цена;
											НСтр.НДС=НСтр.НДС+Добав.НДС;
											НСтр.Цена=НСТР.Сумма/НСтр.КОличествоКМ;
											
								Цена=0;
								СуммаНДС=0;
							КонецЕсли;
							
							
							Если Чтен.Имя="product" 
								И ЧТен.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
								Чтен.Прочитать();
								Если Чтен.Имя="ki" Тогда
									ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука;
								КонецЕслИ;
								Если Чтен.Имя="kitu" Тогда
									ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка;
								КонецЕслИ;
								
								Чтен.Прочитать();
								Марка=Чтен.Значение;
								Чтен.Прочитать();
							КонецЕсли;
							
							Если Чтен.Имя="cost" 
								И ЧТен.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
								
								//Чтен.Прочитать();
								Чтен.Прочитать();
								Цена=Чтен.Значение;
				Если Найти(Цена,",")=0 И Найти(Цена,".")=0 Тогда
					Цена=Цена/100;
				КонецЕсли;	
								
							КонецЕсли;
							Если Чтен.Имя="vat_value" 
								И ЧТен.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
							
								
								Чтен.Прочитать();
								СуммаНДС=Чтен.Значение;
				Если Найти(СуммаНДС,",")=0 И Найти(СуммаНДС,".")=0 Тогда
					СуммаНДС=СуммаНДС/100;
				КонецЕсли;	
								
							КонецЕсли;
						Конеццикла;
						  
					


	
	
	
Иначе             //////JSON
		
		
		
		//Текст=Новый ТекстовыйДокумент;
		//Текст.УстановитьТекст(Заказ.content);
		
		content=Неопределено;
		Если 
			Заказ.type="LP_SHIP_GOODS" И
			ЗАказ.Свойство("content",content) Тогда
			NNN= ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(content);
		Иначе
			NNN=Заказ.body;
		Конецесли;
		//||
		
		
		//ГрузимКМ=Ложь;
		
		Для Каждого Стр_з из NNN.products Цикл
			  uit_code="";
			  cis="";
				Если Стр_з.Свойство("uit_code",uit_code) тогда
					cis=uit_code;
				//Иначе
				//	cis=Стр_з.uitu_code;
					
				КонецЕсли;
				Если Не ЗначениеЗаполнено(cis) Тогда
					
					cis=Стр_з.uitu_code;
				КонецЕсли;
				
						
						Строки=Добб.СерийныеНомера.НайтиСтроки(Новый Структура("cis",cis));
						
						Если Строки.Количество()>0 Тогда
							
							
							Добав=Строки[0];
				Попытка
				Если NNN_2<>Неопределено Тогда
					accepted=Неопределено;
					Если NNN_2.products[Сч].Свойство("accepted",accepted) Тогда
						Если accepted="true" ИЛИ accepted=Истина Тогда
							Добав.Принят=Истина;
						Иначе
							Добав.Принят=Ложь;
							
						КонецЕсли;
					Иначе
						Добав.Принят=Ложь;
					Конецесли;
					Сч=Сч+1;
				Конецесли;
			Исключение
				КонецПопытки;						
										
							
							
							Продолжить;
						КонецЕсли;
			
			
				Продукция=СоздатьНайтиGTIN(Стр_з);
				
				Если Не ЗначениеЗаполнено(Продукция) Тогда
					children="";
					еСЛИ               Стр_з.Свойство("children",children) Тогда
						Для Каждого Стр_children Из children Цикл
							ШтрихКод="";
							Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
								//ШтрихКод=Стр_children.uit_code;
								Продукция=СоздатьНайтиGTIN(Стр_children);
								Если ЗначениеЗАполнено(Продукция) тогда
									Прервать;
								КонецЕсли;
									
							Иначе
								Продукция=РекурсияУпаковки_Приход_Продукция(Стр_children);
								Если ЗначениеЗаполнено(Продукция) Тогда
									Прервать;
								КонецЕслИ;
							КонецЕсли;
							//ДобавК.КоличестоКМ=НСтр.КоличествоНомеровКМ;
							
						КонецЦикла;
					КонецЕсли;
			КонецЕсли;
				
Добав=Добб.СерийныеНомера.Добавить();
				стр_З.Свойство("product_cost",Добав.Цена);
				Если Найти(Добав.Цена,",")=0 И Найти(Добав.Цена,".")=0 Тогда
					Добав.Цена=Добав.Цена/100;
				КонецЕсли;	
							
				
			Если ЗначениеЗАполнено(Продукция) тогда
				product_description=Строка(Продукция);
				НСтр=Добб.Товары.НайтиСтроки(Новый Структура("GTIN,Цена",Продукция,Добав.Цена));
				Если НСтр.Количество()=0 Тогда
					НСТр=Добб.Товары.Добавить();
					НСтр.GTIN=Продукция;
					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
				Иначе
					НСТР=НСТР[0];
					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
				КонецЕсли;
				НСТр.НаименованиеТовара=Продукция.Наименование;
				
			Иначе
				product_description="НЕТ";
				еСЛИ                        Стр_з.Свойство("product_description",product_description) Тогда
				Иначе
					children="";
					еСЛИ                        Стр_з.Свойство("children",children) Тогда
						Для Каждого Стр_children Из children Цикл
							                                                                       product_description="";
								еСЛИ                   Стр_children.Свойство("product_description",product_description) Тогда
									//НСТр=Добб.Товары.Добавить();
									//НСТр.НаименованиеТовара=product_description;
									//НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
									Прервать;
								КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
					
				КонецЕсли;
				
				НСтр=Добб.Товары.НайтиСтроки(Новый Структура("НаименованиеТовара,Цена",product_description,Добав.Цена));
				Если НСтр.Количество()=0 Тогда
					НСТр=Добб.Товары.Добавить();
					НСТр.НаименованиеТовара=product_description;
					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
				Иначе
					НСТР=НСТР[0];
					НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
				КонецЕсли;
				
			КонецЕслИ;
			КоличествоКМ=0;
					children="";
					еСЛИ                        Стр_з.Свойство("children",children) Тогда
						Для Каждого Стр_children Из children Цикл
							
							ШтрихКод="";
							Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
								ШтрихКод=Стр_children.uit_code;
									
								Если Добб.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Стр_З.uitu_code,ШтрихКод)).Количество()=0 Тогда
							
									ДобавК=Добб.Короба.Добавить();
									ДобавК.НомерКороба=Стр_З.uitu_code;
									ДобавК.ШтрихКод=ШтрихКод;
									
									
								КонецЕслИ;
															
								КоличествоКМ=КоличествоКМ+1;
								НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
							Иначе
								Если Добб.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Стр_З.uitu_code,ШтрихКод)).Количество()=0 Тогда
							
									ДобавК=Добб.Короба.Добавить();
									ДобавК.НомерКороба=Стр_З.uitu_code;
									ДобавК.ШтрихКод=ШтрихКод;
									
									
								КонецЕслИ;
															
								
								РекурсияУпаковки_Приход(Стр_children,НСтр,Добб,КоличествоКМ);
							КонецЕсли;
							//ДобавК.КоличестоКМ=НСтр.КоличествоНомеровКМ;
							
						КонецЦикла;
					Иначе
						НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
						КоличествоКМ=1;
					КонецЕсли;

			
				Добав.КоличествоКМ=КоличествоКМ;
				Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
				//Добав.Цена=Стр_з.product_cost;
				//=Стр_з.product_tax;
				стр_З.Свойство("product_tax",Добав.НДС);
				Если Найти(Добав.НДС,",")=0 И Найти(Добав.НДС,".")=0 Тогда
					Добав.НДС=Добав.НДС/100;
				КонецЕсли;	
				Добав.НаименованиеТовараСтрокой=НСТр.НаименованиеТовара;
				uit_code="";
				Если Стр_з.Свойство("uit_code",uit_code) И ЗначениеЗаполнено(uit_code) тогда
					Добав.cis=uit_code;
					Добав.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Штука;
					Добав.GTIN=Сред(Добав.cis,3,14);
				Иначе
					Добав.cis=Стр_з.uitu_code;
					Добав.НомерКороба=Стр_з.uitu_code;
					Добав.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка;
					
				КонецЕсли;
				Добав.НаименованиеТовара=Продукция;
				Если ЗначениеЗаполнено(Продукция)   Тогда
					Добав.GTIN=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(Добав.НаименованиеТовара.GTIN),14,"0");
				КонецЕсли;
				//Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан Тогда
				//	Добав.Принят=Истина;
				//Иначе
				//	Добав.Принят=Ложь;
				//КонецЕсли;
				
				
				Попытка
					Если NNN_2.products[Сч].Свойство("accepted",accepted) Тогда
						Если accepted="true" ИЛИ accepted=Истина Тогда
							Добав.Принят=Истина;
						Иначе
							Добав.Принят=Ложь;
							
						КонецЕсли;
					Иначе
						Добав.Принят=Ложь;
					Конецесли;
					Сч=Сч+1;
					
			Исключение
				КонецПопытки;
				НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
				НСтр.Сумма=НСтр.Сумма+Добав.цена;
				НСтр.НДС=НСтр.НДС+Добав.НДС;
				НСтр.Цена=НСТР.Сумма/НСтр.КОличествоКМ;
				
				
				
			Конеццикла;
		
		
		
	КонецЕсли;
КонецЕсли;
	
	Если ПринялиВсе=Истина Тогда
		Для Каждого Стр_1 Из Добб.СерийныеНомера Цикл
			Стр_1.Принят=Истина;
		Конеццикла
	КонецЕсли;
	

	
	Если ЗагрузатьНаименованиеПриПриемке Тогда
				
		МассивПродукций=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСледющийМассив(Добб.Ссылка) 			
				
		
	КОнецЕсли;
	
	
	Если Добб.Короба.Количество()>0 Тогда
		Для Каждого Стр_2 Из Добб.Товары Цикл
			Стр_2.КоличествоНомеровКМ=0;
		Конеццикла;
		
		
		Для Каждого Стр_1 Из Добб.СерийныеНомера Цикл
			
			
			
			Нтовары=Добб.Товары.Найти(Стр_1.НомерСтрокиСвязи,"НомерСтрокиСвязи");
			
			cisбыл=Новый Массив;
			cisбыл.Очистить();
			РекурсиюДелаемПоПодсчетамКоличествуКМ(НТовары,Стр_1.cis,Добб,cisбыл);
			
						//	
			//РекурсияПоТабличнойЧАстиСерийныеНомера(Добб,);
			
		Конеццикла;
		
	КонецЕслИ;
	
	
	
	
	Добб.Записать();
	Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
		ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ЧастичноПринят
		
		Тогда
		Попытка
			Добб.ПометкаУдаления=Ложь;
			Добб.Записать(РежимЗаписиДокумента.Проведение) 
		Исключение
		КонецПопытки;
	КонецЕсли;
				Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапистьПриемкку(Добб.Ссылка,Текст1);
				
			Конецесли;
		ЗаполненаТабличнаяЧастьПриемки=Добб.ПроверкаПоНомерамКМ.Количество()>0;

	Возврат Добб.Ссылка;
Конецфункции

Процедура РекурсиюДелаемПоПодсчетамКоличествуКМ(НТовары,cis,Добб,cisбыл)
	НСтр=Добб.Короба.НайтиСтроки(Новый Структура("НомерКороба",cis));
	Если НСтр.Количество()=0 Или cisбыл.Найти(cis)<>Неопределено Тогда
		Нтовары.КоличествоНомеровКМ=Нтовары.КоличествоНомеровКМ+1;
	Иначе
		cisбыл.Добавить(cis);
		Для Каждого Стр_22 Из НСтр Цикл
			РекурсиюДелаемПоПодсчетамКоличествуКМ(НТовары,Стр_22.ШтрихКод,Добб,cisбыл)
			
		Конеццикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИнформациюПоПриемке(НадоПринять) Экспорт
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Приемка_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Документ.Приемка_ХамелеонЦРПТ КАК Приемка_ХамелеонЦРПТ
		|ГДЕ
		|	Приемка_ХамелеонЦРПТ.Организация.ИНН = &ИНН
		|	И Приемка_ХамелеонЦРПТ.ДокументОтгрузки = &ДокументОтгрузки";
	
	Запрос.УстановитьПараметр("ДокументОтгрузки", НадоПринять.Ордер);
	Запрос.УстановитьПараметр("ИНН", НадоПринять.ИНН);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Накладная=Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Накладная=ВыборкаДетальныеЗаписи.Ссылка;
		Статус=ВыборкаДетальныеЗаписи.Ссылка.Статус;
		Если Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
			ИЛИ  
			Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ЧастичноПринят
			ИЛИ
			Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ЧерновикОбработан
			Тогда
			 	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			// Данный фрагмент построен конструктором.
			// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Отгрузка_ХамелеонЦРПТ.Ссылка
				|ИЗ
				|	Документ.Отгрузка_ХамелеонЦРПТ КАК Отгрузка_ХамелеонЦРПТ
				|ГДЕ
				|	Отгрузка_ХамелеонЦРПТ._Order_ID = &_Order_ID
				|	И Отгрузка_ХамелеонЦРПТ.Организация.ИНН = &ИНН";
			
			Запрос.УстановитьПараметр("_Order_ID", НадоПринять.Ордер);
			Запрос.УстановитьПараметр("ИНН", НадоПринять.ИНН);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				// Вставить обработку выборки ВыборкаДетальныеЗаписи
				Докумтгр=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				Докумтгр.НадоПринять=ложь;
				Докумтгр.Записать();
			КонецЦикла;
			
			//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

			
			
			
			Возврат Неопределено;
			
		Конецесли;
		
	КонецЦикла;
	
	
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Пользователи_ХамелеонЦРПТ КАК Пользователи_ХамелеонЦРПТ
		|ГДЕ
		|	Пользователи_ХамелеонЦРПТ.Организация.ИНН = &ИНН
		|	И Пользователи_ХамелеонЦРПТ.СайтыВходаВСистему.Наименование = ""Обувь""";
	
	Запрос.УстановитьПараметр("ИНН", НадоПринять.ИНН);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Thumbprint_1=Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Пользователь=ВыборкаДетальныеЗаписи.Ссылка;
		Thumbprint_1=Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(Пользователь);
		Прервать;
	КонецЦикла;
	Если Thumbprint_1=Неопределено тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	СтруктураПр=Новый Структура;
	СтруктураПр.Вставить("Thumbprint_1",Thumbprint_1);
	СтруктураПр.Вставить("Приемка",надоПринять.Ордер);
	СтруктураПр.Вставить("Пользователь",Пользователь);

	ПринятьИстина=Ложь;
	Если ЗначениеЗаполнено(Накладная) Тогда
		СтруктураПр.Вставить("Приемка",Накладная.Ссылка);
		Если ЗначениеЗаполненО(Накладная._Order_ID) Тогда
			СтруктураПр.Вставить("ТолькоПринять","Статус");
			СтруктураПр.Вставить("Приемка_Ответ",Накладная._Order_ID);
		КонецЕсли;
		ПринятьИстина=Истина;
	КонецЕсли;
	
	
	Если ПринятьИстина=Истина Тогда
		СтруктураПр.Вставить("ТолькоПринять",Истина);
		
	Иначе
		СтруктураПр.Вставить("ТолькоПринять",Ложь);
		
	КонецЕсли;

	
	Возврат СтруктураПр
	
Конецфункции


Функция ОбновитьСтатусДокумента_Отгрузка_УПД(Заказ,Пользователь,Текст1,Документ_1) Экспорт
	
	
	Если Заказ=Неопределено тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
//	Код="";
//	Если Заказ.Свойство("code",Код) Тогда
//			Возврат Неопределено
//	КонецЕсли;
	
			Добб=Документ_1.ПолучитьОбъект();
		Добб.СтатусУПД=перечисления.СтатусыУПД_ХамелеонЦРПТ[Заказ.status];
Добб.ЗаписатЬ();
	Возврат Добб.Ссылка;
Конецфункции


Функция ЗагрузитьПродукции_JSON(NNN) Экспорт
//	МассивТ=Новый Массив;
				Стр=NNN;
	
	Если Стр.warning<>"ok" Тогда
		Возврат Неопределено;
	КонецЕсли;
				//Тотал=NNN.total;
				
				//Для Каждого Стр Из NNN.results Цикл
				//	Если ИНН<>Стр.INN Тогда
				//		Продолжить;
				//	КонецЕсли;
					//Если     Массив.Найти(Число(Стр.gtin))=Неопределено Тогда
					//	Продолжить;
					//КонецЕсли;
					
					СпрД=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Стр.shoesData.codeData.gtin));
					Если СпрД<>Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка() Тогда
						СпрД=СпрД.ПолучитьОбъект();
					Иначе
						СпрД=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
					КонецЕсли;
						
					Стр.shoesData.Свойство("brand",СпрД.БрендТорговаяМарка);
					country="";
					
					Стр.shoesData.Свойство("country",country);
					Если ЗначениеЗАполнено(country) Тогда
						Если country="РОССИЙСКАЯ ФЕДЕРАЦИЯ" Тогда
							СпрД.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
						Иначе
							СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(country);
						КонецЕсли;	
						//ИначеЕсли Не ЗначениеЗаполнено(	СпрД.СтранаПроизводства) Тогда
					//	СпрД.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
					КонецЕсли;
					СпрД.GTIN=Число(Стр.shoesData.codeData.gtin);
					//СпрД.id=Стр.id;
					//СпрД.ИННПроизводителяИмпортёра=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",Стр.producerInn);
					//Если Не ЗначениеЗАполнено(СпрД.ИННПроизводителяИмпортёра) Тогда
					//	Спр_К=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
					//	Спр_К.ИНН=Стр.producerInn;
					//	Спр_К.Наименование=Стр.producerName;
					//	Спр_К.Записать();
					//	СпрД.ИННПроизводителяИмпортёра=Спр_К.Ссылка;
						
					//Конецесли;
					Стр.shoesData.productProperty.Свойство("materialDown",СпрД.МатериалНиза);
					Стр.shoesData.productProperty.Свойство("materialLining",СпрД.МатериалПодкладки);
					Стр.shoesData.productProperty.Свойство("materialUpper",СпрД.МатериалВерха);
					Стр.shoesData.productProperty.Свойство("color",СпрД.Цвет);
					
					Стр.shoesData.Свойство("model",СпрД.МодельПроизводителяАртикул);
					//Стр.Свойство("tnVedCode",СпрД.КодТНВЭДКороткий);
					Стр.shoesData.productProperty.Свойство("color",СпрД.Цвет);
					
					
					
					tnvd="";
					Стр.shoesData.Свойство("tnvd",tnvd);
					Если ЗначениеЗаполнено(tnvd) Тогда
						СпрД.КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(tnvd);
						
						Если Не ЗначениеЗаполнено(СпрД.КодТНВЭД) Тогда
							СпрК=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
							СпрК.Код=tnvd;
							СпрК.Наименование=tnvd;
							СпрК.Записать();
							СпрД.КодТНВЭД=СпрК.Ссылка;
						КонецЕсли;
						
						
					КонецЕсли;
					
					
					СпрД.Наименование=Стр.shoesData.productName;
					СпрД.НаименованиеТовара=Стр.shoesData.productName;
					
					productSize=Неопределено;
				    Стр.shoesData.productProperty.Свойство("productSize",productSize);
					Если ЗначениеЗаполнено(productSize) тогда
						productSize=СтрЗаменить(productSize,".",",");
						СпрД.Размер=Справочники.РазмерВШтихмассовойСистеме_ХамелеонЦРПТ.НайтиПоНаименованию(productSize,истина);
					КонецЕсли;
					
										КодПр="";
					Стр.shoesData.Свойство("productTypeDesc",КодПр);
					Если ЗначениеЗаполнено(КодПр) Тогда
					СпрД.ВидОбуви=Справочники.ВидОбуви_ХамелеонЦРПТ.НайтиПоНаименованию(КодПр,Истина);
					Если Не ЗначениеЗаполнено(СпрД.ВидОбуви) тогда
						СпрВ=Справочники.ВидОбуви_ХамелеонЦРПТ.СоздатьЭлемент();
						//СпрВ.Код=Стр.productType;
						СпрВ.Наименование=КодПр;
						СпрВ.Записать();
						СпрД.ВидОбуви=СпрВ.Ссылка;
					КонецЕсли;
				КонецЕсли;
				publicationDate=Неопределено;
				    Стр.Свойство("publicationDate",publicationDate);
					Если ЗначениеЗаполнено(publicationDate) тогда
						СпрД.ДатаПубликации=Дата(1970,1,1)+Стр.publicationDate/1000;					
					Конецесли;
					////То была обувь теперь сигареты
				packageType=Неопределено;
				    Стр.Свойство("packageType",packageType);
					Если ЗначениеЗАполнено(packageType) тогда
						Попытка
							СПрд.ТипУпаковкиСигарет=Перечисления.ТипУпаковкиСигареты_ХамелеонЦРПТ[packageType];
						Исключение
						КонецПопытки;
					КонецЕсли;
					КоличествоВГруппе=0;
					Если Стр.Свойство("innerUnitCount",КоличествоВГруппе) И
						ЗначениеЗаполненО(КоличествоВГруппе) Тогда
						СпрД.КоличествоВГруппе=КоличествоВГруппе;
					Конецесли;
				productGroup=Неопределено;
				    Стр.Свойство("productGroup",productGroup);
					Если ЗначениеЗаполнено(productGroup) тогда
						СпрГр=Справочники.ГруппаСигарет_ХамелеонЦРПТ.НайтиПоНаименованию(productGroup);
						Если Не ЗначениеЗаполнено(СпрГр) Тогда
							СпрГр=Справочники.ГруппаСигарет_ХамелеонЦРПТ.СоздатьЭлемент();
							СпрГр.Наименование=productGroup;
							СпрГр.Записать();
						КонецЕсли;
						СпрД.ГруппаСигарет=СпрГр.Ссылка;
						
					КонецЕсли;
					
					
					
					
					СпрД.Записать();
					
					//МассивТ.Добавить(СПрД);
					Сертификат=Неопределено;
					Если Стр.Свойство("certDoc",Сертификат) Тогда
						ДатаВыдачи=Сертификат.date;
						ДатаНачалаДействия=Дата(Сред(ДатаВыдачи,1,4),Сред(ДатаВыдачи,6,2),Сред(ДатаВыдачи,9,2));
						НаимСерт=Сертификат.number;
						Тип=Сертификат.type;
						Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.НайтиПоНаименованию(
						 НаимСерт);
						 Если НЕ ЗначениеЗаполнено(Сертификат) тогда
							 //Сертификат=Сертификат.ПолучитьОбъект();
							 Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.СоздатьЭлемент();
						Сертификат.Наименование=НаимСерт;
						Сертификат.ДатаНачалаДействия=ДатаНачалаДействия;
						 Сертификат.Записать();
					 КонецЕсли;
						РегСв=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
						РегСв.Отбор.Продукция.Установить(СпрД.Ссылка);
						РегСв.Отбор.Период.Установить(ДатаНачалаДействия);
						Добав=РегСв.Добавить();
						Добав.Период=ДатаНачалаДействия;
						Добав.Продукция=СпрД.Ссылка;
						Добав.Документ=Сертификат;
						Регсв.Записать(Истина);
						
					Конецесли;
					 Возврат СпрД.Ссылка
			//	Конеццикла;
				
	

Конецфункции

Процедура ЗаполнитьСтатусыСерийныхНомеров_ПРИЕМКА(МассивЗаданий,СписокОбнТовара) Экспорт
	
	Попытка
		ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
	Исключение
	КонецПопытки;
	Для каждого Задание Из МассивЗаданий Цикл
		Данные = Неопределено;
		Для каждого Сообщение Из Задание.ПолучитьСообщенияПользователю() Цикл
			Если ЗначениеЗаполнено(Сообщение.Текст) Тогда
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Сообщение.Текст);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Данные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
												Товар=ЗагрузитьПродукции_JSON(Данные);
												Если ЗначениеЗАполнено(Товар) Тогда
													Если СписокОбнТовара.Найти(Товар)=Неопределено Тогда
														СписокОбнТовара.Добавить(Товар);
													КонецЕсли;
												КонецЕсли;
		//ТекСтр = ЗаданияПоСтрокам.Получить(Задание.УникальныйИдентификатор);
		//ТекСтр.Статус = Данные.shoesData.status;
	КонецЦикла;
	МассивЗаданий.Очистить();
	
КонецПроцедуры

Процедура  ЗапистьПриемкку(Ссылка,Ответ_1) Экспорт
	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Ссылка);
	РегДв.Отбор.Вид.Установить("Загрузка приемки");
	Добав=РегДв.Добавить();
	Добав.Документ=Ссылка;
	Добав.Вид="Загрузка приемки";
	Добав.Файл=Новый ХранилищеЗначения(Ответ_1,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
	
КонецПроцедуры

Функция СоздатьНайтиКонтрагента_Приемка_УПД(ЗЗ) Экспорт
	СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",
	ЗЗ.inn);
	Если ЗначениеЗАполнено(СпрК) И СпрК.Ид_ЭДО_ЦРПТ=ЗЗ.id тогда
		Возврат СпрК.Ссылка;
		//СпрК=СпрК.ПолучитьОбъект();
	ИначеЕсли ЗначениеЗаполнено(СпрК) Тогда
		СпрК=СпрК.ПолучитьОбъект();
	Иначе
		СпрК=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрК.Наименование=ЗЗ.name;
	КонецЕсли;
	СпрК.ИНН=ЗЗ.inn;
	СпрК.Ид_ЭДО_ЦРПТ=ЗЗ.id;
	СпрК.Записать();
	Возврат СпрК.Ссылка
КонецФункции

Функция СоздатьНайтиПр_УПД(ШтрихКод,Стр_ыЗ) Экспорт
	Если СтрДлина(Штрихкод)>=31
		
		Тогда
		
		Попытка
			
			Если Сред(ШтрихКод,1,2)="01" Тогда
				ГТИН=Сред(ШтрихКод,3,14);
				//СпрПр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(Сред(ШтрихКод,3,14)));
			Иначе
				ГТИН=Сред(ШтрихКод,1,14);
				
				
			КонецЕсли;
				СпрПр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(ГТИН));
		Исключение

			Возврат Неопределено;
		КонецПопытки;
		Если ЗначениеЗаполнено(СпрПр) тогда
			Возврат СпрПр;
		КонецЕсли;
		СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрПр.GTIN=ГТИН;
		СпрПр.Наименование=ШтрихКод;
		СпрПр.НаименованиеТовара=ШтрихКод;
		СпрПр.Записать();
		Возврат СпрПр.Ссылка;
		
	КонецЕсли;
	Возврат Неопределено
Конецфункции

Функция ОбновитьИнформациюНаСервереДЛяПриемки(Thumbprint_1,МассивКМ,СписокОбнТовара,ЗаполненаТабличнаяЧастьПриемки) Экспорт
							
							
									МассивСтруктур=Новый Массив;
									//Thumbprint_1=ПолучитьИзПользователя();	
									
									ЧислоПараллельныхПотоков = РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КоличествоЯдерДляГенерацииDataMatrix;
	
	МассивЗаданий = Новый Массив;
	ЗаданияПоСтрокам = Новый Соответствие;
//		Если 
Для Каждого Стр_1 Из МассивКМ Цикл
							МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Стр_1.Марка);
		МассивПараметров.Добавить(Thumbprint_1);
		
		Если ЧислоПараллельныхПотоков=0 Тогда
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				Если Данные <> Неопределено  Тогда
												Товар=ЗагрузитьПродукции_JSON(Данные);
												Если ЗначениеЗАполнено(Товар) Тогда
													Если СписокОбнТовара.Найти(Товар)=Неопределено Тогда
														СписокОбнТовара.Добавить(Товар);
													КонецЕсли;
												КонецЕсли;
				КонецЕсли;
		Иначе
			Попытка
				Задание = ФоновыеЗадания.Выполнить("ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара", МассивПараметров);
				//ЗаданияПоСтрокам.Вставить(Задание.УникальныйИдентификатор);
				МассивЗаданий.Добавить(Задание);
				
				Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
					ЗаполнитьСтатусыСерийныхНомеров_ПРИЕМКА(МассивЗаданий,СписокОбнТовара); 
				КонецЕсли;
			Исключение
				Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СообщитьДанныеТовара(МассивПараметров[0],МассивПараметров[1]);
				Данные = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст);
				Если Данные <> Неопределено Тогда
												Товар=ЗагрузитьПродукции_JSON(Данные);
												Если ЗначениеЗАполнено(Товар) Тогда
													Если СписокОбнТовара.Найти(Товар)=Неопределено Тогда
														СписокОбнТовара.Добавить(Товар);
													КонецЕсли;
												КонецЕсли;
				КонецЕсли;
					
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивЗаданий.Количество() >= 0 Тогда
		ЗаполнитьСтатусыСерийныхНомеров_ПРИЕМКА( МассивЗаданий,СписокОбнТовара); 
	КонецЕсли;
		
	
	
КонецФункции

Функция ОбновитьСтатусДокумента_Приемка_УПД(Заказ,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа,ОбновлятьВсе=Ложь,Документ_1=Неопределено,NNN_2=Неопределено,МассивПродукций=Неопределено,ЗагрузатьНаименованиеПриПриемке=Ложь) Экспорт
	
	
	//Добб.ОшибкаОтправки=Ошибка;
	//Добб.Статус=Статус;
	trade_recipient_inn="";
	Если Заказ=Неопределено тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
//	Код="";
//	Если Заказ.Свойство("code",Код) Тогда
//			Возврат Неопределено
//	КонецЕсли;
	
		Если ЗначениеЗаполнено(Документ_1) Тогда
			Добб=Документ_1.ПолучитьОбъект();
		Иначе
			
		//Если Заказ.body.Свойство("trade_recipient_inn",trade_recipient_inn) Тогда
		
		Организация=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",
		Заказ.content.buyer.inn);
		
		
//	Иначе
		
////			Организация=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",
	//	Заказ.body.receiver_inn);
		
		

	//КонецЕсли;
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			// Данный фрагмент построен конструктором.
			// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Приемка_ХамелеонЦРПТ.Ссылка
				|ИЗ
				|	Документ.Приемка_ХамелеонЦРПТ КАК Приемка_ХамелеонЦРПТ
				|ГДЕ
				|	Приемка_ХамелеонЦРПТ.Организация = &Организация
				|	И Приемка_ХамелеонЦРПТ.ДокументОтгрузки = &ДокументОтгрузки";
			
			Запрос.УстановитьПараметр("ДокументОтгрузки", Заказ.id);
			Запрос.УстановитьПараметр("Организация", Организация);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			
			Если НЕ  ВыборкаДетальныеЗаписи.Следующий() Тогда
				// Вставить обработку выборки ВыборкаДетальныеЗаписи
			
			//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	      
				Добб_1=ДОкументы.Приемка_ХамелеонЦРПТ.СоздатьДокумент();
				
				//Добб_1.УстановитьСсылкуНового(Добб);
				Добб=Добб_1;
				Добб.Дата=ТекущаяДата();

			Иначе
				Добб=	ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
				ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ЧастичноПринят
				Тогда
				
				Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
					 ЗапистьПриемкку(Добб.Ссылка,Текст1);
					
				Конецесли;
			
				Если Добб.Товары.Количество()>0 Тогда
					Если ОбновлятьВсе=Истина Тогда
						Добб=Добб.Ссылка.ПолучитьОбъект();
					Иначе
						Добб=Добб.Ссылка.ПолучитьОбъект();
								Добб.СтатусУПД=перечисления.СтатусыУПД_ХамелеонЦРПТ[Заказ.status];
						Добб.ЗаписатЬ();
												
						Возврат Добб.Ссылка;
					КонецЕсли;
				Иначе
					Добб=Добб.Ссылка.ПолучитьОбъект();
				КонецЕсли;
			КонецЕсли;
			//Иначе
			//	Добб=Добб.ПолучитьОбъект();
			КонецЕсли;
		КонецЕсли;
		Добб.ДокументОтгрузки=Заказ.id;
		Добб.Организация=Организация;
		Добб.СтатусУПД=перечисления.СтатусыУПД_ХамелеонЦРПТ[Заказ.status];
		Добб.НомерВходящий=Заказ.number;
		
		ДатаДокумента=Заказ.content.date;
		Добб.ДатаВходящий=Дата(1970,1,1)+Заказ.content.date;
		
		Добб.Поставщик=СоздатьНайтиКонтрагента_Приемка_УПД(Заказ.content.seller);
		//Добб.НомерВходящий=Заказ.body.document_number;
		
		
		Добб.ТекущийПользователь=Пользователь;
		
		//ДатаДокумента=Заказ.body.transfer_date;;
		Добб.ДатаПолуччения=Добб.Дата;
		
		
		Добб.Товары.Очистить();
		Добб.СерийныеНомера.Очистить();
		
		//Добб.Короба.Очистить();
		
		Сч=0;
		
		
		
		
//	Если   Заказ.type="LP_SHIP_GOODS_CSV" Тогда

Для Каждого Стр_з из ЗАказ.content.products Цикл
	
	good_identification_numbers=Неопределено;
		Нстр=Добб.Товары.Добавить();
	Если Стр_з.Свойство("good_identification_numbers",good_identification_numbers) Тогда
		
		
	  	Для Каждого Стр_1 Из good_identification_numbers Цикл
			
			id=Неопределено;
			Если Стр_1.Свойство("id",id) Тогда
				
					ШтрихКод=id;
				//Если СтрДлина(ШтрихКод)=1
					pack_num=Неопределено;
					
					Если Стр_1.свойство("pack_num",pack_num) Тогда
						Для Каждого Стр_Пак Из pack_num Цикл
							Если Добб.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",ШтрихКод,Стр_Пак)).Количество()=0 Тогда
							
							
								ДобавК=Добб.Короба.Добавить();
								ДобавК.НомерКороба=ШтрихКод;
								ДобавК.ШтрихКод=Стр_Пак;
							КонецЕсли;
							Если СтрДлина(ДобавК.ШтрихКод)>30	
								Тогда
								Продукция=СоздатьНайтиПр_УПД(Стр_Пак,Стр_З);
								
							КонецЕсли;
							
						Конеццикла;
						
					КонецЕсли;
					
				Если ЗначениеЗАполнено(Продукция) тогда
						product_description=Строка(Продукция);
						//НСтр=Добб.Товары.НайтиСтроки(Новый Структура("GTIN",Продукция));
						//Если НСтр.Количество()=0 Тогда
						//	НСТр=Добб.Товары.Добавить();
							НСтр.GTIN=Продукция;
							НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
						//Иначе
						//	НСТР=НСТР[0];
						//	НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
						//КонецЕсли;
						НСТр.НаименованиеТовара=Продукция.Наименование;
						ДобавилиПр=Истина;
					Иначе
						product_description=Стр_З;
												
						//НСтр=Добб.Товары.НайтиСтроки(Новый Структура("НаименованиеТовара",product_description));
						//Если НСтр.Количество()=0 Тогда
						
						//	НСТр=Добб.Товары.Добавить();
							НСТр.НаименованиеТовара=product_description;
							НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
						//Иначе
						//	НСТР=НСТР[0];
						//	НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
						//КонецЕсли;
						
					КонецЕслИ;
					КоличествоКМ=0;
							children="";
							еСЛИ                        Стр_з.Свойство("children",children) Тогда
								Для Каждого Стр_children Из children Цикл
									ШтрихКод="";
									Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
										ШтрихКод=Стр_children.uit_code;
										
										Если Добб.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Стр_З.uitu_code,ШтрихКод)).Количество()=0 Тогда
										
											ДобавК=Добб.Короба.Добавить();
											ДобавК.НомерКороба=Стр_З.uitu_code;
											ДобавК.ШтрихКод=ШтрихКод;
										КонецЕсли;
										
										КоличествоКМ=КоличествоКМ+1;
										НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
									Иначе
										РекурсияУпаковки_Приход(Стр_children,НСтр,Добб,КоличествоКМ);
									КонецЕсли;
									//ДобавК.КоличестоКМ=НСтр.КоличествоНомеровКМ;
									
								КонецЦикла;
							Иначе
								НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
								КоличествоКМ=1;
							КонецЕсли;

					
						Добав=Добб.СерийныеНомера.Добавить();
						Добав.КоличествоКМ=КоличествоКМ;
						Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
						стр_З.Свойство("price_without_vat",Добав.Цена);
						//Добав.Цена=Стр_з.product_cost;
						//=Стр_з.product_tax;
						ЦенаБезНДС=0;
						стр_З.Свойство("price",ЦенаБезНДС);
						
						Добав.НДС=Добав.Цена-ЦенаБезНДС;
						//стр_З.Свойство("product_tax",Добав.НДС);
						Добав.НаименованиеТовараСтрокой=НСТр.НаименованиеТовара;
						uit_code="";
							Добав.cis=ШтрихКод;
							Добав.GTIN=Сред(Добав.cis,3,14);
							
							
						Добав.НаименованиеТовара=Продукция;
						//Если ЗначениеЗаполнено(Продукция)   Тогда
						//	Добав.GTIN=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(Добав.НаименованиеТовара.GTIN),14,"0");
						//КонецЕсли;
						//Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан Тогда
						//	Добав.Принят=Истина;
						//Иначе
						//	Добав.Принят=Ложь;
						//КонецЕсли;
						Попытка
						//Если NNN_2<>Неопределено Тогда
						//	accepted=Неопределено;
						//	Если NNN_2.products[Сч].Свойство("accepted",accepted) Тогда
						//		Если accepted="true" Тогда
						//			Добав.Принят=Истина;
						//		Иначе
						//			Добав.Принят=Ложь;
						//			
						//		КонецЕсли;
						//	Иначе
						//		Добав.Принят=Ложь;
						//	Конецесли;
						//	Сч=Сч+1;
						//Конецесли;
					Исключение
						КонецПопытки;
						НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
						НСтр.Сумма=НСтр.Сумма+Добав.цена;
						НСтр.НДС=НСтр.НДС+Добав.НДС;
						НСтр.Цена=НСТР.Сумма/НСтр.КОличествоКМ;
						
						 		
				
			Иначе
				Для Каждого Ст_М Из Стр_1.cis Цикл
					ШтрихКод=Ст_М;
					Продукция=СоздатьНайтиПр_УПД(ШтрихКод,Стр_З);
					Если ЗначениеЗАполнено(Продукция) тогда
						product_description=Строка(Продукция);
							НСтр.GTIN=Продукция;
							НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
						НСТр.НаименованиеТовара=Продукция.Наименование;
						ДобавилиПр=Истина;
					Иначе
						product_description=Стр_З;
						еСЛИ                        Стр_з.Свойство("product_description",product_description) Тогда
							
						Иначе
							children="";
							еСЛИ                        Стр_з.Свойство("children",children) Тогда
								Для Каждого Стр_children Из children Цикл
									                                                                       product_description="";
										еСЛИ                   Стр_children.Свойство("product_description",product_description) Тогда
										//	НСТр=Добб.Товары.Добавить();
										//	НСТр.НаименованиеТовара=product_description;
										//	НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
											Прервать;
										КонецЕсли;
									
								КонецЦикла;
								
							КонецЕсли;
							
							
						КонецЕсли;
						
							НСТр.НаименованиеТовара=product_description;
							НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
						
					КонецЕслИ;
					КоличествоКМ=0;
							children="";
							еСЛИ                        Стр_з.Свойство("children",children) Тогда
								Для Каждого Стр_children Из children Цикл
									//ДобавК=Добб.Короба.Добавить();
									//ДобавК.НомерКороба=Стр_З.uitu_code;
									ШтрихКод="";
									Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
										ШтрихКод=Стр_children.uit_code;
										Если Добб.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Стр_З.uitu_code,ШтрихКод)).Количество()=0 Тогда
										
											ДобавК=Добб.Короба.Добавить();
											ДобавК.НомерКороба=Стр_З.uitu_code;
											ДобавК.ШтрихКод=ШтрихКод;
										КонецЕсли;
										
										КоличествоКМ=КоличествоКМ+1;
										НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
									Иначе
										Если Добб.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Стр_З.uitu_code,ШтрихКод)).Количество()=0 Тогда
										
											ДобавК=Добб.Короба.Добавить();
											ДобавК.НомерКороба=Стр_З.uitu_code;
											ДобавК.ШтрихКод=ШтрихКод;
										КонецЕсли;
										РекурсияУпаковки_Приход(Стр_children,НСтр,Добб,КоличествоКМ);
									КонецЕсли;
									//ДобавК.КоличестоКМ=НСтр.КоличествоНомеровКМ;
									ДобавК.ШтрихКод=ШтрихКод;
									
								КонецЦикла;
							Иначе
								НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
								КоличествоКМ=1;
							КонецЕсли;

					
						Добав=Добб.СерийныеНомера.Добавить();
						Добав.КоличествоКМ=КоличествоКМ;
						Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
						стр_З.Свойство("price_without_vat",Добав.Цена);
						//Добав.Цена=Стр_з.product_cost;
						//=Стр_з.product_tax;
						ЦенаБезНДС=0;
						стр_З.Свойство("price",ЦенаБезНДС);
						
						Добав.НДС=Добав.Цена-ЦенаБезНДС;
						//стр_З.Свойство("product_tax",Добав.НДС);
						Добав.НаименованиеТовараСтрокой=НСТр.НаименованиеТовара;
						uit_code="";
							Добав.cis=Ст_М;
							Добав.GTIN=Сред(Добав.cis,3,14);
							
							
						Добав.НаименованиеТовара=Продукция;
						Если ЗначениеЗаполнено(Продукция)   Тогда
							Добав.GTIN=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(Добав.НаименованиеТовара.GTIN),14,"0");
						КонецЕсли;
						Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан Тогда
							Добав.Принят=Истина;
						Иначе
							Добав.Принят=Ложь;
						КонецЕсли;
						Попытка
						//Если NNN_2<>Неопределено Тогда
						//	accepted=Неопределено;
						//	Если NNN_2.products[Сч].Свойство("accepted",accepted) Тогда
						//		Если accepted="true" Тогда
						//			Добав.Принят=Истина;
						//		Иначе
						//			Добав.Принят=Ложь;
						//			
						//		КонецЕсли;
						//	Иначе
						//		Добав.Принят=Ложь;
						//	Конецесли;
						//	Сч=Сч+1;
						//Конецесли;
					Исключение
						КонецПопытки;
						НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
						НСтр.Сумма=НСтр.Сумма+Добав.цена;
						НСтр.НДС=НСтр.НДС+Добав.НДС;
						НСтр.Цена=НСТР.Сумма/НСтр.КОличествоКМ;
						
						
						
					Конеццикла;
			    КонецЕсли;
				
				
				
			Конеццикла;
			
			
			
		КонецЕсли;
		
		Стр_З.Свойство("quantity",Нстр.КоличествоКМ);
		Единиц=Неопределено;
		Стр_З.Свойство("unit",Единиц);
		Если Не ЗначениеЗаполнено(Единиц) тогда
			Единица=Справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.НайтиПоНаименованию(Единиц.name);
			Если Не ЗначениеЗАполнено(Единица) тогда
				Единица=справочники.ЕдиницыИзмерения_ХамелеонЦРПТ.СоздатьЭлемент();
				Единица.Код=Единиц.id;
				Единица.Наименование=Единиц.name;
			КонецЕсли;
			НСтр.ЕдиницаИзмерения=Единица.Ссылка;
		КонецЕсли;
		Стр_З.Свойство("vat_amount",Нстр.НДС);
		Стр_З.Свойство("price_without_vat",Нстр.Сумма);
		Если НСтр.КоличествоКМ<>0 Тогда
			НСтр.Цена=НСтр.Сумма/НСтр.КоличествоКМ;
		КонецЕсли;
		
		
		
	Конеццикла;
		
	Добб.УПД=Истина;
	
	Добб.Записать();
	Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
		ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ЧастичноПринят
		
		Тогда
		Попытка
			Добб.ПометкаУдаления=Ложь;
			Добб.Записать(РежимЗаписиДокумента.Проведение) 
		Исключение
		КонецПопытки;
	КонецЕсли;
				Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗапистьПриемкку(Добб.Ссылка,Текст1);
				
			Конецесли;

						Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
					 ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапистьПриемкку(Добб.Ссылка,Текст1);
					
				Конецесли;

	Возврат Добб.Ссылка;
Конецфункции



Функция  ПолучитьСледющийМассив(Добб) Экспорт
				МассивПродукций=Новый Массив;
			Массивcis=Новый Массив;
			Для Каждого Стр_1 Из Добб.СерийныеНомера Цикл
				Если Стр_1.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка ИЛИ Массивcis.Найти(Сред(Стр_1.cis,3,14))<>Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если Сред(Стр_1.cis,1,2)="01" Тогда
					gtin=Сред(Стр_1.cis,3,14);
				Иначе
					gtin=Сред(Стр_1.cis,1,14);
					
				КонецЕсли;
				Массивcis.Добавить(gtin);
				
				Попытка
					СпрПр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(gtin));
					Если ЗначениеЗаполнено(СпрПр) И Число(gtin)<>
						Число(Строка(СпрПр)) Тогда
						Продолжить;
					КонецЕсли;
				Исключение
					Продолжить;
				КонецПопытки;
				
				МассивПродукций.Добавить(
				Новый Структура("GTIN,Марка",
				ОБработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(gtin) ,14,"0"),Стр_1.cis))
				
				
			Конеццикла;
			
			
			Для Каждого Стр_1 Из Добб.Короба Цикл
				Если Стр_1.ТипУпаковки=Перечисления.Тип_КМ_ХамелеонЦРПТ.Упаковка ИЛИ Массивcis.Найти(Сред(Стр_1.ШтрихКод,3,14))<>Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если Сред(Стр_1.ШтрихКод,1,2)="01" Тогда
					gtin=Сред(Стр_1.ШтрихКод,3,14);
				Иначе
					gtin=Сред(Стр_1.ШтрихКод,1,14);
				КонецЕсли;
				Массивcis.Добавить(gtin);
				
				
				
				Попытка
				СпрПр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(gtin));
					Если ЗначениеЗаполнено(СпрПр) И Число(gtin)<>
						Число(Строка(СпрПр)) Тогда
						Продолжить;
					КонецЕсли;

				Исключение
					Продолжить;
		        КонецПопытки;
				
				МассивПродукций.Добавить(
				Новый Структура("GTIN,Марка",
				ОБработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(gtin) ,14,"0"),Стр_1.ШтрихКод))
				
				
			Конеццикла;
			Возврат МассивПродукций
Конецфункции


Функция ДополнитьСтроку(СТТТ) Экспорт
	Возврат Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(СТТТ),14,"0")
КонецФункции


Процедура ЗаполнитьДанныеИзОтветаJSON(Результат, ТекстJSON, ТипДанных)
	
	ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));	// удалим открывающий символ структуры(массива)
	
	НомерЗначения = 0;
	
	Пока ТекстJSON <> "" Цикл
		
		ПервыйСимвол = Лев(ТекстJSON, 1);
		Если ПервыйСимвол = "{" Тогда
			// вложенная структура
			Значение = Новый Соответствие;
			ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Соответствие");
			
			Если ТипДанных = "Соответствие" Тогда
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
			ИначеЕсли ТипДанных = "Массив" Тогда
				Результат.Добавить(Значение);
			КонецЕсли;
		
		ИначеЕсли ПервыйСимвол = "[" Тогда
			// вложенный массив
			Значение = Новый Массив;
			ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Массив");
			
			Если ТипДанных = "Соответствие" Тогда
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
			Иначе
				Результат.Добавить(Значение);
			КонецЕсли;
			
		ИначеЕсли ПервыйСимвол = "}" И ТипДанных = "Соответствие" Тогда
			// структура закончилась
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			Если Лев(ТекстJSON, 1) = "," Тогда
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			КонецЕсли;
			
			Возврат;
			
		ИначеЕсли ПервыйСимвол = "]" И ТипДанных = "Массив" Тогда
			// массив закончился
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			Если Лев(ТекстJSON, 1) = "," Тогда
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			КонецЕсли;
			
			Возврат;
		ИначеЕсли ПервыйСимвол = "}" И ТипДанных = "Массив" Тогда
			// массив закончился
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			Если Лев(ТекстJSON, 1) = "," Тогда
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			КонецЕсли;
			
			Возврат;
			
		Иначе
			
			Если ТипДанных = "Соответствие" Тогда
				
				Поз = Найти(ТекстJSON, ":");
				Если Поз = 0 Тогда
					// неверный формат, прервемся
					Прервать;
				КонецЕсли;
				
				ИмяЗначения = СокрЛП(Лев(ТекстJSON, Поз-1));
				
				ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз+1));
				
				Если Лев(ТекстJSON, 1) = "{" Тогда
					// значение является структурой
					Значение = Новый Соответствие;
					ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Соответствие");
					
				ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда
					// значение является массивом
					Значение = Новый Массив;
					ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Массив");
					
				Иначе
					// обычное значение
					Поз = 0;
					Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
						Символ = Сред(ТекстJSON, Сч, 1);
						Если Символ = "," ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
							Поз = Сч;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если Поз = 0 Тогда
						Значение = ТекстJSON;
						ТекстJSON = "";
						
					Иначе
						Значение = Лев(ТекстJSON, Поз-1);
						ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
						
					КонецЕсли;
					
					Значение = СокрЛП(Значение);
					Если Найти(Значение,"\u") > 0 Тогда
						Значение = ИзСтрокиЮникод(Значение);
					КонецЕсли; 
					//Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Значение) Тогда
					//	Значение = Число(Значение);
					//КонецЕсли;
					
				КонецЕсли;
				
				Результат.Вставить(ИмяЗначения, Значение);
				
			ИначеЕсли ТипДанных = "Массив" Тогда
				
				// обычное значение
				Поз = 0;
				Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
					Символ = Сред(ТекстJSON, Сч, 1);
					Если Символ = "," ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
						Поз = Сч;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Поз = 0 Тогда
					Значение = ТекстJSON;
					ТекстJSON = "";
					
				Иначе
					Значение = Лев(ТекстJSON, Поз-1);
					ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
					
				КонецЕсли;
				
				Значение = СокрЛП(Значение);
				
				Результат.Добавить(Значение);
				
			КонецЕсли;
				
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Знач ТекстJSON) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	Попытка
		Возврат ПрочитатьJSON(ЧтениеJSON,Истина);
	Исключение
//		Сообщить("Текстовая строка "+ТекстJSON+" не соответствует шаблону JSON");
		Возврат Неопределено;
	КонецПопытки;
	
	
	
	Результат = Новый Соответствие;
	
	ТекстJSON = СтрЗаменить(ТекстJSON, ",""", "~""");
	ТекстJSON = СтрЗаменить(ТекстJSON, ",{", "~{");
	ТекстJSON = СтрЗаменить(ТекстJSON, ",", ";");
	ТекстJSON = СтрЗаменить(ТекстJSON, "~{", ",{");
	ТекстJSON = СтрЗаменить(ТекстJSON, "~""", ",""");
	
	ТекстJSON = СтрЗаменить(ТекстJSON, "\""", """");	// заменим последовательность \" на "
	ТекстJSON = СтрЗаменить(ТекстJSON, """", "");		// а теперь удалим все кавычки
	
	Если Лев(ТекстJSON, 1) = "{" Тогда
		// начало структуры
		ЗаполнитьДанныеИзОтветаJSON(Результат, ТекстJSON, "Соответствие");
		
	ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда
		// начало массива
		МассивДанных = Новый Массив;
		ЗаполнитьДанныеИзОтветаJSON(МассивДанных, ТекстJSON, "Массив");
		
		Результат.Вставить("Значение", МассивДанных);
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ИзСтрокиЮникод(Стр) Экспорт
	Рез = "";
	МасСлов = РазложитьСтрокуВМассивПодстрок_11(Стр," ");
	Для каждого Слово Из МасСлов Цикл
		Если Найти(Слово,"\")>0 Тогда
			МасБукв = РазложитьСтрокуВМассивПодстрок_11(Сред(Слово,2),"\");
		Иначе
			МасБукв = РазложитьСтрокуВМассивПодстрок_11(Сред(Слово,1),"\");
		Конецесли;
		Для каждого Буква Из МасБукв Цикл
			Если Лев(Буква,1) = "u" Тогда
				Рез = Рез + Символ(Из16В10(Сред(Буква,2,4))) + Сред(Буква,6);
			Иначе
				Рез = Рез + Буква;
			КонецЕсли;
		КонецЦикла;
		Рез = Рез + " ";
	КонецЦикла;
	Возврат Сред(Рез, 1, СтрДлина(Рез)-1);
КонецФункции

Функция Из16В10(Число16) Экспорт
	Число10 = 0;
	Число16 = ВРег(Число16);
	НаборСимв = "0123456789ABCDEF"; 
	Для Н = 1 По СтрДлина(Число16) Цикл  
		Цифра = Найти(НаборСимв,Лев(Прав(Число16,Н),1)) - 1;
		Если Цифра = -1 Тогда Возврат 0 КонецЕсли;
		Число10 = Число10 + Цифра*Pow(16,Н-1);
	КонецЦикла; 	 
	Возврат Число10;
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок_11(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции


Функция Получение_Токена(Thumbprint_1,СерийныйНомер="") Экспорт
	
	
	Попытка
		Если Не ЗначениеЗаполнено(Thumbprint_1.Thumbprint_1) тогда
			//(,"Не выбран сертификат");
			Возврат "";
		КонецЕсли;
		
		
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
		
			Запрос=Новый HTTPЗапрос("/api/v3/auth/cert/key");
		
			Ответ=HTTPСервисЗапрос.Получить(Запрос);
		Если Ответ.КодСостояния=200 Тогда 	
			ОтветСтруктура =ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
			Подписываем=ОтветСтруктура.data;
			Имя_вр_1="";
			ПодписатьФайл(Thumbprint_1.Внешняя,Подписываем,Thumbprint_1,Имя_вр_1,,,СерийныйНомер);
			
			Добав=Имя_вр_1;
			//Добав=ПолучитьСтрокуИздвоичныхДанных(РР);
			//Добав=КодСтрСервер(Добав);
			Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
			Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
			Добав=СтрЗаменить(Добав,"\r\n","");

			Тело = "{
			|""uuid"": """+ОтветСтруктура.uuid+""",
			|""data"": """+Добав+"""
			|}";
			
			
			
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/auth/cert/");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
				
			
			
			//ЧтениеJSON = Новый ЧтениеJSON;
			//ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			Попытка
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());//ПрочитатьJSON(ЧтениеJSON);
			Исключение
//				Сообщить("Текстовая строка "+ТекстJSON+" не соответствует шаблону JSON");
				Сообщить(Описаниеошибки());
				Возврат Неопределено;
			КонецПопытки;
			Ош="";
			Если     NNN.Свойство("error_message",Ош) Тогда
				Сообщить(Ош);
				Возврат "";
			КонецЕсли;
			 ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(Thumbprint_1.Thumbprint_1,NNN.token,СерийныйНомер);
			
			Возврат NNN.token
		Иначе
			Сообщить("Не удалось подключиться к сайту: "+Thumbprint_1.АдресКАПИ);
			
			Возврат "";
		КонецЕсли;	
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат "";
	КонецПопытки;
	
КонецФункции



//           oSignedData = Новый COMОбъект("CAdESCOM.CadesSignedData");
//                // Данные на подпись ввели
//				Если НЕ ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВернутьНеИспользоватьCAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY() Тогда
//           				oSigner.Options=cadesplugin.CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY;
//					КонецЕсли;
////			oSigner.TSAAddress = "http://cryptopro.ru/tsp/";
//			//oSigner.OCSPAddress = "http://cryptopro.ru/ocsp/";
//			Если Уже64=Истина Тогда
//             oSignedData.ContentEncoding=cadesplugin.CADESCOM_BASE64_TO_BINARY; //
//			ИмяВр=ИмяВр;
//				
//		   ИначеЕсли   Открепленная=Истина Тогда
//             oSignedData.ContentEncoding=cadesplugin.CADESCOM_BASE64_TO_BINARY; //
//			ИмяВр=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ИмяВр));
//		  Иначе
//              oSignedData.ContentEncoding=cadesplugin.CADESCOM_STRING_TO_UCS2LE; //
//		КонецЕсли;
//                      oSignedData.Content=
//			 ИмяВр;
//			 
//			 
//			 Если Открепленная=Истина Тогда
//               Имя_вр_1 = oSignedData.SignCades(oSigner,1,true);
// 			    //Имя_вр_1 =Base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Имя_вр_1));
//				Иначе
//               Имя_вр_1 = oSignedData.SignCades(oSigner, cadesplugin.CADESCOM_CADES_BES);
//	                 КонецЕсли;
//	
//	
////    ПолучитьСписокСертификатов(2, Истина,ОповещенияПослеВыполения,ИмяВр,Текущийпользователь,ЭтаФорма,ОтветСтруктура);
//	
//	
//КонецПроцедуры		
Процедура ПодписатьФайл(Внешняя,Знач ИмяВр,Текущийпользователь_1,Имя_вр_1,Открепленная=Ложь,Уже64=Ложь,СерийныйНомер="",PIN="",
	ПодписываемКарточку=Ложь)	Экспорт
	
	Если ТипЗнч(Текущийпользователь_1)=Тип("Строка") тогда
		Текущийпользователь=Текущийпользователь_1;
	Иначе
		Текущийпользователь=Текущийпользователь_1.Thumbprint_1;
	Конецесли;
	
	
		//МенеджерКриптографии = Новый МенеджерКриптографии("Crypto-Pro GOST R 34.10-2012 Cryptographic Service Provider", "", 80 );
		////МенеджерКриптографии.АлгоритмХеширования        = "SHA-256";
		////МенеджерКриптографии.АлгоритмПодписи            = "RSA_SIGN";
		//МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу    = "";
		//МенеджерКриптографии.ВключениеСертификатовВПодпись    = РежимВключенияСертификатовКриптографии.ВключатьПолнуюЦепочку;
		//Хранилище = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты).ПолучитьВсе()[5];
		////Сертификат = Хранилище.НайтиПоСубъекту(Параметры.client_id);
		////Подпись    = МенеджерКриптографии.Подписать(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ИмяВр )   , Хранилище); 	
		//Подпись    = МенеджерКриптографии.Подписать(base64Значение(ИмяВр )   , Хранилище); 	
		// Имя_вр_1=base64Строка (Подпись);
		// 
		// Возврат;
  //  МенеджерКриптографии = Новый МенеджерКриптографии();
	//МенеджерКриптографии.НачатьИнициализацию(Новый ОписаниеОповещения("ПослеИнициализации",ЭтаФорма,ДопПараметры),"","",ДопПараметры.ТипМенеджераКриптографии);
	
	//МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу=ТекущийПользователь.Пароль;
//	МенеджерКриптографии.ВключениеСертификатовВПодпись=РежимВключенияСертификатовКриптографии.НеВключать;
//	МенеджерКриптографии.Подписать(ИмяВр,);
//	МенеджерКриптографии.НачатьПолучениеХранилищаСертификатов(Новый ОписаниеОповещения("ПослеПолученияСертификатов",ЭтаФорма,
//	ДопПараметры
//	),ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты
//	);
	
		 
	

	    cadesplugin=Новый Структура();
        cadesplugin.Вставить("CAPICOM_LOCAL_MACHINE_STORE", 1);
        cadesplugin.Вставить("CAPICOM_CURRENT_USER_STORE", 2);
        cadesplugin.Вставить("CADESCOM_LOCAL_MACHINE_STORE", 1);
        cadesplugin.Вставить("CADESCOM_CURRENT_USER_STORE", 2);
        cadesplugin.Вставить("CADESCOM_CONTAINER_STORE", 100);

        cadesplugin.Вставить("CAPICOM_MY_STORE", "My");

        cadesplugin.Вставить("CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED", 2);

        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME", 1);

        cadesplugin.Вставить("CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED", 0);
        cadesplugin.Вставить("CADESCOM_XML_SIGNATURE_TYPE_ENVELOPING", 1);
        cadesplugin.Вставить("CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE", 2);

        cadesplugin.Вставить("XmlDsigGost3410UrlObsolete", "http://www.Вставить(""w3.Вставить(""org/2001/04/xmldsig-more#gostr34102001-gostr3411");
        cadesplugin.Вставить("XmlDsigGost3411UrlObsolete", "http://www.Вставить(""w3.Вставить(""org/2001/04/xmldsig-more#gostr3411");
        cadesplugin.Вставить("XmlDsigGost3410Url", "urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102001-gostr3411");
        cadesplugin.Вставить("XmlDsigGost3411Url", "urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr3411");

        cadesplugin.Вставить("CADESCOM_CADES_DEFAULT", 0);
        cadesplugin.Вставить("CADESCOM_CADES_BES", 1);
        cadesplugin.Вставить("CADESCOM_CADES_T", 5);
        cadesplugin.Вставить("CADESCOM_CADES_X_LONG_TYPE_1", 93);

        cadesplugin.Вставить("CADESCOM_ENCODE_BASE64", 0);
        cadesplugin.Вставить("CADESCOM_ENCODE_BINARY", 1);
        cadesplugin.Вставить("CADESCOM_ENCODE_ANY", -1);

        cadesplugin.Вставить("CAPICOM_CERTIFICATE_INCLUDE_CHAIN_EXCEPT_ROOT", 0);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN", 1);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY", 2);

        cadesplugin.Вставить("CAPICOM_CERT_INFO_SUBJECT_SIMPLE_NAME", 0);
        cadesplugin.Вставить("CAPICOM_CERT_INFO_ISSUER_SIMPLE_NAME", 1);

        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_SHA1_HASH", 0);                              
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME", 1);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_ISSUER_NAME", 2);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_ROOT_NAME", 3);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_TEMPLATE_NAME", 4);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_EXTENSION", 5);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY", 6);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_APPLICATION_POLICY", 7);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_CERTIFICATE_POLICY", 8);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_TIME_VALID", 9);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_TIME_NOT_YET_VALID", 10);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_TIME_EXPIRED", 11);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_KEY_USAGE", 12);

        cadesplugin.Вставить("CAPICOM_DIGITAL_SIGNATURE_KEY_USAGE", 128);

        cadesplugin.Вставить("CAPICOM_PROPID_ENHKEY_USAGE", 9);

        cadesplugin.Вставить("CAPICOM_OID_OTHER", 0);
        cadesplugin.Вставить("CAPICOM_OID_KEY_USAGE_EXTENSION", 10);

        cadesplugin.Вставить("CAPICOM_EKU_CLIENT_AUTH", 2);
        cadesplugin.Вставить("CAPICOM_EKU_SMARTCARD_LOGON", 5);
        cadesplugin.Вставить("CAPICOM_EKU_OTHER", 0);

        cadesplugin.Вставить("CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME", 0);
        cadesplugin.Вставить("CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME", 1);
        cadesplugin.Вставить("CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION", 2);
        cadesplugin.Вставить("CADESCOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME", 0);
        cadesplugin.Вставить("CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME", 1);
        cadesplugin.Вставить("CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION", 2);
        cadesplugin.Вставить("CADESCOM_ATTRIBUTE_OTHER", -1);

        cadesplugin.Вставить("CADESCOM_STRING_TO_UCS2LE", 0);
        cadesplugin.Вставить("CADESCOM_BASE64_TO_BINARY", 1);

        cadesplugin.Вставить("CADESCOM_DISPLAY_DATA_NONE", 0);
        cadesplugin.Вставить("CADESCOM_DISPLAY_DATA_CONTENT", 1);
        cadesplugin.Вставить("CADESCOM_DISPLAY_DATA_ATTRIBUTE", 2);

        cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_RC2", 0);
        cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_RC4", 1);
        cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_DES", 2);
        cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_3DES", 3);
        cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_AES", 4);
        cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_GOST_28147_89", 25);

        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_SHA1", 0);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_MD2", 1);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_MD4", 2);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_MD5", 3);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_SHA_256", 4);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_SHA_384", 5);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_SHA_512", 6);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_CP_GOST_3411", 100);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256", 101);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512", 102);

        cadesplugin.Вставить("LOG_LEVEL_DEBUG", 4);
        cadesplugin.Вставить("LOG_LEVEL_INFO", 2);
        cadesplugin.Вставить("LOG_LEVEL_ERROR", 1);

        cadesplugin.Вставить("CADESCOM_AllowNone", 0);
        cadesplugin.Вставить("CADESCOM_AllowNoOutstandingRequest", "0x1");
        cadesplugin.Вставить("CADESCOM_AllowUntrustedCertificate", "0x2");
        cadesplugin.Вставить("CADESCOM_AllowUntrustedRoot", "0x4");
        cadesplugin.Вставить("CADESCOM_SkipInstallToStore", "0x10000000");
	
	
	
	CAPICOM_CURRENT_USER_STORE=2;
	CAPICOM_MY_STORE="My";
	CAPICOM_OTHER_STORE="AddressBook";
	CAPICOM_STORE_OPEN_READ_ONLY=0;
	CAPICOM_CERTIFICATE_FIND_TIME_VALID=9;
	CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED = 2;

	
	ТекДата=ТекущаяДата();
	
	СохранённыйОтпечатокДекларанта=Неопределено;
	СохранённыеОтпечаткиПолучателей=Новый Массив;
	// восстанавливаем настройки
	НашлиСертификат=Ложь;
	Попытка
		// формируем список наших сертификатов
		ТекЭлемент=Неопределено;
		СписокНашихСертификатов=Новый СписокЗначений;
		
		Store=Новый COMОбъект("CAPICOM.Store");
//		Store.Open(CAPICOM_CURRENT_USER_STORE,CAPICOM_MY_STORE,CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);
		Store.Open();
		Certs=Store.Certificates;
		ValidCerts=Certs;//.Find(CAPICOM_CERTIFICATE_FIND_TIME_VALID,ТекДата,-1);
		Для CertNum=1 По ValidCerts.Count Цикл
			
			CurCert=ValidCerts.Item(CertNum);
			Thumbprint=CurCert.Thumbprint;
			СерийныйНомер=CurCert.SerialNumber;
			Если Thumbprint=Текущийпользователь Тогда
				ВыбСертификат=CurCert;
				НашлиСертификат=Истина;
				Прервать;
			Конецесли;
		КонецЦикла;
		Попытка
			Store.close();
		Исключение
		КонецПопытки;
		
	Исключение
		ТекстОшибки=СтрЗаменить(ОписаниеОшибки(),"'","");
		Сообщить(NStr("ru = 'Ошибка при работе с хранилищем сертификатов! (Возможно, не установлен модуль CAPICOM)"+Символы.ПС+"Описание ошибки: "+ТекстОшибки+"'", "ru"));
		Возврат;
	КонецПопытки;
	Если НашлиСертификат=Ложь Тогда
		//Ищем закрытые
				
			Store=Новый COMОбъект("CAPICOM.Store");
			Store.Open(cadesplugin.CAPICOM_LOCAL_MACHINE_STORE);
			certs = Store.Certificates;
			ValidCerts=Certs;//.Find(CAPICOM_CERTIFICATE_FIND_TIME_VALID,ТекДата,-1);
			Для CertNum=1 По ValidCerts.Count Цикл
				
				CurCert=ValidCerts.Item(CertNum);
				Thumbprint=CurCert.Thumbprint;
				СерийныйНомер=CurCert.SerialNumber;
				Если Thumbprint=Текущийпользователь Тогда
					ВыбСертификат=CurCert;
					НашлиСертификат=Истина;
					Прервать;
				Конецесли;
			КонецЦикла;


		
		
	КонецЕсли;	
	Если НашлиСертификат=Ложь Тогда
		
			
		Сообщить("Не установлен сертификат в системе!!");
		Возврат;
	КонецЕсли;
	

	//Если     Открепленная=Истина  ТОгда
	////Ф=ПолучитьИмяВременногоФайла();
	//Текст=Новый ТекстовыйДокумент;
	//Текст.ДобавитьСтроку(ИмяВр);
	////Текст.Записать(Ф);
	////ИмяФ_1=ПолучитьИмяВременногоФайла();
	//
	//КонецЕсли;
	
	oSigner = Новый COMОбъект("CAdESCOM.CPSigner"); // Объект, задающий параметры создания и содержащий информацию об усовершенствованной подписи. 
	
	oSigningTimeAttr=Новый COMОбъект("CADESCOM.CPAttribute");

    //oSigningTimeAttr.propset_Name(cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME);
    oSigningTimeAttr.Name=cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME;
    oTimeNow = Текущаядата();
    oSigningTimeAttr.Value=oTimeNow;
    attr = oSigner.AuthenticatedAttributes2;
    attr.Add(oSigningTimeAttr);
     oDocumentNameAttr = Новый COMОбъект("CADESCOM.CPAttribute");
      oDocumentNameAttr.Name=cadesplugin.CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME;
      oDocumentNameAttr.Value="CRPT";
      attr.Add(oDocumentNameAttr);
          oSigner.Certificate=ВыбСертификат;

           oSignedData = Новый COMОбъект("CAdESCOM.CadesSignedData");
                // Данные на подпись ввели
				Если 
					ПодписываемКарточку=Ложь И
					НЕ ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВернутьНеИспользоватьCAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY() 
					
					Тогда
           				oSigner.Options=cadesplugin.CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY;
					КонецЕсли;
//			oSigner.TSAAddress = "http://cryptopro.ru/tsp/";
			//oSigner.OCSPAddress = "http://cryptopro.ru/ocsp/";
			Если Уже64=Истина Тогда
             oSignedData.ContentEncoding=cadesplugin.CADESCOM_BASE64_TO_BINARY; //
			ИмяВр=ИмяВр;
				
		   ИначеЕсли   Открепленная=Истина Тогда
             oSignedData.ContentEncoding=cadesplugin.CADESCOM_BASE64_TO_BINARY; //
			//ИмяВр=base64Строка(ПолучитьДвоичныеДанныеИзСтроки(ИмяВр,,));
			ИмяВр=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ИмяВр));
			
			
			
		  Иначе
              oSignedData.ContentEncoding=cadesplugin.CADESCOM_STRING_TO_UCS2LE; //
		КонецЕсли;
                      oSignedData.Content=
			 ИмяВр;
			 
			 
			 Если Открепленная=Истина Тогда
               Имя_вр_1 = oSignedData.SignCades(oSigner,1,true);
 			    //Имя_вр_1 =Base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Имя_вр_1));
				Иначе
               Имя_вр_1 = oSignedData.SignCades(oSigner, cadesplugin.CADESCOM_CADES_BES);
	                 КонецЕсли;
	
	
//    ПолучитьСписокСертификатов(2, Истина,ОповещенияПослеВыполения,ИмяВр,Текущийпользователь,ЭтаФорма,ОтветСтруктура);
	
	
КонецПроцедуры		





Функция НайтиПоГТИН(ГТИН) ЭКспорт
	Возврат Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(ГТИН));
КонецФункции

Процедура ПодписатьФайлСервер(ИмяВр ,Текущийпользователь,Имя_вр_1 ,Открепленная) Экспорт
	    cadesplugin=Новый Структура();
        cadesplugin.Вставить("CAPICOM_LOCAL_MACHINE_STORE", 1);
        cadesplugin.Вставить("CAPICOM_CURRENT_USER_STORE", 2);
        cadesplugin.Вставить("CADESCOM_LOCAL_MACHINE_STORE", 1);
        cadesplugin.Вставить("CADESCOM_CURRENT_USER_STORE", 2);
        cadesplugin.Вставить("CADESCOM_CONTAINER_STORE", 100);

        cadesplugin.Вставить("CAPICOM_MY_STORE", "My");

        cadesplugin.Вставить("CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED", 2);

        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME", 1);

        cadesplugin.Вставить("CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED", 0);
        cadesplugin.Вставить("CADESCOM_XML_SIGNATURE_TYPE_ENVELOPING", 1);
        cadesplugin.Вставить("CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE", 2);

        cadesplugin.Вставить("XmlDsigGost3410UrlObsolete", "http://www.Вставить(""w3.Вставить(""org/2001/04/xmldsig-more#gostr34102001-gostr3411");
        cadesplugin.Вставить("XmlDsigGost3411UrlObsolete", "http://www.Вставить(""w3.Вставить(""org/2001/04/xmldsig-more#gostr3411");
        cadesplugin.Вставить("XmlDsigGost3410Url", "urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102001-gostr3411");
        cadesplugin.Вставить("XmlDsigGost3411Url", "urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr3411");

        cadesplugin.Вставить("CADESCOM_CADES_DEFAULT", 0);
        cadesplugin.Вставить("CADESCOM_CADES_BES", 1);
        cadesplugin.Вставить("CADESCOM_CADES_T", 5);
        cadesplugin.Вставить("CADESCOM_CADES_X_LONG_TYPE_1", 93);

        cadesplugin.Вставить("CADESCOM_ENCODE_BASE64", 0);
        cadesplugin.Вставить("CADESCOM_ENCODE_BINARY", 1);
        cadesplugin.Вставить("CADESCOM_ENCODE_ANY", -1);

        cadesplugin.Вставить("CAPICOM_CERTIFICATE_INCLUDE_CHAIN_EXCEPT_ROOT", 0);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN", 1);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY", 2);

        cadesplugin.Вставить("CAPICOM_CERT_INFO_SUBJECT_SIMPLE_NAME", 0);
        cadesplugin.Вставить("CAPICOM_CERT_INFO_ISSUER_SIMPLE_NAME", 1);

        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_SHA1_HASH", 0);                              
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME", 1);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_ISSUER_NAME", 2);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_ROOT_NAME", 3);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_TEMPLATE_NAME", 4);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_EXTENSION", 5);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY", 6);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_APPLICATION_POLICY", 7);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_CERTIFICATE_POLICY", 8);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_TIME_VALID", 9);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_TIME_NOT_YET_VALID", 10);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_TIME_EXPIRED", 11);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_KEY_USAGE", 12);

        cadesplugin.Вставить("CAPICOM_DIGITAL_SIGNATURE_KEY_USAGE", 128);

        cadesplugin.Вставить("CAPICOM_PROPID_ENHKEY_USAGE", 9);

        cadesplugin.Вставить("CAPICOM_OID_OTHER", 0);
        cadesplugin.Вставить("CAPICOM_OID_KEY_USAGE_EXTENSION", 10);

        cadesplugin.Вставить("CAPICOM_EKU_CLIENT_AUTH", 2);
        cadesplugin.Вставить("CAPICOM_EKU_SMARTCARD_LOGON", 5);
        cadesplugin.Вставить("CAPICOM_EKU_OTHER", 0);

        cadesplugin.Вставить("CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME", 0);
        cadesplugin.Вставить("CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME", 1);
        cadesplugin.Вставить("CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION", 2);
        cadesplugin.Вставить("CADESCOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME", 0);
        cadesplugin.Вставить("CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME", 1);
        cadesplugin.Вставить("CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION", 2);
        cadesplugin.Вставить("CADESCOM_ATTRIBUTE_OTHER", -1);

        cadesplugin.Вставить("CADESCOM_STRING_TO_UCS2LE", 0);
        cadesplugin.Вставить("CADESCOM_BASE64_TO_BINARY", 1);

        cadesplugin.Вставить("CADESCOM_DISPLAY_DATA_NONE", 0);
        cadesplugin.Вставить("CADESCOM_DISPLAY_DATA_CONTENT", 1);
        cadesplugin.Вставить("CADESCOM_DISPLAY_DATA_ATTRIBUTE", 2);

        cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_RC2", 0);
        cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_RC4", 1);
        cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_DES", 2);
        cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_3DES", 3);
        cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_AES", 4);
        cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_GOST_28147_89", 25);

        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_SHA1", 0);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_MD2", 1);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_MD4", 2);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_MD5", 3);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_SHA_256", 4);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_SHA_384", 5);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_SHA_512", 6);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_CP_GOST_3411", 100);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256", 101);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512", 102);

        cadesplugin.Вставить("LOG_LEVEL_DEBUG", 4);
        cadesplugin.Вставить("LOG_LEVEL_INFO", 2);
        cadesplugin.Вставить("LOG_LEVEL_ERROR", 1);

        cadesplugin.Вставить("CADESCOM_AllowNone", 0);
        cadesplugin.Вставить("CADESCOM_AllowNoOutstandingRequest", "0x1");
        cadesplugin.Вставить("CADESCOM_AllowUntrustedCertificate", "0x2");
        cadesplugin.Вставить("CADESCOM_AllowUntrustedRoot", "0x4");
        cadesplugin.Вставить("CADESCOM_SkipInstallToStore", "0x10000000");
	
	
	
	CAPICOM_CURRENT_USER_STORE=2;
	CAPICOM_MY_STORE="My";
	CAPICOM_OTHER_STORE="AddressBook";
	CAPICOM_STORE_OPEN_READ_ONLY=0;
	CAPICOM_CERTIFICATE_FIND_TIME_VALID=9;
	CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED = 2;

	
	ТекДата=ТекущаяДата();
	
	СохранённыйОтпечатокДекларанта=Неопределено;
	СохранённыеОтпечаткиПолучателей=Новый Массив;
	// восстанавливаем настройки
	НашлиСертификат=Ложь;
	Попытка
		// формируем список наших сертификатов
		ТекЭлемент=Неопределено;
		СписокНашихСертификатов=Новый СписокЗначений;
		
		Store=Новый COMОбъект("CAPICOM.Store");
		Store.Open(CAPICOM_CURRENT_USER_STORE,CAPICOM_MY_STORE,CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);
		Certs=Store.Certificates;
		ValidCerts=Certs;//.Find(CAPICOM_CERTIFICATE_FIND_TIME_VALID,ТекДата,-1);
		Для CertNum=1 По ValidCerts.Count Цикл
			CurCert=ValidCerts.Item(CertNum);
			Thumbprint=CurCert.Thumbprint;
			Если Thumbprint=Текущийпользователь Тогда
				НашлиСертификат=Истина;
				ВыбСертификат=CurCert;
				Прервать;
			Конецесли;
		КонецЦикла;
	Исключение
		ТекстОшибки=СтрЗаменить(ОписаниеОшибки(),"'","");
		Сообщить(NStr("ru = 'Ошибка при работе с хранилищем сертификатов! (Возможно, не установлен модуль CAPICOM)"+Символы.ПС+"Описание ошибки: "+ТекстОшибки+"'", "ru"));
		Возврат;
	КонецПопытки;

	Если НашлиСертификат=Ложь Тогда
		Сообщить("В системе нет сертификата!!");
		Возврат;
	КонецЕсли;
	
	//Если     Открепленная=Истина  ТОгда
	////Ф=ПолучитьИмяВременногоФайла();
	//Текст=Новый ТекстовыйДокумент;
	//Текст.ДобавитьСтроку(ИмяВр);
	////Текст.Записать(Ф);
	////ИмяФ_1=ПолучитьИмяВременногоФайла();
	//
	//КонецЕсли;
	
	oSigner = Новый COMОбъект("CAdESCOM.CPSigner"); // Объект, задающий параметры создания и содержащий информацию об усовершенствованной подписи. 
	
	oSigningTimeAttr=Новый COMОбъект("CADESCOM.CPAttribute");

    //oSigningTimeAttr.propset_Name(cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME);
    oSigningTimeAttr.Name=cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME;
    oTimeNow = Текущаядата();
    oSigningTimeAttr.Value=oTimeNow;
    attr = oSigner.AuthenticatedAttributes2;
    attr.Add(oSigningTimeAttr);
     oDocumentNameAttr = Новый COMОбъект("CADESCOM.CPAttribute");
      oDocumentNameAttr.Name=cadesplugin.CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME;
      oDocumentNameAttr.Value="CRPT";
      attr.Add(oDocumentNameAttr);
          oSigner.Certificate=ВыбСертификат;

           oSignedData = Новый COMОбъект("CAdESCOM.CadesSignedData");
                // Данные на подпись ввели
  //         oSigner.Options=cadesplugin.CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN;
//			oSigner.TSAAddress = "http://cryptopro.ru/tsp/";
			//oSigner.OCSPAddress = "http://cryptopro.ru/ocsp/";
		   Если   Открепленная=Истина Тогда
             oSignedData.ContentEncoding=cadesplugin.CADESCOM_BASE64_TO_BINARY; //
			ИмяВр=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ИмяВр));
		  Иначе
              oSignedData.ContentEncoding=cadesplugin.CADESCOM_STRING_TO_UCS2LE; //
		КонецЕсли;
                      oSignedData.Content=
			 ИмяВр;
			 
			 
			 Если Открепленная=Истина Тогда
               Имя_вр_1 = oSignedData.SignCades(oSigner,1,true);
 			    //Имя_вр_1 =Base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Имя_вр_1));
				Иначе
               Имя_вр_1 = oSignedData.SignCades(oSigner, cadesplugin.CADESCOM_CADES_BES);
	                 КонецЕсли;
	
	
//    ПолучитьСписокСертификатов(2, Истина,ОповещенияПослеВыполения,ИмяВр,Текущийпользователь,ЭтаФорма,ОтветСтруктура);
	
	
	
КонецПроцедуры
Процедура ЗаписатьТокенВРегистр(ТТ,Р,СерийныйНомер="",КукиДляНк="",CSRF="") Экспорт
	РегД=регистрысведений.ТокенПоСертификату_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегД.Отбор.Отпечаток.Установить(ТТ);
	
	Добав=РегД.Добавить();
	Добав.Отпечаток=ТТ;
	Добав.СерийныйНомер=СерийныйНомер;
	Добав.Токен=Р;
	Добав.КукиДляНК=КукиДляНк;
	Добав.CSRFДляНК=CSRF;
	
	РегД.Записать(Истина);
	
КонецПроцедуры

Функция ПолучитьИзПользователя(ТекущийПользователь) Экспорт
	Струк=Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(ТекущийПользователь);
	
	Струк.Вставить("РасчетОстатков",РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().РасчетОстатков);
	
	Возврат Струк;
КонецФункции

Функция ЗаполнитьСтруктуруИзОтветаJSON(Знач ТекстJSON) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	Попытка
		Возврат ПрочитатьJSON(ЧтениеJSON);
	Исключение
		//Сообщить("Текстовая строка "+ТекстJSON+" не соответствует шаблону JSON");
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ОбработкаWEBНаСервере() Экспорт
	Возврат РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ОбработкаWEBНаСервере;
КонецФункции

Функция ОбработкаWEBНаСервере_ПолучитьТокен() Экспорт
	Возврат РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ОбработкаWEBНаСервере
	ИЛИ РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ПолучитьТокенНаСервере
	;
КонецФункции

Функция Получение_Токена_Сервер(Thumbprint_1,СерийныйНомер="",АдресПрокси,ПортПрокси,ПользовательПрокси,ПарольПрокси,АдресКАПИ,Таймаут,АдресДляПолученияТокена) Экспорт
	
	Попытка
		Если Не ЗначениеЗаполнено(Thumbprint_1) тогда
			//(,"Не выбран сертификат");
			Возврат "";
		КонецЕсли;
		
		
			Если ЗначениеЗАполнено(АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",АдресПрокси,ПортПрокси,ПользовательПрокси,ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(АдресДляПолученияТокена,,,,Прокси,Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
			
				HTTPСервисЗапрос=Новый HTTPСоединение(АдресДляПолученияТокена,,,,,Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
		
			Запрос=Новый HTTPЗапрос("/api/v3/auth/cert/key");
		
			Ответ=HTTPСервисЗапрос.Получить(Запрос);
		Если Ответ.КодСостояния=200 Тогда 	
			ОтветСтруктура =ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
			Подписываем=ОтветСтруктура.data;
			Имя_вр_1="";
			ПодписатьФайл(Ложь,Подписываем,Thumbprint_1,Имя_вр_1,,,СерийныйНомер);
			
			Добав=Имя_вр_1;
			//Добав=ПолучитьСтрокуИздвоичныхДанных(РР);
			//Добав=КодСтрСервер(Добав);
			Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
			Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
			Добав=СтрЗаменить(Добав,"\r\n","");

			Тело = "{
			|""uuid"": """+ОтветСтруктура.uuid+""",
			|""data"": """+Добав+"""
			|}";
			
			
			
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/auth/cert/");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
				
			
			
			//ЧтениеJSON = Новый ЧтениеJSON;
			//ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			Попытка
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());//ПрочитатьJSON(ЧтениеJSON);
			Исключение
//				Сообщить("Текстовая строка "+ТекстJSON+" не соответствует шаблону JSON");
				Сообщить(Описаниеошибки());
				Возврат Неопределено;
			КонецПопытки;
			Ош="";
			Если     NNN.Свойство("error_message",Ош) Тогда
				Сообщить(Ош);
				Возврат "";
			КонецЕсли;
			 ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(Thumbprint_1,NNN.token,СерийныйНомер);
			
			Возврат NNN.token
		Иначе
			Сообщить("Не удалось подключиться к сайту: "+АдресКАПИ);
			
			Возврат "";
		КонецЕсли;	
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат "";
	КонецПопытки;
	
КонецФункции



Функция   CertKEyНасервере(Знач Thumbprint_1) Экспорт
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
		
			Запрос=Новый HTTPЗапрос("/api/v3/auth/cert/key");
		
			Ответ=HTTPСервисЗапрос.Получить(Запрос);
		Если Ответ.КодСостояния=200 Тогда 	
			ОтветСтруктура =ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
			Подписываем=ОтветСтруктура.data;
			Имя_вр_1="";
			ПодписатьФайлСервер(Подписываем,Thumbprint_1.Thumbprint_1,Имя_вр_1,ложь);
			
			Добав=Имя_вр_1;
			//Добав=ПолучитьСтрокуИздвоичныхДанных(РР);
			//Добав=КодСтрСервер(Добав);
			Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
			Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
			Добав=СтрЗаменить(Добав,"\r\n","");

			Тело = "{
			|""uuid"": """+ОтветСтруктура.uuid+""",
			|""data"": """+Добав+"""
			|}";
			
			
			
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/auth/cert/");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
				
			
			
			//ЧтениеJSON = Новый ЧтениеJSON;
			//ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			Попытка
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());//ПрочитатьJSON(ЧтениеJSON);
			Исключение
//				Сообщить("Текстовая строка "+ТекстJSON+" не соответствует шаблону JSON");
				Сообщить(Описаниеошибки());
				Возврат Неопределено;
			КонецПопытки;
			Ош="";
			Если     NNN.Свойство("error_message",Ош) Тогда
				Сообщить(Ош);
				Возврат "";
			КонецЕсли;
			 ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(Thumbprint_1.Thumbprint_1,NNN.token);
			
			Возврат NNN.token
		Иначе
			Сообщить("Не удалось подключиться к сайту: "+Thumbprint_1.АдресКАПИ);
			
			Возврат "";
		КонецЕсли;	
			
КонецФункции


Функция    ПолучениеТокенаНаСервере(Thumbprint_1,Тело) Экспорт
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
		
	
					HTTPЗапрос=Новый HTTPЗапрос("api/v3/auth/cert/");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
				Возврат Новый Структура("КодСостояния,ПолучитьтелоКакСтроку",Ответ.КодСостояния,Ответ.ПолучитьТелоКакСтроку());
КонецФункции
Функция ПолучениеУпаковок(Thumbprint_1,СРегистра,cis) Экспорт
	
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			Если Thumbprint_1.НаименованиеСтенда="Табак"
				ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
Тогда
			МассивКодо=Новый Массив;
	          МассивКодо.Добавить(cis);
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("ids", МассивКодо);
			ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, "  ");
			
			ЗаписьJSON = Новый ЗаписьJSON();
			ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
			
			ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
			
			NN=ЗаписьJSON.Закрыть();
						
	
			HTTPЗапрос=Новый HTTPЗапрос("private-office-api/private/v2/cis/status");
			//private-office-api/private/v2/cis/"+КодМаркировки+"/mrp"
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин   
			HTTPЗапрос.УстановитьТелоИзСтроки(NN,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	
Иначе
	
				ММ= cis;

	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/identifytools/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ)+"?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ММ));
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
КонецЕсли;
	Возврат Новый Структура("КодСостояния,ПолучитьТелоКакСтроку",Ответ.КодСостояния,Ответ.ПолучитьТелоКакСтроку());
КонецФункции

Функция  СоздатьНайтиОрганизацию(НАимОрг,ИНН) Экспорт
	СпрОрг=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",ИНН);
	Если СпрОрг=Справочники.Организации_ХамелеонЦРПТ.ПустаяСсылка() Тогда
		СпрОрг=Справочники.Организации_ХамелеонЦРПТ.СоздатьЭлемент();
	ИначеЕсли ((ЗначениеЗаполнено(СпрОрг.ИНН) И спрОрг.ИНН=ИНН) ИЛИ Не ЗначениеЗаполнено(ИНН)) 
		//И     ((СпрОрг.Лицензия=Лицензия ) ИЛИ Не ЗначениеЗАполнено(Лицензия))
		Тогда
		Возврат СпрОрг.Ссылка;
	Иначе
		СпрОрг=СпрОрг.Получитьобъект();
		
	Конецесли;
	СпрОрг.ИНН=ИНН;
	СпрОрг.Наименование=Наиморг;
	СпрОрг.Записать();
	Возврат СпрОрг.Ссылка
КонецФункции

Функция ОБработатьРусскиеБуквы(НомМ) Экспорт
	Ном=Врег(НомМ);
	Ном=СтрЗаменить(Ном,"Й","Q");
	Ном=СтрЗаменить(Ном,"Ц","W");
	Ном=СтрЗаменить(Ном,"У","E");
	Ном=СтрЗаменить(Ном,"К","R");
	Ном=СтрЗаменить(Ном,"Е","T");
	Ном=СтрЗаменить(Ном,"Н","Y");
	Ном=СтрЗаменить(Ном,"Г","U");
	Ном=СтрЗаменить(Ном,"Ш","I");
	Ном=СтрЗаменить(Ном,"Щ","O");
	Ном=СтрЗаменить(Ном,"З","P");
	Ном=СтрЗаменить(Ном,"Ф","A");
	Ном=СтрЗаменить(Ном,"Ы","S");
	Ном=СтрЗаменить(Ном,"В","D");
	Ном=СтрЗаменить(Ном,"А","F");
	Ном=СтрЗаменить(Ном,"П","G");
	Ном=СтрЗаменить(Ном,"Р","H");
	Ном=СтрЗаменить(Ном,"О","J");
	Ном=СтрЗаменить(Ном,"Л","K");
	Ном=СтрЗаменить(Ном,"Д","L");
	Ном=СтрЗаменить(Ном,"Я","Z");
	Ном=СтрЗаменить(Ном,"Ч","X");
	Ном=СтрЗаменить(Ном,"С","C");
	Ном=СтрЗаменить(Ном,"М","V");
	Ном=СтрЗаменить(Ном,"И","B");
	Ном=СтрЗаменить(Ном,"Т","N");
	Ном=СтрЗаменить(Ном,"Ь","M");
	
	Возврат Ном;
КонецФункции

Функция КодСтр(Знач Строка) Экспорт
Строка=СтрЗаменить(Строка,"\u001D",Символ(29));

Строка=СтрЗаменить(Строка,"%","%25");
КодСтр= КодироватьСтроку(Строка,СпособКодированияСтроки.URLВКодировкеURL);

КодСтр=СтрЗаменить(КодСтр,"&","%26");
КодСтр=СтрЗаменить(КодСтр,"?","%3F");
КодСтр=СтрЗаменить(КодСтр,"+","%2B");
КодСтр=СтрЗаменить(КодСтр,";","%3B");
КодСтр=СтрЗаменить(КодСтр,"'","%27");


Возврат КодСтр;

	
КонецФункции

Функция РасКодСтр(Строка) Экспорт
	cis=РаскодироватьСтроку(Строка,СпособКодированияСтроки.КодировкаURL);
	cis=Сред(cis,1,Найти(cis,Символ(29))-1);
	Возврат КодСтр(cis)
	
КонецФункции

Функция ПолучитьGTINСМарки(cis)    Экспорт
	Если Сред(cis,1,2)="01" тогда
		Возврат сред(cis,3,14)
	Иначе
		Возврат сред(cis,1,14)
	КонецЕсли;
Конецфункции


Функция Задержка_Номральная(Секунд)    Экспорт
			Если РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗадержкаЧерезЦикл Тогда
				ТекущаяДата=ТекущаяДата();
				Пока ТекущаяДата()<=Текущаядата+Секунд Цикл
					
					а=1;
					
				КонецЦикла;
				
		Иначе
			
					Попытка
				Сигнатура = Формат(ТекущаяДата(), "ДФ=yyyyMMddhhmmss");
				ПутьСкрипта = КаталогВременныхФайлов()+"SleepScript"+Сигнатура+".vbs";
				СкриптФайл = Новый ТекстовыйДокумент;
				СкриптФайл.ДобавитьСтроку("WScript.Sleep("+Формат(Секунд*1000, "ЧГ=0")+")");
				СкриптФайл.Записать(ПутьСкрипта, КодировкаТекста.OEM);
			//	WSHShell = Новый COMОбъект("WScript.Shell");
			//	WSHShell.Run("wscript.exe """+ПутьСкрипта+"""", 0, Истина);
				ЗапуститьПриложение("wscript.exe """+ПутьСкрипта+"""", , Истина);
				УдалитьФайлы(ПутьСкрипта);
			исключение
			КонецПопытки;
			КонецЕсли;
	
КонецФункции


Функция Получение_Токена_ЛДМП(Thumbprint_1) Экспорт
	НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	Попытка
		Если Не ЗначениеЗаполнено(Thumbprint_1.Thumbprint_1) тогда
			//(,"Не выбран сертификат");
			Возврат "";
		КонецЕсли;
		
		Если НаСервере Тогда
			
			//		Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.CertKEyНасервере(Thumbprint_1)
			
		Иначе
			
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;













			
						






			Тело = "{
			|""client_id"": """+Thumbprint_1.ИдентификаторКлиентаМДЛП+""",
			|""client_secret"": """+Thumbprint_1.СекретныйКодМДЛП+""",
			|""user_id"": """+Thumbprint_1.Thumbprint_1+""",
			|""auth_type"": """+"SIGNED_CODE"+"""
			|}";
			Запрос=Новый HTTPЗапрос("api/v1/auth");
			Запрос.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
			Запрос.УстановитьТелоИзСтроки(Тело);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(Запрос);
			Если Ответ.КодСостояния=200 Тогда 	
				ОтветСтруктура =ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
				Подписываем=ОтветСтруктура.code;
				Имя_вр_1="";
				ПодписатьФайл(Подписываем,Thumbprint_1,Имя_вр_1,Истина);
				
				Добав=Имя_вр_1;
				//Добав=ПолучитьСтрокуИздвоичныхДанных(РР);
				//Добав=КодСтрСервер(Добав);
				Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");
				
				Тело = "{
				|""code"": """+ОтветСтруктура.code+""",
				|""signature"": """+Добав+"""
				|}";
				
				
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v1/token");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
				
				
				
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
				Попытка


					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());//ПрочитатьJSON(ЧтениеJSON);
				Исключение
					//				Сообщить("Текстовая строка "+ТекстJSON+" не соответствует шаблону JSON");
					Сообщить(Описаниеошибки());
					Возврат Неопределено;
				КонецПопытки;
				Ош="";
				Если     NNN.Свойство("error_message",Ош) Тогда
					Сообщить(Ош);
					Возврат "";
				КонецЕсли;
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(Thumbprint_1.Thumbprint_1,NNN.token);
				
				Возврат NNN.token
			Иначе
				Сообщить("Не удалось подключиться к сайту: "+Thumbprint_1.АдресКАПИ);
				
				Возврат "";
			КонецЕсли;	
		КонецЕсли;








	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат "";
	КонецПопытки;
	
КонецФункции

Функция ИщемЗаказыКМДляОборота(ползователь)
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказМарок_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Документ.ЗаказМарок_ХамелеонЦРПТ КАК ЗаказМарок_ХамелеонЦРПТ
		|ГДЕ
		|	ЗаказМарок_ХамелеонЦРПТ.ВвестиВОборотПослеЭмитирования = ИСТИНА
		|	И ЗаказМарок_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему = &СайтыВходаВСистему";
	
	Запрос.УстановитьПараметр("СайтыВходаВСистему",ползователь.СайтыВходаВСистему);
	Запрос.УстановитьПараметр("Статус",Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивДокументов=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		МассивДокументов.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	Возврат             МассивДокументов
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
Конецфункции


Функция ОбновитьСтатусыДокументовНаСервере_ЗазкаыКМ(Пользователь)
	
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказМарок_ХамелеонЦРПТ.Ссылка,
		|	ЗаказМарок_ХамелеонЦРПТ._Order_ID
		|ИЗ
		|	Документ.ЗаказМарок_ХамелеонЦРПТ КАК ЗаказМарок_ХамелеонЦРПТ
		|ГДЕ
		|	ЗаказМарок_ХамелеонЦРПТ.Статус В(&Статус)
		|	И ПОДСТРОКА(ЗаказМарок_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|	И НЕ ЗаказМарок_ХамелеонЦРПТ.ПометкаУдаления
		|	И ЗаказМарок_ХамелеонЦРПТ.Организация = &Организация
		|	И ЗаказМарок_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему = &СайтыВходаВСистему
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказМарок_ХамелеонЦРПТ.Организация";
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВПроцессе);
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	Запрос.УстановитьПараметр("Организация",	Пользователь.Организация); 
	Запрос.УстановитьПараметр("СайтыВходаВСистему",	Пользователь.СайтыВходаВСистему); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	
Конецфункции




Функция ОбновитьСтатусыДокументовНаСервереСозданиеНовогоШкНаКороба_ХамелеонЦРПТСУЗ(ДокументПроверки,Пользователь) Экспорт
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Отгрузка_ХамелеонЦРПТ.Ссылка,
		|	Отгрузка_ХамелеонЦРПТ._Order_ID КАК _Order_ID
		|ИЗ
		|	Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ КАК Отгрузка_ХамелеонЦРПТ
		|ГДЕ
		|	Отгрузка_ХамелеонЦРПТ.Статус В(&Статус)
		|	И Отгрузка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему.Наименование <> ""Фармацевтика""
		|	И ПОДСТРОКА(Отгрузка_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|	И Отгрузка_ХамелеонЦРПТ.ЧерезСУЗ
		|	И Отгрузка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему = &СайтыВходаВСистему";
	Если ЗначениеЗаполнено(ДокументПроверки) тогда
		Запрос.Текст = Запрос.Текст+"
		|  И Отгрузка_ХамелеонЦРПТ.Ссылка=&ДокументПроверки";
		Запрос.УстановитьПараметр("ДокументПроверки",ДокументПроверки);
	КонецЕсли;
	
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета);
	
	Запрос.УстановитьПараметр("СайтыВходаВСистему",	Пользователь.СайтыВходаВСистему); 
	
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	
Конецфункции


Функция ОбновитьСтатусыДокументовНаСервереСозданиеАТК_ХамелеонЦРПТ(ДокументПроверки,Пользователь) Экспорт
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СозданиеНовогоАТК_ХамелеонЦРПТ.Ссылка,
		|	СозданиеНовогоАТК_ХамелеонЦРПТ._Order_ID КАК _Order_ID,
		|	СозданиеНовогоАТК_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему.Наименование КАК Сайт,
		|	СозданиеНовогоАТК_ХамелеонЦРПТ.ТипДокумента
		|ИЗ
		|	Документ.СозданиеНовогоАТК_ХамелеонЦРПТ КАК СозданиеНовогоАТК_ХамелеонЦРПТ
		|ГДЕ
		|	СозданиеНовогоАТК_ХамелеонЦРПТ.Статус В(&Статус)
		|	И СозданиеНовогоАТК_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему.Наименование <> ""Фармацевтика""
		|	И ПОДСТРОКА(СозданиеНовогоАТК_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|	И СозданиеНовогоАТК_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему = &СайтыВходаВСистему";
	
	Если ЗначениеЗаполнено(ДокументПроверки) тогда
		Запрос.Текст = Запрос.Текст +"
		|  И СозданиеНовогоАТК_ХамелеонЦРПТ.Ссылка=&ДокументПроверки";
		Запрос.УстановитьПараметр("ДокументПроверки",ДокументПроверки);
	КонецЕсли;
	
		
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	
	
	Запрос.УстановитьПараметр("СайтыВходаВСистему",	Пользователь.СайтыВходаВСистему); 
	
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		
		Если ВыборкаДетальныеЗаписи.Сайт="Молоко" И ВыборкаДетальныеЗаписи.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании Тогда
			Продолжить;
		КонецЕсли;
		Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	

Конецфункции


Функция ОбновитьСтатусыДокументовНаСервереСозданиеНовогоШкНаКороба_ХамелеонЦРПТ(ДокументПроверки,Пользователь) Экспорт
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Отгрузка_ХамелеонЦРПТ.Ссылка,
		|	Отгрузка_ХамелеонЦРПТ._Order_ID КАК _Order_ID,
		|	Отгрузка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему.Наименование КАК Сайт,
		|	Отгрузка_ХамелеонЦРПТ.ТипДокумента
		|ИЗ
		|	Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ КАК Отгрузка_ХамелеонЦРПТ
		|ГДЕ
		|	Отгрузка_ХамелеонЦРПТ.Статус В(&Статус)
		|	И Отгрузка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему.Наименование <> ""Фармацевтика""
		|	И ПОДСТРОКА(Отгрузка_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		//|	И НЕ Отгрузка_ХамелеонЦРПТ.ЧерезСУЗ
		|	И НЕ Отгрузка_ХамелеонЦРПТ.ВходитВГрупповую
		|	И Отгрузка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему = &СайтыВходаВСистему  ";
	
	Если ЗначениеЗаполнено(ДокументПроверки) тогда
		Запрос.Текст = Запрос.Текст +"
		|  И Отгрузка_ХамелеонЦРПТ.Ссылка=&ДокументПроверки";
		Запрос.УстановитьПараметр("ДокументПроверки",ДокументПроверки);
	КонецЕсли;
	
		Запрос.Текст = Запрос.Текст +"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТАгрегации.Ссылка,
		|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТАгрегации.Ссылка._Order_ID,
		|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТАгрегации.Ссылка.ТекущийПользователь.СайтыВходаВСистему,
		|	СозданиеНовогоШкНаКороба_ХамелеонЦРПТАгрегации.Ссылка.ТипДокумента
		|ИЗ
		|	Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ КАК Отгрузка_ХамелеонЦРПТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ.Агрегации КАК СозданиеНовогоШкНаКороба_ХамелеонЦРПТАгрегации
		|		ПО Отгрузка_ХамелеонЦРПТ.Ссылка = СозданиеНовогоШкНаКороба_ХамелеонЦРПТАгрегации.Агрегация
		|ГДЕ
		|	Отгрузка_ХамелеонЦРПТ.Статус В(&Статус)
		|	И Отгрузка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему.Наименование <> ""Фармацевтика""
		|	И ПОДСТРОКА(Отгрузка_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		//|	И НЕ Отгрузка_ХамелеонЦРПТ.ЧерезСУЗ
		|	И Отгрузка_ХамелеонЦРПТ.ВходитВГрупповую
		|	И Отгрузка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему = &СайтыВходаВСистему";
	Если ЗначениеЗаполнено(ДокументПроверки) тогда
		Запрос.Текст = Запрос.Текст +"
		|  И Отгрузка_ХамелеонЦРПТ.Ссылка=&ДокументПроверки";
		Запрос.УстановитьПараметр("ДокументПроверки",ДокументПроверки);
	КонецЕсли;
	
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	
	
	Запрос.УстановитьПараметр("СайтыВходаВСистему",	Пользователь.СайтыВходаВСистему); 
	
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		
		Если ВыборкаДетальныеЗаписи.Сайт="Молоко" И ВыборкаДетальныеЗаписи.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании Тогда
			Продолжить;
		КонецЕсли;
		Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	

Конецфункции


Функция ОбновитьСтатусДокумента_Приемка_АКТ(Добб_1,Заказ,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа) Экспорт
	
	
	
	//Добб.ОшибкаОтправки=Ошибка;
	//Добб.Статус=Статус;
	Если Заказ<>Неопределено тогда
		Если Добб_1.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан Тогда
			
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
		//		 ЗапистьПриемкку(Добб.Ссылка,Текст1);
				
			Конецесли;
			
			
			Возврат Добб_1.Ссылка;
		Иначе
			Добб=Добб_1.ПолучитьОбъект();
		КонецЕсли;
		
		//Добб.ДокументОтгрузки=Заказ.release_order_number;
		//Добб.Организация=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",
		//Заказ.receiver_inn);
		
		Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан;
		
		
		//Добб.Поставщик=СоздатьНайтиКонтрагента_Приемка(Заказ.body);
		//Добб.НомерВходящий=Заказ.body.document_num;
		//Добб.ДатаВходящий=Заказ.body.document_date;
		//ДатаДокумента=Заказ.body.document_date;
		//Добб.Дата=Добб.ДатаВходящий;
		
		//Добб.ТекущийПользователь=Пользователь;
		
		//ДатаДокумента=Заказ.body.transfer_date;;
		
		Добб.Товары.Очистить();
		Добб.СерийныеНомера.Очистить();
		//Добб.Короба.Очистить();
		Если Заказ.Свойство("body","") Тогда
		Для Каждого Стр_з из ЗАказ.body.products Цикл
			Продукция=СоздатьНайтиGTIN(Стр_з);
			
						Добав=Добб.СерийныеНомера.Добавить();
			стр_З.Свойство("product_cost",Добав.Цена);

			Если ЗначениеЗАполнено(Продукция) тогда
			product_description=Строка(Продукция);
			НСтр=Добб.Товары.НайтиСтроки(Новый Структура("GTIN,Цена",Продукция,Добав.Цена));
			Если НСтр.Количество()=0 Тогда
				НСТр=Добб.Товары.Добавить();
				НСтр.GTIN=Продукция;
				НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
			Иначе
				НСТР=НСТР[0];
				НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
			КонецЕсли;
			НСТр.НаименованиеТовара=Продукция.Наименование;
			
		Иначе
			product_description="";
			еСЛИ                        Стр_з.Свойство("product_description",product_description) Тогда
				НСТр=Добб.Товары.Добавить();
				НСТр.НаименованиеТовара=product_description;
				НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
			Иначе
				children="";
				еСЛИ                        Стр_з.Свойство("children",children) Тогда
					Для Каждого Стр_children Из children Цикл
						                                                                       product_description="";
							еСЛИ                   Стр_children.Свойство("product_description",product_description) Тогда
								НСТр=Добб.Товары.Добавить();
								НСТр.НаименованиеТовара=product_description;
								НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
								Прервать;
							КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				
			КонецЕсли;
			
		КонецЕслИ;
		КоличествоКМ=0;
еСЛИ                        Стр_з.Свойство("children",children) Тогда
					Для Каждого Стр_children Из children Цикл
//						ДобавК=Добб.Короба.Добавить();
//						ДобавК.НомерКороба=Стр_З.uitu_code;
						ШтрихКод="";
						Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
							ШтрихКод=Стр_children.uit_code;
										Если Добб.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Стр_З.uitu_code,ШтрихКод)).Количество()=0 Тогда
										
											ДобавК=Добб.Короба.Добавить();
											ДобавК.НомерКороба=Стр_З.uitu_code;
											ДобавК.ШтрихКод=ШтрихКод;
										КонецЕсли;
							
							НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
							КоличествоКМ=КоличествоКМ+1;
						Иначе
										Если Добб.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Стр_З.uitu_code,ШтрихКод)).Количество()=0 Тогда
										
											ДобавК=Добб.Короба.Добавить();
											ДобавК.НомерКороба=Стр_З.uitu_code;
											ДобавК.ШтрихКод=ШтрихКод;
										КонецЕсли;
							
							РекурсияУпаковки_Приход(Стр_children,НСтр,Добб,КоличествоКМ);
						КонецЕсли;
						//ДобавК.КоличестоКМ=НСтр.КоличествоНомеровКМ;
						
						//ДобавК.ШтрихКод=ШтрихКод;
						
					КонецЦикла;
				Иначе
					КоличествоКМ=КоличествоКМ+1;
					НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
				КонецЕсли;

		
			Добав.КоличествоКМ=КоличествоКМ;

			Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
			//Добав.Цена=Стр_з.product_cost;
			//=Стр_з.product_tax;
			стр_З.Свойство("product_tax",Добав.НДС);
			Добав.НаименованиеТовараСтрокой=НСТр.НаименованиеТовара;
			Если ЗначениеЗАполнено(Продукция) тогда
				Добав.cis=Стр_з.uit_code;
				Добав.GTIN=Сред(Добав.cis,3,14);
			Иначе
				Добав.cis=Стр_з.uitu_code;
				Добав.НомерКороба=Стр_з.uitu_code;
				
			КонецЕсли;
			Добав.НаименованиеТовара=Продукция;
			Добав.НаименованиеТовараСтрокой=product_description;
			accepted=Неопределено;
			Если Стр_З.Свойство("accepted",accepted) Тогда
				Добав.Принят=Стр_З.accepted;
			Иначе
				Добав.Принят=Ложь;
			Конецесли;
			
			НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
			НСтр.Сумма=НСтр.Сумма+Добав.цена;
			НСтр.НДС=НСтр.НДС+Добав.НДС;
			НСтр.Цена=НСТР.Сумма/НСтр.КОличествоКМ;
			
			
			
		Конеццикла;
		
		
ИначеЕсли Заказ.Свойство("products","") Тогда
		Для Каждого Стр_з из ЗАказ.products Цикл
			Продукция=СоздатьНайтиGTIN(Стр_з);
Добав=Добб.СерийныеНомера.Добавить();
			стр_З.Свойство("product_cost",Добав.Цена);
						
			Если ЗначениеЗАполнено(Продукция) тогда
			product_description=Строка(Продукция);
			НСтр=Добб.Товары.НайтиСтроки(Новый Структура("GTIN,Цена",Продукция,Добав.Цена));
			Если НСтр.Количество()=0 Тогда
				НСТр=Добб.Товары.Добавить();
				НСтр.GTIN=Продукция;
				НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
			Иначе
				НСТР=НСТР[0];
				НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
			КонецЕсли;
			НСТр.НаименованиеТовара=Продукция.Наименование;
			
		Иначе
			product_description="";
			еСЛИ                        Стр_з.Свойство("product_description",product_description) Тогда
				НСТр=Добб.Товары.Добавить();
				НСТр.НаименованиеТовара=product_description;
				НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
			Иначе
				children="";
				еСЛИ                        Стр_з.Свойство("children",children) Тогда
					Для Каждого Стр_children Из children Цикл
						                                                                       product_description="";
							еСЛИ                   Стр_children.Свойство("product_description",product_description) Тогда
								НСТр=Добб.Товары.Добавить();
								НСТр.НаименованиеТовара=product_description;
								НСТР.НомерСтрокиСвязи=НСТР.НомерСтроки;
								Прервать;
							КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				
			КонецЕсли;
			
		КонецЕслИ;
		КоличествоКМ=0;
еСЛИ                        Стр_з.Свойство("children",children) Тогда
					Для Каждого Стр_children Из children Цикл
//						ДобавК=Добб.Короба.Добавить();
//						ДобавК.НомерКороба=Стр_З.uitu_code;
						ШтрихКод="";
						Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
							ШтрихКод=Стр_children.uit_code;
										Если Добб.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Стр_З.uitu_code,ШтрихКод)).Количество()=0 Тогда
										
											ДобавК=Добб.Короба.Добавить();
											ДобавК.НомерКороба=Стр_З.uitu_code;
											ДобавК.ШтрихКод=ШтрихКод;
										КонецЕсли;
							
							НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
							КоличествоКМ=КоличествоКМ+1;
						Иначе
										Если Добб.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Стр_З.uitu_code,ШтрихКод)).Количество()=0 Тогда
										
											ДобавК=Добб.Короба.Добавить();
											ДобавК.НомерКороба=Стр_З.uitu_code;
											ДобавК.ШтрихКод=ШтрихКод;
										КонецЕсли;
							
							РекурсияУпаковки_Приход(Стр_children,НСтр,Добб,КоличествоКМ);
						КонецЕсли;
						//ДобавК.КоличестоКМ=НСтр.КоличествоНомеровКМ;
						
						//ДобавК.ШтрихКод=ШтрихКод;
						
					КонецЦикла;
				Иначе
					КоличествоКМ=КоличествоКМ+1;
					НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
				КонецЕсли;

		
			Добав.КоличествоКМ=КоличествоКМ;

			Добав.НомерСтрокиСвязи=НСтр.НомерСтрокиСвязи;
			//Добав.Цена=Стр_з.product_cost;
			//=Стр_з.product_tax;
			стр_З.Свойство("product_tax",Добав.НДС);
			Добав.НаименованиеТовараСтрокой=НСТр.НаименованиеТовара;
			Если ЗначениеЗАполнено(Продукция) тогда
				Добав.cis=Стр_з.uit_code;
				Добав.GTIN=Сред(Добав.cis,3,14);
			Иначе
				Добав.cis=Стр_з.uitu_code;
				Добав.НомерКороба=Стр_з.uitu_code;
				
			КонецЕсли;
			Добав.НаименованиеТовара=Продукция;
			Добав.НаименованиеТовараСтрокой=product_description;
			accepted=Неопределено;
			Если Стр_З.Свойство("accepted",accepted) Тогда
				Добав.Принят=Стр_З.accepted;
			Иначе
				Добав.Принят=Ложь;
			Конецесли;
			
			НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
			НСтр.Сумма=НСтр.Сумма+Добав.цена;
			НСтр.НДС=НСтр.НДС+Добав.НДС;
			НСтр.Цена=НСТР.Сумма/НСтр.КОличествоКМ;
			
			
			
		Конеццикла;
		
		

	     КонецЕсли;
	
	Добб.Записать();
	Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
		ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ЧастичноПринят
		Тогда
		Попытка
			Добб.ПометкаУдаления=Ложь;
			Добб.Записать(РежимЗаписиДокумента.Проведение) 
		Исключение
		КонецПопытки;
	КонецЕсли;
				Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
		//		 ЗапистьПриемкку(Добб.Ссылка,Текст1);
				
			Конецесли;
	КонецЕслИ;
	Возврат Добб.Ссылка;
Конецфункции

Процедура РекурсияУпаковки_Приход(Стр_children_1,НСтр,Добб,КоличествоКМ) Экспорт
	children="";
	
						//ДобавК=Добб.Короба.Добавить();
						//ДобавК.НомерКороба=Стр_З.uitu_code;
						//ШтрихКод="";
						//Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
						//	ШтрихКод=Стр_children.uit_code;
						//	НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
						//Иначе
						//	РекурсияУпаковки_Приход(Стр_children,НСтр);
						//КонецЕсли;
						//ДобавК.ШтрихКод=ШтрихКод;
	
	еСЛИ                        Стр_children_1.Свойство("children",children) Тогда
		Для Каждого Стр_children Из children Цикл
			//ДобавК=Добб.Короба.Добавить();
			//ДобавК.НомерКороба=Стр_children_1.uitu_code;
			ШтрихКод="";
			Если НЕ Стр_children.Свойство("uitu_code",ШтрихКод) Тогда
				НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
				КоличествоКМ=КоличествоКМ+1;
				ШтрихКод=Стр_children.uit_code;
				
										Если Добб.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Стр_children_1.uitu_code,ШтрихКод)).Количество()=0 Тогда
										
											ДобавК=Добб.Короба.Добавить();
											ДобавК.НомерКороба=Стр_children_1.uitu_code;
											ДобавК.ШтрихКод=ШтрихКод;
										КонецЕсли;
				
			Иначе
										Если Добб.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Стр_children_1.uitu_code,ШтрихКод)).Количество()=0 Тогда
										
											ДобавК=Добб.Короба.Добавить();
											ДобавК.НомерКороба=Стр_children_1.uitu_code;
											ДобавК.ШтрихКод=ШтрихКод;
										КонецЕсли;
				РекурсияУпаковки_Приход(Стр_children,НСтр,Добб,КоличествоКМ);
			КонецЕсли;
			//ДобавК.НомерКороба=ШтрихКод;
						
		КонецЦикла;
	Иначе
		КоличествоКМ=КоличествоКМ+1;
		НСтр.КоличествоНомеровКМ=НСтр.КоличествоНомеровКМ+1;
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьНайтиGTIN(Стр) Экспорт
	
	//Контр=Справочники.ПроизводителиИмпортеры_ХамелеонЦРПТ.
	uit_code="";
	Если Стр.Свойство("uit_code",uit_code) Тогда
		
		Попытка
			Если Сред(Стр.uit_code,1,2)="01" Тогда
				ГТИН=Число(Сред(Стр.uit_code,3,14));
			Иначе
				ГТИН=Число(Сред(Стр.uit_code,1,14));
			КонецЕсли;
		Исключение
			Возврат Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка()
		КонецПопытки;
		Спр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",число(ГТИН));
		Если Спр<>Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка() Тогда
			Спр_1=Спр.ПолучитьОбъект();
		Иначе
			Спр_1=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Спр_1.Тип) ТОгда
			//Спр_1.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
		КонецЕсли;
		
		product_description="";
		Если Стр.Свойство("product_description",product_description) Тогда
		Если product_description<>спр_1.НаименованиеТовара 
			ИЛИ ГТИН<>Спр_1.gtin 
			Тогда
			Спр_1.GTIN=ГТИН;
			Спр_1.Наименование=Стр.product_description;
			Спр_1.НаименованиеТовара=Стр.product_description;
			Спр_1.Записать();;
		КонецЕсли;
	Иначе
		Если ГТИН<>Спр_1.gtin 
			Тогда
			Спр_1.GTIN=ГТИН;
			Спр_1.Наименование=ГТИН;
			Спр_1.НаименованиеТовара=ГТИН;
			Спр_1.Записать();;
		КонецЕсли;
		
		КонецЕсли;
	Возврат Спр_1.Ссылка
Иначе
	Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ОбновитьСтатусыДокументовНаСервереПРИХОДЫОТВЕТЫ(Пользователь) Экспорт
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Приемка_ХамелеонЦРПТ.Ссылка,
		|	Приемка_ХамелеонЦРПТ._Order_ID,
		|	Приемка_ХамелеонЦРПТ.УПД,
		|	Приемка_ХамелеонЦРПТ.ДокументОтгрузки
		|ИЗ
		|	Документ.Приемка_ХамелеонЦРПТ КАК Приемка_ХамелеонЦРПТ
		|ГДЕ
		|	(Приемка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему.Наименование <> ""Фармацевтика""
		|				И (Приемка_ХамелеонЦРПТ.Статус В (&Статус)
		|					И ПОДСТРОКА(Приемка_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|					И НЕ Приемка_ХамелеонЦРПТ.УПД)
		|			ИЛИ Приемка_ХамелеонЦРПТ.УПД
		|				И Приемка_ХамелеонЦРПТ.СтатусУПД <> &СтатусУПД)
		|	И Приемка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему = &СайтыВходаВСистему";
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан);
	
	
	Запрос.УстановитьПараметр("СайтыВходаВСистему",	Пользователь.СайтыВходаВСистему); 
	
	
	Запрос.УстановитьПараметр("СтатусУПД",	Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан); 
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,НомерДокумента,Ссылка,УПД",ВыборкаДетальныеЗаписи._Order_ID,xmlString(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()),ВыборкаДетальныеЗаписи.Ссылка,ВыборкаДетальныеЗаписи.УПД));
		//Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	
Конецфункции

Функция ОбновитьСтатусыДокументовНаСервереСписание(Пользователь) Экспорт
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Отгрузка_ХамелеонЦРПТ.Ссылка,
		|	Отгрузка_ХамелеонЦРПТ._Order_ID
		|ИЗ
		|	Документ.СписаниеКМНанесенныхНеНанесенныхНаТовар_ХамелеонЦРПТ КАК Отгрузка_ХамелеонЦРПТ
		|ГДЕ
		|	Отгрузка_ХамелеонЦРПТ.Статус В(&Статус)
		|	И ПОДСТРОКА(Отгрузка_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|	И Отгрузка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему = &СайтыВходаВСистему";
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	
	Запрос.УстановитьПараметр("СайтыВходаВСистему",	Пользователь.СайтыВходаВСистему); 
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	
Конецфункции

Функция ОбновитьСтатусыДокументовНаСервереОтгрузка(МассивВ=Неопределено,Пользователь,Отказные=Ложь)     Экспорт
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Отгрузка_ХамелеонЦРПТ.Ссылка,
		|	Отгрузка_ХамелеонЦРПТ._Order_ID,
		|	Отгрузка_ХамелеонЦРПТ.ОтгрузкаНеУчастника,
		|	Отгрузка_ХамелеонЦРПТ.ВыводИзОборота,
		|	Отгрузка_ХамелеонЦРПТ.Order_ID_УПД,
		|	Отгрузка_ХамелеонЦРПТ.Статус,
		|	Отгрузка_ХамелеонЦРПТ.НадоПрнинять,
		|	Отгрузка_ХамелеонЦРПТ.Контрагент,
		|	Отгрузка_ХамелеонЦРПТ.Исправление,
		|	Отгрузка_ХамелеонЦРПТ.Order_ID_КорректировачнаяУПД,
		|	Отгрузка_ХамелеонЦРПТ.Организация.ИД_ЭДО КАК ИД_ЭДО,
		|	Отгрузка_ХамелеонЦРПТ.НомерПервичногоДокумента,
		|	Отгрузка_ХамелеонЦРПТ.Дата КАК Дата,
		|	Отгрузка_ХамелеонЦРПТ.LetterIDДиадок КАК LetterIDДиадок,
		|	Отгрузка_ХамелеонЦРПТ.ТипУточненияУПД
		|ИЗ
		|	Документ.Отгрузка_ХамелеонЦРПТ КАК Отгрузка_ХамелеонЦРПТ
		|ГДЕ
		|	(Отгрузка_ХамелеонЦРПТ.Статус В (&Статус)
		|				И ПОДСТРОКА(Отгрузка_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|				И Отгрузка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему.Наименование <> ""Фармацевтика""
		|			ИЛИ Отгрузка_ХамелеонЦРПТ.НадоПрнинять
		|			ИЛИ ПОДСТРОКА(Отгрузка_ХамелеонЦРПТ.Order_ID_УПД, 1, 1000) <> """")
		|	И Отгрузка_ХамелеонЦРПТ.Организация = &Организация
		|	И Отгрузка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему = &СайтыВходаВСистему";
	
	Если   МассивВ<>Неопределено тогда
		Запрос.Текст = Запрос.Текст +"
		|И Отгрузка_ХамелеонЦРПТ.Ссылка в (&V)";
		
		Запрос.УстановитьПараметр("V",	МассивВ); 
		
	КонецЕсли;
	
		Запрос.Текст = Запрос.Текст +"
			|УПОРЯДОЧИТЬ ПО
		|	Дата";

	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаемРегистрациюУчастникавИСМП);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента);
	Если Отказные=Истина Тогда
		СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	КонецЕсли;
	
	
	Запрос.УстановитьПараметр("СайтыВходаВСистему",	Пользователь.СайтыВходаВСистему); 
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	Запрос.УстановитьПараметр("Организация",	Пользователь.Организация); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		//Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Ссылка.ТипЭДООтправки) 
		//	И ВыборкаДетальныеЗаписи.Ссылка.ТипЭДООтправки<>Справочники.ЭДО_ХамелеонЦРПТ.ЭДОЛайт Тогда
		//	Продолжить;
		//КонецЕсли;
		
		
		Если ВыборкаДетальныеЗаписи.Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ 
			И ВыборкаДетальныеЗаписи.НадоПрнинять=Истина Тогда
			ПрПП=ВыборкаДетальныеЗаписи.Ссылка.Получитьобъект();
			ПрПП.НадоПрнинять=Ложь;
			ПрПП.Записать();
		КонецЕслИ;
		
		СтруктураДляДобавления=Новый Структура("order_id,Ссылка,ОтгрузкаНеУчастника,ВыводИзОборота,Order_ID_УПД,Статус",
		ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка,ВыборкаДетальныеЗаписи.ОтгрузкаНеУчастника,ВыборкаДетальныеЗаписи.ВыводИзОборота,
		ВыборкаДетальныеЗаписи.Order_ID_УПД,ВыборкаДетальныеЗаписи.Статус)
		;
			СтруктураДляДобавления.Вставить("LetterIDДиадок",ВыборкаДетальныеЗаписи.LetterIDДиадок);
			СтруктураДляДобавления.Вставить("НомерПервичногоДокумента",ВыборкаДетальныеЗаписи.НомерПервичногоДокумента);
			СтруктураДляДобавления.Вставить("ДатаДок",ВыборкаДетальныеЗаписи.Дата);
			СтруктураДляДобавления.Вставить("ИдентификаторЭД",ВыборкаДетальныеЗаписи.ИД_ЭДО);
			СтруктураДляДобавления.Вставить("НадоПринять",ВыборкаДетальныеЗаписи.НадоПрнинять);
		СтруктураДляДобавления.Вставить("Исправление",ВыборкаДетальныеЗаписи.Исправление);
		СтруктураДляДобавления.Вставить("Order_ID_КорректировачнаяУПД",ВыборкаДетальныеЗаписи.Order_ID_КорректировачнаяУПД);
		
		СтруктураДляДобавления.Вставить("ТипЭДО",ВыборкаДетальныеЗаписи.Ссылка.ТипЭДООтправки);
		СтруктураДляДобавления.Вставить("ТипУточненияУПД",ВыборкаДетальныеЗаписи.Ссылка.ТипУточненияУПД);
		
		
		Если ВыборкаДетальныеЗаписи.НадоПрнинять=Истина 
			тогда
			СтруктураДляДобавления.Вставить("Ордер",ВыборкаДетальныеЗаписи._Order_ID);
			СтруктураДляДобавления.Вставить("ИНН",ВыборкаДетальныеЗаписи.Контрагент.ИНН);
		КонецЕсли;
		
		Массив_1.Добавить(СтруктураДляДобавления);
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	
Конецфункции


Процедура ЗагружаемГТИН(Текст,ИНН=Неопределено,Тотал=0,числоЗагрузили=0,Thumbprint_1,НеПроверять=Ложь)
	//Если ИНН=Неопределено Тогда
	//	ИНН=Пользователь.Организация.ИНН
	//КонецЕсли;
	числоЗагрузили=0;
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Текст);
			Попытка
				NNN=ПрочитатьJSON(ЧтениеJSON);
				Тотал=NNN.total;
				
				Для Каждого Стр Из NNN.results Цикл
					Если ИНН<>Стр.INN И НеПроверять=ложь Тогда
						Продолжить;
					КонецЕсли;
					числоЗагрузили=числоЗагрузили+1;
					СпрД=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Стр.gtin));
					Если СпрД<>Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка() Тогда
						СпрД=СпрД.ПолучитьОбъект();
					Иначе
						СпрД=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
					КонецЕсли;
					Если Не ЗначениеЗаполнено(СпрД.Тип) Тогда
						Если Thumbprint_1.НаименованиеСтенда="Обувь" Тогда
							СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
						ИначеЕсли Thumbprint_1.НаименованиеСтенда="Табак"
	Тогда

							СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак;
			ИначеЕсли 		Thumbprint_1.НаименованиеСтенда="Альтернативный табак" Тогда
				СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак;
						ИначеЕсли Thumbprint_1.НаименованиеСтенда="Одежда" Тогда
							СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Одежда;
							
						КонецЕсли;
					Конецесли;
						
					Стр.Свойство("brand",СпрД.БрендТорговаяМарка);
					country="";
					
					Стр.Свойство("country",country);
					Если ЗначениеЗАполнено(country) Тогда
						Если country="РОССИЙСКАЯ ФЕДЕРАЦИЯ" Тогда
							СпрД.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
						Иначе
							СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(country);
						КонецЕсли;	
//						СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(Стр.country);
					//ИначеЕсли Не ЗначениеЗаполнено(	СпрД.СтранаПроизводства) Тогда
					//	СпрД.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
					КонецЕсли;
					СпрД.GTIN=Число(Стр.gtin);
					СпрД.id=Стр.id;
					СпрД.ИННПроизводителяИмпортёра=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",Стр.inn);
					Если Не ЗначениеЗАполнено(СпрД.ИННПроизводителяИмпортёра) Тогда
						Спр_К=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
						Спр_К.ИНН=Стр.inn;
						Спр_К.Наименование=Спр_К.ИНН;
						Спр_К.Записать();
						СпрД.ИННПроизводителяИмпортёра=Спр_К.Ссылка;
						
					Конецесли;
					Стр.Свойство("materialDown",СпрД.МатериалНиза);
					Стр.Свойство("materialLining",СпрД.МатериалПодкладки);
					Стр.Свойство("materialUpper",СпрД.МатериалВерха);
					Стр.Свойство("color",СпрД.Цвет);
					
					Стр.Свойство("model",СпрД.МодельПроизводителяАртикул);
					//сТР.Свойство("name",СпрД.Наименование);
					//СпрД.Наименование=Стр.name;
					СпрД.НаименованиеТовара=Стр.name;
					
					Стр.Свойство("tnVedCode",СпрД.КодТНВЭДКороткий);
					
									
					КодПр="";
					Стр.Свойство("productType",КодПр);
					Если ЗначениеЗаполнено(КодПр) Тогда
					СпрД.ВидОбуви=Справочники.ВидОбуви_ХамелеонЦРПТ.НайтиПоКоду(Стр.productType);
					Если Не ЗначениеЗаполнено(СпрД.ВидОбуви) тогда
						СпрВ=Справочники.ВидОбуви_ХамелеонЦРПТ.СоздатьЭлемент();
						СпрВ.Код=Стр.productType;
						СпрВ.Наименование=Стр.productTypeDesc;
						СпрВ.Записать();
						СпрД.ВидОбуви=СпрВ.Ссылка;
					КонецЕсли;
				КонецЕсли;
				publicationDate=Неопределено;
				    Стр.Свойство("publicationDate",publicationDate);
					Если ЗначениеЗаполнено(publicationDate) тогда
						СпрД.ДатаПубликации=Дата(1970,1,1)+Стр.publicationDate/1000;					
					Конецесли;
					////То была обувь теперь сигареты
				packageType=Неопределено;
				    Стр.Свойство("packageType",packageType);
									Если ЗначениеЗАполнено(packageType) тогда
						Попытка
							СПрд.ТипУпаковкиСигарет=Перечисления.ТипУпаковкиСигареты_ХамелеонЦРПТ[packageType];
						Исключение
							 Если packageType="КОРОБКА/БОКС" Тогда
								СПрд.ТипУпаковкиСигарет=Перечисления.ТипУпаковкиСигареты_ХамелеонЦРПТ.box;
							КонецЕсли;
						КонецПопытки;
					КонецЕсли;
					КоличествоВГруппе=0;
					Если Стр.Свойство("innerUnitCount",КоличествоВГруппе) И
						ЗначениеЗаполненО(КоличествоВГруппе) Тогда
						СпрД.КоличествоВГруппе=КоличествоВГруппе;
					Конецесли;
				productGroup=Неопределено;
				    Стр.Свойство("productGroup",productGroup);
					Если ЗначениеЗаполнено(productGroup) тогда
						СпрГр=Справочники.ГруппаСигарет_ХамелеонЦРПТ.НайтиПоНаименованию(productGroup);
						Если Не ЗначениеЗаполнено(СпрГр) Тогда
							СпрГр=Справочники.ГруппаСигарет_ХамелеонЦРПТ.СоздатьЭлемент();
							СпрГр.Наименование=productGroup;
							СпрГр.Записать();
						КонецЕсли;
						СпрД.ГруппаСигарет=СпрГр.Ссылка;
						
					КонецЕсли;
					
					productSize=Неопределено;
				    Стр.Свойство("productSize",productSize);
					Если ЗначениеЗаполнено(productSize) тогда
						productSize=СтрЗаменить(productSize,".",",");
						СпрД.Размер=Справочники.РазмерВШтихмассовойСистеме_ХамелеонЦРПТ.НайтиПоНаименованию(productSize,Истина);
					КонецЕсли;
					
					
					
					СпрД.Записать();
				Конеццикла;
				
				//Элементы.Список.Обновить();
			Исключение
				Возврат
			КонецПопытки;
	
	
		КонецПроцедуры


Функция ПолучитьСписоскПродукцииОстаток()
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Продукция_ХамелеонЦРПТ.guid,
		|	Продукция_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
		|ГДЕ
		|	Продукция_ХамелеонЦРПТ.Остатки
		|	И Продукция_ХамелеонЦРПТ.guid <> """"
		|	И Продукция_ХамелеонЦРПТ.ДатаПубликации = ДАТАВРЕМЯ(1, 1, 1)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивН=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		МассивН.Добавить(Новый Структура("Ссылка,ГУИД",ВыборкаДетальныеЗаписи.Ссылка,ВыборкаДетальныеЗаписи.guid));
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Возврат МассивН
	
Конецфункции

Функция КодироватьСтрСервер(Стр)
	Стрк=КодироватьСтроку(СтрЗаменить(Стр," ","+"),СпособКодированияСтроки.КодировкаURL);
	Стрк=СтрЗаменить(СтрК,"%2B","+");
	Возврат СтрК
КонецФункции

Процедура ПолучимГТИНПродукции(Текст1,Ссылка,ГТИН)
	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
	

	Пр=Ссылка.ПолучитЬОбъект();
	gtin="";
	Если NNN.body.products_list[0].Свойство("gtin",gtin) Тогда
		Пр.gtin=NNN.body.products_list[0].gtin;
	Конецесли;
	Пр.guid="";
	//ДатаДокумента=NNN.receivedAt;
	Пр.Записать();
	ГТИН=gtin;
КонецПроцедуры

Процедура ОбновитьСтатусДокумента_АТК(Ссылка,Статус,Заказ) Экспорт
	
		
	Добб=Ссылка.ПолучитьОбъект();
	Добб.ОшибкаОтправки="";
	Добб.Статус=Статус;
	Попытка
		Добб.НомерКороба=Заказ.body.atk;
	Исключение
	КонецПопытки;
	
	Добб.Записать();
	Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета 
		ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента
		ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
		
		Тогда
		Попытка
			Добб.Записать(РежимЗаписиДокумента.Проведение) 
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры


Процедура ОбновитьСтатусДокумента_Списания(Ссылка,Статус,Ошибка,Заказ=неопределено) Экспорт
	
	Если Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ Тогда
		Если Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета
			ИЛИ Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус
			ИЛИ Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы
			ИЛИ Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован Тогда
			Возврат;
		КонецЕсли;
			
		
	КонецЕсли;
	Если ТипЗнч(Ссылка)=Тип("ДокументСсылка.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ") 
		И Ссылка.Агрегации.Количество()>0 Тогда
		
			Добб=Ссылка.ПолучитьОбъект();
			Добб.ОшибкаОтправки=Ошибка;
			Добб.Статус=Статус;
			
			
			
		
			Для Каждого Ссылка_1 Из Ссылка.Агрегации Цикл
				
				Добб_1=Ссылка_1.Агрегация.ПолучитьОбъект();
				Добб_1.ОшибкаОтправки=Ошибка;
				Добб_1.Статус=Статус;
				Добб_1.ВходитВГрупповую=ЛожЬ;
				
				
				
				Добб_1.Записать();
				Если Добб_1.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета 
					ИЛИ Добб_1.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента
					ИЛИ Добб_1.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
					
					Тогда
					Попытка
						Добб_1.ПометкаУдаления=ложь;
						Добб_1.Записать(РежимЗаписиДокумента.Проведение);
						
					Исключение
					КонецПопытки;
				КонецЕсли;
				
				
			Конеццикла;
		    Добб.Агрегации.Очистить();
			Добб.Записать();
			Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета 
				ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента
				ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
				
				Тогда
				Попытка
					Добб.ПометкаУдаления=ложь;
					Добб.Записать(РежимЗаписиДокумента.Проведение);
					
				Исключение
				КонецПопытки;
			КонецЕсли;
		
		
		
		
		
		
		Возврат;
	КонецЕслИ;
	
	
	Добб=Ссылка.ПолучитьОбъект();
	Добб.ОшибкаОтправки=Ошибка;
	Добб.Статус=Статус;
	
	
	
	Добб.Записать();
	Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета 
		ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента
		ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
		
		Тогда
		Попытка
			Добб.Записать(РежимЗаписиДокумента.Проведение) 
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьСтатусДокумента_Отгрузка(Ссылка,Статус,Ошибка,Заказ=неопределено,НадоПринять=Ложь) Экспорт
	
	Если Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ Тогда
		Если Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета
			ИЛИ Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус
			ИЛИ Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы
			ИЛИ Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован Тогда
			Возврат;
		КонецЕсли;
			
		
	КонецЕсли;
	
	Если ТипЗнч(Ссылка)=Тип("ДокументСсылка.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ") 
		И Ссылка.Агрегации.Количество()>0 Тогда
		
			Добб=Ссылка.ПолучитьОбъект();
			Добб.ОшибкаОтправки=Ошибка;
			Добб.Статус=Статус;
			
			
			
			Для Каждого Ссылка_1 Из Ссылка.Агрегации Цикл
				
				Добб_1=Ссылка_1.Агрегация.ПолучитьОбъект();
				Добб_1.ОшибкаОтправки=Ошибка;
				Добб_1.Статус=Статус;
				Добб_1.ВходитВГрупповую=ЛожЬ;
				
				
				
				Добб_1.Записать();
				Если Добб_1.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета 
					ИЛИ Добб_1.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента
					ИЛИ Добб_1.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
					
					Тогда
					Попытка
						Добб_1.ПометкаУдаления=ложь;
						Добб_1.Записать(РежимЗаписиДокумента.Проведение);
						
						
					Исключение
					КонецПопытки;
				КонецЕсли;
				
			Конеццикла;
			
		    Добб.Агрегации.Очистить();
		    Добб.Записать();
			Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета 
				ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента
				ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
				
				Тогда
				Попытка
					Добб.ПометкаУдаления=ложь;
					Добб.Записать(РежимЗаписиДокумента.Проведение);
					
				Исключение
				КонецПопытки;
			КонецЕсли;
		

		
		
		
		
		
		Возврат;
	КонецЕслИ;
	
	
	Добб=Ссылка.ПолучитьОбъект();
	Добб.ОшибкаОтправки=Ошибка;
	Добб.Статус=Статус;
	
	
	

	//Добб.ОшибкаОтправки=Ошибка;
	//Добб.Статус=Статус;
	Если ЗначениеЗАполненО(Заказ) тогда
		
		//Добб.Товары.Очистить();
		//Добб.СерийныеНомера.Очистить();
		
		//Добб.Короба.Очистить();
		Для Каждого СТР_1 Из Добб.СерийныеНомера Цикл
			Стр_1.Отказано=Ложь;
			
		Конеццикла;
		
		
		Сч=0;
		Для Каждого Стр_з из ЗАказ.body.products Цикл
			accepted="";
			Если Стр_з.Свойство("accepted",accepted) Тогда
				Если accepted="false" Тогда
					
				
					
				КонецЕсли;
				
				Конецесли;
			
			
			
		Конеццикла;
		
		
	КонецЕсли;
		
	
	
	Добб.Записать();
	Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета 
		ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента
		ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
		
		Тогда
		Попытка
			Добб.ПометкаУдаления=ложь;
			Добб.Записать(РежимЗаписиДокумента.Проведение);
			
			Если Добб.НадоПрнинять=Истина Тогда
				НадоПринять=Новый Структура("ИНН,Ордер", Добб.Контрагент.ИНН,Добб._Order_ID);
			КонецЕсли;
			
		Исключение
		КонецПопытки;
	ИначеЕсли Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ 
		И Добб.Проведен 
		Тогда
		Добб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьДокументыПоСУЗ(Thumbprint_1)
	Массив_1=Новый Массив;
		
		
		
		Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписаниеКМНанесенныхНеНанесенныхНаТовар_ХамелеонЦРПТ.Ссылка,
		|	СписаниеКМНанесенныхНеНанесенныхНаТовар_ХамелеонЦРПТ._Order_ID
		|ИЗ
		|	Документ.СписаниеКМНанесенныхНеНанесенныхНаТовар_ХамелеонЦРПТ КАК СписаниеКМНанесенныхНеНанесенныхНаТовар_ХамелеонЦРПТ
		|ГДЕ
		|	СписаниеКМНанесенныхНеНанесенныхНаТовар_ХамелеонЦРПТ.Статус В(&Статус)
		|	И ПОДСТРОКА(СписаниеКМНанесенныхНеНанесенныхНаТовар_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|	И СписаниеКМНанесенныхНеНанесенныхНаТовар_ХамелеонЦРПТ.ТипПродукции в (&ТипПроудкции)";
	
	
	ТипПроудкции=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	ТипПроудкции.Добавить(Перечисления.ТипПродукции_ХамелеонЦРПТ.Шины);
	ТипПроудкции.Добавить(Перечисления.ТипПродукции_ХамелеонЦРПТ.Молоко);
	ТипПроудкции.Добавить(Перечисления.ТипПродукции_ХамелеонЦРПТ.Свет);
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправ);
	ТипПроудкции.Добавить(Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак);
	ТипПроудкции.Добавить(Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак);
	
	ТипПроудкции.Добавить(Перечисления.ТипПродукции_ХамелеонЦРПТ.Фармацевтика);
	ТипПроудкции.Добавить(Перечисления.ТипПродукции_ХамелеонЦРПТ.Фото);
	ТипПроудкции.Добавить(Перечисления.ТипПродукции_ХамелеонЦРПТ.Парфюм);
	ТипПроудкции.Добавить(Перечисления.ТипПродукции_ХамелеонЦРПТ.Одежда);
	ТипПроудкции.Добавить(Перечисления.ТипПродукции_ХамелеонЦРПТ.Велосипеды);
	ТипПроудкции.Добавить(Перечисления.ТипПродукции_ХамелеонЦРПТ.ПитьеваяВода);
	
	
	Запрос.УстановитьПараметр("ТипПроудкции",	ТипПроудкции); 
	
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета);
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	Возврат Массив_1

КонецФункции

Функция ОбновитьСтатусыДокументовНаСервереВвод_Использование(ДокументПроверки,Пользователь) Экспорт
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводВОборот_ХамелеонЦРПТ.Ссылка,
		|	ВводВОборот_ХамелеонЦРПТ._Order_ID
		|ИЗ
		|	Документ.ВводВОборот_ХамелеонЦРПТ КАК ВводВОборот_ХамелеонЦРПТ
		|ГДЕ
		|	ВводВОборот_ХамелеонЦРПТ.Статус В(&Статус)
		|	И ПОДСТРОКА(ВводВОборот_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|	И ВводВОборот_ХамелеонЦРПТ.ТипДокумента = &ТипДокумента
		|	И ВводВОборот_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему.Наименование <> ""Фармацевтика""
		|	И ВводВОборот_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему = &СайтыВходаВСистему";
	
	Если ЗначениеЗаполнено(ДокументПроверки) Тогда
		Запрос.Текст = Запрос.Текст +"
		|И ВводВОборот_ХамелеонЦРПТ.Ссылка в (&ДокументПроверки)";
		Запрос.УстановитьПараметр("ДокументПроверки",ДокументПроверки);
		
	КонецЕсли;
	
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета);
	
	Запрос.УстановитьПараметр("СайтыВходаВСистему",	Пользователь.СайтыВходаВСистему); 
	
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	Запрос.УстановитьПараметр("ТипДокумента",	Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	
Конецфункции

Процедура ОбновитьСтатусДокумента_ВводВОборот(Ссылка,Статус,Ошибка,Заказ=неопределено)
	
	Если Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ Тогда
		Если Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан
			 Тогда
			Возврат;
		КонецЕсли;
			
		
	КонецЕсли;
	
	Добб=Ссылка.ПолучитьОбъект();
	Добб.ОшибкаОтправки=Ошибка;
	Добб.Статус=Статус;
	//Если Заказ<>Неопределено тогда
	//	
	//	Добб.Товары.Очистить();
	//	Добб.СерийныеНомера.Очистить();
	//	
	//	Для Каждого Стр_з из ЗАказ.products Цикл
	//		
	//		
	//		Добав_С=Добб.СерийныеНомера.Добавить();
	//		Добав_С.НомерСтрокиСвязи="";
	//		//Добав_С.GTIN=Стр_З.gtin;
	//		//Добав_С.НаименованиеТовара=Добав.GTIN;
	//		Добав_С.cis=Стр_з.uit_code;
	//			
	//		
	//		
	//		Добав=Добб.Товары.Добавить();
	//		Добав.КоличествоКМ=Стр_З.code_quantity;
	//		code_type="";
	//		Если Стр_З.Свойство("code_type",code_type) Тогда
	//			Если code_type="GLUEABLE" Тогда
	//				Добав.ВидСИ=Перечисления.ВидСИ_ХамелеонЦРПТ.Клеевой;
	//			ИначеЕсли code_type="MOUNTABLE" Тогда
	//				Добав.ВидСИ=Перечисления.ВидСИ_ХамелеонЦРПТ.Навесной;
	//			Иначе
	//				Добав.ВидСИ=Перечисления.ВидСИ_ХамелеонЦРПТ.Печатаемый;
	//			КонецЕсли;
	//		Иначе
	//			
	//			Добав.ВидСИ=Перечисления.ВидСИ_ХамелеонЦРПТ.Печатаемый;
	//		КонецЕсли;
	//		Если Стр_З.emission_type="LOCAL" Тогда
	//			Добав.СпособВыпускаТоваров="Производство в РФ" 
	//		Иначе
	//			Добав.СпособВыпускаТоваров="Ввезен в РФ" 
	//		КонецЕсли;
	//		Если Стр_З.serial_num_type="SELF_MADE" Тогда
	//			Добав.СпособФормированияСН=Перечисления.СпособФормированияСН_ХамелеонЦРПТ.Самостоятельно
	//		Иначе
	//			Добав.СпособФормированияСН=Перечисления.СпособФормированияСН_ХамелеонЦРПТ.ОператорИСМП
	//		КонецЕсли;
	//		
	//		Добав.GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(Стр_З.gtin));
	//		Если Не ЗначениеЗаполнено(Добав.GTIN) Тогда
	//			СпрП=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
	//			СпрП.GTIN=Число(Стр_З.gtin);
	//			СпрП.Записать();
	//			Добав.GTIN=СпрП.Ссылка;
	//		КонецЕсли;
	//		marking_type="";
	//		Если Стр_З.Свойство("marking_type",marking_type) Тогда
	//			Если marking_type="PRODUCT_PACKAGE" Тогда
	//				Добав.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаПотребительскуюУпаковку;
	//			ИначеЕсли marking_type="PRODUCT" Тогда
	//				Добав.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаТовар;
	//			Иначе
	//				Добав.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаТоварныйЯрлык;
	//			КонецЕсли;
	//		Иначе
	//			Добав.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаТовар;
	//		КонецЕсли;
	//		
	//		СпрОрд=Справочники.ID_строки_партия_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_З.order_line_id);
	//		Если Не ЗначениеЗаполнено(СпрОрд) Тогда
	//			
	//			СпрОрд=Справочники.ID_строки_партия_ХамелеонЦРПТ.СоздатьЭлемент();
	//			СпрОрд.Наименование=Стр_З.order_line_id;
	//			СпрОрд.Записать();
	//		КонецЕсли;
	//		
	//		Добав.ID=СпрОрд.Ссылка;
	//		Добав.СтатусСтроки=Стр_З.order_line_status;
	//		Добав.КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(Стр_З.tn_ved_code);
	//		
	//		Если Не ЗначениеЗаполнено(Добав.КодТНВЭД) Тогда
	//			СпрК=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
	//			СпрК.Код=Стр_З.tn_ved_code;
	//			СпрК.Наименование=Стр_З.tn_ved_code;
	//			СпрК.Записать();
	//			Добав.КодТНВЭД=СпрК.Ссылка;
	//		КонецЕсли;
	//		
	//		Добав.НомерСтрокиСвязи=Добав.НомерСтроки;
	//		Если Стр_З.serial_numbers<>Неопределено тогда
	//			Для Каждого Стр_М Из Стр_З.serial_numbers Цикл
	//				
	//				Добав_С=Добб.СерийныеНомера.Добавить();
	//				Добав_С.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
	//				Добав_С.GTIN=Стр_З.gtin;
	//				Добав_С.НаименованиеТовара=Добав.GTIN;
	//				Добав_С.СерийныйНомер=Стр_М;
	//				
	//			Конеццикла;
	//		КонецЕсли;
	//		
	//	Конеццикла;
	//	
	//	
	//КонецЕсли;
	//
	
	
	Добб.Записать();
	Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан Тогда
		Попытка
			Добб.Записать(РежимЗаписиДокумента.Проведение) 
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Функция ОбновитьСтатусыДокументовНаСервереВвод(ДокументПроверки,Пользователь) Экспорт
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводВОборот_ХамелеонЦРПТ.Ссылка,
		|	ВводВОборот_ХамелеонЦРПТ._Order_ID
		|ИЗ
		|	Документ.ВводВОборот_ХамелеонЦРПТ КАК ВводВОборот_ХамелеонЦРПТ
		|ГДЕ
		|	ВводВОборот_ХамелеонЦРПТ.Статус В(&Статус)
		|	И ПОДСТРОКА(ВводВОборот_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|	И ВводВОборот_ХамелеонЦРПТ.ТипДокумента <> &ТипДокумента
		|	И ВводВОборот_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему.Наименование <> ""Фармацевтика""
		|	И ВводВОборот_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему = &СайтыВходаВСистему";
	
	Если ЗначениеЗаполнено(ДокументПроверки) Тогда
		Запрос.Текст = Запрос.Текст +"
		|И ВводВОборот_ХамелеонЦРПТ.Ссылка в (&ДокументПроверки)";
		Запрос.УстановитьПараметр("ДокументПроверки",ДокументПроверки);
		
	КонецЕсли;
	
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета);
	
	Запрос.УстановитьПараметр("СайтыВходаВСистему",	Пользователь.СайтыВходаВСистему); 
	
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	Запрос.УстановитьПараметр("ТипДокумента",	Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	
Конецфункции


Процедура ОбновитьСтатусДокумента(Ссылка,Статус,Ошибка,Заказ=неопределено,ПоЛюбому=Ложь,ТолькоСтатус=Ложь)
	
	Если Не ПоЛюбому Тогда
	Если Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ Тогда
		Если Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство
			ИЛИ Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус
			ИЛИ Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы
			ИЛИ Ссылка.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован Тогда
			Возврат;
		КонецЕсли;
			
		
	КонецЕсли;
	КонецЕсли;
	Добб=Ссылка.ПолучитьОбъект();
	Добб.ОшибкаОтправки=Ошибка;
	Добб.Статус=Статус;
	Если Заказ<>Неопределено И Не ТолькоСтатус тогда
		
		Добб.Товары.Очистить();
		Добб.СерийныеНомера.Очистить();
		
		Для Каждого Стр_з из ЗАказ.products_information Цикл
			Добав=Добб.Товары.Добавить();
			Добав.КоличествоКМ=Стр_З.code_quantity;
			code_type="";
			Если Стр_З.Свойство("code_type",code_type) Тогда
				Если code_type="GLUEABLE" Тогда
					Добав.ВидСИ=Перечисления.ВидСИ_ХамелеонЦРПТ.GLUED;
				ИначеЕсли code_type="MOUNTABLE" Тогда
					Добав.ВидСИ=Перечисления.ВидСИ_ХамелеонЦРПТ.HINGED;
				Иначе
					Добав.ВидСИ=Перечисления.ВидСИ_ХамелеонЦРПТ.PRINTED;
				КонецЕсли;
			Иначе
				
				Добав.ВидСИ=Перечисления.ВидСИ_ХамелеонЦРПТ.PRINTED;
			КонецЕсли;
			Если Стр_З.emission_type="LOCAL" Тогда
				Добав.СпособВыпускаТоваров="Производство в РФ" 
			Иначе
				Добав.СпособВыпускаТоваров="Ввезен в РФ" 
			КонецЕсли;
			Если Стр_З.serial_num_type="SELF_MADE" Тогда
				Добав.СпособФормированияСН=Перечисления.СпособФормированияСН_ХамелеонЦРПТ.Самостоятельно
			Иначе
				Добав.СпособФормированияСН=Перечисления.СпособФормированияСН_ХамелеонЦРПТ.ОператорИСМП
			КонецЕсли;
			
			Добав.GTIN=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(Стр_З.gtin));
			Если Не ЗначениеЗаполнено(Добав.GTIN) Тогда
				СпрП=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
				СпрП.GTIN=Число(Стр_З.gtin);
		СпрП.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
				
				СпрП.Записать();
				Добав.GTIN=СпрП.Ссылка;
			КонецЕсли;
			marking_type="";
			Если Стр_З.Свойство("marking_type",marking_type) Тогда
				Если marking_type="PRODUCT_PACKAGE" Тогда
					Добав.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаПотребительскуюУпаковку;
				ИначеЕсли marking_type="PRODUCT" Тогда
					Добав.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаТовар;
				Иначе
					Добав.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаТоварныйЯрлык;
				КонецЕсли;
			Иначе
				Добав.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаТовар;
			КонецЕсли;
			
			СпрОрд=Справочники.ID_строки_партия_ХамелеонЦРПТ.НайтиПоНаименованию(Стр_З.order_line_id);
			Если Не ЗначениеЗаполнено(СпрОрд) Тогда
				
				СпрОрд=Справочники.ID_строки_партия_ХамелеонЦРПТ.СоздатьЭлемент();
				СпрОрд.Наименование=Стр_З.order_line_id;
				СпрОрд.Записать();
			КонецЕсли;
			
			Добав.ID=СпрОрд.Ссылка;
			Добав.СтатусСтроки=Стр_З.order_line_status;
			
			Добав.КодТНВЭД=Добав.GTIN.КодТНВЭД;
			Если Не ЗначениеЗаполнено(Добав.КодТНВЭД) Тогда
				 //{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	КодТНВЭД_ХамелеонЦРПТ.Ссылка
					|ИЗ
					|	Справочник.КодТНВЭД_ХамелеонЦРПТ КАК КодТНВЭД_ХамелеонЦРПТ
					|ГДЕ
					|	КодТНВЭД_ХамелеонЦРПТ.Код ПОДОБНО &Код";
				
				Запрос.УстановитьПараметр("Код", Стр_З.tn_ved_code+"%");
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					Добав.КодТНВЭД=ВыборкаДетальныеЗаписи.Ссылка;

				Иначе			
					Добав.КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(Стр_З.tn_ved_code);
					
					Если Не ЗначениеЗаполнено(Добав.КодТНВЭД) Тогда
						СпрК=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
						СпрК.Код=Стр_З.tn_ved_code;
						СпрК.Наименование=Стр_З.tn_ved_code;
						СпрК.Записать();
						Добав.КодТНВЭД=СпрК.Ссылка;
					КонецЕсли;
				Конецесли;
			КонецЕсли;
			Добав.НомерСтрокиСвязи=Добав.НомерСтроки;
			//Если Стр_З.serial_numbers<>Неопределено тогда
			//	Для Каждого Стр_М Из Стр_З.serial_numbers Цикл
			//		
			//		Добав_С=Добб.СерийныеНомера.Добавить();
			//		Добав_С.НомерСтрокиСвязи=Добав.НомерСтрокиСвязи;
			//		Добав_С.GTIN=Стр_З.gtin;
			//		Добав_С.НаименованиеТовара=Добав.GTIN;
			//		Добав_С.СерийныйНомер=Стр_М;
			//		
			//	Конеццикла;
			//КонецЕсли;
			
		Конеццикла;
		
		
	КонецЕсли;
	
	Если Полюбому И Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ Тогда
		Добб._Order_ID="";
		Для Каждого Стр_1 Из Добб.Товары Цикл
			Стр_1.ID=""
		Конеццикла;
	КонецЕсли;
	
	Добб.Записать();
	Если Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЭмитирован 
		ИЛИ Добб.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы
		Тогда
		Попытка
			Добб.Записать(РежимЗаписиДокумента.Проведение) 
		Исключение
		КонецПопытки;
		КонецЕсли;
КонецПроцедуры

Процедура ОчиститьТокенСрегистра(ТТ)
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(ТТ,"")
КонецПроцедуры


Процедура ЗаписатьОтветвЗаказ(Ссылка,Ответ_1)
	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Ссылка);
	РегДв.Отбор.Вид.Установить("Получили ответ");
	Добав=РегДв.Добавить();
	Добав.Документ=Ссылка;
	Добав.Вид="Получили ответ";
	Добав.Файл=Новый ХранилищеЗначения(Ответ_1,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
	
КонецПроцедуры

Функция ОбновитьСтатусыДокументовНаСервере(ЗаказыСУЗ=Ложь,Пользователь) Экспорт
	
	ОбновлятьСтатусыЗаказовКМСДаты=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ОбновлятьСтатусыЗаказовКМСДаты;
	
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(ОбновлятьСтатусыЗаказовКМСДаты) Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗаказМарок_ХамелеонЦРПТ.Ссылка,
			|	ЗаказМарок_ХамелеонЦРПТ._Order_ID
			|ИЗ
			|	Документ.ЗаказМарок_ХамелеонЦРПТ КАК ЗаказМарок_ХамелеонЦРПТ
			|ГДЕ
			|	ЗаказМарок_ХамелеонЦРПТ.Статус В(&Статус)
			|	И ПОДСТРОКА(ЗаказМарок_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
			|	И (ЗаказМарок_ХамелеонЦРПТ.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипПродукции_ХамелеонЦРПТ.Обувь)
			|			ИЛИ ЗаказМарок_ХамелеонЦРПТ.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипПродукции_ХамелеонЦРПТ.ПустаяСсылка))
			|	И НЕ ЗаказМарок_ХамелеонЦРПТ.СУЗОбувь
			|	И ЗаказМарок_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему = &СайтыВходаВСистему
			|	И ЗаказМарок_ХамелеонЦРПТ.Дата >= &Дата
			|	И ЗаказМарок_ХамелеонЦРПТ.Организация=&Организация
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЗаказМарок_ХамелеонЦРПТ.Организация";
		
		Запрос.УстановитьПараметр("Дата",	ОбновлятьСтатусыЗаказовКМСДаты); 
		
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗаказМарок_ХамелеонЦРПТ.Ссылка,
			|	ЗаказМарок_ХамелеонЦРПТ._Order_ID
			|ИЗ
			|	Документ.ЗаказМарок_ХамелеонЦРПТ КАК ЗаказМарок_ХамелеонЦРПТ
			|ГДЕ
			|	ЗаказМарок_ХамелеонЦРПТ.Статус В(&Статус)
			|	И ПОДСТРОКА(ЗаказМарок_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
			|	И (ЗаказМарок_ХамелеонЦРПТ.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипПродукции_ХамелеонЦРПТ.Обувь)
			|			ИЛИ ЗаказМарок_ХамелеонЦРПТ.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипПродукции_ХамелеонЦРПТ.ПустаяСсылка))
			|	И НЕ ЗаказМарок_ХамелеонЦРПТ.СУЗОбувь
			|	И ЗаказМарок_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему = &СайтыВходаВСистему
			|	И ЗаказМарок_ХамелеонЦРПТ.Организация=&Организация
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЗаказМарок_ХамелеонЦРПТ.Организация";
	КонецЕсли;
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	Запрос.УстановитьПараметр("СайтыВходаВСистему",	Пользователь.СайтыВходаВСистему); 
	Запрос.УстановитьПараметр("Организация",	Пользователь.Организация); 
	
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	
Конецфункции

Функция ОбновитьСтатусыДокументовНаСервере_ОдинДокумент(ДокументПроверки,ЗаказыСУЗ=Ложь)
	//Если ЗаказыСУЗ=Истина Тогда
	//	Возврат Ложь;
	//	// Вставить содержимое обработчика.
	//	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	//// Данный фрагмент построен конструктором.
	//// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ЗаказМарокЧерезСУЗ_ХамелеонЦРПТ.Ссылка,
	//	|	ЗаказМарокЧерезСУЗ_ХамелеонЦРПТ._Order_ID
	//	|ИЗ
	//	|	Документ.ЗаказМарокЧерезСУЗ_ХамелеонЦРПТ КАК ЗаказМарокЧерезСУЗ_ХамелеонЦРПТ
	//	|ГДЕ
	//	|	ЗаказМарокЧерезСУЗ_ХамелеонЦРПТ.Статус В(&Статус)
	//	|	И ЗаказМарокЧерезСУЗ_ХамелеонЦРПТ.Ссылка = &ДокументПроверки
	//	|	И ПОДСТРОКА(ЗаказМарокЧерезСУЗ_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"";
	//
	//СписокСтатусов=Новый СписокЗначений;
	////СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	//
	//Запрос.УстановитьПараметр("ДокументПроверки",	ДокументПроверки); 
	//
	//Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Массив_1=Новый Массив;
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//	Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
	//	
	//КонецЦикла;
	//
	////}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	//Иначе
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказМарок_ХамелеонЦРПТ.Ссылка,
		|	ЗаказМарок_ХамелеонЦРПТ._Order_ID
		|ИЗ
		|	Документ.ЗаказМарок_ХамелеонЦРПТ КАК ЗаказМарок_ХамелеонЦРПТ
		|ГДЕ
		|	ЗаказМарок_ХамелеонЦРПТ.Статус В(&Статус) И ЗаказМарок_ХамелеонЦРПТ.Ссылка=&ДокументПроверки
		|	И ПОДСТРОКА(ЗаказМарок_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|	И (ЗаказМарок_ХамелеонЦРПТ.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипПродукции_ХамелеонЦРПТ.Обувь)
		|			ИЛИ ЗаказМарок_ХамелеонЦРПТ.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипПродукции_ХамелеонЦРПТ.ПустаяСсылка))";
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	
	Запрос.УстановитьПараметр("ДокументПроверки",	ДокументПроверки); 
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	//КонецЕсли;
	Возврат Массив_1
	
Конецфункции

Функция ПолучитьТокенСрегистра(Thumbprint_1,СтруктураДляНК=Неопределено) Экспорт
	Настр=Регистрысведений.ТокенПоСертификату_ХамелеонЦРПТ.Получить(Новый Структура("Отпечаток",Thumbprint_1));
	СтруктураДляНК=Новый Структура("СерийныйНомер,КукиДляНК,CSRFДляНК",
	Настр.СерийныйНомер,Настр.КукиДляНК,Настр.CSRFДляНК);
	Возврат Настр.Токен;
КонецФункции

Процедура ОбновитьСтатусыДокументовЛекарстваСервер(Thumbprint_1,УжеОтправили=Ложь)
	
	ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	
	Срегистра=Неопределено;
			
	МассивЛекарств=ВернутьВводвоборотЛекарства();
	
	Если МассивЛекарств.Количество()>0 Тогда
		
			СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			Попытка
				СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
			исключение
				СРегистра=Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		    Для Каждого Стр Из    МассивЛекарств Цикл
					
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+Стр.order_id+"/ticket");
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.order_id+"/ticket");
					
				Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
					
					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
					
				КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
		
		
		 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				 
				 
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					
					
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(NNN.link,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//
					Сайт_1=NNN.link;
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
										
					
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		                  КонецЕсли;
			          Чтен=Новый ЧтениеXML;
					    Чтен.УстановитьСтроку(Текст1);
						Результат="";
						Ошибка="";
						Пока Чтен.Прочитать() Цикл
							Если Чтен.Имя="operation_result" Тогда
								Чтен.Прочитать();
								Результат=Чтен.Значение;
								Чтен.Прочитать()
							ИначеЕсли Чтен.Имя="operation_comment" Тогда
								
								Чтен.Прочитать();
								Ошибка=Чтен.Значение;
								Чтен.Прочитать()
							КонецЕсли;
						Конеццикла;
						  
					
					  ОработатьДокументы(Стр,Результат,Ошибка)

					
					//ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					    			Если УжеОтправили=Истина Тогда
										ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);		
										Возврат
									Иначе
										ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);
										ОбновитьСтатусыДокументовЛекарстваСервер(Thumbprint_1,Истина);			
										Возврат;
									КонецЕсли
					
				ИначеЕсли Ответ.КодСостояния=301 Тогда
					
					ОшибкаОтправки="";
					//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
						ОшибкаОтправки=NNN.error_message;
						
					Исключение
					КонецПопытки;
					//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
					
					
				КонецЕсли;
		

		
			Исключение
			КонецПопытки;
		 Конеццикла;
		
	 КонецЕсли;
	 
	 
	 
	 
	//////ЛЕКАРСТВА!!
		МассивОтправок=ВернутьСтатусыДокументовПоТабличнойЧасти();

	ОбработаноМассив=Новый Массив;
		Если МассивОтправок.Количество()>0 Тогда
		Если Не ЗначениеЗаполнено(СРегистра) Тогда	
			
				СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Если Не ЗначениеЗаполнено(СРегистра) тогда
					Попытка
						СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
					исключение
						СРегистра=Неопределено;
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		    Для Каждого Стр Из    МассивОтправок Цикл
				ОбработаноМассив.Очистить();	
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+Стр.order_id+"/ticket");
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.order_id+"/ticket");
					
				Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
					
					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
					
				КонецЕсли;
 		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);

			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Документ,Текст1);
				
			Конецесли;
		
		 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				   Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					
					 	
					Сайт_1=NNN.link;
					
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
					
					//Сайт="https://"+Thumbprint_1.АдресКАПИ+":443";
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");

					//
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//
					//
					//Сайт_1=СтрЗаменить(Сайт_1,"http://nginx-for-lk:8080/","");
					
					
					
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		
		
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);

		
		
					      КонецЕсли;
		
			          Чтен=Новый ЧтениеXML;
					    Чтен.УстановитьСтроку(Текст1);
						Результат="";
						Ошибка="";
						Пока Чтен.Прочитать() Цикл
							Если Чтен.Имя="operation_result" Тогда
								Чтен.Прочитать();
								Результат=Чтен.Значение;
								Чтен.Прочитать()
							ИначеЕсли Чтен.Имя="operation_comment" Тогда
								
								Чтен.Прочитать();
								Ошибка=Чтен.Значение;
								Чтен.Прочитать()
							КонецЕсли;
						Конеццикла;
						  
					
					
					
					ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					    			Если УжеОтправили=Истина Тогда
										ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);		
										Возврат
									Иначе
										ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);
										ОбновитьСтатусыДокументовЛекарстваСервер(Thumbprint_1,Истина);			
										Возврат;
									КонецЕсли
						
				ИначеЕсли Ответ.КодСостояния=301 Тогда
					
					ОшибкаОтправки="";
					//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
						ОшибкаОтправки=NNN.error_message;
						
					Исключение
					КонецПопытки;
					//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
					
					
				КонецЕсли;
			Исключение
			КонецПопытки;
		Конеццикла;

		ОбработаноМассив_Обработать(ОбработаноМассив);
		
		   КонецЕсли;
	
//	           Элементы.ОплатаЗаКМ_Таблица.Обновить();;
	 
	МассивЛекарств=ВернутьОтгрузкуЛекарства();
	
	Если МассивЛекарств.Количество()>0 Тогда
		Если Не ЗначениеЗаполнено(СРегистра) Тогда	
				СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Если Не ЗначениеЗаполнено(СРегистра) тогда
					Попытка
						СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
					исключение
						СРегистра=Неопределено;
					КонецПопытки;
				КонецЕсли;
	КонецЕсли;	
		    Для Каждого Стр Из    МассивЛекарств Цикл
					
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+Стр.order_id+"/ticket");
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.order_id+"/ticket");
					
				Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
					
					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
					
				КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка,Текст1);
				
			Конецесли;
		
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	
	//	 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				 
				 
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					
					Сайт_1=NNN.link;
					//Сайт="https://"+Thumbprint_1.АдресКАПИ+":443";
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");

					//
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//
					//
					//
					//Сайт_1=СтрЗаменить(Сайт_1,"http://nginx-for-lk:8080/","");
					//
					
										Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);

										
					
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		                  КонецЕсли;
			          Чтен=Новый ЧтениеXML;
					    Чтен.УстановитьСтроку(Текст1);
						Результат="";
						Ошибка="";
						Пока Чтен.Прочитать() Цикл
							Если Чтен.Имя="operation_result" Тогда
								Чтен.Прочитать();
								Результат=Чтен.Значение;
								Чтен.Прочитать()
							ИначеЕсли Чтен.Имя="operation_comment" Тогда
								
								Чтен.Прочитать();
								Ошибка=Чтен.Значение;
								Чтен.Прочитать()
							КонецЕсли;
						Конеццикла;
						  
					
					  ОработатьДокументы(Стр,Результат,Ошибка)

					
					//ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					    			Если УжеОтправили=Истина Тогда
										ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);		
										Возврат
									Иначе
										ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);
										ОбновитьСтатусыДокументовЛекарстваСервер(Thumbprint_1,Истина);			
										Возврат;
									КонецЕсли
					
				ИначеЕсли Ответ.КодСостояния=301 Тогда
					
					ОшибкаОтправки="";
					//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
						ОшибкаОтправки=NNN.error_message;
						
					Исключение
					КонецПопытки;
					//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
					
					
				КонецЕсли;
		
		//	Исключение
		//	КонецПопытки;
		 Конеццикла;
		
	 КонецЕсли;
	 
	 
	 
	 
	 
	 
	 
	МассивЛекарств=ВернутьАгрегациюЛекарства();
	
	Если МассивЛекарств.Количество()>0 Тогда
		Если Не ЗначениеЗаполнено(СРегистра) Тогда	
				СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Если Не ЗначениеЗаполнено(СРегистра) тогда
					Попытка
						СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
					исключение
						СРегистра=Неопределено;
					КонецПопытки;
				КонецЕсли;
	КонецЕсли;	
		    Для Каждого Стр Из    МассивЛекарств Цикл
					
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+Стр.order_id+"/ticket");
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.order_id+"/ticket");
					
				Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
					
					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
					
				КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка.Ссылка,Текст1);
				
			Конецесли;
		
			
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
			
	//	 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				 
				 
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					
				Сайт_1=NNN.link;
					//Сайт="https://"+Thumbprint_1.АдресКАПИ+":443";
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");

					//
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					//
					//
					//
					//Сайт_1=СтрЗаменить(Сайт_1,"http://nginx-for-lk:8080/","");
										Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);

										
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		                  КонецЕсли;
			          Чтен=Новый ЧтениеXML;
					    Чтен.УстановитьСтроку(Текст1);
						Результат="";
						Ошибка="";
						Пока Чтен.Прочитать() Цикл
							Если Чтен.Имя="operation_result" Тогда
								Чтен.Прочитать();
								Результат=Чтен.Значение;
								Чтен.Прочитать()
							ИначеЕсли Чтен.Имя="operation_comment" Тогда
								
								Чтен.Прочитать();
								Ошибка=Чтен.Значение;
								Чтен.Прочитать()
							КонецЕсли;
						Конеццикла;
						  
					
					  ОработатьДокументы(Стр,Результат,Ошибка)

					
					//ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					    			Если УжеОтправили=Истина Тогда
										ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);		
										Возврат
									Иначе
										ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);
										ОбновитьСтатусыДокументовЛекарстваСервер(Thumbprint_1,Истина);			
										Возврат;
									КонецЕсли
					
				ИначеЕсли Ответ.КодСостояния=301 Тогда
					
					ОшибкаОтправки="";
					//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
						ОшибкаОтправки=NNN.error_message;
						
					Исключение
					КонецПопытки;
					//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
					
					
				КонецЕсли;
		
		//	Исключение
		//	КонецПопытки;
		 Конеццикла;
		
	 КонецЕсли;
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	МассивЛекарств=ВернутьОтказыПоЛекарствам();
	
	Если МассивЛекарств.Количество()>0 Тогда
		Если Не ЗначениеЗаполнено(СРегистра) Тогда	
				СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Если Не ЗначениеЗаполнено(СРегистра) тогда
					Попытка
						СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
					исключение
						СРегистра=Неопределено;
					КонецПопытки;
				КонецЕсли;
	КонецЕсли;	
		    Для Каждого Стр Из    МассивЛекарств Цикл
					
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+Стр.order_id+"/ticket");
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.order_id+"/ticket");
					
				Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
					
					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
					
				КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Стр.Ссылка.Ссылка,Текст1);
				
			Конецесли;
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	
		
	//	 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				 
				 
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					
					
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(NNN.link,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					
					Сайт_1=NNN.link;
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
					
					
					
					
					
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		                  КонецЕсли;
			          Чтен=Новый ЧтениеXML;
					    Чтен.УстановитьСтроку(Текст1);
						Результат="";
						Ошибка="";
						Пока Чтен.Прочитать() Цикл
							Если Чтен.Имя="operation_result" Тогда
								Чтен.Прочитать();
								Результат=Чтен.Значение;
								Чтен.Прочитать()
							ИначеЕсли Чтен.Имя="operation_comment" Тогда
								
								Чтен.Прочитать();
								Ошибка=Чтен.Значение;
								Чтен.Прочитать()
							КонецЕсли;
						Конеццикла;
						  
					
					  ОработатьДокументыОтказы(Стр,Результат,Ошибка)

					
					//ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					    			Если УжеОтправили=Истина Тогда
										ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);		
										Возврат
									Иначе
										ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);
										ОбновитьСтатусыДокументовЛекарстваСервер(Thumbprint_1,Истина);			
										Возврат;
									КонецЕсли
					
				ИначеЕсли Ответ.КодСостояния=301 Тогда
					
					ОшибкаОтправки="";
					//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);;//ПрочитатьJSON(ЧтениеJSON);
						ОшибкаОтправки=NNN.error_message;
						
					Исключение
					КонецПопытки;
					//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
					
					
				КонецЕсли;
		
		//	Исключение
		//	КонецПопытки;
		 Конеццикла;
		
	 КонецЕсли;
	 
	 
	 
	 
	 
	 
	
КонецПроцедуры

Процедура  ОработатьДокументыОтказы(Стр_1,Статус,Ошибка)
		ДокумП=Стр_1.Ссылка.ПолучитьОбъект();
		Если Статус="Rejected" Тогда
			ДокумП.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ;
		ИначеЕсли Статус="Accepted"  Тогда
			ДокумП.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан;
			
			ПолучДокм=ДокумП.Документоснование.ПолучитьОбъект();
			ПолучДокм.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ;
			ПолучДокм.ОшибкаОтправки="Отменено по документу "+Строка(Стр_1.Ссылка);
			ПолучДокм.ПометкаУдаления=Истина;
			Если     ПолучДокм.Проведен Тогда
					ПолучДокм.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				ПолучДокм.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			//ДокумП.Товары[Стр_1.Сч].Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ;
		КонецЕсли;
		ДокумП.ОшибкаОтправки=Ошибка;
		ДокумП.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры

Функция ВернутьОтказыПоЛекарствам	()
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Отгрузка_ХамелеонЦРПТ.Ссылка,
		|	Отгрузка_ХамелеонЦРПТ._Order_ID
		|ИЗ
		|	Документ.РегистрацияСеденийОбОтзывеОтгрузок_ХамелеонЦРПТ КАК Отгрузка_ХамелеонЦРПТ
		|ГДЕ
		|	Отгрузка_ХамелеонЦРПТ.Статус В(&Статус)
		|	И ПОДСТРОКА(Отгрузка_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|	И Отгрузка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему.Наименование = ""Фармацевтика""";
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаемРегистрациюУчастникавИСМП);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента);
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	
Конецфункции

Функция ВернутьАгрегациюЛекарства()
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Отгрузка_ХамелеонЦРПТ.Ссылка,
		|	Отгрузка_ХамелеонЦРПТ._Order_ID
		|ИЗ
		|	Документ.СозданиеНовогоШкНаКороба_ХамелеонЦРПТ КАК Отгрузка_ХамелеонЦРПТ
		|ГДЕ
		|	Отгрузка_ХамелеонЦРПТ.Статус В(&Статус)
		|	И ПОДСТРОКА(Отгрузка_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|	И Отгрузка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему.Наименование = ""Фармацевтика""";
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаемРегистрациюУчастникавИСМП);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента);
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	
Конецфункции

Функция ВернутьОтгрузкуЛекарства()
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Отгрузка_ХамелеонЦРПТ.Ссылка,
		|	Отгрузка_ХамелеонЦРПТ._Order_ID
		|ИЗ
		|	Документ.Отгрузка_ХамелеонЦРПТ КАК Отгрузка_ХамелеонЦРПТ
		|ГДЕ
		|	Отгрузка_ХамелеонЦРПТ.Статус В(&Статус)
		|	И ПОДСТРОКА(Отгрузка_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|	И Отгрузка_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему.Наименование = ""Фармацевтика""";
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаемРегистрациюУчастникавИСМП);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента);
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив_1=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Массив_1.Добавить(Новый Структура("order_id,Ссылка",ВыборкаДетальныеЗаписи._Order_ID,ВыборкаДетальныеЗаписи.Ссылка));
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат Массив_1
	
Конецфункции

Процедура ОбработаноМассив_Обработать(ОбработаноМассив)
	Для Каждого Стр_1 Из 	ОбработаноМассив Цикл
		ДокумП=Стр_1.Докум.ПолучитьОбъект();
		Если Стр_1.Статус="Rejected" Тогда
			ДокумП.Товары[Стр_1.Сч].Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ;
			ДокумП.Товары[Стр_1.Сч].ОшибкаОтправки=Стр_1.Ошибка;
			ДокумП.Товары[Стр_1.Сч].СтатусСтроки="Отказ";
			
			ДокумП.Записать(РежимЗаписиДокумента.Запись);
		ИначеЕсли Стр_1.статус="Accepted" Тогда
			ДокумП.Товары[Стр_1.Сч].Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан;
			ДокумП.Товары[Стр_1.Сч].ОшибкаОтправки=Стр_1.Ошибка;
			ДокумП.Товары[Стр_1.Сч].СтатусСтроки="Обработан";
			ДокумП.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЕсли;
	Конеццикла;
	
КонецПроцедуры

Функция ВернутьСтатусыДокументовПоТабличнойЧасти()
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводВОборот_ХамелеонЦРПТТовары.Ссылка,
		|	ВводВОборот_ХамелеонЦРПТТовары.order_ID
		|ИЗ
		|	Документ.ОплатаЗаКМ_ХамелеонЦРПТ.Товары КАК ВводВОборот_ХамелеонЦРПТТовары
		|ГДЕ
		|	ПОДСТРОКА(ВводВОборот_ХамелеонЦРПТТовары.order_ID, 1, 1000) <> """"
		|	И (ВводВОборот_ХамелеонЦРПТТовары.Статус В(&Статус)
		|ИЛИ ВводВОборот_ХамелеонЦРПТТовары.Статус=Значение(Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ПустаяСсылка))";
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	//Запрос.УстановитьПараметр("ТипДокумента",	Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании); 
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивВ=Новый Массив;
	Сч=0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		МассивВ.Добавить(Новый Структура("Документ,order_ID,Сч",ВыборкаДетальныеЗаписи.Ссылка,ВыборкаДетальныеЗаписи.order_ID,Сч));
		Сч=Сч+1;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Возврат    МассивВ
	
	
Конецфункции

Процедура  ОработатьДокументы(Стр_1,Статус,Ошибка)
		ДокумП=Стр_1.Ссылка.ПолучитьОбъект();
		Если Статус="Rejected" Тогда
			ДокумП.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ;
			ДокумП.ОшибкаОтправки=Ошибка;
			ДокумП.Записать(РежимЗаписиДокумента.Запись);
		ИначеЕсли Статус="Accepted"  Тогда
			
			ДокумП.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан;
			
			ДокумП.ОшибкаОтправки=Ошибка;
			ДокумП.Записать(РежимЗаписиДокумента.Проведение);
			//ДокумП.Товары[Стр_1.Сч].Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ;
		КонецЕсли;
КонецПроцедуры

Функция ВернутьВводвоборотЛекарства()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводВОборот_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Документ.ВводВОборот_ХамелеонЦРПТ КАК ВводВОборот_ХамелеонЦРПТ
		|ГДЕ
		|	ВводВОборот_ХамелеонЦРПТ.ТипДокумента = &ТипДокумента
		|	И ПОДСТРОКА(ВводВОборот_ХамелеонЦРПТ._Order_ID, 1, 1000) <> """"
		|	И ВводВОборот_ХамелеонЦРПТ.Статус В(&Статус)
		|	И ВводВОборот_ХамелеонЦРПТ.ТекущийПользователь.СайтыВходаВСистему.Наименование = ""Фармацевтика""";
	
	СписокСтатусов=Новый СписокЗначений;
	//СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ОтправленЧерновик);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ВнутреннийПромежуточныйСтатус);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.ПринятИПереданВПроизводство);
	СписокСтатусов.Добавить(Перечисления.СтатусыДокументов_ХамелеонЦРПТ.КМЧастичноЭмитированы);
	
	
	Запрос.УстановитьПараметр("Статус",	СписокСтатусов); 
	Запрос.УстановитьПараметр("ТипДокумента",	Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании); 
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивВ=Новый Массив;
	Сч=0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		МассивВ.Добавить(Новый Структура("Ссылка,order_ID,Сч",ВыборкаДетальныеЗаписи.Ссылка,ВыборкаДетальныеЗаписи.Ссылка._Order_ID,Сч));
		Сч=Сч+1;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Возврат    МассивВ
	

КонецФункции

Функция ВернутьНеИспользоватьCAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY() Экспорт
	Возврат РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().НеИспользоватьCAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY
КонецФункции


Процедура ЗагружаемГТИН_ПоМарке(Текст,ИНН,Тотал,числоЗагрузили,Thumbprint_1,СпрПррр=Неопределено,ГТИН="") Экспорт

	
	числоЗагрузили=0;
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Текст);
			Попытка
				NNN=ПрочитатьJSON(ЧтениеJSON);
				Стр=NNN;
				//Тотал=NNN.total;
				
				//Для Каждого Стр Из NNN.results Цикл
				//	Если ИНН<>Стр.INN Тогда
				//		Продолжить;
				//	КонецЕсли;
					//Если     Массив.Найти(Число(Стр.gtin))=Неопределено Тогда
					//	Продолжить;
					//КонецЕсли;
					
					числоЗагрузили=числоЗагрузили+1;
					СпрД=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Стр.gtin));
					//СпрПррр=Число(Стр.gtin);
					ГТИН=Число(Стр.gtin);;
					Если СпрД<>Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка() Тогда
						СпрД=СпрД.ПолучитьОбъект();
					Иначе
						СпрД=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
					КонецЕсли;
					Если Thumbprint_1.НаименованиеСтенда="Обувь" Тогда
						СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь;
					ИначеЕсли Thumbprint_1.НаименованиеСтенда="Табак"
Тогда
						СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак;
						ИначеЕсли Thumbprint_1.НаименованиеСтенда="Альтернативный табак" Тогда
						СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак;
							
							
					КонецЕсли;
					
					БрендТорговаяМарка="";
					Если Стр.Свойство("brand",БрендТорговаяМарка) Тогда
						СпрД.БрендТорговаяМарка=БрендТорговаяМарка;
					КонецЕсли;
					country="";
					
					Стр.Свойство("country",country);
					Если ЗначениеЗАполнено(country) Тогда
						
						Если country="РОССИЙСКАЯ ФЕДЕРАЦИЯ" Тогда
							СпрД.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
						Иначе
							СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(country);
						КонецЕсли;	
						
						//СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(Стр.country);
					//ИначеЕсли Не ЗначениеЗаполнено(	СпрД.СтранаПроизводства) Тогда
					//	СпрД.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
					КонецЕсли;
					СпрД.GTIN=Число(Стр.gtin);
					//СпрД.id=Стр.id;
					СпрД.ИННПроизводителяИмпортёра=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",Стр.producerInn);
					Если Не ЗначениеЗАполнено(СпрД.ИННПроизводителяИмпортёра) Тогда
						Спр_К=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
						Спр_К.ИНН=Стр.producerInn;
						Спр_К.Наименование=Стр.producerName;
						Спр_К.Записать();
						СпрД.ИННПроизводителяИмпортёра=Спр_К.Ссылка;
						
					Конецесли;
					
					МатериалНиза="";
					Если Стр.Свойство("materialDown",МатериалНиза) И ЗначениеЗаполнено(МатериалНиза) Тогда
						СпрД.МатериалНиза=МатериалНиза
					КонецЕсли;
					МатериалПодкладки="";
					Если  Стр.Свойство("materialLining",МатериалПодкладки) И ЗначениеЗаполнено(МатериалПодкладки) Тогда
						СпрД.МатериалПодкладки=МатериалПодкладки;
					КонецЕсли;
					
					
					МатериалВерха="";
					Если Стр.Свойство("materialUpper",МатериалВерха) И ЗначениеЗаполнено(МатериалВерха) тогда
						СпрД.МатериалВерха=МатериалВерха;
					КонецЕсли;
					
					Цвет="";
					Если Стр.Свойство("color",Цвет) И ЗначениеЗаполнено(Цвет) Тогда
						СпрД.Цвет=Цвет;
					КонецЕсли;
					
					МодельПроизводителяАртикул="";
					Если Стр.Свойство("model",МодельПроизводителяАртикул) И ЗначениеЗаполнено(МодельПроизводителяАртикул) Тогда
						СпрД.МодельПроизводителяАртикул=МодельПроизводителяАртикул;
					Конецесли;
					
					КодТНВЭДКороткий="";
					Если Стр.Свойство("tnVedCode",КодТНВЭДКороткий) И ЗначениеЗаполнено(КодТНВЭДКороткий) Тогда
						СпрД.КодТНВЭДКороткий=КодТНВЭДКороткий
					КонецЕсли;
					
					
					//Стр.Свойство("color",СпрД.Цвет);
					
					
					
					tnvd="";
					Стр.Свойство("tnvd",tnvd);
					Если ЗначениеЗаполнено(tnvd) Тогда
						СпрД.КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(tnvd);
						
						Если Не ЗначениеЗаполнено(СпрД.КодТНВЭД) Тогда
							СпрК=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
							СпрК.Код=tnvd;
							СпрК.Наименование=tnvd;
							СпрК.Записать();
							СпрД.КодТНВЭД=СпрК.Ссылка;
						КонецЕсли;
						
						
					КонецЕсли;
					
					
					Наименование="";
					Если Стр.Свойство("productName",Наименование) И ЗначениеЗаполнено(Наименование) тогда
						СпрД.Наименование=Наименование;
						СпрД.НаименованиеТовара=Наименование;
					КонецЕсли;
					//Стр.Свойство("productName",СпрД.НаименованиеТовара);
					Если Не ЗначениеЗаполнено(СпрД.Наименование) тогда
						СпрД.Наименование=xmlString(СпрД.GTIN);
						СпрД.НаименованиеТовара=xmlString(СпрД.GTIN);
						
						//СпрД.НаименованиеТовара=СпрД.Наименование;
					КонецЕсли;
					
					productSize=Неопределено;
				    Стр.Свойство("productSize",productSize);
					Если ЗначениеЗаполнено(productSize) тогда
						productSize=СтрЗаменить(productSize,".",",");
						СпрД.Размер=Справочники.РазмерВШтихмассовойСистеме_ХамелеонЦРПТ.НайтиПоНаименованию(productSize,Истина);
					КонецЕсли;
					
										КодПр="";
					Стр.Свойство("productTypeDesc",КодПр);
					Если ЗначениеЗаполнено(КодПр) Тогда
					СпрД.ВидОбуви=Справочники.ВидОбуви_ХамелеонЦРПТ.НайтиПоНаименованию(КодПр,Истина);
					Если Не ЗначениеЗаполнено(СпрД.ВидОбуви) тогда
						СпрВ=Справочники.ВидОбуви_ХамелеонЦРПТ.СоздатьЭлемент();
						//СпрВ.Код=Стр.productType;
						СпрВ.Наименование=КодПр;
						СпрВ.Записать();
						СпрД.ВидОбуви=СпрВ.Ссылка;
					КонецЕсли;
				КонецЕсли;
				publicationDate=Неопределено;
				    Стр.Свойство("publicationDate",publicationDate);
					Если ЗначениеЗаполнено(publicationDate) тогда
						СпрД.ДатаПубликации=Дата(1970,1,1)+Стр.publicationDate/1000;					
					Конецесли;
					////То была обувь теперь сигареты
				packageType=Неопределено;
				    Стр.Свойство("packageType",packageType);
					Если ЗначениеЗАполнено(packageType) тогда
						Попытка
							СПрд.ТипУпаковкиСигарет=Перечисления.ТипУпаковкиСигареты_ХамелеонЦРПТ[packageType];
						Исключение
						КонецПопытки;
					КонецЕсли;
					КоличествоВГруппе=0;
					Если Стр.Свойство("innerUnitCount",КоличествоВГруппе) И
						ЗначениеЗаполненО(КоличествоВГруппе) Тогда
						СпрД.КоличествоВГруппе=КоличествоВГруппе;
					Конецесли;
				productGroup=Неопределено;
				    Стр.Свойство("productGroup",productGroup);
					Если ЗначениеЗаполнено(productGroup) тогда
						СпрГр=Справочники.ГруппаСигарет_ХамелеонЦРПТ.НайтиПоНаименованию(productGroup);
						Если Не ЗначениеЗаполнено(СпрГр) Тогда
							СпрГр=Справочники.ГруппаСигарет_ХамелеонЦРПТ.СоздатьЭлемент();
							СпрГр.Наименование=productGroup;
							СпрГр.Записать();
						КонецЕсли;
						СпрД.ГруппаСигарет=СпрГр.Ссылка;
						
					КонецЕсли;
					
					
					
					
					СпрД.Записать();
					
					СпрПррр=СпрД.Ссылка;
					
					Сертификат=Неопределено;
					Если Стр.Свойство("certDoc",Сертификат) Тогда
						Попытка
							ДатаВыдачи=Сертификат.date;
							ДатаНачалаДействия=Дата(Сред(ДатаВыдачи,1,4),Сред(ДатаВыдачи,6,2),Сред(ДатаВыдачи,9,2));
							НаимСерт=Сертификат.number;
							Тип=Сертификат.type;
							Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.НайтиПоНаименованию(
							 НаимСерт);
							 Если НЕ ЗначениеЗаполнено(Сертификат) тогда
								 //Сертификат=Сертификат.ПолучитьОбъект();
								 Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.СоздатьЭлемент();
							Сертификат.Наименование=НаимСерт;
							Сертификат.ДатаНачалаДействия=ДатаНачалаДействия;
							 Сертификат.Записать();
						 КонецЕсли;
						РегСв=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.СоздатьНаборЗаписей();
						РегСв.Отбор.Продукция.Установить(СпрД.Ссылка);
						РегСв.Отбор.Период.Установить(ДатаНачалаДействия);
						Добав=РегСв.Добавить();
						Добав.Период=ДатаНачалаДействия;
						Добав.Продукция=СпрД.Ссылка;
						Добав.Документ=Сертификат;
						Регсв.Записать(Истина);
						
						Исключение
						КонецПопытки;
					Конецесли;
					
					 
			//	Конеццикла;
				
		Исключение
			
			Попытка
				
			ЗагружаемГТИН_ПоМарке_Соответвтвие(Текст,ИНН,Тотал,числоЗагрузили,Thumbprint_1,СпрПррр)

				  Исключение
			
				Возврат
			КонецПопытки;
		КонецПопытки;
	
	
КонецПроцедуры
		
Функция СгенерироватьDataMatrix(Код, ИмяФайла, ПобитИсклИли) Экспорт
	
	ГенераторМатрицы = Обработки.ГенерацияDataMatrix_ХамелеонЦРПТ.Создать();
	ГенераторМатрицы.ПобитИсклИли = ПобитИсклИли;
	Картинка = ГенераторМатрицы.Сгенерировать(Код);
	Картинка.Записать(ИмяФайла);
	
КонецФункции

Функция СообщитьДанныеТовара(КодТовара, Настройки) Экспорт
	
	Если ЗначениеЗАполнено(Настройки.АдресПрокси) Тогда
		Прокси=Новый ИнтернетПрокси;
		Прокси.Установить("http",Настройки.АдресПрокси,Настройки.ПортПрокси,Настройки.ПользовательПрокси,Настройки.ПарольПрокси);
		
		HTTPСервисЗапрос=Новый HTTPСоединение("mobile.api.crpt.ru",,,,Прокси,Настройки.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	Иначе
		HTTPСервисЗапрос=Новый HTTPСоединение("mobile.api.crpt.ru",,,,,Настройки.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	КонецЕсли;
	
	Запись = Новый ЗаписьJSON;	
	Запись.УстановитьСтроку();
	Если Настройки.НаименованиеСтенда="Табак"
							ИЛИ Настройки.НаименованиеСтенда="Альтернативный табак"
Тогда
		Если Сред(КодТовара,26,4)="8005" Тогда
			КодТовара=Сред(КодТовара,1,25);
		КонецЕсли;
	КонецЕсли;
	ЗаписатьJSON(Запись, Новый Структура("code",КодТовара));
	Тело = Запись.Закрыть();
	
	HTTPЗапрос=Новый HTTPЗапрос("mobile/check");
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("User-agent",ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(СтрЗаменить(Настройки.ТекущийПользователь.Организация.Наименование,"""","")+
	Настройки.ТекущийПользователь.Организация.ИНН));
	//"Mozilla/5.0 (Windows NT 10.0 Win64x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36");					
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Если Ответ.КодСостояния=200 Тогда
		Текст = Ответ.ПолучитьТелоКакСтроку();
	Иначе
		Текст = "";;
	КонецЕсли;
	
	//Сообщение = Новый СообщениеПользователю;
	//Сообщение.Текст = Текст;
	//Сообщение.Сообщить();
	
	Возврат Текст
Конецфункции

Функция ЗагрузитьПродукции(МассивСтр) Экспорт
	МассивТ=Новый  Массив;
	Для Каждого Стр_1 Из МассивСтр Цикл
		ГТИН=Число(Стр_1.gtin);
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Название=Стр_1.Название;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Продукция_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
		|ГДЕ
		|	Продукция_ХамелеонЦРПТ.GTIN = &GTIN";
	
	Запрос.УстановитьПараметр("GTIN", ГТИН);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество()=0 Тогда
		СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
		СпрПр.GTIN=Число(ГТИН);
		СпрПр.Наименование=Название;
		СпрПр.НаименованиеТовара=Название;
		СпрПр.Записать();
			     МассивТ.Добавить(СпрПр.Ссылка);
	Иначе
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
			СпрПр=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			СпрПр.Наименование=Название;
			СпрПр.НаименованиеТовара=Название;
			СпрПр.Записать();
			     МассивТ.Добавить(СпрПр.Ссылка);
			//НСтрок=Объект.ПроверкаПоНомерамКМ.НайтиСтроки(Новый Структура("Продукция",СпрПр.Ссылка));
			//Для Каждого Стр_1 Из Нстрок Цикл
			//	Стр_1.Продукция=Неопределено;
				//Стр_1.Продукция=СпрПр.Ссылка;
			//Конеццикла;
				
		КонецЦикла;
	КонецЕсли;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		
	Конеццикла;
	        Возврат МассивТ

	//Элементы.ПроверкаПоНомерамКМ.Обновить();
	//ЭтаФорма.Прочитать();
Конецфункции



Функция ПолучитьИнформациюСMarked_Products(Марка,Thumbprint_1,СРегистра) Экспорт
	
						Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
							Прокси=Новый ИнтернетПрокси;
							Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
						
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
						Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
						КонецЕсли;
						
			что=Thumbprint_1.что;
							
				//	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Марка)+"&pg="+что);;
				
				ШтрихКод=Марка;
				МассивКМ=Новый Массив;
				МассивКМ.Добавить(ШтрихКод);
				Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьтелоПоcis(МассивКМ);
				HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/cis/cis_list?pg="+Что);
				
				
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин
				
				#Если ВебКлиент Тогда
					HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
				#Иначе
					HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
				#КонецЕсли
				
				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
				
	Если Ответ.КодСостояния=200 Тогда
		Текст = Ответ.ПолучитьТелоКакСтроку();
		Если СтрДлина(ШтрихКод)>18 тогда
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке_Соответвтвие(Текст,"",0,0,Thumbprint_1);
		КонецЕсли;
	Иначе
		Текст = "";;
	КонецЕсли;
	
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.Сообщить();
	
	Возврат Текст
				
КонецФункции





Процедура ОбработкаВсехОрошо(МассивДляОбработки,Текст1) Экспорт
	ОбрабатываемПервый=МассивДляОбработки[0].ПолучитьОбъект();
	ОбрабатываемПервый.ВходитВГрупповую=Ложь;
	ОбрабатываемПервый._Order_ID=Текст1;
	ОбрабатываемПервый.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен;
	Для каждого Стр_1 Из МассивДляОбработки Цикл
		Если ОбрабатываемПервый.Ссылка=Стр_1 Тогда
			Продолжить;
		Конецесли;
		ДокуП=Стр_1.ПолучитьОбъект();
		ДокуП.ВходитВГрупповую=Истина;
		ДокуП.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отправлен;
		ДокуП._Order_ID=Текст1;
		ДокуП.ОшибкаОтправки="";
		ДокуП.Записать();
		Добав=ОбрабатываемПервый.Агрегации.Добавить();
		Добав.Агрегация=ДокуП.Ссылка;
	Конеццикла;
	ОбрабатываемПервый.Записать();
	
КонецПроцедуры

Процедура ОбработкаВсеПлохо(МассивДляОбработки,ОшибкаОтправки) Экспорт
	
	Для каждого Стр_1 Из МассивДляОбработки Цикл
		ДокуП=Стр_1.ПолучитьОбъект();
		ДокуП.ВходитВГрупповую=Ложь;
		ДокуП.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ;
		ДокуП._Order_ID="";
		ДокуП.ОшибкаОтправки=ОшибкаОтправки;
		ДокуП.Агрегации.Очистить();
		ДокуП.Записать();
	Конеццикла;
	
	
КонецПроцедуры

Процедура ОтправитьФормированиеАгрегации_Сервер(ТекущийПользователь,МассивАгрегаций) Экспорт
	// Вставить содержимое обработчика.
	
	//Thumbprint_1=ПолучитьИзПользователя();	
	
//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОтправитьАгрегациюНаСервере_ХамелеонЦРПТ(Объект.ТекущийПользователь,Объект.Ссылка);
//	Возврат;



//	МассивАгрегаций=Новый Массив;
//	Для Каждого Стр_1 Из Элементы.Список.ВыделенныеСтроки Цикл
//		МассивАгрегаций.Добавить(Стр_1);
//	Конеццикла;
	
//	
	Если МассивАгрегаций.Количество()>0 Тогда	
		//ТекПользователь=Обр.Пользователь;
		МассивДляОбработки=Новый Массив;
		МассивДляОбработки.Очистить();
		СформироватьФайлДляОтправки=СформироватьДляОтправкиТекст(МассивАгрегаций,МассивДляОбработки);
		Если НЕ ЗначениеЗаполнено(СформироватьФайлДляОтправки) ИЛИ МассивДляОбработки.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат
	КонецЕсли;
	
	Thumbprint_1=ПолучитьИзПользователя(ТекущийПользователь);	
	
//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОтправитьАгрегациюНаСервере_ХамелеонЦРПТ(Объект.ТекущийПользователь,Объект.Ссылка);
//	Возврат;
	
	Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
		Возврат;
	КонецЕслИ;
	
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеТокенаНаСервере(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		Сообщить("Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
	
	Подписанный="";
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ПС,"");
	СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
		
		
	Подписанный="";
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1,Подписанный,Истина);
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
	Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
	Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
	Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	
	
	Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
	Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
	Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
	Добав=СтрЗаменить(Добав,"\r\n","");

	Тело="{
	|""product_document"":"""+Добав+""",
	|""document_format"": ""MANUAL"",
	|""signature"":"""+Подписанный+"""}";
	

	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
		Прокси=Новый ИнтернетПрокси;
		Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
	
		HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	Иначе
		HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	КонецЕсли;
	
			
 	что=Thumbprint_1.что;
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/aggregation/create?pg="+Что);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	//Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		//ЗапишемВРегистр_Ответ(Текст1);
	//КонецЕсли;
		
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
		ИЛИ Ответ.КодСостояния=201 
		Тогда
		
			ОбработкаВсехОрошо(МассивДляОбработки,Текст1);
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
			//Объект._Order_ID=Текст1;
			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			
	Иначе
		//	Если УжеОтправили=Истина Тогда
				//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						
						ОшибкаОтправки="";
						Если Найти(Текст1,"Billing contract for shoes product group not signed by participant")>0 Тогда
							Сообщить("Договор биллинга для выбранной группы не подписан участником.");
						Иначе
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
							КонецПопытки;
							
						КонецПопытки;
							КонецЕсли;
						ОбработкаВсеПлохо(МассивДляОбработки,ОшибкаОтправки);

					
					Исключение
					КонецПопытки;
		//	Иначе
		//		Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	//КонецЕсли;
	
	КонецЕсли;
	
	
	
	
	
	

КонецПроцедуры


Функция СформироватьДляОтправкиТекст(МассивАгрегаций,МассивДляОбработки)
	
	Организация=МассивАгрегаций[0].Организация;
	СайтВходВСистему=МассивАгрегаций[0].ТекущийПользователь.СайтыВходаВСистему;
	Если СайтВходВСистему="Фармацевтика" Тогда
		Сообщить("По фармацевтике необходимо отправлять каждый документ отдельно");
		Возврат Неопределено;
	КонецЕсли;
	
		
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("participantId");
	Чтен.ЗаписатьЗначение(Организация.ИНН);
	Чтен.ЗаписатьИмяСвойства("aggregationUnits");
		
		
		
	Чтен.ЗаписатьНачалоМассива();
	
	
	Для Каждого Стр Из МассивАгрегаций Цикл
		
		Если Стр.Организация<>Организация 
			ИЛИ Стр.ТекущийПользователь.СайтыВходаВСистему<>СайтВходВСистему
			Тогда
			Сообщить("Пропускаем документ агрегации "+Строка(Стр));
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.ТипДокумента) И Стр.ТипДокумента<>Перечисления.ВидДокументаУпаковок_ХамелеонЦРПТ.Формирование Тогда
			Сообщить("Пропускаем документ агрегации "+Строка(Стр)+". В групповой можем отправить только формирования агрегации");
			Продолжить;
		КонецЕслИ;
		Если (ЗначениеЗаполнено(Стр._Order_ID) 
			И Стр.Статус<>ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ")
			) ИЛИ Стр.ВходитВГрупповую=Истина
			Тогда
			Сообщить("Агрегация "+Строка(Стр)+" отправлена.");
			Продолжить;
		КонецЕслИ;
		
		Чтен.ЗаписатьНачалоОбъекта();
		Чтен.ЗаписатьИмяСвойства("unitSerialNumber");
		Чтен.ЗаписатьЗначение(Стр.НомерКороба);
		Чтен.ЗаписатьИмяСвойства("aggregationType");
		Чтен.ЗаписатьЗначение("AGGREGATION");
		
		Чтен.ЗаписатьИмяСвойства("sntins");
		Чтен.ЗаписатьНачалоМассива();
		Для Каждого Стр_М Из Стр.Марки Цикл
			Чтен.ЗаписатьЗначение(Стр_М.Марка);
		Конеццикла;
		Чтен.ЗаписатьКонецМассива();
		Чтен.ЗаписатьКонецОбъекта();
		
		МассивДляОбработки.Добавить(Стр);
	Конеццикла;
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
		
	Возврат Чтен.Закрыть();
	
	
	
КонецФункции


Процедура ЗагрузитьПолученныеНаСервере(МассивДляЗагрузки,МассивУп,МассивКМ,Пользователь)
	ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	
	МассивУп=Новый Массив;
	
	Для Каждого АдресРеквизитов Из МассивДляЗагрузки Цикл
		РеквизитыЭлектронногоДокумента = ПолучитьИзВременногоХранилища(АдресРеквизитов.РеквизитыЭлектронногоДокумента);
		
		
		Если РеквизитыЭлектронногоДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ЗагрузкаПриемкиИзXML(РеквизитыЭлектронногоДокумента,МассивУп,ЗаписыватьДанныеПриОтправкеЗаказа,Пользователь,АдресРеквизитов,Справочники.ЭДО_ХамелеонЦРПТ.ЭДОТакском)
		
		//МассивДляЗагрузки.Добавить(РеквизитыЭлектронногоДокумента);
	КонецЦикла;
	//ПодключенныйМодуль(ИмяМодуляИнтеграции).ЗагрузитьДокументы(МассивДляЗагрузки, Организация);
	
	
	//ОсновнойМодуль().ЗагрузитьПолученные(МассивДляЗагрузки, Организация);
	
КонецПроцедуры


Функция РеквизитыЭлектронногоДокументаИзДокументооборота(ДанныеДокументооборота, УникальныйИдентификаторФормы, СообщениеОбОшибке = "") Экспорт

	КаталогВременныхФайловНаКлиенте=КаталогВременныхФайлов();
	КаталогРаспаковки = ПодставитьПараметрыВСтроку("%1%2%3",
		КаталогВременныхФайлов(), ДанныеДокументооборота.ИдентификаторДокументооборота, ПолучитьРазделительПути());
	ПроверитьСоздатьКаталог(КаталогРаспаковки);
	
		ДанныеКонтейнера = ПолучитьИзВременногоХранилища(ДанныеДокументооборота.АдресДанныхДокументооборота);
	Попытка
		ЧтениеZip = Новый ЧтениеZipФайла(ДанныеКонтейнера.ОткрытьПотокДляЧтения());
	Исключение
		ДанныеКонтейнера .Записать(КаталогВременныхФайловНаКлиенте+"temp_1c_8.zip");
		ЧтениеZip = Новый ЧтениеZipФайла(КаталогВременныхФайловНаКлиенте+"temp_1c_8.zip");
		
	КонецПопытки;
	ЧтениеZip.ИзвлечьВсе(КаталогРаспаковки);
	ЧтениеZip.Закрыть();
	
	НайденныеФайлы = НайтиФайлы(КаталогРаспаковки, "meta.xml");
	Если НайденныеФайлы.Количество() = 0 Тогда
		УдалитьФайлы(КаталогРаспаковки);
		СообщениеОбОшибке = "Не найден файл ""meta.xml"" в пакете """+ДанныеДокументооборота.ИдентификаторДокументооборота;
		Возврат Неопределено;
	КонецЕсли;
	
	ФайлОписанияДокументооборота = НайденныеФайлы[0];
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ФайлОписанияДокументооборота.ПолноеИмя);
	ДокументооборотXDTO = ФабрикаXDTO.ПрочитатьXML(Чтение);
	Чтение.Закрыть();
	
	ДокументооборотыДоклайнз = Новый Массив;
	Если ТипЗнч(ДокументооборотXDTO.DocFlow) = Тип("СписокXDTO") Тогда 
		ДокументооборотыДоклайнз = ДокументооборотXDTO.DocFlow;
	ИначеЕсли ТипЗнч(ДокументооборотXDTO.DocFlow) = Тип("ОбъектXDTO") Тогда 
		ДокументооборотыДоклайнз.Добавить(ДокументооборотXDTO.DocFlow);
	КонецЕсли;
	
	Транзакция = Неопределено;
	Для Каждого Документооборот Из ДокументооборотыДоклайнз Цикл
		Для Каждого Документ Из Документооборот.Documents.Document Цикл
			Если Документ.TransactionCode <> "Invoice" Тогда
				Продолжить;
			КонецЕсли; 
			
			Транзакция = Новый Структура("КодРегламента, 
				|КодТранзакции, 
				|ПутьКДокументу, 
				|ПутьККарточке,
				|ИдентификаторДокументооборота");
			
			Транзакция.КодРегламента = Документ.ReglamentCode;
			Транзакция.КодТранзакции = Документ.TransactionCode;
			Транзакция.ИдентификаторДокументооборота = Документооборот.Id;
			Транзакция.ПутьКДокументу = КаталогРаспаковки + Документ.Files.MainImage.Path;
			Транзакция.ПутьККарточке = КаталогРаспаковки + Документ.Files.ExternalCard.Path;
			
			Прервать;
			
		КонецЦикла;
	КонецЦикла;
	
	Если Транзакция = Неопределено Тогда
		УдалитьФайлы(КаталогРаспаковки);
		СообщениеОбОшибке = "Для документа "+ДанныеДокументооборота.ИдентификаторДокументооборота+" загрузка не предусмотрена";
		Возврат Неопределено;
	КонецЕсли; 
	
	СвязанныеДокументы = Новый Массив;
	РеквизитыКарточкиТаксом = РеквизитыЭлектронногоДокумента(Транзакция.ПутьКДокументу);
	
							Если РеквизитыКарточкиТаксом.Загружать=Ложь Тогда
								Возврат Неопределено;
							КонецЕсли;
	
	Если РеквизитыКарточкиТаксом.Свойство("ДополнительныеСведения") Тогда
		Для Каждого Параметр Из РеквизитыКарточкиТаксом.ДополнительныеСведения Цикл
			Если Параметр.Имя = "LinkedDocument" Тогда
				СвязанныеДокументы.Добавить(Параметр.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	
	ОсновнойФайл = Транзакция.ПутьКдокументу;
	
	СтруктураИмениФайла = РазложитьПолноеИмяФайла(ОсновнойФайл);
	
	Расширение = СтруктураИмениФайла.Расширение;
	
	Если НРег(Расширение) = ".xml" Тогда
		
		РеквизитыЭлектронногоДокумента = РеквизитыЭлектронногоДокумента(ОсновнойФайл, СообщениеОбОшибке);
		Если РеквизитыЭлектронногоДокумента.Загружать=Ложь Тогда
			//РеквизитыЭлектронногоДокумента=Неопределено;
								Возврат неопределено;
							КонецЕсли;
		
		РеквизитыЭлектронногоДокумента.Вставить("СвязанныеДокументы", СвязанныеДокументы);
		РеквизитыЭлектронногоДокумента.Вставить("ИдентификаторДокументооборота", ДанныеДокументооборота.ИдентификаторДокументооборота);
		
		Если Найти(РеквизитыЭлектронногоДокумента.ФорматДокумента.Идентификатор, "ON_NSCHFDOPPR") = 0
			И Найти(РеквизитыЭлектронногоДокумента.ФорматДокумента.Идентификатор, "ON_SCHFDOPPR") = 0 Тогда
			СообщениеОбОшибке = ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 загрузка не предусмотрена'"), 
					ДанныеДокументооборота.ИдентификаторДокументооборота);
		ИначеЕсли РеквизитыЭлектронногоДокумента.Свойство("Исправление") Тогда
			СообщениеОбОшибке = ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 загрузка не предусмотрена: Не производится загрузка корректировочных и исправительных документов'"), 
					ДанныеДокументооборота.ИдентификаторДокументооборота);
		КонецЕсли;
			
	Иначе
		РеквизитыЭлектронногоДокумента = Неопределено;
	КонецЕсли;
	
	Если РеквизитыЭлектронногоДокумента <> Неопределено Тогда
		Текст=Новый ТекстовыйДокумент;
		Текст.Прочитать(ОсновнойФайл);
		РеквизитыЭлектронногоДокумента.Вставить("ТекстФайла",Текст.ПолучитьТекст());
		РеквизитыЭлектронногоДокумента.Вставить("ИмяФайлаЭД",СтруктураИмениФайла.Имя);
		РеквизитыЭлектронногоДокумента = ПоместитьВоВременноеХранилище(РеквизитыЭлектронногоДокумента, УникальныйИдентификаторФормы);
	КонецЕсли; 
	
	Попытка
		УдалитьФайлы(КаталогРаспаковки);
	Исключение
	КонецПопытки;
		
	Возврат РеквизитыЭлектронногоДокумента;
	
КонецФункции

Функция РазложитьПолноеИмяФайла(Знач ПолноеИмяФайла, ЭтоПапка = Ложь) Экспорт
	
	СтруктураИмениФайла = Новый Структура("ПолноеИмя,Путь,Имя,Расширение,ИмяБезРасширения");
	
	// Убираем из полного имени файла завершающий слеш и сохраняем получившееся полное имя в структуре.
	Если ЭтоПапка И (Прав(ПолноеИмяФайла, 1) = "/" Или Прав(ПолноеИмяФайла, 1) = "\") Тогда
		Если ЭтоПапка Тогда
			ПолноеИмяФайла = Сред(ПолноеИмяФайла, 1, СтрДлина(ПолноеИмяФайла) - 1);
		Иначе
			// Если путь к файлу заканчивается слешем, то у файла нет имени.
			СтруктураИмениФайла.Вставить("ПолноеИмя", ПолноеИмяФайла); 
			СтруктураИмениФайла.Вставить("Путь", ПолноеИмяФайла); 
			СтруктураИмениФайла.Вставить("Имя", ""); 
			СтруктураИмениФайла.Вставить("Расширение", ""); 
			СтруктураИмениФайла.Вставить("ИмяБезРасширения", ""); 
			Возврат СтруктураИмениФайла;
		КонецЕсли;
	КонецЕсли;
	СтруктураИмениФайла.Вставить("ПолноеИмя", ПолноеИмяФайла); 
	
	// Если полное имя файла оказалось пустым, то остальные параметры структуры возвращаем пустыми.
	Если СтрДлина(ПолноеИмяФайла) = 0 Тогда 
		СтруктураИмениФайла.Вставить("Путь", ""); 
		СтруктураИмениФайла.Вставить("Имя", ""); 
		СтруктураИмениФайла.Вставить("Расширение", ""); 
		СтруктураИмениФайла.Вставить("ИмяБезРасширения", ""); 
		Возврат СтруктураИмениФайла;
	КонецЕсли;
	
	// Выделяем путь к файлу и имя файла.
	Если Найти(ПолноеИмяФайла, "/") > 0 Тогда
		ПозицияРазделителя = СтрНайти_Сконца_Х(ПолноеИмяФайла, "/");
	ИначеЕсли Найти(ПолноеИмяФайла, "\") > 0 Тогда
		ПозицияРазделителя = СтрНайти_Сконца_Х(ПолноеИмяФайла, "\");
	Иначе
		ПозицияРазделителя = 0;
	КонецЕсли;
	СтруктураИмениФайла.Вставить("Путь", Лев(ПолноеИмяФайла, ПозицияРазделителя)); 
	СтруктураИмениФайла.Вставить("Имя", Сред(ПолноеИмяФайла, ПозицияРазделителя + 1));
	
	// Папки не имеют расширений, а для файла выделяем расширение.
	Если ЭтоПапка Тогда
		СтруктураИмениФайла.Вставить("Расширение", "");
		СтруктураИмениФайла.Вставить("ИмяБезРасширения", СтруктураИмениФайла.Имя);
	Иначе
		ПозицияТочки = СтрНайти_Сконца_Х(СтруктураИмениФайла.Имя, ".");
		Если ПозицияТочки = 0 Тогда
			СтруктураИмениФайла.Вставить("Расширение", "");
			СтруктураИмениФайла.Вставить("ИмяБезРасширения", СтруктураИмениФайла.Имя);
		Иначе
			СтруктураИмениФайла.Вставить("Расширение", Сред(СтруктураИмениФайла.Имя, ПозицияТочки));
			СтруктураИмениФайла.Вставить("ИмяБезРасширения", Лев(СтруктураИмениФайла.Имя, ПозицияТочки - 1));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураИмениФайла;
	
КонецФункции


Функция СтрНайти_Сконца_Х(Строка_1,Строка_2) Экспорт
	
	Если СтрДлина(Строка_1)<СтрДлина(Строка_2) Тогда
		Возврат 0;
	КонецЕсли;
	
	Строка_Поиска="";
	//Для Сч=СтрДлина(Строка_1) По 1 Цикл
	Для Сч=1 ПО СтрДлина(Строка_1) Цикл
		Строка_Поиска=Строка_Поиска+Сред(Строка_1,СтрДлина(Строка_1)-Сч+1,1);
	Конеццикла;
	
	Строка_Ищем="";
	Для Сч=1 ПО СтрДлина(Строка_1) Цикл
		Строка_Ищем=Строка_Ищем+Сред(Строка_2,СтрДлина(Строка_1)-Сч+1,1);
	Конеццикла;
	
	НомерК=Найти(Строка_Поиска,Строка_Ищем);
	Если НомерК=0 Тогда
		Возврат 0
	Иначе
		Возврат СтрДлина(Строка_1)-НомерК+1
	КонецЕсли;
	//Возврат Найти(ДляПроверки,Строка_2);
	
КонецФункции



Функция РеквизитыЭлектронногоДокумента(ПутьКДокументу, СообщениеОбОшибке = "") Экспорт
	
	//ПодключенныйМодульЧтениеЭД = ПодключенныйМодуль(ИмяМодуляЧтениеЭД); 
	//ПодключенныйМодульЧтениеЭД.НоваяФабрикаXDTO = ПолучитьНовуюФабрикуXDTO();
	РеквизитыЭлектронногоДокумента = ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.РеквизитыЭлектронногоДокумента(ПутьКДокументу, СообщениеОбОшибке);
	Возврат  РеквизитыЭлектронногоДокумента;
	
КонецФункции
Процедура ПроверитьСоздатьКаталог(Путь) Экспорт
	
	КаталогНаДиске = Новый Файл(ДобавитьКонечныйРазделительПути(Путь));
	Если Не КаталогНаДиске.Существует() Тогда
		Попытка
			СоздатьКаталог(КаталогНаДиске.ПолноеИмя);	
		Исключение
			Ошибка = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ВызватьИсключение ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось создать каталог ""%1"" по причине: %2'", "ru"), КаталогНаДиске.ПолноеИмя, Ошибка);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьКонечныйРазделительПути(Знач ПутьКаталога, Знач Платформа = Неопределено) Экспорт
	
	Если ПустаяСтрока(ПутьКаталога) Тогда
		Возврат ПутьКаталога;
	КонецЕсли;
	
	ДобавляемыйСимвол = ПолучитьРазделительПути();
	
	Если СтрЗаканчиваетсяНа_Х(ПутьКаталога, ДобавляемыйСимвол) Тогда
		Возврат ПутьКаталога;
	Иначе 
		Возврат ПутьКаталога + ДобавляемыйСимвол;
	КонецЕсли;
	
КонецФункции


Функция СтрЗаканчиваетсяНа_Х(Строка_1,Строка_2) Экспорт
	
	Если СтрДлина(Строка_1)<СтрДлина(Строка_2) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДляПроверки=Сред(Строка_1,СтрДлина(Строка_1)-СтрДлина(Строка_2));
	Возврат Найти(ДляПроверки,Строка_2);
	
КонецФункции


Функция ДанныеДокументооборота(ИдентификаторДокументооборота, HTTPСервисЗапрос_ТХЦ,Маркер) Экспорт 
	
	
	ЗапросСпискаДокументов = Новый HTTPЗапрос;
	ЗапросСпискаДокументов.АдресРесурса = "API/Get/"+ИдентификаторДокументооборота;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Integrator-Id", "Kartoteka_9AFE5408-C930-47FA-9CE4-FAE615EED09E");
	Заголовки.Вставить("Assistant-Key", Маркер);
	ЗапросСпискаДокументов.Заголовки = Заголовки;
	
	Ответ = HTTPСервисЗапрос_ТХЦ.Получить(ЗапросСпискаДокументов);
	Если Ответ.КодСостояния=200 Тогда
		Возврат Ответ.ПолучитьТелоКакДвоичныеДанные();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	//АдресРесурса = "API/Get/" + ИдентификаторДокументооборота;
	//ДанныеДокументооборота="";
	//ДанныеДокументооборота = ПолучитьИзДоклайнз(АдресРесурса, ПараметрыСоединения, Истина, Ложь, ТекстОшибки);
	//Возврат ДанныеДокументооборота;
	
КонецФункции

Функция ПрочитатьXMLФайл(СодержимоеФайла, ПространствоИмен, ИмяТипа) Экспорт
	
	ПозицияПространстваИмен = Найти(СодержимоеФайла, ПространствоИмен);
    
    // Даже если XML валиден, фабрика не сможет его прочитать без пространства имен.
    Если ПозицияПространстваИмен = 0 Тогда
        
        ПозицияСхемы = Найти(СодержимоеФайла, "http://www.w3.org/2001/XMLSchema");
        
        Если ПозицияСхемы = 0 Тогда 
            СтрокаПространстваИмен = 
                "xmlns="""+ПространствоИмен+""" xmlns:xs="""+"http://www.w3.org/2001/XMLSchema"+""" xmlns:xsi="""+"http://www.w3.org/2001/XMLSchema-instance"+""""
                ;
        Иначе
             СтрокаПространстваИмен = "xmlns="""+ПространствоИмен+"""";
        КонецЕсли;
            
        ПозицияЭлемента = Найти(СодержимоеФайла, ИмяТипа);
		ДлинаИмени = СтрДлина(ИмяТипа);
            
        СодержимоеФайла = Лев(СодержимоеФайла, ПозицияЭлемента + ДлинаИмени - 1) 
			+ " "
            + СтрокаПространстваИмен 
			+ " "
            + Сред(СодержимоеФайла, ПозицияЭлемента + ДлинаИмени);
        
    КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СодержимоеФайла);
	
	//Пакет = НоваяФабрикаXDTO().Пакеты.Получить(ПространствоИмен);
	//ТипОбъекта = Пакет.КорневыеСвойства.Получить(ИмяТипа).Тип;
	
	Возврат ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
КонецФункции

Функция ПодставитьПараметрыСПроцентом(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = Неопределено;
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр = Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр = Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр = Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр = Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр = Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр = Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр = Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр = Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр = Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = Неопределено Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции


Функция СтрокаВДату(СтрокаДатыТХЦ)
	
	ПозицияТочки = СтрНайти_Сконца_Х(СтрокаДатыТХЦ, ".");
	Если ПозицияТочки = 0 Тогда
		СтрокаДаты = СтрокаДатыТХЦ;
	Иначе
		СтрокаДаты = Лев(СтрокаДатыТХЦ, ПозицияТочки - 1);
	КонецЕсли;
	
	СтрокаДаты = ЗаменитьОдниСимволыДругими("T :/\-.", СтрокаДаты, "");
	ОписаниеТипаДата = ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
	Результат = ОписаниеТипаДата.ПривестиЗначение(СтрокаДаты);
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	Иначе
		Возврат ТекущаяДата();
	КонецЕсли;
	
КонецФункции

Функция ОписаниеТипаДата(ЧастиДаты) Экспорт

	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));

	КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты);

	Возврат Новый ОписаниеТипов(Массив, , , КвалификаторДаты);

КонецФункции

Функция ЗаменитьОдниСимволыДругими(ЗаменяемыеСимволы, Значение, СимволыЗамены) Экспорт
	
	Результат = Значение;
	
	Для НомерСимвола = 1 По СтрДлина(ЗаменяемыеСимволы) Цикл
		Результат = СтрЗаменить(Результат, Сред(ЗаменяемыеСимволы, НомерСимвола, 1), Сред(СимволыЗамены, НомерСимвола, 1));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СписокВходящихДокументов(Thumbprint_1,Маркер) Экспорт
	
	 МобильныйСайтДляПолученияИсходящих= Thumbprint_1.МобильныйСайтДляПолученияИсходящих;
	
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
		Прокси=Новый ИнтернетПрокси;
		Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
		СоединениеFilerMobileAPI=Новый HTTPСоединение(МобильныйСайтДляПолученияИсходящих,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	Иначе
				
		СоединениеFilerMobileAPI=Новый HTTPСоединение(МобильныйСайтДляПолученияИсходящих,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	КонецЕсли;
	
	
	Номер="";
	
	ЗапросСпискаДокументов = Новый HTTPЗапрос;
	ЗапросСпискаДокументов.АдресРесурса = "api/v1/documents";
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Заголовки.Вставить("Session-Token", Маркер);
	ЗапросСпискаДокументов.Заголовки = Заголовки;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Filter", Новый Структура);
	ПараметрыЗапроса.Filter.Вставить("FolderType", "B2BIn");
	ПараметрыЗапроса.Filter.Вставить("FilterItems", Новый Массив);
	
	ДатаНачала = Неопределено;
	ДатаОкончания = Неопределено;
	ОтборПоКонтрагенту = Неопределено;
	//Номер = Неопределено;
	ОтборПоСумме = Неопределено;
	ОтборСтатусДокументооборота = Неопределено;
	ОтборВидДокумента = Неопределено;
	
	ОтборПоСумме = Новый Структура("Использовать, ВидСравнения, Сумма", Ложь,
			0, 0);
			
			ДатаНачала=НачалоДня(ТекущаяДата())-15*24*60*60;
	Фильтры = Новый Структура;
	Фильтры.Вставить("Offset",0);
	Фильтры.Вставить("Count",30);
	//Фильтры.Свойство("ДатаНачала", ДатаНачала);
	//Фильтры.Свойство("ДатаОкончания", Дата(1,1,1));
	//Фильтры.Свойство("ОтборПоКонтрагенту", "");
	//Фильтры.Свойство("Номер", Номер);
	//Фильтры.Свойство("ОтборПоСумме", ОтборПоСумме);
	//Фильтры.Свойство("ОтборСтатусДокументооборота", "");
	//Фильтры.Свойство("ОтборВидДокумента", "");
	
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда 
		ФильтрПоДате = Новый Структура;
		ФильтрПоДате.Вставить("FilterType", 1);
		ФильтрПоДате.Вставить("FilterCondition", Новый Структура);
		Если ЗначениеЗаполнено(ДатаНачала)Тогда
			ФильтрПоДате.FilterCondition.Вставить("FromDate", Формат(ДатаНачала, "ДФ=yyyy-MM-ddTHH:mm:ss"));
		КонецЕсли; 
		ПараметрыЗапроса.Filter.FilterItems.Добавить(ФильтрПоДате);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Номер) Тогда
		ФильтрПоНомеру = Новый Структура;
		ФильтрПоНомеру.Вставить("FilterType", 2);
		ФильтрПоНомеру.Вставить("FilterCondition", Новый Структура);
		ФильтрПоНомеру.FilterCondition.Вставить("Value", Номер);
		ПараметрыЗапроса.Filter.FilterItems.Добавить(ФильтрПоНомеру);		
	КонецЕсли;
	
	
	ПараметрыЗапроса.Вставить("PagingInfo", Новый Структура);
	
	ПараметрыЗапроса.PagingInfo.Вставить("IsDescOrder", Истина);
	
	
	Смещение=0;
	
	
	Тотал=1;
	Массив = Новый Массив;
	Пока смещение*30<ТОтал Цикл
		
		ПараметрыЗапроса.PagingInfo.Вставить("Offset",Смещение);
		ПараметрыЗапроса.PagingInfo.Вставить("Count", 30);
		
		ЗапросСпискаДокументов.УстановитьТелоИзСтроки(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СтруктураВJSON(ПараметрыЗапроса));
		
		Попытка
			Ответ = СоединениеFilerMobileAPI.ОтправитьДляОбработки(ЗапросСпискаДокументов);
		Исключение
			//ПараметрыСоединения.СоединениеУстановлено = Ложь;
			//ИнформацияОбОшибке = ИнформацияОбОшибке();
			//ТекстСообщения = ПодставитьПараметрыВСтроку(
			//	НСтр("ru = '%1. Подробности см. в журнале регистрации'"),
			//	КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			Возврат Массив;
			//ДобавитьЗаписьЖурналаРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), Истина);	
	//		СообщиТекстСообщения;
		КонецПопытки;
		
		Если Ответ.КодСостояния <> 200 Тогда
			Возврат Массив;
		Иначе
			ОтветСтрокой = Ответ.ПолучитьТелоКакСтроку();
		//КонецЕсли;
			
			СтруктураОтвета = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СтруктураИзJSON(ОтветСтрокой);
			Для Каждого Документ Из СтруктураОтвета.DocumentModel Цикл
				
				Структура = Новый Структура;
				Структура.Вставить("PackageChainId", Документ.PackageChainId); 
				Структура.Вставить("Дата", СтрокаВДату(Документ.Date)); 
				Структура.Вставить("Номер", Документ.Number); 
				Структура.Вставить("ВидДокумента", Документ.DocumentType); 
				Структура.Вставить("СуммаДокумента", Документ.Sum); 
				Структура.Вставить("Контрагент", Документ.Receiver); 
				Структура.Вставить("Организация", Документ.Sender); 
				Структура.Вставить("ДатаЭД", СтрокаВДату(Документ.SendReceiveDT)); 
				Структура.Вставить("Статус", Документ.CompletionStatus); 
				Структура.Вставить("ИдентификаторДокументооборота", Документ.DocFlowID); 
				Массив.Добавить(Структура);
				
			КонецЦикла;
			
		КонецЕсли;
		Тотал=СтруктураОтвета.TotalCount;
		Смещение=Смещение+1;
	Конеццикла;
	Возврат Массив;
КонецФункции

Функция ПодставитьПараметрыВСтроку(Знач ШаблонСтроки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ЕстьПараметрыСПроцентом = Найти(Параметр1, "%")
		Или Найти(Параметр2, "%")
		Или Найти(Параметр3, "%")
		Или Найти(Параметр4, "%")
		Или Найти(Параметр5, "%")
		Или Найти(Параметр6, "%")
		Или Найти(Параметр7, "%")
		Или Найти(Параметр8, "%")
		Или Найти(Параметр9, "%");
		
	Если ЕстьПараметрыСПроцентом Тогда
		Возврат ПодставитьПараметрыСПроцентом(ШаблонСтроки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	КонецЕсли;
	
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%1", Параметр1);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%2", Параметр2);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%3", Параметр3);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%4", Параметр4);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%5", Параметр5);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%6", Параметр6);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%7", Параметр7);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%8", Параметр8);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%9", Параметр9);
	Возврат ШаблонСтроки;
	
КонецФункции


Функция ПроверкаСтатуса(Знач Статус,документ)
	Статус_1=Статус;
	Если Статус_1=Документ.СтатусУПД Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь
	Конецесли;
	
Конецфункции

Функция Статус(Знач НомерСтатуса)
	
	// 'Sending', 'CompletedWithWarning', 'Succeed', 'Fail', 'WaitingForAnswer', 'ResignWaiting', 'Suspended', 'Cancelled', 'WaitingForCancellation'
	
	НомерСтатуса=Число(НомерСтатуса);
	Если НомерСтатуса = 0 Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отправлен;//"Документооборот в процессе выполнения";
	ИначеЕсли НомерСтатуса = 1 Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Уточнён;//"Документооборот завершен с уточнениями или предупреждениями";
	ИначеЕсли НомерСтатуса = 2 Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан//"Документооборот успешно завершен";
	ИначеЕсли НомерСтатуса = 3 Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отклонен//"Документооборот завершен с ошибкой";
	ИначеЕсли НомерСтатуса = 4 Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.ОжидаетсяОтправка//"Ожидание ответа";
	ИначеЕсли НомерСтатуса = 5 Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.ТребуетсяПодпись//"Документ требует переподпись";
	ИначеЕсли НомерСтатуса = 6 Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.ОжидаетсяОтправка//"Документооборот приостановлен";
	ИначеЕсли НомерСтатуса = 7 Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отозван//"Аннулирован";
	ИначеЕсли НомерСтатуса = 8 Тогда
		Возврат Перечисления.СтатусыУПД_ХамелеонЦРПТ.Отозван//"Ожидает аннулирования";
	КонецЕсли; 
		
	Возврат НомерСтатуса;
	
КонецФункции

Функция ПоменятьСтатусДокументаИВСЕ(Статус,документ)
	ПолДокум=Документ.ПолучитьОбъект();
	ПолДокум.СтатусУПД=Статус;
	Если ПолДокум.СтатусУПД=Перечисления.СтатусыУПД_ХамелеонЦРПТ.Подписан	 Тогда
		ПолДокум.ПометкаУдаления=ложь;
		ПолДокум.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		ПолДокум.Записать();
	Конецесли;
Конецфункции


Функция ПолучитьИдЭд(Пользователь)
	Возврат Пользователь.Организация.ИД_ЭДО
КонецФункции

Функция ТелоПолучитьAutoSendReceive(Thumbprint_1,СерийныйНомер,УникальныйИД)
	
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("ReglamentCommandResults");
	//Чтение.ЗаписатьАтрибут("xmlns","http://api-invoice.taxcom.ru/meta");
	Чтение.ЗаписатьАтрибут("xmlns:xs","http://www.w3.org/2001/XMLSchema");
	Чтение.ЗаписатьАтрибут("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
	
	Чтение.ЗаписатьНачалоЭлемента("Results");
	Чтение.ЗаписатьАтрибут("xsi:type","ArrayOfReglamentCommandBase");
	
	Чтение.ЗаписатьНачалоЭлемента("ReglamentCommandBase");
	Чтение.ЗаписатьАтрибут("xsi:type","ReglamentSignSessionedCommand");
	
	Чтение.ЗаписатьНачалоЭлемента("Certificates");
	
	Чтение.ЗаписатьНачалоЭлемента("CertificateData");
	
	Чтение.ЗаписатьНачалоЭлемента("Thumbprint");
	Чтение.ЗаписатьТекст(Thumbprint_1.Thumbprint_1);
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Чтение.ЗаписатьНачалоЭлемента("SerialNumber");
	Чтение.ЗаписатьТекст(Врег(СерийныйНомер));
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	
	
	УникальныйИ=xmlString(Новый УникальныйИдентификатор());
	Чтение.ЗаписатьНачалоЭлемента("CryptoMarker");
	Чтение.ЗаписатьТекст(УникальныйИ);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьКонецЭлемента();
	Возврат Чтение.Закрыть();
	
	
	
	
Конецфункции

Функция ПолучитьОтветнасервереПОAutoSendReceive(ОтветAutoSendReceive)
	
	
	ОбъектОтвета = ПрочитатьXMLФайл(ОтветAutoSendReceive, "http://api-invoice.taxcom.ru/AutoSendRecieve", "ReglamentCommands");
	
	Если ОбъектОтвета.Commands.Свойства().Получить("ReglamentCommandBase") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеФайлов = Новый Массив;
	
	Если ТипЗнч(ОбъектОтвета.Commands.ReglamentCommandBase)=Тип("СписокXDTO") Тогда
		
		Для Каждого ТекущийРегламент Из ОбъектОтвета.Commands.ReglamentCommandBase Цикл
			Если ТекущийРегламент.Свойства().Получить("PackageImages") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ТекущийРегламент.PackageImages.PackageImageData)=Тип("СписокXDTO") тогда
				Для Каждого PackageImageData Из ТекущийРегламент.PackageImages.PackageImageData Цикл
					ДанныеФайла = PackageImageData.Image;
					//ДанныеФайлаСтрокой = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(Base64Значение(ДанныеФайла));
					ДанныеФайлаСтрокой = ДанныеФайла;
					
					ИдентификаторПакета = PackageImageData.PackageId;
					ИдентификаторДанныхПакета = PackageImageData.PackageImageId;
					Ключ = ТекущийРегламент.Key;
					
					ДанныеФайлов.Добавить(Новый Структура("ДанныеФайлаСтрокой, ИдентификаторПакета, ИдентификаторДанныхПакета, Ключ",
														ДанныеФайлаСтрокой,
														ИдентификаторПакета,
														ИдентификаторДанныхПакета,
														Ключ));
				КонецЦикла;
			Иначе
				PackageImageData=ТекущийРегламент.PackageImages.PackageImageData;
					ДанныеФайла = PackageImageData.Image;
					//ДанныеФайлаСтрокой = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(Base64Значение(ДанныеФайла));
					ДанныеФайлаСтрокой = ДанныеФайла;
					
					ИдентификаторПакета = PackageImageData.PackageId;
					ИдентификаторДанныхПакета = PackageImageData.PackageImageId;
					Ключ = ТекущийРегламент.Key;
					
					ДанныеФайлов.Добавить(Новый Структура("ДанныеФайлаСтрокой, ИдентификаторПакета, ИдентификаторДанныхПакета, Ключ",
														ДанныеФайлаСтрокой,
														ИдентификаторПакета,
														ИдентификаторДанныхПакета,
														Ключ));
													
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТекущийРегламент=ОбъектОтвета.Commands.ReglamentCommandBase;
		Если ТекущийРегламент.Свойства().Получить("PackageImages") = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если ТипЗнч(ТекущийРегламент.PackageImages.PackageImageData)=Тип("ОбъектXDTO") Тогда
			PackageImageData=ТекущийРегламент.PackageImages.PackageImageData;
				ДанныеФайла = PackageImageData.Image;
				ДанныеФайлаСтрокой = Base64Строка(ДанныеФайла);
				
				ИдентификаторПакета = PackageImageData.PackageId;
				ИдентификаторДанныхПакета = PackageImageData.PackageImageId;
				Ключ = ТекущийРегламент.Key;
				
				ДанныеФайлов.Добавить(Новый Структура("ДанныеФайлаСтрокой, ИдентификаторПакета, ИдентификаторДанныхПакета, Ключ",
													ДанныеФайлаСтрокой,
													ИдентификаторПакета,
													ИдентификаторДанныхПакета,
													Ключ));
		Иначе
		
			Для Каждого PackageImageData Из ТекущийРегламент.PackageImages.PackageImageData Цикл
				ДанныеФайла = PackageImageData.Image;
				ДанныеФайлаСтрокой = Base64Строка(ДанныеФайла);
				
				ИдентификаторПакета = PackageImageData.PackageId;
				ИдентификаторДанныхПакета = PackageImageData.PackageImageId;
				Ключ = ТекущийРегламент.Key;
				
				ДанныеФайлов.Добавить(Новый Структура("ДанныеФайлаСтрокой, ИдентификаторПакета, ИдентификаторДанныхПакета, Ключ",
													ДанныеФайлаСтрокой,
													ИдентификаторПакета,
													ИдентификаторДанныхПакета,
													Ключ));
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	
	Возврат ДанныеФайлов;	
	
	
КонецФункции

Функция ЗаполнитьТекстКриптооперацииНаСервере(МаркерРасшифрованный, ОтветAutoSendRecieve, ДанныеПодписиСтрокой)
	
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("ReglamentCommandResults");
	//Чтение.ЗаписатьАтрибут("xmlns","http://api-invoice.taxcom.ru/meta");
	Чтение.ЗаписатьАтрибут("xmlns:xs","http://www.w3.org/2001/XMLSchema");
	Чтение.ЗаписатьАтрибут("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
	
	Чтение.ЗаписатьНачалоЭлемента("Results");
	Чтение.ЗаписатьАтрибут("xsi:type","ArrayOfReglamentCommandResultBase");
	
	Чтение.ЗаписатьНачалоЭлемента("ReglamentCommandResultBase");
	Чтение.ЗаписатьАтрибут("xsi:type","SignSessionedResults");
	
	Чтение.ЗаписатьНачалоЭлемента("Results");
	
	Чтение.ЗаписатьНачалоЭлемента("SignResult");
	Чтение.ЗаписатьАтрибут("xsi:type","SignResultV2");
	
	
	Чтение.ЗаписатьНачалоЭлемента("PackageId");
	Чтение.ЗаписатьТекст(ОтветAutoSendRecieve.ИдентификаторПакета);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("PackageImageId");
	Чтение.ЗаписатьТекст(ОтветAutoSendRecieve.ИдентификаторДанныхПакета);
	Чтение.ЗаписатьКонецЭлемента();
	
	Если ЗначениеЗаполнено(ДанныеПодписиСтрокой) Тогда
		Чтение.ЗаписатьНачалоЭлемента("Signature");
		Чтение.ЗаписатьТекст(ДанныеПодписиСтрокой);
		Чтение.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	Чтение.ЗаписатьНачалоЭлемента("Success");
	Чтение.ЗаписатьТекст("true");
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("Key");
	Чтение.ЗаписатьТекст(ОтветAutoSendRecieve.Ключ);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("CryptoMarker");
	Чтение.ЗаписатьТекст(МаркерРасшифрованный);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьКонецЭлемента();
	
	
	Возврат Чтение.Закрыть();
	
	
	
	//
	//
	//Пакет = НоваяФабрикаXDTO().Пакеты.Получить("http://api-invoice.taxcom.ru/AutoSendRecieve");
	//ТипКриптооперации = Пакет.КорневыеСвойства.Получить("ReglamentCommandResults").Тип;
	//ОбъектКриптооперации = НоваяФабрикаXDTO().Создать(ТипКриптооперации);
	//
	//ТипРезультата = Пакет.Получить("SignSessionedResults");
	//ОбъектРезультата = НоваяФабрикаXDTO().Создать(ТипРезультата);	
	//ОбъектРезультата.Results = НоваяФабрикаXDTO().Создать(Пакет.Получить("ArrayOfSignResult"));
	//
	//ТипРезультатаПодписания = Пакет.Получить("SignResultV2");
	//РезультатПодписания = НоваяФабрикаXDTO().Создать(ТипРезультатаПодписания);
	//РезультатПодписания.PackageId = ОтветAutoSendRecieve.ИдентификаторПакета;
	//РезультатПодписания.PackageImageId = ОтветAutoSendRecieve.ИдентификаторДанныхПакета;
	//РезультатПодписания.Signature = ДанныеПодписиСтрокой;
	//РезультатПодписания.Success = Истина;
	//
	//ОбъектРезультата.Results.SignResult.Добавить(РезультатПодписания);
	//ОбъектРезультата.Key = ОтветAutoSendRecieve.Ключ;
	//
	//ОбъектКриптооперации.Results = НоваяФабрикаXDTO().Создать(Пакет.Получить("ArrayOfReglamentCommandResultBase"));
	//ОбъектКриптооперации.Results.ReglamentCommandResultBase.Добавить(ОбъектРезультата);
	//ОбъектКриптооперации.CryptoMarker = МаркерРасшифрованный;
	//
	////ЗаписьXML = Новый ЗаписьXML;
	////ЗаписьXML.ЗаписатьОбъявлениеXML();
	////НоваяФабрикаXDTO().ЗаписатьXML(ЗаписьXML, ОбъектКриптооперации);
	////ТекстКриптооперации = ЗаписьXML.Закрыть();
	//
	//ТекстКриптооперации = СтрокаXMLБезПространстваИмен(
	//	ОбъектКриптооперации, "http://api-invoice.taxcom.ru/AutoSendRecieve", "ReglamentCommandResults");
	////ТекстКриптооперации = СтрЗаменить(ТекстКриптооперации,"	", "    ");
	//Возврат ТекстКриптооперации;
	//
КонецФункции

Процедура ОбработатьПолученныеНаСервере(МассивВходящихТранзакций = Неопределено,ПолученныеСтраница)
	
	//ТаблицаПолученных = РеквизитФормыВЗначение("ПолученныеСтраница");
	
	Если МассивВходящихТранзакций <> Неопределено Тогда
		НомерСтроки = 1;
		Для Каждого Транзакция Из МассивВходящихТранзакций Цикл
			НоваяСтрока = ПолученныеСтраница.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Транзакция);
			НоваяСтрока.Документ=Документы.Приемка_ХамелеонЦРПТ.НайтиПоРеквизиту("ДокументОтгрузки",Транзакция.ИдентификаторДокументооборота);
			НоваяСтрока.НомерСтроки = НомерСтроки;
			//НоваяСтрока.ВидДокумента = ПредставлениеДокумента(Транзакция.ВидДокумента, НоваяСтрока.ФункцияДокумента);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	МассивВходящихТранзакций.очистить();
//	ОбработаннаяТаблицаПолученных = ОсновнойМодуль().ОбработатьПолученные(ТаблицаПолученных);
//	Для Каждого ТекущаяСтрока Из ОбработаннаяТаблицаПолученных Цикл
//		Найдено = ТаблицаПолученных.НайтиСтроки(Новый Структура("ИдентификаторДокументооборота", ТекущаяСтрока.ИдентификаторДокументооборота));
//		ЗаполнитьЗначенияСвойств(Найдено[0], ТекущаяСтрока);
//	КонецЦикла;
//	
	//ЗначениеВРеквизитФормы(ТаблицаПолученных, "ПолученныеСтраница");
	
КонецПроцедуры

Функция ПодключитьсяКЭДОТХЦ(Thumbprint_1,Идентификатор,HTTPСервисЗапрос,СерийныйНомер="") Экспорт
	
	CAPICOM_CURRENT_USER_STORE=2;
	CAPICOM_MY_STORE="My";
	CAPICOM_OTHER_STORE="AddressBook";
	CAPICOM_STORE_OPEN_READ_ONLY=0;
	CAPICOM_CERTIFICATE_FIND_TIME_VALID=9;
	CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED = 2;

	
	Попытка
		// формируем список наших сертификатов
		ТекЭлемент=Неопределено;
		СписокНашихСертификатов=Новый СписокЗначений;
		
		
		Store=Новый COMОбъект("CAPICOM.Store");
		Store.Open(CAPICOM_CURRENT_USER_STORE,CAPICOM_MY_STORE,CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);
		Certs=Store.Certificates;
		ValidCerts=Certs;//.Find(CAPICOM_CERTIFICATE_FIND_TIME_VALID,ТекДата,-1);
		Для CertNum=1 По ValidCerts.Count Цикл
			
			CurCert=ValidCerts.Item(CertNum);
			Thumbprint_2=CurCert.Thumbprint;
			СерийныйНомер=CurCert.SerialNumber;
			Если Thumbprint_2=Thumbprint_1.Thumbprint_1 Тогда
				ВыбСертификат=CurCert;
				Прервать;
			Конецесли;
		КонецЦикла;
	Исключение
		ТекстОшибки=СтрЗаменить(ОписаниеОшибки(),"'","");
		Сообщить(NStr("ru = 'Ошибка при работе с хранилищем сертификатов! (Возможно, не установлен модуль CAPICOM)"+Символы.ПС+"Описание ошибки: "+ТекстОшибки+"'", "ru"));
		Возврат Неопределено;
	КонецПопытки;
	
	
	ПараметрыЗапроса="API/CertificateLogin";
	//Если ЗначениеЗаполнено(Идентификатор) тогда
	//	ПараметрыЗапроса=ПараметрыЗапроса+"?edxClientId=" + Идентификатор;
	//КонецЕсли;
	
	HTTPЗапрос=Новый HTTPЗапрос(ПараметрыЗапроса);
	
	СтрокаСертификата=ВЫбСертификат.Export();
	ДанныеСертификата = Base64Значение(СтрокаСертификата);
	
	HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ДанныеСертификата);
	HTTPЗапрос.Заголовки.Вставить("Integrator-Id", "Kartoteka_9AFE5408-C930-47FA-9CE4-FAE615EED09E");
	//HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/pkcs7-mime;charset=UTF-8");
	//HTTPЗапрос.Заголовки.Вставить("ContentLength", СтрДлина(ДанныеСертификата.Размер()));
	//HTTPЗапрос.Заголовки.Вставить("ContentLength", СтрДлина(ДанныеСертификата.Размер()));
	Ответ = HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	
	
	Если Ответ.КодСостояния<>200 Тогда
		Сообщить(Ответ.ПолучитьтелоКакСтроку());
		Возврат Неопределено;
	Иначе
		КриптоМаркер = Ответ.ПолучитьТелоКакДвоичныеДанные();
		
	КонецЕсли;

	ЗашифрованныеДанныеСтрокой = base64Строка(КриптоМаркер);
		//Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(ДвоичнДанные,КодировкаТекста.OEM);

//	ЗашифрованныеДанныеСтрокой=СтрЗаменить(ЗашифрованныеДанныеСтрокой,Символы.ПС,"");
//	ЗашифрованныеДанныеСтрокой=СтрЗаменить(ЗашифрованныеДанныеСтрокой,Символы.ВК,"");
	
	//КомпД=НовыйEncryptedData
	
	Компонента = Новый COMОбъект("CryptoAX.Encryptor");
 	ДвоичнД=Компонента.MrDecrypt(ЗашифрованныеДанныеСтрокой);
	
//	Попытка
		
		//EncryptedData=Новый COMОбъект("CAPICOM.EnvelopedData");
//		EncryptedData=Новый COMОбъект("CAPICOM.EnvelopedData");
		

//	Исключение
//		Сообщить("Необходимо запустить 1с с параметром x32 bit");
//		Возврат неопределено;
//	КонецПопытки;
//	EncryptedData.Decrypt(ЗашифрованныеДанныеСтрокой);
	
//	ДвоичнД=EncryptedData.Content;
	
	
	ДвоичнДанные=base64Значение(ДвоичнД);
	//ДвоичнДанные=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ДвоичнД,КодировкаТекста.UTF16,Ложь);
	
	//Возврат ПолучитьСтрокуИзДвоичныхДанных(ДвоичнДанные,КодировкаТекста.OEM);
	Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(ДвоичнДанные,КодировкаТекста.OEM);
Конецфункции

Процедура ЗагрузитьПолученные(HTTPСервисЗапрос_ТХЦ,Маркер,ПолученныеСтраница,Пользователь)
	
	МассивДляЗагрузки = Новый Массив;
	ЕстьОшибки = Ложь;
	
	Для Каждого ТекущаяСтрока Из ПолученныеСтраница Цикл
		Если ЗначениеЗаполнено(ТекущаяСтрока.Документ) Тогда
		//	Если ПроверкаСтатуса(ТекущаяСтрока.Статус,ТекущаяСтрока.Документ)=истина Тогда
		//		Продолжить;
		//	Конецесли;
			
		//	ПоменятьСтатусДокументаИВСЕ(ТекущаяСтрока.Статус,ТекущаяСтрока.Документ);
			
			
			Продолжить;
		Конецесли;
		
		ДанныеДокументооборота =Неопределено;
			Попытка
				ДанныеДокументооборота = ДанныеДокументооборота(ТекущаяСтрока.ИдентификаторДокументооборота,HTTPСервисЗапрос_ТХЦ,Маркер );
			Исключение
				//ЕстьОшибки = Истина;
				Продолжить;
			КонецПопытки;
			Если ДанныеДокументооборота =Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			
			АдресДанныхДокументооборота = ПоместитьВоВременноеХранилище(ДанныеДокументооборота);
			
			СтруктураПараметр = Новый Структура("АдресДанныхДокументооборота, ИдентификаторДокументооборота", АдресДанныхДокументооборота, ТекущаяСтрока.ИдентификаторДокументооборота);
			
			СообщениеОбОшибке = "";
			РеквизитыЭлектронногоДокумента = РеквизитыЭлектронногоДокументаИзДокументооборота(СтруктураПараметр, СообщениеОбОшибке);
						
			Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
				
				//Сообщить(СообщениеОбОшибке);
				//СтрокаКэша.Ошибка = СообщениеОбОшибке;
				ЕстьОшибки = Истина;
				Продолжить;
				
			ИначеЕсли РеквизитыЭлектронногоДокумента = Неопределено Тогда
				
				СообщениеОбОшибке = ПодставитьПараметрыВСтроку(НСтр("ru = 'Документ %1 не может быть загружен'"), ""
					//РеквизитыЭлектронногоДокумента.ИдентификаторДокументооборота
					);
				//Сообщить(СообщениеОбОшибке);	
				//Ошибка = СообщениеОбОшибке;
				ЕстьОшибки = Истина;
				Продолжить;
				
			КонецЕсли; 
			
			//РеквизитыЭлектронногоДокумента = РеквизитыЭлектронногоДокумента;

		//КонецЕсли; 
		
		МассивДляЗагрузки.Вставить(0, Новый Структура("Статус,РеквизитыЭлектронногоДокумента",ТекущаяСтрока.Статус,РеквизитыЭлектронногоДокумента));
	КонецЦикла;
	
	//Если МассивДляЗагрузки.Количество() = 0 Тогда
	//	Если НЕ ЕстьОшибки Тогда
	//		ТекстСообщения = НСтр("ru = 'Не выбраны документы для загрузки'");
	//		СообщитьПользователю(ТекстСообщения);
	//	КонецЕсли;	
	//	Возврат;
	//КонецЕсли; 
	
	НоменклатураДляСопоставления = Новый Массив;
	//ПроверитьСопоставлениеНоменклатуры(МассивДляЗагрузки, НоменклатураДляСопоставления);
	
	
	МассивУп=Новый Массив;
	МассивКМ=Новый Массив;

	
Текст1="";
	
	ЗагрузитьПолученныеНаСервере(МассивДляЗагрузки,МассивУп,МассивКМ,Пользователь);
	//ДокумПриемки=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусДокумента_Приемка_УПД(NNN_1,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа,,,,МассивКМ,ЗагрузатьНаименованиеПриПриемке);	
	
	//ОбработатьПолученныеНаСервере();

	
	Для Каждого ТекущаяСтрока Из МассивУп Цикл
		Если ЗначениеЗаполнено(ТекущаяСтрока.Документ) Тогда
			Если ПроверкаСтатуса(Статус(ТекущаяСтрока.Статус),ТекущаяСтрока.Документ)=истина Тогда
				Продолжить;
			Конецесли;
			
			ПоменятьСтатусДокументаИВСЕ(Статус(ТекущаяСтрока.Статус),ТекущаяСтрока.Документ);
			
			
			Продолжить;
		Конецесли;
		
	Конеццикла;
	
	//
	Для Каждого ТекущаяСтрока Из ПолученныеСтраница Цикл
		Если ЗначениеЗаполнено(ТекущаяСтрока.Документ) Тогда
			Если ПроверкаСтатуса(Статус(ТекущаяСтрока.Статус),ТекущаяСтрока.Документ)=истина Тогда
				Продолжить;
			Конецесли;
			
			ПоменятьСтатусДокументаИВСЕ(Статус(ТекущаяСтрока.Статус),ТекущаяСтрока.Документ);
			
			
			Продолжить;
		Конецесли;
		
	КонецЦикла;
	//
	//Элементы.Приемкасписок.Обновить();
КонецПроцедуры



Процедура ПолучитьИнформациюОбУПДПриемка(id,ЗаписыватьДанныеПриОтправкеЗаказа,Пользователь,HTTPСервисЗапрос,СерийныйНомер,СРегистра,Thumbprint_1)
	
	Попытка
		
		HTTPЗапрос=Новый HTTPЗапрос("edo-api/incoming-documents/"+id);
	
						
						
					//	HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
						HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
						HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
						HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
						HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
						HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ +"/documents/incoming/list");
						
						
						
						HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");
						
						//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
						HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
						HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
						HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
						
						
						
					//	Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
						Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
						"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


						HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
						
						///Константин           
						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
						Если Ответ.КодСостояния<>200 Тогда
							Возврат;
						КонецЕсли;
						Текст1=Ответ.ПолучитьТелоКакСтроку();
						
								
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						
						NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						
		//Статус=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВернутьСтатусДокументаУПД(NNN_1.status);
							ЗагрузитьПриемкуЭДОЛайт=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагрузитьПриемкуЭДОЛайт();
						
		Если ЗагрузитьПриемкуЭДОЛайт=0 Тогда
			
			
			HTTPЗапрос=Новый HTTPЗапрос("edo-api/incoming-documents/"+id+"/content");
	
						МассивУппешно=Новый Массив;
						МассивУппешно.Очистить();
						
					//	HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
						HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
						HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
						HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
						HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
						HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ +"/documents/incoming/list");
						
						
						
						HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");
						
						//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
						HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
						HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
						HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
						
						
						
					//	Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
						Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
						"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


						HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
						
						///Константин           
						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
						Если Ответ.КодСостояния<>200 Тогда
							Возврат;
						КонецЕсли;
						Текст1=Ответ.ПолучитьТелоКакДвоичныеДанные();
						
						
						СообщениеОбОшибке="";
						РеквизитыЭлектр=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.РеквизитыЭлектронногоДокумента(Текст1,СообщениеОбОшибке);
							Если РеквизитыЭлектр.Загружать=Ложь Тогда
								Возврат;
							КонецЕсли;
						Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
							Сообщить("Не удалось загрузить файл по документу "+Строка(id)+" Ошибка: "+СообщениеОбОшибке);
							ОшибкаЗагрузки=Истина;
							Возврат;
						КонецЕсли;
						//РеквизитыЭлектр.Вставить("ТекстФайла",);
						
						РеквизитыЭлектр.ВставитЬ("ИдентификаторДокументооборота",id);
						МассивУп=Новый Массив;
						
						АдресРеквизитов=Новый Структура;
						//РеквизитыЭлектронногоДокумента.Вставить("ИдентификаторДокументооборота", ДанныеДокументооборота.ИдентификаторДокументооборота);
						АдресРеквизитов.Вставить("Статус",ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВернутьСтатусДокументаУПД(NNN_1.status));
						МассивУппешно.Добавить(ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ЗагрузкаПриемкиИзXML(РеквизитыЭлектр,МассивУп,ЗаписыватьДанныеПриОтправкеЗаказа,Пользователь,АдресРеквизитов,ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОЛайт"),ОшибкаЗагрузки,Истина));
						
						
						
						
						
						//МассивУппешно=Новый Массив;
						//МассивУппешно.Очистить();
						//АдресРеквизитов.Вставить("Статус","");
						//МассивУппешно.Добавить(ЗагрузкаXML_ХамелеонЦРПТ.ЗагрузкаПриемкиИзXML(РеквизитыЭлектр,МассивУп,ЗаписыватьДанныеПриОтправкеЗаказа,Пользователь,АдресРеквизитов,Справочники.ЭДО_ХамелеонЦРПТ.ЭДОФайл,ОшибкаЗагрузки))
						
									
			
			
		Иначе
			
						МассивУп=Новый Массив;
						
						МассивКМ=Новый Массив;
						
						ДокумПриемки=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусДокумента_Приемка_УПД(NNN_1,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа,,,,МассивКМ,ЛОжь);	
						Если МассивКМ.Количество()>0 Тогда
							
							СписокОбнТовара=Новый Массив;
							
							
							ЗаполненаТабличнаяЧастьПриемки=Ложь;
							дкоументФарм=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьИнформациюНаСервереДЛяПриемки(Thumbprint_1,МассивКМ,СписокОбнТовара,ЗаполненаТабличнаяЧастьПриемки);
									
									
							
									КонецЕсли;
							КонецЕсли;
						Исключение
							
							сообщить("Не удалось подлучить приемку");
    Инфо = ИнформацияОбОшибке();
    Сообщить("Описание='" + Инфо.Описание + "'");
    Сообщить("ИмяМодуля='" + Инфо.ИмяМодуля + "'");
    Сообщить("НомерСтроки=" + Инфо.НомерСтроки);
    Сообщить("ИсходнаяСтрока='" + Инфо.ИсходнаяСтрока + "'");
							
							
								КонецПопытки;
							
	
	
КонецПроцедуры


Функция ПодключитьсяКЭДОСб_SDK(Thumbprint_1,Идентификатор,HTTPСервисЗапрос,СерийныйНомер="",ДанныеИнтеграции,ОбъектПлагин,СайтДляПодключенияПоТакскму) Экспорт
	
	Отказ=ложь;
	РезультатExtSdk="";
	ОбъектПлагин=Неопределено;
	ДанныеИнтеграции=Новый Структура;
	Результат=ВключитьSDK(Отказ,РезультатExtSdk,ОбъектПлагин,ДанныеИнтеграции);
	Если Отказ=Истина Тогда
					Если Результат.code = 762 Тогда
						сбисОткрытьПредупреждение = Истина;
			ПараметрыСообщения = Новый Структура;
			ПараметрыСообщения.Вставить("АдресСсылка", "https://sbis.ru/help/integration/sdk/");
			ПараметрыСообщения.Вставить("ТекстСсылка", "Скачать СБИС SDK");
			ПараметрыСообщения.Вставить("Текст",	"Не зарегистрирована новая версия ActiveX компоненты СБИС SDK."+Символы.ПС+
													//"Необходима версия компоненты не ниже "+Символы.ПС+
													//"Текущая версия "+ВерсияSDK+Символы.ПС+
													"Для корректной работы установите компоненту и перезапустите 1С.");
					ИначеЕсли Результат.code = 767 Тогда
						сбисОткрытьПредупреждение = Истина;
						
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("АдресСсылка", "https://sbis.ru/help/integration/sdk/");
		ПараметрыСообщения.Вставить("ТекстСсылка", "Скачать СБИС SDK");
		ПараметрыСообщения.Вставить("Текст",	"Не зарегистрирована ActiveX компонента СБИС SDK."+Символы.ПС+
												"Для корректной работы необходимо установить компоненту и перезапустить 1С.");
					ИначеЕсли Результат.code = 775 Тогда
						сбисОткрытьПредупреждение = Истина;
						
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("АдресСсылка", "https://sbis.ru/help/integration/sdk/");
		ПараметрыСообщения.Вставить("ТекстСсылка", "Скачать СБИС SDK");
		ПараметрыСообщения.Вставить("Текст",	"Не зарегистрирована ActiveX компонента СБИС SDK."+Символы.ПС+
												"Для корректной работы необходимо установить компоненту и перезапустить 1С.");
					КонецЕсли;
					Если сбисОткрытьПредупреждение Тогда
						Сообщить(ПараметрыСообщения.Текст);
						//ФормаПредупреждение=ОткрытьФорму("Справочник.ЭДО_ХамелеонЦРПТ.Форма.ФормаПредупреждения");
						//ФормаПредупреждение.Показать(ПараметрыСообщения);
					//Иначе
					//	Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Результат, ДопПараметры);			
					КонецЕсли;
					//Возврат Результат.message + "(" + Результат.details + ")";

			Возврат Неопределено;
			
		КонецЕсли;
		
	//МестныйКэш	= Кэш;
	сбисПараметрыВызова = Новый Структура("Отпечаток", Thumbprint_1.Thumbprint_1);
	
	ДопПараметры = Новый Структура("СообщатьПриОшибке, ВернутьОшибку, МетодВалидации, ПараметрВалидации", Ложь, Истина, "ConfirmAuthByCertificate", сбисПараметрыВызова);
	
	СтрокаВерсии = "ХамелеонЦРПТ" ; 	
	ConnectionInfo = ОбъектПлагин.CreateSimpleObject();
	ConnectionInfo.Write("АдресСервера", "https://"+СайтДляПодключенияПоТакскму+"/");
	ConnectionInfo.Write("ИнформацияОПриложении",	СтрокаВерсии);
	//Если Кэш.Парам.ТипПрокси = "Вручную" Тогда
	//	ConnectionInfo.Write("ОпределятьПроксиАвтоматически", "Нет");
	//	ConnectionInfo.Write("АдресПроксиСервера", Кэш.Парам.ПроксиСервер+":"+МестныйКэш.Парам.ПроксиПорт);
	//	ConnectionInfo.Write("ЛогинПроксиСервера", Кэш.Парам.ПроксиЛогин);
	//	ConnectionInfo.Write("ПарольПроксиСервера", Кэш.Парам.ПроксиПароль);
		
	//ИначеЕсли Кэш.Парам.ТипПрокси = "Автоматически" Тогда 
		ConnectionInfo.Write("ОпределятьПроксиАвтоматически", "Да");
		
	//ИначеЕсли Кэш.Парам.ТипПрокси = "НеИспользовать" Тогда 
	//	ConnectionInfo.Write("ОпределятьПроксиАвтоматически", "Нет");
//	КонецЕсли;
	//Если ЗначениеЗаполнено(ИдентификаторСессии) Тогда
	//	ConnectionInfo.Write("ИдентификаторСессии", ИдентификаторСессии);	
	//КонецЕсли;
	
	ОбъектПлагин.WriteConnectionInfo(ConnectionInfo);
	
	ПараметрыРезультат	= Новый Структура(	"Метод,						ДополнительныеПараметры", 
											"AuthenticateByCertificate",ДопПараметры);
	ПараметрыРезультат.Вставить("Результат", ОбъектПлагин.AuthenticateByCertificate(СериализоватьСтруктуруВObject(сбисПараметрыВызова,ОбъектПлагин)));
	
//BEEBBB3C35609A19100CD51D24536A34CB955385	
	Возврат РезультатАвторизацииSDK(ПараметрыРезультат, Отказ,ОбъектПлагин);
	
Конецфункции

Функция РезультатАвторизацииSDK(ПараметрыРезультата, Отказ,ОбъектПлагин) Экспорт
	РезультатАвторизации = ПараметрыРезультата.Результат;
	Если РезультатАвторизации = 0 Тогда
		Отказ = Истина;
		РезультатАвторизации = ПолучитьСтруктуруОшибки(ОбъектПлагин);
		Сообщить(РезультатАвторизации.message+": "+РезультатАвторизации.details);
	КонецЕсли;
	Если Не Отказ Тогда	
		Возврат ПолучитьИдентификаторСессии(ОбъектПлагин);
	КонецЕсли;

	Возврат "";
КонецФункции


Функция ПолучитьИдентификаторСессии(Кэш) Экспорт
	// получает идентификатор текущей сессии	
	ConnectionInfo = Кэш.ReadConnectionInfo();
	ИдентификаторСессии = ConnectionInfo.Read("ИдентификаторСессии");
	Возврат ИдентификаторСессии;
КонецФункции

Функция ПолучитьСтруктуруОшибки(Error) Экспорт
	Перем dump, methodName;
	Попытка
		Если Лев(Error,1) = "{" Тогда
			Ошибка = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Error);
			Если Ошибка.Свойство("message") и Ошибка.Свойство("detail") Тогда
				ТекстОшибки = Ошибка.message;
				ОписаниеРасширенное = Ошибка.detail;
				КодОшибки = Ошибка.code;
				Ошибка.Свойство("dump", dump);
				Ошибка.Свойство("methodName", methodName);
			Иначе
				ТекстОшибки = Ошибка.error.message;
				ОписаниеРасширенное = Ошибка.error.details;
				КодОшибки = Ошибка.error.code;
				Ошибка.error.Свойство("dump", dump);
				Ошибка.error.Свойство("methodName", methodName);
			КонецЕсли;
		ИначеЕсли Лев(Error,35) = "callBLObject(): Метод бизнес логики" и Найти(Error,"вернул ошибку")>0 Тогда
			ErrorJson = Сред(Error, Найти(Error,"{"));
			ErrorJson = Лев(ErrorJson, СтрДлина(ErrorJson)-1);
			Ошибка = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ErrorJson);
			Попытка
				ТекстОшибки = Ошибка.message;
				ОписаниеРасширенное = Ошибка.details;
				КодОшибки = Ошибка.code;
				Ошибка.Свойство("dump", dump);
			Исключение
				ТекстОшибки = Error;
				ОписаниеРасширенное = Error;
				КодОшибки = 100;
			КонецПопытки;
		ИначеЕсли Найти(Error,"{""jsonrpc"":") >0 Тогда
			ErrorJson = Сред(Error, Найти(Error,"{""jsonrpc"":"));
			Пока Прав(ErrorJson,1) <> "}" Цикл
				ErrorJson = Лев(ErrorJson, СтрДлина(ErrorJson)-1);		
			КонецЦикла;
			Ошибка = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ErrorJson);
			Попытка
				ТекстОшибки = Ошибка.message;
				ОписаниеРасширенное = Ошибка.details; 
				КодОшибки = Ошибка.code;
				Ошибка.Свойство("dump", dump);
			Исключение
				Попытка
					ТекстОшибки = Ошибка.Error.message;
					ОписаниеРасширенное = Ошибка.Error.details; 
					КодОшибки = Ошибка.Error.code;
					Ошибка.Error.Свойство("dump", dump);
				Исключение
					ТекстОшибки = Error;
					ОписаниеРасширенное = Error;
					КодОшибки = 100;
				КонецПопытки;
			КонецПопытки;
		Иначе
			ТекстОшибки = Error;
			ОписаниеРасширенное = Error;
			КодОшибки = 100;
		КонецЕсли;
	Исключение
		ТекстОшибки = Error;
		ОписаниеРасширенное = Error;
		КодОшибки = 100;
	КонецПопытки;

	Ошибка = Новый Структура("message,details,code",ТекстОшибки,ОписаниеРасширенное,КодОшибки);
	Если ЗначениеЗаполнено(dump) Тогда
		Ошибка.Вставить("dump", dump);
	КонецЕсли;
	Если ЗначениеЗаполнено(methodName) Тогда
		Ошибка.Вставить("methodName", methodName);
	КонецЕсли;
	Возврат Ошибка;
КонецФункции


Функция СериализоватьСтруктуруВObject(Структура,Кэш) Экспорт
	// сериализует  com-объект в структуру	
	Object = Кэш.CreateSimpleObject();
	Для Каждого Элемент Из Структура Цикл	
		Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			ObjectList = Кэш.CreateSimpleObjectList(); 
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				ObjectList.add(СериализоватьСтруктуруВObject(ЭлементМассива,Кэш));	
			КонецЦикла;
			Object.WriteObjectList(Элемент.Ключ, ObjectList);	
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			Object.WriteObject(Элемент.Ключ, СериализоватьСтруктуруВObject(Элемент.Значение,Кэш));
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			Object.Write(Элемент.Ключ,формат(Элемент.Значение, "ДФ='дд.ММ.гггг ЧЧ.мм.сс'"));
		Иначе
			Object.Write(Элемент.Ключ,Элемент.Значение);
		КонецЕсли;
	КонецЦикла;	
	Возврат Object;
КонецФункции

Функция ВключитьSDK(Отказ,РезультатExtSdk,ОбъектПлагин,ДанныеИнтеграции )
	ОжиданиеОтвета		= 10;//На время включения, ответ от плагина должен приходить быстро
	
	
		Попытка
			ОбъектПлагин = Новый COMОбъект("SBIS.Docflow");
			
		Исключение
			Отказ = Истина;
			Возврат Новый Структура("code, message, details", 767, "Ошибка при создании COM-объекта", "Не зарегистрирована компонента Tensor.SbisPluginClientCOM.");
		КонецПопытки;
		
	
	
КонецФункции

Функция ПодключитьсяКЭДОСб_Новый(Thumbprint_1,Идентификатор,HTTPСервисЗапрос,СерийныйНомер="",ДанныеИнтеграции,ОбъектПлагин) Экспорт
	
	Отказ=ложь;
	РезультатExtSdk="";
	ОбъектПлагин=Неопределено;
	ДанныеИнтеграции=Новый Структура;
	Результат=ВключитьExtSDK(Отказ,РезультатExtSdk,ОбъектПлагин,ДанныеИнтеграции );
	Если Отказ=Истина Тогда
					Если Результат.code = 762 Тогда
						сбисОткрытьПредупреждение = Истина;
						ТекстПредупреждение = Результат.message + " (" + Результат.details + ")" + Символы.ПС + "Переустановите плагин в режиме полной установки и перезапустите 1С для дальнейшей работы.";
						
						ПараметрыСообщения = Новый Структура;
						ПараметрыСообщения.Вставить("АдресСсылка",	"http://update.sbis.ru/SbisPlugin/master/SbisPlugin.exe");
						ПараметрыСообщения.Вставить("ТекстСсылка",	"Скачать последнюю версию СБИС плагина");
						ПараметрыСообщения.Вставить("Текст",		ТекстПредупреждение);
					ИначеЕсли Результат.code = 767 Тогда
						сбисОткрытьПредупреждение = Истина;
						
						ПараметрыСообщения = Новый Структура;
						ПараметрыСообщения.Вставить("АдресСсылка",	"https://sbis.ru/help/integration/1C_set/modul/typical_errors/activex_component");
						ПараметрыСообщения.Вставить("ТекстСсылка",	"Решение проблемы регистрации Tensor.SbisPluginClientCOM");
						ПараметрыСообщения.Вставить("Текст",		Результат.message + " (" + Результат.details + ")");
					ИначеЕсли Результат.code = 775 Тогда
						сбисОткрытьПредупреждение = Истина;
						
						ПараметрыСообщения = Новый Структура("АдресСсылка");
						ПараметрыСообщения.Вставить("ТекстСсылка",	"Решение проблемы запуска СБИС{0} плагина");
						ПараметрыСообщения.Вставить("Текст",		Результат.message + " (" + Результат.details + ")");
						//Если Кэш.СБИС.ПараметрыИнтеграции.ТипПлагина = "SBIS3" Тогда
							ПараметрыСообщения.ТекстСсылка = СтрЗаменить(ПараметрыСообщения.ТекстСсылка, "{0}", "3");
							ПараметрыСообщения.АдресСсылка = "https://sbis.ru/test?check=ExtSDK";
						//Иначе
						//	ПараметрыСообщения.ТекстСсылка = СтрЗаменить(ПараметрыСообщения.ТекстСсылка, "{0}", "");
						//	ПараметрыСообщения.АдресСсылка = "https://sbis.ru/help/integration/1C_set/modul/typical_errors/plugin_answer/";
						//КонецЕсли;
					КонецЕсли;
					Если сбисОткрытьПредупреждение Тогда
						//ФормаПредупреждение=ОткрытьФорму("Справочник.ЭДО_ХамелеонЦРПТ.Форма.ФормаПредупреждения");
						//ФормаПредупреждение.Показать(ПараметрыСообщения);
						Сообщить(ПараметрыСообщения.Текст);
						//Иначе
					//	Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Результат, ДопПараметры);			
					КонецЕсли;
					//Возврат Результат.message + "(" + Результат.details + ")";

			Возврат Неопределено;
			
		КонецЕсли;
		
	ДопПараметры = Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ПоСертификату", Ложь, Истина, Истина);
	Отказ=ложь;
	РезультатЗапроса = СформироватьНастройкиПодключения(,ДопПараметры,Отказ,Thumbprint_1,ДанныеИнтеграции,ОбъектПлагин);	
	
	ПараметрыРезультат = Новый Структура(	"Метод,							Параметры,							ДополнительныеПараметры", 
											"AuthenticateByCertificate2",	Новый Структура("id", Thumbprint_1.Thumbprint_1),	ДопПараметры);
	ПараметрыРезультат.Вставить("Результат", ОтправитьИОбработатьКоманду(ПараметрыРезультат.Метод, ПараметрыРезультат.Параметры, ДопПараметры, Отказ,ДанныеИнтеграции,ОбъектПлагин));
	Возврат РезультатАвторизации(ПараметрыРезультат, Отказ);	
	
	
	Возврат Неопределено;
	
	
	CAPICOM_CURRENT_USER_STORE=2;
	CAPICOM_MY_STORE="My";
	CAPICOM_OTHER_STORE="AddressBook";
	CAPICOM_STORE_OPEN_READ_ONLY=0;
	CAPICOM_CERTIFICATE_FIND_TIME_VALID=9;
	CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED = 2;

	
	Попытка
		// формируем список наших сертификатов
		ТекЭлемент=Неопределено;
		СписокНашихСертификатов=Новый СписокЗначений;
		
		
		Store=Новый COMОбъект("CAPICOM.Store");
		Store.Open(CAPICOM_CURRENT_USER_STORE,CAPICOM_MY_STORE,CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);
		Certs=Store.Certificates;
		ValidCerts=Certs;//.Find(CAPICOM_CERTIFICATE_FIND_TIME_VALID,ТекДата,-1);
		Для CertNum=1 По ValidCerts.Count Цикл
			
			CurCert=ValidCerts.Item(CertNum);
			Thumbprint_2=CurCert.Thumbprint;
			СерийныйНомер=CurCert.SerialNumber;
			Если Thumbprint_2=Thumbprint_1.Thumbprint_1 Тогда
				ВыбСертификат=CurCert;
				Прервать;
			Конецесли;
		КонецЦикла;
	Исключение
		ТекстОшибки=СтрЗаменить(ОписаниеОшибки(),"'","");
		Сообщить(NStr("ru = 'Ошибка при работе с хранилищем сертификатов! (Возможно, не установлен модуль CAPICOM)"+Символы.ПС+"Описание ошибки: "+ТекстОшибки+"'", "ru"));
		Возврат Неопределено;
	КонецПопытки;
	
	
	ПараметрыЗапроса="auth/service/";
	
	
	HTTPЗапрос=Новый HTTPЗапрос(ПараметрыЗапроса);
	
	СтрокаСертификата=ВЫбСертификат.Export();
	//ДанныеСертификата = Base64Значение(СтрокаСертификата);
	
	ТелоПодключить=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.JSONПоСертификату(СтрокаСертификата,Thumbprint_1);

	
	
			#Если ВебКлиент Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоПодключить,КодировкаТекста.UTF8);
			#Иначе
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоПодключить,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
		
	Ответ = HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	
	
	Если Ответ.КодСостояния<>200 Тогда
		Возврат Неопределено;
	Иначе
		КриптоМаркер = Ответ.ПолучитьТелоКакСтроку();
		
	КонецЕсли;
	ЗашифрованныеДанныеСтрокой=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ЧтениеМаркера(КриптоМаркер);
	
	Возврат ЗашифрованныеДанныеСтрокой;
	
	//ЗашифрованныеДанныеСтрокой = base64Строка(КриптоМаркер);
//	ЗашифрованныеДанныеСтрокой=СтрЗаменить(ЗашифрованныеДанныеСтрокой,Символы.ПС,"");
//	ЗашифрованныеДанныеСтрокой=СтрЗаменить(ЗашифрованныеДанныеСтрокой,Символы.ВК,"");
	
	//КомпД=НовыйEncryptedData
	EncryptedData=Новый COMОбъект("CAPICOM.EnvelopedData");
	//EncryptedData
	EncryptedData.Recipients.Add(ВыбСертификат);

	EncryptedData.Decrypt(ЗашифрованныеДанныеСтрокой);
	
	
	
	ДвоичнД=EncryptedData.Content;
	
	
	//ДвоичнДанные=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ДвоичнД,КодировкаТекста.UTF16,Ложь);
	ДвоичнДанные=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ДвоичнД,КодировкаТекста.UTF16,Ложь);
	
	//Возврат ПолучитьСтрокуИзДвоичныхДанных(ДвоичнДанные,КодировкаТекста.OEM);
	Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(ДвоичнДанные,КодировкаТекста.OEM);
Конецфункции

Функция РезультатАвторизации( ПараметрыРезультата, Отказ) Экспорт
	РезультатАвторизации = ПараметрыРезультата.Результат;
	Если Не Отказ Тогда
		Возврат РезультатАвторизации;
	КонецЕсли;
	Если РезультатАвторизации.code = 303 Тогда
		//Если код ошибки - 303, значит ожидается подтверждение аутентификации. Разбираем строку в details ошибки для выборки данных формирования СМС и последующей авторизации.
		addInfo = Новый Структура;
		addInfo.Вставить("Идентификатор",		РезультатАвторизации.dump.data.addinfo.ResourceID);
		addInfo.Вставить("ИдентификаторСессии",	РезультатАвторизации.dump.data.addinfo.SessionID);
		addInfo.Вставить("МетодВалидации",		РезультатАвторизации.dump.data.addinfo.MethodToValidate);
		addInfo.Вставить("ПоСертификату",		ПараметрыРезультата.ДополнительныеПараметры.ПоСертификату);
		РезультатАвторизации.Вставить("data", Новый Структура("addinfo", addinfo));
	//Плагин сам переключает домен.	
	//ИначеЕсли РезультатАвторизации.code = 759 Тогда
	//	РезультатАвторизации = Кэш.ОбщиеФункции.сбисПереключитьДомен(Кэш, ПараметрыРезультата, Отказ)
	КонецЕсли;
	Возврат РезультатАвторизации;
КонецФункции

Функция ОтправитьИОбработатьКоманду(Метод,ПараметрыМетода=Неопределено,ДопПараметры,Отказ,ДанныеИнтеграции,ОбъектПлагин) Экспорт
	
	ПараметрыВызова = Новый Структура("Метод, Параметры", Метод, ПараметрыМетода);
	РезультатМетода = Плагин_ВыполнитьМетод(ПараметрыВызова, ДопПараметры, Отказ,ДанныеИнтеграции,ОбъектПлагин);
	Если Не Отказ Тогда
		Если	Не	ДопПараметры.Свойство("ПолучитьОтвет")
			Или		ДопПараметры.ПолучитьОтвет Тогда
			РезультатМетода = Плагин_ПолучитьОтветы(ПараметрыВызова, ДопПараметры, Отказ,ОбъектПлагин);
		Иначе//Просто вызываем метод плагина, чтение ответов не требуется. Результат будет только если явно указано и упал вызов метода плагина. Проверка по флагу Отказ
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	//Проверим ответ на наличие ошибок
	Возврат ОбработатьОтвет(ПараметрыВызова, РезультатМетода, ДопПараметры, Отказ);
	
КонецФункции

Функция ОбработатьОтвет(сбисПараметрыВызова, сбисРезультат, сбисДополнительныеПараметры, Отказ)
	
	checkparam		= Неопределено;
	message_type	= Неопределено;
	message_result	= Неопределено;
	
	Если Отказ Тогда
		message_result = сбисРезультат;
	ИначеЕсли Не сбисРезультат.Количество() Тогда
		message_result = "{""methodName"":""" + сбисПараметрыВызова.Метод + """,""message"":""Не получен ответ от плагина"",""detail"": """ + сбисПараметрыВызова.Метод + "() не вернул ответ за разумное время"",""code"":775}";
		Отказ = Истина;
	ИначеЕсли	Не сбисРезультат[0].Свойство("result",	message_result)
			Или	Не сбисРезультат[0].Свойство("type",	message_type)	Тогда
		//Метод не вернул результат. Проверить, должно ли так быть. (Для метода, у которого однозначно должен быть ответ это ошибка)
		Если	сбисДополнительныеПараметры.Свойство("ЕстьРезультат", checkparam)
			И	checkparam Тогда
			message_result = "{""methodName"":""" + сбисПараметрыВызова.Метод + """, ""message"": ""Неизвестная ошибка СБИС Плагина"",""detail"":""Отсутствует результат выполнения метода " + сбисПараметрыВызова.Метод + "()"", ""code"":400}";
			Отказ = Истина;
		Иначе
			message_result = сбисРезультат[0];
		КонецЕсли;
	ИначеЕсли message_type = "Error" Тогда
		//В ответе строка ошибки.
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Ошибка = ПолучитьСтруктуруОшибки(message_result);
		Ошибка = Исключение_1(Ошибка, "ExtSDK.сбисОбработатьОтвет");
		Если Не сбисДополнительныеПараметры.Свойство("СообщатьПриОшибке", checkparam)
			Или	checkparam Тогда
			Сообщить(Ошибка.details);
			
			
			Если Ошибка.code=300 Тогда
				Сообщить("Необходимо изменить тариф в СБИС для отправки в ЭДО");
			КонецЕсли;
			
			
		КонецЕсли;
		Если 	сбисДополнительныеПараметры.Свойство("ВернутьОшибку", checkparam)
			И	checkparam Тогда
			Возврат Ошибка; 
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат	message_result;	
	
КонецФункции

Функция Исключение_1(	сбисОсновнаяОшибка=Неопределено, сбисИмяКоманды="ОбщиеФункции.сбисИсключение", 
						сбисКод=100, сбисСообщение="Неизвестная ошибка системы", сбисДетализация="Неизвестная ошибка системы", 
						сбисДамп=Неопределено) Экспорт
	Перем сбисСтек;
	сбисИсключение = Новый Структура("code, message, details, methodName, dump, base", сбисКод, сбисСообщение, сбисДетализация, сбисИмяКоманды, сбисДамп);
	Если сбисОсновнаяОшибка = Неопределено Тогда
		Возврат сбисИсключение;
	ИначеЕсли Не сбисОсновнаяОшибка.Свойство("base", сбисИсключение.base) Тогда
		сбисИсключение.base = сбисОсновнаяОшибка;
	КонецЕсли;
	//Для неизвестной ошибки поставим параметры от текущей
	Если	сбисИсключение.code = 100
		И	сбисИсключение.message = "Неизвестная ошибка системы" Тогда
		ЗаполнитьЗначенияСвойств(сбисИсключение, сбисОсновнаяОшибка, "code, message");
		Если сбисОсновнаяОшибка.Свойство("details") Тогда
			сбисИсключение.details = сбисОсновнаяОшибка.details;
		КонецЕсли;
	КонецЕсли;
	//Добавим основную ошибку в стек
	Если Не сбисОсновнаяОшибка.Свойство("stack", сбисСтек) Тогда
		сбисСтек = Новый Массив;
		сбисЗаписьВСтек = Новый Структура("methodName, code, message, dump");
		ЗаполнитьЗначенияСвойств(сбисЗаписьВСтек, сбисОсновнаяОшибка);
		сбисСтек.Добавить(сбисЗаписьВСтек);
	КонецЕсли;
	//Добавим обрабатываемую ошибку в стек
	сбисСтек.Вставить(0, Новый Структура("methodName, code, message, dump", сбисИмяКоманды, сбисКод, сбисСообщение, сбисДамп));
	сбисИсключение.Вставить("stack", сбисСтек);
	Если сбисОсновнаяОшибка.Свойство("data") Тогда
		сбисИсключение.Вставить("data", сбисОсновнаяОшибка.data);
	КонецЕсли;
	//пробросим дамп в основную ошибку, чтоб не потерять
	Если сбисДамп = Неопределено Тогда
		сбисОсновнаяОшибка.Свойство("dump", сбисИсключение.dump);
	КонецЕсли;
	Возврат сбисИсключение;
	
КонецФункции

Функция Плагин_ПолучитьОтветы(ПараметрыЗапроса, ДопПараметры, Отказ,ОбъектПлагин) Экспорт
	ВремяНачала		= ТекущаяДата();
	ВремяОжидания	= Неопределено;//
	Если Не ДопПараметры.Свойство("ВремяОжиданияОтвета", ВремяОжидания) Тогда
		ВремяОжидания = 120;
	КонецЕсли;
	
	Результат = Новый Массив;
	Пока ТекущаяДата() - ВремяОжидания < ВремяНачала Или Не ВремяОжидания Цикл
		РезультатПолучения = Плагин_ReadAllObjects(ПараметрыЗапроса, ДопПараметры, Отказ,ОбъектПлагин);
		Если Отказ Тогда
			Возврат РезультатПолучения;
		КонецЕсли;	
		Для Каждого СтрокаРезультат Из РезультатПолучения Цикл
			Результат.Добавить(СтрокаРезультат);
		КонецЦикла;
		Если	Не	ВремяОжидания//Если время ожидания = 0 то делаем один проход и прерываемся
			Или	(	Результат.Количество() И Не РезультатПолучения.Количество()) Тогда// в предыдущий проход получили ответы, а в текущий уже нет - прерываемся
			Прервать;	
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция Плагин_ReadAllObjects(ПараметрыЗапроса, сбисДополнительныеПараметры=Неопределено, Отказ,ОбъектПлагин)
	
	НеобработанныеСобытия=Новый Массив;
	НеобработанныеСобытия.Очистить();
	НеобработанныеОтветы=Новый Структура;
	Результат = Новый Массив;
	Попытка
		SbisPluginClientCOMObjects	= ОбъектПлагин.ReadAllObjects();
		ВсегоСообщений				= SbisPluginClientCOMObjects.GetUpperBound(0);
		ИндексПервогоСообщения		= SbisPluginClientCOMObjects.GetLowerBound(0);
	Исключение
		Отказ = Истина;
		Возврат "{""code"":700, ""message"":""Неизвестная ошибка подключения"",""detail"": ""Ошибка обработки ответа от плагина. Детально: " + ОписаниеОшибки() + """}";
	КонецПопытки;
	
	Для ИндексСообщения = ИндексПервогоСообщения По ВсегоСообщений Цикл
		РезультатЗапроса = Неопределено;
		Попытка
			SbisPluginClientCOMObject	= SbisPluginClientCOMObjects.GetValue(ИндексСообщения);
			ExtendedJsonObject			= SbisPluginClientCOMObject.GetExtendedJsonObject();
			РезультатЗапроса			= СериализоватьObjectВСтруктуру(ExtendedJsonObject);
		Исключение
			Отказ = Истина;
			Возврат "{""code"":700, ""message"":""Неизвестная ошибка подключения"",""detail"": ""Ошибка обработки ответа от метода плагина " + ПараметрыЗапроса.Метод + ". Детально: " + ОписаниеОшибки() + """}";
		КонецПопытки;
		//Проверим, что пришёл правильный результат
		ИдентификаторКоманды = Неопределено;
		Если Не РезультатЗапроса.Свойство("queryID", ИдентификаторКоманды) Тогда
			Отказ = Истина;
			Возврат "{""code"":700, ""message"":""Неизвестная ошибка подключения"",""detail"": ""Неизвестный формат ответа от плагина""}";
		ИначеЕсли ПустаяСтрока(ИдентификаторКоманды) Тогда//Пустой ИД запроса означает ошибку транспорта, либо пришедшее событие.
			Если РезультатЗапроса.type = "Error" Тогда//Ошибка COM транспорта. Проверим, что не отвалился плагин
				ПолучитьВсе		= Ложь;
				Отказ			= Истина;
				РезультатОшибка	= "";
				Если Не сбисДополнительныеПараметры = Неопределено
					И	сбисДополнительныеПараметры.Свойство("ПолучитьВсе") Тогда
					ПолучитьВсе = сбисДополнительныеПараметры.ПолучитьВсе;
				КонецЕсли;
				//Проверим ошибку, которая произошла в процессе работы. Если что-то критичное, то принудительно отключаем обмен.
				СтрокаОшибка = Неопределено;
				Если Не РезультатЗапроса.Свойство("result", СтрокаОшибка)
					Или	СтрокаОшибка = "Not connected"
					Или	СтрокаОшибка = "Server not found" Тогда//Отвалился плагин.
					//Кэш.СБИС.ОбменВключен = Ложь;
				ИначеЕсли Лев(СтрокаОшибка, 17) = "System.Exception:" Тогда//Вернулось системное исключение, проверим сообщение.
					СтрокаОшибка = СокрЛП(Сред(СтрокаОшибка, 18));
					Если СтрокаОшибка = "Ошибка при отправке сообщения. Подробности в файле логирования" Тогда//Отвалился плагин.
					//	Кэш.СБИС.ОбменВключен = Ложь;
					Иначе
						РезультатОшибка = "{""code"":700, ""message"":""Неизвестная ошибка подключения"",""detail"": """ + СтрокаОшибка +"""}";
					КонецЕсли;
				Иначе//Произошла неизвестная ошибка в процессе работы плагина (Не SbisException).
					РезультатОшибка = "{""code"":700, ""message"":""Неизвестная ошибка подключения"",""detail"": """ + СтрокаОшибка +"""}";
				КонецЕсли;
				Если ПустаяСтрока(РезультатОшибка) Тогда
					//Если сбисОбменВключен Тогда
					//	РезультатОшибка = "{""code"":756, ""message"":""Подключение недоступно"",""detail"": ""Работа СБИС плагина была остановлена. Перезапустите СБИС Плагин и обработку для дальнейшей работы.""}";
					//Иначе
						РезультатОшибка = "{""code"":775, ""message"":""Не получен ответ от плагина"",""detail"": """ + СтрокаОшибка + """}";
					//КонецЕсли;
				КонецЕсли;
				Если ПолучитьВсе Тогда
					Результат.Добавить(РезультатОшибка);
					Продолжить;
				КонецЕсли;
				Возврат РезультатОшибка;
			ИначеЕсли	РезультатЗапроса.type = "Closed" Тогда
				//Кэш.СБИС.ОбменВключен = Ложь;				
				Возврат "{""code"":756, ""message"":""Подключение недоступно"",""detail"": ""Работа СБИС плагина была остановлена. Перезапустите СБИС Плагин и обработку для дальнейшей работы.""}";
			ИначеЕсли	РезультатЗапроса.result.Свойство("eventName")
					И	сбисДополнительныеПараметры.Свойство("ЧитатьСобытия")
					И	сбисДополнительныеПараметры.ЧитатьСобытия Тогда//Это событие. Берем, если указана необходимость получения
				НеобработанныеСобытия.Добавить(РезультатЗапроса.result);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		ВыполненнаяКоманда = СтрПолучитьСтроку(СтрЗаменить(ИдентификаторКоманды, "@", Символы.ПС),1);
		
		Если ВыполненнаяКоманда = ПараметрыЗапроса.Метод Тогда
			Результат.Добавить(РезультатЗапроса);
		ИначеЕсли ВыполненнаяКоманда = "WriteDocumentEx2" Тогда//Отправка документов оцениваниеся после отправки всех пакетов
			Если Не НеобработанныеОтветы.Свойство(ВыполненнаяКоманда) Тогда
				НеобработанныеОтветы.Вставить(ВыполненнаяКоманда, Новый Массив);
			КонецЕсли;
			НеобработанныеОтветы[ВыполненнаяКоманда].Добавить(РезультатЗапроса);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция СериализоватьObjectВСтруктуру(ComJsonObject) Экспорт
	
	Объект_Имя = ComJsonObject.ReadFirst();
	СтруктураРезультата	= Новый Структура();
	Пока Не Объект_Имя = "" Цикл
		Объект_Значение	= Неопределено;
		Объект_Тип		= ComJsonObject.TypeOf(Объект_Имя);	
		Если		Объект_Тип = "JsonString" Тогда
			Объект_Значение = ComJsonObject.Read(Объект_Имя);
			Если	Сред(Объект_Значение,3,1) = "."
				И	Сред(Объект_Значение,6,1) = "." Тогда//Возможно, это дата
				//Переопределим значение как дату, если это действительно она
				Если		СтрДлина(Объект_Значение) = 10 Тогда
					Попытка
						Объект_Значение = Дата(Сред(Объект_Значение,7,4), Сред(Объект_Значение,4,2), Лев(Объект_Значение, 2));
					Исключение
						//В случае исключения, ничего не делаем. Это не дата, значение не меняется
					КонецПопытки;
				ИначеЕсли	СтрДлина(Объект_Значение) = 19 Тогда 
					Попытка
						Объект_Значение = Дата(Сред(Объект_Значение,7,4), Сред(Объект_Значение,4,2), Лев(Объект_Значение, 2), Сред(Объект_Значение,12, 2), Сред(Объект_Значение,15, 2), Сред(Объект_Значение,18, 2))
					Исключение
						//В случае исключения, ничего не делаем. Это не дата, значение не меняется
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли	Объект_Тип = "JsonBoolean" Тогда
			Объект_Значение		= Булево(ComJsonObject.Read(Объект_Имя));
		ИначеЕсли	Объект_Тип = "JsonNumber" Тогда
			Объект_Значение		= ComJsonObject.Read(Объект_Имя);
		ИначеЕсли	Объект_Тип = "JsonObject" Тогда
			ComJsonSubObject	= ComJsonObject.ReadObject(Объект_Имя);
			Объект_Значение		= СериализоватьObjectВСтруктуру(ComJsonSubObject);
		ИначеЕсли	Объект_Тип = "JsonArray" Тогда
			ComJsonSubArray		= ComJsonObject.ReadObjectList(Объект_Имя);
			Объект_Значение		= Новый Массив;
			ComJsonSubArrayInd	= ComJsonSubArray.Count() - 1;
			Для ИндексПодМассива = 0 По ComJsonSubArrayInd Цикл
				ComJsonSubObject = ComJsonSubArray.At(ИндексПодМассива);
				Объект_Значение.Добавить(СериализоватьObjectВСтруктуру(ComJsonSubObject));
			КонецЦикла;
		ИначеЕсли	Объект_Тип = "JsonNull" Тогда
			Объект_Значение		= Неопределено;
		Иначе
			ВызватьИсключение("Неизвестный тип ответа " + Объект_Тип + ". Обратитесь в техническую поддержку.");
		КонецЕсли;
		
		Попытка
			СтруктураРезультата.Вставить(Объект_Имя, Объект_Значение);
		Исключение
			//Значения с не корректными ключами не обрабатываем.
		КонецПопытки;
		Объект_Имя = ComJsonObject.ReadNext();
	КонецЦикла;	
	Возврат СтруктураРезультата;
КонецФункции

Функция Плагин_ВыполнитьМетод(ПараметрыВызова, сбисДополнительныеПараметры, Отказ,ДанныеИнтеграции,ОбъектПлагин) Экспорт
	
	Идентификатор	= Неопределено;
	ПараметрПроверка= Неопределено;
	Object_ID		= "";
	Connection_ID	= "";
	
	Call_Ext		= Ложь;
	Call_method		= Неопределено;
	Call_param		= Неопределено;
	Method_param	= Неопределено;
	
	//Для возможности запуска в отдельном потоке, передаем objectID вызываемого объекта и IDConnection на случай, если вызов делаем через callMethod
	//Если IDConnection не указан, то модуль вызывается напрямую
	//Если	Не сбисДополнительныеПараметры.Свойство("Поток", ПараметрПроверка)
	//	И	Не ДанныеИнтеграции.Свойство("Объекты", ПараметрПроверка) Тогда
	//	Отказ = Истина;
	//	Возврат "{""message"":""Неизвестная ошибка подключения"",""detail"": ""Не подключена подсистема взаимодействия со СБИС плагин"",""code"":700}";
	//КонецЕсли;
	Если Не ДанныеИнтеграции.Свойство("ExtSdk1", Connection_ID) Тогда
		Connection_ID = "";
	ИначеЕсли ЗначениеЗаполнено(Connection_ID) Тогда
		Call_Ext = Истина;
	КонецЕсли;
	
	//Для методов без аргументов передаём пустой JSON объект
	Если	Не ПараметрыВызова.Свойство("Параметры", Method_param)
		Или		Method_param = Неопределено Тогда
		Method_param = Новый Структура;
	КонецЕсли;
	Если Call_Ext Тогда
		Call_method	= "callMethod";
		Call_param = Новый Структура;
		Call_param.Вставить("idConnection",	Connection_ID);
		Call_param.Вставить("method",		ПараметрыВызова.Метод);
		Call_param.Вставить("param",		Method_param);
	Иначе
		Call_method	= ПараметрыВызова.Метод;
		Call_param	= Новый Структура("param", Method_param);
	КонецЕсли;
	Возврат Плагин_CallMethod( "ExtSdk", Call_method, ПараметрыВызова.Метод, Call_param, сбисДополнительныеПараметры, Отказ,ОбъектПлагин,ДанныеИнтеграции);
	
КонецФункции

Функция Плагин_CallMethod(сбисМодуль, сбисМетод, сбисИдКоманды, ПараметрыМетода, сбисДополнительныеПараметры, Отказ,ОбъектПлагин,ДанныеИнтеграции)
	Перем Object_ID, Call_ID, Acc_ID;
	
	Если Не ДанныеИнтеграции.Свойство(сбисМодуль, Object_ID) Тогда
		//Такого модуля ещё нет, пробуем получить.
		Object_ID = Плагин_GetModule( сбисМодуль, Отказ,ОбъектПлагин,ДанныеИнтеграции);
		Если Отказ Тогда
			Возврат Object_ID;
		КонецЕсли;
	КонецЕсли;
	
	Если Не сбисДополнительныеПараметры.Свойство("Идентификатор", Call_ID) Тогда
		Call_ID = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	сбисДополнительныеПараметры.Свойство("ИдентификаторАккаунта", Acc_ID);
	Call_ID		= сбисИдКоманды + "@" + Object_ID + "@" + Call_ID;
	Call_param	= ПреобразоватьЗначениеВJSON(ПараметрыМетода, Новый Структура("Режим", "ExtSDK"));
	Попытка
		//TODO38 убрать условие на ид аккаунта
		Если ЗначениеЗаполнено(Acc_ID) Тогда
			ОбъектПлагин.CallMethod(Call_ID, Object_ID, сбисМодуль + "." + сбисМетод, Call_param, Acc_ID);
		Иначе
			ОбъектПлагин.CallMethod(Call_ID, Object_ID, сбисМодуль + "." + сбисМетод, Call_param);
		КонецЕсли;
	Исключение
		Отказ = Истина;
		Возврат("{""code"":700,""methodName"":""" + сбисМетод + """,""message"":""Неизвестная ошибка подключения"",""detail"": ""Ошибка вызова метода плагина " + сбисМетод + ". Детально: " + ОписаниеОшибки() + """}");
	КонецПопытки;
	Возврат Истина;
	
КонецФункции

Функция ПреобразоватьЗначениеВJSON(ЗначениеПреобразовать, ПараметрыКонвертации=Неопределено) Экспорт
	
	Режим = "Стандарт";
	Если Не ПараметрыКонвертации = Неопределено Тогда
		Режим = ПараметрыКонвертации.Режим;
	КонецЕсли;
	СтрокаJSON = ЗначениеВJSON(ЗначениеПреобразовать, Режим);
	Возврат СтрокаJSON;
	
КонецФункции

Функция ЗначениеВJSON(ЗначениеПреобразовать, Режим, ПервыйУровень=Истина) 
	
	ТекстРезультат	= "";
	_ТипЗначения	= ТипЗнч(ЗначениеПреобразовать);
	Если		ЗначениеПреобразовать = Неопределено	Тогда	//Неопределено
		ТекстРезультат = "null";
		Если Режим = "API" Тогда
			ТекстРезультат = ЗначениеВJSON("", Режим, ПервыйУровень);
		КонецЕсли;
	ИначеЕсли	ЗначениеПреобразовать = Null			Тогда	//Null
		ТекстРезультат = "null";
		Если Режим= "ExtSDK" Тогда
			ТекстРезультат = ЗначениеВJSON(Новый Структура, Режим, ПервыйУровень);//При формировании сообщения, идёт как dict
		КонецЕсли;	
	ИначеЕсли	_ТипЗначения = Тип("Структура")			Тогда	//Структура
		ТекстРезультат = "{";
		Для Каждого КлючИЗначение Из ЗначениеПреобразовать Цикл
			ТекстРезультат = ТекстРезультат+""""+КлючИЗначение.Ключ+""":"+ ЗначениеВJSON(КлючИЗначение.Значение, Режим, Ложь)+",";
		КонецЦикла;
		Если Прав(ТекстРезультат, 1) = "," Тогда
			ТекстРезультат = Лев(ТекстРезультат, СтрДлина(ТекстРезультат)-1);
		КонецЕсли;		
		ТекстРезультат = ТекстРезультат + "}";
	ИначеЕсли	_ТипЗначения = Тип("Массив")			Тогда	//Массив
		ТекстРезультат = ТекстРезультат + "[";
		Для Каждого Элемент Из ЗначениеПреобразовать Цикл
			ТекстРезультат = ТекстРезультат+ЗначениеВJSON(Элемент, Режим, Ложь)+",";
		КонецЦикла;
		Если Прав(ТекстРезультат, 1) = "," Тогда
			ТекстРезультат = Лев(ТекстРезультат, СтрДлина(ТекстРезультат)-1);
		КонецЕсли;		
		ТекстРезультат = ТекстРезультат + "]";
	ИначеЕсли	_ТипЗначения = Тип("Число")				Тогда	//Число 
		ТекстРезультат = Формат(ЗначениеПреобразовать, "ЧН=0; ЧГ=0;");
		Если Режим = "API" Тогда//Для АПИ оборачиваем числа как строку
			ТекстРезультат = ЗначениеВJSON(ТекстРезультат, Режим, ПервыйУровень);
		КонецЕсли;
	ИначеЕсли	_ТипЗначения = Тип("Булево")			Тогда	//Булево
		ТекстРезультат = Формат(ЗначениеПреобразовать, "БЛ=false; БИ=true");
	Иначе
		Если	_ТипЗначения = Тип("Дата")				Тогда	//Дата
			ТекстРезультат = Строка(ЗначениеПреобразовать);
		Иначе													//Строка
			ТекстРезультат = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Строка(ЗначениеПреобразовать), 
							"\",								"\\"),// Перемаскирование последовательности.
							//"/",								"\/"),// x2f//AU правый слеш не оборачиваем.
							Символ(008),						"\b"),// x08
							Символы.Таб,						"\t"),// x09
							Символы.ПС,							"\n"),// x0a
							Символы.ПФ,							"\f"),// x0c
							Символы.ВК,							"\r"),// x0d
							Символ(34),							"\""");//кавычки
		КонецЕсли;
		Если Не ПервыйУровень Тогда//Для 1 уровня не оборачиваем кавычками строку
			ТекстРезультат = """"+ТекстРезультат+"""";
		КонецЕсли;
	КонецЕсли;
	Возврат ТекстРезультат;
	
КонецФункции

Функция Плагин_GetModule(ИмяМодуля, Отказ,ОбъектПлагин,ДанныеИнтеграции)
	//Проверим наличие подключенного модуля.
	Попытка
		РезультатЗапроса = ОбъектПлагин.GetModule(ИмяМодуля);
	Исключение
		Отказ = Истина;//Если падает метод COM, значит его нет в модуле и это старый плагин
		Возврат Новый Структура("code, message, details", 762, "Версия системы не поддерживается", "Обновите СБИС плагин.");
	КонецПопытки;
	
	//Проверим, что модуль получен
	Если РезультатЗапроса = "" Тогда
		Ответы	= Плагин_ReadAllObjects(Новый Структура("Метод", ""), Новый Структура("ПолучитьВсе", Истина), Отказ,ОбъектПлагин);
		Отказ	= Истина;
		//Смотрим вернувшиеся ошибки и обрабатываем в порядке приоритета:
		//1. Ошибка 756 о завершении работы плагина
		//2. Ошибка 775 о отсутствии запущенного плагина
		//3. Последняя ошибка в списке, которая должна относиться к GetModule()
		СтруктураОшибки = Неопределено;
		Для Каждого ОтветРезультат Из Ответы Цикл
			СтруктураОшибки = ПолучитьСтруктуруОшибки(ОтветРезультат);
			Если		СтруктураОшибки.code = 756 Тогда
				Прервать;
			ИначеЕсли   СтруктураОшибки.code = 775 Тогда
				СтруктураОшибки.details = "Не удалось получить расширение " + ИмяМодуля + ".";
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЗначениеЗаполнено(СтруктураОшибки) Тогда
			СтруктураОшибки = Новый Структура("code, message, details", 775, "Не получен ответ от плагина", "Не удалось получить расширение " + ИмяМодуля + ".");
		КонецЕсли;
		Возврат СтруктураОшибки;
	КонецЕсли;
	Если Не Отказ Тогда
		ДанныеИнтеграции.Вставить(ИмяМодуля, РезультатЗапроса);
	КонецЕсли;
	Возврат РезультатЗапроса;
	
КонецФункции

Функция СформироватьНастройкиПодключения(ИдентификаторСессии = "", ДополнительныеПараметрыЗапроса=Неопределено, Отказ=Ложь,Thumbprint_1,ДанныеИнтеграции,ОбъектПлагин) Экспорт
	Параметр = Новый Структура("host", "https://"+Thumbprint_1.СБ);
	Если ЗначениеЗаполнено(ИдентификаторСессии) Тогда
		Параметр.Вставить("sid",ИдентификаторСессии);
	КонецЕсли;
	Если ДополнительныеПараметрыЗапроса = Неопределено Тогда
		ДополнительныеПараметрыЗапроса = Новый Структура;	
	КонецЕсли;
	Возврат ОтправитьИОбработатьКоманду("setConnectionInfo",Параметр, ДополнительныеПараметрыЗапроса,Отказ,ДанныеИнтеграции,ОбъектПлагин);	
КонецФункции	

Функция ВключитьExtSDK(Отказ,РезультатExtSdk,ОбъектПлагин,ДанныеИнтеграции )
	ОжиданиеОтвета		= 10;//На время включения, ответ от плагина должен приходить быстро
	
	
		Попытка
			ОбъектПлагин = Новый COMОбъект("Tensor.SbisPluginClientCOM");
			
		Исключение
			Отказ = Истина;
			Возврат Новый Структура("code, message, details", 767, "Ошибка при создании COM-объекта", "Не зарегистрирована компонента Tensor.SbisPluginClientCOM.");
		КонецПопытки;
		
		Попытка
			ОбъектПлагин.ReadAllObjects();
		Исключение
			Отказ = Истина;
			Возврат Новый Структура("code, message, details", 762, "Версия системы не поддерживается", "Обновите СБИС плагин.");
		КонецПопытки;
		
		//Попытка
			
			РезультатЗапроса = Плагин_GetModule("ExtSdk", Отказ,ОбъектПлагин,ДанныеИнтеграции);
			
	Если Отказ Тогда
		Если		РезультатЗапроса.code = 762 Тогда
			Возврат РезультатЗапроса;
		ИначеЕсли	РезультатЗапроса.code = 775 Тогда
			РезультатЗапроса.details = РезультатЗапроса.details + " Возможно СБИС плагин не запущен.";
		КонецЕсли;
		//На новом плагине метода закрытия соединения нет и он перезапускается автоматом
		Возврат РезультатЗапроса;
	КонецЕсли;
	ExtSDK1_ID = Строка(Новый УникальныйИдентификатор);
	Парам				= Новый Структура("id", ExtSDK1_ID);
	ДопПараметры_EXT	= Новый Структура("ЕстьРезультат,ВернутьОшибку,СообщатьПриОшибке,ВремяОжиданияОтвета", Истина, Истина, Ложь, ОжиданиеОтвета);
	
	РезультатЗапроса = ОтправитьИОбработатьКоманду("getConnectionID", Парам, ДопПараметры_EXT, Отказ,ДанныеИнтеграции,ОбъектПлагин);
	Если Отказ Тогда
		Если РезультатЗапроса.code = 775 Тогда
			РезультатЗапроса.details = "Не удалось получить расширение ExtSdk. Возможно, СБИС плагин не запущен.";
		КонецЕсли;
		Возврат РезультатЗапроса;
	КонецЕсли;
	ExtSDK1_ID = РезультатЗапроса;
	РезультатЗапроса = ОтправитьИОбработатьКоманду("getVersion", , ДопПараметры_EXT, Отказ,ДанныеИнтеграции,ОбъектПлагин);
	Если Отказ Тогда                                                                                       	
		Если РезультатЗапроса.code = 775 Тогда
			РезультатЗапроса.details = "Не удалось получить расширение ExtSdk. Возможно, СБИС плагин не запущен.";
		КонецЕсли;
		Возврат РезультатЗапроса;
	КонецЕсли;
	ДанныеИнтеграции.Вставить("ExtSdk1", ExtSDK1_ID);	
	
	
КонецФункции

Функция СписокВходящихДокументовСБ(Thumbprint_1,Маркер,Страница,РазмерСтраницы) Экспорт
	
	СайтДляПодключенияПоТакскму=Thumbprint_1.СБ;
	
	ТелоJSON	=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ЗапросДокументовИзменения(Thumbprint_1,Страница,РазмерСтраницы,15);
	
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
		Прокси=Новый ИнтернетПрокси;
		Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
		HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	Иначе
				
		HTTPСервисЗапрос_ТХЦ=Новый HTTPСоединение(СайтДляПодключенияПоТакскму,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	КонецЕсли;
	
	

	HTTPЗапрос=Новый HTTPЗапрос("service/?srv=1");

	HTTPЗапрос.Заголовки.Вставить("X-SBISSessionID",	Маркер );
	HTTPЗапрос.Заголовки.Вставить("Content-Type",	"application/json; charset=utf-8");
	//	HTTPЗапрос.Заголовки.Вставить("User-Agent",	"1C8.3.10.2772_VO2.0.35.1");
	//	HTTPЗапрос.Заголовки.Вставить("X-API-Version",	"2.3.1");


	#Если ВебКлиент Тогда
			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоJSON,"UTF-8");
			#Иначе
			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоJSON,"UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
		#КонецЕсли
		

	Ответ=HTTPСервисЗапрос_ТХЦ.ОтправитьДляОбработки(HTTPЗапрос);
	ТТТ_Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());	
	
	
	Если Ответ.КодСостояния=200 Тогда
		Возврат ТТТ_Ответ;
	Иначе
		Попытка
			Сообщить("Не удалось получить список входящих документов по ЭДО. Ошибка "+ТТТ_Ответ.error.details);
		Исключение
			Сообщить("Не удалось получить список входящих документов по ЭДО. Ошибка "+Ответ.ПолучитьТелоКакСтроку());
		КонецПопытки;
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПодключениеПоКонтурДиадок(Request,Thumbprint_1,boxId,BoxUrl,PortalUserId,VerificationToken) Экспорт
	#Если ВебКлиент Тогда
		Возврат Ложь;
	#Иначе
	
	Request = New COMObject("WinHttp.WinHttpRequest.5.1");
	
	Request.Open("GET", "https://auth.kontur.ru", 0);
	Request.Send();
	Request.WaitForResponse();
	
	AntiForgery = ValueFromHeaders("AntiForgery",Request); 
	
	Если ЗначениеЗаполнено(Thumbprint_1.ЛогинКонтур) Тогда
	
		Params = New Structure("Login,Password,Remember", Thumbprint_1.ЛогинКонтур, Thumbprint_1.ПарольКонтур, False);	
		Body = ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.JSONString(Params);	
		
		Request.Open("POST", "https://auth.kontur.ru/api/authentication/password/auth-by-password", 0);
		Request.SetRequestHeader("Content-Length", XMLString(StrLen(Body)));
		Request.SetRequestHeader("Content-Type", "application/json;charset=UTF-8");
		Request.SetRequestHeader("X-Csrf-Token", AntiForgery);	
		Request.Send(Body);
		Request.WaitForResponse();
		
		PortalUserId = ValueFromHeaders("portaluserid",Request);
	Иначе
	
			CAPICOM_CURRENT_USER_STORE=2;
			CAPICOM_MY_STORE="My";
			CAPICOM_OTHER_STORE="AddressBook";
			CAPICOM_STORE_OPEN_READ_ONLY=0;
			CAPICOM_CERTIFICATE_FIND_TIME_VALID=9;
			CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED = 2;

			
			Попытка
				// формируем список наших сертификатов
				ТекЭлемент=Неопределено;
				СписокНашихСертификатов=Новый СписокЗначений;
				
				
				Store=Новый COMОбъект("CAPICOM.Store");
				Store.Open(CAPICOM_CURRENT_USER_STORE,CAPICOM_MY_STORE,CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);
				Certs=Store.Certificates;
				ValidCerts=Certs;//.Find(CAPICOM_CERTIFICATE_FIND_TIME_VALID,ТекДата,-1);
				Для CertNum=1 По ValidCerts.Count Цикл
					
					CurCert=ValidCerts.Item(CertNum);
					Thumbprint_2=CurCert.Thumbprint;
					СерийныйНомер=CurCert.SerialNumber;
					Если Thumbprint_2=Thumbprint_1.Thumbprint_1 Тогда
						ВыбСертификат=CurCert;
						Прервать;
					Конецесли;
				КонецЦикла;
			Исключение
				ТекстОшибки=СтрЗаменить(ОписаниеОшибки(),"'","");
				Сообщить(NStr("ru = 'Ошибка при работе с хранилищем сертификатов! (Возможно, не установлен модуль CAPICOM)"+Символы.ПС+"Описание ошибки: "+ТекстОшибки+"'", "ru"));
				Возврат Ложь;
			КонецПопытки;
			
		СтрокаСертификата=ВЫбСертификат.Export();
		ДанныеСертификата = Base64Значение(СтрокаСертификата);
			
		
		
		
		//Body=
		Request.Open("POST", "https://auth.kontur.ru/api/authentication/certificate/get-token.ashx?version=v5&ignoreUntrustedHeuristicError=false&registerIfNotExist=true", 0);
		Request.SetRequestHeader("Content-Length", XMLString(StrLen(ДанныеСертификата)));
		Request.SetRequestHeader("Content-Type", "application/json;charset=UTF-8");
		Request.SetRequestHeader("X-Csrf-Token", AntiForgery);	
		Request.Send(ДанныеСертификата);
		Request.WaitForResponse();
		
	КонецЕсли;
	
	Request.Open("GET", "https://diadoc.kontur.ru/api/boxes", 0);
	Request.Send();
	Request.WaitForResponse();
	
	Попытка
		Result = ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.JSONValue(Request.ResponseText);	
	Исключение
		Сообщить("Не удалось подключиться к Диадок. Проверьте логин и пароль пользователя");
		Возврат Ложь;
	КонецПопытки;
	
	
	НашлиОрганизацию=ЛОжь;
	Для Каждого Стр_1 Из Result.boxes.active Цикл
		Если Thumbprint_1.ИНН=Стр_1.organization.inn Тогда
			boxId=Стр_1.organization.boxId;
			BoxUrl = "https://diadoc.kontur.ru/" + Стр_1.organization.boxId;
			НашлиОрганизацию=Истина;
			Прервать;
		КонецЕсли;
	Конеццикла;
	Если НашлиОрганизацию=Ложь Тогда
		Сообщить("Не нашли в дидадок активную организацию с ИНН " +Thumbprint_1.ИНН);
		Возврат Ложь;
	КонецЕсли;
	
	
	Request.Open("GET", "https://diadoc.kontur.ru/AuthScript/Token", 0);
	Request.Send();
	Request.WaitForResponse();
	VerificationToken = Request.ResponseText;
	
	
	
	Возврат Истина;
	#КонецЕсли
КонецФункции

Function ValueFromHeaders(ValueName,Request)
	
	Result = "";	
	ResponseHeaders = Request.GetAllResponseHeaders();
	For Line = 1 To StrLineCount(ResponseHeaders) Do
		CurLine = StrGetLine(ResponseHeaders, Line);
		If Find(CurLine, ValueName) > 0 Then
			BeginPos = Find(CurLine, "=") + 1;
			EndPos = Find(CurLine, ";");
			Result = Mid(CurLine, BeginPos, EndPos - BeginPos);
			Break;
		EndIf;
	EndDo;
	Return Result;

EndFunction

Функция НаСервереФормируемЗаказ(Thumbprint_1,Объект)
	ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
		Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();
		Чтен.ЗаписатьИмяСвойства("order_id");
		Чтен.ЗаписатьЗначение(Объект._Order_ID);
		Чтен.ЗаписатьИмяСвойства("contract_number");
		Чтен.ЗаписатьЗначение(Объект.НомерДоговораСОператором);
		Чтен.ЗаписатьИмяСвойства("contract_date");
		Чтен.ЗаписатьЗначение(Формат(Объект.ДатаДоговораСОператором,"ДФ=""гггг-ММ-ддT00:00:00""")+".000Z");
		Чтен.ЗаписатьИмяСвойства("operator_contract_date");
		Чтен.ЗаписатьЗначение(Формат(Объект.ДатаДоговораСОператором,"ДФ=""дд.ММ.гггг"""));
		Чтен.ЗаписатьИмяСвойства("production_type");
	 Если Объект.СпособИзготовленияСИ=Перечисления.СпособИзготовленияСИ_ХамелеонЦРПТ.Самостоятельно Тогда
		Чтен.ЗаписатьЗначение("SELF_MADE");
 Иначе
		Чтен.ЗаписатьЗначение("OPERATOR");
	КонецЕсли;
		Чтен.ЗаписатьИмяСвойства("contact_person");
		Чтен.ЗаписатьЗначение(Объект.ТекущийПользователь.КонтактноеЛицо);
		
		Чтен.ЗаписатьИмяСвойства("delivery_address");
		Чтен.ЗаписатьЗначение(Объект.Организация.АдресМестонахождения);
		
		Чтен.ЗаписатьИмяСвойства("delivery_type");
		Чтен.ЗаписатьЗначение("PHYSICAL_DEVICE");
		
		Чтен.ЗаписатьИмяСвойства("label_template_id");
		Чтен.ЗаписатьЗначение(xmlString(Объект.Ссылка.ШаблонЭтикетки.УникальныйИдентификатор));
		
		
		
		Чтен.ЗаписатьИмяСвойства("products_information");
		Чтен.ЗаписатьНачалоМассива();
		
		Для Каждого Стр Из Объект.Товары Цикл
			Чтен.ЗаписатьНачалоОбъекта();
			Если ЗначениеЗаполнено(Стр.ID) Тогда
				Чтен.ЗаписатьИмяСвойства("orderLineId");
				Чтен.ЗаписатьЗначение(xmlString(Стр.ID));
			КонецЕсли;
			
				Чтен.ЗаписатьИмяСвойства("gtin");
				Чтен.ЗаписатьЗначение(дополнитьСтроку(Стр.GTIN.GTIN));
				Если Объект.СпособВыпускаТоваров<>Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.МаркировкаОстатков Тогда
					Если ЗначениеЗаполнено(Стр.КодТНВЭД) Тогда
							Если ТипЗнч(Стр.КодТНВЭД)=Тип("Строка") Тогда
								Чтен.ЗаписатьИмяСвойства("tn_ved_code");
							
								
								Чтен.ЗаписатьЗначение(Сред(xmlString(Стр.КодТНВЭД),1,4));
							ИначеЕсли ТипЗнч(Стр.КодТНВЭД)=Тип("СправочникСсылка.КодТНВЭД_ХамелеонЦРПТ") Тогда
								Чтен.ЗаписатьИмяСвойства("tn_ved_code");
							
								
								Чтен.ЗаписатьЗначение(Сред(xmlString(Стр.КодТНВЭД.Код),1,4));
								
							КонецЕсли;
						КонецЕсли;
				КонецеСли;
				Чтен.ЗаписатьИмяСвойства("emission_type");
				
		Если Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.МаркировкаОстатков Тогда
				
				Чтен.ЗаписатьЗначение("REMAINS");
				
			ИначеЕсли Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ВвезенВРФ Тогда
				Чтен.ЗаписатьЗначение("IMPORT");
		Иначе
				Чтен.ЗаписатьЗначение("PRODUCTION");
				
			КонецЕсли;
				Чтен.ЗаписатьИмяСвойства("code_quantity");
				Чтен.ЗаписатьЗначение(xmlString(Стр.КоличествоКМ));

				Чтен.ЗаписатьИмяСвойства("serial_num_type");
			Если Стр.СпособФормированияСН=перечисления.СпособФормированияСН_ХамелеонЦРПТ.ОператорИСМП Тогда
				Чтен.ЗаписатьЗначение("OPERATOR");
				Чтен.ЗаписатьИмяСвойства("serial_number");
				Чтен.ЗаписатьЗначение("null");
				
			Иначе
				Чтен.ЗаписатьЗначение("SELF_MADE");
				чтен.ЗаписатьИмяСвойства("serial_numbers");
				чтен.ЗаписатьНачалоМассива();
						НСтр=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
				БылаПозиция=Ложь;
			Для Каждого Стр_1 Из НСтр Цикл
				Если ЗначениеЗаполнено(Стр_1.СерийныйНомер) Тогда
					
					чтен.ЗаписатьЗначение(Стр_1.СерийныйНомер)
					
				КонецЕсли;
			Конеццикла;
			    чтен.ЗаписатьКонецМассива();
			
	
			КонецЕсли;
			
			Чтен.ЗаписатьКонецОбъекта();
				
				
		Конеццикла;
		Чтен.ЗаписатьКонецМассива();
			Чтен.ЗаписатьКонецОбъекта();
					
		
		
		Текст=Чтен.Закрыть();
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;
	
	
	
	Возврат Текст;
	 ТекстДокумента="<MKIO_Order action_id=""01"">  
	 |<TRADE_PARTICIPANT_INN>"+Объект.Организация.ИНН+"</TRADE_PARTICIPANT_INN>
	 |<OPERATOR_CONTRACT_NUM>"+Объект.НомерДоговораСОператором+"</OPERATOR_CONTRACT_NUM>  
	 |<OPERATOR_CONTRACT_DATE>"+Формат(Объект.ДатаДоговораСОператором,"ДФ=""дд.ММ.гггг""")+"</OPERATOR_CONTRACT_DATE>  
	 |<PREP_METHOD>";
	 Если Объект.СпособИзготовленияСИ=Перечисления.СпособИзготовленияСИ_ХамелеонЦРПТ.Самостоятельно Тогда
	 ТекстДокумента= ТекстДокумента+"1";
 Иначе
	 ТекстДокумента= ТекстДокумента+"2";
	КонецЕсли;
	 
	ТекстДокумента= ТекстДокумента+"</PREP_METHOD>";
	 ТекстДокумента= ТекстДокумента+"
	 |<RECEPTION_METHOD>";
	 Если Объект.СпособИзготовленияСИ=Перечисления.СпособИзготовленияСИ_ХамелеонЦРПТ.Самостоятельно Тогда
	 	ТекстДокумента= ТекстДокумента+"1";
	 Иначе
		 ТекстДокумента= ТекстДокумента+"2";
	 КонецЕсли;
	ТекстДокумента= ТекстДокумента+"</RECEPTION_METHOD>";
	 
	ТекстДокумента= ТекстДокумента+"	
	|<LABEL_TEMPLATE_ID>"+xmlString(Объект.Ссылка.ШаблонЭтикетки.УникальныйИдентификатор)+"</LABEL_TEMPLATE_ID> ";
	
	
	//Если Объект.СпособИзготовленияСИ=Перечисления.СпособИзготовленияСИ_ХамелеонЦРПТ.ЦентрЭтикетированияИМаркировки Тогда
	//	ТекстДокумента= ТекстДокумента+"	
	//	|<LABELLING_CENTER_NAME>"+xmlString(Объект.НаименованиеЦЭМ)+"</LABELLING_CENTER_NAME> 
	//	|<LABELLING_CENTER_INN>"+xmlString(Объект.ИННЦЭМ)+"</LABELLING_CENTER_INN> 
	//	|<LABELLING_CENTER_CONTRACT_NUM>"+xmlString(Объект.НомерДогоораСЦЭМ)+"</LABELLING_CENTER_CONTRACT_NUM> 
	//	 |<LABELLING_CENTER_CONTRACT_DATE>"+Формат(Объект.ДатаДоговораСЦЭМ,"ДФ=""дд.ММ.гггг""")+"</LABELLING_CENTER_CONTRACT_DATE> "; 
	//	
	//КонецЕслИ;
	//
	ТекстДокумента= ТекстДокумента+"	
	|<CONTACT>"+Объект.ТекущийПользователь.КонтактноеЛицо+"</CONTACT> ";
	
	Если ЗначениеЗаполнено(Объект.Организация.АдресМестонахождения) Тогда
		ТекстДокумента= ТекстДокумента+"	
		|<DELIVERY_ADDRESS>"+Объект.Организация.АдресМестонахождения+"</DELIVERY_ADDRESS>  ";
	КонецЕсли;
	Если Объект.Товары.Количество()>0 Тогда
	ТекстДокумента= ТекстДокумента+"	
	|<PRODUCT_DETAILS>    ";
	
	Для Каждого Стр Из Объект.Товары Цикл
		ТекстДокумента= ТекстДокумента+"
		|<PRODUCT>";
		Если ЗначениеЗаполнено(Стр.GTIN.GTIN) Тогда
			ТекстДокумента= ТекстДокумента+"
			|<GTIN>"+дополнитьСтроку(xmlString(Стр.GTIN.GTIN))+"</GTIN>";
		КонецЕсли;
		
			Если ТипЗнч(Стр.КодТНВЭД)=Тип("Строка") Тогда
		ТекстДокумента= ТекстДокумента+"
		
		|<TNVED_CODE>"+Сред(xmlString(Стр.КодТНВЭД),1,4)+"</TNVED_CODE>      
		|<RELEASE_METHOD>";
	        ИначеЕсли ТипЗнч(Стр.КодТНВЭД)=Тип("СправочникСсылка.КодТНВЭД_ХамелеонЦРПТ") Тогда
	        
		ТекстДокумента= ТекстДокумента+"
		
		|<TNVED_CODE>"+Сред(xmlString(Стр.КодТНВЭД.Код),1,4)+"</TNVED_CODE>      
		|<RELEASE_METHOD>";
	Иначе
				ТекстДокумента= ТекстДокумента+"
		
		|      
		|<RELEASE_METHOD>";

		    КонецЕслИ;
		Если Стр.СпособВыпускаТоваров="Ввезен в РФ" Тогда
			ТекстДокумента= ТекстДокумента+"2";
		Иначе
			ТекстДокумента= ТекстДокумента+"1";
		КонецЕсли;
			ТекстДокумента= ТекстДокумента+"
			|</RELEASE_METHOD>      
			|<MKIO_QUANTITY>"+xmlString(Стр.КоличествоКМ)+"</MKIO_QUANTITY>      
			|";
			
			Если Thumbprint_1.РежимРаботы=1 Тогда
			ТекстДокумента= ТекстДокумента+"
			|<IO_TYPE>";
				Если Стр.ВидСИ=Перечисления.ВидСИ_ХамелеонЦРПТ.GLUED Тогда
					
					ТекстДокумента=ТекстДокумента+"2";
				ИначеЕсли Стр.ВидСИ=Перечисления.ВидСИ_ХамелеонЦРПТ.HINGED Тогда
				
					ТекстДокумента=ТекстДокумента+"3";
				Иначе
					ТекстДокумента=ТекстДокумента+"1";
					
				КонецЕсли;
			
				ТекстДокумента=ТекстДокумента+			
			"</IO_TYPE>";
			КонецЕсли;
					ТекстДокумента=ТекстДокумента+"
			|<S_ORG_METHOD>";

			Если Стр.СпособФормированияСН=перечисления.СпособФормированияСН_ХамелеонЦРПТ.ОператорИСМП Тогда
				ТекстДокумента=ТекстДокумента+"2";
				
			Иначе
				ТекстДокумента=ТекстДокумента+"1";
				
			КонецЕсли;
					

ТекстДокумента=ТекстДокумента+"</S_ORG_METHOD>";
			Если Thumbprint_1.РежимРаботы=1 Тогда

ТекстДокумента=ТекстДокумента+"
	|<MARKING_TYPE>";
								Если Стр.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаПотребительскуюУпаковку Тогда
				ТекстДокумента=ТекстДокумента+"1";
			ИначеЕсли Стр.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаТовар Тогда
				ТекстДокумента=ТекстДокумента+"2";
			
			ИначеЕсли Стр.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаТоварныйЯрлык Тогда
				ТекстДокумента=ТекстДокумента+"3";
			Иначе
				Сообщить("Заполните поле вид марокировки, или перевыберите пользователя в документе");
			Конецесли;

					ТекстДокумента=ТекстДокумента+"</MARKING_TYPE>";    
КонецЕсли;					


				НСтр=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
				БылаПозиция=Ложь;
			Для Каждого Стр_1 Из НСтр Цикл
				Если ЗначениеЗаполнено(Стр_1.СерийныйНомер) Тогда
					Если Не БылаПозиция Тогда
						ТекстДокумента=ТекстДокумента+"
						|<S_NUMS>        ";
						БылаПозиция=Истина;
					КонецЕсли;	
					ТекстДокумента=ТекстДокумента+"
					|<SERIAL_NUMBER>"+Стр_1.СерийныйНомер+"</SERIAL_NUMBER>";
					
				КонецЕсли;
			Конеццикла;

	                Если БылаПозиция=Истина Тогда
					ТекстДокумента=ТекстДокумента+"
	|</S_NUMS>";
				Конецесли;
				
ТекстДокумента=ТекстДокумента+"
|</PRODUCT>  ";

					Конеццикла;
					
					ТекстДокумента=ТекстДокумента+"
					|</PRODUCT_DETAILS>";
					
					КонецЕсли;
					ТекстДокумента=ТекстДокумента+"
					|</MKIO_Order>";
					
				
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,ТекстДокумента);
	КонецЕсли;
	
		
	
	
	
	Возврат      ТекстДокумента;    //отправляем данный текст в ЦРПТ
	
	TimeStamp = 1000 * (Объект.ДатаДоговораСОператором - Date(1970,1,1) - 3 * 3600);
	
		
		ТекстДокумент="
		|{   			
		|   ""contract_number"":"""+Объект.НомерДоговораСОператором+""",
		|   ""contract_date"":"""+xmlString(TimeStamp)+""",   
		|""operator_contract_date"":"""+Формат(Объект.ДатаДоговораСОператором,"ДФ=""дд.ММ.гггг""")+""",
		|   ""production_type"":""";
		
		
		
		Если Объект.СпособИзготовленияСИ=Перечисления.СпособИзготовленияСИ_ХамелеонЦРПТ.Самостоятельно Тогда
			ТекстДокумент=ТекстДокумент+
			"SELF_MADE"",";
		Иначе
			ТекстДокумент=ТекстДокумент+
			"CEM"",";
		КонецЕсли;
		ТекстДокумент=ТекстДокумент+
		"""contact_person"":"""+Объект.ТекущийПользователь.КонтактноеЛицо+""",
		|""delivery_address"":"""",
		|""products_information"":[";
		
		Для Каждого Стр Из Объект.Товары Цикл
			ТекстДокумент=ТекстДокумент+
			"{";
			
			Если Не ЗначениеЗаполненО(Стр.ID) тогда
				СпрОрд=Справочники.ID_строки_партия_ХамелеонЦРПТ.СоздатьЭлемент();
				СпрОрд.ОбменДанными.Загрузка=Истина;
				СпрОрд.Записать();
				СпрОрд.ОбменДанными.Загрузка=Ложь;
				СпрОрд.Наименование=xmlString(СпрОрд.Ссылка.УникальныйИдентификатор());
				СпрОрд.Записать();
				Стр.ID=СпрОрд.Ссылка;
			КонецЕсли;
			ТекстДокумент=ТекстДокумент+
			"""orderLineId"": """+Строка(Стр.id)+""",
			|""gtin"": """+xmlString(Стр.GTIN.GTIN)+""",
			|""tn_ved_code"":"""+xmlString(Стр.КодТНВЭД.Код)+""",
			|""emission_type"": ";
			Если Стр.СпособВыпускаТоваров="Ввезен в РФ" Тогда
				ТекстДокумент=ТекстДокумент+"""LOCAL""";
			Иначе
				ТекстДокумент=ТекстДокумент+"""FOREIGN""";
			КонецЕсли;
				
			
			ТекстДокумент=ТекстДокумент+",
			|""code_quantity"":"""+xmlString(Стр.КоличествоКМ)+ """,
			|""code_type"":""";
			Если Стр.ВидСИ=Перечисления.ВидСИ_ХамелеонЦРПТ.GLUED Тогда
				
				ТекстДокумент=ТекстДокумент+"GLUEABLE""";
			ИначеЕсли Стр.ВидСИ=Перечисления.ВидСИ_ХамелеонЦРПТ.HINGED Тогда
			
				ТекстДокумент=ТекстДокумент+"MOUNTABLE""";
			Иначе
				ТекстДокумент=ТекстДокумент+"PRINTABLE""";
				
			КонецЕсли;
			
			ТекстДокумент=ТекстДокумент+",
			|""serial_num_type"": """;
			Если Стр.СпособФормированияСН=перечисления.СпособФормированияСН_ХамелеонЦРПТ.ОператорИСМП Тогда
				ТекстДокумент=ТекстДокумент+"OPERATOR""";
				
			Иначе
				ТекстДокумент=ТекстДокумент+"SELF_MADE""";
				
			КонецЕсли;
			
			ТекстДокумент=ТекстДокумент+",			
			|            ""serial_numbers"":  [";
			
			НСтр=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
			Для Каждого Стр_1 Из НСтр Цикл
				Если ЗначениеЗаполнено(Стр_1.СерийныйНомер) Тогда
					ТекстДокумент=ТекстДокумент+""""+			Стр_1.СерийныйНомер+""",";
				КонецЕсли;
			Конеццикла;
			
			ТекстДокумент=ТекстДокумент+"],
			|""marking_type"":""";
			Если Стр.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаПотребительскуюУпаковку Тогда
				ТекстДокумент=ТекстДокумент+"PRODUCT_PACKAGE""";
			ИначеЕсли Стр.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаТовар Тогда
				ТекстДокумент=ТекстДокумент+"PRODUCT""";
			
			ИначеЕсли Стр.ВидМаркировки=Перечисления.ВидМаркировки_ХамелеонЦРПТ.НаТоварныйЯрлык Тогда
				ТекстДокумент=ТекстДокумент+"PRODUCT_LABEL""";
			Конецесли;
			ТекстДокумент=ТекстДокумент+"}";			
		Конеццикла;
ТекстДокумент=ТекстДокумент+"]  }";
			Попытка
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(ТекстДокумент);
				NNN=ПрочитатьJSON(ЧтениеJSON);
			Исключение
				Сообщить(ОписаниеОшибки());
//				Сообщить("Текстовая строка "+ТекстJSON+" не соответствует шаблону JSON");
				Возврат "";
			КонецПопытки;


	Возврат ТекстДокумент	
Конецфункции



Функция НаСервереФормируемЗаказ_ОбувьСУЗ(Thumbprint_1,Объект)
	ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	
	Массив=Новый Массив;
	
		Объект.СУЗОбувь=Истина;
	
	
		Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();

		Чтен.ЗаписатьИмяСвойства("@class");
		Чтен.ЗаписатьЗначение("com.equiron.sitemanager.api.v2.model.order.OrderDtoLight");
		
		Чтен.ЗаписатьИмяСвойства("inn");
		Чтен.ЗаписатьЗначение(СокрЛП(Объект.Организация.ИНН));
				
		Чтен.ЗаписатьИмяСвойства("contractNumber");
		Чтен.ЗаписатьЗначение(СокрЛП(Объект.НомерДоговораСОператором));
		Чтен.ЗаписатьИмяСвойства("contractDate");
		Чтен.ЗаписатьЗначение(Формат(Объект.ДатаДоговораСОператором,"ДФ=""гггг-ММ-дд"""));
		Чтен.ЗаписатьИмяСвойства("contactPerson");
		Чтен.ЗаписатьЗначение(Объект.ТекущийПользователь.КонтактноеЛицо);
		
		Чтен.ЗаписатьИмяСвойства("createMethodType");
		чтен.ЗаписатьЗначение("SELF_MADE");
		
		Чтен.ЗаписатьИмяСвойства("products");
		Чтен.ЗаписатьНачалоМассива();
		СпособВыпускаТоваров="";
	Для Каждого Стр Из Объект.Товары Цикл
			Чтен.ЗаписатьНачалоОбъекта();
			//Если НЕ ЗначениеЗаполнено(Стр.ID) Тогда
				Стр.ИДСУЗ=xmlString(Новый УникальныйИдентификатор());
			//	КонецЕсли;
				Чтен.ЗаписатьИмяСвойства("orderLineId");
				Чтен.ЗаписатьЗначение(Стр.ИДСУЗ);
			
				Чтен.ЗаписатьИмяСвойства("gtin");
				Чтен.ЗаписатьЗначение(дополнитьСтроку(Стр.GTIN.GTIN));
				
				
			//	Если Объект.СпособВыпускаТоваров<>Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.МаркировкаОстатков Тогда
			//		
			//		
			//Если ТипЗнч(Стр.КодТНВЭД)=Тип("Строка") Тогда
			//		Чтен.ЗаписатьИмяСвойства("codeTnVed");
			//		
			//	
			//		Чтен.ЗаписатьЗначение(Сред(xmlString(Стр.КодТНВЭД),1,4));
			//		ИначеЕсли ТипЗнч(Стр.КодТНВЭД)=Тип("СправочникСсылка.КодТНВЭД_ХамелеонЦРПТ") Тогда

			//		Чтен.ЗаписатьИмяСвойства("codeTnVed");
			//		
			//	
			//		Чтен.ЗаписатьЗначение(Сред(xmlString(Стр.КодТНВЭД.Код),1,4));
			//	КонецЕсли;
			//	КонецЕсли;
				
				
				Чтен.ЗаписатьИмяСвойства("identificationType");
					
				Чтен.ЗаписатьЗначение(xmlString(Стр.ВидСИ));
				
				
				Чтен.ЗаписатьИмяСвойства("releaseMethodType");
				//Если Стр.СпособВыпускаТоваров="Остаток" Тогда
				
		Если Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.МаркировкаОстатков Тогда
				
				Чтен.ЗаписатьЗначение("REMAINS");
				
			ИначеЕсли Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ВвезенВРФ Тогда
				Чтен.ЗаписатьЗначение("IMPORT");
			ИначеЕсли Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.Перемаркировка Тогда
				Чтен.ЗаписатьЗначение("REMARK");
			Иначе
				Чтен.ЗаписатьЗначение("PRODUCTION");
				
			КонецЕсли;
			СпособВыпускаТоваров=Стр.СпособВыпускаТоваров;
				Чтен.ЗаписатьИмяСвойства("quantity");
				Чтен.ЗаписатьЗначение(xmlString(Стр.КоличествоКМ));

				Чтен.ЗаписатьИмяСвойства("serialNumberType");
			Если Стр.СпособФормированияСН=перечисления.СпособФормированияСН_ХамелеонЦРПТ.ОператорИСМП Тогда
				Чтен.ЗаписатьЗначение("OPERATOR");
			//	Чтен.ЗаписатьИмяСвойства("serialNumbers");
			//	Чтен.ЗаписатьЗначение("null");
				
			Иначе
				Чтен.ЗаписатьЗначение("SELF_MADE");
				чтен.ЗаписатьИмяСвойства("serialNumbers");
				чтен.ЗаписатьНачалоМассива();
						НСтр=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
				БылаПозиция=Ложь;
			Для Каждого Стр_1 Из НСтр Цикл
				Если ЗначениеЗаполнено(Стр_1.СерийныйНомер) Тогда
					
					чтен.ЗаписатьЗначение(Стр_1.СерийныйНомер)
					
				КонецЕсли;
			Конеццикла;
			    чтен.ЗаписатьКонецМассива();
			         КонецЕсли;
				Чтен.ЗаписатьИмяСвойства("markingType");
				чтен.ЗаписатьЗначение("PRODUCT");
				Чтен.ЗаписатьИмяСвойства("createMethodType");
				чтен.ЗаписатьЗначение("SELF_MADE");
				
				Чтен.ЗаписатьИмяСвойства("receiveMethodType");
				чтен.ЗаписатьЗначение("ELECTRONIC");
					
				Чтен.ЗаписатьИмяСвойства("productionLine");
				чтен.ЗаписатьЗначение("1");
				Чтен.ЗаписатьИмяСвойства("templateId");
				чтен.ЗаписатьЗначение(1);
				
	
			
			Чтен.ЗаписатьКонецОбъекта();
				
				
		Конеццикла;
		Чтен.ЗаписатьКонецМассива();
				Чтен.ЗаписатьИмяСвойства("releaseMethodType");
		Если Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.МаркировкаОстатков Тогда
				
				Чтен.ЗаписатьЗначение("REMAINS");
				
			ИначеЕсли Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ВвезенВРФ Тогда
				Чтен.ЗаписатьЗначение("IMPORT");
		Иначе
				Чтен.ЗаписатьЗначение("PRODUCTION");
				
			КонецЕсли;
		
		//Объект._Order_ID=xmlString(Объект.Ссылка.УникальныйИдентификатор());
			//	Чтен.ЗаписатьИмяСвойства("productionOrderId");
			//	чтен.ЗаписатьЗначение(xmlString(Объект._Order_ID));
		
			Чтен.ЗаписатьКонецОбъекта();
		
		 		
		Текст=Чтен.Закрыть();
	Массив.Добавить(Новый Структура("Текст,Идентификатор",Текст));
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;
//	 КонецциКла;
	
	
	Возврат Массив;

Конецфункции

Процедура ОтпрваитьШины(Thumbprint_1,Объект)
	РаботатьНаV1=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().РаботатьНаV1;
	ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	
	//Thumbprint_1=ПолучитьИзПользователя();	
		Если Не ЗначениеЗаполнено(Thumbprint_1) Тогда
			Возврат;
		КонецЕслИ;
	
	//Если Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Обувь") Тогда
//		СформироватьФайлДляОтправки_1=НаСервереФормируемЗаказ_ОбувьСУЗ(Thumbprint_1)[0];
	
	//Иначе
		СформироватьФайлДляОтправки_1=НаСервереФормируемЗаказ_Шины(Объект,Thumbprint_1);
		//();		
	//КонецЕсли;
	СформироватьФайлДляОтправки_3=СформироватьФайлДляОтправки_1;
//	НеПрошлаПроверка21(СформироватьФайлДляОтправки);
//Для Каждого СформироватьФайлДляОтправки_3 ИЗ СформироватьФайлДляОтправки_1 Цикл
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки_3,Символы.ПС,"");
		СформироватьФайлДляОтправки=СтрЗаменить(СформироватьФайлДляОтправки,Символы.ВК,"");
	
	Подписанный="";
	Попытка
	ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки,Thumbprint_1,Подписанный,Истина);
	
	//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//Подписанный,КодировкаТекста.UTF8,Ложь));
	
			Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
	Исключение
КонецПопытки;
	
	//Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
	//СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
	//			Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
	//		Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
	//		Добав=СтрЗаменить(Добав,"\r\n","");

	Тело=СформироватьФайлДляОтправки;
		АдресРаздробить=Thumbprint_1.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
		
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
			
			
			
			
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			//ПоказатьПредупреждение(,"В пользователе не заполнен адрес СУЗ");
			Возврат;
			
		КонецЕсли;
	
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;
			
			
		Если РаботатьНаV1=Истина Тогда
		HTTPЗапрос=Новый HTTPЗапрос("api/orders");
			
		
		
		
	Иначе
		Если не ЗначениеЗаполнено(Объект.СпособИзготовленияСИ) ИЛИ Объект.СпособИзготовленияСИ=
			ПредопределенноеЗначение("Перечисление.СпособИзготовленияСИ_ХамелеонЦРПТ.Самостоятельно") ТОгда
			HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/orders?omsId="+Thumbprint_1.ИдентификаторСУЗ);
		Иначе
			HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/orders?omsId="+Thumbprint_1.ИдентификаторСУЗ+"&contractorId="+ИДСерв(Объект));
			
		КонецЕсли;
//		HTTPЗапрос=Новый HTTPЗапрос("api/v2/"+Thumbprint_1.СайтКСУЗ+"/orders?omsId="+Thumbprint_1.ИдентификаторСУЗ);
	КонецЕсли;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
								ТокенСУЗ=ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1);

	HTTPЗапрос.Заголовки.Вставить("clientToken",ТокенСУЗ);
	Если ЗначениеЗаполнено(Подписанный) тогда
		HTTPЗапрос.Заголовки.Вставить("X-Signature",Подписанный);
	КонецЕсли;

	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр_Ответ(Объект,Текст1);
	КонецЕсли;
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
		
//		Если Thumbprint_1.НаименованиеСтенда="Питьевая вода"  Тогда
//			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
//				//ЧтениеJSON = Новый ЧтениеJSON;
//				//ЧтениеJSON.УстановитьСтроку(Текст1);
//			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
////				НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
//			Объект._Order_ID=NNN.orderId;
//			
//			HTTPЗапрос=Новый HTTPЗапрос("webapi/v1/orders/"+Объект._Order_ID+"/signed");
//			HTTPЗапрос.Заголовки.Вставить("Cookie",куки);
//			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
//			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
//			Текст1=Ответ.ПолучитьТелоКакСтроку();
//			
//			Объект.ИспользоватьОтчетОбИспользовании=Истина;
//			Если Ответ.КодСостояния=200 Тогда
//				
//				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
//				
//				Подписанный="";
//				Попытка
//					ПодписатьФайл(Thumbprint_1.Внешняя,NNN.orderInfoInBase64,Thumbprint_1.Thumbprint_1,Подписанный,Истина,Истина);
//					
//					//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
//					//Подписанный,КодировкаТекста.UTF8,Ложь));
//					
//							Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
//							Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"\r\n");
//							Подписанный=СтрЗаменить(Подписанный,"\r\n","");
//				Исключение
//				КонецПопытки;
//				
//				Тело=СоздатьТелоПо(NNN,Подписанный);
//				
//				HTTPЗапрос=Новый HTTPЗапрос("webapi/v1/orders/"+Объект._Order_ID+"/sign");
//				HTTPЗапрос.Заголовки.Вставить("Cookie",куки);
//				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
//				HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
//				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
//				

//			КонецЕслИ;
//			
//			

//			
//		Иначе
			Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отправлен");
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
//				НСтр=Объект.Товары.НайтиПоИдентификатору(СформироватьФайлДляОтправки_3.Идентификатор);
				Объект._Order_ID=NNN.orderId;
				
		//	КонецЕсли;

			//Объект._Order_ID=NNN.order_id;
	
		ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
	Иначе
		//	Если УжеОтправили=Истина Тогда
				Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
					Попытка
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
							
							Объект.ОшибкаОтправки=NNN.error_message;
						Исключение
							Попытка
								Объект.ОшибкаОтправки=NNN.error_description;
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								Сообщить(Текст1);
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	//Если Ответ.КодСостояния<>200 Тогда
	//	
	//	Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
	//	  Текст1=Ответ.ПолучитьТелоКакСтроку();
	//		Попытка
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//			Объект.ОшибкаОтправки=NNN.error_message;
	//			
	//		Исключение
	//		КонецПопытки;
	//	Иначе
	//		Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтвета");
	//			ЧтениеJSON = Новый ЧтениеJSON;
	//			ЧтениеJSON.УстановитьСтроку(Текст1);
	//			NNN=ПрочитатьJSON(ЧтениеJSON);
	//		Объект._Order_ID=NNN.order_id;
	//КонецЕсли;
	Объект.Записать();
	
	
КонецПроцедуры

Функция ИДСерв(Объект)
	Возврат Объект.СервисПровайдер.guid_СервисПровайдера;
КонецФункции

Функция НаСервереФормируемЗаказ_Шины(Объект,Thumbprint_1)
	Использовать15ШаблонДляАльтернативногоТабакаСУказаниемМРЦ=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().Использовать15ШаблонДляАльтернативногоТабакаСУказаниемМРЦ;
	РаботатьНаV1=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().РаботатьНаV1;
	ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	
	Если Объект.Товары.Количество()=0 Тогда
		Возврат "";
	КонецЕсли;
	//МассивФайлов=Новый Массив;
//Для Каждого Стр Из Объект.Товары Цикл
	
	
		Чтен=Новый  ЗаписьJSON;
		Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
		Чтен.ЗаписатьНачалоОбъекта();
		              Стр=Объект.Товары[0];
		Если Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Шины  ИЛИ
			Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Свет 
			ИЛИ 			Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь 
			ИЛИ 			Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Одежда 
			ИЛИ Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Молоко
			
			ИЛИ Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Велосипеды
			ИЛИ Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.ПитьеваяВода
			ИЛИ Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.КреслаКоляски
			ИЛИ Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Пиво
			
			ИЛИ Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Парфюм

			Тогда
			
			
			Чтен.ЗаписатьИмяСвойства("contactPerson");
			Чтен.ЗаписатьЗначение(Объект.ТекущийПользователь.КонтактноеЛицо);
			
			
				Чтен.ЗаписатьИмяСвойства("releaseMethodType");
		Если Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.МаркировкаОстатков Тогда
				
				Чтен.ЗаписатьЗначение("REMAINS");
				
			ИначеЕсли Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ВвезенВРФ Тогда
				Чтен.ЗаписатьЗначение("IMPORT");
		ИначеЕсли Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.Перемаркировка Тогда
				Чтен.ЗаписатьЗначение("REMARK");
			Иначе
				Чтен.ЗаписатьЗначение("PRODUCTION");
				
			КонецЕсли;
			
			Чтен.ЗаписатьИмяСвойства("remainsAvailable");
			Чтен.ЗаписатьЗначение(Объект.ТоварПроизведенПриобретенДо1032020);
			Чтен.ЗаписатьИмяСвойства("remainsImport");
			Чтен.ЗаписатьЗначение(Объект.ТоварВвезенВРФПосле1032020 );
							
			//Если Объект.ТоварВвезенВРФПосле1032020 Тогда
				
			//КонецЕсли;
			
					
			
				Чтен.ЗаписатьИмяСвойства("createMethodType");
				
				Если Не ЗначениеЗаполнено(Объект.СпособИзготовленияСИ)
					ИЛИ Объект.СпособИзготовленияСИ=Перечисления.СпособИзготовленияСИ_ХамелеонЦРПТ.Самостоятельно Тогда
				
						Чтен.ЗаписатьЗначение("SELF_MADE");
				Иначе
					Если Объект.СпособИзготовленияСИ=Перечисления.СпособИзготовленияСИ_ХамелеонЦРПТ.CL Тогда	
					
						Чтен.ЗаписатьЗначение("CL");
					ИначеЕсли Объект.СпособИзготовленияСИ=Перечисления.СпособИзготовленияСИ_ХамелеонЦРПТ.CM Тогда	
					
						Чтен.ЗаписатьЗначение("CM");
					ИначеЕсли Объект.СпособИзготовленияСИ=Перечисления.СпособИзготовленияСИ_ХамелеонЦРПТ.ЦентрЭтикетированияИМаркировки Тогда	
					
						Чтен.ЗаписатьЗначение("CEM");
					Конецесли;
					
					Если ЗначениеЗаполнено(Объект.СервисПровайдер.guid_СервисПровайдера) Тогда
						Чтен.ЗаписатьИмяСвойства("contractorId");
						Чтен.ЗаписатьЗначение(Объект.СервисПровайдер.guid_СервисПровайдера);
						Чтен.ЗаписатьИмяСвойства("serviceProviderId");
						Чтен.ЗаписатьЗначение(Объект.СервисПровайдер.guid_СервисПровайдера);
						
						
					КонецЕсли;
					
					Чтен.ЗаписатьИмяСвойства("productGroupType");
					Чтен.ЗаписатьЗначение(Врег(Thumbprint_1.Что));
					
					
					
					
					
						
				КонецЕсли;
					
				Чтен.ЗаписатьИмяСвойства("contractNumber");
				Чтен.ЗаписатьЗначение(СокрЛП(Объект.НомерДоговораСОператором));
				Чтен.ЗаписатьИмяСвойства("contractDate");
				Чтен.ЗаписатьЗначение(Формат(Объект.ДатаДоговораСОператором,"ДФ=""гггг-ММ-дд"""));
					
					
					
			ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак 
				ИЛИ
				Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак Тогда
			Чтен.ЗаписатьИмяСвойства("contactPerson");
			Чтен.ЗаписатьЗначение(Объект.ТекущийПользователь.КонтактноеЛицо);
			
			
				Чтен.ЗаписатьИмяСвойства("releaseMethodType");
		Если Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.МаркировкаОстатков Тогда
				
				Чтен.ЗаписатьЗначение("REMAINS");
				
			ИначеЕсли Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ВвезенВРФ Тогда
				Чтен.ЗаписатьЗначение("IMPORT");
		ИначеЕсли Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.Перемаркировка Тогда
				Чтен.ЗаписатьЗначение("REMARK");
			Иначе
				Чтен.ЗаписатьЗначение("PRODUCTION");
				
			КонецЕсли;
			
				Чтен.ЗаписатьИмяСвойства("createMethodType");
				
						Чтен.ЗаписатьЗначение("SELF_MADE");
			
		//	Чтен.ЗаписатьИмяСвойства("expectedStartDate");
		//	Чтен.ЗаписатьЗначение(Формат(Объект.Дата,"ДФ=""гггг-ММ-дд"""));
			Продукция=Объект.Товары[0].GTIN;
			Если Продукция.ИННПроизводителяИмпортёра.ИНН=Объект.Организация.ИНН Тогда
			
				Чтен.ЗаписатьИмяСвойства("factoryAddress");
				Чтен.ЗаписатьЗначение(Объект.Организация.АдресМестонахождения);
				
				Чтен.ЗаписатьИмяСвойства("factoryCountry");
				Если ЗначениеЗаполнено(Объект.Организация.Страна) тогда
					Чтен.ЗаписатьЗначение(Объект.Организация.Страна.Наименование);
				Иначе
					Чтен.ЗаписатьЗначение("Россия");
				КонецЕсли;
				
				Чтен.ЗаписатьИмяСвойства("factoryId");
				Чтен.ЗаписатьЗначение(Объект.Организация.ИНН);
				
						
			
				Чтен.ЗаписатьИмяСвойства("factoryName");
				Чтен.ЗаписатьЗначение(Объект.Организация.Наименование);
				
				
			Иначе
			
				Чтен.ЗаписатьИмяСвойства("factoryAddress");
				Чтен.ЗаписатьЗначение(Продукция.ИННПроизводителяИмпортёра.ЮридическийАдрес);
				
				Чтен.ЗаписатьИмяСвойства("factoryCountry");
				Если ЗначениеЗаполнено(Продукция.СтранаПроизводства) тогда
					Чтен.ЗаписатьЗначение(Продукция.СтранаПроизводства.Наименование);
				Иначе
					Чтен.ЗаписатьЗначение("Россия");
				КонецЕсли;
				
				Чтен.ЗаписатьИмяСвойства("factoryId");
				Чтен.ЗаписатьЗначение(Продукция.ИННПроизводителяИмпортёра.ИНН);
				
						
			
				Чтен.ЗаписатьИмяСвойства("factoryName");
				Чтен.ЗаписатьЗначение(Продукция.ИННПроизводителяИмпортёра.Наименование);
			КонецЕсли;
			
			Чтен.ЗаписатьИмяСвойства("poNumbere");
			Чтен.ЗаписатьЗначение(Объект.Номер);
			
			Чтен.ЗаписатьИмяСвойства("productCode");
			Чтен.ЗаписатьЗначение(Стр.GTIN.Код);
			
			Чтен.ЗаписатьИмяСвойства("productDescription");
			Чтен.ЗаписатьЗначение(Стр.GTIN.Наименование);
			
			Чтен.ЗаписатьИмяСвойства("productionLineId");
			Чтен.ЗаписатьЗначение("1");
		ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Фармацевтика Тогда
			Чтен.ЗаписатьИмяСвойства("freeСode");
			
			Чтен.ЗаписатьЗначение(Объект.КМНеПодлежитОплате);
		
		КонецЕсли;
		
		Чтен.ЗаписатьИмяСвойства("paymentType");
		Если Объект.ТипОплаты=Перечисления.ТипОплаты_ХамелеонЦРПТ.ОплатаПоНанесению 
			ИЛИ Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Молоко 
			Тогда
			Чтен.ЗаписатьЗначение(2);
		Иначе
			Чтен.ЗаписатьЗначение(1);
		КонецЕсли;
		
		Чтен.ЗаписатьИмяСвойства("products");
		Чтен.ЗаписатьНачалоМассива();
		Для Каждого Стр Из Объект.Товары Цикл
		
			Чтен.ЗаписатьНачалоОбъекта();
			
			
			Если Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.ПитьеваяВода Тогда
				Чтен.ЗаписатьИмяСвойства("group");
				Чтен.ЗаписатьЗначение("WATER");
			КонецЕсли;
			
				Чтен.ЗаписатьИмяСвойства("gtin");
				Если Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак
					ИЛИ Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак
					Тогда
				
					
					Если Объект.ШаблонКМ_Табак=Перечисления.Шаблоны_подписи_кодов_КМ_Табак_ХамелеонЦРПТ.Блок Тогда
						Если ЗначениеЗаполнено(Стр.GTIN.GTINУпаковки) Тогда
							Чтен.ЗаписатьЗначение(дополнитьСтроку(Стр.GTIN.GTINУпаковки));
						Иначе
							Чтен.ЗаписатьЗначение(дополнитьСтроку(Стр.GTIN.GTIN));
							
						КонецЕсли;
						Чтен.ЗаписатьИмяСвойства("mrp");
						КолВБлоке=Стр.gtin.КоличествоВБлоке;
						Если не ЗначениеЗаполнено(КолВБлоке) тогда
							КолВБлоке=10;
						КонецЕсли;
						МаксимальнаяЦена=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(Стр.GTIN.МинимальнаяЦенаНаСигареты*100*КолВБлоке),6,"0");
					 	Чтен.ЗаписатьЗначение(МаксимальнаяЦена);
					Иначе
						Чтен.ЗаписатьЗначение(дополнитьСтроку(Стр.GTIN.GTIN));
						Чтен.ЗаписатьИмяСвойства("mrp");
						МаксимальнаяЦена=xmlString(Стр.GTIN.МинимальнаяЦенаНаСигареты*100);
						МаксимальнаяЦена=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(МаксимальнаяЦена,4,"0");
					 	Чтен.ЗаписатьЗначение(МаксимальнаяЦена);
						
					КонецЕсли;
				Иначе		
					Чтен.ЗаписатьЗначение(дополнитьСтроку(Стр.GTIN.GTIN));
					
				КонецЕсли;
				
				Если РаботатьНаV1=Истина Тогда
					
					Стр.ИДСУЗ=xmlString(Новый УникальныйИдентификатор());
				//	КонецЕсли;
					Чтен.ЗаписатьИмяСвойства("orderLineId");
					Чтен.ЗаписатьЗначение(СокрЛП(Стр.ИДСУЗ));
					
					
					Чтен.ЗаписатьИмяСвойства("markingType");
					чтен.ЗаписатьЗначение("PRODUCT");
					
						Чтен.ЗаписатьИмяСвойства("identificationType");
					
					Чтен.ЗаписатьЗначение(xmlString(Стр.ВидСИ));

					Чтен.ЗаписатьИмяСвойства("releaseMethodType");
					//Если Стр.СпособВыпускаТоваров="Остаток" Тогда
				
					Если Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.МаркировкаОстатков Тогда
							
							Чтен.ЗаписатьЗначение("REMAINS");
							
						ИначеЕсли Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.ВвезенВРФ Тогда
							Чтен.ЗаписатьЗначение("IMPORT");
		ИначеЕсли Объект.СпособВыпускаТоваров=Перечисления.СпособВыпускаТоваров_ХамелеонЦРПТ.Перемаркировка Тогда
				Чтен.ЗаписатьЗначение("REMARK");
						Иначе
							Чтен.ЗаписатьЗначение("PRODUCTION");
							
						КонецЕсли;
					
					
				Конецесли;
				
				
				
				Чтен.ЗаписатьИмяСвойства("quantity");
				Чтен.ЗаписатьЗначение(xmlString(Стр.КоличествоКМ));

				Чтен.ЗаписатьИмяСвойства("serialNumberType");
			Если Стр.СпособФормированияСН=перечисления.СпособФормированияСН_ХамелеонЦРПТ.ОператорИСМП Тогда
				Чтен.ЗаписатьЗначение("OPERATOR");
			//	Чтен.ЗаписатьИмяСвойства("serial_numbers");
			//	Чтен.ЗаписатьЗначение("null");
				
			Иначе
				Чтен.ЗаписатьЗначение("SELF_MADE");
				чтен.ЗаписатьИмяСвойства("serialNumbers");
				чтен.ЗаписатьНачалоМассива();
						НСтр=Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НомерСтрокиСвязи",Стр.НомерСтрокиСвязи));
				БылаПозиция=Ложь;
			Для Каждого Стр_1 Из НСтр Цикл
				Если ЗначениеЗаполнено(Стр_1.СерийныйНомер) Тогда
					
					чтен.ЗаписатьЗначение(Стр_1.СерийныйНомер)
					
				КонецЕсли;
		//	Конеццикла;
			
	         Конеццикла;
			    чтен.ЗаписатьКонецМассива();
				
				
			КонецЕсли;
			
			
			Если ЗначениеЗаполнено(Объект.ШаблонЭтикетки.stickers) Тогда
				Чтен.ЗаписатьИмяСвойства("stickerId");
				Чтен.ЗаписатьЗначение(Объект.ШаблонЭтикетки.stickers);
				
			КонецЕсли;
			
			
			
			
			Чтен.ЗаписатьИмяСвойства("templateId");
				Если Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Шины Тогда
				Чтен.ЗаписатьЗначение(7);
			ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Молоко Тогда 
				Чтен.ЗаписатьЗначение(20);
				//Если ЗначениеЗаполнено(Стр.Годендо) тогда
				//	
				//	Если Стр.ДоЧаса Тогда
				//		Чтен.ЗаписатьИмяСвойства("expDate72");
				//		Чтен.ЗаписатьЗначение(Формат(Стр.Годендо,"ДФ=""ггММддЧЧмм"""));
				//	Иначе
				//		Чтен.ЗаписатьИмяСвойства("expDate");
				//		Чтен.ЗаписатьЗначение(Формат(Стр.Годендо,"ДФ=""ггММдд"""));
				//	КонецЕсли;
				//	
				//	
				//Иначе
				//	//Чтен.ЗаписатьИмяСвойства("expDate");
				//	//Чтен.ЗаписатьЗначение("010101");
				//		
				//	
				//КонецЕсли;
				
				
			ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Одежда Тогда 
				Чтен.ЗаписатьЗначение(10);
			ИначеЕсли 
				Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак
				Тогда 
				
				Если Использовать15ШаблонДляАльтернативногоТабакаСУказаниемМРЦ=Истина Тогда
					Если Объект.ШаблонКМ_Табак=Перечисления.Шаблоны_подписи_кодов_КМ_Табак_ХамелеонЦРПТ.Блок Тогда
						Чтен.ЗаписатьЗначение(14);
					Иначе
						Чтен.ЗаписатьЗначение(15);
					КонецЕсли;
				Иначе
					Чтен.ЗаписатьЗначение(14);
				КонецЕсли;
					
					Чтен.ЗаписатьИмяСвойства("cisType");
						

				Если Объект.ШаблонКМ_Табак=Перечисления.Шаблоны_подписи_кодов_КМ_Табак_ХамелеонЦРПТ.Блок Тогда
				    Чтен.ЗаписатьЗначение(xmlString("GROUP"));
				

				Иначе
				    Чтен.ЗаписатьЗначение("UNIT");
					
				КонецЕсли;

				//Иначе
				//	Чтен.ЗаписатьЗначение(4);
				//КонецЕсли;
			ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак
				Тогда 
				
				Если Объект.ШаблонКМ_Табак=Перечисления.Шаблоны_подписи_кодов_КМ_Табак_ХамелеонЦРПТ.Блок Тогда
					Чтен.ЗаписатьЗначение(3);
				Иначе
					Чтен.ЗаписатьЗначение(4);
				КонецЕсли;
			
				
//				Чтен.ЗаписатьЗначение(3);
			ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Фармацевтика Тогда 
				Если Объект.ШаблонКМ=Перечисления.Шаблоны_подписи_кодов_КМ_ХамелеонЦРПТ._88_Фармацевтика Тогда
					Чтен.ЗаписатьЗначение(2);
				Иначе
					Чтен.ЗаписатьЗначение(5);
				КонецЕсли;
			ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Фото Тогда 
				Чтен.ЗаписатьЗначение(8);
			ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Парфюм Тогда 
				Чтен.ЗаписатьЗначение(9);
			ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Обувь Тогда 
				Чтен.ЗаписатьЗначение(1);
			ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Велосипеды Тогда 
				Чтен.ЗаписатьЗначение(11);
			ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.ПитьеваяВода Тогда 
				Чтен.ЗаписатьЗначение(16);
			ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.КреслаКоляски Тогда 
				Чтен.ЗаписатьЗначение(12);
			ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Пиво Тогда 
				Чтен.ЗаписатьЗначение(18);
			
			КонецЕсли;
			
			
			
			  Если 
				Объект.ТипПродукции<>Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак
				Тогда 

			
				Чтен.ЗаписатьИмяСвойства("cisType");
				
				
				

				Если ЗначениеЗАполнено(Стр.ТипКодаМаркировки) тогда
				    Чтен.ЗаписатьЗначение(xmlString(Стр.ТипКодаМаркировки));
				

				Иначе
				    Чтен.ЗаписатьЗначение("UNIT");
					
				КонецЕсли;
				
			кОНЕЦЕСЛИ;
			
			Чтен.ЗаписатьКонецОбъекта();
				
				
		Конеццикла;
		Чтен.ЗаписатьКонецМассива();
		
		Если Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.ПитьеваяВода Тогда
			
			Чтен.ЗаписатьИмяСвойства("@class");
			//Чтен.ЗаписатьЗначение(Объект.Организация.subjectIdФармацевтика);
			Чтен.ЗаписатьЗначение("com.equiron.sitemanager.api.v2.model.order.OrderDtoWater");
		
		ИначеЕсли Объект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Фармацевтика Тогда
		
			Чтен.ЗаписатьИмяСвойства("subjectId");
			//Чтен.ЗаписатьЗначение(Объект.Организация.subjectIdФармацевтика);
			Чтен.ЗаписатьЗначение(Объект.ТекущийПользователь.РегисстрационныйНомер);
		КонецЕсли;

					
			Чтен.ЗаписатьКонецОбъекта();
					
		
		
		Текст=Чтен.Закрыть();
//	     МассивФайлов.Добавить(Новый Структура("Текст,Идентификатор",Текст,Стр.ПолучитьИдентификатор()));
	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
		ЗапишемВРегистр(Объект,Текст);
	КонецЕсли;
	
	// Конеццикла;
	
	
	Возврат Текст;
Конецфункции

Процедура НаСервереОпределеяемТипСпособа(Объект)
	Объект.СпособИзготовленияСИ=Объект.СервисПровайдер.СпособИзготовления;
	Если Не ЗначениеЗаполнено(Объект.СпособИзготовленияСИ) тогда
		Объект.СпособИзготовленияСИ=Перечисления.СпособИзготовленияСИ_ХамелеонЦРПТ.Самостоятельно
	КонецЕсли;
КонецПроцедуры

Процедура НеобходимоВсеНаСервереДелать(ТекстДокумента,ID,Объект)
	 			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
						//Стр.КоличествоПолучено=Стр.КоличествоКМ;
							Для Каждого Стр_1 Из NNN Цикл
		//						ЗаписатьВДокумент(NNN);
								Добав=Объект.КМИзAPI.Добавить();
								 //СпрОД=СоздатьНайтиИДСТРОКИ(Стр);
								//Добав.Order_Id_Line=СпрОД;
								
								
								//ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1);
								ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1);
								Добав.НомерКМ=КодСтрСервер_Дв(ДвоичнД);
								
					cis=Сред(СтрЗаменить(Добав.НомерКМ,"%1D",""),1,38);
					   	Если Сред(cis,32,3)<>"240" Тогда
								//cis=Сред(cis,1,31);
								cis=Сред(Добав.НомерКМ,1,Найти(Добав.НомерКМ,"%1D")-1);
								cis=РаскодироватьСтроку(cis,СпособКодированияСтроки.КодировкаURL);
							Иначе
								
							cis=РаскодироватьСтроку(cis,СпособКодированияСтроки.КодировкаURL);
								
							КонецЕсли;
				Добав.НомерКМ_Короткий=cis;				
								
								
								Добав.Order_Id_Line=ID;
							Конеццикла;
КонецПроцедуры

Функция КодСтрСервер_Дв(ДвД)
	//Добав=ПолучитьСтрокуИзДвоичныхДанных(ДвД);
	Добав=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(ДвД);
	Возврат КодироватьСтроку(Добав,СпособКодированияСтроки.КодировкаURL);
Конецфункции

Процедура НаСервереСДобавлениемРегистра(ТекстДокумента,ID,Объект)
	 NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
	МассивМарок=Новый Массив;
								
	Если ТипЗнч(NNN)=Тип("Массив") тогда							
			Для Каждого Стр_1 Из NNN Цикл
//						ЗаписатьВДокумент(NNN);
//										Добав=Объект.КМИзAPI.Добавить();
				 //СпрОД=СоздатьНайтиИДСТРОКИ(Стр);
				//Добав.Order_Id_Line=СпрОД;
				
				
				//ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1);
				ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1);
 				 НомерКМ=КодСтрСервер_Дв(ДвоичнД);
				 
				 МассивМарок.Добавить(НомерКМ);
				 
				 
			 Конеццикла;
		 Иначе
			 Для каждого Стр_1 Из NNN.codes Цикл
				 
				//ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1);
				ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1);
 				 НомерКМ=КодСтрСервер_Дв(ДвоичнД);
				 
				 МассивМарок.Добавить(НомерКМ);
				 
				 
				 
				Конеццикла;
			 
			 
			Конецесли;
								 ЗаписатьВРегистр(Объект,МассивМарок,ID);
									 
КонецПроцедуры

Процедура ЗаписатьВРегистр(Объект,МассивМарок,ИД)
	ТаблицаЗн=Новый ТаблицаЗначений;
	ТаблицаЗн.Колонки.Добавить("ДокументЗаказа");
	ТаблицаЗн.Колонки.Добавить("НомерКМ");
	ТаблицаЗн.Колонки.Добавить("НомерКМ_Короткий");
	ТаблицаЗн.Колонки.Добавить("OrderID");
	Для Каждого Стр Из МассивМарок Цикл
		Добав=ТаблицаЗн.Добавить();
		Добав.НомерКМ=Стр;
		Добав.ДокументЗаказа =Объект.Ссылка;
		
		
		cis=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьКороткийНомерКМ(Добав.НомерКМ,Объект.Типпродукции);
		Добав.НомерКМ_Короткий=cis;				
		
		
		Добав.OrderID=ИД;
	КонецЦИкла;
		
	РегДв=РегистрыСведений.НомераКМ_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Загрузить(ТаблицаЗн);
	РегДв.Записать(Ложь);
	//Д=РегДв.Добавить();

КонецПроцедуры

Процедура ЗапишемВРегистр_Марки(ТекстДокумент,НомерСтроки,Объект)
	

	РегДв=РегистрыСведений.ОтправленныеПолученные_ХамелеонЦРПТ.СоздатьНаборЗаписей();
	РегДв.Отбор.Документ.Установить(Объект.Ссылка);
	ОтборПоВиду="Получили марки "+xmlString(Новый УникальныйИдентификатор());
	РегДв.Отбор.Вид.Установить(ОтборПоВиду);
	Добав=РегДв.Добавить();
	Добав.Документ=ОБъект.Ссылка;
	Добав.Вид=ОтборПоВиду;
	Добав.Файл=Новый ХранилищеЗначения(ТекстДокумент,Новый СжатиеДанных(9));
	РегДв.Записать(Истина);
КонецПроцедуры

Функция Вргеистре(КоличествоОгранчений,ОБъект)
	
	КоличествоОгранчений=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().КоличествоКМВЗаказеОтображаемое;
	
	Если Не ЗначениеЗаполнено(ОБъект.Ссылка) Тогда
		Возврат Ложь;
	Конецесли;
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НомераКМ_ХамелеонЦРПТ.НомерКМ
		|ИЗ
		|	РегистрСведений.НомераКМ_ХамелеонЦРПТ КАК НомераКМ_ХамелеонЦРПТ
		|ГДЕ
		|	НомераКМ_ХамелеонЦРПТ.ДокументЗаказа = &ДокументЗаказа";
	
	Запрос.УстановитьПараметр("ДокументЗаказа", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Возврат ВыборкаДетальныеЗаписи.Количество()>0
	
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	КонецФункции
	
Процедура ПолучитьКМИзAPI_Молоко_CSV(Объект,Пользователь)
	// Вставить содержимое обработчика.
	
		ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;

   
	
    
	Thumbprint_1=ПолучитьИзПользователя(Пользователь);	
		    ПараметрыДлякилента=Thumbprint_1;
			
			
		АдресРаздробить=ПараметрыДлякилента.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			Сообщить("В пользователе не заполнен адрес СУЗ");
			Возврат;
			
		КонецЕсли;
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
			
			СРегистра="";
			СерийныйНомер="";
			
		Куки=ПолучитькукиВСУЗ(Thumbprint_1,,СРегистра,СерийныйНомер);
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;

			
			
			 	
						
				КоличествоОгранчений=0;
				ВРегистре=Вргеистре(КоличествоОгранчений,ОБъект);
					Если НЕ ВРегистре И Объект.Товары.Итог("КоличествоКМ")>КоличествоОгранчений Тогда
//						 Состояние("Получение "+Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
//						 0);
						
						НомерПП=0;
						Для Каждого Стр Из Объект.Товары Цикл
							НомерПП=НомерПП+1;
							Стр.СтатусСтроки="";
							Стр.ОшибкаПолучения="";
							//Если НЕ ЗначениеЗаполнено(Стр.ИДСУЗ)  Тогда
							//	Продолжить;
							//КонецЕсли;
							Пока Стр.КоличествоКМ-Стр.КоличествоПолучено>0 Цикл
								
								Получить=Мин(Стр.КоличествоКМ-Стр.КоличествоПолучено,10000);
								
								
								
								
								
								
								//HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
								//Формат(Получить,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								
								Объем="";
								Если Не ЗначениеЗАполненО(Стр.ОБъем) тогда
									Объем=Стр.Объем*Получить/Стр.КоличествоКМ;
									Объем=Формат(Объем,"ЧГ=");
								КонецЕсли;
								
								HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/orders/"+
								Объект._Order_ID+"/codes/"+ПолучитьGTIN(Объект,Стр.GTIN)+"/print/CSV?expirationDate="+Формат(Стр.Годендо,"ДФ=""ггММдд""")+
								"&stickerId=12&accompanyingDocument="+Стр.НомерВСД+Объем+"&quantity="+Формат(Получить,"ЧГ="));
								
								HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
								
								//КонецЕслИ;
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
								
								ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
							//	Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
							//		ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП);
							//	КонецЕсли;
								
								HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/download?filename="+
								СтрЗаменить(СтрЗаменить(текстДокумента,"""",""),"%2F","/"));
								
								HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);


					//	Иначе
	//HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
//
//								Формат(Стр.КоличествоКМ,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
//								КонецЕслИ;


	//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
						//HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
						ТекстДокумента=СтрЗаменить(ТекстДокумента,Символ(29),"<GS>");
								Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
									ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП,Объект);
								КонецЕсли;
								
								//Стр.КоличествоПолучено=Получить;
								 Попытка
									//ЧтениеJSON = Новый ЧтениеJSON;
									//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
									Если Ответ.КодСостояния=200 Тогда
										НеобходимоВсеНаСервереДелать_МОЛОКО(ТекстДокумента,Стр.ID,Стр.ПоследнийБлок,Объект);
										
								//
						                    		 сТР.ОшибкаПолучения="В обработке";
													 
													Стр.СтатусСтроки="В обработке";
											

									   	// ЭтаФорма.Прочитать();
									        	 Стр.КоличествоПолучено=Стр.КоличествоПолучено+Получить; 
///												 Стр.ПоследнийБлок=
												 Если Стр.КоличествоПолучено=Стр.КОличествоКМ Тогда
													 сТР.ОшибкаПолучения="Получено";
													 
													Стр.СтатусСтроки="Получено";
													
										//	КонецЕсли;		
						//Если ОБъект.СУЗОбувь Тогда
								//HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)
								//+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
						//	Иначе
						//		HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"buffer/close?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)
						//		+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
						//		
								
						//	КонецЕсли;
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								Попытка
									Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
								Исключение
							КонецПопытки;
								    КонецЕсли;
																						 
			Объект.Записать(РежимЗаписиДокумента.Проведение);
//												 Состояние("Получено "+Формат(Объект.Товары.Итог("КоличествоПолучено"),"ЧГ=")+" из "+
//												 Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
//												 Окр(Объект.Товары.Итог("КоличествоПолучено")*100/Объект.Товары.Итог("КоличествоКМ")));
										//НайтиВсеOrderlineПоНомеркуКМ();
									Иначе
										
										
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
										
										
										Если NNN.success=Ложь Тогда
										globalErrors="";
										Для Каждого Стр_1 Из NNN.globalErrors Цикл
											globalErrors=globalErrors+Стр_1+"
											|"
										Конеццикла;
										Стр.ОшибкаПолучения=globalErrors;
										Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: EXHAUSTED")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ;
													Стр.СтатусСтроки="Получено";
			Объект.Записать(РежимЗаписиДокумента.Проведение);
													
										//	КонецЕсли;
						//Если ОБъект.СУЗОбувь Тогда
						
						
											
										Конецесли;
										
										Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: PENDING")>0 Тогда
											Возврат;;
										Конецесли;
										
										
										Если Найти(globalErrors,"Not enough balance")>0 Тогда
											Сообщить("Необходимо пополнить баланс в ЦРПТ");
										Конецесли;
										Если Найти(globalErrors,"Not enough balance")>0 Тогда
											Сообщить("Необходимо пополнить баланс в ЦРПТ");
										Конецесли;
	
										Сообщить("Не удалось обработать документ: "+globalErrors);
										
										Если Найти(globalErrors,"Quantity must be less or equals buffer size")>0 Тогда
											
											Дальше=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Buffer size: ")+13));
											ЧислоОсталось=Число(СокрЛП(Сред(Дальше,1,Найти(Дальше,".")-1)));
											Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
			Объект.Записать(РежимЗаписиДокумента.Проведение);
												 НеНадоОбновлятьСтатус=Истина;
											ИначеЕсли Найти(globalErrors,"Требуемое количество ")>0 Тогда
											ЧислоОсталось=Число(СокрЛП(Сред(globalErrors,Найти(globalErrors,"осталось использовать ")+22)));
											Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
			Объект.Записать(РежимЗаписиДокумента.Проведение);
												 НеНадоОбновлятьСтатус=Истина;
								ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше,чем размер буфера")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
			Объект.Записать(РежимЗаписиДокумента.Проведение);
								ИначеЕсли Найти(globalErrors,"DELETE")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ ; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
											
			Объект.Записать(РежимЗаписиДокумента.Проведение);
		ИначеЕСЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Табак")
			ИЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак") Тогда
								 	Сообщить("Возможно указано заказанное количество меньше 2 штук!!");
										Конецесли;
										       Прервать;
									ИначеЕсли NNN.success=Истина Тогда
										   Прервать;
										
									   КонецЕсли;
									   
									    прервать;
									   
									  КонецЕсли; 
								Исключение
									    прервать;
									
									Сообщить("Ошибка "+Ответ.ПолучитьТелоКакСтроку());
								 КонецПопытки;
								
								  
							Конеццикла;
						КонецциклА;
						
					Иначе
//						Состояние("Получение "+Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
//						 0);
					
						НомерПП=0;
						Для Каждого Стр Из Объект.Товары Цикл
							Стр.СтатусСтроки="";
							Стр.ОшибкаПолучения="";
							Если Стр.КоличествоКМ=Стр.КоличествоПолучено Тогда
								Продолжить;
							КонецЕслИ;
						НомерПП=НомерПП+1;
					//	Если ОБъект.СУЗОбувь Тогда
							
	//HTTPЗапрос = Новый HTTPЗапрос("api/v2/tires/codes?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
//	HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
//								Формат(Стр.КоличествоКМ-Стр.КоличествоПолучено,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								Получить=Стр.КоличествоКМ-Стр.КоличествоПолучено;
								Объем="";
								Если ЗначениеЗАполненО(Стр.ОБъем) тогда
									Объем=Стр.Объем*Получить/Стр.КоличествоКМ;
									Объем=Формат(Объем,"ЧГ=");
								КонецЕсли;
								
								HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/orders/"+
								Объект._Order_ID+"/codes/"+ПолучитьGTIN(Объект,Стр.GTIN)+"/print/CSV?expirationDate="+Формат(Стр.Годендо,"ДФ=""ггММдд""")+
								"&accompanyingDocument="+Стр.НомерВСД+Объем+"&quantity="+Формат(Получить,"ЧГ="));
								
								HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);


					//	Иначе
	//HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
//
//								Формат(Стр.КоличествоКМ,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
//								КонецЕслИ;
													HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
						HTTPЗапрос.УстановитьТелоИзСтроки("{}");
						
						Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
						ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
						//Если Ответ.КодСостояния=200 Тогда
								HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/download?filename="+
								СтрЗаменить(СтрЗаменить(текстДокумента,"""",""),"%2F","/"));
								
								HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);


					//	Иначе
	//HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
//
//								Формат(Стр.КоличествоКМ,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
//								КонецЕслИ;


	//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
						//HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
						ТекстДокумента=СтрЗаменить(ТекстДокумента,Символ(29),"<GS>");
						
						Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
							ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП,Объект);
						КонецЕсли;
						
						Попытка
							//ЧтениеJSON = Новый ЧтениеJSON;
							//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
							Если Ответ.КодСостояния=200 Тогда
								
								
								НеобходимоВсеНаСервереДелать_МОЛОКО(ТекстДокумента,Стр.ID,Стр.ПоследнийБлок,Объект);
								
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
								Стр.КоличествоПолучено=Стр.КоличествоКМ;
								
								
								//Если Объект.СУЗОбувь=Истина Тогда
								//	HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)
								//	+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								//	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								//	HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								//Иначе
								//	HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)
								//	+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								//	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
							//		HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
							//	КонецЕслИ;
								Попытка
									Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
								Исключение
							КонецПопытки;
								
								
								
			Объект.Записать(РежимЗаписиДокумента.Проведение);
//												 Состояние("Получено "+Формат(Объект.Товары.Итог("КоличествоПолучено"),"ЧГ=")+" из "+
//												 Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
//												 Окр(Объект.Товары.Итог("КоличествоПолучено")*100/Объект.Товары.Итог("КоличествоКМ")));
									
								//НайтиВсеOrderlineПоНомеркуКМ();
							ИначеЕсли Ответ.КодСостояния=404 Тогда
								
								
								
								
								
								Сообщить("Не обработано в ЦРПТ");
							Иначе
								стр.СтатусСтроки="Отказ";
								NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
						
								Если NNN.success=Ложь Тогда
								globalErrors="";
								Для Каждого Стр_1 Из NNN.globalErrors Цикл
									globalErrors=globalErrors+Стр_1+"
									|"
								Конеццикла;
								Стр.ОшибкаПолучения=globalErrors;
								Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: EXHAUSTED")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ;
											Стр.СтатусСтроки="Получено";
										Объект.Записать(РежимЗаписиДокумента.Проведение);
								
											
										Конецесли;
										Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: PENDING")>0 Тогда
											Стр.СтатусСтроки="Обработка в ЦРПТ";
											Возврат;;
										Конецесли;
										Если Найти(globalErrors,"Not enough balance")>0 Тогда
											Сообщить("Необходимо пополнить баланс в ЦРПТ");
										Конецесли;

								Сообщить("Не удалось обработать документ: "+globalErrors);
								Если Найти(globalErrors,"Требуемое количество ")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=Число(СокрЛП(Сред(globalErrors,Найти(globalErrors,"осталось использовать ")+22)));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
										 									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
			Объект.Записать(РежимЗаписиДокумента.Проведение);
								ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше,чем размер буфера")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
			Объект.Записать(РежимЗаписиДокумента.Проведение);
								ИначеЕсли Найти(globalErrors,"DELETE")>0 Тогда
									Стр.КоличествоПолучено=Стр.КоличествоКМ ; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
									
			Объект.Записать(РежимЗаписиДокумента.Проведение);
		ИначеЕСЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Табак")
			ИЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак")
			Тогда
								 	Сообщить("Возможно указано заказанное количество меньше 2 штук!!");
								Конецесли;
							ИначеЕсли NNN.success=Истина Тогда
								
								
							КонецЕсли;
		
	КонецЕсли;
							
			Если Ответ.КодСостояния<>200 Тогда
//		HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/status?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+
//		"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								Объем="";
								Если Не ЗначениеЗАполненО(Стр.ОБъем) тогда
									Объем=Стр.Объем*Получить/Стр.КоличествоКМ;
									Объем=Формат(Объем,"ЧГ=");
								КонецЕсли;
								
								HTTPЗапрос = Новый HTTPЗапрос("webapi/v1/orders/"+
								Объект._Order_ID+"/codes/"+ПолучитьGTIN(Объект,Стр.GTIN)+"/print/CSV?expirationDate="+Формат(Стр.Годендо,"ДФ=""ггММдд""")+
								"&stickerId=12&accompanyingDocument="+Стр.НомерВСД+Объем+"&quantity="+Формат(Получить,"ЧГ="));
								
								HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);


			 		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
						Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
						ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
						
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Объект.Ссылка,ТекстДокумента);
				
			Конецесли;
						
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
				NNN.Свойство("bufferStatus",Стр.СтатусСтроки);
				NNN.Свойство("rejectionReason",Стр.ОшибкаПолучения);
				
				
			КонецЕслИ;
	
	
						Исключение
							
							Сообщить("Ошибка "+Ответ.ПолучитьТелоКакСтроку());
						КонецПопытки;
						
					КонецЦикла;
				КонецЕсли;
				
			
			Объект.Записать(РежимЗаписиДокумента.Проведение);
			
		
	
КонецПроцедуры

Процедура НеобходимоВсеНаСервереДелать_МОЛОКО(Знач ТекстДокумента,ID,Последнийлок=0,Объект)
	
	ТекстДокумента=СтрЗаменить(ТекстДокумента,"<GS>",Символ(29));
	текстовД=Новый ТекстовыйДокумент;
	текстовД.УстановитьТекст(ТекстДокумента);
	Для Сч=1 По текстовД.КоличествоСтрок() Цикл
		
			Добав=Объект.КМИзAPI.Добавить();
			
			
			//ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстовД.ПолучитьСтроку(сч));
			ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ТекстовД.ПолучитьСтроку(сч));
			Добав.НомерКМ=КодСтрСервер_Дв(ДвоичнД);
		
	Конеццикла;
	
		//	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
		//				//Стр.КоличествоПолучено=Стр.КоличествоКМ;
		//				Попытка
		//					Последнийлок=xmlString(NNN.blockId);
		//				Исключение
		//					КонецПопытки;
		//					Для Каждого Стр_1 Из NNN.codes Цикл
		////						ЗаписатьВДокумент(NNN);
		//						Добав=Объект.КМИзAPI.Добавить();
		//						 //СпрОД=СоздатьНайтиИДСТРОКИ(Стр);
		//						//Добав.Order_Id_Line=СпрОД;
		//						ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1);
		//						Добав.НомерКМ=КодСтрСервер_Дв(ДвоичнД);
		//						
		//			cis=Сред(СтрЗаменить(Добав.НомерКМ,"%1D",""),1,38);
		//			   	Если Сред(cis,32,3)<>"240" Тогда
		//						//cis=Сред(cis,1,31);
		//						cis=Сред(Добав.НомерКМ,1,Найти(Добав.НомерКМ,"%1D")-1);
		//						cis=РаскодироватьСтроку(cis,СпособКодированияСтроки.КодировкаURL);
		//					Иначе
		//						
		//					cis=РаскодироватьСтроку(cis,СпособКодированияСтроки.КодировкаURL);
		//						
		//					КонецЕсли;
		//		Добав.НомерКМ_Короткий=cis;				
		//						
		//						Добав.Order_Id_Line=ID;
		//					Конеццикла;
КонецПроцедуры

Функция ПолучитьGTIN(ОБъект,Н)
	Если (ОБъект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак 
		ИЛИ ОБъект.ТипПродукции=Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак
		)И ОБъект.ШаблонКМ_Табак=Перечисления.Шаблоны_подписи_кодов_КМ_Табак_ХамелеонЦРПТ.Блок Тогда
		Если ЗначениеЗаполнено(Н.GTINУпаковки) Тогда
			Возврат дополнитьСтроку(Н.GTINУпаковки)
		Иначе
			Возврат дополнитьСтроку(Н.GTIN)
			
		КонецЕсли;
	Иначе
		Возврат дополнитьСтроку(Н.GTIN)
	КонецЕсли;
Конецфункции

Процедура ПолучитьКМИзAPI_Шины(Объект,Пользователь,ТокенСУЗ)
	//Если Не ЗначениеЗаполнено(Объект._Order_ID) Тогда
	//	Возврат;                       
	//КонецЕслИ;
	РаботатьНаV1=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().РаботатьНаV1;
	ЗаписыватьДанныеПриОтправкеЗаказа=РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ЗаписыватьДанныеПриОтправкеЗаказа;
	
		
	
	//Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	//Текст=Форм.Пользователь;
//	Форм.Пользователь=Объект.ТекущийПользователь;
//	ПараметрыДлякилента=Неопределено;
//	Если Форм.НаКлиенте(ПараметрыДлякилента) Тогда
//		Форм.Пользователь=Текст;
			ПараметрыДлякилента=ПолучитьИзПользователя(Пользователь);
			
			
			
		Если Не ЗначениеЗаполнено(ПараметрыДлякилента) Тогда
			Возврат;
		КонецЕслИ;
		Если Не ЗначениеЗаполнено(ТокенСУЗ) тогда
			ТокенСУЗ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПодключениеКСУЗ_ХамелеонЦРПТ(ПараметрыДлякилента);
		Конецесли;
			ПараметрыДлякилента.ТокенСУЗ=ТокенСУЗ;
		
				АдресРаздробить=ПараметрыДлякилента.АдресСУЗ;
				Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
				Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
				Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
				Порт=Сред(Порт,Найти(Порт,":")+1);
				Попытка
					Порт=число(Порт);
				Исключение
					Порт=Неопределено;
				КонецПопытки;
				
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			Сообщить("В пользователе не заполнен адрес СУЗ");
			Возврат;
			
		КонецЕсли;
		
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
				
				
					Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
					
						HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,,Защищ);
					Иначе
						HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,,Защищ);
					КонецЕсли;
					
					КоличествоОгранчений=0;
					ВРегистре=Вргеистре(КоличествоОгранчений,ОБъект);
					Если НЕ ВРегистре И Объект.Товары.Итог("КоличествоКМ")>КоличествоОгранчений Тогда
//						 Состояние("Получение "+Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
//						 0);
						
						НомерПП=0;
						Для Каждого Стр Из Объект.Товары Цикл
							НомерПП=НомерПП+1;
							Стр.СтатусСтроки="";
							Стр.ОшибкаПолучения="";
							//Если НЕ ЗначениеЗаполнено(Стр.ИДСУЗ)  Тогда
							//	Продолжить;
							//КонецЕсли;
							Пока Стр.КоличествоКМ-Стр.КоличествоПолучено>0 Цикл
								
								Получить=Мин(Стр.КоличествоКМ-Стр.КоличествоПолучено,10000);
								
								
								
								Если РаботатьНаV1 Тогда
						HTTPЗапрос = Новый HTTPЗапрос("api/codes?orderId="+Объект._Order_ID+"&orderLineId="+СокрЛП(Стр.ID)+"&quantity="+Формат(Получить,"ЧГ="));
								Иначе
								
							//Если ОБъект.СУЗОбувь Тогда
								HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Объект,Стр.GTIN)+"&quantity="+
								Формат(Получить,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								Конецесли;
							//Иначе
							//	HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
							//	Формат(Получить,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								
							//КонецЕслИ;
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
								ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
								Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
									ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП,Объект);
								КонецЕсли;
								//Стр.КоличествоПолучено=Получить;
								 Попытка
									//ЧтениеJSON = Новый ЧтениеJSON;
									//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
									Если Ответ.КодСостояния=200 Тогда
										НаСервереСДобавлениемРегистра_Шины(ТекстДокумента,Стр.ID,Стр.ПоследнийБлок,Объект);
										
								//
						                    		 сТР.ОшибкаПолучения="В обработке";
													 
													Стр.СтатусСтроки="В обработке";
											

									   	// ЭтаФорма.Прочитать();
									        	 Стр.КоличествоПолучено=Стр.КоличествоПолучено+Получить; 
///												 Стр.ПоследнийБлок=
												 Если Стр.КоличествоПолучено=Стр.КОличествоКМ Тогда
													 сТР.ОшибкаПолучения="Получено";
													 
													Стр.СтатусСтроки="Получено";
													
										//	КонецЕсли;		
						//Если ОБъект.СУЗОбувь Тогда
								Если РаботатьНаV1 ТОгда
//						HTTPЗапрос = Новый HTTPЗапрос("api/codes?orderId="+Объект._Order_ID+"&orderLineId="+СокрЛП(Стр.ID)+"&quantity="+Формат(Получить,"ЧГ="));
Иначе						
								HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Объект,Стр.GTIN)
								+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
							КонецЕсли;
						//	Иначе
						//		HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"buffer/close?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)
						//		+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
						//		
								
						//	КонецЕсли;
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								Попытка
									Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
								Исключение
							КонецПопытки;
								    КонецЕсли;
																						 
			Объект.Записать(РежимЗаписиДокумента.Проведение);
//												 Состояние("Получено "+Формат(Объект.Товары.Итог("КоличествоПолучено"),"ЧГ=")+" из "+
//												 Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
//												 Окр(Объект.Товары.Итог("КоличествоПолучено")*100/Объект.Товары.Итог("КоличествоКМ")));
										//НайтиВсеOrderlineПоНомеркуКМ();
									Иначе
										
										
										NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
										
										
										Если NNN.success=Ложь Тогда
										globalErrors="";
										Для Каждого Стр_1 Из NNN.globalErrors Цикл
											globalErrors=globalErrors+Стр_1+"
											|"
										Конеццикла;
										Стр.ОшибкаПолучения=globalErrors;
										Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: EXHAUSTED")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ;
													Стр.СтатусСтроки="Получено";
			Объект.Записать(РежимЗаписиДокумента.Проведение);
													
										//	КонецЕсли;
						//Если ОБъект.СУЗОбувь Тогда
						
						
								Если РаботатьНаV1 Тогда
Иначе						
								HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Объект,Стр.GTIN)
								+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
							КонецЕсли;
						//	Иначе
						//		HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"buffer/close?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)
						//		+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								
								
						//	КонецЕслИ;
								
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								Попытка
									Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
								Исключение
							КонецПопытки;
								
																						 
											
										Конецесли;
										
										Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: PENDING")>0 Тогда
											Возврат;;
										Конецесли;
										
										
										Если Найти(globalErrors,"Not enough balance")>0 Тогда
											Сообщить("Необходимо пополнить баланс в ЦРПТ");
										Конецесли;
										Если Найти(globalErrors,"Not enough balance")>0 Тогда
											Сообщить("Необходимо пополнить баланс в ЦРПТ");
										Конецесли;
	
										Сообщить("Не удалось обработать документ: "+globalErrors);
										
										Если Найти(globalErrors,"Quantity must be less or equals buffer size")>0 Тогда
											
											Дальше=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Buffer size: ")+13));
											ЧислоОсталось=Число(СокрЛП(Сред(Дальше,1,Найти(Дальше,".")-1)));
											Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
			Объект.Записать(РежимЗаписиДокумента.Проведение);
												 НеНадоОбновлятьСтатус=Истина;
											ИначеЕсли Найти(globalErrors,"Требуемое количество ")>0 Тогда
											ЧислоОсталось=Число(СокрЛП(Сред(globalErrors,Найти(globalErrors,"осталось использовать ")+22)));
											Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
			Объект.Записать(РежимЗаписиДокумента.Проведение);
												 НеНадоОбновлятьСтатус=Истина;
								ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше,чем размер буфера")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
			Объект.Записать(РежимЗаписиДокумента.Проведение);
								ИначеЕсли Найти(globalErrors,"DELETE")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ ; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
											
			Объект.Записать(РежимЗаписиДокумента.Проведение);
		ИначеЕСЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Табак")
			ИЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак")
			Тогда
								 	Сообщить("Возможно указано заказанное количество меньше 2 штук!!");
										Конецесли;
										       Прервать;
									ИначеЕсли NNN.success=Истина Тогда
										   Прервать;
										
									   КонецЕсли;
									   
									    прервать;
									   
									  КонецЕсли; 
								Исключение
									    прервать;
									
									Сообщить("Ошибка "+Ответ.ПолучитьТелоКакСтроку());
								 КонецПопытки;
								
								  
							Конеццикла;
						КонецциклА;
						
					Иначе
//						Состояние("Получение "+Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
//						 0);
					
						НомерПП=0;
						Для Каждого Стр Из Объект.Товары Цикл
							Стр.СтатусСтроки="";
							Стр.ОшибкаПолучения="";
							Если Стр.КоличествоКМ=Стр.КоличествоПолучено Тогда
								Продолжить;
							КонецЕслИ;
						НомерПП=НомерПП+1;
					//	Если ОБъект.СУЗОбувь Тогда
							
	//HTTPЗапрос = Новый HTTPЗапрос("api/v2/tires/codes?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
								Если РаботатьНаV1 Тогда
						HTTPЗапрос = Новый HTTPЗапрос("api/codes?orderId="+Объект._Order_ID+"&orderLineId="+СокрЛП(Стр.ID)+"&quantity="+Формат(Получить,"ЧГ="));
					Иначе
	HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Объект,Стр.GTIN)+"&quantity="+
								Формат(Стр.КоличествоКМ-Стр.КоличествоПолучено,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
КонецЕсли;					
					//	Иначе
	//HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/codes?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)+"&quantity="+
//
//								Формат(Стр.КоличествоКМ,"ЧГ=")+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
//								КонецЕслИ;
													HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
						Если 	ЗаписыватьДанныеПриОтправкеЗаказа тогда
							ЗапишемВРегистр_Марки(ТекстДокумента,НомерПП,Объект);
						КонецЕсли;
						
						Попытка
							//ЧтениеJSON = Новый ЧтениеJSON;
							//ЧтениеJSON.УстановитьСтроку(ТекстДокумента);
							Если Ответ.КодСостояния=200 Тогда
								НеобходимоВсеНаСервереДелать_Шины(ТекстДокумента,Стр.ID,Стр.ПоследнийБлок,Объект);
								
								Стр.СтатусСтроки="Получено";
								сТР.ОшибкаПолучения="Получено";
								Стр.КоличествоПолучено=Стр.КоличествоКМ;
								
								
								//Если Объект.СУЗОбувь=Истина Тогда
									HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Объект,Стр.GTIN)
									+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
									HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
									HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								//Иначе
								//	HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Стр.ИДСУЗ+"&gtin="+ПолучитьGTIN(Стр.GTIN)
								//	+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								//	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
							//		HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
							//	КонецЕслИ;
								Попытка
									Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
								Исключение
							КонецПопытки;
								
								
								
			Объект.Записать(РежимЗаписиДокумента.Проведение);
//												 Состояние("Получено "+Формат(Объект.Товары.Итог("КоличествоПолучено"),"ЧГ=")+" из "+
//												 Формат(Объект.Товары.Итог("КоличествоКМ"),"ЧГ=")+" номеров КМ ",
//												 Окр(Объект.Товары.Итог("КоличествоПолучено")*100/Объект.Товары.Итог("КоличествоКМ")));
									
								//НайтиВсеOrderlineПоНомеркуКМ();
							ИначеЕсли Ответ.КодСостояния=404 Тогда
								
								
								
								
								
								Сообщить("Не обработано в ЦРПТ");
							Иначе
								стр.СтатусСтроки="Отказ";
								NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
						
								Если NNN.success=Ложь Тогда
								globalErrors="";
								Для Каждого Стр_1 Из NNN.globalErrors Цикл
									globalErrors=globalErrors+Стр_1+"
									|"
								Конеццикла;
								Стр.ОшибкаПолучения=globalErrors;
								Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: EXHAUSTED")>0 Тогда
											Стр.КоличествоПолучено=Стр.КоличествоКМ;
											Стр.СтатусСтроки="Получено";
								HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/close?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Объект,Стр.GTIN)
								+"&lastBlockId="+Строка(Стр.ПоследнийБлок)+"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
								Попытка
									Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
								Исключение
							КонецПопытки;
			Объект.Записать(РежимЗаписиДокумента.Проведение);
								
											
										Конецесли;
										Если Найти(globalErrors,"Buffer status not ACTIVE. Actual buffer status: PENDING")>0 Тогда
											Стр.СтатусСтроки="Обработка в ЦРПТ";
											Возврат;;
										Конецесли;
										Если Найти(globalErrors,"Not enough balance")>0 Тогда
											Сообщить("Необходимо пополнить баланс в ЦРПТ");
										Конецесли;

								Сообщить("Не удалось обработать документ: "+globalErrors);
								Если Найти(globalErrors,"Требуемое количество ")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=Число(СокрЛП(Сред(globalErrors,Найти(globalErrors,"осталось использовать ")+22)));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
										 									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
			Объект.Записать(РежимЗаписиДокумента.Проведение);
								ИначеЕсли Найти(globalErrors,"Количество кодов должно быть не больше,чем размер буфера")>0 Тогда
									НеНадоОбновлятьСтатус=Истина;
									ЧислоОсталось=СокрЛП(Сред(globalErrors,Найти(globalErrors,"Размер буфера: ")+15));
									ЧислоОсталось=Число(Сред(ЧислоОсталось,1,Найти(ЧислоОсталось,".")-1));
									Стр.КоличествоПолучено=Стр.КоличествоКМ-ЧислоОсталось; 
			Объект.Записать(РежимЗаписиДокумента.Проведение);
								ИначеЕсли Найти(globalErrors,"DELETE")>0 Тогда
									Стр.КоличествоПолучено=Стр.КоличествоКМ ; 
									Если Стр.КоличествоПолучено=Стр.КоличествоКМ Тогда
						Стр.СтатусСтроки="Получено";
						сТР.ОшибкаПолучения="Получено";
						
						КонецЕсли;
									
			Объект.Записать(РежимЗаписиДокумента.Проведение);
		ИначеЕСЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Табак")
			ИЛИ Объект.ТипПродукции=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак")
			Тогда
								 	Сообщить("Возможно указано заказанное количество меньше 2 штук!!");
								Конецесли;
							ИначеЕсли NNN.success=Истина Тогда
								
								
							КонецЕсли;
		
	КонецЕсли;
							
			Если Ответ.КодСостояния<>200 Тогда
		HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/buffer/status?orderId="+Объект._Order_ID+"&gtin="+ПолучитьGTIN(Объект,Стр.GTIN)+
		"&omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
			 HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						ТекстДокумента=Ответ.ПолучитьТелоКакСтроку();
						
			Если ЗаписыватьДанныеПриОтправкеЗаказа Тогда
				 ЗаписатьОтветвЗаказ(Объект.Ссылка,ТекстДокумента);
				
			Конецесли;
						
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
				NNN.Свойство("bufferStatus",Стр.СтатусСтроки);
				NNN.Свойство("rejectionReason",Стр.ОшибкаПолучения);
				
				
			КонецЕслИ;
	
	
						Исключение
							
							Сообщить("Ошибка "+Ответ.ПолучитьТелоКакСтроку());
						КонецПопытки;
						
					КонецЦикла;
				КонецЕсли;
			
			Объект.Записать(РежимЗаписиДокумента.Проведение);
			
		
	
КонецПроцедуры

Процедура НеобходимоВсеНаСервереДелать_Шины(ТекстДокумента,ID,Последнийлок=0,Объект)
	
	 			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
						//Стр.КоличествоПолучено=Стр.КоличествоКМ;
						Попытка
							Последнийлок=xmlString(NNN.blockId);
						Исключение
							КонецПопытки;
							Для Каждого Стр_1 Из NNN.codes Цикл
		//						ЗаписатьВДокумент(NNN);
								Добав=Объект.КМИзAPI.Добавить();
								 //СпрОД=СоздатьНайтиИДСТРОКИ(Стр);
								//Добав.Order_Id_Line=СпрОД;
								
								
								//ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1);
								ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1);
								Добав.НомерКМ=КодСтрСервер_Дв(ДвоичнД);
								
								cis=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьКороткийНомерКМ(Добав.НомерКМ,
								Объект.ТипПродукции);
								Добав.НомерКМ_Короткий=cis;				
								
								Добав.Order_Id_Line=ID;
							Конеццикла;
КонецПроцедуры

Процедура НаСервереСДобавлениемРегистра_Шины(ТекстДокумента,ID,Последнийлок,Объект)
	 NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстДокумента);//ПрочитатьJSON(ЧтениеJSON);
	 
	 
						Попытка
							Последнийлок=NNN.blockId;
						Исключение
							КонецПопытки;
	 
								МассивМарок=Новый Массив;
									//Для Каждого Стр_1 Из NNN Цикл
				//						ЗаписатьВДокумент(NNN);
//										Добав=Объект.КМИзAPI.Добавить();
										 //СпрОД=СоздатьНайтиИДСТРОКИ(Стр);
										//Добав.Order_Id_Line=СпрОД;
									//	ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1);
 									//	 НомерКМ=КодСтрСервер_Дв(ДвоичнД);
										 //МассивМарок.Добавить(НомерКМ);
								Для Каждого Стр_1 Из NNN.codes Цикл
		//						ЗаписатьВДокумент(NNN);
								//Добав=Объект.КМИзAPI.Добавить();
								 //СпрОД=СоздатьНайтиИДСТРОКИ(Стр);
								//Добав.Order_Id_Line=СпрОД;
								
								

	//ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1);
	
	ДвоичнД=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1);
								НомерКМ=КодСтрСервер_Дв(ДвоичнД);
										 МассивМарок.Добавить(НомерКМ);
								//Добав.Order_Id_Line=ID;
							Конеццикла;
									 
										 
									 ЗаписатьВРегистр(Объект,МассивМарок,ID);
									 
КонецПроцедуры


Процедура СоздатьОтчетОНанесении(ДвоичнДанные,МассивАгрегация) Экспорт
	
	
	
	Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(ДвоичнДанные,"UTF-8");
	ЧтениеXML = Новый ЧтениеXML;
	Текст=СтрЗаменить(Текст,Символ(29),"ПРОЦЕНТ1Д");
	Текст=СтрЗаменить(Текст,"&#x1D;","ПРОЦЕНТ1Д");
	ЧтениеXML.УстановитьСтроку(Текст);
	Сведения = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	
	МассивКМ=Новый ТаблицаЗначений;
	МассивКМ.Колонки.Добавить("СертификатДата");
	МассивКМ.Колонки.Добавить("СертификатНомер");
	МассивКМ.Колонки.Добавить("СертификатТип");
	МассивКМ.Колонки.Добавить("Сертификат");
	МассивКМ.Колонки.Добавить("kit");
	МассивКМ.Колонки.Добавить("ДатаПроизводства");
	МассивКМ.Колонки.Добавить("КодТНВЭД");
	МассивКМ.Колонки.Добавить("НомерВСД");
	
	production_order=Сведения.production_order;
	Если Сведения.Свойства().Получить("Document")=Неопределено Тогда 
			
			Если ТипЗнч(Сведения.products_list.product)=Тип("ОбъектXDTO") Тогда
				Стр=Сведения.products_list.product;
					Добав=МассивКМ.Добавить();
					ДатаД=Стр.certificate_date;
					Добав.СертификатДата=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
					Добав.СертификатНомер=Стр.certificate_number;
					Если Стр.certificate_type="CONFORMITY_CERTIFICATE" Тогда
						Добав.СертификатТип=Истина;
					Иначе
						Добав.СертификатТип=Ложь;
					КонецЕсли;
					Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.НайтиПоНаименованию(Добав.СертификатНомер,Истина);
					Если Не ЗначениеЗаполнено(Сертификат) тогда
						Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.СоздатьЭлемент();
						Сертификат.ДатаНачалаДействия=Добав.СертификатДата;
						Сертификат.Наименование=Добав.СертификатНомер;
						Сертификат.ЭтоСертификат=Добав.СертификатТип;
						Сертификат.Записать();
						Сертификат=Сертификат.Ссылка;
					КонецЕсли;
					Добав.Сертификат=Сертификат;
					
					
					Если Стр.Свойства().Получить("kit")<>Неопределено Тогда
							//Добав.kit=
							kit=
							СтрЗаменить(Стр.kit,"ПРОЦЕНТ1Д",Символ(29));
							
							
							Если Найти(kit,Символ(29))>1 Тогда
								Добав.kit=КодироватьСтроку(kit,СпособКодированияСтроки.КодировкаURL);	
							Иначе
								Добав.kit=kit;
							КонецЕсли;

							
					Иначе
						Добав.kit=Стр.kitu;	
					КонецЕсли;
					ДатаД=Стр.product_date;
					Добав.ДатаПроизводства=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
					КодТНВЭД=справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(Стр.tnved_code);
					Если Не ЗначениеЗАполнено(КодТНВЭД) тогда
						КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
						КодТНВЭД.Код=Стр.tnved_code;
						КодТНВЭД.Наименование=КодТНВЭД.Код;
						КодТНВЭД.Записать();
						КодТНВЭД=КодТНВЭД.Ссылка
					КонецЕсли;
					Добав.КодТНВЭД=КодТНВЭД.Ссылка;
					
					Если Стр.Свойства().Получить("VSD_KOD")<>Неопределено Тогда
						Добав.НомерВСД=Стр.VSD_KOD;
					КонецЕсли;
					
					
			Иначе
				Для Каждого Стр Из Сведения.products_list.product Цикл
					Добав=МассивКМ.Добавить();
					Добав.Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.ПустаяСсылка();
					Если Стр.Свойства().Получить("certificate_date")<>Неопределено Тогда
						ДатаД=Стр.certificate_date;
						Добав.СертификатДата=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
						Добав.СертификатНомер=Стр.certificate_number;
						Если Стр.certificate_type="CONFORMITY_CERTIFICATE" Тогда
							Добав.СертификатТип=Истина;
						Иначе
							Добав.СертификатТип=Ложь;
						КонецЕсли;
						Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.НайтиПоНаименованию(Добав.СертификатНомер,Истина);
						Если Не ЗначениеЗаполнено(Сертификат) тогда
							Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.СоздатьЭлемент();
							Сертификат.ДатаНачалаДействия=Добав.СертификатДата;
							Сертификат.Наименование=Добав.СертификатНомер;
							Сертификат.ЭтоСертификат=Добав.СертификатТип;
							Сертификат.Записать();
							Сертификат=Сертификат.Ссылка;
						КонецЕсли;
						Добав.Сертификат=Сертификат;
					 Конецесли;
					
					Если Стр.Свойства().Получить("kit")<>Неопределено Тогда
					//		Добав.kit=
					//		КодироватьСтроку(СтрЗаменить(Стр.kit,"ПРОЦЕНТ1Д",Символ(29)),СпособКодированияСтроки.КодировкаURL);	
							kit=
							СтрЗаменить(Стр.kit,"ПРОЦЕНТ1Д",Символ(29));	
							Если Найти(kit,Символ(29))>1 Тогда
								Добав.kit=КодироватьСтроку(kit,СпособКодированияСтроки.КодировкаURL);	
							Иначе
								Добав.kit=kit;
							КонецЕсли;
					ИначеЕсли Стр.Свойства().Получить("kitu")<>Неопределено Тогда
					
						Добав.kit=Стр.kitu;	
					Иначе
						
						
						kit=
							СтрЗаменить(Стр.ki,"ПРОЦЕНТ1Д",Символ(29));	
							
 							Если Найти(kit,"\u001d") Тогда
								kit="["""+kit+"""]";
								Строк1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(kit);
								kit=Строк1[0];
							Конецесли;
							
							
							Если Найти(kit,Символ(29))>1 Тогда
								Добав.kit=КодироватьСтроку(kit,СпособКодированияСтроки.КодировкаURL);	
							Иначе
								Добав.kit=kit;
							КонецЕсли;

						//Добав.kit=Стр.ki;	
					КонецЕсли;
					Если Стр.Свойства().Получить("product_date")<>Неопределено тогда
						ДатаД=Стр.product_date;
						Добав.ДатаПроизводства=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
					КонецЕсли;
					КодТНВЭД=справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(Стр.tnved_code);
					Если Не ЗначениеЗАполнено(КодТНВЭД) тогда
						КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
						КодТНВЭД.Код=Стр.tnved_code;
						КодТНВЭД.Наименование=КодТНВЭД.Код;
						КодТНВЭД.Записать();
						КодТНВЭД=КодТНВЭД.Ссылка
					КонецЕсли;
					Добав.КодТНВЭД=КодТНВЭД.Ссылка;
					Если Стр.Свойства().Получить("VSD_KOD")<>Неопределено Тогда
						Добав.НомерВСД=Стр.VSD_KOD;
					КонецЕсли;
					
				Конеццикла;
				
			КонецЕсли;
		//МассивКМ.Сортировать("ДатаПроизводства");
		
			ТипВвода=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании;
		
		ИНН=Сведения.owner_inn;
		Организация=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",ИНН);
		Если Не ЗначениеЗаполнено(Организация) тогда
			Сообщить("Не удалось загрузить агрегации из файла, так как нет организации с данным ИНН "+ИНН);
			Возврат;
		КонецЕсли;
		ТекущийПользователь=Справочники.Пользователи_ХамелеонЦРПТ.НайтиПоРеквизиту("Организация",Организация);
		Если Не ЗначениеЗаполнено(ТекущийПользователь) тогда
			Сообщить("Нет пользователя для подключения к организации по ИНН "+ИНН);
			Возврат;
		КонецЕсли;
			
		СоздатьВводВоборот=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
		СоздатьВводВоборот.Дата=ТекущаяДата();
		Если  Сведения.Свойства().Получить("product_date")<>Неопределено Тогда
			ДатаД=Сведения.product_date;
			СоздатьВводВоборот.ДатаПроизводства=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
		Иначе
			ДатаД=Сведения.production_date;
			СоздатьВводВоборот.ДатаПроизводства=Дата(ЧИсло(Сред(ДатаД,1,4)),Число(Сред(ДатаД,6,2)),Число(Сред(ДатаД,9,2)));
			
		Конецесли;
		СоздатьВводВоборот.Организация=Организация;
		СоздатьВводВоборот.ТекущийПользователь=ТекущийПользователь;
		СоздатьВводВоборот.ТипДокумента=типВвода;;
	Иначе
		
		//
		//Если ТипЗнч(Сведения.Document.pack_content)=Тип("ОбъектXDTO") Тогда
		//		Стр=Сведения.Document.pack_content;
		//			Добав=МассивКМ.Добавить();
		//			ДатаД=Стр.certificate_date;
		//			Добав.СертификатДата=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
		//			Добав.СертификатНомер=Стр.certificate_number;
		//			Если Стр.certificate_type="CONFORMITY_CERTIFICATE" Тогда
		//				Добав.СертификатТип=Истина;
		//			Иначе
		//				Добав.СертификатТип=Ложь;
		//			КонецЕсли;
		//			Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.НайтиПоНаименованию(Добав.СертификатНомер,Истина);
		//			Если Не ЗначениеЗаполнено(Сертификат) тогда
		//				Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.СоздатьЭлемент();
		//				Сертификат.ДатаНачалаДействия=Добав.СертификатДата;
		//				Сертификат.Наименование=Добав.СертификатНомер;
		//				Сертификат.ЭтоСертификат=Добав.СертификатТип;
		//				Сертификат.Записать();
		//				Сертификат=Сертификат.Ссылка;
		//			КонецЕсли;
		//			Добав.Сертификат=Сертификат;
		//			
		//			
		//			Если Стр.Свойства().Получить("kit")<>Неопределено Тогда
		//				Добав.kit=Стр.kit;	
		//			Иначе
		//				Добав.kit=Стр.kitu;	
		//			КонецЕсли;
		//			ДатаД=Стр.product_date;
		//			Добав.ДатаПроизводства=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
		//			КодТНВЭД=справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(Стр.tnved_code);
		//			Если Не ЗначениеЗАполнено(КодТНВЭД) тогда
		//				КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
		//				КодТНВЭД.Код=Стр.tnved_code;
		//				КодТНВЭД.Наименование=КодТНВЭД.Код;
		//				КодТНВЭД.Записать();
		//				КодТНВЭД=КодТНВЭД.Ссылка
		//			КонецЕсли;
		//			Добав.КодТНВЭД=КодТНВЭД.Ссылка;
		//			
		//	Иначе
		//		Для Каждого Стр Из Сведения.products_list.product Цикл
		//			Добав=МассивКМ.Добавить();
		//			ДатаД=Стр.certificate_date;
		//			Добав.СертификатДата=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
		//			Добав.СертификатНомер=Стр.certificate_number;
		//			Если Стр.certificate_type="CONFORMITY_CERTIFICATE" Тогда
		//				Добав.СертификатТип=Истина;
		//			Иначе
		//				Добав.СертификатТип=Ложь;
		//			КонецЕсли;
		//			Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.НайтиПоНаименованию(Добав.СертификатНомер,Истина);
		//			Если Не ЗначениеЗаполнено(Сертификат) тогда
		//				Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.СоздатьЭлемент();
		//				Сертификат.ДатаНачалаДействия=Добав.СертификатДата;
		//				Сертификат.Наименование=Добав.СертификатНомер;
		//				Сертификат.ЭтоСертификат=Добав.СертификатТип;
		//				Сертификат.Записать();
		//				Сертификат=Сертификат.Ссылка;
		//			КонецЕсли;
		//			Добав.Сертификат=Сертификат;
		//			
		//			
		//			Если Стр.Свойства().Получить("kit")<>Неопределено Тогда
		//				Добав.kit=Стр.kit;	
		//			Иначе
		//				Добав.kit=Стр.kitu;	
		//			КонецЕсли;
		//			ДатаД=Стр.product_date;
		//			Добав.ДатаПроизводства=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
		//			КодТНВЭД=справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(Стр.tnved_code);
		//			Если Не ЗначениеЗАполнено(КодТНВЭД) тогда
		//				КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
		//				КодТНВЭД.Код=Стр.tnved_code;
		//				КодТНВЭД.Наименование=КодТНВЭД.Код;
		//				КодТНВЭД.Записать();
		//				КодТНВЭД=КодТНВЭД.Ссылка
		//			КонецЕсли;
		//			Добав.КодТНВЭД=КодТНВЭД.Ссылка;
		//			
		//		Конеццикла;
		//		
		//	КонецЕсли;
		////МассивКМ.Сортировать("ДатаПроизводства");
		//
		//Если Сведения.production_order="OWN_PRODUCTION" Тогда
		//	ТипВвода=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборот
		//Иначе
		//	ТипВвода=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании
		//КонецЕсли;
		//
		//ИНН=Сведения.owner_inn;
		//Организация=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",ИНН);
		//Если Не ЗначениеЗаполнено(Организация) тогда
		//	Сообщить("Не удалось загрузить агрегации из файла, так как нет организации с данным ИНН "+ИНН);
		//	Возврат;
		//КонецЕсли;
		//ТекущийПользователь=Справочники.Пользователи_ХамелеонЦРПТ.НайтиПоРеквизиту("Организация",Организация);
		//Если Не ЗначениеЗаполнено(ТекущийПользователь) тогда
		//	Сообщить("Нет пользователя для подключения к организации по ИНН "+ИНН);
		//	Возврат;
		//КонецЕсли;
		//	
		//СоздатьВводВоборот=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
		//СоздатьВводВоборот.Дата=ТекущаяДата();
		//ДатаД=Сведения.product_date;
		//СоздатьВводВоборот.ДатаПроизводства=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
		//СоздатьВводВоборот.Организация=Организация;
		//СоздатьВводВоборот.ТекущийПользователь=ТекущийПользователь;
		//СоздатьВводВоборот.ТипДокумента=типВвода;;

		
	Конецесли;	
	
	Для Каждого Стр_1 Из МассивКМ ЦИкл
		ШтрихКод=Стр_1.kit;
	Если СтрДлина(ШтрихКод)=20 Тогда
		ШтрихКод=Сред(ШтрихКод,3);
	КонецЕсли;
	ШтрихКод_1=(ШтрихКод);
	
		Если СоздатьВводВоборот.СерийныеНомера.НайтиСтроки(Новый Структура("cis",ШтрихКод)).Количество()>0 Тогда
			Сообщить("CiS "+ШтрихКод+" уже присутсвует в документе");
			Возврат;
		КонецЕсли;
	//КонецЕсли;	
	
	
	
			
			попытка
				Если Сред(ШтрихКод,1,2)="01" Тогда
					Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
					Число(Сред(ШтрихКод,3,14)));;
					Если Не ЗначениеЗаполнено(Продукция) Тогда
						Продукция=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
						Продукция.GTIN=Число(Сред(ШтрихКод,3,14));
						Продукция.Наименование=xmlString(Продукция.GTIN);
						Продукция.НаименованиеТовара=xmlString(Продукция.GTIN);
						
						Продукция.Записать();;
						Продукция=Продукция.Ссылка;
					КонецЕсли;
				Иначе
					Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
					Число(Сред(ШтрихКод,1,14)));;
					Если Не ЗначениеЗаполнено(Продукция) Тогда
						Продукция=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
						Продукция.GTIN=Число(Сред(ШтрихКод,1,14));
						Продукция.Наименование=xmlString(Продукция.GTIN);
						Продукция.НаименованиеТовара=xmlString(Продукция.GTIN);
						Продукция.Записать();;
						Продукция=Продукция.Ссылка;
					КонецЕсли;
				КонецЕсли;
				
				
			Исключение
				Продукция=Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка();
			КонецПопытки;
				Добав=СоздатьВводВоборот.СерийныеНомера.Добавить();
				
				Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
				Добав.НаименованиеТовара=Продукция;
				Добав.cis=ШтрихКод;
				
				ППП=СоздатьВводВоборот.Товары.НайтиСтроки(Новый структура("gtin,КодТНВЭД,ДекларацияИлиСертификатСоответствия",Продукция,Стр_1.КодТНВЭД,Стр_1.Сертификат));
				Если ППП.Количество()=0 Тогда
					Добав_1=СоздатьВводВоборот.Товары.Добавить();
					Добав_1.GTIN=Продукция;
					//Добав_1.ГоденДо=ДатаГоденДо;
					Добав_1.КодТНВЭД=Стр_1.КодТНВЭД;
					Добав_1.СпособВыпускаТоваров="Производство в РФ";
					Добав_1.НомерСтрокиСвязи=Добав_1.НомерСтроки;
					Добав_1.КоличествоКМ=1;
					Добав_1.ДекларацияИлиСертификатСоответствия=Стр_1.Сертификат;
				Иначе
					Добав_1=ППП[0];
					Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
					
				КонецЕсли;
				Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
				
			
		;
			
		
		
	Конеццикла;
	СоздатьВводВоборот.Записать();
	МассивАгрегация.Добавить(СоздатьВводВоборот.Ссылка);
			
КонецПроцедуры

Процедура СоздатьВводВОборотПоФайлу(ДвоичнДанные,МассивАгрегация) Экспорт
	
	Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(ДвоичнДанные,"UTF-8");
	ЧтениеXML = Новый ЧтениеXML;
	Текст=СтрЗаменить(Текст,Символ(29),"ПРОЦЕНТ1Д");
	Текст=СтрЗаменить(Текст,"&#x1D;","ПРОЦЕНТ1Д");
	
	
	ЧтениеXML.УстановитьСтроку(Текст);
	Сведения = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	
	МассивКМ=Новый ТаблицаЗначений;
	МассивКМ.Колонки.Добавить("СертификатДата");
	МассивКМ.Колонки.Добавить("СертификатНомер");
	МассивКМ.Колонки.Добавить("СертификатТип");
	МассивКМ.Колонки.Добавить("Сертификат");
	МассивКМ.Колонки.Добавить("kit");
	МассивКМ.Колонки.Добавить("ДатаПроизводства");
	МассивКМ.Колонки.Добавить("КодТНВЭД");
	МассивКМ.Колонки.Добавить("cost");
	МассивКМ.Колонки.Добавить("НомерПервичногоДокумента");
	МассивКМ.Колонки.Добавить("ДатаПервичногоДокумента");
	МассивКМ.Колонки.Добавить("НазваниеПервичногоДокумента");
	
	МассивКМ.Колонки.Добавить("ВидПервичногоДокумента");
	
//	МассивКМ.Колонки.Добавить("НазваниеПервичногоДокумента");
	//МассивКМ.Колонки.Добавить("ТипДокумента");
	
	Если Сведения.Свойства().Получить("Document")=Неопределено Тогда 
		withdrawal_type="";
		Если Сведения.Свойства().Получить("withdrawal_type")<>Неопределено Тогда
			withdrawal_type=Сведения.withdrawal_type;
		КонецЕсли;
		Если withdrawal_type="DAMAGE_LOSS" Тогда
			
			Если ТипЗнч(Сведения.products_list.product)=Тип("ОбъектXDTO") Тогда
				Стр=Сведения.products_list.product;
					Добав=МассивКМ.Добавить();
					
					Если Стр.Свойства().Получить("kit")<>Неопределено Тогда
						
						Если Найти(Стр.kit,"ПРОЦЕНТ1Д")>0 Тогда
							Добав.kit=Сред(Стр.kit,1,Найти(Стр.kit,"ПРОЦЕНТ1Д")-1);
						Иначе
							Добав.kit=Сред(Стр.kit,1,31);
						КонецЕсли;
						
						//Добав.kit=Сред(Стр.kit,1,31);	
					ИначеЕсли Стр.Свойства().Получить("kitu")<>Неопределено Тогда
						Добав.kit=Стр.kitu;	
					ИначеЕсли Стр.Свойства().Получить("ki")<>Неопределено Тогда
						Если Найти(Стр.ki,"ПРОЦЕНТ1Д")>0 Тогда
							Добав.kit=Сред(Стр.ki,1,Найти(Стр.ki,"ПРОЦЕНТ1Д")-1);
						Иначе
							Добав.kit=Сред(Стр.ki,1,31);
						КонецЕсли;
					КонецЕсли;
					
					
					
			Иначе
				Для Каждого Стр Из Сведения.products_list.product Цикл
					Добав=МассивКМ.Добавить();
				Если Стр.Свойства().Получить("kit")<>Неопределено Тогда
					Если Найти(Стр.kit,"ПРОЦЕНТ1Д")>0 Тогда
							Добав.kit=Сред(Стр.kit,1,Найти(Стр.kit,"ПРОЦЕНТ1Д")-1);
						Иначе
							Добав.kit=Сред(Стр.kit,1,31);
						КонецЕсли;
				ИначеЕсли Стр.Свойства().Получить("kitu")<>Неопределено Тогда
						Добав.kit=Стр.kitu;	
					ИначеЕсли Стр.Свойства().Получить("ki")<>Неопределено Тогда
						Если Найти(Стр.ki,"ПРОЦЕНТ1Д")>0 Тогда
							Добав.kit=Сред(Стр.ki,1,Найти(Стр.ki,"ПРОЦЕНТ1Д")-1);
						Иначе
							Добав.kit=Сред(Стр.ki,1,31);
						КонецЕсли;
					КонецЕсли;
					
					
				Конеццикла;
				
			КонецЕсли;

			
			ТипВвода=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота;
			
			ИНН=Сведения.trade_participant_inn;
			Организация=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",ИНН);
			Если Не ЗначениеЗаполнено(Организация) тогда
				Сообщить("Не удалось загрузить агрегации из файла, так как нет организации с данным ИНН "+ИНН);
				Возврат;
			КонецЕсли;
			ТекущийПользователь=Справочники.Пользователи_ХамелеонЦРПТ.НайтиПоРеквизиту("Организация",Организация);
			Если Не ЗначениеЗаполнено(ТекущийПользователь) тогда
				Сообщить("Нет пользователя для подключения к организации по ИНН "+ИНН);
				Возврат;
			КонецЕсли;
				
			СоздатьВводВоборот=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
			СоздатьВводВоборот.Дата=ТекущаяДата();
			ДатаД=Сведения.withdrawal_date;
			СоздатьВводВоборот.ДатаПроизводства=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
			СоздатьВводВоборот.Организация=Организация;
			СоздатьВводВоборот.ТекущийПользователь=ТекущийПользователь;
			СоздатьВводВоборот.ТипДокумента=типВвода;;
			СоздатьВводВоборот.ПричинаВыводаИзОборота=Перечисления.ПричинаВыводаИзОборота_ХамлеонЦРПТ.DAMAGE_LOSS;
			Если Значениезаполнено(Сведения.primary_document_type) Тогда
				СоздатьВводВоборот.ВидПервичногоДокумента=Перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ[Сведения.primary_document_type]
			Конецесли;
			СоздатьВводВоборот.НомерПервичногоДокумента=Сведения.primary_document_number;
			ДатаД=Сведения.primary_document_date;
			СоздатьВводВоборот.ДатаПервичногоДокумента=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
			
			
		ИначеЕсли withdrawal_type="RETAIL" Тогда

				 production_order=Сведения;
					Если ТипЗнч(Сведения.products_list.product)=Тип("ОбъектXDTO") Тогда
						Стр=Сведения.products_list.product;
							Добав=МассивКМ.Добавить();
							
							
							Если Стр.Свойства().Получить("primary_document_type")<>Неопределено Тогда
								Добав.ВидПервичногоДокумента=перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ[Стр.primary_document_type];
							Конецесли;
							
							Если Стр.Свойства().Получить("primary_document_custom_name")<>Неопределено Тогда
								
								Добав.НазваниеПервичногоДокумента=Стр.primary_document_custom_name
								
							Конецесли;
							Если Стр.Свойства().Получить("primary_document_date")<>Неопределено Тогда
								
								ДатаД=Стр.primary_document_date;
								Добав.ДатаПервичногоДокумента=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
										
							Конецесли;
							Если Стр.Свойства().Получить("primary_document_number")<>Неопределено Тогда
								
								Добав.НомерПервичногоДокумента=Стр.primary_document_number
								
							Конецесли;
	Если Стр.Свойства().Получить("cost")<>Неопределено Тогда
								
								Добав.cost=Стр.cost
								
							Конецесли;

							Если Стр.Свойства().Получить("ki")<>Неопределено Тогда
									Добав.kit=Сред(Стр.ki,1,31);	
								
							Иначе
								Добав.kit=Стр.kitu;	
							КонецЕсли;
							//ДатаД=Стр.product_date;
							//Добав.ДатаПроизводства=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
							//КодТНВЭД=справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(Стр.tnved_code);
							//Если Не ЗначениеЗАполнено(КодТНВЭД) тогда
							//	КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
							//	КодТНВЭД.Код=Стр.tnved_code;
							//	КодТНВЭД.Наименование=КодТНВЭД.Код;
							//	КодТНВЭД.Записать();
							//	КодТНВЭД=КодТНВЭД.Ссылка
							//КонецЕсли;
							//Добав.КодТНВЭД=КодТНВЭД.Ссылка;
							
					Иначе
						Для Каждого Стр Из Сведения.products_list.product Цикл
							Добав=МассивКМ.Добавить();
							
							
								
							Если Стр.Свойства().Получить("primary_document_type")<>Неопределено Тогда
								Добав.ВидПервичногоДокумента=перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ[Стр.primary_document_type];
							Конецесли;
						
							Если Стр.Свойства().Получить("primary_document_custom_name")<>Неопределено Тогда
								
								Добав.НазваниеПервичногоДокумента=Стр.primary_document_custom_name
								
							Конецесли;               	
							Если Стр.Свойства().Получить("primary_document_date")<>Неопределено Тогда
								
								ДатаД=Стр.primary_document_date;
								Добав.ДатаПервичногоДокумента=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
										
							Конецесли;
							Если Стр.Свойства().Получить("primary_document_number")<>Неопределено Тогда
								
								Добав.НомерПервичногоДокумента=Стр.primary_document_number
								
							Конецесли;
	Если Стр.Свойства().Получить("cost")<>Неопределено Тогда
								
								Добав.cost=Стр.cost
								
							Конецесли;

					
							Если Стр.Свойства().Получить("ki")<>Неопределено Тогда
									Добав.kit=Сред(Стр.ki,1,31);	
								
							Иначе
								Добав.kit=Стр.kitu;	
							КонецЕсли;
														
						Конеццикла;
						
					КонецЕсли;
				//МассивКМ.Сортировать("ДатаПроизводства");
				
				ТипВвода=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота;
				
				ИНН=Сведения.trade_participant_inn;
				Организация=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",ИНН);
				Если Не ЗначениеЗаполнено(Организация) тогда
					Сообщить("Не удалось загрузить агрегации из файла, так как нет организации с данным ИНН "+ИНН);
					Возврат;
				КонецЕсли;
				ТекущийПользователь=Справочники.Пользователи_ХамелеонЦРПТ.НайтиПоРеквизиту("Организация",Организация);
				Если Не ЗначениеЗаполнено(ТекущийПользователь) тогда
					Сообщить("Нет пользователя для подключения к организации по ИНН "+ИНН);
					Возврат;
				КонецЕсли;
					
				СоздатьВводВоборот=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
				СоздатьВводВоборот.Дата=ТекущаяДата();
				ДатаД=Сведения.withdrawal_date;
				//СоздатьВводВоборот.Дата=ДатаД;  
				СоздатьВводВоборот.Дата=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
				СоздатьВводВоборот.Организация=Организация;
				СоздатьВводВоборот.ТекущийПользователь=ТекущийПользователь;
				СоздатьВводВоборот.ТипДокумента=типВвода;;
				СоздатьВводВоборот.ПричинаВыводаИзОборота=Перечисления.ПричинаВыводаИзОборота_ХамлеонЦРПТ.RETAIL;
				
				
			    	Если  Сведения.Свойства().Получить("primary_document_custom_name")<>Неопределено Тогда
								
								СоздатьВводВоборот.НаименованиеПервичногоДокумента=Стр.primary_document_custom_name
								
							Конецесли;
							Если Сведения.Свойства().Получить("primary_document_date")<>Неопределено Тогда
								
								ДатаД=Стр.primary_document_date;
								СоздатьВводВоборот.ДатаПервичногоДокумента=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
										
							Конецесли;
							Если Сведения.Свойства().Получить("primary_document_number")<>Неопределено Тогда
								
								СоздатьВводВоборот.НомерПервичногоДокумента=Стр.primary_document_number
								
							Конецесли;
	Если Сведения.Свойства().Получить("primary_document_type")<>Неопределено Тогда
								
								СоздатьВводВоборот.ТипПервичногоДокумента=Перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ[Сведения.primary_document_type];  
								СоздатьВводВоборот.ВидПервичногоДокумента=перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ[Сведения.primary_document_type];
							Конецесли;

			
			
		Иначе
		
			production_order=Сведения.production_order;
			Если ТипЗнч(Сведения.products_list.product)=Тип("ОбъектXDTO") Тогда
				Стр=Сведения.products_list.product;
					Добав=МассивКМ.Добавить();
					ДатаД=Стр.certificate_date;
					Добав.СертификатДата=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
					Добав.СертификатНомер=Стр.certificate_number;
					Если Стр.certificate_type="CONFORMITY_CERTIFICATE" Тогда
						Добав.СертификатТип=Истина;
					Иначе
						Добав.СертификатТип=Ложь;
					КонецЕсли;
					Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.НайтиПоНаименованию(Добав.СертификатНомер,Истина);
					Если Не ЗначениеЗаполнено(Сертификат) тогда
						Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.СоздатьЭлемент();
						Сертификат.ДатаНачалаДействия=Добав.СертификатДата;
						Сертификат.Наименование=Добав.СертификатНомер;
						Сертификат.ЭтоСертификат=Добав.СертификатТип;
						Сертификат.Записать();
						Сертификат=Сертификат.Ссылка;
					КонецЕсли;
					Добав.Сертификат=Сертификат;
					
					
					Если Стр.Свойства().Получить("kit")<>Неопределено Тогда
						Если production_order="OWN_PRODUCTION" Тогда
							Добав.kit=Сред(Стр.kit,1,31);	
						Иначе
							Добав.kit=
							КодироватьСтроку(СтрЗаменить(Стр.kit,"ПРОЦЕНТ1Д",Символ(29)),СпособКодированияСтроки.КодировкаURL);	
							
						КонецЕсли;
					Иначе
						Добав.kit=Стр.kitu;	
					КонецЕсли;
					ДатаД=Стр.product_date;
					Добав.ДатаПроизводства=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
					КодТНВЭД=справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(Стр.tnved_code);
					Если Не ЗначениеЗАполнено(КодТНВЭД) тогда
						КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
						КодТНВЭД.Код=Стр.tnved_code;
						КодТНВЭД.Наименование=КодТНВЭД.Код;
						КодТНВЭД.Записать();
						КодТНВЭД=КодТНВЭД.Ссылка
					КонецЕсли;
					Добав.КодТНВЭД=КодТНВЭД.Ссылка;
					
			Иначе
				Для Каждого Стр Из Сведения.products_list.product Цикл
					Добав=МассивКМ.Добавить();
					ДатаД=Стр.certificate_date;
					Добав.СертификатДата=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
					Добав.СертификатНомер=Стр.certificate_number;
					Если Стр.certificate_type="CONFORMITY_CERTIFICATE" Тогда
						Добав.СертификатТип=Истина;
					Иначе
						Добав.СертификатТип=Ложь;
					КонецЕсли;
					Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.НайтиПоНаименованию(Добав.СертификатНомер,Истина);
					Если Не ЗначениеЗаполнено(Сертификат) тогда
						Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.СоздатьЭлемент();
						Сертификат.ДатаНачалаДействия=Добав.СертификатДата;
						Сертификат.Наименование=Добав.СертификатНомер;
						Сертификат.ЭтоСертификат=Добав.СертификатТип;
						Сертификат.Записать();
						Сертификат=Сертификат.Ссылка;
					КонецЕсли;
					Добав.Сертификат=Сертификат;
					
					
					Если Стр.Свойства().Получить("kit")<>Неопределено Тогда
						Если production_order="OWN_PRODUCTION" Тогда
							Добав.kit=Сред(Стр.kit,1,31);	
						Иначе
							Добав.kit=
							КодироватьСтроку(СтрЗаменить(Стр.kit,"ПРОЦЕНТ1Д",Символ(29)),СпособКодированияСтроки.КодировкаURL);	
							
						КонецЕсли;
					Иначе
						Добав.kit=Стр.kitu;	
					КонецЕсли;
					ДатаД=Стр.product_date;
					Добав.ДатаПроизводства=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
					КодТНВЭД=справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(Стр.tnved_code);
					Если Не ЗначениеЗАполнено(КодТНВЭД) тогда
						КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
						КодТНВЭД.Код=Стр.tnved_code;
						КодТНВЭД.Наименование=КодТНВЭД.Код;
						КодТНВЭД.Записать();
						КодТНВЭД=КодТНВЭД.Ссылка
					КонецЕсли;
					Добав.КодТНВЭД=КодТНВЭД.Ссылка;
					
				Конеццикла;
				
			КонецЕсли;
		//МассивКМ.Сортировать("ДатаПроизводства");
		
		Если Сведения.production_order="OWN_PRODUCTION" Тогда
			ТипВвода=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборот
		Иначе
			ТипВвода=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании
		КонецЕсли;
		
		ИНН=Сведения.owner_inn;
		Организация=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",ИНН);
		Если Не ЗначениеЗаполнено(Организация) тогда
			Сообщить("Не удалось загрузить агрегации из файла, так как нет организации с данным ИНН "+ИНН);
			Возврат;
		КонецЕсли;
		ТекущийПользователь=Справочники.Пользователи_ХамелеонЦРПТ.НайтиПоРеквизиту("Организация",Организация);
		Если Не ЗначениеЗаполнено(ТекущийПользователь) тогда
			Сообщить("Нет пользователя для подключения к организации по ИНН "+ИНН);
			Возврат;
		КонецЕсли;
			
		СоздатьВводВоборот=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
		СоздатьВводВоборот.Дата=ТекущаяДата();
		ДатаД=Сведения.product_date;
		СоздатьВводВоборот.ДатаПроизводства=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
		СоздатьВводВоборот.Организация=Организация;
		СоздатьВводВоборот.ТекущийПользователь=ТекущийПользователь;
		СоздатьВводВоборот.ТипДокумента=типВвода;;
		КонецЕсли;
	Иначе
		
		//
		//Если ТипЗнч(Сведения.Document.pack_content)=Тип("ОбъектXDTO") Тогда
		//		Стр=Сведения.Document.pack_content;
		//			Добав=МассивКМ.Добавить();
		//			ДатаД=Стр.certificate_date;
		//			Добав.СертификатДата=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
		//			Добав.СертификатНомер=Стр.certificate_number;
		//			Если Стр.certificate_type="CONFORMITY_CERTIFICATE" Тогда
		//				Добав.СертификатТип=Истина;
		//			Иначе
		//				Добав.СертификатТип=Ложь;
		//			КонецЕсли;
		//			Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.НайтиПоНаименованию(Добав.СертификатНомер,Истина);
		//			Если Не ЗначениеЗаполнено(Сертификат) тогда
		//				Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.СоздатьЭлемент();
		//				Сертификат.ДатаНачалаДействия=Добав.СертификатДата;
		//				Сертификат.Наименование=Добав.СертификатНомер;
		//				Сертификат.ЭтоСертификат=Добав.СертификатТип;
		//				Сертификат.Записать();
		//				Сертификат=Сертификат.Ссылка;
		//			КонецЕсли;
		//			Добав.Сертификат=Сертификат;
		//			
		//			
		//			Если Стр.Свойства().Получить("kit")<>Неопределено Тогда
		//				Добав.kit=Стр.kit;	
		//			Иначе
		//				Добав.kit=Стр.kitu;	
		//			КонецЕсли;
		//			ДатаД=Стр.product_date;
		//			Добав.ДатаПроизводства=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
		//			КодТНВЭД=справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(Стр.tnved_code);
		//			Если Не ЗначениеЗАполнено(КодТНВЭД) тогда
		//				КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
		//				КодТНВЭД.Код=Стр.tnved_code;
		//				КодТНВЭД.Наименование=КодТНВЭД.Код;
		//				КодТНВЭД.Записать();
		//				КодТНВЭД=КодТНВЭД.Ссылка
		//			КонецЕсли;
		//			Добав.КодТНВЭД=КодТНВЭД.Ссылка;
		//			
		//	Иначе
		//		Для Каждого Стр Из Сведения.products_list.product Цикл
		//			Добав=МассивКМ.Добавить();
		//			ДатаД=Стр.certificate_date;
		//			Добав.СертификатДата=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
		//			Добав.СертификатНомер=Стр.certificate_number;
		//			Если Стр.certificate_type="CONFORMITY_CERTIFICATE" Тогда
		//				Добав.СертификатТип=Истина;
		//			Иначе
		//				Добав.СертификатТип=Ложь;
		//			КонецЕсли;
		//			Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.НайтиПоНаименованию(Добав.СертификатНомер,Истина);
		//			Если Не ЗначениеЗаполнено(Сертификат) тогда
		//				Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.СоздатьЭлемент();
		//				Сертификат.ДатаНачалаДействия=Добав.СертификатДата;
		//				Сертификат.Наименование=Добав.СертификатНомер;
		//				Сертификат.ЭтоСертификат=Добав.СертификатТип;
		//				Сертификат.Записать();
		//				Сертификат=Сертификат.Ссылка;
		//			КонецЕсли;
		//			Добав.Сертификат=Сертификат;
		//			
		//			
		//			Если Стр.Свойства().Получить("kit")<>Неопределено Тогда
		//				Добав.kit=Стр.kit;	
		//			Иначе
		//				Добав.kit=Стр.kitu;	
		//			КонецЕсли;
		//			ДатаД=Стр.product_date;
		//			Добав.ДатаПроизводства=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
		//			КодТНВЭД=справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(Стр.tnved_code);
		//			Если Не ЗначениеЗАполнено(КодТНВЭД) тогда
		//				КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
		//				КодТНВЭД.Код=Стр.tnved_code;
		//				КодТНВЭД.Наименование=КодТНВЭД.Код;
		//				КодТНВЭД.Записать();
		//				КодТНВЭД=КодТНВЭД.Ссылка
		//			КонецЕсли;
		//			Добав.КодТНВЭД=КодТНВЭД.Ссылка;
		//			
		//		Конеццикла;
		//		
		//	КонецЕсли;
		////МассивКМ.Сортировать("ДатаПроизводства");
		//
		//Если Сведения.production_order="OWN_PRODUCTION" Тогда
		//	ТипВвода=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборот
		//Иначе
		//	ТипВвода=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании
		//КонецЕсли;
		//
		//ИНН=Сведения.owner_inn;
		//Организация=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",ИНН);
		//Если Не ЗначениеЗаполнено(Организация) тогда
		//	Сообщить("Не удалось загрузить агрегации из файла, так как нет организации с данным ИНН "+ИНН);
		//	Возврат;
		//КонецЕсли;
		//ТекущийПользователь=Справочники.Пользователи_ХамелеонЦРПТ.НайтиПоРеквизиту("Организация",Организация);
		//Если Не ЗначениеЗаполнено(ТекущийПользователь) тогда
		//	Сообщить("Нет пользователя для подключения к организации по ИНН "+ИНН);
		//	Возврат;
		//КонецЕсли;
		//	
		//СоздатьВводВоборот=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
		//СоздатьВводВоборот.Дата=ТекущаяДата();
		//ДатаД=Сведения.product_date;
		//СоздатьВводВоборот.ДатаПроизводства=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
		//СоздатьВводВоборот.Организация=Организация;
		//СоздатьВводВоборот.ТекущийПользователь=ТекущийПользователь;
		//СоздатьВводВоборот.ТипДокумента=типВвода;;

		
	Конецесли;	
	
	Для Каждого Стр_1 Из МассивКМ ЦИкл
		ШтрихКод=Стр_1.kit;
	Если СтрДлина(ШтрихКод)=20 Тогда
		ШтрихКод=Сред(ШтрихКод,3);
	КонецЕсли;
	ШтрихКод_1=(ШтрихКод);
	
		Если СоздатьВводВоборот.СерийныеНомера.НайтиСтроки(Новый Структура("cis",ШтрихКод)).Количество()>0 Тогда
			Сообщить("CiS "+ШтрихКод+" уже присутсвует в документе");
			Возврат;
		КонецЕсли;
	//КонецЕсли;	
	
	
	
			
			попытка
				Если Сред(ШтрихКод,1,2)="01" Тогда
					Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
					Число(Сред(ШтрихКод,3,14)));;
					Если Не ЗначениеЗаполнено(Продукция) Тогда
						Продукция=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
						Продукция.GTIN=Число(Сред(ШтрихКод,3,14));
						Продукция.Наименование=xmlString(Продукция.GTIN);
						Продукция.НаименованиеТовара=xmlString(Продукция.GTIN);
						Продукция.Записать();;
						Продукция=Продукция.Ссылка;
					КонецЕсли;
				Иначе
					Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
					Число(Сред(ШтрихКод,1,14)));;
					Если Не ЗначениеЗаполнено(Продукция) Тогда
						Продукция=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
						Продукция.GTIN=Число(Сред(ШтрихКод,1,14));
						Продукция.Наименование=xmlString(Продукция.GTIN);
						Продукция.НаименованиеТовара=xmlString(Продукция.GTIN);
						Продукция.Записать();;
						Продукция=Продукция.Ссылка;
					КонецЕсли;
				КонецЕсли;
				
				
			Исключение
				Продукция=Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка();
			КонецПопытки;
				Добав=СоздатьВводВоборот.СерийныеНомера.Добавить();
				
				Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
				Добав.НаименованиеТовара=Продукция;
				Добав.cis=ШтрихКод;
				
				ППП=СоздатьВводВоборот.Товары.НайтиСтроки(Новый структура("gtin,КодТНВЭД,ДекларацияИлиСертификатСоответствия",Продукция,Стр_1.КодТНВЭД,Стр_1.Сертификат));
				Если Истина ИЛИ ППП.Количество()=0 Тогда
					Добав_1=СоздатьВводВоборот.Товары.Добавить();
					Добав_1.GTIN=Продукция;
					//Добав_1.ГоденДо=ДатаГоденДо;
					Добав_1.КодТНВЭД=Стр_1.КодТНВЭД;
					Добав_1.СпособВыпускаТоваров="Производство в РФ";
					Добав_1.НомерСтрокиСвязи=Добав_1.НомерСтроки;
					Добав_1.КоличествоКМ=1;
					Добав_1.ДекларацияИлиСертификатСоответствия=Стр_1.Сертификат;
					Добав_1.НаименованиеПервичногоДокумента=Стр_1.НазваниеПервичногоДокумента;
					Добав_1.ДатаПервичногоДокумента=Стр_1.ДатаПервичногоДокумента;
					Добав_1.НомерПервичногоДокумента=Стр_1.НомерПервичногоДокумента;
					Добав_1.ВидПервичногоДокумента=Стр_1.ВидПервичногоДокумента;
					Добав_1.Цена=Стр_1.cost;
				Иначе
					Добав_1=ППП[0];
					Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
					
				КонецЕсли;
				Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
				
				
			
		;
			
		
		
	Конеццикла;
	СоздатьВводВоборот.Записать();
	МассивАгрегация.Добавить(СоздатьВводВоборот.Ссылка);
			
КонецПроцедуры



Процедура СоздатьСписаниеПоФайлу(ДвоичнДанные,МассивАгрегация) Экспорт
	
	Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(ДвоичнДанные,"UTF-8");
	ЧтениеXML = Новый ЧтениеXML;
	Текст=СтрЗаменить(Текст,Символ(29),"ПРОЦЕНТ1Д");
	Текст=СтрЗаменить(Текст,"&#x1D;","ПРОЦЕНТ1Д");
	ЧтениеXML.УстановитьСтроку(Текст);
	Сведения = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	
	МассивКМ=Новый ТаблицаЗначений;
	МассивКМ.Колонки.Добавить("kit");
	МассивКМ.Колонки.Добавить("Тип");
	
	//production_order=Сведения.production_order;
	Если Сведения.Свойства().Получить("Document")=Неопределено Тогда 
			
			Если ТипЗнч(Сведения.km_list.km)=Тип("ОбъектXDTO") Тогда
				Стр=Сведения.km_list.km;
					Добав=МассивКМ.Добавить();
										
					Если Стр.Свойства().Получить("kit")<>Неопределено Тогда
						Если Найти(Стр.kit,"ПРОЦЕНТ1Д") Тогда
							Добав.kit=Сред(Стр.kit,1,Найти(Стр.kit,"ПРОЦЕНТ1Д")-1);	
						Иначе
							Добав.kit=Сред(Стр.kit,1,31);	
						Конецесли;
					Иначе
							Добав.kit=Стр.kitu;	
							
					КонецЕсли;
					Добав.Тип=Перечисления.ПричинаСписания_ХамелеонЦРПТ[стр.cancellation_reason]
			Иначе
				Для Каждого Стр Из Сведения.km_list.km Цикл
					Добав=МассивКМ.Добавить();
					Если Стр.Свойства().Получить("kit")<>Неопределено Тогда
						Если Найти(Стр.kit,"ПРОЦЕНТ1Д") Тогда
							Добав.kit=Сред(Стр.kit,1,Найти(Стр.kit,"ПРОЦЕНТ1Д")-1);	
						Иначе
							Добав.kit=Сред(Стр.kit,1,31);	
						Конецесли;
					Иначе
						Добав.kit=Стр.kitu;	
					КонецЕсли;
						Добав.Тип=Перечисления.ПричинаСписания_ХамелеонЦРПТ[стр.cancellation_reason]
					
				Конеццикла;
				
			КонецЕсли;
			
			
		//МассивКМ.Сортировать("ДатаПроизводства");
		
		
		ИНН=Сведения.trade_participant_inn;
		Организация=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",ИНН);
		Если Не ЗначениеЗаполнено(Организация) тогда
			Сообщить("Не удалось загрузить агрегации из файла, так как нет организации с данным ИНН "+ИНН);
			Возврат;
		КонецЕсли;
		ТекущийПользователь=Справочники.Пользователи_ХамелеонЦРПТ.НайтиПоРеквизиту("Организация",Организация);
		Если Не ЗначениеЗаполнено(ТекущийПользователь) тогда
			Сообщить("Нет пользователя для подключения к организации по ИНН "+ИНН);
			Возврат;
		КонецЕсли;
			
		СоздатьВводВоборот=Документы.СписаниеКМНанесенныхНеНанесенныхНаТовар_ХамелеонЦРПТ.СоздатьДокумент();
		СоздатьВводВоборот.Дата=ТекущаяДата();
		ДатаД=Сведения.cancellation_document_date;
		СоздатьВводВоборот.Дата=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
		СоздатьВводВоборот.Организация=Организация;
		СоздатьВводВоборот.ТипСписанияСУЗ=Добав.Тип;
		СоздатьВводВОборот.ПричинаСписания=Добав.тип;
		СоздатьВводВоборот.ТекущийПользователь=ТекущийПользователь;
		Если Сведения.cancellation_reason="KM_SPOILED" Тогда
			СоздатьВводВоборот.ВидСписания=Перечисления.ВидДокументаСписания_ХамелеонЦРПТ.КМНеНанесенныйНаТовар;
			
		Конецесли;
		//СоздатьВводВоборот.ТипДокумента=типВвода;;
	Иначе
		
		//
		//Если ТипЗнч(Сведения.Document.pack_content)=Тип("ОбъектXDTO") Тогда
		//		Стр=Сведения.Document.pack_content;
		//			Добав=МассивКМ.Добавить();
		//			ДатаД=Стр.certificate_date;
		//			Добав.СертификатДата=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
		//			Добав.СертификатНомер=Стр.certificate_number;
		//			Если Стр.certificate_type="CONFORMITY_CERTIFICATE" Тогда
		//				Добав.СертификатТип=Истина;
		//			Иначе
		//				Добав.СертификатТип=Ложь;
		//			КонецЕсли;
		//			Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.НайтиПоНаименованию(Добав.СертификатНомер,Истина);
		//			Если Не ЗначениеЗаполнено(Сертификат) тогда
		//				Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.СоздатьЭлемент();
		//				Сертификат.ДатаНачалаДействия=Добав.СертификатДата;
		//				Сертификат.Наименование=Добав.СертификатНомер;
		//				Сертификат.ЭтоСертификат=Добав.СертификатТип;
		//				Сертификат.Записать();
		//				Сертификат=Сертификат.Ссылка;
		//			КонецЕсли;
		//			Добав.Сертификат=Сертификат;
		//			
		//			
		//			Если Стр.Свойства().Получить("kit")<>Неопределено Тогда
		//				Добав.kit=Стр.kit;	
		//			Иначе
		//				Добав.kit=Стр.kitu;	
		//			КонецЕсли;
		//			ДатаД=Стр.product_date;
		//			Добав.ДатаПроизводства=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
		//			КодТНВЭД=справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(Стр.tnved_code);
		//			Если Не ЗначениеЗАполнено(КодТНВЭД) тогда
		//				КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
		//				КодТНВЭД.Код=Стр.tnved_code;
		//				КодТНВЭД.Наименование=КодТНВЭД.Код;
		//				КодТНВЭД.Записать();
		//				КодТНВЭД=КодТНВЭД.Ссылка
		//			КонецЕсли;
		//			Добав.КодТНВЭД=КодТНВЭД.Ссылка;
		//			
		//	Иначе
		//		Для Каждого Стр Из Сведения.products_list.product Цикл
		//			Добав=МассивКМ.Добавить();
		//			ДатаД=Стр.certificate_date;
		//			Добав.СертификатДата=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
		//			Добав.СертификатНомер=Стр.certificate_number;
		//			Если Стр.certificate_type="CONFORMITY_CERTIFICATE" Тогда
		//				Добав.СертификатТип=Истина;
		//			Иначе
		//				Добав.СертификатТип=Ложь;
		//			КонецЕсли;
		//			Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.НайтиПоНаименованию(Добав.СертификатНомер,Истина);
		//			Если Не ЗначениеЗаполнено(Сертификат) тогда
		//				Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.СоздатьЭлемент();
		//				Сертификат.ДатаНачалаДействия=Добав.СертификатДата;
		//				Сертификат.Наименование=Добав.СертификатНомер;
		//				Сертификат.ЭтоСертификат=Добав.СертификатТип;
		//				Сертификат.Записать();
		//				Сертификат=Сертификат.Ссылка;
		//			КонецЕсли;
		//			Добав.Сертификат=Сертификат;
		//			
		//			
		//			Если Стр.Свойства().Получить("kit")<>Неопределено Тогда
		//				Добав.kit=Стр.kit;	
		//			Иначе
		//				Добав.kit=Стр.kitu;	
		//			КонецЕсли;
		//			ДатаД=Стр.product_date;
		//			Добав.ДатаПроизводства=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
		//			КодТНВЭД=справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(Стр.tnved_code);
		//			Если Не ЗначениеЗАполнено(КодТНВЭД) тогда
		//				КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
		//				КодТНВЭД.Код=Стр.tnved_code;
		//				КодТНВЭД.Наименование=КодТНВЭД.Код;
		//				КодТНВЭД.Записать();
		//				КодТНВЭД=КодТНВЭД.Ссылка
		//			КонецЕсли;
		//			Добав.КодТНВЭД=КодТНВЭД.Ссылка;
		//			
		//		Конеццикла;
		//		
		//	КонецЕсли;
		////МассивКМ.Сортировать("ДатаПроизводства");
		//
		//Если Сведения.production_order="OWN_PRODUCTION" Тогда
		//	ТипВвода=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборот
		//Иначе
		//	ТипВвода=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании
		//КонецЕсли;
		//
		//ИНН=Сведения.owner_inn;
		//Организация=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",ИНН);
		//Если Не ЗначениеЗаполнено(Организация) тогда
		//	Сообщить("Не удалось загрузить агрегации из файла, так как нет организации с данным ИНН "+ИНН);
		//	Возврат;
		//КонецЕсли;
		//ТекущийПользователь=Справочники.Пользователи_ХамелеонЦРПТ.НайтиПоРеквизиту("Организация",Организация);
		//Если Не ЗначениеЗаполнено(ТекущийПользователь) тогда
		//	Сообщить("Нет пользователя для подключения к организации по ИНН "+ИНН);
		//	Возврат;
		//КонецЕсли;
		//	
		//СоздатьВводВоборот=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
		//СоздатьВводВоборот.Дата=ТекущаяДата();
		//ДатаД=Сведения.product_date;
		//СоздатьВводВоборот.ДатаПроизводства=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
		//СоздатьВводВоборот.Организация=Организация;
		//СоздатьВводВоборот.ТекущийПользователь=ТекущийПользователь;
		//СоздатьВводВоборот.ТипДокумента=типВвода;;

		
	Конецесли;	
	
	Для Каждого Стр_1 Из МассивКМ ЦИкл
		ШтрихКод=Стр_1.kit;
	Если СтрДлина(ШтрихКод)=20 Тогда
		ШтрихКод=Сред(ШтрихКод,3);
	КонецЕсли;
	ШтрихКод_1=(ШтрихКод);
	
		Если СоздатьВводВоборот.СерийныеНомера.НайтиСтроки(Новый Структура("cis",ШтрихКод)).Количество()>0 Тогда
			Сообщить("CiS "+ШтрихКод+" уже присутсвует в документе");
			Возврат;
		КонецЕсли;
	//КонецЕсли;	
	
	
	
			
			попытка
				Если Сред(ШтрихКод,1,2)="01" Тогда
					Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
					Число(Сред(ШтрихКод,3,14)));;
					Если Не ЗначениеЗаполнено(Продукция) Тогда
						Продукция=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
						Продукция.GTIN=Число(Сред(ШтрихКод,3,14));
						Продукция.Наименование=xmlString(Продукция.GTIN);
						Продукция.НаименованиеТовара=xmlString(Продукция.GTIN);
						Продукция.Записать();;
						Продукция=Продукция.Ссылка;
					КонецЕсли;
				Иначе
					Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
					Число(Сред(ШтрихКод,1,14)));;
					Если Не ЗначениеЗаполнено(Продукция) Тогда
						Продукция=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
						Продукция.GTIN=Число(Сред(ШтрихКод,1,14));
						Продукция.Наименование=xmlString(Продукция.GTIN);
						Продукция.НаименованиеТовара=xmlString(Продукция.GTIN);
						Продукция.Записать();;
						Продукция=Продукция.Ссылка;
					КонецЕсли;
				КонецЕсли;
				
				
			Исключение
				Продукция=Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка();
			КонецПопытки;
				Добав=СоздатьВводВоборот.СерийныеНомера.Добавить();
				
				Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
				Добав.НаименованиеТовара=Продукция;
				Добав.cis=ШтрихКод;
				
				ППП=СоздатьВводВоборот.Товары.НайтиСтроки(Новый структура("gtin",Продукция));
				Если ППП.Количество()=0 Тогда
					Добав_1=СоздатьВводВоборот.Товары.Добавить();
					Добав_1.GTIN=Продукция;
					//Добав_1.ГоденДо=ДатаГоденДо;
					//Добав_1.КодТНВЭД=Стр_1.КодТНВЭД;
					//Добав_1.СпособВыпускаТоваров="Производство в РФ";
					Добав_1.НомерСтрокиСвязи=Добав_1.НомерСтроки;
					Добав_1.КоличествоКМ=1;
					//Добав_1.ДекларацияИлиСертификатСоответствия=Стр_1.Сертификат;
				Иначе
					Добав_1=ППП[0];
					Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
					
				КонецЕсли;
				Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
				
			
		;
			
		
		
	Конеццикла;
	СоздатьВводВоборот.Записать();
	МассивАгрегация.Добавить(СоздатьВводВоборот.Ссылка);
			
КонецПроцедуры



Процедура ЗагрузкаЧековНаСервере_ХамелеонЦРПТ(Пользователь,НачДата,КонДата) Экспорт
	Thumbprint_1=ПолучитьИзПользователя(Пользователь);
	
	СколькоНаСтранице=50;
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
			
			
	СРегистра="";
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		Сообщить(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
		//АдресКАПИ=СтрЗаменить(Thumbprint_1.АдресКАПИ,"api.","");
		  АдресКАПИ=Thumbprint_1.АдресКАПИ;
		
	Датаотчета="";
			
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;   
			
				Куки="lk-auth-token="+Срегистра ;
				
				
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("start_from");	
	Чтен.ЗаписатьЗначение(0);
	Чтен.ЗаписатьИмяСвойства("count");
	Чтен.ЗаписатьЗначение(СколькоНаСтранице);
	Чтен.ЗаписатьИмяСвойства("filter");
	Чтен.ЗаписатьНачалоОбъекта();
	
	Если ЗначениеЗаполнено(НачДата) тогда
		Чтен.ЗаписатьИмяСвойства("start_date");
		Чтен.ЗаписатьЗначение(Формат(НачалоДня(НачДата),"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"Z");
	КонецЕслИ;	
	
	Если ЗначениеЗаполнено(КонДата) тогда
		Чтен.ЗаписатьИмяСвойства("end_date");
		Чтен.ЗаписатьЗначение(Формат(КонецДня(КонДата),"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"Z");
	КонецЕслИ;	

	
	Чтен.ЗаписатьИмяСвойства("doc_type");
	Чтен.ЗаписатьЗначение("10511");
	
	ВсеХорошо=Истина;
	
				       Чтен.ЗаписатьКонецОбъекта();
	
	//Чтен.ЗаписатьЗначение("{}");
				       Чтен.ЗаписатьКонецОбъекта();
				
				Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
	Тело=СтрЗаменить(Тело,Символы.ПС,"");
	Тело=СтрЗаменить(Тело,Символы.ВК,"");
	
				
//			Тело="{start_from: 0, count: 20, filter: {doc_type: ""601""}}";
			
	HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/income");
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
	HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
	//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
							
	
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(4);
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				//ЧтениеJSON = Новый ЧтениеJSON;
			Страница=0;
			Тотал=1;
			Пока Страница*СколькоНаСтранице<=Тотал Цикл
				
 					страница=Страница+1;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Тотал=NNN.total;
				
				Если СколькоНаСтранице>NNN.documents.Количество() Тогда
					 Тотал=NNN.documents.Количество()
				КонецЕсли;
				
				did="";
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				docDate="";
				Для Каждого Стр Из  NNN.documents Цикл
					
					
												Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
														HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/download/"+Стр.document_id+"");
													Иначе
														HTTPЗапрос=Новый HTTPЗапрос("documents/download/"+Стр.document_id+"");
											/////			
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
												КонецЕсли;
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
											Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
											
										
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	
		
Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
																							
											NNN_2_Ы=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
											
											Попытка
												Сайт_1=NNN_2_Ы.link;
											Исключение
												Продолжить;
											КонецПопытки;
											Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
											Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
											
											

																
											
														HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
								HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
								HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
								//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
								///Константин           
								//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
								Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
								Текст1=Ответ.ПолучитьТелоКакСтроку();
												ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
								
										КонецЕсли;												
										
																						
											
			//Попытка
				
				
				МассивПроудкций=Новый Массив;
				МассивКонтрагентов=Новый Массив;
				Попытка
					ЗаполненаТабличнаяЧастьПриемки=Ложь;
					ДатаДокумента="";
					дкоументФарм=ДобавитьПриемку(Текст1,Стр,ДатаДокумента,Thumbprint_1,Пользователь);
																	
				Исключение
					КонецПопытки;
						
					Конеццикла;

					
														  //ОработатьДокументы(Стр,Результат,Ошибка)

														
														//ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
																									//Исключение
											//	КонецПопытки;
//											 Конеццикла;

					
								//Конеццикла;
				
				Если Страница*СколькоНаСтранице>Тотал Тогда
					Прервать;
				КонецЕсли;
				
			 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("start_from");	
	Чтен.ЗаписатьЗначение(Страница*СколькоНаСтранице);
	Чтен.ЗаписатьИмяСвойства("count");
	Чтен.ЗаписатьЗначение(СколькоНаСтранице);
	Чтен.ЗаписатьИмяСвойства("filter");
	Чтен.ЗаписатьНачалоОбъекта();
	
	
	Если ЗначениеЗаполнено(НачДата) тогда
		Чтен.ЗаписатьИмяСвойства("start_date");
		Чтен.ЗаписатьЗначение(Формат(НачалоДня(НачДата),"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"Z");
	КонецЕслИ;	
	
	Если ЗначениеЗаполнено(КонДата) тогда
		Чтен.ЗаписатьИмяСвойства("end_date");
		Чтен.ЗаписатьЗначение(Формат(КонецДня(КонДата),"ДФ=""гггг-ММ-ддTЧЧ:мм:сс""")+"Z");
	КонецЕслИ;	

		
	Чтен.ЗаписатьИмяСвойства("doc_type");
	Чтен.ЗаписатьЗначение("10511");
	           Чтен.ЗаписатьКонецОбъекта();
	
	//Чтен.ЗаписатьЗначение("{}");
				       Чтен.ЗаписатьКонецОбъекта();
				
				Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
	Тело=СтрЗаменить(Тело,Символы.ПС,"");
	Тело=СтрЗаменить(Тело,Символы.ВК,"");
	
		
				HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/income");
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
	HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
	//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
							
	
	

	Если Ответ.КодСостояния<>202 И Ответ.КодСостояния<>200  Тогда
				Сообщить("Не удалось загрузить приходы с ЦРПТ, отсутствует доступ.");
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Возврат;
	КонецЕсли;
	
	Конеццикла;	
				
				
ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
					ВсеХорошо=Ложь;
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
	Иначе
					ВсеХорошо=Ложь;
					Попытка
						//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							
						Исключение
							Попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								
								Если Найти(Текст1,"Billing contract")>0 И
									Найти(Текст1,"not signed by participant")>0 Тогда
									Сообщить("Договор биллинга для выбранной группы товаров не подписан участником");
								КонецЕсли;
								
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
		//КонецЦикла;	
			   КонецЕсли;
			
			Возврат;
		КонецЕсли;
		
		
	
	
				//СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		
		СРегистра=ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			Попытка
				СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
			исключение
				СРегистра=Неопределено;
			КонецПопытки;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			Сообщить(,"Не удалось получить токен по организации");
			Возврат;
		Конецесли;
		
 	Если Ложь Тогда
		//Если НЕ ЗагрузканаСерверИзЦРПТ(Thumbprint_1,СРегистра,УжеОтправили) Тогда
		//		Если УжеОтправили=Истина Тогда
		//		//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
		//	Иначе
		//		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
		//		ЗагрузитьИзЦРПТ(Команда,Истина)			
		//КонецЕсли
		//
		//КонецЕсли;
		
		
	Иначе
		
		
			
			
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;                                                       
			
			
 			что=Thumbprint_1.что;
			
			
			
			
			
	
	Если Thumbprint_1.НаименованиеСтенда="Альтернативный табак" Тогда
		
			//ТекстЗапроса="api/v3/facade/receipt/search";
			
			Страница=0;
			
							did="";
				docDate="";
				SenderINN="";
		Пока Истина Цикл
			
			Если ЗначениеЗаполнено(did) И ЗначениеЗаполнено(docDate) Тогда
				ТелоЗапроса="{""receipt"":{""dateFrom"":"""+Формат(НачДата,"ДФ=""гггг-ММ-дд'T'ЧЧ:мм:сс""")+".000Z"+
				""",""dateTo"":"""+Формат(КонДата,"ДФ=""гггг-ММ-дд'T'ЧЧ:мм:сс""")+".999Z"+""",""page"":1},""pagination"":{""limit"":"+Формат(СколькоНаСтранице,"ЧГ=")+",""pageDir"":""NEXT"",""did"":"""+
				did+""",""senderInn"":"""+senderInn+""",""receiptDate"":"""+docDate+"""}}";
				
				
				//"{""receipt"":{""dateFrom"":"""+Формат(НачДата,"ДФ=""гггг-ММ-дд'T'ЧЧ:мм:сс""")+".000Z"+
				//""",""dateTo"":"""+Формат(КонДата,"ДФ=""гггг-ММ-дд'T'ЧЧ:мм:сс""")+".999Z"+""",""page"":"+"1"+"},""pagination"":{""limit"":"+xmlString(СколькоНаСтранице)+"}}";
			Иначе
				ТелоЗапроса="{""receipt"":{""dateFrom"":"""+Формат(НачДата,"ДФ=""гггг-ММ-дд'T'ЧЧ:мм:сс""")+".000Z"+
				""",""dateTo"":"""+Формат(КонДата,"ДФ=""гггг-ММ-дд'T'ЧЧ:мм:сс""")+".999Z"+""",""page"":"+"1"+"},""pagination"":{""limit"":"+Формат(СколькоНаСтранице,"ЧГ=")+"}}";
			Конецесли;
			Страница=Страница+1;
			
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/receipt/search");
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
			
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
			
			еСЛИ оТВЕТ.КодСостояния<>200 тОГДА	
				//Если УжеОтправили=Истина Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				//Иначе
				//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				//	Загрузить(Команда,Истина)			
				//КонецЕсли;
				Возврат;
				
			кОНЕЦеСЛИ;		
							Текст1=Ответ.ПолучитьТелоКакСтроку();
			
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						
			Если NNN.Количество()=0 тогда
				Возврат;
			КонецЕсли;
			
			
			
				Тотал=999999999999;
				
				Тотал=NNN.Количество();
				
					МММ=NNN;
					Для Каждого Стр Из  МММ Цикл
						did=Стр.did;
						senderInn=Стр.senderInn;
						docDate=Формат(Дата(1970,1,1)+Стр.receiptDate/1000,"ДФ=""гггг-ММ-ддTЧЧ:мм:ссZ""");
					//	Если Стр.input=true 
					//		И Найти(Стр.type,"LP_SHIP_GOODS")=1
					//		Тогда
					
	 			что=Thumbprint_1.что;
		
				
							//Если Thumbprint_1.НаименованиеСтенда="Альтернативный табак" Тогда
								HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/receipt/"+Стр.did+"/download");
							//Иначе
							//	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/receipt/"+Стр.number+"/body?pg="+Что+"&limit=2147483647");
							//КонецЕсли;
							HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
							HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
							//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
							///Константин           
							Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
							Текст1=Ответ.ПолучитьТелоКакСтроку();
							
							
							
							
							
							ТелоЗапроса="{""needTotal"":true,""documentId"":"""+Стр.did+""",""limit"":"+Формат(СколькоНаСтранице,"ЧГ=")+",""offset"":0}";
							
							HTTPЗапрос=Новый HTTPЗапрос("private-office-api/private/v2/cis/search");
							HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
							HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		#Если ВебКлиент Тогда
							HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса,КодировкаТекста.UTF8);
			#Иначе
							HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
							
							
							Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
						еСЛИ оТВЕТ.КодСостояния<>200 тОГДА	
				//Если УжеОтправили=Истина Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				//Иначе
				//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				//	Загрузить(Команда,Истина)			
				//КонецЕсли;
				Возврат;
				
			кОНЕЦеСЛИ;		 	
							
							ТекстТабл=Ответ.ПолучитьТелоКакСтроку();
							NNN_ТабличнаяЧасть=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстТабл);//ПрочитатьJSON(ЧтениеJSON);
							
							
					ОбновитьСтатусДокумента_чек_Табак(Текст1,Пользователь,Стр,NNN_ТабличнаяЧасть);	
													
					// 	КонецЕсли;
					Конеццикла;
			
			
			
			
			//
			//Если ЗначениеЗаполнено(НачДата) Тогда
			//	ТекстЗапроса=ТекстЗапроса+"&dateFrom="+Формат(НачДата,"ДФ=""гггг-ММ-дд'T'ЧЧ:мм:сс""")+".000Z";
			//	
			//КонецЕслИ;
			//Если ЗначениеЗаполнено(КонДата) Тогда
			//	ТекстЗапроса=ТекстЗапроса+"&dateTo="+Формат(КонДата,"ДФ=""гггг-ММ-дд'T'ЧЧ:мм:сс""")+".999Z";
			//	
			//КонецЕслИ;

		Конеццикла;	
		Возврат;		
		
	КонецЕсли;
	
			
			Если Thumbprint_1.НаименованиеСтенда="Альтернативный табак" Тогда
				ТекстЗапроса="api/v3/true-api/receipt/listV2?pg="+Что;
			Иначе
				ТекстЗапроса="api/v3/facade/receipt/listV2?pg="+Что;
			КонецЕсли;
			Если ЗначениеЗаполнено(НачДата) Тогда
				ТекстЗапроса=ТекстЗапроса+"&dateFrom="+Формат(НачДата,"ДФ=""гггг-ММ-дд'T'ЧЧ:мм:сс""")+".000Z";
				
			КонецЕслИ;
			Если ЗначениеЗаполнено(КонДата) Тогда
				ТекстЗапроса=ТекстЗапроса+"&dateTo="+Формат(КонДата,"ДФ=""гггг-ММ-дд'T'ЧЧ:мм:сс""")+".999Z";
				
			КонецЕслИ;
			
			
			ТекстЗапроса=ТекстЗапроса+"&limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=docDate&pageDir=NEXT";
	HTTPЗапрос=Новый HTTPЗапрос(ТекстЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
							
	
	
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				//ЧтениеJSON = Новый ЧтениеJSON;
			Страница=0;
			Тотал=1;
			Пока Страница*СколькоНаСтранице<=Тотал Цикл
				
 					страница=Страница+1;
				//ЧтениеJSON.УстановитьСтроку(Текст1);
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
				Тотал=999999999999;
				
				Если Thumbprint_1.НаименованиеСтенда="Альтернативный табак" Тогда
				 	Тотал=NNN.Количество()
				 Иначе
					Если СколькоНаСтранице>NNN.results.Количество() Тогда
					 Тотал=NNN.results.Количество()
				 	КонецЕсли;
				КонецЕсли;
				
				did="";
				docDate="";
				Если Thumbprint_1.НаименованиеСтенда="Альтернативный табак" Тогда
					МММ=NNN;
					Для Каждого Стр Из  МММ Цикл
						did=Стр.did;
						docDate=Дата(1970,1,1)+Стр.receiptDate;
					//	Если Стр.input=true 
					//		И Найти(Стр.type,"LP_SHIP_GOODS")=1
					//		Тогда
					
	 			что=Thumbprint_1.что;
		
				
							Если Thumbprint_1.НаименованиеСтенда="Альтернативный табак" Тогда
								HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/receipt/"+Стр.did+"/info");
							Иначе
								HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/receipt/"+Стр.number+"/body?pg="+Что+"&limit=2147483647");
							КонецЕсли;
							HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
							HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
							//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
							///Константин           
							Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
							Текст1=Ответ.ПолучитьТелоКакСтроку();
							//ЧтениеJSON = Новый ЧтениеJSON;
							//ЧтениеJSON.УстановитьСтроку(Текст1);
							//МассивУп=Новый Массив;
							
							//МассивКМ=Новый Массив;
					ОбновитьСтатусДокумента_чек(Текст1,Пользователь);	
													
					// 	КонецЕсли;
					Конеццикла;
					
				Иначе
					МММ=NNN.results;
					Для Каждого Стр Из  МММ Цикл
						did=Стр.number;
						docDate=Стр.docDate;
					//	Если Стр.input=true 
					//		И Найти(Стр.type,"LP_SHIP_GOODS")=1
					//		Тогда
					
	 			что=Thumbprint_1.что;
		
				
							Если Thumbprint_1.НаименованиеСтенда="Альтернативный табак" Тогда
								HTTPЗапрос=Новый HTTPЗапрос("api/v3/true-api/receipt/"+Стр.number+"/body?pg="+Что+"&limit=2147483647");
							Иначе
								HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/receipt/"+Стр.number+"/body?pg="+Что+"&limit=2147483647");
							КонецЕсли;
							HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
							HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
							//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
							///Константин           
							Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
							Текст1=Ответ.ПолучитьТелоКакСтроку();
							//ЧтениеJSON = Новый ЧтениеJSON;
							//ЧтениеJSON.УстановитьСтроку(Текст1);
							//МассивУп=Новый Массив;
							                           
							//МассивКМ=Новый Массив;
					ОбновитьСтатусДокумента_чек(Текст1,Пользователь);	
													
					// 	КонецЕсли;
					Конеццикла;
				КонецЕсли;
				Если Страница*СколькоНаСтранице>Тотал Тогда
					Прервать;
				КонецЕсли;
				
 			что=Thumbprint_1.что;
	

			Если Thumbprint_1.НаименованиеСтенда="Альтернативный табак" Тогда
				ТекстЗапроса="api/v3/true-api/receipt/listV2?pg="+Что;
			Иначе
				ТекстЗапроса="api/v3/facade/receipt/listV2?pg="+Что;
			КонецЕсли;
			Если ЗначениеЗаполнено(НачДата) Тогда
				ТекстЗапроса=ТекстЗапроса+"&dateFrom="+Формат(НачалоДня(НачДата),"ДФ=""гггг-ММ-дд'T'ЧЧ:мм:сс""")+".000Z";
				
			КонецЕслИ;
			Если ЗначениеЗаполнено(КонДата) Тогда
				ТекстЗапроса=ТекстЗапроса+"&dateTo="+Формат(КонецДня(КонДата),"ДФ=""гггг-ММ-дд'T'ЧЧ:мм:сс""")+".999Z";
				
			КонецЕслИ;
			
Если Thumbprint_1.НаименованиеСтенда="Альтернативный табак" Тогда
			 ТекстЗапроса=ТекстЗапроса+"&limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=docDate&did="+did+"&pageDir=NEXT";
Иначе										
			 ТекстЗапроса=ТекстЗапроса+"&limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=docDate&did="+did+"&orderedColumnValue="+docDate+"&pageDir=NEXT";
КонецЕсли;
				 HTTPЗапрос=Новый HTTPЗапрос(ТекстЗапроса);
				 
				 //"api/v3/facade/doc/listV2?documentType=LK_RECEIPT&documentType=RECEIPT&limit="+Формат(СколькоНаСтранице,"ЧГ=")+"&order=DESC&orderColumn=docDate&did="+did+"&orderedColumnValue="+docDate+"&pageDir=NEXT");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//Тело="documentType=LP_ACCEPT_GOODS_XML";
//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	Если Ответ.КодСостояния<>202 И Ответ.КодСостояния<>200  Тогда
		//Если УжеОтправили=Истина Тогда
				Сообщить("Не удалось загрузить приходы с ЦРПТ, отсутствует доступ.");
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Возврат;
		//	Иначе
		//		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
		//		Загрузить(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	
	Конеццикла;	
				
				
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			//Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			//Иначе
			//	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
			//	Загрузить(Команда,Истина)			
			//КонецЕсли
	Иначе
					Попытка
						//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							
						Исключение
							Попытка
								Если NNN.error="access_denied" Тогда
									Сообщить(NNN.error_description+" "+" сайт ЦРПТ не доступен. Повторите отправку позже");
								КонецЕсли;
							Исключение
								
								Если Найти(Текст1,"Billing contract")>0 И
									Найти(Текст1,"not signed by participant")>0 Тогда
									Сообщить("Договор биллинга для выбранной группы товаров не подписан участником");
								КонецЕсли;
								
							КонецПопытки;
							
						КонецПопытки;
						
					Исключение
					КонецПопытки;
		//	Иначе
		//		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,ЭтаФорма,"ПодписатьФайлПослеПолученияТокена");
		//		ОтправитьЗаявку(Команда,Истина)			
		//	КонецЕсли
	КонецЕсли;
	КонецЕсли;


Конецпроцедуры

Процедура ОбновитьСтатусДокумента_чек(Текст1,Пользователь)
						NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
	
	//ДокументВ=Документы.ВводВОборот_ХамелеонЦРПТ.НайтиПоРеквизиту("_Order_ID",
	///NNN_1.number);
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводВОборот_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Документ.ВводВОборот_ХамелеонЦРПТ КАК ВводВОборот_ХамелеонЦРПТ
		|ГДЕ
		|	ПОДСТРОКА(ВводВОборот_ХамелеонЦРПТ._Order_ID, 1, 1000) = &_Order_ID";
	
	Попытка
		Запрос.УстановитьПараметр("_Order_ID", NNN_1.number);
	Исключение
		Возврат;
	КонецПопытки;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ДокументВ=Неопределено;
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ДокументВ=ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕслИ;
	
	
	body=NNN_1.body.receipt;
	Если ЗначениеЗаполнено(ДокументВ) Тогда
		ДокумС=ДокументВ.ПолучитьОбъект();
	Иначе
		ДокумС=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
	КонецЕсли;
	ДатаДокумента=NNN_1.docDate;
	ДокумС.Дата=Дата(Сред(ДатаДокумента,1,4),Сред(ДатаДокумента,6,2),Сред(ДатаДокумента,9,2),Сред(ДатаДокумента,12,2),Сред(ДатаДокумента,15,2),Сред(ДатаДокумента,18,2));
	
	
	ДокумС._Order_ID=NNN_1.number;
	ДокумС.ВидПервичногоДокумента=Перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ.RECEIPT;
	
	ДокумС.ПричинаВыводаИзОборота=Перечисления.ПричинаВыводаИзОборота_ХамлеонЦРПТ.RETAIL;
	Если NNN_1.status="CHECKED_OK" Тогда
		ДокумС.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан;	
	ИначеЕсли NNN_1.status="CHECKED_NOT_OK" Тогда
		ДокумС.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ;	
		          Иначе
		Сообщить("Не известный статус "+ NNN_1.status)
	КонецЕсли;
	//ДокумС.Статус=	
	ДокумС.ДатаПервичногоДокумента=Дата(1970,1,1)+body.dateTime;;
	ДокумС.ОФД=Истина;
	ДокумС.НомерПервичногоДокумента=xmlString(body.fiscalDocumentNumber);
	Если NNN_1.type="RECEIPT"	 Тогда
		ДокумС.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота;
	ИначеЕсли NNN_1.type="RECEIPT_RETURN"	 Тогда
		ДокумС.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотВозвратВРозницу;
	Конецесли;
	ДокумС.ТипПервичногоДокумента=Перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ.RECEIPT;
	ДокумС.ТекущийПользователь=Пользователь;
	ДокумС.Организация=ДокумС.ТекущийПользователь.Организация;
	ДокумС.РегистрационныйНомерККТ=body.kktREGID;
	ДокумС.СерийныеНомера.Очистить();;
	ДокумС.Товары.Очистить();
	Для Каждого Стр_1 Из body.items Цикл
		Попытка
		  ШтрихКод=Стр_1.uit;
	  	Исключение
		  ШтрихКод="";
		 КонецПопытки;
			попытка
				Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
				Число(Сред(ШтрихКод,3,14)));;
				Если не ЗначениеЗаполнено(Продукция)  Тогда
					Прод=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
					Прод.GTIN=Число(Сред(ШтрихКод,3,14));
					Прод.Наименование=Стр_1.name;
					Прод.НаименованиеТовара=Стр_1.name;
					Прод.Записать();
					Продукция=Прод.Ссылка;
				КонецЕсли;
			Исключение
				Если Найти(ШТрихкОД,"gtin:")=1 ТОгда
					Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
					Число(Сред(ШтрихКод,6,14)));
					Если не ЗначениеЗаполнено(Продукция)  Тогда
						Прод=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
						Прод.GTIN=Число(Сред(ШтрихКод,6,14));
						Прод.Наименование=Стр_1.name;
						Прод.НаименованиеТовара=Стр_1.name;
						Прод.Записать();
						Продукция=Прод.Ссылка;
					КонецЕсли;
					ШтрихКод=Сред(ШтрихКод,6,14)+"21"+Сред(ШтрихКод,Найти(ШтрихКод,"sn:")+4);
				Иначе 	
					Продукция=Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка();
				КонецЕсли;
			КонецПопытки;
				Добав=ДокумС.СерийныеНомера.Добавить();
				Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
				Добав.НаименованиеТовара=Продукция;
				Добав.cis=ШтрихКод;
				
				
				ППП=ДокумС.Товары.НайтиСтроки(Новый структура("gtin",Продукция));
				Если ППП.Количество()=0 Тогда
					Добав_1=ДокумС.Товары.Добавить();
					Добав_1.GTIN=Продукция;
					Добав_1.КодТНВЭД=Продукция.КодТНВЭД;
			Если Продукция.СтранаПроизводства.Альфа2="RU" Тогда
				//СтрП="Производство в РФ";
					Добав_1.СпособВыпускаТоваров="Производство в РФ";
			Иначе
				//СтрП="Ввезен в РФ";
					Добав_1.СпособВыпускаТоваров="Ввезен в РФ";
				
			КонецЕсли;
					Добав_1.НомерСтрокиСвязи=Добав_1.НомерСтроки;
					Добав_1.КоличествоКМ=1;
					Добав_1.ДекларацияИлиСертификатСоответствия=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(ДокумС.Дата,
					Новый Структура("Продукция",Продукция)).Документ;
					Добав_1.Цена=Стр_1.sum/100;
					
					Стр_1.Свойство("ndsSum",Добав_1.СуммаНДС);
					Добав_1.СуммаНДС=Добав_1.СуммаНДС/100;
				
						//=Стр_1.ndsSum/100;
					
				Иначе
					Добав_1=ППП[0];
					Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
					Сумма=Добав_1.Цена*(Добав_1.КоличествоКМ-1)+Стр_1.sum/100;
					Добав_1.Цена=Сумма/Добав_1.КоличествоКМ;
					
					СуммаНДС=0;
					Если Стр_1.Свойство("ndsSum",СуммаНДС) Тогда
						Добав_1.СуммаНДС=Добав_1.СуммаНДС+СуммаНДС/100
					КонецЕсли;
				КонецЕсли;
				Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
						
		
			КонецциклА;
			Попытка
	  			ДокумС.Записать();
			исключение
				Для Каждого Стр Из ДокумС.СерийныеНомера Цикл
					Стр.cis=КодироватьСтроку(Стр.cis,СпособКодированияСтроки.КодировкаURL);
				Конеццикла;
				
	  			ДокумС.Записать();
			КонецПопытки;
	  Попытка
		  ДокумС.Записать(РежимЗаписидокумента.Проведение);
	  Исключение
	  КонецПопытки;
	// ИначеЕсли NNN_1.type="RECEIPT_RETURN"	 Тогда
	//	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ВводВОборот_ХамелеонЦРПТ.Ссылка
	//	|ИЗ
	//	|	Документ.ВводВОборот_ХамелеонЦРПТ КАК ВводВОборот_ХамелеонЦРПТ
	//	|ГДЕ
	//	|	ПОДСТРОКА(ВводВОборот_ХамелеонЦРПТ._Order_ID, 1, 1000) = &_Order_ID";
	//
	//Запрос.УстановитьПараметр("_Order_ID", NNN_1.number);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//ДокументВ=Неопределено;
	//Если ВыборкаДетальныеЗаписи.Следующий() Тогда
	//	// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//	ДокументВ=ВыборкаДетальныеЗаписи.Ссылка;
	//КонецЕслИ;
	//
	//
	//body=NNN_1.body.receipt;
	//Если ЗначениеЗаполнено(ДокументВ) Тогда
	//	ДокумС=ДокументВ.ПолучитьОбъект();
	//Иначе
	//	ДокумС=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
	//КонецЕсли;
	//ДатаДокумента=NNN_1.docDate;
	//ДокумС.Дата=Дата(Сред(ДатаДокумента,1,4),Сред(ДатаДокумента,6,2),Сред(ДатаДокумента,9,2),Сред(ДатаДокумента,12,2),Сред(ДатаДокумента,15,2),Сред(ДатаДокумента,18,2));
	//
	//
	//ДокумС._Order_ID=NNN_1.number;
	//ДокумС.ВидПервичногоДокумента=Перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ.RECEIPT;
	//
	//ДокумС.ПричинаВыводаИзОборота=Перечисления.ПричинаВыводаИзОборота_ХамлеонЦРПТ.RETAIL;
	//Если NNN_1.status="CHECKED_OK" Тогда
	//	ДокумС.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан;	
	//ИначеЕсли NNN_1.status="CHECKED_NOT_OK" Тогда
	//	ДокумС.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ;	
	//	          Иначе
	//	Сообщить("Не известный статус "+ NNN_1.status)
	//КонецЕсли;
	////ДокумС.Статус=	
	//ДокумС.ДатаПервичногоДокумента=Дата(1970,1,1)+body.dateTime;;
	//ДокумС.ОФД=Истина;
	//ДокумС.НомерПервичногоДокумента=xmlString(body.fiscalDocumentNumber);
	//ДокумС.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотВозвратВРозницу;
	//ДокумС.ТипПервичногоДокумента=Перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ.RECEIPT;
	//ДокумС.ТекущийПользователь=Пользователь;
	//ДокумС.Организация=ДокумС.ТекущийПользователь.Организация;
	//ДокумС.СерийныеНомера.Очистить();;
	//ДокумС.Товары.Очистить();
	//Для Каждого Стр_1 Из body.items Цикл
	//	  ШтрихКод=Стр_1.uit;
	//		попытка
	//			Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
	//			Число(Сред(ШтрихКод,3,14)));;
	//			Если не ЗначениеЗаполнено(Продукция)  Тогда
	//				Прод=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
	//				Прод.GTIN=Число(Сред(ШтрихКод,3,14));
	//				Прод.Наименование=Стр_1.name;
	//				Прод.Записать();
	//				Продукция=Прод.Ссылка;
	//			КонецЕсли;
	//		Исключение
	//			Продукция=Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка();
	//		КонецПопытки;
	//			Добав=ДокумС.СерийныеНомера.Добавить();
	//			Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
	//			Добав.НаименованиеТовара=Продукция;
	//			Добав.cis=ШтрихКод;
	//			
	//			
	//			ППП=ДокумС.Товары.НайтиСтроки(Новый структура("gtin",Продукция));
	//			Если ППП.Количество()=0 Тогда
	//				Добав_1=ДокумС.Товары.Добавить();
	//				Добав_1.GTIN=Продукция;
	//				Добав_1.КодТНВЭД=Продукция.КодТНВЭД;
	//		Если Продукция.СтранаПроизводства.Альфа2="RU" Тогда
	//			//СтрП="Производство в РФ";
	//				Добав_1.СпособВыпускаТоваров="Производство в РФ";
	//		Иначе
	//			//СтрП="Ввезен в РФ";
	//				Добав_1.СпособВыпускаТоваров="Ввезен в РФ";
	//			
	//		КонецЕсли;
	//				Добав_1.НомерСтрокиСвязи=Добав_1.НомерСтроки;
	//				Добав_1.КоличествоКМ=1;
	//				Добав_1.ДекларацияИлиСертификатСоответствия=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(ДокумС.Дата,
	//				Новый Структура("Продукция",Продукция)).Документ;
	//				Добав_1.Цена=Стр_1.sum/100;
	//				Добав_1.СуммаНДС=Стр_1.ndsSum/100;
	//				
	//			Иначе
	//				Добав_1=ППП[0];
	//				Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
	//				Сумма=Добав_1.Цена*(Добав_1.КоличествоКМ-1)+Стр_1.sum/100;
	//				Добав_1.Цена=Сумма/Добав_1.КоличествоКМ;
	//				Добав_1.СуммаНДС=Добав_1.СуммаНДС+Стр_1.ndsSum/100
	//			КонецЕсли;
	//			Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
	//					
	//	
	//		КонецциклА;
	//		Попытка
	//  			ДокумС.Записать();
	//		исключение
	//			Для Каждого Стр Из ДокумС.СерийныеНомера Цикл
	//				Стр.cis=КодироватьСтроку(Стр.cis,СпособКодированияСтроки.КодировкаURL);
	//			Конеццикла;
	//			
	//  			ДокумС.Записать();
	//		КонецПопытки;
	//  Попытка
	//	  ДокумС.Записать(РежимЗаписидокумента.Проведение);
	//  Исключение
	//  КонецПопытки; 
	// КонецЕсли;
КонецПроцедуры

Процедура ОбновитьСтатусДокумента_чек_Табак(Текст1,Пользователь,Общие,NNN_ТабличнаяЧасть)
				NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
	
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ВводВОборот_ХамелеонЦРПТ.Ссылка
					|ИЗ
					|	Документ.ВводВОборот_ХамелеонЦРПТ КАК ВводВОборот_ХамелеонЦРПТ
					|ГДЕ
					|	ПОДСТРОКА(ВводВОборот_ХамелеонЦРПТ._Order_ID, 1, 1000) = &_Order_ID";
				
				Запрос.УстановитьПараметр("_Order_ID", Общие.did);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				ДокументВ=Неопределено;
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					ДокументВ=ВыборкаДетальныеЗаписи.Ссылка;
				КонецЕслИ;
				
				
				body=NNN_1.receipt;
				Если ЗначениеЗаполнено(ДокументВ) Тогда
					ДокумС=ДокументВ.ПолучитьОбъект();
				Иначе
					ДокумС=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
				КонецЕсли;
				ДатаДокумента=Дата(1970,1,1)+body.dateTime;
				ДокумС.Дата=ДатаДокумента;
				//Дата(Сред(ДатаДокумента,1,4),Сред(ДатаДокумента,6,2),Сред(ДатаДокумента,9,2),Сред(ДатаДокумента,12,2),Сред(ДатаДокумента,15,2),Сред(ДатаДокумента,18,2));
				
				
				ДокумС._Order_ID=Общие.did;
				ДокумС.ВидПервичногоДокумента=Перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ.RECEIPT;
				
				ДокумС.ПричинаВыводаИзОборота=Перечисления.ПричинаВыводаИзОборота_ХамлеонЦРПТ.RETAIL;
				Если Общие.status="CHECKED_OK" Тогда
					ДокумС.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Обработан;	
				ИначеЕсли Общие.status="CHECKED_NOT_OK" Тогда
					ДокумС.Статус=Перечисления.СтатусыДокументов_ХамелеонЦРПТ.Отказ;	
					          Иначе
					Сообщить("Не известный статус "+ NNN_1.status)
				КонецЕсли;
				//ДокумС.Статус=	
				ДокумС.ДатаПервичногоДокумента=Дата(1970,1,1)+body.dateTime;
				ДокумС.ОФД=Истина;
				ДокумС.НомерПервичногоДокумента=xmlString(body.fiscalDocumentNumber);
				
				Если Общие.type="RECEIPT"	 Тогда
					ДокумС.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота;
				ИначеЕсли Общие.type="RECEIPT_RETURN" тогда
					ДокумС.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборотВозвратВРозницу;
				КонецЕсли;			
				ДокумС.ТипПервичногоДокумента=Перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ.RECEIPT;
				//ДокумС.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота;
				//ДокумС.ТипПервичногоДокумента=Перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ.RECEIPT;
				ДокумС.ТекущийПользователь=Пользователь;
				ДокумС.Организация=ДокумС.ТекущийПользователь.Организация;
				ДокумС.РегистрационныйНомерККТ=Body.KKtRegid;
				ДокумС.СерийныеНомера.Очистить();;
				ДокумС.Товары.Очистить();
				
				
				сч=0;
				
				Если body.items.Количество()=NNN_ТабличнаяЧасть.results.Количество() Тогда
				
									Для Каждого Стр_1 Из body.items Цикл
										Стр_М=NNN_ТабличнаяЧасть.results[сч];
										сч=сч+1;
										ШтрихКод=Стр_М.cis;
											попытка
												Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
												Число(Стр_М.gtin));;
												Если не ЗначениеЗаполнено(Продукция)  Тогда
													Прод=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
													Прод.GTIN=Число(Стр_М.gtin);
													Прод.Наименование=Стр_М.productName;
													Прод.НаименованиеТовара=Стр_М.productName;
													Прод.Записать();
													Продукция=Прод.Ссылка;
												КонецЕсли;
											Исключение
												//Если Найти(ШТрихкОД,"gtin:")=1 ТОгда
												//	Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
												//	Число(Сред(ШтрихКод,6,14)));
												//	Если не ЗначениеЗаполнено(Продукция)  Тогда
												//		Прод=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
												//		Прод.GTIN=Число(Сред(ШтрихКод,6,14));
												//		Прод.Наименование=Стр_1.name;
												//		Прод.Записать();
												//		Продукция=Прод.Ссылка;
												//	КонецЕсли;
												//	ШтрихКод=Сред(ШтрихКод,6,14)+"21"+Сред(ШтрихКод,Найти(ШтрихКод,"sn:")+4);
												//Иначе 	
												//	Продукция=Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка();
												//КонецЕсли;
											КонецПопытки;
												Добав=ДокумС.СерийныеНомера.Добавить();
												Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
												Добав.НаименованиеТовара=Продукция;
												Добав.cis=ШтрихКод;
												
												
												ППП=ДокумС.Товары.НайтиСтроки(Новый структура("gtin",Продукция));
												Если ППП.Количество()=0 Тогда
													Добав_1=ДокумС.Товары.Добавить();
													Добав_1.GTIN=Продукция;
													Добав_1.КодТНВЭД=Продукция.КодТНВЭД;
											Если Продукция.СтранаПроизводства.Альфа2="RU" Тогда
												//СтрП="Производство в РФ";
													Добав_1.СпособВыпускаТоваров="Производство в РФ";
											Иначе
												//СтрП="Ввезен в РФ";
													Добав_1.СпособВыпускаТоваров="Ввезен в РФ";
												
											КонецЕсли;
													Добав_1.НомерСтрокиСвязи=Добав_1.НомерСтроки;
													Добав_1.КоличествоКМ=1;
													Добав_1.ДекларацияИлиСертификатСоответствия=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(ДокумС.Дата,
													Новый Структура("Продукция",Продукция)).Документ;
													Добав_1.Цена=Стр_1.sum/100;
													Стр_1.Свойство("ndsSum",Добав_1.СуммаНДС);
														//=Стр_1.ndsSum/100;
													
												Иначе
													Добав_1=ППП[0];
													Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
													Сумма=Добав_1.Цена*(Добав_1.КоличествоКМ-1)+Стр_1.sum/100;
													Добав_1.Цена=Сумма/Добав_1.КоличествоКМ;
													
													СуммаНДС=0;
													Если Стр_1.Свойство("ndsSum",СуммаНДС) Тогда
														Добав_1.СуммаНДС=Добав_1.СуммаНДС+СуммаНДС/100
													КонецЕсли;
												КонецЕсли;
												Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
														
										
											КонецциклА;
					Иначе
											
											
								Для Каждого Стр_1 Из NNN_ТабличнаяЧасть.results Цикл
										//Стр_М=NNN_ТабличнаяЧасть.results[сч];
										сч=сч+1;
										Стр_М=Стр_1;
										ШтрихКод=Стр_М.cis;
											попытка
												Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
												Число(Стр_М.gtin));;
												Если не ЗначениеЗаполнено(Продукция)  Тогда
													Прод=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
													Прод.GTIN=Число(Стр_М.gtin);
													Прод.Наименование=Стр_М.productName;
													Прод.НаименованиеТовара=Стр_М.productName;
													Прод.Записать();
													Продукция=Прод.Ссылка;
												КонецЕсли;
											Исключение
												//Если Найти(ШТрихкОД,"gtin:")=1 ТОгда
												//	Продукция=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
												//	Число(Сред(ШтрихКод,6,14)));
												//	Если не ЗначениеЗаполнено(Продукция)  Тогда
												//		Прод=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
												//		Прод.GTIN=Число(Сред(ШтрихКод,6,14));
												//		Прод.Наименование=Стр_1.name;
												//		Прод.Записать();
												//		Продукция=Прод.Ссылка;
												//	КонецЕсли;
												//	ШтрихКод=Сред(ШтрихКод,6,14)+"21"+Сред(ШтрихКод,Найти(ШтрихКод,"sn:")+4);
												//Иначе 	
												//	Продукция=Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка();
												//КонецЕсли;
											КонецПопытки;
												Добав=ДокумС.СерийныеНомера.Добавить();
												Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
												Добав.НаименованиеТовара=Продукция;
												Добав.cis=ШтрихКод;
												
												
												ППП=ДокумС.Товары.НайтиСтроки(Новый структура("gtin",Продукция));
												Если ППП.Количество()=0 Тогда
													Добав_1=ДокумС.Товары.Добавить();
													Добав_1.GTIN=Продукция;
													Добав_1.КодТНВЭД=Продукция.КодТНВЭД;
											Если Продукция.СтранаПроизводства.Альфа2="RU" Тогда
												//СтрП="Производство в РФ";
													Добав_1.СпособВыпускаТоваров="Производство в РФ";
											Иначе
												//СтрП="Ввезен в РФ";
													Добав_1.СпособВыпускаТоваров="Ввезен в РФ";
												
											КонецЕсли;
													Добав_1.НомерСтрокиСвязи=Добав_1.НомерСтроки;
													Добав_1.КоличествоКМ=1;
													Добав_1.ДекларацияИлиСертификатСоответствия=РегистрыСведений.ПодтверждающиеДокументы_ХамелеонЦРПТ.ПолучитьПоследнее(ДокумС.Дата,
													Новый Структура("Продукция",Продукция)).Документ;
													//Добав_1.Цена=Стр_1.sum/100;
													//Добав_1.СуммаНДС=Стр_1.ndsSum/100;
													
												Иначе
													Добав_1=ППП[0];
													Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
													//Сумма=Добав_1.Цена*(Добав_1.КоличествоКМ-1)+Стр_1.sum/100;
													//Добав_1.Цена=Сумма/Добав_1.КоличествоКМ;
													//Добав_1.СуммаНДС=Добав_1.СуммаНДС+Стр_1.ndsSum/100
												КонецЕсли;
												Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
														
										
											КонецциклА;
											
										ДокумС.Комментарий="ЦЕНЫ НЕ ЗАПОЛНЕНЫ. ЕСТЬ ДРУГАЯ ПРОДУКЦИЯ, отличная от ТАБАКА";	
											
										КонецЕсли;
										
						Попытка
				  			ДокумС.Записать();
						исключение
							Для Каждого Стр Из ДокумС.СерийныеНомера Цикл
								Стр.cis=КодироватьСтроку(Стр.cis,СпособКодированияСтроки.КодировкаURL);
							Конеццикла;
							
				  			ДокумС.Записать();
						КонецПопытки;
				  Попытка
					  ДокумС.Записать(РежимЗаписидокумента.Проведение);
				  Исключение
				  КонецПопытки;
				  
				  
КонецПроцедуры

Функция   ДобавитьПриемку(Текст1,Стр,ДатаДокумента,Thumbprint_1,Пользователь);
ДатаВыдачи=Стр.date;
ДатаДокумента=Дата(Сред(ДатаВыдачи,1,4),Сред(ДатаВыдачи,6,2),Сред(ДатаВыдачи,9,2),Сред(ДатаВыдачи,12,2),Сред(ДатаВыдачи,15,2),Сред(ДатаВыдачи,18,2));									 												          Чтен=Новый ЧтениеXML;
	Чтен.УстановитьСтроку(Текст1);
	ОтветСтруктура = ФабрикаXDTO.ПрочитатьXML(Чтен).retail_sale;	
	
	ИдДокумента=Стр.document_id;
	
	ДокументПриемки=Документы.Приемка_ХамелеонЦРПТ.НайтиПоРеквизиту("_Order_ID",ИдДокумента);
	Если ЗначениеЗаполнено(ДокументПриемки) тогда
		ДокументПриемки=ДокументПриемки.ПолучитьОбъект();
		Если ЗначениеЗаполнено(ДокументПриемки.Организация) 
			И ЗначениеЗаполнено(ДокументПриемки.ТекущийПользователь)
			тогда
			Возврат ДокументПриемки.Ссылка
		Конецесли;
	Иначе
		ДокументПриемки=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
	КонецЕслИ;
	
	
	ДокументПриемки._Order_ID=ИдДокумента;
ДокументПриемки.Организация=Пользователь.Организация;                
ДокументПриемки.ТекущийПользователь=Пользователь;
ДокументПриемки.ТипДокумента=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота;
ДокументПриемки.ПричинаВыводаИзОборота=Перечисления.ПричинаВыводаИзОборота_ХамлеонЦРПТ.RETAIL;

ДокументПриемки.Дата=Дата(Сред(ДатаВыдачи,1,4),Сред(ДатаВыдачи,6,2),Сред(ДатаВыдачи,9,2),Сред(ДатаВыдачи,12,2),Сред(ДатаВыдачи,15,2),Сред(ДатаВыдачи,18,2));

//ДатаВыдачи=ОтветСтруктура.doc_date;
//ДокументПриемки.ДатаВходящий=	Дата(Сред(ДатаВыдачи,7,4),Сред(ДатаВыдачи,4,2),Сред(ДатаВыдачи,1,2));
//ДокументПриемки.НомерВходящий=ОтветСтруктура.doc_num;


ДокументПриемки.Товары.Очистить();
ДокументПриемки.СерийныеНомера.Очистить();
//ДокументПриемки.Короба.Очистить();
Если ТипЗнч(ОтветСтруктура.sell_details)=Тип("ОбъектXDTO") тогда
	
	   Стр_1=ОтветСтруктура.sell_details;
	   
	   
	   
	   
	   Если ТипЗнч(Стр_1.items)=ТиП("ОбъектXDTO") Тогда
		   Стр_Итемс=Стр_1.items;
		   
		   Добав=ДокументПриемки.СерийныеНомера.Добавить();
		   
		   		//Добав=Документприемки.СерийныеНомера.Добавить();
		//Если Стр_1.Свойства().Получить("sgtin")=Неопределено Тогда
			//Cnh
			
			
			//Сообщить(Текст1);
			
			// Сообщить("Есть упаковки");
			//Сообщить(Стр_1.sscc_detail.sscc);
			Добав.cis=Стр_1.sgtin;
			
			Добав.Цена=Стр_1.cost;
			Добав.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",
			Число(Сред(Стр_1.sgtin,1,14)));
			Нстр=ДокументПриемки.Товары.НайтиСтроки(Новый Структура("GTIN,Цена",Добав.НаименованиеТовара,Добав.Цена));
			Если НСтр.Количество()=0 Тогда
				НСтр=ДокументПриемки.Товары.Добавить();
				НСтр.GTIN=Добав.НаименованиеТовара;
				Попытка
				Исключение
				КонецПопытки;
			Иначе
				НСтр=Нстр[0]
			КонецЕсли;
			Добав.НДС=Стр_1.vat_value;
			НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
			НСтр.Сумма=НСтр.Сумма+Стр_1.cost;
			НСтр.НДС=НСтр.НДС+Стр_1.vat_value;
			Нстр.Цена=НСтр.Сумма/НСтр.КоличествоКМ;
			 
			 
		Иначе
			
			Для Каждого Стр_Итемс Из Стр_1.items Цикл
			  Добав=ДокументПриемки.СерийныеНомера.Добавить();
		   
	   
			//Добав=Документприемки.СерийныеНомера.Добавить();
			//Если Стр_1.Свойства().Получить("sgtin")=Неопределено Тогда
				//Cnh
				
				
				//Сообщить(Текст1);
				
				// Сообщить("Есть упаковки");
				//Сообщить(Стр_1.sscc_detail.sscc);
				Добав.cis=Стр_1.sgtin;
				
				Добав.Цена=Стр_1.cost;
				Добав.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",
				Число(Сред(Стр_1.sgtin,1,14)));
				Нстр=ДокументПриемки.Товары.НайтиСтроки(Новый Структура("GTIN,Цена",Добав.НаименованиеТовара,Добав.Цена));
				Если НСтр.Количество()=0 Тогда
					НСтр=ДокументПриемки.Товары.Добавить();
					НСтр.GTIN=Добав.НаименованиеТовара;
					Попытка
					Исключение
					КонецПопытки;
				Иначе
					НСтр=Нстр[0]
				КонецЕсли;
				Добав.НДС=Стр_1.vat_value;
				НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
				НСтр.Сумма=НСтр.Сумма+Стр_1.cost;
				НСтр.НДС=НСтр.НДС+Стр_1.vat_value;
				Нстр.Цена=НСтр.Сумма/НСтр.КоличествоКМ;
				 
			Конеццикла;
				
		КонецЕсли;
		
	
Иначе
	Для Каждого Стр_1 Из ОтветСтруктура.sell_details Цикл
		 	
	   
	   
	   
	   
	   Если ТипЗнч(Стр_1.items)=ТиП("ОбъектXDTO") Тогда
		   Стр_Итемс=Стр_1.items;
		   
		   Добав=ДокументПриемки.СерийныеНомера.Добавить();
		   
	   
		//Добав=Документприемки.СерийныеНомера.Добавить();
		//Если Стр_1.Свойства().Получить("sgtin")=Неопределено Тогда
			//Cnh
			
			
			//Сообщить(Текст1);
			
			// Сообщить("Есть упаковки");
			//Сообщить(Стр_1.sscc_detail.sscc);
			Добав.cis=Стр_1.sgtin;
			
			Добав.Цена=Стр_1.cost;
			Добав.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",
			Число(Сред(Стр_1.sgtin,1,14)));
			Нстр=ДокументПриемки.Товары.НайтиСтроки(Новый Структура("GTIN,Цена",Добав.НаименованиеТовара,Добав.Цена));
			Если НСтр.Количество()=0 Тогда
				НСтр=ДокументПриемки.Товары.Добавить();
				НСтр.GTIN=Добав.НаименованиеТовара;
				Попытка
				Исключение
				КонецПопытки;
			Иначе
				НСтр=Нстр[0]
			КонецЕсли;
			Добав.НДС=Стр_1.vat_value;
			НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
			НСтр.Сумма=НСтр.Сумма+Стр_1.cost;
			НСтр.НДС=НСтр.НДС+Стр_1.vat_value;
			Нстр.Цена=НСтр.Сумма/НСтр.КоличествоКМ;
			 
			 
		Иначе
			
			Для Каждого Стр_Итемс Из Стр_1.items Цикл
			  Добав=ДокументПриемки.СерийныеНомера.Добавить();
		   
	   
			//Добав=Документприемки.СерийныеНомера.Добавить();
			//Если Стр_1.Свойства().Получить("sgtin")=Неопределено Тогда
				//Cnh
				
				
				//Сообщить(Текст1);
				
				// Сообщить("Есть упаковки");
				//Сообщить(Стр_1.sscc_detail.sscc);
				Добав.cis=Стр_1.sgtin;
				
				Добав.Цена=Стр_1.cost;
				Добав.НаименованиеТовара=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",
				Число(Сред(Стр_1.sgtin,1,14)));
				Нстр=ДокументПриемки.Товары.НайтиСтроки(Новый Структура("GTIN,Цена",Добав.НаименованиеТовара,Добав.Цена));
				Если НСтр.Количество()=0 Тогда
					НСтр=ДокументПриемки.Товары.Добавить();
					НСтр.GTIN=Добав.НаименованиеТовара;
					Попытка
					Исключение
					КонецПопытки;
				Иначе
					НСтр=Нстр[0]
				КонецЕсли;
				Добав.НДС=Стр_1.vat_value;
				НСтр.КоличествоКМ=НСтр.КоличествоКМ+1;
				НСтр.Сумма=НСтр.Сумма+Стр_1.cost;
				НСтр.НДС=НСтр.НДС+Стр_1.vat_value;
				Нстр.Цена=НСтр.Сумма/НСтр.КоличествоКМ;
				 
			Конеццикла;
				
		КонецЕсли;
		

				
		
		 
		
	Конеццикла;
	
Конецесли;
ДокументПриемки.Записать();

			ЗаполненаТабличнаяЧастьПриемки=ДокументПриемки.ПроверкаПоНомерамКМ.Количество()>0;
				
				Возврат документПриемки.Ссылка;
КонецФункции

Функция ОбъектXDTOПоИмениСвойства(ОбъектXDTOРодитель, ИмяСвойства, URIПространстваИмен = Неопределено) Экспорт
	
	Если ОбъектXDTOРодитель = Неопределено Тогда
		СвойствоXDTO = ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен).КорневыеСвойства.Получить(ИмяСвойства);
	Иначе
		СвойствоXDTO = ОбъектXDTOРодитель.Тип().Свойства.Получить(ИмяСвойства);
	КонецЕсли;
	
	Если СвойствоXDTO = Неопределено Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Свойство %1 отсутствует в составе типов информационной системы маркировки.'"), ИмяСвойства);
	Иначе
		Возврат ФабрикаXDTO.Создать(СвойствоXDTO.Тип);
	КонецЕсли;
	
КонецФункции

Функция СтруктураСообщенияКПередаче() Экспорт
	
	Сообщение = Новый Структура;
	
	Сообщение.Вставить("ТекстСообщения");
	Сообщение.Вставить("ИдентификаторСубъектаОбращения");
	Сообщение.ВСтавить("ИдентификаторЗапроса");
	
	Сообщение.Вставить("ТекстОшибки", "");
	Сообщение.Вставить("Ошибки", Новый Соответствие);
	
	Сообщение.Вставить("Ссылка");
	Сообщение.Вставить("ОбновитьСостояниеПодтверждения", Ложь);
	Сообщение.Вставить("СообщениеОснование");
	Сообщение.Вставить("УникальныйИдентификатор");
	Сообщение.Вставить("ПередачаСведенийЧерезСКЗКМ", Ложь);
	
	// Для отображения в сообщениях пользователям
	Сообщение.Вставить("Описание", "");
	
	Сообщение.Вставить("Операция");
	Сообщение.Вставить("КодОперации");
	
	// Для сохранения в Протокол обмена
	Сообщение.Вставить("ТипСообщения");
	Сообщение.Вставить("Документ");
	
	// Для обновления в формах
	Сообщение.Вставить("Основание");
	
	Сообщение.Вставить("Размер");
	Сообщение.Вставить("ХешСумма");
	Сообщение.Вставить("Подпись");
	
	Возврат Сообщение;
	
КонецФункции

Функция ПодключилисьОк(Thumbprint_1,CSRFДляНК,Срегистра,КукиДляНК,HTTPСервисЗапрос,СерийныйНомер="") Экспорт
	
	
	СтруктураНастроек=Неопределено;
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
	СерийныйНомер=СтруктураНастроек.СерийныйНомер;
		Если Не ЗначениеЗаполнено(СРегистра)  ИЛИ Не ЗначениеЗаполнено(СерийныйНомер) тогда
			СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	
	
	//СтруктураНастроек=Неопределено;
	//СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
	
	
	
	//СерийныйНомер=Thumbprint_1.СерийныйНомер;
	//Куки=Thumbprint_1.КукиДляНК;
	
	//СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	Если НЕ ЗначениеЗаполнено(СРегистра) ИЛИ Не ЗначениеЗаполнено(СтруктураНастроек.СерийныйНомер) Тогда
		СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);
		//СерийныйНомер=СтруктураНастроек.СерийныйНомер;
		СтруктураНастроек.КукиДляНК="";
		СтруктураНастроек.CSRFДляНК="";
	КонецЕсли;
	
	
	КукиДляНК="";
	CSRFДляНК="";
	Если ЗначениеЗаполнено(СРегистра) И
		ЗначениеЗаполнено(СерийныйНомер)
		И ЗначениеЗАполненО(СтруктураНастроек.КукиДляНК) 
		И ЗначениеЗаполнено(СтруктураНастроек.CSRFДляНК) Тогда
		КукиДляНК=СтруктураНастроек.КукиДляНК;
		CSRFДляНК=СтруктураНастроек.CSRFДляНК;
		
		Возврат Истина;
	КонецЕсли;
	
	
	
	
	Если ЗначениеЗаполнено(Срегистра) тогда
		
		
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.КаталогСайт,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.КаталогСайт,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
		
			Куки="";
			////СНАЧАЛА РЕГИСТРИРУЕМ
			
			
			
			Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьJONТокен(СРегистра);
			
			HTTPЗапрос=Новый HTTPЗапрос("rest/elk/auth");
			HTTPЗапрос.Заголовки.Вставить("Accept","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
			HTTPЗапрос.Заголовки.Вставить("Origin","https://"+Thumbprint_1.АдресДляПолученияТокена);
			
			HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			
			#Если ВебКлиент Тогда
					HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);	
			#Иначе
					HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);	
			#КонецЕсли
			
			
			Попытка
				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
			Исключение     
				Сообщить("Не удалось подключиться к НК (национальному каталогу маркированных товаров)");
				Возврат Ложь;
			КонецПопытки;
			
			КК=ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
			
			
			Попытка
				HTTPЗапрос=Новый HTTPЗапрос("profile?elkCode="+КК.elkCode);
			Исключение
				Сообщить("Не удалось подключиться к НК (национальному каталогу маркированных товаров)");
				Возврат Ложь;
				
			КонецПопытки;
			HTTPЗапрос.Заголовки.Вставить("Accept","text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
			
			//HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
			//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			
			//Куки="certSerial="+СерийныйНомер+"; count=2; tokenPart1="+Сред(СРегистра,1,4000)+"; "+
			//"tokenPart2="+Сред(СРегистра,4001) ;
			
Если ЗначениеЗаполнено(Ответ.Заголовки["Set-Cookie"]) Тогда
			Куки=СтрЗаменить(Ответ.Заголовки["Set-Cookie"],"path=/,","");
		
			Куки = "";
			МассивКуков = РазложитьСтрокуВМассивПодстрок(Ответ.Заголовки["Set-Cookie"], "; ");
			Для каждого Кук Из МассивКуков Цикл
				
				Если Лев(Кук, 5) = "_sclb" Тогда
					Куки = Куки + Кук;
				ИначеЕсли Лев(Кук, 4) = "path" И СтрДлина(Кук) > 9 Тогда
				    Куки = Куки + "; " + СтрЗаменить(Кук, "path=/, ", "");
				ИначеЕсли СтрДлина(Кук) > 9 Тогда
				    Куки = Куки + "; " + СтрЗаменить(Кук, "path=/, ", "");
				КонецЕсли;
				
			КонецЦикла;
ИначеЕсли ЗначениеЗаполнено(Ответ.Заголовки["set-cookie"]) Тогда
			Куки=СтрЗаменить(Ответ.Заголовки["set-cookie"],"path=/,","");
		
			Куки = "";
			МассивКуков = РазложитьСтрокуВМассивПодстрок(Ответ.Заголовки["set-cookie"], "; ");
			Для каждого Кук Из МассивКуков Цикл
				
				Если Лев(Кук, 5) = "_sclb" Тогда
					Куки = Куки + Кук;
				ИначеЕсли Лев(Кук, 4) = "path" И СтрДлина(Кук) > 9 Тогда
				    Куки = Куки + "; " + СтрЗаменить(Кук, "path=/, ", "");
				ИначеЕсли СтрДлина(Кук) > 9 Тогда
				    Куки = Куки + "; " + СтрЗаменить(Кук, "path=/, ", "");
				КонецЕсли;
				
			КонецЦикла;
		Конецесли; 
			
			HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
			
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			
			
			Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЕлКоде(КК.elkCode);
			
						
			HTTPЗапрос=Новый HTTPЗапрос("rest/session");
			HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
			//HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
			HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Credentials", "true");
			HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Headers", "Origin, X-Requested-With, Cont…cept, Credentials, Set-Cookie");
			HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Methods", "*");
			
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "private, max-age=0, no-cache, no-store");
			HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
	//		HTTPЗапрос.Заголовки.Вставить("Sec-Fetch-Dest","empty");
	//		HTTPЗапрос.Заголовки.Вставить("Sec-Fetch-Mode", "cors");
			HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
			
			HTTPЗапрос.Заголовки.Вставить("Host", Thumbprint_1.КаталогСайт);
			//"xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai");
			HTTPЗапрос.Заголовки.Вставить("Origin", "https://"+Thumbprint_1.КаталогСайт);
			HTTPЗапрос.Заголовки.Вставить("Referer", "https://"+Thumbprint_1.КаталогСайт+"/profile?elkCode="+КК.elkCode);
			HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0");
			
			HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
			
			СтрокаОтвет =Ответ.ПолучитьТелоКакСтроку(); 
			//РасшифроватьGZIP(Ответ.ПолучитьТелоКакДвоичныеДанные());
			//Чтение = Новый ЧтениеJSON;
			//Чтение.УстановитьСтроку(СтрокаОтвет);
			//СтрукттураОтвет = ПрочитатьJSON(Чтение);
			//Чтение.Закрыть();
			СтрукттураОтвет=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(СтрокаОтвет);
			
//			Куки=Куки+"; certSerial="+СерийныйНомер;
			NNN=СтрукттураОтвет;
		
		Если ЗначениеЗаполнено(Ответ.Заголовки["Set-Cookie"]) Тогда
			Куки=СтрЗаменить(Ответ.Заголовки["Set-Cookie"],"path=/,","");
		
			Куки = "";
			МассивКуков = РазложитьСтрокуВМассивПодстрок(Ответ.Заголовки["Set-Cookie"], "; ");
			Для каждого Кук Из МассивКуков Цикл
				
				Если Лев(Кук, 5) = "_sclb" Тогда
					Куки = Куки + Кук;
				ИначеЕсли Лев(Кук, 4) = "path" И СтрДлина(Кук) > 9 Тогда
				    Куки = Куки + "; " + СтрЗаменить(Кук, "path=/, ", "");
				ИначеЕсли СтрДлина(Кук) > 9 Тогда
				    Куки = Куки + "; " + СтрЗаменить(Кук, "path=/, ", "");
				КонецЕсли;
				
			КонецЦикла;
		ИначеЕсли ЗначениеЗаполнено(Ответ.Заголовки["set-cookie"]) Тогда
			Куки=СтрЗаменить(Ответ.Заголовки["set-cookie"],"path=/,","");
		
			Куки = "";
			МассивКуков = РазложитьСтрокуВМассивПодстрок(Ответ.Заголовки["set-cookie"], "; ");
			Для каждого Кук Из МассивКуков Цикл
				
				Если Лев(Кук, 5) = "_sclb" Тогда
					Куки = Куки + Кук;
				ИначеЕсли Лев(Кук, 4) = "path" И СтрДлина(Кук) > 9 Тогда
				    Куки = Куки + "; " + СтрЗаменить(Кук, "path=/, ", "");
				ИначеЕсли СтрДлина(Кук) > 9 Тогда
				    Куки = Куки + "; " + СтрЗаменить(Кук, "path=/, ", "");
				КонецЕсли;
				
			КонецЦикла;
		Конецесли; 
			//NNN=ОбщиеМетоды_НаКлиент_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
			Текст="{";
			crsfToken="";
			Для Каждого Стр_1 Из NNN Цикл
				Если Стр_1.Ключ="sessionId" ИЛИ Стр_1.Ключ="sessionName" тогда
					Продолжить;
				КонецЕсли;
				Если Текст<>"{" Тогда
					Текст=Текст+",";
				КонецЕсли;
				Если ТипЗнч(Стр_1.Значение)=Тип("Число")
					ИЛИ ТипЗнч(Стр_1.Значение)=Тип("Булево")
					Тогда
					Значение=Формат(Стр_1.Значение,"ЧГ=")
				Иначе
					Значение=""""+Стр_1.Значение+"""";
				КонецЕсли;
				
				Если Стр_1.Ключ="csrfToken" Тогда
					crsfToken=Стр_1.Значение;
				КонецЕсли;
				
				Текст=Текст+""""+Стр_1.Ключ+""":"+Значение;
				
			Конеццикла;
			Текст=Текст+"}";
			Если ЗначениеЗаполненО(Куки) тогда
				Куки=Куки+"; "	
			Конецесли;
			Куки=Куки+"csrfToken="+crsfToken;
			Куки=Куки+"; userInfo="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Текст);
			Куки=Куки+"; isAuth=true; ";
			Куки=Куки+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(
			"columns={""accountType"":""producer"",""columns"":[{""name"":""Фото"",""show"":true,""accessor"":""photo"",""position"":0,""sortable"":false,""maxWidth"":80,""style"":{""justifyContent"":""center""}},{""name"":""Дата"",""show"":true,""position"":1,""accessor"":""created"",""sortable"":false,""maxWidth"":100},{""name"":""Код товара"",""show"":true,""position"":2,""accessor"":""gtin"",""sortable"":false,""width"":160},{""name"":""Наименование"",""show"":true,""position"":3,""accessor"":""name"",""sortable"":false,""minWidth"":170},{""name"":""Категория"",""show"":true,""position"":4,""accessor"":""category"",""sortable"":false,""minWidth"":150,""maxWidth"":200},{""name"":""Упаковки"",""show"":true,""position"":5,""accessor"":""packages"",""sortable"":false,""width"":180},{""name"":""Товарный знак"",""show"":true,""position"":6,""accessor"":""brand"",""sortable"":false,""minWidth"":160,""maxWidth"":200},{""name"":""Статус"",""show"":true,""position"":7,""accessor"":""status"",""sortable"":false,""width"":250}]}");
			
			
			КукиДляНК=Куки;
			CSRFДляНК=crsfToken;
			
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(Thumbprint_1.Thumbprint_1,СРегистра,СерийныйНомер,
			КукиДляНК,CSRFДляНК);
			
			Возврат Истина;
		Иначе
			Возврат ложЬ;
	КонецЕсли;
КонецФункции



Процедура ЗарегистрироватьВКаталогеТоваров(Пользователь,Объект_1,УжеОтправили=Ложь) Экспорт
	
	Объект=Объект_1.ПолучитЬобъект();
	
	
	
		
	Thumbprint_1=ПолучитьИзПользователя(Пользователь);
//	Если Не ЗначениеЗаполнено(объект.GTIN) тогда
//		Возврат;
//	КонецЕслИ;	
	
	
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
			Прокси=Новый ИнтернетПрокси;
			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
			
		//	HTTPСервисЗапрос=Новый HTTPСоединение("account.integrators.nk.crpt.tech",,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		//	HTTPСервисЗапрос=Новый HTTPСоединение("xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.КаталогСайт,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		Иначе
		///	HTTPСервисЗапрос=Новый HTTPСоединение("account.integrators.nk.crpt.tech",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			//HTTPСервисЗапрос=Новый HTTPСоединение("xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.КаталогСайт,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		
	
	
	
	crsfToken="";
	Срегистра="";
	Куки="";
	
		Если Не ЗначениеЗаполнено(объект.GTIN) тогда
			
			////СНАЧАЛА РЕГИСТРИРУЕМ
			
			КодТНВЭД=Объект.КодТНВЭДКороткий;
			Если ЗначениеЗаполнено(Объект.КодТНВЭД) тогда
				КодТНВЭД=Объект.КодТНВЭД.Код;
			КонецЕсли;
			Если Не ЗначениеЗаполненО(КодТНВЭД) Тогда
				Сообщить("В карточке товара не заполнен ТНВЭД");
				Возврат;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Объект.НаименованиеТовара) Тогда
				Сообщить("В карточке товара не заполнено полное наименование");
				Возврат;
				
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Объект.БрендТорговаяМарка) Тогда
				сообщить("В карточке товара не заполнен бренд!!");
				Возврат;
				
			КонецЕсли;
			////РЕГЕСТРИРУЕМ!!!
			
	КонецЕсли;	
		СерийныйНомер="";
Если ПодключилисьОк(Thumbprint_1,crsfToken,Срегистра,Куки,HTTPСервисЗапрос,СерийныйНомер) Тогда
		
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
			Прокси=Новый ИнтернетПрокси;
			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
			
		//	HTTPСервисЗапрос=Новый HTTPСоединение("account.integrators.nk.crpt.tech",,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		//	HTTPСервисЗапрос=Новый HTTPСоединение("xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.КаталогСайт,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		Иначе
		///	HTTPСервисЗапрос=Новый HTTPСоединение("account.integrators.nk.crpt.tech",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			//HTTPСервисЗапрос=Новый HTTPСоединение("xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.КаталогСайт,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		

		Если Не ЗначениеЗаполнено(объект.GTIN) тогда
			
			HTTPЗапрос=Новый HTTPЗапрос("rest/dictionaries/tm");
			HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
				HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
				
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
			
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			
			NNN=ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
			
			Если Ответ.КодСостояния<>200 ИЛИ NNN=Неопределено 
				Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
				Если УжеОтправили<>Истина Тогда
					ЗарегистрироватьВКаталогеТоваров(Пользователь,Объект_1,Истина);
					Возврат;
				Иначе
					Сообщить("Не смогли добавить торговую марку "+Ответ.ПолучитьТелоКакСтроку());
					Сообщить(Ответ.ПолучитьТелоКакСтроку());
					Возврат;
					КонецЕсли;
				
			
			КонецЕсли;
			
			/////////////////////////////////////////////////////////////////////////////
			
			///////////////
			ТаблицаБрендов=Новый ТаблицаЗначений;
			ТаблицаБрендов.Колонки.Добавить("Ид");
			ТаблицаБрендов.Колонки.Добавить("Бренд");
			ТаблицаБрендов.Очистить();
			Для Каждого СТР_1 Из NNN Цикл
				Добав=ТаблицаБрендов.Добавить();
				Добав.ИД=СТР_1.id;
				Добав.Бренд=ВРЕГ(СТР_1.text);
				
			Конеццикла;
			НСтр=ТаблицаБрендов.НайтиСтроки(Новый Структура("Бренд",ВРЕГ(Объект.БрендТорговаяМарка)));
			Если НСтр.Количество()=0 Тогда
				///ДОБАВЛЯЕМ НОВЫЙ БРЕНД
				
				Тело=НаходимБренд(Объект);
			
				HTTPЗапрос=Новый HTTPЗапрос("rest/dictionaries/tm/add");
				
				HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
				HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
							
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
									
				//	5HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
				//HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
				HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
				HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Credentials", "true");
				HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Headers", "Origin, X-Requested-With, Cont…cept, Credentials, Set-Cookie");
				HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Methods", "*");
				
				HTTPЗапрос.Заголовки.Вставить("Cache-Control", "private, max-age=0, no-cache, no-store");
				HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
		//		HTTPЗапрос.Заголовки.Вставить("Sec-Fetch-Dest","empty");
		//		HTTPЗапрос.Заголовки.Вставить("Sec-Fetch-Mode", "cors");
				HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
					HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
				//	HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
				
				HTTPЗапрос.Заголовки.Вставить("Host", Thumbprint_1.КаталогСайт);
				//"xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai");
				HTTPЗапрос.Заголовки.Вставить("Origin", "https://"+Thumbprint_1.КаталогСайт);
				HTTPЗапрос.Заголовки.Вставить("Referer", "https://"+Thumbprint_1.КаталогСайт+"/product?type=unit");
				HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0");
			
			HTTPЗапрос.Заголовки.Вставить("X-Csrf-Token",crsfToken);
				
				
				
				

						
				
			#Если ВебКлиент Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
			#Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("POST",HTTPЗапрос);
					NNN=ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
					
				Попытка
					
				
					ИДБренда=NNN.id;
					
				Исключение
					
					ИДБренда="";
				КонецПопытки;
					
				Если Ответ.КодСостояния<>200 ИЛИ NNN=Неопределено 
					ИЛИ ИДБренда=""
					Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
					Если УжеОтправили<>Истина Тогда
						ЗарегистрироватьВКаталогеТоваров(Пользователь,Объект_1,Истина);
						Возврат;
					Иначе
						Сообщить("Не смогли добавить торговую марку "+Ответ.ПолучитьТелоКакСтроку());
						Сообщить(Ответ.ПолучитьТелоКакСтроку());
						Возврат;
						КонецЕсли;
					
				
				КонецЕсли;
				
				

				
				
				//ПоказатьПредупреждение(,"Не нашли бренд "+Объект.БрендТорговаяМарка+" в ЦРПТ");
				//Возврат;
			Иначе
				ИДБренда=НСтр[0].Ид;
			
			КонецЕсли;
			
			
			Тело=ДляГенерацииГТИН(Объект);
			

			
			HTTPЗапрос=Новый HTTPЗапрос("rest/gtin/generate");
			
			HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
			HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
								
						
			//	5HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
			//HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
			HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Credentials", "true");
			HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Headers", "Origin, X-Requested-With, Cont…cept, Credentials, Set-Cookie");
			HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Methods", "*");
			
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "private, max-age=0, no-cache, no-store");
			HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
	//		HTTPЗапрос.Заголовки.Вставить("Sec-Fetch-Dest","empty");
	//		HTTPЗапрос.Заголовки.Вставить("Sec-Fetch-Mode", "cors");
			HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
			
			HTTPЗапрос.Заголовки.Вставить("Host", Thumbprint_1.КаталогСайт);
			//"xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai");
			HTTPЗапрос.Заголовки.Вставить("Origin", "https://"+Thumbprint_1.КаталогСайт);
			HTTPЗапрос.Заголовки.Вставить("Referer", "https://"+Thumbprint_1.КаталогСайт+"/product?type=unit");
			HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0");
		
			HTTPЗапрос.Заголовки.Вставить("certSerial", СерийныйНомер);
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
			
			HTTPЗапрос.Заголовки.Вставить("X-Csrf-Token",crsfToken);
		

				
					
			
			#Если ВебКлиент Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
			#Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
//			HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("POST",HTTPЗапрос);
			Если Ответ.КодСостояния<>200 Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
					Если УжеОтправили<>Истина Тогда
						ЗарегистрироватьВКаталогеТоваров(Пользователь,Объект_1,Истина);
						Возврат;
					Иначе
						Сообщить("Не смогли получить GTIN с каталога маркированных товаров "+Ответ.ПолучитьТелоКакСтроку());
						Сообщить(Ответ.ПолучитьТелоКакСтроку());
						Возврат;
					КонецЕсли;
				Возврат;
			КонецЕсли;
			
			NNN=ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
			
			GTIN=NNN.gtin;
			
			HTTPЗапрос=Новый HTTPЗапрос("rest/categories/active?classifier=tnved&isKit=0&isTech=0");
		
			HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
			HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
			
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
					
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			
			
			NNN=ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
			
			таблицаКодов=Новый ТаблицаЗначений;
			таблицаКодов.Колонки.Добавить("Код");
			таблицаКодов.Колонки.Добавить("ТНВЭД");
			таблицаКодов.Колонки.Добавить("ЧетыреСимволаТНВЭД");
			таблицаКодов.Очистить();
			Для Каждого Стр_1 Из NNN Цикл
				Добав=таблицаКодов.Добавить();
				Добав.Код=Стр_1.id;
				Добав.ТНВЭД=Стр_1.path;
				Добав.ЧетыреСимволаТНВЭД=Сред(Стр_1.path,1,4);
				//Добав.Код=
				
			Конеццикла;
			
			
			
			КодТНВ=Сред(КодТНВЭД,1,4);
			
			СтрН=таблицаКодов.НайтиСтроки(Новый Структура("ЧетыреСимволаТНВЭД",КодТНВ));
			Если СтрН.Количество()=0 Тогда
				
				Сообщить("Не правильный код ТНВЭД, его нет в каталоге маркированных товаров");
				
				Возврат;
			КонецЕсли;
									
			
			
		

			Тело=СоздатьТоварВКТМ(ИдБренда,СтрН[0].Код,GTIN,Объект);
			
			
			
			
			
			HTTPЗапрос=Новый HTTPЗапрос("rest/drafts");
			
			HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
			HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
						
					HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
				
			//	5HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
			//HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
			HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Credentials", "true");
			HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Headers", "Origin, X-Requested-With, Cont…cept, Credentials, Set-Cookie");
			HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Methods", "*");
			
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "private, max-age=0, no-cache, no-store");
			HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
	//		HTTPЗапрос.Заголовки.Вставить("Sec-Fetch-Dest","empty");
	//		HTTPЗапрос.Заголовки.Вставить("Sec-Fetch-Mode", "cors");
			HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			//	HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
			
			HTTPЗапрос.Заголовки.Вставить("Host", Thumbprint_1.КаталогСайт);
			//"xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai");
			HTTPЗапрос.Заголовки.Вставить("Origin", "https://"+Thumbprint_1.КаталогСайт);
			HTTPЗапрос.Заголовки.Вставить("Referer", "https://"+Thumbprint_1.КаталогСайт+"/product?type=unit");
			HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0");
		
			HTTPЗапрос.Заголовки.Вставить("X-Csrf-Token",crsfToken);
			
			
				
			
			
			#Если ВебКлиент Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
			#Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
			//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("POST",HTTPЗапрос);
			
			Попытка
				
				NNN=ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
			
				Объект.id=NNN.id;
				Объект.GTIN=GTIN;
				//ЭтаФорма.Записать();
				
			Исключение
				
				Сообщить("Не удалсоь отправить в каталог маркированных товаров элемент справочника "+Ответ.ПолучитьТелоКакСтроку());
				Сообщить(Ответ.ПолучитьТелоКакСтроку());
				Возврат;
				
			КонецПопытки;
			
			
			
			//Возврат;
			
			
		КонецЕсли;
//ЭтаФорма.Записать();
//		Возврат;

		ЗапишемВСеВКарточкуЦРПТ(Пользователь,объект,Куки,HTTPСервисЗапрос,crsfToken,Срегистра,УжеОтправили,Thumbprint_1)
Конецесли;
КонецПроцедуры

Процедура ЗапишемВСеВКарточкуЦРПТ(Пользователь,объект,Куки,HTTPСервисЗапрос,crsfToken,Срегистра,УжеОтправили,Thumbprint_1)
		Если Не ЗначениеЗаполнено(объект.GTIN) Тогда
			Сообщить("В карточке товара не заполнен gtin");
			Возврат;
		КонецЕсли;
		
		Тело=ИщемПоГТИН(Объект);
		
		ДополнительныйРеквизитОбщиеНК=Объект.ДополнительныйРеквизитОбщиеНК;
		
		ДополнительныйРеквизитБелье=Объект.ДополнительныйРеквизитБелье;
		
		ДополнительныеРеквизитОдежда=Объект.ДополнительныеРеквизитОдежда;
		ДополнительныйРеквизитВелосипед=Объект.ДополнительныйРеквизитВелосипед;
		
		ДополнительныеРеквизитФото=Объект.ДополнительныеРеквизитФото;
		
		ДополнительныйРеквизитПарфюм=Объект.ДополнительныйРеквизитПарфюм;
		
		ДополнительныеРеквизитыШины=Объект.ДополнительныйРеквизитШины;
		ДополнительныеРеквизитВода=Объект.ДополнительныеРеквизитВода;
		ДополнителныеРеквизитМолоко=Объект.ДополнительныйРеквизитМолоко;
		
		
		ДополнительныйРеквизитОбувь=Объект.ДополнительныйРеквизитОбувь;
		
		
		
		
		HTTPЗапрос=Новый HTTPЗапрос("rest/goods/list");
		HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
				HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
			
			HTTPЗапрос.Заголовки.Вставить("X-Csrf-Token",crsfToken);
		
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		
		Если Ответ.КодСостояния<>200 Тогда
			ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
			Если УжеОтправили<>Истина Тогда
				ЗарегистрироватьВКаталогеТоваров(Пользователь,Объект,Истина);
				Возврат;
			Иначе
				Возврат;
			КонецЕсли;
			
		
		КонецЕсли;
		
		
		NNN=ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
		
		Если NNN.data.количество()=0 Тогда
			сообщить("Продукцию с gtin "+Формат(Объект.GTIN,"ЧГ=")+" не нашли в каталоге маркированных товаров");
			Возврат
		ИначеЕсли NNN.data[0].goods<>Неопределено Тогда
			
			Сообщить("Продукцию с gtin "+Формат(Объект.GTIN,"ЧГ=")+" уже нельзя менять. Для редактировании карточки необходимо обращаться в ЦРПТ");
			Возврат
			
		Иначе
			id=                    NNN.data[0].draft.id
			
		Конецесли;
		
		///Возврат;
		
		
		
				//												
										
						HTTPЗапрос=Новый HTTPЗапрос("rest/draft/"+Формат(id,"ЧГ="));
						
						HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
						HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
			
			HTTPЗапрос.Заголовки.Вставить("X-Csrf-Token",crsfToken);
						
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						
						NNN=ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
						
						
						
						Если Объект.Рисунки.Количество()>0 Тогда
							images=Неопределено;
							Если NNN.Свойство("images",images) Тогда
								NNN.images.Очистить();
							Иначе
								images=Новый Массив;
								NNN.Вставить("images",images);
							КонецЕсли;
							
							Для Каждого Стр_1 Из Объект.Рисунки Цикл
								
								СтруктураИзображения=Новый Структура;
								Если ЗначениеЗаполнено(Стр_1.gtin) Тогда
									СтруктураИзображения.Вставить("gtin",Стр_1.gtin);
								Иначе
									СтруктураИзображения.Вставить("gtin",Формат(Объект.GTIN,"ЧГ="));
									
								КонецЕсли;
								СтруктураИзображения.Вставить("type",Стр_1.ТипРисунка.Код);
								СтруктураИзображения.Вставить("url",Стр_1.АдресРисункаURL);
								NNN.images.Добавить(СтруктураИзображения);
							Конеццикла;
							
						КонецЕсли;
						
						
							МассивsetGtins=Новый Массив;
							
							setGtins=Неопределено;
							Если NNN.Свойство("setGtins",setGtins) Тогда
								ДопСроковЕть=Ложь;
							    Сч=0;
								Пока Сч<NNN.setGtins.Количество() Цикл
									Стр_а=NNN.setGtins[Сч];
										//Если ДопСроковЕть Тогда
											NNN.setGtins.Удалить(Сч);
											Сч=сч-1;
											//УдалитьСрокДоп.Добавить(Стр_а);
										//Иначе
										//	ДопСроковЕть=Истина;
										//КонецЕсли;
									Сч=Сч+1;
								Конеццикла;			
								
								 //Если NNN.setGtins.Количество()>0 Тогда

								
								Перваяыла=Истина;
								//стр_а=NNN.setGtins[0];
								Для Каждого Стр_22 Из Объект.СоставНабора Цикл
									
									ГТИН=xmlString(Стр_22.Продукция.GTIN);
					
										//Если Не Перваяыла Тогда
										//					Стр_а.value=ГТИН;
										//					Стр_а.valueType=Формат(Стр_22.КоличествоВНаборе,"ЧГ=");
										//					Перваяыла=истина
										//				Иначе
														
															Стр_Н=Новый Структура("gtin,quantity");
															//Для Каждого Стр_Стр Из Стр_а Цикл
															//	Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
																
															//Конеццикла;
															Стр_Н.gtin	=ГТИН;
															Стр_Н.quantity=Формат(Стр_22.КоличествоВНаборе,"ЧГ=");
															// Стр_1.attributes.Вставить();
															 МассивsetGtins.Добавить(Стр_Н);
															
															
															 
															 
															 
															
													//Конецесли;
													
												Конеццикла;
												
												Для Каждого Стр_Ст ИЗ МассивsetGtins    Цикл
										NNN.setGtins.Добавить(Стр_Ст);

									Конеццикла;

									//Конеццикла;
							       //  Конецесли;
						      Конецесли;
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						Для Каждого Стр_1 Из NNN.attrGroup Цикл
							Если Стр_1.name="Потребительские свойства" Тогда
								ДопСроковЕть=Ложь;
								ДопРазмеры=Ложь;
								           Сч=0;
									Пока Сч<Стр_1.attributes.Количество() Цикл
									//Для Каждого Стр_а Из Стр_1.attributes Цикл
										Стр_а=Стр_1.attributes[Сч];
										Если  Стр_а.name="Аллергены" Тогда
											Если ДопСроковЕть Тогда
												Стр_1.attributes.Удалить(Сч);
												Сч=сч-1;
												//УдалитьСрокДоп.Добавить(Стр_а);
											Иначе
												ДопСроковЕть=Истина;
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Размер в иных системах измерения" Тогда
											Если ДопРазмеры Тогда
												Стр_1.attributes.Удалить(Сч);
												Сч=сч-1;
												//УдалитьСрокДоп.Добавить(Стр_а);
											Иначе
												ДопРазмеры=Истина;
											КонецЕсли;
										Конецесли;
										Сч=Сч+1;
									Конеццикла;			
								ИначеЕсли Стр_1.name="Пищевая и энергетическая ценности" Тогда
									ДопСроковЕть=Ложь;
								           Сч=0;
									Пока Сч<Стр_1.attributes.Количество() Цикл
									//Для Каждого Стр_а Из Стр_1.attributes Цикл
										Стр_а=Стр_1.attributes[Сч];
										Если  Стр_а.name="Энергетическая ценность" Тогда
											Если ДопСроковЕть Тогда
												Стр_1.attributes.Удалить(Сч);
												Сч=сч-1;
												//УдалитьСрокДоп.Добавить(Стр_а);
											Иначе
												ДопСроковЕть=Истина;
											КонецЕсли;
										Конецесли;
										Сч=Сч+1;
									Конеццикла;			
								
								
							ИначеЕсли Стр_1.name="Эксплуатация и условия хранения" Тогда
								ДопСроковЕть=Ложь;
								           Сч=0;
									Пока Сч<Стр_1.attributes.Количество() Цикл
									//Для Каждого Стр_а Из Стр_1.attributes Цикл
										Стр_а=Стр_1.attributes[Сч];
										Если  Стр_а.name="Дополнительный срок годности" Тогда
											Если ДопСроковЕть Тогда
												Стр_1.attributes.Удалить(Сч);
												Сч=сч-1;
												//УдалитьСрокДоп.Добавить(Стр_а);
											Иначе
												ДопСроковЕть=Истина;
											КонецЕсли;
											
										ИначеЕсли Стр_а.name="Альтернативный срок годности" Тогда
											Если ДопСроковЕть Тогда
												Стр_1.attributes.Удалить(Сч);
												Сч=сч-1;
												//УдалитьСрокДоп.Добавить(Стр_а);
											Иначе
												ДопСроковЕть=Истина;
											КонецЕсли;
											
											
											
										Конецесли;
										Сч=Сч+1;
									Конеццикла;			
						ИначеЕсли Стр_1.name="Нормативно-сопроводительная документация" Тогда
								НомерРегламентЕсть=Ложь;
								ГостТУ=Ложь;
								           Сч=0;
									Пока Сч<Стр_1.attributes.Количество() Цикл
									//Для Каждого Стр_а Из Стр_1.attributes Цикл
										Стр_а=Стр_1.attributes[Сч];
										Если  Стр_а.name="Код ОКПД2" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбщиеНК.ОКПД2) Тогда
												
												ВернутьСтруктуройКодИНОКПД=ВернутьСтруктуройКодИНОКПД(ДополнительныйРеквизитОбщиеНК.ОКПД2);
												Стр_а.value=ВернутьСтруктуройКодИНОКПД.Код;
												Стр_а.valueTitle=ВернутьСтруктуройКодИНОКПД.Наименование;
												
												
											Конецесли;
											
											
										ИначеЕсли  Стр_а.name="Номер Регламента/стандарта" Тогда
											Если НомерРегламентЕсть Тогда
												Стр_1.attributes.Удалить(Сч);
												Сч=сч-1;
												//УдалитьСрокДоп.Добавить(Стр_а);
											Иначе
												Стр_а.value=Неопределено;
												НомерРегламентЕсть=Истина;
											КонецЕсли;
										ИначеЕсли  Стр_а.name="ГОСТ / ТУ / СТО" Тогда
											Если ГостТУ Тогда
												Стр_1.attributes.Удалить(Сч);
												Сч=сч-1;
												//УдалитьСрокДоп.Добавить(Стр_а);
											Иначе
												ГостТУ=Истина;
											КонецЕсли;
										ИначеЕсли Стр_а.name="Код ТНВЭД" Тогда
											КодТНВЭД=ВернутьКод(Объект.КодТНВЭД);
											
											Если ЗначениеЗаполнено(КодТНВЭД)
												И СтрДлина(СокрЛП(КодТНВЭД))=10 
												Тогда
												Стр_а.value=Строка(СокрЛП(КодТНВЭД));
												Стр_а.valueTitle=Строка(СокрЛП(КодТНВЭД));
												Стр_а.valueType=Неопределено
											КонецЕсли;
											

										Конецесли;
										Сч=Сч+1;
									Конеццикла;			
							
							 								
						ИначеЕсли Стр_1.name="Происхождение и бренды" Тогда
							
							Для Каждого Стр_2 Из Стр_1.attributes Цикл
									ДопСроковЕть=Ложь;
									ДопАртикулы=Ложь;
								УдалитьСрокДоп=Новый Массив;
								           Сч=0;
									Пока Сч<Стр_1.attributes.Количество() Цикл
									//Для Каждого Стр_а Из Стр_1.attributes Цикл
										Стр_а=Стр_1.attributes[Сч];
										Если  Стр_а.name="Страна производства" Тогда
											Если ДопСроковЕть Тогда
												Стр_1.attributes.Удалить(Сч);
												Сч=сч-1;
												//УдалитьСрокДоп.Добавить(Стр_а);
											Иначе
												ДопСроковЕть=Истина;
											КонецЕсли;
										ИначеЕсли Стр_а.name="Модель / артикул производителя" Тогда
											    		Если ДопАртикулы Тогда
															Стр_1.attributes.Удалить(Сч);
															Сч=сч-1;
															//УдалитьСрокДоп.Добавить(Стр_а);
														Иначе
															ДопАртикулы=Истина;
														КонецЕсли;
											
											
										Конецесли;
										Сч=Сч+1;
									Конеццикла;
								;
								//КонецЕсли;
							Конеццикла;
							

							
							ИначеЕсли Стр_1.name="Идентификация Участников Оборота Товаров" Тогда
							     	ДопСроковЕть=Ложь;
								УдалитьСрокДоп=Новый Массив;
								           Сч=0;
									Пока Сч<Стр_1.attributes.Количество() Цикл
									//Для Каждого Стр_а Из Стр_1.attributes Цикл
										Стр_а=Стр_1.attributes[Сч];
										Если  Стр_а.name="Изготовитель / Производственная площадка" Тогда
											Если ДопСроковЕть Тогда
												Стр_1.attributes.Удалить(Сч);
												Сч=сч-1;
												//УдалитьСрокДоп.Добавить(Стр_а);
											Иначе
												ДопСроковЕть=Истина;
											КонецЕсли;
										Конецесли;
										Сч=Сч+1;
									Конеццикла;
								;
								
								
								ИначеЕсли Стр_1.name="Состав" Тогда
							     	ДопСроковЕть=Ложь;
								УдалитьСрокДоп=Новый Массив;
								           Сч=0;
									Пока Сч<Стр_1.attributes.Количество() Цикл
									//Для Каждого Стр_а Из Стр_1.attributes Цикл
										Стр_а=Стр_1.attributes[Сч];
										Если  Стр_а.name="Тип материала, %" Тогда
											Если ДопСроковЕть Тогда
												Стр_1.attributes.Удалить(Сч);
												Сч=сч-1;
												//УдалитьСрокДоп.Добавить(Стр_а);
											Иначе
												ДопСроковЕть=Истина;
											КонецЕсли;
										Конецесли;
										Сч=Сч+1;
									Конеццикла;
								;
									
								ИначеЕсли Стр_1.name="Данные для ФГИС ВетИС" Тогда
									
								    ДопСроковЕть=Ложь;
									ДопСроковЕть1=Ложь;
									ДопСроковЕть2=Ложь;
									
								     Сч=0;
									Пока Сч<Стр_1.attributes.Количество() Цикл
									//Для Каждого Стр_а Из Стр_1.attributes Цикл
										Стр_а=Стр_1.attributes[Сч];
										Если  Стр_а.name="Предприятие-производитель" Тогда
											Если ДопСроковЕть Тогда
												Стр_1.attributes.Удалить(Сч);
												Сч=сч-1;
											Иначе
												ДопСроковЕть=Истина;
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Массовая доля белка, %" Тогда
											Если ДопСроковЕть1 Тогда
												Стр_1.attributes.Удалить(Сч);
												Сч=сч-1;
											Иначе
												ДопСроковЕть1=Истина;
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Массовая доля жира, %" Тогда
											Если ДопСроковЕть2 Тогда
												Стр_1.attributes.Удалить(Сч);
												Сч=сч-1;
											Иначе
												ДопСроковЕть2=Истина;
											КонецЕсли;
										Конецесли;
										Сч=Сч+1;
									Конеццикла;
								;

								ИначеЕсли Стр_1.name="ФГИС ВетИС" Тогда
									
								    ДопСроковЕть=Ложь;
									
								     Сч=0;
									Пока Сч<Стр_1.attributes.Количество() Цикл
									//Для Каждого Стр_а Из Стр_1.attributes Цикл
										Стр_а=Стр_1.attributes[Сч];
										Если  Стр_а.name="Идентификатор товара в ФГИС ВетИС (GUID ProductItem)" Тогда
											Если ДопСроковЕть Тогда
												Стр_1.attributes.Удалить(Сч);
												Сч=сч-1;
											Иначе
												ДопСроковЕть=Истина;
											КонецЕсли;
										Конецесли;
										Сч=Сч+1;
									Конеццикла;
								;

									
								КонецЕсли;
	
						Конеццикла;
						
						
						
						Для Каждого Стр_1 Из NNN.identifier Цикл
								Если Стр_1.Gtin=Формат(Объект.GTIN,"ЧГ=") тогда
									
									
									Если ЗначениеЗаполнено(ДополнительныйРеквизитОбщиеНК.ВесБрутто) Тогда
									
									Стр_1.weight=ДополнительныйРеквизитОбщиеНК.ВесБрутто;
								КонецЕсли;
								Если ЗначениеЗАполнено(ДополнительныйРеквизитОбщиеНК.Высота) Тогда
									Стр_1.height=ДополнительныйРеквизитОбщиеНК.Высота;
								КонецЕсли;
								Если ЗначениеЗаполнено(ДополнительныйРеквизитОбщиеНК.Глубина) Тогда
									Стр_1.length=ДополнительныйРеквизитОбщиеНК.Глубина
								
									;
								КонецЕсли;
								Если ЗначениеЗаполнено(ДополнительныйРеквизитОбщиеНК.РасчетныйОбъем) тогда
									Стр_1.capacity=ДополнительныйРеквизитОбщиеНК.РасчетныйОбъем;
								КонецЕсли;
								Если ЗначениезАполнено(ДополнительныйРеквизитОбщиеНК.Ширина) тогда
									Стр_1.width=ДополнительныйРеквизитОбщиеНК.Ширина;
								КонецЕсли;
									
									
									
									
									//////////////////////УПАК
									Для Каждого Стр_Уп Из Стр_1.vghList Цикл
										Если Стр_Уп.name="packageType" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбщиеНК.ТипУпаковки) Тогда
												Стр_Уп.value=Строка(ДополнительныйРеквизитОбщиеНК.ТипУпаковки);
											КонецЕсли;
										КонецЕсли;
										Если Стр_Уп.name="packageMaterial" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбщиеНК.МатериалУпаковки) Тогда
												Стр_Уп.value=Строка(ДополнительныйРеквизитОбщиеНК.МатериалУпаковки);
											КонецЕсли;
										КонецЕсли;
									Конеццикла;
									
									
								КонецЕсли;
								
								
								
							Конеццикла;
							
							
							
							
							
							
							////ПО КАЖДОМУ ТИПУ
							
							
					Если Объект.Тип=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Белье") Тогда
								МассивАртикулов=Новый Массив;
								МассивАртикулов.Очистить();
								МассивРазмерВИных=Новый Массив;
								МассивТиповМатериалов=Новый Массив;
								МассивГОСТТУ=Новый Массив;	
							Для Каждого Стр_1 Из NNN.attrGroup Цикл
								
								
								Если Стр_1.name="Наименование товара и идентификация" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если Стр_а.name="Количество единиц употребления в потребительской упаковке" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитБелье.ПотребительскаяУпаковка) Тогда
												Стр_а.value=Формат(ДополнительныйРеквизитБелье.КоличествоВПотребительскойУпаковке,"ЧГ=");
												Стр_а.valueType=Строка(ДополнительныйРеквизитБелье.ПотребительскаяУпаковка)
												
											КонецЕсли;
									 	//ИначеЕсли  Стр_а.name="Заявленный объём / вес нетто" Тогда
											
											
										Конецесли;
									Конеццикла;
								

								ИначеЕсли Стр_1.name="Происхождение и бренды" Тогда
									Перваяыла=ЛОжь;
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										
										Если  Стр_а.name="СТМ" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитБелье.СТМ) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитБелье.СТМ);
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Модель / артикул производителя" Тогда
											Если ЗначениеЗаполнено(Объект.МодельПроизводителяАртикул)
												И ДополнительныйРеквизитБелье.ДопМодельАртикулы.Количество()=0 Тогда
												Если Не Перваяыла Тогда
														Стр_а.value=Объект.МодельПроизводителяАртикул;
														Стр_а.valueType=Строка("Артикул")     ;Перваяыла=истина
													Иначе
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
															Стр_Н.value=Объект.МодельПроизводителяАртикул;
														Стр_Н.valueType=Строка("Артикул") ;
														// Стр_1.attributes.Вставить();
														 МассивАртикулов.Добавить(Стр_Н);
														
														
	
														
												Конецесли;
											КонецЕсли;
											Для Каждого Стр_22 Из ДополнительныйРеквизитБелье.ДопМодельАртикулы Цикл
												
												Если Не Перваяыла Тогда
														Стр_а.value=Стр_22.МодельАртикул;
														Стр_а.valueType=Строка(Стр_22.ТипМодельАртикул)   ;Перваяыла=истина
													Иначе
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value=Стр_22.МодельАртикул;
														Стр_Н.valueType=Строка(Стр_22.ТипМодельАртикул);
														// Стр_1.attributes.Вставить();
														 МассивАртикулов.Добавить(Стр_Н);
														
														
	
														
												Конецесли;
												
											Конеццикла;
											
										Конецесли;
									Конеццикла;
									
									
									Для Каждого Стр_Ст ИЗ МассивАртикулов    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;

									
									
								ИначеЕсли Стр_1.name="Потребительские свойства" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										
										
										Если  Стр_а.name="Вид товара" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитБелье.ВидИзделия) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитБелье.ВидИзделия);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитБелье.ВидИзделия);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Цвет" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитБелье.Цвет) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитБелье.Цвет);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитБелье.Цвет);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Возраст потребителя" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитБелье.ВозрастПотребителя) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитБелье.ВозрастПотребителя);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитБелье.ВозрастПотребителя);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Тип текстиля" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитБелье.ВидМатериала) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитБелье.ВидМатериала);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитБелье.ВидМатериала);
												Стр_а.valueType=Неопределено
											КонецЕсли;
																		
										ИначеЕсли  Стр_а.name="Декоративные элементы" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитБелье.ДекоративныеЭлементы) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитБелье.ДекоративныеЭлементы);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитБелье.ДекоративныеЭлементы);
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Дизайн" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитБелье.Дизайн) Тогда
												Стр_а.value=ДополнительныйРеквизитБелье.Дизайн;
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Дополнительные характеристики изделия (описание)" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитБелье.ДополнительныеХарактеристики) Тогда
												Стр_а.value=ДополнительныйРеквизитБелье.ДополнительныеХарактеристики;
											КонецЕсли;
										Конецесли;
									Конеццикла;
									
									
										Для Каждого Стр_Ст ИЗ МассивРазмерВИных    Цикл
											Стр_1.attributes.Добавить(Стр_Ст);

										Конеццикла;
									
								ИначеЕсли Стр_1.name="Состав" Тогда
										
										
										
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Состав" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитБелье.Состав) Тогда
												Стр_а.value=ДополнительныйРеквизитБелье.Состав;
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Комплектация" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитБелье.Комплектация) Тогда
												Стр_а.value=ДополнительныйРеквизитБелье.Комплектация;
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Тип материала, %" Тогда
											
											Если ДополнительныйРеквизитБелье.ТипМатериалов.Количество()>0 Тогда
													
													Первая=ложь;
													Для Каждого Стр_ Из ДополнительныйРеквизитБелье.ТипМатериалов Цикл
														Если Не Первая Тогда
															Первая=Истина;
															Стр_а.value=Строка(Стр_.Материал);
															Стр_а.valueType=Формат(Стр_.Процент,"ЧГ=")
														Иначе
															
															Стр_Н=Новый Структура;
															Для Каждого Стр_Стр Из Стр_а Цикл
																Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
																
															Конеццикла;
																Стр_Н.value=Строка(Стр_.Материал);
															Стр_Н.valueType=Формат(Стр_.Процент,"ЧГ=") ;
															// Стр_1.attributes.Вставить();
															 МассивТиповМатериалов.Добавить(Стр_Н);
															
										
														 КонецЕсли;
													Конеццикла;
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Тип материала" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитБелье.ТипМатериала) Тогда
												Стр_а.value=ДополнительныйРеквизитБелье.ТипМатериала;
											КонецЕсли;
																																			
										Конецесли;
										Для Каждого Стр_Ст ИЗ МассивТиповМатериалов    Цикл
											Стр_1.attributes.Добавить(Стр_Ст);

										Конеццикла;

									Конеццикла;
								ИначеЕсли Стр_1.name="Характеристики товара в состоянии использования" Тогда
									
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Размер изделия" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитБелье.РазмерИзделия) Тогда
												Стр_а.value=ДополнительныйРеквизитБелье.РазмерИзделия;
											КонецЕсли;
										КонецЕсли;
									КонецЦикла;
								ИначеЕсли Стр_1.name="Эксплуатация и условия хранения" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Срок службы" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитБелье.ТипСрокаСлужбы) Тогда
												Стр_а.value=ДополнительныйРеквизитБелье.СрокСлужбы;
												Стр_а.valueType=Строка(ДополнительныйРеквизитБелье.ТипСрокаСлужбы)
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Гарантийный срок, от производителя" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитБелье.ТипГарантийногоСрока) Тогда
												Стр_а.value=ДополнительныйРеквизитБелье.ГарантийныйСрокОтПроизводителя;
												Стр_а.valueType=Строка(ДополнительныйРеквизитБелье.ТипГарантийногоСрока)
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Особые условия хранения" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитБелье.ОсобыеУсловияХранения) Тогда
												Стр_а.value=ДополнительныйРеквизитБелье.ОсобыеУсловияХранения;
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Рекомендации по использованию" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитБелье.РекомендацияПоИспользованию) Тогда
												Стр_а.value=ДополнительныйРеквизитБелье.РекомендацияПоИспользованию;
											КонецЕсли;
										КонецЕсли;
									Конеццикла;
									
									
								ИначеЕсли Стр_1.name="Нормативно-сопроводительная документация" Тогда
									МассивНормативово=Новый Массив;
									МассивНормативово.Очистить();
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Номер Регламента/стандарта" Тогда
											Первая=Ложь;
											
											Если ДополнительныйРеквизитБелье.НомерРегламента005=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 005/2011 ""О безопасности упаковки""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
												     Первая=Истина;
														
													    Стр_а.value="ТР ТС 005/2011 ""О безопасности упаковки""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											
											
											Если ДополнительныйРеквизитБелье.НомерРегламента007=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 007/2011 ""О безопасности продукции, предназначенной для детей и подростков""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													     Первая=Истина;
													    Стр_а.value="ТР ТС 007/2011 ""О безопасности продукции, предназначенной для детей и подростков""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											
											
											Если ДополнительныйРеквизитБелье.НомерРегламента017=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 017/2011 ""О безопасности продукции легкой промышленности""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													      Первая=Истина;
													
													    Стр_а.value="ТР ТС 017/2011 ""О безопасности продукции легкой промышленности""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											 
											 Если ДополнительныйРеквизитБелье.БезРегламента=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="Действие технических регламентов не распространяется";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													      Первая=Истина;
													
													    Стр_а.value="Действие технических регламентов не распространяется";
														
												КонецЕсли;
												
											КонецЕсли;
										ИначеЕсли  Стр_а.name="ГОСТ / ТУ / СТО" Тогда
											
											Если ДополнительныйРеквизитБелье.ГОСТЫИТУ.Количество()>0 Тогда
												
												Первая=ложь;
												Для Каждого Стр_ Из ДополнительныйРеквизитБелье.ГОСТЫИТУ Цикл
													Если Не Первая Тогда
														Первая=Истина;
														Стр_а.value=Стр_.ГОСТТУ;
														Стр_а.valueType=Строка(Стр_.ТипГОСТТУ)
													Иначе
														
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value=Стр_.ГОСТТУ;
														Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивГОСТТУ.Добавить(Стр_Н);
														
														
													 КонецЕсли;
													Конеццикла;
												КонецЕсли;
												
											КонецЕсли;

											
											
										//Конецесли;
									Конеццикла;
									
																		
									Для Каждого Стр_Ст ИЗ МассивГОСТТУ    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;
									
									

									Для Каждого Стр_Ст ИЗ МассивНормативово    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;
									
									
								КонецЕсли;
								
								
							Конеццикла;
							
						ИначеЕсли Объект.Тип=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Одежда") Тогда
								МассивАртикулов=Новый Массив;
								МассивАртикулов.Очистить();
								МассивРазмерВИных=Новый Массив;
								МассивТиповМатериалов=Новый Массив;
								МассивГОСТТУ=Новый Массив;	
							Для Каждого Стр_1 Из NNN.attrGroup Цикл
								
								
								Если Стр_1.name="Наименование товара и идентификация" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если Стр_а.name="Количество единиц употребления в потребительской упаковке" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитОдежда.ПотребительскаяУпаковка) Тогда
												Стр_а.value=Формат(ДополнительныеРеквизитОдежда.КоличествоВПотребительскойУпаковке,"ЧГ=");
												Стр_а.valueType=Строка(ДополнительныеРеквизитОдежда.ПотребительскаяУпаковка)
												
											КонецЕсли;
									 	//ИначеЕсли  Стр_а.name="Заявленный объём / вес нетто" Тогда
											
											
										Конецесли;
									Конеццикла;
								

								ИначеЕсли Стр_1.name="Происхождение и бренды" Тогда
									Перваяыла=ЛОжь;
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										
										Если  Стр_а.name="СТМ" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитОдежда.СТМ) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитОдежда.СТМ);
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Модель / артикул производителя" Тогда
	//										Если ЗначениеЗаполнено(Объект.МодельПроизводителяАртикул) Тогда
	//											Если Не Перваяыла Тогда
	//													Стр_а.value=Объект.МодельПроизводителяАртикул;
	//													Стр_а.valueType=Строка("Артикул");Перваяыла=истина
	//												Иначе
	//												
	//													Стр_Н=Новый Структура;
	//													Для Каждого Стр_Стр Из Стр_а Цикл
	//														Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
	//														
	//													Конеццикла;
	//														Стр_Н.value=Объект.МодельПроизводителяАртикул;
	//													Стр_Н.valueType=Строка("Артикул") ;
	//													// Стр_1.attributes.Вставить();
	//													 МассивАртикулов.Добавить(Стр_Н);
	//													
	//													
	//
	//													
	//											Конецесли;
	//										КонецЕсли;
											Если ЗначениеЗаполнено(Объект.МодельПроизводителяАртикул)
												И ДополнительныйРеквизитБелье.ДопМодельАртикулы.Количество()=0 Тогда
												Если Не Перваяыла Тогда
														Стр_а.value=Объект.МодельПроизводителяАртикул;
														Стр_а.valueType=Строка("Артикул")     ;Перваяыла=истина
													Иначе
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
															Стр_Н.value=Объект.МодельПроизводителяАртикул;
														Стр_Н.valueType=Строка("Артикул") ;
														// Стр_1.attributes.Вставить();
														 МассивАртикулов.Добавить(Стр_Н);
														
														
	
														
												Конецесли;
											КонецЕсли;
											Для Каждого Стр_22 Из ДополнительныеРеквизитОдежда.ДопМодельАртикулы Цикл
												
												Если Не Перваяыла Тогда
														Стр_а.value=Стр_22.МодельАртикул;
														Стр_а.valueType=Строка(Стр_22.ТипМодельАртикул)  ;Перваяыла=истина
													Иначе
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value=Стр_22.МодельАртикул;
														Стр_Н.valueType=Строка(Стр_22.ТипМодельАртикул);
														// Стр_1.attributes.Вставить();
														 МассивАртикулов.Добавить(Стр_Н);
														
														
	
														
												Конецесли;
												
											Конеццикла;
											
										Конецесли;
									Конеццикла;
									
									
									Для Каждого Стр_Ст ИЗ МассивАртикулов    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;

									
									
								ИначеЕсли Стр_1.name="Потребительские свойства" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										
										
										Если  Стр_а.name="Вид товара" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитОдежда.ВидИзделия) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитОдежда.ВидИзделия);
												Стр_а.valueTitle=Строка(ДополнительныеРеквизитОдежда.ВидИзделия);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Цвет" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитОдежда.Цвет) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитОдежда.Цвет);
												Стр_а.valueTitle=Строка(ДополнительныеРеквизитОдежда.Цвет);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Возраст потребителя" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитОдежда.ВозрастПотребителя) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитОдежда.ВозрастПотребителя);
												Стр_а.valueTitle=Строка(ДополнительныеРеквизитОдежда.ВозрастПотребителя);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Целевой пол" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитОдежда.ЦелевойПол) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитОдежда.ЦелевойПол);
												Стр_а.valueTitle=Строка(ДополнительныеРеквизитОдежда.ЦелевойПол);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Размер одежды" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитОдежда.РазмерИзделияГОСТ) Тогда
												Стр_а.value=ДополнительныеРеквизитОдежда.РазмерИзделияГОСТДругое;
												Стр_а.valueType=Строка(ДополнительныеРеквизитОдежда.РазмерИзделияГОСТ)
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Размер в иных системах измерения" Тогда
											
											Если ДополнительныеРеквизитОдежда.РазмерВИныхСистемахИзмерения.Количество()>0 Тогда
													
													Первая=ложь;
													Для Каждого Стр_ Из ДополнительныеРеквизитОдежда.РазмерВИныхСистемахИзмерения Цикл
														
														Если ЗначениеЗаполнено(Стр_.Страна) И ЗначениеЗАполнено(Стр_.Размер) Тогда
															
															Если Не Первая Тогда
																Первая=Истина;
																Стр_а.value=Стр_.Размер;
																Стр_а.valueType=Строка(Стр_.Страна)
															Иначе
																
																Стр_Н=Новый Структура;
																Для Каждого Стр_Стр Из Стр_а Цикл
																	Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
																	
																Конеццикла;
																	Стр_Н.value=Стр_.Размер;
																Стр_Н.valueType=Строка(Стр_.Страна) ;
																// Стр_1.attributes.Вставить();
																 МассивРазмерВИных.Добавить(Стр_Н);
																
											
															 КонецЕсли;
														КонецеслИ;
													Конеццикла;
											КонецЕсли;
																						
										ИначеЕсли  Стр_а.name="Рост" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитОдежда.Рост) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитОдежда.Рост);
												Стр_а.valueTitle=Строка(ДополнительныеРеквизитОдежда.Рост);
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Дополнительные характеристики изделия (описание)" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитОдежда.ДополнительныеХарактеристики) Тогда
												Стр_а.value=ДополнительныеРеквизитОдежда.ДополнительныеХарактеристики;
											КонецЕсли;
										Конецесли;
									Конеццикла;
									
									
										Для Каждого Стр_Ст ИЗ МассивРазмерВИных    Цикл
											Стр_1.attributes.Добавить(Стр_Ст);

										Конеццикла;
									
								ИначеЕсли Стр_1.name="Состав" Тогда
										
										
										
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Состав" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитОдежда.Состав) Тогда
												Стр_а.value=ДополнительныеРеквизитОдежда.Состав;
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Комплектация" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитОдежда.Комплектация) Тогда
												Стр_а.value=ДополнительныеРеквизитОдежда.Комплектация;
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Тип материала, %" Тогда
											
											Если ДополнительныеРеквизитОдежда.ТипМатериалов.Количество()>0 Тогда
													
													Первая=ложь;
													Для Каждого Стр_ Из ДополнительныеРеквизитОдежда.ТипМатериалов Цикл
														Если ЗначениеЗаполнено(Стр_.Процент) И ЗначениеЗАполнено(Стр_.Материал) Тогда
															
															
															Если Не Первая Тогда
																Первая=Истина;
																Стр_а.value=Стр_.Материал;
																Стр_а.valueType=Строка(Стр_.Процент)
															Иначе
																
																Стр_Н=Новый Структура;
																Для Каждого Стр_Стр Из Стр_а Цикл
																	Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
																	
																Конеццикла;
																	Стр_Н.value=Стр_.Материал;
																Стр_Н.valueType=Строка(Стр_.Процент) ;
																// Стр_1.attributes.Вставить();
																 МассивТиповМатериалов.Добавить(Стр_Н);
																
											
															 КонецЕсли;
														Конецесли;
													Конеццикла;
												КонецЕсли;
												
																					
										ИначеЕсли  Стр_а.name="Тип материала" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитОдежда.ТипМатериала) Тогда
												Стр_а.value=ДополнительныеРеквизитОдежда.ТипМатериала;
											КонецЕсли;
																																			
										Конецесли;
										Для Каждого Стр_Ст ИЗ МассивТиповМатериалов    Цикл
											Стр_1.attributes.Добавить(Стр_Ст);

										Конеццикла;

									Конеццикла;
									
									
								ИначеЕсли Стр_1.name="Эксплуатация и условия хранения" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Срок службы" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитОдежда.ТипСрокаСлужбы) Тогда
												Стр_а.value=ДополнительныеРеквизитОдежда.СрокСлужбы;
												Стр_а.valueType=Строка(ДополнительныеРеквизитОдежда.ТипСрокаСлужбы)
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Гарантийный срок, от производителя" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитОдежда.ТипГарантийногоСрока) Тогда
												Стр_а.value=ДополнительныеРеквизитОдежда.ГарантийныйСрокОтПроизводителя;
												Стр_а.valueType=Строка(ДополнительныеРеквизитОдежда.ТипГарантийногоСрока)
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Особые условия хранения" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитОдежда.ОсобыеУсловияХранения) Тогда
												Стр_а.value=ДополнительныеРеквизитОдежда.ОсобыеУсловияХранения;
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Рекомендации по использованию" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитОдежда.РекомендацияПоИспользованию) Тогда
												Стр_а.value=ДополнительныеРеквизитОдежда.РекомендацияПоИспользованию;
											КонецЕсли;
										КонецЕсли;
									Конеццикла;
									
									
								ИначеЕсли Стр_1.name="Нормативно-сопроводительная документация" Тогда
									МассивНормативово=Новый Массив;
									МассивНормативово.Очистить();
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Номер Регламента/стандарта" Тогда
											Первая=Ложь;
											
											Если ДополнительныеРеквизитОдежда.НомерРегламента005=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 005/2011 ""О безопасности упаковки""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
												     Первая=Истина;
														
													    Стр_а.value="ТР ТС 005/2011 ""О безопасности упаковки""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											
											
											Если ДополнительныеРеквизитОдежда.НомерРегламента007=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 007/2011 ""О безопасности продукции, предназначенной для детей и подростков""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													     Первая=Истина;
													    Стр_а.value="ТР ТС 007/2011 ""О безопасности продукции, предназначенной для детей и подростков""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											
											
											Если ДополнительныеРеквизитОдежда.НомерРегламента017=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 017/2011 ""О безопасности продукции легкой промышленности""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													      Первая=Истина;
													
													    Стр_а.value="ТР ТС 017/2011 ""О безопасности продукции легкой промышленности""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											 
											
											Если ДополнительныеРеквизитОдежда.НомерРегламента019=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 019/2011 ""О безопасности средств индивидуальной защиты""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													                     
												Иначе
													      Первая=Истина;
													
													    Стр_а.value="ТР ТС 019/2011 ""О безопасности средств индивидуальной защиты""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											 
											Если ДополнительныеРеквизитОдежда.БезРегламента=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="Действие технических регламентов не распространяется";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													      Первая=Истина;
													
													    Стр_а.value="Действие технических регламентов не распространяется";
														
												КонецЕсли;
												
											КонецЕсли;
										ИначеЕсли  Стр_а.name="ГОСТ / ТУ / СТО" Тогда
											
											Если ДополнительныеРеквизитОдежда.ГОСТЫИТУ.Количество()>0 Тогда
												
												Первая=ложь;
												Для Каждого Стр_ Из ДополнительныеРеквизитОдежда.ГОСТЫИТУ Цикл
													Если Не Первая Тогда
														Первая=Истина;
														Стр_а.value=Стр_.ГОСТТУ;
														Стр_а.valueType=Строка(Стр_.ТипГОСТТУ)
													Иначе
														
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value=Стр_.ГОСТТУ;
														Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивГОСТТУ.Добавить(Стр_Н);
														
														
													 КонецЕсли;
													Конеццикла;
												КонецЕсли;
												
											КонецЕсли;

											
											
										//Конецесли;
									Конеццикла;
									
																		
									Для Каждого Стр_Ст ИЗ МассивГОСТТУ    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;
									
									

									Для Каждого Стр_Ст ИЗ МассивНормативово    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;
									
									
								КонецЕсли;
								
								
							Конеццикла;
							
							
						ИначеЕсли Объект.Тип=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Велосипеды") Тогда
							                   МассивНормативово=Новый Массив;
																	МассивВтавить_Упаковки=Новый Массив;

									МассивГОСТТУ=Новый Массив;	
							Для Каждого Стр_1 Из NNN.attrGroup Цикл
								
								Если Стр_1.name="Происхождение и бренды" Тогда
									МассивАртикулов=Новый Массив;
									МассивАртикулов.Очистить();
									Перваяыла=ЛОжь;
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										
										Если  Стр_а.name="СТМ" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.СТМ) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитВелосипед.СТМ);
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Модель / артикул производителя" Тогда
	//										Если ЗначениеЗаполнено(Объект.МодельПроизводителяАртикул) Тогда
	//											Если Не Перваяыла Тогда
	//													Стр_а.value=Объект.МодельПроизводителяАртикул;
	//													Стр_а.valueType=Строка("Артикул")   ;Перваяыла=истина
	//												Иначе
	//												
	//													Стр_Н=Новый Структура;
	//													Для Каждого Стр_Стр Из Стр_а Цикл
	//														Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
	//														
	//													Конеццикла;
	//														Стр_Н.value=Объект.МодельПроизводителяАртикул;
	//													Стр_Н.valueType=Строка("Артикул") ;
	//													// Стр_1.attributes.Вставить();
	//													 МассивАртикулов.Добавить(Стр_Н);
	//													
	//													
	//
	//													
	//											Конецесли;
	//										КонецЕсли;
											Если ЗначениеЗаполнено(Объект.МодельПроизводителяАртикул)
												И ДополнительныйРеквизитБелье.ДопМодельАртикулы.Количество()=0 Тогда
												Если Не Перваяыла Тогда
														Стр_а.value=Объект.МодельПроизводителяАртикул;
														Стр_а.valueType=Строка("Артикул")     ;Перваяыла=истина
													Иначе
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
															Стр_Н.value=Объект.МодельПроизводителяАртикул;
														Стр_Н.valueType=Строка("Артикул") ;
														// Стр_1.attributes.Вставить();
														 МассивАртикулов.Добавить(Стр_Н);
														
														
	
														
												Конецесли;
											КонецЕсли;
											Для Каждого Стр_22 Из ДополнительныйРеквизитВелосипед.ДопМодельАртикулы Цикл
												
												Если Не Перваяыла Тогда
														Стр_а.value=Стр_22.МодельАртикул;
														Стр_а.valueType=Строка(Стр_22.ТипМодельАртикул) ;Перваяыла=истина
													Иначе
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value=Стр_22.МодельАртикул;
														Стр_Н.valueType=Строка(Стр_22.ТипМодельАртикул);
														// Стр_1.attributes.Вставить();
														 МассивАртикулов.Добавить(Стр_Н);
														
														
	
														
												Конецесли;
												
											Конеццикла;
											
										Конецесли;
									Конеццикла;
									
									
									Для Каждого Стр_Ст ИЗ МассивАртикулов    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;

									
									
								ИначеЕсли Стр_1.name="Потребительские свойства" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										
										
										Если  Стр_а.name="Вид товара" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.ТипВелосипеда) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитВелосипед.ТипВелосипеда);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитВелосипед.ТипВелосипеда);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Класс велосипеда" Тогда
											Если Значениезаполнено(ДополнительныйРеквизитВелосипед.КлассВелосипеда) тогда
												
												Стр_а.value=Строка(ДополнительныйРеквизитВелосипед.КлассВелосипеда);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитВелосипед.КлассВелосипеда);
												Стр_а.valueType=Неопределено
											Конецесли;

											
										ИначеЕсли  Стр_а.name="Цвет" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.Цвет) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитВелосипед.Цвет);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитВелосипед.Цвет);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Возраст потребителя" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.ВозрастПотребителя) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитВелосипед.ВозрастПотребителя);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитВелосипед.ВозрастПотребителя);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Пол целевого потребителя" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.ПолЦелевогоПотребителя) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитВелосипед.ПолЦелевогоПотребителя);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитВелосипед.ПолЦелевогоПотребителя);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Год производства" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.ГодПроизводства) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитВелосипед.ГодПроизводства);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитВелосипед.ГодПроизводства);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Размер рамы" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.ЕдиницаИзмеренияРазмераРамы) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитВелосипед.РазмерРамы);
												Стр_а.valueType=НРег(Строка(ДополнительныйРеквизитВелосипед.ЕдиницаИзмеренияРазмераРамы))
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Материал рамы" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.МатериалРамы) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитВелосипед.МатериалРамы);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитВелосипед.МатериалРамы);
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Тип тормозной системы" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.ТипТормознойСистемы) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитВелосипед.ТипТормознойСистемы);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитВелосипед.ТипТормознойСистемы);
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Тип конструкции рамы" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.ТипКонструкцииРамы) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитВелосипед.ТипКонструкцииРамы);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитВелосипед.ТипКонструкцииРамы);
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Тип передней вилки" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.ТипПереднейВилки) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитВелосипед.ТипПереднейВилки);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитВелосипед.ТипПереднейВилки);
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Ширина профиля шины (камеры), дюйм" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.ШиринаПрофиляШины) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитВелосипед.ШиринаПрофиляШины);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитВелосипед.ШиринаПрофиляШины);
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Номинальный посадочный диаметр обода, дюйм" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.ПосадочныйДиамтерОбода) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитВелосипед.ПосадочныйДиамтерОбода);
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Номинальный посадочный диаметр обода, мм" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.НоминальныйПосадочныйДиаметрОбодаВмм) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитВелосипед.НоминальныйПосадочныйДиаметрОбодаВмм);
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Количество колес" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.КоличествоКолес) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитВелосипед.КоличествоКолес);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитВелосипед.КоличествоКолес);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Тип колесных дисков" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.ТипКолесныхДисков) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитВелосипед.ТипКолесныхДисков);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитВелосипед.ТипКолесныхДисков);
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Колесная база, мм" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.КолеснаяБаза) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитВелосипед.КолеснаяБаза);
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Дорожный просвет, мм" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.ДорожныйПросвет) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитВелосипед.ДорожныйПросвет);
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Тип подвески" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.ТипПодвески) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитВелосипед.ТипПодвески);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитВелосипед.ТипПодвески);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Количество скоростей" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.КоличествоСкоростей) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитВелосипед.КоличествоСкоростей);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитВелосипед.КоличествоСкоростей);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Материал подкрылков" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.МатериалПодкрылок) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитВелосипед.МатериалПодкрылок);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитВелосипед.МатериалПодкрылок);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Расположение фар" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.РасположениеФар) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитВелосипед.РасположениеФар);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитВелосипед.РасположениеФар);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Наличие кофра" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.НаличиеКофра) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитВелосипед.НаличиеКофра);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитВелосипед.НаличиеКофра);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Максимальная нагрузка, кг" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.МаксимальнаяНагрузка) Тогда
												Стр_а.value=ДополнительныйРеквизитВелосипед.МаксимальнаяНагрузка;
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Дополнительные характеристики изделия (описание)" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.ДополнительныеХарактеристики) Тогда
												Стр_а.value=ДополнительныйРеквизитВелосипед.ДополнительныеХарактеристики;
											КонецЕсли;
										Конецесли;
									Конеццикла;
								
								ИначеЕсли Стр_1.name="Состав" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Комплектация" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.Состав) Тогда
												Стр_а.value=ДополнительныйРеквизитВелосипед.Состав;
											КонецЕсли;
											
										Конецесли;
									Конеццикла;
									
								ИначеЕсли Стр_1.name="Характеристики товара в состоянии использования" Тогда
									  Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если Стр_а.name="Конструктивная масса, кг" Тогда
											ДополнительныйРеквизитВелосипед.КонструктивнаяМасса=Стр_2.value;
										ИначеЕсли  Стр_а.name="Длина изделия" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.ДлинаЕдиницаИзмерения) Тогда
												Стр_а.value=ДополнительныйРеквизитВелосипед.Длина;
												Стр_а.valueType=Строка(ДополнительныйРеквизитВелосипед.ДлинаЕдиницаИзмерения)
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Ширина изделия" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.ШиринаЕдиницаИзмерения) Тогда
												Стр_а.value=ДополнительныйРеквизитВелосипед.Ширина;
												Стр_а.valueType=Строка(ДополнительныйРеквизитВелосипед.ШиринаЕдиницаИзмерения)
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Высота изделия" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.ВысотаЕдиницаИзмерения) Тогда
												Стр_а.value=ДополнительныйРеквизитВелосипед.Высота;
												Стр_а.valueType=Строка(ДополнительныйРеквизитВелосипед.ВысотаЕдиницаИзмерения)
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Длина сложенного изделия" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.ДлинаСложенногоИзделияЕдиницаИзмерения) Тогда
												Стр_а.value=ДополнительныйРеквизитВелосипед.ДлинаСложенногоИзделия;
												Стр_а.valueType=Строка(ДополнительныйРеквизитВелосипед.ДлинаСложенногоИзделияЕдиницаИзмерения)
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Ширина сложенного изделия" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.ШиринаСложенногоИзделияЕдиницаИзмерения) Тогда
												Стр_а.value=ДополнительныйРеквизитВелосипед.ШиринаСложенногоИзделия;
												Стр_а.valueType=Строка(ДополнительныйРеквизитВелосипед.ШиринаСложенногоИзделияЕдиницаИзмерения)
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Высота сложенного изделия" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.ВысотаСложенногоИзделияЕдиницыИзмерения) Тогда
												Стр_а.value=ДополнительныйРеквизитВелосипед.ВысотаСложенногоИзделния;
												Стр_а.valueType=Строка(ДополнительныйРеквизитВелосипед.ВысотаСложенногоИзделияЕдиницыИзмерения)
											КонецЕсли;
										Конецесли;
									Конеццикла
									
									
									
									
								ИначеЕсли Стр_1.name="Эксплуатация и условия хранения" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Срок службы" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.ТипСрокаСлужбы) Тогда
												Стр_а.value=ДополнительныйРеквизитВелосипед.СрокСлужбы;
												Стр_а.valueType=Строка(ДополнительныйРеквизитВелосипед.ТипСрокаСлужбы)
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Гарантийный срок, от производителя" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.ТипГарантийногоСрока) Тогда
												Стр_а.value=ДополнительныйРеквизитВелосипед.ГарантийныйСрокОтПроизводителя;
												Стр_а.valueType=Строка(ДополнительныйРеквизитВелосипед.ТипГарантийногоСрока)
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Особые условия хранения" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.ОсобыеУсловияХранения) Тогда
												Стр_а.value=ДополнительныйРеквизитВелосипед.ОсобыеУсловияХранения;
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Рекомендации по использованию" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитВелосипед.РекомендацияПоИспользованию) Тогда
												Стр_а.value=ДополнительныйРеквизитВелосипед.РекомендацияПоИспользованию;
											КонецЕсли;
										КонецЕсли;
									Конеццикла;
									
									
								ИначеЕсли Стр_1.name="Нормативно-сопроводительная документация" Тогда
									МассивНормативово=Новый Массив;
									МассивНормативово.Очистить();
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Номер Регламента/стандарта" Тогда
											Первая=Ложь;
											
											Если ДополнительныйРеквизитВелосипед.НомерРегламента005=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 005/2011 ""О безопасности упаковки""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
												     Первая=Истина;
														
													    Стр_а.value="ТР ТС 005/2011 ""О безопасности упаковки""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											
											
											Если ДополнительныйРеквизитВелосипед.НомерРегламента007=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 007/2011 ""О безопасности продукции, предназначенной для детей и подростков""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													     Первая=Истина;
													    Стр_а.value="ТР ТС 007/2011 ""О безопасности продукции, предназначенной для детей и подростков""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											
											
											Если ДополнительныйРеквизитВелосипед.НомерРегламента010=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 010/2011 ""О безопасности машин и оборудования""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													      Первая=Истина;
													
													    Стр_а.value="ТР ТС 010/2011 ""О безопасности машин и оборудования""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											 
											
											Если ДополнительныйРеквизитВелосипед.НомерРегламента012=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 012/2011 ""О безопасности оборудования для работы во взрывоопасных средах""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													                     
												Иначе
													      Первая=Истина;
													
													    Стр_а.value="ТР ТС 012/2011 ""О безопасности оборудования для работы во взрывоопасных средах""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											 
											Если ДополнительныйРеквизитВелосипед.НомерРегламента018=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 018/2011 ""О безопасности колесных транспортных средств""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													      Первая=Истина;
													
													    Стр_а.value="ТР ТС 018/2011 ""О безопасности колесных транспортных средств""";
														
												КонецЕсли;
												
												
											КонецЕсли;

											
											
										;
											КонецЕсли;
										//Конецесли;
									Конеццикла;
									
									Для Каждого Стр_Ст ИЗ МассивНормативово    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;
									
									
								КонецЕсли;
								
								
							Конеццикла;
						ИначеЕсли Объект.Тип=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Фото") Тогда
							                   МассивНормативово=Новый Массив;
																	МассивВтавить_Упаковки=Новый Массив;

									МассивГОСТТУ=Новый Массив;	
							Для Каждого Стр_1 Из NNN.attrGroup Цикл
								
								Если Стр_1.name="Наименование товара и идентификация" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если Стр_а.name="Количество единиц употребления в потребительской упаковке" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитФото.ПотребительскаяУпаковка) Тогда
												Стр_а.value=Формат(ДополнительныеРеквизитФото.КоличествоВПотребительскойУпаковке,"ЧГ=");
												Стр_а.valueType=Строка(ДополнительныеРеквизитФото.ПотребительскаяУпаковка)
												
											КонецЕсли;
									 	//ИначеЕсли  Стр_а.name="Заявленный объём / вес нетто" Тогда
											
											
										Конецесли;
									Конеццикла;
								

									
								ИначеЕсли Стр_1.name="Происхождение и бренды" Тогда
									МассивАртикулов=Новый Массив;
									МассивАртикулов.Очистить();
									Перваяыла=ЛОжь;
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										
										Если  Стр_а.name="Модель / артикул производителя" Тогда
	//										Если ЗначениеЗаполнено(Объект.МодельПроизводителяАртикул) Тогда
	//											Если Не Перваяыла Тогда
	//													Стр_а.value=Объект.МодельПроизводителяАртикул;
	//													Стр_а.valueType=Строка("Артикул")  ;Перваяыла=истина
	//												Иначе
	//												
	//													Стр_Н=Новый Структура;
	//													Для Каждого Стр_Стр Из Стр_а Цикл
	//														Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
	//														
	//													Конеццикла;
	//														Стр_Н.value=Объект.МодельПроизводителяАртикул;
	//													Стр_Н.valueType=Строка("Артикул") ;
	//													// Стр_1.attributes.Вставить();
	//													 МассивАртикулов.Добавить(Стр_Н);
	//													
	//													
	//
	//													
	//											Конецесли;
	//										КонецЕсли;
											Если ЗначениеЗаполнено(Объект.МодельПроизводителяАртикул)
												И ДополнительныйРеквизитБелье.ДопМодельАртикулы.Количество()=0 Тогда
												Если Не Перваяыла Тогда
														Стр_а.value=Объект.МодельПроизводителяАртикул;
														Стр_а.valueType=Строка("Артикул")     ;Перваяыла=истина
													Иначе
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
															Стр_Н.value=Объект.МодельПроизводителяАртикул;
														Стр_Н.valueType=Строка("Артикул") ;
														// Стр_1.attributes.Вставить();
														 МассивАртикулов.Добавить(Стр_Н);
														
														
	
														
												Конецесли;
											КонецЕсли;
											Для Каждого Стр_22 Из ДополнительныеРеквизитФото.ДопМодельАртикулы Цикл
												
												Если Не Перваяыла Тогда
														Стр_а.value=Стр_22.МодельАртикул;
														Стр_а.valueType=Строка(Стр_22.ТипМодельАртикул)   ;Перваяыла=истина
													Иначе
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value=Стр_22.МодельАртикул;
														Стр_Н.valueType=Строка(Стр_22.ТипМодельАртикул);
														// Стр_1.attributes.Вставить();
														 МассивАртикулов.Добавить(Стр_Н);
														
														
	
														
												Конецесли;
												
											Конеццикла;
											
										Конецесли;
									Конеццикла;
									
									
									Для Каждого Стр_Ст ИЗ МассивАртикулов    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;

									
									
								ИначеЕсли Стр_1.name="Потребительские свойства" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										
										
										Если  Стр_а.name="Вид товара" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитФото.ТипИзделия) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитФото.ТипИзделия);
												Стр_а.valueTitle=Строка(ДополнительныеРеквизитФото.ТипИзделия);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Материал изделия" Тогда
											Если Значениезаполнено(ДополнительныеРеквизитФото.МатериалИзделия) тогда
												
												Стр_а.value=Строка(ДополнительныеРеквизитФото.МатериалИзделия);
												Стр_а.valueTitle=Строка(ДополнительныеРеквизитФото.МатериалИзделия);
												Стр_а.valueType=Неопределено
											Конецесли;

											
										ИначеЕсли  Стр_а.name="Цвет" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитФото.Цвет) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитФото.Цвет);
												Стр_а.valueTitle=Строка(ДополнительныеРеквизитФото.Цвет);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										Конецесли;
									Конеццикла;
								
								ИначеЕсли Стр_1.name="Состав" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Комплектация" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитФото.Состав) Тогда
												Стр_а.value=ДополнительныеРеквизитФото.Состав;
											КонецЕсли;
											
										Конецесли;
									Конеццикла;
									
								ИначеЕсли Стр_1.name="Эксплуатация и условия хранения" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Срок службы" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитФото.ТипСрокаСлужбы) Тогда
												Стр_а.value=ДополнительныеРеквизитФото.СрокСлужбы;
												Стр_а.valueType=Строка(ДополнительныеРеквизитФото.ТипСрокаСлужбы)
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Рекомендации по использованию" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитФото.РекомендацияПоИспользованию) Тогда
												Стр_а.value=ДополнительныеРеквизитФото.РекомендацияПоИспользованию;
											КонецЕсли;
										КонецЕсли;
									Конеццикла;
									
									
								ИначеЕсли Стр_1.name="Нормативно-сопроводительная документация" Тогда
									МассивНормативово=Новый Массив;
									МассивНормативово.Очистить();
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Номер Регламента/стандарта" Тогда
											Первая=Ложь;
											
											Если ДополнительныеРеквизитФото.НомерРегламента004=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ЕАЭС 037/2016 ""Об ограничении применения опасных веществ в изделиях электротехники и радиоэлектроники""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
												     Первая=Истина;
														
													    Стр_а.value="ТР ЕАЭС 037/2016 ""Об ограничении применения опасных веществ в изделиях электротехники и радиоэлектроники""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											
											
											Если ДополнительныеРеквизитФото.НомерРегламента005=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 005/2011 ""О безопасности упаковки""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
												     Первая=Истина;
														
													    Стр_а.value="ТР ТС 005/2011 ""О безопасности упаковки""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											
											
											Если ДополнительныеРеквизитФото.НомерРегламента012=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 012/2011 ""О безопасности оборудования для работы во взрывоопасных средах""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													     Первая=Истина;
													    Стр_а.value="ТР ТС 012/2011 ""О безопасности оборудования для работы во взрывоопасных средах""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											
											
											Если ДополнительныеРеквизитФото.НомерРегламента020=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 020/2011 ""Электромагнитная совместимость технических средств""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													      Первая=Истина;
													
													    Стр_а.value="ТР ТС 020/2011 ""Электромагнитная совместимость технических средств""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											 
											
											Если ДополнительныеРеквизитФото.НомерРегламента037=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ЕАЭС 037/2016 ""Об ограничении применения опасных веществ в изделиях электротехники и радиоэлектроники""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													                     
												Иначе
													      Первая=Истина;
													
													    Стр_а.value="ТР ЕАЭС 037/2016 ""Об ограничении применения опасных веществ в изделиях электротехники и радиоэлектроники""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											 
										КонецЕсли;
										//Конецесли;
									Конеццикла;
									
									Для Каждого Стр_Ст ИЗ МассивНормативово    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;
									
									
								КонецЕсли;
								
								
							//	Если Стр_1.name="Состав" Тогда
							//		Стр_1.attributes[0].value="Мой состав";
							//	КонецЕсли;
								
							Конеццикла;
						
						
						ИначеЕсли Объект.Тип=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Парфюм") Тогда
		                   	МассивНормативово=Новый Массив;
							МассивНормативово.Очистить();
							МассивГОСТТУ=Новый Массив;	
							МассивГОСТТУ.Очистить();
														
							Для Каждого Стр_1 Из NNN.attrGroup Цикл
								
								Если Стр_1.name="Наименование товара и идентификация" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если Стр_а.name="Заявленный объём / вес нетто" Тогда
											//Стр_а.value=объект
											Если ЗначениеЗаполнено(ДополнительныйРеквизитПарфюм.Объем)
												И Значениезаполнено(ДополнительныйРеквизитПарфюм.ЕдиницаИзмеренияОбъема) тогда
												
												Стр_а.value=формат(ДополнительныйРеквизитПарфюм.Объем,"ЧГ=ЧРД="".""");
												Стр_а.valueType=НРег(Строка(ДополнительныйРеквизитПарфюм.ЕдиницаИзмеренияОбъема))
											Конецесли;
											
										ИначеЕсли Стр_а.name="Количество единиц употребления в потребительской упаковке" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитПарфюм.ПотребительскаяУпаковка) Тогда
												Стр_а.value=Формат(ДополнительныйРеквизитПарфюм.КоличествоВПотребительскойУпаковке,"ЧГ=");
												Стр_а.valueType=Строка(ДополнительныйРеквизитПарфюм.ПотребительскаяУпаковка)
												
											КонецЕсли;
									 	//ИначеЕсли  Стр_а.name="Заявленный объём / вес нетто" Тогда
											
											
										Конецесли;
									Конеццикла;
								
								ИначеЕсли Стр_1.name="Потребительские свойства" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Тип парфюмерии" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитПарфюм.ТипПарфюмерии) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитПарфюм.ТипПарфюмерии);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитПарфюм.ТипПарфюмерии);
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Возраст потребителя" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитПарфюм.ВозрастПотребителя) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитПарфюм.ВозрастПотребителя);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитПарфюм.ВозрастПотребителя);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Пол целевого потребителя" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитПарфюм.ПолЦелевогоПотребителя) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитПарфюм.ПолЦелевогоПотребителя);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитПарфюм.ПолЦелевогоПотребителя);
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Форма / состояние / формат" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитПарфюм.ФормаСостояниеФормат) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитПарфюм.ФормаСостояниеФормат);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитПарфюм.ФормаСостояниеФормат);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли Стр_а.name="Тип дозатора" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитПарфюм.ТипДозатора) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитПарфюм.ТипДозатора);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитПарфюм.ТипДозатора);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли Стр_а.name="Селектив" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитПарфюм.Селектив) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитПарфюм.Селектив);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитПарфюм.Селектив);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли Стр_а.name="Тип аромата" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитПарфюм.ТипАромата) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитПарфюм.ТипАромата);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитПарфюм.ТипАромата);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли Стр_а.name="Входящие в аромат ноты" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитПарфюм.ВходящиеВАроматНоты) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитПарфюм.ВходящиеВАроматНоты);;
											КонецЕсли;
											
										ИначеЕсли Стр_а.name="Дополнительные характеристики изделия (описание)" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитПарфюм.ДополнительныеХарактеристики) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитПарфюм.ДополнительныеХарактеристики);;
											КонецЕсли;
										Конецесли;
									Конеццикла;
									
									
								
								ИначеЕсли Стр_1.name="Эксплуатация и условия хранения" Тогда
									МассивВтавить_Упаковки=Новый Массив;
									МассивВтавить_Упаковки.Очистить();
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Срок годности" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитПарфюм.ТипСрокаГодности) Тогда
												Стр_а.value=ДополнительныйРеквизитПарфюм.СрокГодности;
												Стр_а.valueType=Строка(ДополнительныйРеквизитПарфюм.ТипСрокаГодности)
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Особые условия хранения" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитПарфюм.ОсобыеУсловияХранения) Тогда
												Стр_а.value=ДополнительныйРеквизитПарфюм.ОсобыеУсловияХранения;
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Рекомендации по использованию" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитПарфюм.РекомендацияПоИспользованию) Тогда
												Стр_а.value=ДополнительныйРеквизитПарфюм.РекомендацияПоИспользованию;
											КонецЕсли;
										
										ИначеЕсли  Стр_а.name="Альтернативный срок годности" Тогда
											
											Если ДополнительныйРеквизитПарфюм.ДополнительныеСрокиГодности.Количество()>0 Тогда
												
												Первая=ложь;
												Для Каждого Стр_ Из ДополнительныйРеквизитПарфюм.ДополнительныеСрокиГодности Цикл
													Если Не Первая Тогда
														Первая=Истина;
														Стр_а.value=Стр_.СрокГодности;
														Стр_а.valueType=Строка(Стр_.ТипДополнительногоСрокаГодности)
													Иначе
														
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
															Стр_Н.value=Стр_.СрокГодности;
														Стр_Н.valueType=Строка(Стр_.ТипДополнительногоСрокаГодности) ;
														// Стр_1.attributes.Вставить();
														 МассивВтавить_Упаковки.Добавить(Стр_Н);
														
														
													 КонецЕсли;
													Конеццикла;
												КонецЕсли;
										ИначеЕсли  Стр_а.name="Дополнительный срок годности" Тогда
											
											Если ДополнительныйРеквизитПарфюм.ДополнительныеСрокиГодности.Количество()>0 Тогда
												
												Первая=ложь;
												Для Каждого Стр_ Из ДополнительныйРеквизитПарфюм.ДополнительныеСрокиГодности Цикл
													Если Не Первая Тогда
														Первая=Истина;
														Стр_а.value=Стр_.СрокГодности;
														Стр_а.valueType=Строка(Стр_.ТипДополнительногоСрокаГодности)
													Иначе
														
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
															Стр_Н.value=Стр_.СрокГодности;
														Стр_Н.valueType=Строка(Стр_.ТипДополнительногоСрокаГодности) ;
														// Стр_1.attributes.Вставить();
														 МассивВтавить_Упаковки.Добавить(Стр_Н);
														
														
													 КонецЕсли;
													Конеццикла;
												КонецЕсли;
											КонецЕсли;
										//Конецесли;
									Конеццикла;
									
									Для Каждого Стр_Ст ИЗ МассивВтавить_Упаковки    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;
								ИначеЕсли Стр_1.name="Рекомендации производителя" Тогда
									  Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если Стр_а.name="Меры предосторожности" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитПарфюм.МерыПредосторожности) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитПарфюм.МерыПредосторожности);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитПарфюм.МерыПредосторожности);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										КонецЕсли;
									Конеццикла;
								ИначеЕсли Стр_1.name="Характеристики товара в состоянии использования" Тогда
									  Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Ширина изделия" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитПарфюм.ШиринаЕдиницаИзмерения) Тогда
												Стр_а.value=ДополнительныйРеквизитПарфюм.Ширина;
												Стр_а.valueType=Строка(ДополнительныйРеквизитПарфюм.ШиринаЕдиницаИзмерения)
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Высота изделия" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитПарфюм.ВысотаЕдиницаИзмерения) Тогда
												Стр_а.value=ДополнительныйРеквизитПарфюм.Высота;
												Стр_а.valueType=Строка(ДополнительныйРеквизитПарфюм.ВысотаЕдиницаИзмерения)
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Глубина изделия" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитПарфюм.ГлубинаЕдиницаИзмерения) Тогда
												Стр_а.value=ДополнительныйРеквизитПарфюм.Глубина;
												Стр_а.valueType=Строка(ДополнительныйРеквизитПарфюм.ГлубинаЕдиницаИзмерения)
											КонецЕсли;
										ИначеЕсли Стр_а.name="Тип упаковки использования" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитПарфюм.ТипУпаковкиИспользования) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитПарфюм.ТипУпаковкиИспользования);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитПарфюм.ТипУпаковкиИспользования);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли Стр_а.name="Материал упаковки использования" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитПарфюм.МатериалУпаковки) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитПарфюм.МатериалУпаковки);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитПарфюм.МатериалУпаковки);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										Конецесли;
									Конеццикла
									
									
								ИначеЕсли Стр_1.name="Нормативно-сопроводительная документация" Тогда
									МассивГОСТТУ=Новый Массив;
									МассивГОСТТУ.Очистить();
									МассивНормативово=Новый Массив;
									МассивНормативово.Очистить();;
									
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Номер Регламента/стандарта" Тогда
											Первая=Ложь;
											
											Если ДополнительныйРеквизитПарфюм.НомерРегламента005=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 005/2011 ""О безопасности упаковки""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
												     Первая=Истина;
														
													    Стр_а.value="ТР ТС 005/2011 ""О безопасности упаковки""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											 
											Если ДополнительныйРеквизитПарфюм.НомерРегламента029=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 029/2012 ""Требования к безопасности пищевых добавок, ароматизаторов и технологических вспомогательных средств""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													       Первая=Истина;
													
													    Стр_а.value="ТР ТС 029/2012 ""Требования к безопасности пищевых добавок, ароматизаторов и технологических вспомогательных средств""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											

											Если ДополнительныйРеквизитПарфюм.НомерРегламента009=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value=
														"ТР ТС 009/2011 ""О безопасности парфюмерно-косметической продукции""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													       Первая=Истина;
													
													    Стр_а.value=
														"ТР ТС 009/2011 ""О безопасности парфюмерно-косметической продукции""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											

																						
											
											
										ИначеЕсли  Стр_а.name="ГОСТ / ТУ / СТО" Тогда
											
											Если ДополнительныйРеквизитПарфюм.ГОСТЫИТУ.Количество()>0 Тогда
												
												Первая=ложь;
												Для Каждого Стр_ Из ДополнительныйРеквизитПарфюм.ГОСТЫИТУ Цикл
													Если Не Первая Тогда
														Первая=Истина;
														Стр_а.value=Стр_.ГОСТТУ;
														Стр_а.valueType=Строка(Стр_.ТипГОСТТУ)
													Иначе
														
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value=Стр_.ГОСТТУ;
														Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивГОСТТУ.Добавить(Стр_Н);
														
														
													 КонецЕсли;
													Конеццикла;
												КонецЕсли;
											КонецЕсли;
										//Конецесли;
									Конеццикла;
									
									Для Каждого Стр_Ст ИЗ МассивНормативово    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;
									
									Для Каждого Стр_Ст ИЗ МассивГОСТТУ    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;
									
									
									
									
								ИначеЕсли Стр_1.name="Состав" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Состав" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитПарфюм.Состав) Тогда
												Стр_а.value=ДополнительныйРеквизитПарфюм.Состав;
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Комплектация" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитПарфюм.Комплектация) Тогда
												Стр_а.value=ДополнительныйРеквизитПарфюм.Комплектация;
											КонецЕсли;
											
										Конецесли;
									Конеццикла;
										
																	
								КонецЕсли;
								
								
								
							//	Если Стр_1.name="Состав" Тогда
							//		Стр_1.attributes[0].value="Мой состав";
							//	КонецЕсли;
								
							Конеццикла;
							
							
						ИначеЕсли Объект.Тип=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Шины") Тогда
							                   МассивНормативово=Новый Массив;
																	МассивВтавить_Упаковки=Новый Массив;

													МассивГОСТТУ=Новый Массив;	
							Для Каждого Стр_1 Из NNN.attrGroup Цикл
								
								Если Стр_1.name="Происхождение и бренды" Тогда
									МассивАртикулов=Новый Массив;
									МассивАртикулов.Очистить();
									Перваяыла=ЛОжь;
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Модель / артикул производителя" Тогда
	//										Если ЗначениеЗаполнено(Объект.МодельПроизводителяАртикул) Тогда
	//											Если Не Перваяыла Тогда
	//													Стр_а.value=Объект.МодельПроизводителяАртикул;
	//													Стр_а.valueType=Строка("Артикул");Перваяыла=истина
	//												Иначе
	//												
	//													Стр_Н=Новый Структура;
	//													Для Каждого Стр_Стр Из Стр_а Цикл
	//														Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
	//														
	//													Конеццикла;
	//														Стр_Н.value=Объект.МодельПроизводителяАртикул;
	//													Стр_Н.valueType=Строка("Артикул") ;
	//													// Стр_1.attributes.Вставить();
	//													 МассивАртикулов.Добавить(Стр_Н);
	//													
	//													
	//
	//													
	//											Конецесли;
	//										КонецЕсли;
											Если ЗначениеЗаполнено(Объект.МодельПроизводителяАртикул)
												И ДополнительныйРеквизитБелье.ДопМодельАртикулы.Количество()=0 Тогда
												Если Не Перваяыла Тогда
														Стр_а.value=Объект.МодельПроизводителяАртикул;
														Стр_а.valueType=Строка("Артикул")     ;Перваяыла=истина
													Иначе
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
															Стр_Н.value=Объект.МодельПроизводителяАртикул;
														Стр_Н.valueType=Строка("Артикул") ;
														// Стр_1.attributes.Вставить();
														 МассивАртикулов.Добавить(Стр_Н);
														
														
	
														
												Конецесли;
											КонецЕсли;
											Для Каждого Стр_22 Из ДополнительныеРеквизитыШины.ДопМодельАртикулы Цикл
												
												Если Не Перваяыла Тогда
														Стр_а.value=Стр_22.МодельАртикул;
														Стр_а.valueType=Строка(Стр_22.ТипМодельАртикул)  ;Перваяыла=истина
													Иначе
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value=Стр_22.МодельАртикул;
														Стр_Н.valueType=Строка(Стр_22.ТипМодельАртикул);
														// Стр_1.attributes.Вставить();
														 МассивАртикулов.Добавить(Стр_Н);
														
														
	
														
												Конецесли;
												
											Конеццикла;
											
										Конецесли;
									Конеццикла;
									
									
									Для Каждого Стр_Ст ИЗ МассивАртикулов    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;

									
									
								ИначеЕсли Стр_1.name="Потребительские свойства" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Целевое использование/применение" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитыШины.ЦелевоеИспользование) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитыШины.ЦелевоеИспользование);
												Стр_а.valueTitle=Строка(ДополнительныеРеквизитыШины.ЦелевоеИспользование);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Ширина профиля шины (камеры), мм/дюйм" Тогда
											Если Значениезаполнено(ДополнительныеРеквизитыШины.ЕдиницаИзмерения) тогда
												
												Стр_а.value=ДополнительныеРеквизитыШины.ШиринаПрофиляШины;
												Стр_а.valueType=НРег(Строка(ДополнительныеРеквизитыШины.ЕдиницаИзмерения))
											Конецесли;

											
										ИначеЕсли  Стр_а.name="Ширина профиля шины (камеры), дюйм" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитыШины.ШиринаПрофиляШиныКамерыДюйм) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитыШины.ШиринаПрофиляШиныКамерыДюйм);
												Стр_а.valueTitle=Строка(ДополнительныеРеквизитыШины.ШиринаПрофиляШиныКамерыДюйм);
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
											
										ИначеЕсли  Стр_а.name="Номинальное отношение высоты профиля шины к его ширине, %" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитыШины.НоминальноеОтношениеВысотыПрофиляШиныКЕгоШирине) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитыШины.НоминальноеОтношениеВысотыПрофиляШиныКЕгоШирине);
												Стр_а.valueTitle=Строка(ДополнительныеРеквизитыШины.НоминальноеОтношениеВысотыПрофиляШиныКЕгоШирине);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Тип конструкции каркаса шины" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитыШины.ТипКонструкцииКаркасаШины) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитыШины.ТипКонструкцииКаркасаШины);
												Стр_а.valueTitle=Строка(ДополнительныеРеквизитыШины.ТипКонструкцииКаркасаШины);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Номинальный посадочный диаметр обода, дюйм" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитыШины.ПосадочныйДиамтерОбода) Тогда
												Стр_а.value=ДополнительныеРеквизитыШины.ПосадочныйДиамтерОбода;
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Номинальный посадочный диаметр обода, мм" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитыШины.НоминальныйПосадочныйДиаметрОбодаВМм) Тогда
												Стр_а.value=ДополнительныеРеквизитыШины.НоминальныйПосадочныйДиаметрОбодаВМм;
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Индекс нагрузки на шину" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитыШины.ИндексНагрузкиНаШину) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитыШины.ИндексНагрузкиНаШину);
												Стр_а.valueTitle=Строка(ДополнительныеРеквизитыШины.ИндексНагрузкиНаШину);
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Категория скорости" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитыШины.КатегорияСкорости) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитыШины.КатегорияСкорости);
												Стр_а.valueTitle=Строка(ДополнительныеРеквизитыШины.КатегорияСкорости);
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Сезонность" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитыШины.Сезонность) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитыШины.Сезонность);
												Стр_а.valueTitle=Строка(ДополнительныеРеквизитыШины.Сезонность);
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Тип шины по способу герметизации" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитыШины.ТипШиныПоСпособуГерметизации) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитыШины.ТипШиныПоСпособуГерметизации);
												Стр_а.valueTitle=Строка(ДополнительныеРеквизитыШины.ТипШиныПоСпособуГерметизации);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Наружный диаметр" Тогда
											Если Значениезаполнено(ДополнительныеРеквизитыШины.ЕдиинцаНаружногоДиаметра) тогда
												
												Стр_а.value=ДополнительныеРеквизитыШины.НаружныйДиаметр;
												Стр_а.valueType=НРег(Строка(ДополнительныеРеквизитыШины.ЕдиинцаНаружногоДиаметра))
											Конецесли;
										ИначеЕсли  Стр_а.name="Топливная экономичность" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитыШины.ТопливнаяЭкономичность) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитыШины.ТопливнаяЭкономичность);
												Стр_а.valueTitle=Строка(ДополнительныеРеквизитыШины.ТопливнаяЭкономичность);
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Индекс сцепления с мокрой дорогой" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитыШины.ИндексСцепленияСМокройДорогой) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитыШины.ИндексСцепленияСМокройДорогой);
												Стр_а.valueTitle=Строка(ДополнительныеРеквизитыШины.ИндексСцепленияСМокройДорогой);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Уровень шума, в децибелах (dB)" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитыШины.УровеньШумаВДецибелах) Тогда
												Стр_а.value=ДополнительныеРеквизитыШины.УровеньШумаВДецибелах;
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Рисунок протектора" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитыШины.РисунокПротектроа) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитыШины.РисунокПротектроа);
												Стр_а.valueTitle=Строка(ДополнительныеРеквизитыШины.РисунокПротектроа);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Технология RunFlat" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитыШины.ТехнологияRunFlat) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитыШины.ТехнологияRunFlat);
												Стр_а.valueTitle=Строка(ДополнительныеРеквизитыШины.ТехнологияRunFlat);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Усиленная шина (XL, Extra Load)" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитыШины.УсиленнаяШина) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитыШины.УсиленнаяШина);
												Стр_а.valueTitle=Строка(ДополнительныеРеквизитыШины.УсиленнаяШина);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Шины с цельнометаллическим кордом" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитыШины.ШинаСЦельнометаллическимКордом) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитыШины.ШинаСЦельнометаллическимКордом);
												Стр_а.valueTitle=Строка(ДополнительныеРеквизитыШины.ШинаСЦельнометаллическимКордом);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Дополнительные характеристики изделия (описание)" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитыШины.ДополнительныеХарактеристики) Тогда
												Стр_а.value=ДополнительныеРеквизитыШины.ДополнительныеХарактеристики;
											КонецЕсли;
										Конецесли;
									Конеццикла;
								
								ИначеЕсли Стр_1.name="Состав" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Комплектация" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитыШины.Состав) Тогда
												Стр_а.value=ДополнительныеРеквизитыШины.Состав;
											КонецЕсли;
											
										Конецесли;
									Конеццикла;
								ИначеЕсли Стр_1.name="Эксплуатация и условия хранения" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Срок службы" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитыШины.ТипСрокаСлужбы) Тогда
												Стр_а.value=ДополнительныеРеквизитыШины.СрокСлужбы;
												Стр_а.valueType=Строка(ДополнительныеРеквизитыШины.ТипСрокаСлужбы)
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Гарантийный срок, от производителя" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитыШины.ТипГарантийногоСрока) Тогда
												Стр_а.value=ДополнительныеРеквизитыШины.ГарантийныйСрокОтПроизводителя;
												Стр_а.valueType=Строка(ДополнительныеРеквизитыШины.ТипГарантийногоСрока)
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Особые условия хранения" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитыШины.ОсобыеУсловияХранения) Тогда
												Стр_а.value=ДополнительныеРеквизитыШины.ОсобыеУсловияХранения;
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Рекомендации по использованию" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитыШины.РекомендацияПоИспользованию) Тогда
												Стр_а.value=ДополнительныеРеквизитыШины.РекомендацияПоИспользованию;
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Срок хранения" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитыШины.ТипСрокаХранения) Тогда
												Стр_а.value=ДополнительныеРеквизитыШины.СрокХранения;
												Стр_а.valueType=Строка(ДополнительныеРеквизитыШины.ТипСрокаХранения)
											КонецЕсли;
										КонецЕсли;
									Конеццикла;
									
									
								ИначеЕсли Стр_1.name="Нормативно-сопроводительная документация" Тогда
									МассивНормативово=Новый Массив;
									МассивНормативово.Очистить();
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Номер Регламента/стандарта" Тогда
											Первая=Ложь;
											
											Если ДополнительныеРеквизитыШины.НомерРегламента005=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 005/2011 ""О безопасности упаковки""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
												     Первая=Истина;
														
													    Стр_а.value="ТР ТС 005/2011 ""О безопасности упаковки""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											
											
											Если ДополнительныеРеквизитыШины.НомерРегламента018=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 018/2011 ""О безопасности колесных транспортных средств""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													     Первая=Истина;
													    Стр_а.value="ТР ТС 018/2011 ""О безопасности колесных транспортных средств""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											
											
											Если ДополнительныеРеквизитыШины.НомерРегламента031=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 031/2012 ""О безопасности сельскохозяйственных и лесохозяйственных тракторов и прицепов к ним""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													      Первая=Истина;
													
													    Стр_а.value="ТР ТС 031/2012 ""О безопасности сельскохозяйственных и лесохозяйственных тракторов и прицепов к ним""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											 
											
											
											
										;
											КонецЕсли;
										//Конецесли;
									Конеццикла;
									
									Для Каждого Стр_Ст ИЗ МассивНормативово    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;
									
									
								КонецЕсли;
								
								
							//	Если Стр_1.name="Состав" Тогда
							//		Стр_1.attributes[0].value="Мой состав";
							//	КонецЕсли;
								
							Конеццикла;
						ИначеЕсли Объект.Тип=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.ПитьеваяВода") Тогда
							                   МассивНормативово=Новый Массив;
																	МассивВтавить_Упаковки=Новый Массив;

													МассивГОСТТУ=Новый Массив;	
							Для Каждого Стр_1 Из NNN.attrGroup Цикл
								
								Если Стр_1.name="Наименование товара и идентификация" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если Стр_а.name="Заявленный объем" Тогда
											//Стр_а.value=объект
											Если ЗначениеЗаполнено(ДополнительныеРеквизитВода.ЗаявленныйОбъемВесНетто)
												И Значениезаполнено(ДополнительныеРеквизитВода.ЕдиницаОбъема) тогда
												
												Стр_а.value=формат(ДополнительныеРеквизитВода.ЗаявленныйОбъемВесНетто,"ЧГ=ЧРД="".""");
												Стр_а.valueType=НРег(Строка(ДополнительныеРеквизитВода.ЕдиницаОбъема))
											Конецесли;
											
										//ИначеЕсли  Стр_а.name="Заявленный объём / вес нетто" Тогда
											
											
										Конецесли;
									Конеццикла;
								ИначеЕсли Стр_1.name="Происхождение и бренды" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="СТМ" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитВода.СТМ) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитВода.СТМ);
											КонецЕсли;
											
										Конецесли;
									Конеццикла;
								ИначеЕсли Стр_1.name="Потребительские свойства" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Общая минерализация" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитВода.ОбщаяМинерализация)
												И Значениезаполнено(ДополнительныеРеквизитВода.ЕдиницаИзмеренияМинерализации) тогда
												
												Стр_а.value=формат(ДополнительныеРеквизитВода.ОбщаяМинерализация,"ЧГ=ЧРД="".""");
												Стр_а.valueType=НРег(Строка(ДополнительныеРеквизитВода.ЕдиницаИзмеренияМинерализации))
											Конецесли;
										иначеЕсли  Стр_а.name="Метод газирования" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитВода.МетодГазирования) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитВода.МетодГазирования);
												Стр_а.valueTitle=Строка(ДополнительныеРеквизитВода.МетодГазирования);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Тип продукта" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитВода.ТипПродукта) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитВода.ТипПродукта);
												Стр_а.valueTitle=Строка(ДополнительныеРеквизитВода.ТипПродукта);
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Продукция для детского питания" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитВода.ПродукцияДляДетскогоПитания) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитВода.ПродукцияДляДетскогоПитания);
												Стр_а.valueTitle=Строка(ДополнительныеРеквизитВода.ПродукцияДляДетскогоПитания);
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
											
										ИначеЕсли  Стр_а.name="Содержит ГМО" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитВода.СодержитГМО) Тогда
												Стр_а.value=Строка(ДополнительныеРеквизитВода.СодержитГМО);
												Стр_а.valueTitle=Строка(ДополнительныеРеквизитВода.СодержитГМО);
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
											
										Конецесли;
									Конеццикла;
								
								ИначеЕсли Стр_1.name="Состав" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Состав" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитВода.Состав) Тогда
												Стр_а.value=ДополнительныеРеквизитВода.Состав;
											КонецЕсли;
											
										Конецесли;
									Конеццикла;
								ИначеЕсли Стр_1.name="Эксплуатация и условия хранения" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Срок годности" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитВода.ТипСрокаГодности) Тогда
												Стр_а.value=ДополнительныеРеквизитВода.СрокГодности;
												Стр_а.valueType=Строка(ДополнительныеРеквизитВода.ТипСрокаГодности)
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Рекомендации по употреблению" Тогда
											Если ЗначениеЗаполнено(ДополнительныеРеквизитВода.РекомендацияПоУпотреблению) Тогда
												Стр_а.value=ДополнительныеРеквизитВода.РекомендацияПоУпотреблению;
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Альтернативный срок годности" Тогда
											
											Если ДополнительныеРеквизитВода.ДополнительныеСрокиГодности.Количество()>0 Тогда
												
												Первая=ложь;
												Для Каждого Стр_ Из ДополнительныеРеквизитВода.ДополнительныеСрокиГодности Цикл
													Если Не Первая Тогда
														Первая=Истина;
														Стр_а.value=Стр_.СрокГодности;
														Стр_а.valueType=Строка(Стр_.ТипДополнительногоСрокаГодности)
													Иначе
														
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
															Стр_Н.value=Стр_.СрокГодности;
														Стр_Н.valueType=Строка(Стр_.ТипДополнительногоСрокаГодности) ;
														// Стр_1.attributes.Вставить();
														 МассивВтавить_Упаковки.Добавить(Стр_Н);
														
														
													 КонецЕсли;
													Конеццикла;
												КонецЕсли;
												
											ИначеЕсли  Стр_а.name="Дополнительный срок годности" Тогда
											
											Если ДополнительныеРеквизитВода.ДополнительныеСрокиГодности.Количество()>0 Тогда
												
												Первая=ложь;
												Для Каждого Стр_ Из ДополнительныеРеквизитВода.ДополнительныеСрокиГодности Цикл
													Если Не Первая Тогда
														Первая=Истина;
														Стр_а.value=Стр_.СрокГодности;
														Стр_а.valueType=Строка(Стр_.ТипДополнительногоСрокаГодности)
													Иначе
														
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
															Стр_Н.value=Стр_.СрокГодности;
														Стр_Н.valueType=Строка(Стр_.ТипДополнительногоСрокаГодности) ;
														// Стр_1.attributes.Вставить();
														 МассивВтавить_Упаковки.Добавить(Стр_Н);
														
														
													 КонецЕсли;
													Конеццикла;
												КонецЕсли;
											КонецЕсли;
										//Конецесли;
									Конеццикла;
									
									Для Каждого Стр_Ст ИЗ МассивВтавить_Упаковки    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;
								ИначеЕсли Стр_1.name="Нормативно-сопроводительная документация" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Номер Регламента/стандарта" Тогда
											Первая=Ложь;
											
											Если ДополнительныеРеквизитВода.НомерРегламента005=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 005/2011 ""О безопасности упаковки""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
												     Первая=Истина;
														
													    Стр_а.value="ТР ТС 005/2011 ""О безопасности упаковки""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											
											Если ДополнительныеРеквизитВода.НомерРегламента021=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 021/2011 ""О безопасности пищевой продукции""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													     Первая=Истина;
													    Стр_а.value="ТР ТС 021/2011 ""О безопасности пищевой продукции""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											
											
											Если ДополнительныеРеквизитВода.НомерРегламента027=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 027/2012 ""О безопасности отдельных видов специализированной пищевой продукции, в том числе диетического лечебного и диетического профилактического питания""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													      Первая=Истина;
													
													    Стр_а.value="ТР ТС 027/2012 ""О безопасности отдельных видов специализированной пищевой продукции, в том числе диетического лечебного и диетического профилактического питания""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											

											Если ДополнительныеРеквизитВода.НомерРегламента029=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 029/2012 ""Требования к безопасности пищевых добавок, ароматизаторов и технологических вспомогательных средств""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													       Первая=Истина;
													
													    Стр_а.value="ТР ТС 029/2012 ""Требования к безопасности пищевых добавок, ароматизаторов и технологических вспомогательных средств""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											

											
											
											
										ИначеЕсли  Стр_а.name="ГОСТ / ТУ / СТО" Тогда
											
											Если ДополнительныеРеквизитВода.ГОСТЫИТУ.Количество()>0 Тогда
												
												Первая=ложь;
												Для Каждого Стр_ Из ДополнительныеРеквизитВода.ГОСТЫИТУ Цикл
													Если Не Первая Тогда
														Первая=Истина;
														Стр_а.value=Стр_.ГОСТТУ;
														Стр_а.valueType=Строка(Стр_.ТипГОСТТУ)
													Иначе
														
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value=Стр_.ГОСТТУ;
														Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивГОСТТУ.Добавить(Стр_Н);
														
														
													 КонецЕсли;
													Конеццикла;
												КонецЕсли;
											КонецЕсли;
										//Конецесли;
									Конеццикла;
									
									Для Каждого Стр_Ст ИЗ МассивНормативово    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;
									
									Для Каждого Стр_Ст ИЗ МассивГОСТТУ    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;
								КонецЕсли;
								
								
							//	Если Стр_1.name="Состав" Тогда
							//		Стр_1.attributes[0].value="Мой состав";
							//	КонецЕсли;
								
							Конеццикла;
							
						ИначеЕсли Объект.Тип=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Молоко") Тогда
		                   	МассивНормативово=Новый Массив;
							МассивНормативово.Очистить();
							МассивАллергены=Новый Массив;
							МассивАллергены.Очистить();
							МассивГОСТТУ=Новый Массив;	
		МассивГОСТТУ.Очистить();
														
							Для Каждого Стр_1 Из NNN.attrGroup Цикл
								
								Если Стр_1.name="Наименование товара и идентификация" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если Стр_а.name="Заявленный объём / вес нетто" Тогда
											//Стр_а.value=объект
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.ЗаявленныйОбъемВесНетто)
												И Значениезаполнено(ДополнителныеРеквизитМолоко.ЕдиницаОбъема) тогда
												
												Стр_а.value=формат(ДополнителныеРеквизитМолоко.ЗаявленныйОбъемВесНетто,"ЧГ=ЧРД="".""");
												Стр_а.valueType=НРег(Строка(ДополнителныеРеквизитМолоко.ЕдиницаОбъема))
											Конецесли;
											
										ИначеЕсли Стр_а.name="Базовая единица измерения" Тогда
											Если ДополнителныеРеквизитМолоко.ТоварВесовой Тогда
												Стр_а.value="КГ";
											Иначе
												Стр_а.value="ШТ";
											КонецЕсли;
										ИначеЕсли Стр_а.name="Количество единиц употребления в потребительской упаковке" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.ПотребительскаяУпаковка) Тогда
												Стр_а.value=Формат(ДополнителныеРеквизитМолоко.КоличествоВПотребительскойУпаковке,"ЧГ=");
												Стр_а.valueType=Строка(ДополнителныеРеквизитМолоко.ПотребительскаяУпаковка)
												
											КонецЕсли;
									 	//ИначеЕсли  Стр_а.name="Заявленный объём / вес нетто" Тогда
											
											
										Конецесли;
									Конеццикла;
								
								ИначеЕсли Стр_1.name="Происхождение и бренды" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="СТМ" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.СТМ) Тогда
												Стр_а.value=Строка(ДополнителныеРеквизитМолоко.СТМ);
											КонецЕсли;
											
										Конецесли;
									Конеццикла;
																
								ИначеЕсли Стр_1.name="Потребительские свойства" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Тип продукта" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.ТипПродукта) Тогда
												Стр_а.value=Строка(ДополнителныеРеквизитМолоко.ТипПродукта);
												Стр_а.valueTitle=Строка(ДополнителныеРеквизитМолоко.ТипПродукта);
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Происхождение сырья" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.ПроисхождениеСырья) Тогда
												Стр_а.value=Строка(ДополнителныеРеквизитМолоко.ПроисхождениеСырья);
												Стр_а.valueTitle=Строка(ДополнителныеРеквизитМолоко.ПроисхождениеСырья);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Жирность, %" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.Жирность) Тогда
												Стр_а.value=формат(ДополнителныеРеквизитМолоко.Жирность,"ЧГ=ЧРД="".""");;
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Продукция для детского питания" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.ПродукцияДляДетскогоПитания) Тогда
												Стр_а.value=Строка(ДополнителныеРеквизитМолоко.ПродукцияДляДетскогоПитания);
												Стр_а.valueTitle=Строка(ДополнителныеРеквизитМолоко.ПродукцияДляДетскогоПитания);
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Содержит ГМО" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.СодержитГМО) Тогда
												Стр_а.value=Строка(ДополнителныеРеквизитМолоко.СодержитГМО);
												Стр_а.valueTitle=Строка(ДополнителныеРеквизитМолоко.СодержитГМО);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли Стр_а.name="Пищевые добавки / ароматизаторы" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.ПищевыеДобавкиАроматизаторы) Тогда
												Стр_а.value=Строка(ДополнителныеРеквизитМолоко.ПищевыеДобавкиАроматизаторы);;
											КонецЕсли;
										ИначеЕсли Стр_а.name="Вкус" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.Вкус) Тогда
												Стр_а.value=Строка(ДополнителныеРеквизитМолоко.Вкус);;
											КонецЕсли;
											
										ИначеЕсли Стр_а.name="Заменитель молочного жира" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.ЗаменительМолочногоЖира) Тогда
												Стр_а.value=Строка(ДополнителныеРеквизитМолоко.ЗаменительМолочногоЖира);
												Стр_а.valueTitle=Строка(ДополнителныеРеквизитМолоко.ЗаменительМолочногоЖира);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли Стр_а.name="Тип обработки молока" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.ТипОбработкиМолока) Тогда
												Стр_а.value=Строка(ДополнителныеРеквизитМолоко.ТипОбработкиМолока);
												Стр_а.valueTitle=Строка(ДополнителныеРеквизитМолоко.ТипОбработкиМолока);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли Стр_а.name="Целевой возраст" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.ЦелевойВозраст) Тогда
												Стр_а.value=Строка(ДополнителныеРеквизитМолоко.ЦелевойВозраст);
												Стр_а.valueTitle=Строка(ДополнителныеРеквизитМолоко.ЦелевойВозраст);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли Стр_а.name="Тип хранения" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.ТипХранения) Тогда
												Стр_а.value=Строка(ДополнителныеРеквизитМолоко.ТипХранения);
												Стр_а.valueTitle=Строка(ДополнителныеРеквизитМолоко.ТипХранения);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли Стр_а.name="Органический продукт" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.ОрганическийПродукт) Тогда
												Стр_а.value=Строка(ДополнителныеРеквизитМолоко.ОрганическийПродукт);
												Стр_а.valueTitle=Строка(ДополнителныеРеквизитМолоко.ОрганическийПродукт);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли Стр_а.name="Содержит пальмовое масло" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.СодержитПальмовоеМасло) Тогда
												Стр_а.value=Строка(ДополнителныеРеквизитМолоко.СодержитПальмовоеМасло);
												Стр_а.valueTitle=Строка(ДополнителныеРеквизитМолоко.СодержитПальмовоеМасло);
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
										ИначеЕсли Стр_а.name="Витаминизация" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.Витаминизация) Тогда
												Стр_а.value=Строка(ДополнителныеРеквизитМолоко.Витаминизация);
												Стр_а.valueTitle=Строка(ДополнителныеРеквизитМолоко.Витаминизация);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли Стр_а.name="Аллергены" Тогда
											
											 Если ДополнителныеРеквизитМолоко.Аллергены.Количество()>0 Тогда
												
												Первая=ложь;
												Для Каждого Стр_ Из ДополнителныеРеквизитМолоко.Аллергены Цикл
													Если Не Первая Тогда
														Первая=Истина;
														Стр_а.value=Строка(Стр_.Аллерген);
														Стр_а.valueTitle=Строка(Стр_.Аллерген);
														Стр_а.valueType=Неопределено
													Иначе
														
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value=Строка(Стр_.Аллерген);
														Стр_Н.valueTitle=Строка(Стр_.Аллерген);
														Стр_Н.valueType=Неопределено;
														// Стр_1.attributes.Вставить();
														МассивАллергены.Добавить(Стр_Н);
														
														
													 КонецЕсли;
													Конеццикла;
												КонецЕсли;
											

											
										Конецесли;
									Конеццикла;
									
									Для Каждого Стр_Ст ИЗ МассивАллергены    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);
									Конеццикла;
									
								ИначеЕсли Стр_1.name="Пищевая и энергетическая ценности" Тогда
									
									МассивЭнергетиков=Новый Массив;
									МассивНормативово.Очистить();
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если Стр_а.name="Белки" Тогда
											Если ЗначениеЗАполнено(ДополнителныеРеквизитМолоко.БелкиЕдиницаИзмерения) тогда
												
												Стр_а.value=ДополнителныеРеквизитМолоко.Белки;
												Стр_а.valueType=Строка(ДополнителныеРеквизитМолоко.БелкиЕдиницаИзмерения)

											КонецЕсли;
											
										ИначеЕсли Стр_а.name="Жиры" Тогда
											Если ЗначениеЗАполнено(ДополнителныеРеквизитМолоко.ЖирыЕдиницаИзмерения) тогда
												
												Стр_а.value=ДополнителныеРеквизитМолоко.Жиры;
												Стр_а.valueType=Строка(ДополнителныеРеквизитМолоко.ЖирыЕдиницаИзмерения)

											КонецЕсли;
											
										ИначеЕсли Стр_а.name="Углеводы" Тогда
											Если ЗначениеЗАполнено(ДополнителныеРеквизитМолоко.УглеводыЕдиницаИзмерения) тогда
												
												Стр_а.value=ДополнителныеРеквизитМолоко.Углеводы;
												Стр_а.valueType=Строка(ДополнителныеРеквизитМолоко.УглеводыЕдиницаИзмерения)

											КонецЕсли;
											
										ИначеЕсли Стр_а.name="Энергетическая ценность" Тогда
											
											Если ДополнителныеРеквизитМолоко.ЭнергетическаяЦенность.Количество()>0 Тогда
												
												Первая=ложь;
												Для Каждого Стр_ Из ДополнителныеРеквизитМолоко.ЭнергетическаяЦенность Цикл
													Если Не Первая Тогда
														Первая=Истина;
														Стр_а.value=Строка(Стр_.ЭнергетическаяЦенность);
														Стр_а.valueType=Строка(Стр_.ЕдиницаИзмерения)
													Иначе
														
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value=Строка(Стр_.ЭнергетическаяЦенность);
														Стр_Н.valueType=Строка(Стр_.ЕдиницаИзмерения);
														// Стр_1.attributes.Вставить();
														МассивЭнергетиков.Добавить(Стр_Н);
														
														
													 КонецЕсли;
													Конеццикла;
												КонецЕсли;
											

											

											
										КонецЕсли;
									Конеццикла;
									
									Для Каждого Стр_Ст ИЗ МассивЭнергетиков    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);
									Конеццикла;

								ИначеЕсли Стр_1.name="Эксплуатация и условия хранения" Тогда
									МассивВтавить_Упаковки=Новый Массив;
									МассивВтавить_Упаковки.Очистить();
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Срок годности" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.ТипСрокаГодности) Тогда
												Стр_а.value=ДополнителныеРеквизитМолоко.СрокГодности;
												Стр_а.valueType=Строка(ДополнителныеРеквизитМолоко.ТипСрокаГодности)
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Особые условия хранения" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.ОсобыеУсловияХранения) Тогда
												Стр_а.value=ДополнителныеРеквизитМолоко.ОсобыеУсловияХранения;
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Рекомендации по употреблению" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.РекомендацияПоУпотреблению) Тогда
												Стр_а.value=ДополнителныеРеквизитМолоко.РекомендацияПоУпотреблению;
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Альтернативный срок годности" Тогда
											
											Если ДополнителныеРеквизитМолоко.ДополнительныеСрокиГодности.Количество()>0 Тогда
												
												Первая=ложь;
												Для Каждого Стр_ Из ДополнителныеРеквизитМолоко.ДополнительныеСрокиГодности Цикл
													Если Не Первая Тогда
														Первая=Истина;
														Стр_а.value=Стр_.СрокГодности;
														Стр_а.valueType=Строка(Стр_.ТипДополнительногоСрокаГодности)
													Иначе
														
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
															Стр_Н.value=Стр_.СрокГодности;
														Стр_Н.valueType=Строка(Стр_.ТипДополнительногоСрокаГодности) ;
														// Стр_1.attributes.Вставить();
														 МассивВтавить_Упаковки.Добавить(Стр_Н);
														
														
													 КонецЕсли;
													Конеццикла;
												КонецЕсли;
												
											ИначеЕсли  Стр_а.name="Дополнительный срок годности" Тогда
											
											Если ДополнителныеРеквизитМолоко.ДополнительныеСрокиГодности.Количество()>0 Тогда
												
												Первая=ложь;
												Для Каждого Стр_ Из ДополнителныеРеквизитМолоко.ДополнительныеСрокиГодности Цикл
													Если Не Первая Тогда
														Первая=Истина;
														Стр_а.value=Стр_.СрокГодности;
														Стр_а.valueType=Строка(Стр_.ТипДополнительногоСрокаГодности)
													Иначе
														
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
															Стр_Н.value=Стр_.СрокГодности;
														Стр_Н.valueType=Строка(Стр_.ТипДополнительногоСрокаГодности) ;
														// Стр_1.attributes.Вставить();
														 МассивВтавить_Упаковки.Добавить(Стр_Н);
														
														
													 КонецЕсли;
													Конеццикла;
												КонецЕсли;
											КонецЕсли;
										//Конецесли;
									Конеццикла;
									
									Для Каждого Стр_Ст ИЗ МассивВтавить_Упаковки    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;
									
									
									
									
								ИначеЕсли Стр_1.name="Нормативно-сопроводительная документация" Тогда
									МассивГОСТТУ=Новый Массив;
									МассивГОСТТУ.Очистить();
									МассивНормативово=Новый Массив;
									МассивНормативово.Очистить();;
									
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Номер Регламента/стандарта" Тогда
											Первая=Ложь;
											
											Если ДополнителныеРеквизитМолоко.НомерРегламента005=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 005/2011 ""О безопасности упаковки""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
												     Первая=Истина;
														
													    Стр_а.value="ТР ТС 005/2011 ""О безопасности упаковки""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											
											Если ДополнителныеРеквизитМолоко.НомерРегламента021=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 021/2011 ""О безопасности пищевой продукции""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													     Первая=Истина;
													    Стр_а.value="ТР ТС 021/2011 ""О безопасности пищевой продукции""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											
											
											Если ДополнителныеРеквизитМолоко.НомерРегламента027=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 027/2012 ""О безопасности отдельных видов специализированной пищевой продукции, в том числе диетического лечебного и диетического профилактического питания""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													      Первая=Истина;
													
													    Стр_а.value="ТР ТС 027/2012 ""О безопасности отдельных видов специализированной пищевой продукции, в том числе диетического лечебного и диетического профилактического питания""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											

											Если ДополнителныеРеквизитМолоко.НомерРегламента029=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 029/2012 ""Требования к безопасности пищевых добавок, ароматизаторов и технологических вспомогательных средств""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													       Первая=Истина;
													
													    Стр_а.value="ТР ТС 029/2012 ""Требования к безопасности пищевых добавок, ароматизаторов и технологических вспомогательных средств""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											

											Если ДополнителныеРеквизитМолоко.НомерРегламента033=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value=
														"ТР ТС 033/2013 ""О безопасности молока и молочной продукции""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													       Первая=Истина;
													
													    Стр_а.value=
														"ТР ТС 033/2013 ""О безопасности молока и молочной продукции""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											

											Если ДополнителныеРеквизитМолоко.НомерРегламента022=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value=
														"ТР ТС 022/2011 ""Пищевая продукция в части ее маркировки""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													       Первая=Истина;
													
													    Стр_а.value=
														"ТР ТС 022/2011 ""Пищевая продукция в части ее маркировки""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											
											Если ДополнителныеРеквизитМолоко.НомерРегламента024=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value=
														"ТР ТС 024/2011 ""Технический регламент на масложировую продукцию""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													       Первая=Истина;
													
													    Стр_а.value=
														"ТР ТС 024/2011 ""Технический регламент на масложировую продукцию""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											
											
											
										ИначеЕсли  Стр_а.name="ГОСТ / ТУ / СТО" Тогда
											
											Если ДополнителныеРеквизитМолоко.ГОСТЫИТУ.Количество()>0 Тогда
												
												Первая=ложь;
												Для Каждого Стр_ Из ДополнителныеРеквизитМолоко.ГОСТЫИТУ Цикл
													Если Не Первая Тогда
														Первая=Истина;
														Стр_а.value=Стр_.ГОСТТУ;
														Стр_а.valueType=Строка(Стр_.ТипГОСТТУ)
													Иначе
														
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value=Стр_.ГОСТТУ;
														Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивГОСТТУ.Добавить(Стр_Н);
														
														
													 КонецЕсли;
													Конеццикла;
												КонецЕсли;
											КонецЕсли;
										//Конецесли;
									Конеццикла;
									
									Для Каждого Стр_Ст ИЗ МассивНормативово    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;
									
									Для Каждого Стр_Ст ИЗ МассивГОСТТУ    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;
									
									
									
									
									
									
									
									
									
									
									
									
								ИначеЕсли Стр_1.name="Состав" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Состав" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.Состав) Тогда
												Стр_а.value=ДополнителныеРеквизитМолоко.Состав;
											КонецЕсли;
											
										Конецесли;
									Конеццикла;
								ИначеЕсли Стр_1.name="Данные для ФГИС ВетИС" Тогда
									
									
									МассивПлощадок=Новый Массив;
									МассивБелка=Новый массив;
									МассивЖиров=Новый Массив;
									
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Подлежит ветеринарному контролю (надзору)" Тогда
											//Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.ИдентификаторТовараВФГИСМеркурий) Тогда
											
											Если ДополнителныеРеквизитМолоко.ПодлежитВетеринарномуКонтролю ТОгда
												ЗапишемПодл="ДА"
											Иначе
												ЗапишемПодл="НЕТ"
												
											Конецесли;
											Стр_а.value=Строка(ЗапишемПодл);
											Стр_а.valueTitle=Строка(ЗапишемПодл);
											Стр_а.valueType=Неопределено ;
											
											
											
										ИначеЕсли Стр_а.name="Тип продукции" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.ТипПродукции) Тогда
												Стр_а.value=Строка(ДополнителныеРеквизитМолоко.ТипПродукции);
											КонецЕсли;
										ИначеЕсли Стр_а.name="Продукция" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.Продукция) Тогда
												Стр_а.value=Строка(ДополнителныеРеквизитМолоко.Продукция);
											КонецЕсли;
											
										ИначеЕсли Стр_а.name="Вид продукции" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.ВидПродукции) Тогда
												Стр_а.value=Строка(ДополнителныеРеквизитМолоко.ВидПродукции);
											КонецЕсли;
										ИначеЕсли Стр_а.name="Категория продукции" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.КатегорияПродукции) Тогда
												Стр_а.value=Строка(ДополнителныеРеквизитМолоко.КатегорияПродукции);
											КонецЕсли;
										ИначеЕсли Стр_а.name="ГОСТ" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.ТипГОСТ) Тогда
												Стр_а.valueType=Строка(ДополнителныеРеквизитМолоко.ТипГОСТ)
											Конецесли;
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.ГОСТ) Тогда
												Стр_а.value=ДополнителныеРеквизитМолоко.ГОСТ
											Конецесли;
										ИначеЕсли Стр_а.name="ХС-производитель" Тогда
											
											Если ЗначениеЗаполненО(ДополнителныеРеквизитМолоко.ХСПроизводитель) Тогда
												СтруктурК=ПолучитьИнфуПоХСИПл(ДополнителныеРеквизитМолоко.ХСПроизводитель);
												Стр_а.value=СтруктурК.ГУИД;
												Стр_а.valueTitle=СтруктурК.Наименование;
												
												
											Конецесли;
											
											
										ИначеЕсли Стр_а.name="Предприятие-производитель" Тогда
											ПерваяП=Ложь;
											Для Каждого Стр_222 Из ДополнителныеРеквизитМолоко.ПредприятияПроизводители Цикл
												Если Не ЗначениеЗАполнено(Стр_222.ПредприятиеПроизводитель) ТОгда
													Продолжить;
												Конецесли;
												СтруктурК=ПолучитьИнфуПоХСИПл(Стр_222.ПредприятиеПроизводитель);
												Если ПерваяП=Ложь Тогда
													Стр_а.value=СтруктурК.ГУИД;
													Стр_а.valueTitle=СтруктурК.Наименование;
													ПерваяП=Истина;
												 
												Иначе
													Стр_Н=Новый Структура;
													Для Каждого Стр_Стр Из Стр_а Цикл
														Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
													Конеццикла;
													Стр_Н.value=СтруктурК.ГУИД;
													Стр_Н.valueTitle=СтруктурК.Наименование;
													 МассивПлощадок.Добавить(Стр_Н);
													
													
												Конецесли;
											Конеццикла;
											
										ИначеЕсли Стр_а.name="Массовая доля белка, %" Тогда
											ПерваяП=Ложь;
											Для Каждого Стр_222 Из ДополнителныеРеквизитМолоко.МассоваяДоляБелка Цикл
												Если Не ЗначениеЗАполнено(Стр_222.Вид) 
													И Не ЗначениеЗАполнено(Стр_222.МассоваяДоляБелка)
													
													ТОгда
													Продолжить;
												Конецесли;

												
												Если ПерваяП=Ложь Тогда
													Стр_а.value=Формат(Стр_222.МассоваяДоляБелка,"ЧГ=");
													Стр_а.valueType=Строка(Стр_222.Вид);
													
													ПерваяП=Истина;
												Иначе
													Стр_Н=Новый Структура;
													Для Каждого Стр_Стр Из Стр_а Цикл
														Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
													Конеццикла;
													Стр_Н.value=Формат(Стр_222.МассоваяДоляБелка,"ЧГ=");
													Стр_Н.valueType=Строка(Стр_222.Вид);
													 МассивБелка.Добавить(Стр_Н);
													
													
												Конецесли;
											Конеццикла;
											
											
																				//	
										ИначеЕсли Стр_а.name="Массовая доля жира, %" Тогда
											
											ПерваяП=Ложь;
											Для Каждого Стр_222 Из ДополнителныеРеквизитМолоко.МассоваяДоляЖира Цикл
												Если Не ЗначениеЗАполнено(Стр_222.Вид) 
													И Не ЗначениеЗАполнено(Стр_222.МассоваяДоляЖира)
													
													ТОгда
													Продолжить;
												Конецесли;

												
												Если ПерваяП=Ложь Тогда
													Стр_а.value=Формат(Стр_222.МассоваяДоляЖира,"ЧГ=");
													Стр_а.valueType=Строка(Стр_222.Вид);
													
													ПерваяП=Истина;
												Иначе
													Стр_Н=Новый Структура;
													Для Каждого Стр_Стр Из Стр_а Цикл
														Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
													Конеццикла;
													Стр_Н.value=Формат(Стр_222.МассоваяДоляЖира,"ЧГ=");
													Стр_Н.valueType=Строка(Стр_222.Вид);
													 МассивЖиров.Добавить(Стр_Н);
													
													
												Конецесли;
											Конеццикла;
											
										Конецесли;
									Конеццикла;
										
									Для Каждого Стр_Ст ИЗ МассивПлощадок    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);
									Конеццикла;
									
									Для Каждого Стр_Ст ИЗ МассивБелка    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;
									
									Для Каждого Стр_Ст ИЗ МассивЖиров    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;
									
												
									
								ИначеЕсли Стр_1.name="ФГИС ВетИС" Тогда
									
									МассивИДГУИДВ=Новый Массив;
									//ДополнителныеРеквизитМолоко.ИдентификаторыТовараВФГИСМеркурий.Очистить();
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Идентификатор товара в ФГИС ВетИС (GUID ProductItem)" Тогда
											
											ПерваяП=Ложь;
											Для Каждого Стр_222 Из ДополнителныеРеквизитМолоко.ИдентификаторыТовараВФГИСМеркурий Цикл
												Если Не ЗначениеЗАполнено(Стр_222.ИдентификаторТовараВФГИСМеркурий) 
													ТОгда
													Продолжить;
												Конецесли;

												
												Если ПерваяП=Ложь Тогда
													Стр_а.value=Стр_222.ИдентификаторТовараВФГИСМеркурий;
													//Стр_а.valueType=Строка(Стр_222.Вид);
													
													ПерваяП=Истина;
												Иначе
													Стр_Н=Новый Структура;
													Для Каждого Стр_Стр Из Стр_а Цикл
														Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
													Конеццикла;
													Стр_Н.value=Стр_222.ИдентификаторТовараВФГИСМеркурий;
													МассивИДГУИДВ.Добавить(Стр_Н);
													
													
												Конецесли;
											Конеццикла;

											//Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.ИдентификаторТовараВФГИСМеркурий) Тогда
											//	Стр_а.value=ДополнителныеРеквизитМолоко.ИдентификаторТовараВФГИСМеркурий;
											//КонецЕсли;
											
										Конецесли;
									Конеццикла;
									
									Для Каждого Стр_Ст ИЗ МассивИДГУИДВ    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);
									Конеццикла;
									
										
								ИначеЕсли Стр_1.name="Дополнительная информация" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Заявление о жирности продукта" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.ЗаявленияОЖирностиМолока) Тогда
												Стр_а.value=Строка(ДополнителныеРеквизитМолоко.ЗаявленияОЖирностиМолока);
												Стр_а.valueTitle=Строка(ДополнителныеРеквизитМолоко.ЗаявленияОЖирностиМолока);
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Обогащающие компоненты" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.ОбогащающиеКомпоненты) Тогда
												Стр_а.value=Строка(ДополнителныеРеквизитМолоко.ОбогащающиеКомпоненты);
												Стр_а.valueTitle=Строка(ДополнителныеРеквизитМолоко.ОбогащающиеКомпоненты);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Социально значимый товар" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.СоциальноЗначимыйТовар) Тогда
												Стр_а.value=Строка(ДополнителныеРеквизитМолоко.СоциальноЗначимыйТовар);
												Стр_а.valueTitle=Строка(ДополнителныеРеквизитМолоко.СоциальноЗначимыйТовар);
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Заявление о пригодности для диетического питания" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.ЗаявлениеОПригодностиДляДиетическогоПитания) Тогда
												Стр_а.value=Строка(ДополнителныеРеквизитМолоко.ЗаявлениеОПригодностиДляДиетическогоПитания);
												Стр_а.valueTitle=Строка(ДополнителныеРеквизитМолоко.ЗаявлениеОПригодностиДляДиетическогоПитания);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Особенности питания" Тогда
											Если ЗначениеЗаполнено(ДополнителныеРеквизитМолоко.ОсобенностиПитания) Тогда
												Стр_а.value=Строка(ДополнителныеРеквизитМолоко.ОсобенностиПитания);
												Стр_а.valueTitle=Строка(ДополнителныеРеквизитМолоко.ОсобенностиПитания);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										Конецесли;
									Конеццикла;
									
									
								КонецЕсли;
								
								
								
							//	Если Стр_1.name="Состав" Тогда
							//		Стр_1.attributes[0].value="Мой состав";
							//	КонецЕсли;
								
							Конеццикла;
							
							
						ИначеЕсли Объект.Тип=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Обувь") Тогда
							   МассивТиповМатериалов=Новый Массив;
								МассивТиповМатериалов.Очистить();
								
								МассивАртикулов=Новый Массив;
								МассивАртикулов.Очистить();
							Для Каждого Стр_1 Из NNN.attrGroup Цикл
								
								Если Стр_1.name="Происхождение и бренды" Тогда        
										Перваяыла=ЛОжь;
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										
										Если  Стр_а.name="СТМ" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.СТМ) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитОбувь.СТМ);
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Модель / артикул производителя" Тогда
	//										Если ЗначениеЗаполнено(Объект.МодельПроизводителяАртикул) Тогда
	//											Если Не Перваяыла Тогда
	//													Стр_а.value=Объект.МодельПроизводителяАртикул;
	//													Стр_а.valueType=Строка("Артикул")   ;Перваяыла=истина
	//												Иначе
	//												
	//													Стр_Н=Новый Структура;
	//													Для Каждого Стр_Стр Из Стр_а Цикл
	//														Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
	//														
	//													Конеццикла;
	//														Стр_Н.value=Объект.МодельПроизводителяАртикул;
	//													Стр_Н.valueType=Строка("Артикул") ;
	//													// Стр_1.attributes.Вставить();
	//													 МассивАртикулов.Добавить(Стр_Н);
	//													
	//													
	//
	//													
	//											Конецесли;
	//										КонецЕсли;
											Если ЗначениеЗаполнено(Объект.МодельПроизводителяАртикул)
												И ДополнительныйРеквизитБелье.ДопМодельАртикулы.Количество()=0 Тогда
												Если Не Перваяыла Тогда
														Стр_а.value=Объект.МодельПроизводителяАртикул;
														Стр_а.valueType=Строка("Артикул")     ;Перваяыла=истина
													Иначе
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
															Стр_Н.value=Объект.МодельПроизводителяАртикул;
														Стр_Н.valueType=Строка("Артикул") ;
														// Стр_1.attributes.Вставить();
														 МассивАртикулов.Добавить(Стр_Н);
														
														
	
														
												Конецесли;
											КонецЕсли;
											Для Каждого Стр_22 Из ДополнительныйРеквизитОбувь.ДопМодельАртикулы Цикл
												
												Если Не Перваяыла Тогда
														Стр_а.value=Стр_22.МодельАртикул;
														Стр_а.valueType=Строка(Стр_22.ТипМодельАртикул) ;
														Перваяыла=истина;
													Иначе
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value=Стр_22.МодельАртикул;
														Стр_Н.valueType=Строка(Стр_22.ТипМодельАртикул);
														// Стр_1.attributes.Вставить();
														 МассивАртикулов.Добавить(Стр_Н);
														
														
	
														
												Конецесли;
												
											Конеццикла;
											
										Конецесли;
									Конеццикла;
									
									
									Для Каждого Стр_Ст ИЗ МассивАртикулов    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;
																
								ИначеЕсли Стр_1.name="Потребительские свойства" Тогда 
									МассивРазмерВИных=Новый Массив;
									МассивРазмерВИных.Очистить();
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Вид обуви" Тогда
											Если ЗначениеЗаполнено(Объект.ВидОбуви) Тогда
												Стр_а.value=Врег(Строка(Объект.ВидОбуви));
												Стр_а.valueTitle=Врег(Строка(Объект.ВидОбуви));
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Цвет" Тогда
											Если ЗначениеЗаполнено(Объект.Цвет) Тогда
												Стр_а.value=Врег(Строка(Объект.Цвет));
												Стр_а.valueTitle=Врег(Строка(Объект.Цвет));
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Целевой возраст" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.ЦелевойВозраст) Тогда
												Стр_а.value=Врег(Строка(ДополнительныйРеквизитОбувь.ЦелевойВозраст));
												Стр_а.valueTitle=Врег(Строка(ДополнительныйРеквизитОбувь.ЦелевойВозраст));
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Пол целевого потребителя" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.ПолЦелевогоПотребителя) Тогда
												Стр_а.value=Врег(Строка(ДополнительныйРеквизитОбувь.ПолЦелевогоПотребителя));
												Стр_а.valueTitle=Врег(Строка(ДополнительныйРеквизитОбувь.ПолЦелевогоПотребителя));
												Стр_а.valueType=Неопределено
												
											ИначеЕсли ЗначениеЗаполнено(Объект.Пол) Тогда
												Стр_а.value=Врег(Строка(Объект.Пол));
												Стр_а.valueTitle=Врег(Строка(Объект.Пол));
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Размер в штихмассовой системе" Тогда
											Если ЗначениеЗаполнено(Объект.Размер) Тогда
												Стр_а.value=Врег(Строка(Объект.Размер));
												Стр_а.valueTitle=Врег(Строка(Объект.Размер));
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Размер в метрической системе, мм" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.РазмерВМетрическойСистемемм) Тогда
												Стр_а.value=Врег(Строка(Объект.РазмерВМетрическойСистемемм));
												Стр_а.valueTitle=Врег(Строка(Объект.РазмерВМетрическойСистемемм));
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
											
										ИначеЕсли  Стр_а.name="Размер в иных системах измерения" Тогда
											
											Если ДополнительныйРеквизитОбувь.РазмерВИныхСистемахИзмерения.Количество()>0 Тогда
													
													Первая=ложь;
													Для Каждого Стр_ Из ДополнительныйРеквизитОбувь.РазмерВИныхСистемахИзмерения Цикл
														Если Не Первая Тогда
															Первая=Истина;
															Стр_а.value=Стр_.Размер;
															Стр_а.valueType=Строка(Стр_.Страна)
														Иначе
															
															Стр_Н=Новый Структура;
															Для Каждого Стр_Стр Из Стр_а Цикл
																Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
																
															Конеццикла;
																Стр_Н.value=Стр_.Размер;
															Стр_Н.valueType=Строка(Стр_.Страна) ;
															// Стр_1.attributes.Вставить();
															 МассивРазмерВИных.Добавить(Стр_Н);
															
										
														 КонецЕсли;
													Конеццикла;
											КонецЕсли;
																									
										ИначеЕсли  Стр_а.name="Длина стельки, см" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.ДлинаСтелькисм) тогда
												Стр_а.value=ДополнительныйРеквизитОбувь.ДлинаСтелькисм;
											Конецесли;
											
																									
										ИначеЕсли  Стр_а.name="Размер полноты обуви" Тогда
											
											Если ЗначениеЗАполнено(ДополнительныйРеквизитОбувь.РазмерПолнотыОбувиСистема) Тогда
													Стр_а.value=ДополнительныйРеквизитОбувь.РазмерПолнотыОбуви;
													Стр_а.valueType=Строка(ДополнительныйРеквизитОбувь.РазмерПолнотыОбувиСистема)
											Конецесли;
										ИначеЕсли  Стр_а.name="Наличие каблука" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.НаличиеКаблука) Тогда
												Стр_а.value=Врег(Строка(ДополнительныйРеквизитОбувь.НаличиеКаблука));
												Стр_а.valueTitle=Врег(Строка(ДополнительныйРеквизитОбувь.НаличиеКаблука));
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Высота каблука" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.ВысотаКаблука) Тогда
												Стр_а.value=Врег(Строка(ДополнительныйРеквизитОбувь.ВысотаКаблука));
												Стр_а.valueTitle=Врег(Строка(ДополнительныйРеквизитОбувь.ВысотаКаблука));
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Цвет фурнитуры" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.ЦветФурнитуры) Тогда
												Стр_а.value=Врег(Строка(ДополнительныйРеквизитОбувь.ЦветФурнитуры));
												Стр_а.valueTitle=Врег(Строка(ДополнительныйРеквизитОбувь.ЦветФурнитуры));
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Цвет фурнитуры" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.ЦветФурнитуры) Тогда
												Стр_а.value=Врег(Строка(ДополнительныйРеквизитОбувь.ЦветФурнитуры));
												Стр_а.valueTitle=Врег(Строка(ДополнительныйРеквизитОбувь.ЦветФурнитуры));
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Водонепроницаемая/Водостойкая" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.ВодонепроницаемаяВодостойкая) Тогда
												Стр_а.value=Врег(Строка(ДополнительныйРеквизитОбувь.ВодонепроницаемаяВодостойкая));
												Стр_а.valueTitle=Врег(Строка(ДополнительныйРеквизитОбувь.ВодонепроницаемаяВодостойкая));
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Имеет ли гладкую подошву" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.ИмеетЛиГладкуюПодошву) Тогда
												Стр_а.value=Врег(Строка(ДополнительныйРеквизитОбувь.ИмеетЛиГладкуюПодошву));
												Стр_а.valueTitle=Врег(Строка(ДополнительныйРеквизитОбувь.ИмеетЛиГладкуюПодошву));
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Тип частично закрытого верха" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.ТипЧастичноЗакрытогоВерха) Тогда
												Стр_а.value=Врег(Строка(ДополнительныйРеквизитОбувь.ТипЧастичноЗакрытогоВерха));
												Стр_а.valueTitle=Врег(Строка(ДополнительныйРеквизитОбувь.ТипЧастичноЗакрытогоВерха));
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Тип застежки" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.ТипЗастежки) Тогда
												Стр_а.value=Врег(Строка(ДополнительныйРеквизитОбувь.ТипЗастежки));
												Стр_а.valueTitle=Врег(Строка(ДополнительныйРеквизитОбувь.ТипЗастежки));
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Сезонность" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.Сезонность) Тогда
												Стр_а.value=Врег(Строка(ДополнительныйРеквизитОбувь.Сезонность));
												Стр_а.valueTitle=Врег(Строка(ДополнительныйРеквизитОбувь.Сезонность));
												Стр_а.valueType=Неопределено
											ИначеЕсли ЗначениеЗаполнено(Объект.Сезон) Тогда
												Стр_а.value=Врег(Строка(Объект.Сезон));
												Стр_а.valueTitle=Врег(Строка(Объект.Сезон));
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
										Конецесли;
									Конеццикла;
										Для Каждого Стр_Ст ИЗ МассивРазмерВИных    Цикл
											Стр_1.attributes.Добавить(Стр_Ст);

										Конеццикла;

								ИначеЕсли Стр_1.name="Состав" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Материал верха" Тогда
											Если ЗначениеЗаполнено(Объект.МатериалВерха) Тогда
												Стр_а.value=Врег(Строка(Объект.МатериалВерха));
												Стр_а.valueTitle=Врег(Строка(Объект.МатериалВерха));
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Материал верха, %" Тогда
											
											Если ДополнительныйРеквизитОбувь.МатериалВерха.Количество()>0 Тогда
													
													Первая=ложь;
													Для Каждого Стр_ Из ДополнительныйРеквизитОбувь.МатериалВерха Цикл
														Если Не Первая Тогда
															Первая=Истина;
															Стр_а.value=Стр_.МатериалВверха;
															Стр_а.valueType=Строка(Стр_.Процент)
														Иначе
															
															Стр_Н=Новый Структура;
															Для Каждого Стр_Стр Из Стр_а Цикл
																Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
																
															Конеццикла;
																Стр_Н.value=Стр_.МатериалВверха;
															Стр_Н.valueType=Строка(Стр_.Процент) ;
															// Стр_1.attributes.Вставить();
															 МассивТиповМатериалов.Добавить(Стр_Н);
															
										
														 КонецЕсли;
													Конеццикла;
												КонецЕсли;	
										ИначеЕсли  Стр_а.name="Материал подкладки" Тогда
											Если ЗначениеЗаполнено(Объект.МатериалПодкладки) Тогда
												Стр_а.value=Врег(Строка(Объект.МатериалПодкладки));
												Стр_а.valueTitle=Врег(Строка(Объект.МатериалПодкладки));
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Материал подкладки, %" Тогда
											Если ДополнительныйРеквизитОбувь.МатериалПодкладки.Количество()>0 Тогда
													
													Первая=ложь;
													Для Каждого Стр_ Из ДополнительныйРеквизитОбувь.МатериалПодкладки Цикл
														Если Не Первая Тогда
															Первая=Истина;
															Стр_а.value=Стр_.МатериалПодкладки;
															Стр_а.valueType=Строка(Стр_.Процент)
														Иначе
															
															Стр_Н=Новый Структура;
															Для Каждого Стр_Стр Из Стр_а Цикл
																Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
																
															Конеццикла;
																Стр_Н.value=Стр_.МатериалПодкладки;
															Стр_Н.valueType=Строка(Стр_.Процент) ;
															// Стр_1.attributes.Вставить();
															 МассивТиповМатериалов.Добавить(Стр_Н);
															
										
														 КонецЕсли;
													Конеццикла;
												КонецЕсли;	
										ИначеЕсли  Стр_а.name="Материал стельки" Тогда
											Если ЗначениеЗаполнено(Объект.Стелька) Тогда
												Стр_а.value=Врег(Строка(Объект.Стелька));
												Стр_а.valueTitle=Врег(Строка(Объект.Стелька));
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Материал стельки, %" Тогда
											Если ДополнительныйРеквизитОбувь.МатериалСтельки.Количество()>0 Тогда
													
													Первая=ложь;
													Для Каждого Стр_ Из ДополнительныйРеквизитОбувь.МатериалСтельки Цикл
														Если Не Первая Тогда
															Первая=Истина;
															Стр_а.value=Стр_.МатериалСтельки;
															Стр_а.valueType=Строка(Стр_.Процент)
														Иначе
															
															Стр_Н=Новый Структура;
															Для Каждого Стр_Стр Из Стр_а Цикл
																Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
																
															Конеццикла;
																Стр_Н.value=Стр_.МатериалСтельки;
															Стр_Н.valueType=Строка(Стр_.Процент) ;
															// Стр_1.attributes.Вставить();
															 МассивТиповМатериалов.Добавить(Стр_Н);
															
										
														 КонецЕсли;
													Конеццикла;
												КонецЕсли;	
											
										ИначеЕсли  Стр_а.name="Материал низа / подошвы" Тогда
											Если ЗначениеЗаполнено(Объект.МатериалНиза) Тогда
												Стр_а.value=Врег(Строка(Объект.МатериалНиза));
												Стр_а.valueTitle=Врег(Строка(Объект.МатериалНиза));
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Материал низа / подошвы, %" Тогда
											Если ДополнительныйРеквизитОбувь.МатериалНизаПодошвы.Количество()>0 Тогда
													
													Первая=ложь;
													Для Каждого Стр_ Из ДополнительныйРеквизитОбувь.МатериалНизаПодошвы Цикл
														Если Не Первая Тогда
															Первая=Истина;
															Стр_а.value=Стр_.МатериалНизаПодошвы;
															Стр_а.valueType=Строка(Стр_.Процент)
														Иначе
															
															Стр_Н=Новый Структура;
															Для Каждого Стр_Стр Из Стр_а Цикл
																Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
																
															Конеццикла;
																Стр_Н.value=Стр_.МатериалНизаПодошвы;
															Стр_Н.valueType=Строка(Стр_.Процент) ;
															// Стр_1.attributes.Вставить();
															 МассивТиповМатериалов.Добавить(Стр_Н);
															
										
														 КонецЕсли;
													Конеццикла;
												КонецЕсли;	

											
											
										КонецЕсли;
									Конеццикла;
									
																	Для Каждого Стр_Ст ИЗ МассивТиповМатериалов    Цикл
											Стр_1.attributes.Добавить(Стр_Ст);

										Конеццикла;

										
										
								ИначеЕсли Стр_1.name="Характеристики товара в состоянии использования" Тогда
									  Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Ширина изделия" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.ШиринаЕдиницаИзмерения) Тогда
												Стр_а.value=ДополнительныйРеквизитОбувь.Ширина;
												Стр_а.valueType=Строка(ДополнительныйРеквизитОбувь.ШиринаЕдиницаИзмерения)
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Высота изделия" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.ВысотаЕдиницаИзмерения) Тогда
												Стр_а.value=ДополнительныйРеквизитОбувь.Высота;
												Стр_а.valueType=Строка(ДополнительныйРеквизитОбувь.ВысотаЕдиницаИзмерения)
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Глубина изделия" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.ГлубинаЕдиницаИзмерения) Тогда
												Стр_а.value=ДополнительныйРеквизитОбувь.Глубина;
												Стр_а.valueType=Строка(ДополнительныйРеквизитОбувь.Глубина)
											КонецЕсли;
										Конецесли;
									Конеццикла
									
							ИначеЕсли Стр_1.name="Эксплуатация и условия хранения" Тогда
							     	Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если Стр_а.name="Мин. температура, С" Тогда
											Если Значениезаполнено(ДополнительныйРеквизитОбщиеНК.МинимальнаяТемпература
										) Тогда
											Стр_а.value=ДополнительныйРеквизитОбщиеНК.МинимальнаяТемпература
											КонецЕсли;
										ИначеЕсли Стр_а.name="Макс. температура, С" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбщиеНК.МаксимальнаяТемпература) тогда
												Стр_а.value=ДополнительныйРеквизитОбщиеНК.МаксимальнаяТемпература
											КонецЕсли;
										ИначеЕсли Стр_а.name="Мин. относительная влажность, %" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбщиеНК.МинимальнаяОтносительнаяВлажность) тогда
												Стр_а.value=ДополнительныйРеквизитОбщиеНК.МинимальнаяОтносительнаяВлажность
											КонецЕсли;
										ИначеЕсли Стр_а.name="Макс. относительная влажность, %" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбщиеНК.МаксимальнаяОтносительнаяВлажность) тогда
												Стр_а.value=ДополнительныйРеквизитОбщиеНК.МаксимальнаяОтносительнаяВлажность
												
											КонецЕсли;
										//ИначеЕсли  Стр_а.name="Заявленный объём / вес нетто" Тогда
											
										ИначеЕсли  Стр_а.name="Срок службы" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.ТипСрокаСлужбы) Тогда
												Стр_а.value=ДополнительныйРеквизитОбувь.СрокСлужбы;
												Стр_а.valueType=Строка(ДополнительныйРеквизитОбувь.ТипСрокаСлужбы)
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Гарантийный срок, от производителя" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.ТипГарантийногоСрока) Тогда
												Стр_а.value=ДополнительныйРеквизитОбувь.ГарантийныйСрокОтПроизводителя;
												Стр_а.valueType=Строка(ДополнительныйРеквизитОбувь.ТипГарантийногоСрока)
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Особые условия хранения" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.ОсобыеУсловияХранения) Тогда
												Стр_а.value=ДополнительныйРеквизитОбувь.ОсобыеУсловияХранения;
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Рекомендации по использованию" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.РекомендацияПоИспользованию) Тогда
												Стр_а.value=ДополнительныйРеквизитОбувь.РекомендацияПоИспользованию;
											КонецЕсли;											
										Конецесли;
									Конеццикла;
						ИначеЕсли Стр_1.name="Нормативно-сопроводительная документация" Тогда
									МассивНормативово=Новый Массив;
									МассивГОСТТУ=Новый Массив;
									МассивГОСТТУ.Очистить();
									МассивНормативово.Очистить();
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="BRICK GPC" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.BRICKGPC) тогда
												Стр_а.value=ДополнительныйРеквизитОбувь.BRICKGPC
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Номер Регламента/стандарта" Тогда
											Первая=Ложь;
											
											Если ДополнительныйРеквизитОбувь.НомерРегламента005=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 005/2011 ""О безопасности упаковки""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
												     Первая=Истина;
														
													    Стр_а.value="ТР ТС 005/2011 ""О безопасности упаковки""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											
											
											Если ДополнительныйРеквизитОбувь.НомерРегламента007=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 007/2011 ""О безопасности продукции, предназначенной для детей и подростков""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													     Первая=Истина;
													    Стр_а.value="ТР ТС 007/2011 ""О безопасности продукции, предназначенной для детей и подростков""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											
											
											Если ДополнительныйРеквизитОбувь.НомерРегламента017=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 017/2011 ""О безопасности продукции легкой промышленности""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													      Первая=Истина;
													
													    Стр_а.value="ТР ТС 017/2011 ""О безопасности продукции легкой промышленности""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											
											Если ДополнительныйРеквизитОбувь.НомерРегламента019=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ТР ТС 019/2011 ""О безопасности средств индивидуальной защиты""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													                     
												Иначе
													      Первая=Истина;
													
													    Стр_а.value="ТР ТС 019/2011 ""О безопасности средств индивидуальной защиты""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											
											
											Если ДополнительныйРеквизитОбувь.ФЗ123=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="ФЗ от 22.07.2008 N 123-ФЗ ""Технический регламент о требованиях пожарной безопасности""";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													                     
												Иначе
													      Первая=Истина;
													
														Стр_а.value="ФЗ от 22.07.2008 N 123-ФЗ ""Технический регламент о требованиях пожарной безопасности""";
													    //Стр_а.value="ТР ТС 019/2011 ""О безопасности средств индивидуальной защиты""";
														
												КонецЕсли;
												
												
											КонецЕсли;
											
											
											 Если ДополнительныйРеквизитОбувь.БезРегламента=Истина Тогда
												
												Если Первая Тогда
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value="Действие технических регламентов не распространяется";
														//Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивНормативово.Добавить(Стр_Н);
													
												Иначе
													      Первая=Истина;
													
													    Стр_а.value="Действие технических регламентов не распространяется";
														
												КонецЕсли;
												
											КонецЕсли;
										ИначеЕсли  Стр_а.name="ГОСТ / ТУ / СТО" Тогда
											
											Если ДополнительныйРеквизитОбувь.ГОСТЫИТУ.Количество()>0 Тогда
												
												Первая=ложь;
												Для Каждого Стр_ Из ДополнительныйРеквизитОбувь.ГОСТЫИТУ Цикл
													Если Не Первая Тогда
														Первая=Истина;
														Стр_а.value=Стр_.ГОСТТУ;
														Стр_а.valueType=Строка(Стр_.ТипГОСТТУ)
													Иначе
														
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value=Стр_.ГОСТТУ;
														Стр_Н.valueType=Строка(Стр_.ТипГОСТТУ) ;
														// Стр_1.attributes.Вставить();
														 МассивГОСТТУ.Добавить(Стр_Н);
														
														
													 КонецЕсли;
													Конеццикла;
												КонецЕсли;
												
											КонецЕсли;

											
											
										//Конецесли;
									Конеццикла;
									
																		
									Для Каждого Стр_Ст ИЗ МассивГОСТТУ    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;
									
									

									Для Каждого Стр_Ст ИЗ МассивНормативово    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;
									

								ИначеЕсли Стр_1.name="Сведения о свидетельствах о гос. регистрации" Тогда
									МассивНормативово=Новый Массив;
									МассивНормативово.Очистить();
																	

									
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										//Если  Стр_а.name="Материал верха" Тогда
										//	Если ЗначениеЗаполнено(Объект.МатериалВерха) Тогда
										//		Стр_а.value=Врег(Строка(Объект.МатериалВерха));
										//		Стр_а.valueTitle=Врег(Строка(Объект.МатериалВерха));
										//		Стр_а.valueType=Неопределено
										//	КонецЕсли;
										Если  Стр_а.name="Номер экспертного заключения (ЭЗ)" Тогда
Если ДополнительныйРеквизитОбувь.СведенияОСвидетельствахОГосРегистрации.Количество()>0 Тогда
													
													Первая=ложь;
													Для Каждого Стр_ Из ДополнительныйРеквизитОбувь.СведенияОСвидетельствахОГосРегистрации Цикл
														Если Не Первая Тогда
															Первая=Истина;
															Стр_а.value=Стр_.НомерЭкспертногоЗаключенияЭЗ;
														Иначе
															
															Стр_Н=Новый Структура;
															Для Каждого Стр_Стр Из Стр_а Цикл
																Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
																
															Конеццикла;
																Стр_Н.value=Стр_.НомерЭкспертногоЗаключенияЭЗ;
															 МассивНормативово.Добавить(Стр_Н);
															
										
														 КонецЕсли;
													 Конеццикла;
													 

													 
												КонецЕсли;	

											
																					КонецЕсли;
									Конеццикла;

									
								ИначеЕсли Стр_1.name="Происхождение и бренды" Тогда
									МассивАртикулов=Новый Массив;
									МассивАртикулов.Очистить();
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										//Если  Стр_а.name="Материал верха" Тогда
										//	Если ЗначениеЗаполнено(Объект.МатериалВерха) Тогда
										//		Стр_а.value=Врег(Строка(Объект.МатериалВерха));
										//		Стр_а.valueTitle=Врег(Строка(Объект.МатериалВерха));
										//		Стр_а.valueType=Неопределено
										//	КонецЕсли;
										Если  Стр_а.name="Модель / артикул производителя" Тогда
	//										Если ЗначениеЗаполнено(Объект.МодельПроизводителяАртикул) Тогда
	//											Если Не Перваяыла Тогда
	//													Стр_а.value=Объект.МодельПроизводителяАртикул;
	//													Стр_а.valueType=Строка("Артикул")
	//													;Перваяыла=истина
	//												Иначе
	//												
	//													Стр_Н=Новый Структура;
	//													Для Каждого Стр_Стр Из Стр_а Цикл
	//														Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
	//														
	//													Конеццикла;
	//														Стр_Н.value=Объект.МодельПроизводителяАртикул;
	//													Стр_Н.valueType=Строка("Артикул") ;
	//													// Стр_1.attributes.Вставить();
	//													 МассивАртикулов.Добавить(Стр_Н);
	//													
	//													
	//
	//													
	//											Конецесли;
	//										КонецЕсли;
											Если ЗначениеЗаполнено(Объект.МодельПроизводителяАртикул)
												И ДополнительныйРеквизитБелье.ДопМодельАртикулы.Количество()=0 Тогда
												Если Не Перваяыла Тогда
														Стр_а.value=Объект.МодельПроизводителяАртикул;
														Стр_а.valueType=Строка("Артикул")     ;Перваяыла=истина
													Иначе
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
															Стр_Н.value=Объект.МодельПроизводителяАртикул;
														Стр_Н.valueType=Строка("Артикул") ;
														// Стр_1.attributes.Вставить();
														 МассивАртикулов.Добавить(Стр_Н);
														
														
	
														
												Конецесли;
											КонецЕсли;
											Для Каждого Стр_22 Из ДополнительныйРеквизитБелье.ДопМодельАртикулы Цикл
												
												Если Не Перваяыла Тогда
														Стр_а.value=Стр_22.МодельАртикул;
														Стр_а.valueType=Строка(Стр_22.ТипМодельАртикул)
														;Перваяыла=истина
													Иначе
													
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value=Стр_22.МодельАртикул;
														Стр_Н.valueType=Строка(Стр_22.ТипМодельАртикул);
														// Стр_1.attributes.Вставить();
														 МассивАртикулов.Добавить(Стр_Н);
														
														
	
														
												Конецесли;
												
											Конеццикла;
											
										Конецесли;
									Конеццикла;
									
									
									Для Каждого Стр_Ст ИЗ МассивАртикулов    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;

									
					ИначеЕсли Стр_1.name="Дополнительная информация" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если  Стр_а.name="Описание товара" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.ОписаниеТовара) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитОбувь.ОписаниеТовара);
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Наименование товара на этикетке" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.НаименованиеТовараНаЭтикетке) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитОбувь.НаименованиеТовараНаЭтикетке);
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Социально значимый товар" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.СоциальноЗначимыйТовар) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитОбувь.СоциальноЗначимыйТовар);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитОбувь.СоциальноЗначимыйТовар);
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
										ИначеЕсли  Стр_а.name="Формат продажи" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.ФорматПродажи) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитОбувь.ФорматПродажи);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитОбувь.ФорматПродажи);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										ИначеЕсли  Стр_а.name="Способ ввода товара в оборот" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбувь.СпособВводаТовараВОборот) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитОбувь.СпособВводаТовараВОборот);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитОбувь.СпособВводаТовараВОборот);
												Стр_а.valueType=Неопределено
											КонецЕсли;
										Конецесли;
									Конеццикла;
									
									
									
								КонецЕсли;
								
																
								
							//	Если Стр_1.name="Состав" Тогда
							//		Стр_1.attributes[0].value="Мой состав";
							//	КонецЕсли;
								
							Конеццикла;
							
							
						Конецесли;
						
						
						
						МассивСтранДобавить=Новый Массив;
						УжеБылаСтрана=ложь;
						
						
						
						Для Каждого Стр_1 Из NNN.attrGroup Цикл
							
							Если Стр_1.name="Дополнительная информация" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если Стр_а.name="Код товара в учетной системе поставщика" Тогда
											Если ЗначениеЗаполнено(объект.КодВУчетнойСистеме) Тогда
												Стр_а.value=объект.КодВУчетнойСистеме
											КонецЕсли;
										ИначеЕсли Стр_а.name="Наименование товара в учетной системе поставщика" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбщиеНК.НаименованиеТовараВУчетнойСистемеПоставщика) Тогда
												Стр_а.value=ДополнительныйРеквизитОбщиеНК.НаименованиеТовараВУчетнойСистемеПоставщика
											КонецЕсли;
											
										ИначеЕсли Стр_а.name="Ставка НДС" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбщиеНК.СтавкаНДС) Тогда
												Стр_а.value=Строка(ДополнительныйРеквизитОбщиеНК.СтавкаНДС);
												Стр_а.valueTitle=Строка(ДополнительныйРеквизитОбщиеНК.СтавкаНДС);
												Стр_а.valueType=Неопределено
											КонецЕсли;
											
										Конецесли;
									Конеццикла;
							ИначеЕсли Стр_1.name="Наименование товара и идентификация" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если Стр_а.name="Полное наименование товара" Тогда
											Стр_а.value=объект.НаименованиеТовара
											
										//ИначеЕсли  Стр_а.name="Заявленный объём / вес нетто" Тогда
											
											
										Конецесли;
									Конеццикла;
																
							ИначеЕсли Стр_1.name="Происхождение и бренды" Тогда
									Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если Стр_а.name="Страна производства" Тогда
												Альфа=Объект.СтранаПроизводства.Альфа2;
												Если ЗначениеЗаполнено(Альфа) Тогда
													Стр_а.value=Альфа;
													Стр_а.valueTitle="("+Альфа+") "+Строка(Объект.СтранаПроизводства);
													
													Для Каждого Стр_ДопСтр Из ДополнительныйРеквизитОбщиеНК.ДополнительныеСтраныПроизводств Цикл
																				Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Альфа=Альфа2(Стр_ДопСтр.СтранаПроизводства);
													Стр_Н.value=Альфа;
													Стр_Н.valueTitle="("+Альфа+") "+Строка(Стр_ДопСтр.СтранаПроизводства);
														// Стр_1.attributes.Вставить();
														 МассивСтранДобавить.Добавить(Стр_Н);
													Конеццикла;
												КонецЕсли;
										ИначеЕсли Стр_а.name="Суббренд" Тогда
		                                           Если ЗначениеЗаполнено(ДополнительныйРеквизитОбщиеНК.Суббренд) тогда
														Стр_а.value=ДополнительныйРеквизитОбщиеНК.Суббренд;
													КонецЕсли;
	
																								
										КонецЕсли;
									КонецЦикла;
												
																			//		Конецесли;
								//Конеццикла;
							
							
									Для Каждого Стр_Ст ИЗ МассивСтранДобавить    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;
							
									
															
						ИначеЕсли Стр_1.name="Эксплуатация и условия хранения" Тогда
							     	Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если Стр_а.name="Мин. температура, С" Тогда
											Если Значениезаполнено(ДополнительныйРеквизитОбщиеНК.МинимальнаяТемпература
										) Тогда
											Стр_а.value=ДополнительныйРеквизитОбщиеНК.МинимальнаяТемпература
											КонецЕсли;
										ИначеЕсли Стр_а.name="Макс. температура, С" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбщиеНК.МаксимальнаяТемпература) тогда
												Стр_а.value=ДополнительныйРеквизитОбщиеНК.МаксимальнаяТемпература
											КонецЕсли;
										ИначеЕсли Стр_а.name="Мин. относительная влажность, %" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбщиеНК.МинимальнаяОтносительнаяВлажность) тогда
												Стр_а.value=ДополнительныйРеквизитОбщиеНК.МинимальнаяОтносительнаяВлажность
											КонецЕсли;
										ИначеЕсли Стр_а.name="Макс. относительная влажность, %" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбщиеНК.МаксимальнаяОтносительнаяВлажность) тогда
												Стр_а.value=ДополнительныйРеквизитОбщиеНК.МаксимальнаяОтносительнаяВлажность
												
											КонецЕсли;
										//ИначеЕсли  Стр_а.name="Заявленный объём / вес нетто" Тогда
											
											
										Конецесли;
									Конеццикла;
								
								ИначеЕсли Стр_1.name="Идентификация Участников Оборота Товаров" Тогда
									
									МассивДобавить=Новый Массив;
							     	Для Каждого Стр_а Из Стр_1.attributes Цикл
										Если Стр_а.name="Производитель" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбщиеНК.Производитель) тогда
												Стр_а.value=ДополнительныйРеквизитОбщиеНК.Производитель
											КонецЕсли;
										ИначеЕсли Стр_а.name="Импортер" Тогда
											Если ЗначениеЗаполнено(ДополнительныйРеквизитОбщиеНК.Импортер) тогда
												Стр_а.value=ДополнительныйРеквизитОбщиеНК.Импортер
											КонецЕсли;
										ИначеЕсли Стр_а.name="Изготовитель / Производственная площадка" Тогда
											
											  Если ДополнительныйРеквизитОбщиеНК.Изготовители.Количество()>0 Тогда
												
												Первая=ложь;
												Для Каждого Стр_ Из ДополнительныйРеквизитОбщиеНК.Изготовители Цикл
													Если Не Первая Тогда
														Первая=Истина;
														Стр_а.value=Стр_.Изготовитель;
														Стр_а.valueType=Альфа2(Стр_.СтранаПроизводства)
													Иначе
														
														Стр_Н=Новый Структура;
														Для Каждого Стр_Стр Из Стр_а Цикл
															Стр_Н.Вставить(Стр_Стр.Ключ,Стр_Стр.Значение);
															
														Конеццикла;
														Стр_Н.value=Стр_.Изготовитель;
														Стр_Н.valueType=Альфа2(Стр_.СтранаПроизводства);
														// Стр_1.attributes.Вставить();
														 МассивДобавить.Добавить(Стр_Н);
														
														
													 КонецЕсли;
													Конеццикла;
												КонецЕсли;

											
											//Стр_а.value=ДополнительныйРеквизитОбщиеНК.МинимальнаяОтносительнаяВлажность
											
										//ИначеЕсли  Стр_а.name="Заявленный объём / вес нетто" Тогда
											
											
										Конецесли;
									Конеццикла;
								
	                                   	Для Каждого Стр_Ст ИЗ МассивДобавить    Цикл
										Стр_1.attributes.Добавить(Стр_Ст);

									Конеццикла;
							
ИначеЕсли Стр_1.name="Маркетинговая информация" Тогда
					  	Для Каждого Стр_а Из Стр_1.attributes Цикл
							Если Стр_а.name="Маркетинговое описание" Тогда
								Если ЗначениеЗаполнено( ДополнительныйРеквизитОбщиеНК.МаркетинговоеОписание) Тогда
											Стр_а.value=ДополнительныйРеквизитОбщиеНК.МаркетинговоеОписание
										КонецЕсли;
									ИначеЕсли Стр_а.name="Уникальные характеристики товара" Тогда
										Если ЗначениеЗаполнено(ДополнительныйРеквизитОбщиеНК.УникальныеХарактеристикиТовара) тогда
											Стр_а.value=ДополнительныйРеквизитОбщиеНК.УникальныеХарактеристикиТовара
										КонецЕсли;
											
											
										Конецесли;
									Конеццикла;
									
								КонецЕсли;	
					Конеццикла;
								
								
								
							
														
						//КонецЕсли;
							
							
						//	Если Стр_1.name="Состав" Тогда
						//		Стр_1.attributes[0].value="Мой состав";
						//	КонецЕсли;
							
					///Конеццикла;
					
					
					Тело=ИзСтруктурыВДжсон(NNN);
						
								
						
						HTTPЗапрос=Новый HTTPЗапрос("rest/draft/"+Формат(id,"ЧГ="));
						
						HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
						HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
			
			HTTPЗапрос.Заголовки.Вставить("X-Csrf-Token",crsfToken);
						
						
		//	5HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
//		HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
		HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
		HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Credentials", "true");
		HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Headers", "Origin, X-Requested-With, Cont…cept, Credentials, Set-Cookie");
		HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Methods", "*");
		
		HTTPЗапрос.Заголовки.Вставить("Cache-Control", "private, max-age=0, no-cache, no-store");
		HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
//		HTTPЗапрос.Заголовки.Вставить("Sec-Fetch-Dest","empty");
//		HTTPЗапрос.Заголовки.Вставить("Sec-Fetch-Mode", "cors");
		HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		//	HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
		
		HTTPЗапрос.Заголовки.Вставить("Host", Thumbprint_1.КаталогСайт);
		//"xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai");
		HTTPЗапрос.Заголовки.Вставить("Origin", "https://"+Thumbprint_1.КаталогСайт);
		HTTPЗапрос.Заголовки.Вставить("Referer", "https://"+Thumbprint_1.КаталогСайт+"/product?type=unit");
		HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0");
		
		
		
			#Если ВебКлиент Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
			#Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
						//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("PUT",HTTPЗапрос);
					//	Возврат
			NNN=ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
			
			
			Попытка
				Объект.СтатусКарточки=ПредопределенноеЗначение("Перечисление.СтатусыКарточекВНК_ХамелеонЦРПТ."+NNN.status);
				;ОбновитьтипПродукции(NNN,Объект);
				
				
			исключение
			КонецПопытки;
			
			Объект.Записать();			
	
КонецПроцедуры

Процедура ОбновитьтипПродукции(NNN,Объект) Экспорт
				Если NNN.categories[0].categoryName="Молочная продукция" Тогда
					Объект.Тип=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Молоко");
				ИначеЕсли NNN.categories[0].categoryName="Воды питьевые и минеральные" Тогда
					Объект.Тип=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.ПитьеваяВода");
				ИначеЕсли NNN.categories[0].categoryName="Обувь" Тогда
					Объект.Тип=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Обувь");
				ИначеЕсли NNN.categories[0].categoryName="Шины и покрышки" Тогда
					Объект.Тип=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Шины");
				ИначеЕсли NNN.categories[0].categoryName="Фотокамеры и аксессуары" Тогда
					Объект.Тип=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Фото");
				ИначеЕсли NNN.categories[0].categoryName="Инвалидные коляски" Тогда
					Объект.Тип=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.КреслаКоляски");
				ИначеЕсли NNN.categories[0].categoryName="Велосипеды" Тогда
					Объект.Тип=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Велосипеды");
				ИначеЕсли NNN.categories[0].categoryName="Одежда" Тогда
					Объект.Тип=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Одежда");
				ИначеЕсли NNN.categories[0].categoryName="Белье постельное, столовое, туалетное и кухонное" Тогда
					Объект.Тип=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Белье");
				ИначеЕсли NNN.categories[0].categoryName="Табак" Тогда
					Объект.Тип=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Табак");
				ИначеЕсли NNN.categories[0].categoryName="Парфюмерия" Тогда
					Объект.Тип=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Парфюм");
					
				ИначеЕсли NNN.categories[0].categoryName="Сигары, сигариллы, сигареты, папиросы" Тогда
					Объект.Тип=ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак");
				
				КонецЕсли;
				
КонецПроцедуры

Функция НаходимБренд(Объект)
			
				Джсон=Новый ЗаписьJson;
				Джсон.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,ЭкранированиеСимволовJSON.СимволыВнеASCII));
				Джсон.ЗаписатьНачалоОбъекта();
				
				Джсон.ЗаписатьИмяСвойства("text");
				Джсон.ЗаписатьЗначение(Объект.БрендТорговаяМарка);
				
				Джсон.ЗаписатьКонецОбъекта();;
				Тело=Джсон.Закрыть();
				
				Возврат тело
Конецфункции

Функция ДляГенерацииГТИН(Объект)
				Джсон=Новый ЗаписьJson;
			Джсон.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,ЭкранированиеСимволовJSON.СимволыВнеASCII));
			Джсон.ЗаписатьНачалоОбъекта();
			
			Джсон.ЗаписатьИмяСвойства("packageLevel");
			Джсон.ЗаписатьЗначение("trade-unit");
			
			Джсон.ЗаписатьКонецОбъекта();;
			Тело=Джсон.Закрыть();
Возврат тело
КонецФункции

Функция СоздатьТоварВКТМ(ИДБренда,КодТНВЭД,GTIN,Объект)
			
			
			Джсон=Новый ЗаписьJson;
			//Джсон.УстановитьСтроку();
			Джсон.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,ЭкранированиеСимволовJSON.СимволыВнеASCII));
			
			Джсон.ЗаписатьНачалоОбъекта();
			Джсон.ЗаписатьИмяСвойства("gtin");
			Джсон.ЗаписатьЗначение(GTIN);
			
						Джсон.ЗаписатьИмяСвойства("tnvedId");
			Джсон.ЗаписатьЗначение(КодТНВЭД);
			Джсон.ЗаписатьИмяСвойства("fullName");
			Джсон.ЗаписатьЗначение(Объект.НаименованиеТовара);
			
			
			
			Джсон.ЗаписатьИмяСвойства("brand");
			Джсон.ЗаписатьЗначение(ИДБренда);
			
			Если ЗначениеЗаполнено(Объект.ТипУпаковки) Тогда
				
				
				Если Найти(ВРег(Объект.ТипУпаковки.Наименование),"BUNDLE")>0 Тогда
					
					Джсон.ЗаписатьИмяСвойства("isKit");
					Джсон.ЗаписатьЗначение(true);
					
					
				Иначе
					Джсон.ЗаписатьИмяСвойства("isKit");
					Джсон.ЗаписатьЗначение(false);
					
					
				Конецесли;
				
				Если Найти(ВРег(Объект.ТипУпаковки.Наименование),"SET")>0 Тогда
					
					Джсон.ЗаписатьИмяСвойства("isSet");
					Джсон.ЗаписатьЗначение(true);
					
					
				Иначе
					Джсон.ЗаписатьИмяСвойства("isSet");
					Джсон.ЗаписатьЗначение(false);
					
					
				Конецесли;
				
				
				
				
			КонецеслИ;
			
			
			Джсон.ЗаписатьКонецОбъекта();;
			Тело=Джсон.Закрыть();
		
	Возврат тело	
КонецФункции

Функция ИщемПоГТИН(Объект)
			Джсон=Новый ЗаписьJson;
		Джсон.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,ЭкранированиеСимволовJSON.СимволыВнеASCII));
		Джсон.ЗаписатьНачалоОбъекта();
		Джсон.ЗаписатьИмяСвойства("pageSize");
		Джсон.ЗаписатьЗначение(10);
		Джсон.ЗаписатьИмяСвойства("pageNumber");
		Джсон.ЗаписатьЗначение(1);
		Джсон.ЗаписатьИмяСвойства("sort");
		Джсон.ЗаписатьНачалоОбъекта();
		
		Джсон.ЗаписатьИмяСвойства("field");
		Джсон.ЗаписатьЗначение("created");
		Джсон.ЗаписатьИмяСвойства("direction");
		Джсон.ЗаписатьЗначение("DESC");
		
		Джсон.ЗаписатьКонецОбъекта();;
		
		Джсон.ЗаписатьИмяСвойства("fields");
		Джсон.ЗаписатьНачалоМассива();
		
		Джсон.ЗаписатьЗначение("photo");
		
		Джсон.ЗаписатьЗначение("created");
		Джсон.ЗаписатьЗначение("gtin");
		Джсон.ЗаписатьЗначение("name");
		Джсон.ЗаписатьЗначение("category");
		Джсон.ЗаписатьЗначение("packages");
		Джсон.ЗаписатьЗначение("brand");
		Джсон.ЗаписатьЗначение("status");
		
		Джсон.ЗаписатьКонецМассива();
		
		
		Джсон.ЗаписатьИмяСвойства("filter");
		Джсон.ЗаписатьНачалоОбъекта();
		
		Джсон.ЗаписатьИмяСвойства("gtin");
		//Джсон.ЗаписатьНачалоОбъекта();
		Джсон.ЗаписатьНачалоМассива();
		
		
		Джсон.ЗаписатьЗначение(Формат(Объект.GTIN,"ЧГ="));
		
		Джсон.ЗаписатьКонецМассива();
		
		//Джсон.ЗаписатьКонецОбъекта();;
		
		
		Джсон.ЗаписатьКонецОбъекта();;
		Джсон.ЗаписатьКонецОбъекта();;
		Тело=Джсон.Закрыть();
		
Возврат тело
Конецфункции
Функция ИзСтруктурыВДжсон(NNN)
						Джсон=Новый ЗаписьJSON;
						Джсон.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,ЭкранированиеСимволовJSON.СимволыВнеASCII));
						ЗаписатьJSON(Джсон,NNN);
						
						Тело=Джсон.Закрыть();
						Возврат тело
конецфункции


Процедура ОтправитьНаМодерацию(Пользователь,ОБъект_1,УжеОтправили=Ложь) Экспорт
	// Вставить содержимое обработчика.
	
	Объект=Объект_1.ПолучитьОбъект();
	Thumbprint_1=ПолучитьИзПользователя(Пользователь);
	Если Не ЗначениеЗаполнено(объект.GTIN) тогда
		ЗарегистрироватьВКаталогеТоваров(Пользователь,Объект_1,УжеОтправили=Ложь);
		Объект=Объект_1.Ссылка.ПолучитьОбъект();
		Если Не ЗначениеЗаполнено(объект.GTIN) тогда
			Возврат;
		КонецеслИ;
	КонецЕслИ;	
	
	
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
			Прокси=Новый ИнтернетПрокси;
			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
			
		//	HTTPСервисЗапрос=Новый HTTPСоединение("account.integrators.nk.crpt.tech",,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		//	HTTPСервисЗапрос=Новый HTTPСоединение("xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.КаталогСайт,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		Иначе
		///	HTTPСервисЗапрос=Новый HTTPСоединение("account.integrators.nk.crpt.tech",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			//HTTPСервисЗапрос=Новый HTTPСоединение("xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.КаталогСайт,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		
	
	
	
	crsfToken="";
	Срегистра="";
	Куки="";
	СерийныйНомер="";
	Если ПодключилисьОк(Thumbprint_1,crsfToken,Срегистра,Куки,HTTPСервисЗапрос,СерийныйНомер) Тогда
	
	
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
			Прокси=Новый ИнтернетПрокси;
			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
			
		//	HTTPСервисЗапрос=Новый HTTPСоединение("account.integrators.nk.crpt.tech",,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		//	HTTPСервисЗапрос=Новый HTTPСоединение("xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.КаталогСайт,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		Иначе
		///	HTTPСервисЗапрос=Новый HTTPСоединение("account.integrators.nk.crpt.tech",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			//HTTPСервисЗапрос=Новый HTTPСоединение("xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.КаталогСайт,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		
	
	
		Тело=ИщемПоГТИН(Объект);
		
		
		
		HTTPЗапрос=Новый HTTPЗапрос("rest/goods/list");
		HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
				HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
				
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
			
			HTTPЗапрос.Заголовки.Вставить("X-Csrf-Token",crsfToken);
		
				
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		
		NNN=ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
		
		Если Ответ.КодСостояния<>200 
			ИЛИ NNN=Неопределено
			Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
					Если УжеОтправили<>Истина Тогда
						ОтправитьНаМодерацию(Пользователь,ОБъект_1,Истина);
						Возврат;
					Иначе
						Сообщить("Не удалось обновить карточку из НК (КТМ)");
						Возврат;
					КонецЕсли;
					
				КонецЕсли;
				
		
		
		
		
		Если NNN.data.количество()=0 Тогда
			Сообщить("Продукцию с gtin "+Формат(Объект.GTIN,"ЧГ=")+" не нашли в каталоге маркированных товаров");
			Возврат
		ИначеЕсли NNN.data[0].goods<>Неопределено Тогда
			
			
			Попытка
				Объект.СтатусКарточки=ПредопределенноеЗначение("Перечисление.СтатусыКарточекВНК_ХамелеонЦРПТ."+NNN.data[0].goods.status)
				;ОбновитьтипПродукции(NNN,Объект);
			исключение
			КонецПопытки;
					
			
			Сообщить("Продукцию с gtin "+Формат(Объект.GTIN,"ЧГ=")+" уже нельзя менять. Для редактировании карточки необходимо обращаться в ЦРПТ");
			Объект.Записать();
			Возврат
			
		Иначе
			id=                    NNN.data[0].draft.id
			
		Конецесли;
		
			Попытка
				Объект.СтатусКарточки=ПредопределенноеЗначение("Перечисление.СтатусыКарточекВНК_ХамелеонЦРПТ."+NNN.data[0].draft.status)
				;ОбновитьтипПродукции(NNN,Объект);
			исключение
			КонецПопытки;
						
		
		
		///Возврат;
		
		
		
				//								
				HTTPЗапрос=Новый HTTPЗапрос("rest/draft/send/"+Формат(id,"ЧГ="));
						
						HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
						HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
						
							HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
			
			HTTPЗапрос.Заголовки.Вставить("X-Csrf-Token",crsfToken);
		

						
		//	5HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
		HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
		HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
		HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Credentials", "true");
		HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Headers", "Origin, X-Requested-With, Cont…cept, Credentials, Set-Cookie");
		HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Methods", "*");
		
		HTTPЗапрос.Заголовки.Вставить("Cache-Control", "private, max-age=0, no-cache, no-store");
		HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
//		HTTPЗапрос.Заголовки.Вставить("Sec-Fetch-Dest","empty");
//		HTTPЗапрос.Заголовки.Вставить("Sec-Fetch-Mode", "cors");
		HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		//	HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
		
		HTTPЗапрос.Заголовки.Вставить("Host", Thumbprint_1.КаталогСайт);
		//"xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai");
		HTTPЗапрос.Заголовки.Вставить("Origin", "https://"+Thumbprint_1.КаталогСайт);
		HTTPЗапрос.Заголовки.Вставить("Referer", "https://"+Thumbprint_1.КаталогСайт+"/product?type=unit");
		HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0");
		
		
		
			#Если ВебКлиент Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
			#Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
						//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
 						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("POST",HTTPЗапрос);
					//	Возврат
		//Если Ответ.КодСостояния			
		
		Если Ответ.КодСостояния<>200 ТОгда	
			NNN=ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
			Если NNN<>Неопределено тогда
				Ошибки="Не удалось отправить на модерацию карточку с GTIN "+Формат(Объект.GTIN,"ЧГ=")+". Ошибки: ";
				errors=Неопределено;
				Если NNN.Свойство("errors",errors) И ТипЗнч(errors)=Тип("Массив") Тогда
					
					Для Каждого Стр_укк Из errors Цикл
						Ошибки=Ошибки+Символы.ПС+ Стр_укк;
					Конеццикла;
					
				Конецесли;
				Сообщить(Ошибки);
			Иначе
				Сообщить("Не удалось отправить на модерацию карточку с GTIN "+Формат(Объект.GTIN,"ЧГ=")
				);
			Конецесли;
			
		Конецесли;
							
		Тело=ИщемПоГТИН(Объект);
		
		
		
		HTTPЗапрос=Новый HTTPЗапрос("rest/goods/list");
		HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
				HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
					HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
			
			HTTPЗапрос.Заголовки.Вставить("X-Csrf-Token",crsfToken);
		

		
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		
		
		NNN=ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
		
		Если NNN.data.количество()=0 Тогда
			Возврат
		ИначеЕсли NNN.data[0].goods<>Неопределено Тогда
			
			Попытка
				Объект.СтатусКарточки=ПредопределенноеЗначение("Перечисление.СтатусыКарточекВНК_ХамелеонЦРПТ."+NNN.data[0].goods.status)
				;ОбновитьтипПродукции(NNN,Объект);
			исключение
			КонецПопытки;
			Возврат
			
		Иначе
			id=                    NNN.data[0].draft.id
			
		Конецесли;
		
			Попытка
				Объект.СтатусКарточки=ПредопределенноеЗначение("Перечисление.СтатусыКарточекВНК_ХамелеонЦРПТ."+NNN.data[0].draft.status)
				;ОбновитьтипПродукции(NNN,Объект);
			исключение
			КонецПопытки;
						
		
			
	КонецЕсли;
	
	     Объект.Записать(); 
КонецПроцедуры


Процедура ПодписатьИОпубликовать(Пользователь,Объект_1,УжеОтправили=ложь) Экспорт
	// Вставить содержимое обработчика.
	
	Объект=Объект_1.ПолучитьОбъект();
	
	Thumbprint_1=ПолучитьИзПользователя(Пользователь);
	Если Не ЗначениеЗаполнено(объект.GTIN) тогда
		ОтправитьНаМодерацию(Пользователь,ОБъект_1,УжеОтправили);
		//Возврат;
		Объект=Объект_1.Ссылка.Получитьобъект();
		Если Не ЗначениеЗаполнено(объект.GTIN) тогда
			Возврат;
		Конецесли;
	ИначеЕсли Объект.СтатусКарточки<>Перечисления.СтатусыКарточекВНК_ХамелеонЦРПТ.moderation 
		И Объект.СтатусКарточки<>Перечисления.СтатусыКарточекВНК_ХамелеонЦРПТ.notsigned Тогда
		ОтправитьНаМодерацию(Пользователь,ОБъект_1,УжеОтправили);
	КонецЕслИ;	
	
	
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
			Прокси=Новый ИнтернетПрокси;
			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
			
		//	HTTPСервисЗапрос=Новый HTTPСоединение("account.integrators.nk.crpt.tech",,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		//	HTTPСервисЗапрос=Новый HTTPСоединение("xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.КаталогСайт,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		Иначе
		///	HTTPСервисЗапрос=Новый HTTPСоединение("account.integrators.nk.crpt.tech",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			//HTTPСервисЗапрос=Новый HTTPСоединение("xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.КаталогСайт,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		
	
	
	
	crsfToken="";
	Срегистра="";
	Куки="";
	СерийныйНомер="";
	Если ПодключилисьОк(Thumbprint_1,crsfToken,Срегистра,Куки,HTTPСервисЗапрос,СерийныйНомер) Тогда
		
			
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
			Прокси=Новый ИнтернетПрокси;
			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
			
		//	HTTPСервисЗапрос=Новый HTTPСоединение("account.integrators.nk.crpt.tech",,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		//	HTTPСервисЗапрос=Новый HTTPСоединение("xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.КаталогСайт,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		Иначе
		///	HTTPСервисЗапрос=Новый HTTPСоединение("account.integrators.nk.crpt.tech",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			//HTTPСервисЗапрос=Новый HTTPСоединение("xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.КаталогСайт,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		

				
		 
		Тело=ИщемПоГТИН(ОБъект);
		
		
		
		HTTPЗапрос=Новый HTTPЗапрос("rest/goods/list");
		HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
				HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
				
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
			
			HTTPЗапрос.Заголовки.Вставить("X-Csrf-Token",crsfToken);
		
				
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		NNN=ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
		
		Если Ответ.КодСостояния<>200 
			ИЛИ NNN=Неопределено
			Тогда
					ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
					Если УжеОтправили<>Истина Тогда
						ПодписатьИОпубликовать(Пользователь,Объект_1,Истина);
						Возврат;
					Иначе
						Сообщить("Не удалось обновить карточку из НК (КТМ)");
						Возврат;
					КонецЕсли;
					
				КонецЕсли;
				
		
		
		
		Если NNN.data.количество()=0 Тогда
			Сообщить("Продукцию с gtin "+Формат(Объект.GTIN,"ЧГ=")+" не нашли в каталоге маркированных товаров");
			Возврат
		ИначеЕсли NNN.data[0].goods<>Неопределено Тогда
			
			
			Попытка
				Объект.СтатусКарточки=ПредопределенноеЗначение("Перечисление.СтатусыКарточекВНК_ХамелеонЦРПТ."+NNN.data[0].goods.status)
				;ОбновитьтипПродукции(NNN,Объект);
			исключение
			КонецПопытки;
					
			
			Сообщить("Продукцию с gtin "+Формат(Объект.GTIN,"ЧГ=")+" уже нельзя менять. Для редактировании карточки необходимо обращаться в ЦРПТ");
			Объект.Записать();
			Возврат
			
		Иначе
			id=                    NNN.data[0].draft.goodId
			
		Конецесли;
		
			Попытка
				Объект.СтатусКарточки=ПредопределенноеЗначение("Перечисление.СтатусыКарточекВНК_ХамелеонЦРПТ."+NNN.data[0].draft.status)
				;ОбновитьтипПродукции(NNN,Объект);
				Объект.Записать();
			исключение
			КонецПопытки;
						
			Если Объект.СтатусКарточки<>ПредопределенноеЗначение("Перечисление.СтатусыКарточекВНК_ХамелеонЦРПТ.notsigned") Тогда
				
				Сообщить("Карточка "+объект.Наименование+" находится в статусе отличной от <Ожидает подписания>. Статус карточки "+Строка(Объект.СтатусКарточки) );
				Возврат;
			КонецЕсли;
		
		///Возврат;
		
		          Тело="{""goodIds"":["+формат(id,"ЧГ=")+"],""isPublishAgreed"":true}";
		
				//								
				HTTPЗапрос=Новый HTTPЗапрос("rest/goods/base64-formats");
						
						HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
						HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
						
							HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
			
			HTTPЗапрос.Заголовки.Вставить("X-Csrf-Token",crsfToken);
		

						
		//	5HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
	//	HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
		HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
		HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Credentials", "true");
		HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Headers", "Origin, X-Requested-With, Cont…cept, Credentials, Set-Cookie");
		HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Methods", "*");
		
		HTTPЗапрос.Заголовки.Вставить("Cache-Control", "private, max-age=0, no-cache, no-store");
		HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
//		HTTPЗапрос.Заголовки.Вставить("Sec-Fetch-Dest","empty");
//		HTTPЗапрос.Заголовки.Вставить("Sec-Fetch-Mode", "cors");
		HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		//	HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
		
		HTTPЗапрос.Заголовки.Вставить("Host", Thumbprint_1.КаталогСайт);
		//"xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai");
		HTTPЗапрос.Заголовки.Вставить("Origin", "https://"+Thumbprint_1.КаталогСайт);
		HTTPЗапрос.Заголовки.Вставить("Referer", "https://"+Thumbprint_1.КаталогСайт+"/product?type=unit");
		HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0");
		
		
		
			#Если ВебКлиент Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
			#Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
						//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("POST",HTTPЗапрос);
						
						
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
				xmlДляПодписи=NNN.data[0].base64XmlForSign;					
				Имя_вр_1="";
				ПодписатьФайл(Ложь,xmlДляПодписи,Thumbprint_1.Thumbprint_1
				,Имя_вр_1,,Истина,,,Истина);
				//(xmlДляПодписи,Thumbprint_1.Thumbprint_1,Имя_вр_1);						
				Имя_вр_1=СтрЗаменить(Имя_вр_1,символы.ПС,"");				
				Имя_вр_1=СтрЗаменить(Имя_вр_1,символы.ВК,"");				
				
				
				
				Тело=ПодписанныйJSON(xmlДляПодписи,Имя_вр_1);
				
				//Тело="{""goodIds"":["+формат(id,"ЧГ=")+"],""isPublishAgreed"":true}";
				
				
				HTTPЗапрос=Новый HTTPЗапрос("rest/goods/publish/"+формат(id,"ЧГ="));
						
						HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
						HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
						
							HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
			
			HTTPЗапрос.Заголовки.Вставить("X-Csrf-Token",crsfToken);
		

		//	5HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
	//	HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
		HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
		HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Credentials", "true");
		HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Headers", "Origin, X-Requested-With, Cont…cept, Credentials, Set-Cookie");
		HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Methods", "*");
		
		HTTPЗапрос.Заголовки.Вставить("Cache-Control", "private, max-age=0, no-cache, no-store");
		HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
//		HTTPЗапрос.Заголовки.Вставить("Sec-Fetch-Dest","empty");
//		HTTPЗапрос.Заголовки.Вставить("Sec-Fetch-Mode", "cors");
		HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		//	HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
		
		HTTPЗапрос.Заголовки.Вставить("Host", Thumbprint_1.КаталогСайт);
		//"xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai");
		HTTPЗапрос.Заголовки.Вставить("Origin", "https://"+Thumbprint_1.КаталогСайт);
		HTTPЗапрос.Заголовки.Вставить("Referer", "https://"+Thumbprint_1.КаталогСайт+"/product?type=unit");
		HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0");
		
		
		
			#Если ВебКлиент Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
			#Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
						//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("POST",HTTPЗапрос);
						
						
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
				
					
					
		Если Ответ.КодСостояния<>200 ТОгда	
			NNN=ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
			Если NNN<>Неопределено тогда
				Ошибки="Не удалось подписать и опубликовать карточку с GTIN "+Формат(Объект.GTIN,"ЧГ=")+". Ошибки: ";
				errors=Неопределено;
				Если NNN.Свойство("errors",errors) И ТипЗнч(errors)=Тип("Массив") Тогда
					
					Для Каждого Стр_укк Из errors Цикл
						Ошибки=Ошибки+Символы.ПС+ Стр_укк;
					Конеццикла;
					
				Конецесли;
				Сообщить(Ошибки);
			Иначе
				Сообщить("Не удалось подписать и опубликовать карточку с GTIN "+Формат(Объект.GTIN,"ЧГ=")
				);
			Конецесли;
			
		Конецесли;
					
					

					
					
					
Тело=ИщемПоГТИН(Объект);
		
		
		
		HTTPЗапрос=Новый HTTPЗапрос("rest/goods/list");
		HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
				HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
				
					HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
			
			HTTPЗапрос.Заголовки.Вставить("X-Csrf-Token",crsfToken);
		

		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		
		
		NNN=ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
		
		Если NNN.data.количество()=0 Тогда
			Возврат
		ИначеЕсли NNN.data[0].goods<>Неопределено Тогда
			
			Попытка
				Объект.СтатусКарточки=ПредопределенноеЗначение("Перечисление.СтатусыКарточекВНК_ХамелеонЦРПТ."+NNN.data[0].goods.status)
				;ОбновитьтипПродукции(NNN,ОБъект);
			исключение
			КонецПопытки;
		//	Возврат
			
		Иначе
			id=                    NNN.data[0].draft.id
			
		Конецесли;
		
			Попытка
				Объект.СтатусКарточки=ПредопределенноеЗначение("Перечисление.СтатусыКарточекВНК_ХамелеонЦРПТ."+NNN.data[0].draft.status)
				;ОбновитьтипПродукции(NNN,Объект);
			исключение
			КонецПопытки;
						
		
Объект.Записать();
				
				
						
						
						
						Возврат;
						
						
						
		Тело=ИщемПоГТИН(Объект);
		
		
		
		HTTPЗапрос=Новый HTTPЗапрос("rest/goods/list");
		HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
				HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
				
					HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
			
			HTTPЗапрос.Заголовки.Вставить("X-Csrf-Token",crsfToken);
		

		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		
		
		NNN=ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
		
		Если NNN.data.количество()=0 Тогда
			Возврат
		ИначеЕсли NNN.data[0].goods<>Неопределено Тогда
			
			Попытка
				Объект.СтатусКарточки=ПредопределенноеЗначение("Перечисление.СтатусыКарточекВНК_ХамелеонЦРПТ."+NNN.data[0].goods.status)
				;ОбновитьтипПродукции(NNN,Объект);
			исключение
			КонецПопытки;
			Возврат
			
		Иначе
			id=                    NNN.data[0].draft.id
			
		Конецесли;
		
			Попытка
				Объект.СтатусКарточки=ПредопределенноеЗначение("Перечисление.СтатусыКарточекВНК_ХамелеонЦРПТ."+NNN.data[0].draft.status)
				;ОбновитьтипПродукции(NNN,Объект);
			исключение
			КонецПопытки;
						
		
			
	КонецЕсли;
	
	     Объект.Записать(); 

КонецПроцедуры
	 

Функция ПодписанныйJSON(xmlДляПодписи,Имя_вр_1)
	
	Джсон=Новый ЗаписьJSON;
	Джсон.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,ЭкранированиеСимволовJSON.СимволыВнеASCII));
	Джсон.ЗаписатьНачалоОбъекта();;
	Джсон.ЗаписатьИмяСвойства("base64Xml");
	Джсон.ЗаписатьЗначение(xmlДляПодписи);
	Джсон.ЗаписатьИмяСвойства("signature");
	Джсон.ЗаписатьЗначение(Имя_вр_1);
	//Джсон.ЗаписатьИмяСвойства("isSigned");
	//Джсон.ЗаписатьЗначение(Истина);
	
	//Джсон.ЗаписатьИмяСвойства("isPublishAgreed");
	//Джсон.ЗаписатьЗначение(Истина);
	Джсон.ЗаписатьКонецОбъекта();
	
	Тело=Джсон.Закрыть();
	Возврат тело;

	
	Джсон=Новый ЗаписьJSON;
	Джсон.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,ЭкранированиеСимволовJSON.СимволыВнеASCII));
	Джсон.ЗаписатьНачалоОбъекта();;
	Джсон.ЗаписатьИмяСвойства("xml");
	Джсон.ЗаписатьЗначение(Имя_вр_1);
	Джсон.ЗаписатьИмяСвойства("isSigned");
	Джсон.ЗаписатьЗначение(Истина);
	
	Джсон.ЗаписатьИмяСвойства("isPublishAgreed");
	Джсон.ЗаписатьЗначение(Истина);
	Джсон.ЗаписатьКонецОбъекта();
	
	Тело=Джсон.Закрыть();
	Возврат тело
	
	
Конецфункции

Процедура СоздатьВводВОборотПоФайлуСтандарт(ДвоичнДанные,МассивАгрегация) Экспорт
	
	Текст=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(ДвоичнДанные,"UTF-8");
	ЧтениеXML = Новый ЧтениеXML;
	Текст=СтрЗаменить(Текст,Символ(29),"ПРОЦЕНТ1Д");
	Текст=СтрЗаменить(Текст,"&#x1D;","ПРОЦЕНТ1Д");
	
	
	ЧтениеXML.УстановитьСтроку(Текст);
	Сведения = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	
	МассивКМ=Новый ТаблицаЗначений;
	МассивКМ.Колонки.Добавить("СертификатДата");
	МассивКМ.Колонки.Добавить("СертификатНомер");
	МассивКМ.Колонки.Добавить("СертификатТип");
	МассивКМ.Колонки.Добавить("Сертификат");
	МассивКМ.Колонки.Добавить("kit");
	МассивКМ.Колонки.Добавить("ДатаПроизводства");
	МассивКМ.Колонки.Добавить("КодТНВЭД");
	МассивКМ.Колонки.Добавить("cost");
	МассивКМ.Колонки.Добавить("НомерПервичногоДокумента");
	МассивКМ.Колонки.Добавить("ДатаПервичногоДокумента");
	МассивКМ.Колонки.Добавить("НазваниеПервичногоДокумента");
	
	МассивКМ.Колонки.Добавить("НомерВСД");
	
	МассивКМ.Колонки.Добавить("ВидПервичногоДокумента");
	
//	МассивКМ.Колонки.Добавить("НазваниеПервичногоДокумента");
	//МассивКМ.Колонки.Добавить("ТипДокумента");
	
		withdrawal_type="";
		Если Сведения.Свойства().Получить("withdrawal_type")<>Неопределено Тогда
			withdrawal_type=Сведения.withdrawal_type;
		КонецЕсли;
		Если withdrawal_type="DAMAGE_LOSS" Тогда
			
			Если ТипЗнч(Сведения.products_list.product)=Тип("ОбъектXDTO") Тогда
				Стр=Сведения.products_list.product;
					Добав=МассивКМ.Добавить();
					
					Если Стр.Свойства().Получить("kit")<>Неопределено Тогда
						
						Если Найти(Стр.kit,"ПРОЦЕНТ1Д")>0 Тогда
							Добав.kit=Сред(Стр.kit,1,Найти(Стр.kit,"ПРОЦЕНТ1Д")-1);
						Иначе
							Добав.kit=Сред(Стр.kit,1,31);
						КонецЕсли;
						
						//Добав.kit=Сред(Стр.kit,1,31);	
					ИначеЕсли Стр.Свойства().Получить("kitu")<>Неопределено Тогда
						Добав.kit=Стр.kitu;	
					ИначеЕсли Стр.Свойства().Получить("ki")<>Неопределено Тогда
						Если Найти(Стр.ki,"ПРОЦЕНТ1Д")>0 Тогда
							Добав.kit=Сред(Стр.ki,1,Найти(Стр.ki,"ПРОЦЕНТ1Д")-1);
						Иначе
							Добав.kit=Сред(Стр.ki,1,31);
						КонецЕсли;
					КонецЕсли;
					
					
					
			Иначе
				Для Каждого Стр Из Сведения.products_list.product Цикл
					Добав=МассивКМ.Добавить();
				Если Стр.Свойства().Получить("kit")<>Неопределено Тогда
					Если Найти(Стр.kit,"ПРОЦЕНТ1Д")>0 Тогда
							Добав.kit=Сред(Стр.kit,1,Найти(Стр.kit,"ПРОЦЕНТ1Д")-1);
						Иначе
							Добав.kit=Сред(Стр.kit,1,31);
						КонецЕсли;
				ИначеЕсли Стр.Свойства().Получить("kitu")<>Неопределено Тогда
						Добав.kit=Стр.kitu;	
					ИначеЕсли Стр.Свойства().Получить("ki")<>Неопределено Тогда
						Если Найти(Стр.ki,"ПРОЦЕНТ1Д")>0 Тогда
							Добав.kit=Сред(Стр.ki,1,Найти(Стр.ki,"ПРОЦЕНТ1Д")-1);
						Иначе
							Добав.kit=Сред(Стр.ki,1,31);
						КонецЕсли;
					КонецЕсли;
					
					
				Конеццикла;
				
			КонецЕсли;

			
			ТипВвода=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота;
			
			ИНН=Сведения.trade_participant_inn;
			Организация=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",ИНН);
			Если Не ЗначениеЗаполнено(Организация) тогда
				Сообщить("Не удалось загрузить агрегации из файла, так как нет организации с данным ИНН "+ИНН);
				Возврат;
			КонецЕсли;
			ТекущийПользователь=Справочники.Пользователи_ХамелеонЦРПТ.НайтиПоРеквизиту("Организация",Организация);
			Если Не ЗначениеЗаполнено(ТекущийПользователь) тогда
				Сообщить("Нет пользователя для подключения к организации по ИНН "+ИНН);
				Возврат;
			КонецЕсли;
				
			СоздатьВводВоборот=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
			СоздатьВводВоборот.Дата=ТекущаяДата();
			ДатаД=Сведения.withdrawal_date;
			СоздатьВводВоборот.ДатаПроизводства=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
			СоздатьВводВоборот.Организация=Организация;
			СоздатьВводВоборот.ТекущийПользователь=ТекущийПользователь;
			СоздатьВводВоборот.ТипДокумента=типВвода;;
			СоздатьВводВоборот.ПричинаВыводаИзОборота=Перечисления.ПричинаВыводаИзОборота_ХамлеонЦРПТ.DAMAGE_LOSS;
			Если Значениезаполнено(Сведения.primary_document_type) Тогда
				СоздатьВводВоборот.ВидПервичногоДокумента=Перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ[Сведения.primary_document_type]
			Конецесли;
			СоздатьВводВоборот.НомерПервичногоДокумента=Сведения.primary_document_number;
			ДатаД=Сведения.primary_document_date;
			СоздатьВводВоборот.ДатаПервичногоДокумента=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
			
			
		ИначеЕсли withdrawal_type="RETAIL" Тогда

				 production_order=Сведения;
					Если ТипЗнч(Сведения.products_list.product)=Тип("ОбъектXDTO") Тогда
						Стр=Сведения.products_list.product;
							Добав=МассивКМ.Добавить();
							
							
							Если Стр.Свойства().Получить("primary_document_type")<>Неопределено Тогда
								Добав.ВидПервичногоДокумента=перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ[Стр.primary_document_type];
							Конецесли;
							
							Если Стр.Свойства().Получить("primary_document_custom_name")<>Неопределено Тогда
								
								Добав.НазваниеПервичногоДокумента=Стр.primary_document_custom_name
								
							Конецесли;
							Если Стр.Свойства().Получить("primary_document_date")<>Неопределено Тогда
								
								ДатаД=Стр.primary_document_date;
								Добав.ДатаПервичногоДокумента=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
										
							Конецесли;
							Если Стр.Свойства().Получить("primary_document_number")<>Неопределено Тогда
								
								Добав.НомерПервичногоДокумента=Стр.primary_document_number
								
							Конецесли;
	Если Стр.Свойства().Получить("cost")<>Неопределено Тогда
								
								Добав.cost=Стр.cost
								
							Конецесли;

							Если Стр.Свойства().Получить("ki")<>Неопределено Тогда
									Добав.kit=Сред(Стр.ki,1,31);	
								
							Иначе
								Добав.kit=Стр.kitu;	
							КонецЕсли;
							//ДатаД=Стр.product_date;
							//Добав.ДатаПроизводства=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
							//КодТНВЭД=справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(Стр.tnved_code);
							//Если Не ЗначениеЗАполнено(КодТНВЭД) тогда
							//	КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
							//	КодТНВЭД.Код=Стр.tnved_code;
							//	КодТНВЭД.Наименование=КодТНВЭД.Код;
							//	КодТНВЭД.Записать();
							//	КодТНВЭД=КодТНВЭД.Ссылка
							//КонецЕсли;
							//Добав.КодТНВЭД=КодТНВЭД.Ссылка;
							
					Иначе
						Для Каждого Стр Из Сведения.products_list.product Цикл
							Добав=МассивКМ.Добавить();
							
							
								
							Если Стр.Свойства().Получить("primary_document_type")<>Неопределено Тогда
								Добав.ВидПервичногоДокумента=перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ[Стр.primary_document_type];
							Конецесли;
						
							Если Стр.Свойства().Получить("primary_document_custom_name")<>Неопределено Тогда
								
								Добав.НазваниеПервичногоДокумента=Стр.primary_document_custom_name
								
							Конецесли;               	
							Если Стр.Свойства().Получить("primary_document_date")<>Неопределено Тогда
								
								ДатаД=Стр.primary_document_date;
								Добав.ДатаПервичногоДокумента=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
										
							Конецесли;
							Если Стр.Свойства().Получить("primary_document_number")<>Неопределено Тогда
								
								Добав.НомерПервичногоДокумента=Стр.primary_document_number
								
							Конецесли;
	Если Стр.Свойства().Получить("cost")<>Неопределено Тогда
								
								Добав.cost=Стр.cost
								
							Конецесли;

					
							Если Стр.Свойства().Получить("ki")<>Неопределено Тогда
									Добав.kit=Сред(Стр.ki,1,31);	
								
							Иначе
								Добав.kit=Стр.kitu;	
							КонецЕсли;
														
						Конеццикла;
						
					КонецЕсли;
				//МассивКМ.Сортировать("ДатаПроизводства");
				
				ТипВвода=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВыводИзОборота;
				
				ИНН=Сведения.trade_participant_inn;
				Организация=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",ИНН);
				Если Не ЗначениеЗаполнено(Организация) тогда
					Сообщить("Не удалось загрузить агрегации из файла, так как нет организации с данным ИНН "+ИНН);
					Возврат;
				КонецЕсли;
				ТекущийПользователь=Справочники.Пользователи_ХамелеонЦРПТ.НайтиПоРеквизиту("Организация",Организация);
				Если Не ЗначениеЗаполнено(ТекущийПользователь) тогда
					Сообщить("Нет пользователя для подключения к организации по ИНН "+ИНН);
					Возврат;
				КонецЕсли;
					
				СоздатьВводВоборот=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
				СоздатьВводВоборот.Дата=ТекущаяДата();
				ДатаД=Сведения.withdrawal_date;
				//СоздатьВводВоборот.Дата=ДатаД;  
				СоздатьВводВоборот.Дата=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
				СоздатьВводВоборот.Организация=Организация;
				СоздатьВводВоборот.ТекущийПользователь=ТекущийПользователь;
				СоздатьВводВоборот.ТипДокумента=типВвода;;
				СоздатьВводВоборот.ПричинаВыводаИзОборота=Перечисления.ПричинаВыводаИзОборота_ХамлеонЦРПТ.RETAIL;
				
				
			    	Если  Сведения.Свойства().Получить("primary_document_custom_name")<>Неопределено Тогда
								
								СоздатьВводВоборот.НаименованиеПервичногоДокумента=Стр.primary_document_custom_name
								
							Конецесли;
							Если Сведения.Свойства().Получить("primary_document_date")<>Неопределено Тогда
								
								ДатаД=Стр.primary_document_date;
								СоздатьВводВоборот.ДатаПервичногоДокумента=Дата(ЧИсло(Сред(ДатаД,7,4)),Число(Сред(ДатаД,4,2)),Число(Сред(ДатаД,1,2)));
										
							Конецесли;
							Если Сведения.Свойства().Получить("primary_document_number")<>Неопределено Тогда
								
								СоздатьВводВоборот.НомерПервичногоДокумента=Стр.primary_document_number
								
							Конецесли;
	Если Сведения.Свойства().Получить("primary_document_type")<>Неопределено Тогда
								
								СоздатьВводВоборот.ТипПервичногоДокумента=Перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ[Сведения.primary_document_type];  
								СоздатьВводВоборот.ВидПервичногоДокумента=перечисления.ТипПервичногоДокумента_ХамелеонЦРПТ[Сведения.primary_document_type];
							Конецесли;

			
			
		Иначе
		
			production_order=Сведения.production_order;
			Если ТипЗнч(Сведения.products_list.product)=Тип("ОбъектXDTO") Тогда
				Стр=Сведения.products_list.product;
					Добав=МассивКМ.Добавить();
					
					
					ДатаД=неопределено;
					Если  Стр.Свойства().Получить("certificate_date")<>Неопределено Тогда
						ДатаД=Стр.certificate_date;
					Конецесли;
					Если ЗначениеЗАполнено(ДатаД) тогда
						Добав.СертификатДата=Дата(ЧИсло(Сред(ДатаД,1,4)),Число(Сред(ДатаД,6	,2)),Число(Сред(ДатаД,9,2)));
					КонецеслИ;
					Если  Стр.Свойства().Получить("certificate_number")<>Неопределено Тогда
						Добав.СертификатНомер=Стр.certificate_number;
					Конецесли;
					certificate_type="";
					Если Стр.Свойства().Получить("certificate_type")<>Неопределено Тогда
						certificate_type=Стр.certificate_type;
						//Если Стр.Свойство("certificate_type",certificate_type) Тогда
						Если certificate_type="CONFORMITY_CERTIFICATE" Тогда
							Добав.СертификатТип=Истина;
						Иначе
							Добав.СертификатТип=Ложь;
						КонецЕсли;
					Конецесли;
					Если ЗначениеЗаполнено(Добав.СертификатНомер) Тогда
						Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.НайтиПоНаименованию(Добав.СертификатНомер,Истина);
						Если Не ЗначениеЗаполнено(Сертификат) тогда
							Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.СоздатьЭлемент();
							Сертификат.ДатаНачалаДействия=Добав.СертификатДата;
							Сертификат.Наименование=Добав.СертификатНомер;
							Сертификат.ЭтоСертификат=Добав.СертификатТип;
							Сертификат.Записать();
							Сертификат=Сертификат.Ссылка;
						КонецЕсли;
						Добав.Сертификат=Сертификат;
					Иначе
						Добав.Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.ПустаяСсылка();
						
					Конецесли;
					
					
					Если Стр.Свойства().Получить("ki")<>Неопределено Тогда
						Если production_order="OWN_PRODUCTION" Тогда
							Добав.kit=Сред(Стр.ki,1,31);	
						Иначе
							Добав.kit=
							КодироватьСтроку(СтрЗаменить(Стр.ki,"ПРОЦЕНТ1Д",Символ(29)),СпособКодированияСтроки.КодировкаURL);	
							
						КонецЕсли;
					Иначе
						Добав.kit=Стр.kitu;	
					КонецЕсли;
					
					Если Стр.Свойства().Получить("vsd_number")<>Неопределено 
						И ТипЗнч(Стр.vsd_number)=Тип("Строка") Тогда
						Добав.НомерВСД=Стр.vsd_number;
					Иначе
						Добав.НомерВСД="";
					Конецесли;
					
							ГУИД=Добав.НомерВСД;
							Если СтрДлина(ГУИД)>36 тогда
								
								УИД=Сред(ГУИД,1,4)+Сред(ГУИД,6,4)+"-"+Сред(ГУИД,11,4)+"-"+Сред(ГУИД,16,4)+"-"+
																Сред(ГУИД,21,4)+"-"+Сред(ГУИД,26,4)+Сред(ГУИД,31,4)+Сред(ГУИД,36,4);
																УИД=НРег(УИД);

									Добав.НомерВСД=УИД								
							Конецесли;
					
					ДатаД=Неопределено;
					Если Стр.Свойства().Получить("production_date")<>Неопределено Тогда
						ДатаД=Стр.product_date;
					Конецесли;
					Если ЗначениеЗАполненО(ДатаД) тогда
						Добав.ДатаПроизводства=Дата(ЧИсло(Сред(ДатаД,1,4)),Число(Сред(ДатаД,6,2)),Число(Сред(ДатаД,9,2)));
					Иначе
						Добав.ДатаПроизводства=Дата(1,1,1)
					Конецесли;
					КодТНВЭД=справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(Стр.tnved_code);
					Если Не ЗначениеЗАполнено(КодТНВЭД) тогда
						КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
						КодТНВЭД.Код=Стр.tnved_code;
						КодТНВЭД.Наименование=КодТНВЭД.Код;
						КодТНВЭД.Записать();
						КодТНВЭД=КодТНВЭД.Ссылка
					КонецЕсли;
					Добав.КодТНВЭД=КодТНВЭД.Ссылка;
					
			Иначе
				Для Каждого Стр Из Сведения.products_list.product Цикл
					Добав=МассивКМ.Добавить();
					
					
					ДатаД=неопределено;
					Если  Стр.Свойства().Получить("certificate_date")<>Неопределено Тогда
						ДатаД=Стр.certificate_date;
					Конецесли;
					Если ЗначениеЗАполнено(ДатаД) тогда
						Добав.СертификатДата=Дата(ЧИсло(Сред(ДатаД,1,4)),Число(Сред(ДатаД,6	,2)),Число(Сред(ДатаД,9,2)));
					КонецеслИ;
					Если  Стр.Свойства().Получить("certificate_number")<>Неопределено Тогда
						Добав.СертификатНомер=Стр.certificate_number;
					Конецесли;
					certificate_type="";
					Если Стр.Свойства().Получить("certificate_type")<>Неопределено Тогда
						certificate_type=Стр.certificate_type;
						//Если Стр.Свойство("certificate_type",certificate_type) Тогда
						Если certificate_type="CONFORMITY_CERTIFICATE" Тогда
							Добав.СертификатТип=Истина;
						Иначе
							Добав.СертификатТип=Ложь;
						КонецЕсли;
					Конецесли;
					Если ЗначениеЗаполнено(Добав.СертификатНомер) Тогда
						Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.НайтиПоНаименованию(Добав.СертификатНомер,Истина);
						Если Не ЗначениеЗаполнено(Сертификат) тогда
							Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.СоздатьЭлемент();
							Сертификат.ДатаНачалаДействия=Добав.СертификатДата;
							Сертификат.Наименование=Добав.СертификатНомер;
							Сертификат.ЭтоСертификат=Добав.СертификатТип;
							Сертификат.Записать();
							Сертификат=Сертификат.Ссылка;
						КонецЕсли;
						Добав.Сертификат=Сертификат;
					Иначе
						Добав.Сертификат=Справочники.Сертификат_ДекларацияСоответствия_ХамелеонЦРПТ.ПустаяСсылка();
						
					Конецесли;
					
					
					Если Стр.Свойства().Получить("ki")<>Неопределено Тогда
						Если production_order="OWN_PRODUCTION" Тогда
							Добав.kit=Сред(Стр.ki,1,31);	
						Иначе
							Добав.kit=
							КодироватьСтроку(СтрЗаменить(Стр.ki,"ПРОЦЕНТ1Д",Символ(29)),СпособКодированияСтроки.КодировкаURL);	
							
						КонецЕсли;
					Иначе
						Добав.kit=Стр.kitu;	
					КонецЕсли;
					
					Если Стр.Свойства().Получить("vsd_number")<>Неопределено 
						И ТипЗнч(Стр.vsd_number)=Тип("Строка") Тогда
						Добав.НомерВСД=Стр.vsd_number;
					Иначе
						Добав.НомерВСД="";
					Конецесли;
					
							ГУИД=Добав.НомерВСД;
							Если СтрДлина(ГУИД)>36 тогда
								
								УИД=Сред(ГУИД,1,4)+Сред(ГУИД,6,4)+"-"+Сред(ГУИД,11,4)+"-"+Сред(ГУИД,16,4)+"-"+
																Сред(ГУИД,21,4)+"-"+Сред(ГУИД,26,4)+Сред(ГУИД,31,4)+Сред(ГУИД,36,4);
																УИД=НРег(УИД);

									Добав.НомерВСД=УИД								
							Конецесли;
					
					ДатаД=Неопределено;
					Если Стр.Свойства().Получить("production_date")<>Неопределено Тогда
						ДатаД=Стр.product_date;
					Конецесли;
					Если ЗначениеЗАполненО(ДатаД) тогда
						Добав.ДатаПроизводства=Дата(ЧИсло(Сред(ДатаД,1,4)),Число(Сред(ДатаД,6,2)),Число(Сред(ДатаД,9,2)));
					Иначе
						Добав.ДатаПроизводства=Дата(1,1,1)
					Конецесли;
					КодТНВЭД=справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(Стр.tnved_code);
					Если Не ЗначениеЗАполнено(КодТНВЭД) тогда
						КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
						КодТНВЭД.Код=Стр.tnved_code;
						КодТНВЭД.Наименование=КодТНВЭД.Код;
						КодТНВЭД.Записать();
						КодТНВЭД=КодТНВЭД.Ссылка
					КонецЕсли;
					Добав.КодТНВЭД=КодТНВЭД.Ссылка;
					

					
				Конеццикла;
				
			КонецЕсли;
		//МассивКМ.Сортировать("ДатаПроизводства");
		
		Если Сведения.production_order="OWN_PRODUCTION" Тогда
			ТипВвода=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ВводВОборот
		Иначе
			ТипВвода=Перечисления.ТипыДокументаВводВОборот_ХамелеонЦРПТ.ОтчетОбИспользовании
		КонецЕсли;
		
		ИНН=Сведения.owner_inn;
		Организация=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",ИНН);
		Если Не ЗначениеЗаполнено(Организация) тогда
			Сообщить("Не удалось загрузить агрегации из файла, так как нет организации с данным ИНН "+ИНН);
			Возврат;
		КонецЕсли;
		ТекущийПользователь=Справочники.Пользователи_ХамелеонЦРПТ.НайтиПоРеквизиту("Организация",Организация);
		Если Не ЗначениеЗаполнено(ТекущийПользователь) тогда
			Сообщить("Нет пользователя для подключения к организации по ИНН "+ИНН);
			Возврат;
		КонецЕсли;
			
		СоздатьВводВоборот=Документы.ВводВОборот_ХамелеонЦРПТ.СоздатьДокумент();
		СоздатьВводВоборот.Дата=ТекущаяДата();
		Если Сведения.Свойства().Получить("production_date")<>Неопределено тогда
			ДатаД=Сведения.production_date;
			СоздатьВводВоборот.ДатаПроизводства=Дата(ЧИсло(Сред(ДатаД,1,4)),Число(Сред(ДатаД,6,2)),Число(Сред(ДатаД,9,2)));
		Конецесли;
		СоздатьВводВоборот.Организация=Организация;
		СоздатьВводВоборот.ТекущийПользователь=ТекущийПользователь;
		СоздатьВводВоборот.ТипДокумента=типВвода;;
	КонецЕсли;
		
	
		
	
	Для Каждого Стр_1 Из МассивКМ ЦИкл
		ШтрихКод=Стр_1.kit;
	Если СтрДлина(ШтрихКод)=20 Тогда
		ШтрихКод=Сред(ШтрихКод,3);
	КонецЕсли;
	ШтрихКод_1=(ШтрихКод);
	
		Если СоздатьВводВоборот.СерийныеНомера.НайтиСтроки(Новый Структура("cis",ШтрихКод)).Количество()>0 Тогда
			Сообщить("CiS "+ШтрихКод+" уже присутсвует в документе");
			Возврат;
		КонецЕсли;
	//КонецЕсли;	
	
	
	
			
			попытка
				Если Сред(ШтрихКод,1,2)="01" Тогда
					Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
					Число(Сред(ШтрихКод,3,14)));;
					Если Не ЗначениеЗаполнено(Продукция) Тогда
						Продукция=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
						Продукция.GTIN=Число(Сред(ШтрихКод,3,14));
						Продукция.Наименование=xmlString(Продукция.GTIN);
						Продукция.НаименованиеТовара=xmlString(Продукция.GTIN);
						Продукция.Записать();;
						Продукция=Продукция.Ссылка;
					КонецЕсли;
				Иначе
					Продукция=справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",
					Число(Сред(ШтрихКод,1,14)));;
					Если Не ЗначениеЗаполнено(Продукция) Тогда
						Продукция=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
						Продукция.GTIN=Число(Сред(ШтрихКод,1,14));
						Продукция.Наименование=xmlString(Продукция.GTIN);
						Продукция.НаименованиеТовара=xmlString(Продукция.GTIN);
						Продукция.Записать();;
						Продукция=Продукция.Ссылка;
					КонецЕсли;
				КонецЕсли;
				
				
			Исключение
				Продукция=Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка();
			КонецПопытки;
				Добав=СоздатьВводВоборот.СерийныеНомера.Добавить();
				
				Добав.GTIN=ДополнитьСтроку(xmlString(Продукция.GTIN));
				Добав.НаименованиеТовара=Продукция;
				Добав.cis=ШтрихКод;
				
				ППП=СоздатьВводВоборот.Товары.НайтиСтроки(
				Новый структура("ДатаПроизводства,gtin,КодТНВЭД,ДекларацияИлиСертификатСоответствия,НомерВСД",
				Стр_1.ДатаПроизводства,Продукция,Стр_1.КодТНВЭД,Стр_1.Сертификат,Стр_1.НомерВСД));
				Если ППП.Количество()=0 Тогда
					Добав_1=СоздатьВводВоборот.Товары.Добавить();
					Добав_1.GTIN=Продукция;
					Добав_1.ДатаПроизводства=Стр_1.ДатаПроизводства;
					//Добав_1.ГоденДо=ДатаГоденДо;
					Добав_1.НомерВСД=Стр_1.НомерВСД;
					Добав_1.КодТНВЭД=Стр_1.КодТНВЭД;
					Добав_1.СпособВыпускаТоваров="Производство в РФ";
					Добав_1.НомерСтрокиСвязи=Добав_1.НомерСтроки;
					Добав_1.КоличествоКМ=1;
					Добав_1.ДекларацияИлиСертификатСоответствия=Стр_1.Сертификат;
					Добав_1.НаименованиеПервичногоДокумента=Стр_1.НазваниеПервичногоДокумента;
					Добав_1.ДатаПервичногоДокумента=Стр_1.ДатаПервичногоДокумента;
					Добав_1.НомерПервичногоДокумента=Стр_1.НомерПервичногоДокумента;
					Добав_1.ВидПервичногоДокумента=Стр_1.ВидПервичногоДокумента;
					Добав_1.Цена=Стр_1.cost;
				Иначе
					Добав_1=ППП[0];
					Добав_1.КоличествоКМ=Добав_1.КоличествоКМ+1;
					
				КонецЕсли;
				Добав.НомерСтрокиСвязи=Добав_1.НомерСтрокиСвязи;
				
				
			
		;
			
		
		
	Конеццикла;
	СоздатьВводВоборот.Записать();
	МассивАгрегация.Добавить(СоздатьВводВоборот.Ссылка);
			
КонецПроцедуры

