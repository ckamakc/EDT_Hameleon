&НаКлиенте
Функция ПодключениеКСУЗ_ХамелеонЦРПТ(Thumbprint_1) Экспорт
	Если    Thumbprint_1.СУЗПоНовомуДинамическийТокен=Истина Тогда
		///ПОДКЛЮЧАЕММСЯ ПО НОВОМУ
		
			Если Thumbprint_1.НаименованиеСтенда="Фармацевтика"  Тогда
				//Возврат Thumbprint_1.ТокенСУЗ;
				
				Если Не ЗначениеЗаполнено(Thumbprint_1.ИдентификаторСоединения) Тогда
			
					Сообщить("Для подключения по динамическому токену необходимо заполнить <Идентификатор устройства для подключения> в пользователе");
					Возврат "";
				КонецеслИ;
				
				
				ПараметрыСтарыеДляПодключения=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьНовыеПараметрыДляПодключенияКСУЗ_ХамелоенЦРПТ(Thumbprint_1);
				Если ЗначениеЗаполнено(ПараметрыСтарыеДляПодключения.Токен) И ЗначениеЗаполнено(ПараметрыСтарыеДляПодключения.ДатаВремя) Тогда
					//Если ТекущаяДата()-ПараметрыСтарыеДляПодключения.ДатаВремя<=9.8*60*60 Тогда
					//Если ПараметрыСтарыеДляПодключения.ДатаВремя< ТекущаяДата() Тогда
					Если ТекущаяДата()-ПараметрыСтарыеДляПодключения.ДатаВремя<=9.6*60*60 Тогда
						Возврат ПараметрыСтарыеДляПодключения.Токен
					Конецесли;
					
				Конецесли;
				
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;

		
		

			Тело = "{
			|""client_id"": """+Thumbprint_1.ИдентификаторКлиентаМДЛП+""",
			|""client_secret"": """+Thumbprint_1.СекретныйКодМДЛП+""",
			|""user_id"": """+Thumbprint_1.Thumbprint_1+""",
			|""auth_type"": """+"SIGNED_CODE"+"""
			|}";
			Запрос=Новый HTTPЗапрос("api/v1/auth");
			Запрос.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
			Запрос.УстановитьТелоИзСтроки(Тело);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(Запрос);
			Если Ответ.КодСостояния=200 Тогда 	
				ОтветСтруктура =ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
				Подписываем=ОтветСтруктура.code;
				Имя_вр_1="";
				ПодписатьФайл(Thumbprint_1.Внешняя,Подписываем,Thumbprint_1,Имя_вр_1,Истина,,,Thumbprint_1.PIN);
				
				Добав=Имя_вр_1;
				//Добав=ПолучитьСтрокуИздвоичныхДанных(РР);
				//Добав=КодСтрСервер(Добав);
				Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");
				
				Тело = "{
				|""code"": """+ОтветСтруктура.code+""",
				|""signature"": """+Добав+"""
				|}";
				
				
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v1/token/"+Thumbprint_1.ИдентификаторСоединения);
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
				
				
				
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
				Попытка


					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());//ПрочитатьJSON(ЧтениеJSON);
				Исключение
					//				Сообщить("Текстовая строка "+ТекстJSON+" не соответствует шаблону JSON");
					Сообщить(Описаниеошибки());
					Возврат Неопределено;
				КонецПопытки;
				Ош="";
				Если NNN=Неопределено тогда
					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(2);
					Сообщить("Не удалось подключиться к сайту: "+Thumbprint_1.АдресКАПИ);
					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьДинамическийТокенВРегистр(Thumbprint_1.ТекущийПользователь,"",0);
					
					Возврат "";
					
				Иначе
					Если     NNN.Свойство("error_message",Ош) Тогда
						Сообщить(Ош);
						Возврат "";
					КонецЕсли;
					//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(Thumbprint_1.Thumbprint_1,NNN.token);
					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьДинамическийТокенВРегистр(Thumbprint_1.ТекущийПользователь,NNN.token,NNN.life_time);
						
					Возврат NNN.token
				КонецЕсли;
				
				
			Конецесли;
		
				Возврат  Thumbprint_1.ТокенСУЗ
			Конецесли;
		СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
				КонецЕсли;
					
		КонецЕсли;
		
		 Если Не ЗначениеЗаполнено(СРегистра) тогда
			Возврат "";
		Конецесли;

		
		Если Не ЗначениеЗаполнено(Thumbprint_1.ИдентификаторСоединения) Тогда
			
			Сообщить("Для подключения по динамическому токену необходимо заполнить <Идентификатор устройства для подключения> в пользователе");
			Возврат "";
		КонецеслИ;
		
		
		ПараметрыСтарыеДляПодключения=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьНовыеПараметрыДляПодключенияКСУЗ_ХамелоенЦРПТ(Thumbprint_1);
		Если ЗначениеЗаполнено(ПараметрыСтарыеДляПодключения.Токен) И ЗначениеЗаполнено(ПараметрыСтарыеДляПодключения.ДатаВремя) Тогда
			Если ТекущаяДата()-ПараметрыСтарыеДляПодключения.ДатаВремя<=9.6*60*60 Тогда
			//Если ПараметрыСтарыеДляПодключения.ДатаВремя< ТекущаяДата() Тогда
				Возврат ПараметрыСтарыеДляПодключения.Токен
			Конецесли;
			
		Конецесли;
		
		
		
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
			Прокси=Новый ИнтернетПрокси;
			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		Иначе
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,, Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		
		
			Запрос=Новый HTTPЗапрос("api/v3/auth/cert/key");
				Запрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				Запрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		
			Ответ=HTTPСервисЗапрос.Получить(Запрос);
		Если Ответ.КодСостояния=200 Тогда 	
			ОтветСтруктура =ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
			Подписываем=ОтветСтруктура.data;
			Имя_вр_1="";
			СерийныйНомер="";
			ПодписатьФайл(Thumbprint_1.Внешняя,Подписываем,Thumbprint_1,Имя_вр_1,,,СерийныйНомер,Thumbprint_1.PIN);
			
			Добав=Имя_вр_1;
			//Добав=ПолучитьСтрокуИздвоичныхДанных(РР);
			//Добав=КодСтрСервер(Добав);
			Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
			Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
			Добав=СтрЗаменить(Добав,"\r\n","");

			Тело = "{
			|""uuid"": """+ОтветСтруктура.uuid+""",
			|""data"": """+Добав+"""
			|}";
			
			
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/auth/cert/"+Thumbprint_1.ИдентификаторСоединения);
			//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer " +СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин           
			HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
			
			
			
			//ЧтениеJSON = Новый ЧтениеJSON;
			//ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			Попытка
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());//ПрочитатьJSON(ЧтениеJSON);
			Исключение
//				Сообщить("Текстовая строка "+ТекстJSON+" не соответствует шаблону JSON");
				Сообщить(Описаниеошибки());
				Возврат Неопределено;
			КонецПопытки;
			Ош="";
			Если     NNN.Свойство("error_message",Ош) Тогда
				Сообщить(Ош);
				Возврат "";
			КонецЕсли;
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьДинамическийТокенВРегистр(Thumbprint_1.ТекущийПользователь,NNN.token,9*60);
			
			Возврат NNN.token
		
		Конецесли;	
		
	Иначе
		Возврат Thumbprint_1.ТокенСУЗ
	Конецесли;
	Возврат "";
КонецФункции


&НаКлиенте
Функция ВернутьКМИзФайлов() Экспорт
	
	Перем Файл;
	ВклЗаг = 0;
	//ДанныеЛиста.Очистить();
	Режим=РежимДиалогаВыбораФайла.Открытие;
	нДиалог= НОвый ДиалогВыбораФайла(Режим);
	Фильтр="Файл xls/txt/csv|*.xls;*.xlsx;*.txt;*.csv|Файл txt|*.txt|Файл xls|*.xls;*.xlsx|Файл csv|*.csv";
	
	нДиалог.Фильтр=Фильтр;
	нДиалог.Заголовок="Выберите файл для загрузки..." ;
	нДиалог.МножественныйВыбор=Истина;
	
	
	МассивКМ=Новый Массив;
	
	Если нДиалог.Выбрать() тогда
//		Файл=НОвый Файл(пвФайл);
		Состояние("Выполняется инициализация...");
	иначе
		Возврат МассивКМ;
	КонецЕсли;
	для Каждого 		ВыборЗагрExcel ИЗ нДиалог.ВыбранныеФайлы Цикл

	Если Прав(ВыборЗагрExcel,3)="xls" 
		ИЛИ Прав(ВыборЗагрExcel,4)="xlsx" 
		Тогда

		Попытка
    		Эксель = Новый COMОбъект("Excel.Application"); // для v7 код будет: Эксель = СоздатьОбъект("Excel.Application");
		Исключение
			
			
			ДвоичныеДанные=Новый ДвоичныеДанные(ВыборЗагрExcel);
			АдресВр=ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			
			
		
		
		
			//Сообщить("Внимание! Файл не открыт." + Символы.ПС + "Попробуйте открыть и пересохранить данный файл программой Эксель.");
			Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВернутьИзxlsСтандартно(АдресВр,ВыборЗагрExcel);
		КонецПопытки;
		
		Попытка
			Книга = Эксель.WorkBooks.Open(ВыборЗагрExcel );
		Исключение
			ПоказатьПредупреждение(,"Не удалось открыть файл " + ВыборЗагрExcel );
			Возврат МассивКМ;
		КонецПопытки;
		
		КоличествоЛистовВКниге = Книга.Worksheets.Count;
			
		Если КоличествоЛистовВКниге < 1 Тогда
			ПоказатьПредупреждение(,"Пустой файл");
			Возврат МассивКМ
		КонецЕсли;
		
		ВыводДанных = Ложь;

		ВопросПоказать=Истина;
		КоличествоОстаткиИтогИнвентаризация=0;
		Для СчетчикЛистов = 1 По КоличествоЛистовВКниге Цикл
			
			Лист = Книга.WorkSheets(СчетчикЛистов);
			ИмяЛиста = Книга.Sheets(СчетчикЛистов).Name;					
			ВсегоСтрок = Лист.Cells(1,1).SpecialCells(11).Row;
			ВсегоКолонок = Лист.Cells(1,1).SpecialCells(11).Column;	
			
			//Строка=3;
			
			
			
			Для Сч=1 По ВсегоСтрок Цикл
				ШтрихОбраб=Лист.Cells(Сч, 1).Value;
				Если ЗначениеЗаполнено(ШтрихОбраб) Тогда
					ШтрихОбраб=СтрЗаменитЬ(ШтрихОбраб,Символ(29),"");
					
					МассивКМ.Добавить(ШтрихОбраб);
				Конецесли
			КонецЦикла;
		КонецЦикла;
		Книга.Close(0);
	ИначеЕсли Прав(ВыборЗагрExcel,3)="txt" 
		ИЛИ Прав(ВыборЗагрExcel,3)="csv"
		Тогда
		
		ТекстовыйД=Новый ТекстовыйДокумент;
		ТекстовыйД.Прочитать(ВыборЗагрExcel);
		
		
			ВсегоСтрок = ТекстовыйД.КоличествоСтрок();
			Для Сч=1 По ВсегоСтрок Цикл
				ШтрихОбраб=ТекстовыйД.ПолучитьСтроку(Сч);
			
					ШтрихКод68=ШтрихОбраб;
					Если ЗначениеЗаполнено(ШтрихКод68) Тогда
											ШтрихКод68=СтрЗаменитЬ(ШтрихКод68,Символ(29),"");

											
											МассивКМ.Добавить(ШтрихКод68);
					Конецесли;
				
				КонецЦикла;
	КонецЕсли;
	
	Конеццикла;
	
	Возврат МассивКМ
КонецФункции

&НаКлиенте
Процедура ПолучитьИнформациюПоКМ_Массив_Табак(Дерево,Штрих,ТекущийПользователь) Экспорт
//	Дерево.ПолучитьЭлементы().Очистить();
Попытка
	МассивКМ=Новый Массив;
	Thumbprint_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(ТекущийПользователь);	
	                  УжеЗапрашивали=Новый Массив;
	Что=        Thumbprint_1.что;
		   
		СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
				КонецЕсли;
					
			КонецЕсли;
			Если не ЗначениеЗаполненО(Срегистра) Тогда
				Возврат;
			КонецеслИ;
			
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;

	
	Для Каждого Стр_1 Из Штрих Цикл
		Добав=Дерево.ПолучитьЭлементы().Добавить();
		
		
		
			Добав.НомерКороба=Стр_1;
			Добав.cis=Стр_1;
			Добав.НомерКМ=Стр_1;
			
			
			МассивКМ=Новый Массив;
			МассивКМ.Очистить();
			
			
						НомерКМ=        Добав.cis;
					Если Сред(НомеркМ,1,3)="010" Тогда
						НомерКМ="("+Сред(НомерКМ,1,2)+")"+Сред(НомерКМ,3,14)+"("+Сред(НомерКМ,17,2)+")"+Сред(НомерКМ,19);
						
					КонецЕсли;
					Если Сред(НомерКМ,1,2)<>"01"
						И Сред(НомерКМ,1,4)<>"(01)"
						Тогда
						НомерКМ=Сред(НомерКМ,1,21);
					Иначе
						НомерКМ=Сред(НомерКМ,1,29);
						
					КонецЕсли;
		
			МассивКМ.Добавить(НомерКМ);
					//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_11.Марка)+"&pg="+что);;
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/true-api/cises/info");///?values="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(НомерКМ));
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьтелоПоcis_Табак(МассивКМ);
						
			#Если ВебКлиент Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
			#Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
				
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
				Текст1=Ответ.ПолучитьТелоКакСтроку();
				
				числоЗагрузили=0;
				
				//Добав.Продукция=
				//НайтиПроудкцияюПоcis(Thumbprint_1,Срегистра,Стр_1);

				Тотал=0;
		//		БылиУпаковки=Ложь;
				Если Ответ.КодСостояния=200 Тогда
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						
						Если NNN<>Неопределено И NNN.Количество()>0 Тогда
							
							МассивКМ_1=Новый Массив;
							МассивКМ_1.Очистить();
							cisnfo=NNN[0]["cisInfo"];
							Если cisnfo<>Неопределено Тогда
							
								Если ЗначениеЗаполнено(cisnfo["gtin"]) Тогда
									
									Продукц="";
									ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке_Соответвтвие(cisnfo,"",Тотал,0,Thumbprint_1,Продукц,Истина);
									Добав.Продукция=Продукц;
								Конецесли;
								
							
								РекурсияПоПолучениюИнформации_1_Табак(cisnfo,Добав.cis,HTTPСервисЗапрос,Thumbprint_1,СРегистра,Добав,УжеЗапрашивали,МассивКМ_1);
								
							Конецесли;
						Конецесли;
						//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.	
							
							
					КонецЕсли			
				Конеццикла ;
		Исключение
			КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура РекурсияПоПолучениюИнформации_1_Табак(Карта,Марка,HTTPСервисЗапрос,Thumbprint_1,СРегистра,Добав,УжеЗапрашивали,МассивКМ)
	
	что=Thumbprint_1.Что;
	Если Карта<>Неопределено И Карта["child"]<>Неопределено Тогда
		
		Добав.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка");
		МассивКМ.Добавить(Новый Структура("КМ,Тип",Добав.НомерКМ,Добав.ТипУпаковки));
				
		Для Каждого Стр_К Из Карта["child"] Цикл
		
			ШтрихКод=Стр_к;
			
			ДобавК=Добав.ПолучитьЭлементы().Добавить();
			ДобавК.НомерКМ=ШтрихКод;
			
			Если Сред(ШтрихКод,1,2)="01" Тогда
				ГТИН=Сред(Штрихкод,3,14) 
			Иначе
				ГТИН=Сред(ШтрихКод,1,14);
			Конецесли;
			
			ДобавК.Продукция=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.НайтиПоГТИН(ГТИН);
			Если Не ЗначениеЗаполнено(ДобавК.Продукция) Тогда
			
			//ДобавК.Продукция=НайтиПроудкцияюПоcis(Thumbprint_1,Срегистра,ШтрихКод);
			
				МассивКМ=Новый Массив;
				МассивКМ.Очистить();
			
			
								МассивКМ.Добавить(ШтрихКод);
					//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_11.Марка)+"&pg="+что);;
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/true-api/cises/info");///?values="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(НомерКМ));
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьтелоПоcis_Табак(МассивКМ);
						
							
			#Если ВебКлиент Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
			#Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
				
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
				Текст1=Ответ.ПолучитьТелоКакСтроку();
				
				числоЗагрузили=0;
				
				//Добав.Продукция=
				//НайтиПроудкцияюПоcis(Thumbprint_1,Срегистра,Стр_1);

				Тотал=0;
		//		БылиУпаковки=Ложь;
				Если Ответ.КодСостояния=200 Тогда
						NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						
						Если NNN<>Неопределено И NNN.Количество()>0 Тогда
							
							МассивКМ_1=Новый Массив;
							МассивКМ_1.Очистить();
							cisnfo=NNN[0]["cisInfo"];
							Если cisnfo<>Неопределено Тогда
							
								Если ЗначениеЗаполнено(cisnfo["gtin"]) Тогда
									
									Продукц="";
									ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке_Соответвтвие(cisnfo,"",Тотал,0,Thumbprint_1,Продукц,Истина);
									ДобавК.Продукция=Продукц;
								Конецесли;
								
							Конецесли;
						Конецесли;
					Конецесли;
		
			     Конецесли
			
									
									
//Если Стр_К.Значение["status"]="DISAGGREGATION" Тогда
//					ДобавК.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка");
//				Иначе
		//	Если Объект.Короба.НайтиСтроки(Новый Структура("НомерКороба,ШтрихКод",Марка,ШтрихКод)).Количество()=0 Тогда
		//		ДобавК=Объект.Короба.Добавить();
		//		ДобавК.НомерКороба=Марка;
		//		ДобавК.ШтрихКод=ШтрихКод;
		//		БылиУпаковки=Истина;
		//	КонецЕсли;
		
		
	//		Если Стр_К["children"]=Неопределено тОгда
	//	
	//			Если Стр_к["status"]="DISAGGREGATION" Тогда
	//				Добав.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка");
	//			Иначе
	//				ДобавК.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Штука");
	//					
	////				Конецесли;
	//									
	//				//МассивКМ.Добавить(Новый Структура("КМ,Тип",ДобавК.НомерКМ,ДобавК.ТипУпаковки));
	//				
	//				ГТИН_1=Стр_к["gtin"];


	//				Если УжеЗапрашивали.Найти(ГТИН_1)=Неопределено Тогда
	//					////ИЩЕМ ПРОДУКЦИЮ И ЗАПРАШИВАЕМ
	//		
	//					
	//					//HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ШтрихКод)+"&pg="+что);;
	//					HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ШтрихКод)+"&pg="+что);;

	//					HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	//					HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);

	//					Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	//					Если Ответ.КодСостояния=200 ИЛИ Ответ.КодСостояния=202 Тогда
	//						Текст1=Ответ.ПолучитьТелоКакСтроку();
	//						ГТИН="";                                                               Тотал=0;числоЗагрузили=0;
	//						ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке(Текст1,"",Тотал,числоЗагрузили,Thumbprint_1,ГТИН);
	//						//Вызватьисключение ГТИН;
	//					Иначе
	//											
	//						ГТИН="";
	//						ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке_Соответвтвие(Стр_к,"",Тотал,числоЗагрузили,Thumbprint_1,ГТИН);

	//					//	Если Ответ.КодСостояния=200 Тогда					
	//							
	//							
	//					//	КонецЕсли;
	//					КонецЕсли;				
	//					УжеЗапрашивали.Добавить(ГТИН_1);
	//				КонецЕсли
	//			Конецесли;
	//			МассивКМ.Добавить(Новый Структура("КМ,Тип",Добав.НомерКМ,Добав.ТипУпаковки));
	//			
	//		Иначе
	//			
	//			ДобавК.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка");
	//			МассивКМ.Добавить(Новый Структура("КМ,Тип",ДобавК.НомерКМ,ДобавК.ТипУпаковки));
	//			
	//			Для каждого Стр_Р Из Стр_К["children"] Цикл
	//				РекурсияПоПолучениюИнформации_1(Стр_Р,ШтрихКод,HTTPСервисЗапрос,Thumbprint_1,СРегистра,ДобавК,УжеЗапрашивали,МассивКМ)
	//			Конеццикла;

	//		Конецесли;	

								
		Конеццикла;
	ИначеЕсли Карта<>Неопределено Тогда
			ШтрихКод=Карта["cis"];
		
			ДобавК=Добав.ПолучитьЭлементы().Добавить();
			ДобавК.НомерКМ=ШтрихКод;
		
			Если Карта["status"]="DISAGGREGATION" Тогда
					Добав.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка");
				Иначе
					Добав.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Штука");
					ГТИН_1=Сред(Марка,3,14);


					
				Если УжеЗапрашивали.Найти(ГТИН_1)=Неопределено Тогда
					////ИЩЕМ ПРОДУКЦИЮ И ЗАПРАШИВАЕМ
		
					
					//HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Марка)+"&pg="+что);;
					HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ШтрихКод)+"&pg="+что);;

					HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
					HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);

					Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
					Если Ответ.КодСостояния=200 ИЛИ Ответ.КодСостояния=202 Тогда
						Текст1=Ответ.ПолучитьТелоКакСтроку();
						ГТИН="";                                                               Тотал=0;числоЗагрузили=0;
						ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке(Текст1,"",Тотал,числоЗагрузили,Thumbprint_1,ГТИН);
						//Вызватьисключение ГТИН;
					Иначе
						
						ГТИН="";
						ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке_Соответвтвие(Карта,"",Тотал,числоЗагрузили,Thumbprint_1,ГТИН);
						
					КонецЕсли;				
					УжеЗапрашивали.Добавить(ГТИН_1);
				КонецЕсли
				

					
					
			Конецесли;
				
				
		МассивКМ.Добавить(Новый Структура("КМ,Тип",Добав.НомерКМ,Добав.ТипУпаковки));
	КонецЕсли;
КонецПроцедуры




&НаКлиенте
Функция ВернутьИнформациюОКМ(КМ,Thumbprint_1) Экспорт
	
	Если Не ЗначениеЗаполнено(Thumbprint_1) ИЛИ  Thumbprint_1.НаименованиеСтенда="Фармацевтика" 
		
		Тогда
		Если СтрДлина(КМ)=18 Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;	
	Если СтрДлина(КМ)<31 И СтрДлина(КМ)<>25
		И Thumbprint_1.НаименованиеСтенда<>"Табак"
		И Thumbprint_1.НаименованиеСтенда<>"Альтернативный табак"
		Тогда
		Возврат Истина;
	ИначеЕсли СтрДлина(КМ)>74 тогда
		Возврат Ложь;
	Иначе ////считываем с регистра, если нет, то делаем запрос в ЦРПТ для определния
		
				
		
		ПолучитьДанныеСРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.вернутьТипУпаковкиПоКМНаСервере(КМ);
		
		Если ПолучитьДанныеСРегистра=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка") тогда
			Возврат Истина;
		ИначеЕсли ПолучитьДанныеСРегистра=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.АТК") тогда
			Возврат 2;
		ИначеЕсли ПолучитьДанныеСРегистра=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Штука") тогда
			Возврат Ложь;
		КонецЕсли;
		
		////ВРЕМЕННАЯ ЗАГЛУШКА
		
		Если СтрДлина(КМ)=31
			Тогда
			Возврат ЛОжь;
		КонецЕсли;
		
		//Если Thumbprint_1=Неопределено тогда
		//	Возврат Ложь;
		//КонецЕсли;
		Если 	               Thumbprint_1<>Неопределено Тогда
			
			Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" 
				Тогда
				
				
				
				Возврат Неопределено
				
			ИначеЕсли Thumbprint_1.НаименованиеСтенда="Табак"  
				ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак"   Тогда
				
				Если Сред(КМ,1,2)<>"01" Тогда
					Возврат Ложь;
				Иначе
					
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
			Прокси=Новый ИнтернетПрокси;
			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
		
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		Иначе
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		
		СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		СерийныйНомер="";
			Если Не ЗначениеЗаполнено(СРегистра)  тогда
				СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
			Иначе
			   
					Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
					
						HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
					Иначе
					
						HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
					КонецЕсли;
					
					HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
					HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
					HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
					//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
					///Константин           
					Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
					//Текст1=Ответ.ПолучитьТелоКакСтроку();
					Если Ответ.КодСостояния<>200 Тогда
						СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
					КонецЕсли;
					
					
					
					
			КонецЕсли;
			
			Если не ЗначениеЗаполненО(Срегистра) Тогда
				Возврат НеопределенО;;
			КонецеслИ;

					МассивКМ=Новый Массив;
					МассивКМ.Очистить();
					МассивКМ.Добавить(КМ);
					
		  NN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьтелоПоcis_Табак(МассивКМ);
					

		HTTPЗапрос=Новый HTTPЗапрос("api/v3/true-api/cises/info");
		//private-office-api/private/v2/cis/"+КодМаркировки+"/mrp"
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин   
		#Если ВебКлиент Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(NN,КодировкаТекста.UTF8);
			#Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(NN,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);

			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Ответ.ПолучитьТелоКакСтроку());//ПрочитатьJSON(ЧтениеJSON);
			//Стр_1.Статус=NNN[0].status;
			Попытка
			Для Каждого Стр_С Из NNN Цикл
				
				НомерКМ=Стр_С["cisInfo"]["requestedCis"];
				Если КМ=НомерКМ Тогда
				Если Сред(НомерКМ,1,1)="(" Тогда
					НомерКМ=Сред(НомерКМ,2,2)+Сред(НомерКМ,5,14)+
					Сред(НомерКМ,20,2)+Сред(НомерКМ,23);
				КонецЕсли;
				Стр_С_С=Стр_С["cisInfo"];
				ТипУпаковки=Стр_С_С["packageType"];
				Если ЗначениеЗаполнено(ТипУпаковки) Тогда
					Если ТипУпаковки="UNIT" Тогда
			        	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапишемТип_КМ_ХамелеонЦРПТ(КМ,ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Штука"));
						Возврат ложь;
					ИначеЕсли ТипУпаковки="ATK" Тогда
			        	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапишемТип_КМ_ХамелеонЦРПТ(КМ,ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.АТК"));
						Возврат 2;
					Иначе
			        	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапишемТип_КМ_ХамелеонЦРПТ(КМ,ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка"));
										
						Возврат Истина
					КонецЕсли;
				Иначе
					Возврат Неопределено;
				
				Конецесли;
				КонецЕсли;
				
				//МассивСтруктур.Добавить(Новый Структура("cis,статус",Стр_С.cisInfo.requestedCis,Стр_С.cisInfo.status
			Конеццикла;
		Исключение
		КонецПопытки;
		
				КонецЕсли;
				
			КонецЕсли;
			Попытка
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
			Прокси=Новый ИнтернетПрокси;
			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
		
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		Иначе
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		
		СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		СерийныйНомер="";
			Если Не ЗначениеЗаполнено(СРегистра)  тогда
				СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
			Иначе
			   
					Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
					
						HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
					Иначе
					
						HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
					КонецЕсли;
					
					HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
					HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
					HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
					//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
					///Константин           
					Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
					//Текст1=Ответ.ПолучитьТелоКакСтроку();
					Если Ответ.КодСостояния<>200 Тогда
						СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
					КонецЕсли;
						
				КонецЕсли;
				
				
			Если не ЗначениеЗаполненО(Срегистра) Тогда
				Возврат НеопределенО;;
			КонецеслИ;
				
		
					Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
					Иначе
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;          	
		
			что=Thumbprint_1.что;
				МассивКМ=Новый Массив;
				МассивКМ.Очистить();
				МассивКМ.Добавить(КМ);
			Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьтелоПоcis(МассивКМ);
			HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/cis/cis_list?childrenPaging=true&childrenLimit=0&pg="+Что);
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				#Если ВебКлиент Тогда
					HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
				#Иначе
					HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
				#КонецЕсли
			
			
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);

		
		Если Ответ.КодСостояния=200 Тогда
			
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Ответ.ПолучитьТелоКакСтроку());//ПрочитатьJSON(ЧтениеJSON);
				
				Если NNN[КМ]<>Неопределено Тогда
					//Если NNN[КМ]["children"]<>Неопределено 
					//	ИЛИ NNN[КМ]["status"]="DISAGGREGATION"
					//	Тогда
					Если NNN[КМ]["packageType"]="UNIT" Тогда
				        ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапишемТип_КМ_ХамелеонЦРПТ(КМ,ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Штука"));
						Возврат ложь;
					ИначеЕсли NNN[КМ]["packageType"]="ATK"  Тогда
				        ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапишемТип_КМ_ХамелеонЦРПТ(КМ,ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.АТК"));
						Возврат 2;
						
					Иначе 
				        ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапишемТип_КМ_ХамелеонЦРПТ(КМ,ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка"));
											
						Возврат Истина
					КонецЕсли;
				Конецесли;
					//Возврат Неопределено;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
				/////СТАРЫЙ АЛГОРИТМ ВРЕМЕННО ПОТОМ НЕОБХОДИМО УБРАТЬ!!!!
				Если  СтрДлина(КМ)=18 Тогда
					Возврат Истина
				Иначе
					Возврат ложь;
				КонецЕсли;
	
		
		///
		
	Конецесли;
КонецФункции

&НаКлиенте
Процедура ЗаписатьИДЭДОВОрганизацию(Thumbprint_1,СайтМаркирвки,Срегистра,СерийныйНомер) Экспорт
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(СайтМаркирвки,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(СайтМаркирвки,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;  		
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/profile/company2");
		
		
	//	HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
		HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
		HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
		HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
	//	HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
	//	HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ +"/documents/incoming/list");
		
		
		
		HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");
		
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//	HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
		HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
		HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
		
		
		
	//	Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
		Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
		"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


		HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
		
		//Тело="documentType=LP_ACCEPT_GOODS_XML";
	//	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		Попытка
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
		
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьИДВОрганизации(NNN);
		Исключение
		КонецПопытки;
	
КонецПроцедуры


&НаКлиенте
Функция ПодставитьПараметрыСПроцентом(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = Неопределено;
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр = Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр = Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр = Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр = Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр = Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр = Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр = Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр = Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр = Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = Неопределено Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции


&НаКлиенте
Функция ПодставитьПараметрыВСтроку(Знач ШаблонСтроки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ЕстьПараметрыСПроцентом = Найти(Параметр1, "%")
		Или Найти(Параметр2, "%")
		Или Найти(Параметр3, "%")
		Или Найти(Параметр4, "%")
		Или Найти(Параметр5, "%")
		Или Найти(Параметр6, "%")
		Или Найти(Параметр7, "%")
		Или Найти(Параметр8, "%")
		Или Найти(Параметр9, "%");
		
	Если ЕстьПараметрыСПроцентом Тогда
		Возврат ПодставитьПараметрыСПроцентом(ШаблонСтроки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	КонецЕсли;
	
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%1", Параметр1);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%2", Параметр2);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%3", Параметр3);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%4", Параметр4);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%5", Параметр5);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%6", Параметр6);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%7", Параметр7);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%8", Параметр8);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%9", Параметр9);
	Возврат ШаблонСтроки;
	
КонецФункции


&НаКлиенте
Функция СписокИсходящихДокументов(Thumbprint_1,Маркер, Номер,датаДок) Экспорт
	
	 МобильныйСайтДляПолученияИсходящих= Thumbprint_1.МобильныйСайтДляПолученияИсходящих;
	
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
		Прокси=Новый ИнтернетПрокси;
		Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
		СоединениеFilerMobileAPI=Новый HTTPСоединение(МобильныйСайтДляПолученияИсходящих,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	Иначе
				
		СоединениеFilerMobileAPI=Новый HTTPСоединение(МобильныйСайтДляПолученияИсходящих,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	КонецЕсли;
	
	
	
	ЗапросСпискаДокументов = Новый HTTPЗапрос;
	ЗапросСпискаДокументов.АдресРесурса = "api/v1/documents";
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Заголовки.Вставить("Session-Token", Маркер);
	ЗапросСпискаДокументов.Заголовки = Заголовки;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Filter", Новый Структура);
	ПараметрыЗапроса.Filter.Вставить("FolderType", "B2BOut");
	ПараметрыЗапроса.Filter.Вставить("FilterItems", Новый Массив);
	
	ДатаНачала = Неопределено;
	ДатаОкончания = Неопределено;
	ОтборПоКонтрагенту = Неопределено;
	//Номер = Неопределено;
	ОтборПоСумме = Неопределено;
	ОтборСтатусДокументооборота = Неопределено;
	ОтборВидДокумента = Неопределено;
	
	ОтборПоСумме = Новый Структура("Использовать, ВидСравнения, Сумма", Ложь,
			0, 0);
			
			ДатаНачала=НачалоДня(ДатаДок)-2*24*60*60;
	Фильтры = Новый Структура;
	Фильтры.Вставить("Offset",0);
	Фильтры.Вставить("Count",30);
	//Фильтры.Свойство("ДатаНачала", ДатаНачала);
	//Фильтры.Свойство("ДатаОкончания", Дата(1,1,1));
	//Фильтры.Свойство("ОтборПоКонтрагенту", "");
	//Фильтры.Свойство("Номер", Номер);
	//Фильтры.Свойство("ОтборПоСумме", ОтборПоСумме);
	//Фильтры.Свойство("ОтборСтатусДокументооборота", "");
	//Фильтры.Свойство("ОтборВидДокумента", "");
	
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда 
		ФильтрПоДате = Новый Структура;
		ФильтрПоДате.Вставить("FilterType", 1);
		ФильтрПоДате.Вставить("FilterCondition", Новый Структура);
		Если ЗначениеЗаполнено(ДатаНачала)Тогда
			ФильтрПоДате.FilterCondition.Вставить("FromDate", Формат(ДатаНачала, "ДФ=yyyy-MM-ddTHH:mm:ss"));
		КонецЕсли; 
		ПараметрыЗапроса.Filter.FilterItems.Добавить(ФильтрПоДате);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Номер) Тогда
		ФильтрПоНомеру = Новый Структура;
		ФильтрПоНомеру.Вставить("FilterType", 2);
		ФильтрПоНомеру.Вставить("FilterCondition", Новый Структура);
		ФильтрПоНомеру.FilterCondition.Вставить("Value", Номер);
		ПараметрыЗапроса.Filter.FilterItems.Добавить(ФильтрПоНомеру);		
	КонецЕсли;
	
	
	ПараметрыЗапроса.Вставить("PagingInfo", Новый Структура);
	
	ПараметрыЗапроса.PagingInfo.Вставить("IsDescOrder", Истина);
	
	
	Смещение=0;
	
	
	Тотал=1;
	Массив = Новый Массив;
	Пока смещение*30<ТОтал Цикл
		
		ПараметрыЗапроса.PagingInfo.Вставить("Offset",Смещение);
		ПараметрыЗапроса.PagingInfo.Вставить("Count", 30);
		
		ЗапросСпискаДокументов.УстановитьТелоИзСтроки(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СтруктураВJSON(ПараметрыЗапроса));
		
		Попытка
			Ответ = СоединениеFilerMobileAPI.ОтправитьДляОбработки(ЗапросСпискаДокументов);
		Исключение
			//ПараметрыСоединения.СоединениеУстановлено = Ложь;
			//ИнформацияОбОшибке = ИнформацияОбОшибке();
			//ТекстСообщения = ПодставитьПараметрыВСтроку(
			//	НСтр("ru = '%1. Подробности см. в журнале регистрации'"),
			//	КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			Возврат Массив;
			//ДобавитьЗаписьЖурналаРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), Истина);	
	//		СообщиТекстСообщения;
		КонецПопытки;
		
		Если Ответ.КодСостояния <> 200 Тогда
			Возврат Массив;
		Иначе
			ОтветСтрокой = Ответ.ПолучитьТелоКакСтроку();
		//КонецЕсли;
			
			СтруктураОтвета = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СтруктураИзJSON(ОтветСтрокой);
			Для Каждого Документ Из СтруктураОтвета.DocumentModel Цикл
				
				Структура = Новый Структура;
				Структура.Вставить("PackageChainId", Документ.PackageChainId); 
				Структура.Вставить("Дата", СтрокаВДату(Документ.Date)); 
				Структура.Вставить("Номер", Документ.Number); 
				Структура.Вставить("ВидДокумента", Документ.DocumentType); 
				Структура.Вставить("СуммаДокумента", Документ.Sum); 
				Структура.Вставить("Контрагент", Документ.Receiver); 
				Структура.Вставить("Организация", Документ.Sender); 
				Структура.Вставить("ДатаЭД", СтрокаВДату(Документ.SendReceiveDT)); 
				Структура.Вставить("Статус", Документ.CompletionStatus); 
				Структура.Вставить("ИдентификаторДокументооборота", Документ.DocFlowID); 
				Массив.Добавить(Структура);
				
			КонецЦикла;
			
		КонецЕсли;
		Тотал=СтруктураОтвета.TotalCount;
		Смещение=Смещение+1;
	Конеццикла;
	Возврат Массив;
КонецФункции


&НаКлиенте
Функция ОписаниеТипаДата(ЧастиДаты) Экспорт

	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));

	КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты);

	Возврат Новый ОписаниеТипов(Массив, , , КвалификаторДаты);

КонецФункции


&НаКлиенте
Функция ЗаменитьОдниСимволыДругими(ЗаменяемыеСимволы, Значение, СимволыЗамены) Экспорт
	
	Результат = Значение;
	
	Для НомерСимвола = 1 По СтрДлина(ЗаменяемыеСимволы) Цикл
		Результат = СтрЗаменить(Результат, Сред(ЗаменяемыеСимволы, НомерСимвола, 1), Сред(СимволыЗамены, НомерСимвола, 1));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


&НаКлиенте
Функция СтрНайти_Сконца_Х(Строка_1,Строка_2) Экспорт
	
	Если СтрДлина(Строка_1)<СтрДлина(Строка_2) Тогда
		Возврат 0;
	КонецЕсли;
	
	Строка_Поиска="";
	Для Сч=СтрДлина(Строка_1) По 1 Цикл
		Строка_Поиска=Сред(Строка_1,Сч,1);
	Конеццикла;
	
	Строка_Ищем="";
	Для Сч=СтрДлина(Строка_2) По 1 Цикл
		Строка_Ищем=Сред(Строка_2,Сч,1);
	Конеццикла;
	
	НомерК=Найти(Строка_Поиска,Строка_Ищем);
	Если НомерК=0 Тогда
		Возврат 0
	Иначе
		Возврат СтрДлина(Строка_1)-НомерК+1
	КонецЕсли;
	//Возврат Найти(ДляПроверки,Строка_2);
	
КонецФункции


&НаКлиенте
Функция СтрокаВДату(СтрокаДатыТХЦ)
	
	ПозицияТочки = СтрНайти_Сконца_Х(СтрокаДатыТХЦ, ".");
	Если ПозицияТочки = 0 Тогда
		СтрокаДаты = СтрокаДатыТХЦ;
	Иначе
		СтрокаДаты = Лев(СтрокаДатыТХЦ, ПозицияТочки - 1);
	КонецЕсли;
	
	СтрокаДаты = ЗаменитьОдниСимволыДругими("T :/\-.", СтрокаДаты, "");
	ОписаниеТипаДата = ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
	Результат = ОписаниеТипаДата.ПривестиЗначение(СтрокаДаты);
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	Иначе
		Возврат ТекущаяДата();
	КонецЕсли;
	
КонецФункции



&НаКлиенте
Функция ПодключитьсяКЭДОТХЦ(Thumbprint_1,Идентификатор,HTTPСервисЗапрос,СерийныйНомер="") Экспорт
	
	CAPICOM_CURRENT_USER_STORE=2;
	CAPICOM_MY_STORE="My";
	CAPICOM_OTHER_STORE="AddressBook";
	CAPICOM_STORE_OPEN_READ_ONLY=0;
	CAPICOM_CERTIFICATE_FIND_TIME_VALID=9;
	CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED = 2;

	
	СертификатНайден=ложь;
	Попытка
		// формируем список наших сертификатов
		ТекЭлемент=Неопределено;
		СписокНашихСертификатов=Новый СписокЗначений;
		
		
		Store=Новый COMОбъект("CAPICOM.Store");
		Store.Open(CAPICOM_CURRENT_USER_STORE,CAPICOM_MY_STORE,CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);
		Certs=Store.Certificates;
		ValidCerts=Certs;//.Find(CAPICOM_CERTIFICATE_FIND_TIME_VALID,ТекДата,-1);
		Для CertNum=1 По ValidCerts.Count Цикл
			
			CurCert=ValidCerts.Item(CertNum);
			Thumbprint_2=CurCert.Thumbprint;
			СерийныйНомер=CurCert.SerialNumber;
			Если Thumbprint_2=Thumbprint_1.Thumbprint_1 Тогда
				ВыбСертификат=CurCert;
				СертификатНайден=Истина;
				Прервать;
			Конецесли;
		КонецЦикла;
	Исключение
		ТекстОшибки=СтрЗаменить(ОписаниеОшибки(),"'","");
		Сообщить(NStr("ru = 'Ошибка при работе с хранилищем сертификатов! (Возможно, не установлен модуль CAPICOM)"+Символы.ПС+"Описание ошибки: "+ТекстОшибки+"'", "ru"));
		Возврат Неопределено;
	КонецПопытки;
	Если СертификатНайден=Ложь Тогда
		Сообщить(NStr("ru = 'Не нашли сертификатв хранилище сертификатов по идентификатору "+Thumbprint_1.Thumbprint_1, "ru"));
		Возврат Неопределено;
	КонецЕсли;
	
	
	ПараметрыЗапроса="API/CertificateLogin";
	//Если ЗначениеЗаполнено(Идентификатор) тогда
	//	ПараметрыЗапроса=ПараметрыЗапроса+"?edxClientId=" + Идентификатор;
	//КонецЕсли;
	
	HTTPЗапрос=Новый HTTPЗапрос(ПараметрыЗапроса);
	
	СтрокаСертификата=ВЫбСертификат.Export();
	ДанныеСертификата = Base64Значение(СтрокаСертификата);
	
	HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ДанныеСертификата);
	HTTPЗапрос.Заголовки.Вставить("Integrator-Id", "Kartoteka_9AFE5408-C930-47FA-9CE4-FAE615EED09E");
	//HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/pkcs7-mime;charset=UTF-8");
	//HTTPЗапрос.Заголовки.Вставить("ContentLength", СтрДлина(ДанныеСертификата.Размер()));
	//HTTPЗапрос.Заголовки.Вставить("ContentLength", СтрДлина(ДанныеСертификата.Размер()));
	Ответ = HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	
	
	Если Ответ.КодСостояния<>200 Тогда
		Сообщить(Ответ.ПолучитьтелоКакСтроку());
		Возврат Неопределено;
	Иначе
		КриптоМаркер = Ответ.ПолучитьТелоКакДвоичныеДанные();
		
	КонецЕсли;

	ЗашифрованныеДанныеСтрокой = base64Строка(КриптоМаркер);
		//Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(ДвоичнДанные,КодировкаТекста.OEM);

//	ЗашифрованныеДанныеСтрокой=СтрЗаменить(ЗашифрованныеДанныеСтрокой,Символы.ПС,"");
//	ЗашифрованныеДанныеСтрокой=СтрЗаменить(ЗашифрованныеДанныеСтрокой,Символы.ВК,"");
	
	//КомпД=НовыйEncryptedData
	
	Компонента = Новый COMОбъект("CryptoAX.Encryptor");
 	ДвоичнД=Компонента.MrDecrypt(ЗашифрованныеДанныеСтрокой);
	
//	Попытка
		
		//EncryptedData=Новый COMОбъект("CAPICOM.EnvelopedData");
//		EncryptedData=Новый COMОбъект("CAPICOM.EnvelopedData");
		

//	Исключение
//		Сообщить("Необходимо запустить 1с с параметром x32 bit");
//		Возврат неопределено;
//	КонецПопытки;
//	EncryptedData.Decrypt(ЗашифрованныеДанныеСтрокой);
	
//	ДвоичнД=EncryptedData.Content;
	
	
	ДвоичнДанные=base64Значение(ДвоичнД);
	//ДвоичнДанные=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ДвоичнД,КодировкаТекста.UTF16,Ложь);
	
	//Возврат ПолучитьСтрокуИзДвоичныхДанных(ДвоичнДанные,КодировкаТекста.OEM);
	Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(ДвоичнДанные,КодировкаТекста.OEM);
Конецфункции


&НаКлиенте
Процедура ПодписатьФайлXML(Знач ИмяВр,Текущийпользователь,Имя_вр_1)	Экспорт
	
	
	    cadesplugin=Новый Структура();
        cadesplugin.Вставить("CAPICOM_LOCAL_MACHINE_STORE", 1);
        cadesplugin.Вставить("CAPICOM_CURRENT_USER_STORE", 2);
        cadesplugin.Вставить("CADESCOM_LOCAL_MACHINE_STORE", 1);
        cadesplugin.Вставить("CADESCOM_CURRENT_USER_STORE", 2);
        cadesplugin.Вставить("CADESCOM_CONTAINER_STORE", 100);

        cadesplugin.Вставить("CAPICOM_MY_STORE", "My");

        cadesplugin.Вставить("CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED", 2);

        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME", 1);

        cadesplugin.Вставить("CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED", 0);
        cadesplugin.Вставить("CADESCOM_XML_SIGNATURE_TYPE_ENVELOPING", 1);
        cadesplugin.Вставить("CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE", 2);

        cadesplugin.Вставить("XmlDsigGost3410UrlObsolete", "http://www.Вставить(""w3.Вставить(""org/2001/04/xmldsig-more#gostr34102001-gostr3411");
        cadesplugin.Вставить("XmlDsigGost3411UrlObsolete", "http://www.Вставить(""w3.Вставить(""org/2001/04/xmldsig-more#gostr3411");
        cadesplugin.Вставить("XmlDsigGost3410Url", "urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102001-gostr3411");
        cadesplugin.Вставить("XmlDsigGost3411Url", "urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr3411");

        cadesplugin.Вставить("CADESCOM_CADES_DEFAULT", 0);
        cadesplugin.Вставить("CADESCOM_CADES_BES", 1);
        cadesplugin.Вставить("CADESCOM_CADES_T", 5);
        cadesplugin.Вставить("CADESCOM_CADES_X_LONG_TYPE_1", 93);

        cadesplugin.Вставить("CADESCOM_ENCODE_BASE64", 0);
        cadesplugin.Вставить("CADESCOM_ENCODE_BINARY", 1);
        cadesplugin.Вставить("CADESCOM_ENCODE_ANY", -1);

        cadesplugin.Вставить("CAPICOM_CERTIFICATE_INCLUDE_CHAIN_EXCEPT_ROOT", 0);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN", 1);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY", 2);

        cadesplugin.Вставить("CAPICOM_CERT_INFO_SUBJECT_SIMPLE_NAME", 0);
        cadesplugin.Вставить("CAPICOM_CERT_INFO_ISSUER_SIMPLE_NAME", 1);

        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_SHA1_HASH", 0);                              
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME", 1);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_ISSUER_NAME", 2);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_ROOT_NAME", 3);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_TEMPLATE_NAME", 4);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_EXTENSION", 5);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY", 6);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_APPLICATION_POLICY", 7);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_CERTIFICATE_POLICY", 8);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_TIME_VALID", 9);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_TIME_NOT_YET_VALID", 10);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_TIME_EXPIRED", 11);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_KEY_USAGE", 12);

        cadesplugin.Вставить("CAPICOM_DIGITAL_SIGNATURE_KEY_USAGE", 128);

        cadesplugin.Вставить("CAPICOM_PROPID_ENHKEY_USAGE", 9);

        cadesplugin.Вставить("CAPICOM_OID_OTHER", 0);
        cadesplugin.Вставить("CAPICOM_OID_KEY_USAGE_EXTENSION", 10);

        cadesplugin.Вставить("CAPICOM_EKU_CLIENT_AUTH", 2);
        cadesplugin.Вставить("CAPICOM_EKU_SMARTCARD_LOGON", 5);
        cadesplugin.Вставить("CAPICOM_EKU_OTHER", 0);

        cadesplugin.Вставить("CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME", 0);
        cadesplugin.Вставить("CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME", 1);
        cadesplugin.Вставить("CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION", 2);
        cadesplugin.Вставить("CADESCOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME", 0);
        cadesplugin.Вставить("CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME", 1);
        cadesplugin.Вставить("CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION", 2);
        cadesplugin.Вставить("CADESCOM_ATTRIBUTE_OTHER", -1);

        cadesplugin.Вставить("CADESCOM_STRING_TO_UCS2LE", 0);
        cadesplugin.Вставить("CADESCOM_BASE64_TO_BINARY", 1);

        cadesplugin.Вставить("CADESCOM_DISPLAY_DATA_NONE", 0);
        cadesplugin.Вставить("CADESCOM_DISPLAY_DATA_CONTENT", 1);
        cadesplugin.Вставить("CADESCOM_DISPLAY_DATA_ATTRIBUTE", 2);

        cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_RC2", 0);
        cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_RC4", 1);
        cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_DES", 2);
        cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_3DES", 3);
        cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_AES", 4);
        cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_GOST_28147_89", 25);

        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_SHA1", 0);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_MD2", 1);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_MD4", 2);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_MD5", 3);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_SHA_256", 4);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_SHA_384", 5);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_SHA_512", 6);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_CP_GOST_3411", 100);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256", 101);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512", 102);

        cadesplugin.Вставить("LOG_LEVEL_DEBUG", 4);
        cadesplugin.Вставить("LOG_LEVEL_INFO", 2);
        cadesplugin.Вставить("LOG_LEVEL_ERROR", 1);

        cadesplugin.Вставить("CADESCOM_AllowNone", 0);
        cadesplugin.Вставить("CADESCOM_AllowNoOutstandingRequest", "0x1");
        cadesplugin.Вставить("CADESCOM_AllowUntrustedCertificate", "0x2");
        cadesplugin.Вставить("CADESCOM_AllowUntrustedRoot", "0x4");
        cadesplugin.Вставить("CADESCOM_SkipInstallToStore", "0x10000000");
	
	
	
	CAPICOM_CURRENT_USER_STORE=2;
	CAPICOM_MY_STORE="My";
	CAPICOM_OTHER_STORE="AddressBook";
	CAPICOM_STORE_OPEN_READ_ONLY=0;
	CAPICOM_CERTIFICATE_FIND_TIME_VALID=9;
	CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED = 2;

	НашлиСертификат=Ложь;
	
Попытка
		// формируем список наших сертификатов
		ТекЭлемент=Неопределено;
		СписокНашихСертификатов=Новый СписокЗначений;
		
		Store=Новый COMОбъект("CAPICOM.Store");
		Store.Open(CAPICOM_CURRENT_USER_STORE,CAPICOM_MY_STORE,CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);
		Certs=Store.Certificates;
		ValidCerts=Certs;//.Find(CAPICOM_CERTIFICATE_FIND_TIME_VALID,ТекДата,-1);
		Для CertNum=1 По ValidCerts.Count Цикл
			
			CurCert=ValidCerts.Item(CertNum);
			Thumbprint=CurCert.Thumbprint;
			СерийныйНомер=CurCert.SerialNumber;
			Если Thumbprint=Текущийпользователь Тогда
				ВыбСертификат=CurCert;
				НашлиСертификат=Истина;
				Прервать;
			Конецесли;
		КонецЦикла;
	Исключение
		ТекстОшибки=СтрЗаменить(ОписаниеОшибки(),"'","");
		Сообщить(NStr("ru = 'Ошибка при работе с хранилищем сертификатов! (Возможно, не установлен модуль CAPICOM)"+Символы.ПС+"Описание ошибки: "+ТекстОшибки+"'", "ru"));
		Возврат;
	КонецПопытки;
	
	Если НашлиСертификат=Ложь Тогда
		Сообщить("В системе нет сертификата!!");
		Возврат;
	КонецЕсли;
	
oSigner = Новый COMОбъект("CAdESCOM.CPSigner"); // Объект, задающий параметры создания и содержащий информацию об усовершенствованной подписи. 
	
//	oSigningTimeAttr=Новый COMОбъект("CADESCOM.CPAttribute");
//
    //oSigningTimeAttr.propset_Name(cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME);
	//oSigningTimeAttr.Name=cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME;
	//oTimeNow = Текущаядата();
	//oSigningTimeAttr.Value=oTimeNow;
	//attr = oSigner.AuthenticatedAttributes2;
	//attr.Add(oSigningTimeAttr);
	// oDocumentNameAttr = Новый COMОбъект("CADESCOM.CPAttribute");
	//  oDocumentNameAttr.Name=cadesplugin.CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME;
	//  oDocumentNameAttr.Value="CRPT";
	//  attr.Add(oDocumentNameAttr);
          oSigner.Certificate=ВыбСертификат;

		  oSignedXML = Новый COMОбъект("CAdESCOM.SignedXML");
		  
		   pubKey = ВыбСертификат.PublicKey();
        algo = pubKey.Algorithm;
        algoOid = algo.Value;

        Если (algoOid = "1.2.643.7.1.1.1.1") Тогда   // алгоритм подписи ГОСТ Р 34.10-2012 с ключом 256 бит
            signMethod = "urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102012-gostr34112012-256";
            digestMethod = "urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34112012-256";
        
        ИначеЕсли (algoOid = "1.2.643.7.1.1.1.2") Тогда   // алгоритм подписи ГОСТ Р 34.10-2012 с ключом 512 бит
            signMethod = "urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102012-gostr34112012-512";
            digestMethod = "urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34112012-512";
        ИначеЕсли (algoOid = "1.2.643.2.2.19") Тогда  // алгоритм ГОСТ Р 34.10-2001
            signMethod = "urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102001-gostr3411";
            digestMethod = "urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr3411";
        Иначе
            ВызватьИсключение "Поддерживается XML подпись только сертификатами с алгоритмом ГОСТ Р 34.10-2012, ГОСТ Р 34.10-2001";
        КонецЕсли;

            oSignedXML.Content=ИмяВр;
            oSignedXML.SignatureType=cadesplugin.CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED;
            oSignedXML.SignatureMethod=signMethod;
            oSignedXML.DigestMethod=digestMethod;

                Имя_вр_1 = oSignedXML.Sign(oSigner);
		
		
		  Возврат;
		  
           oSignedData = Новый COMОбъект("CAdESCOM.CadesSignedData");
                // Данные на подпись ввели
				//Если НЕ ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВернутьНеИспользоватьCAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY() Тогда
           				//oSigner.Options=cadesplugin.CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY;
           				oSigner.Options=cadesplugin.CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN;
				//	КонецЕсли;
//			oSigner.TSAAddress = "http://cryptopro.ru/tsp/";
			//oSigner.OCSPAddress = "http://cryptopro.ru/ocsp/";
			//Если Уже64=Истина Тогда
             oSignedData.ContentEncoding=cadesplugin.CADESCOM_BASE64_TO_BINARY; //
			ИмяВр=ИмяВр;
				
		   //ИначеЕсли   Открепленная=Истина Тогда
             //oSignedData.ContentEncoding=cadesplugin.CADESCOM_BASE64_TO_BINARY; //
			//ИмяВр=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ИмяВр));
		  //Иначе
            //  oSignedData.ContentEncoding=cadesplugin.CADESCOM_STRING_TO_UCS2LE; //
		//КонецЕсли;
                      oSignedData.Content=
			 ИмяВр;
			 
			 
			 //Если Открепленная=Истина Тогда
               Имя_вр_1 = oSignedData.SignCades(oSigner,cadesplugin.CADESCOM_CADES_BES);
			   
			   
			   Возврат;
	ТекДата=ТекущаяДата();
	
	СохранённыйОтпечатокДекларанта=Неопределено;
	СохранённыеОтпечаткиПолучателей=Новый Массив;
	// восстанавливаем настройки
	НашлиСертификат=Ложь;
	Попытка
		// формируем список наших сертификатов
		ТекЭлемент=Неопределено;
		СписокНашихСертификатов=Новый СписокЗначений;
		
		Store=Новый COMОбъект("CAPICOM.Store");
		Store.Open(CAPICOM_CURRENT_USER_STORE,CAPICOM_MY_STORE,CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);
		Certs=Store.Certificates;
		ValidCerts=Certs;//.Find(CAPICOM_CERTIFICATE_FIND_TIME_VALID,ТекДата,-1);
		Для CertNum=1 По ValidCerts.Count Цикл
			
			CurCert=ValidCerts.Item(CertNum);
			Thumbprint=CurCert.Thumbprint;
			СерийныйНомер=CurCert.SerialNumber;
			Если Thumbprint=Текущийпользователь Тогда
				ВыбСертификат=CurCert;
				НашлиСертификат=Истина;
				Прервать;
			Конецесли;
		КонецЦикла;
	Исключение
		ТекстОшибки=СтрЗаменить(ОписаниеОшибки(),"'","");
		Сообщить(NStr("ru = 'Ошибка при работе с хранилищем сертификатов! (Возможно, не установлен модуль CAPICOM)"+Символы.ПС+"Описание ошибки: "+ТекстОшибки+"'", "ru"));
		Возврат;
	КонецПопытки;
	Если НашлиСертификат=Ложь Тогда
		Сообщить("В системе нет сертификата!!");
		Возврат;
	КонецЕсли;


	//Если     Открепленная=Истина  ТОгда
	////Ф=ПолучитьИмяВременногоФайла();
	//Текст=Новый ТекстовыйДокумент;
	//Текст.ДобавитьСтроку(ИмяВр);
	////Текст.Записать(Ф);
	////ИмяФ_1=ПолучитьИмяВременногоФайла();
	//
	//КонецЕсли;
	
	oSigner = Новый COMОбъект("CAdESCOM.CPSigner"); // Объект, задающий параметры создания и содержащий информацию об усовершенствованной подписи. 
	
	oSigningTimeAttr=Новый COMОбъект("CADESCOM.CPAttribute");

    //oSigningTimeAttr.propset_Name(cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME);
    oSigningTimeAttr.Name=cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME;
    oTimeNow = Текущаядата();
    oSigningTimeAttr.Value=oTimeNow;
    attr = oSigner.AuthenticatedAttributes2;
    attr.Add(oSigningTimeAttr);
     oDocumentNameAttr = Новый COMОбъект("CADESCOM.CPAttribute");
      oDocumentNameAttr.Name=cadesplugin.CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME;
      oDocumentNameAttr.Value="CRPT";
      attr.Add(oDocumentNameAttr);
          oSigner.Certificate=ВыбСертификат;

           oSignedData = Новый COMОбъект("CAdESCOM.CadesSignedData");
                // Данные на подпись ввели
				//Если НЕ ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВернутьНеИспользоватьCAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY() Тогда
           				//oSigner.Options=cadesplugin.CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY;
           				oSigner.Options=cadesplugin.CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN;
				//	КонецЕсли;
//			oSigner.TSAAddress = "http://cryptopro.ru/tsp/";
			//oSigner.OCSPAddress = "http://cryptopro.ru/ocsp/";
			//Если Уже64=Истина Тогда
             oSignedData.ContentEncoding=cadesplugin.CADESCOM_BASE64_TO_BINARY; //
			ИмяВр=ИмяВр;
				
		   //ИначеЕсли   Открепленная=Истина Тогда
             //oSignedData.ContentEncoding=cadesplugin.CADESCOM_BASE64_TO_BINARY; //
			//ИмяВр=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ИмяВр));
		  //Иначе
            //  oSignedData.ContentEncoding=cadesplugin.CADESCOM_STRING_TO_UCS2LE; //
		//КонецЕсли;
                      oSignedData.Content=
			 ИмяВр;
			 
			 
			 //Если Открепленная=Истина Тогда
               Имя_вр_1 = oSignedData.SignCades(oSigner,cadesplugin.CADESCOM_CADES_BES);
 			    //Имя_вр_1 =Base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Имя_вр_1));
				//Иначе
               //Имя_вр_1 = oSignedData.SignCades(oSigner, cadesplugin.CADESCOM_CADES_BES);
	             //    КонецЕсли;
	
	
//    ПолучитьСписокСертификатов(2, Истина,ОповещенияПослеВыполения,ИмяВр,Текущийпользователь,ЭтаФорма,ОтветСтруктура);
	
	
КонецПроцедуры		


&НаКлиенте
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

&НаКлиенте
Функция ПодключилисьОк(Thumbprint_1,CSRFДляНК,Срегистра,КукиДляНК,HTTPСервисЗапрос,СерийныйНомер="") Экспорт
	
	
	
	СтруктураНастроек=Неопределено;
	СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
	СерийныйНомер=СтруктураНастроек.СерийныйНомер;
		Если Не ЗначениеЗаполнено(СРегистра)  ИЛИ Не ЗначениеЗаполнено(СерийныйНомер) тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
				КонецЕсли;
					
		КонецЕсли;
	
	
	//СтруктураНастроек=Неопределено;
	//СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
	
	
	
	//СерийныйНомер=Thumbprint_1.СерийныйНомер;
	//Куки=Thumbprint_1.КукиДляНК;
	
	//СерийныйНомер=СтруктураНастроек.СерийныйНомер;
	Если НЕ ЗначениеЗаполнено(СРегистра) ИЛИ Не ЗначениеЗаполнено(СтруктураНастроек.СерийныйНомер) Тогда
		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);
		//СерийныйНомер=СтруктураНастроек.СерийныйНомер;
		СтруктураНастроек.КукиДляНК="";
		СтруктураНастроек.CSRFДляНК="";
	КонецЕсли;
	
	
	КукиДляНК="";
	CSRFДляНК="";
	Если ЗначениеЗаполнено(СРегистра) И
		ЗначениеЗаполнено(СерийныйНомер)
		И ЗначениеЗАполненО(СтруктураНастроек.КукиДляНК) 
		И ЗначениеЗаполнено(СтруктураНастроек.CSRFДляНК) Тогда
		КукиДляНК=СтруктураНастроек.КукиДляНК;
		CSRFДляНК=СтруктураНастроек.CSRFДляНК;
		
		Возврат Истина;
	КонецЕсли;
	
	
	
	
	Если ЗначениеЗаполнено(Срегистра) тогда
		
		
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.КаталогСайт,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.КаталогСайт,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
		
			Куки="";
			////СНАЧАЛА РЕГИСТРИРУЕМ
			
			
			
			Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьJONТокен(СРегистра);
			
			HTTPЗапрос=Новый HTTPЗапрос("rest/elk/auth");
			HTTPЗапрос.Заголовки.Вставить("Accept","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
			HTTPЗапрос.Заголовки.Вставить("Origin","https://"+Thumbprint_1.АдресДляПолученияТокена);
			
			HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			
			#Если ВебКлиент Тогда
					HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);	
			#Иначе
					HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);	
			#КонецЕсли
			
			
			Попытка
				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
			Исключение     
				Сообщить("Не удалось подключиться к НК (национальному каталогу маркированных товаров)");
				Возврат Ложь;
			КонецПопытки;
			
			КК=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
			
			
			Попытка
				HTTPЗапрос=Новый HTTPЗапрос("profile?elkCode="+КК.elkCode);
			Исключение
				Сообщить("Не удалось подключиться к НК (национальному каталогу маркированных товаров)");
				Возврат Ложь;
				
			КонецПопытки;
			HTTPЗапрос.Заголовки.Вставить("Accept","text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
			
			//HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
			//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			
			//Куки="certSerial="+СерийныйНомер+"; count=2; tokenPart1="+Сред(СРегистра,1,4000)+"; "+
			//"tokenPart2="+Сред(СРегистра,4001) ;
			
Если ЗначениеЗаполнено(Ответ.Заголовки["Set-Cookie"]) Тогда
			Куки=СтрЗаменить(Ответ.Заголовки["Set-Cookie"],"path=/,","");
		
			Куки = "";
			МассивКуков = РазложитьСтрокуВМассивПодстрок(Ответ.Заголовки["Set-Cookie"], "; ");
			Для каждого Кук Из МассивКуков Цикл
				
				Если Лев(Кук, 5) = "_sclb" Тогда
					Куки = Куки + Кук;
				ИначеЕсли Лев(Кук, 4) = "path" И СтрДлина(Кук) > 9 Тогда
				    Куки = Куки + "; " + СтрЗаменить(Кук, "path=/, ", "");
				ИначеЕсли СтрДлина(Кук) > 9 Тогда
				    Куки = Куки + "; " + СтрЗаменить(Кук, "path=/, ", "");
				КонецЕсли;
				
			КонецЦикла;
ИначеЕсли ЗначениеЗаполнено(Ответ.Заголовки["set-cookie"]) Тогда
			Куки=СтрЗаменить(Ответ.Заголовки["set-cookie"],"path=/,","");
		
			Куки = "";
			МассивКуков = РазложитьСтрокуВМассивПодстрок(Ответ.Заголовки["set-cookie"], "; ");
			Для каждого Кук Из МассивКуков Цикл
				
				Если Лев(Кук, 5) = "_sclb" Тогда
					Куки = Куки + Кук;
				ИначеЕсли Лев(Кук, 4) = "path" И СтрДлина(Кук) > 9 Тогда
				    Куки = Куки + "; " + СтрЗаменить(Кук, "path=/, ", "");
				ИначеЕсли СтрДлина(Кук) > 9 Тогда
				    Куки = Куки + "; " + СтрЗаменить(Кук, "path=/, ", "");
				КонецЕсли;
				
			КонецЦикла;
		Конецесли; 
			
			HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
			
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			
			
			Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЕлКоде(КК.elkCode);
			
						
			HTTPЗапрос=Новый HTTPЗапрос("rest/session");
			HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
			//HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
			HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Credentials", "true");
			HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Headers", "Origin, X-Requested-With, Cont…cept, Credentials, Set-Cookie");
			HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Methods", "*");
			
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "private, max-age=0, no-cache, no-store");
			HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
	//		HTTPЗапрос.Заголовки.Вставить("Sec-Fetch-Dest","empty");
	//		HTTPЗапрос.Заголовки.Вставить("Sec-Fetch-Mode", "cors");
			HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
			
			HTTPЗапрос.Заголовки.Вставить("Host", Thumbprint_1.КаталогСайт);
			//"xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai");
			HTTPЗапрос.Заголовки.Вставить("Origin", "https://"+Thumbprint_1.КаталогСайт);
			HTTPЗапрос.Заголовки.Вставить("Referer", "https://"+Thumbprint_1.КаталогСайт+"/profile?elkCode="+КК.elkCode);
			HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0");
			
			HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
			
			СтрокаОтвет =Ответ.ПолучитьТелоКакСтроку(); 
			//РасшифроватьGZIP(Ответ.ПолучитьТелоКакДвоичныеДанные());
			//Чтение = Новый ЧтениеJSON;
			//Чтение.УстановитьСтроку(СтрокаОтвет);
			//СтрукттураОтвет = ПрочитатьJSON(Чтение);
			//Чтение.Закрыть();
			СтрукттураОтвет=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(СтрокаОтвет);
			
//			Куки=Куки+"; certSerial="+СерийныйНомер;
			NNN=СтрукттураОтвет;
		
		Если ЗначениеЗаполнено(Ответ.Заголовки["Set-Cookie"]) Тогда
			Куки=СтрЗаменить(Ответ.Заголовки["Set-Cookie"],"path=/,","");
		
			Куки = "";
			МассивКуков = РазложитьСтрокуВМассивПодстрок(Ответ.Заголовки["Set-Cookie"], "; ");
			Для каждого Кук Из МассивКуков Цикл
				
				Если Лев(Кук, 5) = "_sclb" Тогда
					Куки = Куки + Кук;
				ИначеЕсли Лев(Кук, 4) = "path" И СтрДлина(Кук) > 9 Тогда
				    Куки = Куки + "; " + СтрЗаменить(Кук, "path=/, ", "");
				ИначеЕсли СтрДлина(Кук) > 9 Тогда
				    Куки = Куки + "; " + СтрЗаменить(Кук, "path=/, ", "");
				КонецЕсли;
				
			КонецЦикла;
		ИначеЕсли ЗначениеЗаполнено(Ответ.Заголовки["set-cookie"]) Тогда
			Куки=СтрЗаменить(Ответ.Заголовки["set-cookie"],"path=/,","");
		
			Куки = "";
			МассивКуков = РазложитьСтрокуВМассивПодстрок(Ответ.Заголовки["set-cookie"], "; ");
			Для каждого Кук Из МассивКуков Цикл
				
				Если Лев(Кук, 5) = "_sclb" Тогда
					Куки = Куки + Кук;
				ИначеЕсли Лев(Кук, 4) = "path" И СтрДлина(Кук) > 9 Тогда
				    Куки = Куки + "; " + СтрЗаменить(Кук, "path=/, ", "");
				ИначеЕсли СтрДлина(Кук) > 9 Тогда
				    Куки = Куки + "; " + СтрЗаменить(Кук, "path=/, ", "");
				КонецЕсли;
				
			КонецЦикла;
		Конецесли; 
			//NNN=ОбщиеМетоды_НаКлиент_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
			Текст="{";
			crsfToken="";
			Для Каждого Стр_1 Из NNN Цикл
				Если Стр_1.Ключ="sessionId" ИЛИ Стр_1.Ключ="sessionName" тогда
					Продолжить;
				КонецЕсли;
				Если Текст<>"{" Тогда
					Текст=Текст+",";
				КонецЕсли;
				Если ТипЗнч(Стр_1.Значение)=Тип("Число")
					ИЛИ ТипЗнч(Стр_1.Значение)=Тип("Булево")
					Тогда
					Значение=Формат(Стр_1.Значение,"ЧГ=")
				Иначе
					Значение=""""+Стр_1.Значение+"""";
				КонецЕсли;
				
				Если Стр_1.Ключ="csrfToken" Тогда
					crsfToken=Стр_1.Значение;
				КонецЕсли;
				
				Текст=Текст+""""+Стр_1.Ключ+""":"+Значение;
				
			Конеццикла;
			Текст=Текст+"}";
			Если ЗначениеЗаполненО(Куки) тогда
				Куки=Куки+"; "	
			Конецесли;
			Куки=Куки+"csrfToken="+crsfToken;
			Куки=Куки+"; userInfo="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Текст);
			Куки=Куки+"; isAuth=true; ";
			Куки=Куки+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(
			"columns={""accountType"":""producer"",""columns"":[{""name"":""Фото"",""show"":true,""accessor"":""photo"",""position"":0,""sortable"":false,""maxWidth"":80,""style"":{""justifyContent"":""center""}},{""name"":""Дата"",""show"":true,""position"":1,""accessor"":""created"",""sortable"":false,""maxWidth"":100},{""name"":""Код товара"",""show"":true,""position"":2,""accessor"":""gtin"",""sortable"":false,""width"":160},{""name"":""Наименование"",""show"":true,""position"":3,""accessor"":""name"",""sortable"":false,""minWidth"":170},{""name"":""Категория"",""show"":true,""position"":4,""accessor"":""category"",""sortable"":false,""minWidth"":150,""maxWidth"":200},{""name"":""Упаковки"",""show"":true,""position"":5,""accessor"":""packages"",""sortable"":false,""width"":180},{""name"":""Товарный знак"",""show"":true,""position"":6,""accessor"":""brand"",""sortable"":false,""minWidth"":160,""maxWidth"":200},{""name"":""Статус"",""show"":true,""position"":7,""accessor"":""status"",""sortable"":false,""width"":250}]}");
			
			
			КукиДляНК=Куки;
			CSRFДляНК=crsfToken;
			
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(Thumbprint_1.Thumbprint_1,СРегистра,СерийныйНомер,
			КукиДляНК,CSRFДляНК);
			
			Возврат Истина;
		Иначе
			Возврат ложЬ;
	КонецЕсли;
КонецФункции


&НаКлиенте
Процедура ЗагрузитьКодыТНВЭД(Thumbprint_1,УжеОтправили=ложь) Экспорт
	
	Прибавлять=1000;
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	//Если ОбработкаWEBНаСервере Тогда
	//	Если НЕ ЗагрузкаНаСервере(Thumbprint_1,СРегистра,УжеОтправили) Тогда
	//			ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
	//			Загрузить(Команда,Истина)			
			
	//	КонецЕсли;
	//Иначе
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
		Прокси=Новый ИнтернетПрокси;
		Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
		HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	Иначе
		HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	КонецЕсли;
			
	Что=Thumbprint_1.Что;
			
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/tnved/search?validRequest=true&page=0&limit="+Формат(Прибавлять,"ЧГ=")+"&sort=CODE&direction=ASC&pg="+Что);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Тотал=1000;
	Смещение=0;
	Пока Смещение*Прибавлять<Тотал Цикл
		
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
	 	Если Ответ.КодСостояния=200 Тогда
			Тотал=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагрузаемКодыТНВДНАсервере(Текст1,Thumbprint_1.НаименованиеСтенда);
			
		ИначеЕсли Ответ.КодСостояния=401 
			ИЛИ Ответ.КодСостояния=502  
			Тогда
				Если УжеОтправили=Истина Тогда
					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(Thumbprint_1.Thumbprint_1,"");
				Иначе
					ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
					ЗагрузитьКодыТНВЭД(Thumbprint_1,Истина);
					Возврат;
			КонецЕсли
		КонецЕсли;
		
		Смещение=Смещение+1;
		HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/tnved/search?page="+Формат(Смещение,"ЧГ=")+"&limit="+Формат(Прибавлять,"ЧГ=")+"&sort=CODE&direction=ASC&pg="+Что);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		
		
	Конеццикла;
	
	
КонецПроцедуры


&НаКлиенте
Функция ПолучитьСтатусыПоМассивуКМ(Thumbprint_1,Срегистра,МассивКМ) Экспорт
	
	
	
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
		Прокси=Новый ИнтернетПрокси;
		Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
	
		HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	Иначе
		HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	КонецЕсли;
	
	
		что=Thumbprint_1.что;
	МассивСтруктур=Новый Массив;
	Если Thumbprint_1.НаименованиеСтенда="Табак"
		ИЛИ 
		Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
		Тогда
		
		
		NN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьтелоПоcis_Табак(МассивКМ);
					

		HTTPЗапрос=Новый HTTPЗапрос("api/v3/true-api/cises/info");
		//private-office-api/private/v2/cis/"+КодМаркировки+"/mrp"
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин   
		#Если ВебКлиент Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(NN,КодировкаТекста.UTF8);
			#Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(NN,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Иначе
				
		Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьтелоПоcis(МассивКМ);
		//HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/cis/cis_list?pg="+Что);
		
		HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/cis/cis_list?childrenPaging=true&childrenLimit=0&pg="+Что);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			#Если ВебКлиент Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
			#Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
		
		Попытка
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Исключение
			Ответ=Новый Структура("КодСостояния",500);
		КонецПопытки;
	КонецЕсли;

	
	Если Ответ.КодСостояния=200 Тогда
		Если Thumbprint_1.НаименованиеСтенда="Табак"
					ИЛИ 
		Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
Тогда
			Попытка
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Ответ.ПолучитьТелоКакСтроку());//ПрочитатьJSON(ЧтениеJSON);
			//Стр_1.Статус=NNN[0].status;
			Для Каждого Стр_С Из NNN Цикл
				
				НомерКМ=Стр_С["cisInfo"]["requestedCis"];
				Если Сред(НомерКМ,1,1)="(" Тогда
					НомерКМ=Сред(НомерКМ,2,2)+Сред(НомерКМ,5,14)+
					Сред(НомерКМ,20,2)+Сред(НомерКМ,23);
				КонецЕсли;
				Стр_С_С=Стр_С["cisInfo"];
				ТипУпаковки=Стр_С_С["packageType"];
				
				
				Если Стр_С_С["ownerInn"]<>Thumbprint_1.ИНН Тогда
					МассивСтруктур.Добавить(Новый Структура("cis,статус,ТипУпаковки,Вобороте",НомерКМ,"КМ принадлежит "+Стр_С_С["ownerInn"]+", "+
					Стр_С_С["ownerName"],ТипУпаковки));
				ИначеЕсли Стр_С_С["statusEx"]="WAIT_SHIPMENT" Тогда
					МассивСтруктур.Добавить(Новый Структура("cis,статус,ТипУпаковки,Вобороте",НомерКМ,"Ожидает ответа от клиента по документу "+
					Стр_С_С["lastDocId"],ТипУпаковки));
				ИначеЕсли ЗначениеЗаполнено(Стр_С_С["agentInn"]) И Стр_С_С["agentInn"]<>Thumbprint_1.ИНН Тогда
					
					МассивСтруктур.Добавить(Новый Структура("cis,статус,ТипУпаковки,Вобороте",НомерКМ,"КМ передан на комиссию "+Стр_С_С["agentInn"]+", "+
					Стр_С_С["agentName"],ТипУпаковки));
				Иначе
					МассивСтруктур.Добавить(Новый Структура("cis,статус,ТипУпаковки,Вобороте",НомерКМ,Стр_С_С["status"],ТипУпаковки));
				КонецЕсли;
				
				//МассивСтруктур.Добавить(Новый Структура("cis,статус",Стр_С.cisInfo.requestedCis,Стр_С.cisInfo.status
			Конеццикла;
			
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Сообщить(Ответ.ПолучитьТелоКакСтроку());
		КонецПопытки;
			
		Иначе
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Ответ.ПолучитьТелоКакСтроку());//ПрочитатьJSON(ЧтениеJSON);
			
			
			Для Каждого Стр_С Из NNN Цикл
			//	Для Каждого Стр_С ИЗ Стр_С_1.Значение Цикл
				ВОбороте=Ложь;
				Если Стр_С.Значение["status"]="INTRODUCED" Тогда
					ВОбороте=Истина;
				Конецесли;
				ТипЭмиссии=Стр_С.Значение["emissionType"];
				
			
					Если Стр_С.Значение["ownerInn"]<>Thumbprint_1.ИНН Тогда
						МассивСтруктур.Добавить(Новый Структура("cis,статус,ТипУпаковки,ВОбороте,ТипЭмиссии",Стр_С.Ключ,"КМ принадлежит "+Стр_С.Значение["ownerInn"]+", "+
						Стр_С.Значение["ownerName"],Стр_С.Значение["packType"],ВОбороте,ТипЭмиссии));
					ИначеЕсли Стр_С.Значение["statusEx"]="WAIT_SHIPMENT" Тогда
						МассивСтруктур.Добавить(Новый Структура("cis,статус,ТипУпаковки,ВОбороте,ТипЭмиссии",Стр_С.Ключ,"Ожидает ответа от клиента по документу "+
						Стр_С.Значение["lastDocId"],Стр_С.Значение["packType"],ВОбороте,ТипЭмиссии));
					Иначе
						МассивСтруктур.Добавить(Новый Структура("cis,статус,ТипУпаковки,ВОбороте,ТипЭмиссии",Стр_С.Ключ,Стр_С.Значение["status"],Стр_С.Значение["packType"],ВОбороте,ТипЭмиссии));
					КонецЕсли;
			//	Конеццикла;
			Конеццикла;
		Конецесли;
	Иначе	
		Для Каждого Стр_1 Из МассивКМ Цикл
			МассивСтруктур.Добавить(Новый Структура("cis,статус,ТипУпаковки,Вобороте",Стр_1,Ответ.КодСостояния));
		Конеццикла;
			//Объект.СтатусУпаковки=Ответ.КодСостояния;
//			 Сообщить(Текст1);
	КонецЕсли;

	
	Возврат МассивСтруктур;
	
	
Конецфункции

&НаКлиенте
Функция ПолучитькукиВСУЗ(Thumbprint_1,УжеОтправили=Ложь,Срегистра,СерийныйНомер) Экспорт
		АдресРаздробить=Thumbprint_1.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
		
	
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
			
			
	   
		СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
							СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
									СерийныйНомер=СтруктураНастроек.СерийныйНомер;
							
								Если Не ЗначениеЗаполнено(СРегистра) ИЛИ Не ЗначениеЗаполнено(СерийныйНомер) Тогда
									СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
								Иначе
								   
										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
											Прокси=Новый ИнтернетПрокси;
											Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										Иначе
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										КонецЕсли;
										
										HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
										HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
										HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
										//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
										///Константин           
										Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
										//Текст1=Ответ.ПолучитьТелоКакСтроку();
										Если Ответ.КодСостояния<>200 Тогда
											СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
										КонецЕсли;
											
								КонецЕсли;

				Если НЕ ЗначениеЗАполнено(СРегистра) тогда
					Сообщить("Не удалось подключиться к ЦРПТ");
					Возврат "";
				КонецЕсли;
			
				
				
				
				
				
				
								Если Thumbprint_1.ПараметрРаботы="Тестовый" Тогда
					
							Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
									Прокси=Новый ИнтернетПрокси;
									Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
								
									HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,7080,,,Прокси,Thumbprint_1.Таймаут,Защищ);
								Иначе
									HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,7080,,,,Thumbprint_1.Таймаут,Защищ);
								КонецЕсли;
												
				Иначе


					
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение("suz-sso.crpt.ru",,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение("suz-sso.crpt.ru",,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;
			
			КонецЕсли;
			
		
			
		HTTPЗапрос=Новый HTTPЗапрос("signin");
	//	HTTPЗапрос=Новый HTTPЗапрос("api/orders");
	
	
	
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0");
	//HTTPЗапрос.Заголовки.Вставить("clientToken",Thumbprint_1.ТокенСУЗ);
	
	Чтен_Подкл=Новый  ЗаписьJSON;
	
	
			#Если ВебКлиент Тогда
				ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON();
			#Иначе
				ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, "	", Истина);
			#КонецЕсли
	
	
	Чтен_Подкл.УстановитьСтроку(ПараметрыЗаписиJSON);
	Чтен_Подкл.ЗаписатьНачалоОбъекта();
	Чтен_Подкл.ЗаписатьИмяСвойства("token");
	Чтен_Подкл.ЗаписатьЗначение(СРегистра);
	Чтен_Подкл.ЗаписатьКонецОбъекта();
	Текст_Подкл=Чтен_Подкл.Закрыть();
	Текст_Подкл=СтрЗаменить(Текст_Подкл,Символы.ПС,"");
	Текст_Подкл=СтрЗаменить(Текст_Подкл,Символы.ВК,"");
	
	HTTPЗапрос.Заголовки.Вставить("content-length",Формат(СтрДлина(Текст_Подкл),"ЧГ="));

			#Если ВебКлиент Тогда
	HTTPЗапрос.УстановитьТелоИзСтроки(Текст_Подкл,КодировкаТекста.UTF8);
	
				#Иначе
	HTTPЗапрос.УстановитьТелоИзСтроки(Текст_Подкл,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
	
	Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("PUT",HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния<>200 Тогда
		Сообщить("Станция управления заказами недоступна, получите доступ support@crpt.ru");
	КонецЕсли;
	
	
			
		//НСтр=Сред(Текст1,Найти(Текст1,"?sid=")+5);
		//НСтр=Сред(НСтр,1,Найти(НСтр,"""")-1);
			
		НСтр=Текст1;


		Куки="certSerial="+Thumbprint_1.Thumbprint_1+"; org.springframework.web.servlet.i18n.CookieLocaleResolver.LOCALE=ru; count=2; JSESSIONID="+НСтр+"; tokenPart1="+Сред(СРегистра,1,4000)+"; "+
		"tokenPart2="+Сред(СРегистра,4001) ;
		
		
		
		
		
					Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,Thumbprint_1.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,Thumbprint_1.Таймаут,Защищ);
			КонецЕсли;

			Если Защищ<>Неопределено Тогда
				Адрес_1="https://"
			Иначе
				Адрес_1="http://"
			КонецЕсли;
			Адрес_1=Адрес_1+Адрес;
			Если ЗначениеЗаполнено(Порт) тогда
				Адрес_1=Адрес_1+":"+Формат(Порт,"ЧГ=");
			КонецЕсли;
			Адрес_1=Адрес_1+"/";
			
			HTTPЗапрос = Новый HTTPЗапрос(СтрЗаменить(НСтр,Адрес_1,"")); //"static/1555676332000/js/main/preload.js");
			
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
		
			
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
			
		Куки=Ответ.Заголовки["Set-Cookie"];
		Если Куки=Неопределено тогда
			Куки=Ответ.Заголовки["set-cookie"];
			
		Конецесли;
			
		Если Найти(Куки,"omsId=") =0 Тогда
			
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(Thumbprint_1.Thumbprint_1,"");
			Если УжеОтправили<>Истина Тогда
				 Возврат ПолучитькукиВСУЗ(Thumbprint_1,Истина,Срегистра,СерийныйНомер)
			КонецЕсли;
			Возврат "";
			
		КонецЕсли;
		
									куки=СтрЗаменить(куки,"Path=/, ","");
							куки=СтрЗаменить(куки,"path=/,","");
		Куки=Куки+"certSerial="+СерийныйНомер+"; tokenPart1="+Сред(СРегистра,1,4000)+"; "+
					"tokenPart2="+Сред(СРегистра,4001) ;

		Возврат куки
	
КонецФункции

&НаКлиенте
Процедура ПроверкаВводВОБорот(Объект,УжемЭм=Ложь) Экспорт
	ВводВоборот=Неопределено;
	Эмитировать=0;
	Если ОбщийМодуль_НаСервере_ХамелеонЦРПТ.НеобходимоДелатьВводВОборот(Объект,ВводВоборот,Эмитировать) Тогда
		
		Если Эмитировать=1 Тогда
			
			Если УжемЭм<>Истина Тогда
				Форм=ПолучитьФорму("Документ.ЗаказМарок_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура("Ключ",Объект));
				Форм.ПолучитьКМИзAPI("");
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(ВводВоборот) Тогда
			Форм=ПолучитьФорму("Документ.ВводВОборот_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(	
			"Ключ",ВводВоборот));
			Форм.ОтправитьЗаявку("");
			
		Конецесли;
		
		
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьИПринятьПриход(Накладная,НадоПринять,УжеОтправили=Ложь) Экспорт
	  Принимаем=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИнформациюПоПриемке(НадоПринять);
	  
	  Если     Принимаем=Неопределено Тогда
		  Возврат;
		 КонецЕсли;
	  Если     Принимаем.ТолькоПринять="Статус" Тогда
			  Thumbprint_1=Принимаем.Thumbprint_1;
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;                                                       
	  
		  
		СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			Попытка
				СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
			исключение
				СРегистра=Неопределено;
			КонецПопытки;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			Возврат;
		Конецесли;
		
					
		
			что=Thumbprint_1.что;
			
	
						
			HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/doc/"+НадоПринять.Приемка_Ответ+"/body?pg="+Что+"&limit=2147483647");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					Стр=Принимаем.Приемка;
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Если NNN.status="CHECKED_NOT_OK" Тогда
						//ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"");
					ИначеЕсли 	NNN.status="WAIT_ACCEPTANCE" Тогда
						//ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"");
					ИначеЕсли 	NNN.status="CANCELLED" Тогда
						//ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.ОжидаетОтветаОтКлиента"),"");
					ИначеЕсли 	NNN.status="CHECKED_OK" Тогда
						МассивУп=Новый Массив;
					
				что=Thumbprint_1.что;
										
						
						HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/doc/"+NNN.body.release_order_number+"/body?pg="+Что+"&limit=2147483647");
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
						//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
						///Константин           
						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
						Текст1=Ответ.ПолучитьТелоКакСтроку();
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						//NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(NNN_1.content);
						//NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(NNN.content);
						ЗаполненаТабличнаяЧастьПриемки=Ложь;

						ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусДокумента_Приемка(NNN_1,Принимаем.Пользователь,МассивУп,Текст1,Ложь,,Стр,NNN,,,ЗаполненаТабличнаяЧастьПриемки);
						
						
						//ОбновитьИнформациюОПродукции(Стр.Ссылка);
						
						
						
						//ОбновитьСтатусДокумента_Приемка_АКТ_1(Стр.Ссылка,NNN_1,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа,NNN);	
						
						//ОбновитьСтатусДокумента_Приемка_АКТ(Стр.Ссылка,NNN_1 ,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа);	
						//ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
					
					КонецЕсли;
				
		ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
				Если УжеОтправили=Истина Тогда
					//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(Thumbprint_1.Thumbprint_1,"");
					Возврат;
				Иначе
					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
					
					ПолучитьИПринятьПриход(Накладная,НадоПринять,Истина);			
					Возврат;
				КонецЕсли
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				    ОшибкаОтправки="";
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Попытка
					ЧтениеJSON = Новый ЧтениеJSON;
					ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
				КонецПопытки;
			//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
		

		КонецЕсли;
		
		
		
		
		
		
		
		
	ИначеЕсли Принимаем.ТолькоПринять=Истина Тогда
		
		
		
			  Thumbprint_1=Принимаем.Thumbprint_1;
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;                                                       
	  
		  
		СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			Попытка
				СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
			исключение
				СРегистра=Неопределено;
			КонецПопытки;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			Возврат;
		Конецесли;
		
		Форм=ПолучитьФорму("Документ.Приемка_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
		"Ключ",Принимаем.Приемка));
		Форм.ТекущийПользователь=Принимаем.Пользователь;
		Форм.Принять("");
		
				
		
		
		
	ИначеЕсли Принимаем.ТолькоПринять=Ложь Тогда
		
		
			  Thumbprint_1=Принимаем.Thumbprint_1;
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;                                                       
	  
		  
		СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			Попытка
				СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
			исключение
				СРегистра=Неопределено;
			КонецПопытки;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СРегистра) Тогда
			Возврат;
		Конецесли;
		
			что=Thumbprint_1.что;
	
						
			HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/doc/"+НадоПринять.Ордер+"/body?pg="+Что+"&limit=2147483647");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			
			Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					//Стр=Принимаем.Приемка;
					МассивУп=Новый Массив;
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					Докум=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусДокумента_Приемка(NNN,Принимаем.Пользователь,МассивУп,Текст1,Ложь,,,,,,Ложь);
						Если ЗначениеЗаполнено(докум) тогда
							
							
							Форм=ПолучитьФорму("Документ.Приемка_ХамелеонЦРПТ.Форма.ФормаДокумента",Новый Структура(
							"Ключ",докум));
							Форм.ТекущийПользователь=Принимаем.Пользователь;
							Форм.Принять("");
							
									

						КонецЕсли;
						
						//ОбновитьИнформациюОПродукции(Стр.Ссылка);
						
						
						
						//ОбновитьСтатусДокумента_Приемка_АКТ_1(Стр.Ссылка,NNN_1,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа,NNN);	
						
						//ОбновитьСтатусДокумента_Приемка_АКТ(Стр.Ссылка,NNN_1 ,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа);	
						//ОбновитьСтатусДокумента_Отгрузка(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Обработан"),"");
					
//					КонецЕсли;
				
		ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
				Если УжеОтправили=Истина Тогда
					//ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1);
					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(Thumbprint_1.Thumbprint_1,"");
					Возврат;
				Иначе
					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
					
					ПолучитьИПринятьПриход(Накладная,НадоПринять,Истина);			
					Возврат;
				КонецЕсли
			ИначеЕсли Ответ.КодСостояния=301 Тогда
				
				    ОшибкаОтправки="";
			//Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ");
				Попытка
					ЧтениеJSON = Новый ЧтениеJSON;
					ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					ОшибкаОтправки=NNN.error_message;
					
				Исключение
				КонецПопытки;
			//ОбновитьСтатусДокумента(Стр.Ссылка,ПредопределенноеЗначение("Перечисление.СтатусыДокументов_ХамелеонЦРПТ.Отказ"),"301 код ошибки");
		

		КонецЕсли;
		
		
		
		
		 		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнформациюОбУПДПриемка(id,ЗагрузатьНаименованиеПриПриемке,ЗаписыватьДанныеПриОтправкеЗаказа,Пользователь,HTTPСервисЗапрос,СерийныйНомер,СРегистра,Thumbprint_1) Экспорт
	
	Попытка
		
		HTTPЗапрос=Новый HTTPЗапрос("edo-api/incoming-documents/"+id);
	
						
						
					//	HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
						HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
						HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
						HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
						HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
						HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ +"/documents/incoming/list");
						
						
						
						HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");
						
						//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
						HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
						HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
						HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
						
						
						
					//	Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
						Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
						"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


						HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
						
						///Константин           
						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
						Если Ответ.КодСостояния<>200 Тогда
							Возврат;
						КонецЕсли;
						Текст1=Ответ.ПолучитьТелоКакСтроку();
						
								
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						
						NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						
		//Статус=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВернутьСтатусДокументаУПД(NNN_1.status);
							ЗагрузитьПриемкуЭДОЛайт=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагрузитьПриемкуЭДОЛайт();
						
		Если ЗагрузитьПриемкуЭДОЛайт=0 Тогда
			
			
			HTTPЗапрос=Новый HTTPЗапрос("edo-api/incoming-documents/"+id+"/content");
	
						МассивУппешно=Новый Массив;
						МассивУппешно.Очистить();
						
					//	HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
						HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
						HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
						HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
						HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
						HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ +"/documents/incoming/list");
						
						
						
						HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");
						
						//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
						HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
						HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
						HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
						
						
						
					//	Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
						Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
						"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


						HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
						
						///Константин           
						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
						Если Ответ.КодСостояния<>200 Тогда
							Возврат;
						КонецЕсли;
						Текст1=Ответ.ПолучитьТелоКакДвоичныеДанные();
						
						
						СообщениеОбОшибке="";
						РеквизитыЭлектр=ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.РеквизитыЭлектронногоДокумента(Текст1,СообщениеОбОшибке);
							Если РеквизитыЭлектр.Загружать=Ложь Тогда
								Возврат;
							КонецЕсли;
						Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
							Сообщить("Не удалось загрузить файл по документу "+Строка(id)+" Ошибка: "+СообщениеОбОшибке);
							ОшибкаЗагрузки=Истина;
							Возврат;
						КонецЕсли;
						//РеквизитыЭлектр.Вставить("ТекстФайла",);
						
						РеквизитыЭлектр.ВставитЬ("ИдентификаторДокументооборота",id);
						МассивУп=Новый Массив;
						
						АдресРеквизитов=Новый Структура;
						//РеквизитыЭлектронногоДокумента.Вставить("ИдентификаторДокументооборота", ДанныеДокументооборота.ИдентификаторДокументооборота);
						АдресРеквизитов.Вставить("Статус",ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВернутьСтатусДокументаУПД(NNN_1.status));
						МассивУппешно.Добавить(ЗагрузкаXMLЭДОСервер_ХамелеонЦРПТ.ЗагрузкаПриемкиИзXML(РеквизитыЭлектр,МассивУп,ЗаписыватьДанныеПриОтправкеЗаказа,Пользователь,АдресРеквизитов,ПредопределенноеЗначение("Справочник.ЭДО_ХамелеонЦРПТ.ЭДОЛайт"),ОшибкаЗагрузки,Ложь));
						
						
						
						
						
						//МассивУппешно=Новый Массив;
						//МассивУппешно.Очистить();
						//АдресРеквизитов.Вставить("Статус","");
						//МассивУппешно.Добавить(ЗагрузкаXML_ХамелеонЦРПТ.ЗагрузкаПриемкиИзXML(РеквизитыЭлектр,МассивУп,ЗаписыватьДанныеПриОтправкеЗаказа,Пользователь,АдресРеквизитов,Справочники.ЭДО_ХамелеонЦРПТ.ЭДОФайл,ОшибкаЗагрузки))
						
									
			
			
		Иначе
			
						МассивУп=Новый Массив;
						
						МассивКМ=Новый Массив;
						
						ДокумПриемки=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусДокумента_Приемка_УПД(NNN_1,Пользователь,МассивУп,Текст1,ЗаписыватьДанныеПриОтправкеЗаказа,Ложь,,,МассивКМ,ЗагрузатьНаименованиеПриПриемке);	
						Если МассивКМ.Количество()>0 Тогда
							
							СписокОбнТовара=Новый Массив;
							
							
							ЗаполненаТабличнаяЧастьПриемки=Ложь;
							дкоументФарм=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьИнформациюНаСервереДЛяПриемки(Thumbprint_1,МассивКМ,СписокОбнТовара,ЗаполненаТабличнаяЧастьПриемки);
							
							//Если ПриЗагрузкеПриемкиЗаполнятьПроверкаПоКМ=Истина И ЗаполненаТабличнаяЧастьПриемки<>Истина тОгда
							//	Форм=ОткрытьФорму("Документ.Приемка_ХамелеонЦРПТ.Форма.ФормаДокумента",
							//	Новый Структура("Ключ",дкоументФарм));
							//	Форм.ЗакачатьДетальнуюИнформацию("");
							//	Форм.Записать();
							//	Форм.Закрыть();
							//КонецЕсли;
							
									Для Каждого Стр_1 Из СписокОбнТовара Цикл
										ОповеститьОбИзменении(Стр_1);
									КонецЦиклА;
									МассивКМ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСледющийМассив(ДокумПриемки);
									СписокОбнТовара.Очистить();

										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
														Прокси_20=Новый ИнтернетПрокси;
														Прокси_20.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
													
														HTTPСервисЗапрос_20=Новый HTTPСоединение("xn--80aqu.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,Прокси_20,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
													Иначе
														HTTPСервисЗапрос_20=Новый HTTPСоединение("xn--80aqu.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
													КонецЕсли;
													
												МассивСтруктур=Новый Массив;	
										Для Каждого Стр_1 из МассивКМ Цикл

											GTINНаименованиеТовара=Сред(Стр_1.Марка,3,14);
											HTTPЗапрос_20=Новый HTTPЗапрос("v3/product?gtin="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ДополнитьСтроку(Формат(GTINНаименованиеТовара,"ЧГ="))+"&apikey=l10k3203w65mbngr");
											HTTPЗапрос_20.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded; charset=UTF-8");
											//HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//Тело="task=getItemByGTIN&lng=ru&keyValue="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ДополнитьСтроку(Формат(Стр_1.GTINНаименованиеТовара,"ЧГ="));
									//		HTTPЗапрос.УстановитьТелоИзСтроки();
											//Тело);
											Ответ_20=HTTPСервисЗапрос_20.ОтправитьДляОбработки(HTTPЗапрос_20);
												Если Ответ_20.КодСостояния=200 Тогда
									Текст1_20=Ответ_20.ПолучитьТелоКакСтроку();
												NNN_20=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1_20);//ПрочитатьJSON(ЧтениеJSON);
											Название=неопределено;
											Попытка
												Название=NNN_20.result[0].good_name; 
											Исключение
											КонецПопытки;
											Если Название=Неопределено Тогда
												
									//			http://gepir.gs1ru.org/GEPIR40/index.jsp?p=gtin&lng=ru
											КонецЕсли;
											Если ЗначениеЗаполнено(Название) Тогда
												МассивСтруктур.Добавить(Новый Структура("gtin,Название",GTINНаименованиеТовара,Название));
												
											КонецЕсли;
											КонецЕсли;
										Конеццикла;
										
										МММ=Новый Массив;
										Если МассивСтруктур.Количество()>0 тогда
											МММ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагрузитьПродукции(МассивСтруктур);
											
										КонецЕсли;
										Для Каждого Стр_1 Из МММ Цикл
											ОповеститьОбИзменении(Стр_1);
										КонецЦиклА;
										
										МассивКМ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСледющийМассив(ДокумПриемки);
										СписокОбнТовара.Очистить();
										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
												Прокси_20=Новый ИнтернетПрокси;
															Прокси_20.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
														
															HTTPСервисЗапрос_20=Новый HTTPСоединение("gepir.gs1ru.org",,,,Прокси_20,Thumbprint_1.Таймаут);
														Иначе
															HTTPСервисЗапрос_20=Новый HTTPСоединение("gepir.gs1ru.org",,,,,Thumbprint_1.Таймаут);
														КонецЕсли;
														
														
														
													МассивСтруктур.Очистить();	
												
											Для Каждого СтР_1 Из МассивКМ Цикл
												
										

GTINНаименованиеТовара=Сред(Стр_1.Марка,3,14);

												HTTPЗапрос=Новый HTTPЗапрос("GEPIR40/getItem");
												HTTPЗапрос.Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded; charset=UTF-8");
												//HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
												//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
												///Константин           
												Тело="task=getItemByGTIN&lng=ru&keyValue="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ДополнитьСтроку(Формат(GTINНаименованиеТовара,"ЧГ="));
												HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
												Ответ=HTTPСервисЗапрос_20.ОтправитьДляОбработки(HTTPЗапрос);
													Если Ответ.КодСостояния=200 Тогда
									
												Текст1=Ответ.ПолучитьТелоКакСтроку();
												NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
												Название=неопределено;
												Попытка
													Название=NNN.gepirItem.itemDataLine[0].itemName; 
												Исключение
												КонецПопытки;
												Если Название=Неопределено Тогда
													
										//			http://gepir.gs1ru.org/GEPIR40/index.jsp?p=gtin&lng=ru
												КонецЕсли;
												Если ЗначениеЗаполнено(Название) Тогда
													МассивСтруктур.Добавить(Новый Структура("gtin,Название",Стр_1.GTINНаименованиеТовара,Название));
													
												КонецЕсли;
												КонецЕсли;
											Конеццикла;
											
										МММ=Новый Массив;
										Если МассивСтруктур.Количество()>0 тогда
											МММ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагрузитьПродукции(МассивСтруктур);
											
										КонецЕсли;
										Для Каждого Стр_1 Из МММ Цикл
											ОповеститьОбИзменении(Стр_1);
										КонецЦиклА;

									
							
									КонецЕсли;
							КонецЕсли;
						Исключение
							
							сообщить("Не удалось подлучить приемку");
    Инфо = ИнформацияОбОшибке();
    Сообщить("Описание='" + Инфо.Описание + "'");
    Сообщить("ИмяМодуля='" + Инфо.ИмяМодуля + "'");
    Сообщить("НомерСтроки=" + Инфо.НомерСтроки);
    Сообщить("ИсходнаяСтрока='" + Инфо.ИсходнаяСтрока + "'");
							
							
								КонецПопытки;
							
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнформациюОбУПДОтгрузка(id,Пользователь,HTTPСервисЗапрос,СерийныйНомер,СРегистра,Thumbprint_1,Документ_1) Экспорт
HTTPЗапрос=Новый HTTPЗапрос("edo-api/outgoing-documents/"+id);
	
						
						
					//	HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
						HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
						HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0");
						HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
						HTTPЗапрос.Заголовки.Вставить("Host",Thumbprint_1.АдресКАПИ);
						//HTTPЗапрос.Заголовки.Вставить("Referer","https://"+Thumbprint_1.АдресКАПИ +"/documents/incoming/list");
						
						
						
						HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*, application/json;charset=UTF-8");
						
						//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
						HTTPЗапрос.Заголовки.Вставить("Cache-Control","no-cache");
						HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
						HTTPЗапрос.Заголовки.Вставить("TE","Trailers");
						
						
						
					//	Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
						Куки="count=2;"+""+"tokenPart1="+Сред(СРегистра,1,4000)+";"+""+
						"tokenPart2="+Сред(СРегистра,4001)+";"+""+"certSerial="+СерийныйНомер ;


						HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
						
						///Константин           
						Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
						Текст1=Ответ.ПолучитьТелоКакСтроку();
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(Текст1);
						
						
						NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
						
						Если Ответ.КодСостояния=200 Тогда
							ДокумПриемки=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбновитьСтатусДокумента_Отгрузка_УПД(NNN_1,Пользователь,Текст1,Документ_1);	
						КонецЕсли;
							
	
КонецПроцедуры



&НаКлиенте
Функция ВернутьОрганизациюПоСУЗ(ПараметрыДлякилента,ТаймаутОжиданияОтСайта,Контакт="") Экспорт
	Организация_1=Неопределено;
		АдресРаздробить=ПараметрыДлякилента.АдресСУЗ;
					Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
					Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
					Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
					Порт=Сред(Порт,Найти(Порт,":")+1);
					Попытка
						Порт=число(Порт);
					Исключение
						Порт=Неопределено;
					КонецПопытки;
					
					Если Найти(АдресРаздробить,"https")=1 Тогда
						Защищ=Новый ЗащищенноеСоединениеopenSSL();
					Иначе
						Защищ=Неопределено;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(Адрес) Тогда
						
						ПоказатьПредупреждение(,"В пользователе не заполнен адрес СУЗ");
						Возврат Неопределено;
						
					КонецЕсли;
					
					Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
							Прокси=Новый ИнтернетПрокси;
							Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
							HTTP =  Новый HTTPСоединение(ПараметрыДлякилента.АдресКАПИ,Порт,,,Прокси,ТаймаутОжиданияОтСайта,Защищ);

						Иначе
							
							HTTP =  Новый HTTPСоединение(ПараметрыДлякилента.АдресКАПИ,Порт,,,,ТаймаутОжиданияОтСайта,Защищ);
						КонецЕсли;	
							

						
						
						
						
						HTTPЗапрос = Новый HTTPЗапрос("signin");
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						HTTPЗапрос.УстановитьТелоИзСтроки("{""id"":"""+ПараметрыДлякилента.ПользовательСУЗ+""",""password"":"""+ПараметрыДлякилента.ПарольСУЗ+"""}");
						Отв=HTTP.ОтправитьДляОбработки(HTTPЗапрос);
					
						Если Отв.КодСостояния=200 Тогда
							
							куки=Отв.Заголовки.Получить("Set-Cookie");
							Если куки=Неопределено тогда
								куки=Отв.Заголовки.Получить("set-cookie");
								
							Конецесли;
							куки=СтрЗаменить(куки,"Path=/, ","");
							HTTPЗапрос = Новый HTTPЗапрос("static/1568966348000/js/main/preload.js");
							HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
							HTTPЗапрос.Заголовки.Вставить("cookie",куки);
							Отв=HTTP.Получить(HTTPЗапрос);
		
							Токен=Отв.ПолучитьТелоКакСтроку();
							Токен=Сред(Токен,Найти(Токен,"clientToken")+15);
							
							Токен=Сред(Токен,1,Найти(Токен,"""")-1);
							
							
							
							HTTPЗапрос = Новый HTTPЗапрос("oms/about");
							HTTPЗапрос.Заголовки.Вставить("cookie",куки);
							HTTPЗапрос.Заголовки.Вставить("clientToken",Токен);
							HTTPЗапрос.Заголовки.Вставить("Accept","*/*");
							HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
							HTTPЗапрос.Заголовки.Вставить("Host",ПараметрыДлякилента.АдресКАПИ+":"+Формат(Порт,"ЧГ="));
							HTTPЗапрос.Заголовки.Вставить("Referer","http://"+ПараметрыДлякилента.АдресКАПИ+":"+Формат(Порт,"ЧГ=")+"/");
							HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
							HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
							Отв=HTTP.Получить(HTTPЗапрос);
							
							Попытка
								СтруктураПоСоот=СтрокаJSONВЗначение(Отв.ПолучитьТелоКакСтроку());
							 	ИНН=СтруктураПоСоот.inn;
								Наименование=СтруктураПоСоот.participantName;
								
								Организация_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СоздатьНайтиОрганизацию(Наименование,ИНН);
							Исключение
								Организация_1=Неопределено;
							КонецПопытки;
							
							
							HTTPЗапрос = Новый HTTPЗапрос("enterpriseProfile/list?skip=0&limit=10");
							HTTPЗапрос.Заголовки.Вставить("cookie",куки);
							HTTPЗапрос.Заголовки.Вставить("clientToken",Токен);
							HTTPЗапрос.Заголовки.Вставить("Accept","*/*");
							HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
							HTTPЗапрос.Заголовки.Вставить("Host",ПараметрыДлякилента.АдресКАПИ+":"+Формат(Порт,"ЧГ="));
							HTTPЗапрос.Заголовки.Вставить("Referer","http://"+ПараметрыДлякилента.АдресКАПИ+":"+Формат(Порт,"ЧГ=")+"/");
							HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
							HTTPЗапрос.Заголовки.Вставить("X-Requested-With","XMLHttpRequest");
							Отв=HTTP.Получить(HTTPЗапрос);
								//СтруктураПоСоот=СтрокаJSONВЗначение(Отв.ПолучитьТелоКакСтроку());
								
							JJJJ=Отв.ПолучитьТелоКакСтроку();
							Если Найти(JJJJ,"""contactPerson"":""")>0 Тогда
								Контакт=Сред(JJJJ,Найти(JJJJ,"""contactPerson"":""")+17);
								Контакт=Сред(Контакт,1,Найти(Контакт,"""")-1);
							КонецЕсли;
							
							Возврат Организация_1;

						КонецЕсли;
						Возврат Организация_1;
			
	
	
Конецфункции

&НаКлиенте
Процедура ЗаполнитьДанныеИзОтветаJSON(Результат, ТекстJSON, ТипДанных)
	ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));	
	НомерЗначения = 0;
	
	Пока ТекстJSON <> "" Цикл
		ПервыйСимвол = Лев(ТекстJSON, 1);
		Если ПервыйСимвол = "{" Тогда
			Значение = Новый Структура;
			ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Структура");
			
			Если ТипДанных = "Структура" Тогда
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
			ИначеЕсли ТипДанных = "Массив" Тогда
				Результат.Добавить(Значение);
			КонецЕсли;
		ИначеЕсли ПервыйСимвол = "[" Тогда
			Значение = Новый Массив;
			ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Массив");
			
			Если ТипДанных = "Структура" Тогда
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
			Иначе
				Результат.Добавить(Значение);
			КонецЕсли;
		ИначеЕсли ПервыйСимвол = "}" И ТипДанных = "Структура" Тогда
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			Если Лев(ТекстJSON, 1) = "," Тогда
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			КонецЕсли;
			
			Возврат;
		ИначеЕсли ПервыйСимвол = "]" И ТипДанных = "Массив" Тогда
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			Если Лев(ТекстJSON, 1) = "," Тогда
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			КонецЕсли;
			
			Возврат;
		Иначе
			Если ТипДанных = "Структура" Тогда
				
				Поз = Найти(ТекстJSON, ":");
				Если Поз = 0 Тогда
					Прервать;
				КонецЕсли;
				
				ИмяЗначения = СокрЛП(Лев(ТекстJSON, Поз-1));
				
				ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз+1));
				
				Если Лев(ТекстJSON, 1) = "{" Тогда
					Значение = Новый Структура;
					ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Структура");
				ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда
					Значение = Новый Массив;
					ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Массив");
				Иначе
					Поз = 0;
					Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
						Символ = Сред(ТекстJSON, Сч, 1);
						Если Символ = "," ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
							Поз = Сч;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если Поз = 0 Тогда
						Значение = ТекстJSON;
						ТекстJSON = "";
					Иначе
						Значение = Лев(ТекстJSON, Поз-1);
						ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
					КонецЕсли;
					
					Значение = СокрЛП(Значение);
				КонецЕсли;
				
				Результат.Вставить(ИмяЗначения, Значение);
			ИначеЕсли ТипДанных = "Массив" Тогда
				Поз = 0;
				Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
					Символ = Сред(ТекстJSON, Сч, 1);
					Если Символ = "," ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
						Поз = Сч;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Поз = 0 Тогда
					Значение = ТекстJSON;
					ТекстJSON = "";
				Иначе
					Значение = Лев(ТекстJSON, Поз-1);
					ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
				КонецЕсли;
				
				Значение = СокрЛП(Значение);
				
				Результат.Добавить(Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Функция ЗаполнитьСтруктуруИзОтветаJSON(Знач ТекстJSON) Экспорт
	Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(ТекстJSON);
	//ЧтениеJSON = Новый ЧтениеJSON;
	//ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	//Попытка
	//	Возврат ПрочитатьJSON(ЧтениеJSON);
	//Исключение
	//	Сообщить("Текстовая строка "+ТекстJSON+" не соответствует шаблону JSON");
	//	Возврат Неопределено;
	//КонецПопытки;
	
КонецФункции


&НаКлиенте
Функция СтрокаJSONВЗначение(Строка) Экспорт

	Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Строка);
	
	
	
	
	
	//ЧтениеJSON = Новый ЧтениеJSON;
	//ЧтениеJSON.УстановитьСтроку(Строка);
	//Значение = ПрочитатьJSON(ЧтениеJSON);
	//ЧтениеJSON.Закрыть();
	//Возврат Значение;
	
КонецФункции




&НаКлиенте
Функция ПолучитьПредставлениеСертификата(ТекСубъект) ЭКспорт
	ПредставлениеСертификата="";
	СубъектИмя=""; СубъектДолжность=""; СубъектОрганизация=""; СубъектОрганизацияИНН=""; СубъектОрганизацияМестонахождение="";
	
	СписокСтр=СтрЗаменить(ТекСубъект,", ",Символы.ПС);
	Для НомСтр=1 По СтрЧислоСтрок(СписокСтр) Цикл
		ТекПараметр="";
		ТекЗначение="";
		ТекСтр=СокрЛП(СтрПолучитьСтроку(СписокСтр,НомСтр));
		ПозРавно=Найти(ТекСтр,"=");
		Если ПозРавно>0 Тогда
			ТекПараметр=СокрЛП(Лев(ТекСтр,ПозРавно-1));
			ТекЗначение=СокрЛП(Сред(ТекСтр,ПозРавно+1));
		КонецЕсли;
		
		Если ТекПараметр="CN" Тогда
			СубъектИмя=ТекЗначение;
		ИначеЕсли ТекПараметр="T" Тогда
			СубъектДолжность=ТекЗначение;
		ИначеЕсли ТекПараметр="O" Тогда
			Если (Лев(ТекЗначение,1)="""") И (Прав(ТекЗначение,1)="""") Тогда
				ТекЗначение=Сред(ТекЗначение,2,СтрДлина(ТекЗначение)-2);
			КонецЕсли;
			ТекЗначение=СтрЗаменить(ТекЗначение,"""""","""");
			СубъектОрганизация=ТекЗначение;
		ИначеЕсли ТекПараметр="L" Тогда
			СубъектОрганизацияМестонахождение=ТекЗначение;
		ИначеЕсли (ТекПараметр="ИНН") ИЛИ (ТекПараметр="INN") ИЛИ (ТекПараметр="OID.1.2.643.3.131.1.1") Тогда
			СубъектОрганизацияИНН="ИНН "+ТекЗначение;
		КонецЕсли;
		
	КонецЦикла;
	
	ПредставлениеСертификата=СубъектОрганизация+" "+СубъектОрганизацияМестонахождение+" "+СубъектОрганизацияИНН+", "+СубъектДолжность+" "+СубъектИмя;
	
	Возврат ПредставлениеСертификата;
КонецФункции

&НаКлиенте
Функция Получение_Токена(Thumbprint_1,СерийныйНомер="") Экспорт
	
	НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере_ПолучитьТокен();
	
	// Попытка
		Если Не ЗначениеЗаполнено(Thumbprint_1.Thumbprint_1) тогда
			//(,"Не выбран сертификат");
			Возврат "";
		КонецЕсли;
		
		Если НаСервере Тогда
			
			Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Получение_Токена_Сервер(Thumbprint_1.Thumbprint_1,СерийныйНомер,Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси,Thumbprint_1.АдресКАПИ,Thumbprint_1.Таймаут,Thumbprint_1.АдресДляПолученияТокена)
			
		Иначе
		
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
		
			Запрос=Новый HTTPЗапрос("/api/v3/auth/cert/key");
		
			Ответ=HTTPСервисЗапрос.Получить(Запрос);
		Если Ответ.КодСостояния=200 Тогда 	
			ОтветСтруктура =ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
			Подписываем=ОтветСтруктура.data;
			Имя_вр_1="";
			ПодписатьФайл(Thumbprint_1.Внешняя,Подписываем,Thumbprint_1,Имя_вр_1,,,СерийныйНомер,Thumbprint_1.PIN);
			
			Добав=Имя_вр_1;
			//Добав=ПолучитьСтрокуИздвоичныхДанных(РР);
			//Добав=КодСтрСервер(Добав);
			Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
			Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
			Добав=СтрЗаменить(Добав,"\r\n","");

			Тело = "{
			|""uuid"": """+ОтветСтруктура.uuid+""",
			|""data"": """+Добав+"""
			|}";
			
			
			
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/auth/cert/");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
				
			
			
			//ЧтениеJSON = Новый ЧтениеJSON;
			//ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			Попытка
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());//ПрочитатьJSON(ЧтениеJSON);
			Исключение
//				Сообщить("Текстовая строка "+ТекстJSON+" не соответствует шаблону JSON");
				Сообщить(Описаниеошибки());
				Возврат Неопределено;
			КонецПопытки;
			Ош="";
			Если     NNN.Свойство("error_message",Ош) Тогда
				Сообщить(Ош);
				Возврат "";
			КонецЕсли;
			 ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(Thumbprint_1.Thumbprint_1,NNN.token,СерийныйНомер);
			
			Возврат NNN.token
		Иначе
			Сообщить("Не удалось подключиться к сайту: "+Thumbprint_1.АдресКАПИ);
			
			Возврат "";
		КонецЕсли;	
	КонецЕсли;
//	Исключение
	
	
		//Сообщить(ОписаниеОшибки());
		Возврат "";
//	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьСписокСертификатов(ТипМенеджераКриптографии, ПроверятьДатуОкончания,ОповещенияПослеВыполения,ИмяВр,Текущийпользователь,ЭтаФорма,ОтветСтруктура)    Экспорт
	
	
	//Попытка
	//	СписокСертификатов = Новый Массив;
	//    МенеджерКриптографии = Новый МенеджерКриптографии("", "", ТипМенеджераКриптографии);
	//	//МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу=ТекущийПользователь.Пароль;
	//	МенеджерКриптографии.ВключениеСертификатовВПодпись=РежимВключенияСертификатовКриптографии.ВключатьПолнуюЦепочку;
	//	МенеджерКриптографии.НачатьПолучениеХранилищаСертификатов(Новый ОписаниеОповещения("ПослеПолученияСертификатов",ЭтаФорма,
	//	Новый Структура("ОповещенияПослеВыполения,ИмяВр,Текущийпользователь,МенеджерКриптографии,ОтветСтруктура",ОповещенияПослеВыполения,ИмяВр,Текущийпользователь,МенеджерКриптографии,ОтветСтруктура)
	//	),ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты
	//	);
	//Исключение
		
		Попытка
			СтруктПр=Новый Структура("ОповещенияПослеВыполения,ИмяВр,Текущийпользователь,ОтветСтруктура,ТипМенеджераКриптографии",ОповещенияПослеВыполения,ИмяВр,Текущийпользователь,ОтветСтруктура,ТипМенеджераКриптографии);
			
			НачатьПодключениеРасширенияРаботыСКриптографией(Новый ОписаниеОповещения(
				"СоздатьМенеджерКриптографииПослеПодключенияРасширенияРаботыСКриптографией", ЭтаФорма,СтруктПр));
			
		исключение
		КонецПопытки;
		
		
		
//	Конецпопытки;
КонецПроцедуры




&НаКлиенте
Функция Получение_Токена_ЛДМП(Thumbprint_1) Экспорт
	НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	Попытка
		Если Не ЗначениеЗаполнено(Thumbprint_1.Thumbprint_1) тогда
			//(,"Не выбран сертификат");
			Возврат "";
		КонецЕсли;
		
		Если НаСервере Тогда
			
			//		Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.CertKEyНасервере(Thumbprint_1)
			
		Иначе
				
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;


			СРегистра=Thumbprint_1.ТокенПоОтпечатку;

			Если ЗначениеЗаполнено(Срегистра) Тогда	
				
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v1/users/current");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
				Попытка
					Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
					Текст1=Ответ.ПолучитьТелоКакСтроку();
					
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);
					user="";
					Если Ответ.КодСостояния=200 И NNN.Свойство("user",user) Тогда
						Возврат СРЕгистра
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;











			
						






			Тело = "{
			|""client_id"": """+Thumbprint_1.ИдентификаторКлиентаМДЛП+""",
			|""client_secret"": """+Thumbprint_1.СекретныйКодМДЛП+""",
			|""user_id"": """+Thumbprint_1.Thumbprint_1+""",
			|""auth_type"": """+"SIGNED_CODE"+"""
			|}";
			Запрос=Новый HTTPЗапрос("api/v1/auth");
			Запрос.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
			Запрос.УстановитьТелоИзСтроки(Тело);
			Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(Запрос);
			Если Ответ.КодСостояния=200 Тогда 	
				ОтветСтруктура =ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
				Подписываем=ОтветСтруктура.code;
				Имя_вр_1="";
				ПодписатьФайл(Thumbprint_1.Внешняя,Подписываем,Thumbprint_1,Имя_вр_1,Истина,,,Thumbprint_1.PIN);
				
				Добав=Имя_вр_1;
				//Добав=ПолучитьСтрокуИздвоичныхДанных(РР);
				//Добав=КодСтрСервер(Добав);
				Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");
				
				Тело = "{
				|""code"": """+ОтветСтруктура.code+""",
				|""signature"": """+Добав+"""
				|}";
				
				
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v1/token");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
				
				
				
				//ЧтениеJSON = Новый ЧтениеJSON;
				//ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
				Попытка


					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());//ПрочитатьJSON(ЧтениеJSON);
				Исключение
					//				Сообщить("Текстовая строка "+ТекстJSON+" не соответствует шаблону JSON");
					Сообщить(Описаниеошибки());
					Возврат Неопределено;
				КонецПопытки;
				Ош="";
				Если NNN=Неопределено тогда
					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(2);
					Сообщить("Не удалось подключиться к сайту: "+Thumbprint_1.АдресКАПИ);
					
					Возврат "";
					
				Иначе
					Если     NNN.Свойство("error_message",Ош) Тогда
						Сообщить(Ош);
						Возврат "";
					КонецЕсли;
					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(Thumbprint_1.Thumbprint_1,NNN.token);
				
					Возврат NNN.token
				КонецЕсли;
			Иначе
				ПоказатьПредупреждение(,"Не удалось подключиться к сайту: "+Thumbprint_1.АдресКАПИ);
				
				Возврат "";
			КонецЕсли;	
		КонецЕсли;








	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат "";
	КонецПопытки;
	
КонецФункции



&НаКлиенте
Процедура ПодписатьФайл_ЛДМП(Знач ИмяВр,Текущийпользователь,Имя_вр_1,Открепленная=Ложь,Уже64=Ложь)	Экспорт
	cadesplugin=Новый Структура();
	cadesplugin.Вставить("CAPICOM_LOCAL_MACHINE_STORE", 1);
	cadesplugin.Вставить("CAPICOM_CURRENT_USER_STORE", 2);
	cadesplugin.Вставить("CADESCOM_LOCAL_MACHINE_STORE", 1);
	cadesplugin.Вставить("CADESCOM_CURRENT_USER_STORE", 2);
	cadesplugin.Вставить("CADESCOM_CONTAINER_STORE", 100);
	
	cadesplugin.Вставить("CAPICOM_MY_STORE", "My");
	
	cadesplugin.Вставить("CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED", 2);
	
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME", 1);
	
	cadesplugin.Вставить("CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED", 0);
	cadesplugin.Вставить("CADESCOM_XML_SIGNATURE_TYPE_ENVELOPING", 1);
	cadesplugin.Вставить("CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE", 2);
	
	cadesplugin.Вставить("XmlDsigGost3410UrlObsolete", "http://www.Вставить(""w3.Вставить(""org/2001/04/xmldsig-more#gostr34102001-gostr3411");
	cadesplugin.Вставить("XmlDsigGost3411UrlObsolete", "http://www.Вставить(""w3.Вставить(""org/2001/04/xmldsig-more#gostr3411");
	cadesplugin.Вставить("XmlDsigGost3410Url", "urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102001-gostr3411");
	cadesplugin.Вставить("XmlDsigGost3411Url", "urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr3411");
	
	cadesplugin.Вставить("CADESCOM_CADES_DEFAULT", 0);
	cadesplugin.Вставить("CADESCOM_CADES_BES", 1);
	cadesplugin.Вставить("CADESCOM_CADES_T", 5);
	cadesplugin.Вставить("CADESCOM_CADES_X_LONG_TYPE_1", 93);
	
	cadesplugin.Вставить("CADESCOM_ENCODE_BASE64", 0);
	cadesplugin.Вставить("CADESCOM_ENCODE_BINARY", 1);
	cadesplugin.Вставить("CADESCOM_ENCODE_ANY", -1);
	
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_INCLUDE_CHAIN_EXCEPT_ROOT", 0);
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN", 1);
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY", 2);
	
	cadesplugin.Вставить("CAPICOM_CERT_INFO_SUBJECT_SIMPLE_NAME", 0);
	cadesplugin.Вставить("CAPICOM_CERT_INFO_ISSUER_SIMPLE_NAME", 1);
	
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_SHA1_HASH", 0);                              
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME", 1);
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_ISSUER_NAME", 2);
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_ROOT_NAME", 3);
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_TEMPLATE_NAME", 4);
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_EXTENSION", 5);
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY", 6);
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_APPLICATION_POLICY", 7);
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_CERTIFICATE_POLICY", 8);
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_TIME_VALID", 9);
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_TIME_NOT_YET_VALID", 10);
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_TIME_EXPIRED", 11);
	cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_KEY_USAGE", 12);
	
	cadesplugin.Вставить("CAPICOM_DIGITAL_SIGNATURE_KEY_USAGE", 128);
	
	cadesplugin.Вставить("CAPICOM_PROPID_ENHKEY_USAGE", 9);
	
	cadesplugin.Вставить("CAPICOM_OID_OTHER", 0);
	cadesplugin.Вставить("CAPICOM_OID_KEY_USAGE_EXTENSION", 10);
	
	cadesplugin.Вставить("CAPICOM_EKU_CLIENT_AUTH", 2);
	cadesplugin.Вставить("CAPICOM_EKU_SMARTCARD_LOGON", 5);
	cadesplugin.Вставить("CAPICOM_EKU_OTHER", 0);
	
	cadesplugin.Вставить("CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME", 0);
	cadesplugin.Вставить("CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME", 1);
	cadesplugin.Вставить("CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION", 2);
	cadesplugin.Вставить("CADESCOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME", 0);
	cadesplugin.Вставить("CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME", 1);
	cadesplugin.Вставить("CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION", 2);
	cadesplugin.Вставить("CADESCOM_ATTRIBUTE_OTHER", -1);
	
	cadesplugin.Вставить("CADESCOM_STRING_TO_UCS2LE", 0);
	cadesplugin.Вставить("CADESCOM_BASE64_TO_BINARY", 1);
	
	cadesplugin.Вставить("CADESCOM_DISPLAY_DATA_NONE", 0);
	cadesplugin.Вставить("CADESCOM_DISPLAY_DATA_CONTENT", 1);
	cadesplugin.Вставить("CADESCOM_DISPLAY_DATA_ATTRIBUTE", 2);
	
	cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_RC2", 0);
	cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_RC4", 1);
	cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_DES", 2);
	cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_3DES", 3);
	cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_AES", 4);
	cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_GOST_28147_89", 25);
	
	cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_SHA1", 0);
	cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_MD2", 1);
	cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_MD4", 2);
	cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_MD5", 3);
	cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_SHA_256", 4);
	cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_SHA_384", 5);
	cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_SHA_512", 6);
	cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_CP_GOST_3411", 100);
	cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256", 101);
	cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512", 102);
	
	cadesplugin.Вставить("LOG_LEVEL_DEBUG", 4);
	cadesplugin.Вставить("LOG_LEVEL_INFO", 2);
	cadesplugin.Вставить("LOG_LEVEL_ERROR", 1);
	
	cadesplugin.Вставить("CADESCOM_AllowNone", 0);
	cadesplugin.Вставить("CADESCOM_AllowNoOutstandingRequest", "0x1");
	cadesplugin.Вставить("CADESCOM_AllowUntrustedCertificate", "0x2");
	cadesplugin.Вставить("CADESCOM_AllowUntrustedRoot", "0x4");
	cadesplugin.Вставить("CADESCOM_SkipInstallToStore", "0x10000000");
	
	
	
	CAPICOM_CURRENT_USER_STORE=2;
	CAPICOM_MY_STORE="My";
	CAPICOM_OTHER_STORE="AddressBook";
	CAPICOM_STORE_OPEN_READ_ONLY=0;
	CAPICOM_CERTIFICATE_FIND_TIME_VALID=9;
	CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED = 2;
	
	
	ТекДата=ТекущаяДата();
	
	СохранённыйОтпечатокДекларанта=Неопределено;
	СохранённыеОтпечаткиПолучателей=Новый Массив;
	// восстанавливаем настройки
	НашлиСертификат=Ложь;
	Попытка
		// формируем список наших сертификатов
		ТекЭлемент=Неопределено;
		СписокНашихСертификатов=Новый СписокЗначений;
		
		Store=Новый COMОбъект("CAPICOM.Store");
		Store.Open(CAPICOM_CURRENT_USER_STORE,CAPICOM_MY_STORE,CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);
		Certs=Store.Certificates;
		ValidCerts=Certs;//.Find(CAPICOM_CERTIFICATE_FIND_TIME_VALID,ТекДата,-1);
		Для CertNum=1 По ValidCerts.Count Цикл
			CurCert=ValidCerts.Item(CertNum);
			Thumbprint=CurCert.Thumbprint;
			Если Thumbprint=Текущийпользователь Тогда
				ВыбСертификат=CurCert;
				НашлиСертификат=Истина;
				Прервать;
			Конецесли;
		КонецЦикла;
	Исключение
		ТекстОшибки=СтрЗаменить(ОписаниеОшибки(),"'","");
		Сообщить(NStr("ru = 'Ошибка при работе с хранилищем сертификатов! (Возможно, не установлен модуль CAPICOM)"+Символы.ПС+"Описание ошибки: "+ТекстОшибки+"'", "ru"));
		Возврат;
	КонецПопытки;
	
	Если НашлиСертификат=Ложь Тогда
		Сообщить("В системе нет сертификата!!");
		Возврат;
	КонецЕсли;

	
	//Если     Открепленная=Истина  ТОгда
	////Ф=ПолучитьИмяВременногоФайла();
	//Текст=Новый ТекстовыйДокумент;
	//Текст.ДобавитьСтроку(ИмяВр);
	////Текст.Записать(Ф);
	////ИмяФ_1=ПолучитьИмяВременногоФайла();
	//
	//КонецЕсли;
	
	
	
	Signer=Новый COMОбъект("CAPICOM.Signer");
	Signer.Certificate=ВыбСертификат;
	  Signer.Options=2; // CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY
	  SignedData=Новый COMОбъект("CAPICOM.SignedData");
	  SignedData.Content=ИмяВр;
	   Имя_вр_1=SignedData.Sign(Signer,0,0);
	   
	   Возврат;
	oSigner = Новый COMОбъект("CAdESCOM.CPSigner"); // Объект, задающий параметры создания и содержащий информацию об усовершенствованной подписи. 
	
	oSigningTimeAttr=Новый COMОбъект("CADESCOM.CPAttribute");
	
	//oSigningTimeAttr.propset_Name(cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME);
	oSigningTimeAttr.Name=cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME;
	oTimeNow = Текущаядата();
	oSigningTimeAttr.Value=oTimeNow;
	attr = oSigner.AuthenticatedAttributes2;
	attr.Add(oSigningTimeAttr);
	oDocumentNameAttr = Новый COMОбъект("CADESCOM.CPAttribute");
	oDocumentNameAttr.Name=cadesplugin.CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME;
	oDocumentNameAttr.Value="CRPT";
	attr.Add(oDocumentNameAttr);
	oSigner.Certificate=ВыбСертификат;
	
	oSignedData = Новый COMОбъект("CAdESCOM.CadesSignedData");
	// Данные на подпись ввели
	oSigner.Options=cadesplugin.CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY;
//	oSigner.TSAAddress = "http://cryptopro.ru/tsp/";
	//oSigner.OCSPAddress = "http://cryptopro.ru/ocsp/";
	Если Уже64=Истина Тогда
		oSignedData.ContentEncoding=cadesplugin.CADESCOM_BASE64_TO_BINARY; //
		ИмяВр=ИмяВр;
		
	ИначеЕсли   Открепленная=Истина Тогда
		oSignedData.ContentEncoding=cadesplugin.CADESCOM_BASE64_TO_BINARY; //
		//ИмяВр=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ИмяВр));
		ИмяВр=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ИмяВр));
		
		
	Иначе
		oSignedData.ContentEncoding=cadesplugin.CADESCOM_STRING_TO_UCS2LE; //
	КонецЕсли;
	oSignedData.Content=
	ИмяВр;
	
	
//	Если Открепленная=Истина Тогда
		Имя_вр_1 = oSignedData.SignCades(oSigner,1,true);
		
	
	
	
	Возврат;
	
	oSigner = Новый COMОбъект("CAdESCOM.CPSigner"); // Объект, задающий параметры создания и содержащий информацию об усовершенствованной подписи. 
	
	oSigningTimeAttr=Новый COMОбъект("CADESCOM.CPAttribute");
	
	//oSigningTimeAttr.propset_Name(cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME);
	oSigningTimeAttr.Name=cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME;
	oTimeNow = Текущаядата();
	oSigningTimeAttr.Value=oTimeNow;
	attr = oSigner.AuthenticatedAttributes2;
	attr.Add(oSigningTimeAttr);
	oDocumentNameAttr = Новый COMОбъект("CADESCOM.CPAttribute");
	oDocumentNameAttr.Name=cadesplugin.CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME;
	oDocumentNameAttr.Value="CRPT";
	attr.Add(oDocumentNameAttr);
	oSigner.Certificate=ВыбСертификат;
	
	oSignedData = Новый COMОбъект("CAdESCOM.CadesSignedData");
	// Данные на подпись ввели
	oSigner.Options=cadesplugin.CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY;
//	oSigner.TSAAddress = "http://cryptopro.ru/tsp/";
	//oSigner.OCSPAddress = "http://cryptopro.ru/ocsp/";
	Если Уже64=Истина Тогда
		oSignedData.ContentEncoding=cadesplugin.CADESCOM_BASE64_TO_BINARY; //
		ИмяВр=ИмяВр;
		
	ИначеЕсли   Открепленная=Истина Тогда
		oSignedData.ContentEncoding=cadesplugin.CADESCOM_BASE64_TO_BINARY; //
		//ИмяВр=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ИмяВр));
		ИмяВр=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ИмяВр));
	Иначе
		oSignedData.ContentEncoding=cadesplugin.CADESCOM_STRING_TO_UCS2LE; //
	КонецЕсли;
	oSignedData.Content=
	ИмяВр;
	
	
//	Если Открепленная=Истина Тогда
		Имя_вр_1 = oSignedData.SignCades(oSigner,1,true);
		//Имя_вр_1 =Base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Имя_вр_1));
//	Иначе
//		Имя_вр_1 = oSignedData.SignCades(oSigner, cadesplugin.CADESCOM_CADES_BES);
//	КонецЕсли;
	
//	Имя_вр_1 = oSignedData.SignCades(oSigner, cadesplugin.CADESCOM_CADES_BES);
	
	
	//    ПолучитьСписокСертификатов(2, Истина,ОповещенияПослеВыполения,ИмяВр,Текущийпользователь,ЭтаФорма,ОтветСтруктура);
	
	
КонецПроцедуры		


&НаКлиенте
Функция ОбработкаСледующих() 			
	
	Попытка
				objXL = new COMОбъект("Aktiv.RtControl32");
				is_in = objXL.isTokenInserted();
				Если is_in=Ложь Тогда
					//ПоказатьПредупреждение(,"Нет токена");
					Возврат Ложь;
				КонецЕсли;
			Исключение
				Попытка
					objXL = new COMОбъект("Aktiv.RtControl64");
					is_in = objXL.isTokenInserted();
					Если is_in=Ложь Тогда
						//ПоказатьПредупреждение(,"Нет токена");
						Возврат Ложь;
					КонецЕсли;
				Исключение
					Попытка
						objXL = new COMОбъект("x86 - mskeycom.mskey.1");
						is_in = objXL.isTokenInserted();
						Если is_in=Ложь Тогда
							//ПоказатьПредупреждение(,"Нет токена");
							Возврат Ложь;
						КонецЕсли;
					Исключение
						Попытка
							objXL = new COMОбъект("x64 - mskeycom64.mskey.1");
							is_in = objXL.isTokenInserted();
							Если is_in=Ложь Тогда
								//ПоказатьПредупреждение(,"Нет токена");
								Возврат ЛОжь;
							КонецЕсли;
						Исключение
							
			//ПоказатьПредупреждение(,"Нет токена");
			
			
			Возврат Ложь;
							
						КонецПопытки;
					КонецПопытки;
				КонецПопытки;
		КонецПопытки;			
	Возврат objXL
				
КонецФункции


&НаКлиенте
Функция ПоСтаромуОбъект()
	
Попытка
		objXL=new COMОбъект("Narrow.JcControl32");
		is_in = objXL.isTokenInserted();
		Если is_in=Ложь Тогда
						
			Возврат ОбработкаСледующих();
		КонецЕсли;
	Исключение
		
				Попытка
					objXL=new COMОбъект("Narrow.JcControl32");
					is_in = objXL.isTokenInserted();
					Если is_in=Ложь Тогда
									
						Возврат ОбработкаСледующих();
					КонецЕсли;
Исключение
		Попытка
			objXL = new COMОбъект("Wide.JcControl64");
			
			is_in = objXL.isTokenInserted();
				Если is_in=Ложь Тогда
					ВызватьИсключение Ложь;
				КонецЕсли;
		Исключение
	Попытка
				objXL = new COMОбъект("Aktiv.RtControl32");
				is_in = objXL.isTokenInserted();
				Если is_in=Ложь Тогда
					ВызватьИсключение Ложь;
				КонецЕсли;
			Исключение
				Попытка
					objXL = new COMОбъект("Aktiv.RtControl64");
					is_in = objXL.isTokenInserted();
					Если is_in=Ложь Тогда
					ВызватьИсключение Ложь;
					КонецЕсли;
				Исключение
					Попытка
						objXL = new COMОбъект("x86 - mskeycom.mskey.1");
						is_in = objXL.isTokenInserted();
						Если is_in=Ложь Тогда
					ВызватьИсключение Ложь;
						КонецЕсли;
					Исключение
						Попытка
							objXL = new COMОбъект("x64 - mskeycom64.mskey.1");
							is_in = objXL.isTokenInserted();
							Если is_in=Ложь Тогда
					ВызватьИсключение Ложь;
							КонецЕсли;
						Исключение
							
			//ПоказатьПредупреждение(,"Нет токена");
			
			
			Возврат Ложь;
							
						КонецПопытки;
					КонецПопытки;
				КонецПопытки;
		КонецПопытки;			
			КонецПопытки;
			КонецПопытки
	КонецПопытки;
	
	 Возврат objXL
КонецФункции


&НаКлиенте
Функция getObjXL() Экспорт
	
	Попытка
		objXL=new COMОбъект("Narrow.JcControl32");
		objXL.pkcs11lib = "jcPKCS11-2.dll";
		is_in = objXL.isTokenInserted();
		Если is_in=Ложь Тогда
						
			ВызватьИсключение Ложь;
		КонецЕсли;
	Исключение
		
		
		
				Попытка
				objXL = new COMОбъект("Aktiv.RtControl32");
				objXL.pkcs11lib = "rtpkcs11ecp.dll";
				is_in = objXL.isTokenInserted();
				Если is_in=Ложь Тогда
					ВызватьИсключение Ложь;
				КонецЕсли;
Исключение
		Попытка
			objXL = new COMОбъект("Wide.JcControl64");
			
			is_in = objXL.isTokenInserted();
				Если is_in=Ложь Тогда
					ВызватьИсключение Ложь;
				КонецЕсли;
		Исключение
	Попытка
					objXL = new COMОбъект("Aktiv.RtControl64");
					objXL.pkcs11lib = "rtpkcs11ecp.dll";
					is_in = objXL.isTokenInserted();
					Если is_in=Ложь Тогда
					ВызватьИсключение Ложь;
					КонецЕсли;
			Исключение
				Попытка
					objXL=new COMОбъект("Narrow.JcControl32");
					objXL.pkcs11lib = "rtpkcs11ecp.dll";
					is_in = objXL.isTokenInserted();
					Если is_in=Ложь Тогда
									
						ВызватьИсключение Ложь;
						//Возврат ОбработкаСледующих();
					КонецЕсли;
				Исключение
					Попытка
						objXL = new COMОбъект("x86 - mskeycom.mskey.1");
						is_in = objXL.isTokenInserted();
						Если is_in=Ложь Тогда
					ВызватьИсключение Ложь;
						КонецЕсли;
					Исключение
						Попытка
							objXL = new COMОбъект("x64 - mskeycom64.mskey.1");
							is_in = objXL.isTokenInserted();
							Если is_in=Ложь Тогда
					ВызватьИсключение Ложь;
							КонецЕсли;
						Исключение
							
							
			objxl=ПоСтаромуОбъект();				
					
							Если objxl=Ложь Тогда
			//ПоказатьПредупреждение(,"Нет токена");
			
			
			
			
			
			Возврат Ложь;
		Иначе
			Возврат objxl
		КонецЕсли;
						КонецПопытки;
					КонецПопытки;
				КонецПопытки;
		КонецПопытки;			
			КонецПопытки;
			КонецПопытки
	КонецПопытки;
	Возврат objXL;
КонецФункции


&НаКлиенте
Процедура ПодписатьФайл(Внешняя,Знач ИмяВр,Текущийпользователь_1,Имя_вр_1,Открепленная=Ложь,Уже64=Ложь,СерийныйНомер="",PIN="",
	ПодписываемКарточку=Ложь)	Экспорт
	
	Если ТипЗнч(Текущийпользователь_1)=Тип("Строка") тогда
		Текущийпользователь=Текущийпользователь_1;
		Если ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере_ПолучитьТокен() Тогда
			 ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПодписатьФайл(Внешняя,ИмяВр,Текущийпользователь,Имя_вр_1,Открепленная,Уже64,СерийныйНомер,PIN,ПодписываемКарточку);
			 Возврат;
		Конецесли;
		
	Иначе
		Если Текущийпользователь_1.БратьСертификатНасервере=Истина Тогда
			 ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПодписатьФайл(Внешняя,ИмяВр,Текущийпользователь_1,Имя_вр_1,Открепленная,Уже64,СерийныйНомер,PIN,ПодписываемКарточку);
			 Возврат;
			
			
		Конецесли;
		Текущийпользователь=Текущийпользователь_1.Thumbprint_1;
		
		
		
	Конецесли;
	
	Если Внешняя Тогда
		
		ОткрФ=ПолучитьФорму("Обработка.ПодключениеПоСертификату.Форма.Форма");
		ОткрФ.ПодписатьФайл(ИмяВр,Текущийпользователь,Имя_вр_1,Открепленная,Уже64);
	 
		возврат;
	КонецЕслИ;
	
	
	
	
		//МенеджерКриптографии = Новый МенеджерКриптографии("Crypto-Pro GOST R 34.10-2012 Cryptographic Service Provider", "", 80 );
		////МенеджерКриптографии.АлгоритмХеширования        = "SHA-256";
		////МенеджерКриптографии.АлгоритмПодписи            = "RSA_SIGN";
		//МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу    = "";
		//МенеджерКриптографии.ВключениеСертификатовВПодпись    = РежимВключенияСертификатовКриптографии.ВключатьПолнуюЦепочку;
		//Хранилище = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты).ПолучитьВсе()[5];
		////Сертификат = Хранилище.НайтиПоСубъекту(Параметры.client_id);
		////Подпись    = МенеджерКриптографии.Подписать(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ИмяВр )   , Хранилище); 	
		//Подпись    = МенеджерКриптографии.Подписать(base64Значение(ИмяВр )   , Хранилище); 	
		// Имя_вр_1=base64Строка (Подпись);
		// 
		// Возврат;
  //  МенеджерКриптографии = Новый МенеджерКриптографии();
	//МенеджерКриптографии.НачатьИнициализацию(Новый ОписаниеОповещения("ПослеИнициализации",ЭтаФорма,ДопПараметры),"","",ДопПараметры.ТипМенеджераКриптографии);
	
	//МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу=ТекущийПользователь.Пароль;
//	МенеджерКриптографии.ВключениеСертификатовВПодпись=РежимВключенияСертификатовКриптографии.НеВключать;
//	МенеджерКриптографии.Подписать(ИмяВр,);
//	МенеджерКриптографии.НачатьПолучениеХранилищаСертификатов(Новый ОписаниеОповещения("ПослеПолученияСертификатов",ЭтаФорма,
//	ДопПараметры
//	),ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты
//	);
	
	Если ЗначениеЗаполнено(PIN) Тогда
		
		///ООО=Новый COMОбъект("SIGNHAMCR183ID.SIGNED");
		ООО=Новый COMОбъект("RandomDLL.Random");
		
		f="22df";
		c="3sdfsdfdfs";
		c=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ИмяВр));
		d="4";
		Попытка
			ООО.GetRandomValue(f,c,d);
		Исключение
			   Инфо = ИнформацияОбОшибке();
    Сообщить("Описание='" + Инфо.Описание + "'");
    Сообщить("ИмяМодуля='" + Инфо.ИмяМодуля + "'");
    Сообщить("НомерСтроки=" + Инфо.НомерСтроки);
    Сообщить("ИсходнаяСтрока='" + Инфо.ИсходнаяСтрока + "'");

		КонецПопытки;
		
		Имя_вр_1="";
		
		Возврат;
		
		
		objXL=getObjXL();
		Если objXL=Ложь Тогда
			Возврат;
		КонецЕсли;
			Если Уже64=Истина Тогда
            ИмяВр=ИмяВр;
				
		   ИначеЕсли   Открепленная=Истина Тогда
         //   ИмяВр=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ИмяВр));
			
		Иначе
		// ИмяВр=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ИмяВр));
			
              //oSignedData.ContentEncoding=cadesplugin.CADESCOM_STRING_TO_UCS2LE; //
		КонецЕсли;
		
			
		Имя_Вр_1=objXL.calculateResponse(Текущийпользователь,ИмяВр,PIN);
		//Имя_Вр_1=objXL.Encrypt(Текущийпользователь,ИмяВр,PIN);
		
		Возврат;
	Конецесли;
	
	
	 
	

	    cadesplugin=Новый Структура();
        cadesplugin.Вставить("CAPICOM_LOCAL_MACHINE_STORE", 1);
        cadesplugin.Вставить("CAPICOM_CURRENT_USER_STORE", 2);
        cadesplugin.Вставить("CADESCOM_LOCAL_MACHINE_STORE", 1);
        cadesplugin.Вставить("CADESCOM_CURRENT_USER_STORE", 2);
        cadesplugin.Вставить("CADESCOM_CONTAINER_STORE", 100);

        cadesplugin.Вставить("CAPICOM_MY_STORE", "My");

        cadesplugin.Вставить("CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED", 2);

        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME", 1);

        cadesplugin.Вставить("CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED", 0);
        cadesplugin.Вставить("CADESCOM_XML_SIGNATURE_TYPE_ENVELOPING", 1);
        cadesplugin.Вставить("CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE", 2);

        cadesplugin.Вставить("XmlDsigGost3410UrlObsolete", "http://www.Вставить(""w3.Вставить(""org/2001/04/xmldsig-more#gostr34102001-gostr3411");
        cadesplugin.Вставить("XmlDsigGost3411UrlObsolete", "http://www.Вставить(""w3.Вставить(""org/2001/04/xmldsig-more#gostr3411");
        cadesplugin.Вставить("XmlDsigGost3410Url", "urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102001-gostr3411");
        cadesplugin.Вставить("XmlDsigGost3411Url", "urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr3411");

        cadesplugin.Вставить("CADESCOM_CADES_DEFAULT", 0);
        cadesplugin.Вставить("CADESCOM_CADES_BES", 1);
        cadesplugin.Вставить("CADESCOM_CADES_T", 5);
        cadesplugin.Вставить("CADESCOM_CADES_X_LONG_TYPE_1", 93);

        cadesplugin.Вставить("CADESCOM_ENCODE_BASE64", 0);
        cadesplugin.Вставить("CADESCOM_ENCODE_BINARY", 1);
        cadesplugin.Вставить("CADESCOM_ENCODE_ANY", -1);

        cadesplugin.Вставить("CAPICOM_CERTIFICATE_INCLUDE_CHAIN_EXCEPT_ROOT", 0);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN", 1);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY", 2);

        cadesplugin.Вставить("CAPICOM_CERT_INFO_SUBJECT_SIMPLE_NAME", 0);
        cadesplugin.Вставить("CAPICOM_CERT_INFO_ISSUER_SIMPLE_NAME", 1);

        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_SHA1_HASH", 0);                              
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME", 1);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_ISSUER_NAME", 2);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_ROOT_NAME", 3);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_TEMPLATE_NAME", 4);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_EXTENSION", 5);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY", 6);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_APPLICATION_POLICY", 7);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_CERTIFICATE_POLICY", 8);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_TIME_VALID", 9);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_TIME_NOT_YET_VALID", 10);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_TIME_EXPIRED", 11);
        cadesplugin.Вставить("CAPICOM_CERTIFICATE_FIND_KEY_USAGE", 12);

        cadesplugin.Вставить("CAPICOM_DIGITAL_SIGNATURE_KEY_USAGE", 128);

        cadesplugin.Вставить("CAPICOM_PROPID_ENHKEY_USAGE", 9);

        cadesplugin.Вставить("CAPICOM_OID_OTHER", 0);
        cadesplugin.Вставить("CAPICOM_OID_KEY_USAGE_EXTENSION", 10);

        cadesplugin.Вставить("CAPICOM_EKU_CLIENT_AUTH", 2);
        cadesplugin.Вставить("CAPICOM_EKU_SMARTCARD_LOGON", 5);
        cadesplugin.Вставить("CAPICOM_EKU_OTHER", 0);

        cadesplugin.Вставить("CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME", 0);
        cadesplugin.Вставить("CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME", 1);
        cadesplugin.Вставить("CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION", 2);
        cadesplugin.Вставить("CADESCOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME", 0);
        cadesplugin.Вставить("CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME", 1);
        cadesplugin.Вставить("CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION", 2);
        cadesplugin.Вставить("CADESCOM_ATTRIBUTE_OTHER", -1);

        cadesplugin.Вставить("CADESCOM_STRING_TO_UCS2LE", 0);
        cadesplugin.Вставить("CADESCOM_BASE64_TO_BINARY", 1);

        cadesplugin.Вставить("CADESCOM_DISPLAY_DATA_NONE", 0);
        cadesplugin.Вставить("CADESCOM_DISPLAY_DATA_CONTENT", 1);
        cadesplugin.Вставить("CADESCOM_DISPLAY_DATA_ATTRIBUTE", 2);

        cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_RC2", 0);
        cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_RC4", 1);
        cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_DES", 2);
        cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_3DES", 3);
        cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_AES", 4);
        cadesplugin.Вставить("CADESCOM_ENCRYPTION_ALGORITHM_GOST_28147_89", 25);

        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_SHA1", 0);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_MD2", 1);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_MD4", 2);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_MD5", 3);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_SHA_256", 4);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_SHA_384", 5);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_SHA_512", 6);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_CP_GOST_3411", 100);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256", 101);
        cadesplugin.Вставить("CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512", 102);

        cadesplugin.Вставить("LOG_LEVEL_DEBUG", 4);
        cadesplugin.Вставить("LOG_LEVEL_INFO", 2);
        cadesplugin.Вставить("LOG_LEVEL_ERROR", 1);

        cadesplugin.Вставить("CADESCOM_AllowNone", 0);
        cadesplugin.Вставить("CADESCOM_AllowNoOutstandingRequest", "0x1");
        cadesplugin.Вставить("CADESCOM_AllowUntrustedCertificate", "0x2");
        cadesplugin.Вставить("CADESCOM_AllowUntrustedRoot", "0x4");
        cadesplugin.Вставить("CADESCOM_SkipInstallToStore", "0x10000000");
	
	
	
	CAPICOM_CURRENT_USER_STORE=2;
	CAPICOM_MY_STORE="My";
	CAPICOM_OTHER_STORE="AddressBook";
	CAPICOM_STORE_OPEN_READ_ONLY=0;
	CAPICOM_CERTIFICATE_FIND_TIME_VALID=9;
	CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED = 2;

	
	ТекДата=ТекущаяДата();
	
	СохранённыйОтпечатокДекларанта=Неопределено;
	СохранённыеОтпечаткиПолучателей=Новый Массив;
	// восстанавливаем настройки
	НашлиСертификат=Ложь;
	Попытка
		// формируем список наших сертификатов
		ТекЭлемент=Неопределено;
		СписокНашихСертификатов=Новый СписокЗначений;
		
		Store=Новый COMОбъект("CAPICOM.Store");
//		Store.Open(CAPICOM_CURRENT_USER_STORE,CAPICOM_MY_STORE,CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);
		Store.Open();
		Certs=Store.Certificates;
		ValidCerts=Certs;//.Find(CAPICOM_CERTIFICATE_FIND_TIME_VALID,ТекДата,-1);
		Для CertNum=1 По ValidCerts.Count Цикл
			
			CurCert=ValidCerts.Item(CertNum);
			Thumbprint=CurCert.Thumbprint;
			СерийныйНомер=CurCert.SerialNumber;
			Если Thumbprint=Текущийпользователь Тогда
				ВыбСертификат=CurCert;
				НашлиСертификат=Истина;
				Прервать;
			Конецесли;
		КонецЦикла;
		Попытка
			Store.close();
		Исключение
		КонецПопытки;
		
	Исключение
		ТекстОшибки=СтрЗаменить(ОписаниеОшибки(),"'","");
		Сообщить(NStr("ru = 'Ошибка при работе с хранилищем сертификатов! (Возможно, не установлен модуль CAPICOM)"+Символы.ПС+"Описание ошибки: "+ТекстОшибки+"'", "ru"));
		Возврат;
	КонецПопытки;
	Если НашлиСертификат=Ложь Тогда
		//Ищем закрытые
				
			Store=Новый COMОбъект("CAPICOM.Store");
			Store.Open(cadesplugin.CAPICOM_LOCAL_MACHINE_STORE);
			certs = Store.Certificates;
			ValidCerts=Certs;//.Find(CAPICOM_CERTIFICATE_FIND_TIME_VALID,ТекДата,-1);
			Для CertNum=1 По ValidCerts.Count Цикл
				
				CurCert=ValidCerts.Item(CertNum);
				Thumbprint=CurCert.Thumbprint;
				СерийныйНомер=CurCert.SerialNumber;
				Если Thumbprint=Текущийпользователь Тогда
					ВыбСертификат=CurCert;
					НашлиСертификат=Истина;
					Прервать;
				Конецесли;
			КонецЦикла;


		
		
	КонецЕсли;	
	Если НашлиСертификат=Ложь Тогда
		
			
		Сообщить("Не установлен сертификат в системе!!");
		Возврат;
	КонецЕсли;
	

	//Если     Открепленная=Истина  ТОгда
	////Ф=ПолучитьИмяВременногоФайла();
	//Текст=Новый ТекстовыйДокумент;
	//Текст.ДобавитьСтроку(ИмяВр);
	////Текст.Записать(Ф);
	////ИмяФ_1=ПолучитьИмяВременногоФайла();
	//
	//КонецЕсли;
	
	oSigner = Новый COMОбъект("CAdESCOM.CPSigner"); // Объект, задающий параметры создания и содержащий информацию об усовершенствованной подписи. 
	
	oSigningTimeAttr=Новый COMОбъект("CADESCOM.CPAttribute");

    //oSigningTimeAttr.propset_Name(cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME);
    oSigningTimeAttr.Name=cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME;
    oTimeNow = Текущаядата();
    oSigningTimeAttr.Value=oTimeNow;
    attr = oSigner.AuthenticatedAttributes2;
    attr.Add(oSigningTimeAttr);
     oDocumentNameAttr = Новый COMОбъект("CADESCOM.CPAttribute");
      oDocumentNameAttr.Name=cadesplugin.CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME;
      oDocumentNameAttr.Value="CRPT";
      attr.Add(oDocumentNameAttr);
          oSigner.Certificate=ВыбСертификат;

           oSignedData = Новый COMОбъект("CAdESCOM.CadesSignedData");
                // Данные на подпись ввели
				Если 
					ПодписываемКарточку=Ложь И
					НЕ ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВернутьНеИспользоватьCAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY() 
					
					Тогда
           				oSigner.Options=cadesplugin.CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY;
					КонецЕсли;
//			oSigner.TSAAddress = "http://cryptopro.ru/tsp/";
			//oSigner.OCSPAddress = "http://cryptopro.ru/ocsp/";
			Если Уже64=Истина Тогда
             oSignedData.ContentEncoding=cadesplugin.CADESCOM_BASE64_TO_BINARY; //
			ИмяВр=ИмяВр;
				
		   ИначеЕсли   Открепленная=Истина Тогда
             oSignedData.ContentEncoding=cadesplugin.CADESCOM_BASE64_TO_BINARY; //
			//ИмяВр=base64Строка(ПолучитьДвоичныеДанныеИзСтроки(ИмяВр,,));
			ИмяВр=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(ИмяВр));
			
			
			
		  Иначе
              oSignedData.ContentEncoding=cadesplugin.CADESCOM_STRING_TO_UCS2LE; //
		КонецЕсли;
                      oSignedData.Content=
			 ИмяВр;
			 
			 
			 Если Открепленная=Истина Тогда
               Имя_вр_1 = oSignedData.SignCades(oSigner,1,true);
 			    //Имя_вр_1 =Base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Имя_вр_1));
				Иначе
               Имя_вр_1 = oSignedData.SignCades(oSigner, cadesplugin.CADESCOM_CADES_BES);
	                 КонецЕсли;
	
	
//    ПолучитьСписокСертификатов(2, Истина,ОповещенияПослеВыполения,ИмяВр,Текущийпользователь,ЭтаФорма,ОтветСтруктура);
	
	
КонецПроцедуры		

&НаКлиенте
Процедура ПодписатьФайл_XML(ИмяВр,ИмяВр_1,Текущийпользователь)	Экспорт
	
	CAPICOM_CURRENT_USER_STORE=2;
	CAPICOM_MY_STORE="My";
	CAPICOM_OTHER_STORE="AddressBook";
	CAPICOM_STORE_OPEN_READ_ONLY=0;
	CAPICOM_CERTIFICATE_FIND_TIME_VALID=9;
	
	ТекДата=ТекущаяДата();
	
	СохранённыйОтпечатокДекларанта=Неопределено;
	СохранённыеОтпечаткиПолучателей=Новый Массив;
	// восстанавливаем настройки
				НашлиСертификат=Ложь;
	Попытка
		// формируем список наших сертификатов
		ТекЭлемент=Неопределено;
		СписокНашихСертификатов=Новый СписокЗначений;
		
		Store=Новый COMОбъект("CAPICOM.Store");
		Store.Open(CAPICOM_CURRENT_USER_STORE,CAPICOM_MY_STORE,CAPICOM_STORE_OPEN_READ_ONLY);
		Certs=Store.Certificates;
		ValidCerts=Certs;//.Find(CAPICOM_CERTIFICATE_FIND_TIME_VALID,ТекДата,-1);
		Для CertNum=1 По ValidCerts.Count Цикл
			CurCert=ValidCerts.Item(CertNum);
			Thumbprint=CurCert.Thumbprint;
			Если Thumbprint=Текущийпользователь Тогда
				ВыбСертификат=CurCert;
				НашлиСертификат=Истина;
				Прервать;
			Конецесли;
		КонецЦикла;
	Исключение
		ТекстОшибки=СтрЗаменить(ОписаниеОшибки(),"'","");
		Сообщить(NStr("ru = 'Ошибка при работе с хранилищем сертификатов! (Возможно, не установлен модуль CAPICOM)"+Символы.ПС+"Описание ошибки: "+ТекстОшибки+"'", "ru"));
		Возврат;
	КонецПопытки;
	
	Если НашлиСертификат=Ложь Тогда
		Сообщить("Не установлен сертификат в системе!!");
		Возврат;
	КонецЕсли;
	
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.Прочитать(ИмяВр);
	ТекстДляПодписи = ТекстДок.ПолучитьТекст();
	
	oSigner = Новый COMОбъект("CAdESCOM.CPSigner"); // Объект, задающий параметры создания и содержащий информацию об усовершенствованной подписи. 
	oSigner.Certificate = ВыбСертификат;
	
	oSignedData = Новый COMОбъект("CAdESCOM.CadesSignedData"); // Объект CadesSignedData предоставляет свойства и методы для работы с усовершенствованной подписью.
	oSignedData.Content = СокрЛП(ТекстДляПодписи);
	CADESCOM_CADES_TYPE = 1; // Тип усовершенствованной подписи 
	bDetached = Ложь; 
	EncodingType = 0; 
	sSignedMessage = oSignedData.SignCades(oSigner, CADESCOM_CADES_TYPE, bDetached, EncodingType); // Метод добавляет к сообщению усовершенствованную подпись. 
	
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(sSignedMessage);
	ТекстДок.Записать(ИмяВр_1,КодировкаТекста.ANSI);
КонецПроцедуры		

&НаКлиенте
Процедура ПолучитьИнформациюПоКМ(Дерево,Штрих,ТекущийПользователь,subjectIdФармацевтика="",Очищать=Истина) Экспорт
	
	УжеЗапрашивали=Новый Массив;
	Если Очищать=Истина Тогда
		Дерево.ПолучитьЭлементы().Очистить();
		Добав=Дерево.ПолучитьЭлементы().Добавить();
	КонецЕсли;	
	Thumbprint_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(ТекущийПользователь);	
	
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
		Если Очищать=Истина Тогда

			Добав.НомерКороба=Штрих;
			Добав.cis=Штрих;
		Иначе
			Добав=Дерево;
		КонецЕсли;
		Если ЗначениеЗаполнено(Срегистра) ТОгда
			РекурсияУпаковки_Лекарства(Добав,Thumbprint_1,СРегистра,Штрих,,subjectIdФармацевтика);
		Конецесли;
		
	ИначеЕсли Thumbprint_1.НаименованиеСтенда="Табак"
		ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак" Тогда
		
			СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
				КонецЕсли;
					
		КонецЕсли;
		
		   
		 
//		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	

		Если Очищать=Истина Тогда
			Добав.НомерКороба=Штрих;
			Добав.cis=Штрих;
		Иначе
			Добав=Дерево;
		КонецЕсли;
		Если ЗначениеЗаполнено(СРегистра) Тогда
			
			РекурсияУпаковки_Табак(Добав,Thumbprint_1,СРегистра,Штрих);
		Конецесли;
	
		
		
	Иначе
		   ////МЕНЯТЬ!!!
		   
		СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
				КонецЕсли;
					
		КонецЕсли;
		
		 
//		СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	

		Если Очищать=Истина Тогда
			Добав.НомерКороба=Штрих;
			Добав.cis=Штрих;
		Иначе
			Добав=Дерево;
		КонецЕсли;
//	Добав.НомерКороба=Штрих;
//		Добав.cis=Штрих;
		
		Если ЗначениеЗаполнено(СРегистра) тогда
			ПолучитьИнформациюОКМ_ПоСтранично(Штрих,Thumbprint_1,СРегистра,Добав,УжеЗапрашивали);
		Конецесли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьИнформациюОКМ_ПоСтранично(Штрих,Thumbprint_1,СРегистра,Добав,УжеЗапрашивали)
	

	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
			Прокси=Новый ИнтернетПрокси;
			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
		
HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		Иначе
HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		
			что=Thumbprint_1.что;
			
			
			
			
			
			
			
			
				
		МассивКМ_1=Новый Массив;
		МассивКМ_1.Очистить();
		МассивКМ_1.Добавить(Штрих);
		Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьтелоПоcis(МассивКМ_1);
		Страница=0;
		Пока Истина Цикл
			Страница=Страница+1;
			 
			HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/cis/cis_list?childrenPaging=true&childrenPage="+Формат(Страница,"ЧГ=")+"&childrenLimit=10&pg="+Что);
						
							
						//ИНН=ВернутьИНН(Обр.Организации[0].Организация );
				///HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/"+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_11.Марка));;
				//HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?gtin="+ДополнитьСтроку(Стр_11)+"&limit=100&offset=0");;
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			#Если ВебКлиент Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
			#Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
				
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
				Текст1=Ответ.ПолучитьТелоКакСтроку();
				
				числоЗагрузили=0;
				
				Тотал=0;
		//		БылиУпаковки=Ложь;
				Если Ответ.КодСостояния=200 Тогда
					
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					МассивКМ=Новый Массив;
					Если NNN[Штрих]<>Неопределено тогда
						Если NNN[Штрих]["children"]=Неопределено тогда
							Прервать;
						Иначе
								РекурсияПоПолучениюИнформации_1(NNN[Штрих],Штрих,HTTPСервисЗапрос,Thumbprint_1,СРегистра,Добав,УжеЗапрашивали,МассивКМ);
							ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗапишемТип_КМ_Из_Массива(МассивКМ);
						Конецесли;
					Иначе
						Прервать;
					Конецесли;
													
				ИначеЕсли Ответ.КодСостояния=401 
					ИЛИ Ответ.КодСостояния=502  
					Тогда
						//Если УжеОтправили=Истина Тогда
						ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(Thumbprint_1.Thumbprint_1,"");
							Прервать;
						Иначе
							Прервать;
				КонецЕсли;
			
				
			Конеццикла;
	
	
КонецПроцедуры


&НаКлиенте
Процедура РекурсияУпаковки_Табак(Строк,Thumbprint_1,СРегистра,cis_1,НеПолучать=Ложь) Экспорт
	
//Если НеПолучать=Ложь Тогда
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		Сообщить("Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	   НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	   
	   
		   
	   Если НаСервере Тогда
		 Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Строк.cis);  
		  Иначе
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
	
	//HTTPЗапрос=Новый HTTPЗапрос("api/v3/cises/"+Строк.cis);
	
	//Если СтрДлина(cis_1)=31 и Сред(cis_1,25,2)="21" И Сред(cis_1,1,2)="00" ТОгда
	//	cis="("+Сред(cis_1,1,2)+")"+Сред(cis_1,3,22)+"("+Сред(cis_1,25,2)+")"+Сред(cis_1,27);
	//Иначе
		НомерКМ=cis_1;
	//КонецЕсли;
	
				Если Сред(НомеркМ,1,3)="010" И Сред(НомерКМ,17,2)="21" Тогда
					НомерКМ="("+Сред(НомерКМ,1,2)+")"+Сред(НомерКМ,3,14)+"("+Сред(НомерКМ,17,2)+")"+Сред(НомерКМ,19);
				ИначеЕсли Сред(НомерКМ,1,2)<>"01"
					И 
					Сред(НомерКМ,1,4)<>"(01)" Тогда
					Возврат
				КонецЕсли;
	           cis=НомерКМ;
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/true-api/cises/list?values="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(cis));
			  
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
КонецЕсли;
Если НаСервере Тогда
	Текст1=Ответ.ПолучитьТелоКакСтроку;
	
Иначе
	Текст1=Ответ.ПолучитьТелоКакСтроку();
КонецЕсли;	
//ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(Текст1);           

	NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
	//Попытка
	
	 Попытка
		   
	Если NNN.Количество()=0 ИЛИ NNN[0]["child"]=Неопределено Тогда 
		
		Возврат;
	КонецЕсли;
	
	
	Для Каждого Стр_1 Из NNN[0]["child"] Цикл
		
		Попытка
			Строк_1=Строк.ПолучитьЭлементы().Добавить();
			Строк_1.НомерКМ=Стр_1;
			Если ЗначениеЗаполнено(Стр_1) тогда
			//Строк_1.Продукция=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СоздатьПродукцию(Стр_1);
					РекурсияУпаковки_Табак(Строк_1,Thumbprint_1,СРегистра,Стр_1)
				Конецесли;
			Исключение
				КонецПопытки;
			КонецЦиклА;
		Исключение
			Сообщить("Не удалось получить информацию по КМ "+Строка(НомерКМ))
			КонецПопытки
	//	Исключение
	//		КонецПопытки
			//Если NNN["Значение"]<>Неопределено Тогда
			//	стр_1=NNN["Значение"];
			//	Строк_1=Строк.ПолучитьЭлементы().Добавить();
			//	Строк_1.НомерКМ=Стр_1["cis"];
			//	Если ЗначениеЗаполнено(Стр_1["cis"]) тогда
			//	//Строк_1.Продукция=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СоздатьПродукцию(Стр_1);
			//			РекурсияУпаковки(Строк_1,Thumbprint_1,СРегистра,Стр_1["cis"])
			//		Конецесли;
			//	
			//	
			//Конецесли;
			
	//Конеццикла;		
//	Возврат;
//КонецЕсли;	
//КонецПопытки;
	//Если NNN=Неопределено
	
	//КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура РекурсияУпаковки_Лекарства(Строк,Thumbprint_1,СРегистра,cis_1,НеПолучать=Ложь,subjectIdФармацевтика) Экспорт
	
//Если НеПолучать=Ложь Тогда
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		Сообщить("Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	   НаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	   
	   
	Если СтрДлина(cis_1)=20 Тогда
		cis_1=Сред(cis_1,3);
	КонецЕслИ;
		Если СтрДлина(cis_1)<>18 Тогда
			Возврат;
		КонецЕсли;
	   Если НаСервере Тогда
		// Ответ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучениеУпаковок(Thumbprint_1,СРегистра,Строк.cis);  
	Иначе
	
		
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
			
				HTTPЗапрос=Новый HTTPЗапрос("api/v1/reestr/sscc/"+cis_1+"/full-hierarchy");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(31);
		        МассивДобавить=Новый Массив;
				МассивДобавить.Очистить();
		Если Ответ.КодСостояния=200 Тогда
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			down=Неопределено;
			childs=Неопределено;
			Если NNN.Свойство("down",down) И
				down.Свойство("childs",childs) Тогда
				Для Каждого Стр_childs Из childs Цикл
					ключ=Неопределено;
					Если 
						Стр_childs.Свойство("sgtin",ключ) И ЗначениеЗАполнено(Ключ) Тогда
								//Строк_1.НомерКМ=ключ;                         	
								МассивДобавить.Добавить(Новый Структура("НомерКМ",ключ));
								КонецЕсли
				 КонецЦикла;
				 
				 					 Для Каждого Стр_1 Из МассивДобавить Цикл
							Строк_1=Строк.ПолучитьЭлементы().Добавить();
							ключ=Стр_1.НомерКМ;
							Строк_1.НомерКМ=ключ;                         	
							Если СтрДлина(Строк_1.НомерКМ)=18 Тогда
									РекурсияУпаковки_Лекарства(Строк_1,Thumbprint_1,СРегистра,Строк_1.НомерКМ,НеПолучать,subjectIdФармацевтика)								
								
							КонецЕсли;
						 
					Конеццикла;

				 
			КонецЕсли
			
			
			
			
		КонецЕсли;
		
	
		
		
		
		
		
		
							//	 МассивДобавить=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.МассивКмОвДляОбработки(Текст1);
		//		Продолжить;
		
		  Возврат;
		
		
		
		
	Чтение=Новый ЗаписьXML;
	Чтение.УстановитьСтроку("UTF-8");
	Чтение.ЗаписатьОбъявлениеXML();
	Чтение.ЗаписатьНачалоЭлемента("documents");
	Чтение.ЗаписатьАтрибут("version","1.35");
 	
	Чтение.ЗаписатьНачалоЭлемента("query_kiz_info");
	Чтение.ЗаписатьАтрибут("action_id","210");
	
	Чтение.ЗаписатьНачалоЭлемента("subject_id");
	Чтение.ЗаписатьТекст(subjectIdФармацевтика);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьНачалоЭлемента("sscc_down");
	Чтение.ЗаписатьТекст(cis_1);
	Чтение.ЗаписатьКонецЭлемента();
	
	Чтение.ЗаписатьКонецЭлемента();
	Чтение.ЗаписатьКонецЭлемента();
	СформироватьФайлДляОтправки=Чтение.Закрыть();
			
		//Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

				
				
				
				Подписанный="";
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1,Подписанный,ЛОжь,,,Thumbprint_1.PIN);
		
			Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
		Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
			Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("document");
	Чтен.ЗаписатьЗначение(Добав);
	Чтен.ЗаписатьИмяСвойства("sign");
	Чтен.ЗаписатьЗначение(Подписанный);
	Чтен.ЗаписатьИмяСвойства("request_id");
	Чтен.ЗаписатьЗначение(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ВернутьУНИКУМ());
	Чтен.ЗаписатьКонецОбъекта();
	Тело=Чтен.Закрыть();
	
				 
				 
		//Тело="{
		//|""doc_type"":""311"",
		//|""document"":"""+Добав+""",
		//|""sign"":"""+Подписанный+""",
		//|""request_id"":"""+ВернутьУНИКУМ()+"
		//|}";
			
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/send");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
		
		Если Ответ.КодСостояния=200 Тогда
			
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			_Order_ID=NNN.document_id;
			
			
			Пока Истина Цикл
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
				
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
					HTTPЗапрос=Новый HTTPЗапрос("api/v1/documents/"+_Order_ID+"/ticket");
				Иначе
					HTTPЗапрос=Новый HTTPЗапрос("documents/"+_Order_ID+"/ticket");
					
				Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
					
					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
					
				КонецЕсли;
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
	
		
	//	 Попытка				
			 Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 Тогда
				 
				 
				 
				 
				Если Найти( Thumbprint_1.АдресКАПИ,"api")>0 Тогда
				 
				 
					//ЧтениеJSON = Новый ЧтениеJSON;
					//ЧтениеJSON.УстановитьСтроку(Текст1);
					NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
					
					
					//Сайт="http://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(NNN.link,Сайт,"");
					//Сайт="https://"+Thumbprint_1.АдресКАПИ;
					//Сайт_1=СтрЗаменить(Сайт_1,Сайт,"");
					Сайт_1=NNN.link;
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"//")+2);
					Сайт_1=Сред(Сайт_1,Найти(Сайт_1,"/")+1);
					
					
					
					
								HTTPЗапрос=Новый HTTPЗапрос(Сайт_1);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
		
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Текст1) 
		ИЛИ Найти(Текст1,"Ошибка при выполнении операции: запись не найдена"" }")>1
		тогда
						ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
						 
						 Продолжить;
					 КонецЕсли;
					 
					 
					 
					 
					 МассивДобавить=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.МассивКмОвДляОбработки(Текст1);
					 
					 Для Каждого Стр_1 Из МассивДобавить Цикл
							Строк_1=Строк.ПолучитьЭлементы().Добавить();
							ключ=Стр_1.НомерКМ;
							Строк_1.НомерКМ=ключ;                         	
							Если Стр_1.Продолжить=Истина Тогда
									РекурсияУпаковки_Лекарства(Строк_1,Thumbprint_1,СРегистра,Строк_1.НомерКМ,НеПолучать,subjectIdФармацевтика)								
								
							КонецЕсли;
						 
					Конеццикла;
					 
					 
					 
					 Прервать;
					 
					//	Результат="";
					//	Ошибка="";
					//	
					//	Пока Чтен.Прочитать() Цикл
					//		Если Чтен.Имя="operation_result" Тогда
					//			Чтен.Прочитать();
					//			Результат=Чтен.Значение;
					//			Чтен.Прочитать()
					//		ИначеЕсли Чтен.Имя="operation_comment" Тогда
					//			
					//			Чтен.Прочитать();
					//			Ошибка=Чтен.Значение;
					//			Чтен.Прочитать()
					//		КонецЕсли;
					//	Конеццикла;
					//	  
					//
					//  ОработатьДокументы(Стр,Результат,Ошибка)

					//
					//ОбработаноМассив.Добавить(Новый Структура("Докум,Сч,Статус,Ошибка",Стр.Документ,Стр.Сч,Результат,Ошибка));
				ИначеЕсли Ответ.КодСостояния=401 ИЛИ Ответ.КодСостояния=502    Тогда
					    	Возврат;					
				ИначеЕсли Ответ.КодСостояния=301 Тогда
					Возврат;
					
				Иначе
					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
						Продолжить;
				КонецЕсли;
		
				ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(1);
				

		
	//		Исключение
	//		КонецПопытки;
		
	                  Прервать;
		
		
				
				
			Конеццикла;
						
		//Сообщить(Ответ.ПолучитьТелоКакСтроку());	
	КонецЕсли;
КонецЕсли;
КонецПроцедуры




Процедура ЗаполнитьДанныеИзОтветаJSON_1(Результат, ТекстJSON, ТипДанных)
	
	ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));	// удалим открывающий символ структуры(массива)
	
	НомерЗначения = 0;
	
	Пока ТекстJSON <> "" Цикл
		
		ПервыйСимвол = Лев(ТекстJSON, 1);
		Если ПервыйСимвол = "{" Тогда
			// вложенная структура
			Значение = Новый Соответствие;
			ЗаполнитьДанныеИзОтветаJSON_1(Значение, ТекстJSON, "Соответствие");
			
			Если ТипДанных = "Соответствие" Тогда
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
			ИначеЕсли ТипДанных = "Массив" Тогда
				Результат.Добавить(Значение);
			КонецЕсли;
		
		ИначеЕсли ПервыйСимвол = "[" Тогда
			// вложенный массив
			Значение = Новый Массив;
			ЗаполнитьДанныеИзОтветаJSON_1(Значение, ТекстJSON, "Массив");
			
			Если ТипДанных = "Соответствие" Тогда
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
			Иначе
				Результат.Добавить(Значение);
			КонецЕсли;
			
		ИначеЕсли ПервыйСимвол = "}" И ТипДанных = "Соответствие" Тогда
			// структура закончилась
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			Если Лев(ТекстJSON, 1) = "," Тогда
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			КонецЕсли;
			
			Возврат;
			
		ИначеЕсли ПервыйСимвол = "]" И ТипДанных = "Массив" Тогда
			// массив закончился
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			Если Лев(ТекстJSON, 1) = "," Тогда
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			КонецЕсли;
			
			Возврат;
			
		Иначе
			
			Если ТипДанных = "Соответствие" Тогда
				
				Поз = Найти(ТекстJSON, ":");
				Если Поз = 0 Тогда
					// неверный формат, прервемся
					Прервать;
				КонецЕсли;
				
				ИмяЗначения = СокрЛП(Лев(ТекстJSON, Поз-1));
				
				ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз+1));
				
				Если Лев(ТекстJSON, 1) = "{" Тогда
					// значение является структурой
					Значение = Новый Соответствие;
					ЗаполнитьДанныеИзОтветаJSON_1(Значение, ТекстJSON, "Соответствие");
					
				ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда
					// значение является массивом
					Значение = Новый Массив;
					ЗаполнитьДанныеИзОтветаJSON_1(Значение, ТекстJSON, "Массив");
					
				Иначе
					// обычное значение
					Поз = 0;
					Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
						Символ = Сред(ТекстJSON, Сч, 1);
						Если Символ = "," ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
							Поз = Сч;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если Поз = 0 Тогда
						Значение = ТекстJSON;
						ТекстJSON = "";
						
					Иначе
						Значение = Лев(ТекстJSON, Поз-1);
						ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
						
					КонецЕсли;
					
					Значение = СокрЛП(Значение);
					Если Найти(Значение,"\u") > 0 Тогда
						Значение = ИзСтрокиЮникод(Значение);
					КонецЕсли; 
					//Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Значение) Тогда
					//	Значение = Число(Значение);
					//КонецЕсли;
					
				КонецЕсли;
				
				Результат.Вставить(ИмяЗначения, Значение);
				
			ИначеЕсли ТипДанных = "Массив" Тогда
				
				// обычное значение
				Поз = 0;
				Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
					Символ = Сред(ТекстJSON, Сч, 1);
					Если Символ = "," ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
						Поз = Сч;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Поз = 0 Тогда
					Значение = ТекстJSON;
					ТекстJSON = "";
					
				Иначе
					Значение = Лев(ТекстJSON, Поз-1);
					ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
					
				КонецЕсли;
				
				Значение = СокрЛП(Значение);
				
				Результат.Добавить(Значение);
				
			КонецЕсли;
				
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры




Функция ЗаполнитьСтруктуруИзОтветаJSON_1(Знач ТекстJSON) Экспорт
	
	Результат = Новый Соответствие;
	
	ТекстJSON = СтрЗаменить(ТекстJSON, ","",", "ЗАПЯТАЯ"",");
	ТекстJSON = СтрЗаменить(ТекстJSON, ",""", "_ЗАПЯТАЯ""");
	ТекстJSON = СтрЗаменить(ТекстJSON, ",{", "_ЗАПЯТАЯ{");
	//ТекстJSON = СтрЗаменить(ТекстJSON, """""", "КАВЫЧКИ""");
	ТекстJSON = СтрЗаменить(ТекстJSON, ",", "ЗАПЯТАЯ");
	ТекстJSON = СтрЗаменить(ТекстJSON, "_ЗАПЯТАЯ{", ",{");
	ТекстJSON = СтрЗаменить(ТекстJSON, "_ЗАПЯТАЯ""", ",""");
	ТекстJSON = СтрЗаменить(ТекстJSON, ":", "ДВОЕТОЧИЕ");
	ТекстJSON = СтрЗаменить(ТекстJSON, "ДВОЕТОЧИЕ[""", ":[""");
	//ТекстJSON = СтрЗаменить(ТекстJSON, """", "КАВЫЧКИ");
	
	ТекстJSON = СтрЗаменить(ТекстJSON, "\""", "КАВЫЧКИ");	// заменим последовательность \" на "
	ТекстJSON = СтрЗаменить(ТекстJSON, """", "");		// а теперь удалим все кавычки
	
	Если Лев(ТекстJSON, 1) = "{" Тогда
		// начало структуры
		ЗаполнитьДанныеИзОтветаJSON_1(Результат, ТекстJSON, "Соответствие");
		
	ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда
		// начало массива
		МассивДанных = Новый Массив;
		ЗаполнитьДанныеИзОтветаJSON_1(МассивДанных, ТекстJSON, "Массив");
		
		Результат.Вставить("Значение", МассивДанных);
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ИзСтрокиЮникод(Стр) Экспорт
	Рез = "";
	МасСлов = РазложитьСтрокуВМассивПодстрок_11(Стр," ");
	Для каждого Слово Из МасСлов Цикл
		Если Найти(Слово,"\")>0 Тогда
			МасБукв = РазложитьСтрокуВМассивПодстрок_11(Сред(Слово,2),"\");
		Иначе
			МасБукв = РазложитьСтрокуВМассивПодстрок_11(Сред(Слово,1),"\");
		Конецесли;
		Для каждого Буква Из МасБукв Цикл
			Если Лев(Буква,1) = "u" Тогда
				Рез = Рез + Символ(Из16В10(Сред(Буква,2,4))) + Сред(Буква,6);
			Иначе
				Рез = Рез + Буква;
			КонецЕсли;
		КонецЦикла;
		Рез = Рез + " ";
	КонецЦикла;
	Возврат Сред(Рез, 1, СтрДлина(Рез)-1);
КонецФункции

Функция Из16В10(Число16) Экспорт
	Число10 = 0;
	Число16 = ВРег(Число16);
	НаборСимв = "0123456789ABCDEF"; 
	Для Н = 1 По СтрДлина(Число16) Цикл  
		Цифра = Найти(НаборСимв,Лев(Прав(Число16,Н),1)) - 1;
		Если Цифра = -1 Тогда Возврат 0 КонецЕсли;
		Число10 = Число10 + Цифра*Pow(16,Н-1);
	КонецЦикла; 	 
	Возврат Число10;
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок_11(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции


&НаКлиенте
Процедура ПолучитьИнформациюПоКМ_Массив(Дерево,Штрих,ТекущийПользователь) Экспорт
//	Дерево.ПолучитьЭлементы().Очистить();
Попытка
	МассивКМ=Новый Массив;
	Thumbprint_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьИзПользователя(ТекущийПользователь);	
	                  УжеЗапрашивали=Новый Массив;
	Что=        Thumbprint_1.что;
		   
		СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1);
		Если Не ЗначениеЗаполнено(СРегистра) тогда
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		Иначе
		   
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				КонецЕсли;
				
				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
				//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
				///Константин           
				Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//Текст1=Ответ.ПолучитьТелоКакСтроку();
				Если Ответ.КодСостояния<>200 Тогда
					СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
				КонецЕсли;
					
			КонецЕсли;
			
			Если не ЗначениеЗаполнено(СРегистра) Тогда
				Возврат;
			Конецесли;
			
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;

	
Для Каждого Стр_1 Из Штрих Цикл
	Попытка
		Добав=Дерево.ПолучитьЭлементы().Добавить();
		
		
		
			
			
		
			Добав.НомерКороба=Стр_1;
			Добав.cis=Стр_1;
			Добав.НомерКМ=Стр_1;
			
			
			ПолучитьИнформациюОКМ_ПоСтранично(Добав.cis,Thumbprint_1,СРегистра,Добав,УжеЗапрашивали);

			
		//	МассивКМ=Новый Массив;
		//	МассивКМ.Очистить();
		//	МассивКМ.Добавить(Добав.cis);
		//			//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Стр_11.Марка)+"&pg="+что);;
		//		Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьтелоПоcis(МассивКМ);
		//		HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/cis/cis_list?pg="+Что);
		//				
		//					
		//		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		//		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		//	#Если ВебКлиент Тогда
		//		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		//	#Иначе
		//		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
		//	#КонецЕсли
		//		
		//		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		//		///Константин           
		//		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		//		Текст1=Ответ.ПолучитьТелоКакСтроку();
		//		
		//		числоЗагрузили=0;
		//		
		//		//Добав.Продукция=
		//		//НайтиПроудкцияюПоcis(Thumbprint_1,Срегистра,Стр_1);

		//		Тотал=0;
		////		БылиУпаковки=Ложь;
		//		Если Ответ.КодСостояния=200 Тогда
		//				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Текст1);//ПрочитатьJSON(ЧтениеJSON);
		//				
		//				
		//				МассивКМ_1=Новый Массив;
		//				МассивКМ_1.Очистить();
		//				Если NNN[Добав.cis]<>Неопределено Тогда
		//				
		//					Если ЗначениеЗаполнено(NNN[Добав.cis]["gtin"]) Тогда
		//						
		//						Продукц="";
		//						ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке_Соответвтвие(Текст1,"",Тотал,0,Thumbprint_1,Продукц);
		//						Добав.Продукция=Продукц;
		//					Конецесли;
		//					
		//				
		//					РекурсияПоПолучениюИнформации_1(NNN[Добав.cis],Добав.cis,HTTPСервисЗапрос,Thumbprint_1,СРегистра,Добав,УжеЗапрашивали,МассивКМ_1);
		//					
		//				Конецесли;
		//				//ОбщийМодуль_НаСервере_ХамелеонЦРПТ.	
		//					
		//					
		//			КонецЕсли
				исключение
				КонецПопытки;
		Конеццикла ;
		Исключение
			КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура РекурсияПоПолучениюИнформации_1(Карта,Марка,HTTPСервисЗапрос,Thumbprint_1,СРегистра,Добав,УжеЗапрашивали,МассивКМ)
	
	что=Thumbprint_1.Что;
	Если Карта<>Неопределено И Карта["children"]<>Неопределено Тогда
		
		Добав.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка");
		МассивКМ.Добавить(Новый Структура("КМ,Тип",Добав.НомерКМ,Добав.ТипУпаковки));
				
		Для Каждого Стр_К Из Карта["children"] Цикл
		
			ШтрихКод=Стр_к["cis"];
			
			ДобавК=Добав.ПолучитьЭлементы().Добавить();
			ДобавК.НомерКМ=ШтрихКод;
			ДобавК.НомерАгрегата=Стр_К["parent"];
			
			Если Стр_к["packType"]="UNIT" Тогда
				ДобавК.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Штука");
				
			Иначе
				ДобавК.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка");
				
			Конецесли;
			МассивКМ.Добавить(Новый Структура("КМ,Тип",ДобавК.НомерКМ,ДобавК.ТипУпаковки));
			
			
			Если ЗначениеЗАполнено(Стр_к["countChildren"]) 
				И число(Стр_к["countChildren"])>0
				Тогда
				ПолучитьИнформациюОКМ_ПоСтранично(ШтрихКод,Thumbprint_1,СРегистра,ДобавК,УжеЗапрашивали);
			 Конецесли;
	//		Если Стр_К["children"]=Неопределено тОгда
	//	
	//			Если Стр_к["status"]="DISAGGREGATION" Тогда
	//				Добав.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка");
	//			Иначе
	//				ДобавК.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Штука");
	//					
	////				Конецесли;
	//									
	//				//МассивКМ.Добавить(Новый Структура("КМ,Тип",ДобавК.НомерКМ,ДобавК.ТипУпаковки));
	//				
	//				ГТИН_1=Стр_к["gtin"];


	//				Если УжеЗапрашивали.Найти(ГТИН_1)=Неопределено Тогда
	//					////ИЩЕМ ПРОДУКЦИЮ И ЗАПРАШИВАЕМ
	//		
	//					
	//					//HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ШтрихКод)+"&pg="+что);;
	//					HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ШтрихКод)+"&pg="+что);;

	//					HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	//					HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);

	//					Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	//					Если Ответ.КодСостояния=200 ИЛИ Ответ.КодСостояния=202 Тогда
	//						Текст1=Ответ.ПолучитьТелоКакСтроку();
	//						ГТИН="";                                                               Тотал=0;числоЗагрузили=0;
	//						ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке(Текст1,"",Тотал,числоЗагрузили,Thumbprint_1,ГТИН);
	//						//Вызватьисключение ГТИН;
	//					Иначе
	//											
	//						ГТИН="";
	//						ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке_Соответвтвие(Стр_к,"",Тотал,числоЗагрузили,Thumbprint_1,ГТИН);

	//					//	Если Ответ.КодСостояния=200 Тогда					
	//							
	//							
	//					//	КонецЕсли;
	//					КонецЕсли;				
	//					УжеЗапрашивали.Добавить(ГТИН_1);
	//				КонецЕсли
	//			Конецесли;
	//			МассивКМ.Добавить(Новый Структура("КМ,Тип",Добав.НомерКМ,Добав.ТипУпаковки));
	//			
	//		Иначе
	//			
	//			ДобавК.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка");
	//			МассивКМ.Добавить(Новый Структура("КМ,Тип",ДобавК.НомерКМ,ДобавК.ТипУпаковки));
	//			
	//			Для каждого Стр_Р Из Стр_К["children"] Цикл
	//				РекурсияПоПолучениюИнформации_1(Стр_Р,ШтрихКод,HTTPСервисЗапрос,Thumbprint_1,СРегистра,ДобавК,УжеЗапрашивали,МассивКМ)
	//			Конеццикла;

	//		Конецесли;	

								
		Конеццикла;
	//ИначеЕсли Карта<>Неопределено Тогда
	//		ШтрихКод=Карта["cis"];
	//	
	//		ДобавК=Добав.ПолучитьЭлементы().Добавить();
	//		ДобавК.НомерКМ=ШтрихКод;
	//		ДобавК.НомерАгрегата=Стр_К["parent"];

	//		
	//		Если Карта["status"]="DISAGGREGATION" Тогда
	//				Добав.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Упаковка");
	//			Иначе
	//				Добав.ТипУпаковки=ПредопределенноеЗначение("Перечисление.Тип_КМ_ХамелеонЦРПТ.Штука");
	//				ГТИН_1=Сред(Марка,3,14);


	//				
	//			Если УжеЗапрашивали.Найти(ГТИН_1)=Неопределено Тогда
	//				////ИЩЕМ ПРОДУКЦИЮ И ЗАПРАШИВАЕМ
	//	
	//				
	//				//HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/identifytools/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(Марка)+"&pg="+что);;
	//				HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/marked_products/info?cis="+ОбщийМодуль_НаСервере_ХамелеонЦРПТ.КодСтр(ШтрихКод)+"&pg="+что);;

	//				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	//				HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);

	//				Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	//				Если Ответ.КодСостояния=200 ИЛИ Ответ.КодСостояния=202 Тогда
	//					Текст1=Ответ.ПолучитьТелоКакСтроку();
	//					ГТИН="";                                                               Тотал=0;числоЗагрузили=0;
	//					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке(Текст1,"",Тотал,числоЗагрузили,Thumbprint_1,ГТИН);
	//					//Вызватьисключение ГТИН;
	//				Иначе
	//					
	//					ГТИН="";
	//					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗагружаемГТИН_ПоМарке_Соответвтвие(Карта,"",Тотал,числоЗагрузили,Thumbprint_1,ГТИН);
	//					
	//				КонецЕсли;				
	//				УжеЗапрашивали.Добавить(ГТИН_1);
	//			КонецЕсли
	//			

	//				
	//				
	//		Конецесли;
	//			
	//			
	//	МассивКМ.Добавить(Новый Структура("КМ,Тип",Добав.НомерКМ,Добав.ТипУпаковки));
	КонецЕсли;
КонецПроцедуры



&НаКлиенте
Функция НайтиПроудкцияюПоcis(Thumbprint_1,Срегистра,CIS)
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
Если Thumbprint_1.НаименованиеСтенда="Табак"		ИЛИ 
		Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
 Тогда
	
		//NN=ВернутьТелоЗапросаПодключение(НомерКМ);
						
	
			HTTPЗапрос=Новый HTTPЗапрос("private-office-api/private/v2/cis/info?id="+CIS);
			//private-office-api/private/v2/cis/"+КодМаркировки+"/mrp"
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин   
		//	HTTPЗапрос.УстановитьТ/елоИзСтроки(NN,КодировкаТекста.UTF8);
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			
			
			
			Если Ответ.КодСостояния=200 Тогда
				
				ТТ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
				ГТИН=Число(ТТ.GTIN);
				
				СпрТ=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.НайтиПоГТИН(ГТИН);
				Возврат СпрТ;
				
			КонецЕсли;
			
Иначе
	
	
	//cis=РаскодируемНаСервере(НомерКМ);
	//				
	//HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/identifytools/"+cis);
	//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	//HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	////HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	/////Константин           
	//Ответ=HTTPСервисЗапрос.Получить (HTTPЗапрос);
КонецЕсли;

КонецФункции


&НаКлиенте
Функция ПолучитьИДЭДО(Thumbprint_1,Маркер,СоединениеFilerMobileAPI) Экспорт
	
	
	
	ЗапросСпискаДокументов = Новый HTTPЗапрос;
	ЗапросСпискаДокументов.АдресРесурса = "API/GetMyAccountInfo";
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Integrator-Id", "Kartoteka_9AFE5408-C930-47FA-9CE4-FAE615EED09E");
	Заголовки.Вставить("Assistant-Key", Маркер);
	ЗапросСпискаДокументов.Заголовки = Заголовки;
	
	Ответ = СоединениеFilerMobileAPI.Получить(ЗапросСпискаДокументов);
	Если Ответ.КодСостояния=200 Тогда
		Возврат ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПрочитатьСведенияОбОрганизацииНаСервере(Ответ.ПолучитьТелоКакСтроку());
	Иначе
		Возврат Новый Структура("ИНН, Идентификатор","","");
	КонецЕсли;
КонецФункции


&НаКлиенте
Функция СписокВходящихДокументов(Thumbprint_1,Маркер,КачатьСЭДОЗаПоследниеДни) Экспорт
	
	 МобильныйСайтДляПолученияИсходящих= Thumbprint_1.МобильныйСайтДляПолученияИсходящих;
	
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
		Прокси=Новый ИнтернетПрокси;
		Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
		СоединениеFilerMobileAPI=Новый HTTPСоединение(МобильныйСайтДляПолученияИсходящих,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	Иначе
				
		СоединениеFilerMobileAPI=Новый HTTPСоединение(МобильныйСайтДляПолученияИсходящих,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	КонецЕсли;
	
	
	Номер="";
	
	ЗапросСпискаДокументов = Новый HTTPЗапрос;
	ЗапросСпискаДокументов.АдресРесурса = "api/v1/documents";
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Заголовки.Вставить("Session-Token", Маркер);
	ЗапросСпискаДокументов.Заголовки = Заголовки;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Filter", Новый Структура);
	ПараметрыЗапроса.Filter.Вставить("FolderType", "B2BIn");
	ПараметрыЗапроса.Filter.Вставить("FilterItems", Новый Массив);
	
	ДатаНачала = Неопределено;
	ДатаОкончания = Неопределено;
	ОтборПоКонтрагенту = Неопределено;
	//Номер = Неопределено;
	ОтборПоСумме = Неопределено;
	ОтборСтатусДокументооборота = Неопределено;
	ОтборВидДокумента = Неопределено;
	
	ОтборПоСумме = Новый Структура("Использовать, ВидСравнения, Сумма", Ложь,
			0, 0);
			
			ДатаНачала=НачалоДня(ТекущаяДата())-КачатьСЭДОЗаПоследниеДни*24*60*60;
	Фильтры = Новый Структура;
	Фильтры.Вставить("Offset",0);
	Фильтры.Вставить("Count",30);
	//Фильтры.Свойство("ДатаНачала", ДатаНачала);
	//Фильтры.Свойство("ДатаОкончания", Дата(1,1,1));
	//Фильтры.Свойство("ОтборПоКонтрагенту", "");
	//Фильтры.Свойство("Номер", Номер);
	//Фильтры.Свойство("ОтборПоСумме", ОтборПоСумме);
	//Фильтры.Свойство("ОтборСтатусДокументооборота", "");
	//Фильтры.Свойство("ОтборВидДокумента", "");
	
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда 
		ФильтрПоДате = Новый Структура;
		ФильтрПоДате.Вставить("FilterType", 1);
		ФильтрПоДате.Вставить("FilterCondition", Новый Структура);
		Если ЗначениеЗаполнено(ДатаНачала)Тогда
			ФильтрПоДате.FilterCondition.Вставить("FromDate", Формат(ДатаНачала, "ДФ=yyyy-MM-ddTHH:mm:ss"));
		КонецЕсли; 
		ПараметрыЗапроса.Filter.FilterItems.Добавить(ФильтрПоДате);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Номер) Тогда
		ФильтрПоНомеру = Новый Структура;
		ФильтрПоНомеру.Вставить("FilterType", 2);
		ФильтрПоНомеру.Вставить("FilterCondition", Новый Структура);
		ФильтрПоНомеру.FilterCondition.Вставить("Value", Номер);
		ПараметрыЗапроса.Filter.FilterItems.Добавить(ФильтрПоНомеру);		
	КонецЕсли;
	
	
	ПараметрыЗапроса.Вставить("PagingInfo", Новый Структура);
	
	ПараметрыЗапроса.PagingInfo.Вставить("IsDescOrder", Истина);
	
	
	Смещение=0;
	
	
	Тотал=1;
	Массив = Новый Массив;
	Пока смещение*30<ТОтал Цикл
		
		ПараметрыЗапроса.PagingInfo.Вставить("Offset",Смещение);
		ПараметрыЗапроса.PagingInfo.Вставить("Count", 30);
		
		ЗапросСпискаДокументов.УстановитьТелоИзСтроки(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СтруктураВJSON(ПараметрыЗапроса));
		
		Попытка
			Ответ = СоединениеFilerMobileAPI.ОтправитьДляОбработки(ЗапросСпискаДокументов);
		Исключение
			//ПараметрыСоединения.СоединениеУстановлено = Ложь;
			//ИнформацияОбОшибке = ИнформацияОбОшибке();
			//ТекстСообщения = ПодставитьПараметрыВСтроку(
			//	НСтр("ru = '%1. Подробности см. в журнале регистрации'"),
			//	КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			Возврат Массив;
			//ДобавитьЗаписьЖурналаРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), Истина);	
	//		СообщиТекстСообщения;
		КонецПопытки;
		
		Если Ответ.КодСостояния <> 200 Тогда
			Возврат Массив;
		Иначе
			ОтветСтрокой = Ответ.ПолучитьТелоКакСтроку();
		//КонецЕсли;
			
			СтруктураОтвета = ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СтруктураИзJSON(ОтветСтрокой);
			Для Каждого Документ Из СтруктураОтвета.DocumentModel Цикл
				
				Структура = Новый Структура;
				Структура.Вставить("PackageChainId", Документ.PackageChainId); 
				Структура.Вставить("Дата", СтрокаВДату(Документ.Date)); 
				Структура.Вставить("Номер", Документ.Number); 
				Структура.Вставить("ВидДокумента", Документ.DocumentType); 
				Структура.Вставить("СуммаДокумента", Документ.Sum); 
				Структура.Вставить("Контрагент", Документ.Receiver); 
				Структура.Вставить("Организация", Документ.Sender); 
				Структура.Вставить("ДатаЭД", СтрокаВДату(Документ.SendReceiveDT)); 
				Структура.Вставить("Статус", Документ.CompletionStatus); 
				Структура.Вставить("ИдентификаторДокументооборота", Документ.DocFlowID); 
				Массив.Добавить(Структура);
				
			КонецЦикла;
			
		КонецЕсли;
		Тотал=СтруктураОтвета.TotalCount;
		Смещение=Смещение+1;
	Конеццикла;
	Возврат Массив;
КонецФункции

Процедура
	Рекурсияпоdown(NNN,Статус)
	childs=Неопределено;
	down=Неопределено;
	Если NNN.Свойство("down",down) И
				down.Свойство("childs",childs) Тогда
				Для Каждого Стр_childs Из childs Цикл
					Статус="";
					Если 
						Стр_childs.Свойство("status",Статус) Тогда
						
	
							Возврат;
						
					КонецЕсли;					
					
					
					Рекурсияпоdown(Стр_childs,Статус)
					
					//	Если Стр_childs.
						
								//Строк_1.НомерКМ=ключ;                         	
								//МассивДобавить.Добавить(Новый Структура("НомерКМ",ключ));
					//			КонецЕсли
				 КонецЦикла;
				  
				 
			КонецЕсли
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтатусыПоМассивуКМ_Лекарства(Thumbprint_1,Срегистра,МассивКМ) Экспорт
	
	
	Попытка
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
		Прокси=Новый ИнтернетПрокси;
		Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
	
		HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	Иначе
		HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
	КонецЕсли;
	
	
		что=Thumbprint_1.что;
	МассивСтруктур=Новый Массив;
	
	
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
						Прокси=Новый ИнтернетПрокси;
						Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
					
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
					Иначе
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		
		МассивКМКоротки=Новый Массив;
		Для каждого НомерАКМ Из МассивКМ Цикл
			Если СтрДлина(НомерАКМ)<>18 Тогда
				МассивКМКоротки.Добавить(НомерАКМ);
			КонецЕсли;
			
		Конеццикла;
		    Если МассивКМКоротки.Количество()>0 Тогда
				          МассивБыли=Новый Массив;
						  МассивБыли.Очистить();
				  					Чтен=Новый  ЗаписьJSON;
										Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
										Чтен.ЗаписатьНачалоОбъекта();
										
										Чтен.ЗаписатьИмяСвойства("filter");
										
										Чтен.ЗаписатьНачалоОбъекта();
										
										Чтен.ЗаписатьИмяСвойства("sgtins");
										Чтен.ЗаписатьНачалоМассива();
				Для Каждого НомерКМ_1 Из МассивКМКоротки Цикл
							БылНомерКМ=НомерКМ_1;
							НомерКМ=НомерКМ_1;
							МассивБыли.Добавить(БылНомерКМ);
							//Добав_1=МассивБыли.Добавить();
											Чтен.ЗаписатьЗначение(НомерКМ);
							Конеццикла;
											
										Чтен.ЗаписатьКонецМассива();
										
													       Чтен.ЗаписатьКонецОбъекта();
										
										//Чтен.ЗаписатьЗначение("{}");
													       Чтен.ЗаписатьКонецОбъекта();
													
													Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
										Тело=СтрЗаменить(Тело,Символы.ПС,"");
										Тело=СтрЗаменить(Тело,Символы.ВК,"");
										
						
						
								HTTPЗапрос=Новый HTTPЗапрос("api/v1/reestr/sgtin/public/sgtins-by-list");
								          HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
												
												//	Иначе
												//	HTTPЗапрос=Новый HTTPЗапрос("documents/"+Стр.document_id+"");
											/////			
													Куки="certSerial="+Thumbprint_1.Thumbprint_1+";lk-auth-token="+Срегистра ;
														
														HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
														
												//	КонецЕсли;
											HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
											HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
											HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
											//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
											///Константин           
											//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
											Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
											Текст1=Ответ.ПолучитьТелоКакСтроку();
					//	ЗагружаемШаблоныНасервере(Текст1,Форм.Пользователь);
					                    		   ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(10);

					             NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);
								 entries=Неопределено;
								 Если NNN.Свойство("entries",entries) Тогда
									 
									 	Сч=0;
									 	Для Каждого Стр_С Из entries Цикл
				
											//Если Стр_С_С["ownerInn"]<>Thumbprint_1.ИНН Тогда
											//	МассивСтруктур.Добавить(Новый Структура("cis,статус",НомерКМ,"КМ принадлежит "+Стр_С_С["ownerInn"]+", "+
											
											Упаковка="";
											Если НЕ Стр_С.Свойство("sscc",Упаковка) Тогда
												Упаковка="";
											Конецесли;

											БылНомерКМ=МассивБыли[Сч];
											Сч=Сч+1;
											
											Если Стр_С.status="in_realization" Тогда
												//МассивСтруктур.Добавить(Новый Структура("cis,статус,pack3_id",Стр_С.sgtin,"Ожидает ответа от клиента по документу. Владелец  "+Стр_С.branch_id,Упаковка));
												МассивСтруктур.Добавить(Новый Структура("cis,статус,pack3_id",БылНомерКМ,"Ожидает ответа от клиента по документу. Владелец  "+Стр_С.branch_id,Упаковка));
											Иначе
												МассивСтруктур.Добавить(Новый Структура("cis,статус,pack3_id",БылНомерКМ,Стр_С.status+". Владелец "+Стр_С.branch_id,Упаковка));
											КонецЕсли;
											

											//МассивСтруктур.Добавить(Новый Структура("cis,статус",Стр_С.cisInfo.requestedCis,Стр_С.cisInfo.status
										Конеццикла;

									 
				                 КонецЕсли;
			
		  Конецесли;
		
		Для Каждого НомерКМ_1 Из МассивКМ Цикл
			БылНомерКМ=НомерКМ_1;
			НомерКМ=НомерКМ_1;
			
			Если СтрДлина(НомерКМ)=18 Тогда
				
		 			
				HTTPЗапрос=Новый HTTPЗапрос("api/v1/reestr/sscc/"+НомерКМ+"/full-hierarchy");
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		   ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(31);
		        МассивДобавить=Новый Массив;
				МассивДобавить.Очистить();
		Если Ответ.КодСостояния=200 Тогда
			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Текст1);//ПрочитатьJSON(ЧтениеJSON);
			down=Неопределено;
			childs=Неопределено;
			Если NNN.Свойство("down",down) И
				down.Свойство("childs",childs) Тогда
				Владелец=". Владелец "+down.owner_id+" "+down.owner_organization_name;
				Для Каждого Стр_childs Из childs Цикл
					Статус="";
					Если 
						Стр_childs.Свойство("status",Статус) Тогда
						
						Если Статус="in_realization" Тогда
												МассивСтруктур.Добавить(Новый Структура("cis,статус",БылНомерКМ,"Ожидает ответа от клиента по документу"+Владелец));
											Иначе
												МассивСтруктур.Добавить(Новый Структура("cis,статус",БылНомерКМ,Статус+Владелец));
							КонецЕсли;
											
							Прервать;
						
					КонецЕсли;					
					
					               Статус=Неопределено;
					Рекурсияпоdown(Стр_childs,Статус);
					Если ЗначениеЗаполнено(Статус) тогда
						Если Статус="in_realization" Тогда
												МассивСтруктур.Добавить(Новый Структура("cis,статус",БылНомерКМ,"Ожидает ответа от клиента по документу"+Владелец));
											Иначе
												МассивСтруктур.Добавить(Новый Структура("cis,статус",БылНомерКМ,Статус+Владелец));
							КонецЕсли;
											
							Прервать;
						
					КонецЕсли;
					//	Если Стр_childs.
						
								//Строк_1.НомерКМ=ключ;                         	
								//МассивДобавить.Добавить(Новый Структура("НомерКМ",ключ));
					//			КонецЕсли
				 КонецЦикла;
				 
				 	
				 
			КонецЕсли
			
			
			
			
		КонецЕсли;
								
				                  КонецЕсли;
					КонецЦикла;
					Возврат МассивСтруктур;
	
//		Тело=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьтелоПоcis(МассивКМ);
//		HTTPЗапрос=Новый HTTPЗапрос("api/v4/facade/cis/cis_list?pg="+Что);
//		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
//		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
//			#Если ВебКлиент Тогда
//				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
//			#Иначе
//				HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
//			#КонецЕсли
//		
//		
//		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
//	//КонецЕсли;

//	
//	Если Ответ.КодСостояния=200 Тогда
//		Если Thumbprint_1.НаименованиеСтенда="Табак"
//					ИЛИ 
//		Thumbprint_1.НаименованиеСтенда="Альтернативный табак"
//Тогда
//			Попытка
//			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Ответ.ПолучитьТелоКакСтроку());//ПрочитатьJSON(ЧтениеJSON);
//			//Стр_1.Статус=NNN[0].status;
//			Для Каждого Стр_С Из NNN Цикл
//				
//				НомерКМ=Стр_С["cisInfo"]["requestedCis"];
//				Если Сред(НомерКМ,1,1)="(" Тогда
//					НомерКМ=Сред(НомерКМ,2,2)+Сред(НомерКМ,5,14)+
//					Сред(НомерКМ,20,2)+Сред(НомерКМ,23);
//				КонецЕсли;
//				Стр_С_С=Стр_С["cisInfo"];
//				Если Стр_С_С["ownerInn"]<>Thumbprint_1.ИНН Тогда
//					МассивСтруктур.Добавить(Новый Структура("cis,статус",НомерКМ,"КМ принадлежит "+Стр_С_С["ownerInn"]+", "+
//					Стр_С_С["ownerName"]));
//				ИначеЕсли Стр_С_С["statusEx"]="WAIT_SHIPMENT" Тогда
//					МассивСтруктур.Добавить(Новый Структура("cis,статус",НомерКМ,"Ожидает ответа от клиента по документу "+
//					Стр_С_С["lastDocId"]));
//				ИначеЕсли ЗначениеЗаполнено(Стр_С_С["agentInn"]) И Стр_С_С["agentInn"]<>Thumbprint_1.ИНН Тогда
//					
//					МассивСтруктур.Добавить(Новый Структура("cis,статус",НомерКМ,"КМ передан на комиссию "+Стр_С_С["agentInn"]+", "+
//					Стр_С_С["agentName"]));
//				Иначе
//					МассивСтруктур.Добавить(Новый Структура("cis,статус",НомерКМ,Стр_С_С["status"]));
//				КонецЕсли;
//				
//				//МассивСтруктур.Добавить(Новый Структура("cis,статус",Стр_С.cisInfo.requestedCis,Стр_С.cisInfo.status
//			Конеццикла;
//			
//			
//		Исключение
//			Сообщить(ОписаниеОшибки());
//			Сообщить(Ответ.ПолучитьТелоКакСтроку());
//		КонецПопытки;
//			
//		Иначе
//			NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Ответ.ПолучитьТелоКакСтроку());//ПрочитатьJSON(ЧтениеJSON);
//			Для Каждого Стр_С Из NNN Цикл
//				Если Стр_С.Значение["ownerInn"]<>Thumbprint_1.ИНН Тогда
//					МассивСтруктур.Добавить(Новый Структура("cis,статус",Стр_С.Ключ,"КМ принадлежит "+Стр_С.Значение["ownerInn"]+", "+
//					Стр_С.Значение["ownerName"]));
//				ИначеЕсли Стр_С.Значение["statusEx"]="WAIT_SHIPMENT" Тогда
//					МассивСтруктур.Добавить(Новый Структура("cis,статус",Стр_С.Ключ,"Ожидает ответа от клиента по документу "+
//					Стр_С.Значение["lastDocId"]));
//				Иначе
//					МассивСтруктур.Добавить(Новый Структура("cis,статус",Стр_С.Ключ,Стр_С.Значение["status"]));
//				КонецЕсли;
//			Конеццикла;
//		Конецесли;
//	Иначе	
//		Для Каждого Стр_1 Из МассивКМ Цикл
//			МассивСтруктур.Добавить(Новый Структура("cis,статус",Стр_1,Ответ.КодСостояния));
//		Конеццикла;
//			//Объект.СтатусУпаковки=Ответ.КодСостояния;
////			 Сообщить(Текст1);
//	КонецЕсли;
Исключение
	КонецПопытки;
	
	Возврат МассивСтруктур;
	
	
Конецфункции

