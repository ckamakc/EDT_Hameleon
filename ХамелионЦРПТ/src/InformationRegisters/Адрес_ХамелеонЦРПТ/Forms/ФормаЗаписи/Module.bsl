
&НаКлиенте
Процедура КодРегионаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	//ДанныеВыбора=ПолучитьИзСпискаВсеРегионы();
	//СтандартнаяОбработка=Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьПодключиться20(АдресРеусра,ЗапросТекст,Документ=Ложь,НеПроверять=Ложь,Версия21=Ложь) Экспорт
			СервисФормированияЗаявокAPI="api2.vetrf.ru";
			ПортФормированияЗаявокAPI=8002;

	АдресСервера=СервисФормированияЗаявокAPI;
	ПортСервера=Число(ПортФормированияЗаявокAPI);
	ИмяПользователя="pitersoft-180225";
	ПарольПользователя="W5k8Fk2Y";
	//ПараметрыДлякилента=Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(Пользователь,ТекСайт);
	
	
		//Если ЗначениеЗАполнено(ТекП.АдресПрокси) Тогда
		//	Прокси=Новый ИнтернетПрокси;
		//	Прокси.Установить("https",ТекП.АдресПрокси,ТекП.ПортПрокси,ТекП.ПользовательПрокси,ТекП.ПарольПрокси);
		//	//Соединение = Новый HTTPСоединение(Сайт, , ,,Прокси ,РегистрыСведений.НастройкиПрограммы_ХамелеонМеркурий.Получить().Таймаут, Новый ЗащищенноеСоединениеOpenSSL);   
		//	Если ЗначениеЗаполнено(ПортСервера) Тогда
		//		Соединение = Новый HTTPСоединение(АдресСервера, ПортСервера, ИмяПользователя, ПарольПользователя,Прокси  ,РегистрыСведений.НастройкиПрограммы_ХамелеонМеркурий.Получить().Таймаут, Новый ЗащищенноеСоединениеOpenSSL);   
		//	Иначе
		//		Соединение = Новый HTTPСоединение(АдресСервера, , ИмяПользователя, ПарольПользователя,Прокси  ,РегистрыСведений.НастройкиПрограммы_ХамелеонМеркурий.Получить().Таймаут, Новый ЗащищенноеСоединениеOpenSSL);   
		//		
		//	КонецЕсли;
		//Иначе	
			Если ЗначениеЗаполнено(ПортСервера) Тогда
				Соединение = Новый HTTPСоединение(АдресСервера, ПортСервера, ИмяПользователя, ПарольПользователя, ,РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ТаймаутОжиданияОтСайта, Новый ЗащищенноеСоединениеOpenSSL);   
			Иначе
				Соединение = Новый HTTPСоединение(АдресСервера, , ИмяПользователя, ПарольПользователя, ,РегистрыСведений.НастройкиПрограммы_ХамелеонЦРПТ.Получить().ТаймаутОжиданияОтСайта, Новый ЗащищенноеСоединениеOpenSSL);   
				
			КонецЕсли;
		
		
		Запр=Новый HTTPЗапрос(АдресРеусра);
		
		Запр.Заголовки.Вставить("Content-Type", "text/xml; charset=utf-8" );
		
		Запр.УстановитьТелоИзСтроки(ЗапросТекст,КодировкаТекста.UTF8);
	//	Соединение.Send(ЗапрЙосТекст);
		//Возврат   Соединение;
		Rjk=0;
		Результат=Неопределено;
		Пока Rjk<3 ЦИкл
			Rjk=Rjk+1;
		Попытка
			Результат = Соединение.ОтправитьДляОбработки(Запр);
			Прервать;
		Исключение
			ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(10);

			КонецПопытки;
		Конеццикла;
		Если Результат=Неопределено Тогда
			Сообщить("Не удалось отправить запрос к Меркурию");
			Возврат Новый Структура("КодСостояния",5000);
		КонецЕсли;
		Если Результат.КодСостояния<>200 Тогда
				Если Результат.КодСостояния=401 Тогда
				    Сообщить("Логин и/или пароль указаны неверно. Необходимо проверить правильность идентифкационных данных.");	
				ИначеЕсли 	Результат.КодСостояния=500 Тогда
					Сообщить("Ошибка внутреней службы Меркурия (сервис не доступен)");
				ИначеЕсли Результат.КодСостояния=429 Тогда
					
				    Сообщить("Превышено количество запросов. Ждем 10 секунд и отправляем заново");	
					
					ОбщийМодуль_НаСервере_ХамелеонЦРПТ.Задержка_Номральная(10);
					Возврат УстановитьПодключиться20(АдресРеусра,ЗапросТекст,Документ,НеПроверять,Версия21)
				Иначе
					Попытка
						Сообщить(Результат.ПолучитьТелоКакСтроку());
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		
	
		Возврат  Результат
	//Конецесли;
КонецФункции


Функция ПолучитьИзСпискаВсеРегионы()
//		Элементы.КодРегиона.СписокВыбора.Очистить();
ЗапросТекст="	
|<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" 
|                  xmlns:ws=""http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2"" 
|                  xmlns:base=""http://api.vetrf.ru/schema/cdm/base""
|				  xmlns:ikar=""http://api.vetrf.ru/schema/cdm/dictionary/v2"">
|  <soapenv:Header/>
|  <soapenv:Body>
|    <ws:getRegionListByCountryRequest>
|     <base:listOptions>
|        <base:count>1000</base:count>
|        <base:offset>0</base:offset>
|      </base:listOptions>
|      <ikar:countryGuid>"+"74a3cbb1-56fa-94f3-ab3f-e8db4940d96b"+"</ikar:countryGuid>
|    </ws:getRegionListByCountryRequest>
|  </soapenv:Body>
|</soapenv:Envelope>";	
Попытка
	
		Результат=УстановитьПодключиться20("platform/services/2.0/IkarService/GetRegionListByCountry",ЗапросТекст);
			Если Результат.КодСостояния<>200 Тогда
			//	Сообщить(Результат.ПолучитьТелоКакСтроку());
				Возврат Неопределено;
			КонецЕсли;
			ЧтениеД=Новый ЧтениеXML;
			ЧтениеД.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
		ОтветСтруктура = ФабрикаXDTO.ПрочитатьXML(ЧтениеД);	
		//businessEntity=ОтветСтруктура.Body.getBusinessEntityListResponse.businessEntityList.businessEntity;
		Результат=Новый СписокЗначений;
		Если   число(ОтветСтруктура.Body.getRegionListByCountryResponse.regionList.count)>0 Тогда
			region=ОтветСтруктура.Body.getRegionListByCountryResponse.regionList.region;
			Если Тип("ОбъектXDTO")=ТипЗнч(region) Тогда
				Стр=region;
				Результат.Добавить(Новый Структура("ид,Текст",Стр.guid,Стр.name),Стр.view);
			Иначе
				Для Каждого Стр Из region Цикл
					Результат.Добавить(Новый Структура("Ид,текст",Стр.guid,Стр.name),Стр.view);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Возврат результат
	Исключение
	//	СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		//КраткоеСообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()); 
		
	//	Сообщить(СообщениеОбОшибке, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;	


КонецФункции


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Таб=Новый ТабличныйДокумент;
	Макет=РегистрыСведений.Адрес_ХамелеонЦРПТ.ПолучитьМакет("Макет");
	ОбластьМакета=Макет.ПолучитьОбласть("Область");
	Таб.Вывести(ОбластьМакета);
	//ТаблицаАдресов=Новый ТаблицаЗначений;
	//ТаблицаАдресов.Колонки.Добавить("Адрес");
	//ТаблицаАдресов.Колонки.Добавить("КодРегиона");
	ТаблицаРегионов.Очистить();
	Для Сч=1 По Таб.ВысотаТаблицы Цикл
		АСС=ТаблицаРегионов.Добавить();
		АСС.КодРегиона=Сред(Таб.Область(Сч,1).Текст,1,2);
		АСС.Название=ВРЕГ(Таб.Область(Сч,2).Текст);
	КонецЦикла;

	
КонецПроцедуры

Функция ПолучитьИзСпискаВсеРайоны()
ЗапросТекст="	
|<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" 
|                  xmlns:ws=""http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2"" 
|                  xmlns:base=""http://api.vetrf.ru/schema/cdm/base""
|				  xmlns:ikar=""http://api.vetrf.ru/schema/cdm/dictionary/v2"">
|  <soapenv:Header/>
|  <soapenv:Body>
|    <ws:getDistrictListByRegionRequest>
|     <base:listOptions>
|        <base:count>1000</base:count>
|        <base:offset>0</base:offset>
|      </base:listOptions>
|      <ikar:regionGuid>"+КодРегиона+"</ikar:regionGuid>
|    </ws:getDistrictListByRegionRequest>
|  </soapenv:Body>
|</soapenv:Envelope>";	
Попытка
	
		Результат=УстановитьПодключиться20("platform/services/2.0/IkarService/getDistrictListByRegion",ЗапросТекст);
			Если Результат.КодСостояния<>200 Тогда
			//	Сообщить(Результат.ПолучитьТелоКакСтроку());
				Возврат Неопределено;
			КонецЕсли;
			ЧтениеД=Новый ЧтениеXML;
			ЧтениеД.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
		ОтветСтруктура = ФабрикаXDTO.ПрочитатьXML(ЧтениеД);	
		//businessEntity=ОтветСтруктура.Body.getBusinessEntityListResponse.businessEntityList.businessEntity;
		Результат=Новый СписокЗначений;
		Если   число(ОтветСтруктура.Body.getDistrictListByRegionResponse.districtList.count)>0 Тогда
			region=ОтветСтруктура.Body.getDistrictListByRegionResponse.districtList.district;
			Если Тип("ОбъектXDTO")=ТипЗнч(region) Тогда
				Стр=region;
				Результат.Добавить(Новый Структура("ид,Текст",Стр.guid,Стр.view),Стр.view);
			Иначе
				Для Каждого Стр Из region Цикл
					Результат.Добавить(Новый Структура("Ид,текст",Стр.guid,Стр.view),Стр.view);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Возврат результат
	Исключение
		Возврат Неопределено;
	КонецПопытки;	


КонецФункции

&НаКлиенте
Процедура КодРегионаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	ДанныеВыбора=ПолучитьИзСпискаВсеРегионы();
	СтандартнаяОбработка=Ложь;
	Район="";
	НаселенныйПунктГород="";
	НаселенныйПункт="";
	Улица="";
	
КонецПроцедуры

&НаКлиенте
Процедура КодРегионаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка=ложь;
	
	ПолучитьЗнач=ТаблицаРегионов.НайтиСтроки(Новый Структура("Название",Врег(ВыбранноеЗначение.текст))) ;
	Если ПолучитьЗнач.Количество()>0 Тогда
		Запись.КодРегиона=ПолучитьЗнач[0].КодРегиона;
		КодРегиона=ВыбранноеЗначение.Ид;
	КонецЕсли;
		
	//а=1
КонецПроцедуры

&НаКлиенте
Процедура РайонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	если Не ЗначениеЗАполнено(КодРегиона) Тогда
		СтандартнаяОбработка=ложь;
		Возврат;
	КонецЕсли;
	ДанныеВыбора=ПолучитьИзСпискаВсеРайоны();
	СтандартнаяОбработка=Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РайонОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка=ложь;
	Запись.Район=ВыбранноеЗначение.текст;
	Район=ВыбранноеЗначение.Ид;
	НаселенныйПунктГород="";
	НаселенныйПункт="";
	Улица="";
	
КонецПроцедуры

&НаКлиенте
Процедура ГородНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	если Не ЗначениеЗАполнено(КоДРегиона)
		И Не ЗначениеЗаполнено(Район) Тогда
		СтандартнаяОбработка=ложь;
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(Район) Тогда
		ДанныеВыбора=ПолучитьИзСпискаВсеНаселПункты1ПоРайону();
	Иначе
		ДанныеВыбора=ПолучитьИзСпискаВсеНаселПункты1ПоРегиону();
		
	
	Конецесли;	
	СтандартнаяОбработка=Ложь;
	
	
КонецПроцедуры




Функция ПолучитьИзСпискаВсеНаселПункты1ПоРайону()
ЗапросТекст="	
|<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" 
|                  xmlns:ws=""http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2"" 
|                  xmlns:base=""http://api.vetrf.ru/schema/cdm/base""
|				  xmlns:ikar=""http://api.vetrf.ru/schema/cdm/dictionary/v2"">
|  <soapenv:Header/>
|  <soapenv:Body>
|    <ws:getLocalityListByDistrictRequest>
|     <base:listOptions>
|        <base:count>1000</base:count>
|        <base:offset>0</base:offset>
|      </base:listOptions>
|      <ikar:districtGuid>"+Район+"</ikar:districtGuid>
|    </ws:getLocalityListByDistrictRequest>
|  </soapenv:Body>
|</soapenv:Envelope>";	
Попытка
	
		Результат=Обработки._Запуск_ХамелеонМеркурий.УстановитьПодключиться20("platform/services/2.0/IkarService/GetLocalityListByDistrict",ЗапросТекст);
		Если РегистрыСведений.НастройкиПрограммы_ХамелеонМеркурий.Получить().API_через_WinHttpRequest Тогда
			Если Результат.Status<>200 Тогда
			//	Сообщить(Результат.ResponseText);
				Возврат Неопределено;
			КонецЕсли;
			ЧтениеД=Новый ЧтениеXML;
			ЧтениеД.УстановитьСтроку(Результат.ResponseText);
		Иначе
			Если Результат.КодСостояния<>200 Тогда
			//	Сообщить(Результат.ПолучитьТелоКакСтроку());
				Возврат Неопределено;
			КонецЕсли;
			ЧтениеД=Новый ЧтениеXML;
			ЧтениеД.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
		КонецЕсли;
		ОтветСтруктура = ФабрикаXDTO.ПрочитатьXML(ЧтениеД);	
		//businessEntity=ОтветСтруктура.Body.getBusinessEntityListResponse.businessEntityList.businessEntity;
		Результат=Новый СписокЗначений;
		Если   число(ОтветСтруктура.Body.GetLocalityListByDistrictResponse.localityList.count)>0 Тогда
			region=ОтветСтруктура.Body.GetLocalityListByDistrictResponse.localityList.locality;
			Если Тип("ОбъектXDTO")=ТипЗнч(region) Тогда
				Стр=region;
				Результат.Добавить(Новый Структура("ид,Текст",Стр.guid,Стр.view),Стр.view);
			Иначе
				Для Каждого Стр Из region Цикл
					Результат.Добавить(Новый Структура("Ид,текст",Стр.guid,Стр.view),Стр.view);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Возврат результат
	Исключение
		Возврат Неопределено;
	КонецПопытки;	


КонецФункции

Функция ПолучитьИзСпискаВсеНаселПункты1ПоРегиону()
ЗапросТекст="	
|<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" 
|                  xmlns:ws=""http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2"" 
|                  xmlns:base=""http://api.vetrf.ru/schema/cdm/base""
|				  xmlns:ikar=""http://api.vetrf.ru/schema/cdm/dictionary/v2"">
|  <soapenv:Header/>
|  <soapenv:Body>
|    <ws:getLocalityListByRegionRequest>
|     <base:listOptions>
|        <base:count>1000</base:count>
|        <base:offset>0</base:offset>
|      </base:listOptions>
|      <ikar:regionGuid>"+КоДРегиона+"</ikar:regionGuid>
|    </ws:getLocalityListByRegionRequest>
|  </soapenv:Body>
|</soapenv:Envelope>";	
Попытка
	
		Результат=УстановитьПодключиться20("platform/services/2.0/IkarService/GetLocalityListByRegion",ЗапросТекст);
			Если Результат.КодСостояния<>200 Тогда
			//	Сообщить(Результат.ПолучитьТелоКакСтроку());
				Возврат Неопределено;
			КонецЕсли;
			ЧтениеД=Новый ЧтениеXML;
			ЧтениеД.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
		ОтветСтруктура = ФабрикаXDTO.ПрочитатьXML(ЧтениеД);	
		//businessEntity=ОтветСтруктура.Body.getBusinessEntityListResponse.businessEntityList.businessEntity;
		Результат=Новый СписокЗначений;
		Если   число(ОтветСтруктура.Body.getLocalityListByRegionResponse.localityList.count)>0 Тогда
			region=ОтветСтруктура.Body.getLocalityListByRegionResponse.localityList.locality;
			Если Тип("ОбъектXDTO")=ТипЗнч(region) Тогда
				Стр=region;
				Результат.Добавить(Новый Структура("ид,Текст",Стр.guid,Стр.view),Стр.view);
			Иначе
				Для Каждого Стр Из region Цикл
					Результат.Добавить(Новый Структура("Ид,текст",Стр.guid,Стр.view),Стр.view);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Возврат результат
	Исключение
		Возврат Неопределено;
	КонецПопытки;	


КонецФункции


&НаКлиенте
Процедура ГородОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Запись.Город=ВыбранноеЗначение.текст;
	НаселенныйПунктГород=ВыбранноеЗначение.ид;
	
	СтандартнаяОбработка=Ложь;
КонецПроцедуры


&НаКлиенте
Процедура НаселенныйПунктНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	если Не ЗначениеЗАполнено(КодРегиона)
		И Не ЗначениеЗаполнено(Район) Тогда
		Возврат;
	КонецЕсли;
	ДанныеВыбора=ПолучитьИзСпискаВсеНаселПункты2();
	СтандартнаяОбработка=Ложь;
	

КонецПроцедуры

Функция ПолучитьИзСпискаВсеНаселПункты2()
	
	Если ЗначениеЗАполнено(НаселенныйПунктГород) Тогда
		Код=НаселенныйПунктГород;
	ИначеЕсли ЗначениеЗАполнено(Район) Тогда
		Код=Район;
	Иначеесли ЗначениезАполнено(КодРегиона) Тогда
		Код=КодРегиона;
	КонецЕсли;
ЗапросТекст="	
|<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" 
|                  xmlns:ws=""http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2"" 
|                  xmlns:base=""http://api.vetrf.ru/schema/cdm/base""
|				  xmlns:ikar=""http://api.vetrf.ru/schema/cdm/dictionary/v2"">
|  <soapenv:Header/>
|  <soapenv:Body>
|    <ws:getLocalityListByLocalityRequest>
|     <base:listOptions>
|        <base:count>1000</base:count>
|        <base:offset>0</base:offset>
|      </base:listOptions>
|      <ikar:localityGuid>"+Код+"</ikar:localityGuid>
|    </ws:getLocalityListByLocalityRequest>
|  </soapenv:Body>
|</soapenv:Envelope>";	
Попытка
	
		Результат=УстановитьПодключиться20("platform/services/2.0/IkarService/GetLocalityListByLocality",ЗапросТекст);
			Если Результат.КодСостояния<>200 Тогда
			//	Сообщить(Результат.ПолучитьТелоКакСтроку());
				Возврат Неопределено;
			КонецЕсли;
			ЧтениеД=Новый ЧтениеXML;
			ЧтениеД.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
		ОтветСтруктура = ФабрикаXDTO.ПрочитатьXML(ЧтениеД);	
		//businessEntity=ОтветСтруктура.Body.getBusinessEntityListResponse.businessEntityList.businessEntity;
		Результат=Новый СписокЗначений;
		Если   число(ОтветСтруктура.Body.getLocalityListByLocalityResponse.localityList.count)>0 Тогда
			region=ОтветСтруктура.Body.getLocalityListByLocalityResponse.localityList.locality;
			Если Тип("ОбъектXDTO")=ТипЗнч(region) Тогда
				Стр=region;
				Результат.Добавить(Новый Структура("ид,Текст",Стр.guid,Стр.view),Стр.view);
			Иначе
				Для Каждого Стр Из region Цикл
					Результат.Добавить(Новый Структура("Ид,текст",Стр.guid,Стр.view),Стр.view);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Возврат результат
	Исключение
		Возврат Неопределено;
	КонецПопытки;	


КонецФункции


&НаКлиенте
Процедура НаселенныйПунктОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Запись.НаселенныйПункт=ВыбранноеЗначение.текст;
	НаселенныйПункт=ВыбранноеЗначение.ид;
	
	СтандартнаяОбработка=Ложь;
	
КонецПроцедуры


&НаКлиенте
Процедура УлицаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	если Не ЗначениеЗАполнено(КодРегиона)
		И Не ЗначениеЗаполнено(Район) Тогда
		Возврат;
	КонецЕсли;
	ДанныеВыбора=ПолучитьИзСпискаВсеУлицы();
	СтандартнаяОбработка=Ложь;
	
	
	
КонецПроцедуры

Функция ПолучитьИзСпискаВсеУлицы()
	
	Если ЗначениеЗАполнено(НаселенныйПункт) Тогда
		Код=НаселенныйПункт;
	ИначеЕсли ЗначениеЗАполнено(НаселенныйПунктГород) Тогда
		Код=НаселенныйПунктГород;
	ИначеЕсли ЗначениеЗАполнено(Район) Тогда
		Код=Район;
	Иначеесли ЗначениезАполнено(КодРегиона) Тогда
		Код=КодРегиона;
	КонецЕсли;
ЗапросТекст="	
|<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" 
|                  xmlns:ws=""http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2"" 
|                  xmlns:base=""http://api.vetrf.ru/schema/cdm/base""
|				  xmlns:ikar=""http://api.vetrf.ru/schema/cdm/dictionary/v2"">
|  <soapenv:Header/>
|  <soapenv:Body>
|    <ws:getStreetListByLocalityRequest>
|     <base:listOptions>
|        <base:count>1000</base:count>
|        <base:offset>0</base:offset>
|      </base:listOptions>
|      <ikar:localityGuid>"+Код+"</ikar:localityGuid>
|    </ws:getStreetListByLocalityRequest>
|  </soapenv:Body>
|</soapenv:Envelope>";	
Попытка
	
		Результат=УстановитьПодключиться20("platform/services/2.0/IkarService/GetStreetListByLocality",ЗапросТекст);
			Если Результат.КодСостояния<>200 Тогда
			//	Сообщить(Результат.ПолучитьТелоКакСтроку());
				Возврат Неопределено;
			КонецЕсли;
			ЧтениеД=Новый ЧтениеXML;
			ЧтениеД.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
		ОтветСтруктура = ФабрикаXDTO.ПрочитатьXML(ЧтениеД);	
		//businessEntity=ОтветСтруктура.Body.getBusinessEntityListResponse.businessEntityList.businessEntity;
		Результат=Новый СписокЗначений;
		Если   число(ОтветСтруктура.Body.getStreetListByLocalityResponse.streetList.count)>0 Тогда
			region=ОтветСтруктура.Body.getStreetListByLocalityResponse.streetList.street;
			Если Тип("ОбъектXDTO")=ТипЗнч(region) Тогда
				Стр=region;
				Результат.Добавить(Новый Структура("ид,Текст",Стр.guid,Стр.view),Стр.view);
			Иначе
				Для Каждого Стр Из region Цикл
					Результат.Добавить(Новый Структура("Ид,текст",Стр.guid,Стр.view),Стр.view);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Возврат результат
	Исключение
		Возврат Неопределено;
	КонецПопытки;	


КонецФункции


&НаКлиенте
Процедура УлицаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	если Не ЗначениеЗАполнено(КодРегиона)
		И Не ЗначениеЗаполнено(Район) Тогда
		Возврат;
	КонецЕсли;
	Если СокрЛП(Текст)="" Тогда
		ДанныеВыбора=Новый СписокЗначений;
	Иначе
		ДанныеВыбора=ПолучитьИзСпискаВсеУлицыПоНаименованию(Текст,НаселенныйПункт,НаселенныйПунктГород,Район,КодРегиона);
	КонецЕсли;
	СтандартнаяОбработка=Ложь;
	
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьИзСпискаВсеУлицыПоНаименованию(Знач Текст,НаселенныйПункт,НаселенныйПунктГород,Район,КодРегиона)
	
	Если ЗначениеЗАполнено(НаселенныйПункт) Тогда
		Код=НаселенныйПункт;
	ИначеЕсли ЗначениеЗАполнено(НаселенныйПунктГород) Тогда
		Код=НаселенныйПунктГород;
	ИначеЕсли ЗначениеЗАполнено(Район) Тогда
		Код=Район;
	Иначеесли ЗначениезАполнено(КодРегиона) Тогда
		Код=КодРегиона;
	КонецЕсли;
	//Если ЗначениеЗаполнено(Регион) Тогда
	//Иначе
ЗапросТекст="	
|<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" 
|                  xmlns:ws=""http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2"" 
|                  xmlns:base=""http://api.vetrf.ru/schema/cdm/base""
|				  xmlns:ikar=""http://api.vetrf.ru/schema/cdm/dictionary/v2"">
|  <soapenv:Header/>
|  <soapenv:Body>
|    <ws:findStreetListByNameRequest>
|     <base:listOptions>
|        <base:count>1000</base:count>
|        <base:offset>0</base:offset>
|      </base:listOptions>
|      <ikar:localityGuid>"+Код+"</ikar:localityGuid>
|        <ws:pattern>"+Текст+"</ws:pattern>
 |    </ws:findStreetListByNameRequest>
|  </soapenv:Body>
|</soapenv:Envelope>";	
//КонецЕсли;
Попытка
	
		Результат=УстановитьПодключиться20("platform/services/2.0/IkarService/GetStreetListByLocality",ЗапросТекст);
			Если Результат.КодСостояния<>200 Тогда
			//	Сообщить(Результат.ПолучитьТелоКакСтроку());
				Возврат Неопределено;
			КонецЕсли;
			ЧтениеД=Новый ЧтениеXML;
			ЧтениеД.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
		ОтветСтруктура = ФабрикаXDTO.ПрочитатьXML(ЧтениеД);	
		//businessEntity=ОтветСтруктура.Body.getBusinessEntityListResponse.businessEntityList.businessEntity;
		Результат=Новый СписокЗначений;
		Если   число(ОтветСтруктура.Body.findStreetListByNameResponse.streetList.count)>0 Тогда
			region=ОтветСтруктура.Body.findStreetListByNameResponse.streetList.street;
			Если Тип("ОбъектXDTO")=ТипЗнч(region) Тогда
				Стр=region;
				Результат.Добавить(Новый Структура("ид,Текст",Стр.guid,Стр.view),Стр.view);
			Иначе
				Для Каждого Стр Из region Цикл
					Результат.Добавить(Новый Структура("Ид,текст",Стр.guid,Стр.view),Стр.view);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Возврат результат
	Исключение
		Возврат Неопределено;
	КонецПопытки;	


КонецФункции

&НаКлиенте
Процедура УлицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Запись.Улица=ВыбранноеЗначение.текст;
	//Улица=ВыбранноеЗначение.ид;
	
	СтандартнаяОбработка=Ложь;
	
КонецПроцедуры


