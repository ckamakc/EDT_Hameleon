Функция КодСтр(ДвоичнД)
	//Строк=ПолучитьСтрокуИзДвоичныхДанных(ДвоичнД);
	Строк=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьСтрокуИзДвоичныхДанных_Сервер(ДвоичнД,"UTF-8");
	Строк=КодироватьСтроку(Строк,СпособКодированияСтроки.КодировкаURL);
	Возврат Строк;
	                 
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Вставить содержимое обработчика.
	Если не значениеЗаполнено(PIN) Тогда
		PIN="12345678"
	КонецЕсли;
	
	Команда15("");
	
КонецПроцедуры

Процедура ЗаполнитьДанныеИзОтветаJSON(Результат, ТекстJSON, ТипДанных)
	
	ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));	// удалим открывающий символ структуры(массива)
	
	НомерЗначения = 0;
	
	Пока ТекстJSON <> "" Цикл
		
		ПервыйСимвол = Лев(ТекстJSON, 1);
		Если ПервыйСимвол = "{" Тогда
			// вложенная структура
			Значение = Новый Соответствие;
			ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Соответствие");
			
			Если ТипДанных = "Соответствие" Тогда
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
			ИначеЕсли ТипДанных = "Массив" Тогда
				Результат.Добавить(Значение);
			КонецЕсли;
		
		ИначеЕсли ПервыйСимвол = "[" Тогда
			// вложенный массив
			Значение = Новый Массив;
			ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Массив");
			
			Если ТипДанных = "Соответствие" Тогда
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
			Иначе
				Результат.Добавить(Значение);
			КонецЕсли;
			
		ИначеЕсли ПервыйСимвол = "}" И ТипДанных = "Соответствие" Тогда
			// структура закончилась
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			Если Лев(ТекстJSON, 1) = "," Тогда
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			КонецЕсли;
			
			Возврат;
			
		ИначеЕсли ПервыйСимвол = "]" И ТипДанных = "Массив" Тогда
			// массив закончился
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			Если Лев(ТекстJSON, 1) = "," Тогда
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			КонецЕсли;
			
			Возврат;
			
		Иначе
			
			Если ТипДанных = "Соответствие" Тогда
				
				Поз = Найти(ТекстJSON, ":");
				Если Поз = 0 Тогда
					// неверный формат, прервемся
					Прервать;
				КонецЕсли;
				
				ИмяЗначения = СокрЛП(Лев(ТекстJSON, Поз-1));
				
				ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз+1));
				
				Если Лев(ТекстJSON, 1) = "{" Тогда
					// значение является структурой
					Значение = Новый Соответствие;
					ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Соответствие");
					
				ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда
					// значение является массивом
					Значение = Новый Массив;
					ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Массив");
					
				Иначе
					// обычное значение
					Поз = 0;
					Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
						Символ = Сред(ТекстJSON, Сч, 1);
						Если Символ = "," ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
							Поз = Сч;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если Поз = 0 Тогда
						Значение = ТекстJSON;
						ТекстJSON = "";
						
					Иначе
						Значение = Лев(ТекстJSON, Поз-1);
						ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
						
					КонецЕсли;
					
					Значение = СокрЛП(Значение);
					Если Найти(Значение,"\u") > 0 Тогда
						Значение = ИзСтрокиЮникод(Значение);
					КонецЕсли; 
					//Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Значение) Тогда
					//	Значение = Число(Значение);
					//КонецЕсли;
					
				КонецЕсли;
				
				Результат.Вставить(ИмяЗначения, Значение);
				
			ИначеЕсли ТипДанных = "Массив" Тогда
				
				// обычное значение
				Поз = 0;
				Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
					Символ = Сред(ТекстJSON, Сч, 1);
					Если Символ = "," ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
						Поз = Сч;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Поз = 0 Тогда
					Значение = ТекстJSON;
					ТекстJSON = "";
					
				Иначе
					Значение = Лев(ТекстJSON, Поз-1);
					ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
					
				КонецЕсли;
				
				Значение = СокрЛП(Значение);
				
				Результат.Добавить(Значение);
				
			КонецЕсли;
				
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


Функция ЗаполнитьСтруктуруИзОтветаJSON(Знач ТекстJSON) Экспорт
	
	Результат = Новый Соответствие;
	
	ТекстJSON = СтрЗаменить(ТекстJSON, ",""", "~""");
	ТекстJSON = СтрЗаменить(ТекстJSON, ",{", "~{");
	ТекстJSON = СтрЗаменить(ТекстJSON, ",", ";");
	ТекстJSON = СтрЗаменить(ТекстJSON, "~{", ",{");
	ТекстJSON = СтрЗаменить(ТекстJSON, "~""", ",""");
	
	ТекстJSON = СтрЗаменить(ТекстJSON, "\""", """");	// заменим последовательность \" на "
	ТекстJSON = СтрЗаменить(ТекстJSON, """", "");		// а теперь удалим все кавычки
	
	Если Лев(ТекстJSON, 1) = "{" Тогда
		// начало структуры
		ЗаполнитьДанныеИзОтветаJSON(Результат, ТекстJSON, "Соответствие");
		
	ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда
		// начало массива
		МассивДанных = Новый Массив;
		ЗаполнитьДанныеИзОтветаJSON(МассивДанных, ТекстJSON, "Массив");
		
		Результат.Вставить("Значение", МассивДанных);
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции


Функция ВернутьСертиф(certs_replaced_string)
	Возврат ЗаполнитьСтруктуруИзОтветаJSON(certs_replaced_string)
КонецФункции
Функция НазваниеСертификат(НазваниеСертификата)
	ЗаписьJSON = Новый ЗаписьJSON;
				ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
				ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
				ЗаписьJSON.ЗаписатьЗначение(НазваниеСертификата);
				Возврат ЗаписьJSON.Закрыть();
				
КонецФункции

&НаКлиенте
Процедура Команда15(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
//	ТаблицаСертификатов.Очистить();
//	
//		Store=Новый COMОбъект("CAPICOM.Store");
////		Store.Open(CAPICOM_CURRENT_USER_STORE,CAPICOM_MY_STORE,CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);
//		Store.Open();
//		Certs=Store.Certificates;
//		ValidCerts=Certs;//.Find(CAPICOM_CERTIFICATE_FIND_TIME_VALID,ТекДата,-1);
//		Для CertNum=1 По ValidCerts.Count Цикл
//			
//			CurCert=ValidCerts.Item(CertNum);
//			Thumbprint=CurCert.Thumbprint;
//			СерийныйНомер=CurCert.SerialNumber;
//		КонецЦикла;
//		Store.close();
//		
//	Исключение
//		ТекстОшибки=СтрЗаменить(ОписаниеОшибки(),"'","");
//		Сообщить(NStr("ru = 'Ошибка при работе с хранилищем сертификатов! (Возможно, не установлен модуль CAPICOM)"+Символы.ПС+"Описание ошибки: "+ТекстОшибки+"'", "ru"));
//		Возврат;
//	КонецПопытки;
//	Если НашлиСертификат=Ложь Тогда
//		//Ищем закрытые
//				
//			Store=Новый COMОбъект("CAPICOM.Store");
//			Store.Open(cadesplugin.CADESCOM_CONTAINER_STORE);
//			certs = Store.Certificates;
//			ValidCerts=Certs;//.Find(CAPICOM_CERTIFICATE_FIND_TIME_VALID,ТекДата,-1);
//			Для CertNum=1 По ValidCerts.Count Цикл
//				
//				CurCert=ValidCerts.Item(CertNum);
//				Thumbprint=CurCert.Thumbprint;
//				СерийныйНомер=CurCert.SerialNumber;
//				Если Thumbprint=Текущийпользователь Тогда
//					ВыбСертификат=CurCert;
//					НашлиСертификат=Истина;
//					Прервать;
//				Конецесли;
//			КонецЦикла;


//		
//		
//	КонецЕсли;	
//	Если НашлиСертификат=Ложь Тогда
//		
//			
//		Сообщить("Не установлен сертификат в системе!!");
//		Возврат;
//	КонецЕсли;
//	
//	
	
	
	Сертификаты_1=ПолучитьСертификаты(PIN);
	Если ЗначениеЗаполнено(Сертификаты_1) Тогда
		Сертификаты=ВернутьСертиф(Сертификаты_1);
		
		Если Сертификаты.Количество()=0 Тогда
			ПоказатьПредупреждение(,"На jacarta нет сертификатов");
			Возврат;
		КонецЕсли;
	    ТаблицаСертификатов.Очистить();
		Для Каждого Стр Из Сертификаты Цикл
			Для Каждого Стр_1 Из Стр.Значение Цикл
				СтрСерт=ТаблицаСертификатов.Добавить();
				
				НазваниеСертификата=Стр_1["DistinguishedName"];
				
				
				
				
				СтрСерт.Название=НазваниеСертификат(НазваниеСертификата);
				
				
				//СтрСерт.Thumbprint=
				//КодСтр(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1["Thumbprint"]));
				СтрСерт.Thumbprint=
				КодСтр(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Стр_1["Thumbprint"]));
				
				
				СтрСерт.PIN=PIN;
			КонецЦикла;
		КонецЦикла;

	Конецесли;    
	
	ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПолучитьСписокСертификатов(
	75, Истина,"ПослеВыбор","","",ЭтаФорма,"")
	
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьМенеджерКриптографииПослеПодключенияРасширенияРаботыСКриптографией(Подключено,ДопПараметры) Экспорт
	Если Подключено=Истина Тогда
    	МенеджерКриптографии = Новый МенеджерКриптографии();
		МенеджерКриптографии.НачатьИнициализацию(Новый ОписаниеОповещения("ПослеИнициализации",ЭтаФорма,ДопПараметры),"","",ДопПараметры.ТипМенеджераКриптографии);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеИнициализации(МенеджерКриптографии,ДопПараметры) Экспорт
	
	//МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу=ТекущийПользователь.Пароль;
	МенеджерКриптографии.ВключениеСертификатовВПодпись=РежимВключенияСертификатовКриптографии.ВключатьПолнуюЦепочку;
	МенеджерКриптографии.НачатьПолучениеХранилищаСертификатов(Новый ОписаниеОповещения("ПослеПолученияСертификатов",ЭтаФорма,
	ДопПараметры
	),ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты
	);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияСертификатов(Хранилище,ДД) Экспорт
	Хранилище.НачатьПолучениеВсех(Новый ОписаниеОповещения("ПослеПолученияВсех",ЭтаФорма,ДД));
	
КонецПроцедуры

Функция НазваниеДЖСОН(Знач Название)
	Название=РаскодироватьСтроку(Название,СпособКодированияСтроки.КодировкаURL);
	ЗаписьJSON = Новый ЗаписьJSON;
				ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
				ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
				ЗаписьJSON.ЗаписатьЗначение(Название);
		Возврат ЗаписьJSON.Закрыть()
Конецфункции
	
&НаКлиенте
Функция ПолучитьДвоичныеДанныеИзСтроки_Клиент(Текст_1,Кодировка=Неопределено,Неиспользовать=Ложь) Экспорт
	
	Если  Не ЗначениеЗаполнено(Кодировка) Тогда
		Кодировка=КодировкаТекста.UTF8;
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос;
	#Если ВебКлиент Тогда
	Запрос.УстановитьТелоИзСтроки(Текст_1, Кодировка);
	#Иначе
	Запрос.УстановитьТелоИзСтроки(Текст_1, Кодировка,ИспользованиеByteOrderMark.НеИспользовать);
	#КонецЕсли

	Двд =  Запрос.ПолучитьТелоКакДвоичныеДанные();
	Возврат Двд ;
	
	
Конецфункции


&НаКлиенте
Процедура ПослеПолученияВсех(СертификатыХранилища,ДД) Экспорт
	ТекущаяДата = ТекущаяДата();
	Для Каждого Сертификат Из СертификатыХранилища Цикл
	    Если Сертификат.ДатаОкончания < ТекущаяДата Тогда 
	        // Пропускаем истекшие сертификаты, если нужно
	        Продолжить;
		КонецЕсли;
		Название="";
		Для каждого Стр_П Из Сертификат.Субъект Цикл
			Если СокрЛП(Название)<>"" ТОгда
				Название=Название+", ";
			КонецЕсли;
			Название=Название+Стр_П.Ключ+" "+Стр_П.Значение;
			
		КонецЦикла;
		СтрСерт=ТаблицаСертификатов.Добавить();
		Название=
				КодСтр(ПолучитьДвоичныеДанныеИзСтроки_Клиент(Название));
		
		
				СтрСерт.Название=НазваниеДЖСОН(Название); ;
			
				//КодСтр(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(Название));
				
				
				
		СтрСерт.Thumbprint=стрЗаменить(Строка(Сертификат.Отпечаток)," ","");
		СтрСерт.ДействуетДо=Сертификат.ДатаОкончания;
		//СтрСерт.PIN=PIN;
		
	КонецЦикла;
	
	
КонецПроцедуры



&НаКлиенте
Функция ПолучитьСертификаты(PIN) Экспорт
	//Получитьsign=НасервереПолучаем();
	//	Store=Новый COMОбъект("CAPICOM.Store");
	//	Store.Open(CAPICOM_CURRENT_USER_STORE,CAPICOM_MY_STORE,CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);
	//	Store.Open();
	//	Certs=Store.Certificates;
	//	ValidCerts=Certs;//.Find(CAPICOM_CERTIFICATE_FIND_TIME_VALID,ТекДата,-1);
	//	Для CertNum=1 По ValidCerts.Count Цикл
	//		а=1
	//	КонецЦикла;
	//	Store.close();
	//	
	//		Store=Новый COMОбъект("CAPICOM.Store");
	//		Store.Open(100);
	//		certs = Store.Certificates;
	//		ValidCerts=Certs;//.Find(CAPICOM_CERTIFICATE_FIND_TIME_VALID,ТекДата,-1);
	//		Для CertNum=1 По ValidCerts.Count Цикл
	//			а=1
	//		КонецЦикла;


	//
	//Возврат Неопределено;
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	objXL=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.getObjXL();
	Если objXL=Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		certs_string = objXL.getCertListAsJson(PIN);
	Исключение      	
//		ПоказатьПредупреждение(,"Не правильно указан pin код");
		ВозвраТ Неопределено;
	КонецПопытки;
	
 	Попытка
      
      certs_replaced_string = СтрЗаменить(certs_string,"/""/g", """\""");//.replace(/'/g, "\"").replace(/\\/g, "\\\\");
      
      certs_replaced_tab_string = СтрЗаменить(certs_replaced_string,"/\t/g", """ """);//.replace(/'/g, "\"").replace(/\\/g, "\\\\");
	  Возврат certs_replaced_tab_string;
	 
      //obj = JSON.parse(certs_replaced_tab_string);
      Исключение
    //} catch (err) { 
  
      
      return Неопределено;
  	КонецПопытки;
	
	
КонецФункции



Функция ИзСтрокиЮникод(Стр) Экспорт
	Рез = "";
	МасСлов = РазложитьСтрокуВМассивПодстрок_11(Стр," ");
	Для каждого Слово Из МасСлов Цикл
		Если Найти(Слово,"\")>0 Тогда
			МасБукв = РазложитьСтрокуВМассивПодстрок_11(Сред(Слово,2),"\");
		Иначе
			МасБукв = РазложитьСтрокуВМассивПодстрок_11(Сред(Слово,1),"\");
		Конецесли;
		Для каждого Буква Из МасБукв Цикл
			Если Лев(Буква,1) = "u" Тогда
				Рез = Рез + Символ(Из16В10(Сред(Буква,2,4))) + Сред(Буква,6);
			Иначе
				Рез = Рез + Буква;
			КонецЕсли;
		КонецЦикла;
		Рез = Рез + " ";
	КонецЦикла;
	Возврат Сред(Рез, 1, СтрДлина(Рез)-1);
КонецФункции

Функция Из16В10(Число16) Экспорт
	Число10 = 0;
	Число16 = ВРег(Число16);
	НаборСимв = "0123456789ABCDEF"; 
	Для Н = 1 По СтрДлина(Число16) Цикл  
		Цифра = Найти(НаборСимв,Лев(Прав(Число16,Н),1)) - 1;
		Если Цифра = -1 Тогда Возврат 0 КонецЕсли;
		Число10 = Число10 + Цифра*Pow(16,Н-1);
	КонецЦикла; 	 
	Возврат Число10;
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок_11(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции


&НаКлиенте
Процедура Таблица1Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	ВыбраннаяСтрока_1=ТаблицаСертификатов.НайтиПоИдентификатору(ВыбраннаяСтрока);
	T=ВыбраннаяСтрока_1.Thumbprint;
	
	P=СокрЛП(ВыбраннаяСтрока_1.PIN);
	Название=ВыбраннаяСтрока_1.Название;
	
	Должность="";
	Если Найти(Название,"; T=")>0 Тогда
		Должность=Сред(Название,Найти(Название,"; T=")+4);
		Должность=Сред(Должность,1,Найти(Должность,";")-1);
		
	КонецЕсли;
	
	ИНН="";
	Если              Найти(Название,"ИНН=")>0 Тогда
		ИНН=Сред(Название,Найти(Название,"ИНН=")+4,12);
		Если Сред(ИНН,1,2)="00" Тогда
			ИНН=Сред(ИНН,3);
		КонецЕсли;
	ИначеЕсли              Найти(Название,"INN=")>0 Тогда
		ИНН=Сред(Название,Найти(Название,"INN=")+4);
		Если Сред(ИНН,11,4)="/KPP" Тогда
			ИНН=Сред(ИНН,1,10);
		Иначе
			ИНН=Сред(ИНН,1,12);
		КонецЕсли;
		
		//Если Сред(ИНН,1,2)="00" Тогда
		//	ИНН=Сред(ИНН,3);
		//КонецЕсли;
	ИначеЕсли              Найти(Название,"OID1_2_643_3_131_1_1")>0 Тогда
		ИНН=Сред(Название,Найти(Название,"OID1_2_643_3_131_1_1")+21,12);
		Если Сред(ИНН,1,2)="00" Тогда
			ИНН=Сред(ИНН,3);
		КонецЕсли;
	КонецЕсли;
	НазваниеОрганизации=инн;
	Если Найти(Название,"O ")=1 Тогда
		НазваниеОрганизации=Сред(Название,3);
		НазваниеОрганизации=Сред(НазваниеОрганизации,1,Найти(НазваниеОрганизации,", ")-1);
	ИначеЕсли Найти(Название,", CN ")>0 Тогда
		Название=Сред(Название,Найти(Название,", CN ")+5);
		НазваниеОрганизации=Название;
		НазваниеОрганизации=Сред(НазваниеОрганизации,1,Найти(НазваниеОрганизации,", ")-1);
	КонецЕсли;
	
	АдресОрганизации="Россия";
	Если Найти(Название,", C ")>0 Тогда
		
		Страна=НайтиСтрану(Сред(Название,Найти(Название,", C")+4,2));
		
		Если ЗначениеЗаполнено(Страна) Тогда
			АдресОрганизации=Страна;
		КонецЕсли;
	КонецЕсли;
	
	Если Найти(Название,", ST ")>0 Тогда
		
		Страна=Сред(Название,Найти(Название,", ST ")+5);
		Страна=Сред(Страна,1,Найти(Страна,", SN")-1);
		АдресОрганизации=АдресОрганизации+", "+Страна;
	КонецЕсли;
	
	Если Найти(Название,", L ")>0 Тогда
		
		Страна=Сред(Название,Найти(Название,", L ")+4);
		Страна=Сред(Страна,1,Найти(Страна,",")-1);
		АдресОрганизации=АдресОрганизации+", "+Страна;
	КонецЕсли;
	
	Если Найти(Название,", Street ")>0 Тогда
		
		Страна=Сред(Название,Найти(Название,", Street ")+9);
		Страна=Сред(Страна,1,Найти(Страна,", O")-1);
		АдресОрганизации=АдресОрганизации+", "+Страна;
	КонецЕсли;
	
	Фамилия="";
	ИмяИОтчество="";
	Если Найти(Название,"SN")>0 Тогда
		Фамилия=СокрЛП(Сред(Название,Найти(Название,"SN")+3));
		Фамилия=Сред(Фамилия,1,Найти(Фамилия,",")-1);
		
	КонецЕсли;
	Если Найти(Название,"GN")>0 Тогда
		ИмяИОтчество=СокрЛП(Сред(Название,Найти(Название,"GN")+3));
		Фамилия=Фамилия+" "+Сред(ИмяИОтчество,1,Найти(ИмяИОтчество,",")-1);
		
	КонецЕсли;
	
	
	
	
	
	Орг=СоздатьНайтиОрганизацияю(СтрЗаменить(НазваниеОрганизации,"\""",""""),ИНН,АдресОрганизации);
	//Если ЗначениеЗАполнено(Пользователь) тогда
	//	ЗанестиВсеВПользователя(T,ИНН,Название,P,Орг,Фамилия);
	
	
	//Попытка
	//	ЭтаФорма.ВладелецФормы.Прочитать();
	//Исключение
	//КонецПопытки;
	ЭтаФорма.Закрыть(Новый Структура("T,ИНН,Название,P,Орг,Фамилия,ДатаДо,Должность",T,ИНН,Название,P,Орг,Фамилия,ВыбраннаяСтрока_1.ДействуетДо,Должность));
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиСтрану(КодАльфа)
			СтрПр=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоРеквизиту("Альфа2",КодАльфа);
		Если ЗначениеЗаполнено(СтрПр) Тогда
			Возврат СтрПр.Наименование
		Иначе
			Возврат Неопределено
		КонецЕсли;
Конецфункции

&НаСервереБезКонтекста
Функция  СоздатьНайтиОрганизацияю(НАимОрг,ИНН,АдресОрганизации)
	СпрОрг=Справочники.Организации_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",ИНН);
	Если СпрОрг=Справочники.Организации_ХамелеонЦРПТ.ПустаяСсылка() Тогда
		СпрОрг=Справочники.Организации_ХамелеонЦРПТ.СоздатьЭлемент();
	ИначеЕсли СпрОрг.Наименование=НАимОрг И
		СпрОрг.АдресМестонахождения=АдресОрганизации И
		((ЗначениеЗаполнено(СпрОрг.ИНН) И спрОрг.ИНН=ИНН) ИЛИ Не ЗначениеЗаполнено(ИНН)) 
		
		Тогда
		Возврат СпрОрг.Ссылка;
	Иначе
		СпрОрг=СпрОрг.Получитьобъект();
		
	Конецесли;
	СпрОрг.АдресМестонахождения=АдресОрганизации;
	СпрОрг.ИНН=ИНН;
	СпрОрг.Наименование=Наиморг;
	СпрОрг.Записать();
	Возврат СпрОрг.Ссылка
КонецФункции

Процедура ЗанестиВсеВПользователя(T,ИНН,Название,P,Орг,Фамилия)
	Поль=Пользователь.ПолучитьОбъект();
	Если ЗначениеЗаполнено(Фамилия) тогда
		Поль.КонтактноеЛицо=Фамилия;
	КонецЕсли;
	Поль.PIN=P;
	Поль.ИННСертификата=ИНН;
	Поль.НазваниеСертификата=Название;
	Поль.СертификатТумбер=T;
	Поль.Организация=Орг;
	Поль.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура Команда16(Команда)
	// Вставить содержимое обработчика.
	Если Элементы.Таблица1.ТекущиеДанные<>неопределено Тогда
		Таблица1Выбор(Команда,Элементы.Таблица1.ТекущаяСтрока,Команда,Истина);
	КонецЕсли;
	
КонецПроцедуры
