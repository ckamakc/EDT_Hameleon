&НаСервереБезКонтекста
Функция ПолучитьТокенСрегистра(Thumbprint_1)
	Возврат Регистрысведений.ТокенПоСертификату_ХамелеонЦРПТ.Получить(Новый Структура("Отпечаток",Thumbprint_1)).Токен;
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьИзПользователя(ТекущийПользователь)
	Возврат Обработки._Запуск_ХамелеонЦРПТ.ПолучитьИзПользователя(ТекущийПользователь);
КонецФункции

&НаСервереБезКонтекста
Процедура ОчиститьТокенСрегистра(ТТ)
	ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаписатьТокенВРегистр(ТТ,"")
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьИНН(Орг)
	Возврат Орг.Организация.ИНН
КонецФункции


&НаСервере
Функция ЗагрузитьНаСервере(Thumbprint_1,Знач Организация,УжеОтправили,СРегистра)
Организация=Организация.Организация;
Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
	HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
	HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			ИНН=Организация.ИНН;
			
			
			
			что=Thumbprint_1.что;

	
			
	HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?offset=10&page=0&pg="+Что);;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	Если Ответ.КодСостояния=200 Тогда
		//ЗагружаемШаблоныНасервере(Текст1,Обр.Пользователь);
		Тотал=1;
		числоЗагрузили=0;
		Первый1=0;
		Пока Тотал>0 Цикл
 		
			ЗагружаемГТИН(Текст1,ИНН,Тотал,числоЗагрузили,Thumbprint_1);
			Если Тотал<=0 Тогда
				Прервать;
			Конецесли;
			Первый1=Первый1+1;
			//Если Первый1*100>=Тотал Тогда
			//	Прервать;
			//КонецЕсли;
			
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?offset="+Формат((Первый1+1)*10,"ЧГ=")+"&page="+Формат(Первый1,"ЧГ=")+"&pg="+Что);
 			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин           
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			Если Ответ.КодСостояния<>200 Тогда
				Сообщить("Не удалось получить все GTIN");
				Прервать;
			КонецЕсли;
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			
		Конеццикла;	
	Сообщить("Загружено "+Строка(числоЗагрузили)+" "+Thumbprint_1.НаименованиеСтенда);		
	ИначеЕсли Ответ.КодСостояния=401 
		ИЛИ Ответ.КодСостояния=502  
		Тогда
			
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				Возврат ложь;			
		КонецЕсли
	КонецЕсли;
	Возврат Истина
КонецФункции


Процедура ЗагружаемГТИНЛекарства(Текст,Тотал,числоЗагрузили,Thumbprint_1)
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Текст);
			Попытка
				NNN=ПрочитатьJSON(ЧтениеJSON);
				Тотал=NNN.total;
				
				Для Каждого Стр Из NNN.entries Цикл
					//Если ИНН<>Стр.INN Тогда
					//	Продолжить;
					//КонецЕсли;
					числоЗагрузили=числоЗагрузили+1;
					СпрД=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Стр.gtin));
					Если СпрД<>Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка() Тогда
						СпрД=СпрД.ПолучитьОбъект();
					Иначе
						СпрД=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
					КонецЕсли;
						СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Фармацевтика;
						
					country="";
					СпрД.БрендТорговаяМарка=Стр.prod_desc_label;
					
					Стр.Свойство("glf_country",country);
					Если ЗначениеЗАполнено(country) Тогда
						Если country="РОССИЙСКАЯ ФЕДЕРАЦИЯ" Тогда
							СпрД.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
						Иначе
							СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(country);
						КонецЕсли;	
						
						//СпрД.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоНаименованию(country);
					ИначеЕсли Не ЗначениеЗаполнено(	СпрД.СтранаПроизводства) Тогда
						СпрД.СтранаПроизводства=справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");;
					КонецЕсли;
					СпрД.GTIN=Число(Стр.gtin);
					//СпрД.id=Стр.id;
					gf_name="";
					//Если Стр.Свойство("glf_name",gf_name) Тогда
					//СпрД.ИННПроизводителяИмпортёра=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоНаименованию(gf_name);
					//Если Не ЗначениеЗАполнено(СпрД.ИННПроизводителяИмпортёра) Тогда
					//	Спр_К=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
						//Спр_К.ИНН=Стр.inn;
					//	Спр_К.Наименование=gf_name;
					//	Спр_К.Записать();
					//	СпрД.ИННПроизводителяИмпортёра=Спр_К.Ссылка;
						
					//Конецесли;
					//КонецЕсли;
					Стр.Свойство("materialDown",СпрД.МатериалНиза);
					Стр.Свойство("materialLining",СпрД.МатериалПодкладки);
					Стр.Свойство("materialUpper",СпрД.МатериалВерха);
					Стр.Свойство("color",СпрД.Цвет);
					
					Стр.Свойство("model",СпрД.МодельПроизводителяАртикул);
					СпрД.Наименование=Стр.prod_desc;
					СпрД.НаименованиеТовара=Стр.prod_desc;
					
					Стр.Свойство("tnVedCode",СпрД.КодТНВЭДКороткий);
					
									
					КодПр="";
					Стр.Свойство("productType",КодПр);
					Если ЗначениеЗаполнено(КодПр) Тогда
					СпрД.ВидОбуви=Справочники.ВидОбуви_ХамелеонЦРПТ.НайтиПоКоду(Стр.productType);
					Если Не ЗначениеЗаполнено(СпрД.ВидОбуви) тогда
						СпрВ=Справочники.ВидОбуви_ХамелеонЦРПТ.СоздатьЭлемент();
						СпрВ.Код=Стр.productType;
						СпрВ.Наименование=Стр.productTypeDesc;
						СпрВ.Записать();
						СпрД.ВидОбуви=СпрВ.Ссылка;
					КонецЕсли;
				КонецЕсли;
				publicationDate=Неопределено;
				    Стр.Свойство("reg_date",publicationDate);
					Если ЗначениеЗаполнено(publicationDate) тогда
						СпрД.ДатаПубликации=Дата(Число(Сред(publicationDate,1,4)),Число(Сред(publicationDate,6,2)),
						Число(Сред(publicationDate,9,2)),Число(Сред(publicationDate,12,2)),
						Число(Сред(publicationDate,15,2)),Число(Сред(publicationDate,18,2)));					
					Конецесли;
					////То была обувь теперь сигареты
				packageType=Неопределено;
				    Стр.Свойство("packageType",packageType);
									Если ЗначениеЗАполнено(packageType) тогда
						Попытка
							СПрд.ТипУпаковкиСигарет=Перечисления.ТипУпаковкиСигареты_ХамелеонЦРПТ[packageType];
						Исключение
							 Если packageType="КОРОБКА/БОКС" Тогда
								СПрд.ТипУпаковкиСигарет=Перечисления.ТипУпаковкиСигареты_ХамелеонЦРПТ.box;
							КонецЕсли;
						КонецПопытки;
					КонецЕсли;
					КоличествоВГруппе=0;
					Если Стр.Свойство("innerUnitCount",КоличествоВГруппе) И
						ЗначениеЗаполненО(КоличествоВГруппе) Тогда
						СпрД.КоличествоВГруппе=КоличествоВГруппе;
					Конецесли;
				productGroup=Неопределено;
				    Стр.Свойство("productGroup",productGroup);
					Если ЗначениеЗаполнено(productGroup) тогда
						СпрГр=Справочники.ГруппаСигарет_ХамелеонЦРПТ.НайтиПоНаименованию(productGroup);
						Если Не ЗначениеЗаполнено(СпрГр) Тогда
							СпрГр=Справочники.ГруппаСигарет_ХамелеонЦРПТ.СоздатьЭлемент();
							СпрГр.Наименование=productGroup;
							СпрГр.Записать();
						КонецЕсли;
						СпрД.ГруппаСигарет=СпрГр.Ссылка;
						
					КонецЕсли;
					
					productSize=Неопределено;
				    Стр.Свойство("productSize",productSize);
					Если ЗначениеЗаполнено(productSize) тогда
						productSize=СтрЗаменить(productSize,".",",");
						СпрД.Размер=Справочники.РазмерВШтихмассовойСистеме_ХамелеонЦРПТ.НайтиПоНаименованию(productSize,истина);
					КонецЕсли;
					
					
					
					СпрД.Записать();
				Конеццикла;
				
				Элементы.Список.Обновить();
				
			Исключение
				Возврат
			КонецПопытки;
	
	
		КонецПроцедуры


&НаКлиенте
Процедура ПоучитьСписокПоЛекарствам(Thumbprint_1,Пользователь,УжеОтправили=Ложь)
	
	///ТОЛЬКО ПО ВЭБ
	//СРегистра=Thumbprint_1.ТокенПоОтпечатку;
	СРегистра="";
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
		
		АдресКАПИ=СтрЗаменить(Thumbprint_1.АдресКАПИ,"api.","");
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
	HTTPСервисЗапрос=Новый HTTPСоединение(АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
	HTTPСервисЗапрос=Новый HTTPСоединение(АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			//ИНН=ВернутьИНН(Обр.Пользователь);
					HTTPЗапрос=Новый HTTPЗапрос("api/v1/reestr/med_products/current");
					
				Куки="lk-auth-token="+Срегистра ;
				
				
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("start_from");	
	Чтен.ЗаписатьЗначение(0);
	Чтен.ЗаписатьИмяСвойства("count");
	Чтен.ЗаписатьЗначение(20);
	Чтен.ЗаписатьИмяСвойства("filter");
	Чтен.ЗаписатьНачалоОбъекта();
	
				       Чтен.ЗаписатьКонецОбъекта();
	
	//Чтен.ЗаписатьЗначение("{}");
				       Чтен.ЗаписатьКонецОбъекта();
				
				Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
		HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин 
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	Если Ответ.КодСостояния=200 Тогда
		//ЗагружаемШаблоныНасервере(Текст1,Обр.Пользователь);
		Тотал=1;
		числоЗагрузили=0;
		Первый1=0;
		Пока Первый1<Тотал Цикл
			
		//				ЧтениеJSON = Новый ЧтениеJSON;
		//	ЧтениеJSON.УстановитьСтроку(Текст1);
		//		NNN=ПрочитатьJSON(ЧтениеJSON);

			ЗагружаемГТИНЛекарства(Текст1,Тотал,числоЗагрузили,Thumbprint_1);
			Первый1=Первый1+1;
			Если Первый1*20>=Тотал Тогда
				Прервать;
			КонецЕсли;
			
							HTTPЗапрос=Новый HTTPЗапрос("api/v1/reestr/med_products/current");
					
				Куки="lk-auth-token="+Срегистра ;
				
				
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("start_from");	
	Чтен.ЗаписатьЗначение(Первый1*20);
	Чтен.ЗаписатьИмяСвойства("count");
	Чтен.ЗаписатьЗначение(20);
	Чтен.ЗаписатьИмяСвойства("filter");
	Чтен.ЗаписатьНачалоОбъекта();
	
				       Чтен.ЗаписатьКонецОбъекта();
	
	//Чтен.ЗаписатьЗначение("{}");
				       Чтен.ЗаписатьКонецОбъекта();
				
				Тело=Чтен.Закрыть();//"{""start_from"":0,""count"":20,""filter"":{}}";
		HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","token "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин 
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	

			///Константин           
			Если Ответ.КодСостояния<>200 Тогда
				Сообщить("Не удалось получить все GTIN");
				Прервать;
			КонецЕсли;
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			
		Конеццикла;	
	Сообщить("Загружено "+Строка(числоЗагрузили)+" "+Thumbprint_1.НаименованиеСтенда);		
	ИначеЕсли Ответ.КодСостояния=401  ИЛИ Ответ.КодСостояния=403
		ИЛИ Ответ.КодСостояния=502  
		Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена_ЛДМП(Thumbprint_1);
				Thumbprint_1=ПолучитьИзПользователя(Пользователь);	
	
				ПоучитьСписокПоЛекарствам(Thumbprint_1,Пользователь,Истина)		КонецЕсли
	КонецЕсли;
//	КонецЕсли;
	Элементы.Список.Обновить();
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоучитьСписокПоТабаку(Thumbprint_1,Пользователь,УжеОтправили,Что)
	
	
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
//	СРегистра="";
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
	Если ОбработкаWEBНаСервере Тогда
		Если НЕ ЗагрузитьНаСервере(Thumbprint_1,Пользователь,УжеОтправили,СРегистра) Тогда
			Если УжеОтправили=Истина Тогда
			Иначе
				Загрузить("",Истина)
			КонецЕсли;
	
		КонецЕсли;
	Иначе
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
	HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
	HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			
			
			ИНН=ВернутьИНН(Пользователь);
					HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/product/search?limit=10&page=0");;
	//HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	Если Ответ.КодСостояния=200 Тогда
		//ЗагружаемШаблоныНасервере(Текст1,Обр.Пользователь);
		Тотал=1;
		числоЗагрузили=0;
		Первый1=0;
		Пока Первый1<Тотал Цикл
 		
			ЗагружаемГТИН(Текст1,ИНН,Тотал,числоЗагрузили,Thumbprint_1);
			Первый1=Первый1+1;
			Если Первый1*10>=Тотал Тогда
				Прервать;
			КонецЕсли;
			
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/product/search?limit=10&page="+Формат(Первый1,"ЧГ="));
 			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин           
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			Если Ответ.КодСостояния<>200 Тогда
				Сообщить("Не удалось получить все GTIN");
				Прервать;
			КонецЕсли;
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			
		Конеццикла;	
	Сообщить("Загружено "+Строка(числоЗагрузили)+" "+Thumbprint_1.НаименованиеСтенда);		
	ИначеЕсли Ответ.КодСостояния=401 
		ИЛИ Ответ.КодСостояния=502  ИЛИ Ответ.КодСостояния=500
		Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				Загрузить("",Истина)			
		КонецЕсли
	КонецЕсли;
	КонецЕсли;
	Элементы.Список.Обновить();
	
	
	Возврат;
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
//	СРегистра="";
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
	Если ОбработкаWEBНаСервере Тогда
	//	Если НЕ ЗагрузитьНаСервере(Thumbprint_1,Пользователь,УжеОтправили,СРегистра) Тогда
	//		Если УжеОтправили=Истина Тогда
	//		Иначе
	//			Загрузить(Команда,Истина)
	//		КонецЕсли;
	//
	//	КонецЕсли;
	Иначе
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
	HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
	HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			
			
			ИНН=ВернутьИНН(Пользователь);
	HTTPЗапрос=Новый HTTPЗапрос("/products/listV2?ownerInn="+ИНН+"&limit=1000&offset=0");
	//&pg="+Что);;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	Если Ответ.КодСостояния=200 Тогда
		//ЗагружаемШаблоныНасервере(Текст1,Обр.Пользователь);
		Тотал=1;
		числоЗагрузили=0;
		Первый1=0;
		Пока Первый1<Тотал Цикл
 		
			ЗагружаемГТИН(Текст1,ИНН,Тотал,числоЗагрузили,Thumbprint_1);
			Первый1=Первый1+1;
			Если Первый1*10>=Тотал Тогда
				Прервать;
			КонецЕсли;
			
			Прервать;
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?inn="+ИНН+"&limit=10&page="+Формат(Первый1,"ЧГ=")+"&pg="+Что);
 			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин           
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			Если Ответ.КодСостояния<>200 Тогда
				Сообщить("Не удалось получить все GTIN");
				Прервать;
			КонецЕсли;
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			
		Конеццикла;	
	Сообщить("Загружено "+Строка(числоЗагрузили)+" "+Thumbprint_1.НаименованиеСтенда);		
	ИначеЕсли Ответ.КодСостояния=401 
		ИЛИ Ответ.КодСостояния=502  ИЛИ Ответ.КодСостояния=500
		Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				Загрузить("",Истина)			
		КонецЕсли
	КонецЕсли;
	КонецЕсли;
	Элементы.Список.Обновить();
	
КонецПроцедуры


&НаКлиенте
Процедура Загрузить(Команда,УжеОтправили=Ложь) Экспорт
	// Вставить содержимое обработчика.
					
	
	
	
	Обр=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	
	Thumbprint_1=ПолучитьИзПользователя(Обр.Пользователь);	
	
		
			
			что=Thumbprint_1.что;

	
		
	Если Thumbprint_1.НаименованиеСтенда="Фармацевтика" Тогда
		
		ПоучитьСписокПоЛекарствам(Thumbprint_1,Обр.Пользователь);
		Возврат;
		
	ИначеЕсли Thumbprint_1.НаименованиеСтенда="Табак"
		ИЛИ Thumbprint_1.НаименованиеСтенда="Альтернативный табак" Тогда

		ПоучитьСписокПоТабаку(Thumbprint_1,Обр.Пользователь,УжеОтправили,Что);
		Возврат;
		
		
	КонецЕсли;
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
//	СРегистра="";
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СРегистра) Тогда
		ПоказатьПредупреждение(,"Не удалось получить токен по организации");
		Возврат;
	Конецесли;
	
	Если ОбработкаWEBНаСервере Тогда
		Если НЕ ЗагрузитьНаСервере(Thumbprint_1,Обр.Пользователь,УжеОтправили,СРегистра) Тогда
			Если УжеОтправили=Истина Тогда
			Иначе
				Загрузить(Команда,Истина)
			КонецЕсли;
	
		КонецЕсли;
	Иначе
	
			Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
	HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
	HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			
			
			ИНН=ВернутьИНН(Обр.Пользователь);
			
			
			
			
			
			
			
			
			
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?offset=10&page=0&pg="+Что);;
			//	КонецЕсли;
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
	//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
	///Константин           
	Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
	Текст1=Ответ.ПолучитьТелоКакСтроку();
	
	
	Если Ответ.КодСостояния=200 Тогда
		//ЗагружаемШаблоныНасервере(Текст1,Обр.Пользователь);
		Тотал=1;
		числоЗагрузили=0;
		Первый1=0;
		Пока Тотал>0 Цикл
 		
			ЗагружаемГТИН(Текст1,ИНН,Тотал,числоЗагрузили,Thumbprint_1);
			Первый1=Первый1+1;
			Если Тотал<=0 Тогда
				ПрерватЬ;
			КонецеслИ;
			
			//Если Первый1*10>=Тотал Тогда
			//	Прервать;
			//КонецЕсли;
			
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/product/search?offset="+Формат((Первый1+1)*10,"ЧГ=")+"&page="+Формат(Первый1,"ЧГ=")+"&pg="+Что);
 			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
			//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
			///Константин           
			Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			Если Ответ.КодСостояния<>200 Тогда
				Сообщить("Не удалось получить все GTIN");
				Прервать;
			КонецЕсли;
			Текст1=Ответ.ПолучитьТелоКакСтроку();
			
		Конеццикла;	
	Сообщить("Загружено "+Строка(числоЗагрузили)+" "+Thumbprint_1.НаименованиеСтенда);		
	ИначеЕсли Ответ.КодСостояния=401 
		ИЛИ Ответ.КодСостояния=502  ИЛИ Ответ.КодСостояния=500
		Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				Загрузить(Команда,Истина)			
		КонецЕсли
	КонецЕсли;
	КонецЕсли;
	Элементы.Список.Обновить();
КонецПроцедуры

Процедура ЗагружаемГТИН(Текст,ИНН,Тотал,числоЗагрузили,Thumbprint_1)
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Текст);
			Попытка
				NNN=ПрочитатьJSON(ЧтениеJSON);
				Если NNN.results.Количество()=0 Тогда
					Тотал=0;
				Иначе
					Тотал=NNN.total;
				Конецесли;
				
				Для Каждого Стр Из NNN.results Цикл
					Если ИНН<>Стр.INN Тогда
						Продолжить;
					КонецЕсли;
					
					Попытка
					
						ОбщийМодуль_НаСервере_ХамелеонЦРПТ.СоздатьПродукцию(Стр,Thumbprint_1);
						числоЗагрузили=числоЗагрузили+1;
						
					Исключение
					КонецПопытки;

				Конеццикла;
				
				Элементы.Список.Обновить();
			Исключение
				Возврат
			КонецПопытки;
	
	
		КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
				   ОбработкаWEBНаСервере=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ОбработкаWEBНаСервере();
	ЗаполнитьСправочникВнешний("СписокПродукций_ЦРПТ","",Элементы.ГруппаКнопокВнешняя,"Подключаемый_ВыполнитьКомандуВнешняя_ЗаказМарокОсновная");

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПоСУЗ(Команда)
	// Вставить содержимое обработчика.
	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	
	ТекСт=Форм.Пользователь;
	//Форм.Пользователь=Объект.ТекущийПользователь;
	ПараметрыДлякилента=Неопределено;
	Если Форм.НаКлиенте(ПараметрыДлякилента) Тогда
		Форм.Пользователь=ТекСт;
		
		АдресРаздробить=ПараметрыДлякилента.АдресСУЗ;
		Адрес=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Адрес=Сред(Адрес,1,Найти(Адрес,":")-1);
		Порт=Сред(АдресРаздробить,Найти(АдресРаздробить,"://")+3);
		Порт=Сред(Порт,Найти(Порт,":")+1);
		Попытка
			Порт=число(Порт);
		Исключение
			Порт=Неопределено;
		КонецПопытки;
			Если Найти(АдресРаздробить,"https")=1 Тогда
				Защищ=Новый ЗащищенноеСоединениеopenSSL();
			Иначе
				Защищ=Неопределено;
			КонецЕсли;
		
		
				Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			ПоказатьПредупреждение(,"В пользователе не заполнен адрес СУЗ");
			Возврат;
			
		КонецЕсли;

Если ОбработкаWEBНаСервере Тогда
		//Если НЕ ЗагрузканаСервереПолучитьКМ(ПараметрыДлякилента,Адрес,Порт) Тогда
					ПоказатьПредупреждение(,"Не удалось подключиться к СУЗ");
	
		//КонецЕсли;
		
		
	Иначе
		
			Если ЗначениеЗАполнено(ПараметрыДлякилента.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",ПараметрыДлякилента.АдресПрокси,ПараметрыДлякилента.ПортПрокси,ПараметрыДлякилента.ПользовательПрокси,ПараметрыДлякилента.ПарольПрокси);
			
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,Прокси,ПараметрыДлякилента.Таймаут,Защищ);
			Иначе
				HTTPСервисЗапрос=Новый HTTPСоединение(Адрес,Порт,,,,ПараметрыДлякилента.Таймаут,Защищ);
			КонецЕсли;
			
			HTTPЗапрос = Новый HTTPЗапрос("api/v2/"+ПараметрыДлякилента.СайтКСУЗ+"/product/info?omsId="+ПараметрыДлякилента.ИдентификаторСУЗ);
			HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
			HTTPЗапрос.Заголовки.Вставить("clientToken",ПараметрыДлякилента.ТокенСУЗ);
			 Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
			     Текст1=Ответ.ПолучитьТелоКакСтроку();
		Если Ответ.КодСостояния=200 Тогда
		//ЗагружаемШаблоныНасервере(Текст1,Обр.Пользователь);
		Тотал=1;
		числоЗагрузили=0;
		
			ЗагружаемГТИН_Шин(Текст1,Тотал,числоЗагрузили,ПараметрыДлякилента);
	//Сообщить("Загружено "+Строка(числоЗагрузили));		
	Сообщить("Загружено "+Строка(числоЗагрузили)+" "+ПараметрыДлякилента.НаименованиеСтенда);		
	ИначеЕсли Ответ.КодСостояния=401 
		ИЛИ Ответ.КодСостояния=502  
		Тогда
			
	КонецЕсли;
	  
			
		КонецЕсли;	
		Иначе
			Форм.Пользователь=ТекСт;
		КонецЕсли;	
	
	Элементы.Список.Обновить();
КонецПроцедуры
		
Процедура ЗагружаемГТИН_Шин(Текст,Тотал,числоЗагрузили,Thumbprint_1)
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Текст);
			Попытка
				NNN=ПрочитатьJSON(ЧтениеJSON);
				
				Для Каждого Стр Из NNN.products Цикл
					числоЗагрузили=числоЗагрузили+1;
					СпрД=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(Стр.gtin));
					Если СпрД<>Справочники.Продукция_ХамелеонЦРПТ.ПустаяСсылка() Тогда
						СпрД=СпрД.ПолучитьОбъект();
					Иначе
						СпрД=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
					КонецЕсли;
					СпрД.Тип=Перечисления.ТипПродукции_ХамелеонЦРПТ.Шины;
					СпрД.Gtin=число(Стр.gtin);
					СпрД.Наименование=Стр.name;
					СпрД.НаименованиеТовара=Стр.name;
					СпрД.Записать();
				Конеццикла;
				
				Элементы.Список.Обновить();
			Исключение
				Возврат
			КонецПопытки;
	
	
		КонецПроцедуры


&НаКлиенте
Процедура ЗарегестрироватьВЦРПТОстаток(Команда,УжеОтправили=Ложь,Товар_1=Неопределено) Экспорт
	// Вставить содержимое обработчика.
	СозданиеОстатковПоПродукциям("Обувь",Ложь,Товар_1);
	Элементы.Список.Обновить();;
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеОстатковПоПродукциям(Тип,УжеОтправили=Ложь,Товар_1) Экспорт
	
	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Если Не Форм.Открыта() Тогда
		//Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
		
		Форм.Открыть();
	КонецЕсли;
	//Форм.ОбновитьСтатусыДокументов("");
	
	Если Не ЗначениеЗаполнено(Товар_1) Тогда	
		ЭтаФорма.Активизировать();
	КонецЕсли;
	Польз=Форм.Пользователь;
	Thumbprint_1=ПолучитьИзПользователя(Польз);	
	Если Не ЗначениеЗаполнено(Товар_1) Тогда
	//	Тип=Thumbprint_1.СайтКСУЗ
	//Иначе
		Фор=ПолучитьФорму("Справочник.Продукция_ХамелеонЦРПТ.Форма.ФормаСписка");
		Фор.Загрузить("");

	КонецЕсли;
	
	
	
	
	СРегистра=Thumbprint_1.ТокенПоОтпечатку;
	Если Не ЗначениеЗаполнено(СРегистра) тогда
		Попытка
			СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);	
		исключение
			СРегистра=Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если не ЗначениеЗаполнено(Срегистра) Тогда
		Возврат;
	Конецесли;
	                      		
	
				Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
					Прокси=Новый ИнтернетПрокси;
					Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				Иначе
					HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресКАПИ,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
					
					
				КонецЕсли;
				
				
				
		
			
//		НСтр=Сред(Текст1,Найти(Текст1,"?sid=")+5);
//		НСтр=Сред(НСтр,1,Найти(НСтр,"""")-1);
			
			
		Куки="certSerial="+Thumbprint_1.Thumbprint_1+"; count=2; tokenPart1="+Сред(СРегистра,1,4000)+"; "+
		"tokenPart2="+Сред(СРегистра,4001) ;
		//Куки=Ответ.Заголовки["Set-Cookie"];
		
				
	//Для Каждого Стр_1 Из Элементы.Список.ВыделенныеСтроки Цикл
		
		СформироватьФайлДляОтправки_1 =ВернутьПараметрыПоТовару_Массив(Товар_1,Польз,Тип);
		
		Для Каждого СформироватьФайлДляОтправки_3 Из      СформироватьФайлДляОтправки_1 Цикл
			СформироватьФайлДляОтправки=СформироватьФайлДляОтправки_3.Сф;
		Если не значениеЗаполнено(СформироватьФайлДляОтправки) Тогда
			Продолжить;
		КонецЕсли;
		
		
		
		
		
		//Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
		
		Добав=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		СформироватьФайлДляОтправки,КодировкаТекста.UTF8,Ложь));
		
		
		
					Добав=СтрЗаменить(Добав,Символы.ПС,"\r\n");
				Добав=СтрЗаменить(Добав,Символы.ВК,"\r\n");
				Добав=СтрЗаменить(Добав,"\r\n","");

				
				Подписанный="";
		ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодписатьФайл(Thumbprint_1.Внешняя,СформироватьФайлДляОтправки ,Thumbprint_1,Подписанный,Истина,,,Thumbprint_1.PIN);
		
		//Подписанный=base64Строка(ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьДвоичныеДанныеИзСтроки_Сервер(
		//Подписанный,КодировкаТекста.UTF8,Ложь));
		
					Подписанный=СтрЗаменить(Подписанный,Символы.ПС,"\r\n");
				Подписанный=СтрЗаменить(Подписанный,Символы.ВК,"");
				 Подписанный=СтрЗаменить(Подписанный,"\r\n","");
				 
				 
				 
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("product_document");	
	Чтен.ЗаписатьЗначение(Добав);
	Чтен.ЗаписатьИмяСвойства("document_format");
	Чтен.ЗаписатьЗначение("MANUAL");
	Чтен.ЗаписатьИмяСвойства("signature");
	Чтен.ЗаписатьЗначение(Подписанный);
	Чтен.ЗаписатьИмяСвойства("type");
	Чтен.ЗаписатьЗначение("OST_DESCRIPTION");
			Чтен.ЗаписатьКонецОбъекта();	 
		Тело=    Чтен.Закрыть();
		
		
		
		Если Тип="Обувь" Тогда
			Что="shoes"
		ИначеЕсли Тип="Одежда"
			ИЛИ Тип="Белье" Тогда
			что="lp"
		ИначеЕсли Тип="Парфюм" Тогда
			
			что="perfumery"
		Иначе
			что=Thumbprint_1.СайтКСУЗ
			
		КонецЕсли;

		
		
			HTTPЗапрос=Новый HTTPЗапрос("api/v3/lk/documents/create?pg="+что);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
		HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
		//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
		///Константин           
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);
		Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
		Текст1=Ответ.ПолучитьТелоКакСтроку();
		
			
	Если Ответ.КодСостояния=202 ИЛИ Ответ.КодСостояния=200 
		ИЛИ Ответ.КодСостояния=201 
		Тогда
		
			ЗапишемДляНоменклтаурыОТвет(СформироватьФайлДляОтправки_3.Продукция,Текст1,Thumbprint_1.ИНН);			
	ИначеЕсли Ответ.КодСостояния=401 		ИЛИ Ответ.КодСостояния=502    Тогда
			Если УжеОтправили=Истина Тогда
				ОчиститьТокенСрегистра(Thumbprint_1.Thumbprint_1)
			Иначе
				ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1);
				СозданиеОстатковПоПродукциям(Тип,Истина,Товар_1)			
			КонецЕсли
		   КонецЕсли;
		
		     Конеццикла;
		
	//Конеццикла;
		
			
КонецПроцедуры

Процедура ЗапишемДляНоменклтаурыОТвет(Ном,Тек,ИНН)
	
	Пр=Ном.ПолучитьОбъект();
	Пр.guid=Тек;
	Пр.ИННПроизводителяИмпортёра=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту(
	"ИНН",ИНН);
	Пр.Записать();
	
КонецПроцедуры

Функция ВернутьПараметрыПоТовару(Товар,ТекПОль)
	
		
	Если Не ЗначениеЗаполнено(Товар.СтранаПроизводства) ИЛИ Товар.СтранаПроизводства.Код="643" Тогда
		СтранаР=Истина;
	Иначе
		СтранаР=Ложь;
	КонецЕсли;
	
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("trade_participant_inn");	
	Чтен.ЗаписатьЗначение(ТекПОль.Организация.ИНН);
	Чтен.ЗаписатьИмяСвойства("products_list");
	Чтен.ЗаписатьНачалоМассива();
	Чтен.ЗаписатьНачалоОбъекта();
	Если Товар.ТНВЭДДляОстатка="40" Тогда
		
		Чтен.ЗаписатьИмяСвойства("model");
			Чтен.ЗаписатьЗначение(Товар.ДополнительныйРеквизитШины.МодельШины);
		
		
	ИначеЕсли Товар.ТНВЭДДляОстатка<>"63" Тогда
		Чтен.ЗаписатьИмяСвойства("product_gender");
		Если Товар.Пол.Наименование="Женская" Тогда
			Чтен.ЗаписатьЗначение("FEMALE");
		ИначеЕсли Товар.Пол.Наименование="Мужская" Тогда
			Чтен.ЗаписатьЗначение("MALE");
		ИначеЕсли Товар.Пол.Наименование="Детская" Тогда
			Чтен.ЗаписатьЗначение("BABY");
		Иначе
			
			Чтен.ЗаписатьЗначение("UNISEX");
		КонецЕсли;
	КонецЕсли;
	Чтен.ЗаписатьИмяСвойства("tnved_code_2");
	
	Если ЗначениеЗаполнено(Товар.ТНВЭДДляОстатка) тогда
		Чтен.ЗаписатьЗначение(Товар.ТНВЭДДляОстатка);
	Иначе
		Чтен.ЗаписатьЗначение("64");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Товар.ТНВЭДДляОстатка) И Товар.ТНВЭДДляОстатка<>"64" 
		И ЗначениеЗаполнено(Товар.БрендТорговаяМарка)
		Тогда
		Чтен.ЗаписатьИмяСвойства("brand");
		
	//Если Товар.Пол.Наименование="Женская" Тогда
		Чтен.ЗаписатьЗначение(Товар.БрендТорговаяМарка);
		
		
	КонецЕсли;
	
	Если Товар.ТНВЭДДляОстатка="63" Тогда
		Чтен.ЗаписатьИмяСвойства("consumer_age");
		
	//Если Товар.Пол.Наименование="Женская" Тогда
		Чтен.ЗаписатьЗначение(xmlString(Товар.ВозрастнаяКатегория));
	//ИначеЕсли Товар.Пол.Наименование="Мужская" Тогда
	//	Чтен.ЗаписатьЗначение("MALE");
	//ИначеЕсли Товар.Пол.Наименование="Детская" Тогда
	//	Чтен.ЗаписатьЗначение("BABY");
	//Иначе
		
	//	Чтен.ЗаписатьЗначение("UNISEX");
	//КонецЕсли;
		
		
	КонецЕсли;
	
	Если Товар.ТНВЭДДляОстатка<>"40" Тогда
		Чтен.ЗаписатьИмяСвойства("release_method");
		Если СтранаР<>Истина Тогда
			Чтен.ЗаписатьЗначение("IMPORTED_INTO_RF");
		Иначе
			Чтен.ЗаписатьЗначение("PRODUCED_IN_RF");
		КонецЕсли;
		
	КонецЕсли;
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	Возврат Чтен.Закрыть();

КонецФункции

Функция ВернутьПараметрыПоТоваруТабак(Товар,ТекПОль)
	
		
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("trade_participant_inn");	
	Чтен.ЗаписатьЗначение(ТекПОль.Организация.ИНН);
	Чтен.ЗаписатьИмяСвойства("products_list");
	Чтен.ЗаписатьНачалоМассива();
	Чтен.ЗаписатьНачалоОбъекта();
	
		Чтен.ЗаписатьИмяСвойства("tnved_code_4");
		Чтен.ЗаписатьЗначение(Товар.ТНВЭДДляОстатка);
	
		Чтен.ЗаписатьИмяСвойства("name");
		Чтен.ЗаписатьЗначение(Товар.Наименование);
	
		Чтен.ЗаписатьИмяСвойства("brand");
		Чтен.ЗаписатьЗначение(Товар.БрендТорговаяМарка);
	
		Чтен.ЗаписатьИмяСвойства("product_group");
		Чтен.ЗаписатьЗначение("TOBACCO");
	
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	Возврат Чтен.Закрыть();

КонецФункции

Функция ВернутьПараметрыПоТоваруАТП(Товар,ТекПОль)
	
		
	Чтен=Новый  ЗаписьJSON;
	Чтен.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	Чтен.ЗаписатьНачалоОбъекта();
	Чтен.ЗаписатьИмяСвойства("trade_participant_inn");	
	Чтен.ЗаписатьЗначение(ТекПОль.Организация.ИНН);
	Чтен.ЗаписатьИмяСвойства("products_list");
	Чтен.ЗаписатьНачалоМассива();
	Чтен.ЗаписатьНачалоОбъекта();
	
		Чтен.ЗаписатьИмяСвойства("tnved_code_4");
		Чтен.ЗаписатьЗначение(Товар.ТНВЭДДляОстатка);
	
		Чтен.ЗаписатьИмяСвойства("name");
		Чтен.ЗаписатьЗначение(Товар.Наименование);
	
		Чтен.ЗаписатьИмяСвойства("brand");
		Чтен.ЗаписатьЗначение(Товар.БрендТорговаяМарка);
	
		Чтен.ЗаписатьИмяСвойства("product_group");
		Чтен.ЗаписатьЗначение("OTP");
	
	Чтен.ЗаписатьКонецОбъекта();
	Чтен.ЗаписатьКонецМассива();
	Чтен.ЗаписатьКонецОбъекта();
	Возврат Чтен.Закрыть();

КонецФункции


Функция СоздатьНайтиПроизводительПоОрганизации(Орган)
	Произ=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.НайтиПоРеквизиту("ИНН",Орган.ИНН);
	Если ЗначениеЗаполнено(Произ) тогда
		Возврат произ
	КонецЕсли;
	
	Произв=Справочники.ПроизводителиИмпортерыКонтрагенты_ХамелеонЦРПТ.СоздатьЭлемент();
	Произв.Наименование=Орган.Наименование;
	Произв.НаименованиеПолное=Орган.Наименование;
	Произв.ИНН=Орган.ИНН;
	ПРоизв.КПП=Орган.КПП;
	Произв.Записать();
	ВОзврат Произв.Ссылка;
	
	
КонецФункции


Функция ФормируемПоПараметрам(Производитель,Пол,Страна,ТНВЭД,Импорт=Ложь)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	Если ТНВЭД="63" Тогда
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Продукция_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
		|ГДЕ
		|	Продукция_ХамелеонЦРПТ.ВозрастнаяКатегория = &Пол
		|	И Продукция_ХамелеонЦРПТ.ИННПроизводителяИмпортёра = &ИННПроизводителяИмпортёра
		|	И Продукция_ХамелеонЦРПТ.СтранаПроизводства.Код "+?(Импорт,"<>","=")+" &Код
		|	И Продукция_ХамелеонЦРПТ.Остатки
		|	И Продукция_ХамелеонЦРПТ.ТНВЭДДляОстатка = &ТНВЭДДляОстатка";
	
	Запрос.УстановитьПараметр("ИННПроизводителяИмпортёра", Производитель);
	Запрос.УстановитьПараметр("Пол", Пол);
	Запрос.УстановитьПараметр("Код", Страна);
	Запрос.УстановитьПараметр("ТНВЭДДляОстатка", ТНВЭД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	
	НаимТовараИщем="Белье. Без товарного знака. ";
	
	//Белье. Без товарного знака. Взрослое. Произведен в РФ
	//Белье. Без товарного знака. Без Возраста. Произведен в РФ
	Если Пол=Перечисления.ВозратнаяКатегория_ХамелеонЦРПТ.ADULT Тогда
		НаимТовараИщем=НаимТовараИщем+"Взрослое. ";
	ИначеЕсли Пол=Перечисления.ВозратнаяКатегория_ХамелеонЦРПТ.ADULT Тогда
		НаимТовараИщем=НаимТовараИщем+"Детское. ";
	Иначе
		НаимТовараИщем=НаимТовараИщем+"Без Возраста. ";
	КонецЕсли;
	
	//Белье. Без товарного знака. Без Возраста. Ввезен в РФ
	Если Импорт=Истина Тогда
		НаимТовараИщем=НаимТовараИщем+"Ввезен в РФ";
	Иначе
		НаимТовараИщем=НаимТовараИщем+"Произведен в РФ";
		
	КонецЕсли;
	
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	Продукция_ХамелеонЦРПТ.Ссылка
					|ИЗ
					|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
					|ГДЕ
					|	Продукция_ХамелеонЦРПТ.Наименование = &Наименование
					|	И Продукция_ХамелеонЦРПТ.ИННПроизводителяИмпортёра = &ИННПроизводителяИмпортёра";
				
				Запрос.УстановитьПараметр("ИННПроизводителяИмпортёра", Производитель);
				Запрос.УстановитьПараметр("Наименование", НаимТовараИщем);
				
				РезультатЗапроса_2323 = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи_2232= РезультатЗапроса_2323.Выбрать();
				
				СпрУжеЕсть=Неопределено;
				Пока ВыборкаДетальныеЗаписи_2232.Следующий() Цикл
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					СпрУжеЕсть=ВыборкаДетальныеЗаписи_2232.Ссылка;
				КонецЦикла;
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	
	
	//Белье. Без товарного знака. Детское. Ввезен в РФ;
	Если НЕ ВыборкаДетальныеЗаписи.Следующий() И Не ЗначениеЗаполнено(СпрУжеЕсть) Тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
	СпрТовар=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
	СпрТовар.ВозрастнаяКатегория=Пол;
	СпрТовар.Остатки=Истина;
	СпрТовар.ТНВЭДДляОстатка=ТНВЭД;
	СпрТовар.Наименование="Остатки для отправки в ЦРПТ";
	СпрТовар.НаименованиеТовара="Остатки для отправки в ЦРПТ";
	
	Если Импорт Тогда
		СпрТовар.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("896");
	Иначе
		СпрТовар.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду(Страна);
	КонецЕсли;
	СпрТовар.ИННПроизводителяИмпортёра=Производитель;
	СпрТовар.Записать();
	Товар=СпрТовар.Ссылка;
	Возврат Товар
	//МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
КонецЕсли;
Возврат Неопределено
		
		
	КонецЕслИ;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Продукция_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
		|ГДЕ
		|	Продукция_ХамелеонЦРПТ.Пол = &Пол
		|	И Продукция_ХамелеонЦРПТ.ИННПроизводителяИмпортёра = &ИННПроизводителяИмпортёра
		|	И Продукция_ХамелеонЦРПТ.СтранаПроизводства.Код "+?(Импорт,"<>","=")+" &Код
		|	И Продукция_ХамелеонЦРПТ.Остатки
		|	И Продукция_ХамелеонЦРПТ.ТНВЭДДляОстатка = &ТНВЭДДляОстатка";
	
	Запрос.УстановитьПараметр("ИННПроизводителяИмпортёра", Производитель);
	Запрос.УстановитьПараметр("Пол", Пол);
	Запрос.УстановитьПараметр("Код", Страна);
	Запрос.УстановитьПараметр("ТНВЭДДляОстатка", ТНВЭД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	
	//Одежда. Без товарного знака. Детская. Ввезен в РФ
	Если ТНВЭД="64" Тогда
		НаимТовараИщем="Остатки. Обувь. ";
	Иначе
		НаимТовараИщем="Одежда. Без товарного знака. ";
	КонецЕсли;
	
	Если Пол.Наименование="Детская" Тогда
		НаимТовараИщем=НаимТовараИщем+"Детская. ";
	ИначеЕсли Пол.Наименование="Женская" Тогда
		НаимТовараИщем=НаимТовараИщем+"Женская. ";
	ИначеЕсли Пол.Наименование="Мужская" Тогда
		НаимТовараИщем=НаимТовараИщем+"Мужская. ";
	Иначе
		НаимТовараИщем=НаимТовараИщем+"Унисекс. ";
	КонецЕсли;
	
	//Белье. Без товарного знака. Без Возраста. Ввезен в РФ
	Если Импорт=Истина Тогда
		НаимТовараИщем=НаимТовараИщем+"Ввезен в РФ";
	Иначе
		НаимТовараИщем=НаимТовараИщем+"Произведен в РФ";
		
	КонецЕсли;
	
	            
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	Продукция_ХамелеонЦРПТ.Ссылка
					|ИЗ
					|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
					|ГДЕ
					|	Продукция_ХамелеонЦРПТ.Наименование = &Наименование
					|	И Продукция_ХамелеонЦРПТ.ИННПроизводителяИмпортёра = &ИННПроизводителяИмпортёра";
				
				Запрос.УстановитьПараметр("ИННПроизводителяИмпортёра", Производитель);
				Запрос.УстановитьПараметр("Наименование", НаимТовараИщем);
				
				РезультатЗапроса_2323 = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи_2232= РезультатЗапроса_2323.Выбрать();
				
				СпрУжеЕсть=Неопределено;
				Пока ВыборкаДетальныеЗаписи_2232.Следующий() Цикл
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					СпрУжеЕсть=ВыборкаДетальныеЗаписи_2232.Ссылка;
				КонецЦикла;
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	
	
	//Белье. Без товарного знака. Детское. Ввезен в РФ;
	Если НЕ ВыборкаДетальныеЗаписи.Следующий() И Не ЗначениеЗаполнено(СпрУжеЕсть) Тогда
		
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
	СпрТовар=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
	СпрТовар.Пол=Пол;
	СпрТовар.Остатки=Истина;
	СпрТовар.ТНВЭДДляОстатка=ТНВЭД;
	СпрТовар.Наименование="Остатки для отправки в ЦРПТ";
	СпрТовар.НаименованиеТовара="Остатки для отправки в ЦРПТ";
	Если Импорт Тогда
		СпрТовар.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("896");
	Иначе
		СпрТовар.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду(Страна);
	КонецЕсли;
	СпрТовар.ИННПроизводителяИмпортёра=Производитель;
	СпрТовар.Записать();
	Товар=СпрТовар.Ссылка;
	Возврат Товар
	//МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
КонецЕсли;
Возврат Неопределено
	
	
Конецфункции
Функция ФормируемДляОдежди(ТекПоль,Товар_1)
	
	
	МассивТоваров=Новый Массив;
	
	Если ЗначениеЗаполнено(Товар_1) Тогда
		
		Товар=Товар_1;
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
		Возврат МассивТоваров;
	КонецЕсли;
	
	Производитель=СоздатьНайтиПроизводительПоОрганизации(ТекПоль.Организация);
	
	
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Детская"),"643","42");
	
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Женская"),"643","42");
	
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
		
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Мужская"),"643","42");
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Унисекс"),"643","42");
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	
	
	
	
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Детская"),"643","42",Истина);
	
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Женская"),"643","42",Истина);
	
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
		
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Мужская"),"643","42",Истина);
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	
	
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Унисекс"),"643","42",Истина);
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	
	
	
	
		Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Детская"),"643","61");
	
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Женская"),"643","61");
	
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
		
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Мужская"),"643","61");
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Унисекс"),"643","61");
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	
	
	
	
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Детская"),"643","61",Истина);
	
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Женская"),"643","61",Истина);
	
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
		
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Мужская"),"643","61",Истина);
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	

	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Унисекс"),"643","61",Истина);
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	
	
	
	
	
		Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Детская"),"643","62");
	
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Женская"),"643","62");
	
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
		
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Мужская"),"643","62");
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Унисекс"),"643","62");
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	
	
	
	
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Детская"),"643","62",Истина);
	
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Женская"),"643","62",Истина);
	
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
		
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Мужская"),"643","62",Истина);
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Унисекс"),"643","62",Истина);
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	

	
	
	Возврат      МассивТоваров

	
КонецФункции

Функция ФормируемДляБелья(ТекПоль,Товар_1)
	
	
	МассивТоваров=Новый Массив;
	
	Если ЗначениеЗаполнено(Товар_1) Тогда
		
		Товар=Товар_1;
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
		Возврат МассивТоваров;
	КонецЕсли;
	
	Производитель=СоздатьНайтиПроизводительПоОрганизации(ТекПоль.Организация);
	
	
	
	Товар=ФормируемПоПараметрам(Производитель,Перечисления.ВозратнаяКатегория_ХамелеонЦРПТ.ADULT,"643","63");
	
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	Товар=ФормируемПоПараметрам(Производитель,Перечисления.ВозратнаяКатегория_ХамелеонЦРПТ.BABY,"643","63");
	
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
		
	Товар=ФормируемПоПараметрам(Производитель,Перечисления.ВозратнаяКатегория_ХамелеонЦРПТ.NO_AGE,"643","63");
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	
	
	Товар=ФормируемПоПараметрам(Производитель,Перечисления.ВозратнаяКатегория_ХамелеонЦРПТ.ADULT,"643","63",Истина);
	
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	Товар=ФормируемПоПараметрам(Производитель,Перечисления.ВозратнаяКатегория_ХамелеонЦРПТ.BABY,"643","63",Истина);
	
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
		
	Товар=ФормируемПоПараметрам(Производитель,Перечисления.ВозратнаяКатегория_ХамелеонЦРПТ.NO_AGE,"643","63",Истина);
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	
	
	Возврат      МассивТоваров

	
КонецФункции

Функция ФормируемДляШины(ТекПоль,Товар_1)
	
	
	МассивТоваров=Новый Массив;
	
	Если ЗначениеЗаполнено(Товар_1) Тогда
		
		Товар=Товар_1;
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
		Возврат МассивТоваров;
	КонецЕсли;
	
	
	
	Возврат      МассивТоваров

	
КонецФункции


Функция ФормируемДляТабака(ТекПоль,Товар_1)
	
	
	МассивТоваров=Новый Массив;
	
	Если ЗначениеЗаполнено(Товар_1) Тогда
		
		Товар=Товар_1;
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТоваруТабак(Товар,ТекПОль)));
		Возврат МассивТоваров;
	КонецЕсли;
	
	
	
	Возврат      МассивТоваров

	
КонецФункции

Функция ФормируемДляАТП(ТекПоль,Товар_1)
	
	
	МассивТоваров=Новый Массив;
	
	Если ЗначениеЗаполнено(Товар_1) Тогда
		
		Товар=Товар_1;
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТоваруАТП(Товар,ТекПОль)));
		Возврат МассивТоваров;
	КонецЕсли;
	
	
	
	Возврат      МассивТоваров

	
КонецФункции

Функция ВернутьПараметрыПоТовару_Массив(Товар_1,ТекПОль,Тип="Обувь") Экспорт
	
	Если Тип="Табак" Тогда
		МассивТоваров=ФормируемДляТабака(ТекПоль,Товар_1); 
		Возврат МассивТоваров;
	ИначеЕсли Тип="АТП" Тогда
		МассивТоваров=ФормируемДляАТП(ТекПоль,Товар_1); 
		Возврат МассивТоваров;
	ИначеЕсли тип="Белье" Тогда
		МассивТоваров=ФормируемДляБелья(ТекПоль,Товар_1); 
		Возврат МассивТоваров;
	ИначеЕсли Тип="Одежда" Тогда
		МассивТоваров=ФормируемДляОдежди(ТекПоль,Товар_1); 
		Возврат МассивТоваров;
	ИначеЕсли Тип="Шины" Тогда
		МассивТоваров=ФормируемДляШины(ТекПоль,Товар_1); 
		Возврат МассивТоваров;
		
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Товар_1) Тогда
		
		
		Товар=Товар_1;
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
		
		
	Иначе
		МассивТоваров=Новый Массив;
		
		Производитель=СоздатьНайтиПроизводительПоОрганизации(ТекПоль.Организация);
		
		
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Детская"),"643","64");
	
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Женская"),"643","64");
	
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
		
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Мужская"),"643","64");
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Унисекс"),"643","64");
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	
	
	
	
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Детская"),"643","64",Истина);
	
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Женская"),"643","64",Истина);
	
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
		
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Мужская"),"643","64",Истина);
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	
	
	Товар=ФормируемПоПараметрам(Производитель,Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Унисекс"),"643","64",Истина);
	Если ЗначениеЗаполнено(Товар) тогда
		МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	КонецЕслИ;
	
	
	//	
	//	
	//		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	//	// Данный фрагмент построен конструктором.
	//	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	Продукция_ХамелеонЦРПТ.Ссылка
	//		|ИЗ
	//		|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
	//		|ГДЕ
	//		|	Продукция_ХамелеонЦРПТ.Пол = &Пол
	//		|	И Продукция_ХамелеонЦРПТ.ИННПроизводителяИмпортёра = &ИННПроизводителяИмпортёра
	//		|	И Продукция_ХамелеонЦРПТ.СтранаПроизводства.Код = &Код
	//		|	И Продукция_ХамелеонЦРПТ.Остатки";
	//	
	//	Запрос.УстановитьПараметр("ИННПроизводителяИмпортёра", Производитель);
	//	Запрос.УстановитьПараметр("Пол", Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Детская"));
	//	Запрос.УстановитьПараметр("Код", "643");
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//	
	//	

	////Одежда. Без товарного знака. Детская. Ввезен в РФ
	//НаимТовараИщем="Остатки. Обувь. ";
	//
	//	НаимТовараИщем=НаимТовараИщем+"Детская. ";
	//	НаимТовараИщем=НаимТовараИщем+"Произведен в РФ";
	//		
	//	Если НЕ ВыборкаДетальныеЗаписи.Следующий() 
	//		И Не ЗначениеЗаполнено(Справочники.Продукция_ХамелеонЦРПТ.НайтиПоНаименованию(НаимТовараИщем))
	//		Тогда
	//		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//	
	//	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	//	
	//	
	//	СпрТовар=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
	//	СпрТовар.Пол=Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Детская");
	//	СпрТовар.Остатки=Истина;
	//	СпрТовар.Наименование="Отстаки для отправки в ЦРПТ";
	//	СпрТовар.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");
	//	СпрТовар.ИННПроизводителяИмпортёра=Производитель;
	//	СпрТовар.Записать();
	//	Товар=СпрТовар.Ссылка;
	//	МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	//	КонецЕсли;
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	Продукция_ХамелеонЦРПТ.Ссылка
	//		|ИЗ
	//		|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
	//		|ГДЕ
	//		|	Продукция_ХамелеонЦРПТ.Пол = &Пол
	//		|	И Продукция_ХамелеонЦРПТ.ИННПроизводителяИмпортёра = &ИННПроизводителяИмпортёра
	//		|	И Продукция_ХамелеонЦРПТ.СтранаПроизводства.Код = &Код
	//		|	И Продукция_ХамелеонЦРПТ.Остатки";
	//	
	//	Запрос.УстановитьПараметр("ИННПроизводителяИмпортёра", Производитель);
	//	Запрос.УстановитьПараметр("Пол", Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Женская"));
	//	Запрос.УстановитьПараметр("Код", "643");
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//	
	//НаимТовараИщем="Остатки. Обувь. ";
	//
	//	НаимТовараИщем=НаимТовараИщем+"Женская. ";
	//	НаимТовараИщем=НаимТовараИщем+"Произведен в РФ";
	//		
	//	Если НЕ ВыборкаДетальныеЗаписи.Следующий() Тогда
	//		//И Не ЗначениеЗаполнено(Справочники.Продукция_ХамелеонЦРПТ.НайтиПоНаименованию(НаимТовараИщем))
	//		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//	
	//	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	//	
	//	СпрТовар=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
	//	СпрТовар.Пол=Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Женская");
	//	СпрТовар.Остатки=Истина;
	//	СпрТовар.Наименование="Отстаки для отправки в ЦРПТ";
	//	СпрТовар.ИННПроизводителяИмпортёра=Производитель;
	//	СпрТовар.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");
	//	СпрТовар.Записать();
	//	Товар=СпрТовар.Ссылка;
	//	МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	//	
	//КонецЕсли;
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	Продукция_ХамелеонЦРПТ.Ссылка
	//		|ИЗ
	//		|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
	//		|ГДЕ
	//		|	Продукция_ХамелеонЦРПТ.Пол = &Пол
	//		|	И Продукция_ХамелеонЦРПТ.ИННПроизводителяИмпортёра = &ИННПроизводителяИмпортёра
	//		|	И Продукция_ХамелеонЦРПТ.СтранаПроизводства.Код = &Код
	//		|	И Продукция_ХамелеонЦРПТ.Остатки";
	//	
	//	Запрос.УстановитьПараметр("ИННПроизводителяИмпортёра", Производитель);
	//	Запрос.УстановитьПараметр("Пол", Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Мужская"));
	//	Запрос.УстановитьПараметр("Код", "643");
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//	
	//	Если НЕ ВыборкаДетальныеЗаписи.Следующий() Тогда
	//		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//	
	//	СпрТовар=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
	//	СпрТовар.Пол=Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Мужская");
	//	СпрТовар.Остатки=Истина;
	//	СпрТовар.Наименование="Отстаки для отправки в ЦРПТ";
	//	
	//	СпрТовар.ИННПроизводителяИмпортёра=Производитель;
	//	СпрТовар.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");
	//	СпрТовар.Записать();
	//	Товар=СпрТовар.Ссылка;
	//	МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	//	
	//КонецЕсли;

	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	Продукция_ХамелеонЦРПТ.Ссылка
	//		|ИЗ
	//		|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
	//		|ГДЕ
	//		|	Продукция_ХамелеонЦРПТ.Пол = &Пол
	//		|	И Продукция_ХамелеонЦРПТ.ИННПроизводителяИмпортёра = &ИННПроизводителяИмпортёра
	//		|	И Продукция_ХамелеонЦРПТ.СтранаПроизводства.Код = &Код
	//		|	И Продукция_ХамелеонЦРПТ.Остатки";
	//	
	//	Запрос.УстановитьПараметр("ИННПроизводителяИмпортёра", Производитель);
	//	Запрос.УстановитьПараметр("Пол", Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Унисекс"));
	//	Запрос.УстановитьПараметр("Код", "643");
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//	
	//	Если НЕ ВыборкаДетальныеЗаписи.Следующий() Тогда
	//		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//	


	//СпрТовар=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
	//	СпрТовар.Пол=Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Унисекс");
	//	СпрТовар.ИННПроизводителяИмпортёра=Производитель;
	//	СпрТовар.Остатки=Истина;
	//		СпрТовар.Наименование="Отстаки для отправки в ЦРПТ";

	//	СпрТовар.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("643");
	//	СпрТовар.Записать();
	//	Товар=СпрТовар.Ссылка;
	//	МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	//КонецЕсли;
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	Продукция_ХамелеонЦРПТ.Ссылка
	//		|ИЗ
	//		|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
	//		|ГДЕ
	//		|	Продукция_ХамелеонЦРПТ.Пол = &Пол
	//		|	И Продукция_ХамелеонЦРПТ.ИННПроизводителяИмпортёра = &ИННПроизводителяИмпортёра
	//		|	И Продукция_ХамелеонЦРПТ.СтранаПроизводства.Код <> &Код
	//		|	И Продукция_ХамелеонЦРПТ.Остатки";
	//	
	//	Запрос.УстановитьПараметр("ИННПроизводителяИмпортёра", Производитель);
	//	Запрос.УстановитьПараметр("Пол", Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Детская"));
	//	Запрос.УстановитьПараметр("Код", "643");
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//	
	//	Если НЕ ВыборкаДетальныеЗаписи.Следующий() Тогда
	//	
	//	
	//	СпрТовар=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
	//	СпрТовар.Пол=Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Детская");
	//	СпрТовар.Остатки=Истина;
	//		СпрТовар.Наименование="Отстаки для отправки в ЦРПТ";

	//	СпрТовар.ИННПроизводителяИмпортёра=Производитель;
	//	СпрТовар.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("896");
	//	СпрТовар.Записать();
	//	Товар=СпрТовар.Ссылка;
	//	МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	//	
	//	
	//КонецЕсли;
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	Продукция_ХамелеонЦРПТ.Ссылка
	//		|ИЗ
	//		|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
	//		|ГДЕ
	//		|	Продукция_ХамелеонЦРПТ.Пол = &Пол
	//		|	И Продукция_ХамелеонЦРПТ.ИННПроизводителяИмпортёра = &ИННПроизводителяИмпортёра
	//		|	И Продукция_ХамелеонЦРПТ.СтранаПроизводства.Код <> &Код
	//		|	И Продукция_ХамелеонЦРПТ.Остатки";
	//	
	//	Запрос.УстановитьПараметр("ИННПроизводителяИмпортёра", Производитель);
	//	Запрос.УстановитьПараметр("Пол", Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Женская"));
	//	Запрос.УстановитьПараметр("Код", "643");
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//	
	//	Если НЕ ВыборкаДетальныеЗаписи.Следующий() Тогда
	//	
	//	


	//	СпрТовар=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
	//	СпрТовар.Пол=Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Женская");
	//	СпрТовар.ИННПроизводителяИмпортёра=Производитель;
	//	СпрТовар.Остатки=Истина;
	//		СпрТовар.Наименование="Отстаки для отправки в ЦРПТ";

	//	СпрТовар.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("896");
	//	СпрТовар.Записать();
	//	Товар=СпрТовар.Ссылка;
	//	МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	//	
	//КонецЕсли;	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	Продукция_ХамелеонЦРПТ.Ссылка
	//		|ИЗ
	//		|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
	//		|ГДЕ
	//		|	Продукция_ХамелеонЦРПТ.Пол = &Пол
	//		|	И Продукция_ХамелеонЦРПТ.ИННПроизводителяИмпортёра = &ИННПроизводителяИмпортёра
	//		|	И Продукция_ХамелеонЦРПТ.СтранаПроизводства.Код <> &Код
	//		|	И Продукция_ХамелеонЦРПТ.Остатки";
	//	
	//	Запрос.УстановитьПараметр("ИННПроизводителяИмпортёра", Производитель);
	//	Запрос.УстановитьПараметр("Пол", Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Мужская"));
	//	Запрос.УстановитьПараметр("Код", "643");
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//	
	//	Если НЕ ВыборкаДетальныеЗаписи.Следующий() Тогда
	//	
	//	


	//	СпрТовар=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
	//	СпрТовар.Пол=Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Мужская");
	//	СпрТовар.Остатки=Истина;
	//		СпрТовар.Наименование="Отстаки для отправки в ЦРПТ";

	//	СпрТовар.ИННПроизводителяИмпортёра=Производитель;
	//	СпрТовар.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("896");
	//	СпрТовар.Записать();
	//	Товар=СпрТовар.Ссылка;
	//	МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	//КонецЕсли;
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	Продукция_ХамелеонЦРПТ.Ссылка
	//		|ИЗ
	//		|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
	//		|ГДЕ
	//		|	Продукция_ХамелеонЦРПТ.Пол = &Пол
	//		|	И Продукция_ХамелеонЦРПТ.ИННПроизводителяИмпортёра = &ИННПроизводителяИмпортёра
	//		|	И Продукция_ХамелеонЦРПТ.СтранаПроизводства.Код <> &Код
	//		|	И Продукция_ХамелеонЦРПТ.Остатки";
	//	
	//	Запрос.УстановитьПараметр("ИННПроизводителяИмпортёра", Производитель);
	//	Запрос.УстановитьПараметр("Пол", Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Унисекс"));
	//	Запрос.УстановитьПараметр("Код", "643");
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//	
	//	Если НЕ ВыборкаДетальныеЗаписи.Следующий() Тогда
	//	
	//	

	//	СпрТовар=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
	//	СпрТовар.Пол=Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Унисекс");
	//	СпрТовар.Остатки=Истина;
	//		СпрТовар.Наименование="Отстаки для отправки в ЦРПТ";

	//	СпрТовар.ИННПроизводителяИмпортёра=Производитель;
	//	СпрТовар.СтранаПроизводства=Справочники.СтранаПроизводства_ХамелеонЦРПТ.НайтиПоКоду("896");
	//	СпрТовар.Записать();
	//	Товар=СпрТовар.Ссылка;
	//	МассивТоваров.Добавить(Новый Структура("Продукция,Сф",Товар,ВернутьПараметрыПоТовару(Товар,ТекПОль)));
	//КонецЕсли;
	КонецЕсли;
	Возврат      МассивТоваров
	//Если ЗначениеЗаполнено(Товар.guid) ИЛИ ЗначениеЗаполнено(Товар.ДатаПубликации) 
	
	//	ИЛИ Товар.Остатки=Ложь
	//	Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	//Возврат Новый Структура("Пол,ТипВвоза",Товар.Пол,СтранаР);
	
Конецфункции

&НаКлиенте
Процедура Обновить(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Обр=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Обр.ОбновитьСтатусыДокументов(Команда);
	ЭтаФорма.Активизировать();
	
	
	ВернутьМ=ВернутьМ_Остатки();
	Для Каждого Стр_1 Из ВернутьМ Цикл
		Форм=ПолучитьФорму("Справочник.Продукция_ХамелеонЦРПТ.Форма.ФормаЭлемента", Новый Структура("Ключ",Стр_1));
		Форм.ОбновитьПродукцияюПоGTIN(Команда)
	Конеццикла;
	
	
	
	Элементы.Список.Обновить();;
	
	

КонецПроцедуры

Функция ВернутьМ_Остатки()
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Продукция_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
		|ГДЕ
		|	Продукция_ХамелеонЦРПТ.Наименование ПОДОБНО ""%для отправки в ЦРПТ%""
		|	И Продукция_ХамелеонЦРПТ.GTIN <> 0
		|
		|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивТТ=Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Если МассивТТ.Найти(ВыборкаДетальныеЗаписи.Ссылка)=Неопределено Тогда
			МассивТТ.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Продукция_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
		|ГДЕ
		|	Продукция_ХамелеонЦРПТ.Пол = ЗНАЧЕНИЕ(Справочник.ПолОбуви_ХамелеонЦРПТ.ПустаяСсылка)
		|	И Продукция_ХамелеонЦРПТ.Наименование ПОДОБНО ""%Остатки%""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		СпрПр=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Если Найти(СпрПр.Наименование,"Женская") Тогда
			СпрПр.Пол=Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Женская");
		ИначеЕсли Найти(СпрПр.Наименование,"Мужская") Тогда
			СпрПр.Пол=Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Мужская");
		ИначеЕсли Найти(СпрПр.Наименование,"Унисекс") Тогда
			СпрПр.Пол=Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Унисекс");
		ИначеЕсли Найти(СпрПр.Наименование,"Детская") Тогда
			СпрПр.Пол=Справочники.ПолОбуви_ХамелеонЦРПТ.НайтиПоНаименованию("Детская");
			
		КонецЕсли;
		СпрПр.Записать();
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
Возврат         МассивТТ
	
КонецФункции


&НаКлиенте
Процедура ОткрытьВнешниеОбработки(Команда)
	// Вставить содержимое обработчика.
		// Вставить содержимое обработчика.
		ОткрытьФорму("Справочник.ВнешниеОбработки_ХамелеонЦРПТ.Форма.ФормаСписка",
		Новый структура("Тип",
			"СписокПродукций_ЦРПТ"));

КонецПроцедуры

Функция ВернутьИмяФайла(Команда)
//	Если РегистрыСведений.НастройкиПрограммыЦРПТ.Получить().ЗагружатьВнешниеОбработкиИзХранилища Тогда
		Возврат Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоКоду(Сред(Команда,8)).Хранилище.Получить();
//	Иначе
//		СпрВн=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоКоду(Сред(Команда,8));
//	Конецесли;
	
//	Возврат СпрВн.ИмяВнешнейОБработки
	//НаимСправочника=Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя();
	//Спр=Справочники.ВнешниеОбработки_ХамелеонЦРПТ.НайтиПоНаименованию(НаимСправочника,Истина);
	//Если Спр<>Справочники.ВнешниеОбработки_ХамелеонЦРПТ.ПустаяСсылка() Тогда
	//	Возврат Спр.ИмяВнешнейОБработки;
	//Конецесли;
	
КонецФункции

Функция ПолучитьИмяВнешней(ИмяФайла)
    АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ИмяФайла);
    ИмяОбр = ВнешниеОбработки.Подключить(АдресВоВременномХранилище,,Ложь);
    Возврат ИмяОбр;
КонецФункции



Процедура   ЗаполнитьСправочникВнешний(ИмяСпрД,Доп,ГруппаКнопокВнешняя,ИмяДейстия)
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнешниеОбработки_ХамелеонЦРПТ.ИмяВнешнейОБработки,
		|	ВнешниеОбработки_ХамелеонЦРПТ.НаименованиеКнопки,
		|	ВнешниеОбработки_ХамелеонЦРПТ.Код
		|ИЗ
		|	Справочник.ВнешниеОбработки_ХамелеонЦРПТ КАК ВнешниеОбработки_ХамелеонЦРПТ
		|ГДЕ
		|	ВнешниеОбработки_ХамелеонЦРПТ.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", ИмяСпрД); //"Документ.ВетеринарныеСправки_ХамелеонЦРПТ");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ИмяКоманды="Команда"+ВыборкаДетальныеЗаписи.Код;
		Попытка
		КомандаФормы = Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = ИмяДейстия;
		КомандаФормы.Заголовок = ВыборкаДетальныеЗаписи.ИмяВнешнейОБработки;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.Текст;
		
		//ОписаниеКомандыПечати.ИмяКомандыНаФорме = ИмяКоманды;
		
		НовыйЭлемент = Элементы.Добавить("ГруппаКнопокВнешняя"+Доп+ ИмяКоманды, Тип("КнопкаФормы"), ГруппаКнопокВнешняя);
		НовыйЭлемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		НовыйЭлемент.Заголовок=ВыборкаДетальныеЗаписи.НаименованиеКнопки;
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	Исключение
		КонецПопытки;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуВнешняя_ЗаказМарокОсновная(Команда)
	
//	// Вставить содержимое обработчика.	// Вставить содержимое обработчика.
	Если Элементы.Список.ТекущиеДанные<>Неопределено Тогда
		Ссылка=Элементы.Список.ТекущиеДанные.Ссылка;
	Иначе
		Ссылка=ПредопределенноеЗначение("Справочник.Продукция_ХамелеонЦРПТ.ПустаяСсылка");
	КонецЕсли;	
		Попытка
			ВернДв=ВернутьИмяФайла(Команда.Имя);
			Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
				ДвоичныеДанные=ВернДв;
			Иначе
				ДвоичныеДанные=Новый ДвоичныеДанные(ВернДв);
			Конецесли;
			ОбработкаИмя=ПолучитьИмяВнешней(Двоичныеданные);
			ОткрытьФорму("ВнешняяОбработка."+ОбработкаИмя+".Форма",Новый Структура("Ссылка",Ссылка),ЭтаФорма);
		Исключение
			Попытка
#Если ТолстыйКлиентОбычноеПриложение  Тогда
		ВернДв=ВернутьИмяФайла(Команда.Имя);
		Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
			//ДвоичныеДанные=ВернДв;
			ДвоичныеДанные=ПолучитьИмяВременногоФайла();
			ВернДв.Записать(ДвоичныеДанные);
			
		Иначе
			ДвоичныеДанные=ВернДв;
		Конецесли;
				ВернутьВн(ДвоичныеДанные);
				Если Тип("ДвоичныеДанные")=ТипЗнч(ВернДв) Тогда
					УдалитьФайлы(ДвоичныеДанные);
				КонецЕсли;
#Иначе
				
			ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
#КонецЕсли
			Исключение
				ПоказатьПредупреждение(,"Не удалось выполнить внешнюю обработку");
			КонецПопытки;
		КонецПопытки;
	//КонецЕсли;
КонецПроцедуры


#Если ТолстыйКлиентОбычноеПриложение  Тогда
&НаКлиенте
Процедура ВернутьВн(ДвоичныеДанные)
	//ИмяВременФ=ПолучитьИмяВременногоФайла();
	//ДвоичныеДанные.Записать(ИмяВременФ);
	ВнешняяОбработка=ВнешниеОбработки.Создать(ДвоичныеДанные);
	Фоорма=ВнешняяОбработка.ПолучитьФорму(,ЭтаФорма);
	Попытка
		Фоорма.УФ=ЭтаФорма;
	Исключение
	КонецПопытки;
	Фоорма.Открыть();
Конецпроцедуры      	
#КонецЕсли

&НаСервере
Процедура СохранитьXLSДЛяЗагрузиВСБНаСервере(Табл)
	// Вставить содержимое обработчика.
	Макет=Справочники.Продукция_ХамелеонЦРПТ.ПолучитьМакет("XLSСб");
	ОлС=Макет.ПолучитьОбласть("Строка");
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Продукция_ХамелеонЦРПТ.Ссылка,
		|	Продукция_ХамелеонЦРПТ.GTIN,
		|	Продукция_ХамелеонЦРПТ.Наименование
		|ИЗ
		|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
		|ГДЕ
		|	(Продукция_ХамелеонЦРПТ.Тип = &Тип ИЛИ Продукция_ХамелеонЦРПТ.Тип = &Тип1)
		|	И НЕ Продукция_ХамелеонЦРПТ.ПометкаУдаления
		|	И НЕ Продукция_ХамелеонЦРПТ.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипПродукции_ХамелеонЦРПТ.Табак);
	Запрос.УстановитьПараметр("Тип1", Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.GTIN) Тогда	
			ОлС.Параметры.Код=Обработки._Запуск_ХамелеонЦРПТ.ДополнитьСтроку_11(xmlString(ВыборкаДетальныеЗаписи.GTIN),14,"0");
			ОлС.Параметры.Наименование=ВыборкаДетальныеЗаписи.Наименование;
			Табл.Вывести(ОЛС);
		КонецЕсли;
			
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьXLSДЛяЗагрузиВСБИС(Команда)
	Табл=Новый ТабличныйДокумент;
	СохранитьXLSДЛяЗагрузиВСБНаСервере(Табл);
	
	ДиалогФыбораФайла= НОвый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогФыбораФайла.Заголовок="Выберите файл для сохранения xls" ;
	ДиалогФыбораФайла.Фильтр="Файл xls (*.xls)|*.xls";
	ДиалогФыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогФыбораФайла.Расширение					=	"xls";
	ДиалогФыбораФайла.ИндексФильтра					=	0;
	ДиалогФыбораФайла.ПолноеИмяФайла				=	"";
	ДиалогФыбораФайла.ПроверятьСуществованиеФайла	=	Истина;
	
	Подразделение=НеопределенО;
	ДиалогФыбораФайла.Показать(Новый ОписаниеОповещения("ВыборФайлаСохранить",ЭтаФорма,Табл));

	
	
КонецПроцедуры

	
&наКлиенте
Процедура ВыборФайлаСохранить(ВыборЗагрExcel,РР) Экспорт
	Если ЗначениеЗАполнено(ВыборЗагрExcel)
		И ВыборЗагрExcel.Количество()>0  тогда
	
		ИмяФ=ВыборЗагрExcel[0];
		РР.НачатьЗапись(,ИмяФ,ТипФайлаТабличногоДокумента.XLS);
		//РР.НачатьЗапись(,Сред(ИмяФ,1,СтрДлина(ИмяФ)-1),ТипФайлаТабличногоДокумента.XLS)
		
	КонецЕсли
	
КонецПроцедуры


&НаКлиенте
Процедура ЗарегестрироватьЦРПТОстатокБелье(Команда)
	// Вставить содержимое обработчика.
	СозданиеОстатковПоПродукциям("Белье",Ложь,Неопределено)  ;
	Элементы.Список.Обновить();;
КонецПроцедуры


&НаКлиенте
Процедура ЗарегестрироватьЦРПТОстатокОдежда(Команда)
	// Вставить содержимое обработчика.
	
	СозданиеОстатковПоПродукциям("Одежда",Ложь,Неопределено)  ;
	Элементы.Список.Обновить();;
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьПродукциюПоКМДляВыделеных(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Стр_1 Из Элементы.Список.ВыделенныеСтроки Цикл
		Форм=ПолучитьФорму("Справочник.Продукция_ХамелеонЦРПТ.Форма.ФормаЭлемента", Новый Структура("Ключ",Стр_1));
		Форм.ОбновитьПродукциюПоКМ(Команда)
	Конеццикла;
	Элементы.Список.Обновить();
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьПроудкциюПоGTINВыделенные(Команда)
		Для Каждого Стр_1 Из Элементы.Список.ВыделенныеСтроки Цикл
		Форм=ПолучитьФорму("Справочник.Продукция_ХамелеонЦРПТ.Форма.ФормаЭлемента", Новый Структура("Ключ",Стр_1));
		Форм.ОбновитьПродукцияюПоGTIN(Команда)
	Конеццикла;
	Элементы.Список.Обновить();

КонецПроцедуры


Функция ВернутьМ()
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	             МассивКМ=Новый массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Продукция_ХамелеонЦРПТ.Ссылка,
		|	Продукция_ХамелеонЦРПТ.Наименование,
		|	Продукция_ХамелеонЦРПТ.GTIN
		|ИЗ
		|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
		|ГДЕ
		|	Продукция_ХамелеонЦРПТ.GTIN <> 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Попытка
			//Ссылк=ВыборкаДетальныеЗаписи.Ссылка;
			Если Число(ВыборкаДетальныеЗаписи.Наименование)=Число(ВыборкаДетальныеЗаписи.GTIN) Тогда
				МассивКМ.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
				
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	Возврат МассивКМ
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

Конецфункции

&НаКлиенте
Процедура ОббновитьИнформациюПоКМ(Команда)
	ВернутьМ=ВернутьМ();
	Для Каждого Стр_1 Из ВернутьМ Цикл
		Форм=ПолучитьФорму("Справочник.Продукция_ХамелеонЦРПТ.Форма.ФормаЭлемента", Новый Структура("Ключ",Стр_1));
		Форм.ОбновитьПродукцияюПоGTIN(Команда)
	Конеццикла;
	Элементы.Список.Обновить();
	
	//ОббновитьИнформациюПоКМНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура РедактироватьКарточки(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Стр_1 Из Элементы.Список.ВыделенныеСтроки   Цикл
		Форм=ПолучитьФорму("Справочник.Продукция_ХамелеонЦРПТ.Форма.ФормаЭлемента",Новый структура("Ключ",Стр_1));
		Форм.ЗарегистрироватьВКаталогеТоваров(Команда);
	Конеццикла
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьнаМодерацию(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Стр_1 Из Элементы.Список.ВыделенныеСтроки   Цикл
		Форм=ПолучитьФорму("Справочник.Продукция_ХамелеонЦРПТ.Форма.ФормаЭлемента",Новый структура("Ключ",Стр_1));
		Форм.ОтправитьНаМодерацию(Команда);
	Конеццикла
	
КонецПроцедуры


&НаКлиенте
Процедура ПописатьИОпубликовать(Команда)
	// Вставить содержимое обработчика.
	Для Каждого Стр_1 Из Элементы.Список.ВыделенныеСтроки   Цикл
		Форм=ПолучитьФорму("Справочник.Продукция_ХамелеонЦРПТ.Форма.ФормаЭлемента",Новый структура("Ключ",Стр_1));
		Форм.ПодписатьИОпубликовать(Команда);
	Конеццикла
	
КонецПроцедуры


&НаКлиенте
Процедура ОтчетОДвжиенииПоВыделенным(Команда)
		МассивКМ=Новый СписокЗначений;
	Для Каждого Стр Из Элементы.Список.ВыделенныеСтроки Цикл
		Если ЗначениеЗаполненО(Стр) Тогда
			МассивКМ.Добавить(Стр);
		КонецЕсли;
		
	Конеццикла;
	
	Форм=ОткрытьФорму("Отчет.ОтчетПоКМ_ХамелеонЦРПТ.Форма.ФормаОтчета");
	Форм.ПрименитьОтбор(МассивКМ);
	

КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьПродукциюИзНК(Команда)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	ЗагрузитьИЗНКНаклиенте(Ложь)
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПродукцияСТАкимГТИН(ГТИН)
	Попытка
		Возврат ЗначениеЗаполнено(Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН)))
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИЗНКНаклиенте(ТолькоНовые=Ложь)
	
	Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Если НЕ Форм.Открыта() Тогда
		Форм.Открыть(); 
	КонецЕсли;
	
		Thumbprint_1=ПолучитьИзПользователя(Форм.Пользователь);
//	Если Не ЗначениеЗаполнено(объект.GTIN) тогда
//		Возврат;
//	КонецЕслИ;	
	
	
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
			Прокси=Новый ИнтернетПрокси;
			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
			
		//	HTTPСервисЗапрос=Новый HTTPСоединение("account.integrators.nk.crpt.tech",,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		//	HTTPСервисЗапрос=Новый HTTPСоединение("xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.КаталогСайт,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		Иначе
		///	HTTPСервисЗапрос=Новый HTTPСоединение("account.integrators.nk.crpt.tech",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			//HTTPСервисЗапрос=Новый HTTPСоединение("xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.КаталогСайт,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		
	
	
	
	crsfToken="";
	Срегистра="";
	Куки="";
	
	Если ПодключилисьОк(Thumbprint_1,crsfToken,Срегистра,Куки,HTTPСервисЗапрос) Тогда
		
		Попытка
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
			Прокси=Новый ИнтернетПрокси;
			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
			
		//	HTTPСервисЗапрос=Новый HTTPСоединение("account.integrators.nk.crpt.tech",,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		//	HTTPСервисЗапрос=Новый HTTPСоединение("xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.КаталогСайт,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		Иначе
		///	HTTPСервисЗапрос=Новый HTTPСоединение("account.integrators.nk.crpt.tech",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			//HTTPСервисЗапрос=Новый HTTPСоединение("xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.КаталогСайт,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		
		
		Тотал=10000;
		Страница=0;
		Пока Истина Цикл
			
			Если Страница*100>=Тотал Тогда
				Прервать;
			КонецЕсли;
			
			Страница=Страница+1;
		
			Тело=Запрос_1(Страница);
			
			
				
				
				HTTPЗапрос=Новый HTTPЗапрос("rest/goods/list");
				
		HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
			HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
								
						
			//	5HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
			//HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
			HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Credentials", "true");
			HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Headers", "Origin, X-Requested-With, Cont…cept, Credentials, Set-Cookie");
			HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Methods", "*");
			
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "private, max-age=0, no-cache, no-store");
			HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
	//		HTTPЗапрос.Заголовки.Вставить("Sec-Fetch-Dest","empty");
	//		HTTPЗапрос.Заголовки.Вставить("Sec-Fetch-Mode", "cors");
			HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	//		HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
			
			HTTPЗапрос.Заголовки.Вставить("Host", Thumbprint_1.КаталогСайт);
			//"xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai");
			HTTPЗапрос.Заголовки.Вставить("Origin", "https://"+Thumbprint_1.КаталогСайт);
			HTTPЗапрос.Заголовки.Вставить("Referer", "https://"+Thumbprint_1.КаталогСайт+"/product?type=unit");
			HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0");
		
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
			
			HTTPЗапрос.Заголовки.Вставить("X-Csrf-Token",crsfToken);
		
			//	
			//	
			//	HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
			//			HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
			//			
			//HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
			//		
			//		HTTPЗапрос.Заголовки.Вставить("X-Csrf-Token",crsfToken);
			//	
			//HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
			//				
			//	
			//	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				#Если ВебКлиент Тогда
						HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);	
				#Иначе
						HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);	
				#КонецЕсли
				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
				NNN=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
				
				Тотал=NNN.totalObjects;
				
				Для Каждого СтР_1 Из NNN.data Цикл
					
					
					
					Попытка
					goods=Стр_1.goods;
					Если goods=Неопределено Тогда
						goods=Стр_1.draft;
						
						Если ТолькоНовые=Истина тогда
							
							Если ЕстьПродукцияСТАкимГТИН(goods.GTIN) Тогда
								Продолжить;
							Конецесли;
							
						Конецесли;
						
						
						id=                    goods.id;
						
						HTTPЗапрос=Новый HTTPЗапрос("rest/draft/"+Формат(id,"ЧГ="));
						
						HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
						HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
				
						HTTPЗапрос.Заголовки.Вставить("X-Csrf-Token",crsfToken);
							
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						
						NNN_1=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
						
						
					Иначе
						
						Если ТолькоНовые=Истина тогда
							
							Если ЕстьПродукцияСТАкимГТИН(goods.GTIN) Тогда
								Продолжить;
							Конецесли;
							
						Конецесли;

						id=                    goods.goodId;
						
						HTTPЗапрос=Новый HTTPЗапрос("rest/goods/"+Формат(id,"ЧГ="));
						
						HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
						HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
						HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
				
						HTTPЗапрос.Заголовки.Вставить("X-Csrf-Token",crsfToken);
							
						HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
						//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
						Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
						
						NNN_1=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
					КонецЕсли;
					
					//Если 	goods.
					Если goods.category="Сигары, сигариллы, сигареты, папиросы" Тогда
						СпрПр=СоздатьПродукциюПоГТИН(goods,NNN_1,ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак"),ТолькоНовые);
					ИначеЕсли goods.category="Табак" Тогда
						СпрПр=СоздатьПродукциюПоГТИН(goods,NNN_1,ПредопределенноеЗначение("Перечисление.ТипПродукции_ХамелеонЦРПТ.Табак"),ТолькоНовые);
					Иначе
						СпрПр=СоздатьПродукциюПоГТИН(goods,NNN_1,,ТолькоНовые);
						
					КонецЕслИ;
					
					Если ЗначениеЗаполнено(СпрПр) Тогда
						Форм=ПолучитьФорму("Справочник.Продукция_ХамелеонЦРПТ.Форма.ФормаЭлемента",
						Новый Структура("Ключ",СпрПр));
						
						        	Форм.ОбновитьтипПродукции(NNN_1);
												
												Если ЗначениеЗаполнено(Форм.Объект.Тип) тогда
												
													Форм.ОбновляемВсеДанныеНаСервере(NNN_1);
													Форм.Записать();
												КонецЕсли;
							//				
							//Если NNN.data[0].draft<>Неопределено Тогда
							//					id=                    NNN.data[0].draft.id;
							//					
							//					HTTPЗапрос=Новый HTTPЗапрос("rest/draft/"+Формат(id,"ЧГ="));
							//					
							//					HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
							//					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
							//					HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
							//			
							//					HTTPЗапрос.Заголовки.Вставить("X-Csrf-Token",crsfToken);
							//						
							//					HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
							//					//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
							//					Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
							//					
							//					NNN=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
							//					Форм.ОбновитьтипПродукции(NNN);
							//					
							//					Если ЗначениеЗаполнено(Форм.Объект.Тип) тогда
							//					
							//						Форм.ОбновляемВсеДанныеНаСервере(NNN);
							//						Форм.Записать();
							//					КонецЕсли;
							//					
							//					
							//				Иначе
							//					id=                    NNN.data[0].goods.goodId;
							//					
							//					HTTPЗапрос=Новый HTTPЗапрос("rest/goods/"+Формат(id,"ЧГ="));
							//					
							//					HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
							//					HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
							//					HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
							//			
							//					HTTPЗапрос.Заголовки.Вставить("X-Csrf-Token",crsfToken);
							//						
							//					HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
							//					//HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.ANSI);
							//					Ответ=HTTPСервисЗапрос.Получить(HTTPЗапрос);
							//					
							//					NNN=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
							//					Форм.ОбновитьтипПродукции(NNN);
							//					
							//					Если ЗначениеЗаполнено(Форм.Объект.Тип) тогда
							//					
							//						Форм.ОбновляемВсеДанныеНаСервере(NNN);
							//					КонецЕсли;
							//					
							//				КонецЕсли;
						
						//Форм.ОбновитьтипПродукции(NNN);
						//Если ЗначениеЗаполнено(Форм.Объект.Тип) тогда
						//	Форм.ОбновляемВсеДанныеНаСервере(NNN);
						//	Форм.Записать();
						//КонецЕсли;
					  	
					
					КонецЕсли;
					Исключение
					КонецПопытки;
					
				Конеццикла;
				
				//Возврат;
		Конеццикла;
		
	Исключение
		
	КонецПопытки;
	КонецЕсли;

	
	Элементы.Список.Обновить();;
	
КонецПроцедуры

Функция СоздатьПродукциюПоГТИН(ГООДС,NNN,Тип=Неопределено,ТолькоНовые)
	
	
	
	
	ГТИН=ГООДС.gtin;
	
	
	
	
	
	СпрПр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("gtin",Число(ГТИН));
	Если ЗначениеЗаполнено(СпрПр) тогда
		Если ТолькоНовые=Истина Тогда
			Возврат Неопределено
		КонецЕсли;
		СпрПр=СпрПр.ПолучитьОбъект();
	Иначе
		СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
	КонецЕсли;
	СпрПр.GTIN=Число(ГТИН);
	Если ЗначениеЗаполнено(Тип) Тогда
		СпрПр.Тип=Тип;//Перечисления.ТипПродукции_ХамелеонЦРПТ.АльтернативныйТабак;
	КонецЕсли;
	ГООДС.Свойство("brand",СпрПр.БрендТорговаяМарка);
	Если ГООДС.Свойство("name",СпрПр.Наименование) ТОгда
		Спрпр.НаименованиеТовара=ГООДС.name;
	КонецЕсли;
	Для Каждого Стр_1 Из NNN.categories Цикл
		Если Стр_1.classifier="tnved" Тогда
			ТНВЭД=СокрЛП(Сред(Стр_1.categoryName,1,Найти(Стр_1.categoryName," ")-1));
			Если СтрДлина(ТНВЭД)>=10 Тогда
				Спрпр.КодТНВЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.НайтиПоКоду(ТНВЭД);
				Если не ЗначениеЗаполнено(Спрпр.КодТНВЭД) Тогда
					ТнвЭД=Справочники.КодТНВЭД_ХамелеонЦРПТ.СоздатьЭлемент();
					ТнвЭД.Код=ТНВЭД;
					ТнвЭД.Наименование=ТНВЭД;
					ТнвЭД.Записать();
					СпрПр.КодТНВЭД=ТнвЭД.Ссылка;
				КонецЕсли;
			Иначе
				СпрПр.КодТНВЭДКороткий=ТНВЭД;
			КонецЕсли;
			
			
		КонецЕсли;
	Конеццикла;
	
	//СпрПр.КодТНВЭД=NNN.
	
	СпрПр.Записать();	
	
	
	Возврат СпрПр.Ссылка
КонецФункции

Функция Запрос_1(Страница)
	
	Возврат "{""pageSize"":100,""pageNumber"":"+xmlString(Страница)+",""sort"":{""field"":""created"",""direction"":""DESC""},""fields"":[""photo"",""created"",""gtin"",""name"",""category"",""packages"",""brand"",""status"",""categories""],""filter"":{}}";
КонецФункции
	
&НаКлиенте
Функция ПодключилисьОк(Thumbprint_1,CSRFДляНК,Срегистра,КукиДляНК,HTTPСервисЗапрос)
	
	Возврат ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ПодключилисьОк(Thumbprint_1,CSRFДляНК,Срегистра,КукиДляНК,HTTPСервисЗапрос)	
КонецФункции


Функция Запрос_Архив(Страница)
	
	Возврат "{""pageSize"":10,""pageNumber"":"+xmlString(Страница)+",""sort"":{""field"":""created"",""direction"":""DESC""},""fields"":[""photo"",""created"",""gtin"",""name"",""category"",""packages"",""brand"",""status"",""categories""],""filter"":{""status"":""archive""}}";
КонецФункции
	

&НаКлиенте
Процедура ОновитьКарточкиВАрхиве(Команда)
	// Вставить содержимое обработчика.
Форм=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	Если НЕ Форм.Открыта() Тогда
		Форм.Открыть(); 
	КонецЕсли;
	
		Thumbprint_1=ПолучитьИзПользователя(Форм.Пользователь);
//	Если Не ЗначениеЗаполнено(объект.GTIN) тогда
//		Возврат;
//	КонецЕслИ;	
	
	
	Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
			Прокси=Новый ИнтернетПрокси;
			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
			
		//	HTTPСервисЗапрос=Новый HTTPСоединение("account.integrators.nk.crpt.tech",,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		//	HTTPСервисЗапрос=Новый HTTPСоединение("xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.КаталогСайт,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		Иначе
		///	HTTPСервисЗапрос=Новый HTTPСоединение("account.integrators.nk.crpt.tech",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			//HTTPСервисЗапрос=Новый HTTPСоединение("xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.КаталогСайт,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		
	
	
	
	crsfToken="";
	Срегистра="";
	Куки="";
	
	Если ПодключилисьОк(Thumbprint_1,crsfToken,Срегистра,Куки,HTTPСервисЗапрос) Тогда
		
		Попытка
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
			Прокси=Новый ИнтернетПрокси;
			Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
			
			
		//	HTTPСервисЗапрос=Новый HTTPСоединение("account.integrators.nk.crpt.tech",,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		//	HTTPСервисЗапрос=Новый HTTPСоединение("xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.КаталогСайт,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		Иначе
		///	HTTPСервисЗапрос=Новый HTTPСоединение("account.integrators.nk.crpt.tech",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			//HTTPСервисЗапрос=Новый HTTPСоединение("xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.КаталогСайт,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
		КонецЕсли;
		
		
		Тотал=100;
		Страница=0;
		Пока Истина Цикл
			
			Если Страница*10>=Тотал Тогда
				Прервать;
			КонецЕсли;
			
			Страница=Страница+1;
		
			Тело=Запрос_Архив(Страница);
			
			
				
				
				HTTPЗапрос=Новый HTTPЗапрос("rest/goods/list");
				
		HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
			HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
								
						
			//	5HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
			//HTTPЗапрос.Заголовки.Вставить("Accept-Encoding","gzip, deflate, br");
			HTTPЗапрос.Заголовки.Вставить("Accept-Language","ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
			HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Credentials", "true");
			HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Headers", "Origin, X-Requested-With, Cont…cept, Credentials, Set-Cookie");
			HTTPЗапрос.Заголовки.Вставить("Access-Control-Allow-Methods", "*");
			
			HTTPЗапрос.Заголовки.Вставить("Cache-Control", "private, max-age=0, no-cache, no-store");
			HTTPЗапрос.Заголовки.Вставить("Connection","keep-alive");
	//		HTTPЗапрос.Заголовки.Вставить("Sec-Fetch-Dest","empty");
	//		HTTPЗапрос.Заголовки.Вставить("Sec-Fetch-Mode", "cors");
			HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
				HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	//		HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
			
			HTTPЗапрос.Заголовки.Вставить("Host", Thumbprint_1.КаталогСайт);
			//"xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai");
			HTTPЗапрос.Заголовки.Вставить("Origin", "https://"+Thumbprint_1.КаталогСайт);
			HTTPЗапрос.Заголовки.Вставить("Referer", "https://"+Thumbprint_1.КаталогСайт+"/product?type=unit");
			HTTPЗапрос.Заголовки.Вставить("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0");
		
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
			
			HTTPЗапрос.Заголовки.Вставить("X-Csrf-Token",crsfToken);
		
			//	
			//	
			//	HTTPЗапрос.Заголовки.Вставить("Accept","application/json, text/plain, */*");
			//			HTTPЗапрос.Заголовки.Вставить("Cookie",Куки);
			//			
			//HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Срегистра);
			//		
			//		HTTPЗапрос.Заголовки.Вставить("X-Csrf-Token",crsfToken);
			//	
			//HTTPЗапрос.Заголовки.Вставить("Content-Length",Формат(СтрДлина(Тело),"ЧГ="));
			//				
			//	
			//	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
				#Если ВебКлиент Тогда
						HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8);	
				#Иначе
						HTTPЗапрос.УстановитьТелоИзСтроки(Тело,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);	
				#КонецЕсли
				Ответ=HTTPСервисЗапрос.ОтправитьДляОбработки(HTTPЗапрос);
				NNN=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
				
				Тотал=NNN.totalObjects;
				
				Для Каждого СтР_1 Из NNN.data Цикл
					//Попытка
					goods=Стр_1.goods;
					Если goods=Неопределено Тогда
						goods=Стр_1.draft;
						
						//ОбновитьСтатусПоGTINВархив(goods.gtin);
						
				КонецЕсли;
					ОбновитьСтатусПоGTINВархив(goods.gtin)
	
					//Если 	goods.
					
				Конеццикла;
				
				//Возврат;
		Конеццикла;
		
	Исключение
		
	КонецПопытки;
	КонецЕсли;

	
	Элементы.Список.Обновить();;
	
	
КонецПроцедуры

Процедура ОбновитьСтатусПоGTINВархив(gtin)
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Продукция_ХамелеонЦРПТ.Ссылка
		|ИЗ
		|	Справочник.Продукция_ХамелеонЦРПТ КАК Продукция_ХамелеонЦРПТ
		|ГДЕ
		|	Продукция_ХамелеонЦРПТ.GTIN = &GTIN";
	
	Запрос.УстановитьПараметр("GTIN", число(GTIN));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ПолОб=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОБъект();
		ПолОб.СтатусКарточки=Перечисления.СтатусыКарточекВНК_ХамелеонЦРПТ.archive;
		ПолОб.Записать();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
	
Конецпроцедуры

&НаКлиенте
Процедура ЗагрузитьТолькоНовыеКарточкиИЗНК(Команда)
		ЗагрузитьИЗНКНаклиенте(Истина)

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВыделенныеИзНК(Команда)
	// Вставить содержимое обработчика.
	Для Каждого СтР_1 Из Элементы.Список.ВыделенныеСтроки Цикл
		Форм=ПолучитьФорму("Справочник.Продукция_ХамелеонЦРПТ.Форма.ФормаЭлемента",Новый Структура("Ключ",Стр_1));
		Форм.ОбновитьКарточкуИзНК(Команда);
	Конеццикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзНКПоAPI(Команда)
	// Вставить содержимое обработчика.
	отказ=Истина;
Обр=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
	
	Thumbprint_1=ПолучитьИзПользователя(Обр.Пользователь);	
	
	
	Если ЗначениеЗаполнено(Thumbprint_1.КлючAPIККМТ) тогда
		КлючПодключения="apikey="+Thumbprint_1.КлючAPIККМТ;	
	Иначе
		
			СерийныйНомер="";

			СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
							СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
									СерийныйНомер=СтруктураНастроек.СерийныйНомер;
							
								Если Не ЗначениеЗаполнено(СРегистра)  Тогда
									СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
								Иначе
								   
										Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
											Прокси=Новый ИнтернетПрокси;
											Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										Иначе
										
											HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
										КонецЕсли;
										
										HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
										HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
										HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
										//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
										///Константин           
										Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
										//Текст1=Ответ.ПолучитьТелоКакСтроку();
										Если Ответ.КодСостояния<>200 Тогда
											СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
										КонецЕсли;
											
								КонецЕсли;
								Если Не ЗначениеЗАполнено(Срегистра) Тогда
									Возврат;
								Конецесли;
		КлючПодключения="";	
		
		
	Конецесли;
	
	
	//Тотал=1;
	Смещение=0;
	Пока Истина Цикл
	
		Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
				Прокси=Новый ИнтернетПрокси;
				Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
				
				
			//	HTTPСервисЗапрос=Новый HTTPСоединение("account.integrators.nk.crpt.tech",,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			//	HTTPСервисЗапрос=Новый HTTPСоединение("xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.КаталогСайтAPI,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			Иначе
			///	HTTPСервисЗапрос=Новый HTTPСоединение("account.integrators.nk.crpt.tech",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				//HTTPСервисЗапрос=Новый HTTPСоединение("xn--j1ab.xn----7sbabas4ajkhfocclk9d3cvfsa.xn--p1ai",,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
				HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.КаталогСайтAPI,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
			КонецЕсли;
			
			Если значениеЗаполнено(КлючПодключения ) тогда
				Если Смещение=0 Тогда
					ЗапросТекст="v3/linked-gtins?apikey="+Thumbprint_1.КлючAPIККМТ+"&limit=1000&offset="+"0";
				Иначе
					ЗапросТекст="v3/linked-gtins?apikey="+Thumbprint_1.КлючAPIККМТ+"&limit=1000&offset="+Формат(Смещение,"ЧГ=");
				Конецесли;
				
				
					HTTPЗапрос=Новый HTTPЗапрос(ЗапросТекст);
				//Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//HTTPЗапрос=Новый HTTPЗапрос("v3/linked-gtins?"+КлючПодключения );
			Иначе
				Если Смещение=0 Тогда
					
					ЗапросТекст="v3/linked-gtins?limit=1000&offset="+"0";
				иначе			
					ЗапросТекст="v3/linked-gtins?limit=1000&offset="+Формат(Смещение,"ЧГ=");
				конецесли;
						HTTPЗапрос=Новый HTTPЗапрос(ЗапросТекст );
					HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
						
						
					Конецесли;
			Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				Если Ответ.КодСостояния<>200 Тогда
					ПоказатьПредупреждение(,"Не смогли получить GTIN с каталога маркированных товаров "+Ответ.ПолучитьТелоКакСтроку());
					Сообщить(Ответ.ПолучитьТелоКакСтроку());
					Возврат;
				КонецЕсли;
				
				NNN=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON_Соответствие(Ответ.ПолучитьТелоКакСтроку());
				
				Для Каждого Стр_1 Из NNN["result"]["linked_gtins"]   Цикл
					
					ГТИН=Стр_1["gtin"];
					
					
				Если значениеЗаполнено(КлючПодключения ) тогда
					//HTTPЗапрос=Новый HTTPЗапрос("v3/linked-gtins?apikey="+Thumbprint_1.КлючAPIККМТ+"&limit=20" );
					HTTPЗапрос=Новый HTTPЗапрос("v3/product?apikey="+Thumbprint_1.КлючAPIККМТ+"&gtin="+ГТИН);
				//Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//HTTPЗапрос=Новый HTTPЗапрос("v3/linked-gtins?"+КлючПодключения );
			Иначе
					HTTPЗапрос=Новый HTTPЗапрос("v3/product?gtin="+ГТИН);
						//HTTPЗапрос=Новый HTTPЗапрос("v3/linked-gtins" );
					HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
						
						
					Конецесли;
		
					
					Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
					Если Ответ.КодСостояния<>200 Тогда
						Сообщить("Не удалось загрузить ГТИН "+ГТИН );
						Сообщить(Ответ.ПолучитьТелоКакСтроку());
						Продолжить;
					КонецЕсли;
					NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
					
					Для каждого Стр_1 Из NNN_1.result Цикл
						
						ЗаписатьКарточкуТовара(Стр_1,ГТИН);
						
						
					Конеццикла;
					
					
				Конеццикла;
				Если   NNN["result"]["linked_gtins"].Количество()<1000 Тогда
					Прервать;
				Конецесли;
				Смещение=Смещение+1000;
	Конеццикла;	
		
		
	Элементы.Список.Обновить();
	
		
	
КонецПроцедуры


Процедура ЗаписатьКарточкуТовара(Стр_1,ГТИН )
	спрПр=Справочники.Продукция_ХамелеонЦРПТ.НайтиПоРеквизиту("GTIN",Число(ГТИН));
	Если ЗначениеЗаполнено(СпрПр) Тогда
		СпрПр=СпрПр.ПолучитьОбъект();
	Иначе
		СпрПр=Справочники.Продукция_ХамелеонЦРПТ.СоздатьЭлемент();
		СПрПр.GTIN=Число(ГТИН)
	КонецеслИ;
	Стр_1.Свойство("good_name",СпрПр.НаименованиеТовара);
	СпрПр.Наименование=СпрПр.НаименованиеТовара;
	стр_1.Свойство("brand_name",СпрПр.БрендТорговаяМарка);
	стр_1.Свойство("brand_name",СпрПр.БрендТорговаяМарка);
	
	Сет=неопределено;
	Если стр_1.Свойство("is_Set",Сет) тогда
		Если Сет=Истина Тогда
			СпрПр.ТипУпаковки=Справочники.ТипУпаковкиОбщий_ХамелеонЦРПТ.НайтиПоНаименованию("SET");
			Если Не ЗначениеЗаполнено(СпрПр.ТипУпаковки) Тогда
				
				СпрТип=Справочники.ТипУпаковкиОбщий_ХамелеонЦРПТ.СоздатьЭлемент();
				СпрТип.Наименование="SET";
				СпрТип.Записать();
				СпрПр.ТипУпаковки=СпРТип.Ссылка;
				
			Конецесли;
			
		Конецесли;
		
	Конецесли;
	
	Сет=Неопределено;
	Если Стр_1.Свойство("is_Kit",Сет) тогда
		Если Сет=Истина Тогда
			СпрПр.ТипУпаковки=Справочники.ТипУпаковкиОбщий_ХамелеонЦРПТ.НайтиПоНаименованию("BUNDLE");
			Если Не ЗначениеЗаполнено(СпрПр.ТипУпаковки) Тогда
				
				СпрТип=Справочники.ТипУпаковкиОбщий_ХамелеонЦРПТ.СоздатьЭлемент();
				СпрТип.Наименование="BUNDLE";
				СпрТип.Записать();
				СпрПр.ТипУпаковки=СпРТип.Ссылка;
				
			Конецесли;
		Конецесли;
		
	Конецесли;
	
	
	Статус="";
	
	Если Стр_1.Свойство("good_status",Статус) Тогда
		Попытка
			СпрПр.СтатусКарточки=Перечисления.СтатусыКарточекВНК_ХамелеонЦРПТ[Статус]
		Исключение
		КонецПопытки;
	Конецесли;
	Для Каждого Стр_2 Из Стр_1.good_attrs Цикл
		Если Стр_2.attr_name="Группа ТНВЭД" Тогда
			СпрПр.КодТНВЭДКороткий=Стр_2.attr_value;
		ИначеЕсли Стр_2.attr_name="Код ТНВЭД" Тогда
			СпрПр.КодТНВЭД=Обработки._Запуск_ХамелеонЦРПТ.КодТВЭДПоКОду(Стр_2.attr_value);
		ИначеЕсли Стр_2.attr_name="Товарный знак" Тогда
			СпрПр.БрендТорговаяМарка=Стр_2.attr_value;
		КонецеслИ;
	Конеццикла;
	
	
	СпрПр.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзНКПоAPI_GTIN(Команда)
	// Вставить содержимое обработчика.
	Форм=ОткрытьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.ВводСтроки",,,,,,Новый ОПисаниеОповещения("ВводГТИН",ЭтаФорма),РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Форм.Заголовок="Укажите ГТИН карточки для загрузки из ЦРПТ";
	//Форм.Заголовок="Аннулирование транзакций";
	Форм.Строка="";
КонецПроцедуры

&НаКлиенте
Процедура ВводГТИН(РР,ДД)
	
	Если ЗначениеЗАполнено(РР) Тогда
		        ГТИН=РР;
				
			Обр=ПолучитьФорму("Обработка._Запуск_ХамелеонЦРПТ.Форма.Форма");
				
				Thumbprint_1=ПолучитьИзПользователя(Обр.Пользователь);	
				
				
				Если ЗначениеЗаполнено(Thumbprint_1.КлючAPIККМТ) тогда
					КлючПодключения="apikey="+Thumbprint_1.КлючAPIККМТ;	
				Иначе
					
						СерийныйНомер="";

						СтруктураНастроек=Неопределено;                                                    СерийныйНомер="";
										СРегистра=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ПолучитьТокенСрегистра(Thumbprint_1.Thumbprint_1,СтруктураНастроек);
												СерийныйНомер=СтруктураНастроек.СерийныйНомер;
										
											Если Не ЗначениеЗаполнено(СРегистра)  Тогда
												СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
											Иначе
											   
													Если ЗначениеЗАполнено(Thumbprint_1.АдресПрокси) Тогда
														Прокси=Новый ИнтернетПрокси;
														Прокси.Установить("http",Thumbprint_1.АдресПрокси,Thumbprint_1.ПортПрокси,Thumbprint_1.ПользовательПрокси,Thumbprint_1.ПарольПрокси);
													
														HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,Прокси,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
													Иначе
													
														HTTPСервисЗапрос=Новый HTTPСоединение(Thumbprint_1.АдресДляПолученияТокена,,,,,Thumbprint_1.Таймаут,Новый ЗащищенноеСоединениеopenSSL());
													КонецЕсли;
													
													HTTPЗапрос=Новый HTTPЗапрос("api/v3/facade/balance/all");
													HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
													HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
													//HTTPЗапрос.Заголовки.Вставить("Host","ismotp.crptech.ru");
													///Константин           
													Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
													//Текст1=Ответ.ПолучитьТелоКакСтроку();
													Если Ответ.КодСостояния<>200 Тогда
														СРегистра=ОбщиеМетоды_НаКлиенте_ХамелеонЦРПТ.Получение_Токена(Thumbprint_1,СерийныйНомер);	
													КонецЕсли;
														
											КонецЕсли;
											Если Не ЗначениеЗАполнено(Срегистра) Тогда
												Возврат;
											Конецесли;
					КлючПодключения="";	
					
					
				Конецесли;
				
				

				Если значениеЗаполнено(КлючПодключения ) тогда
					//HTTPЗапрос=Новый HTTPЗапрос("v3/linked-gtins?apikey="+Thumbprint_1.КлючAPIККМТ+"&limit=20" );
					HTTPЗапрос=Новый HTTPЗапрос("v3/product?apikey="+Thumbprint_1.КлючAPIККМТ+"&gtin="+ГТИН);
				//Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
				//HTTPЗапрос=Новый HTTPЗапрос("v3/linked-gtins?"+КлючПодключения );
			Иначе
					HTTPЗапрос=Новый HTTPЗапрос("v3/product?gtin="+ГТИН);
						//HTTPЗапрос=Новый HTTPЗапрос("v3/linked-gtins" );
					HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+СРегистра);
						
						
					Конецесли;
		
					
					Ответ=HTTPСервисЗапрос.ВызватьHTTPМетод("GET",HTTPЗапрос);
					Если Ответ.КодСостояния<>200 Тогда
						Сообщить("Не удалось загрузить ГТИН "+ГТИН );
						Сообщить(Ответ.ПолучитьТелоКакСтроку());
						Возврат;
					КонецЕсли;
					NNN_1=ОбщийМодуль_НаСервере_ХамелеонЦРПТ.ЗаполнитьСтруктуруИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
					
					Для каждого Стр_1 Из NNN_1.result Цикл
						
						ЗаписатьКарточкуТовара(Стр_1,ГТИН);
						
						
					Конеццикла;
					
					
				//Конеццикла;
		
	Конецесли;
	
	Элементы.Список.Обновить();
КонецПроцедуры